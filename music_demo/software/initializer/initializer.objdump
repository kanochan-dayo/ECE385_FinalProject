
initializer.elf:     file format elf32-littlenios2
initializer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200230

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00200020 align 2**12
         filesz 0x00014330 memsz 0x00014330 flags r-x
    LOAD off    0x00016000 vaddr 0x00408000 paddr 0x00214350 align 2**12
         filesz 0x00001c3c memsz 0x00001d9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00200020  00200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013bf4  00200230  00200230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  00213e24  00213e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  00408000  00214350  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00409c3c  00215f8c  00017c3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_0_data 00000000  00215f8c  00215f8c  00017c3c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00409d9c  00409d9c  00017c3c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017c3c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e0  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027e87  00000000  00000000  00018d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a45a  00000000  00000000  00040bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc9f  00000000  00000000  0004b021  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002c74  00000000  00000000  00057cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bc0  00000000  00000000  0005a934  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001908e  00000000  00000000  0005f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00078584  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  000785c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e106  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007e109  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e115  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e116  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e117  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e11b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e11f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007e123  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007e12e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007e139  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0007e144  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  0007e14e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000521c  00000000  00000000  0007e176  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00082202  00000000  00000000  00083392  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
00200230 l    d  .text	00000000 .text
00213e24 l    d  .rodata	00000000 .rodata
00408000 l    d  .rwdata	00000000 .rwdata
00409c3c l    d  .bss	00000000 .bss
00215f8c l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00409d9c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../initializer_bsp//obj/HAL/src/crt0.o
00200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0021414e l     O .rodata	00000010 zeroes.4404
00203ca0 l     F .text	000000bc __sbprintf
0021415e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00203eb0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00205a08 l     F .text	00000008 __fp_unlock
00205a1c l     F .text	0000019c __sinit.part.1
00205bb8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00408000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00408444 l     O .rwdata	00000020 lc_ctype_charset
00408424 l     O .rwdata	00000020 lc_message_charset
00408464 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00214190 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0020908c l     F .text	000000fc __sprint_r.part.0
002142b4 l     O .rodata	00000010 zeroes.4349
0020a6c8 l     F .text	000000bc __sbprintf
002142c4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0020e4d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0020e5e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0020e610 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0020e704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0020e7ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0020e8d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0020eab4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00409c14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0020ed58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0020ee94 l     F .text	00000034 alt_dev_reg
00408a4c l     O .rwdata	00000038 i2c_0
00408a84 l     O .rwdata	00001060 jtag_uart_0
00409ae4 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0020ef80 l     F .text	00000110 optional_irq_callback
0020f0e0 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00210dbc l     F .text	0000020c altera_avalon_jtag_uart_irq
00210fc8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00211600 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
002116f4 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00212900 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00212eac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0021300c l     F .text	0000003c alt_get_errno
00213048 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00409c70 g     O .bss	00000004 alt_instruction_exception_handler
002086d0 g     F .text	00000074 _mprec_log10
002087bc g     F .text	0000008c __any_on
0020ac7c g     F .text	00000054 _isatty_r
0021419c g     O .rodata	00000028 __mprec_tinytens
0020e9f0 g     F .text	0000007c alt_main
0020183c g     F .text	000000c0 _puts_r
00409c9c g     O .bss	00000100 alt_irq
0020acd0 g     F .text	00000060 _lseek_r
00214350 g       *ABS*	00000000 __flash_rwdata_start
0020cf0c g     F .text	00000088 .hidden __eqdf2
00409d9c g       *ABS*	00000000 __alt_heap_start
00201800 g     F .text	0000003c printf
0020aee8 g     F .text	0000009c _wcrtomb_r
00208f4c g     F .text	0000005c __sseek
00205d68 g     F .text	00000010 __sinit
0020ad90 g     F .text	00000140 __swbuf_r
0020683c g     F .text	0000007c _setlocale_r
00205bc0 g     F .text	00000078 __sfmoreglue
0020f7d8 g     F .text	000000a8 alt_avalon_i2c_rx_read
0020ea90 g     F .text	00000024 __malloc_unlock
002109f0 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0020f55c g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0020750c g     F .text	0000015c memmove
00205d50 g     F .text	00000018 _cleanup
00210240 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00207790 g     F .text	000000a8 _Balloc
002015e4 g     F .text	00000070 .hidden __fixsfsi
0020cf94 g     F .text	000000dc .hidden __gtdf2
0021369c g     F .text	00000024 altera_nios2_gen2_irq_init
00200000 g     F .entry	0000000c __reset
00200020 g       *ABS*	00000000 __flash_exceptions_start
0020ac20 g     F .text	0000005c _fstat_r
00409c54 g     O .bss	00000004 errno
00208ec8 g     F .text	00000008 __seofread
00409c5c g     O .bss	00000004 alt_argv
00411be4 g       *ABS*	00000000 _gp
0020ed28 g     F .text	00000030 usleep
00210a34 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00201100 g     F .text	000004e4 .hidden __subsf3
002125a4 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0020f6ec g     F .text	00000044 alt_avalon_i2c_is_busy
004088cc g     O .rwdata	00000180 alt_fd_list
0020f490 g     F .text	000000cc alt_avalon_i2c_master_config_set
00212aa0 g     F .text	00000090 alt_find_dev
002073c4 g     F .text	00000148 memcpy
00200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
00205a10 g     F .text	0000000c _cleanup_r
0020e34c g     F .text	000000dc .hidden __floatsidf
00212f90 g     F .text	0000007c alt_io_redirect
0020d070 g     F .text	000000f4 .hidden __ltdf2
00213e24 g       *ABS*	00000000 __DTOR_END__
00210080 g     F .text	000001c0 alt_avalon_i2c_master_transmit
002018fc g     F .text	00000014 puts
0021388c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00208dac g     F .text	00000074 __fpclassifyd
0020862c g     F .text	000000a4 __ratio
0020a6ac g     F .text	0000001c __vfiprintf_internal
002111c0 g     F .text	0000021c altera_avalon_jtag_uart_read
002017d0 g     F .text	00000030 _printf_r
00408000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00200b58 g     F .text	00000064 .hidden __udivsi3
0020e740 g     F .text	000000ac isatty
00212514 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
002141ec g     O .rodata	000000c8 __mprec_tens
002068b8 g     F .text	0000000c __locale_charset
0020f2fc g     F .text	00000098 alt_avalon_i2c_enable
00409c50 g     O .bss	00000004 __malloc_top_pad
00409c20 g     O .rwdata	00000008 altera_onchip_flash_list
00210924 g     F .text	00000068 alt_avalon_i2c_int_disable
00409bec g     O .rwdata	00000004 __mb_cur_max
002068e8 g     F .text	0000000c _localeconv_r
00207bc4 g     F .text	0000003c __i2b
002061ec g     F .text	000004c8 __sfvwrite_r
00208e20 g     F .text	00000054 _sbrk_r
0020ad30 g     F .text	00000060 _read_r
002128b8 g     F .text	00000028 alt_dcache_flush
00211890 g     F .text	00000168 alt_onchip_flash_erase_block
002002b0 g     F .text	000000b4 SGTL5000_Reg_Rd
00409c0c g     O .rwdata	00000004 alt_max_fd
0020a914 g     F .text	000000f0 _fclose_r
002059d8 g     F .text	00000030 fflush
00409c4c g     O .bss	00000004 __malloc_max_sbrked_mem
0021044c g     F .text	00000210 alt_avalon_i2c_master_receive
0020bc90 g     F .text	000008ac .hidden __adddf3
002083d4 g     F .text	0000010c __b2d
0020b6cc g     F .text	000005c4 .hidden __umoddi3
0020e914 g     F .text	000000dc lseek
0021098c g     F .text	00000064 alt_avalon_i2c_int_enable
00409be4 g     O .rwdata	00000004 _global_impure_ptr
00208848 g     F .text	00000564 _realloc_r
00409d9c g       *ABS*	00000000 __bss_end
00212dbc g     F .text	000000f0 alt_iic_isr_register
00213594 g     F .text	00000108 alt_tick
0020b0d0 g     F .text	000005fc .hidden __udivdi3
0021084c g     F .text	00000058 alt_avalon_i2c_int_status_get
0020ab7c g     F .text	00000024 _fputwc_r
002141c4 g     O .rodata	00000028 __mprec_bigtens
002079a8 g     F .text	00000104 __s2b
0020e428 g     F .text	000000a8 .hidden __floatunsidf
00208114 g     F .text	00000060 __mcmp
00205d88 g     F .text	00000018 __fp_lock_all
00212d70 g     F .text	0000004c alt_ic_irq_enabled
002134f8 g     F .text	0000009c alt_alarm_stop
0020f17c g     F .text	00000054 alt_avalon_i2c_register_callback
00409c64 g     O .bss	00000004 alt_irq_active
0020f1d0 g     F .text	000000ec alt_avalon_i2c_init
002000fc g     F .exceptions	000000d4 alt_irq_handler
004088a4 g     O .rwdata	00000028 alt_dev_null
002128e0 g     F .text	00000020 alt_dcache_flush_all
00207aac g     F .text	00000068 __hi0bits
0020e2cc g     F .text	00000080 .hidden __fixdfsi
00409c3c g       *ABS*	00000000 __ram_rwdata_end
00409c04 g     O .rwdata	00000008 alt_dev_list
0020ed94 g     F .text	00000100 write
002139f0 g     F .text	000000a0 _putc_r
0020fb0c g     F .text	0000004c alt_avalon_i2c_check_arblost
00200c14 g     F .text	000000bc .hidden __gtsf2
002108e8 g     F .text	0000003c alt_avalon_i2c_int_clear
00214350 g       *ABS*	00000000 __ram_rodata_end
0020e64c g     F .text	000000b8 fstat
0020d070 g     F .text	000000f4 .hidden __ledf2
00409c18 g     O .rwdata	00000008 alt_avalon_i2c_list
00207e8c g     F .text	00000140 __pow5mult
002091a0 g     F .text	0000150c ___vfiprintf_internal_r
00409c44 g     O .bss	00000004 __nlocale_changed
00200bbc g     F .text	00000058 .hidden __umodsi3
00409d9c g       *ABS*	00000000 end
00210cfc g     F .text	000000c0 altera_avalon_jtag_uart_init
002001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0020f2bc g     F .text	00000040 alt_avalon_i2c_open
00213e24 g       *ABS*	00000000 __CTOR_LIST__
00410000 g       *ABS*	00000000 __alt_stack_pointer
0020fc94 g     F .text	000000e8 alt_avalon_i2c_master_tx
00211678 g     F .text	0000007c alt_avalon_timer_sc_init
00201744 g     F .text	00000064 .hidden __clzsi2
002113dc g     F .text	00000224 altera_avalon_jtag_uart_write
00205d78 g     F .text	00000004 __sfp_lock_acquire
002072e0 g     F .text	000000e4 memchr
002019a8 g     F .text	000022dc ___vfprintf_internal_r
002117f4 g     F .text	0000009c alt_onchip_flash_get_info
00205edc g     F .text	00000310 _free_r
00213290 g     F .text	0000022c alt_printf
002068c4 g     F .text	00000010 __locale_mb_cur_max
00213c70 g     F .text	00000180 __call_exitprocs
00409c40 g     O .bss	00000004 __mlocale_changed
0020f090 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00409bf0 g     O .rwdata	00000004 __malloc_sbrk_base
00200230 g     F .text	0000003c _start
00409c68 g     O .bss	00000004 _alt_tick_rate
0021065c g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00210a80 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00207fcc g     F .text	00000148 __lshift
00409c6c g     O .bss	00000004 _alt_nticks
0020eaf0 g     F .text	00000104 read
0020ef00 g     F .text	00000080 alt_sys_init
00213b58 g     F .text	00000118 __register_exitproc
0020feb8 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00207c00 g     F .text	0000028c __multiply
00211068 g     F .text	00000068 altera_avalon_jtag_uart_close
002017a8 g     F .text	00000028 .hidden __mulsi3
00408000 g       *ABS*	00000000 __ram_rwdata_start
00213e24 g       *ABS*	00000000 __ram_rodata_start
00409c74 g     O .bss	00000028 __malloc_current_mallinfo
002084e0 g     F .text	0000014c __d2b
00200450 g     F .text	00000050 clearLED
00210b98 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
002137c8 g     F .text	000000c4 alt_get_fd
00212760 g     F .text	00000158 alt_busy_sleep
0020a7e4 g     F .text	00000054 _close_r
00213974 g     F .text	0000007c memcmp
0020f730 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00210c58 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00409d9c g       *ABS*	00000000 __alt_stack_base
00210ca8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00203d5c g     F .text	00000154 __swsetup_r
0020c53c g     F .text	000009d0 .hidden __divdf3
00211728 g     F .text	000000cc alt_onchip_flash_read
00205c38 g     F .text	00000118 __sfp
00208744 g     F .text	00000078 __copybits
0040849c g     O .rwdata	00000408 __malloc_av_
00205d84 g     F .text	00000004 __sinit_lock_release
0020d164 g     F .text	0000086c .hidden __muldf3
00208e74 g     F .text	00000054 __sread
002136c0 g     F .text	00000108 alt_find_file
0021293c g     F .text	000000a4 alt_dev_llist_insert
0020ea6c g     F .text	00000024 __malloc_lock
0020ec78 g     F .text	000000b0 sbrk
0020fb58 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0020fac0 g     F .text	0000004c alt_avalon_i2c_check_nack
0020597c g     F .text	0000005c _fflush_r
0020a838 g     F .text	000000dc _calloc_r
00409c28 g     O .rwdata	00000008 alt_flash_dev_list
00409c3c g       *ABS*	00000000 __bss_start
00207668 g     F .text	00000128 memset
0020026c g     F .text	00000044 main
0020fa8c g     F .text	00000034 alt_avalon_i2c_master_target_set
00409c60 g     O .bss	00000004 alt_envp
00409c48 g     O .bss	00000004 __malloc_max_total_mem
00210bf8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0020aed0 g     F .text	00000018 __swbuf
002108a4 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00208fa8 g     F .text	00000008 __sclose
00410000 g       *ABS*	00000000 __alt_heap_limit
0020aa04 g     F .text	00000014 fclose
002040d8 g     F .text	00001688 _dtoa_r
00206ad4 g     F .text	0000080c _malloc_r
0020b044 g     F .text	00000030 __ascii_wctomb
00409c10 g     O .rwdata	00000004 alt_errno
00212484 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
002066b4 g     F .text	000000c4 _fwalk
00213a90 g     F .text	000000c8 putc
00200a60 g     F .text	00000084 .hidden __divsi3
002005c0 g     F .text	00000140 printSignedHex1
00205db8 g     F .text	00000124 _malloc_trim_r
00213e24 g       *ABS*	00000000 __CTOR_END__
00211fa8 g     F .text	000004dc altera_onchip_flash_init
00200cd0 g     F .text	00000430 .hidden __mulsf3
00208fb0 g     F .text	000000dc strcmp
00213e24 g       *ABS*	00000000 __flash_rodata_start
00213e24 g       *ABS*	00000000 __DTOR_LIST__
00200364 g     F .text	000000a0 SGTL5000_Reg_Wr
0020cf0c g     F .text	00000088 .hidden __nedf2
0020eec8 g     F .text	00000038 alt_irq_init
0020ebf4 g     F .text	00000084 alt_release_fd
00214008 g     O .rodata	00000100 .hidden __clz_tab
00409c3c g     O .bss	00000004 _PathLocale
00213928 g     F .text	00000014 atexit
00200c14 g     F .text	000000bc .hidden __gesf2
0020a784 g     F .text	00000060 _write_r
002068f4 g     F .text	00000018 setlocale
00409be8 g     O .rwdata	00000004 _impure_ptr
00409c58 g     O .bss	00000004 alt_argc
00205760 g     F .text	0000021c __sflush_r
00212a40 g     F .text	00000060 _do_dtors
002068e0 g     F .text	00000008 __locale_cjk_lang
0020fa54 g     F .text	00000038 alt_avalon_i2c_master_target_get
0020f964 g     F .text	000000f0 alt_avalon_i2c_send_address
00200020 g       .exceptions	00000000 alt_irq_entry
00208370 g     F .text	00000064 __ulp
00205da0 g     F .text	00000018 __fp_unlock_all
00409bfc g     O .rwdata	00000008 alt_fs_list
002119f8 g     F .text	000002d8 alt_onchip_flash_write_block
00200020 g       *ABS*	00000000 __ram_exceptions_start
0020690c g     F .text	0000000c localeconv
00200404 g     F .text	0000004c setLED
00210b30 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00212c0c g     F .text	00000050 alt_ic_isr_register
0020f394 g     F .text	0000004c alt_avalon_i2c_disable
00409c3c g       *ABS*	00000000 _edata
00211cd0 g     F .text	000002d8 alt_onchip_flash_write
00200700 g     F .text	00000300 setup_i2c
00409d9c g       *ABS*	00000000 _end
00212b30 g     F .text	00000068 alt_flash_open_dev
0020aa18 g     F .text	00000164 __fputwc
00200230 g       *ABS*	00000000 __ram_exceptions_end
002110d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0020f3e0 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00212ce4 g     F .text	0000008c alt_ic_irq_disable
00208ed0 g     F .text	0000007c __swrite
00409bf4 g     O .rwdata	00000004 __malloc_trim_threshold
002068d4 g     F .text	0000000c __locale_msgcharset
0021393c g     F .text	00000038 exit
00206778 g     F .text	000000c4 _fwalk_reent
00201654 g     F .text	000000f0 .hidden __floatunsisf
00208174 g     F .text	000001fc __mdiff
00212b98 g     F .text	00000054 alt_flash_close_dev
00200ae4 g     F .text	00000074 .hidden __modsi3
00410000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
00205d7c g     F .text	00000004 __sfp_lock_release
0020f5f0 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0020f880 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00200a00 g     F .text	00000060 .hidden __fixunssfsi
00213df0 g     F .text	00000034 _exit
00212634 g     F .text	0000012c alt_alarm_start
002004a0 g     F .text	00000120 printSignedHex0
00206918 g     F .text	000001bc __smakebuf_r
00201910 g     F .text	00000098 strlen
00213134 g     F .text	0000015c open
0020cf94 g     F .text	000000dc .hidden __gedf2
002134bc g     F .text	0000003c alt_putchar
00409bf8 g     O .rwdata	00000004 __wctomb
00209188 g     F .text	00000018 __sprint_r
00212bec g     F .text	00000020 alt_icache_flush_all
00409c30 g     O .rwdata	00000004 alt_priority_mask
00212c5c g     F .text	00000088 alt_ic_irq_enable
00203c84 g     F .text	0000001c __vfprintf_internal
0020b074 g     F .text	0000005c _wctomb_r
0020d9d0 g     F .text	000008fc .hidden __subdf3
00207b14 g     F .text	000000b0 __lo0bits
00409c34 g     O .rwdata	00000008 alt_alarm_list
002129e0 g     F .text	00000060 _do_ctors
0020af84 g     F .text	000000c0 wcrtomb
0020e50c g     F .text	000000d8 close
00210ae4 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0020e854 g     F .text	00000084 alt_load
0020fd7c g     F .text	0000013c alt_avalon_i2c_master_rx
0020aba0 g     F .text	00000080 fputwc
00205d80 g     F .text	00000004 __sinit_lock_acquire
00207860 g     F .text	00000148 __multadd
00207838 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200000:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  200004:	08408c14 	ori	at,at,560
    jmp r1
  200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  20002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  20003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  20004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  20005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  20006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  20007c:	10000326 	beq	r2,zero,20008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  200080:	20000226 	beq	r4,zero,20008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200084:	02000fc0 	call	2000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  200088:	00000706 	br	2000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  20008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  200098:	02001d00 	call	2001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  20009c:	1000021e 	bne	r2,zero,2000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000f8:	ef80083a 	eret

002000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000fc:	defff904 	addi	sp,sp,-28
  200100:	dfc00615 	stw	ra,24(sp)
  200104:	df000515 	stw	fp,20(sp)
  200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  20010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  200110:	0005313a 	rdctl	r2,ipending
  200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  20011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  200124:	00800044 	movi	r2,1
  200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  20012c:	e0fffb17 	ldw	r3,-20(fp)
  200130:	e0bffc17 	ldw	r2,-16(fp)
  200134:	1884703a 	and	r2,r3,r2
  200138:	10001426 	beq	r2,zero,20018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  20013c:	00801074 	movhi	r2,65
  200140:	10a72704 	addi	r2,r2,-25444
  200144:	e0fffd17 	ldw	r3,-12(fp)
  200148:	180690fa 	slli	r3,r3,3
  20014c:	10c5883a 	add	r2,r2,r3
  200150:	10c00017 	ldw	r3,0(r2)
  200154:	00801074 	movhi	r2,65
  200158:	10a72704 	addi	r2,r2,-25444
  20015c:	e13ffd17 	ldw	r4,-12(fp)
  200160:	200890fa 	slli	r4,r4,3
  200164:	1105883a 	add	r2,r2,r4
  200168:	10800104 	addi	r2,r2,4
  20016c:	10800017 	ldw	r2,0(r2)
  200170:	1009883a 	mov	r4,r2
  200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  20017c:	0005313a 	rdctl	r2,ipending
  200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  200184:	e0bfff17 	ldw	r2,-4(fp)
  200188:	00000706 	br	2001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  20018c:	e0bffc17 	ldw	r2,-16(fp)
  200190:	1085883a 	add	r2,r2,r2
  200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  200198:	e0bffd17 	ldw	r2,-12(fp)
  20019c:	10800044 	addi	r2,r2,1
  2001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2001a4:	003fe106 	br	20012c <_gp+0xffdee548>

    active = alt_irq_pending ();
  2001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2001ac:	e0bffb17 	ldw	r2,-20(fp)
  2001b0:	103fdb1e 	bne	r2,zero,200120 <_gp+0xffdee53c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2001b4:	0001883a 	nop
}
  2001b8:	0001883a 	nop
  2001bc:	e037883a 	mov	sp,fp
  2001c0:	dfc00117 	ldw	ra,4(sp)
  2001c4:	df000017 	ldw	fp,0(sp)
  2001c8:	dec00204 	addi	sp,sp,8
  2001cc:	f800283a 	ret

002001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2001d0:	defffb04 	addi	sp,sp,-20
  2001d4:	dfc00415 	stw	ra,16(sp)
  2001d8:	df000315 	stw	fp,12(sp)
  2001dc:	df000304 	addi	fp,sp,12
  2001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  2001e4:	00bfffc4 	movi	r2,-1
  2001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  2001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  2001f0:	d0a02317 	ldw	r2,-32628(gp)
  2001f4:	10000726 	beq	r2,zero,200214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  2001f8:	d0a02317 	ldw	r2,-32628(gp)
  2001fc:	e0fffd17 	ldw	r3,-12(fp)
  200200:	e1bffe17 	ldw	r6,-8(fp)
  200204:	e17fff17 	ldw	r5,-4(fp)
  200208:	1809883a 	mov	r4,r3
  20020c:	103ee83a 	callr	r2
  200210:	00000206 	br	20021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  200214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  200218:	0005883a 	mov	r2,zero
}
  20021c:	e037883a 	mov	sp,fp
  200220:	dfc00117 	ldw	ra,4(sp)
  200224:	df000017 	ldw	fp,0(sp)
  200228:	dec00204 	addi	sp,sp,8
  20022c:	f800283a 	ret

Disassembly of section .text:

00200230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200230:	06c01074 	movhi	sp,65
    ori sp, sp, %lo(__alt_stack_pointer)
  200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  200238:	06801074 	movhi	gp,65
    ori gp, gp, %lo(_gp)
  20023c:	d686f914 	ori	gp,gp,7140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200240:	00801034 	movhi	r2,64
    ori r2, r2, %lo(__bss_start)
  200244:	10a70f14 	ori	r2,r2,39996

    movhi r3, %hi(__bss_end)
  200248:	00c01034 	movhi	r3,64
    ori r3, r3, %lo(__bss_end)
  20024c:	18e76714 	ori	r3,r3,40348

    beq r2, r3, 1f
  200250:	10c00326 	beq	r2,r3,200260 <_start+0x30>

0:
    stw zero, (r2)
  200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20025c:	10fffd36 	bltu	r2,r3,200254 <_gp+0xffdee670>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200260:	020e8540 	call	20e854 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200264:	020e9f00 	call	20e9f0 <alt_main>

00200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200268:	003fff06 	br	200268 <_gp+0xffdee684>

0020026c <main>:
#include "main.h"

int main(){
  20026c:	defffe04 	addi	sp,sp,-8
  200270:	dfc00115 	stw	ra,4(sp)
  200274:	df000015 	stw	fp,0(sp)
  200278:	d839883a 	mov	fp,sp
	usleep(5000000);
  20027c:	01001334 	movhi	r4,76
  200280:	2112d004 	addi	r4,r4,19264
  200284:	020ed280 	call	20ed28 <usleep>
//	setup_i2c();
	IOWR_16DIRECT(LEDS_PIO_BASE,0,0x130);
  200288:	00c04c04 	movi	r3,304
  20028c:	00801074 	movhi	r2,65
  200290:	10843004 	addi	r2,r2,4288
  200294:	10c0002d 	sthio	r3,0(r2)
return 0;
  200298:	0005883a 	mov	r2,zero
}
  20029c:	e037883a 	mov	sp,fp
  2002a0:	dfc00117 	ldw	ra,4(sp)
  2002a4:	df000017 	ldw	fp,0(sp)
  2002a8:	dec00204 	addi	sp,sp,8
  2002ac:	f800283a 	ret

002002b0 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
  2002b0:	defff804 	addi	sp,sp,-32
  2002b4:	dfc00715 	stw	ra,28(sp)
  2002b8:	df000615 	stw	fp,24(sp)
  2002bc:	df000604 	addi	fp,sp,24
  2002c0:	e13ffe15 	stw	r4,-8(fp)
  2002c4:	2805883a 	mov	r2,r5
  2002c8:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
  2002cc:	e0bfff0b 	ldhu	r2,-4(fp)
  2002d0:	1004d23a 	srli	r2,r2,8
  2002d4:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
  2002d8:	e0bfff0b 	ldhu	r2,-4(fp)
  2002dc:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
  2002e0:	e13ffd84 	addi	r4,fp,-10
  2002e4:	e0fffd84 	addi	r3,fp,-10
  2002e8:	d8000115 	stw	zero,4(sp)
  2002ec:	00800084 	movi	r2,2
  2002f0:	d8800015 	stw	r2,0(sp)
  2002f4:	200f883a 	mov	r7,r4
  2002f8:	01800084 	movi	r6,2
  2002fc:	180b883a 	mov	r5,r3
  200300:	e13ffe17 	ldw	r4,-8(fp)
  200304:	020feb80 	call	20feb8 <alt_avalon_i2c_master_tx_rx>
  200308:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  20030c:	e0bffc17 	ldw	r2,-16(fp)
  200310:	10000626 	beq	r2,zero,20032c <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  200314:	e0bfff0b 	ldhu	r2,-4(fp)
  200318:	100b883a 	mov	r5,r2
  20031c:	01000874 	movhi	r4,33
  200320:	210f8904 	addi	r4,r4,15908
  200324:	02018000 	call	201800 <printf>
		while (1)
		{
			//hang here
		}
  200328:	003fff06 	br	200328 <_gp+0xffdee744>
	}
	value = (buffer[0] << 8) | buffer[1];
  20032c:	e0bffd83 	ldbu	r2,-10(fp)
  200330:	10803fcc 	andi	r2,r2,255
  200334:	1004923a 	slli	r2,r2,8
  200338:	1007883a 	mov	r3,r2
  20033c:	e0bffdc3 	ldbu	r2,-9(fp)
  200340:	10803fcc 	andi	r2,r2,255
  200344:	1884b03a 	or	r2,r3,r2
  200348:	e0bffd0d 	sth	r2,-12(fp)
	return value;
  20034c:	e0bffd0b 	ldhu	r2,-12(fp)
}
  200350:	e037883a 	mov	sp,fp
  200354:	dfc00117 	ldw	ra,4(sp)
  200358:	df000017 	ldw	fp,0(sp)
  20035c:	dec00204 	addi	sp,sp,8
  200360:	f800283a 	ret

00200364 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
  200364:	defff904 	addi	sp,sp,-28
  200368:	dfc00615 	stw	ra,24(sp)
  20036c:	df000515 	stw	fp,20(sp)
  200370:	df000504 	addi	fp,sp,20
  200374:	e13ffd15 	stw	r4,-12(fp)
  200378:	2807883a 	mov	r3,r5
  20037c:	3005883a 	mov	r2,r6
  200380:	e0fffe0d 	sth	r3,-8(fp)
  200384:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
  200388:	e0bffe0b 	ldhu	r2,-8(fp)
  20038c:	1004d23a 	srli	r2,r2,8
  200390:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
  200394:	e0bffe0b 	ldhu	r2,-8(fp)
  200398:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
  20039c:	e0bfff0b 	ldhu	r2,-4(fp)
  2003a0:	1004d23a 	srli	r2,r2,8
  2003a4:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
  2003a8:	e0bfff0b 	ldhu	r2,-4(fp)
  2003ac:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
  2003b0:	e0bffc04 	addi	r2,fp,-16
  2003b4:	000f883a 	mov	r7,zero
  2003b8:	01800104 	movi	r6,4
  2003bc:	100b883a 	mov	r5,r2
  2003c0:	e13ffd17 	ldw	r4,-12(fp)
  2003c4:	020fc940 	call	20fc94 <alt_avalon_i2c_master_tx>
  2003c8:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  2003cc:	e0bffb17 	ldw	r2,-20(fp)
  2003d0:	10000626 	beq	r2,zero,2003ec <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  2003d4:	e0bffe0b 	ldhu	r2,-8(fp)
  2003d8:	100b883a 	mov	r5,r2
  2003dc:	01000874 	movhi	r4,33
  2003e0:	210f8904 	addi	r4,r4,15908
  2003e4:	02018000 	call	201800 <printf>
		while (1)
		{
			//hang here
		}
  2003e8:	003fff06 	br	2003e8 <_gp+0xffdee804>
	}
	return DATA;
  2003ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
  2003f0:	e037883a 	mov	sp,fp
  2003f4:	dfc00117 	ldw	ra,4(sp)
  2003f8:	df000017 	ldw	fp,0(sp)
  2003fc:	dec00204 	addi	sp,sp,8
  200400:	f800283a 	ret

00200404 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
  200404:	defffe04 	addi	sp,sp,-8
  200408:	df000115 	stw	fp,4(sp)
  20040c:	df000104 	addi	fp,sp,4
  200410:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
  200414:	00801074 	movhi	r2,65
  200418:	10843004 	addi	r2,r2,4288
  20041c:	10c00037 	ldwio	r3,0(r2)
  200420:	01000044 	movi	r4,1
  200424:	e0bfff17 	ldw	r2,-4(fp)
  200428:	2084983a 	sll	r2,r4,r2
  20042c:	1886b03a 	or	r3,r3,r2
  200430:	00801074 	movhi	r2,65
  200434:	10843004 	addi	r2,r2,4288
  200438:	10c00035 	stwio	r3,0(r2)
}
  20043c:	0001883a 	nop
  200440:	e037883a 	mov	sp,fp
  200444:	df000017 	ldw	fp,0(sp)
  200448:	dec00104 	addi	sp,sp,4
  20044c:	f800283a 	ret

00200450 <clearLED>:

void clearLED(int LED)
{
  200450:	defffe04 	addi	sp,sp,-8
  200454:	df000115 	stw	fp,4(sp)
  200458:	df000104 	addi	fp,sp,4
  20045c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
  200460:	00801074 	movhi	r2,65
  200464:	10843004 	addi	r2,r2,4288
  200468:	10c00037 	ldwio	r3,0(r2)
  20046c:	01000044 	movi	r4,1
  200470:	e0bfff17 	ldw	r2,-4(fp)
  200474:	2084983a 	sll	r2,r4,r2
  200478:	0084303a 	nor	r2,zero,r2
  20047c:	1886703a 	and	r3,r3,r2
  200480:	00801074 	movhi	r2,65
  200484:	10843004 	addi	r2,r2,4288
  200488:	10c00035 	stwio	r3,0(r2)

}
  20048c:	0001883a 	nop
  200490:	e037883a 	mov	sp,fp
  200494:	df000017 	ldw	fp,0(sp)
  200498:	dec00104 	addi	sp,sp,4
  20049c:	f800283a 	ret

002004a0 <printSignedHex0>:

void printSignedHex0(signed char value)
{
  2004a0:	defffc04 	addi	sp,sp,-16
  2004a4:	dfc00315 	stw	ra,12(sp)
  2004a8:	df000215 	stw	fp,8(sp)
  2004ac:	df000204 	addi	fp,sp,8
  2004b0:	2005883a 	mov	r2,r4
  2004b4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  2004b8:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
  2004bc:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  2004c0:	00801074 	movhi	r2,65
  2004c4:	10843404 	addi	r2,r2,4304
  2004c8:	10800037 	ldwio	r2,0(r2)
  2004cc:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
  2004d0:	e0bfff07 	ldb	r2,-4(fp)
  2004d4:	1000060e 	bge	r2,zero,2004f0 <printSignedHex0+0x50>
	{
		setLED(11);
  2004d8:	010002c4 	movi	r4,11
  2004dc:	02004040 	call	200404 <setLED>
		value = -value;
  2004e0:	e0bfff03 	ldbu	r2,-4(fp)
  2004e4:	0085c83a 	sub	r2,zero,r2
  2004e8:	e0bfff05 	stb	r2,-4(fp)
  2004ec:	00000206 	br	2004f8 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
  2004f0:	010002c4 	movi	r4,11
  2004f4:	02004500 	call	200450 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  2004f8:	e0bfff03 	ldbu	r2,-4(fp)
  2004fc:	108018c4 	addi	r2,r2,99
  200500:	10803fcc 	andi	r2,r2,255
  200504:	108031f0 	cmpltui	r2,r2,199
  200508:	1000031e 	bne	r2,zero,200518 <printSignedHex0+0x78>
		setLED(13);
  20050c:	01000344 	movi	r4,13
  200510:	02004040 	call	200404 <setLED>
  200514:	00000206 	br	200520 <printSignedHex0+0x80>
	else
		clearLED(13);
  200518:	01000344 	movi	r4,13
  20051c:	02004500 	call	200450 <clearLED>

	value = value % 100;
  200520:	e0bfff07 	ldb	r2,-4(fp)
  200524:	01401904 	movi	r5,100
  200528:	1009883a 	mov	r4,r2
  20052c:	0200ae40 	call	200ae4 <__modsi3>
  200530:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200534:	e0bfff07 	ldb	r2,-4(fp)
  200538:	01400284 	movi	r5,10
  20053c:	1009883a 	mov	r4,r2
  200540:	0200a600 	call	200a60 <__divsi3>
  200544:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
  200548:	e0bfff07 	ldb	r2,-4(fp)
  20054c:	01400284 	movi	r5,10
  200550:	1009883a 	mov	r4,r2
  200554:	0200ae40 	call	200ae4 <__modsi3>
  200558:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
  20055c:	e0bffe8b 	ldhu	r2,-6(fp)
  200560:	10803fcc 	andi	r2,r2,255
  200564:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
  200568:	e0bffe03 	ldbu	r2,-8(fp)
  20056c:	1004933a 	slli	r2,r2,12
  200570:	1007883a 	mov	r3,r2
  200574:	e0bffe8b 	ldhu	r2,-6(fp)
  200578:	1884b03a 	or	r2,r3,r2
  20057c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
  200580:	e0bffe43 	ldbu	r2,-7(fp)
  200584:	1004923a 	slli	r2,r2,8
  200588:	1007883a 	mov	r3,r2
  20058c:	e0bffe8b 	ldhu	r2,-6(fp)
  200590:	1884b03a 	or	r2,r3,r2
  200594:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  200598:	e0fffe8b 	ldhu	r3,-6(fp)
  20059c:	00801074 	movhi	r2,65
  2005a0:	10843404 	addi	r2,r2,4304
  2005a4:	10c00035 	stwio	r3,0(r2)
}
  2005a8:	0001883a 	nop
  2005ac:	e037883a 	mov	sp,fp
  2005b0:	dfc00117 	ldw	ra,4(sp)
  2005b4:	df000017 	ldw	fp,0(sp)
  2005b8:	dec00204 	addi	sp,sp,8
  2005bc:	f800283a 	ret

002005c0 <printSignedHex1>:

void printSignedHex1(signed char value)
{
  2005c0:	defffb04 	addi	sp,sp,-20
  2005c4:	dfc00415 	stw	ra,16(sp)
  2005c8:	df000315 	stw	fp,12(sp)
  2005cc:	df000304 	addi	fp,sp,12
  2005d0:	2005883a 	mov	r2,r4
  2005d4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  2005d8:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
  2005dc:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  2005e0:	00801074 	movhi	r2,65
  2005e4:	10843404 	addi	r2,r2,4304
  2005e8:	10800037 	ldwio	r2,0(r2)
  2005ec:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
  2005f0:	e0bfff07 	ldb	r2,-4(fp)
  2005f4:	1000060e 	bge	r2,zero,200610 <printSignedHex1+0x50>
	{
		setLED(10);
  2005f8:	01000284 	movi	r4,10
  2005fc:	02004040 	call	200404 <setLED>
		value = -value;
  200600:	e0bfff03 	ldbu	r2,-4(fp)
  200604:	0085c83a 	sub	r2,zero,r2
  200608:	e0bfff05 	stb	r2,-4(fp)
  20060c:	00000206 	br	200618 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
  200610:	01000284 	movi	r4,10
  200614:	02004500 	call	200450 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  200618:	e0bfff03 	ldbu	r2,-4(fp)
  20061c:	108018c4 	addi	r2,r2,99
  200620:	10803fcc 	andi	r2,r2,255
  200624:	108031f0 	cmpltui	r2,r2,199
  200628:	1000031e 	bne	r2,zero,200638 <printSignedHex1+0x78>
		setLED(12);
  20062c:	01000304 	movi	r4,12
  200630:	02004040 	call	200404 <setLED>
  200634:	00000206 	br	200640 <printSignedHex1+0x80>
	else
		clearLED(12);
  200638:	01000304 	movi	r4,12
  20063c:	02004500 	call	200450 <clearLED>

	value = value % 100;
  200640:	e0bfff07 	ldb	r2,-4(fp)
  200644:	01401904 	movi	r5,100
  200648:	1009883a 	mov	r4,r2
  20064c:	0200ae40 	call	200ae4 <__modsi3>
  200650:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200654:	e0bfff07 	ldb	r2,-4(fp)
  200658:	01400284 	movi	r5,10
  20065c:	1009883a 	mov	r4,r2
  200660:	0200a600 	call	200a60 <__divsi3>
  200664:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200668:	e0bfff07 	ldb	r2,-4(fp)
  20066c:	01400284 	movi	r5,10
  200670:	1009883a 	mov	r4,r2
  200674:	0200ae40 	call	200ae4 <__modsi3>
  200678:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
  20067c:	e0bfff07 	ldb	r2,-4(fp)
  200680:	01400284 	movi	r5,10
  200684:	1009883a 	mov	r4,r2
  200688:	0200a600 	call	200a60 <__divsi3>
  20068c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200690:	e0bfff07 	ldb	r2,-4(fp)
  200694:	01400284 	movi	r5,10
  200698:	1009883a 	mov	r4,r2
  20069c:	0200ae40 	call	200ae4 <__modsi3>
  2006a0:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
  2006a4:	e0bffe17 	ldw	r2,-8(fp)
  2006a8:	10bfc00c 	andi	r2,r2,65280
  2006ac:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
  2006b0:	e0bffd03 	ldbu	r2,-12(fp)
  2006b4:	1004913a 	slli	r2,r2,4
  2006b8:	1007883a 	mov	r3,r2
  2006bc:	e0bffe17 	ldw	r2,-8(fp)
  2006c0:	10c4b03a 	or	r2,r2,r3
  2006c4:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
  2006c8:	e0bffd43 	ldbu	r2,-11(fp)
  2006cc:	e0fffe17 	ldw	r3,-8(fp)
  2006d0:	1884b03a 	or	r2,r3,r2
  2006d4:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  2006d8:	e0fffe17 	ldw	r3,-8(fp)
  2006dc:	00801074 	movhi	r2,65
  2006e0:	10843404 	addi	r2,r2,4304
  2006e4:	10c00035 	stwio	r3,0(r2)
}
  2006e8:	0001883a 	nop
  2006ec:	e037883a 	mov	sp,fp
  2006f0:	dfc00117 	ldw	ra,4(sp)
  2006f4:	df000017 	ldw	fp,0(sp)
  2006f8:	dec00204 	addi	sp,sp,8
  2006fc:	f800283a 	ret

00200700 <setup_i2c>:


int setup_i2c()
{
  200700:	defffc04 	addi	sp,sp,-16
  200704:	dfc00315 	stw	ra,12(sp)
  200708:	df000215 	stw	fp,8(sp)
  20070c:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
  200710:	01000874 	movhi	r4,33
  200714:	210f9104 	addi	r4,r4,15940
  200718:	020f2bc0 	call	20f2bc <alt_avalon_i2c_open>
  20071c:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
  200720:	e0bffe17 	ldw	r2,-8(fp)
  200724:	1000051e 	bne	r2,zero,20073c <setup_i2c+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
  200728:	01000874 	movhi	r4,33
  20072c:	210f9404 	addi	r4,r4,15952
  200730:	02018fc0 	call	2018fc <puts>
		return 1;
  200734:	00800044 	movi	r2,1
  200738:	0000ac06 	br	2009ec <setup_i2c+0x2ec>
	}
	printf ("I2C Test Program\n");
  20073c:	01000874 	movhi	r4,33
  200740:	210f9c04 	addi	r4,r4,15984
  200744:	02018fc0 	call	2018fc <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
  200748:	01400284 	movi	r5,10
  20074c:	e13ffe17 	ldw	r4,-8(fp)
  200750:	020fa8c0 	call	20fa8c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
  200754:	000b883a 	mov	r5,zero
  200758:	e13ffe17 	ldw	r4,-8(fp)
  20075c:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200760:	10bfffcc 	andi	r2,r2,65535
  200764:	100b883a 	mov	r5,r2
  200768:	01000874 	movhi	r4,33
  20076c:	210fa104 	addi	r4,r4,16004
  200770:	02018000 	call	201800 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
  200774:	00800384 	movi	r2,14
  200778:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
  20077c:	e0bfff03 	ldbu	r2,-4(fp)
  200780:	1009883a 	mov	r4,r2
  200784:	02016540 	call	201654 <__floatunsisf>
  200788:	1007883a 	mov	r3,r2
  20078c:	180b883a 	mov	r5,r3
  200790:	01105f34 	movhi	r4,16764
  200794:	212a2084 	addi	r4,r4,-22398
  200798:	02011000 	call	201100 <__subsf3>
  20079c:	1007883a 	mov	r3,r2
  2007a0:	1805883a 	mov	r2,r3
  2007a4:	01514034 	movhi	r5,17664
  2007a8:	1009883a 	mov	r4,r2
  2007ac:	0200cd00 	call	200cd0 <__mulsf3>
  2007b0:	1007883a 	mov	r3,r2
  2007b4:	1805883a 	mov	r2,r3
  2007b8:	1009883a 	mov	r4,r2
  2007bc:	0200a000 	call	200a00 <__fixunssfsi>
  2007c0:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
  2007c4:	e0bfff03 	ldbu	r2,-4(fp)
  2007c8:	e0ffff8b 	ldhu	r3,-2(fp)
  2007cc:	180d883a 	mov	r6,r3
  2007d0:	100b883a 	mov	r5,r2
  2007d4:	01000874 	movhi	r4,33
  2007d8:	210fa704 	addi	r4,r4,16028
  2007dc:	02018000 	call	201800 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
  2007e0:	e0bfff03 	ldbu	r2,-4(fp)
  2007e4:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
  2007e8:	1007883a 	mov	r3,r2
  2007ec:	e0bfff8b 	ldhu	r2,-2(fp)
  2007f0:	1884b03a 	or	r2,r3,r2
  2007f4:	10bfffcc 	andi	r2,r2,65535
  2007f8:	100d883a 	mov	r6,r2
  2007fc:	01400c84 	movi	r5,50
  200800:	e13ffe17 	ldw	r4,-8(fp)
  200804:	02003640 	call	200364 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
  200808:	01400c84 	movi	r5,50
  20080c:	e13ffe17 	ldw	r4,-8(fp)
  200810:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200814:	10bfffcc 	andi	r2,r2,65535
  200818:	100b883a 	mov	r5,r2
  20081c:	01000874 	movhi	r4,33
  200820:	210fb804 	addi	r4,r4,16096
  200824:	02018000 	call	201800 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
  200828:	01917f84 	movi	r6,17918
  20082c:	01400c04 	movi	r5,48
  200830:	e13ffe17 	ldw	r4,-8(fp)
  200834:	02003640 	call	200364 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
  200838:	01400c04 	movi	r5,48
  20083c:	e13ffe17 	ldw	r4,-8(fp)
  200840:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200844:	10bfffcc 	andi	r2,r2,65535
  200848:	100b883a 	mov	r5,r2
  20084c:	01000874 	movhi	r4,33
  200850:	210fbf04 	addi	r4,r4,16124
  200854:	02018000 	call	201800 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  200858:	01801384 	movi	r6,78
  20085c:	01400a04 	movi	r5,40
  200860:	e13ffe17 	ldw	r4,-8(fp)
  200864:	02003640 	call	200364 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
  200868:	01400a04 	movi	r5,40
  20086c:	e13ffe17 	ldw	r4,-8(fp)
  200870:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200874:	10bfffcc 	andi	r2,r2,65535
  200878:	100b883a 	mov	r5,r2
  20087c:	01000874 	movhi	r4,33
  200880:	210fc704 	addi	r4,r4,16156
  200884:	02018000 	call	201800 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
  200888:	018018c4 	movi	r6,99
  20088c:	01400084 	movi	r5,2
  200890:	e13ffe17 	ldw	r4,-8(fp)
  200894:	02003640 	call	200364 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
  200898:	01400084 	movi	r5,2
  20089c:	e13ffe17 	ldw	r4,-8(fp)
  2008a0:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  2008a4:	10bfffcc 	andi	r2,r2,65535
  2008a8:	100b883a 	mov	r5,r2
  2008ac:	01000874 	movhi	r4,33
  2008b0:	210fce04 	addi	r4,r4,16184
  2008b4:	02018000 	call	201800 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
  2008b8:	018001c4 	movi	r6,7
  2008bc:	01400104 	movi	r5,4
  2008c0:	e13ffe17 	ldw	r4,-8(fp)
  2008c4:	02003640 	call	200364 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
  2008c8:	01400104 	movi	r5,4
  2008cc:	e13ffe17 	ldw	r4,-8(fp)
  2008d0:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  2008d4:	10bfffcc 	andi	r2,r2,65535
  2008d8:	100b883a 	mov	r5,r2
  2008dc:	01000874 	movhi	r4,33
  2008e0:	210fd604 	addi	r4,r4,16216
  2008e4:	02018000 	call	201800 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
  2008e8:	01802004 	movi	r6,128
  2008ec:	01400184 	movi	r5,6
  2008f0:	e13ffe17 	ldw	r4,-8(fp)
  2008f4:	02003640 	call	200364 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
  2008f8:	01400184 	movi	r5,6
  2008fc:	e13ffe17 	ldw	r4,-8(fp)
  200900:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200904:	10bfffcc 	andi	r2,r2,65535
  200908:	100b883a 	mov	r5,r2
  20090c:	01000874 	movhi	r4,33
  200910:	210fdd04 	addi	r4,r4,16244
  200914:	02018000 	call	201800 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
  200918:	01800104 	movi	r6,4
  20091c:	01400904 	movi	r5,36
  200920:	e13ffe17 	ldw	r4,-8(fp)
  200924:	02003640 	call	200364 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  200928:	01400904 	movi	r5,36
  20092c:	e13ffe17 	ldw	r4,-8(fp)
  200930:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200934:	10bfffcc 	andi	r2,r2,65535
  200938:	100b883a 	mov	r5,r2
  20093c:	01000874 	movhi	r4,33
  200940:	210fe404 	addi	r4,r4,16272
  200944:	02018000 	call	201800 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
  200948:	01800404 	movi	r6,16
  20094c:	01400284 	movi	r5,10
  200950:	e13ffe17 	ldw	r4,-8(fp)
  200954:	02003640 	call	200364 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
  200958:	01400284 	movi	r5,10
  20095c:	e13ffe17 	ldw	r4,-8(fp)
  200960:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200964:	10bfffcc 	andi	r2,r2,65535
  200968:	100b883a 	mov	r5,r2
  20096c:	01000874 	movhi	r4,33
  200970:	210feb04 	addi	r4,r4,16300
  200974:	02018000 	call	201800 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  200978:	01400904 	movi	r5,36
  20097c:	e13ffe17 	ldw	r4,-8(fp)
  200980:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  200984:	10bfffcc 	andi	r2,r2,65535
  200988:	100b883a 	mov	r5,r2
  20098c:	01000874 	movhi	r4,33
  200990:	210fe404 	addi	r4,r4,16272
  200994:	02018000 	call	201800 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  200998:	000d883a 	mov	r6,zero
  20099c:	01400384 	movi	r5,14
  2009a0:	e13ffe17 	ldw	r4,-8(fp)
  2009a4:	02003640 	call	200364 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  2009a8:	01400384 	movi	r5,14
  2009ac:	e13ffe17 	ldw	r4,-8(fp)
  2009b0:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  2009b4:	10bfffcc 	andi	r2,r2,65535
  2009b8:	100b883a 	mov	r5,r2
  2009bc:	01000874 	movhi	r4,33
  2009c0:	210ff204 	addi	r4,r4,16328
  2009c4:	02018000 	call	201800 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
  2009c8:	01400504 	movi	r5,20
  2009cc:	e13ffe17 	ldw	r4,-8(fp)
  2009d0:	02002b00 	call	2002b0 <SGTL5000_Reg_Rd>
  2009d4:	10bfffcc 	andi	r2,r2,65535
  2009d8:	100b883a 	mov	r5,r2
  2009dc:	01000874 	movhi	r4,33
  2009e0:	210ffa04 	addi	r4,r4,16360
  2009e4:	02018000 	call	201800 <printf>


	return 0;
  2009e8:	0005883a 	mov	r2,zero
}
  2009ec:	e037883a 	mov	sp,fp
  2009f0:	dfc00117 	ldw	ra,4(sp)
  2009f4:	df000017 	ldw	fp,0(sp)
  2009f8:	dec00204 	addi	sp,sp,8
  2009fc:	f800283a 	ret

00200a00 <__fixunssfsi>:
  200a00:	defffd04 	addi	sp,sp,-12
  200a04:	dc000015 	stw	r16,0(sp)
  200a08:	0413c034 	movhi	r16,20224
  200a0c:	800b883a 	mov	r5,r16
  200a10:	dc400115 	stw	r17,4(sp)
  200a14:	dfc00215 	stw	ra,8(sp)
  200a18:	2023883a 	mov	r17,r4
  200a1c:	0200c140 	call	200c14 <__gesf2>
  200a20:	1000070e 	bge	r2,zero,200a40 <__fixunssfsi+0x40>
  200a24:	8809883a 	mov	r4,r17
  200a28:	02015e40 	call	2015e4 <__fixsfsi>
  200a2c:	dfc00217 	ldw	ra,8(sp)
  200a30:	dc400117 	ldw	r17,4(sp)
  200a34:	dc000017 	ldw	r16,0(sp)
  200a38:	dec00304 	addi	sp,sp,12
  200a3c:	f800283a 	ret
  200a40:	800b883a 	mov	r5,r16
  200a44:	8809883a 	mov	r4,r17
  200a48:	02011000 	call	201100 <__subsf3>
  200a4c:	1009883a 	mov	r4,r2
  200a50:	02015e40 	call	2015e4 <__fixsfsi>
  200a54:	00e00034 	movhi	r3,32768
  200a58:	10c5883a 	add	r2,r2,r3
  200a5c:	003ff306 	br	200a2c <_gp+0xffdeee48>

00200a60 <__divsi3>:
  200a60:	20001b16 	blt	r4,zero,200ad0 <__divsi3+0x70>
  200a64:	000f883a 	mov	r7,zero
  200a68:	28001616 	blt	r5,zero,200ac4 <__divsi3+0x64>
  200a6c:	200d883a 	mov	r6,r4
  200a70:	29001a2e 	bgeu	r5,r4,200adc <__divsi3+0x7c>
  200a74:	00800804 	movi	r2,32
  200a78:	00c00044 	movi	r3,1
  200a7c:	00000106 	br	200a84 <__divsi3+0x24>
  200a80:	10000d26 	beq	r2,zero,200ab8 <__divsi3+0x58>
  200a84:	294b883a 	add	r5,r5,r5
  200a88:	10bfffc4 	addi	r2,r2,-1
  200a8c:	18c7883a 	add	r3,r3,r3
  200a90:	293ffb36 	bltu	r5,r4,200a80 <_gp+0xffdeee9c>
  200a94:	0005883a 	mov	r2,zero
  200a98:	18000726 	beq	r3,zero,200ab8 <__divsi3+0x58>
  200a9c:	0005883a 	mov	r2,zero
  200aa0:	31400236 	bltu	r6,r5,200aac <__divsi3+0x4c>
  200aa4:	314dc83a 	sub	r6,r6,r5
  200aa8:	10c4b03a 	or	r2,r2,r3
  200aac:	1806d07a 	srli	r3,r3,1
  200ab0:	280ad07a 	srli	r5,r5,1
  200ab4:	183ffa1e 	bne	r3,zero,200aa0 <_gp+0xffdeeebc>
  200ab8:	38000126 	beq	r7,zero,200ac0 <__divsi3+0x60>
  200abc:	0085c83a 	sub	r2,zero,r2
  200ac0:	f800283a 	ret
  200ac4:	014bc83a 	sub	r5,zero,r5
  200ac8:	39c0005c 	xori	r7,r7,1
  200acc:	003fe706 	br	200a6c <_gp+0xffdeee88>
  200ad0:	0109c83a 	sub	r4,zero,r4
  200ad4:	01c00044 	movi	r7,1
  200ad8:	003fe306 	br	200a68 <_gp+0xffdeee84>
  200adc:	00c00044 	movi	r3,1
  200ae0:	003fee06 	br	200a9c <_gp+0xffdeeeb8>

00200ae4 <__modsi3>:
  200ae4:	20001716 	blt	r4,zero,200b44 <__modsi3+0x60>
  200ae8:	000f883a 	mov	r7,zero
  200aec:	2005883a 	mov	r2,r4
  200af0:	28001216 	blt	r5,zero,200b3c <__modsi3+0x58>
  200af4:	2900162e 	bgeu	r5,r4,200b50 <__modsi3+0x6c>
  200af8:	01800804 	movi	r6,32
  200afc:	00c00044 	movi	r3,1
  200b00:	00000106 	br	200b08 <__modsi3+0x24>
  200b04:	30000a26 	beq	r6,zero,200b30 <__modsi3+0x4c>
  200b08:	294b883a 	add	r5,r5,r5
  200b0c:	31bfffc4 	addi	r6,r6,-1
  200b10:	18c7883a 	add	r3,r3,r3
  200b14:	293ffb36 	bltu	r5,r4,200b04 <_gp+0xffdeef20>
  200b18:	18000526 	beq	r3,zero,200b30 <__modsi3+0x4c>
  200b1c:	1806d07a 	srli	r3,r3,1
  200b20:	11400136 	bltu	r2,r5,200b28 <__modsi3+0x44>
  200b24:	1145c83a 	sub	r2,r2,r5
  200b28:	280ad07a 	srli	r5,r5,1
  200b2c:	183ffb1e 	bne	r3,zero,200b1c <_gp+0xffdeef38>
  200b30:	38000126 	beq	r7,zero,200b38 <__modsi3+0x54>
  200b34:	0085c83a 	sub	r2,zero,r2
  200b38:	f800283a 	ret
  200b3c:	014bc83a 	sub	r5,zero,r5
  200b40:	003fec06 	br	200af4 <_gp+0xffdeef10>
  200b44:	0109c83a 	sub	r4,zero,r4
  200b48:	01c00044 	movi	r7,1
  200b4c:	003fe706 	br	200aec <_gp+0xffdeef08>
  200b50:	00c00044 	movi	r3,1
  200b54:	003ff106 	br	200b1c <_gp+0xffdeef38>

00200b58 <__udivsi3>:
  200b58:	200d883a 	mov	r6,r4
  200b5c:	2900152e 	bgeu	r5,r4,200bb4 <__udivsi3+0x5c>
  200b60:	28001416 	blt	r5,zero,200bb4 <__udivsi3+0x5c>
  200b64:	00800804 	movi	r2,32
  200b68:	00c00044 	movi	r3,1
  200b6c:	00000206 	br	200b78 <__udivsi3+0x20>
  200b70:	10000e26 	beq	r2,zero,200bac <__udivsi3+0x54>
  200b74:	28000516 	blt	r5,zero,200b8c <__udivsi3+0x34>
  200b78:	294b883a 	add	r5,r5,r5
  200b7c:	10bfffc4 	addi	r2,r2,-1
  200b80:	18c7883a 	add	r3,r3,r3
  200b84:	293ffa36 	bltu	r5,r4,200b70 <_gp+0xffdeef8c>
  200b88:	18000826 	beq	r3,zero,200bac <__udivsi3+0x54>
  200b8c:	0005883a 	mov	r2,zero
  200b90:	31400236 	bltu	r6,r5,200b9c <__udivsi3+0x44>
  200b94:	314dc83a 	sub	r6,r6,r5
  200b98:	10c4b03a 	or	r2,r2,r3
  200b9c:	1806d07a 	srli	r3,r3,1
  200ba0:	280ad07a 	srli	r5,r5,1
  200ba4:	183ffa1e 	bne	r3,zero,200b90 <_gp+0xffdeefac>
  200ba8:	f800283a 	ret
  200bac:	0005883a 	mov	r2,zero
  200bb0:	f800283a 	ret
  200bb4:	00c00044 	movi	r3,1
  200bb8:	003ff406 	br	200b8c <_gp+0xffdeefa8>

00200bbc <__umodsi3>:
  200bbc:	2005883a 	mov	r2,r4
  200bc0:	2900122e 	bgeu	r5,r4,200c0c <__umodsi3+0x50>
  200bc4:	28001116 	blt	r5,zero,200c0c <__umodsi3+0x50>
  200bc8:	01800804 	movi	r6,32
  200bcc:	00c00044 	movi	r3,1
  200bd0:	00000206 	br	200bdc <__umodsi3+0x20>
  200bd4:	30000c26 	beq	r6,zero,200c08 <__umodsi3+0x4c>
  200bd8:	28000516 	blt	r5,zero,200bf0 <__umodsi3+0x34>
  200bdc:	294b883a 	add	r5,r5,r5
  200be0:	31bfffc4 	addi	r6,r6,-1
  200be4:	18c7883a 	add	r3,r3,r3
  200be8:	293ffa36 	bltu	r5,r4,200bd4 <_gp+0xffdeeff0>
  200bec:	18000626 	beq	r3,zero,200c08 <__umodsi3+0x4c>
  200bf0:	1806d07a 	srli	r3,r3,1
  200bf4:	11400136 	bltu	r2,r5,200bfc <__umodsi3+0x40>
  200bf8:	1145c83a 	sub	r2,r2,r5
  200bfc:	280ad07a 	srli	r5,r5,1
  200c00:	183ffb1e 	bne	r3,zero,200bf0 <_gp+0xffdef00c>
  200c04:	f800283a 	ret
  200c08:	f800283a 	ret
  200c0c:	00c00044 	movi	r3,1
  200c10:	003ff706 	br	200bf0 <_gp+0xffdef00c>

00200c14 <__gesf2>:
  200c14:	2004d5fa 	srli	r2,r4,23
  200c18:	2806d5fa 	srli	r3,r5,23
  200c1c:	01802034 	movhi	r6,128
  200c20:	31bfffc4 	addi	r6,r6,-1
  200c24:	10803fcc 	andi	r2,r2,255
  200c28:	01c03fc4 	movi	r7,255
  200c2c:	3110703a 	and	r8,r6,r4
  200c30:	18c03fcc 	andi	r3,r3,255
  200c34:	314c703a 	and	r6,r6,r5
  200c38:	2008d7fa 	srli	r4,r4,31
  200c3c:	280ad7fa 	srli	r5,r5,31
  200c40:	11c01926 	beq	r2,r7,200ca8 <__gesf2+0x94>
  200c44:	01c03fc4 	movi	r7,255
  200c48:	19c00f26 	beq	r3,r7,200c88 <__gesf2+0x74>
  200c4c:	1000061e 	bne	r2,zero,200c68 <__gesf2+0x54>
  200c50:	400f003a 	cmpeq	r7,r8,zero
  200c54:	1800071e 	bne	r3,zero,200c74 <__gesf2+0x60>
  200c58:	3000061e 	bne	r6,zero,200c74 <__gesf2+0x60>
  200c5c:	0005883a 	mov	r2,zero
  200c60:	40000e1e 	bne	r8,zero,200c9c <__gesf2+0x88>
  200c64:	f800283a 	ret
  200c68:	18000a1e 	bne	r3,zero,200c94 <__gesf2+0x80>
  200c6c:	30000b26 	beq	r6,zero,200c9c <__gesf2+0x88>
  200c70:	000f883a 	mov	r7,zero
  200c74:	29403fcc 	andi	r5,r5,255
  200c78:	38000726 	beq	r7,zero,200c98 <__gesf2+0x84>
  200c7c:	28000826 	beq	r5,zero,200ca0 <__gesf2+0x8c>
  200c80:	00800044 	movi	r2,1
  200c84:	f800283a 	ret
  200c88:	303ff026 	beq	r6,zero,200c4c <_gp+0xffdef068>
  200c8c:	00bfff84 	movi	r2,-2
  200c90:	f800283a 	ret
  200c94:	29403fcc 	andi	r5,r5,255
  200c98:	21400526 	beq	r4,r5,200cb0 <__gesf2+0x9c>
  200c9c:	203ff826 	beq	r4,zero,200c80 <_gp+0xffdef09c>
  200ca0:	00bfffc4 	movi	r2,-1
  200ca4:	f800283a 	ret
  200ca8:	403fe626 	beq	r8,zero,200c44 <_gp+0xffdef060>
  200cac:	003ff706 	br	200c8c <_gp+0xffdef0a8>
  200cb0:	18bffa16 	blt	r3,r2,200c9c <_gp+0xffdef0b8>
  200cb4:	10c00216 	blt	r2,r3,200cc0 <__gesf2+0xac>
  200cb8:	323ff836 	bltu	r6,r8,200c9c <_gp+0xffdef0b8>
  200cbc:	4180022e 	bgeu	r8,r6,200cc8 <__gesf2+0xb4>
  200cc0:	203fef1e 	bne	r4,zero,200c80 <_gp+0xffdef09c>
  200cc4:	003ff606 	br	200ca0 <_gp+0xffdef0bc>
  200cc8:	0005883a 	mov	r2,zero
  200ccc:	f800283a 	ret

00200cd0 <__mulsf3>:
  200cd0:	defff504 	addi	sp,sp,-44
  200cd4:	dc000115 	stw	r16,4(sp)
  200cd8:	2020d5fa 	srli	r16,r4,23
  200cdc:	dd400615 	stw	r21,24(sp)
  200ce0:	202ad7fa 	srli	r21,r4,31
  200ce4:	dc800315 	stw	r18,12(sp)
  200ce8:	04802034 	movhi	r18,128
  200cec:	df000915 	stw	fp,36(sp)
  200cf0:	dd000515 	stw	r20,20(sp)
  200cf4:	94bfffc4 	addi	r18,r18,-1
  200cf8:	dfc00a15 	stw	ra,40(sp)
  200cfc:	ddc00815 	stw	r23,32(sp)
  200d00:	dd800715 	stw	r22,28(sp)
  200d04:	dcc00415 	stw	r19,16(sp)
  200d08:	dc400215 	stw	r17,8(sp)
  200d0c:	84003fcc 	andi	r16,r16,255
  200d10:	9124703a 	and	r18,r18,r4
  200d14:	a829883a 	mov	r20,r21
  200d18:	af003fcc 	andi	fp,r21,255
  200d1c:	80005426 	beq	r16,zero,200e70 <__mulsf3+0x1a0>
  200d20:	00803fc4 	movi	r2,255
  200d24:	80802f26 	beq	r16,r2,200de4 <__mulsf3+0x114>
  200d28:	91002034 	orhi	r4,r18,128
  200d2c:	202490fa 	slli	r18,r4,3
  200d30:	843fe044 	addi	r16,r16,-127
  200d34:	0023883a 	mov	r17,zero
  200d38:	002f883a 	mov	r23,zero
  200d3c:	2804d5fa 	srli	r2,r5,23
  200d40:	282cd7fa 	srli	r22,r5,31
  200d44:	01002034 	movhi	r4,128
  200d48:	213fffc4 	addi	r4,r4,-1
  200d4c:	10803fcc 	andi	r2,r2,255
  200d50:	2166703a 	and	r19,r4,r5
  200d54:	b1803fcc 	andi	r6,r22,255
  200d58:	10004c26 	beq	r2,zero,200e8c <__mulsf3+0x1bc>
  200d5c:	00c03fc4 	movi	r3,255
  200d60:	10c04726 	beq	r2,r3,200e80 <__mulsf3+0x1b0>
  200d64:	99002034 	orhi	r4,r19,128
  200d68:	202690fa 	slli	r19,r4,3
  200d6c:	10bfe044 	addi	r2,r2,-127
  200d70:	0007883a 	mov	r3,zero
  200d74:	80a1883a 	add	r16,r16,r2
  200d78:	010003c4 	movi	r4,15
  200d7c:	1c44b03a 	or	r2,r3,r17
  200d80:	b56af03a 	xor	r21,r22,r21
  200d84:	81c00044 	addi	r7,r16,1
  200d88:	20806b36 	bltu	r4,r2,200f38 <__mulsf3+0x268>
  200d8c:	100490ba 	slli	r2,r2,2
  200d90:	01000834 	movhi	r4,32
  200d94:	21036904 	addi	r4,r4,3492
  200d98:	1105883a 	add	r2,r2,r4
  200d9c:	10800017 	ldw	r2,0(r2)
  200da0:	1000683a 	jmp	r2
  200da4:	00200f38 	rdprs	zero,zero,-32708
  200da8:	00200df8 	rdprs	zero,zero,-32713
  200dac:	00200df8 	rdprs	zero,zero,-32713
  200db0:	00200df4 	movhi	zero,32823
  200db4:	00200f1c 	xori	zero,zero,32828
  200db8:	00200f1c 	xori	zero,zero,32828
  200dbc:	00200f08 	cmpgei	zero,zero,-32708
  200dc0:	00200df4 	movhi	zero,32823
  200dc4:	00200f1c 	xori	zero,zero,32828
  200dc8:	00200f08 	cmpgei	zero,zero,-32708
  200dcc:	00200f1c 	xori	zero,zero,32828
  200dd0:	00200df4 	movhi	zero,32823
  200dd4:	00200f28 	cmpgeui	zero,zero,32828
  200dd8:	00200f28 	cmpgeui	zero,zero,32828
  200ddc:	00200f28 	cmpgeui	zero,zero,32828
  200de0:	00201038 	rdprs	zero,zero,-32704
  200de4:	90003b1e 	bne	r18,zero,200ed4 <__mulsf3+0x204>
  200de8:	04400204 	movi	r17,8
  200dec:	05c00084 	movi	r23,2
  200df0:	003fd206 	br	200d3c <_gp+0xffdef158>
  200df4:	302b883a 	mov	r21,r6
  200df8:	00800084 	movi	r2,2
  200dfc:	18802626 	beq	r3,r2,200e98 <__mulsf3+0x1c8>
  200e00:	008000c4 	movi	r2,3
  200e04:	1880b826 	beq	r3,r2,2010e8 <__mulsf3+0x418>
  200e08:	00800044 	movi	r2,1
  200e0c:	1880af1e 	bne	r3,r2,2010cc <__mulsf3+0x3fc>
  200e10:	a829883a 	mov	r20,r21
  200e14:	0007883a 	mov	r3,zero
  200e18:	0009883a 	mov	r4,zero
  200e1c:	18803fcc 	andi	r2,r3,255
  200e20:	100695fa 	slli	r3,r2,23
  200e24:	a0803fcc 	andi	r2,r20,255
  200e28:	100a97fa 	slli	r5,r2,31
  200e2c:	00802034 	movhi	r2,128
  200e30:	10bfffc4 	addi	r2,r2,-1
  200e34:	2084703a 	and	r2,r4,r2
  200e38:	10c4b03a 	or	r2,r2,r3
  200e3c:	1144b03a 	or	r2,r2,r5
  200e40:	dfc00a17 	ldw	ra,40(sp)
  200e44:	df000917 	ldw	fp,36(sp)
  200e48:	ddc00817 	ldw	r23,32(sp)
  200e4c:	dd800717 	ldw	r22,28(sp)
  200e50:	dd400617 	ldw	r21,24(sp)
  200e54:	dd000517 	ldw	r20,20(sp)
  200e58:	dcc00417 	ldw	r19,16(sp)
  200e5c:	dc800317 	ldw	r18,12(sp)
  200e60:	dc400217 	ldw	r17,8(sp)
  200e64:	dc000117 	ldw	r16,4(sp)
  200e68:	dec00b04 	addi	sp,sp,44
  200e6c:	f800283a 	ret
  200e70:	90000d1e 	bne	r18,zero,200ea8 <__mulsf3+0x1d8>
  200e74:	04400104 	movi	r17,4
  200e78:	05c00044 	movi	r23,1
  200e7c:	003faf06 	br	200d3c <_gp+0xffdef158>
  200e80:	9806c03a 	cmpne	r3,r19,zero
  200e84:	18c00084 	addi	r3,r3,2
  200e88:	003fba06 	br	200d74 <_gp+0xffdef190>
  200e8c:	9800141e 	bne	r19,zero,200ee0 <__mulsf3+0x210>
  200e90:	00c00044 	movi	r3,1
  200e94:	003fb706 	br	200d74 <_gp+0xffdef190>
  200e98:	a829883a 	mov	r20,r21
  200e9c:	00ffffc4 	movi	r3,-1
  200ea0:	0009883a 	mov	r4,zero
  200ea4:	003fdd06 	br	200e1c <_gp+0xffdef238>
  200ea8:	9009883a 	mov	r4,r18
  200eac:	d9400015 	stw	r5,0(sp)
  200eb0:	02017440 	call	201744 <__clzsi2>
  200eb4:	10fffec4 	addi	r3,r2,-5
  200eb8:	10801d84 	addi	r2,r2,118
  200ebc:	90e4983a 	sll	r18,r18,r3
  200ec0:	00a1c83a 	sub	r16,zero,r2
  200ec4:	0023883a 	mov	r17,zero
  200ec8:	002f883a 	mov	r23,zero
  200ecc:	d9400017 	ldw	r5,0(sp)
  200ed0:	003f9a06 	br	200d3c <_gp+0xffdef158>
  200ed4:	04400304 	movi	r17,12
  200ed8:	05c000c4 	movi	r23,3
  200edc:	003f9706 	br	200d3c <_gp+0xffdef158>
  200ee0:	9809883a 	mov	r4,r19
  200ee4:	d9800015 	stw	r6,0(sp)
  200ee8:	02017440 	call	201744 <__clzsi2>
  200eec:	10fffec4 	addi	r3,r2,-5
  200ef0:	10801d84 	addi	r2,r2,118
  200ef4:	98e6983a 	sll	r19,r19,r3
  200ef8:	0085c83a 	sub	r2,zero,r2
  200efc:	0007883a 	mov	r3,zero
  200f00:	d9800017 	ldw	r6,0(sp)
  200f04:	003f9b06 	br	200d74 <_gp+0xffdef190>
  200f08:	01002034 	movhi	r4,128
  200f0c:	0029883a 	mov	r20,zero
  200f10:	213fffc4 	addi	r4,r4,-1
  200f14:	00ffffc4 	movi	r3,-1
  200f18:	003fc006 	br	200e1c <_gp+0xffdef238>
  200f1c:	9027883a 	mov	r19,r18
  200f20:	b807883a 	mov	r3,r23
  200f24:	003fb406 	br	200df8 <_gp+0xffdef214>
  200f28:	9027883a 	mov	r19,r18
  200f2c:	e02b883a 	mov	r21,fp
  200f30:	b807883a 	mov	r3,r23
  200f34:	003fb006 	br	200df8 <_gp+0xffdef214>
  200f38:	9028d43a 	srli	r20,r18,16
  200f3c:	982cd43a 	srli	r22,r19,16
  200f40:	94bfffcc 	andi	r18,r18,65535
  200f44:	9cffffcc 	andi	r19,r19,65535
  200f48:	980b883a 	mov	r5,r19
  200f4c:	9009883a 	mov	r4,r18
  200f50:	d9c00015 	stw	r7,0(sp)
  200f54:	02017a80 	call	2017a8 <__mulsi3>
  200f58:	a00b883a 	mov	r5,r20
  200f5c:	9809883a 	mov	r4,r19
  200f60:	1023883a 	mov	r17,r2
  200f64:	02017a80 	call	2017a8 <__mulsi3>
  200f68:	a009883a 	mov	r4,r20
  200f6c:	b00b883a 	mov	r5,r22
  200f70:	1027883a 	mov	r19,r2
  200f74:	02017a80 	call	2017a8 <__mulsi3>
  200f78:	b00b883a 	mov	r5,r22
  200f7c:	9009883a 	mov	r4,r18
  200f80:	1029883a 	mov	r20,r2
  200f84:	02017a80 	call	2017a8 <__mulsi3>
  200f88:	8806d43a 	srli	r3,r17,16
  200f8c:	14c5883a 	add	r2,r2,r19
  200f90:	d9c00017 	ldw	r7,0(sp)
  200f94:	1885883a 	add	r2,r3,r2
  200f98:	14c0022e 	bgeu	r2,r19,200fa4 <__mulsf3+0x2d4>
  200f9c:	00c00074 	movhi	r3,1
  200fa0:	a0e9883a 	add	r20,r20,r3
  200fa4:	1026943a 	slli	r19,r2,16
  200fa8:	8c7fffcc 	andi	r17,r17,65535
  200fac:	1004d43a 	srli	r2,r2,16
  200fb0:	9c63883a 	add	r17,r19,r17
  200fb4:	882691ba 	slli	r19,r17,6
  200fb8:	1505883a 	add	r2,r2,r20
  200fbc:	8822d6ba 	srli	r17,r17,26
  200fc0:	100891ba 	slli	r4,r2,6
  200fc4:	9826c03a 	cmpne	r19,r19,zero
  200fc8:	9c62b03a 	or	r17,r19,r17
  200fcc:	8926b03a 	or	r19,r17,r4
  200fd0:	9882002c 	andhi	r2,r19,2048
  200fd4:	10000426 	beq	r2,zero,200fe8 <__mulsf3+0x318>
  200fd8:	9804d07a 	srli	r2,r19,1
  200fdc:	9900004c 	andi	r4,r19,1
  200fe0:	3821883a 	mov	r16,r7
  200fe4:	1126b03a 	or	r19,r2,r4
  200fe8:	80c01fc4 	addi	r3,r16,127
  200fec:	00c0210e 	bge	zero,r3,201074 <__mulsf3+0x3a4>
  200ff0:	988001cc 	andi	r2,r19,7
  200ff4:	10000426 	beq	r2,zero,201008 <__mulsf3+0x338>
  200ff8:	988003cc 	andi	r2,r19,15
  200ffc:	01000104 	movi	r4,4
  201000:	11000126 	beq	r2,r4,201008 <__mulsf3+0x338>
  201004:	9927883a 	add	r19,r19,r4
  201008:	9882002c 	andhi	r2,r19,2048
  20100c:	10000426 	beq	r2,zero,201020 <__mulsf3+0x350>
  201010:	00be0034 	movhi	r2,63488
  201014:	10bfffc4 	addi	r2,r2,-1
  201018:	80c02004 	addi	r3,r16,128
  20101c:	98a6703a 	and	r19,r19,r2
  201020:	00803f84 	movi	r2,254
  201024:	10ff9c16 	blt	r2,r3,200e98 <_gp+0xffdef2b4>
  201028:	980891ba 	slli	r4,r19,6
  20102c:	a829883a 	mov	r20,r21
  201030:	2008d27a 	srli	r4,r4,9
  201034:	003f7906 	br	200e1c <_gp+0xffdef238>
  201038:	9080102c 	andhi	r2,r18,64
  20103c:	10000826 	beq	r2,zero,201060 <__mulsf3+0x390>
  201040:	9880102c 	andhi	r2,r19,64
  201044:	1000061e 	bne	r2,zero,201060 <__mulsf3+0x390>
  201048:	00802034 	movhi	r2,128
  20104c:	99001034 	orhi	r4,r19,64
  201050:	10bfffc4 	addi	r2,r2,-1
  201054:	b029883a 	mov	r20,r22
  201058:	2088703a 	and	r4,r4,r2
  20105c:	003fad06 	br	200f14 <_gp+0xffdef330>
  201060:	00802034 	movhi	r2,128
  201064:	91001034 	orhi	r4,r18,64
  201068:	10bfffc4 	addi	r2,r2,-1
  20106c:	2088703a 	and	r4,r4,r2
  201070:	003fa806 	br	200f14 <_gp+0xffdef330>
  201074:	00800044 	movi	r2,1
  201078:	10c7c83a 	sub	r3,r2,r3
  20107c:	008006c4 	movi	r2,27
  201080:	10ff6316 	blt	r2,r3,200e10 <_gp+0xffdef22c>
  201084:	00800804 	movi	r2,32
  201088:	10c5c83a 	sub	r2,r2,r3
  20108c:	9884983a 	sll	r2,r19,r2
  201090:	98c6d83a 	srl	r3,r19,r3
  201094:	1004c03a 	cmpne	r2,r2,zero
  201098:	1884b03a 	or	r2,r3,r2
  20109c:	10c001cc 	andi	r3,r2,7
  2010a0:	18000426 	beq	r3,zero,2010b4 <__mulsf3+0x3e4>
  2010a4:	10c003cc 	andi	r3,r2,15
  2010a8:	01000104 	movi	r4,4
  2010ac:	19000126 	beq	r3,r4,2010b4 <__mulsf3+0x3e4>
  2010b0:	1105883a 	add	r2,r2,r4
  2010b4:	10c1002c 	andhi	r3,r2,1024
  2010b8:	18000626 	beq	r3,zero,2010d4 <__mulsf3+0x404>
  2010bc:	a829883a 	mov	r20,r21
  2010c0:	00c00044 	movi	r3,1
  2010c4:	0009883a 	mov	r4,zero
  2010c8:	003f5406 	br	200e1c <_gp+0xffdef238>
  2010cc:	3821883a 	mov	r16,r7
  2010d0:	003fc506 	br	200fe8 <_gp+0xffdef404>
  2010d4:	100491ba 	slli	r2,r2,6
  2010d8:	a829883a 	mov	r20,r21
  2010dc:	0007883a 	mov	r3,zero
  2010e0:	1008d27a 	srli	r4,r2,9
  2010e4:	003f4d06 	br	200e1c <_gp+0xffdef238>
  2010e8:	00802034 	movhi	r2,128
  2010ec:	99001034 	orhi	r4,r19,64
  2010f0:	10bfffc4 	addi	r2,r2,-1
  2010f4:	a829883a 	mov	r20,r21
  2010f8:	2088703a 	and	r4,r4,r2
  2010fc:	003f8506 	br	200f14 <_gp+0xffdef330>

00201100 <__subsf3>:
  201100:	defffc04 	addi	sp,sp,-16
  201104:	280cd5fa 	srli	r6,r5,23
  201108:	dc000015 	stw	r16,0(sp)
  20110c:	01c02034 	movhi	r7,128
  201110:	2020d5fa 	srli	r16,r4,23
  201114:	39ffffc4 	addi	r7,r7,-1
  201118:	3906703a 	and	r3,r7,r4
  20111c:	dc400115 	stw	r17,4(sp)
  201120:	394e703a 	and	r7,r7,r5
  201124:	2022d7fa 	srli	r17,r4,31
  201128:	dfc00315 	stw	ra,12(sp)
  20112c:	dc800215 	stw	r18,8(sp)
  201130:	31803fcc 	andi	r6,r6,255
  201134:	01003fc4 	movi	r4,255
  201138:	84003fcc 	andi	r16,r16,255
  20113c:	180690fa 	slli	r3,r3,3
  201140:	2804d7fa 	srli	r2,r5,31
  201144:	380e90fa 	slli	r7,r7,3
  201148:	31006d26 	beq	r6,r4,201300 <__subsf3+0x200>
  20114c:	1080005c 	xori	r2,r2,1
  201150:	8189c83a 	sub	r4,r16,r6
  201154:	14404f26 	beq	r2,r17,201294 <__subsf3+0x194>
  201158:	0100770e 	bge	zero,r4,201338 <__subsf3+0x238>
  20115c:	30001e1e 	bne	r6,zero,2011d8 <__subsf3+0xd8>
  201160:	38006a1e 	bne	r7,zero,20130c <__subsf3+0x20c>
  201164:	188001cc 	andi	r2,r3,7
  201168:	10000426 	beq	r2,zero,20117c <__subsf3+0x7c>
  20116c:	188003cc 	andi	r2,r3,15
  201170:	01000104 	movi	r4,4
  201174:	11000126 	beq	r2,r4,20117c <__subsf3+0x7c>
  201178:	1907883a 	add	r3,r3,r4
  20117c:	1881002c 	andhi	r2,r3,1024
  201180:	10003926 	beq	r2,zero,201268 <__subsf3+0x168>
  201184:	84000044 	addi	r16,r16,1
  201188:	00803fc4 	movi	r2,255
  20118c:	80807526 	beq	r16,r2,201364 <__subsf3+0x264>
  201190:	180691ba 	slli	r3,r3,6
  201194:	8880004c 	andi	r2,r17,1
  201198:	180ad27a 	srli	r5,r3,9
  20119c:	84003fcc 	andi	r16,r16,255
  2011a0:	800695fa 	slli	r3,r16,23
  2011a4:	10803fcc 	andi	r2,r2,255
  2011a8:	01002034 	movhi	r4,128
  2011ac:	213fffc4 	addi	r4,r4,-1
  2011b0:	100497fa 	slli	r2,r2,31
  2011b4:	2920703a 	and	r16,r5,r4
  2011b8:	80e0b03a 	or	r16,r16,r3
  2011bc:	8084b03a 	or	r2,r16,r2
  2011c0:	dfc00317 	ldw	ra,12(sp)
  2011c4:	dc800217 	ldw	r18,8(sp)
  2011c8:	dc400117 	ldw	r17,4(sp)
  2011cc:	dc000017 	ldw	r16,0(sp)
  2011d0:	dec00404 	addi	sp,sp,16
  2011d4:	f800283a 	ret
  2011d8:	00803fc4 	movi	r2,255
  2011dc:	80bfe126 	beq	r16,r2,201164 <_gp+0xffdef580>
  2011e0:	39c10034 	orhi	r7,r7,1024
  2011e4:	008006c4 	movi	r2,27
  2011e8:	11007416 	blt	r2,r4,2013bc <__subsf3+0x2bc>
  2011ec:	00800804 	movi	r2,32
  2011f0:	1105c83a 	sub	r2,r2,r4
  2011f4:	3884983a 	sll	r2,r7,r2
  2011f8:	390ed83a 	srl	r7,r7,r4
  2011fc:	1008c03a 	cmpne	r4,r2,zero
  201200:	390eb03a 	or	r7,r7,r4
  201204:	19c7c83a 	sub	r3,r3,r7
  201208:	1881002c 	andhi	r2,r3,1024
  20120c:	10001426 	beq	r2,zero,201260 <__subsf3+0x160>
  201210:	04810034 	movhi	r18,1024
  201214:	94bfffc4 	addi	r18,r18,-1
  201218:	1ca4703a 	and	r18,r3,r18
  20121c:	9009883a 	mov	r4,r18
  201220:	02017440 	call	201744 <__clzsi2>
  201224:	10bffec4 	addi	r2,r2,-5
  201228:	90a4983a 	sll	r18,r18,r2
  20122c:	14005116 	blt	r2,r16,201374 <__subsf3+0x274>
  201230:	1405c83a 	sub	r2,r2,r16
  201234:	10c00044 	addi	r3,r2,1
  201238:	00800804 	movi	r2,32
  20123c:	10c5c83a 	sub	r2,r2,r3
  201240:	9084983a 	sll	r2,r18,r2
  201244:	90e4d83a 	srl	r18,r18,r3
  201248:	0021883a 	mov	r16,zero
  20124c:	1006c03a 	cmpne	r3,r2,zero
  201250:	90c6b03a 	or	r3,r18,r3
  201254:	003fc306 	br	201164 <_gp+0xffdef580>
  201258:	2000e026 	beq	r4,zero,2015dc <__subsf3+0x4dc>
  20125c:	2007883a 	mov	r3,r4
  201260:	188001cc 	andi	r2,r3,7
  201264:	103fc11e 	bne	r2,zero,20116c <_gp+0xffdef588>
  201268:	180ad0fa 	srli	r5,r3,3
  20126c:	00c03fc4 	movi	r3,255
  201270:	8880004c 	andi	r2,r17,1
  201274:	80c0031e 	bne	r16,r3,201284 <__subsf3+0x184>
  201278:	28006d26 	beq	r5,zero,201430 <__subsf3+0x330>
  20127c:	29401034 	orhi	r5,r5,64
  201280:	043fffc4 	movi	r16,-1
  201284:	00c02034 	movhi	r3,128
  201288:	18ffffc4 	addi	r3,r3,-1
  20128c:	28ca703a 	and	r5,r5,r3
  201290:	003fc206 	br	20119c <_gp+0xffdef5b8>
  201294:	01003c0e 	bge	zero,r4,201388 <__subsf3+0x288>
  201298:	30002126 	beq	r6,zero,201320 <__subsf3+0x220>
  20129c:	01403fc4 	movi	r5,255
  2012a0:	817fb026 	beq	r16,r5,201164 <_gp+0xffdef580>
  2012a4:	39c10034 	orhi	r7,r7,1024
  2012a8:	014006c4 	movi	r5,27
  2012ac:	29007416 	blt	r5,r4,201480 <__subsf3+0x380>
  2012b0:	01400804 	movi	r5,32
  2012b4:	290bc83a 	sub	r5,r5,r4
  2012b8:	394a983a 	sll	r5,r7,r5
  2012bc:	390ed83a 	srl	r7,r7,r4
  2012c0:	2808c03a 	cmpne	r4,r5,zero
  2012c4:	390eb03a 	or	r7,r7,r4
  2012c8:	19c7883a 	add	r3,r3,r7
  2012cc:	1901002c 	andhi	r4,r3,1024
  2012d0:	20003826 	beq	r4,zero,2013b4 <__subsf3+0x2b4>
  2012d4:	84000044 	addi	r16,r16,1
  2012d8:	01003fc4 	movi	r4,255
  2012dc:	81005426 	beq	r16,r4,201430 <__subsf3+0x330>
  2012e0:	1023883a 	mov	r17,r2
  2012e4:	00bf0034 	movhi	r2,64512
  2012e8:	10bfffc4 	addi	r2,r2,-1
  2012ec:	1900004c 	andi	r4,r3,1
  2012f0:	1886703a 	and	r3,r3,r2
  2012f4:	1806d07a 	srli	r3,r3,1
  2012f8:	1906b03a 	or	r3,r3,r4
  2012fc:	003f9906 	br	201164 <_gp+0xffdef580>
  201300:	383f9226 	beq	r7,zero,20114c <_gp+0xffdef568>
  201304:	10803fcc 	andi	r2,r2,255
  201308:	003f9106 	br	201150 <_gp+0xffdef56c>
  20130c:	213fffc4 	addi	r4,r4,-1
  201310:	203fbc26 	beq	r4,zero,201204 <_gp+0xffdef620>
  201314:	00803fc4 	movi	r2,255
  201318:	80bfb21e 	bne	r16,r2,2011e4 <_gp+0xffdef600>
  20131c:	003f9106 	br	201164 <_gp+0xffdef580>
  201320:	383f9026 	beq	r7,zero,201164 <_gp+0xffdef580>
  201324:	213fffc4 	addi	r4,r4,-1
  201328:	203fe726 	beq	r4,zero,2012c8 <_gp+0xffdef6e4>
  20132c:	01403fc4 	movi	r5,255
  201330:	817fdd1e 	bne	r16,r5,2012a8 <_gp+0xffdef6c4>
  201334:	003f8b06 	br	201164 <_gp+0xffdef580>
  201338:	2000221e 	bne	r4,zero,2013c4 <__subsf3+0x2c4>
  20133c:	81000044 	addi	r4,r16,1
  201340:	21003fcc 	andi	r4,r4,255
  201344:	01400044 	movi	r5,1
  201348:	2900470e 	bge	r5,r4,201468 <__subsf3+0x368>
  20134c:	19e5c83a 	sub	r18,r3,r7
  201350:	9141002c 	andhi	r5,r18,1024
  201354:	28002d26 	beq	r5,zero,20140c <__subsf3+0x30c>
  201358:	38e5c83a 	sub	r18,r7,r3
  20135c:	1023883a 	mov	r17,r2
  201360:	003fae06 	br	20121c <_gp+0xffdef638>
  201364:	8880004c 	andi	r2,r17,1
  201368:	043fffc4 	movi	r16,-1
  20136c:	000b883a 	mov	r5,zero
  201370:	003f8a06 	br	20119c <_gp+0xffdef5b8>
  201374:	00ff0034 	movhi	r3,64512
  201378:	18ffffc4 	addi	r3,r3,-1
  20137c:	80a1c83a 	sub	r16,r16,r2
  201380:	90c6703a 	and	r3,r18,r3
  201384:	003f7706 	br	201164 <_gp+0xffdef580>
  201388:	2000431e 	bne	r4,zero,201498 <__subsf3+0x398>
  20138c:	81000044 	addi	r4,r16,1
  201390:	21803fcc 	andi	r6,r4,255
  201394:	01400044 	movi	r5,1
  201398:	2980280e 	bge	r5,r6,20143c <__subsf3+0x33c>
  20139c:	01403fc4 	movi	r5,255
  2013a0:	21402326 	beq	r4,r5,201430 <__subsf3+0x330>
  2013a4:	19c7883a 	add	r3,r3,r7
  2013a8:	1806d07a 	srli	r3,r3,1
  2013ac:	2021883a 	mov	r16,r4
  2013b0:	003f6c06 	br	201164 <_gp+0xffdef580>
  2013b4:	1023883a 	mov	r17,r2
  2013b8:	003fa906 	br	201260 <_gp+0xffdef67c>
  2013bc:	01c00044 	movi	r7,1
  2013c0:	003f9006 	br	201204 <_gp+0xffdef620>
  2013c4:	8000151e 	bne	r16,zero,20141c <__subsf3+0x31c>
  2013c8:	18002f26 	beq	r3,zero,201488 <__subsf3+0x388>
  2013cc:	0108303a 	nor	r4,zero,r4
  2013d0:	20000a26 	beq	r4,zero,2013fc <__subsf3+0x2fc>
  2013d4:	01403fc4 	movi	r5,255
  2013d8:	31402b26 	beq	r6,r5,201488 <__subsf3+0x388>
  2013dc:	014006c4 	movi	r5,27
  2013e0:	29006e16 	blt	r5,r4,20159c <__subsf3+0x49c>
  2013e4:	01400804 	movi	r5,32
  2013e8:	290bc83a 	sub	r5,r5,r4
  2013ec:	194a983a 	sll	r5,r3,r5
  2013f0:	1908d83a 	srl	r4,r3,r4
  2013f4:	2806c03a 	cmpne	r3,r5,zero
  2013f8:	20c6b03a 	or	r3,r4,r3
  2013fc:	38c7c83a 	sub	r3,r7,r3
  201400:	3021883a 	mov	r16,r6
  201404:	1023883a 	mov	r17,r2
  201408:	003f7f06 	br	201208 <_gp+0xffdef624>
  20140c:	903f831e 	bne	r18,zero,20121c <_gp+0xffdef638>
  201410:	0005883a 	mov	r2,zero
  201414:	0021883a 	mov	r16,zero
  201418:	003f9a06 	br	201284 <_gp+0xffdef6a0>
  20141c:	01403fc4 	movi	r5,255
  201420:	31401926 	beq	r6,r5,201488 <__subsf3+0x388>
  201424:	0109c83a 	sub	r4,zero,r4
  201428:	18c10034 	orhi	r3,r3,1024
  20142c:	003feb06 	br	2013dc <_gp+0xffdef7f8>
  201430:	043fffc4 	movi	r16,-1
  201434:	000b883a 	mov	r5,zero
  201438:	003f5806 	br	20119c <_gp+0xffdef5b8>
  20143c:	8000481e 	bne	r16,zero,201560 <__subsf3+0x460>
  201440:	18006226 	beq	r3,zero,2015cc <__subsf3+0x4cc>
  201444:	383f4726 	beq	r7,zero,201164 <_gp+0xffdef580>
  201448:	19c7883a 	add	r3,r3,r7
  20144c:	1881002c 	andhi	r2,r3,1024
  201450:	103f8326 	beq	r2,zero,201260 <_gp+0xffdef67c>
  201454:	00bf0034 	movhi	r2,64512
  201458:	10bfffc4 	addi	r2,r2,-1
  20145c:	2821883a 	mov	r16,r5
  201460:	1886703a 	and	r3,r3,r2
  201464:	003f3f06 	br	201164 <_gp+0xffdef580>
  201468:	80001c1e 	bne	r16,zero,2014dc <__subsf3+0x3dc>
  20146c:	1800261e 	bne	r3,zero,201508 <__subsf3+0x408>
  201470:	38004c26 	beq	r7,zero,2015a4 <__subsf3+0x4a4>
  201474:	3807883a 	mov	r3,r7
  201478:	1023883a 	mov	r17,r2
  20147c:	003f3906 	br	201164 <_gp+0xffdef580>
  201480:	01c00044 	movi	r7,1
  201484:	003f9006 	br	2012c8 <_gp+0xffdef6e4>
  201488:	3807883a 	mov	r3,r7
  20148c:	3021883a 	mov	r16,r6
  201490:	1023883a 	mov	r17,r2
  201494:	003f3306 	br	201164 <_gp+0xffdef580>
  201498:	8000161e 	bne	r16,zero,2014f4 <__subsf3+0x3f4>
  20149c:	18002d26 	beq	r3,zero,201554 <__subsf3+0x454>
  2014a0:	0108303a 	nor	r4,zero,r4
  2014a4:	20000a26 	beq	r4,zero,2014d0 <__subsf3+0x3d0>
  2014a8:	01403fc4 	movi	r5,255
  2014ac:	31402926 	beq	r6,r5,201554 <__subsf3+0x454>
  2014b0:	014006c4 	movi	r5,27
  2014b4:	29004716 	blt	r5,r4,2015d4 <__subsf3+0x4d4>
  2014b8:	01400804 	movi	r5,32
  2014bc:	290bc83a 	sub	r5,r5,r4
  2014c0:	194a983a 	sll	r5,r3,r5
  2014c4:	1908d83a 	srl	r4,r3,r4
  2014c8:	2806c03a 	cmpne	r3,r5,zero
  2014cc:	20c6b03a 	or	r3,r4,r3
  2014d0:	19c7883a 	add	r3,r3,r7
  2014d4:	3021883a 	mov	r16,r6
  2014d8:	003f7c06 	br	2012cc <_gp+0xffdef6e8>
  2014dc:	1800111e 	bne	r3,zero,201524 <__subsf3+0x424>
  2014e0:	38003326 	beq	r7,zero,2015b0 <__subsf3+0x4b0>
  2014e4:	3807883a 	mov	r3,r7
  2014e8:	1023883a 	mov	r17,r2
  2014ec:	04003fc4 	movi	r16,255
  2014f0:	003f1c06 	br	201164 <_gp+0xffdef580>
  2014f4:	01403fc4 	movi	r5,255
  2014f8:	31401626 	beq	r6,r5,201554 <__subsf3+0x454>
  2014fc:	0109c83a 	sub	r4,zero,r4
  201500:	18c10034 	orhi	r3,r3,1024
  201504:	003fea06 	br	2014b0 <_gp+0xffdef8cc>
  201508:	383f1626 	beq	r7,zero,201164 <_gp+0xffdef580>
  20150c:	19c9c83a 	sub	r4,r3,r7
  201510:	2141002c 	andhi	r5,r4,1024
  201514:	283f5026 	beq	r5,zero,201258 <_gp+0xffdef674>
  201518:	38c7c83a 	sub	r3,r7,r3
  20151c:	1023883a 	mov	r17,r2
  201520:	003f1006 	br	201164 <_gp+0xffdef580>
  201524:	38001b26 	beq	r7,zero,201594 <__subsf3+0x494>
  201528:	1806d0fa 	srli	r3,r3,3
  20152c:	1900102c 	andhi	r4,r3,64
  201530:	20000526 	beq	r4,zero,201548 <__subsf3+0x448>
  201534:	380ed0fa 	srli	r7,r7,3
  201538:	3900102c 	andhi	r4,r7,64
  20153c:	2000021e 	bne	r4,zero,201548 <__subsf3+0x448>
  201540:	3807883a 	mov	r3,r7
  201544:	1023883a 	mov	r17,r2
  201548:	180690fa 	slli	r3,r3,3
  20154c:	04003fc4 	movi	r16,255
  201550:	003f0406 	br	201164 <_gp+0xffdef580>
  201554:	3807883a 	mov	r3,r7
  201558:	3021883a 	mov	r16,r6
  20155c:	003f0106 	br	201164 <_gp+0xffdef580>
  201560:	18001726 	beq	r3,zero,2015c0 <__subsf3+0x4c0>
  201564:	38000b26 	beq	r7,zero,201594 <__subsf3+0x494>
  201568:	1806d0fa 	srli	r3,r3,3
  20156c:	1900102c 	andhi	r4,r3,64
  201570:	20000426 	beq	r4,zero,201584 <__subsf3+0x484>
  201574:	380ed0fa 	srli	r7,r7,3
  201578:	3900102c 	andhi	r4,r7,64
  20157c:	2000011e 	bne	r4,zero,201584 <__subsf3+0x484>
  201580:	3807883a 	mov	r3,r7
  201584:	180690fa 	slli	r3,r3,3
  201588:	1023883a 	mov	r17,r2
  20158c:	04003fc4 	movi	r16,255
  201590:	003ef406 	br	201164 <_gp+0xffdef580>
  201594:	04003fc4 	movi	r16,255
  201598:	003ef206 	br	201164 <_gp+0xffdef580>
  20159c:	00c00044 	movi	r3,1
  2015a0:	003f9606 	br	2013fc <_gp+0xffdef818>
  2015a4:	000b883a 	mov	r5,zero
  2015a8:	0005883a 	mov	r2,zero
  2015ac:	003f3506 	br	201284 <_gp+0xffdef6a0>
  2015b0:	01402034 	movhi	r5,128
  2015b4:	297fffc4 	addi	r5,r5,-1
  2015b8:	0005883a 	mov	r2,zero
  2015bc:	003f2f06 	br	20127c <_gp+0xffdef698>
  2015c0:	3807883a 	mov	r3,r7
  2015c4:	04003fc4 	movi	r16,255
  2015c8:	003ee606 	br	201164 <_gp+0xffdef580>
  2015cc:	3807883a 	mov	r3,r7
  2015d0:	003ee406 	br	201164 <_gp+0xffdef580>
  2015d4:	00c00044 	movi	r3,1
  2015d8:	003fbd06 	br	2014d0 <_gp+0xffdef8ec>
  2015dc:	0005883a 	mov	r2,zero
  2015e0:	003f2806 	br	201284 <_gp+0xffdef6a0>

002015e4 <__fixsfsi>:
  2015e4:	200ad5fa 	srli	r5,r4,23
  2015e8:	00c02034 	movhi	r3,128
  2015ec:	18ffffc4 	addi	r3,r3,-1
  2015f0:	29403fcc 	andi	r5,r5,255
  2015f4:	00801f84 	movi	r2,126
  2015f8:	1906703a 	and	r3,r3,r4
  2015fc:	2008d7fa 	srli	r4,r4,31
  201600:	11400e0e 	bge	r2,r5,20163c <__fixsfsi+0x58>
  201604:	00802744 	movi	r2,157
  201608:	11400816 	blt	r2,r5,20162c <__fixsfsi+0x48>
  20160c:	00802544 	movi	r2,149
  201610:	18c02034 	orhi	r3,r3,128
  201614:	11400b0e 	bge	r2,r5,201644 <__fixsfsi+0x60>
  201618:	28bfda84 	addi	r2,r5,-150
  20161c:	1884983a 	sll	r2,r3,r2
  201620:	20000726 	beq	r4,zero,201640 <__fixsfsi+0x5c>
  201624:	0085c83a 	sub	r2,zero,r2
  201628:	f800283a 	ret
  20162c:	00a00034 	movhi	r2,32768
  201630:	10bfffc4 	addi	r2,r2,-1
  201634:	2085883a 	add	r2,r4,r2
  201638:	f800283a 	ret
  20163c:	0005883a 	mov	r2,zero
  201640:	f800283a 	ret
  201644:	00802584 	movi	r2,150
  201648:	1145c83a 	sub	r2,r2,r5
  20164c:	1884d83a 	srl	r2,r3,r2
  201650:	003ff306 	br	201620 <_gp+0xffdefa3c>

00201654 <__floatunsisf>:
  201654:	defffe04 	addi	sp,sp,-8
  201658:	dfc00115 	stw	ra,4(sp)
  20165c:	dc000015 	stw	r16,0(sp)
  201660:	20002c26 	beq	r4,zero,201714 <__floatunsisf+0xc0>
  201664:	2021883a 	mov	r16,r4
  201668:	02017440 	call	201744 <__clzsi2>
  20166c:	00c02784 	movi	r3,158
  201670:	1887c83a 	sub	r3,r3,r2
  201674:	01002584 	movi	r4,150
  201678:	20c00f16 	blt	r4,r3,2016b8 <__floatunsisf+0x64>
  20167c:	20c9c83a 	sub	r4,r4,r3
  201680:	8108983a 	sll	r4,r16,r4
  201684:	00802034 	movhi	r2,128
  201688:	10bfffc4 	addi	r2,r2,-1
  20168c:	2088703a 	and	r4,r4,r2
  201690:	18803fcc 	andi	r2,r3,255
  201694:	100695fa 	slli	r3,r2,23
  201698:	00802034 	movhi	r2,128
  20169c:	10bfffc4 	addi	r2,r2,-1
  2016a0:	2084703a 	and	r2,r4,r2
  2016a4:	10c4b03a 	or	r2,r2,r3
  2016a8:	dfc00117 	ldw	ra,4(sp)
  2016ac:	dc000017 	ldw	r16,0(sp)
  2016b0:	dec00204 	addi	sp,sp,8
  2016b4:	f800283a 	ret
  2016b8:	01002644 	movi	r4,153
  2016bc:	20c01816 	blt	r4,r3,201720 <__floatunsisf+0xcc>
  2016c0:	20c9c83a 	sub	r4,r4,r3
  2016c4:	8108983a 	sll	r4,r16,r4
  2016c8:	017f0034 	movhi	r5,64512
  2016cc:	297fffc4 	addi	r5,r5,-1
  2016d0:	218001cc 	andi	r6,r4,7
  2016d4:	214a703a 	and	r5,r4,r5
  2016d8:	30000426 	beq	r6,zero,2016ec <__floatunsisf+0x98>
  2016dc:	210003cc 	andi	r4,r4,15
  2016e0:	01800104 	movi	r6,4
  2016e4:	21800126 	beq	r4,r6,2016ec <__floatunsisf+0x98>
  2016e8:	298b883a 	add	r5,r5,r6
  2016ec:	2901002c 	andhi	r4,r5,1024
  2016f0:	20000526 	beq	r4,zero,201708 <__floatunsisf+0xb4>
  2016f4:	00c027c4 	movi	r3,159
  2016f8:	1887c83a 	sub	r3,r3,r2
  2016fc:	00bf0034 	movhi	r2,64512
  201700:	10bfffc4 	addi	r2,r2,-1
  201704:	288a703a 	and	r5,r5,r2
  201708:	280891ba 	slli	r4,r5,6
  20170c:	2008d27a 	srli	r4,r4,9
  201710:	003fdf06 	br	201690 <_gp+0xffdefaac>
  201714:	0007883a 	mov	r3,zero
  201718:	0009883a 	mov	r4,zero
  20171c:	003fdc06 	br	201690 <_gp+0xffdefaac>
  201720:	01402e44 	movi	r5,185
  201724:	28cbc83a 	sub	r5,r5,r3
  201728:	01000144 	movi	r4,5
  20172c:	2089c83a 	sub	r4,r4,r2
  201730:	814a983a 	sll	r5,r16,r5
  201734:	8108d83a 	srl	r4,r16,r4
  201738:	2820c03a 	cmpne	r16,r5,zero
  20173c:	2408b03a 	or	r4,r4,r16
  201740:	003fe106 	br	2016c8 <_gp+0xffdefae4>

00201744 <__clzsi2>:
  201744:	00bfffd4 	movui	r2,65535
  201748:	11000536 	bltu	r2,r4,201760 <__clzsi2+0x1c>
  20174c:	00803fc4 	movi	r2,255
  201750:	11000f36 	bltu	r2,r4,201790 <__clzsi2+0x4c>
  201754:	00800804 	movi	r2,32
  201758:	0007883a 	mov	r3,zero
  20175c:	00000506 	br	201774 <__clzsi2+0x30>
  201760:	00804034 	movhi	r2,256
  201764:	10bfffc4 	addi	r2,r2,-1
  201768:	11000c2e 	bgeu	r2,r4,20179c <__clzsi2+0x58>
  20176c:	00800204 	movi	r2,8
  201770:	00c00604 	movi	r3,24
  201774:	20c8d83a 	srl	r4,r4,r3
  201778:	00c00874 	movhi	r3,33
  20177c:	18d00204 	addi	r3,r3,16392
  201780:	1909883a 	add	r4,r3,r4
  201784:	20c00003 	ldbu	r3,0(r4)
  201788:	10c5c83a 	sub	r2,r2,r3
  20178c:	f800283a 	ret
  201790:	00800604 	movi	r2,24
  201794:	00c00204 	movi	r3,8
  201798:	003ff606 	br	201774 <_gp+0xffdefb90>
  20179c:	00800404 	movi	r2,16
  2017a0:	1007883a 	mov	r3,r2
  2017a4:	003ff306 	br	201774 <_gp+0xffdefb90>

002017a8 <__mulsi3>:
  2017a8:	0005883a 	mov	r2,zero
  2017ac:	20000726 	beq	r4,zero,2017cc <__mulsi3+0x24>
  2017b0:	20c0004c 	andi	r3,r4,1
  2017b4:	2008d07a 	srli	r4,r4,1
  2017b8:	18000126 	beq	r3,zero,2017c0 <__mulsi3+0x18>
  2017bc:	1145883a 	add	r2,r2,r5
  2017c0:	294b883a 	add	r5,r5,r5
  2017c4:	203ffa1e 	bne	r4,zero,2017b0 <_gp+0xffdefbcc>
  2017c8:	f800283a 	ret
  2017cc:	f800283a 	ret

002017d0 <_printf_r>:
  2017d0:	defffd04 	addi	sp,sp,-12
  2017d4:	2805883a 	mov	r2,r5
  2017d8:	dfc00015 	stw	ra,0(sp)
  2017dc:	d9800115 	stw	r6,4(sp)
  2017e0:	d9c00215 	stw	r7,8(sp)
  2017e4:	21400217 	ldw	r5,8(r4)
  2017e8:	d9c00104 	addi	r7,sp,4
  2017ec:	100d883a 	mov	r6,r2
  2017f0:	02019a80 	call	2019a8 <___vfprintf_internal_r>
  2017f4:	dfc00017 	ldw	ra,0(sp)
  2017f8:	dec00304 	addi	sp,sp,12
  2017fc:	f800283a 	ret

00201800 <printf>:
  201800:	defffc04 	addi	sp,sp,-16
  201804:	dfc00015 	stw	ra,0(sp)
  201808:	d9400115 	stw	r5,4(sp)
  20180c:	d9800215 	stw	r6,8(sp)
  201810:	d9c00315 	stw	r7,12(sp)
  201814:	00801074 	movhi	r2,65
  201818:	10a6fa04 	addi	r2,r2,-25624
  20181c:	10800017 	ldw	r2,0(r2)
  201820:	200b883a 	mov	r5,r4
  201824:	d9800104 	addi	r6,sp,4
  201828:	11000217 	ldw	r4,8(r2)
  20182c:	0203c840 	call	203c84 <__vfprintf_internal>
  201830:	dfc00017 	ldw	ra,0(sp)
  201834:	dec00404 	addi	sp,sp,16
  201838:	f800283a 	ret

0020183c <_puts_r>:
  20183c:	defff604 	addi	sp,sp,-40
  201840:	dc000715 	stw	r16,28(sp)
  201844:	2021883a 	mov	r16,r4
  201848:	2809883a 	mov	r4,r5
  20184c:	dc400815 	stw	r17,32(sp)
  201850:	dfc00915 	stw	ra,36(sp)
  201854:	2823883a 	mov	r17,r5
  201858:	02019100 	call	201910 <strlen>
  20185c:	10c00044 	addi	r3,r2,1
  201860:	d8800115 	stw	r2,4(sp)
  201864:	00800874 	movhi	r2,33
  201868:	10904204 	addi	r2,r2,16648
  20186c:	d8800215 	stw	r2,8(sp)
  201870:	00800044 	movi	r2,1
  201874:	d8800315 	stw	r2,12(sp)
  201878:	00800084 	movi	r2,2
  20187c:	dc400015 	stw	r17,0(sp)
  201880:	d8c00615 	stw	r3,24(sp)
  201884:	dec00415 	stw	sp,16(sp)
  201888:	d8800515 	stw	r2,20(sp)
  20188c:	80000226 	beq	r16,zero,201898 <_puts_r+0x5c>
  201890:	80800e17 	ldw	r2,56(r16)
  201894:	10001426 	beq	r2,zero,2018e8 <_puts_r+0xac>
  201898:	81400217 	ldw	r5,8(r16)
  20189c:	2880030b 	ldhu	r2,12(r5)
  2018a0:	10c8000c 	andi	r3,r2,8192
  2018a4:	1800061e 	bne	r3,zero,2018c0 <_puts_r+0x84>
  2018a8:	29001917 	ldw	r4,100(r5)
  2018ac:	00f7ffc4 	movi	r3,-8193
  2018b0:	10880014 	ori	r2,r2,8192
  2018b4:	20c6703a 	and	r3,r4,r3
  2018b8:	2880030d 	sth	r2,12(r5)
  2018bc:	28c01915 	stw	r3,100(r5)
  2018c0:	d9800404 	addi	r6,sp,16
  2018c4:	8009883a 	mov	r4,r16
  2018c8:	02061ec0 	call	2061ec <__sfvwrite_r>
  2018cc:	1000091e 	bne	r2,zero,2018f4 <_puts_r+0xb8>
  2018d0:	00800284 	movi	r2,10
  2018d4:	dfc00917 	ldw	ra,36(sp)
  2018d8:	dc400817 	ldw	r17,32(sp)
  2018dc:	dc000717 	ldw	r16,28(sp)
  2018e0:	dec00a04 	addi	sp,sp,40
  2018e4:	f800283a 	ret
  2018e8:	8009883a 	mov	r4,r16
  2018ec:	0205d680 	call	205d68 <__sinit>
  2018f0:	003fe906 	br	201898 <_gp+0xffdefcb4>
  2018f4:	00bfffc4 	movi	r2,-1
  2018f8:	003ff606 	br	2018d4 <_gp+0xffdefcf0>

002018fc <puts>:
  2018fc:	00801074 	movhi	r2,65
  201900:	10a6fa04 	addi	r2,r2,-25624
  201904:	200b883a 	mov	r5,r4
  201908:	11000017 	ldw	r4,0(r2)
  20190c:	020183c1 	jmpi	20183c <_puts_r>

00201910 <strlen>:
  201910:	208000cc 	andi	r2,r4,3
  201914:	10002026 	beq	r2,zero,201998 <strlen+0x88>
  201918:	20800007 	ldb	r2,0(r4)
  20191c:	10002026 	beq	r2,zero,2019a0 <strlen+0x90>
  201920:	2005883a 	mov	r2,r4
  201924:	00000206 	br	201930 <strlen+0x20>
  201928:	10c00007 	ldb	r3,0(r2)
  20192c:	18001826 	beq	r3,zero,201990 <strlen+0x80>
  201930:	10800044 	addi	r2,r2,1
  201934:	10c000cc 	andi	r3,r2,3
  201938:	183ffb1e 	bne	r3,zero,201928 <_gp+0xffdefd44>
  20193c:	10c00017 	ldw	r3,0(r2)
  201940:	01ffbff4 	movhi	r7,65279
  201944:	39ffbfc4 	addi	r7,r7,-257
  201948:	00ca303a 	nor	r5,zero,r3
  20194c:	01a02074 	movhi	r6,32897
  201950:	19c7883a 	add	r3,r3,r7
  201954:	31a02004 	addi	r6,r6,-32640
  201958:	1946703a 	and	r3,r3,r5
  20195c:	1986703a 	and	r3,r3,r6
  201960:	1800091e 	bne	r3,zero,201988 <strlen+0x78>
  201964:	10800104 	addi	r2,r2,4
  201968:	10c00017 	ldw	r3,0(r2)
  20196c:	19cb883a 	add	r5,r3,r7
  201970:	00c6303a 	nor	r3,zero,r3
  201974:	28c6703a 	and	r3,r5,r3
  201978:	1986703a 	and	r3,r3,r6
  20197c:	183ff926 	beq	r3,zero,201964 <_gp+0xffdefd80>
  201980:	00000106 	br	201988 <strlen+0x78>
  201984:	10800044 	addi	r2,r2,1
  201988:	10c00007 	ldb	r3,0(r2)
  20198c:	183ffd1e 	bne	r3,zero,201984 <_gp+0xffdefda0>
  201990:	1105c83a 	sub	r2,r2,r4
  201994:	f800283a 	ret
  201998:	2005883a 	mov	r2,r4
  20199c:	003fe706 	br	20193c <_gp+0xffdefd58>
  2019a0:	0005883a 	mov	r2,zero
  2019a4:	f800283a 	ret

002019a8 <___vfprintf_internal_r>:
  2019a8:	deffb804 	addi	sp,sp,-288
  2019ac:	dfc04715 	stw	ra,284(sp)
  2019b0:	ddc04515 	stw	r23,276(sp)
  2019b4:	dd404315 	stw	r21,268(sp)
  2019b8:	d9002d15 	stw	r4,180(sp)
  2019bc:	282f883a 	mov	r23,r5
  2019c0:	302b883a 	mov	r21,r6
  2019c4:	d9c02e15 	stw	r7,184(sp)
  2019c8:	df004615 	stw	fp,280(sp)
  2019cc:	dd804415 	stw	r22,272(sp)
  2019d0:	dd004215 	stw	r20,264(sp)
  2019d4:	dcc04115 	stw	r19,260(sp)
  2019d8:	dc804015 	stw	r18,256(sp)
  2019dc:	dc403f15 	stw	r17,252(sp)
  2019e0:	dc003e15 	stw	r16,248(sp)
  2019e4:	02068e80 	call	2068e8 <_localeconv_r>
  2019e8:	10800017 	ldw	r2,0(r2)
  2019ec:	1009883a 	mov	r4,r2
  2019f0:	d8803415 	stw	r2,208(sp)
  2019f4:	02019100 	call	201910 <strlen>
  2019f8:	d8803715 	stw	r2,220(sp)
  2019fc:	d8802d17 	ldw	r2,180(sp)
  201a00:	10000226 	beq	r2,zero,201a0c <___vfprintf_internal_r+0x64>
  201a04:	10800e17 	ldw	r2,56(r2)
  201a08:	1000fb26 	beq	r2,zero,201df8 <___vfprintf_internal_r+0x450>
  201a0c:	b880030b 	ldhu	r2,12(r23)
  201a10:	10c8000c 	andi	r3,r2,8192
  201a14:	1800061e 	bne	r3,zero,201a30 <___vfprintf_internal_r+0x88>
  201a18:	b9001917 	ldw	r4,100(r23)
  201a1c:	00f7ffc4 	movi	r3,-8193
  201a20:	10880014 	ori	r2,r2,8192
  201a24:	20c6703a 	and	r3,r4,r3
  201a28:	b880030d 	sth	r2,12(r23)
  201a2c:	b8c01915 	stw	r3,100(r23)
  201a30:	10c0020c 	andi	r3,r2,8
  201a34:	1800c326 	beq	r3,zero,201d44 <___vfprintf_internal_r+0x39c>
  201a38:	b8c00417 	ldw	r3,16(r23)
  201a3c:	1800c126 	beq	r3,zero,201d44 <___vfprintf_internal_r+0x39c>
  201a40:	1080068c 	andi	r2,r2,26
  201a44:	00c00284 	movi	r3,10
  201a48:	10c0c626 	beq	r2,r3,201d64 <___vfprintf_internal_r+0x3bc>
  201a4c:	d8c00404 	addi	r3,sp,16
  201a50:	05000874 	movhi	r20,33
  201a54:	d9001e04 	addi	r4,sp,120
  201a58:	a5105384 	addi	r20,r20,16718
  201a5c:	d8c01e15 	stw	r3,120(sp)
  201a60:	d8002015 	stw	zero,128(sp)
  201a64:	d8001f15 	stw	zero,124(sp)
  201a68:	d8003315 	stw	zero,204(sp)
  201a6c:	d8003615 	stw	zero,216(sp)
  201a70:	d8003815 	stw	zero,224(sp)
  201a74:	1811883a 	mov	r8,r3
  201a78:	d8003915 	stw	zero,228(sp)
  201a7c:	d8003a15 	stw	zero,232(sp)
  201a80:	d8002f15 	stw	zero,188(sp)
  201a84:	d9002815 	stw	r4,160(sp)
  201a88:	a8800007 	ldb	r2,0(r21)
  201a8c:	10028b26 	beq	r2,zero,2024bc <___vfprintf_internal_r+0xb14>
  201a90:	00c00944 	movi	r3,37
  201a94:	a823883a 	mov	r17,r21
  201a98:	10c0021e 	bne	r2,r3,201aa4 <___vfprintf_internal_r+0xfc>
  201a9c:	00001406 	br	201af0 <___vfprintf_internal_r+0x148>
  201aa0:	10c00326 	beq	r2,r3,201ab0 <___vfprintf_internal_r+0x108>
  201aa4:	8c400044 	addi	r17,r17,1
  201aa8:	88800007 	ldb	r2,0(r17)
  201aac:	103ffc1e 	bne	r2,zero,201aa0 <_gp+0xffdefebc>
  201ab0:	8d61c83a 	sub	r16,r17,r21
  201ab4:	80000e26 	beq	r16,zero,201af0 <___vfprintf_internal_r+0x148>
  201ab8:	d8c02017 	ldw	r3,128(sp)
  201abc:	d8801f17 	ldw	r2,124(sp)
  201ac0:	45400015 	stw	r21,0(r8)
  201ac4:	1c07883a 	add	r3,r3,r16
  201ac8:	10800044 	addi	r2,r2,1
  201acc:	d8c02015 	stw	r3,128(sp)
  201ad0:	44000115 	stw	r16,4(r8)
  201ad4:	d8801f15 	stw	r2,124(sp)
  201ad8:	00c001c4 	movi	r3,7
  201adc:	1880a916 	blt	r3,r2,201d84 <___vfprintf_internal_r+0x3dc>
  201ae0:	42000204 	addi	r8,r8,8
  201ae4:	d9402f17 	ldw	r5,188(sp)
  201ae8:	2c0b883a 	add	r5,r5,r16
  201aec:	d9402f15 	stw	r5,188(sp)
  201af0:	88800007 	ldb	r2,0(r17)
  201af4:	1000aa26 	beq	r2,zero,201da0 <___vfprintf_internal_r+0x3f8>
  201af8:	8d400044 	addi	r21,r17,1
  201afc:	8c400047 	ldb	r17,1(r17)
  201b00:	0021883a 	mov	r16,zero
  201b04:	00bfffc4 	movi	r2,-1
  201b08:	0025883a 	mov	r18,zero
  201b0c:	dc002905 	stb	r16,164(sp)
  201b10:	d8002785 	stb	zero,158(sp)
  201b14:	d8002b05 	stb	zero,172(sp)
  201b18:	d8802a15 	stw	r2,168(sp)
  201b1c:	d8003115 	stw	zero,196(sp)
  201b20:	04c01604 	movi	r19,88
  201b24:	05800244 	movi	r22,9
  201b28:	9021883a 	mov	r16,r18
  201b2c:	4039883a 	mov	fp,r8
  201b30:	ad400044 	addi	r21,r21,1
  201b34:	88bff804 	addi	r2,r17,-32
  201b38:	98833236 	bltu	r19,r2,202804 <___vfprintf_internal_r+0xe5c>
  201b3c:	100490ba 	slli	r2,r2,2
  201b40:	00c00834 	movhi	r3,32
  201b44:	18c6d504 	addi	r3,r3,6996
  201b48:	10c5883a 	add	r2,r2,r3
  201b4c:	10800017 	ldw	r2,0(r2)
  201b50:	1000683a 	jmp	r2
  201b54:	002026fc 	xorhi	zero,zero,32923
  201b58:	00202804 	movi	zero,-32608
  201b5c:	00202804 	movi	zero,-32608
  201b60:	0020271c 	xori	zero,zero,32924
  201b64:	00202804 	movi	zero,-32608
  201b68:	00202804 	movi	zero,-32608
  201b6c:	00202804 	movi	zero,-32608
  201b70:	00202804 	movi	zero,-32608
  201b74:	00202804 	movi	zero,-32608
  201b78:	00202804 	movi	zero,-32608
  201b7c:	00201e04 	movi	zero,-32648
  201b80:	0020260c 	andi	zero,zero,32920
  201b84:	00202804 	movi	zero,-32608
  201b88:	00201cc8 	cmpgei	zero,zero,-32653
  201b8c:	00201e28 	cmpgeui	zero,zero,32888
  201b90:	00202804 	movi	zero,-32608
  201b94:	00201e78 	rdprs	zero,zero,-32647
  201b98:	00201e84 	movi	zero,-32646
  201b9c:	00201e84 	movi	zero,-32646
  201ba0:	00201e84 	movi	zero,-32646
  201ba4:	00201e84 	movi	zero,-32646
  201ba8:	00201e84 	movi	zero,-32646
  201bac:	00201e84 	movi	zero,-32646
  201bb0:	00201e84 	movi	zero,-32646
  201bb4:	00201e84 	movi	zero,-32646
  201bb8:	00201e84 	movi	zero,-32646
  201bbc:	00202804 	movi	zero,-32608
  201bc0:	00202804 	movi	zero,-32608
  201bc4:	00202804 	movi	zero,-32608
  201bc8:	00202804 	movi	zero,-32608
  201bcc:	00202804 	movi	zero,-32608
  201bd0:	00202804 	movi	zero,-32608
  201bd4:	00202804 	movi	zero,-32608
  201bd8:	00202804 	movi	zero,-32608
  201bdc:	00202804 	movi	zero,-32608
  201be0:	00202804 	movi	zero,-32608
  201be4:	00201ec0 	call	201ec <__alt_mem_onchip_flash_0_data-0x1dfe14>
  201be8:	00201f88 	cmpgei	zero,zero,-32642
  201bec:	00202804 	movi	zero,-32608
  201bf0:	00201f88 	cmpgei	zero,zero,-32642
  201bf4:	00202804 	movi	zero,-32608
  201bf8:	00202804 	movi	zero,-32608
  201bfc:	00202804 	movi	zero,-32608
  201c00:	00202804 	movi	zero,-32608
  201c04:	00202034 	movhi	zero,32896
  201c08:	00202804 	movi	zero,-32608
  201c0c:	00202804 	movi	zero,-32608
  201c10:	00202040 	call	20204 <__alt_mem_onchip_flash_0_data-0x1dfdfc>
  201c14:	00202804 	movi	zero,-32608
  201c18:	00202804 	movi	zero,-32608
  201c1c:	00202804 	movi	zero,-32608
  201c20:	00202804 	movi	zero,-32608
  201c24:	00202804 	movi	zero,-32608
  201c28:	002024c4 	movi	zero,-32621
  201c2c:	00202804 	movi	zero,-32608
  201c30:	00202804 	movi	zero,-32608
  201c34:	00202530 	cmpltui	zero,zero,32916
  201c38:	00202804 	movi	zero,-32608
  201c3c:	00202804 	movi	zero,-32608
  201c40:	00202804 	movi	zero,-32608
  201c44:	00202804 	movi	zero,-32608
  201c48:	00202804 	movi	zero,-32608
  201c4c:	00202804 	movi	zero,-32608
  201c50:	00202804 	movi	zero,-32608
  201c54:	00202804 	movi	zero,-32608
  201c58:	00202804 	movi	zero,-32608
  201c5c:	00202804 	movi	zero,-32608
  201c60:	002027a8 	cmpgeui	zero,zero,32926
  201c64:	00202728 	cmpgeui	zero,zero,32924
  201c68:	00201f88 	cmpgei	zero,zero,-32642
  201c6c:	00201f88 	cmpgei	zero,zero,-32642
  201c70:	00201f88 	cmpgei	zero,zero,-32642
  201c74:	00202748 	cmpgei	zero,zero,-32611
  201c78:	00202728 	cmpgeui	zero,zero,32924
  201c7c:	00202804 	movi	zero,-32608
  201c80:	00202804 	movi	zero,-32608
  201c84:	00202754 	movui	zero,32925
  201c88:	00202804 	movi	zero,-32608
  201c8c:	00202768 	cmpgeui	zero,zero,32925
  201c90:	002025ec 	andhi	zero,zero,32919
  201c94:	00201cd4 	movui	zero,32883
  201c98:	00202624 	muli	zero,zero,-32616
  201c9c:	00202804 	movi	zero,-32608
  201ca0:	00202630 	cmpltui	zero,zero,32920
  201ca4:	00202804 	movi	zero,-32608
  201ca8:	00202694 	movui	zero,32922
  201cac:	00202804 	movi	zero,-32608
  201cb0:	00202804 	movi	zero,-32608
  201cb4:	002026b4 	movhi	zero,32922
  201cb8:	d8c03117 	ldw	r3,196(sp)
  201cbc:	d8802e15 	stw	r2,184(sp)
  201cc0:	00c7c83a 	sub	r3,zero,r3
  201cc4:	d8c03115 	stw	r3,196(sp)
  201cc8:	84000114 	ori	r16,r16,4
  201ccc:	ac400007 	ldb	r17,0(r21)
  201cd0:	003f9706 	br	201b30 <_gp+0xffdeff4c>
  201cd4:	00800c04 	movi	r2,48
  201cd8:	d8802705 	stb	r2,156(sp)
  201cdc:	00801e04 	movi	r2,120
  201ce0:	d8802745 	stb	r2,157(sp)
  201ce4:	d9002a17 	ldw	r4,168(sp)
  201ce8:	d8802e17 	ldw	r2,184(sp)
  201cec:	d8002785 	stb	zero,158(sp)
  201cf0:	e011883a 	mov	r8,fp
  201cf4:	10c00104 	addi	r3,r2,4
  201cf8:	14c00017 	ldw	r19,0(r2)
  201cfc:	002d883a 	mov	r22,zero
  201d00:	80800094 	ori	r2,r16,2
  201d04:	2002ca16 	blt	r4,zero,202830 <___vfprintf_internal_r+0xe88>
  201d08:	00bfdfc4 	movi	r2,-129
  201d0c:	80a4703a 	and	r18,r16,r2
  201d10:	d8c02e15 	stw	r3,184(sp)
  201d14:	94800094 	ori	r18,r18,2
  201d18:	9802b41e 	bne	r19,zero,2027ec <___vfprintf_internal_r+0xe44>
  201d1c:	01400874 	movhi	r5,33
  201d20:	29504c04 	addi	r5,r5,16688
  201d24:	d9403915 	stw	r5,228(sp)
  201d28:	04401e04 	movi	r17,120
  201d2c:	d8802a17 	ldw	r2,168(sp)
  201d30:	0039883a 	mov	fp,zero
  201d34:	1001fa26 	beq	r2,zero,202520 <___vfprintf_internal_r+0xb78>
  201d38:	0027883a 	mov	r19,zero
  201d3c:	002d883a 	mov	r22,zero
  201d40:	00021906 	br	2025a8 <___vfprintf_internal_r+0xc00>
  201d44:	d9002d17 	ldw	r4,180(sp)
  201d48:	b80b883a 	mov	r5,r23
  201d4c:	0203d5c0 	call	203d5c <__swsetup_r>
  201d50:	1005dc1e 	bne	r2,zero,2034c4 <___vfprintf_internal_r+0x1b1c>
  201d54:	b880030b 	ldhu	r2,12(r23)
  201d58:	00c00284 	movi	r3,10
  201d5c:	1080068c 	andi	r2,r2,26
  201d60:	10ff3a1e 	bne	r2,r3,201a4c <_gp+0xffdefe68>
  201d64:	b880038f 	ldh	r2,14(r23)
  201d68:	103f3816 	blt	r2,zero,201a4c <_gp+0xffdefe68>
  201d6c:	d9c02e17 	ldw	r7,184(sp)
  201d70:	d9002d17 	ldw	r4,180(sp)
  201d74:	a80d883a 	mov	r6,r21
  201d78:	b80b883a 	mov	r5,r23
  201d7c:	0203ca00 	call	203ca0 <__sbprintf>
  201d80:	00001106 	br	201dc8 <___vfprintf_internal_r+0x420>
  201d84:	d9002d17 	ldw	r4,180(sp)
  201d88:	d9801e04 	addi	r6,sp,120
  201d8c:	b80b883a 	mov	r5,r23
  201d90:	02091880 	call	209188 <__sprint_r>
  201d94:	1000081e 	bne	r2,zero,201db8 <___vfprintf_internal_r+0x410>
  201d98:	da000404 	addi	r8,sp,16
  201d9c:	003f5106 	br	201ae4 <_gp+0xffdeff00>
  201da0:	d8802017 	ldw	r2,128(sp)
  201da4:	10000426 	beq	r2,zero,201db8 <___vfprintf_internal_r+0x410>
  201da8:	d9002d17 	ldw	r4,180(sp)
  201dac:	d9801e04 	addi	r6,sp,120
  201db0:	b80b883a 	mov	r5,r23
  201db4:	02091880 	call	209188 <__sprint_r>
  201db8:	b880030b 	ldhu	r2,12(r23)
  201dbc:	1080100c 	andi	r2,r2,64
  201dc0:	1005c01e 	bne	r2,zero,2034c4 <___vfprintf_internal_r+0x1b1c>
  201dc4:	d8802f17 	ldw	r2,188(sp)
  201dc8:	dfc04717 	ldw	ra,284(sp)
  201dcc:	df004617 	ldw	fp,280(sp)
  201dd0:	ddc04517 	ldw	r23,276(sp)
  201dd4:	dd804417 	ldw	r22,272(sp)
  201dd8:	dd404317 	ldw	r21,268(sp)
  201ddc:	dd004217 	ldw	r20,264(sp)
  201de0:	dcc04117 	ldw	r19,260(sp)
  201de4:	dc804017 	ldw	r18,256(sp)
  201de8:	dc403f17 	ldw	r17,252(sp)
  201dec:	dc003e17 	ldw	r16,248(sp)
  201df0:	dec04804 	addi	sp,sp,288
  201df4:	f800283a 	ret
  201df8:	d9002d17 	ldw	r4,180(sp)
  201dfc:	0205d680 	call	205d68 <__sinit>
  201e00:	003f0206 	br	201a0c <_gp+0xffdefe28>
  201e04:	d9002e17 	ldw	r4,184(sp)
  201e08:	d9402e17 	ldw	r5,184(sp)
  201e0c:	21000017 	ldw	r4,0(r4)
  201e10:	28800104 	addi	r2,r5,4
  201e14:	d9003115 	stw	r4,196(sp)
  201e18:	203fa716 	blt	r4,zero,201cb8 <_gp+0xffdf00d4>
  201e1c:	d8802e15 	stw	r2,184(sp)
  201e20:	ac400007 	ldb	r17,0(r21)
  201e24:	003f4206 	br	201b30 <_gp+0xffdeff4c>
  201e28:	ac400007 	ldb	r17,0(r21)
  201e2c:	01000a84 	movi	r4,42
  201e30:	a8c00044 	addi	r3,r21,1
  201e34:	89075826 	beq	r17,r4,203b98 <___vfprintf_internal_r+0x21f0>
  201e38:	8cbff404 	addi	r18,r17,-48
  201e3c:	b486ae36 	bltu	r22,r18,2038f8 <___vfprintf_internal_r+0x1f50>
  201e40:	0009883a 	mov	r4,zero
  201e44:	1823883a 	mov	r17,r3
  201e48:	01400284 	movi	r5,10
  201e4c:	02017a80 	call	2017a8 <__mulsi3>
  201e50:	88c00007 	ldb	r3,0(r17)
  201e54:	1489883a 	add	r4,r2,r18
  201e58:	8d400044 	addi	r21,r17,1
  201e5c:	1cbff404 	addi	r18,r3,-48
  201e60:	a823883a 	mov	r17,r21
  201e64:	b4bff82e 	bgeu	r22,r18,201e48 <_gp+0xffdf0264>
  201e68:	1823883a 	mov	r17,r3
  201e6c:	2005f616 	blt	r4,zero,203648 <___vfprintf_internal_r+0x1ca0>
  201e70:	d9002a15 	stw	r4,168(sp)
  201e74:	003f2f06 	br	201b34 <_gp+0xffdeff50>
  201e78:	84002014 	ori	r16,r16,128
  201e7c:	ac400007 	ldb	r17,0(r21)
  201e80:	003f2b06 	br	201b30 <_gp+0xffdeff4c>
  201e84:	8cbff404 	addi	r18,r17,-48
  201e88:	d8003115 	stw	zero,196(sp)
  201e8c:	0009883a 	mov	r4,zero
  201e90:	a823883a 	mov	r17,r21
  201e94:	01400284 	movi	r5,10
  201e98:	02017a80 	call	2017a8 <__mulsi3>
  201e9c:	88c00007 	ldb	r3,0(r17)
  201ea0:	9089883a 	add	r4,r18,r2
  201ea4:	ad400044 	addi	r21,r21,1
  201ea8:	1cbff404 	addi	r18,r3,-48
  201eac:	a823883a 	mov	r17,r21
  201eb0:	b4bff82e 	bgeu	r22,r18,201e94 <_gp+0xffdf02b0>
  201eb4:	1823883a 	mov	r17,r3
  201eb8:	d9003115 	stw	r4,196(sp)
  201ebc:	003f1d06 	br	201b34 <_gp+0xffdeff50>
  201ec0:	8025883a 	mov	r18,r16
  201ec4:	dc002903 	ldbu	r16,164(sp)
  201ec8:	e011883a 	mov	r8,fp
  201ecc:	84003fcc 	andi	r16,r16,255
  201ed0:	8007531e 	bne	r16,zero,203c20 <___vfprintf_internal_r+0x2278>
  201ed4:	94800414 	ori	r18,r18,16
  201ed8:	9080080c 	andi	r2,r18,32
  201edc:	1003a326 	beq	r2,zero,202d6c <___vfprintf_internal_r+0x13c4>
  201ee0:	d9002e17 	ldw	r4,184(sp)
  201ee4:	20800117 	ldw	r2,4(r4)
  201ee8:	24c00017 	ldw	r19,0(r4)
  201eec:	21000204 	addi	r4,r4,8
  201ef0:	d9002e15 	stw	r4,184(sp)
  201ef4:	102d883a 	mov	r22,r2
  201ef8:	10047316 	blt	r2,zero,2030c8 <___vfprintf_internal_r+0x1720>
  201efc:	d9002a17 	ldw	r4,168(sp)
  201f00:	df002783 	ldbu	fp,158(sp)
  201f04:	2003e416 	blt	r4,zero,202e98 <___vfprintf_internal_r+0x14f0>
  201f08:	00ffdfc4 	movi	r3,-129
  201f0c:	9d84b03a 	or	r2,r19,r22
  201f10:	90e4703a 	and	r18,r18,r3
  201f14:	10018026 	beq	r2,zero,202518 <___vfprintf_internal_r+0xb70>
  201f18:	b003ab26 	beq	r22,zero,202dc8 <___vfprintf_internal_r+0x1420>
  201f1c:	dc402915 	stw	r17,164(sp)
  201f20:	dc001e04 	addi	r16,sp,120
  201f24:	b023883a 	mov	r17,r22
  201f28:	402d883a 	mov	r22,r8
  201f2c:	9809883a 	mov	r4,r19
  201f30:	880b883a 	mov	r5,r17
  201f34:	01800284 	movi	r6,10
  201f38:	000f883a 	mov	r7,zero
  201f3c:	020b6cc0 	call	20b6cc <__umoddi3>
  201f40:	10800c04 	addi	r2,r2,48
  201f44:	843fffc4 	addi	r16,r16,-1
  201f48:	9809883a 	mov	r4,r19
  201f4c:	880b883a 	mov	r5,r17
  201f50:	80800005 	stb	r2,0(r16)
  201f54:	01800284 	movi	r6,10
  201f58:	000f883a 	mov	r7,zero
  201f5c:	020b0d00 	call	20b0d0 <__udivdi3>
  201f60:	1027883a 	mov	r19,r2
  201f64:	10c4b03a 	or	r2,r2,r3
  201f68:	1823883a 	mov	r17,r3
  201f6c:	103fef1e 	bne	r2,zero,201f2c <_gp+0xffdf0348>
  201f70:	d8c02817 	ldw	r3,160(sp)
  201f74:	dc402917 	ldw	r17,164(sp)
  201f78:	b011883a 	mov	r8,r22
  201f7c:	1c07c83a 	sub	r3,r3,r16
  201f80:	d8c02b15 	stw	r3,172(sp)
  201f84:	00005f06 	br	202104 <___vfprintf_internal_r+0x75c>
  201f88:	8025883a 	mov	r18,r16
  201f8c:	dc002903 	ldbu	r16,164(sp)
  201f90:	e011883a 	mov	r8,fp
  201f94:	84003fcc 	andi	r16,r16,255
  201f98:	80071e1e 	bne	r16,zero,203c14 <___vfprintf_internal_r+0x226c>
  201f9c:	9080020c 	andi	r2,r18,8
  201fa0:	1004af26 	beq	r2,zero,203260 <___vfprintf_internal_r+0x18b8>
  201fa4:	d9002e17 	ldw	r4,184(sp)
  201fa8:	d9402e17 	ldw	r5,184(sp)
  201fac:	d8802e17 	ldw	r2,184(sp)
  201fb0:	21000017 	ldw	r4,0(r4)
  201fb4:	29400117 	ldw	r5,4(r5)
  201fb8:	10800204 	addi	r2,r2,8
  201fbc:	d9003615 	stw	r4,216(sp)
  201fc0:	d9403815 	stw	r5,224(sp)
  201fc4:	d8802e15 	stw	r2,184(sp)
  201fc8:	d9003617 	ldw	r4,216(sp)
  201fcc:	d9403817 	ldw	r5,224(sp)
  201fd0:	da003d15 	stw	r8,244(sp)
  201fd4:	04000044 	movi	r16,1
  201fd8:	0208dac0 	call	208dac <__fpclassifyd>
  201fdc:	da003d17 	ldw	r8,244(sp)
  201fe0:	1404441e 	bne	r2,r16,2030f4 <___vfprintf_internal_r+0x174c>
  201fe4:	d9003617 	ldw	r4,216(sp)
  201fe8:	d9403817 	ldw	r5,224(sp)
  201fec:	000d883a 	mov	r6,zero
  201ff0:	000f883a 	mov	r7,zero
  201ff4:	020d0700 	call	20d070 <__ledf2>
  201ff8:	da003d17 	ldw	r8,244(sp)
  201ffc:	1005e316 	blt	r2,zero,20378c <___vfprintf_internal_r+0x1de4>
  202000:	df002783 	ldbu	fp,158(sp)
  202004:	008011c4 	movi	r2,71
  202008:	1445580e 	bge	r2,r17,20356c <___vfprintf_internal_r+0x1bc4>
  20200c:	04000874 	movhi	r16,33
  202010:	84104404 	addi	r16,r16,16656
  202014:	00c000c4 	movi	r3,3
  202018:	00bfdfc4 	movi	r2,-129
  20201c:	d8c02915 	stw	r3,164(sp)
  202020:	90a4703a 	and	r18,r18,r2
  202024:	d8c02b15 	stw	r3,172(sp)
  202028:	d8002a15 	stw	zero,168(sp)
  20202c:	d8003215 	stw	zero,200(sp)
  202030:	00003a06 	br	20211c <___vfprintf_internal_r+0x774>
  202034:	84000214 	ori	r16,r16,8
  202038:	ac400007 	ldb	r17,0(r21)
  20203c:	003ebc06 	br	201b30 <_gp+0xffdeff4c>
  202040:	8025883a 	mov	r18,r16
  202044:	dc002903 	ldbu	r16,164(sp)
  202048:	e011883a 	mov	r8,fp
  20204c:	84003fcc 	andi	r16,r16,255
  202050:	8007001e 	bne	r16,zero,203c54 <___vfprintf_internal_r+0x22ac>
  202054:	94800414 	ori	r18,r18,16
  202058:	9080080c 	andi	r2,r18,32
  20205c:	1002fa26 	beq	r2,zero,202c48 <___vfprintf_internal_r+0x12a0>
  202060:	d9002e17 	ldw	r4,184(sp)
  202064:	d9402a17 	ldw	r5,168(sp)
  202068:	d8002785 	stb	zero,158(sp)
  20206c:	20800204 	addi	r2,r4,8
  202070:	24c00017 	ldw	r19,0(r4)
  202074:	25800117 	ldw	r22,4(r4)
  202078:	2804b116 	blt	r5,zero,203340 <___vfprintf_internal_r+0x1998>
  20207c:	013fdfc4 	movi	r4,-129
  202080:	9d86b03a 	or	r3,r19,r22
  202084:	d8802e15 	stw	r2,184(sp)
  202088:	9124703a 	and	r18,r18,r4
  20208c:	1802fb1e 	bne	r3,zero,202c7c <___vfprintf_internal_r+0x12d4>
  202090:	d8c02a17 	ldw	r3,168(sp)
  202094:	0039883a 	mov	fp,zero
  202098:	1805e526 	beq	r3,zero,203830 <___vfprintf_internal_r+0x1e88>
  20209c:	0027883a 	mov	r19,zero
  2020a0:	002d883a 	mov	r22,zero
  2020a4:	dc001e04 	addi	r16,sp,120
  2020a8:	9806d0fa 	srli	r3,r19,3
  2020ac:	b008977a 	slli	r4,r22,29
  2020b0:	b02cd0fa 	srli	r22,r22,3
  2020b4:	9cc001cc 	andi	r19,r19,7
  2020b8:	98800c04 	addi	r2,r19,48
  2020bc:	843fffc4 	addi	r16,r16,-1
  2020c0:	20e6b03a 	or	r19,r4,r3
  2020c4:	80800005 	stb	r2,0(r16)
  2020c8:	9d86b03a 	or	r3,r19,r22
  2020cc:	183ff61e 	bne	r3,zero,2020a8 <_gp+0xffdf04c4>
  2020d0:	90c0004c 	andi	r3,r18,1
  2020d4:	18014126 	beq	r3,zero,2025dc <___vfprintf_internal_r+0xc34>
  2020d8:	10803fcc 	andi	r2,r2,255
  2020dc:	1080201c 	xori	r2,r2,128
  2020e0:	10bfe004 	addi	r2,r2,-128
  2020e4:	00c00c04 	movi	r3,48
  2020e8:	10c13c26 	beq	r2,r3,2025dc <___vfprintf_internal_r+0xc34>
  2020ec:	80ffffc5 	stb	r3,-1(r16)
  2020f0:	d8c02817 	ldw	r3,160(sp)
  2020f4:	80bfffc4 	addi	r2,r16,-1
  2020f8:	1021883a 	mov	r16,r2
  2020fc:	1887c83a 	sub	r3,r3,r2
  202100:	d8c02b15 	stw	r3,172(sp)
  202104:	d8802b17 	ldw	r2,172(sp)
  202108:	d9002a17 	ldw	r4,168(sp)
  20210c:	1100010e 	bge	r2,r4,202114 <___vfprintf_internal_r+0x76c>
  202110:	2005883a 	mov	r2,r4
  202114:	d8802915 	stw	r2,164(sp)
  202118:	d8003215 	stw	zero,200(sp)
  20211c:	e7003fcc 	andi	fp,fp,255
  202120:	e700201c 	xori	fp,fp,128
  202124:	e73fe004 	addi	fp,fp,-128
  202128:	e0000326 	beq	fp,zero,202138 <___vfprintf_internal_r+0x790>
  20212c:	d8c02917 	ldw	r3,164(sp)
  202130:	18c00044 	addi	r3,r3,1
  202134:	d8c02915 	stw	r3,164(sp)
  202138:	90c0008c 	andi	r3,r18,2
  20213c:	d8c02c15 	stw	r3,176(sp)
  202140:	18000326 	beq	r3,zero,202150 <___vfprintf_internal_r+0x7a8>
  202144:	d8c02917 	ldw	r3,164(sp)
  202148:	18c00084 	addi	r3,r3,2
  20214c:	d8c02915 	stw	r3,164(sp)
  202150:	90c0210c 	andi	r3,r18,132
  202154:	d8c03015 	stw	r3,192(sp)
  202158:	1801c51e 	bne	r3,zero,202870 <___vfprintf_internal_r+0xec8>
  20215c:	d9003117 	ldw	r4,196(sp)
  202160:	d8c02917 	ldw	r3,164(sp)
  202164:	20e7c83a 	sub	r19,r4,r3
  202168:	04c1c10e 	bge	zero,r19,202870 <___vfprintf_internal_r+0xec8>
  20216c:	02400404 	movi	r9,16
  202170:	d8c02017 	ldw	r3,128(sp)
  202174:	d8801f17 	ldw	r2,124(sp)
  202178:	4cc52f0e 	bge	r9,r19,203638 <___vfprintf_internal_r+0x1c90>
  20217c:	01400874 	movhi	r5,33
  202180:	29505784 	addi	r5,r5,16734
  202184:	dc403b15 	stw	r17,236(sp)
  202188:	d9403515 	stw	r5,212(sp)
  20218c:	9823883a 	mov	r17,r19
  202190:	482d883a 	mov	r22,r9
  202194:	9027883a 	mov	r19,r18
  202198:	070001c4 	movi	fp,7
  20219c:	8025883a 	mov	r18,r16
  2021a0:	dc002d17 	ldw	r16,180(sp)
  2021a4:	00000306 	br	2021b4 <___vfprintf_internal_r+0x80c>
  2021a8:	8c7ffc04 	addi	r17,r17,-16
  2021ac:	42000204 	addi	r8,r8,8
  2021b0:	b440130e 	bge	r22,r17,202200 <___vfprintf_internal_r+0x858>
  2021b4:	01000874 	movhi	r4,33
  2021b8:	18c00404 	addi	r3,r3,16
  2021bc:	10800044 	addi	r2,r2,1
  2021c0:	21105784 	addi	r4,r4,16734
  2021c4:	41000015 	stw	r4,0(r8)
  2021c8:	45800115 	stw	r22,4(r8)
  2021cc:	d8c02015 	stw	r3,128(sp)
  2021d0:	d8801f15 	stw	r2,124(sp)
  2021d4:	e0bff40e 	bge	fp,r2,2021a8 <_gp+0xffdf05c4>
  2021d8:	d9801e04 	addi	r6,sp,120
  2021dc:	b80b883a 	mov	r5,r23
  2021e0:	8009883a 	mov	r4,r16
  2021e4:	02091880 	call	209188 <__sprint_r>
  2021e8:	103ef31e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2021ec:	8c7ffc04 	addi	r17,r17,-16
  2021f0:	d8c02017 	ldw	r3,128(sp)
  2021f4:	d8801f17 	ldw	r2,124(sp)
  2021f8:	da000404 	addi	r8,sp,16
  2021fc:	b47fed16 	blt	r22,r17,2021b4 <_gp+0xffdf05d0>
  202200:	9021883a 	mov	r16,r18
  202204:	9825883a 	mov	r18,r19
  202208:	8827883a 	mov	r19,r17
  20220c:	dc403b17 	ldw	r17,236(sp)
  202210:	d9403517 	ldw	r5,212(sp)
  202214:	98c7883a 	add	r3,r19,r3
  202218:	10800044 	addi	r2,r2,1
  20221c:	41400015 	stw	r5,0(r8)
  202220:	44c00115 	stw	r19,4(r8)
  202224:	d8c02015 	stw	r3,128(sp)
  202228:	d8801f15 	stw	r2,124(sp)
  20222c:	010001c4 	movi	r4,7
  202230:	2082c516 	blt	r4,r2,202d48 <___vfprintf_internal_r+0x13a0>
  202234:	df002787 	ldb	fp,158(sp)
  202238:	42000204 	addi	r8,r8,8
  20223c:	e0000c26 	beq	fp,zero,202270 <___vfprintf_internal_r+0x8c8>
  202240:	d8801f17 	ldw	r2,124(sp)
  202244:	d9002784 	addi	r4,sp,158
  202248:	18c00044 	addi	r3,r3,1
  20224c:	10800044 	addi	r2,r2,1
  202250:	41000015 	stw	r4,0(r8)
  202254:	01000044 	movi	r4,1
  202258:	41000115 	stw	r4,4(r8)
  20225c:	d8c02015 	stw	r3,128(sp)
  202260:	d8801f15 	stw	r2,124(sp)
  202264:	010001c4 	movi	r4,7
  202268:	20825e16 	blt	r4,r2,202be4 <___vfprintf_internal_r+0x123c>
  20226c:	42000204 	addi	r8,r8,8
  202270:	d8802c17 	ldw	r2,176(sp)
  202274:	10000c26 	beq	r2,zero,2022a8 <___vfprintf_internal_r+0x900>
  202278:	d8801f17 	ldw	r2,124(sp)
  20227c:	d9002704 	addi	r4,sp,156
  202280:	18c00084 	addi	r3,r3,2
  202284:	10800044 	addi	r2,r2,1
  202288:	41000015 	stw	r4,0(r8)
  20228c:	01000084 	movi	r4,2
  202290:	41000115 	stw	r4,4(r8)
  202294:	d8c02015 	stw	r3,128(sp)
  202298:	d8801f15 	stw	r2,124(sp)
  20229c:	010001c4 	movi	r4,7
  2022a0:	20825816 	blt	r4,r2,202c04 <___vfprintf_internal_r+0x125c>
  2022a4:	42000204 	addi	r8,r8,8
  2022a8:	d9003017 	ldw	r4,192(sp)
  2022ac:	00802004 	movi	r2,128
  2022b0:	2081bb26 	beq	r4,r2,2029a0 <___vfprintf_internal_r+0xff8>
  2022b4:	d9402a17 	ldw	r5,168(sp)
  2022b8:	d8802b17 	ldw	r2,172(sp)
  2022bc:	28adc83a 	sub	r22,r5,r2
  2022c0:	0580310e 	bge	zero,r22,202388 <___vfprintf_internal_r+0x9e0>
  2022c4:	07000404 	movi	fp,16
  2022c8:	d8801f17 	ldw	r2,124(sp)
  2022cc:	e584360e 	bge	fp,r22,2033a8 <___vfprintf_internal_r+0x1a00>
  2022d0:	01400874 	movhi	r5,33
  2022d4:	29505384 	addi	r5,r5,16718
  2022d8:	dc402a15 	stw	r17,168(sp)
  2022dc:	d9402c15 	stw	r5,176(sp)
  2022e0:	b023883a 	mov	r17,r22
  2022e4:	04c001c4 	movi	r19,7
  2022e8:	a82d883a 	mov	r22,r21
  2022ec:	902b883a 	mov	r21,r18
  2022f0:	8025883a 	mov	r18,r16
  2022f4:	dc002d17 	ldw	r16,180(sp)
  2022f8:	00000306 	br	202308 <___vfprintf_internal_r+0x960>
  2022fc:	8c7ffc04 	addi	r17,r17,-16
  202300:	42000204 	addi	r8,r8,8
  202304:	e440110e 	bge	fp,r17,20234c <___vfprintf_internal_r+0x9a4>
  202308:	18c00404 	addi	r3,r3,16
  20230c:	10800044 	addi	r2,r2,1
  202310:	45000015 	stw	r20,0(r8)
  202314:	47000115 	stw	fp,4(r8)
  202318:	d8c02015 	stw	r3,128(sp)
  20231c:	d8801f15 	stw	r2,124(sp)
  202320:	98bff60e 	bge	r19,r2,2022fc <_gp+0xffdf0718>
  202324:	d9801e04 	addi	r6,sp,120
  202328:	b80b883a 	mov	r5,r23
  20232c:	8009883a 	mov	r4,r16
  202330:	02091880 	call	209188 <__sprint_r>
  202334:	103ea01e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202338:	8c7ffc04 	addi	r17,r17,-16
  20233c:	d8c02017 	ldw	r3,128(sp)
  202340:	d8801f17 	ldw	r2,124(sp)
  202344:	da000404 	addi	r8,sp,16
  202348:	e47fef16 	blt	fp,r17,202308 <_gp+0xffdf0724>
  20234c:	9021883a 	mov	r16,r18
  202350:	a825883a 	mov	r18,r21
  202354:	b02b883a 	mov	r21,r22
  202358:	882d883a 	mov	r22,r17
  20235c:	dc402a17 	ldw	r17,168(sp)
  202360:	d9002c17 	ldw	r4,176(sp)
  202364:	1d87883a 	add	r3,r3,r22
  202368:	10800044 	addi	r2,r2,1
  20236c:	41000015 	stw	r4,0(r8)
  202370:	45800115 	stw	r22,4(r8)
  202374:	d8c02015 	stw	r3,128(sp)
  202378:	d8801f15 	stw	r2,124(sp)
  20237c:	010001c4 	movi	r4,7
  202380:	20821016 	blt	r4,r2,202bc4 <___vfprintf_internal_r+0x121c>
  202384:	42000204 	addi	r8,r8,8
  202388:	9080400c 	andi	r2,r18,256
  20238c:	10013a1e 	bne	r2,zero,202878 <___vfprintf_internal_r+0xed0>
  202390:	d9402b17 	ldw	r5,172(sp)
  202394:	d8801f17 	ldw	r2,124(sp)
  202398:	44000015 	stw	r16,0(r8)
  20239c:	1947883a 	add	r3,r3,r5
  2023a0:	10800044 	addi	r2,r2,1
  2023a4:	41400115 	stw	r5,4(r8)
  2023a8:	d8c02015 	stw	r3,128(sp)
  2023ac:	d8801f15 	stw	r2,124(sp)
  2023b0:	010001c4 	movi	r4,7
  2023b4:	2081f516 	blt	r4,r2,202b8c <___vfprintf_internal_r+0x11e4>
  2023b8:	42000204 	addi	r8,r8,8
  2023bc:	9480010c 	andi	r18,r18,4
  2023c0:	90003226 	beq	r18,zero,20248c <___vfprintf_internal_r+0xae4>
  2023c4:	d9403117 	ldw	r5,196(sp)
  2023c8:	d8802917 	ldw	r2,164(sp)
  2023cc:	28a1c83a 	sub	r16,r5,r2
  2023d0:	04002e0e 	bge	zero,r16,20248c <___vfprintf_internal_r+0xae4>
  2023d4:	04400404 	movi	r17,16
  2023d8:	d8801f17 	ldw	r2,124(sp)
  2023dc:	8c04c40e 	bge	r17,r16,2036f0 <___vfprintf_internal_r+0x1d48>
  2023e0:	01400874 	movhi	r5,33
  2023e4:	29505784 	addi	r5,r5,16734
  2023e8:	d9403515 	stw	r5,212(sp)
  2023ec:	048001c4 	movi	r18,7
  2023f0:	dcc02d17 	ldw	r19,180(sp)
  2023f4:	00000306 	br	202404 <___vfprintf_internal_r+0xa5c>
  2023f8:	843ffc04 	addi	r16,r16,-16
  2023fc:	42000204 	addi	r8,r8,8
  202400:	8c00130e 	bge	r17,r16,202450 <___vfprintf_internal_r+0xaa8>
  202404:	01000874 	movhi	r4,33
  202408:	18c00404 	addi	r3,r3,16
  20240c:	10800044 	addi	r2,r2,1
  202410:	21105784 	addi	r4,r4,16734
  202414:	41000015 	stw	r4,0(r8)
  202418:	44400115 	stw	r17,4(r8)
  20241c:	d8c02015 	stw	r3,128(sp)
  202420:	d8801f15 	stw	r2,124(sp)
  202424:	90bff40e 	bge	r18,r2,2023f8 <_gp+0xffdf0814>
  202428:	d9801e04 	addi	r6,sp,120
  20242c:	b80b883a 	mov	r5,r23
  202430:	9809883a 	mov	r4,r19
  202434:	02091880 	call	209188 <__sprint_r>
  202438:	103e5f1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  20243c:	843ffc04 	addi	r16,r16,-16
  202440:	d8c02017 	ldw	r3,128(sp)
  202444:	d8801f17 	ldw	r2,124(sp)
  202448:	da000404 	addi	r8,sp,16
  20244c:	8c3fed16 	blt	r17,r16,202404 <_gp+0xffdf0820>
  202450:	d9403517 	ldw	r5,212(sp)
  202454:	1c07883a 	add	r3,r3,r16
  202458:	10800044 	addi	r2,r2,1
  20245c:	41400015 	stw	r5,0(r8)
  202460:	44000115 	stw	r16,4(r8)
  202464:	d8c02015 	stw	r3,128(sp)
  202468:	d8801f15 	stw	r2,124(sp)
  20246c:	010001c4 	movi	r4,7
  202470:	2080060e 	bge	r4,r2,20248c <___vfprintf_internal_r+0xae4>
  202474:	d9002d17 	ldw	r4,180(sp)
  202478:	d9801e04 	addi	r6,sp,120
  20247c:	b80b883a 	mov	r5,r23
  202480:	02091880 	call	209188 <__sprint_r>
  202484:	103e4c1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202488:	d8c02017 	ldw	r3,128(sp)
  20248c:	d8803117 	ldw	r2,196(sp)
  202490:	d9002917 	ldw	r4,164(sp)
  202494:	1100010e 	bge	r2,r4,20249c <___vfprintf_internal_r+0xaf4>
  202498:	2005883a 	mov	r2,r4
  20249c:	d9402f17 	ldw	r5,188(sp)
  2024a0:	288b883a 	add	r5,r5,r2
  2024a4:	d9402f15 	stw	r5,188(sp)
  2024a8:	1801c01e 	bne	r3,zero,202bac <___vfprintf_internal_r+0x1204>
  2024ac:	a8800007 	ldb	r2,0(r21)
  2024b0:	d8001f15 	stw	zero,124(sp)
  2024b4:	da000404 	addi	r8,sp,16
  2024b8:	103d751e 	bne	r2,zero,201a90 <_gp+0xffdefeac>
  2024bc:	a823883a 	mov	r17,r21
  2024c0:	003d8b06 	br	201af0 <_gp+0xffdeff0c>
  2024c4:	8025883a 	mov	r18,r16
  2024c8:	dc002903 	ldbu	r16,164(sp)
  2024cc:	e011883a 	mov	r8,fp
  2024d0:	84003fcc 	andi	r16,r16,255
  2024d4:	8005e51e 	bne	r16,zero,203c6c <___vfprintf_internal_r+0x22c4>
  2024d8:	94800414 	ori	r18,r18,16
  2024dc:	9080080c 	andi	r2,r18,32
  2024e0:	10022b26 	beq	r2,zero,202d90 <___vfprintf_internal_r+0x13e8>
  2024e4:	d9002e17 	ldw	r4,184(sp)
  2024e8:	d9402a17 	ldw	r5,168(sp)
  2024ec:	d8002785 	stb	zero,158(sp)
  2024f0:	20c00204 	addi	r3,r4,8
  2024f4:	24c00017 	ldw	r19,0(r4)
  2024f8:	25800117 	ldw	r22,4(r4)
  2024fc:	28042e16 	blt	r5,zero,2035b8 <___vfprintf_internal_r+0x1c10>
  202500:	013fdfc4 	movi	r4,-129
  202504:	9d84b03a 	or	r2,r19,r22
  202508:	d8c02e15 	stw	r3,184(sp)
  20250c:	9124703a 	and	r18,r18,r4
  202510:	0039883a 	mov	fp,zero
  202514:	103e801e 	bne	r2,zero,201f18 <_gp+0xffdf0334>
  202518:	d9002a17 	ldw	r4,168(sp)
  20251c:	2002e01e 	bne	r4,zero,2030a0 <___vfprintf_internal_r+0x16f8>
  202520:	d8002a15 	stw	zero,168(sp)
  202524:	d8002b15 	stw	zero,172(sp)
  202528:	dc001e04 	addi	r16,sp,120
  20252c:	003ef506 	br	202104 <_gp+0xffdf0520>
  202530:	8025883a 	mov	r18,r16
  202534:	dc002903 	ldbu	r16,164(sp)
  202538:	e011883a 	mov	r8,fp
  20253c:	84003fcc 	andi	r16,r16,255
  202540:	8005ba1e 	bne	r16,zero,203c2c <___vfprintf_internal_r+0x2284>
  202544:	01000874 	movhi	r4,33
  202548:	21104704 	addi	r4,r4,16668
  20254c:	d9003915 	stw	r4,228(sp)
  202550:	9080080c 	andi	r2,r18,32
  202554:	10006126 	beq	r2,zero,2026dc <___vfprintf_internal_r+0xd34>
  202558:	d9402e17 	ldw	r5,184(sp)
  20255c:	2cc00017 	ldw	r19,0(r5)
  202560:	2d800117 	ldw	r22,4(r5)
  202564:	29400204 	addi	r5,r5,8
  202568:	d9402e15 	stw	r5,184(sp)
  20256c:	9080004c 	andi	r2,r18,1
  202570:	1001ac26 	beq	r2,zero,202c24 <___vfprintf_internal_r+0x127c>
  202574:	9d84b03a 	or	r2,r19,r22
  202578:	10038526 	beq	r2,zero,203390 <___vfprintf_internal_r+0x19e8>
  20257c:	d8c02a17 	ldw	r3,168(sp)
  202580:	00800c04 	movi	r2,48
  202584:	d8802705 	stb	r2,156(sp)
  202588:	dc402745 	stb	r17,157(sp)
  20258c:	d8002785 	stb	zero,158(sp)
  202590:	90800094 	ori	r2,r18,2
  202594:	18047916 	blt	r3,zero,20377c <___vfprintf_internal_r+0x1dd4>
  202598:	00bfdfc4 	movi	r2,-129
  20259c:	90a4703a 	and	r18,r18,r2
  2025a0:	94800094 	ori	r18,r18,2
  2025a4:	0039883a 	mov	fp,zero
  2025a8:	d9003917 	ldw	r4,228(sp)
  2025ac:	dc001e04 	addi	r16,sp,120
  2025b0:	988003cc 	andi	r2,r19,15
  2025b4:	b006973a 	slli	r3,r22,28
  2025b8:	2085883a 	add	r2,r4,r2
  2025bc:	9826d13a 	srli	r19,r19,4
  2025c0:	10800003 	ldbu	r2,0(r2)
  2025c4:	b02cd13a 	srli	r22,r22,4
  2025c8:	843fffc4 	addi	r16,r16,-1
  2025cc:	1ce6b03a 	or	r19,r3,r19
  2025d0:	80800005 	stb	r2,0(r16)
  2025d4:	9d84b03a 	or	r2,r19,r22
  2025d8:	103ff51e 	bne	r2,zero,2025b0 <_gp+0xffdf09cc>
  2025dc:	d8c02817 	ldw	r3,160(sp)
  2025e0:	1c07c83a 	sub	r3,r3,r16
  2025e4:	d8c02b15 	stw	r3,172(sp)
  2025e8:	003ec606 	br	202104 <_gp+0xffdf0520>
  2025ec:	8025883a 	mov	r18,r16
  2025f0:	dc002903 	ldbu	r16,164(sp)
  2025f4:	e011883a 	mov	r8,fp
  2025f8:	84003fcc 	andi	r16,r16,255
  2025fc:	803e9626 	beq	r16,zero,202058 <_gp+0xffdf0474>
  202600:	d8c02b03 	ldbu	r3,172(sp)
  202604:	d8c02785 	stb	r3,158(sp)
  202608:	003e9306 	br	202058 <_gp+0xffdf0474>
  20260c:	00c00044 	movi	r3,1
  202610:	d8c02905 	stb	r3,164(sp)
  202614:	00c00ac4 	movi	r3,43
  202618:	d8c02b05 	stb	r3,172(sp)
  20261c:	ac400007 	ldb	r17,0(r21)
  202620:	003d4306 	br	201b30 <_gp+0xffdeff4c>
  202624:	84000814 	ori	r16,r16,32
  202628:	ac400007 	ldb	r17,0(r21)
  20262c:	003d4006 	br	201b30 <_gp+0xffdeff4c>
  202630:	d8802e17 	ldw	r2,184(sp)
  202634:	8025883a 	mov	r18,r16
  202638:	d8002785 	stb	zero,158(sp)
  20263c:	14000017 	ldw	r16,0(r2)
  202640:	e011883a 	mov	r8,fp
  202644:	14c00104 	addi	r19,r2,4
  202648:	80042d26 	beq	r16,zero,203700 <___vfprintf_internal_r+0x1d58>
  20264c:	d8c02a17 	ldw	r3,168(sp)
  202650:	1803e416 	blt	r3,zero,2035e4 <___vfprintf_internal_r+0x1c3c>
  202654:	180d883a 	mov	r6,r3
  202658:	000b883a 	mov	r5,zero
  20265c:	8009883a 	mov	r4,r16
  202660:	df003d15 	stw	fp,244(sp)
  202664:	02072e00 	call	2072e0 <memchr>
  202668:	da003d17 	ldw	r8,244(sp)
  20266c:	10046826 	beq	r2,zero,203810 <___vfprintf_internal_r+0x1e68>
  202670:	1405c83a 	sub	r2,r2,r16
  202674:	d8802b15 	stw	r2,172(sp)
  202678:	1003e016 	blt	r2,zero,2035fc <___vfprintf_internal_r+0x1c54>
  20267c:	df002783 	ldbu	fp,158(sp)
  202680:	d8802915 	stw	r2,164(sp)
  202684:	dcc02e15 	stw	r19,184(sp)
  202688:	d8002a15 	stw	zero,168(sp)
  20268c:	d8003215 	stw	zero,200(sp)
  202690:	003ea206 	br	20211c <_gp+0xffdf0538>
  202694:	8025883a 	mov	r18,r16
  202698:	dc002903 	ldbu	r16,164(sp)
  20269c:	e011883a 	mov	r8,fp
  2026a0:	84003fcc 	andi	r16,r16,255
  2026a4:	803f8d26 	beq	r16,zero,2024dc <_gp+0xffdf08f8>
  2026a8:	d8c02b03 	ldbu	r3,172(sp)
  2026ac:	d8c02785 	stb	r3,158(sp)
  2026b0:	003f8a06 	br	2024dc <_gp+0xffdf08f8>
  2026b4:	8025883a 	mov	r18,r16
  2026b8:	dc002903 	ldbu	r16,164(sp)
  2026bc:	e011883a 	mov	r8,fp
  2026c0:	84003fcc 	andi	r16,r16,255
  2026c4:	8005661e 	bne	r16,zero,203c60 <___vfprintf_internal_r+0x22b8>
  2026c8:	01000874 	movhi	r4,33
  2026cc:	21104c04 	addi	r4,r4,16688
  2026d0:	d9003915 	stw	r4,228(sp)
  2026d4:	9080080c 	andi	r2,r18,32
  2026d8:	103f9f1e 	bne	r2,zero,202558 <_gp+0xffdf0974>
  2026dc:	9080040c 	andi	r2,r18,16
  2026e0:	1002eb26 	beq	r2,zero,203290 <___vfprintf_internal_r+0x18e8>
  2026e4:	d8802e17 	ldw	r2,184(sp)
  2026e8:	002d883a 	mov	r22,zero
  2026ec:	14c00017 	ldw	r19,0(r2)
  2026f0:	10800104 	addi	r2,r2,4
  2026f4:	d8802e15 	stw	r2,184(sp)
  2026f8:	003f9c06 	br	20256c <_gp+0xffdf0988>
  2026fc:	d8802b07 	ldb	r2,172(sp)
  202700:	1002e11e 	bne	r2,zero,203288 <___vfprintf_internal_r+0x18e0>
  202704:	00c00044 	movi	r3,1
  202708:	d8c02905 	stb	r3,164(sp)
  20270c:	00c00804 	movi	r3,32
  202710:	d8c02b05 	stb	r3,172(sp)
  202714:	ac400007 	ldb	r17,0(r21)
  202718:	003d0506 	br	201b30 <_gp+0xffdeff4c>
  20271c:	84000054 	ori	r16,r16,1
  202720:	ac400007 	ldb	r17,0(r21)
  202724:	003d0206 	br	201b30 <_gp+0xffdeff4c>
  202728:	8025883a 	mov	r18,r16
  20272c:	dc002903 	ldbu	r16,164(sp)
  202730:	e011883a 	mov	r8,fp
  202734:	84003fcc 	andi	r16,r16,255
  202738:	803de726 	beq	r16,zero,201ed8 <_gp+0xffdf02f4>
  20273c:	d8c02b03 	ldbu	r3,172(sp)
  202740:	d8c02785 	stb	r3,158(sp)
  202744:	003de406 	br	201ed8 <_gp+0xffdf02f4>
  202748:	84001014 	ori	r16,r16,64
  20274c:	ac400007 	ldb	r17,0(r21)
  202750:	003cf706 	br	201b30 <_gp+0xffdeff4c>
  202754:	ac400007 	ldb	r17,0(r21)
  202758:	00801b04 	movi	r2,108
  20275c:	88838f26 	beq	r17,r2,20359c <___vfprintf_internal_r+0x1bf4>
  202760:	84000414 	ori	r16,r16,16
  202764:	003cf206 	br	201b30 <_gp+0xffdeff4c>
  202768:	8025883a 	mov	r18,r16
  20276c:	dc002903 	ldbu	r16,164(sp)
  202770:	e011883a 	mov	r8,fp
  202774:	84003fcc 	andi	r16,r16,255
  202778:	80053f1e 	bne	r16,zero,203c78 <___vfprintf_internal_r+0x22d0>
  20277c:	9080080c 	andi	r2,r18,32
  202780:	1002d226 	beq	r2,zero,2032cc <___vfprintf_internal_r+0x1924>
  202784:	d9002e17 	ldw	r4,184(sp)
  202788:	d9402f17 	ldw	r5,188(sp)
  20278c:	20800017 	ldw	r2,0(r4)
  202790:	2807d7fa 	srai	r3,r5,31
  202794:	21000104 	addi	r4,r4,4
  202798:	d9002e15 	stw	r4,184(sp)
  20279c:	11400015 	stw	r5,0(r2)
  2027a0:	10c00115 	stw	r3,4(r2)
  2027a4:	003cb806 	br	201a88 <_gp+0xffdefea4>
  2027a8:	d8c02e17 	ldw	r3,184(sp)
  2027ac:	d9002e17 	ldw	r4,184(sp)
  2027b0:	8025883a 	mov	r18,r16
  2027b4:	18800017 	ldw	r2,0(r3)
  2027b8:	21000104 	addi	r4,r4,4
  2027bc:	00c00044 	movi	r3,1
  2027c0:	e011883a 	mov	r8,fp
  2027c4:	d8c02915 	stw	r3,164(sp)
  2027c8:	d8002785 	stb	zero,158(sp)
  2027cc:	d8801405 	stb	r2,80(sp)
  2027d0:	d9002e15 	stw	r4,184(sp)
  2027d4:	d8c02b15 	stw	r3,172(sp)
  2027d8:	d8002a15 	stw	zero,168(sp)
  2027dc:	d8003215 	stw	zero,200(sp)
  2027e0:	dc001404 	addi	r16,sp,80
  2027e4:	0039883a 	mov	fp,zero
  2027e8:	003e5306 	br	202138 <_gp+0xffdf0554>
  2027ec:	01000874 	movhi	r4,33
  2027f0:	21104c04 	addi	r4,r4,16688
  2027f4:	0039883a 	mov	fp,zero
  2027f8:	d9003915 	stw	r4,228(sp)
  2027fc:	04401e04 	movi	r17,120
  202800:	003f6906 	br	2025a8 <_gp+0xffdf09c4>
  202804:	8025883a 	mov	r18,r16
  202808:	dc002903 	ldbu	r16,164(sp)
  20280c:	e011883a 	mov	r8,fp
  202810:	84003fcc 	andi	r16,r16,255
  202814:	8005081e 	bne	r16,zero,203c38 <___vfprintf_internal_r+0x2290>
  202818:	883d6126 	beq	r17,zero,201da0 <_gp+0xffdf01bc>
  20281c:	00c00044 	movi	r3,1
  202820:	d8c02915 	stw	r3,164(sp)
  202824:	dc401405 	stb	r17,80(sp)
  202828:	d8002785 	stb	zero,158(sp)
  20282c:	003fe906 	br	2027d4 <_gp+0xffdf0bf0>
  202830:	01400874 	movhi	r5,33
  202834:	29504c04 	addi	r5,r5,16688
  202838:	d9403915 	stw	r5,228(sp)
  20283c:	d8c02e15 	stw	r3,184(sp)
  202840:	1025883a 	mov	r18,r2
  202844:	04401e04 	movi	r17,120
  202848:	9d84b03a 	or	r2,r19,r22
  20284c:	1000fc1e 	bne	r2,zero,202c40 <___vfprintf_internal_r+0x1298>
  202850:	0039883a 	mov	fp,zero
  202854:	00800084 	movi	r2,2
  202858:	10803fcc 	andi	r2,r2,255
  20285c:	00c00044 	movi	r3,1
  202860:	10c20f26 	beq	r2,r3,2030a0 <___vfprintf_internal_r+0x16f8>
  202864:	00c00084 	movi	r3,2
  202868:	10fd3326 	beq	r2,r3,201d38 <_gp+0xffdf0154>
  20286c:	003e0b06 	br	20209c <_gp+0xffdf04b8>
  202870:	d8c02017 	ldw	r3,128(sp)
  202874:	003e7106 	br	20223c <_gp+0xffdf0658>
  202878:	00801944 	movi	r2,101
  20287c:	14407e0e 	bge	r2,r17,202a78 <___vfprintf_internal_r+0x10d0>
  202880:	d9003617 	ldw	r4,216(sp)
  202884:	d9403817 	ldw	r5,224(sp)
  202888:	000d883a 	mov	r6,zero
  20288c:	000f883a 	mov	r7,zero
  202890:	d8c03c15 	stw	r3,240(sp)
  202894:	da003d15 	stw	r8,244(sp)
  202898:	020cf0c0 	call	20cf0c <__eqdf2>
  20289c:	d8c03c17 	ldw	r3,240(sp)
  2028a0:	da003d17 	ldw	r8,244(sp)
  2028a4:	1000f71e 	bne	r2,zero,202c84 <___vfprintf_internal_r+0x12dc>
  2028a8:	d8801f17 	ldw	r2,124(sp)
  2028ac:	01000874 	movhi	r4,33
  2028b0:	21105304 	addi	r4,r4,16716
  2028b4:	18c00044 	addi	r3,r3,1
  2028b8:	10800044 	addi	r2,r2,1
  2028bc:	41000015 	stw	r4,0(r8)
  2028c0:	01000044 	movi	r4,1
  2028c4:	41000115 	stw	r4,4(r8)
  2028c8:	d8c02015 	stw	r3,128(sp)
  2028cc:	d8801f15 	stw	r2,124(sp)
  2028d0:	010001c4 	movi	r4,7
  2028d4:	2082b816 	blt	r4,r2,2033b8 <___vfprintf_internal_r+0x1a10>
  2028d8:	42000204 	addi	r8,r8,8
  2028dc:	d8802617 	ldw	r2,152(sp)
  2028e0:	d9403317 	ldw	r5,204(sp)
  2028e4:	11400216 	blt	r2,r5,2028f0 <___vfprintf_internal_r+0xf48>
  2028e8:	9080004c 	andi	r2,r18,1
  2028ec:	103eb326 	beq	r2,zero,2023bc <_gp+0xffdf07d8>
  2028f0:	d8803717 	ldw	r2,220(sp)
  2028f4:	d9003417 	ldw	r4,208(sp)
  2028f8:	d9403717 	ldw	r5,220(sp)
  2028fc:	1887883a 	add	r3,r3,r2
  202900:	d8801f17 	ldw	r2,124(sp)
  202904:	41000015 	stw	r4,0(r8)
  202908:	41400115 	stw	r5,4(r8)
  20290c:	10800044 	addi	r2,r2,1
  202910:	d8c02015 	stw	r3,128(sp)
  202914:	d8801f15 	stw	r2,124(sp)
  202918:	010001c4 	movi	r4,7
  20291c:	20832916 	blt	r4,r2,2035c4 <___vfprintf_internal_r+0x1c1c>
  202920:	42000204 	addi	r8,r8,8
  202924:	d8803317 	ldw	r2,204(sp)
  202928:	143fffc4 	addi	r16,r2,-1
  20292c:	043ea30e 	bge	zero,r16,2023bc <_gp+0xffdf07d8>
  202930:	04400404 	movi	r17,16
  202934:	d8801f17 	ldw	r2,124(sp)
  202938:	8c00880e 	bge	r17,r16,202b5c <___vfprintf_internal_r+0x11b4>
  20293c:	01400874 	movhi	r5,33
  202940:	29505384 	addi	r5,r5,16718
  202944:	d9402c15 	stw	r5,176(sp)
  202948:	058001c4 	movi	r22,7
  20294c:	dcc02d17 	ldw	r19,180(sp)
  202950:	00000306 	br	202960 <___vfprintf_internal_r+0xfb8>
  202954:	42000204 	addi	r8,r8,8
  202958:	843ffc04 	addi	r16,r16,-16
  20295c:	8c00820e 	bge	r17,r16,202b68 <___vfprintf_internal_r+0x11c0>
  202960:	18c00404 	addi	r3,r3,16
  202964:	10800044 	addi	r2,r2,1
  202968:	45000015 	stw	r20,0(r8)
  20296c:	44400115 	stw	r17,4(r8)
  202970:	d8c02015 	stw	r3,128(sp)
  202974:	d8801f15 	stw	r2,124(sp)
  202978:	b0bff60e 	bge	r22,r2,202954 <_gp+0xffdf0d70>
  20297c:	d9801e04 	addi	r6,sp,120
  202980:	b80b883a 	mov	r5,r23
  202984:	9809883a 	mov	r4,r19
  202988:	02091880 	call	209188 <__sprint_r>
  20298c:	103d0a1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202990:	d8c02017 	ldw	r3,128(sp)
  202994:	d8801f17 	ldw	r2,124(sp)
  202998:	da000404 	addi	r8,sp,16
  20299c:	003fee06 	br	202958 <_gp+0xffdf0d74>
  2029a0:	d9403117 	ldw	r5,196(sp)
  2029a4:	d8802917 	ldw	r2,164(sp)
  2029a8:	28adc83a 	sub	r22,r5,r2
  2029ac:	05be410e 	bge	zero,r22,2022b4 <_gp+0xffdf06d0>
  2029b0:	07000404 	movi	fp,16
  2029b4:	d8801f17 	ldw	r2,124(sp)
  2029b8:	e5838f0e 	bge	fp,r22,2037f8 <___vfprintf_internal_r+0x1e50>
  2029bc:	01400874 	movhi	r5,33
  2029c0:	29505384 	addi	r5,r5,16718
  2029c4:	dc403015 	stw	r17,192(sp)
  2029c8:	d9402c15 	stw	r5,176(sp)
  2029cc:	b023883a 	mov	r17,r22
  2029d0:	04c001c4 	movi	r19,7
  2029d4:	a82d883a 	mov	r22,r21
  2029d8:	902b883a 	mov	r21,r18
  2029dc:	8025883a 	mov	r18,r16
  2029e0:	dc002d17 	ldw	r16,180(sp)
  2029e4:	00000306 	br	2029f4 <___vfprintf_internal_r+0x104c>
  2029e8:	8c7ffc04 	addi	r17,r17,-16
  2029ec:	42000204 	addi	r8,r8,8
  2029f0:	e440110e 	bge	fp,r17,202a38 <___vfprintf_internal_r+0x1090>
  2029f4:	18c00404 	addi	r3,r3,16
  2029f8:	10800044 	addi	r2,r2,1
  2029fc:	45000015 	stw	r20,0(r8)
  202a00:	47000115 	stw	fp,4(r8)
  202a04:	d8c02015 	stw	r3,128(sp)
  202a08:	d8801f15 	stw	r2,124(sp)
  202a0c:	98bff60e 	bge	r19,r2,2029e8 <_gp+0xffdf0e04>
  202a10:	d9801e04 	addi	r6,sp,120
  202a14:	b80b883a 	mov	r5,r23
  202a18:	8009883a 	mov	r4,r16
  202a1c:	02091880 	call	209188 <__sprint_r>
  202a20:	103ce51e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202a24:	8c7ffc04 	addi	r17,r17,-16
  202a28:	d8c02017 	ldw	r3,128(sp)
  202a2c:	d8801f17 	ldw	r2,124(sp)
  202a30:	da000404 	addi	r8,sp,16
  202a34:	e47fef16 	blt	fp,r17,2029f4 <_gp+0xffdf0e10>
  202a38:	9021883a 	mov	r16,r18
  202a3c:	a825883a 	mov	r18,r21
  202a40:	b02b883a 	mov	r21,r22
  202a44:	882d883a 	mov	r22,r17
  202a48:	dc403017 	ldw	r17,192(sp)
  202a4c:	d9002c17 	ldw	r4,176(sp)
  202a50:	1d87883a 	add	r3,r3,r22
  202a54:	10800044 	addi	r2,r2,1
  202a58:	41000015 	stw	r4,0(r8)
  202a5c:	45800115 	stw	r22,4(r8)
  202a60:	d8c02015 	stw	r3,128(sp)
  202a64:	d8801f15 	stw	r2,124(sp)
  202a68:	010001c4 	movi	r4,7
  202a6c:	20818e16 	blt	r4,r2,2030a8 <___vfprintf_internal_r+0x1700>
  202a70:	42000204 	addi	r8,r8,8
  202a74:	003e0f06 	br	2022b4 <_gp+0xffdf06d0>
  202a78:	d9403317 	ldw	r5,204(sp)
  202a7c:	00800044 	movi	r2,1
  202a80:	18c00044 	addi	r3,r3,1
  202a84:	1141530e 	bge	r2,r5,202fd4 <___vfprintf_internal_r+0x162c>
  202a88:	dc401f17 	ldw	r17,124(sp)
  202a8c:	00800044 	movi	r2,1
  202a90:	40800115 	stw	r2,4(r8)
  202a94:	8c400044 	addi	r17,r17,1
  202a98:	44000015 	stw	r16,0(r8)
  202a9c:	d8c02015 	stw	r3,128(sp)
  202aa0:	dc401f15 	stw	r17,124(sp)
  202aa4:	008001c4 	movi	r2,7
  202aa8:	14416b16 	blt	r2,r17,203058 <___vfprintf_internal_r+0x16b0>
  202aac:	42000204 	addi	r8,r8,8
  202ab0:	d8803717 	ldw	r2,220(sp)
  202ab4:	d9003417 	ldw	r4,208(sp)
  202ab8:	8c400044 	addi	r17,r17,1
  202abc:	10c7883a 	add	r3,r2,r3
  202ac0:	40800115 	stw	r2,4(r8)
  202ac4:	41000015 	stw	r4,0(r8)
  202ac8:	d8c02015 	stw	r3,128(sp)
  202acc:	dc401f15 	stw	r17,124(sp)
  202ad0:	008001c4 	movi	r2,7
  202ad4:	14416916 	blt	r2,r17,20307c <___vfprintf_internal_r+0x16d4>
  202ad8:	45800204 	addi	r22,r8,8
  202adc:	d9003617 	ldw	r4,216(sp)
  202ae0:	d9403817 	ldw	r5,224(sp)
  202ae4:	000d883a 	mov	r6,zero
  202ae8:	000f883a 	mov	r7,zero
  202aec:	d8c03c15 	stw	r3,240(sp)
  202af0:	020cf0c0 	call	20cf0c <__eqdf2>
  202af4:	d8c03c17 	ldw	r3,240(sp)
  202af8:	1000bc26 	beq	r2,zero,202dec <___vfprintf_internal_r+0x1444>
  202afc:	d9403317 	ldw	r5,204(sp)
  202b00:	84000044 	addi	r16,r16,1
  202b04:	8c400044 	addi	r17,r17,1
  202b08:	28bfffc4 	addi	r2,r5,-1
  202b0c:	1887883a 	add	r3,r3,r2
  202b10:	b0800115 	stw	r2,4(r22)
  202b14:	b4000015 	stw	r16,0(r22)
  202b18:	d8c02015 	stw	r3,128(sp)
  202b1c:	dc401f15 	stw	r17,124(sp)
  202b20:	008001c4 	movi	r2,7
  202b24:	14414316 	blt	r2,r17,203034 <___vfprintf_internal_r+0x168c>
  202b28:	b5800204 	addi	r22,r22,8
  202b2c:	d9003a17 	ldw	r4,232(sp)
  202b30:	df0022c4 	addi	fp,sp,139
  202b34:	8c400044 	addi	r17,r17,1
  202b38:	20c7883a 	add	r3,r4,r3
  202b3c:	b7000015 	stw	fp,0(r22)
  202b40:	b1000115 	stw	r4,4(r22)
  202b44:	d8c02015 	stw	r3,128(sp)
  202b48:	dc401f15 	stw	r17,124(sp)
  202b4c:	008001c4 	movi	r2,7
  202b50:	14400e16 	blt	r2,r17,202b8c <___vfprintf_internal_r+0x11e4>
  202b54:	b2000204 	addi	r8,r22,8
  202b58:	003e1806 	br	2023bc <_gp+0xffdf07d8>
  202b5c:	01000874 	movhi	r4,33
  202b60:	21105384 	addi	r4,r4,16718
  202b64:	d9002c15 	stw	r4,176(sp)
  202b68:	d9002c17 	ldw	r4,176(sp)
  202b6c:	1c07883a 	add	r3,r3,r16
  202b70:	44000115 	stw	r16,4(r8)
  202b74:	41000015 	stw	r4,0(r8)
  202b78:	10800044 	addi	r2,r2,1
  202b7c:	d8c02015 	stw	r3,128(sp)
  202b80:	d8801f15 	stw	r2,124(sp)
  202b84:	010001c4 	movi	r4,7
  202b88:	20be0b0e 	bge	r4,r2,2023b8 <_gp+0xffdf07d4>
  202b8c:	d9002d17 	ldw	r4,180(sp)
  202b90:	d9801e04 	addi	r6,sp,120
  202b94:	b80b883a 	mov	r5,r23
  202b98:	02091880 	call	209188 <__sprint_r>
  202b9c:	103c861e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202ba0:	d8c02017 	ldw	r3,128(sp)
  202ba4:	da000404 	addi	r8,sp,16
  202ba8:	003e0406 	br	2023bc <_gp+0xffdf07d8>
  202bac:	d9002d17 	ldw	r4,180(sp)
  202bb0:	d9801e04 	addi	r6,sp,120
  202bb4:	b80b883a 	mov	r5,r23
  202bb8:	02091880 	call	209188 <__sprint_r>
  202bbc:	103e3b26 	beq	r2,zero,2024ac <_gp+0xffdf08c8>
  202bc0:	003c7d06 	br	201db8 <_gp+0xffdf01d4>
  202bc4:	d9002d17 	ldw	r4,180(sp)
  202bc8:	d9801e04 	addi	r6,sp,120
  202bcc:	b80b883a 	mov	r5,r23
  202bd0:	02091880 	call	209188 <__sprint_r>
  202bd4:	103c781e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202bd8:	d8c02017 	ldw	r3,128(sp)
  202bdc:	da000404 	addi	r8,sp,16
  202be0:	003de906 	br	202388 <_gp+0xffdf07a4>
  202be4:	d9002d17 	ldw	r4,180(sp)
  202be8:	d9801e04 	addi	r6,sp,120
  202bec:	b80b883a 	mov	r5,r23
  202bf0:	02091880 	call	209188 <__sprint_r>
  202bf4:	103c701e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202bf8:	d8c02017 	ldw	r3,128(sp)
  202bfc:	da000404 	addi	r8,sp,16
  202c00:	003d9b06 	br	202270 <_gp+0xffdf068c>
  202c04:	d9002d17 	ldw	r4,180(sp)
  202c08:	d9801e04 	addi	r6,sp,120
  202c0c:	b80b883a 	mov	r5,r23
  202c10:	02091880 	call	209188 <__sprint_r>
  202c14:	103c681e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202c18:	d8c02017 	ldw	r3,128(sp)
  202c1c:	da000404 	addi	r8,sp,16
  202c20:	003da106 	br	2022a8 <_gp+0xffdf06c4>
  202c24:	d9402a17 	ldw	r5,168(sp)
  202c28:	d8002785 	stb	zero,158(sp)
  202c2c:	283f0616 	blt	r5,zero,202848 <_gp+0xffdf0c64>
  202c30:	00ffdfc4 	movi	r3,-129
  202c34:	9d84b03a 	or	r2,r19,r22
  202c38:	90e4703a 	and	r18,r18,r3
  202c3c:	103c3b26 	beq	r2,zero,201d2c <_gp+0xffdf0148>
  202c40:	0039883a 	mov	fp,zero
  202c44:	003e5806 	br	2025a8 <_gp+0xffdf09c4>
  202c48:	9080040c 	andi	r2,r18,16
  202c4c:	1001b326 	beq	r2,zero,20331c <___vfprintf_internal_r+0x1974>
  202c50:	d8c02e17 	ldw	r3,184(sp)
  202c54:	d9002a17 	ldw	r4,168(sp)
  202c58:	d8002785 	stb	zero,158(sp)
  202c5c:	18800104 	addi	r2,r3,4
  202c60:	1cc00017 	ldw	r19,0(r3)
  202c64:	002d883a 	mov	r22,zero
  202c68:	2001b516 	blt	r4,zero,203340 <___vfprintf_internal_r+0x1998>
  202c6c:	00ffdfc4 	movi	r3,-129
  202c70:	d8802e15 	stw	r2,184(sp)
  202c74:	90e4703a 	and	r18,r18,r3
  202c78:	983d0526 	beq	r19,zero,202090 <_gp+0xffdf04ac>
  202c7c:	0039883a 	mov	fp,zero
  202c80:	003d0806 	br	2020a4 <_gp+0xffdf04c0>
  202c84:	dc402617 	ldw	r17,152(sp)
  202c88:	0441d30e 	bge	zero,r17,2033d8 <___vfprintf_internal_r+0x1a30>
  202c8c:	dc403217 	ldw	r17,200(sp)
  202c90:	d8803317 	ldw	r2,204(sp)
  202c94:	1440010e 	bge	r2,r17,202c9c <___vfprintf_internal_r+0x12f4>
  202c98:	1023883a 	mov	r17,r2
  202c9c:	04400a0e 	bge	zero,r17,202cc8 <___vfprintf_internal_r+0x1320>
  202ca0:	d8801f17 	ldw	r2,124(sp)
  202ca4:	1c47883a 	add	r3,r3,r17
  202ca8:	44000015 	stw	r16,0(r8)
  202cac:	10800044 	addi	r2,r2,1
  202cb0:	44400115 	stw	r17,4(r8)
  202cb4:	d8c02015 	stw	r3,128(sp)
  202cb8:	d8801f15 	stw	r2,124(sp)
  202cbc:	010001c4 	movi	r4,7
  202cc0:	20826516 	blt	r4,r2,203658 <___vfprintf_internal_r+0x1cb0>
  202cc4:	42000204 	addi	r8,r8,8
  202cc8:	88026116 	blt	r17,zero,203650 <___vfprintf_internal_r+0x1ca8>
  202ccc:	d9003217 	ldw	r4,200(sp)
  202cd0:	2463c83a 	sub	r17,r4,r17
  202cd4:	04407b0e 	bge	zero,r17,202ec4 <___vfprintf_internal_r+0x151c>
  202cd8:	05800404 	movi	r22,16
  202cdc:	d8801f17 	ldw	r2,124(sp)
  202ce0:	b4419d0e 	bge	r22,r17,203358 <___vfprintf_internal_r+0x19b0>
  202ce4:	01000874 	movhi	r4,33
  202ce8:	21105384 	addi	r4,r4,16718
  202cec:	d9002c15 	stw	r4,176(sp)
  202cf0:	070001c4 	movi	fp,7
  202cf4:	dcc02d17 	ldw	r19,180(sp)
  202cf8:	00000306 	br	202d08 <___vfprintf_internal_r+0x1360>
  202cfc:	42000204 	addi	r8,r8,8
  202d00:	8c7ffc04 	addi	r17,r17,-16
  202d04:	b441970e 	bge	r22,r17,203364 <___vfprintf_internal_r+0x19bc>
  202d08:	18c00404 	addi	r3,r3,16
  202d0c:	10800044 	addi	r2,r2,1
  202d10:	45000015 	stw	r20,0(r8)
  202d14:	45800115 	stw	r22,4(r8)
  202d18:	d8c02015 	stw	r3,128(sp)
  202d1c:	d8801f15 	stw	r2,124(sp)
  202d20:	e0bff60e 	bge	fp,r2,202cfc <_gp+0xffdf1118>
  202d24:	d9801e04 	addi	r6,sp,120
  202d28:	b80b883a 	mov	r5,r23
  202d2c:	9809883a 	mov	r4,r19
  202d30:	02091880 	call	209188 <__sprint_r>
  202d34:	103c201e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202d38:	d8c02017 	ldw	r3,128(sp)
  202d3c:	d8801f17 	ldw	r2,124(sp)
  202d40:	da000404 	addi	r8,sp,16
  202d44:	003fee06 	br	202d00 <_gp+0xffdf111c>
  202d48:	d9002d17 	ldw	r4,180(sp)
  202d4c:	d9801e04 	addi	r6,sp,120
  202d50:	b80b883a 	mov	r5,r23
  202d54:	02091880 	call	209188 <__sprint_r>
  202d58:	103c171e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202d5c:	d8c02017 	ldw	r3,128(sp)
  202d60:	df002787 	ldb	fp,158(sp)
  202d64:	da000404 	addi	r8,sp,16
  202d68:	003d3406 	br	20223c <_gp+0xffdf0658>
  202d6c:	9080040c 	andi	r2,r18,16
  202d70:	10016126 	beq	r2,zero,2032f8 <___vfprintf_internal_r+0x1950>
  202d74:	d9402e17 	ldw	r5,184(sp)
  202d78:	2cc00017 	ldw	r19,0(r5)
  202d7c:	29400104 	addi	r5,r5,4
  202d80:	d9402e15 	stw	r5,184(sp)
  202d84:	982dd7fa 	srai	r22,r19,31
  202d88:	b005883a 	mov	r2,r22
  202d8c:	003c5a06 	br	201ef8 <_gp+0xffdf0314>
  202d90:	9080040c 	andi	r2,r18,16
  202d94:	10003526 	beq	r2,zero,202e6c <___vfprintf_internal_r+0x14c4>
  202d98:	d8c02e17 	ldw	r3,184(sp)
  202d9c:	d9002a17 	ldw	r4,168(sp)
  202da0:	d8002785 	stb	zero,158(sp)
  202da4:	18800104 	addi	r2,r3,4
  202da8:	1cc00017 	ldw	r19,0(r3)
  202dac:	002d883a 	mov	r22,zero
  202db0:	20003716 	blt	r4,zero,202e90 <___vfprintf_internal_r+0x14e8>
  202db4:	00ffdfc4 	movi	r3,-129
  202db8:	d8802e15 	stw	r2,184(sp)
  202dbc:	90e4703a 	and	r18,r18,r3
  202dc0:	0039883a 	mov	fp,zero
  202dc4:	983dd426 	beq	r19,zero,202518 <_gp+0xffdf0934>
  202dc8:	00800244 	movi	r2,9
  202dcc:	14fc5336 	bltu	r2,r19,201f1c <_gp+0xffdf0338>
  202dd0:	d8c02817 	ldw	r3,160(sp)
  202dd4:	dc001dc4 	addi	r16,sp,119
  202dd8:	9cc00c04 	addi	r19,r19,48
  202ddc:	1c07c83a 	sub	r3,r3,r16
  202de0:	dcc01dc5 	stb	r19,119(sp)
  202de4:	d8c02b15 	stw	r3,172(sp)
  202de8:	003cc606 	br	202104 <_gp+0xffdf0520>
  202dec:	d8803317 	ldw	r2,204(sp)
  202df0:	143fffc4 	addi	r16,r2,-1
  202df4:	043f4d0e 	bge	zero,r16,202b2c <_gp+0xffdf0f48>
  202df8:	07000404 	movi	fp,16
  202dfc:	e400810e 	bge	fp,r16,203004 <___vfprintf_internal_r+0x165c>
  202e00:	01400874 	movhi	r5,33
  202e04:	29505384 	addi	r5,r5,16718
  202e08:	d9402c15 	stw	r5,176(sp)
  202e0c:	01c001c4 	movi	r7,7
  202e10:	dcc02d17 	ldw	r19,180(sp)
  202e14:	00000306 	br	202e24 <___vfprintf_internal_r+0x147c>
  202e18:	b5800204 	addi	r22,r22,8
  202e1c:	843ffc04 	addi	r16,r16,-16
  202e20:	e4007b0e 	bge	fp,r16,203010 <___vfprintf_internal_r+0x1668>
  202e24:	18c00404 	addi	r3,r3,16
  202e28:	8c400044 	addi	r17,r17,1
  202e2c:	b5000015 	stw	r20,0(r22)
  202e30:	b7000115 	stw	fp,4(r22)
  202e34:	d8c02015 	stw	r3,128(sp)
  202e38:	dc401f15 	stw	r17,124(sp)
  202e3c:	3c7ff60e 	bge	r7,r17,202e18 <_gp+0xffdf1234>
  202e40:	d9801e04 	addi	r6,sp,120
  202e44:	b80b883a 	mov	r5,r23
  202e48:	9809883a 	mov	r4,r19
  202e4c:	d9c03c15 	stw	r7,240(sp)
  202e50:	02091880 	call	209188 <__sprint_r>
  202e54:	d9c03c17 	ldw	r7,240(sp)
  202e58:	103bd71e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202e5c:	d8c02017 	ldw	r3,128(sp)
  202e60:	dc401f17 	ldw	r17,124(sp)
  202e64:	dd800404 	addi	r22,sp,16
  202e68:	003fec06 	br	202e1c <_gp+0xffdf1238>
  202e6c:	9080100c 	andi	r2,r18,64
  202e70:	d8002785 	stb	zero,158(sp)
  202e74:	10010e26 	beq	r2,zero,2032b0 <___vfprintf_internal_r+0x1908>
  202e78:	d9402e17 	ldw	r5,184(sp)
  202e7c:	d8c02a17 	ldw	r3,168(sp)
  202e80:	002d883a 	mov	r22,zero
  202e84:	28800104 	addi	r2,r5,4
  202e88:	2cc0000b 	ldhu	r19,0(r5)
  202e8c:	183fc90e 	bge	r3,zero,202db4 <_gp+0xffdf11d0>
  202e90:	d8802e15 	stw	r2,184(sp)
  202e94:	0039883a 	mov	fp,zero
  202e98:	9d84b03a 	or	r2,r19,r22
  202e9c:	103c1e1e 	bne	r2,zero,201f18 <_gp+0xffdf0334>
  202ea0:	00800044 	movi	r2,1
  202ea4:	003e6c06 	br	202858 <_gp+0xffdf0c74>
  202ea8:	d9002d17 	ldw	r4,180(sp)
  202eac:	d9801e04 	addi	r6,sp,120
  202eb0:	b80b883a 	mov	r5,r23
  202eb4:	02091880 	call	209188 <__sprint_r>
  202eb8:	103bbf1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202ebc:	d8c02017 	ldw	r3,128(sp)
  202ec0:	da000404 	addi	r8,sp,16
  202ec4:	d9003217 	ldw	r4,200(sp)
  202ec8:	d8802617 	ldw	r2,152(sp)
  202ecc:	d9403317 	ldw	r5,204(sp)
  202ed0:	8123883a 	add	r17,r16,r4
  202ed4:	11400216 	blt	r2,r5,202ee0 <___vfprintf_internal_r+0x1538>
  202ed8:	9100004c 	andi	r4,r18,1
  202edc:	20000d26 	beq	r4,zero,202f14 <___vfprintf_internal_r+0x156c>
  202ee0:	d9003717 	ldw	r4,220(sp)
  202ee4:	d9403417 	ldw	r5,208(sp)
  202ee8:	1907883a 	add	r3,r3,r4
  202eec:	d9001f17 	ldw	r4,124(sp)
  202ef0:	41400015 	stw	r5,0(r8)
  202ef4:	d9403717 	ldw	r5,220(sp)
  202ef8:	21000044 	addi	r4,r4,1
  202efc:	d8c02015 	stw	r3,128(sp)
  202f00:	41400115 	stw	r5,4(r8)
  202f04:	d9001f15 	stw	r4,124(sp)
  202f08:	014001c4 	movi	r5,7
  202f0c:	2901e816 	blt	r5,r4,2036b0 <___vfprintf_internal_r+0x1d08>
  202f10:	42000204 	addi	r8,r8,8
  202f14:	d9003317 	ldw	r4,204(sp)
  202f18:	8121883a 	add	r16,r16,r4
  202f1c:	2085c83a 	sub	r2,r4,r2
  202f20:	8461c83a 	sub	r16,r16,r17
  202f24:	1400010e 	bge	r2,r16,202f2c <___vfprintf_internal_r+0x1584>
  202f28:	1021883a 	mov	r16,r2
  202f2c:	04000a0e 	bge	zero,r16,202f58 <___vfprintf_internal_r+0x15b0>
  202f30:	d9001f17 	ldw	r4,124(sp)
  202f34:	1c07883a 	add	r3,r3,r16
  202f38:	44400015 	stw	r17,0(r8)
  202f3c:	21000044 	addi	r4,r4,1
  202f40:	44000115 	stw	r16,4(r8)
  202f44:	d8c02015 	stw	r3,128(sp)
  202f48:	d9001f15 	stw	r4,124(sp)
  202f4c:	014001c4 	movi	r5,7
  202f50:	2901fb16 	blt	r5,r4,203740 <___vfprintf_internal_r+0x1d98>
  202f54:	42000204 	addi	r8,r8,8
  202f58:	8001f716 	blt	r16,zero,203738 <___vfprintf_internal_r+0x1d90>
  202f5c:	1421c83a 	sub	r16,r2,r16
  202f60:	043d160e 	bge	zero,r16,2023bc <_gp+0xffdf07d8>
  202f64:	04400404 	movi	r17,16
  202f68:	d8801f17 	ldw	r2,124(sp)
  202f6c:	8c3efb0e 	bge	r17,r16,202b5c <_gp+0xffdf0f78>
  202f70:	01400874 	movhi	r5,33
  202f74:	29505384 	addi	r5,r5,16718
  202f78:	d9402c15 	stw	r5,176(sp)
  202f7c:	058001c4 	movi	r22,7
  202f80:	dcc02d17 	ldw	r19,180(sp)
  202f84:	00000306 	br	202f94 <___vfprintf_internal_r+0x15ec>
  202f88:	42000204 	addi	r8,r8,8
  202f8c:	843ffc04 	addi	r16,r16,-16
  202f90:	8c3ef50e 	bge	r17,r16,202b68 <_gp+0xffdf0f84>
  202f94:	18c00404 	addi	r3,r3,16
  202f98:	10800044 	addi	r2,r2,1
  202f9c:	45000015 	stw	r20,0(r8)
  202fa0:	44400115 	stw	r17,4(r8)
  202fa4:	d8c02015 	stw	r3,128(sp)
  202fa8:	d8801f15 	stw	r2,124(sp)
  202fac:	b0bff60e 	bge	r22,r2,202f88 <_gp+0xffdf13a4>
  202fb0:	d9801e04 	addi	r6,sp,120
  202fb4:	b80b883a 	mov	r5,r23
  202fb8:	9809883a 	mov	r4,r19
  202fbc:	02091880 	call	209188 <__sprint_r>
  202fc0:	103b7d1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  202fc4:	d8c02017 	ldw	r3,128(sp)
  202fc8:	d8801f17 	ldw	r2,124(sp)
  202fcc:	da000404 	addi	r8,sp,16
  202fd0:	003fee06 	br	202f8c <_gp+0xffdf13a8>
  202fd4:	9088703a 	and	r4,r18,r2
  202fd8:	203eab1e 	bne	r4,zero,202a88 <_gp+0xffdf0ea4>
  202fdc:	dc401f17 	ldw	r17,124(sp)
  202fe0:	40800115 	stw	r2,4(r8)
  202fe4:	44000015 	stw	r16,0(r8)
  202fe8:	8c400044 	addi	r17,r17,1
  202fec:	d8c02015 	stw	r3,128(sp)
  202ff0:	dc401f15 	stw	r17,124(sp)
  202ff4:	008001c4 	movi	r2,7
  202ff8:	14400e16 	blt	r2,r17,203034 <___vfprintf_internal_r+0x168c>
  202ffc:	45800204 	addi	r22,r8,8
  203000:	003eca06 	br	202b2c <_gp+0xffdf0f48>
  203004:	01000874 	movhi	r4,33
  203008:	21105384 	addi	r4,r4,16718
  20300c:	d9002c15 	stw	r4,176(sp)
  203010:	d8802c17 	ldw	r2,176(sp)
  203014:	1c07883a 	add	r3,r3,r16
  203018:	8c400044 	addi	r17,r17,1
  20301c:	b0800015 	stw	r2,0(r22)
  203020:	b4000115 	stw	r16,4(r22)
  203024:	d8c02015 	stw	r3,128(sp)
  203028:	dc401f15 	stw	r17,124(sp)
  20302c:	008001c4 	movi	r2,7
  203030:	147ebd0e 	bge	r2,r17,202b28 <_gp+0xffdf0f44>
  203034:	d9002d17 	ldw	r4,180(sp)
  203038:	d9801e04 	addi	r6,sp,120
  20303c:	b80b883a 	mov	r5,r23
  203040:	02091880 	call	209188 <__sprint_r>
  203044:	103b5c1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  203048:	d8c02017 	ldw	r3,128(sp)
  20304c:	dc401f17 	ldw	r17,124(sp)
  203050:	dd800404 	addi	r22,sp,16
  203054:	003eb506 	br	202b2c <_gp+0xffdf0f48>
  203058:	d9002d17 	ldw	r4,180(sp)
  20305c:	d9801e04 	addi	r6,sp,120
  203060:	b80b883a 	mov	r5,r23
  203064:	02091880 	call	209188 <__sprint_r>
  203068:	103b531e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  20306c:	d8c02017 	ldw	r3,128(sp)
  203070:	dc401f17 	ldw	r17,124(sp)
  203074:	da000404 	addi	r8,sp,16
  203078:	003e8d06 	br	202ab0 <_gp+0xffdf0ecc>
  20307c:	d9002d17 	ldw	r4,180(sp)
  203080:	d9801e04 	addi	r6,sp,120
  203084:	b80b883a 	mov	r5,r23
  203088:	02091880 	call	209188 <__sprint_r>
  20308c:	103b4a1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  203090:	d8c02017 	ldw	r3,128(sp)
  203094:	dc401f17 	ldw	r17,124(sp)
  203098:	dd800404 	addi	r22,sp,16
  20309c:	003e8f06 	br	202adc <_gp+0xffdf0ef8>
  2030a0:	0027883a 	mov	r19,zero
  2030a4:	003f4a06 	br	202dd0 <_gp+0xffdf11ec>
  2030a8:	d9002d17 	ldw	r4,180(sp)
  2030ac:	d9801e04 	addi	r6,sp,120
  2030b0:	b80b883a 	mov	r5,r23
  2030b4:	02091880 	call	209188 <__sprint_r>
  2030b8:	103b3f1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2030bc:	d8c02017 	ldw	r3,128(sp)
  2030c0:	da000404 	addi	r8,sp,16
  2030c4:	003c7b06 	br	2022b4 <_gp+0xffdf06d0>
  2030c8:	d9402a17 	ldw	r5,168(sp)
  2030cc:	04e7c83a 	sub	r19,zero,r19
  2030d0:	07000b44 	movi	fp,45
  2030d4:	9804c03a 	cmpne	r2,r19,zero
  2030d8:	05adc83a 	sub	r22,zero,r22
  2030dc:	df002785 	stb	fp,158(sp)
  2030e0:	b0adc83a 	sub	r22,r22,r2
  2030e4:	28017b16 	blt	r5,zero,2036d4 <___vfprintf_internal_r+0x1d2c>
  2030e8:	00bfdfc4 	movi	r2,-129
  2030ec:	90a4703a 	and	r18,r18,r2
  2030f0:	003b8906 	br	201f18 <_gp+0xffdf0334>
  2030f4:	d9003617 	ldw	r4,216(sp)
  2030f8:	d9403817 	ldw	r5,224(sp)
  2030fc:	da003d15 	stw	r8,244(sp)
  203100:	0208dac0 	call	208dac <__fpclassifyd>
  203104:	da003d17 	ldw	r8,244(sp)
  203108:	1000f026 	beq	r2,zero,2034cc <___vfprintf_internal_r+0x1b24>
  20310c:	d9002a17 	ldw	r4,168(sp)
  203110:	05bff7c4 	movi	r22,-33
  203114:	00bfffc4 	movi	r2,-1
  203118:	8dac703a 	and	r22,r17,r22
  20311c:	20820026 	beq	r4,r2,203920 <___vfprintf_internal_r+0x1f78>
  203120:	008011c4 	movi	r2,71
  203124:	b081f726 	beq	r22,r2,203904 <___vfprintf_internal_r+0x1f5c>
  203128:	d9003817 	ldw	r4,224(sp)
  20312c:	90c04014 	ori	r3,r18,256
  203130:	d8c02c15 	stw	r3,176(sp)
  203134:	20021516 	blt	r4,zero,20398c <___vfprintf_internal_r+0x1fe4>
  203138:	dcc03817 	ldw	r19,224(sp)
  20313c:	d8002905 	stb	zero,164(sp)
  203140:	00801984 	movi	r2,102
  203144:	8881f926 	beq	r17,r2,20392c <___vfprintf_internal_r+0x1f84>
  203148:	00801184 	movi	r2,70
  20314c:	88821c26 	beq	r17,r2,2039c0 <___vfprintf_internal_r+0x2018>
  203150:	00801144 	movi	r2,69
  203154:	b081ef26 	beq	r22,r2,203914 <___vfprintf_internal_r+0x1f6c>
  203158:	d8c02a17 	ldw	r3,168(sp)
  20315c:	d8802104 	addi	r2,sp,132
  203160:	d8800315 	stw	r2,12(sp)
  203164:	d9403617 	ldw	r5,216(sp)
  203168:	d8802504 	addi	r2,sp,148
  20316c:	d9002d17 	ldw	r4,180(sp)
  203170:	d8800215 	stw	r2,8(sp)
  203174:	d8802604 	addi	r2,sp,152
  203178:	d8c00015 	stw	r3,0(sp)
  20317c:	d8800115 	stw	r2,4(sp)
  203180:	01c00084 	movi	r7,2
  203184:	980d883a 	mov	r6,r19
  203188:	d8c03c15 	stw	r3,240(sp)
  20318c:	da003d15 	stw	r8,244(sp)
  203190:	02040d80 	call	2040d8 <_dtoa_r>
  203194:	1021883a 	mov	r16,r2
  203198:	008019c4 	movi	r2,103
  20319c:	d8c03c17 	ldw	r3,240(sp)
  2031a0:	da003d17 	ldw	r8,244(sp)
  2031a4:	88817126 	beq	r17,r2,20376c <___vfprintf_internal_r+0x1dc4>
  2031a8:	008011c4 	movi	r2,71
  2031ac:	88829126 	beq	r17,r2,203bf4 <___vfprintf_internal_r+0x224c>
  2031b0:	80f9883a 	add	fp,r16,r3
  2031b4:	d9003617 	ldw	r4,216(sp)
  2031b8:	000d883a 	mov	r6,zero
  2031bc:	000f883a 	mov	r7,zero
  2031c0:	980b883a 	mov	r5,r19
  2031c4:	da003d15 	stw	r8,244(sp)
  2031c8:	020cf0c0 	call	20cf0c <__eqdf2>
  2031cc:	da003d17 	ldw	r8,244(sp)
  2031d0:	10018d26 	beq	r2,zero,203808 <___vfprintf_internal_r+0x1e60>
  2031d4:	d8802117 	ldw	r2,132(sp)
  2031d8:	1700062e 	bgeu	r2,fp,2031f4 <___vfprintf_internal_r+0x184c>
  2031dc:	01000c04 	movi	r4,48
  2031e0:	10c00044 	addi	r3,r2,1
  2031e4:	d8c02115 	stw	r3,132(sp)
  2031e8:	11000005 	stb	r4,0(r2)
  2031ec:	d8802117 	ldw	r2,132(sp)
  2031f0:	173ffb36 	bltu	r2,fp,2031e0 <_gp+0xffdf15fc>
  2031f4:	1405c83a 	sub	r2,r2,r16
  2031f8:	d8803315 	stw	r2,204(sp)
  2031fc:	008011c4 	movi	r2,71
  203200:	b0817626 	beq	r22,r2,2037dc <___vfprintf_internal_r+0x1e34>
  203204:	00801944 	movi	r2,101
  203208:	1442800e 	bge	r2,r17,203c0c <___vfprintf_internal_r+0x2264>
  20320c:	d8c02617 	ldw	r3,152(sp)
  203210:	00801984 	movi	r2,102
  203214:	d8c03215 	stw	r3,200(sp)
  203218:	8881fe26 	beq	r17,r2,203a14 <___vfprintf_internal_r+0x206c>
  20321c:	d8c03217 	ldw	r3,200(sp)
  203220:	d9003317 	ldw	r4,204(sp)
  203224:	1901dd16 	blt	r3,r4,20399c <___vfprintf_internal_r+0x1ff4>
  203228:	9480004c 	andi	r18,r18,1
  20322c:	90022b1e 	bne	r18,zero,203adc <___vfprintf_internal_r+0x2134>
  203230:	1805883a 	mov	r2,r3
  203234:	18028316 	blt	r3,zero,203c44 <___vfprintf_internal_r+0x229c>
  203238:	d8c03217 	ldw	r3,200(sp)
  20323c:	044019c4 	movi	r17,103
  203240:	d8c02b15 	stw	r3,172(sp)
  203244:	df002907 	ldb	fp,164(sp)
  203248:	e001531e 	bne	fp,zero,203798 <___vfprintf_internal_r+0x1df0>
  20324c:	df002783 	ldbu	fp,158(sp)
  203250:	d8802915 	stw	r2,164(sp)
  203254:	dc802c17 	ldw	r18,176(sp)
  203258:	d8002a15 	stw	zero,168(sp)
  20325c:	003baf06 	br	20211c <_gp+0xffdf0538>
  203260:	d8c02e17 	ldw	r3,184(sp)
  203264:	d9002e17 	ldw	r4,184(sp)
  203268:	d9402e17 	ldw	r5,184(sp)
  20326c:	18c00017 	ldw	r3,0(r3)
  203270:	21000117 	ldw	r4,4(r4)
  203274:	29400204 	addi	r5,r5,8
  203278:	d8c03615 	stw	r3,216(sp)
  20327c:	d9003815 	stw	r4,224(sp)
  203280:	d9402e15 	stw	r5,184(sp)
  203284:	003b5006 	br	201fc8 <_gp+0xffdf03e4>
  203288:	ac400007 	ldb	r17,0(r21)
  20328c:	003a2806 	br	201b30 <_gp+0xffdeff4c>
  203290:	9080100c 	andi	r2,r18,64
  203294:	1000a826 	beq	r2,zero,203538 <___vfprintf_internal_r+0x1b90>
  203298:	d8c02e17 	ldw	r3,184(sp)
  20329c:	002d883a 	mov	r22,zero
  2032a0:	1cc0000b 	ldhu	r19,0(r3)
  2032a4:	18c00104 	addi	r3,r3,4
  2032a8:	d8c02e15 	stw	r3,184(sp)
  2032ac:	003caf06 	br	20256c <_gp+0xffdf0988>
  2032b0:	d9002e17 	ldw	r4,184(sp)
  2032b4:	d9402a17 	ldw	r5,168(sp)
  2032b8:	002d883a 	mov	r22,zero
  2032bc:	20800104 	addi	r2,r4,4
  2032c0:	24c00017 	ldw	r19,0(r4)
  2032c4:	283ebb0e 	bge	r5,zero,202db4 <_gp+0xffdf11d0>
  2032c8:	003ef106 	br	202e90 <_gp+0xffdf12ac>
  2032cc:	9080040c 	andi	r2,r18,16
  2032d0:	1000921e 	bne	r2,zero,20351c <___vfprintf_internal_r+0x1b74>
  2032d4:	9480100c 	andi	r18,r18,64
  2032d8:	90013926 	beq	r18,zero,2037c0 <___vfprintf_internal_r+0x1e18>
  2032dc:	d9402e17 	ldw	r5,184(sp)
  2032e0:	d8c02f17 	ldw	r3,188(sp)
  2032e4:	28800017 	ldw	r2,0(r5)
  2032e8:	29400104 	addi	r5,r5,4
  2032ec:	d9402e15 	stw	r5,184(sp)
  2032f0:	10c0000d 	sth	r3,0(r2)
  2032f4:	0039e406 	br	201a88 <_gp+0xffdefea4>
  2032f8:	9080100c 	andi	r2,r18,64
  2032fc:	10008026 	beq	r2,zero,203500 <___vfprintf_internal_r+0x1b58>
  203300:	d8802e17 	ldw	r2,184(sp)
  203304:	14c0000f 	ldh	r19,0(r2)
  203308:	10800104 	addi	r2,r2,4
  20330c:	d8802e15 	stw	r2,184(sp)
  203310:	982dd7fa 	srai	r22,r19,31
  203314:	b005883a 	mov	r2,r22
  203318:	003af706 	br	201ef8 <_gp+0xffdf0314>
  20331c:	9080100c 	andi	r2,r18,64
  203320:	d8002785 	stb	zero,158(sp)
  203324:	10008a1e 	bne	r2,zero,203550 <___vfprintf_internal_r+0x1ba8>
  203328:	d9002e17 	ldw	r4,184(sp)
  20332c:	d9402a17 	ldw	r5,168(sp)
  203330:	002d883a 	mov	r22,zero
  203334:	20800104 	addi	r2,r4,4
  203338:	24c00017 	ldw	r19,0(r4)
  20333c:	283e4b0e 	bge	r5,zero,202c6c <_gp+0xffdf1088>
  203340:	9d86b03a 	or	r3,r19,r22
  203344:	d8802e15 	stw	r2,184(sp)
  203348:	183e4c1e 	bne	r3,zero,202c7c <_gp+0xffdf1098>
  20334c:	0039883a 	mov	fp,zero
  203350:	0005883a 	mov	r2,zero
  203354:	003d4006 	br	202858 <_gp+0xffdf0c74>
  203358:	01400874 	movhi	r5,33
  20335c:	29505384 	addi	r5,r5,16718
  203360:	d9402c15 	stw	r5,176(sp)
  203364:	d9402c17 	ldw	r5,176(sp)
  203368:	1c47883a 	add	r3,r3,r17
  20336c:	10800044 	addi	r2,r2,1
  203370:	41400015 	stw	r5,0(r8)
  203374:	44400115 	stw	r17,4(r8)
  203378:	d8c02015 	stw	r3,128(sp)
  20337c:	d8801f15 	stw	r2,124(sp)
  203380:	010001c4 	movi	r4,7
  203384:	20bec816 	blt	r4,r2,202ea8 <_gp+0xffdf12c4>
  203388:	42000204 	addi	r8,r8,8
  20338c:	003ecd06 	br	202ec4 <_gp+0xffdf12e0>
  203390:	d9002a17 	ldw	r4,168(sp)
  203394:	d8002785 	stb	zero,158(sp)
  203398:	203d2d16 	blt	r4,zero,202850 <_gp+0xffdf0c6c>
  20339c:	00bfdfc4 	movi	r2,-129
  2033a0:	90a4703a 	and	r18,r18,r2
  2033a4:	003a6106 	br	201d2c <_gp+0xffdf0148>
  2033a8:	01000874 	movhi	r4,33
  2033ac:	21105384 	addi	r4,r4,16718
  2033b0:	d9002c15 	stw	r4,176(sp)
  2033b4:	003bea06 	br	202360 <_gp+0xffdf077c>
  2033b8:	d9002d17 	ldw	r4,180(sp)
  2033bc:	d9801e04 	addi	r6,sp,120
  2033c0:	b80b883a 	mov	r5,r23
  2033c4:	02091880 	call	209188 <__sprint_r>
  2033c8:	103a7b1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2033cc:	d8c02017 	ldw	r3,128(sp)
  2033d0:	da000404 	addi	r8,sp,16
  2033d4:	003d4106 	br	2028dc <_gp+0xffdf0cf8>
  2033d8:	d8801f17 	ldw	r2,124(sp)
  2033dc:	01400874 	movhi	r5,33
  2033e0:	01000044 	movi	r4,1
  2033e4:	18c00044 	addi	r3,r3,1
  2033e8:	10800044 	addi	r2,r2,1
  2033ec:	29505304 	addi	r5,r5,16716
  2033f0:	41000115 	stw	r4,4(r8)
  2033f4:	41400015 	stw	r5,0(r8)
  2033f8:	d8c02015 	stw	r3,128(sp)
  2033fc:	d8801f15 	stw	r2,124(sp)
  203400:	010001c4 	movi	r4,7
  203404:	20805c16 	blt	r4,r2,203578 <___vfprintf_internal_r+0x1bd0>
  203408:	42000204 	addi	r8,r8,8
  20340c:	8800041e 	bne	r17,zero,203420 <___vfprintf_internal_r+0x1a78>
  203410:	d8803317 	ldw	r2,204(sp)
  203414:	1000021e 	bne	r2,zero,203420 <___vfprintf_internal_r+0x1a78>
  203418:	9080004c 	andi	r2,r18,1
  20341c:	103be726 	beq	r2,zero,2023bc <_gp+0xffdf07d8>
  203420:	d9003717 	ldw	r4,220(sp)
  203424:	d8801f17 	ldw	r2,124(sp)
  203428:	d9403417 	ldw	r5,208(sp)
  20342c:	20c7883a 	add	r3,r4,r3
  203430:	10800044 	addi	r2,r2,1
  203434:	41000115 	stw	r4,4(r8)
  203438:	41400015 	stw	r5,0(r8)
  20343c:	d8c02015 	stw	r3,128(sp)
  203440:	d8801f15 	stw	r2,124(sp)
  203444:	010001c4 	movi	r4,7
  203448:	20812116 	blt	r4,r2,2038d0 <___vfprintf_internal_r+0x1f28>
  20344c:	42000204 	addi	r8,r8,8
  203450:	0463c83a 	sub	r17,zero,r17
  203454:	0440730e 	bge	zero,r17,203624 <___vfprintf_internal_r+0x1c7c>
  203458:	05800404 	movi	r22,16
  20345c:	b440860e 	bge	r22,r17,203678 <___vfprintf_internal_r+0x1cd0>
  203460:	01400874 	movhi	r5,33
  203464:	29505384 	addi	r5,r5,16718
  203468:	d9402c15 	stw	r5,176(sp)
  20346c:	070001c4 	movi	fp,7
  203470:	dcc02d17 	ldw	r19,180(sp)
  203474:	00000306 	br	203484 <___vfprintf_internal_r+0x1adc>
  203478:	42000204 	addi	r8,r8,8
  20347c:	8c7ffc04 	addi	r17,r17,-16
  203480:	b440800e 	bge	r22,r17,203684 <___vfprintf_internal_r+0x1cdc>
  203484:	18c00404 	addi	r3,r3,16
  203488:	10800044 	addi	r2,r2,1
  20348c:	45000015 	stw	r20,0(r8)
  203490:	45800115 	stw	r22,4(r8)
  203494:	d8c02015 	stw	r3,128(sp)
  203498:	d8801f15 	stw	r2,124(sp)
  20349c:	e0bff60e 	bge	fp,r2,203478 <_gp+0xffdf1894>
  2034a0:	d9801e04 	addi	r6,sp,120
  2034a4:	b80b883a 	mov	r5,r23
  2034a8:	9809883a 	mov	r4,r19
  2034ac:	02091880 	call	209188 <__sprint_r>
  2034b0:	103a411e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2034b4:	d8c02017 	ldw	r3,128(sp)
  2034b8:	d8801f17 	ldw	r2,124(sp)
  2034bc:	da000404 	addi	r8,sp,16
  2034c0:	003fee06 	br	20347c <_gp+0xffdf1898>
  2034c4:	00bfffc4 	movi	r2,-1
  2034c8:	003a3f06 	br	201dc8 <_gp+0xffdf01e4>
  2034cc:	008011c4 	movi	r2,71
  2034d0:	1440b816 	blt	r2,r17,2037b4 <___vfprintf_internal_r+0x1e0c>
  2034d4:	04000874 	movhi	r16,33
  2034d8:	84104504 	addi	r16,r16,16660
  2034dc:	00c000c4 	movi	r3,3
  2034e0:	00bfdfc4 	movi	r2,-129
  2034e4:	d8c02915 	stw	r3,164(sp)
  2034e8:	90a4703a 	and	r18,r18,r2
  2034ec:	df002783 	ldbu	fp,158(sp)
  2034f0:	d8c02b15 	stw	r3,172(sp)
  2034f4:	d8002a15 	stw	zero,168(sp)
  2034f8:	d8003215 	stw	zero,200(sp)
  2034fc:	003b0706 	br	20211c <_gp+0xffdf0538>
  203500:	d8c02e17 	ldw	r3,184(sp)
  203504:	1cc00017 	ldw	r19,0(r3)
  203508:	18c00104 	addi	r3,r3,4
  20350c:	d8c02e15 	stw	r3,184(sp)
  203510:	982dd7fa 	srai	r22,r19,31
  203514:	b005883a 	mov	r2,r22
  203518:	003a7706 	br	201ef8 <_gp+0xffdf0314>
  20351c:	d8c02e17 	ldw	r3,184(sp)
  203520:	d9002f17 	ldw	r4,188(sp)
  203524:	18800017 	ldw	r2,0(r3)
  203528:	18c00104 	addi	r3,r3,4
  20352c:	d8c02e15 	stw	r3,184(sp)
  203530:	11000015 	stw	r4,0(r2)
  203534:	00395406 	br	201a88 <_gp+0xffdefea4>
  203538:	d9002e17 	ldw	r4,184(sp)
  20353c:	002d883a 	mov	r22,zero
  203540:	24c00017 	ldw	r19,0(r4)
  203544:	21000104 	addi	r4,r4,4
  203548:	d9002e15 	stw	r4,184(sp)
  20354c:	003c0706 	br	20256c <_gp+0xffdf0988>
  203550:	d9402e17 	ldw	r5,184(sp)
  203554:	d8c02a17 	ldw	r3,168(sp)
  203558:	002d883a 	mov	r22,zero
  20355c:	28800104 	addi	r2,r5,4
  203560:	2cc0000b 	ldhu	r19,0(r5)
  203564:	183dc10e 	bge	r3,zero,202c6c <_gp+0xffdf1088>
  203568:	003f7506 	br	203340 <_gp+0xffdf175c>
  20356c:	04000874 	movhi	r16,33
  203570:	84104304 	addi	r16,r16,16652
  203574:	003aa706 	br	202014 <_gp+0xffdf0430>
  203578:	d9002d17 	ldw	r4,180(sp)
  20357c:	d9801e04 	addi	r6,sp,120
  203580:	b80b883a 	mov	r5,r23
  203584:	02091880 	call	209188 <__sprint_r>
  203588:	103a0b1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  20358c:	dc402617 	ldw	r17,152(sp)
  203590:	d8c02017 	ldw	r3,128(sp)
  203594:	da000404 	addi	r8,sp,16
  203598:	003f9c06 	br	20340c <_gp+0xffdf1828>
  20359c:	ac400043 	ldbu	r17,1(r21)
  2035a0:	84000814 	ori	r16,r16,32
  2035a4:	ad400044 	addi	r21,r21,1
  2035a8:	8c403fcc 	andi	r17,r17,255
  2035ac:	8c40201c 	xori	r17,r17,128
  2035b0:	8c7fe004 	addi	r17,r17,-128
  2035b4:	00395e06 	br	201b30 <_gp+0xffdeff4c>
  2035b8:	d8c02e15 	stw	r3,184(sp)
  2035bc:	0039883a 	mov	fp,zero
  2035c0:	003e3506 	br	202e98 <_gp+0xffdf12b4>
  2035c4:	d9002d17 	ldw	r4,180(sp)
  2035c8:	d9801e04 	addi	r6,sp,120
  2035cc:	b80b883a 	mov	r5,r23
  2035d0:	02091880 	call	209188 <__sprint_r>
  2035d4:	1039f81e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2035d8:	d8c02017 	ldw	r3,128(sp)
  2035dc:	da000404 	addi	r8,sp,16
  2035e0:	003cd006 	br	202924 <_gp+0xffdf0d40>
  2035e4:	8009883a 	mov	r4,r16
  2035e8:	df003d15 	stw	fp,244(sp)
  2035ec:	02019100 	call	201910 <strlen>
  2035f0:	d8802b15 	stw	r2,172(sp)
  2035f4:	da003d17 	ldw	r8,244(sp)
  2035f8:	103c200e 	bge	r2,zero,20267c <_gp+0xffdf0a98>
  2035fc:	0005883a 	mov	r2,zero
  203600:	003c1e06 	br	20267c <_gp+0xffdf0a98>
  203604:	d9002d17 	ldw	r4,180(sp)
  203608:	d9801e04 	addi	r6,sp,120
  20360c:	b80b883a 	mov	r5,r23
  203610:	02091880 	call	209188 <__sprint_r>
  203614:	1039e81e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  203618:	d8c02017 	ldw	r3,128(sp)
  20361c:	d8801f17 	ldw	r2,124(sp)
  203620:	da000404 	addi	r8,sp,16
  203624:	d9403317 	ldw	r5,204(sp)
  203628:	10800044 	addi	r2,r2,1
  20362c:	44000015 	stw	r16,0(r8)
  203630:	28c7883a 	add	r3,r5,r3
  203634:	003b5b06 	br	2023a4 <_gp+0xffdf07c0>
  203638:	01000874 	movhi	r4,33
  20363c:	21105784 	addi	r4,r4,16734
  203640:	d9003515 	stw	r4,212(sp)
  203644:	003af206 	br	202210 <_gp+0xffdf062c>
  203648:	013fffc4 	movi	r4,-1
  20364c:	003a0806 	br	201e70 <_gp+0xffdf028c>
  203650:	0023883a 	mov	r17,zero
  203654:	003d9d06 	br	202ccc <_gp+0xffdf10e8>
  203658:	d9002d17 	ldw	r4,180(sp)
  20365c:	d9801e04 	addi	r6,sp,120
  203660:	b80b883a 	mov	r5,r23
  203664:	02091880 	call	209188 <__sprint_r>
  203668:	1039d31e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  20366c:	d8c02017 	ldw	r3,128(sp)
  203670:	da000404 	addi	r8,sp,16
  203674:	003d9406 	br	202cc8 <_gp+0xffdf10e4>
  203678:	01000874 	movhi	r4,33
  20367c:	21105384 	addi	r4,r4,16718
  203680:	d9002c15 	stw	r4,176(sp)
  203684:	d9002c17 	ldw	r4,176(sp)
  203688:	1c47883a 	add	r3,r3,r17
  20368c:	10800044 	addi	r2,r2,1
  203690:	41000015 	stw	r4,0(r8)
  203694:	44400115 	stw	r17,4(r8)
  203698:	d8c02015 	stw	r3,128(sp)
  20369c:	d8801f15 	stw	r2,124(sp)
  2036a0:	010001c4 	movi	r4,7
  2036a4:	20bfd716 	blt	r4,r2,203604 <_gp+0xffdf1a20>
  2036a8:	42000204 	addi	r8,r8,8
  2036ac:	003fdd06 	br	203624 <_gp+0xffdf1a40>
  2036b0:	d9002d17 	ldw	r4,180(sp)
  2036b4:	d9801e04 	addi	r6,sp,120
  2036b8:	b80b883a 	mov	r5,r23
  2036bc:	02091880 	call	209188 <__sprint_r>
  2036c0:	1039bd1e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2036c4:	d8802617 	ldw	r2,152(sp)
  2036c8:	d8c02017 	ldw	r3,128(sp)
  2036cc:	da000404 	addi	r8,sp,16
  2036d0:	003e1006 	br	202f14 <_gp+0xffdf1330>
  2036d4:	00800044 	movi	r2,1
  2036d8:	10803fcc 	andi	r2,r2,255
  2036dc:	00c00044 	movi	r3,1
  2036e0:	10fa0d26 	beq	r2,r3,201f18 <_gp+0xffdf0334>
  2036e4:	00c00084 	movi	r3,2
  2036e8:	10fbaf26 	beq	r2,r3,2025a8 <_gp+0xffdf09c4>
  2036ec:	003a6d06 	br	2020a4 <_gp+0xffdf04c0>
  2036f0:	01000874 	movhi	r4,33
  2036f4:	21105784 	addi	r4,r4,16734
  2036f8:	d9003515 	stw	r4,212(sp)
  2036fc:	003b5406 	br	202450 <_gp+0xffdf086c>
  203700:	d8802a17 	ldw	r2,168(sp)
  203704:	00c00184 	movi	r3,6
  203708:	1880012e 	bgeu	r3,r2,203710 <___vfprintf_internal_r+0x1d68>
  20370c:	1805883a 	mov	r2,r3
  203710:	d8802b15 	stw	r2,172(sp)
  203714:	1000ef16 	blt	r2,zero,203ad4 <___vfprintf_internal_r+0x212c>
  203718:	04000874 	movhi	r16,33
  20371c:	d8802915 	stw	r2,164(sp)
  203720:	dcc02e15 	stw	r19,184(sp)
  203724:	d8002a15 	stw	zero,168(sp)
  203728:	d8003215 	stw	zero,200(sp)
  20372c:	84105104 	addi	r16,r16,16708
  203730:	0039883a 	mov	fp,zero
  203734:	003a8006 	br	202138 <_gp+0xffdf0554>
  203738:	0021883a 	mov	r16,zero
  20373c:	003e0706 	br	202f5c <_gp+0xffdf1378>
  203740:	d9002d17 	ldw	r4,180(sp)
  203744:	d9801e04 	addi	r6,sp,120
  203748:	b80b883a 	mov	r5,r23
  20374c:	02091880 	call	209188 <__sprint_r>
  203750:	1039991e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  203754:	d8802617 	ldw	r2,152(sp)
  203758:	d9403317 	ldw	r5,204(sp)
  20375c:	d8c02017 	ldw	r3,128(sp)
  203760:	da000404 	addi	r8,sp,16
  203764:	2885c83a 	sub	r2,r5,r2
  203768:	003dfb06 	br	202f58 <_gp+0xffdf1374>
  20376c:	9080004c 	andi	r2,r18,1
  203770:	103e8f1e 	bne	r2,zero,2031b0 <_gp+0xffdf15cc>
  203774:	d8802117 	ldw	r2,132(sp)
  203778:	003e9e06 	br	2031f4 <_gp+0xffdf1610>
  20377c:	1025883a 	mov	r18,r2
  203780:	0039883a 	mov	fp,zero
  203784:	00800084 	movi	r2,2
  203788:	003fd306 	br	2036d8 <_gp+0xffdf1af4>
  20378c:	07000b44 	movi	fp,45
  203790:	df002785 	stb	fp,158(sp)
  203794:	003a1b06 	br	202004 <_gp+0xffdf0420>
  203798:	00c00b44 	movi	r3,45
  20379c:	d8c02785 	stb	r3,158(sp)
  2037a0:	d8802915 	stw	r2,164(sp)
  2037a4:	dc802c17 	ldw	r18,176(sp)
  2037a8:	d8002a15 	stw	zero,168(sp)
  2037ac:	07000b44 	movi	fp,45
  2037b0:	003a5e06 	br	20212c <_gp+0xffdf0548>
  2037b4:	04000874 	movhi	r16,33
  2037b8:	84104604 	addi	r16,r16,16664
  2037bc:	003f4706 	br	2034dc <_gp+0xffdf18f8>
  2037c0:	d9002e17 	ldw	r4,184(sp)
  2037c4:	d9402f17 	ldw	r5,188(sp)
  2037c8:	20800017 	ldw	r2,0(r4)
  2037cc:	21000104 	addi	r4,r4,4
  2037d0:	d9002e15 	stw	r4,184(sp)
  2037d4:	11400015 	stw	r5,0(r2)
  2037d8:	0038ab06 	br	201a88 <_gp+0xffdefea4>
  2037dc:	dd802617 	ldw	r22,152(sp)
  2037e0:	00bfff44 	movi	r2,-3
  2037e4:	b0801c16 	blt	r22,r2,203858 <___vfprintf_internal_r+0x1eb0>
  2037e8:	d9402a17 	ldw	r5,168(sp)
  2037ec:	2d801a16 	blt	r5,r22,203858 <___vfprintf_internal_r+0x1eb0>
  2037f0:	dd803215 	stw	r22,200(sp)
  2037f4:	003e8906 	br	20321c <_gp+0xffdf1638>
  2037f8:	01000874 	movhi	r4,33
  2037fc:	21105384 	addi	r4,r4,16718
  203800:	d9002c15 	stw	r4,176(sp)
  203804:	003c9106 	br	202a4c <_gp+0xffdf0e68>
  203808:	e005883a 	mov	r2,fp
  20380c:	003e7906 	br	2031f4 <_gp+0xffdf1610>
  203810:	d9002a17 	ldw	r4,168(sp)
  203814:	df002783 	ldbu	fp,158(sp)
  203818:	dcc02e15 	stw	r19,184(sp)
  20381c:	d9002915 	stw	r4,164(sp)
  203820:	d9002b15 	stw	r4,172(sp)
  203824:	d8002a15 	stw	zero,168(sp)
  203828:	d8003215 	stw	zero,200(sp)
  20382c:	003a3b06 	br	20211c <_gp+0xffdf0538>
  203830:	9080004c 	andi	r2,r18,1
  203834:	0039883a 	mov	fp,zero
  203838:	10000426 	beq	r2,zero,20384c <___vfprintf_internal_r+0x1ea4>
  20383c:	00800c04 	movi	r2,48
  203840:	dc001dc4 	addi	r16,sp,119
  203844:	d8801dc5 	stb	r2,119(sp)
  203848:	003b6406 	br	2025dc <_gp+0xffdf09f8>
  20384c:	d8002b15 	stw	zero,172(sp)
  203850:	dc001e04 	addi	r16,sp,120
  203854:	003a2b06 	br	202104 <_gp+0xffdf0520>
  203858:	8c7fff84 	addi	r17,r17,-2
  20385c:	b5bfffc4 	addi	r22,r22,-1
  203860:	dd802615 	stw	r22,152(sp)
  203864:	dc4022c5 	stb	r17,139(sp)
  203868:	b000bf16 	blt	r22,zero,203b68 <___vfprintf_internal_r+0x21c0>
  20386c:	00800ac4 	movi	r2,43
  203870:	d8802305 	stb	r2,140(sp)
  203874:	00800244 	movi	r2,9
  203878:	15807016 	blt	r2,r22,203a3c <___vfprintf_internal_r+0x2094>
  20387c:	00800c04 	movi	r2,48
  203880:	b5800c04 	addi	r22,r22,48
  203884:	d8802345 	stb	r2,141(sp)
  203888:	dd802385 	stb	r22,142(sp)
  20388c:	d88023c4 	addi	r2,sp,143
  203890:	df0022c4 	addi	fp,sp,139
  203894:	d8c03317 	ldw	r3,204(sp)
  203898:	1739c83a 	sub	fp,r2,fp
  20389c:	d9003317 	ldw	r4,204(sp)
  2038a0:	e0c7883a 	add	r3,fp,r3
  2038a4:	df003a15 	stw	fp,232(sp)
  2038a8:	d8c02b15 	stw	r3,172(sp)
  2038ac:	00800044 	movi	r2,1
  2038b0:	1100b30e 	bge	r2,r4,203b80 <___vfprintf_internal_r+0x21d8>
  2038b4:	d8c02b17 	ldw	r3,172(sp)
  2038b8:	18c00044 	addi	r3,r3,1
  2038bc:	d8c02b15 	stw	r3,172(sp)
  2038c0:	1805883a 	mov	r2,r3
  2038c4:	1800ac16 	blt	r3,zero,203b78 <___vfprintf_internal_r+0x21d0>
  2038c8:	d8003215 	stw	zero,200(sp)
  2038cc:	003e5d06 	br	203244 <_gp+0xffdf1660>
  2038d0:	d9002d17 	ldw	r4,180(sp)
  2038d4:	d9801e04 	addi	r6,sp,120
  2038d8:	b80b883a 	mov	r5,r23
  2038dc:	02091880 	call	209188 <__sprint_r>
  2038e0:	1039351e 	bne	r2,zero,201db8 <_gp+0xffdf01d4>
  2038e4:	dc402617 	ldw	r17,152(sp)
  2038e8:	d8c02017 	ldw	r3,128(sp)
  2038ec:	d8801f17 	ldw	r2,124(sp)
  2038f0:	da000404 	addi	r8,sp,16
  2038f4:	003ed606 	br	203450 <_gp+0xffdf186c>
  2038f8:	182b883a 	mov	r21,r3
  2038fc:	d8002a15 	stw	zero,168(sp)
  203900:	00388c06 	br	201b34 <_gp+0xffdeff50>
  203904:	d8802a17 	ldw	r2,168(sp)
  203908:	103e071e 	bne	r2,zero,203128 <_gp+0xffdf1544>
  20390c:	dc002a15 	stw	r16,168(sp)
  203910:	003e0506 	br	203128 <_gp+0xffdf1544>
  203914:	d9002a17 	ldw	r4,168(sp)
  203918:	20c00044 	addi	r3,r4,1
  20391c:	003e0f06 	br	20315c <_gp+0xffdf1578>
  203920:	01400184 	movi	r5,6
  203924:	d9402a15 	stw	r5,168(sp)
  203928:	003dff06 	br	203128 <_gp+0xffdf1544>
  20392c:	d8802104 	addi	r2,sp,132
  203930:	d8800315 	stw	r2,12(sp)
  203934:	d8802504 	addi	r2,sp,148
  203938:	d8800215 	stw	r2,8(sp)
  20393c:	d8802604 	addi	r2,sp,152
  203940:	d8800115 	stw	r2,4(sp)
  203944:	d8802a17 	ldw	r2,168(sp)
  203948:	d9403617 	ldw	r5,216(sp)
  20394c:	d9002d17 	ldw	r4,180(sp)
  203950:	d8800015 	stw	r2,0(sp)
  203954:	01c000c4 	movi	r7,3
  203958:	980d883a 	mov	r6,r19
  20395c:	da003d15 	stw	r8,244(sp)
  203960:	02040d80 	call	2040d8 <_dtoa_r>
  203964:	d8c02a17 	ldw	r3,168(sp)
  203968:	da003d17 	ldw	r8,244(sp)
  20396c:	1021883a 	mov	r16,r2
  203970:	10f9883a 	add	fp,r2,r3
  203974:	81000007 	ldb	r4,0(r16)
  203978:	00800c04 	movi	r2,48
  20397c:	20805e26 	beq	r4,r2,203af8 <___vfprintf_internal_r+0x2150>
  203980:	d8c02617 	ldw	r3,152(sp)
  203984:	e0f9883a 	add	fp,fp,r3
  203988:	003e0a06 	br	2031b4 <_gp+0xffdf15d0>
  20398c:	00c00b44 	movi	r3,45
  203990:	24e0003c 	xorhi	r19,r4,32768
  203994:	d8c02905 	stb	r3,164(sp)
  203998:	003de906 	br	203140 <_gp+0xffdf155c>
  20399c:	d8c03217 	ldw	r3,200(sp)
  2039a0:	00c07a0e 	bge	zero,r3,203b8c <___vfprintf_internal_r+0x21e4>
  2039a4:	00800044 	movi	r2,1
  2039a8:	d9003317 	ldw	r4,204(sp)
  2039ac:	1105883a 	add	r2,r2,r4
  2039b0:	d8802b15 	stw	r2,172(sp)
  2039b4:	10004e16 	blt	r2,zero,203af0 <___vfprintf_internal_r+0x2148>
  2039b8:	044019c4 	movi	r17,103
  2039bc:	003e2106 	br	203244 <_gp+0xffdf1660>
  2039c0:	d9002a17 	ldw	r4,168(sp)
  2039c4:	d8802104 	addi	r2,sp,132
  2039c8:	d8800315 	stw	r2,12(sp)
  2039cc:	d9000015 	stw	r4,0(sp)
  2039d0:	d8802504 	addi	r2,sp,148
  2039d4:	d9403617 	ldw	r5,216(sp)
  2039d8:	d9002d17 	ldw	r4,180(sp)
  2039dc:	d8800215 	stw	r2,8(sp)
  2039e0:	d8802604 	addi	r2,sp,152
  2039e4:	d8800115 	stw	r2,4(sp)
  2039e8:	01c000c4 	movi	r7,3
  2039ec:	980d883a 	mov	r6,r19
  2039f0:	da003d15 	stw	r8,244(sp)
  2039f4:	02040d80 	call	2040d8 <_dtoa_r>
  2039f8:	d8c02a17 	ldw	r3,168(sp)
  2039fc:	da003d17 	ldw	r8,244(sp)
  203a00:	1021883a 	mov	r16,r2
  203a04:	00801184 	movi	r2,70
  203a08:	80f9883a 	add	fp,r16,r3
  203a0c:	88bfd926 	beq	r17,r2,203974 <_gp+0xffdf1d90>
  203a10:	003de806 	br	2031b4 <_gp+0xffdf15d0>
  203a14:	d9002a17 	ldw	r4,168(sp)
  203a18:	00c04d0e 	bge	zero,r3,203b50 <___vfprintf_internal_r+0x21a8>
  203a1c:	2000441e 	bne	r4,zero,203b30 <___vfprintf_internal_r+0x2188>
  203a20:	9480004c 	andi	r18,r18,1
  203a24:	9000421e 	bne	r18,zero,203b30 <___vfprintf_internal_r+0x2188>
  203a28:	1805883a 	mov	r2,r3
  203a2c:	18006f16 	blt	r3,zero,203bec <___vfprintf_internal_r+0x2244>
  203a30:	d8c03217 	ldw	r3,200(sp)
  203a34:	d8c02b15 	stw	r3,172(sp)
  203a38:	003e0206 	br	203244 <_gp+0xffdf1660>
  203a3c:	df0022c4 	addi	fp,sp,139
  203a40:	dc002a15 	stw	r16,168(sp)
  203a44:	4027883a 	mov	r19,r8
  203a48:	e021883a 	mov	r16,fp
  203a4c:	b009883a 	mov	r4,r22
  203a50:	01400284 	movi	r5,10
  203a54:	0200ae40 	call	200ae4 <__modsi3>
  203a58:	10800c04 	addi	r2,r2,48
  203a5c:	843fffc4 	addi	r16,r16,-1
  203a60:	b009883a 	mov	r4,r22
  203a64:	01400284 	movi	r5,10
  203a68:	80800005 	stb	r2,0(r16)
  203a6c:	0200a600 	call	200a60 <__divsi3>
  203a70:	102d883a 	mov	r22,r2
  203a74:	00800244 	movi	r2,9
  203a78:	15bff416 	blt	r2,r22,203a4c <_gp+0xffdf1e68>
  203a7c:	9811883a 	mov	r8,r19
  203a80:	b0800c04 	addi	r2,r22,48
  203a84:	8027883a 	mov	r19,r16
  203a88:	997fffc4 	addi	r5,r19,-1
  203a8c:	98bfffc5 	stb	r2,-1(r19)
  203a90:	dc002a17 	ldw	r16,168(sp)
  203a94:	2f006d2e 	bgeu	r5,fp,203c4c <___vfprintf_internal_r+0x22a4>
  203a98:	d9c02384 	addi	r7,sp,142
  203a9c:	3ccfc83a 	sub	r7,r7,r19
  203aa0:	d9002344 	addi	r4,sp,141
  203aa4:	e1cf883a 	add	r7,fp,r7
  203aa8:	00000106 	br	203ab0 <___vfprintf_internal_r+0x2108>
  203aac:	28800003 	ldbu	r2,0(r5)
  203ab0:	20800005 	stb	r2,0(r4)
  203ab4:	21000044 	addi	r4,r4,1
  203ab8:	29400044 	addi	r5,r5,1
  203abc:	393ffb1e 	bne	r7,r4,203aac <_gp+0xffdf1ec8>
  203ac0:	d8802304 	addi	r2,sp,140
  203ac4:	14c5c83a 	sub	r2,r2,r19
  203ac8:	d8c02344 	addi	r3,sp,141
  203acc:	1885883a 	add	r2,r3,r2
  203ad0:	003f7006 	br	203894 <_gp+0xffdf1cb0>
  203ad4:	0005883a 	mov	r2,zero
  203ad8:	003f0f06 	br	203718 <_gp+0xffdf1b34>
  203adc:	d8c03217 	ldw	r3,200(sp)
  203ae0:	18c00044 	addi	r3,r3,1
  203ae4:	d8c02b15 	stw	r3,172(sp)
  203ae8:	1805883a 	mov	r2,r3
  203aec:	183fb20e 	bge	r3,zero,2039b8 <_gp+0xffdf1dd4>
  203af0:	0005883a 	mov	r2,zero
  203af4:	003fb006 	br	2039b8 <_gp+0xffdf1dd4>
  203af8:	d9003617 	ldw	r4,216(sp)
  203afc:	000d883a 	mov	r6,zero
  203b00:	000f883a 	mov	r7,zero
  203b04:	980b883a 	mov	r5,r19
  203b08:	d8c03c15 	stw	r3,240(sp)
  203b0c:	da003d15 	stw	r8,244(sp)
  203b10:	020cf0c0 	call	20cf0c <__eqdf2>
  203b14:	d8c03c17 	ldw	r3,240(sp)
  203b18:	da003d17 	ldw	r8,244(sp)
  203b1c:	103f9826 	beq	r2,zero,203980 <_gp+0xffdf1d9c>
  203b20:	00800044 	movi	r2,1
  203b24:	10c7c83a 	sub	r3,r2,r3
  203b28:	d8c02615 	stw	r3,152(sp)
  203b2c:	003f9506 	br	203984 <_gp+0xffdf1da0>
  203b30:	d9002a17 	ldw	r4,168(sp)
  203b34:	d8c03217 	ldw	r3,200(sp)
  203b38:	20800044 	addi	r2,r4,1
  203b3c:	1885883a 	add	r2,r3,r2
  203b40:	d8802b15 	stw	r2,172(sp)
  203b44:	103dbf0e 	bge	r2,zero,203244 <_gp+0xffdf1660>
  203b48:	0005883a 	mov	r2,zero
  203b4c:	003dbd06 	br	203244 <_gp+0xffdf1660>
  203b50:	2000201e 	bne	r4,zero,203bd4 <___vfprintf_internal_r+0x222c>
  203b54:	9480004c 	andi	r18,r18,1
  203b58:	90001e1e 	bne	r18,zero,203bd4 <___vfprintf_internal_r+0x222c>
  203b5c:	00800044 	movi	r2,1
  203b60:	d8802b15 	stw	r2,172(sp)
  203b64:	003db706 	br	203244 <_gp+0xffdf1660>
  203b68:	00800b44 	movi	r2,45
  203b6c:	05adc83a 	sub	r22,zero,r22
  203b70:	d8802305 	stb	r2,140(sp)
  203b74:	003f3f06 	br	203874 <_gp+0xffdf1c90>
  203b78:	0005883a 	mov	r2,zero
  203b7c:	003f5206 	br	2038c8 <_gp+0xffdf1ce4>
  203b80:	90a4703a 	and	r18,r18,r2
  203b84:	903f4e26 	beq	r18,zero,2038c0 <_gp+0xffdf1cdc>
  203b88:	003f4a06 	br	2038b4 <_gp+0xffdf1cd0>
  203b8c:	00800084 	movi	r2,2
  203b90:	10c5c83a 	sub	r2,r2,r3
  203b94:	003f8406 	br	2039a8 <_gp+0xffdf1dc4>
  203b98:	d9402e17 	ldw	r5,184(sp)
  203b9c:	d9002e17 	ldw	r4,184(sp)
  203ba0:	ac400043 	ldbu	r17,1(r21)
  203ba4:	29400017 	ldw	r5,0(r5)
  203ba8:	20800104 	addi	r2,r4,4
  203bac:	d8802e15 	stw	r2,184(sp)
  203bb0:	d9402a15 	stw	r5,168(sp)
  203bb4:	182b883a 	mov	r21,r3
  203bb8:	283e7b0e 	bge	r5,zero,2035a8 <_gp+0xffdf19c4>
  203bbc:	8c403fcc 	andi	r17,r17,255
  203bc0:	017fffc4 	movi	r5,-1
  203bc4:	8c40201c 	xori	r17,r17,128
  203bc8:	d9402a15 	stw	r5,168(sp)
  203bcc:	8c7fe004 	addi	r17,r17,-128
  203bd0:	0037d706 	br	201b30 <_gp+0xffdeff4c>
  203bd4:	d8c02a17 	ldw	r3,168(sp)
  203bd8:	18c00084 	addi	r3,r3,2
  203bdc:	d8c02b15 	stw	r3,172(sp)
  203be0:	1805883a 	mov	r2,r3
  203be4:	183d970e 	bge	r3,zero,203244 <_gp+0xffdf1660>
  203be8:	003fd706 	br	203b48 <_gp+0xffdf1f64>
  203bec:	0005883a 	mov	r2,zero
  203bf0:	003f8f06 	br	203a30 <_gp+0xffdf1e4c>
  203bf4:	9080004c 	andi	r2,r18,1
  203bf8:	103f821e 	bne	r2,zero,203a04 <_gp+0xffdf1e20>
  203bfc:	d8802117 	ldw	r2,132(sp)
  203c00:	1405c83a 	sub	r2,r2,r16
  203c04:	d8803315 	stw	r2,204(sp)
  203c08:	b47ef426 	beq	r22,r17,2037dc <_gp+0xffdf1bf8>
  203c0c:	dd802617 	ldw	r22,152(sp)
  203c10:	003f1206 	br	20385c <_gp+0xffdf1c78>
  203c14:	d8c02b03 	ldbu	r3,172(sp)
  203c18:	d8c02785 	stb	r3,158(sp)
  203c1c:	0038df06 	br	201f9c <_gp+0xffdf03b8>
  203c20:	d8c02b03 	ldbu	r3,172(sp)
  203c24:	d8c02785 	stb	r3,158(sp)
  203c28:	0038aa06 	br	201ed4 <_gp+0xffdf02f0>
  203c2c:	d8c02b03 	ldbu	r3,172(sp)
  203c30:	d8c02785 	stb	r3,158(sp)
  203c34:	003a4306 	br	202544 <_gp+0xffdf0960>
  203c38:	d8c02b03 	ldbu	r3,172(sp)
  203c3c:	d8c02785 	stb	r3,158(sp)
  203c40:	003af506 	br	202818 <_gp+0xffdf0c34>
  203c44:	0005883a 	mov	r2,zero
  203c48:	003d7b06 	br	203238 <_gp+0xffdf1654>
  203c4c:	d8802344 	addi	r2,sp,141
  203c50:	003f1006 	br	203894 <_gp+0xffdf1cb0>
  203c54:	d8c02b03 	ldbu	r3,172(sp)
  203c58:	d8c02785 	stb	r3,158(sp)
  203c5c:	0038fd06 	br	202054 <_gp+0xffdf0470>
  203c60:	d8c02b03 	ldbu	r3,172(sp)
  203c64:	d8c02785 	stb	r3,158(sp)
  203c68:	003a9706 	br	2026c8 <_gp+0xffdf0ae4>
  203c6c:	d8c02b03 	ldbu	r3,172(sp)
  203c70:	d8c02785 	stb	r3,158(sp)
  203c74:	003a1806 	br	2024d8 <_gp+0xffdf08f4>
  203c78:	d8c02b03 	ldbu	r3,172(sp)
  203c7c:	d8c02785 	stb	r3,158(sp)
  203c80:	003abe06 	br	20277c <_gp+0xffdf0b98>

00203c84 <__vfprintf_internal>:
  203c84:	00801074 	movhi	r2,65
  203c88:	10a6fa04 	addi	r2,r2,-25624
  203c8c:	300f883a 	mov	r7,r6
  203c90:	280d883a 	mov	r6,r5
  203c94:	200b883a 	mov	r5,r4
  203c98:	11000017 	ldw	r4,0(r2)
  203c9c:	02019a81 	jmpi	2019a8 <___vfprintf_internal_r>

00203ca0 <__sbprintf>:
  203ca0:	2880030b 	ldhu	r2,12(r5)
  203ca4:	2ac01917 	ldw	r11,100(r5)
  203ca8:	2a80038b 	ldhu	r10,14(r5)
  203cac:	2a400717 	ldw	r9,28(r5)
  203cb0:	2a000917 	ldw	r8,36(r5)
  203cb4:	defee204 	addi	sp,sp,-1144
  203cb8:	00c10004 	movi	r3,1024
  203cbc:	dc011a15 	stw	r16,1128(sp)
  203cc0:	10bfff4c 	andi	r2,r2,65533
  203cc4:	2821883a 	mov	r16,r5
  203cc8:	d8cb883a 	add	r5,sp,r3
  203ccc:	dc811c15 	stw	r18,1136(sp)
  203cd0:	dc411b15 	stw	r17,1132(sp)
  203cd4:	dfc11d15 	stw	ra,1140(sp)
  203cd8:	2025883a 	mov	r18,r4
  203cdc:	d881030d 	sth	r2,1036(sp)
  203ce0:	dac11915 	stw	r11,1124(sp)
  203ce4:	da81038d 	sth	r10,1038(sp)
  203ce8:	da410715 	stw	r9,1052(sp)
  203cec:	da010915 	stw	r8,1060(sp)
  203cf0:	dec10015 	stw	sp,1024(sp)
  203cf4:	dec10415 	stw	sp,1040(sp)
  203cf8:	d8c10215 	stw	r3,1032(sp)
  203cfc:	d8c10515 	stw	r3,1044(sp)
  203d00:	d8010615 	stw	zero,1048(sp)
  203d04:	02019a80 	call	2019a8 <___vfprintf_internal_r>
  203d08:	1023883a 	mov	r17,r2
  203d0c:	10000416 	blt	r2,zero,203d20 <__sbprintf+0x80>
  203d10:	d9410004 	addi	r5,sp,1024
  203d14:	9009883a 	mov	r4,r18
  203d18:	020597c0 	call	20597c <_fflush_r>
  203d1c:	10000d1e 	bne	r2,zero,203d54 <__sbprintf+0xb4>
  203d20:	d881030b 	ldhu	r2,1036(sp)
  203d24:	1080100c 	andi	r2,r2,64
  203d28:	10000326 	beq	r2,zero,203d38 <__sbprintf+0x98>
  203d2c:	8080030b 	ldhu	r2,12(r16)
  203d30:	10801014 	ori	r2,r2,64
  203d34:	8080030d 	sth	r2,12(r16)
  203d38:	8805883a 	mov	r2,r17
  203d3c:	dfc11d17 	ldw	ra,1140(sp)
  203d40:	dc811c17 	ldw	r18,1136(sp)
  203d44:	dc411b17 	ldw	r17,1132(sp)
  203d48:	dc011a17 	ldw	r16,1128(sp)
  203d4c:	dec11e04 	addi	sp,sp,1144
  203d50:	f800283a 	ret
  203d54:	047fffc4 	movi	r17,-1
  203d58:	003ff106 	br	203d20 <_gp+0xffdf213c>

00203d5c <__swsetup_r>:
  203d5c:	00801074 	movhi	r2,65
  203d60:	defffd04 	addi	sp,sp,-12
  203d64:	10a6fa04 	addi	r2,r2,-25624
  203d68:	dc400115 	stw	r17,4(sp)
  203d6c:	2023883a 	mov	r17,r4
  203d70:	11000017 	ldw	r4,0(r2)
  203d74:	dc000015 	stw	r16,0(sp)
  203d78:	dfc00215 	stw	ra,8(sp)
  203d7c:	2821883a 	mov	r16,r5
  203d80:	20000226 	beq	r4,zero,203d8c <__swsetup_r+0x30>
  203d84:	20800e17 	ldw	r2,56(r4)
  203d88:	10003126 	beq	r2,zero,203e50 <__swsetup_r+0xf4>
  203d8c:	8080030b 	ldhu	r2,12(r16)
  203d90:	10c0020c 	andi	r3,r2,8
  203d94:	1009883a 	mov	r4,r2
  203d98:	18000f26 	beq	r3,zero,203dd8 <__swsetup_r+0x7c>
  203d9c:	80c00417 	ldw	r3,16(r16)
  203da0:	18001526 	beq	r3,zero,203df8 <__swsetup_r+0x9c>
  203da4:	1100004c 	andi	r4,r2,1
  203da8:	20001c1e 	bne	r4,zero,203e1c <__swsetup_r+0xc0>
  203dac:	1080008c 	andi	r2,r2,2
  203db0:	1000291e 	bne	r2,zero,203e58 <__swsetup_r+0xfc>
  203db4:	80800517 	ldw	r2,20(r16)
  203db8:	80800215 	stw	r2,8(r16)
  203dbc:	18001c26 	beq	r3,zero,203e30 <__swsetup_r+0xd4>
  203dc0:	0005883a 	mov	r2,zero
  203dc4:	dfc00217 	ldw	ra,8(sp)
  203dc8:	dc400117 	ldw	r17,4(sp)
  203dcc:	dc000017 	ldw	r16,0(sp)
  203dd0:	dec00304 	addi	sp,sp,12
  203dd4:	f800283a 	ret
  203dd8:	2080040c 	andi	r2,r4,16
  203ddc:	10002e26 	beq	r2,zero,203e98 <__swsetup_r+0x13c>
  203de0:	2080010c 	andi	r2,r4,4
  203de4:	10001e1e 	bne	r2,zero,203e60 <__swsetup_r+0x104>
  203de8:	80c00417 	ldw	r3,16(r16)
  203dec:	20800214 	ori	r2,r4,8
  203df0:	8080030d 	sth	r2,12(r16)
  203df4:	183feb1e 	bne	r3,zero,203da4 <_gp+0xffdf21c0>
  203df8:	1100a00c 	andi	r4,r2,640
  203dfc:	01408004 	movi	r5,512
  203e00:	217fe826 	beq	r4,r5,203da4 <_gp+0xffdf21c0>
  203e04:	800b883a 	mov	r5,r16
  203e08:	8809883a 	mov	r4,r17
  203e0c:	02069180 	call	206918 <__smakebuf_r>
  203e10:	8080030b 	ldhu	r2,12(r16)
  203e14:	80c00417 	ldw	r3,16(r16)
  203e18:	003fe206 	br	203da4 <_gp+0xffdf21c0>
  203e1c:	80800517 	ldw	r2,20(r16)
  203e20:	80000215 	stw	zero,8(r16)
  203e24:	0085c83a 	sub	r2,zero,r2
  203e28:	80800615 	stw	r2,24(r16)
  203e2c:	183fe41e 	bne	r3,zero,203dc0 <_gp+0xffdf21dc>
  203e30:	80c0030b 	ldhu	r3,12(r16)
  203e34:	0005883a 	mov	r2,zero
  203e38:	1900200c 	andi	r4,r3,128
  203e3c:	203fe126 	beq	r4,zero,203dc4 <_gp+0xffdf21e0>
  203e40:	18c01014 	ori	r3,r3,64
  203e44:	80c0030d 	sth	r3,12(r16)
  203e48:	00bfffc4 	movi	r2,-1
  203e4c:	003fdd06 	br	203dc4 <_gp+0xffdf21e0>
  203e50:	0205d680 	call	205d68 <__sinit>
  203e54:	003fcd06 	br	203d8c <_gp+0xffdf21a8>
  203e58:	0005883a 	mov	r2,zero
  203e5c:	003fd606 	br	203db8 <_gp+0xffdf21d4>
  203e60:	81400c17 	ldw	r5,48(r16)
  203e64:	28000626 	beq	r5,zero,203e80 <__swsetup_r+0x124>
  203e68:	80801004 	addi	r2,r16,64
  203e6c:	28800326 	beq	r5,r2,203e7c <__swsetup_r+0x120>
  203e70:	8809883a 	mov	r4,r17
  203e74:	0205edc0 	call	205edc <_free_r>
  203e78:	8100030b 	ldhu	r4,12(r16)
  203e7c:	80000c15 	stw	zero,48(r16)
  203e80:	80c00417 	ldw	r3,16(r16)
  203e84:	00bff6c4 	movi	r2,-37
  203e88:	1108703a 	and	r4,r2,r4
  203e8c:	80000115 	stw	zero,4(r16)
  203e90:	80c00015 	stw	r3,0(r16)
  203e94:	003fd506 	br	203dec <_gp+0xffdf2208>
  203e98:	00800244 	movi	r2,9
  203e9c:	88800015 	stw	r2,0(r17)
  203ea0:	20801014 	ori	r2,r4,64
  203ea4:	8080030d 	sth	r2,12(r16)
  203ea8:	00bfffc4 	movi	r2,-1
  203eac:	003fc506 	br	203dc4 <_gp+0xffdf21e0>

00203eb0 <quorem>:
  203eb0:	defff204 	addi	sp,sp,-56
  203eb4:	ddc00b15 	stw	r23,44(sp)
  203eb8:	20800417 	ldw	r2,16(r4)
  203ebc:	2dc00417 	ldw	r23,16(r5)
  203ec0:	dfc00d15 	stw	ra,52(sp)
  203ec4:	df000c15 	stw	fp,48(sp)
  203ec8:	dd800a15 	stw	r22,40(sp)
  203ecc:	dd400915 	stw	r21,36(sp)
  203ed0:	dd000815 	stw	r20,32(sp)
  203ed4:	dcc00715 	stw	r19,28(sp)
  203ed8:	dc800615 	stw	r18,24(sp)
  203edc:	dc400515 	stw	r17,20(sp)
  203ee0:	dc000415 	stw	r16,16(sp)
  203ee4:	15c07a16 	blt	r2,r23,2040d0 <quorem+0x220>
  203ee8:	bdffffc4 	addi	r23,r23,-1
  203eec:	bde9883a 	add	r20,r23,r23
  203ef0:	28c00504 	addi	r3,r5,20
  203ef4:	a529883a 	add	r20,r20,r20
  203ef8:	1d39883a 	add	fp,r3,r20
  203efc:	24c00504 	addi	r19,r4,20
  203f00:	d9400215 	stw	r5,8(sp)
  203f04:	9d29883a 	add	r20,r19,r20
  203f08:	e1400017 	ldw	r5,0(fp)
  203f0c:	d9000015 	stw	r4,0(sp)
  203f10:	a1000017 	ldw	r4,0(r20)
  203f14:	29400044 	addi	r5,r5,1
  203f18:	d8c00115 	stw	r3,4(sp)
  203f1c:	dd000315 	stw	r20,12(sp)
  203f20:	0200b580 	call	200b58 <__udivsi3>
  203f24:	1025883a 	mov	r18,r2
  203f28:	10003026 	beq	r2,zero,203fec <quorem+0x13c>
  203f2c:	dc400117 	ldw	r17,4(sp)
  203f30:	9829883a 	mov	r20,r19
  203f34:	002d883a 	mov	r22,zero
  203f38:	0021883a 	mov	r16,zero
  203f3c:	8d400017 	ldw	r21,0(r17)
  203f40:	900b883a 	mov	r5,r18
  203f44:	8c400104 	addi	r17,r17,4
  203f48:	a93fffcc 	andi	r4,r21,65535
  203f4c:	02017a80 	call	2017a8 <__mulsi3>
  203f50:	a808d43a 	srli	r4,r21,16
  203f54:	900b883a 	mov	r5,r18
  203f58:	15ad883a 	add	r22,r2,r22
  203f5c:	02017a80 	call	2017a8 <__mulsi3>
  203f60:	a1000017 	ldw	r4,0(r20)
  203f64:	b00cd43a 	srli	r6,r22,16
  203f68:	b0ffffcc 	andi	r3,r22,65535
  203f6c:	217fffcc 	andi	r5,r4,65535
  203f70:	2c21883a 	add	r16,r5,r16
  203f74:	80c7c83a 	sub	r3,r16,r3
  203f78:	2008d43a 	srli	r4,r4,16
  203f7c:	1185883a 	add	r2,r2,r6
  203f80:	1821d43a 	srai	r16,r3,16
  203f84:	117fffcc 	andi	r5,r2,65535
  203f88:	2149c83a 	sub	r4,r4,r5
  203f8c:	2421883a 	add	r16,r4,r16
  203f90:	8008943a 	slli	r4,r16,16
  203f94:	18ffffcc 	andi	r3,r3,65535
  203f98:	102cd43a 	srli	r22,r2,16
  203f9c:	20c8b03a 	or	r4,r4,r3
  203fa0:	a1000015 	stw	r4,0(r20)
  203fa4:	8021d43a 	srai	r16,r16,16
  203fa8:	a5000104 	addi	r20,r20,4
  203fac:	e47fe32e 	bgeu	fp,r17,203f3c <_gp+0xffdf2358>
  203fb0:	d8c00317 	ldw	r3,12(sp)
  203fb4:	18800017 	ldw	r2,0(r3)
  203fb8:	10000c1e 	bne	r2,zero,203fec <quorem+0x13c>
  203fbc:	18bfff04 	addi	r2,r3,-4
  203fc0:	9880082e 	bgeu	r19,r2,203fe4 <quorem+0x134>
  203fc4:	18ffff17 	ldw	r3,-4(r3)
  203fc8:	18000326 	beq	r3,zero,203fd8 <quorem+0x128>
  203fcc:	00000506 	br	203fe4 <quorem+0x134>
  203fd0:	10c00017 	ldw	r3,0(r2)
  203fd4:	1800031e 	bne	r3,zero,203fe4 <quorem+0x134>
  203fd8:	10bfff04 	addi	r2,r2,-4
  203fdc:	bdffffc4 	addi	r23,r23,-1
  203fe0:	98bffb36 	bltu	r19,r2,203fd0 <_gp+0xffdf23ec>
  203fe4:	d8c00017 	ldw	r3,0(sp)
  203fe8:	1dc00415 	stw	r23,16(r3)
  203fec:	d9400217 	ldw	r5,8(sp)
  203ff0:	d9000017 	ldw	r4,0(sp)
  203ff4:	02081140 	call	208114 <__mcmp>
  203ff8:	10002816 	blt	r2,zero,20409c <quorem+0x1ec>
  203ffc:	dc400117 	ldw	r17,4(sp)
  204000:	94800044 	addi	r18,r18,1
  204004:	980d883a 	mov	r6,r19
  204008:	0007883a 	mov	r3,zero
  20400c:	31000017 	ldw	r4,0(r6)
  204010:	89400017 	ldw	r5,0(r17)
  204014:	31800104 	addi	r6,r6,4
  204018:	20bfffcc 	andi	r2,r4,65535
  20401c:	10c7883a 	add	r3,r2,r3
  204020:	28bfffcc 	andi	r2,r5,65535
  204024:	1885c83a 	sub	r2,r3,r2
  204028:	280ad43a 	srli	r5,r5,16
  20402c:	2008d43a 	srli	r4,r4,16
  204030:	1007d43a 	srai	r3,r2,16
  204034:	10bfffcc 	andi	r2,r2,65535
  204038:	2149c83a 	sub	r4,r4,r5
  20403c:	20c9883a 	add	r4,r4,r3
  204040:	200a943a 	slli	r5,r4,16
  204044:	8c400104 	addi	r17,r17,4
  204048:	2007d43a 	srai	r3,r4,16
  20404c:	2884b03a 	or	r2,r5,r2
  204050:	30bfff15 	stw	r2,-4(r6)
  204054:	e47fed2e 	bgeu	fp,r17,20400c <_gp+0xffdf2428>
  204058:	bdc5883a 	add	r2,r23,r23
  20405c:	1085883a 	add	r2,r2,r2
  204060:	9887883a 	add	r3,r19,r2
  204064:	18800017 	ldw	r2,0(r3)
  204068:	10000c1e 	bne	r2,zero,20409c <quorem+0x1ec>
  20406c:	18bfff04 	addi	r2,r3,-4
  204070:	9880082e 	bgeu	r19,r2,204094 <quorem+0x1e4>
  204074:	18ffff17 	ldw	r3,-4(r3)
  204078:	18000326 	beq	r3,zero,204088 <quorem+0x1d8>
  20407c:	00000506 	br	204094 <quorem+0x1e4>
  204080:	10c00017 	ldw	r3,0(r2)
  204084:	1800031e 	bne	r3,zero,204094 <quorem+0x1e4>
  204088:	10bfff04 	addi	r2,r2,-4
  20408c:	bdffffc4 	addi	r23,r23,-1
  204090:	98bffb36 	bltu	r19,r2,204080 <_gp+0xffdf249c>
  204094:	d8c00017 	ldw	r3,0(sp)
  204098:	1dc00415 	stw	r23,16(r3)
  20409c:	9005883a 	mov	r2,r18
  2040a0:	dfc00d17 	ldw	ra,52(sp)
  2040a4:	df000c17 	ldw	fp,48(sp)
  2040a8:	ddc00b17 	ldw	r23,44(sp)
  2040ac:	dd800a17 	ldw	r22,40(sp)
  2040b0:	dd400917 	ldw	r21,36(sp)
  2040b4:	dd000817 	ldw	r20,32(sp)
  2040b8:	dcc00717 	ldw	r19,28(sp)
  2040bc:	dc800617 	ldw	r18,24(sp)
  2040c0:	dc400517 	ldw	r17,20(sp)
  2040c4:	dc000417 	ldw	r16,16(sp)
  2040c8:	dec00e04 	addi	sp,sp,56
  2040cc:	f800283a 	ret
  2040d0:	0005883a 	mov	r2,zero
  2040d4:	003ff206 	br	2040a0 <_gp+0xffdf24bc>

002040d8 <_dtoa_r>:
  2040d8:	20801017 	ldw	r2,64(r4)
  2040dc:	deffde04 	addi	sp,sp,-136
  2040e0:	df002015 	stw	fp,128(sp)
  2040e4:	dcc01b15 	stw	r19,108(sp)
  2040e8:	dc801a15 	stw	r18,104(sp)
  2040ec:	dc401915 	stw	r17,100(sp)
  2040f0:	dc001815 	stw	r16,96(sp)
  2040f4:	dfc02115 	stw	ra,132(sp)
  2040f8:	ddc01f15 	stw	r23,124(sp)
  2040fc:	dd801e15 	stw	r22,120(sp)
  204100:	dd401d15 	stw	r21,116(sp)
  204104:	dd001c15 	stw	r20,112(sp)
  204108:	d9c00315 	stw	r7,12(sp)
  20410c:	2039883a 	mov	fp,r4
  204110:	3023883a 	mov	r17,r6
  204114:	2825883a 	mov	r18,r5
  204118:	dc002417 	ldw	r16,144(sp)
  20411c:	3027883a 	mov	r19,r6
  204120:	10000826 	beq	r2,zero,204144 <_dtoa_r+0x6c>
  204124:	21801117 	ldw	r6,68(r4)
  204128:	00c00044 	movi	r3,1
  20412c:	100b883a 	mov	r5,r2
  204130:	1986983a 	sll	r3,r3,r6
  204134:	11800115 	stw	r6,4(r2)
  204138:	10c00215 	stw	r3,8(r2)
  20413c:	02078380 	call	207838 <_Bfree>
  204140:	e0001015 	stw	zero,64(fp)
  204144:	88002e16 	blt	r17,zero,204200 <_dtoa_r+0x128>
  204148:	80000015 	stw	zero,0(r16)
  20414c:	889ffc2c 	andhi	r2,r17,32752
  204150:	00dffc34 	movhi	r3,32752
  204154:	10c01c26 	beq	r2,r3,2041c8 <_dtoa_r+0xf0>
  204158:	000d883a 	mov	r6,zero
  20415c:	000f883a 	mov	r7,zero
  204160:	9009883a 	mov	r4,r18
  204164:	980b883a 	mov	r5,r19
  204168:	020cf0c0 	call	20cf0c <__eqdf2>
  20416c:	10002b1e 	bne	r2,zero,20421c <_dtoa_r+0x144>
  204170:	d9c02317 	ldw	r7,140(sp)
  204174:	00800044 	movi	r2,1
  204178:	38800015 	stw	r2,0(r7)
  20417c:	d8802517 	ldw	r2,148(sp)
  204180:	10019e26 	beq	r2,zero,2047fc <_dtoa_r+0x724>
  204184:	d8c02517 	ldw	r3,148(sp)
  204188:	00800874 	movhi	r2,33
  20418c:	10905344 	addi	r2,r2,16717
  204190:	18800015 	stw	r2,0(r3)
  204194:	10bfffc4 	addi	r2,r2,-1
  204198:	dfc02117 	ldw	ra,132(sp)
  20419c:	df002017 	ldw	fp,128(sp)
  2041a0:	ddc01f17 	ldw	r23,124(sp)
  2041a4:	dd801e17 	ldw	r22,120(sp)
  2041a8:	dd401d17 	ldw	r21,116(sp)
  2041ac:	dd001c17 	ldw	r20,112(sp)
  2041b0:	dcc01b17 	ldw	r19,108(sp)
  2041b4:	dc801a17 	ldw	r18,104(sp)
  2041b8:	dc401917 	ldw	r17,100(sp)
  2041bc:	dc001817 	ldw	r16,96(sp)
  2041c0:	dec02204 	addi	sp,sp,136
  2041c4:	f800283a 	ret
  2041c8:	d8c02317 	ldw	r3,140(sp)
  2041cc:	0089c3c4 	movi	r2,9999
  2041d0:	18800015 	stw	r2,0(r3)
  2041d4:	90017726 	beq	r18,zero,2047b4 <_dtoa_r+0x6dc>
  2041d8:	00800874 	movhi	r2,33
  2041dc:	10905f04 	addi	r2,r2,16764
  2041e0:	d9002517 	ldw	r4,148(sp)
  2041e4:	203fec26 	beq	r4,zero,204198 <_gp+0xffdf25b4>
  2041e8:	10c000c7 	ldb	r3,3(r2)
  2041ec:	1801781e 	bne	r3,zero,2047d0 <_dtoa_r+0x6f8>
  2041f0:	10c000c4 	addi	r3,r2,3
  2041f4:	d9802517 	ldw	r6,148(sp)
  2041f8:	30c00015 	stw	r3,0(r6)
  2041fc:	003fe606 	br	204198 <_gp+0xffdf25b4>
  204200:	04e00034 	movhi	r19,32768
  204204:	9cffffc4 	addi	r19,r19,-1
  204208:	00800044 	movi	r2,1
  20420c:	8ce6703a 	and	r19,r17,r19
  204210:	80800015 	stw	r2,0(r16)
  204214:	9823883a 	mov	r17,r19
  204218:	003fcc06 	br	20414c <_gp+0xffdf2568>
  20421c:	d8800204 	addi	r2,sp,8
  204220:	d8800015 	stw	r2,0(sp)
  204224:	d9c00104 	addi	r7,sp,4
  204228:	900b883a 	mov	r5,r18
  20422c:	980d883a 	mov	r6,r19
  204230:	e009883a 	mov	r4,fp
  204234:	8820d53a 	srli	r16,r17,20
  204238:	02084e00 	call	2084e0 <__d2b>
  20423c:	d8800915 	stw	r2,36(sp)
  204240:	8001651e 	bne	r16,zero,2047d8 <_dtoa_r+0x700>
  204244:	dd800217 	ldw	r22,8(sp)
  204248:	dc000117 	ldw	r16,4(sp)
  20424c:	00800804 	movi	r2,32
  204250:	b421883a 	add	r16,r22,r16
  204254:	80c10c84 	addi	r3,r16,1074
  204258:	10c2d10e 	bge	r2,r3,204da0 <_dtoa_r+0xcc8>
  20425c:	00801004 	movi	r2,64
  204260:	81010484 	addi	r4,r16,1042
  204264:	10c7c83a 	sub	r3,r2,r3
  204268:	9108d83a 	srl	r4,r18,r4
  20426c:	88e2983a 	sll	r17,r17,r3
  204270:	2448b03a 	or	r4,r4,r17
  204274:	020e4280 	call	20e428 <__floatunsidf>
  204278:	017f8434 	movhi	r5,65040
  20427c:	01800044 	movi	r6,1
  204280:	1009883a 	mov	r4,r2
  204284:	194b883a 	add	r5,r3,r5
  204288:	843fffc4 	addi	r16,r16,-1
  20428c:	d9801115 	stw	r6,68(sp)
  204290:	000d883a 	mov	r6,zero
  204294:	01cffe34 	movhi	r7,16376
  204298:	020d9d00 	call	20d9d0 <__subdf3>
  20429c:	0198dbf4 	movhi	r6,25455
  2042a0:	01cff4f4 	movhi	r7,16339
  2042a4:	3190d844 	addi	r6,r6,17249
  2042a8:	39e1e9c4 	addi	r7,r7,-30809
  2042ac:	1009883a 	mov	r4,r2
  2042b0:	180b883a 	mov	r5,r3
  2042b4:	020d1640 	call	20d164 <__muldf3>
  2042b8:	01a2d874 	movhi	r6,35681
  2042bc:	01cff1f4 	movhi	r7,16327
  2042c0:	31b22cc4 	addi	r6,r6,-14157
  2042c4:	39e28a04 	addi	r7,r7,-30168
  2042c8:	180b883a 	mov	r5,r3
  2042cc:	1009883a 	mov	r4,r2
  2042d0:	020bc900 	call	20bc90 <__adddf3>
  2042d4:	8009883a 	mov	r4,r16
  2042d8:	1029883a 	mov	r20,r2
  2042dc:	1823883a 	mov	r17,r3
  2042e0:	020e34c0 	call	20e34c <__floatsidf>
  2042e4:	019427f4 	movhi	r6,20639
  2042e8:	01cff4f4 	movhi	r7,16339
  2042ec:	319e7ec4 	addi	r6,r6,31227
  2042f0:	39d104c4 	addi	r7,r7,17427
  2042f4:	1009883a 	mov	r4,r2
  2042f8:	180b883a 	mov	r5,r3
  2042fc:	020d1640 	call	20d164 <__muldf3>
  204300:	100d883a 	mov	r6,r2
  204304:	180f883a 	mov	r7,r3
  204308:	a009883a 	mov	r4,r20
  20430c:	880b883a 	mov	r5,r17
  204310:	020bc900 	call	20bc90 <__adddf3>
  204314:	1009883a 	mov	r4,r2
  204318:	180b883a 	mov	r5,r3
  20431c:	1029883a 	mov	r20,r2
  204320:	1823883a 	mov	r17,r3
  204324:	020e2cc0 	call	20e2cc <__fixdfsi>
  204328:	000d883a 	mov	r6,zero
  20432c:	000f883a 	mov	r7,zero
  204330:	a009883a 	mov	r4,r20
  204334:	880b883a 	mov	r5,r17
  204338:	d8800515 	stw	r2,20(sp)
  20433c:	020d0700 	call	20d070 <__ledf2>
  204340:	10028716 	blt	r2,zero,204d60 <_dtoa_r+0xc88>
  204344:	d8c00517 	ldw	r3,20(sp)
  204348:	00800584 	movi	r2,22
  20434c:	10c27536 	bltu	r2,r3,204d24 <_dtoa_r+0xc4c>
  204350:	180490fa 	slli	r2,r3,3
  204354:	00c00874 	movhi	r3,33
  204358:	18d07b04 	addi	r3,r3,16876
  20435c:	1885883a 	add	r2,r3,r2
  204360:	11000017 	ldw	r4,0(r2)
  204364:	11400117 	ldw	r5,4(r2)
  204368:	900d883a 	mov	r6,r18
  20436c:	980f883a 	mov	r7,r19
  204370:	020cf940 	call	20cf94 <__gedf2>
  204374:	00828d0e 	bge	zero,r2,204dac <_dtoa_r+0xcd4>
  204378:	d9000517 	ldw	r4,20(sp)
  20437c:	d8000e15 	stw	zero,56(sp)
  204380:	213fffc4 	addi	r4,r4,-1
  204384:	d9000515 	stw	r4,20(sp)
  204388:	b42dc83a 	sub	r22,r22,r16
  20438c:	b5bfffc4 	addi	r22,r22,-1
  204390:	b0026f16 	blt	r22,zero,204d50 <_dtoa_r+0xc78>
  204394:	d8000815 	stw	zero,32(sp)
  204398:	d9c00517 	ldw	r7,20(sp)
  20439c:	38026416 	blt	r7,zero,204d30 <_dtoa_r+0xc58>
  2043a0:	b1ed883a 	add	r22,r22,r7
  2043a4:	d9c00d15 	stw	r7,52(sp)
  2043a8:	d8000a15 	stw	zero,40(sp)
  2043ac:	d9800317 	ldw	r6,12(sp)
  2043b0:	00800244 	movi	r2,9
  2043b4:	11811436 	bltu	r2,r6,204808 <_dtoa_r+0x730>
  2043b8:	00800144 	movi	r2,5
  2043bc:	1184e10e 	bge	r2,r6,205744 <_dtoa_r+0x166c>
  2043c0:	31bfff04 	addi	r6,r6,-4
  2043c4:	d9800315 	stw	r6,12(sp)
  2043c8:	0023883a 	mov	r17,zero
  2043cc:	d9800317 	ldw	r6,12(sp)
  2043d0:	008000c4 	movi	r2,3
  2043d4:	30836726 	beq	r6,r2,205174 <_dtoa_r+0x109c>
  2043d8:	1183410e 	bge	r2,r6,2050e0 <_dtoa_r+0x1008>
  2043dc:	d9c00317 	ldw	r7,12(sp)
  2043e0:	00800104 	movi	r2,4
  2043e4:	38827c26 	beq	r7,r2,204dd8 <_dtoa_r+0xd00>
  2043e8:	00800144 	movi	r2,5
  2043ec:	3884c41e 	bne	r7,r2,205700 <_dtoa_r+0x1628>
  2043f0:	00800044 	movi	r2,1
  2043f4:	d8800b15 	stw	r2,44(sp)
  2043f8:	d8c00517 	ldw	r3,20(sp)
  2043fc:	d9002217 	ldw	r4,136(sp)
  204400:	1907883a 	add	r3,r3,r4
  204404:	19800044 	addi	r6,r3,1
  204408:	d8c00c15 	stw	r3,48(sp)
  20440c:	d9800615 	stw	r6,24(sp)
  204410:	0183a40e 	bge	zero,r6,2052a4 <_dtoa_r+0x11cc>
  204414:	d9800617 	ldw	r6,24(sp)
  204418:	3021883a 	mov	r16,r6
  20441c:	e0001115 	stw	zero,68(fp)
  204420:	008005c4 	movi	r2,23
  204424:	1184c92e 	bgeu	r2,r6,20574c <_dtoa_r+0x1674>
  204428:	00c00044 	movi	r3,1
  20442c:	00800104 	movi	r2,4
  204430:	1085883a 	add	r2,r2,r2
  204434:	11000504 	addi	r4,r2,20
  204438:	180b883a 	mov	r5,r3
  20443c:	18c00044 	addi	r3,r3,1
  204440:	313ffb2e 	bgeu	r6,r4,204430 <_gp+0xffdf284c>
  204444:	e1401115 	stw	r5,68(fp)
  204448:	e009883a 	mov	r4,fp
  20444c:	02077900 	call	207790 <_Balloc>
  204450:	d8800715 	stw	r2,28(sp)
  204454:	e0801015 	stw	r2,64(fp)
  204458:	00800384 	movi	r2,14
  20445c:	1400f736 	bltu	r2,r16,20483c <_dtoa_r+0x764>
  204460:	8800f626 	beq	r17,zero,20483c <_dtoa_r+0x764>
  204464:	d9c00517 	ldw	r7,20(sp)
  204468:	01c39a0e 	bge	zero,r7,2052d4 <_dtoa_r+0x11fc>
  20446c:	388003cc 	andi	r2,r7,15
  204470:	100490fa 	slli	r2,r2,3
  204474:	382bd13a 	srai	r21,r7,4
  204478:	00c00874 	movhi	r3,33
  20447c:	18d07b04 	addi	r3,r3,16876
  204480:	1885883a 	add	r2,r3,r2
  204484:	a8c0040c 	andi	r3,r21,16
  204488:	12400017 	ldw	r9,0(r2)
  20448c:	12000117 	ldw	r8,4(r2)
  204490:	18037926 	beq	r3,zero,205278 <_dtoa_r+0x11a0>
  204494:	00800874 	movhi	r2,33
  204498:	10907104 	addi	r2,r2,16836
  20449c:	11800817 	ldw	r6,32(r2)
  2044a0:	11c00917 	ldw	r7,36(r2)
  2044a4:	9009883a 	mov	r4,r18
  2044a8:	980b883a 	mov	r5,r19
  2044ac:	da001715 	stw	r8,92(sp)
  2044b0:	da401615 	stw	r9,88(sp)
  2044b4:	020c53c0 	call	20c53c <__divdf3>
  2044b8:	da001717 	ldw	r8,92(sp)
  2044bc:	da401617 	ldw	r9,88(sp)
  2044c0:	ad4003cc 	andi	r21,r21,15
  2044c4:	040000c4 	movi	r16,3
  2044c8:	1023883a 	mov	r17,r2
  2044cc:	1829883a 	mov	r20,r3
  2044d0:	a8001126 	beq	r21,zero,204518 <_dtoa_r+0x440>
  2044d4:	05c00874 	movhi	r23,33
  2044d8:	bdd07104 	addi	r23,r23,16836
  2044dc:	4805883a 	mov	r2,r9
  2044e0:	4007883a 	mov	r3,r8
  2044e4:	a980004c 	andi	r6,r21,1
  2044e8:	1009883a 	mov	r4,r2
  2044ec:	a82bd07a 	srai	r21,r21,1
  2044f0:	180b883a 	mov	r5,r3
  2044f4:	30000426 	beq	r6,zero,204508 <_dtoa_r+0x430>
  2044f8:	b9800017 	ldw	r6,0(r23)
  2044fc:	b9c00117 	ldw	r7,4(r23)
  204500:	84000044 	addi	r16,r16,1
  204504:	020d1640 	call	20d164 <__muldf3>
  204508:	bdc00204 	addi	r23,r23,8
  20450c:	a83ff51e 	bne	r21,zero,2044e4 <_gp+0xffdf2900>
  204510:	1013883a 	mov	r9,r2
  204514:	1811883a 	mov	r8,r3
  204518:	480d883a 	mov	r6,r9
  20451c:	400f883a 	mov	r7,r8
  204520:	8809883a 	mov	r4,r17
  204524:	a00b883a 	mov	r5,r20
  204528:	020c53c0 	call	20c53c <__divdf3>
  20452c:	d8800f15 	stw	r2,60(sp)
  204530:	d8c01015 	stw	r3,64(sp)
  204534:	d8c00e17 	ldw	r3,56(sp)
  204538:	18000626 	beq	r3,zero,204554 <_dtoa_r+0x47c>
  20453c:	d9000f17 	ldw	r4,60(sp)
  204540:	d9401017 	ldw	r5,64(sp)
  204544:	000d883a 	mov	r6,zero
  204548:	01cffc34 	movhi	r7,16368
  20454c:	020d0700 	call	20d070 <__ledf2>
  204550:	10040b16 	blt	r2,zero,205580 <_dtoa_r+0x14a8>
  204554:	8009883a 	mov	r4,r16
  204558:	020e34c0 	call	20e34c <__floatsidf>
  20455c:	d9800f17 	ldw	r6,60(sp)
  204560:	d9c01017 	ldw	r7,64(sp)
  204564:	1009883a 	mov	r4,r2
  204568:	180b883a 	mov	r5,r3
  20456c:	020d1640 	call	20d164 <__muldf3>
  204570:	000d883a 	mov	r6,zero
  204574:	01d00734 	movhi	r7,16412
  204578:	1009883a 	mov	r4,r2
  20457c:	180b883a 	mov	r5,r3
  204580:	020bc900 	call	20bc90 <__adddf3>
  204584:	1021883a 	mov	r16,r2
  204588:	d8800617 	ldw	r2,24(sp)
  20458c:	047f3034 	movhi	r17,64704
  204590:	1c63883a 	add	r17,r3,r17
  204594:	10031826 	beq	r2,zero,2051f8 <_dtoa_r+0x1120>
  204598:	d8c00517 	ldw	r3,20(sp)
  20459c:	db000617 	ldw	r12,24(sp)
  2045a0:	d8c01315 	stw	r3,76(sp)
  2045a4:	d9000b17 	ldw	r4,44(sp)
  2045a8:	20038f26 	beq	r4,zero,2053e8 <_dtoa_r+0x1310>
  2045ac:	60bfffc4 	addi	r2,r12,-1
  2045b0:	100490fa 	slli	r2,r2,3
  2045b4:	00c00874 	movhi	r3,33
  2045b8:	18d07b04 	addi	r3,r3,16876
  2045bc:	1885883a 	add	r2,r3,r2
  2045c0:	11800017 	ldw	r6,0(r2)
  2045c4:	11c00117 	ldw	r7,4(r2)
  2045c8:	d8800717 	ldw	r2,28(sp)
  2045cc:	0009883a 	mov	r4,zero
  2045d0:	014ff834 	movhi	r5,16352
  2045d4:	db001615 	stw	r12,88(sp)
  2045d8:	15c00044 	addi	r23,r2,1
  2045dc:	020c53c0 	call	20c53c <__divdf3>
  2045e0:	800d883a 	mov	r6,r16
  2045e4:	880f883a 	mov	r7,r17
  2045e8:	1009883a 	mov	r4,r2
  2045ec:	180b883a 	mov	r5,r3
  2045f0:	020d9d00 	call	20d9d0 <__subdf3>
  2045f4:	d9401017 	ldw	r5,64(sp)
  2045f8:	d9000f17 	ldw	r4,60(sp)
  2045fc:	102b883a 	mov	r21,r2
  204600:	d8c01215 	stw	r3,72(sp)
  204604:	020e2cc0 	call	20e2cc <__fixdfsi>
  204608:	1009883a 	mov	r4,r2
  20460c:	1029883a 	mov	r20,r2
  204610:	020e34c0 	call	20e34c <__floatsidf>
  204614:	d9000f17 	ldw	r4,60(sp)
  204618:	d9401017 	ldw	r5,64(sp)
  20461c:	100d883a 	mov	r6,r2
  204620:	180f883a 	mov	r7,r3
  204624:	020d9d00 	call	20d9d0 <__subdf3>
  204628:	1823883a 	mov	r17,r3
  20462c:	d8c00717 	ldw	r3,28(sp)
  204630:	d9401217 	ldw	r5,72(sp)
  204634:	a2000c04 	addi	r8,r20,48
  204638:	1021883a 	mov	r16,r2
  20463c:	1a000005 	stb	r8,0(r3)
  204640:	800d883a 	mov	r6,r16
  204644:	880f883a 	mov	r7,r17
  204648:	a809883a 	mov	r4,r21
  20464c:	4029883a 	mov	r20,r8
  204650:	020cf940 	call	20cf94 <__gedf2>
  204654:	00841d16 	blt	zero,r2,2056cc <_dtoa_r+0x15f4>
  204658:	800d883a 	mov	r6,r16
  20465c:	880f883a 	mov	r7,r17
  204660:	0009883a 	mov	r4,zero
  204664:	014ffc34 	movhi	r5,16368
  204668:	020d9d00 	call	20d9d0 <__subdf3>
  20466c:	d9401217 	ldw	r5,72(sp)
  204670:	100d883a 	mov	r6,r2
  204674:	180f883a 	mov	r7,r3
  204678:	a809883a 	mov	r4,r21
  20467c:	020cf940 	call	20cf94 <__gedf2>
  204680:	db001617 	ldw	r12,88(sp)
  204684:	00840e16 	blt	zero,r2,2056c0 <_dtoa_r+0x15e8>
  204688:	00800044 	movi	r2,1
  20468c:	13006b0e 	bge	r2,r12,20483c <_dtoa_r+0x764>
  204690:	d9000717 	ldw	r4,28(sp)
  204694:	dd800f15 	stw	r22,60(sp)
  204698:	dcc01015 	stw	r19,64(sp)
  20469c:	2319883a 	add	r12,r4,r12
  2046a0:	dcc01217 	ldw	r19,72(sp)
  2046a4:	602d883a 	mov	r22,r12
  2046a8:	dc801215 	stw	r18,72(sp)
  2046ac:	b825883a 	mov	r18,r23
  2046b0:	00000906 	br	2046d8 <_dtoa_r+0x600>
  2046b4:	020d9d00 	call	20d9d0 <__subdf3>
  2046b8:	a80d883a 	mov	r6,r21
  2046bc:	980f883a 	mov	r7,r19
  2046c0:	1009883a 	mov	r4,r2
  2046c4:	180b883a 	mov	r5,r3
  2046c8:	020d0700 	call	20d070 <__ledf2>
  2046cc:	1003e816 	blt	r2,zero,205670 <_dtoa_r+0x1598>
  2046d0:	b825883a 	mov	r18,r23
  2046d4:	bd83e926 	beq	r23,r22,20567c <_dtoa_r+0x15a4>
  2046d8:	a809883a 	mov	r4,r21
  2046dc:	980b883a 	mov	r5,r19
  2046e0:	000d883a 	mov	r6,zero
  2046e4:	01d00934 	movhi	r7,16420
  2046e8:	020d1640 	call	20d164 <__muldf3>
  2046ec:	000d883a 	mov	r6,zero
  2046f0:	01d00934 	movhi	r7,16420
  2046f4:	8009883a 	mov	r4,r16
  2046f8:	880b883a 	mov	r5,r17
  2046fc:	102b883a 	mov	r21,r2
  204700:	1827883a 	mov	r19,r3
  204704:	020d1640 	call	20d164 <__muldf3>
  204708:	180b883a 	mov	r5,r3
  20470c:	1009883a 	mov	r4,r2
  204710:	1821883a 	mov	r16,r3
  204714:	1023883a 	mov	r17,r2
  204718:	020e2cc0 	call	20e2cc <__fixdfsi>
  20471c:	1009883a 	mov	r4,r2
  204720:	1029883a 	mov	r20,r2
  204724:	020e34c0 	call	20e34c <__floatsidf>
  204728:	8809883a 	mov	r4,r17
  20472c:	800b883a 	mov	r5,r16
  204730:	100d883a 	mov	r6,r2
  204734:	180f883a 	mov	r7,r3
  204738:	020d9d00 	call	20d9d0 <__subdf3>
  20473c:	a5000c04 	addi	r20,r20,48
  204740:	a80d883a 	mov	r6,r21
  204744:	980f883a 	mov	r7,r19
  204748:	1009883a 	mov	r4,r2
  20474c:	180b883a 	mov	r5,r3
  204750:	95000005 	stb	r20,0(r18)
  204754:	1021883a 	mov	r16,r2
  204758:	1823883a 	mov	r17,r3
  20475c:	020d0700 	call	20d070 <__ledf2>
  204760:	bdc00044 	addi	r23,r23,1
  204764:	800d883a 	mov	r6,r16
  204768:	880f883a 	mov	r7,r17
  20476c:	0009883a 	mov	r4,zero
  204770:	014ffc34 	movhi	r5,16368
  204774:	103fcf0e 	bge	r2,zero,2046b4 <_gp+0xffdf2ad0>
  204778:	d8c01317 	ldw	r3,76(sp)
  20477c:	d8c00515 	stw	r3,20(sp)
  204780:	d9400917 	ldw	r5,36(sp)
  204784:	e009883a 	mov	r4,fp
  204788:	02078380 	call	207838 <_Bfree>
  20478c:	d9000517 	ldw	r4,20(sp)
  204790:	d9802317 	ldw	r6,140(sp)
  204794:	d9c02517 	ldw	r7,148(sp)
  204798:	b8000005 	stb	zero,0(r23)
  20479c:	20800044 	addi	r2,r4,1
  2047a0:	30800015 	stw	r2,0(r6)
  2047a4:	3802aa26 	beq	r7,zero,205250 <_dtoa_r+0x1178>
  2047a8:	3dc00015 	stw	r23,0(r7)
  2047ac:	d8800717 	ldw	r2,28(sp)
  2047b0:	003e7906 	br	204198 <_gp+0xffdf25b4>
  2047b4:	00800434 	movhi	r2,16
  2047b8:	10bfffc4 	addi	r2,r2,-1
  2047bc:	88a2703a 	and	r17,r17,r2
  2047c0:	883e851e 	bne	r17,zero,2041d8 <_gp+0xffdf25f4>
  2047c4:	00800874 	movhi	r2,33
  2047c8:	10905c04 	addi	r2,r2,16752
  2047cc:	003e8406 	br	2041e0 <_gp+0xffdf25fc>
  2047d0:	10c00204 	addi	r3,r2,8
  2047d4:	003e8706 	br	2041f4 <_gp+0xffdf2610>
  2047d8:	01400434 	movhi	r5,16
  2047dc:	297fffc4 	addi	r5,r5,-1
  2047e0:	994a703a 	and	r5,r19,r5
  2047e4:	9009883a 	mov	r4,r18
  2047e8:	843f0044 	addi	r16,r16,-1023
  2047ec:	294ffc34 	orhi	r5,r5,16368
  2047f0:	dd800217 	ldw	r22,8(sp)
  2047f4:	d8001115 	stw	zero,68(sp)
  2047f8:	003ea506 	br	204290 <_gp+0xffdf26ac>
  2047fc:	00800874 	movhi	r2,33
  204800:	10905304 	addi	r2,r2,16716
  204804:	003e6406 	br	204198 <_gp+0xffdf25b4>
  204808:	e0001115 	stw	zero,68(fp)
  20480c:	000b883a 	mov	r5,zero
  204810:	e009883a 	mov	r4,fp
  204814:	02077900 	call	207790 <_Balloc>
  204818:	01bfffc4 	movi	r6,-1
  20481c:	01c00044 	movi	r7,1
  204820:	d8800715 	stw	r2,28(sp)
  204824:	d9800c15 	stw	r6,48(sp)
  204828:	e0801015 	stw	r2,64(fp)
  20482c:	d8000315 	stw	zero,12(sp)
  204830:	d9c00b15 	stw	r7,44(sp)
  204834:	d9800615 	stw	r6,24(sp)
  204838:	d8002215 	stw	zero,136(sp)
  20483c:	d8800117 	ldw	r2,4(sp)
  204840:	10008916 	blt	r2,zero,204a68 <_dtoa_r+0x990>
  204844:	d9000517 	ldw	r4,20(sp)
  204848:	00c00384 	movi	r3,14
  20484c:	19008616 	blt	r3,r4,204a68 <_dtoa_r+0x990>
  204850:	200490fa 	slli	r2,r4,3
  204854:	00c00874 	movhi	r3,33
  204858:	d9802217 	ldw	r6,136(sp)
  20485c:	18d07b04 	addi	r3,r3,16876
  204860:	1885883a 	add	r2,r3,r2
  204864:	14000017 	ldw	r16,0(r2)
  204868:	14400117 	ldw	r17,4(r2)
  20486c:	30016316 	blt	r6,zero,204dfc <_dtoa_r+0xd24>
  204870:	800d883a 	mov	r6,r16
  204874:	880f883a 	mov	r7,r17
  204878:	9009883a 	mov	r4,r18
  20487c:	980b883a 	mov	r5,r19
  204880:	020c53c0 	call	20c53c <__divdf3>
  204884:	180b883a 	mov	r5,r3
  204888:	1009883a 	mov	r4,r2
  20488c:	020e2cc0 	call	20e2cc <__fixdfsi>
  204890:	1009883a 	mov	r4,r2
  204894:	102b883a 	mov	r21,r2
  204898:	020e34c0 	call	20e34c <__floatsidf>
  20489c:	800d883a 	mov	r6,r16
  2048a0:	880f883a 	mov	r7,r17
  2048a4:	1009883a 	mov	r4,r2
  2048a8:	180b883a 	mov	r5,r3
  2048ac:	020d1640 	call	20d164 <__muldf3>
  2048b0:	100d883a 	mov	r6,r2
  2048b4:	180f883a 	mov	r7,r3
  2048b8:	9009883a 	mov	r4,r18
  2048bc:	980b883a 	mov	r5,r19
  2048c0:	020d9d00 	call	20d9d0 <__subdf3>
  2048c4:	d9c00717 	ldw	r7,28(sp)
  2048c8:	1009883a 	mov	r4,r2
  2048cc:	a8800c04 	addi	r2,r21,48
  2048d0:	38800005 	stb	r2,0(r7)
  2048d4:	3dc00044 	addi	r23,r7,1
  2048d8:	d9c00617 	ldw	r7,24(sp)
  2048dc:	01800044 	movi	r6,1
  2048e0:	180b883a 	mov	r5,r3
  2048e4:	2005883a 	mov	r2,r4
  2048e8:	39803826 	beq	r7,r6,2049cc <_dtoa_r+0x8f4>
  2048ec:	000d883a 	mov	r6,zero
  2048f0:	01d00934 	movhi	r7,16420
  2048f4:	020d1640 	call	20d164 <__muldf3>
  2048f8:	000d883a 	mov	r6,zero
  2048fc:	000f883a 	mov	r7,zero
  204900:	1009883a 	mov	r4,r2
  204904:	180b883a 	mov	r5,r3
  204908:	1025883a 	mov	r18,r2
  20490c:	1827883a 	mov	r19,r3
  204910:	020cf0c0 	call	20cf0c <__eqdf2>
  204914:	103f9a26 	beq	r2,zero,204780 <_gp+0xffdf2b9c>
  204918:	d9c00617 	ldw	r7,24(sp)
  20491c:	d8c00717 	ldw	r3,28(sp)
  204920:	b829883a 	mov	r20,r23
  204924:	38bfffc4 	addi	r2,r7,-1
  204928:	18ad883a 	add	r22,r3,r2
  20492c:	00000a06 	br	204958 <_dtoa_r+0x880>
  204930:	020d1640 	call	20d164 <__muldf3>
  204934:	000d883a 	mov	r6,zero
  204938:	000f883a 	mov	r7,zero
  20493c:	1009883a 	mov	r4,r2
  204940:	180b883a 	mov	r5,r3
  204944:	1025883a 	mov	r18,r2
  204948:	1827883a 	mov	r19,r3
  20494c:	b829883a 	mov	r20,r23
  204950:	020cf0c0 	call	20cf0c <__eqdf2>
  204954:	103f8a26 	beq	r2,zero,204780 <_gp+0xffdf2b9c>
  204958:	800d883a 	mov	r6,r16
  20495c:	880f883a 	mov	r7,r17
  204960:	9009883a 	mov	r4,r18
  204964:	980b883a 	mov	r5,r19
  204968:	020c53c0 	call	20c53c <__divdf3>
  20496c:	180b883a 	mov	r5,r3
  204970:	1009883a 	mov	r4,r2
  204974:	020e2cc0 	call	20e2cc <__fixdfsi>
  204978:	1009883a 	mov	r4,r2
  20497c:	102b883a 	mov	r21,r2
  204980:	020e34c0 	call	20e34c <__floatsidf>
  204984:	800d883a 	mov	r6,r16
  204988:	880f883a 	mov	r7,r17
  20498c:	1009883a 	mov	r4,r2
  204990:	180b883a 	mov	r5,r3
  204994:	020d1640 	call	20d164 <__muldf3>
  204998:	100d883a 	mov	r6,r2
  20499c:	180f883a 	mov	r7,r3
  2049a0:	9009883a 	mov	r4,r18
  2049a4:	980b883a 	mov	r5,r19
  2049a8:	020d9d00 	call	20d9d0 <__subdf3>
  2049ac:	aa000c04 	addi	r8,r21,48
  2049b0:	a2000005 	stb	r8,0(r20)
  2049b4:	000d883a 	mov	r6,zero
  2049b8:	01d00934 	movhi	r7,16420
  2049bc:	1009883a 	mov	r4,r2
  2049c0:	180b883a 	mov	r5,r3
  2049c4:	a5c00044 	addi	r23,r20,1
  2049c8:	b53fd91e 	bne	r22,r20,204930 <_gp+0xffdf2d4c>
  2049cc:	100d883a 	mov	r6,r2
  2049d0:	180f883a 	mov	r7,r3
  2049d4:	1009883a 	mov	r4,r2
  2049d8:	180b883a 	mov	r5,r3
  2049dc:	020bc900 	call	20bc90 <__adddf3>
  2049e0:	100d883a 	mov	r6,r2
  2049e4:	180f883a 	mov	r7,r3
  2049e8:	8009883a 	mov	r4,r16
  2049ec:	880b883a 	mov	r5,r17
  2049f0:	1027883a 	mov	r19,r2
  2049f4:	1825883a 	mov	r18,r3
  2049f8:	020d0700 	call	20d070 <__ledf2>
  2049fc:	10000816 	blt	r2,zero,204a20 <_dtoa_r+0x948>
  204a00:	980d883a 	mov	r6,r19
  204a04:	900f883a 	mov	r7,r18
  204a08:	8009883a 	mov	r4,r16
  204a0c:	880b883a 	mov	r5,r17
  204a10:	020cf0c0 	call	20cf0c <__eqdf2>
  204a14:	103f5a1e 	bne	r2,zero,204780 <_gp+0xffdf2b9c>
  204a18:	ad40004c 	andi	r21,r21,1
  204a1c:	a83f5826 	beq	r21,zero,204780 <_gp+0xffdf2b9c>
  204a20:	bd3fffc3 	ldbu	r20,-1(r23)
  204a24:	b8bfffc4 	addi	r2,r23,-1
  204a28:	1007883a 	mov	r3,r2
  204a2c:	01400e44 	movi	r5,57
  204a30:	d9800717 	ldw	r6,28(sp)
  204a34:	00000506 	br	204a4c <_dtoa_r+0x974>
  204a38:	18ffffc4 	addi	r3,r3,-1
  204a3c:	11824726 	beq	r2,r6,20535c <_dtoa_r+0x1284>
  204a40:	1d000003 	ldbu	r20,0(r3)
  204a44:	102f883a 	mov	r23,r2
  204a48:	10bfffc4 	addi	r2,r2,-1
  204a4c:	a1003fcc 	andi	r4,r20,255
  204a50:	2100201c 	xori	r4,r4,128
  204a54:	213fe004 	addi	r4,r4,-128
  204a58:	217ff726 	beq	r4,r5,204a38 <_gp+0xffdf2e54>
  204a5c:	a2000044 	addi	r8,r20,1
  204a60:	12000005 	stb	r8,0(r2)
  204a64:	003f4606 	br	204780 <_gp+0xffdf2b9c>
  204a68:	d9000b17 	ldw	r4,44(sp)
  204a6c:	2000c826 	beq	r4,zero,204d90 <_dtoa_r+0xcb8>
  204a70:	d9800317 	ldw	r6,12(sp)
  204a74:	00c00044 	movi	r3,1
  204a78:	1980f90e 	bge	r3,r6,204e60 <_dtoa_r+0xd88>
  204a7c:	d8800617 	ldw	r2,24(sp)
  204a80:	d8c00a17 	ldw	r3,40(sp)
  204a84:	157fffc4 	addi	r21,r2,-1
  204a88:	1d41f316 	blt	r3,r21,205258 <_dtoa_r+0x1180>
  204a8c:	1d6bc83a 	sub	r21,r3,r21
  204a90:	d9c00617 	ldw	r7,24(sp)
  204a94:	3802aa16 	blt	r7,zero,205540 <_dtoa_r+0x1468>
  204a98:	dd000817 	ldw	r20,32(sp)
  204a9c:	d8800617 	ldw	r2,24(sp)
  204aa0:	d8c00817 	ldw	r3,32(sp)
  204aa4:	01400044 	movi	r5,1
  204aa8:	e009883a 	mov	r4,fp
  204aac:	1887883a 	add	r3,r3,r2
  204ab0:	d8c00815 	stw	r3,32(sp)
  204ab4:	b0ad883a 	add	r22,r22,r2
  204ab8:	0207bc40 	call	207bc4 <__i2b>
  204abc:	1023883a 	mov	r17,r2
  204ac0:	a0000826 	beq	r20,zero,204ae4 <_dtoa_r+0xa0c>
  204ac4:	0580070e 	bge	zero,r22,204ae4 <_dtoa_r+0xa0c>
  204ac8:	a005883a 	mov	r2,r20
  204acc:	b500b916 	blt	r22,r20,204db4 <_dtoa_r+0xcdc>
  204ad0:	d9000817 	ldw	r4,32(sp)
  204ad4:	a0a9c83a 	sub	r20,r20,r2
  204ad8:	b0adc83a 	sub	r22,r22,r2
  204adc:	2089c83a 	sub	r4,r4,r2
  204ae0:	d9000815 	stw	r4,32(sp)
  204ae4:	d9800a17 	ldw	r6,40(sp)
  204ae8:	0181810e 	bge	zero,r6,2050f0 <_dtoa_r+0x1018>
  204aec:	d9c00b17 	ldw	r7,44(sp)
  204af0:	3800b326 	beq	r7,zero,204dc0 <_dtoa_r+0xce8>
  204af4:	a800b226 	beq	r21,zero,204dc0 <_dtoa_r+0xce8>
  204af8:	880b883a 	mov	r5,r17
  204afc:	a80d883a 	mov	r6,r21
  204b00:	e009883a 	mov	r4,fp
  204b04:	0207e8c0 	call	207e8c <__pow5mult>
  204b08:	d9800917 	ldw	r6,36(sp)
  204b0c:	100b883a 	mov	r5,r2
  204b10:	e009883a 	mov	r4,fp
  204b14:	1023883a 	mov	r17,r2
  204b18:	0207c000 	call	207c00 <__multiply>
  204b1c:	1021883a 	mov	r16,r2
  204b20:	d8800a17 	ldw	r2,40(sp)
  204b24:	d9400917 	ldw	r5,36(sp)
  204b28:	e009883a 	mov	r4,fp
  204b2c:	1545c83a 	sub	r2,r2,r21
  204b30:	d8800a15 	stw	r2,40(sp)
  204b34:	02078380 	call	207838 <_Bfree>
  204b38:	d8c00a17 	ldw	r3,40(sp)
  204b3c:	18009f1e 	bne	r3,zero,204dbc <_dtoa_r+0xce4>
  204b40:	05c00044 	movi	r23,1
  204b44:	e009883a 	mov	r4,fp
  204b48:	b80b883a 	mov	r5,r23
  204b4c:	0207bc40 	call	207bc4 <__i2b>
  204b50:	d9000d17 	ldw	r4,52(sp)
  204b54:	102b883a 	mov	r21,r2
  204b58:	2000ce26 	beq	r4,zero,204e94 <_dtoa_r+0xdbc>
  204b5c:	200d883a 	mov	r6,r4
  204b60:	100b883a 	mov	r5,r2
  204b64:	e009883a 	mov	r4,fp
  204b68:	0207e8c0 	call	207e8c <__pow5mult>
  204b6c:	d9800317 	ldw	r6,12(sp)
  204b70:	102b883a 	mov	r21,r2
  204b74:	b981810e 	bge	r23,r6,20517c <_dtoa_r+0x10a4>
  204b78:	0027883a 	mov	r19,zero
  204b7c:	a8800417 	ldw	r2,16(r21)
  204b80:	05c00804 	movi	r23,32
  204b84:	10800104 	addi	r2,r2,4
  204b88:	1085883a 	add	r2,r2,r2
  204b8c:	1085883a 	add	r2,r2,r2
  204b90:	a885883a 	add	r2,r21,r2
  204b94:	11000017 	ldw	r4,0(r2)
  204b98:	0207aac0 	call	207aac <__hi0bits>
  204b9c:	b885c83a 	sub	r2,r23,r2
  204ba0:	1585883a 	add	r2,r2,r22
  204ba4:	108007cc 	andi	r2,r2,31
  204ba8:	1000b326 	beq	r2,zero,204e78 <_dtoa_r+0xda0>
  204bac:	00c00804 	movi	r3,32
  204bb0:	1887c83a 	sub	r3,r3,r2
  204bb4:	01000104 	movi	r4,4
  204bb8:	20c2cd0e 	bge	r4,r3,2056f0 <_dtoa_r+0x1618>
  204bbc:	00c00704 	movi	r3,28
  204bc0:	1885c83a 	sub	r2,r3,r2
  204bc4:	d8c00817 	ldw	r3,32(sp)
  204bc8:	a0a9883a 	add	r20,r20,r2
  204bcc:	b0ad883a 	add	r22,r22,r2
  204bd0:	1887883a 	add	r3,r3,r2
  204bd4:	d8c00815 	stw	r3,32(sp)
  204bd8:	d9800817 	ldw	r6,32(sp)
  204bdc:	0180040e 	bge	zero,r6,204bf0 <_dtoa_r+0xb18>
  204be0:	800b883a 	mov	r5,r16
  204be4:	e009883a 	mov	r4,fp
  204be8:	0207fcc0 	call	207fcc <__lshift>
  204bec:	1021883a 	mov	r16,r2
  204bf0:	0580050e 	bge	zero,r22,204c08 <_dtoa_r+0xb30>
  204bf4:	a80b883a 	mov	r5,r21
  204bf8:	b00d883a 	mov	r6,r22
  204bfc:	e009883a 	mov	r4,fp
  204c00:	0207fcc0 	call	207fcc <__lshift>
  204c04:	102b883a 	mov	r21,r2
  204c08:	d9c00e17 	ldw	r7,56(sp)
  204c0c:	3801211e 	bne	r7,zero,205094 <_dtoa_r+0xfbc>
  204c10:	d9800617 	ldw	r6,24(sp)
  204c14:	0181380e 	bge	zero,r6,2050f8 <_dtoa_r+0x1020>
  204c18:	d8c00b17 	ldw	r3,44(sp)
  204c1c:	1800ab1e 	bne	r3,zero,204ecc <_dtoa_r+0xdf4>
  204c20:	dc800717 	ldw	r18,28(sp)
  204c24:	dcc00617 	ldw	r19,24(sp)
  204c28:	9029883a 	mov	r20,r18
  204c2c:	00000206 	br	204c38 <_dtoa_r+0xb60>
  204c30:	02078600 	call	207860 <__multadd>
  204c34:	1021883a 	mov	r16,r2
  204c38:	a80b883a 	mov	r5,r21
  204c3c:	8009883a 	mov	r4,r16
  204c40:	0203eb00 	call	203eb0 <quorem>
  204c44:	10800c04 	addi	r2,r2,48
  204c48:	90800005 	stb	r2,0(r18)
  204c4c:	94800044 	addi	r18,r18,1
  204c50:	9507c83a 	sub	r3,r18,r20
  204c54:	000f883a 	mov	r7,zero
  204c58:	01800284 	movi	r6,10
  204c5c:	800b883a 	mov	r5,r16
  204c60:	e009883a 	mov	r4,fp
  204c64:	1cfff216 	blt	r3,r19,204c30 <_gp+0xffdf304c>
  204c68:	1011883a 	mov	r8,r2
  204c6c:	d8800617 	ldw	r2,24(sp)
  204c70:	0082370e 	bge	zero,r2,205550 <_dtoa_r+0x1478>
  204c74:	d9000717 	ldw	r4,28(sp)
  204c78:	0025883a 	mov	r18,zero
  204c7c:	20af883a 	add	r23,r4,r2
  204c80:	01800044 	movi	r6,1
  204c84:	800b883a 	mov	r5,r16
  204c88:	e009883a 	mov	r4,fp
  204c8c:	da001715 	stw	r8,92(sp)
  204c90:	0207fcc0 	call	207fcc <__lshift>
  204c94:	a80b883a 	mov	r5,r21
  204c98:	1009883a 	mov	r4,r2
  204c9c:	d8800915 	stw	r2,36(sp)
  204ca0:	02081140 	call	208114 <__mcmp>
  204ca4:	da001717 	ldw	r8,92(sp)
  204ca8:	0081800e 	bge	zero,r2,2052ac <_dtoa_r+0x11d4>
  204cac:	b93fffc3 	ldbu	r4,-1(r23)
  204cb0:	b8bfffc4 	addi	r2,r23,-1
  204cb4:	1007883a 	mov	r3,r2
  204cb8:	01800e44 	movi	r6,57
  204cbc:	d9c00717 	ldw	r7,28(sp)
  204cc0:	00000506 	br	204cd8 <_dtoa_r+0xc00>
  204cc4:	18ffffc4 	addi	r3,r3,-1
  204cc8:	11c12326 	beq	r2,r7,205158 <_dtoa_r+0x1080>
  204ccc:	19000003 	ldbu	r4,0(r3)
  204cd0:	102f883a 	mov	r23,r2
  204cd4:	10bfffc4 	addi	r2,r2,-1
  204cd8:	21403fcc 	andi	r5,r4,255
  204cdc:	2940201c 	xori	r5,r5,128
  204ce0:	297fe004 	addi	r5,r5,-128
  204ce4:	29bff726 	beq	r5,r6,204cc4 <_gp+0xffdf30e0>
  204ce8:	21000044 	addi	r4,r4,1
  204cec:	11000005 	stb	r4,0(r2)
  204cf0:	a80b883a 	mov	r5,r21
  204cf4:	e009883a 	mov	r4,fp
  204cf8:	02078380 	call	207838 <_Bfree>
  204cfc:	883ea026 	beq	r17,zero,204780 <_gp+0xffdf2b9c>
  204d00:	90000426 	beq	r18,zero,204d14 <_dtoa_r+0xc3c>
  204d04:	94400326 	beq	r18,r17,204d14 <_dtoa_r+0xc3c>
  204d08:	900b883a 	mov	r5,r18
  204d0c:	e009883a 	mov	r4,fp
  204d10:	02078380 	call	207838 <_Bfree>
  204d14:	880b883a 	mov	r5,r17
  204d18:	e009883a 	mov	r4,fp
  204d1c:	02078380 	call	207838 <_Bfree>
  204d20:	003e9706 	br	204780 <_gp+0xffdf2b9c>
  204d24:	01800044 	movi	r6,1
  204d28:	d9800e15 	stw	r6,56(sp)
  204d2c:	003d9606 	br	204388 <_gp+0xffdf27a4>
  204d30:	d8800817 	ldw	r2,32(sp)
  204d34:	d8c00517 	ldw	r3,20(sp)
  204d38:	d8000d15 	stw	zero,52(sp)
  204d3c:	10c5c83a 	sub	r2,r2,r3
  204d40:	00c9c83a 	sub	r4,zero,r3
  204d44:	d8800815 	stw	r2,32(sp)
  204d48:	d9000a15 	stw	r4,40(sp)
  204d4c:	003d9706 	br	2043ac <_gp+0xffdf27c8>
  204d50:	05adc83a 	sub	r22,zero,r22
  204d54:	dd800815 	stw	r22,32(sp)
  204d58:	002d883a 	mov	r22,zero
  204d5c:	003d8e06 	br	204398 <_gp+0xffdf27b4>
  204d60:	d9000517 	ldw	r4,20(sp)
  204d64:	020e34c0 	call	20e34c <__floatsidf>
  204d68:	100d883a 	mov	r6,r2
  204d6c:	180f883a 	mov	r7,r3
  204d70:	a009883a 	mov	r4,r20
  204d74:	880b883a 	mov	r5,r17
  204d78:	020cf0c0 	call	20cf0c <__eqdf2>
  204d7c:	103d7126 	beq	r2,zero,204344 <_gp+0xffdf2760>
  204d80:	d9c00517 	ldw	r7,20(sp)
  204d84:	39ffffc4 	addi	r7,r7,-1
  204d88:	d9c00515 	stw	r7,20(sp)
  204d8c:	003d6d06 	br	204344 <_gp+0xffdf2760>
  204d90:	dd400a17 	ldw	r21,40(sp)
  204d94:	dd000817 	ldw	r20,32(sp)
  204d98:	0023883a 	mov	r17,zero
  204d9c:	003f4806 	br	204ac0 <_gp+0xffdf2edc>
  204da0:	10e3c83a 	sub	r17,r2,r3
  204da4:	9448983a 	sll	r4,r18,r17
  204da8:	003d3206 	br	204274 <_gp+0xffdf2690>
  204dac:	d8000e15 	stw	zero,56(sp)
  204db0:	003d7506 	br	204388 <_gp+0xffdf27a4>
  204db4:	b005883a 	mov	r2,r22
  204db8:	003f4506 	br	204ad0 <_gp+0xffdf2eec>
  204dbc:	dc000915 	stw	r16,36(sp)
  204dc0:	d9800a17 	ldw	r6,40(sp)
  204dc4:	d9400917 	ldw	r5,36(sp)
  204dc8:	e009883a 	mov	r4,fp
  204dcc:	0207e8c0 	call	207e8c <__pow5mult>
  204dd0:	1021883a 	mov	r16,r2
  204dd4:	003f5a06 	br	204b40 <_gp+0xffdf2f5c>
  204dd8:	01c00044 	movi	r7,1
  204ddc:	d9c00b15 	stw	r7,44(sp)
  204de0:	d8802217 	ldw	r2,136(sp)
  204de4:	0081280e 	bge	zero,r2,205288 <_dtoa_r+0x11b0>
  204de8:	100d883a 	mov	r6,r2
  204dec:	1021883a 	mov	r16,r2
  204df0:	d8800c15 	stw	r2,48(sp)
  204df4:	d8800615 	stw	r2,24(sp)
  204df8:	003d8806 	br	20441c <_gp+0xffdf2838>
  204dfc:	d8800617 	ldw	r2,24(sp)
  204e00:	00be9b16 	blt	zero,r2,204870 <_gp+0xffdf2c8c>
  204e04:	10010f1e 	bne	r2,zero,205244 <_dtoa_r+0x116c>
  204e08:	880b883a 	mov	r5,r17
  204e0c:	000d883a 	mov	r6,zero
  204e10:	01d00534 	movhi	r7,16404
  204e14:	8009883a 	mov	r4,r16
  204e18:	020d1640 	call	20d164 <__muldf3>
  204e1c:	900d883a 	mov	r6,r18
  204e20:	980f883a 	mov	r7,r19
  204e24:	1009883a 	mov	r4,r2
  204e28:	180b883a 	mov	r5,r3
  204e2c:	020cf940 	call	20cf94 <__gedf2>
  204e30:	002b883a 	mov	r21,zero
  204e34:	0023883a 	mov	r17,zero
  204e38:	1000bf16 	blt	r2,zero,205138 <_dtoa_r+0x1060>
  204e3c:	d9802217 	ldw	r6,136(sp)
  204e40:	ddc00717 	ldw	r23,28(sp)
  204e44:	018c303a 	nor	r6,zero,r6
  204e48:	d9800515 	stw	r6,20(sp)
  204e4c:	a80b883a 	mov	r5,r21
  204e50:	e009883a 	mov	r4,fp
  204e54:	02078380 	call	207838 <_Bfree>
  204e58:	883e4926 	beq	r17,zero,204780 <_gp+0xffdf2b9c>
  204e5c:	003fad06 	br	204d14 <_gp+0xffdf3130>
  204e60:	d9c01117 	ldw	r7,68(sp)
  204e64:	3801bc26 	beq	r7,zero,205558 <_dtoa_r+0x1480>
  204e68:	10810cc4 	addi	r2,r2,1075
  204e6c:	dd400a17 	ldw	r21,40(sp)
  204e70:	dd000817 	ldw	r20,32(sp)
  204e74:	003f0a06 	br	204aa0 <_gp+0xffdf2ebc>
  204e78:	00800704 	movi	r2,28
  204e7c:	d9000817 	ldw	r4,32(sp)
  204e80:	a0a9883a 	add	r20,r20,r2
  204e84:	b0ad883a 	add	r22,r22,r2
  204e88:	2089883a 	add	r4,r4,r2
  204e8c:	d9000815 	stw	r4,32(sp)
  204e90:	003f5106 	br	204bd8 <_gp+0xffdf2ff4>
  204e94:	d8c00317 	ldw	r3,12(sp)
  204e98:	b8c1fc0e 	bge	r23,r3,20568c <_dtoa_r+0x15b4>
  204e9c:	0027883a 	mov	r19,zero
  204ea0:	b805883a 	mov	r2,r23
  204ea4:	003f3e06 	br	204ba0 <_gp+0xffdf2fbc>
  204ea8:	880b883a 	mov	r5,r17
  204eac:	e009883a 	mov	r4,fp
  204eb0:	000f883a 	mov	r7,zero
  204eb4:	01800284 	movi	r6,10
  204eb8:	02078600 	call	207860 <__multadd>
  204ebc:	d9000c17 	ldw	r4,48(sp)
  204ec0:	1023883a 	mov	r17,r2
  204ec4:	0102040e 	bge	zero,r4,2056d8 <_dtoa_r+0x1600>
  204ec8:	d9000615 	stw	r4,24(sp)
  204ecc:	0500050e 	bge	zero,r20,204ee4 <_dtoa_r+0xe0c>
  204ed0:	880b883a 	mov	r5,r17
  204ed4:	a00d883a 	mov	r6,r20
  204ed8:	e009883a 	mov	r4,fp
  204edc:	0207fcc0 	call	207fcc <__lshift>
  204ee0:	1023883a 	mov	r17,r2
  204ee4:	9801241e 	bne	r19,zero,205378 <_dtoa_r+0x12a0>
  204ee8:	8829883a 	mov	r20,r17
  204eec:	d9000617 	ldw	r4,24(sp)
  204ef0:	dcc00717 	ldw	r19,28(sp)
  204ef4:	9480004c 	andi	r18,r18,1
  204ef8:	20bfffc4 	addi	r2,r4,-1
  204efc:	9885883a 	add	r2,r19,r2
  204f00:	d8800415 	stw	r2,16(sp)
  204f04:	dc800615 	stw	r18,24(sp)
  204f08:	a80b883a 	mov	r5,r21
  204f0c:	8009883a 	mov	r4,r16
  204f10:	0203eb00 	call	203eb0 <quorem>
  204f14:	880b883a 	mov	r5,r17
  204f18:	8009883a 	mov	r4,r16
  204f1c:	102f883a 	mov	r23,r2
  204f20:	02081140 	call	208114 <__mcmp>
  204f24:	a80b883a 	mov	r5,r21
  204f28:	a00d883a 	mov	r6,r20
  204f2c:	e009883a 	mov	r4,fp
  204f30:	102d883a 	mov	r22,r2
  204f34:	02081740 	call	208174 <__mdiff>
  204f38:	1007883a 	mov	r3,r2
  204f3c:	10800317 	ldw	r2,12(r2)
  204f40:	bc800c04 	addi	r18,r23,48
  204f44:	180b883a 	mov	r5,r3
  204f48:	10004e1e 	bne	r2,zero,205084 <_dtoa_r+0xfac>
  204f4c:	8009883a 	mov	r4,r16
  204f50:	d8c01615 	stw	r3,88(sp)
  204f54:	02081140 	call	208114 <__mcmp>
  204f58:	d8c01617 	ldw	r3,88(sp)
  204f5c:	e009883a 	mov	r4,fp
  204f60:	d8801615 	stw	r2,88(sp)
  204f64:	180b883a 	mov	r5,r3
  204f68:	02078380 	call	207838 <_Bfree>
  204f6c:	d8801617 	ldw	r2,88(sp)
  204f70:	1000041e 	bne	r2,zero,204f84 <_dtoa_r+0xeac>
  204f74:	d9800317 	ldw	r6,12(sp)
  204f78:	3000021e 	bne	r6,zero,204f84 <_dtoa_r+0xeac>
  204f7c:	d8c00617 	ldw	r3,24(sp)
  204f80:	18003726 	beq	r3,zero,205060 <_dtoa_r+0xf88>
  204f84:	b0002016 	blt	r22,zero,205008 <_dtoa_r+0xf30>
  204f88:	b000041e 	bne	r22,zero,204f9c <_dtoa_r+0xec4>
  204f8c:	d9000317 	ldw	r4,12(sp)
  204f90:	2000021e 	bne	r4,zero,204f9c <_dtoa_r+0xec4>
  204f94:	d8c00617 	ldw	r3,24(sp)
  204f98:	18001b26 	beq	r3,zero,205008 <_dtoa_r+0xf30>
  204f9c:	00810716 	blt	zero,r2,2053bc <_dtoa_r+0x12e4>
  204fa0:	d8c00417 	ldw	r3,16(sp)
  204fa4:	9d800044 	addi	r22,r19,1
  204fa8:	9c800005 	stb	r18,0(r19)
  204fac:	b02f883a 	mov	r23,r22
  204fb0:	98c10626 	beq	r19,r3,2053cc <_dtoa_r+0x12f4>
  204fb4:	800b883a 	mov	r5,r16
  204fb8:	000f883a 	mov	r7,zero
  204fbc:	01800284 	movi	r6,10
  204fc0:	e009883a 	mov	r4,fp
  204fc4:	02078600 	call	207860 <__multadd>
  204fc8:	1021883a 	mov	r16,r2
  204fcc:	000f883a 	mov	r7,zero
  204fd0:	01800284 	movi	r6,10
  204fd4:	880b883a 	mov	r5,r17
  204fd8:	e009883a 	mov	r4,fp
  204fdc:	8d002526 	beq	r17,r20,205074 <_dtoa_r+0xf9c>
  204fe0:	02078600 	call	207860 <__multadd>
  204fe4:	a00b883a 	mov	r5,r20
  204fe8:	000f883a 	mov	r7,zero
  204fec:	01800284 	movi	r6,10
  204ff0:	e009883a 	mov	r4,fp
  204ff4:	1023883a 	mov	r17,r2
  204ff8:	02078600 	call	207860 <__multadd>
  204ffc:	1029883a 	mov	r20,r2
  205000:	b027883a 	mov	r19,r22
  205004:	003fc006 	br	204f08 <_gp+0xffdf3324>
  205008:	9011883a 	mov	r8,r18
  20500c:	00800e0e 	bge	zero,r2,205048 <_dtoa_r+0xf70>
  205010:	800b883a 	mov	r5,r16
  205014:	01800044 	movi	r6,1
  205018:	e009883a 	mov	r4,fp
  20501c:	da001715 	stw	r8,92(sp)
  205020:	0207fcc0 	call	207fcc <__lshift>
  205024:	a80b883a 	mov	r5,r21
  205028:	1009883a 	mov	r4,r2
  20502c:	1021883a 	mov	r16,r2
  205030:	02081140 	call	208114 <__mcmp>
  205034:	da001717 	ldw	r8,92(sp)
  205038:	0081960e 	bge	zero,r2,205694 <_dtoa_r+0x15bc>
  20503c:	00800e44 	movi	r2,57
  205040:	40817026 	beq	r8,r2,205604 <_dtoa_r+0x152c>
  205044:	ba000c44 	addi	r8,r23,49
  205048:	8825883a 	mov	r18,r17
  20504c:	9dc00044 	addi	r23,r19,1
  205050:	9a000005 	stb	r8,0(r19)
  205054:	a023883a 	mov	r17,r20
  205058:	dc000915 	stw	r16,36(sp)
  20505c:	003f2406 	br	204cf0 <_gp+0xffdf310c>
  205060:	00800e44 	movi	r2,57
  205064:	9011883a 	mov	r8,r18
  205068:	90816626 	beq	r18,r2,205604 <_dtoa_r+0x152c>
  20506c:	05bff516 	blt	zero,r22,205044 <_gp+0xffdf3460>
  205070:	003ff506 	br	205048 <_gp+0xffdf3464>
  205074:	02078600 	call	207860 <__multadd>
  205078:	1023883a 	mov	r17,r2
  20507c:	1029883a 	mov	r20,r2
  205080:	003fdf06 	br	205000 <_gp+0xffdf341c>
  205084:	e009883a 	mov	r4,fp
  205088:	02078380 	call	207838 <_Bfree>
  20508c:	00800044 	movi	r2,1
  205090:	003fbc06 	br	204f84 <_gp+0xffdf33a0>
  205094:	a80b883a 	mov	r5,r21
  205098:	8009883a 	mov	r4,r16
  20509c:	02081140 	call	208114 <__mcmp>
  2050a0:	103edb0e 	bge	r2,zero,204c10 <_gp+0xffdf302c>
  2050a4:	800b883a 	mov	r5,r16
  2050a8:	000f883a 	mov	r7,zero
  2050ac:	01800284 	movi	r6,10
  2050b0:	e009883a 	mov	r4,fp
  2050b4:	02078600 	call	207860 <__multadd>
  2050b8:	1021883a 	mov	r16,r2
  2050bc:	d8800517 	ldw	r2,20(sp)
  2050c0:	d8c00b17 	ldw	r3,44(sp)
  2050c4:	10bfffc4 	addi	r2,r2,-1
  2050c8:	d8800515 	stw	r2,20(sp)
  2050cc:	183f761e 	bne	r3,zero,204ea8 <_gp+0xffdf32c4>
  2050d0:	d9000c17 	ldw	r4,48(sp)
  2050d4:	0101730e 	bge	zero,r4,2056a4 <_dtoa_r+0x15cc>
  2050d8:	d9000615 	stw	r4,24(sp)
  2050dc:	003ed006 	br	204c20 <_gp+0xffdf303c>
  2050e0:	00800084 	movi	r2,2
  2050e4:	3081861e 	bne	r6,r2,205700 <_dtoa_r+0x1628>
  2050e8:	d8000b15 	stw	zero,44(sp)
  2050ec:	003f3c06 	br	204de0 <_gp+0xffdf31fc>
  2050f0:	dc000917 	ldw	r16,36(sp)
  2050f4:	003e9206 	br	204b40 <_gp+0xffdf2f5c>
  2050f8:	d9c00317 	ldw	r7,12(sp)
  2050fc:	00800084 	movi	r2,2
  205100:	11fec50e 	bge	r2,r7,204c18 <_gp+0xffdf3034>
  205104:	d9000617 	ldw	r4,24(sp)
  205108:	20013c1e 	bne	r4,zero,2055fc <_dtoa_r+0x1524>
  20510c:	a80b883a 	mov	r5,r21
  205110:	000f883a 	mov	r7,zero
  205114:	01800144 	movi	r6,5
  205118:	e009883a 	mov	r4,fp
  20511c:	02078600 	call	207860 <__multadd>
  205120:	100b883a 	mov	r5,r2
  205124:	8009883a 	mov	r4,r16
  205128:	102b883a 	mov	r21,r2
  20512c:	02081140 	call	208114 <__mcmp>
  205130:	dc000915 	stw	r16,36(sp)
  205134:	00bf410e 	bge	zero,r2,204e3c <_gp+0xffdf3258>
  205138:	d9c00717 	ldw	r7,28(sp)
  20513c:	00800c44 	movi	r2,49
  205140:	38800005 	stb	r2,0(r7)
  205144:	d8800517 	ldw	r2,20(sp)
  205148:	3dc00044 	addi	r23,r7,1
  20514c:	10800044 	addi	r2,r2,1
  205150:	d8800515 	stw	r2,20(sp)
  205154:	003f3d06 	br	204e4c <_gp+0xffdf3268>
  205158:	d9800517 	ldw	r6,20(sp)
  20515c:	d9c00717 	ldw	r7,28(sp)
  205160:	00800c44 	movi	r2,49
  205164:	31800044 	addi	r6,r6,1
  205168:	d9800515 	stw	r6,20(sp)
  20516c:	38800005 	stb	r2,0(r7)
  205170:	003edf06 	br	204cf0 <_gp+0xffdf310c>
  205174:	d8000b15 	stw	zero,44(sp)
  205178:	003c9f06 	br	2043f8 <_gp+0xffdf2814>
  20517c:	903e7e1e 	bne	r18,zero,204b78 <_gp+0xffdf2f94>
  205180:	00800434 	movhi	r2,16
  205184:	10bfffc4 	addi	r2,r2,-1
  205188:	9884703a 	and	r2,r19,r2
  20518c:	1000ea1e 	bne	r2,zero,205538 <_dtoa_r+0x1460>
  205190:	9cdffc2c 	andhi	r19,r19,32752
  205194:	9800e826 	beq	r19,zero,205538 <_dtoa_r+0x1460>
  205198:	d9c00817 	ldw	r7,32(sp)
  20519c:	b5800044 	addi	r22,r22,1
  2051a0:	04c00044 	movi	r19,1
  2051a4:	39c00044 	addi	r7,r7,1
  2051a8:	d9c00815 	stw	r7,32(sp)
  2051ac:	d8800d17 	ldw	r2,52(sp)
  2051b0:	103e721e 	bne	r2,zero,204b7c <_gp+0xffdf2f98>
  2051b4:	00800044 	movi	r2,1
  2051b8:	003e7906 	br	204ba0 <_gp+0xffdf2fbc>
  2051bc:	8009883a 	mov	r4,r16
  2051c0:	020e34c0 	call	20e34c <__floatsidf>
  2051c4:	d9800f17 	ldw	r6,60(sp)
  2051c8:	d9c01017 	ldw	r7,64(sp)
  2051cc:	1009883a 	mov	r4,r2
  2051d0:	180b883a 	mov	r5,r3
  2051d4:	020d1640 	call	20d164 <__muldf3>
  2051d8:	000d883a 	mov	r6,zero
  2051dc:	01d00734 	movhi	r7,16412
  2051e0:	1009883a 	mov	r4,r2
  2051e4:	180b883a 	mov	r5,r3
  2051e8:	020bc900 	call	20bc90 <__adddf3>
  2051ec:	047f3034 	movhi	r17,64704
  2051f0:	1021883a 	mov	r16,r2
  2051f4:	1c63883a 	add	r17,r3,r17
  2051f8:	d9000f17 	ldw	r4,60(sp)
  2051fc:	d9401017 	ldw	r5,64(sp)
  205200:	000d883a 	mov	r6,zero
  205204:	01d00534 	movhi	r7,16404
  205208:	020d9d00 	call	20d9d0 <__subdf3>
  20520c:	800d883a 	mov	r6,r16
  205210:	880f883a 	mov	r7,r17
  205214:	1009883a 	mov	r4,r2
  205218:	180b883a 	mov	r5,r3
  20521c:	102b883a 	mov	r21,r2
  205220:	1829883a 	mov	r20,r3
  205224:	020cf940 	call	20cf94 <__gedf2>
  205228:	00806c16 	blt	zero,r2,2053dc <_dtoa_r+0x1304>
  20522c:	89e0003c 	xorhi	r7,r17,32768
  205230:	800d883a 	mov	r6,r16
  205234:	a809883a 	mov	r4,r21
  205238:	a00b883a 	mov	r5,r20
  20523c:	020d0700 	call	20d070 <__ledf2>
  205240:	103d7e0e 	bge	r2,zero,20483c <_gp+0xffdf2c58>
  205244:	002b883a 	mov	r21,zero
  205248:	0023883a 	mov	r17,zero
  20524c:	003efb06 	br	204e3c <_gp+0xffdf3258>
  205250:	d8800717 	ldw	r2,28(sp)
  205254:	003bd006 	br	204198 <_gp+0xffdf25b4>
  205258:	d9000a17 	ldw	r4,40(sp)
  20525c:	d9800d17 	ldw	r6,52(sp)
  205260:	dd400a15 	stw	r21,40(sp)
  205264:	a905c83a 	sub	r2,r21,r4
  205268:	308d883a 	add	r6,r6,r2
  20526c:	d9800d15 	stw	r6,52(sp)
  205270:	002b883a 	mov	r21,zero
  205274:	003e0606 	br	204a90 <_gp+0xffdf2eac>
  205278:	9023883a 	mov	r17,r18
  20527c:	9829883a 	mov	r20,r19
  205280:	04000084 	movi	r16,2
  205284:	003c9206 	br	2044d0 <_gp+0xffdf28ec>
  205288:	04000044 	movi	r16,1
  20528c:	dc000c15 	stw	r16,48(sp)
  205290:	dc000615 	stw	r16,24(sp)
  205294:	dc002215 	stw	r16,136(sp)
  205298:	e0001115 	stw	zero,68(fp)
  20529c:	000b883a 	mov	r5,zero
  2052a0:	003c6906 	br	204448 <_gp+0xffdf2864>
  2052a4:	3021883a 	mov	r16,r6
  2052a8:	003ffb06 	br	205298 <_gp+0xffdf36b4>
  2052ac:	1000021e 	bne	r2,zero,2052b8 <_dtoa_r+0x11e0>
  2052b0:	4200004c 	andi	r8,r8,1
  2052b4:	403e7d1e 	bne	r8,zero,204cac <_gp+0xffdf30c8>
  2052b8:	01000c04 	movi	r4,48
  2052bc:	00000106 	br	2052c4 <_dtoa_r+0x11ec>
  2052c0:	102f883a 	mov	r23,r2
  2052c4:	b8bfffc4 	addi	r2,r23,-1
  2052c8:	10c00007 	ldb	r3,0(r2)
  2052cc:	193ffc26 	beq	r3,r4,2052c0 <_gp+0xffdf36dc>
  2052d0:	003e8706 	br	204cf0 <_gp+0xffdf310c>
  2052d4:	d8800517 	ldw	r2,20(sp)
  2052d8:	00a3c83a 	sub	r17,zero,r2
  2052dc:	8800a426 	beq	r17,zero,205570 <_dtoa_r+0x1498>
  2052e0:	888003cc 	andi	r2,r17,15
  2052e4:	100490fa 	slli	r2,r2,3
  2052e8:	00c00874 	movhi	r3,33
  2052ec:	18d07b04 	addi	r3,r3,16876
  2052f0:	1885883a 	add	r2,r3,r2
  2052f4:	11800017 	ldw	r6,0(r2)
  2052f8:	11c00117 	ldw	r7,4(r2)
  2052fc:	9009883a 	mov	r4,r18
  205300:	980b883a 	mov	r5,r19
  205304:	8823d13a 	srai	r17,r17,4
  205308:	020d1640 	call	20d164 <__muldf3>
  20530c:	d8800f15 	stw	r2,60(sp)
  205310:	d8c01015 	stw	r3,64(sp)
  205314:	8800e826 	beq	r17,zero,2056b8 <_dtoa_r+0x15e0>
  205318:	05000874 	movhi	r20,33
  20531c:	a5107104 	addi	r20,r20,16836
  205320:	04000084 	movi	r16,2
  205324:	8980004c 	andi	r6,r17,1
  205328:	1009883a 	mov	r4,r2
  20532c:	8823d07a 	srai	r17,r17,1
  205330:	180b883a 	mov	r5,r3
  205334:	30000426 	beq	r6,zero,205348 <_dtoa_r+0x1270>
  205338:	a1800017 	ldw	r6,0(r20)
  20533c:	a1c00117 	ldw	r7,4(r20)
  205340:	84000044 	addi	r16,r16,1
  205344:	020d1640 	call	20d164 <__muldf3>
  205348:	a5000204 	addi	r20,r20,8
  20534c:	883ff51e 	bne	r17,zero,205324 <_gp+0xffdf3740>
  205350:	d8800f15 	stw	r2,60(sp)
  205354:	d8c01015 	stw	r3,64(sp)
  205358:	003c7606 	br	204534 <_gp+0xffdf2950>
  20535c:	00c00c04 	movi	r3,48
  205360:	10c00005 	stb	r3,0(r2)
  205364:	d8c00517 	ldw	r3,20(sp)
  205368:	bd3fffc3 	ldbu	r20,-1(r23)
  20536c:	18c00044 	addi	r3,r3,1
  205370:	d8c00515 	stw	r3,20(sp)
  205374:	003db906 	br	204a5c <_gp+0xffdf2e78>
  205378:	89400117 	ldw	r5,4(r17)
  20537c:	e009883a 	mov	r4,fp
  205380:	02077900 	call	207790 <_Balloc>
  205384:	89800417 	ldw	r6,16(r17)
  205388:	89400304 	addi	r5,r17,12
  20538c:	11000304 	addi	r4,r2,12
  205390:	31800084 	addi	r6,r6,2
  205394:	318d883a 	add	r6,r6,r6
  205398:	318d883a 	add	r6,r6,r6
  20539c:	1027883a 	mov	r19,r2
  2053a0:	02073c40 	call	2073c4 <memcpy>
  2053a4:	01800044 	movi	r6,1
  2053a8:	980b883a 	mov	r5,r19
  2053ac:	e009883a 	mov	r4,fp
  2053b0:	0207fcc0 	call	207fcc <__lshift>
  2053b4:	1029883a 	mov	r20,r2
  2053b8:	003ecc06 	br	204eec <_gp+0xffdf3308>
  2053bc:	00800e44 	movi	r2,57
  2053c0:	90809026 	beq	r18,r2,205604 <_dtoa_r+0x152c>
  2053c4:	92000044 	addi	r8,r18,1
  2053c8:	003f1f06 	br	205048 <_gp+0xffdf3464>
  2053cc:	9011883a 	mov	r8,r18
  2053d0:	8825883a 	mov	r18,r17
  2053d4:	a023883a 	mov	r17,r20
  2053d8:	003e2906 	br	204c80 <_gp+0xffdf309c>
  2053dc:	002b883a 	mov	r21,zero
  2053e0:	0023883a 	mov	r17,zero
  2053e4:	003f5406 	br	205138 <_gp+0xffdf3554>
  2053e8:	61bfffc4 	addi	r6,r12,-1
  2053ec:	300490fa 	slli	r2,r6,3
  2053f0:	00c00874 	movhi	r3,33
  2053f4:	18d07b04 	addi	r3,r3,16876
  2053f8:	1885883a 	add	r2,r3,r2
  2053fc:	11000017 	ldw	r4,0(r2)
  205400:	11400117 	ldw	r5,4(r2)
  205404:	d8800717 	ldw	r2,28(sp)
  205408:	880f883a 	mov	r7,r17
  20540c:	d9801215 	stw	r6,72(sp)
  205410:	800d883a 	mov	r6,r16
  205414:	db001615 	stw	r12,88(sp)
  205418:	15c00044 	addi	r23,r2,1
  20541c:	020d1640 	call	20d164 <__muldf3>
  205420:	d9401017 	ldw	r5,64(sp)
  205424:	d9000f17 	ldw	r4,60(sp)
  205428:	d8c01515 	stw	r3,84(sp)
  20542c:	d8801415 	stw	r2,80(sp)
  205430:	020e2cc0 	call	20e2cc <__fixdfsi>
  205434:	1009883a 	mov	r4,r2
  205438:	1021883a 	mov	r16,r2
  20543c:	020e34c0 	call	20e34c <__floatsidf>
  205440:	d9000f17 	ldw	r4,60(sp)
  205444:	d9401017 	ldw	r5,64(sp)
  205448:	100d883a 	mov	r6,r2
  20544c:	180f883a 	mov	r7,r3
  205450:	020d9d00 	call	20d9d0 <__subdf3>
  205454:	1829883a 	mov	r20,r3
  205458:	d8c00717 	ldw	r3,28(sp)
  20545c:	84000c04 	addi	r16,r16,48
  205460:	1023883a 	mov	r17,r2
  205464:	1c000005 	stb	r16,0(r3)
  205468:	db001617 	ldw	r12,88(sp)
  20546c:	00800044 	movi	r2,1
  205470:	60802226 	beq	r12,r2,2054fc <_dtoa_r+0x1424>
  205474:	d9c00717 	ldw	r7,28(sp)
  205478:	8805883a 	mov	r2,r17
  20547c:	b82b883a 	mov	r21,r23
  205480:	3b19883a 	add	r12,r7,r12
  205484:	6023883a 	mov	r17,r12
  205488:	a007883a 	mov	r3,r20
  20548c:	dc800f15 	stw	r18,60(sp)
  205490:	000d883a 	mov	r6,zero
  205494:	01d00934 	movhi	r7,16420
  205498:	1009883a 	mov	r4,r2
  20549c:	180b883a 	mov	r5,r3
  2054a0:	020d1640 	call	20d164 <__muldf3>
  2054a4:	180b883a 	mov	r5,r3
  2054a8:	1009883a 	mov	r4,r2
  2054ac:	1829883a 	mov	r20,r3
  2054b0:	1025883a 	mov	r18,r2
  2054b4:	020e2cc0 	call	20e2cc <__fixdfsi>
  2054b8:	1009883a 	mov	r4,r2
  2054bc:	1021883a 	mov	r16,r2
  2054c0:	020e34c0 	call	20e34c <__floatsidf>
  2054c4:	100d883a 	mov	r6,r2
  2054c8:	180f883a 	mov	r7,r3
  2054cc:	9009883a 	mov	r4,r18
  2054d0:	a00b883a 	mov	r5,r20
  2054d4:	84000c04 	addi	r16,r16,48
  2054d8:	020d9d00 	call	20d9d0 <__subdf3>
  2054dc:	ad400044 	addi	r21,r21,1
  2054e0:	ac3fffc5 	stb	r16,-1(r21)
  2054e4:	ac7fea1e 	bne	r21,r17,205490 <_gp+0xffdf38ac>
  2054e8:	1023883a 	mov	r17,r2
  2054ec:	d8801217 	ldw	r2,72(sp)
  2054f0:	dc800f17 	ldw	r18,60(sp)
  2054f4:	1829883a 	mov	r20,r3
  2054f8:	b8af883a 	add	r23,r23,r2
  2054fc:	d9001417 	ldw	r4,80(sp)
  205500:	d9401517 	ldw	r5,84(sp)
  205504:	000d883a 	mov	r6,zero
  205508:	01cff834 	movhi	r7,16352
  20550c:	020bc900 	call	20bc90 <__adddf3>
  205510:	880d883a 	mov	r6,r17
  205514:	a00f883a 	mov	r7,r20
  205518:	1009883a 	mov	r4,r2
  20551c:	180b883a 	mov	r5,r3
  205520:	020d0700 	call	20d070 <__ledf2>
  205524:	10003e0e 	bge	r2,zero,205620 <_dtoa_r+0x1548>
  205528:	d9001317 	ldw	r4,76(sp)
  20552c:	bd3fffc3 	ldbu	r20,-1(r23)
  205530:	d9000515 	stw	r4,20(sp)
  205534:	003d3b06 	br	204a24 <_gp+0xffdf2e40>
  205538:	0027883a 	mov	r19,zero
  20553c:	003f1b06 	br	2051ac <_gp+0xffdf35c8>
  205540:	d8800817 	ldw	r2,32(sp)
  205544:	11e9c83a 	sub	r20,r2,r7
  205548:	0005883a 	mov	r2,zero
  20554c:	003d5406 	br	204aa0 <_gp+0xffdf2ebc>
  205550:	00800044 	movi	r2,1
  205554:	003dc706 	br	204c74 <_gp+0xffdf3090>
  205558:	d8c00217 	ldw	r3,8(sp)
  20555c:	00800d84 	movi	r2,54
  205560:	dd400a17 	ldw	r21,40(sp)
  205564:	10c5c83a 	sub	r2,r2,r3
  205568:	dd000817 	ldw	r20,32(sp)
  20556c:	003d4c06 	br	204aa0 <_gp+0xffdf2ebc>
  205570:	dc800f15 	stw	r18,60(sp)
  205574:	dcc01015 	stw	r19,64(sp)
  205578:	04000084 	movi	r16,2
  20557c:	003bed06 	br	204534 <_gp+0xffdf2950>
  205580:	d9000617 	ldw	r4,24(sp)
  205584:	203f0d26 	beq	r4,zero,2051bc <_gp+0xffdf35d8>
  205588:	d9800c17 	ldw	r6,48(sp)
  20558c:	01bcab0e 	bge	zero,r6,20483c <_gp+0xffdf2c58>
  205590:	d9401017 	ldw	r5,64(sp)
  205594:	d9000f17 	ldw	r4,60(sp)
  205598:	000d883a 	mov	r6,zero
  20559c:	01d00934 	movhi	r7,16420
  2055a0:	020d1640 	call	20d164 <__muldf3>
  2055a4:	81000044 	addi	r4,r16,1
  2055a8:	d8800f15 	stw	r2,60(sp)
  2055ac:	d8c01015 	stw	r3,64(sp)
  2055b0:	020e34c0 	call	20e34c <__floatsidf>
  2055b4:	d9800f17 	ldw	r6,60(sp)
  2055b8:	d9c01017 	ldw	r7,64(sp)
  2055bc:	1009883a 	mov	r4,r2
  2055c0:	180b883a 	mov	r5,r3
  2055c4:	020d1640 	call	20d164 <__muldf3>
  2055c8:	01d00734 	movhi	r7,16412
  2055cc:	000d883a 	mov	r6,zero
  2055d0:	1009883a 	mov	r4,r2
  2055d4:	180b883a 	mov	r5,r3
  2055d8:	020bc900 	call	20bc90 <__adddf3>
  2055dc:	d9c00517 	ldw	r7,20(sp)
  2055e0:	047f3034 	movhi	r17,64704
  2055e4:	1021883a 	mov	r16,r2
  2055e8:	39ffffc4 	addi	r7,r7,-1
  2055ec:	d9c01315 	stw	r7,76(sp)
  2055f0:	1c63883a 	add	r17,r3,r17
  2055f4:	db000c17 	ldw	r12,48(sp)
  2055f8:	003bea06 	br	2045a4 <_gp+0xffdf29c0>
  2055fc:	dc000915 	stw	r16,36(sp)
  205600:	003e0e06 	br	204e3c <_gp+0xffdf3258>
  205604:	01000e44 	movi	r4,57
  205608:	8825883a 	mov	r18,r17
  20560c:	9dc00044 	addi	r23,r19,1
  205610:	99000005 	stb	r4,0(r19)
  205614:	a023883a 	mov	r17,r20
  205618:	dc000915 	stw	r16,36(sp)
  20561c:	003da406 	br	204cb0 <_gp+0xffdf30cc>
  205620:	d9801417 	ldw	r6,80(sp)
  205624:	d9c01517 	ldw	r7,84(sp)
  205628:	0009883a 	mov	r4,zero
  20562c:	014ff834 	movhi	r5,16352
  205630:	020d9d00 	call	20d9d0 <__subdf3>
  205634:	880d883a 	mov	r6,r17
  205638:	a00f883a 	mov	r7,r20
  20563c:	1009883a 	mov	r4,r2
  205640:	180b883a 	mov	r5,r3
  205644:	020cf940 	call	20cf94 <__gedf2>
  205648:	00bc7c0e 	bge	zero,r2,20483c <_gp+0xffdf2c58>
  20564c:	01000c04 	movi	r4,48
  205650:	00000106 	br	205658 <_dtoa_r+0x1580>
  205654:	102f883a 	mov	r23,r2
  205658:	b8bfffc4 	addi	r2,r23,-1
  20565c:	10c00007 	ldb	r3,0(r2)
  205660:	193ffc26 	beq	r3,r4,205654 <_gp+0xffdf3a70>
  205664:	d9801317 	ldw	r6,76(sp)
  205668:	d9800515 	stw	r6,20(sp)
  20566c:	003c4406 	br	204780 <_gp+0xffdf2b9c>
  205670:	d9801317 	ldw	r6,76(sp)
  205674:	d9800515 	stw	r6,20(sp)
  205678:	003cea06 	br	204a24 <_gp+0xffdf2e40>
  20567c:	dd800f17 	ldw	r22,60(sp)
  205680:	dcc01017 	ldw	r19,64(sp)
  205684:	dc801217 	ldw	r18,72(sp)
  205688:	003c6c06 	br	20483c <_gp+0xffdf2c58>
  20568c:	903e031e 	bne	r18,zero,204e9c <_gp+0xffdf32b8>
  205690:	003ebb06 	br	205180 <_gp+0xffdf359c>
  205694:	103e6c1e 	bne	r2,zero,205048 <_gp+0xffdf3464>
  205698:	4080004c 	andi	r2,r8,1
  20569c:	103e6a26 	beq	r2,zero,205048 <_gp+0xffdf3464>
  2056a0:	003e6606 	br	20503c <_gp+0xffdf3458>
  2056a4:	d8c00317 	ldw	r3,12(sp)
  2056a8:	00800084 	movi	r2,2
  2056ac:	10c02916 	blt	r2,r3,205754 <_dtoa_r+0x167c>
  2056b0:	d9000c17 	ldw	r4,48(sp)
  2056b4:	003e8806 	br	2050d8 <_gp+0xffdf34f4>
  2056b8:	04000084 	movi	r16,2
  2056bc:	003b9d06 	br	204534 <_gp+0xffdf2950>
  2056c0:	d9001317 	ldw	r4,76(sp)
  2056c4:	d9000515 	stw	r4,20(sp)
  2056c8:	003cd606 	br	204a24 <_gp+0xffdf2e40>
  2056cc:	d8801317 	ldw	r2,76(sp)
  2056d0:	d8800515 	stw	r2,20(sp)
  2056d4:	003c2a06 	br	204780 <_gp+0xffdf2b9c>
  2056d8:	d9800317 	ldw	r6,12(sp)
  2056dc:	00800084 	movi	r2,2
  2056e0:	11801516 	blt	r2,r6,205738 <_dtoa_r+0x1660>
  2056e4:	d9c00c17 	ldw	r7,48(sp)
  2056e8:	d9c00615 	stw	r7,24(sp)
  2056ec:	003df706 	br	204ecc <_gp+0xffdf32e8>
  2056f0:	193d3926 	beq	r3,r4,204bd8 <_gp+0xffdf2ff4>
  2056f4:	00c00f04 	movi	r3,60
  2056f8:	1885c83a 	sub	r2,r3,r2
  2056fc:	003ddf06 	br	204e7c <_gp+0xffdf3298>
  205700:	e009883a 	mov	r4,fp
  205704:	e0001115 	stw	zero,68(fp)
  205708:	000b883a 	mov	r5,zero
  20570c:	02077900 	call	207790 <_Balloc>
  205710:	d8800715 	stw	r2,28(sp)
  205714:	d8c00717 	ldw	r3,28(sp)
  205718:	00bfffc4 	movi	r2,-1
  20571c:	01000044 	movi	r4,1
  205720:	d8800c15 	stw	r2,48(sp)
  205724:	e0c01015 	stw	r3,64(fp)
  205728:	d9000b15 	stw	r4,44(sp)
  20572c:	d8800615 	stw	r2,24(sp)
  205730:	d8002215 	stw	zero,136(sp)
  205734:	003c4106 	br	20483c <_gp+0xffdf2c58>
  205738:	d8c00c17 	ldw	r3,48(sp)
  20573c:	d8c00615 	stw	r3,24(sp)
  205740:	003e7006 	br	205104 <_gp+0xffdf3520>
  205744:	04400044 	movi	r17,1
  205748:	003b2006 	br	2043cc <_gp+0xffdf27e8>
  20574c:	000b883a 	mov	r5,zero
  205750:	003b3d06 	br	204448 <_gp+0xffdf2864>
  205754:	d8800c17 	ldw	r2,48(sp)
  205758:	d8800615 	stw	r2,24(sp)
  20575c:	003e6906 	br	205104 <_gp+0xffdf3520>

00205760 <__sflush_r>:
  205760:	2880030b 	ldhu	r2,12(r5)
  205764:	defffb04 	addi	sp,sp,-20
  205768:	dcc00315 	stw	r19,12(sp)
  20576c:	dc400115 	stw	r17,4(sp)
  205770:	dfc00415 	stw	ra,16(sp)
  205774:	dc800215 	stw	r18,8(sp)
  205778:	dc000015 	stw	r16,0(sp)
  20577c:	10c0020c 	andi	r3,r2,8
  205780:	2823883a 	mov	r17,r5
  205784:	2027883a 	mov	r19,r4
  205788:	1800311e 	bne	r3,zero,205850 <__sflush_r+0xf0>
  20578c:	28c00117 	ldw	r3,4(r5)
  205790:	10820014 	ori	r2,r2,2048
  205794:	2880030d 	sth	r2,12(r5)
  205798:	00c04b0e 	bge	zero,r3,2058c8 <__sflush_r+0x168>
  20579c:	8a000a17 	ldw	r8,40(r17)
  2057a0:	40002326 	beq	r8,zero,205830 <__sflush_r+0xd0>
  2057a4:	9c000017 	ldw	r16,0(r19)
  2057a8:	10c4000c 	andi	r3,r2,4096
  2057ac:	98000015 	stw	zero,0(r19)
  2057b0:	18004826 	beq	r3,zero,2058d4 <__sflush_r+0x174>
  2057b4:	89801417 	ldw	r6,80(r17)
  2057b8:	10c0010c 	andi	r3,r2,4
  2057bc:	18000626 	beq	r3,zero,2057d8 <__sflush_r+0x78>
  2057c0:	88c00117 	ldw	r3,4(r17)
  2057c4:	88800c17 	ldw	r2,48(r17)
  2057c8:	30cdc83a 	sub	r6,r6,r3
  2057cc:	10000226 	beq	r2,zero,2057d8 <__sflush_r+0x78>
  2057d0:	88800f17 	ldw	r2,60(r17)
  2057d4:	308dc83a 	sub	r6,r6,r2
  2057d8:	89400717 	ldw	r5,28(r17)
  2057dc:	000f883a 	mov	r7,zero
  2057e0:	9809883a 	mov	r4,r19
  2057e4:	403ee83a 	callr	r8
  2057e8:	00ffffc4 	movi	r3,-1
  2057ec:	10c04426 	beq	r2,r3,205900 <__sflush_r+0x1a0>
  2057f0:	88c0030b 	ldhu	r3,12(r17)
  2057f4:	89000417 	ldw	r4,16(r17)
  2057f8:	88000115 	stw	zero,4(r17)
  2057fc:	197dffcc 	andi	r5,r3,63487
  205800:	8940030d 	sth	r5,12(r17)
  205804:	89000015 	stw	r4,0(r17)
  205808:	18c4000c 	andi	r3,r3,4096
  20580c:	18002c1e 	bne	r3,zero,2058c0 <__sflush_r+0x160>
  205810:	89400c17 	ldw	r5,48(r17)
  205814:	9c000015 	stw	r16,0(r19)
  205818:	28000526 	beq	r5,zero,205830 <__sflush_r+0xd0>
  20581c:	88801004 	addi	r2,r17,64
  205820:	28800226 	beq	r5,r2,20582c <__sflush_r+0xcc>
  205824:	9809883a 	mov	r4,r19
  205828:	0205edc0 	call	205edc <_free_r>
  20582c:	88000c15 	stw	zero,48(r17)
  205830:	0005883a 	mov	r2,zero
  205834:	dfc00417 	ldw	ra,16(sp)
  205838:	dcc00317 	ldw	r19,12(sp)
  20583c:	dc800217 	ldw	r18,8(sp)
  205840:	dc400117 	ldw	r17,4(sp)
  205844:	dc000017 	ldw	r16,0(sp)
  205848:	dec00504 	addi	sp,sp,20
  20584c:	f800283a 	ret
  205850:	2c800417 	ldw	r18,16(r5)
  205854:	903ff626 	beq	r18,zero,205830 <_gp+0xffdf3c4c>
  205858:	2c000017 	ldw	r16,0(r5)
  20585c:	108000cc 	andi	r2,r2,3
  205860:	2c800015 	stw	r18,0(r5)
  205864:	84a1c83a 	sub	r16,r16,r18
  205868:	1000131e 	bne	r2,zero,2058b8 <__sflush_r+0x158>
  20586c:	28800517 	ldw	r2,20(r5)
  205870:	88800215 	stw	r2,8(r17)
  205874:	04000316 	blt	zero,r16,205884 <__sflush_r+0x124>
  205878:	003fed06 	br	205830 <_gp+0xffdf3c4c>
  20587c:	90a5883a 	add	r18,r18,r2
  205880:	043feb0e 	bge	zero,r16,205830 <_gp+0xffdf3c4c>
  205884:	88800917 	ldw	r2,36(r17)
  205888:	89400717 	ldw	r5,28(r17)
  20588c:	800f883a 	mov	r7,r16
  205890:	900d883a 	mov	r6,r18
  205894:	9809883a 	mov	r4,r19
  205898:	103ee83a 	callr	r2
  20589c:	80a1c83a 	sub	r16,r16,r2
  2058a0:	00bff616 	blt	zero,r2,20587c <_gp+0xffdf3c98>
  2058a4:	88c0030b 	ldhu	r3,12(r17)
  2058a8:	00bfffc4 	movi	r2,-1
  2058ac:	18c01014 	ori	r3,r3,64
  2058b0:	88c0030d 	sth	r3,12(r17)
  2058b4:	003fdf06 	br	205834 <_gp+0xffdf3c50>
  2058b8:	0005883a 	mov	r2,zero
  2058bc:	003fec06 	br	205870 <_gp+0xffdf3c8c>
  2058c0:	88801415 	stw	r2,80(r17)
  2058c4:	003fd206 	br	205810 <_gp+0xffdf3c2c>
  2058c8:	28c00f17 	ldw	r3,60(r5)
  2058cc:	00ffb316 	blt	zero,r3,20579c <_gp+0xffdf3bb8>
  2058d0:	003fd706 	br	205830 <_gp+0xffdf3c4c>
  2058d4:	89400717 	ldw	r5,28(r17)
  2058d8:	000d883a 	mov	r6,zero
  2058dc:	01c00044 	movi	r7,1
  2058e0:	9809883a 	mov	r4,r19
  2058e4:	403ee83a 	callr	r8
  2058e8:	100d883a 	mov	r6,r2
  2058ec:	00bfffc4 	movi	r2,-1
  2058f0:	30801426 	beq	r6,r2,205944 <__sflush_r+0x1e4>
  2058f4:	8880030b 	ldhu	r2,12(r17)
  2058f8:	8a000a17 	ldw	r8,40(r17)
  2058fc:	003fae06 	br	2057b8 <_gp+0xffdf3bd4>
  205900:	98c00017 	ldw	r3,0(r19)
  205904:	183fba26 	beq	r3,zero,2057f0 <_gp+0xffdf3c0c>
  205908:	01000744 	movi	r4,29
  20590c:	19000626 	beq	r3,r4,205928 <__sflush_r+0x1c8>
  205910:	01000584 	movi	r4,22
  205914:	19000426 	beq	r3,r4,205928 <__sflush_r+0x1c8>
  205918:	88c0030b 	ldhu	r3,12(r17)
  20591c:	18c01014 	ori	r3,r3,64
  205920:	88c0030d 	sth	r3,12(r17)
  205924:	003fc306 	br	205834 <_gp+0xffdf3c50>
  205928:	8880030b 	ldhu	r2,12(r17)
  20592c:	88c00417 	ldw	r3,16(r17)
  205930:	88000115 	stw	zero,4(r17)
  205934:	10bdffcc 	andi	r2,r2,63487
  205938:	8880030d 	sth	r2,12(r17)
  20593c:	88c00015 	stw	r3,0(r17)
  205940:	003fb306 	br	205810 <_gp+0xffdf3c2c>
  205944:	98800017 	ldw	r2,0(r19)
  205948:	103fea26 	beq	r2,zero,2058f4 <_gp+0xffdf3d10>
  20594c:	00c00744 	movi	r3,29
  205950:	10c00226 	beq	r2,r3,20595c <__sflush_r+0x1fc>
  205954:	00c00584 	movi	r3,22
  205958:	10c0031e 	bne	r2,r3,205968 <__sflush_r+0x208>
  20595c:	9c000015 	stw	r16,0(r19)
  205960:	0005883a 	mov	r2,zero
  205964:	003fb306 	br	205834 <_gp+0xffdf3c50>
  205968:	88c0030b 	ldhu	r3,12(r17)
  20596c:	3005883a 	mov	r2,r6
  205970:	18c01014 	ori	r3,r3,64
  205974:	88c0030d 	sth	r3,12(r17)
  205978:	003fae06 	br	205834 <_gp+0xffdf3c50>

0020597c <_fflush_r>:
  20597c:	defffd04 	addi	sp,sp,-12
  205980:	dc000115 	stw	r16,4(sp)
  205984:	dfc00215 	stw	ra,8(sp)
  205988:	2021883a 	mov	r16,r4
  20598c:	20000226 	beq	r4,zero,205998 <_fflush_r+0x1c>
  205990:	20800e17 	ldw	r2,56(r4)
  205994:	10000c26 	beq	r2,zero,2059c8 <_fflush_r+0x4c>
  205998:	2880030f 	ldh	r2,12(r5)
  20599c:	1000051e 	bne	r2,zero,2059b4 <_fflush_r+0x38>
  2059a0:	0005883a 	mov	r2,zero
  2059a4:	dfc00217 	ldw	ra,8(sp)
  2059a8:	dc000117 	ldw	r16,4(sp)
  2059ac:	dec00304 	addi	sp,sp,12
  2059b0:	f800283a 	ret
  2059b4:	8009883a 	mov	r4,r16
  2059b8:	dfc00217 	ldw	ra,8(sp)
  2059bc:	dc000117 	ldw	r16,4(sp)
  2059c0:	dec00304 	addi	sp,sp,12
  2059c4:	02057601 	jmpi	205760 <__sflush_r>
  2059c8:	d9400015 	stw	r5,0(sp)
  2059cc:	0205d680 	call	205d68 <__sinit>
  2059d0:	d9400017 	ldw	r5,0(sp)
  2059d4:	003ff006 	br	205998 <_gp+0xffdf3db4>

002059d8 <fflush>:
  2059d8:	20000526 	beq	r4,zero,2059f0 <fflush+0x18>
  2059dc:	00801074 	movhi	r2,65
  2059e0:	10a6fa04 	addi	r2,r2,-25624
  2059e4:	200b883a 	mov	r5,r4
  2059e8:	11000017 	ldw	r4,0(r2)
  2059ec:	020597c1 	jmpi	20597c <_fflush_r>
  2059f0:	00801074 	movhi	r2,65
  2059f4:	10a6f904 	addi	r2,r2,-25628
  2059f8:	11000017 	ldw	r4,0(r2)
  2059fc:	01400834 	movhi	r5,32
  205a00:	29565f04 	addi	r5,r5,22908
  205a04:	02067781 	jmpi	206778 <_fwalk_reent>

00205a08 <__fp_unlock>:
  205a08:	0005883a 	mov	r2,zero
  205a0c:	f800283a 	ret

00205a10 <_cleanup_r>:
  205a10:	01400874 	movhi	r5,33
  205a14:	296a4504 	addi	r5,r5,-22252
  205a18:	02067781 	jmpi	206778 <_fwalk_reent>

00205a1c <__sinit.part.1>:
  205a1c:	defff704 	addi	sp,sp,-36
  205a20:	00c00834 	movhi	r3,32
  205a24:	dfc00815 	stw	ra,32(sp)
  205a28:	ddc00715 	stw	r23,28(sp)
  205a2c:	dd800615 	stw	r22,24(sp)
  205a30:	dd400515 	stw	r21,20(sp)
  205a34:	dd000415 	stw	r20,16(sp)
  205a38:	dcc00315 	stw	r19,12(sp)
  205a3c:	dc800215 	stw	r18,8(sp)
  205a40:	dc400115 	stw	r17,4(sp)
  205a44:	dc000015 	stw	r16,0(sp)
  205a48:	18d68404 	addi	r3,r3,23056
  205a4c:	24000117 	ldw	r16,4(r4)
  205a50:	20c00f15 	stw	r3,60(r4)
  205a54:	2080bb04 	addi	r2,r4,748
  205a58:	00c000c4 	movi	r3,3
  205a5c:	20c0b915 	stw	r3,740(r4)
  205a60:	2080ba15 	stw	r2,744(r4)
  205a64:	2000b815 	stw	zero,736(r4)
  205a68:	05c00204 	movi	r23,8
  205a6c:	00800104 	movi	r2,4
  205a70:	2025883a 	mov	r18,r4
  205a74:	b80d883a 	mov	r6,r23
  205a78:	81001704 	addi	r4,r16,92
  205a7c:	000b883a 	mov	r5,zero
  205a80:	80000015 	stw	zero,0(r16)
  205a84:	80000115 	stw	zero,4(r16)
  205a88:	80000215 	stw	zero,8(r16)
  205a8c:	8080030d 	sth	r2,12(r16)
  205a90:	80001915 	stw	zero,100(r16)
  205a94:	8000038d 	sth	zero,14(r16)
  205a98:	80000415 	stw	zero,16(r16)
  205a9c:	80000515 	stw	zero,20(r16)
  205aa0:	80000615 	stw	zero,24(r16)
  205aa4:	02076680 	call	207668 <memset>
  205aa8:	05800874 	movhi	r22,33
  205aac:	94400217 	ldw	r17,8(r18)
  205ab0:	05400874 	movhi	r21,33
  205ab4:	05000874 	movhi	r20,33
  205ab8:	04c00874 	movhi	r19,33
  205abc:	b5a39d04 	addi	r22,r22,-29068
  205ac0:	ad63b404 	addi	r21,r21,-28976
  205ac4:	a523d304 	addi	r20,r20,-28852
  205ac8:	9ce3ea04 	addi	r19,r19,-28760
  205acc:	85800815 	stw	r22,32(r16)
  205ad0:	85400915 	stw	r21,36(r16)
  205ad4:	85000a15 	stw	r20,40(r16)
  205ad8:	84c00b15 	stw	r19,44(r16)
  205adc:	84000715 	stw	r16,28(r16)
  205ae0:	00800284 	movi	r2,10
  205ae4:	8880030d 	sth	r2,12(r17)
  205ae8:	00800044 	movi	r2,1
  205aec:	b80d883a 	mov	r6,r23
  205af0:	89001704 	addi	r4,r17,92
  205af4:	000b883a 	mov	r5,zero
  205af8:	88000015 	stw	zero,0(r17)
  205afc:	88000115 	stw	zero,4(r17)
  205b00:	88000215 	stw	zero,8(r17)
  205b04:	88001915 	stw	zero,100(r17)
  205b08:	8880038d 	sth	r2,14(r17)
  205b0c:	88000415 	stw	zero,16(r17)
  205b10:	88000515 	stw	zero,20(r17)
  205b14:	88000615 	stw	zero,24(r17)
  205b18:	02076680 	call	207668 <memset>
  205b1c:	94000317 	ldw	r16,12(r18)
  205b20:	00800484 	movi	r2,18
  205b24:	8c400715 	stw	r17,28(r17)
  205b28:	8d800815 	stw	r22,32(r17)
  205b2c:	8d400915 	stw	r21,36(r17)
  205b30:	8d000a15 	stw	r20,40(r17)
  205b34:	8cc00b15 	stw	r19,44(r17)
  205b38:	8080030d 	sth	r2,12(r16)
  205b3c:	00800084 	movi	r2,2
  205b40:	80000015 	stw	zero,0(r16)
  205b44:	80000115 	stw	zero,4(r16)
  205b48:	80000215 	stw	zero,8(r16)
  205b4c:	80001915 	stw	zero,100(r16)
  205b50:	8080038d 	sth	r2,14(r16)
  205b54:	80000415 	stw	zero,16(r16)
  205b58:	80000515 	stw	zero,20(r16)
  205b5c:	80000615 	stw	zero,24(r16)
  205b60:	b80d883a 	mov	r6,r23
  205b64:	000b883a 	mov	r5,zero
  205b68:	81001704 	addi	r4,r16,92
  205b6c:	02076680 	call	207668 <memset>
  205b70:	00800044 	movi	r2,1
  205b74:	84000715 	stw	r16,28(r16)
  205b78:	85800815 	stw	r22,32(r16)
  205b7c:	85400915 	stw	r21,36(r16)
  205b80:	85000a15 	stw	r20,40(r16)
  205b84:	84c00b15 	stw	r19,44(r16)
  205b88:	90800e15 	stw	r2,56(r18)
  205b8c:	dfc00817 	ldw	ra,32(sp)
  205b90:	ddc00717 	ldw	r23,28(sp)
  205b94:	dd800617 	ldw	r22,24(sp)
  205b98:	dd400517 	ldw	r21,20(sp)
  205b9c:	dd000417 	ldw	r20,16(sp)
  205ba0:	dcc00317 	ldw	r19,12(sp)
  205ba4:	dc800217 	ldw	r18,8(sp)
  205ba8:	dc400117 	ldw	r17,4(sp)
  205bac:	dc000017 	ldw	r16,0(sp)
  205bb0:	dec00904 	addi	sp,sp,36
  205bb4:	f800283a 	ret

00205bb8 <__fp_lock>:
  205bb8:	0005883a 	mov	r2,zero
  205bbc:	f800283a 	ret

00205bc0 <__sfmoreglue>:
  205bc0:	defffc04 	addi	sp,sp,-16
  205bc4:	dc800215 	stw	r18,8(sp)
  205bc8:	2825883a 	mov	r18,r5
  205bcc:	dc000015 	stw	r16,0(sp)
  205bd0:	01401a04 	movi	r5,104
  205bd4:	2021883a 	mov	r16,r4
  205bd8:	913fffc4 	addi	r4,r18,-1
  205bdc:	dfc00315 	stw	ra,12(sp)
  205be0:	dc400115 	stw	r17,4(sp)
  205be4:	02017a80 	call	2017a8 <__mulsi3>
  205be8:	8009883a 	mov	r4,r16
  205bec:	11401d04 	addi	r5,r2,116
  205bf0:	1023883a 	mov	r17,r2
  205bf4:	0206ad40 	call	206ad4 <_malloc_r>
  205bf8:	1021883a 	mov	r16,r2
  205bfc:	10000726 	beq	r2,zero,205c1c <__sfmoreglue+0x5c>
  205c00:	11000304 	addi	r4,r2,12
  205c04:	10000015 	stw	zero,0(r2)
  205c08:	14800115 	stw	r18,4(r2)
  205c0c:	11000215 	stw	r4,8(r2)
  205c10:	89801a04 	addi	r6,r17,104
  205c14:	000b883a 	mov	r5,zero
  205c18:	02076680 	call	207668 <memset>
  205c1c:	8005883a 	mov	r2,r16
  205c20:	dfc00317 	ldw	ra,12(sp)
  205c24:	dc800217 	ldw	r18,8(sp)
  205c28:	dc400117 	ldw	r17,4(sp)
  205c2c:	dc000017 	ldw	r16,0(sp)
  205c30:	dec00404 	addi	sp,sp,16
  205c34:	f800283a 	ret

00205c38 <__sfp>:
  205c38:	defffb04 	addi	sp,sp,-20
  205c3c:	dc000015 	stw	r16,0(sp)
  205c40:	04001074 	movhi	r16,65
  205c44:	8426f904 	addi	r16,r16,-25628
  205c48:	dcc00315 	stw	r19,12(sp)
  205c4c:	2027883a 	mov	r19,r4
  205c50:	81000017 	ldw	r4,0(r16)
  205c54:	dfc00415 	stw	ra,16(sp)
  205c58:	dc800215 	stw	r18,8(sp)
  205c5c:	20800e17 	ldw	r2,56(r4)
  205c60:	dc400115 	stw	r17,4(sp)
  205c64:	1000021e 	bne	r2,zero,205c70 <__sfp+0x38>
  205c68:	0205a1c0 	call	205a1c <__sinit.part.1>
  205c6c:	81000017 	ldw	r4,0(r16)
  205c70:	2480b804 	addi	r18,r4,736
  205c74:	047fffc4 	movi	r17,-1
  205c78:	91000117 	ldw	r4,4(r18)
  205c7c:	94000217 	ldw	r16,8(r18)
  205c80:	213fffc4 	addi	r4,r4,-1
  205c84:	20000a16 	blt	r4,zero,205cb0 <__sfp+0x78>
  205c88:	8080030f 	ldh	r2,12(r16)
  205c8c:	10000c26 	beq	r2,zero,205cc0 <__sfp+0x88>
  205c90:	80c01d04 	addi	r3,r16,116
  205c94:	00000206 	br	205ca0 <__sfp+0x68>
  205c98:	18bfe60f 	ldh	r2,-104(r3)
  205c9c:	10000826 	beq	r2,zero,205cc0 <__sfp+0x88>
  205ca0:	213fffc4 	addi	r4,r4,-1
  205ca4:	1c3ffd04 	addi	r16,r3,-12
  205ca8:	18c01a04 	addi	r3,r3,104
  205cac:	247ffa1e 	bne	r4,r17,205c98 <_gp+0xffdf40b4>
  205cb0:	90800017 	ldw	r2,0(r18)
  205cb4:	10001d26 	beq	r2,zero,205d2c <__sfp+0xf4>
  205cb8:	1025883a 	mov	r18,r2
  205cbc:	003fee06 	br	205c78 <_gp+0xffdf4094>
  205cc0:	00bfffc4 	movi	r2,-1
  205cc4:	8080038d 	sth	r2,14(r16)
  205cc8:	00800044 	movi	r2,1
  205ccc:	8080030d 	sth	r2,12(r16)
  205cd0:	80001915 	stw	zero,100(r16)
  205cd4:	80000015 	stw	zero,0(r16)
  205cd8:	80000215 	stw	zero,8(r16)
  205cdc:	80000115 	stw	zero,4(r16)
  205ce0:	80000415 	stw	zero,16(r16)
  205ce4:	80000515 	stw	zero,20(r16)
  205ce8:	80000615 	stw	zero,24(r16)
  205cec:	01800204 	movi	r6,8
  205cf0:	000b883a 	mov	r5,zero
  205cf4:	81001704 	addi	r4,r16,92
  205cf8:	02076680 	call	207668 <memset>
  205cfc:	8005883a 	mov	r2,r16
  205d00:	80000c15 	stw	zero,48(r16)
  205d04:	80000d15 	stw	zero,52(r16)
  205d08:	80001115 	stw	zero,68(r16)
  205d0c:	80001215 	stw	zero,72(r16)
  205d10:	dfc00417 	ldw	ra,16(sp)
  205d14:	dcc00317 	ldw	r19,12(sp)
  205d18:	dc800217 	ldw	r18,8(sp)
  205d1c:	dc400117 	ldw	r17,4(sp)
  205d20:	dc000017 	ldw	r16,0(sp)
  205d24:	dec00504 	addi	sp,sp,20
  205d28:	f800283a 	ret
  205d2c:	01400104 	movi	r5,4
  205d30:	9809883a 	mov	r4,r19
  205d34:	0205bc00 	call	205bc0 <__sfmoreglue>
  205d38:	90800015 	stw	r2,0(r18)
  205d3c:	103fde1e 	bne	r2,zero,205cb8 <_gp+0xffdf40d4>
  205d40:	00800304 	movi	r2,12
  205d44:	98800015 	stw	r2,0(r19)
  205d48:	0005883a 	mov	r2,zero
  205d4c:	003ff006 	br	205d10 <_gp+0xffdf412c>

00205d50 <_cleanup>:
  205d50:	00801074 	movhi	r2,65
  205d54:	10a6f904 	addi	r2,r2,-25628
  205d58:	11000017 	ldw	r4,0(r2)
  205d5c:	01400874 	movhi	r5,33
  205d60:	296a4504 	addi	r5,r5,-22252
  205d64:	02067781 	jmpi	206778 <_fwalk_reent>

00205d68 <__sinit>:
  205d68:	20800e17 	ldw	r2,56(r4)
  205d6c:	10000126 	beq	r2,zero,205d74 <__sinit+0xc>
  205d70:	f800283a 	ret
  205d74:	0205a1c1 	jmpi	205a1c <__sinit.part.1>

00205d78 <__sfp_lock_acquire>:
  205d78:	f800283a 	ret

00205d7c <__sfp_lock_release>:
  205d7c:	f800283a 	ret

00205d80 <__sinit_lock_acquire>:
  205d80:	f800283a 	ret

00205d84 <__sinit_lock_release>:
  205d84:	f800283a 	ret

00205d88 <__fp_lock_all>:
  205d88:	00801074 	movhi	r2,65
  205d8c:	10a6fa04 	addi	r2,r2,-25624
  205d90:	11000017 	ldw	r4,0(r2)
  205d94:	01400834 	movhi	r5,32
  205d98:	2956ee04 	addi	r5,r5,23480
  205d9c:	02066b41 	jmpi	2066b4 <_fwalk>

00205da0 <__fp_unlock_all>:
  205da0:	00801074 	movhi	r2,65
  205da4:	10a6fa04 	addi	r2,r2,-25624
  205da8:	11000017 	ldw	r4,0(r2)
  205dac:	01400834 	movhi	r5,32
  205db0:	29568204 	addi	r5,r5,23048
  205db4:	02066b41 	jmpi	2066b4 <_fwalk>

00205db8 <_malloc_trim_r>:
  205db8:	defffb04 	addi	sp,sp,-20
  205dbc:	dcc00315 	stw	r19,12(sp)
  205dc0:	04c01074 	movhi	r19,65
  205dc4:	dc800215 	stw	r18,8(sp)
  205dc8:	dc400115 	stw	r17,4(sp)
  205dcc:	dc000015 	stw	r16,0(sp)
  205dd0:	dfc00415 	stw	ra,16(sp)
  205dd4:	2821883a 	mov	r16,r5
  205dd8:	9ce12704 	addi	r19,r19,-31588
  205ddc:	2025883a 	mov	r18,r4
  205de0:	020ea6c0 	call	20ea6c <__malloc_lock>
  205de4:	98800217 	ldw	r2,8(r19)
  205de8:	14400117 	ldw	r17,4(r2)
  205dec:	00bfff04 	movi	r2,-4
  205df0:	88a2703a 	and	r17,r17,r2
  205df4:	8c21c83a 	sub	r16,r17,r16
  205df8:	8403fbc4 	addi	r16,r16,4079
  205dfc:	8020d33a 	srli	r16,r16,12
  205e00:	0083ffc4 	movi	r2,4095
  205e04:	843fffc4 	addi	r16,r16,-1
  205e08:	8020933a 	slli	r16,r16,12
  205e0c:	1400060e 	bge	r2,r16,205e28 <_malloc_trim_r+0x70>
  205e10:	000b883a 	mov	r5,zero
  205e14:	9009883a 	mov	r4,r18
  205e18:	0208e200 	call	208e20 <_sbrk_r>
  205e1c:	98c00217 	ldw	r3,8(r19)
  205e20:	1c47883a 	add	r3,r3,r17
  205e24:	10c00a26 	beq	r2,r3,205e50 <_malloc_trim_r+0x98>
  205e28:	9009883a 	mov	r4,r18
  205e2c:	020ea900 	call	20ea90 <__malloc_unlock>
  205e30:	0005883a 	mov	r2,zero
  205e34:	dfc00417 	ldw	ra,16(sp)
  205e38:	dcc00317 	ldw	r19,12(sp)
  205e3c:	dc800217 	ldw	r18,8(sp)
  205e40:	dc400117 	ldw	r17,4(sp)
  205e44:	dc000017 	ldw	r16,0(sp)
  205e48:	dec00504 	addi	sp,sp,20
  205e4c:	f800283a 	ret
  205e50:	040bc83a 	sub	r5,zero,r16
  205e54:	9009883a 	mov	r4,r18
  205e58:	0208e200 	call	208e20 <_sbrk_r>
  205e5c:	00ffffc4 	movi	r3,-1
  205e60:	10c00d26 	beq	r2,r3,205e98 <_malloc_trim_r+0xe0>
  205e64:	00c01074 	movhi	r3,65
  205e68:	18e71d04 	addi	r3,r3,-25484
  205e6c:	18800017 	ldw	r2,0(r3)
  205e70:	99000217 	ldw	r4,8(r19)
  205e74:	8c23c83a 	sub	r17,r17,r16
  205e78:	8c400054 	ori	r17,r17,1
  205e7c:	1421c83a 	sub	r16,r2,r16
  205e80:	24400115 	stw	r17,4(r4)
  205e84:	9009883a 	mov	r4,r18
  205e88:	1c000015 	stw	r16,0(r3)
  205e8c:	020ea900 	call	20ea90 <__malloc_unlock>
  205e90:	00800044 	movi	r2,1
  205e94:	003fe706 	br	205e34 <_gp+0xffdf4250>
  205e98:	000b883a 	mov	r5,zero
  205e9c:	9009883a 	mov	r4,r18
  205ea0:	0208e200 	call	208e20 <_sbrk_r>
  205ea4:	99000217 	ldw	r4,8(r19)
  205ea8:	014003c4 	movi	r5,15
  205eac:	1107c83a 	sub	r3,r2,r4
  205eb0:	28ffdd0e 	bge	r5,r3,205e28 <_gp+0xffdf4244>
  205eb4:	01401074 	movhi	r5,65
  205eb8:	2966fc04 	addi	r5,r5,-25616
  205ebc:	29400017 	ldw	r5,0(r5)
  205ec0:	18c00054 	ori	r3,r3,1
  205ec4:	20c00115 	stw	r3,4(r4)
  205ec8:	00c01074 	movhi	r3,65
  205ecc:	1145c83a 	sub	r2,r2,r5
  205ed0:	18e71d04 	addi	r3,r3,-25484
  205ed4:	18800015 	stw	r2,0(r3)
  205ed8:	003fd306 	br	205e28 <_gp+0xffdf4244>

00205edc <_free_r>:
  205edc:	28004126 	beq	r5,zero,205fe4 <_free_r+0x108>
  205ee0:	defffd04 	addi	sp,sp,-12
  205ee4:	dc400115 	stw	r17,4(sp)
  205ee8:	dc000015 	stw	r16,0(sp)
  205eec:	2023883a 	mov	r17,r4
  205ef0:	2821883a 	mov	r16,r5
  205ef4:	dfc00215 	stw	ra,8(sp)
  205ef8:	020ea6c0 	call	20ea6c <__malloc_lock>
  205efc:	81ffff17 	ldw	r7,-4(r16)
  205f00:	00bfff84 	movi	r2,-2
  205f04:	01001074 	movhi	r4,65
  205f08:	81bffe04 	addi	r6,r16,-8
  205f0c:	3884703a 	and	r2,r7,r2
  205f10:	21212704 	addi	r4,r4,-31588
  205f14:	308b883a 	add	r5,r6,r2
  205f18:	2a400117 	ldw	r9,4(r5)
  205f1c:	22000217 	ldw	r8,8(r4)
  205f20:	00ffff04 	movi	r3,-4
  205f24:	48c6703a 	and	r3,r9,r3
  205f28:	2a005726 	beq	r5,r8,206088 <_free_r+0x1ac>
  205f2c:	28c00115 	stw	r3,4(r5)
  205f30:	39c0004c 	andi	r7,r7,1
  205f34:	3800091e 	bne	r7,zero,205f5c <_free_r+0x80>
  205f38:	823ffe17 	ldw	r8,-8(r16)
  205f3c:	22400204 	addi	r9,r4,8
  205f40:	320dc83a 	sub	r6,r6,r8
  205f44:	31c00217 	ldw	r7,8(r6)
  205f48:	1205883a 	add	r2,r2,r8
  205f4c:	3a406526 	beq	r7,r9,2060e4 <_free_r+0x208>
  205f50:	32000317 	ldw	r8,12(r6)
  205f54:	3a000315 	stw	r8,12(r7)
  205f58:	41c00215 	stw	r7,8(r8)
  205f5c:	28cf883a 	add	r7,r5,r3
  205f60:	39c00117 	ldw	r7,4(r7)
  205f64:	39c0004c 	andi	r7,r7,1
  205f68:	38003a26 	beq	r7,zero,206054 <_free_r+0x178>
  205f6c:	10c00054 	ori	r3,r2,1
  205f70:	30c00115 	stw	r3,4(r6)
  205f74:	3087883a 	add	r3,r6,r2
  205f78:	18800015 	stw	r2,0(r3)
  205f7c:	00c07fc4 	movi	r3,511
  205f80:	18801936 	bltu	r3,r2,205fe8 <_free_r+0x10c>
  205f84:	1004d0fa 	srli	r2,r2,3
  205f88:	01c00044 	movi	r7,1
  205f8c:	21400117 	ldw	r5,4(r4)
  205f90:	10c00044 	addi	r3,r2,1
  205f94:	18c7883a 	add	r3,r3,r3
  205f98:	1005d0ba 	srai	r2,r2,2
  205f9c:	18c7883a 	add	r3,r3,r3
  205fa0:	18c7883a 	add	r3,r3,r3
  205fa4:	1907883a 	add	r3,r3,r4
  205fa8:	3884983a 	sll	r2,r7,r2
  205fac:	19c00017 	ldw	r7,0(r3)
  205fb0:	1a3ffe04 	addi	r8,r3,-8
  205fb4:	1144b03a 	or	r2,r2,r5
  205fb8:	32000315 	stw	r8,12(r6)
  205fbc:	31c00215 	stw	r7,8(r6)
  205fc0:	20800115 	stw	r2,4(r4)
  205fc4:	19800015 	stw	r6,0(r3)
  205fc8:	39800315 	stw	r6,12(r7)
  205fcc:	8809883a 	mov	r4,r17
  205fd0:	dfc00217 	ldw	ra,8(sp)
  205fd4:	dc400117 	ldw	r17,4(sp)
  205fd8:	dc000017 	ldw	r16,0(sp)
  205fdc:	dec00304 	addi	sp,sp,12
  205fe0:	020ea901 	jmpi	20ea90 <__malloc_unlock>
  205fe4:	f800283a 	ret
  205fe8:	100ad27a 	srli	r5,r2,9
  205fec:	00c00104 	movi	r3,4
  205ff0:	19404a36 	bltu	r3,r5,20611c <_free_r+0x240>
  205ff4:	100ad1ba 	srli	r5,r2,6
  205ff8:	28c00e44 	addi	r3,r5,57
  205ffc:	18c7883a 	add	r3,r3,r3
  206000:	29400e04 	addi	r5,r5,56
  206004:	18c7883a 	add	r3,r3,r3
  206008:	18c7883a 	add	r3,r3,r3
  20600c:	1909883a 	add	r4,r3,r4
  206010:	20c00017 	ldw	r3,0(r4)
  206014:	01c01074 	movhi	r7,65
  206018:	213ffe04 	addi	r4,r4,-8
  20601c:	39e12704 	addi	r7,r7,-31588
  206020:	20c04426 	beq	r4,r3,206134 <_free_r+0x258>
  206024:	01ffff04 	movi	r7,-4
  206028:	19400117 	ldw	r5,4(r3)
  20602c:	29ca703a 	and	r5,r5,r7
  206030:	1140022e 	bgeu	r2,r5,20603c <_free_r+0x160>
  206034:	18c00217 	ldw	r3,8(r3)
  206038:	20fffb1e 	bne	r4,r3,206028 <_gp+0xffdf4444>
  20603c:	19000317 	ldw	r4,12(r3)
  206040:	31000315 	stw	r4,12(r6)
  206044:	30c00215 	stw	r3,8(r6)
  206048:	21800215 	stw	r6,8(r4)
  20604c:	19800315 	stw	r6,12(r3)
  206050:	003fde06 	br	205fcc <_gp+0xffdf43e8>
  206054:	29c00217 	ldw	r7,8(r5)
  206058:	10c5883a 	add	r2,r2,r3
  20605c:	00c01074 	movhi	r3,65
  206060:	18e12904 	addi	r3,r3,-31580
  206064:	38c03b26 	beq	r7,r3,206154 <_free_r+0x278>
  206068:	2a000317 	ldw	r8,12(r5)
  20606c:	11400054 	ori	r5,r2,1
  206070:	3087883a 	add	r3,r6,r2
  206074:	3a000315 	stw	r8,12(r7)
  206078:	41c00215 	stw	r7,8(r8)
  20607c:	31400115 	stw	r5,4(r6)
  206080:	18800015 	stw	r2,0(r3)
  206084:	003fbd06 	br	205f7c <_gp+0xffdf4398>
  206088:	39c0004c 	andi	r7,r7,1
  20608c:	10c5883a 	add	r2,r2,r3
  206090:	3800071e 	bne	r7,zero,2060b0 <_free_r+0x1d4>
  206094:	81fffe17 	ldw	r7,-8(r16)
  206098:	31cdc83a 	sub	r6,r6,r7
  20609c:	30c00317 	ldw	r3,12(r6)
  2060a0:	31400217 	ldw	r5,8(r6)
  2060a4:	11c5883a 	add	r2,r2,r7
  2060a8:	28c00315 	stw	r3,12(r5)
  2060ac:	19400215 	stw	r5,8(r3)
  2060b0:	10c00054 	ori	r3,r2,1
  2060b4:	30c00115 	stw	r3,4(r6)
  2060b8:	00c01074 	movhi	r3,65
  2060bc:	18e6fd04 	addi	r3,r3,-25612
  2060c0:	18c00017 	ldw	r3,0(r3)
  2060c4:	21800215 	stw	r6,8(r4)
  2060c8:	10ffc036 	bltu	r2,r3,205fcc <_gp+0xffdf43e8>
  2060cc:	00801074 	movhi	r2,65
  2060d0:	10a71404 	addi	r2,r2,-25520
  2060d4:	11400017 	ldw	r5,0(r2)
  2060d8:	8809883a 	mov	r4,r17
  2060dc:	0205db80 	call	205db8 <_malloc_trim_r>
  2060e0:	003fba06 	br	205fcc <_gp+0xffdf43e8>
  2060e4:	28c9883a 	add	r4,r5,r3
  2060e8:	21000117 	ldw	r4,4(r4)
  2060ec:	2100004c 	andi	r4,r4,1
  2060f0:	2000391e 	bne	r4,zero,2061d8 <_free_r+0x2fc>
  2060f4:	29c00217 	ldw	r7,8(r5)
  2060f8:	29000317 	ldw	r4,12(r5)
  2060fc:	1885883a 	add	r2,r3,r2
  206100:	10c00054 	ori	r3,r2,1
  206104:	39000315 	stw	r4,12(r7)
  206108:	21c00215 	stw	r7,8(r4)
  20610c:	30c00115 	stw	r3,4(r6)
  206110:	308d883a 	add	r6,r6,r2
  206114:	30800015 	stw	r2,0(r6)
  206118:	003fac06 	br	205fcc <_gp+0xffdf43e8>
  20611c:	00c00504 	movi	r3,20
  206120:	19401536 	bltu	r3,r5,206178 <_free_r+0x29c>
  206124:	28c01704 	addi	r3,r5,92
  206128:	18c7883a 	add	r3,r3,r3
  20612c:	294016c4 	addi	r5,r5,91
  206130:	003fb406 	br	206004 <_gp+0xffdf4420>
  206134:	280bd0ba 	srai	r5,r5,2
  206138:	00c00044 	movi	r3,1
  20613c:	38800117 	ldw	r2,4(r7)
  206140:	194a983a 	sll	r5,r3,r5
  206144:	2007883a 	mov	r3,r4
  206148:	2884b03a 	or	r2,r5,r2
  20614c:	38800115 	stw	r2,4(r7)
  206150:	003fbb06 	br	206040 <_gp+0xffdf445c>
  206154:	21800515 	stw	r6,20(r4)
  206158:	21800415 	stw	r6,16(r4)
  20615c:	10c00054 	ori	r3,r2,1
  206160:	31c00315 	stw	r7,12(r6)
  206164:	31c00215 	stw	r7,8(r6)
  206168:	30c00115 	stw	r3,4(r6)
  20616c:	308d883a 	add	r6,r6,r2
  206170:	30800015 	stw	r2,0(r6)
  206174:	003f9506 	br	205fcc <_gp+0xffdf43e8>
  206178:	00c01504 	movi	r3,84
  20617c:	19400536 	bltu	r3,r5,206194 <_free_r+0x2b8>
  206180:	100ad33a 	srli	r5,r2,12
  206184:	28c01bc4 	addi	r3,r5,111
  206188:	18c7883a 	add	r3,r3,r3
  20618c:	29401b84 	addi	r5,r5,110
  206190:	003f9c06 	br	206004 <_gp+0xffdf4420>
  206194:	00c05504 	movi	r3,340
  206198:	19400536 	bltu	r3,r5,2061b0 <_free_r+0x2d4>
  20619c:	100ad3fa 	srli	r5,r2,15
  2061a0:	28c01e04 	addi	r3,r5,120
  2061a4:	18c7883a 	add	r3,r3,r3
  2061a8:	29401dc4 	addi	r5,r5,119
  2061ac:	003f9506 	br	206004 <_gp+0xffdf4420>
  2061b0:	00c15504 	movi	r3,1364
  2061b4:	19400536 	bltu	r3,r5,2061cc <_free_r+0x2f0>
  2061b8:	100ad4ba 	srli	r5,r2,18
  2061bc:	28c01f44 	addi	r3,r5,125
  2061c0:	18c7883a 	add	r3,r3,r3
  2061c4:	29401f04 	addi	r5,r5,124
  2061c8:	003f8e06 	br	206004 <_gp+0xffdf4420>
  2061cc:	00c03f84 	movi	r3,254
  2061d0:	01401f84 	movi	r5,126
  2061d4:	003f8b06 	br	206004 <_gp+0xffdf4420>
  2061d8:	10c00054 	ori	r3,r2,1
  2061dc:	30c00115 	stw	r3,4(r6)
  2061e0:	308d883a 	add	r6,r6,r2
  2061e4:	30800015 	stw	r2,0(r6)
  2061e8:	003f7806 	br	205fcc <_gp+0xffdf43e8>

002061ec <__sfvwrite_r>:
  2061ec:	30800217 	ldw	r2,8(r6)
  2061f0:	10006726 	beq	r2,zero,206390 <__sfvwrite_r+0x1a4>
  2061f4:	28c0030b 	ldhu	r3,12(r5)
  2061f8:	defff404 	addi	sp,sp,-48
  2061fc:	dd400715 	stw	r21,28(sp)
  206200:	dd000615 	stw	r20,24(sp)
  206204:	dc000215 	stw	r16,8(sp)
  206208:	dfc00b15 	stw	ra,44(sp)
  20620c:	df000a15 	stw	fp,40(sp)
  206210:	ddc00915 	stw	r23,36(sp)
  206214:	dd800815 	stw	r22,32(sp)
  206218:	dcc00515 	stw	r19,20(sp)
  20621c:	dc800415 	stw	r18,16(sp)
  206220:	dc400315 	stw	r17,12(sp)
  206224:	1880020c 	andi	r2,r3,8
  206228:	2821883a 	mov	r16,r5
  20622c:	202b883a 	mov	r21,r4
  206230:	3029883a 	mov	r20,r6
  206234:	10002726 	beq	r2,zero,2062d4 <__sfvwrite_r+0xe8>
  206238:	28800417 	ldw	r2,16(r5)
  20623c:	10002526 	beq	r2,zero,2062d4 <__sfvwrite_r+0xe8>
  206240:	1880008c 	andi	r2,r3,2
  206244:	a4400017 	ldw	r17,0(r20)
  206248:	10002a26 	beq	r2,zero,2062f4 <__sfvwrite_r+0x108>
  20624c:	05a00034 	movhi	r22,32768
  206250:	0027883a 	mov	r19,zero
  206254:	0025883a 	mov	r18,zero
  206258:	b5bf0004 	addi	r22,r22,-1024
  20625c:	980d883a 	mov	r6,r19
  206260:	a809883a 	mov	r4,r21
  206264:	90004626 	beq	r18,zero,206380 <__sfvwrite_r+0x194>
  206268:	900f883a 	mov	r7,r18
  20626c:	b480022e 	bgeu	r22,r18,206278 <__sfvwrite_r+0x8c>
  206270:	01e00034 	movhi	r7,32768
  206274:	39ff0004 	addi	r7,r7,-1024
  206278:	80800917 	ldw	r2,36(r16)
  20627c:	81400717 	ldw	r5,28(r16)
  206280:	103ee83a 	callr	r2
  206284:	00805a0e 	bge	zero,r2,2063f0 <__sfvwrite_r+0x204>
  206288:	a0c00217 	ldw	r3,8(r20)
  20628c:	98a7883a 	add	r19,r19,r2
  206290:	90a5c83a 	sub	r18,r18,r2
  206294:	1885c83a 	sub	r2,r3,r2
  206298:	a0800215 	stw	r2,8(r20)
  20629c:	103fef1e 	bne	r2,zero,20625c <_gp+0xffdf4678>
  2062a0:	0005883a 	mov	r2,zero
  2062a4:	dfc00b17 	ldw	ra,44(sp)
  2062a8:	df000a17 	ldw	fp,40(sp)
  2062ac:	ddc00917 	ldw	r23,36(sp)
  2062b0:	dd800817 	ldw	r22,32(sp)
  2062b4:	dd400717 	ldw	r21,28(sp)
  2062b8:	dd000617 	ldw	r20,24(sp)
  2062bc:	dcc00517 	ldw	r19,20(sp)
  2062c0:	dc800417 	ldw	r18,16(sp)
  2062c4:	dc400317 	ldw	r17,12(sp)
  2062c8:	dc000217 	ldw	r16,8(sp)
  2062cc:	dec00c04 	addi	sp,sp,48
  2062d0:	f800283a 	ret
  2062d4:	800b883a 	mov	r5,r16
  2062d8:	a809883a 	mov	r4,r21
  2062dc:	0203d5c0 	call	203d5c <__swsetup_r>
  2062e0:	1000ee1e 	bne	r2,zero,20669c <__sfvwrite_r+0x4b0>
  2062e4:	80c0030b 	ldhu	r3,12(r16)
  2062e8:	a4400017 	ldw	r17,0(r20)
  2062ec:	1880008c 	andi	r2,r3,2
  2062f0:	103fd61e 	bne	r2,zero,20624c <_gp+0xffdf4668>
  2062f4:	1880004c 	andi	r2,r3,1
  2062f8:	1000421e 	bne	r2,zero,206404 <__sfvwrite_r+0x218>
  2062fc:	0039883a 	mov	fp,zero
  206300:	0025883a 	mov	r18,zero
  206304:	90001a26 	beq	r18,zero,206370 <__sfvwrite_r+0x184>
  206308:	1880800c 	andi	r2,r3,512
  20630c:	84c00217 	ldw	r19,8(r16)
  206310:	10002126 	beq	r2,zero,206398 <__sfvwrite_r+0x1ac>
  206314:	982f883a 	mov	r23,r19
  206318:	94c09636 	bltu	r18,r19,206574 <__sfvwrite_r+0x388>
  20631c:	1881200c 	andi	r2,r3,1152
  206320:	1000a11e 	bne	r2,zero,2065a8 <__sfvwrite_r+0x3bc>
  206324:	81000017 	ldw	r4,0(r16)
  206328:	b80d883a 	mov	r6,r23
  20632c:	e00b883a 	mov	r5,fp
  206330:	020750c0 	call	20750c <memmove>
  206334:	80c00217 	ldw	r3,8(r16)
  206338:	81000017 	ldw	r4,0(r16)
  20633c:	9005883a 	mov	r2,r18
  206340:	1ce7c83a 	sub	r19,r3,r19
  206344:	25cf883a 	add	r7,r4,r23
  206348:	84c00215 	stw	r19,8(r16)
  20634c:	81c00015 	stw	r7,0(r16)
  206350:	a0c00217 	ldw	r3,8(r20)
  206354:	e0b9883a 	add	fp,fp,r2
  206358:	90a5c83a 	sub	r18,r18,r2
  20635c:	18a7c83a 	sub	r19,r3,r2
  206360:	a4c00215 	stw	r19,8(r20)
  206364:	983fce26 	beq	r19,zero,2062a0 <_gp+0xffdf46bc>
  206368:	80c0030b 	ldhu	r3,12(r16)
  20636c:	903fe61e 	bne	r18,zero,206308 <_gp+0xffdf4724>
  206370:	8f000017 	ldw	fp,0(r17)
  206374:	8c800117 	ldw	r18,4(r17)
  206378:	8c400204 	addi	r17,r17,8
  20637c:	003fe106 	br	206304 <_gp+0xffdf4720>
  206380:	8cc00017 	ldw	r19,0(r17)
  206384:	8c800117 	ldw	r18,4(r17)
  206388:	8c400204 	addi	r17,r17,8
  20638c:	003fb306 	br	20625c <_gp+0xffdf4678>
  206390:	0005883a 	mov	r2,zero
  206394:	f800283a 	ret
  206398:	81000017 	ldw	r4,0(r16)
  20639c:	80800417 	ldw	r2,16(r16)
  2063a0:	11005a36 	bltu	r2,r4,20650c <__sfvwrite_r+0x320>
  2063a4:	85c00517 	ldw	r23,20(r16)
  2063a8:	95c05836 	bltu	r18,r23,20650c <__sfvwrite_r+0x320>
  2063ac:	00a00034 	movhi	r2,32768
  2063b0:	10bfffc4 	addi	r2,r2,-1
  2063b4:	9009883a 	mov	r4,r18
  2063b8:	1480012e 	bgeu	r2,r18,2063c0 <__sfvwrite_r+0x1d4>
  2063bc:	1009883a 	mov	r4,r2
  2063c0:	b80b883a 	mov	r5,r23
  2063c4:	0200a600 	call	200a60 <__divsi3>
  2063c8:	b80b883a 	mov	r5,r23
  2063cc:	1009883a 	mov	r4,r2
  2063d0:	02017a80 	call	2017a8 <__mulsi3>
  2063d4:	81400717 	ldw	r5,28(r16)
  2063d8:	80c00917 	ldw	r3,36(r16)
  2063dc:	100f883a 	mov	r7,r2
  2063e0:	e00d883a 	mov	r6,fp
  2063e4:	a809883a 	mov	r4,r21
  2063e8:	183ee83a 	callr	r3
  2063ec:	00bfd816 	blt	zero,r2,206350 <_gp+0xffdf476c>
  2063f0:	8080030b 	ldhu	r2,12(r16)
  2063f4:	10801014 	ori	r2,r2,64
  2063f8:	8080030d 	sth	r2,12(r16)
  2063fc:	00bfffc4 	movi	r2,-1
  206400:	003fa806 	br	2062a4 <_gp+0xffdf46c0>
  206404:	0027883a 	mov	r19,zero
  206408:	0011883a 	mov	r8,zero
  20640c:	0039883a 	mov	fp,zero
  206410:	0025883a 	mov	r18,zero
  206414:	90001f26 	beq	r18,zero,206494 <__sfvwrite_r+0x2a8>
  206418:	40005a26 	beq	r8,zero,206584 <__sfvwrite_r+0x398>
  20641c:	982d883a 	mov	r22,r19
  206420:	94c0012e 	bgeu	r18,r19,206428 <__sfvwrite_r+0x23c>
  206424:	902d883a 	mov	r22,r18
  206428:	81000017 	ldw	r4,0(r16)
  20642c:	80800417 	ldw	r2,16(r16)
  206430:	b02f883a 	mov	r23,r22
  206434:	81c00517 	ldw	r7,20(r16)
  206438:	1100032e 	bgeu	r2,r4,206448 <__sfvwrite_r+0x25c>
  20643c:	80c00217 	ldw	r3,8(r16)
  206440:	38c7883a 	add	r3,r7,r3
  206444:	1d801816 	blt	r3,r22,2064a8 <__sfvwrite_r+0x2bc>
  206448:	b1c03e16 	blt	r22,r7,206544 <__sfvwrite_r+0x358>
  20644c:	80800917 	ldw	r2,36(r16)
  206450:	81400717 	ldw	r5,28(r16)
  206454:	e00d883a 	mov	r6,fp
  206458:	da000115 	stw	r8,4(sp)
  20645c:	a809883a 	mov	r4,r21
  206460:	103ee83a 	callr	r2
  206464:	102f883a 	mov	r23,r2
  206468:	da000117 	ldw	r8,4(sp)
  20646c:	00bfe00e 	bge	zero,r2,2063f0 <_gp+0xffdf480c>
  206470:	9de7c83a 	sub	r19,r19,r23
  206474:	98001f26 	beq	r19,zero,2064f4 <__sfvwrite_r+0x308>
  206478:	a0800217 	ldw	r2,8(r20)
  20647c:	e5f9883a 	add	fp,fp,r23
  206480:	95e5c83a 	sub	r18,r18,r23
  206484:	15efc83a 	sub	r23,r2,r23
  206488:	a5c00215 	stw	r23,8(r20)
  20648c:	b83f8426 	beq	r23,zero,2062a0 <_gp+0xffdf46bc>
  206490:	903fe11e 	bne	r18,zero,206418 <_gp+0xffdf4834>
  206494:	8f000017 	ldw	fp,0(r17)
  206498:	8c800117 	ldw	r18,4(r17)
  20649c:	0011883a 	mov	r8,zero
  2064a0:	8c400204 	addi	r17,r17,8
  2064a4:	003fdb06 	br	206414 <_gp+0xffdf4830>
  2064a8:	180d883a 	mov	r6,r3
  2064ac:	e00b883a 	mov	r5,fp
  2064b0:	da000115 	stw	r8,4(sp)
  2064b4:	d8c00015 	stw	r3,0(sp)
  2064b8:	020750c0 	call	20750c <memmove>
  2064bc:	d8c00017 	ldw	r3,0(sp)
  2064c0:	80800017 	ldw	r2,0(r16)
  2064c4:	800b883a 	mov	r5,r16
  2064c8:	a809883a 	mov	r4,r21
  2064cc:	10c5883a 	add	r2,r2,r3
  2064d0:	80800015 	stw	r2,0(r16)
  2064d4:	d8c00015 	stw	r3,0(sp)
  2064d8:	020597c0 	call	20597c <_fflush_r>
  2064dc:	d8c00017 	ldw	r3,0(sp)
  2064e0:	da000117 	ldw	r8,4(sp)
  2064e4:	103fc21e 	bne	r2,zero,2063f0 <_gp+0xffdf480c>
  2064e8:	182f883a 	mov	r23,r3
  2064ec:	9de7c83a 	sub	r19,r19,r23
  2064f0:	983fe11e 	bne	r19,zero,206478 <_gp+0xffdf4894>
  2064f4:	800b883a 	mov	r5,r16
  2064f8:	a809883a 	mov	r4,r21
  2064fc:	020597c0 	call	20597c <_fflush_r>
  206500:	103fbb1e 	bne	r2,zero,2063f0 <_gp+0xffdf480c>
  206504:	0011883a 	mov	r8,zero
  206508:	003fdb06 	br	206478 <_gp+0xffdf4894>
  20650c:	94c0012e 	bgeu	r18,r19,206514 <__sfvwrite_r+0x328>
  206510:	9027883a 	mov	r19,r18
  206514:	980d883a 	mov	r6,r19
  206518:	e00b883a 	mov	r5,fp
  20651c:	020750c0 	call	20750c <memmove>
  206520:	80800217 	ldw	r2,8(r16)
  206524:	80c00017 	ldw	r3,0(r16)
  206528:	14c5c83a 	sub	r2,r2,r19
  20652c:	1cc7883a 	add	r3,r3,r19
  206530:	80800215 	stw	r2,8(r16)
  206534:	80c00015 	stw	r3,0(r16)
  206538:	10004326 	beq	r2,zero,206648 <__sfvwrite_r+0x45c>
  20653c:	9805883a 	mov	r2,r19
  206540:	003f8306 	br	206350 <_gp+0xffdf476c>
  206544:	b00d883a 	mov	r6,r22
  206548:	e00b883a 	mov	r5,fp
  20654c:	da000115 	stw	r8,4(sp)
  206550:	020750c0 	call	20750c <memmove>
  206554:	80800217 	ldw	r2,8(r16)
  206558:	80c00017 	ldw	r3,0(r16)
  20655c:	da000117 	ldw	r8,4(sp)
  206560:	1585c83a 	sub	r2,r2,r22
  206564:	1dad883a 	add	r22,r3,r22
  206568:	80800215 	stw	r2,8(r16)
  20656c:	85800015 	stw	r22,0(r16)
  206570:	003fbf06 	br	206470 <_gp+0xffdf488c>
  206574:	81000017 	ldw	r4,0(r16)
  206578:	9027883a 	mov	r19,r18
  20657c:	902f883a 	mov	r23,r18
  206580:	003f6906 	br	206328 <_gp+0xffdf4744>
  206584:	900d883a 	mov	r6,r18
  206588:	01400284 	movi	r5,10
  20658c:	e009883a 	mov	r4,fp
  206590:	02072e00 	call	2072e0 <memchr>
  206594:	10003e26 	beq	r2,zero,206690 <__sfvwrite_r+0x4a4>
  206598:	10800044 	addi	r2,r2,1
  20659c:	1727c83a 	sub	r19,r2,fp
  2065a0:	02000044 	movi	r8,1
  2065a4:	003f9d06 	br	20641c <_gp+0xffdf4838>
  2065a8:	80800517 	ldw	r2,20(r16)
  2065ac:	81400417 	ldw	r5,16(r16)
  2065b0:	81c00017 	ldw	r7,0(r16)
  2065b4:	10a7883a 	add	r19,r2,r2
  2065b8:	9885883a 	add	r2,r19,r2
  2065bc:	1026d7fa 	srli	r19,r2,31
  2065c0:	396dc83a 	sub	r22,r7,r5
  2065c4:	b1000044 	addi	r4,r22,1
  2065c8:	9885883a 	add	r2,r19,r2
  2065cc:	1027d07a 	srai	r19,r2,1
  2065d0:	2485883a 	add	r2,r4,r18
  2065d4:	980d883a 	mov	r6,r19
  2065d8:	9880022e 	bgeu	r19,r2,2065e4 <__sfvwrite_r+0x3f8>
  2065dc:	1027883a 	mov	r19,r2
  2065e0:	100d883a 	mov	r6,r2
  2065e4:	18c1000c 	andi	r3,r3,1024
  2065e8:	18001c26 	beq	r3,zero,20665c <__sfvwrite_r+0x470>
  2065ec:	300b883a 	mov	r5,r6
  2065f0:	a809883a 	mov	r4,r21
  2065f4:	0206ad40 	call	206ad4 <_malloc_r>
  2065f8:	102f883a 	mov	r23,r2
  2065fc:	10002926 	beq	r2,zero,2066a4 <__sfvwrite_r+0x4b8>
  206600:	81400417 	ldw	r5,16(r16)
  206604:	b00d883a 	mov	r6,r22
  206608:	1009883a 	mov	r4,r2
  20660c:	02073c40 	call	2073c4 <memcpy>
  206610:	8080030b 	ldhu	r2,12(r16)
  206614:	00fedfc4 	movi	r3,-1153
  206618:	10c4703a 	and	r2,r2,r3
  20661c:	10802014 	ori	r2,r2,128
  206620:	8080030d 	sth	r2,12(r16)
  206624:	bd89883a 	add	r4,r23,r22
  206628:	9d8fc83a 	sub	r7,r19,r22
  20662c:	85c00415 	stw	r23,16(r16)
  206630:	84c00515 	stw	r19,20(r16)
  206634:	81000015 	stw	r4,0(r16)
  206638:	9027883a 	mov	r19,r18
  20663c:	81c00215 	stw	r7,8(r16)
  206640:	902f883a 	mov	r23,r18
  206644:	003f3806 	br	206328 <_gp+0xffdf4744>
  206648:	800b883a 	mov	r5,r16
  20664c:	a809883a 	mov	r4,r21
  206650:	020597c0 	call	20597c <_fflush_r>
  206654:	103fb926 	beq	r2,zero,20653c <_gp+0xffdf4958>
  206658:	003f6506 	br	2063f0 <_gp+0xffdf480c>
  20665c:	a809883a 	mov	r4,r21
  206660:	02088480 	call	208848 <_realloc_r>
  206664:	102f883a 	mov	r23,r2
  206668:	103fee1e 	bne	r2,zero,206624 <_gp+0xffdf4a40>
  20666c:	81400417 	ldw	r5,16(r16)
  206670:	a809883a 	mov	r4,r21
  206674:	0205edc0 	call	205edc <_free_r>
  206678:	8080030b 	ldhu	r2,12(r16)
  20667c:	00ffdfc4 	movi	r3,-129
  206680:	1884703a 	and	r2,r3,r2
  206684:	00c00304 	movi	r3,12
  206688:	a8c00015 	stw	r3,0(r21)
  20668c:	003f5906 	br	2063f4 <_gp+0xffdf4810>
  206690:	94c00044 	addi	r19,r18,1
  206694:	02000044 	movi	r8,1
  206698:	003f6006 	br	20641c <_gp+0xffdf4838>
  20669c:	00bfffc4 	movi	r2,-1
  2066a0:	003f0006 	br	2062a4 <_gp+0xffdf46c0>
  2066a4:	00800304 	movi	r2,12
  2066a8:	a8800015 	stw	r2,0(r21)
  2066ac:	8080030b 	ldhu	r2,12(r16)
  2066b0:	003f5006 	br	2063f4 <_gp+0xffdf4810>

002066b4 <_fwalk>:
  2066b4:	defff704 	addi	sp,sp,-36
  2066b8:	dd000415 	stw	r20,16(sp)
  2066bc:	dfc00815 	stw	ra,32(sp)
  2066c0:	ddc00715 	stw	r23,28(sp)
  2066c4:	dd800615 	stw	r22,24(sp)
  2066c8:	dd400515 	stw	r21,20(sp)
  2066cc:	dcc00315 	stw	r19,12(sp)
  2066d0:	dc800215 	stw	r18,8(sp)
  2066d4:	dc400115 	stw	r17,4(sp)
  2066d8:	dc000015 	stw	r16,0(sp)
  2066dc:	2500b804 	addi	r20,r4,736
  2066e0:	a0002326 	beq	r20,zero,206770 <_fwalk+0xbc>
  2066e4:	282b883a 	mov	r21,r5
  2066e8:	002f883a 	mov	r23,zero
  2066ec:	05800044 	movi	r22,1
  2066f0:	04ffffc4 	movi	r19,-1
  2066f4:	a4400117 	ldw	r17,4(r20)
  2066f8:	a4800217 	ldw	r18,8(r20)
  2066fc:	8c7fffc4 	addi	r17,r17,-1
  206700:	88000d16 	blt	r17,zero,206738 <_fwalk+0x84>
  206704:	94000304 	addi	r16,r18,12
  206708:	94800384 	addi	r18,r18,14
  20670c:	8080000b 	ldhu	r2,0(r16)
  206710:	8c7fffc4 	addi	r17,r17,-1
  206714:	813ffd04 	addi	r4,r16,-12
  206718:	b080042e 	bgeu	r22,r2,20672c <_fwalk+0x78>
  20671c:	9080000f 	ldh	r2,0(r18)
  206720:	14c00226 	beq	r2,r19,20672c <_fwalk+0x78>
  206724:	a83ee83a 	callr	r21
  206728:	b8aeb03a 	or	r23,r23,r2
  20672c:	84001a04 	addi	r16,r16,104
  206730:	94801a04 	addi	r18,r18,104
  206734:	8cfff51e 	bne	r17,r19,20670c <_gp+0xffdf4b28>
  206738:	a5000017 	ldw	r20,0(r20)
  20673c:	a03fed1e 	bne	r20,zero,2066f4 <_gp+0xffdf4b10>
  206740:	b805883a 	mov	r2,r23
  206744:	dfc00817 	ldw	ra,32(sp)
  206748:	ddc00717 	ldw	r23,28(sp)
  20674c:	dd800617 	ldw	r22,24(sp)
  206750:	dd400517 	ldw	r21,20(sp)
  206754:	dd000417 	ldw	r20,16(sp)
  206758:	dcc00317 	ldw	r19,12(sp)
  20675c:	dc800217 	ldw	r18,8(sp)
  206760:	dc400117 	ldw	r17,4(sp)
  206764:	dc000017 	ldw	r16,0(sp)
  206768:	dec00904 	addi	sp,sp,36
  20676c:	f800283a 	ret
  206770:	002f883a 	mov	r23,zero
  206774:	003ff206 	br	206740 <_gp+0xffdf4b5c>

00206778 <_fwalk_reent>:
  206778:	defff704 	addi	sp,sp,-36
  20677c:	dd000415 	stw	r20,16(sp)
  206780:	dfc00815 	stw	ra,32(sp)
  206784:	ddc00715 	stw	r23,28(sp)
  206788:	dd800615 	stw	r22,24(sp)
  20678c:	dd400515 	stw	r21,20(sp)
  206790:	dcc00315 	stw	r19,12(sp)
  206794:	dc800215 	stw	r18,8(sp)
  206798:	dc400115 	stw	r17,4(sp)
  20679c:	dc000015 	stw	r16,0(sp)
  2067a0:	2500b804 	addi	r20,r4,736
  2067a4:	a0002326 	beq	r20,zero,206834 <_fwalk_reent+0xbc>
  2067a8:	282b883a 	mov	r21,r5
  2067ac:	2027883a 	mov	r19,r4
  2067b0:	002f883a 	mov	r23,zero
  2067b4:	05800044 	movi	r22,1
  2067b8:	04bfffc4 	movi	r18,-1
  2067bc:	a4400117 	ldw	r17,4(r20)
  2067c0:	a4000217 	ldw	r16,8(r20)
  2067c4:	8c7fffc4 	addi	r17,r17,-1
  2067c8:	88000c16 	blt	r17,zero,2067fc <_fwalk_reent+0x84>
  2067cc:	84000304 	addi	r16,r16,12
  2067d0:	8080000b 	ldhu	r2,0(r16)
  2067d4:	8c7fffc4 	addi	r17,r17,-1
  2067d8:	817ffd04 	addi	r5,r16,-12
  2067dc:	b080052e 	bgeu	r22,r2,2067f4 <_fwalk_reent+0x7c>
  2067e0:	8080008f 	ldh	r2,2(r16)
  2067e4:	9809883a 	mov	r4,r19
  2067e8:	14800226 	beq	r2,r18,2067f4 <_fwalk_reent+0x7c>
  2067ec:	a83ee83a 	callr	r21
  2067f0:	b8aeb03a 	or	r23,r23,r2
  2067f4:	84001a04 	addi	r16,r16,104
  2067f8:	8cbff51e 	bne	r17,r18,2067d0 <_gp+0xffdf4bec>
  2067fc:	a5000017 	ldw	r20,0(r20)
  206800:	a03fee1e 	bne	r20,zero,2067bc <_gp+0xffdf4bd8>
  206804:	b805883a 	mov	r2,r23
  206808:	dfc00817 	ldw	ra,32(sp)
  20680c:	ddc00717 	ldw	r23,28(sp)
  206810:	dd800617 	ldw	r22,24(sp)
  206814:	dd400517 	ldw	r21,20(sp)
  206818:	dd000417 	ldw	r20,16(sp)
  20681c:	dcc00317 	ldw	r19,12(sp)
  206820:	dc800217 	ldw	r18,8(sp)
  206824:	dc400117 	ldw	r17,4(sp)
  206828:	dc000017 	ldw	r16,0(sp)
  20682c:	dec00904 	addi	sp,sp,36
  206830:	f800283a 	ret
  206834:	002f883a 	mov	r23,zero
  206838:	003ff206 	br	206804 <_gp+0xffdf4c20>

0020683c <_setlocale_r>:
  20683c:	30001b26 	beq	r6,zero,2068ac <_setlocale_r+0x70>
  206840:	01400874 	movhi	r5,33
  206844:	defffe04 	addi	sp,sp,-8
  206848:	29506104 	addi	r5,r5,16772
  20684c:	3009883a 	mov	r4,r6
  206850:	dc000015 	stw	r16,0(sp)
  206854:	dfc00115 	stw	ra,4(sp)
  206858:	3021883a 	mov	r16,r6
  20685c:	0208fb00 	call	208fb0 <strcmp>
  206860:	1000061e 	bne	r2,zero,20687c <_setlocale_r+0x40>
  206864:	00800874 	movhi	r2,33
  206868:	10906004 	addi	r2,r2,16768
  20686c:	dfc00117 	ldw	ra,4(sp)
  206870:	dc000017 	ldw	r16,0(sp)
  206874:	dec00204 	addi	sp,sp,8
  206878:	f800283a 	ret
  20687c:	01400874 	movhi	r5,33
  206880:	29506004 	addi	r5,r5,16768
  206884:	8009883a 	mov	r4,r16
  206888:	0208fb00 	call	208fb0 <strcmp>
  20688c:	103ff526 	beq	r2,zero,206864 <_gp+0xffdf4c80>
  206890:	01400874 	movhi	r5,33
  206894:	29504b04 	addi	r5,r5,16684
  206898:	8009883a 	mov	r4,r16
  20689c:	0208fb00 	call	208fb0 <strcmp>
  2068a0:	103ff026 	beq	r2,zero,206864 <_gp+0xffdf4c80>
  2068a4:	0005883a 	mov	r2,zero
  2068a8:	003ff006 	br	20686c <_gp+0xffdf4c88>
  2068ac:	00800874 	movhi	r2,33
  2068b0:	10906004 	addi	r2,r2,16768
  2068b4:	f800283a 	ret

002068b8 <__locale_charset>:
  2068b8:	00801074 	movhi	r2,65
  2068bc:	10a11104 	addi	r2,r2,-31676
  2068c0:	f800283a 	ret

002068c4 <__locale_mb_cur_max>:
  2068c4:	00801074 	movhi	r2,65
  2068c8:	10a6fb04 	addi	r2,r2,-25620
  2068cc:	10800017 	ldw	r2,0(r2)
  2068d0:	f800283a 	ret

002068d4 <__locale_msgcharset>:
  2068d4:	00801074 	movhi	r2,65
  2068d8:	10a10904 	addi	r2,r2,-31708
  2068dc:	f800283a 	ret

002068e0 <__locale_cjk_lang>:
  2068e0:	0005883a 	mov	r2,zero
  2068e4:	f800283a 	ret

002068e8 <_localeconv_r>:
  2068e8:	00801074 	movhi	r2,65
  2068ec:	10a11904 	addi	r2,r2,-31644
  2068f0:	f800283a 	ret

002068f4 <setlocale>:
  2068f4:	00801074 	movhi	r2,65
  2068f8:	10a6fa04 	addi	r2,r2,-25624
  2068fc:	280d883a 	mov	r6,r5
  206900:	200b883a 	mov	r5,r4
  206904:	11000017 	ldw	r4,0(r2)
  206908:	020683c1 	jmpi	20683c <_setlocale_r>

0020690c <localeconv>:
  20690c:	00801074 	movhi	r2,65
  206910:	10a11904 	addi	r2,r2,-31644
  206914:	f800283a 	ret

00206918 <__smakebuf_r>:
  206918:	2880030b 	ldhu	r2,12(r5)
  20691c:	10c0008c 	andi	r3,r2,2
  206920:	1800411e 	bne	r3,zero,206a28 <__smakebuf_r+0x110>
  206924:	deffec04 	addi	sp,sp,-80
  206928:	dc000f15 	stw	r16,60(sp)
  20692c:	2821883a 	mov	r16,r5
  206930:	2940038f 	ldh	r5,14(r5)
  206934:	dc401015 	stw	r17,64(sp)
  206938:	dfc01315 	stw	ra,76(sp)
  20693c:	dcc01215 	stw	r19,72(sp)
  206940:	dc801115 	stw	r18,68(sp)
  206944:	2023883a 	mov	r17,r4
  206948:	28001c16 	blt	r5,zero,2069bc <__smakebuf_r+0xa4>
  20694c:	d80d883a 	mov	r6,sp
  206950:	020ac200 	call	20ac20 <_fstat_r>
  206954:	10001816 	blt	r2,zero,2069b8 <__smakebuf_r+0xa0>
  206958:	d8800117 	ldw	r2,4(sp)
  20695c:	00e00014 	movui	r3,32768
  206960:	10bc000c 	andi	r2,r2,61440
  206964:	14c80020 	cmpeqi	r19,r2,8192
  206968:	10c03726 	beq	r2,r3,206a48 <__smakebuf_r+0x130>
  20696c:	80c0030b 	ldhu	r3,12(r16)
  206970:	18c20014 	ori	r3,r3,2048
  206974:	80c0030d 	sth	r3,12(r16)
  206978:	00c80004 	movi	r3,8192
  20697c:	10c0521e 	bne	r2,r3,206ac8 <__smakebuf_r+0x1b0>
  206980:	8140038f 	ldh	r5,14(r16)
  206984:	8809883a 	mov	r4,r17
  206988:	020ac7c0 	call	20ac7c <_isatty_r>
  20698c:	10004c26 	beq	r2,zero,206ac0 <__smakebuf_r+0x1a8>
  206990:	8080030b 	ldhu	r2,12(r16)
  206994:	80c010c4 	addi	r3,r16,67
  206998:	80c00015 	stw	r3,0(r16)
  20699c:	10800054 	ori	r2,r2,1
  2069a0:	8080030d 	sth	r2,12(r16)
  2069a4:	00800044 	movi	r2,1
  2069a8:	80c00415 	stw	r3,16(r16)
  2069ac:	80800515 	stw	r2,20(r16)
  2069b0:	04810004 	movi	r18,1024
  2069b4:	00000706 	br	2069d4 <__smakebuf_r+0xbc>
  2069b8:	8080030b 	ldhu	r2,12(r16)
  2069bc:	10c0200c 	andi	r3,r2,128
  2069c0:	18001f1e 	bne	r3,zero,206a40 <__smakebuf_r+0x128>
  2069c4:	04810004 	movi	r18,1024
  2069c8:	10820014 	ori	r2,r2,2048
  2069cc:	8080030d 	sth	r2,12(r16)
  2069d0:	0027883a 	mov	r19,zero
  2069d4:	900b883a 	mov	r5,r18
  2069d8:	8809883a 	mov	r4,r17
  2069dc:	0206ad40 	call	206ad4 <_malloc_r>
  2069e0:	10002c26 	beq	r2,zero,206a94 <__smakebuf_r+0x17c>
  2069e4:	80c0030b 	ldhu	r3,12(r16)
  2069e8:	01000834 	movhi	r4,32
  2069ec:	21168404 	addi	r4,r4,23056
  2069f0:	89000f15 	stw	r4,60(r17)
  2069f4:	18c02014 	ori	r3,r3,128
  2069f8:	80c0030d 	sth	r3,12(r16)
  2069fc:	80800015 	stw	r2,0(r16)
  206a00:	80800415 	stw	r2,16(r16)
  206a04:	84800515 	stw	r18,20(r16)
  206a08:	98001a1e 	bne	r19,zero,206a74 <__smakebuf_r+0x15c>
  206a0c:	dfc01317 	ldw	ra,76(sp)
  206a10:	dcc01217 	ldw	r19,72(sp)
  206a14:	dc801117 	ldw	r18,68(sp)
  206a18:	dc401017 	ldw	r17,64(sp)
  206a1c:	dc000f17 	ldw	r16,60(sp)
  206a20:	dec01404 	addi	sp,sp,80
  206a24:	f800283a 	ret
  206a28:	288010c4 	addi	r2,r5,67
  206a2c:	28800015 	stw	r2,0(r5)
  206a30:	28800415 	stw	r2,16(r5)
  206a34:	00800044 	movi	r2,1
  206a38:	28800515 	stw	r2,20(r5)
  206a3c:	f800283a 	ret
  206a40:	04801004 	movi	r18,64
  206a44:	003fe006 	br	2069c8 <_gp+0xffdf4de4>
  206a48:	81000a17 	ldw	r4,40(r16)
  206a4c:	00c00874 	movhi	r3,33
  206a50:	18e3d304 	addi	r3,r3,-28852
  206a54:	20ffc51e 	bne	r4,r3,20696c <_gp+0xffdf4d88>
  206a58:	8080030b 	ldhu	r2,12(r16)
  206a5c:	04810004 	movi	r18,1024
  206a60:	84801315 	stw	r18,76(r16)
  206a64:	1484b03a 	or	r2,r2,r18
  206a68:	8080030d 	sth	r2,12(r16)
  206a6c:	0027883a 	mov	r19,zero
  206a70:	003fd806 	br	2069d4 <_gp+0xffdf4df0>
  206a74:	8140038f 	ldh	r5,14(r16)
  206a78:	8809883a 	mov	r4,r17
  206a7c:	020ac7c0 	call	20ac7c <_isatty_r>
  206a80:	103fe226 	beq	r2,zero,206a0c <_gp+0xffdf4e28>
  206a84:	8080030b 	ldhu	r2,12(r16)
  206a88:	10800054 	ori	r2,r2,1
  206a8c:	8080030d 	sth	r2,12(r16)
  206a90:	003fde06 	br	206a0c <_gp+0xffdf4e28>
  206a94:	8080030b 	ldhu	r2,12(r16)
  206a98:	10c0800c 	andi	r3,r2,512
  206a9c:	183fdb1e 	bne	r3,zero,206a0c <_gp+0xffdf4e28>
  206aa0:	10800094 	ori	r2,r2,2
  206aa4:	80c010c4 	addi	r3,r16,67
  206aa8:	8080030d 	sth	r2,12(r16)
  206aac:	00800044 	movi	r2,1
  206ab0:	80c00015 	stw	r3,0(r16)
  206ab4:	80c00415 	stw	r3,16(r16)
  206ab8:	80800515 	stw	r2,20(r16)
  206abc:	003fd306 	br	206a0c <_gp+0xffdf4e28>
  206ac0:	04810004 	movi	r18,1024
  206ac4:	003fc306 	br	2069d4 <_gp+0xffdf4df0>
  206ac8:	0027883a 	mov	r19,zero
  206acc:	04810004 	movi	r18,1024
  206ad0:	003fc006 	br	2069d4 <_gp+0xffdf4df0>

00206ad4 <_malloc_r>:
  206ad4:	defff504 	addi	sp,sp,-44
  206ad8:	dc800315 	stw	r18,12(sp)
  206adc:	dfc00a15 	stw	ra,40(sp)
  206ae0:	df000915 	stw	fp,36(sp)
  206ae4:	ddc00815 	stw	r23,32(sp)
  206ae8:	dd800715 	stw	r22,28(sp)
  206aec:	dd400615 	stw	r21,24(sp)
  206af0:	dd000515 	stw	r20,20(sp)
  206af4:	dcc00415 	stw	r19,16(sp)
  206af8:	dc400215 	stw	r17,8(sp)
  206afc:	dc000115 	stw	r16,4(sp)
  206b00:	288002c4 	addi	r2,r5,11
  206b04:	00c00584 	movi	r3,22
  206b08:	2025883a 	mov	r18,r4
  206b0c:	18807f2e 	bgeu	r3,r2,206d0c <_malloc_r+0x238>
  206b10:	047ffe04 	movi	r17,-8
  206b14:	1462703a 	and	r17,r2,r17
  206b18:	8800a316 	blt	r17,zero,206da8 <_malloc_r+0x2d4>
  206b1c:	8940a236 	bltu	r17,r5,206da8 <_malloc_r+0x2d4>
  206b20:	020ea6c0 	call	20ea6c <__malloc_lock>
  206b24:	00807dc4 	movi	r2,503
  206b28:	1441e92e 	bgeu	r2,r17,2072d0 <_malloc_r+0x7fc>
  206b2c:	8804d27a 	srli	r2,r17,9
  206b30:	1000a126 	beq	r2,zero,206db8 <_malloc_r+0x2e4>
  206b34:	00c00104 	movi	r3,4
  206b38:	18811e36 	bltu	r3,r2,206fb4 <_malloc_r+0x4e0>
  206b3c:	8804d1ba 	srli	r2,r17,6
  206b40:	12000e44 	addi	r8,r2,57
  206b44:	11c00e04 	addi	r7,r2,56
  206b48:	4209883a 	add	r4,r8,r8
  206b4c:	04c01074 	movhi	r19,65
  206b50:	2109883a 	add	r4,r4,r4
  206b54:	9ce12704 	addi	r19,r19,-31588
  206b58:	2109883a 	add	r4,r4,r4
  206b5c:	9909883a 	add	r4,r19,r4
  206b60:	24000117 	ldw	r16,4(r4)
  206b64:	213ffe04 	addi	r4,r4,-8
  206b68:	24009726 	beq	r4,r16,206dc8 <_malloc_r+0x2f4>
  206b6c:	80800117 	ldw	r2,4(r16)
  206b70:	01bfff04 	movi	r6,-4
  206b74:	014003c4 	movi	r5,15
  206b78:	1184703a 	and	r2,r2,r6
  206b7c:	1447c83a 	sub	r3,r2,r17
  206b80:	28c00716 	blt	r5,r3,206ba0 <_malloc_r+0xcc>
  206b84:	1800920e 	bge	r3,zero,206dd0 <_malloc_r+0x2fc>
  206b88:	84000317 	ldw	r16,12(r16)
  206b8c:	24008e26 	beq	r4,r16,206dc8 <_malloc_r+0x2f4>
  206b90:	80800117 	ldw	r2,4(r16)
  206b94:	1184703a 	and	r2,r2,r6
  206b98:	1447c83a 	sub	r3,r2,r17
  206b9c:	28fff90e 	bge	r5,r3,206b84 <_gp+0xffdf4fa0>
  206ba0:	3809883a 	mov	r4,r7
  206ba4:	01801074 	movhi	r6,65
  206ba8:	9c000417 	ldw	r16,16(r19)
  206bac:	31a12704 	addi	r6,r6,-31588
  206bb0:	32000204 	addi	r8,r6,8
  206bb4:	82013426 	beq	r16,r8,207088 <_malloc_r+0x5b4>
  206bb8:	80c00117 	ldw	r3,4(r16)
  206bbc:	00bfff04 	movi	r2,-4
  206bc0:	188e703a 	and	r7,r3,r2
  206bc4:	3c45c83a 	sub	r2,r7,r17
  206bc8:	00c003c4 	movi	r3,15
  206bcc:	18811f16 	blt	r3,r2,20704c <_malloc_r+0x578>
  206bd0:	32000515 	stw	r8,20(r6)
  206bd4:	32000415 	stw	r8,16(r6)
  206bd8:	10007f0e 	bge	r2,zero,206dd8 <_malloc_r+0x304>
  206bdc:	00807fc4 	movi	r2,511
  206be0:	11c0fd36 	bltu	r2,r7,206fd8 <_malloc_r+0x504>
  206be4:	3806d0fa 	srli	r3,r7,3
  206be8:	01c00044 	movi	r7,1
  206bec:	30800117 	ldw	r2,4(r6)
  206bf0:	19400044 	addi	r5,r3,1
  206bf4:	294b883a 	add	r5,r5,r5
  206bf8:	1807d0ba 	srai	r3,r3,2
  206bfc:	294b883a 	add	r5,r5,r5
  206c00:	294b883a 	add	r5,r5,r5
  206c04:	298b883a 	add	r5,r5,r6
  206c08:	38c6983a 	sll	r3,r7,r3
  206c0c:	29c00017 	ldw	r7,0(r5)
  206c10:	2a7ffe04 	addi	r9,r5,-8
  206c14:	1886b03a 	or	r3,r3,r2
  206c18:	82400315 	stw	r9,12(r16)
  206c1c:	81c00215 	stw	r7,8(r16)
  206c20:	30c00115 	stw	r3,4(r6)
  206c24:	2c000015 	stw	r16,0(r5)
  206c28:	3c000315 	stw	r16,12(r7)
  206c2c:	2005d0ba 	srai	r2,r4,2
  206c30:	01400044 	movi	r5,1
  206c34:	288a983a 	sll	r5,r5,r2
  206c38:	19406f36 	bltu	r3,r5,206df8 <_malloc_r+0x324>
  206c3c:	28c4703a 	and	r2,r5,r3
  206c40:	10000a1e 	bne	r2,zero,206c6c <_malloc_r+0x198>
  206c44:	00bfff04 	movi	r2,-4
  206c48:	294b883a 	add	r5,r5,r5
  206c4c:	2088703a 	and	r4,r4,r2
  206c50:	28c4703a 	and	r2,r5,r3
  206c54:	21000104 	addi	r4,r4,4
  206c58:	1000041e 	bne	r2,zero,206c6c <_malloc_r+0x198>
  206c5c:	294b883a 	add	r5,r5,r5
  206c60:	28c4703a 	and	r2,r5,r3
  206c64:	21000104 	addi	r4,r4,4
  206c68:	103ffc26 	beq	r2,zero,206c5c <_gp+0xffdf5078>
  206c6c:	02bfff04 	movi	r10,-4
  206c70:	024003c4 	movi	r9,15
  206c74:	21800044 	addi	r6,r4,1
  206c78:	318d883a 	add	r6,r6,r6
  206c7c:	318d883a 	add	r6,r6,r6
  206c80:	318d883a 	add	r6,r6,r6
  206c84:	998d883a 	add	r6,r19,r6
  206c88:	333ffe04 	addi	r12,r6,-8
  206c8c:	2017883a 	mov	r11,r4
  206c90:	31800104 	addi	r6,r6,4
  206c94:	34000017 	ldw	r16,0(r6)
  206c98:	31fffd04 	addi	r7,r6,-12
  206c9c:	81c0041e 	bne	r16,r7,206cb0 <_malloc_r+0x1dc>
  206ca0:	0000fb06 	br	207090 <_malloc_r+0x5bc>
  206ca4:	1801030e 	bge	r3,zero,2070b4 <_malloc_r+0x5e0>
  206ca8:	84000317 	ldw	r16,12(r16)
  206cac:	81c0f826 	beq	r16,r7,207090 <_malloc_r+0x5bc>
  206cb0:	80800117 	ldw	r2,4(r16)
  206cb4:	1284703a 	and	r2,r2,r10
  206cb8:	1447c83a 	sub	r3,r2,r17
  206cbc:	48fff90e 	bge	r9,r3,206ca4 <_gp+0xffdf50c0>
  206cc0:	80800317 	ldw	r2,12(r16)
  206cc4:	81000217 	ldw	r4,8(r16)
  206cc8:	89400054 	ori	r5,r17,1
  206ccc:	81400115 	stw	r5,4(r16)
  206cd0:	20800315 	stw	r2,12(r4)
  206cd4:	11000215 	stw	r4,8(r2)
  206cd8:	8463883a 	add	r17,r16,r17
  206cdc:	9c400515 	stw	r17,20(r19)
  206ce0:	9c400415 	stw	r17,16(r19)
  206ce4:	18800054 	ori	r2,r3,1
  206ce8:	88800115 	stw	r2,4(r17)
  206cec:	8a000315 	stw	r8,12(r17)
  206cf0:	8a000215 	stw	r8,8(r17)
  206cf4:	88e3883a 	add	r17,r17,r3
  206cf8:	88c00015 	stw	r3,0(r17)
  206cfc:	9009883a 	mov	r4,r18
  206d00:	020ea900 	call	20ea90 <__malloc_unlock>
  206d04:	80800204 	addi	r2,r16,8
  206d08:	00001b06 	br	206d78 <_malloc_r+0x2a4>
  206d0c:	04400404 	movi	r17,16
  206d10:	89402536 	bltu	r17,r5,206da8 <_malloc_r+0x2d4>
  206d14:	020ea6c0 	call	20ea6c <__malloc_lock>
  206d18:	00800184 	movi	r2,6
  206d1c:	01000084 	movi	r4,2
  206d20:	04c01074 	movhi	r19,65
  206d24:	1085883a 	add	r2,r2,r2
  206d28:	9ce12704 	addi	r19,r19,-31588
  206d2c:	1085883a 	add	r2,r2,r2
  206d30:	9885883a 	add	r2,r19,r2
  206d34:	14000117 	ldw	r16,4(r2)
  206d38:	10fffe04 	addi	r3,r2,-8
  206d3c:	80c0d926 	beq	r16,r3,2070a4 <_malloc_r+0x5d0>
  206d40:	80c00117 	ldw	r3,4(r16)
  206d44:	81000317 	ldw	r4,12(r16)
  206d48:	00bfff04 	movi	r2,-4
  206d4c:	1884703a 	and	r2,r3,r2
  206d50:	81400217 	ldw	r5,8(r16)
  206d54:	8085883a 	add	r2,r16,r2
  206d58:	10c00117 	ldw	r3,4(r2)
  206d5c:	29000315 	stw	r4,12(r5)
  206d60:	21400215 	stw	r5,8(r4)
  206d64:	18c00054 	ori	r3,r3,1
  206d68:	10c00115 	stw	r3,4(r2)
  206d6c:	9009883a 	mov	r4,r18
  206d70:	020ea900 	call	20ea90 <__malloc_unlock>
  206d74:	80800204 	addi	r2,r16,8
  206d78:	dfc00a17 	ldw	ra,40(sp)
  206d7c:	df000917 	ldw	fp,36(sp)
  206d80:	ddc00817 	ldw	r23,32(sp)
  206d84:	dd800717 	ldw	r22,28(sp)
  206d88:	dd400617 	ldw	r21,24(sp)
  206d8c:	dd000517 	ldw	r20,20(sp)
  206d90:	dcc00417 	ldw	r19,16(sp)
  206d94:	dc800317 	ldw	r18,12(sp)
  206d98:	dc400217 	ldw	r17,8(sp)
  206d9c:	dc000117 	ldw	r16,4(sp)
  206da0:	dec00b04 	addi	sp,sp,44
  206da4:	f800283a 	ret
  206da8:	00800304 	movi	r2,12
  206dac:	90800015 	stw	r2,0(r18)
  206db0:	0005883a 	mov	r2,zero
  206db4:	003ff006 	br	206d78 <_gp+0xffdf5194>
  206db8:	01002004 	movi	r4,128
  206dbc:	02001004 	movi	r8,64
  206dc0:	01c00fc4 	movi	r7,63
  206dc4:	003f6106 	br	206b4c <_gp+0xffdf4f68>
  206dc8:	4009883a 	mov	r4,r8
  206dcc:	003f7506 	br	206ba4 <_gp+0xffdf4fc0>
  206dd0:	81000317 	ldw	r4,12(r16)
  206dd4:	003fde06 	br	206d50 <_gp+0xffdf516c>
  206dd8:	81c5883a 	add	r2,r16,r7
  206ddc:	11400117 	ldw	r5,4(r2)
  206de0:	9009883a 	mov	r4,r18
  206de4:	29400054 	ori	r5,r5,1
  206de8:	11400115 	stw	r5,4(r2)
  206dec:	020ea900 	call	20ea90 <__malloc_unlock>
  206df0:	80800204 	addi	r2,r16,8
  206df4:	003fe006 	br	206d78 <_gp+0xffdf5194>
  206df8:	9c000217 	ldw	r16,8(r19)
  206dfc:	00bfff04 	movi	r2,-4
  206e00:	85800117 	ldw	r22,4(r16)
  206e04:	b0ac703a 	and	r22,r22,r2
  206e08:	b4400336 	bltu	r22,r17,206e18 <_malloc_r+0x344>
  206e0c:	b445c83a 	sub	r2,r22,r17
  206e10:	00c003c4 	movi	r3,15
  206e14:	18805d16 	blt	r3,r2,206f8c <_malloc_r+0x4b8>
  206e18:	05c01074 	movhi	r23,65
  206e1c:	00801074 	movhi	r2,65
  206e20:	10a71404 	addi	r2,r2,-25520
  206e24:	bde6fc04 	addi	r23,r23,-25616
  206e28:	15400017 	ldw	r21,0(r2)
  206e2c:	b8c00017 	ldw	r3,0(r23)
  206e30:	00bfffc4 	movi	r2,-1
  206e34:	858d883a 	add	r6,r16,r22
  206e38:	8d6b883a 	add	r21,r17,r21
  206e3c:	1880ea26 	beq	r3,r2,2071e8 <_malloc_r+0x714>
  206e40:	ad4403c4 	addi	r21,r21,4111
  206e44:	00bc0004 	movi	r2,-4096
  206e48:	a8aa703a 	and	r21,r21,r2
  206e4c:	a80b883a 	mov	r5,r21
  206e50:	9009883a 	mov	r4,r18
  206e54:	d9800015 	stw	r6,0(sp)
  206e58:	0208e200 	call	208e20 <_sbrk_r>
  206e5c:	1029883a 	mov	r20,r2
  206e60:	00bfffc4 	movi	r2,-1
  206e64:	d9800017 	ldw	r6,0(sp)
  206e68:	a080e826 	beq	r20,r2,20720c <_malloc_r+0x738>
  206e6c:	a180a636 	bltu	r20,r6,207108 <_malloc_r+0x634>
  206e70:	07001074 	movhi	fp,65
  206e74:	e7271d04 	addi	fp,fp,-25484
  206e78:	e0800017 	ldw	r2,0(fp)
  206e7c:	a887883a 	add	r3,r21,r2
  206e80:	e0c00015 	stw	r3,0(fp)
  206e84:	3500e626 	beq	r6,r20,207220 <_malloc_r+0x74c>
  206e88:	b9000017 	ldw	r4,0(r23)
  206e8c:	00bfffc4 	movi	r2,-1
  206e90:	2080ee26 	beq	r4,r2,20724c <_malloc_r+0x778>
  206e94:	a185c83a 	sub	r2,r20,r6
  206e98:	10c5883a 	add	r2,r2,r3
  206e9c:	e0800015 	stw	r2,0(fp)
  206ea0:	a0c001cc 	andi	r3,r20,7
  206ea4:	1800bc26 	beq	r3,zero,207198 <_malloc_r+0x6c4>
  206ea8:	a0e9c83a 	sub	r20,r20,r3
  206eac:	00840204 	movi	r2,4104
  206eb0:	a5000204 	addi	r20,r20,8
  206eb4:	10c7c83a 	sub	r3,r2,r3
  206eb8:	a545883a 	add	r2,r20,r21
  206ebc:	1083ffcc 	andi	r2,r2,4095
  206ec0:	18abc83a 	sub	r21,r3,r2
  206ec4:	a80b883a 	mov	r5,r21
  206ec8:	9009883a 	mov	r4,r18
  206ecc:	0208e200 	call	208e20 <_sbrk_r>
  206ed0:	00ffffc4 	movi	r3,-1
  206ed4:	10c0e126 	beq	r2,r3,20725c <_malloc_r+0x788>
  206ed8:	1505c83a 	sub	r2,r2,r20
  206edc:	1545883a 	add	r2,r2,r21
  206ee0:	10800054 	ori	r2,r2,1
  206ee4:	e0c00017 	ldw	r3,0(fp)
  206ee8:	9d000215 	stw	r20,8(r19)
  206eec:	a0800115 	stw	r2,4(r20)
  206ef0:	a8c7883a 	add	r3,r21,r3
  206ef4:	e0c00015 	stw	r3,0(fp)
  206ef8:	84c00e26 	beq	r16,r19,206f34 <_malloc_r+0x460>
  206efc:	018003c4 	movi	r6,15
  206f00:	3580a72e 	bgeu	r6,r22,2071a0 <_malloc_r+0x6cc>
  206f04:	81400117 	ldw	r5,4(r16)
  206f08:	013ffe04 	movi	r4,-8
  206f0c:	b0bffd04 	addi	r2,r22,-12
  206f10:	1104703a 	and	r2,r2,r4
  206f14:	2900004c 	andi	r4,r5,1
  206f18:	2088b03a 	or	r4,r4,r2
  206f1c:	81000115 	stw	r4,4(r16)
  206f20:	01400144 	movi	r5,5
  206f24:	8089883a 	add	r4,r16,r2
  206f28:	21400115 	stw	r5,4(r4)
  206f2c:	21400215 	stw	r5,8(r4)
  206f30:	3080cd36 	bltu	r6,r2,207268 <_malloc_r+0x794>
  206f34:	00801074 	movhi	r2,65
  206f38:	10a71304 	addi	r2,r2,-25524
  206f3c:	11000017 	ldw	r4,0(r2)
  206f40:	20c0012e 	bgeu	r4,r3,206f48 <_malloc_r+0x474>
  206f44:	10c00015 	stw	r3,0(r2)
  206f48:	00801074 	movhi	r2,65
  206f4c:	10a71204 	addi	r2,r2,-25528
  206f50:	11000017 	ldw	r4,0(r2)
  206f54:	9c000217 	ldw	r16,8(r19)
  206f58:	20c0012e 	bgeu	r4,r3,206f60 <_malloc_r+0x48c>
  206f5c:	10c00015 	stw	r3,0(r2)
  206f60:	80c00117 	ldw	r3,4(r16)
  206f64:	00bfff04 	movi	r2,-4
  206f68:	1886703a 	and	r3,r3,r2
  206f6c:	1c45c83a 	sub	r2,r3,r17
  206f70:	1c400236 	bltu	r3,r17,206f7c <_malloc_r+0x4a8>
  206f74:	00c003c4 	movi	r3,15
  206f78:	18800416 	blt	r3,r2,206f8c <_malloc_r+0x4b8>
  206f7c:	9009883a 	mov	r4,r18
  206f80:	020ea900 	call	20ea90 <__malloc_unlock>
  206f84:	0005883a 	mov	r2,zero
  206f88:	003f7b06 	br	206d78 <_gp+0xffdf5194>
  206f8c:	88c00054 	ori	r3,r17,1
  206f90:	80c00115 	stw	r3,4(r16)
  206f94:	8463883a 	add	r17,r16,r17
  206f98:	10800054 	ori	r2,r2,1
  206f9c:	9c400215 	stw	r17,8(r19)
  206fa0:	88800115 	stw	r2,4(r17)
  206fa4:	9009883a 	mov	r4,r18
  206fa8:	020ea900 	call	20ea90 <__malloc_unlock>
  206fac:	80800204 	addi	r2,r16,8
  206fb0:	003f7106 	br	206d78 <_gp+0xffdf5194>
  206fb4:	00c00504 	movi	r3,20
  206fb8:	18804a2e 	bgeu	r3,r2,2070e4 <_malloc_r+0x610>
  206fbc:	00c01504 	movi	r3,84
  206fc0:	18806e36 	bltu	r3,r2,20717c <_malloc_r+0x6a8>
  206fc4:	8804d33a 	srli	r2,r17,12
  206fc8:	12001bc4 	addi	r8,r2,111
  206fcc:	11c01b84 	addi	r7,r2,110
  206fd0:	4209883a 	add	r4,r8,r8
  206fd4:	003edd06 	br	206b4c <_gp+0xffdf4f68>
  206fd8:	3804d27a 	srli	r2,r7,9
  206fdc:	00c00104 	movi	r3,4
  206fe0:	1880442e 	bgeu	r3,r2,2070f4 <_malloc_r+0x620>
  206fe4:	00c00504 	movi	r3,20
  206fe8:	18808136 	bltu	r3,r2,2071f0 <_malloc_r+0x71c>
  206fec:	11401704 	addi	r5,r2,92
  206ff0:	10c016c4 	addi	r3,r2,91
  206ff4:	294b883a 	add	r5,r5,r5
  206ff8:	294b883a 	add	r5,r5,r5
  206ffc:	294b883a 	add	r5,r5,r5
  207000:	994b883a 	add	r5,r19,r5
  207004:	28800017 	ldw	r2,0(r5)
  207008:	01801074 	movhi	r6,65
  20700c:	297ffe04 	addi	r5,r5,-8
  207010:	31a12704 	addi	r6,r6,-31588
  207014:	28806526 	beq	r5,r2,2071ac <_malloc_r+0x6d8>
  207018:	01bfff04 	movi	r6,-4
  20701c:	10c00117 	ldw	r3,4(r2)
  207020:	1986703a 	and	r3,r3,r6
  207024:	38c0022e 	bgeu	r7,r3,207030 <_malloc_r+0x55c>
  207028:	10800217 	ldw	r2,8(r2)
  20702c:	28bffb1e 	bne	r5,r2,20701c <_gp+0xffdf5438>
  207030:	11400317 	ldw	r5,12(r2)
  207034:	98c00117 	ldw	r3,4(r19)
  207038:	81400315 	stw	r5,12(r16)
  20703c:	80800215 	stw	r2,8(r16)
  207040:	2c000215 	stw	r16,8(r5)
  207044:	14000315 	stw	r16,12(r2)
  207048:	003ef806 	br	206c2c <_gp+0xffdf5048>
  20704c:	88c00054 	ori	r3,r17,1
  207050:	80c00115 	stw	r3,4(r16)
  207054:	8463883a 	add	r17,r16,r17
  207058:	34400515 	stw	r17,20(r6)
  20705c:	34400415 	stw	r17,16(r6)
  207060:	10c00054 	ori	r3,r2,1
  207064:	8a000315 	stw	r8,12(r17)
  207068:	8a000215 	stw	r8,8(r17)
  20706c:	88c00115 	stw	r3,4(r17)
  207070:	88a3883a 	add	r17,r17,r2
  207074:	88800015 	stw	r2,0(r17)
  207078:	9009883a 	mov	r4,r18
  20707c:	020ea900 	call	20ea90 <__malloc_unlock>
  207080:	80800204 	addi	r2,r16,8
  207084:	003f3c06 	br	206d78 <_gp+0xffdf5194>
  207088:	30c00117 	ldw	r3,4(r6)
  20708c:	003ee706 	br	206c2c <_gp+0xffdf5048>
  207090:	5ac00044 	addi	r11,r11,1
  207094:	588000cc 	andi	r2,r11,3
  207098:	31800204 	addi	r6,r6,8
  20709c:	103efd1e 	bne	r2,zero,206c94 <_gp+0xffdf50b0>
  2070a0:	00002406 	br	207134 <_malloc_r+0x660>
  2070a4:	14000317 	ldw	r16,12(r2)
  2070a8:	143f251e 	bne	r2,r16,206d40 <_gp+0xffdf515c>
  2070ac:	21000084 	addi	r4,r4,2
  2070b0:	003ebc06 	br	206ba4 <_gp+0xffdf4fc0>
  2070b4:	8085883a 	add	r2,r16,r2
  2070b8:	10c00117 	ldw	r3,4(r2)
  2070bc:	81000317 	ldw	r4,12(r16)
  2070c0:	81400217 	ldw	r5,8(r16)
  2070c4:	18c00054 	ori	r3,r3,1
  2070c8:	10c00115 	stw	r3,4(r2)
  2070cc:	29000315 	stw	r4,12(r5)
  2070d0:	21400215 	stw	r5,8(r4)
  2070d4:	9009883a 	mov	r4,r18
  2070d8:	020ea900 	call	20ea90 <__malloc_unlock>
  2070dc:	80800204 	addi	r2,r16,8
  2070e0:	003f2506 	br	206d78 <_gp+0xffdf5194>
  2070e4:	12001704 	addi	r8,r2,92
  2070e8:	11c016c4 	addi	r7,r2,91
  2070ec:	4209883a 	add	r4,r8,r8
  2070f0:	003e9606 	br	206b4c <_gp+0xffdf4f68>
  2070f4:	3804d1ba 	srli	r2,r7,6
  2070f8:	11400e44 	addi	r5,r2,57
  2070fc:	10c00e04 	addi	r3,r2,56
  207100:	294b883a 	add	r5,r5,r5
  207104:	003fbc06 	br	206ff8 <_gp+0xffdf5414>
  207108:	84ff5926 	beq	r16,r19,206e70 <_gp+0xffdf528c>
  20710c:	00801074 	movhi	r2,65
  207110:	10a12704 	addi	r2,r2,-31588
  207114:	14000217 	ldw	r16,8(r2)
  207118:	00bfff04 	movi	r2,-4
  20711c:	80c00117 	ldw	r3,4(r16)
  207120:	1886703a 	and	r3,r3,r2
  207124:	003f9106 	br	206f6c <_gp+0xffdf5388>
  207128:	60800217 	ldw	r2,8(r12)
  20712c:	213fffc4 	addi	r4,r4,-1
  207130:	1300651e 	bne	r2,r12,2072c8 <_malloc_r+0x7f4>
  207134:	208000cc 	andi	r2,r4,3
  207138:	633ffe04 	addi	r12,r12,-8
  20713c:	103ffa1e 	bne	r2,zero,207128 <_gp+0xffdf5544>
  207140:	98800117 	ldw	r2,4(r19)
  207144:	0146303a 	nor	r3,zero,r5
  207148:	1884703a 	and	r2,r3,r2
  20714c:	98800115 	stw	r2,4(r19)
  207150:	294b883a 	add	r5,r5,r5
  207154:	117f2836 	bltu	r2,r5,206df8 <_gp+0xffdf5214>
  207158:	283f2726 	beq	r5,zero,206df8 <_gp+0xffdf5214>
  20715c:	2886703a 	and	r3,r5,r2
  207160:	5809883a 	mov	r4,r11
  207164:	183ec31e 	bne	r3,zero,206c74 <_gp+0xffdf5090>
  207168:	294b883a 	add	r5,r5,r5
  20716c:	2886703a 	and	r3,r5,r2
  207170:	21000104 	addi	r4,r4,4
  207174:	183ffc26 	beq	r3,zero,207168 <_gp+0xffdf5584>
  207178:	003ebe06 	br	206c74 <_gp+0xffdf5090>
  20717c:	00c05504 	movi	r3,340
  207180:	18801236 	bltu	r3,r2,2071cc <_malloc_r+0x6f8>
  207184:	8804d3fa 	srli	r2,r17,15
  207188:	12001e04 	addi	r8,r2,120
  20718c:	11c01dc4 	addi	r7,r2,119
  207190:	4209883a 	add	r4,r8,r8
  207194:	003e6d06 	br	206b4c <_gp+0xffdf4f68>
  207198:	00c40004 	movi	r3,4096
  20719c:	003f4606 	br	206eb8 <_gp+0xffdf52d4>
  2071a0:	00800044 	movi	r2,1
  2071a4:	a0800115 	stw	r2,4(r20)
  2071a8:	003f7406 	br	206f7c <_gp+0xffdf5398>
  2071ac:	1805d0ba 	srai	r2,r3,2
  2071b0:	01c00044 	movi	r7,1
  2071b4:	30c00117 	ldw	r3,4(r6)
  2071b8:	388e983a 	sll	r7,r7,r2
  2071bc:	2805883a 	mov	r2,r5
  2071c0:	38c6b03a 	or	r3,r7,r3
  2071c4:	30c00115 	stw	r3,4(r6)
  2071c8:	003f9b06 	br	207038 <_gp+0xffdf5454>
  2071cc:	00c15504 	movi	r3,1364
  2071d0:	18801a36 	bltu	r3,r2,20723c <_malloc_r+0x768>
  2071d4:	8804d4ba 	srli	r2,r17,18
  2071d8:	12001f44 	addi	r8,r2,125
  2071dc:	11c01f04 	addi	r7,r2,124
  2071e0:	4209883a 	add	r4,r8,r8
  2071e4:	003e5906 	br	206b4c <_gp+0xffdf4f68>
  2071e8:	ad400404 	addi	r21,r21,16
  2071ec:	003f1706 	br	206e4c <_gp+0xffdf5268>
  2071f0:	00c01504 	movi	r3,84
  2071f4:	18802336 	bltu	r3,r2,207284 <_malloc_r+0x7b0>
  2071f8:	3804d33a 	srli	r2,r7,12
  2071fc:	11401bc4 	addi	r5,r2,111
  207200:	10c01b84 	addi	r3,r2,110
  207204:	294b883a 	add	r5,r5,r5
  207208:	003f7b06 	br	206ff8 <_gp+0xffdf5414>
  20720c:	9c000217 	ldw	r16,8(r19)
  207210:	00bfff04 	movi	r2,-4
  207214:	80c00117 	ldw	r3,4(r16)
  207218:	1886703a 	and	r3,r3,r2
  20721c:	003f5306 	br	206f6c <_gp+0xffdf5388>
  207220:	3083ffcc 	andi	r2,r6,4095
  207224:	103f181e 	bne	r2,zero,206e88 <_gp+0xffdf52a4>
  207228:	99000217 	ldw	r4,8(r19)
  20722c:	b545883a 	add	r2,r22,r21
  207230:	10800054 	ori	r2,r2,1
  207234:	20800115 	stw	r2,4(r4)
  207238:	003f3e06 	br	206f34 <_gp+0xffdf5350>
  20723c:	01003f84 	movi	r4,254
  207240:	02001fc4 	movi	r8,127
  207244:	01c01f84 	movi	r7,126
  207248:	003e4006 	br	206b4c <_gp+0xffdf4f68>
  20724c:	00801074 	movhi	r2,65
  207250:	10a6fc04 	addi	r2,r2,-25616
  207254:	15000015 	stw	r20,0(r2)
  207258:	003f1106 	br	206ea0 <_gp+0xffdf52bc>
  20725c:	00800044 	movi	r2,1
  207260:	002b883a 	mov	r21,zero
  207264:	003f1f06 	br	206ee4 <_gp+0xffdf5300>
  207268:	81400204 	addi	r5,r16,8
  20726c:	9009883a 	mov	r4,r18
  207270:	0205edc0 	call	205edc <_free_r>
  207274:	00801074 	movhi	r2,65
  207278:	10a71d04 	addi	r2,r2,-25484
  20727c:	10c00017 	ldw	r3,0(r2)
  207280:	003f2c06 	br	206f34 <_gp+0xffdf5350>
  207284:	00c05504 	movi	r3,340
  207288:	18800536 	bltu	r3,r2,2072a0 <_malloc_r+0x7cc>
  20728c:	3804d3fa 	srli	r2,r7,15
  207290:	11401e04 	addi	r5,r2,120
  207294:	10c01dc4 	addi	r3,r2,119
  207298:	294b883a 	add	r5,r5,r5
  20729c:	003f5606 	br	206ff8 <_gp+0xffdf5414>
  2072a0:	00c15504 	movi	r3,1364
  2072a4:	18800536 	bltu	r3,r2,2072bc <_malloc_r+0x7e8>
  2072a8:	3804d4ba 	srli	r2,r7,18
  2072ac:	11401f44 	addi	r5,r2,125
  2072b0:	10c01f04 	addi	r3,r2,124
  2072b4:	294b883a 	add	r5,r5,r5
  2072b8:	003f4f06 	br	206ff8 <_gp+0xffdf5414>
  2072bc:	01403f84 	movi	r5,254
  2072c0:	00c01f84 	movi	r3,126
  2072c4:	003f4c06 	br	206ff8 <_gp+0xffdf5414>
  2072c8:	98800117 	ldw	r2,4(r19)
  2072cc:	003fa006 	br	207150 <_gp+0xffdf556c>
  2072d0:	8808d0fa 	srli	r4,r17,3
  2072d4:	20800044 	addi	r2,r4,1
  2072d8:	1085883a 	add	r2,r2,r2
  2072dc:	003e9006 	br	206d20 <_gp+0xffdf513c>

002072e0 <memchr>:
  2072e0:	208000cc 	andi	r2,r4,3
  2072e4:	280f883a 	mov	r7,r5
  2072e8:	10003426 	beq	r2,zero,2073bc <memchr+0xdc>
  2072ec:	30bfffc4 	addi	r2,r6,-1
  2072f0:	30001a26 	beq	r6,zero,20735c <memchr+0x7c>
  2072f4:	20c00003 	ldbu	r3,0(r4)
  2072f8:	29803fcc 	andi	r6,r5,255
  2072fc:	30c0051e 	bne	r6,r3,207314 <memchr+0x34>
  207300:	00001806 	br	207364 <memchr+0x84>
  207304:	10001526 	beq	r2,zero,20735c <memchr+0x7c>
  207308:	20c00003 	ldbu	r3,0(r4)
  20730c:	10bfffc4 	addi	r2,r2,-1
  207310:	30c01426 	beq	r6,r3,207364 <memchr+0x84>
  207314:	21000044 	addi	r4,r4,1
  207318:	20c000cc 	andi	r3,r4,3
  20731c:	183ff91e 	bne	r3,zero,207304 <_gp+0xffdf5720>
  207320:	020000c4 	movi	r8,3
  207324:	40801136 	bltu	r8,r2,20736c <memchr+0x8c>
  207328:	10000c26 	beq	r2,zero,20735c <memchr+0x7c>
  20732c:	20c00003 	ldbu	r3,0(r4)
  207330:	29403fcc 	andi	r5,r5,255
  207334:	28c00b26 	beq	r5,r3,207364 <memchr+0x84>
  207338:	20c00044 	addi	r3,r4,1
  20733c:	39803fcc 	andi	r6,r7,255
  207340:	2089883a 	add	r4,r4,r2
  207344:	00000306 	br	207354 <memchr+0x74>
  207348:	18c00044 	addi	r3,r3,1
  20734c:	197fffc3 	ldbu	r5,-1(r3)
  207350:	31400526 	beq	r6,r5,207368 <memchr+0x88>
  207354:	1805883a 	mov	r2,r3
  207358:	20fffb1e 	bne	r4,r3,207348 <_gp+0xffdf5764>
  20735c:	0005883a 	mov	r2,zero
  207360:	f800283a 	ret
  207364:	2005883a 	mov	r2,r4
  207368:	f800283a 	ret
  20736c:	28c03fcc 	andi	r3,r5,255
  207370:	1812923a 	slli	r9,r3,8
  207374:	02ffbff4 	movhi	r11,65279
  207378:	02a02074 	movhi	r10,32897
  20737c:	48d2b03a 	or	r9,r9,r3
  207380:	4806943a 	slli	r3,r9,16
  207384:	5affbfc4 	addi	r11,r11,-257
  207388:	52a02004 	addi	r10,r10,-32640
  20738c:	48d2b03a 	or	r9,r9,r3
  207390:	20c00017 	ldw	r3,0(r4)
  207394:	48c6f03a 	xor	r3,r9,r3
  207398:	1acd883a 	add	r6,r3,r11
  20739c:	00c6303a 	nor	r3,zero,r3
  2073a0:	30c6703a 	and	r3,r6,r3
  2073a4:	1a86703a 	and	r3,r3,r10
  2073a8:	183fe01e 	bne	r3,zero,20732c <_gp+0xffdf5748>
  2073ac:	10bfff04 	addi	r2,r2,-4
  2073b0:	21000104 	addi	r4,r4,4
  2073b4:	40bff636 	bltu	r8,r2,207390 <_gp+0xffdf57ac>
  2073b8:	003fdb06 	br	207328 <_gp+0xffdf5744>
  2073bc:	3005883a 	mov	r2,r6
  2073c0:	003fd706 	br	207320 <_gp+0xffdf573c>

002073c4 <memcpy>:
  2073c4:	defffd04 	addi	sp,sp,-12
  2073c8:	dfc00215 	stw	ra,8(sp)
  2073cc:	dc400115 	stw	r17,4(sp)
  2073d0:	dc000015 	stw	r16,0(sp)
  2073d4:	00c003c4 	movi	r3,15
  2073d8:	2005883a 	mov	r2,r4
  2073dc:	1980452e 	bgeu	r3,r6,2074f4 <memcpy+0x130>
  2073e0:	2906b03a 	or	r3,r5,r4
  2073e4:	18c000cc 	andi	r3,r3,3
  2073e8:	1800441e 	bne	r3,zero,2074fc <memcpy+0x138>
  2073ec:	347ffc04 	addi	r17,r6,-16
  2073f0:	8822d13a 	srli	r17,r17,4
  2073f4:	28c00104 	addi	r3,r5,4
  2073f8:	23400104 	addi	r13,r4,4
  2073fc:	8820913a 	slli	r16,r17,4
  207400:	2b000204 	addi	r12,r5,8
  207404:	22c00204 	addi	r11,r4,8
  207408:	84000504 	addi	r16,r16,20
  20740c:	2a800304 	addi	r10,r5,12
  207410:	22400304 	addi	r9,r4,12
  207414:	2c21883a 	add	r16,r5,r16
  207418:	2811883a 	mov	r8,r5
  20741c:	200f883a 	mov	r7,r4
  207420:	41000017 	ldw	r4,0(r8)
  207424:	1fc00017 	ldw	ra,0(r3)
  207428:	63c00017 	ldw	r15,0(r12)
  20742c:	39000015 	stw	r4,0(r7)
  207430:	53800017 	ldw	r14,0(r10)
  207434:	6fc00015 	stw	ra,0(r13)
  207438:	5bc00015 	stw	r15,0(r11)
  20743c:	4b800015 	stw	r14,0(r9)
  207440:	18c00404 	addi	r3,r3,16
  207444:	39c00404 	addi	r7,r7,16
  207448:	42000404 	addi	r8,r8,16
  20744c:	6b400404 	addi	r13,r13,16
  207450:	63000404 	addi	r12,r12,16
  207454:	5ac00404 	addi	r11,r11,16
  207458:	52800404 	addi	r10,r10,16
  20745c:	4a400404 	addi	r9,r9,16
  207460:	1c3fef1e 	bne	r3,r16,207420 <_gp+0xffdf583c>
  207464:	89c00044 	addi	r7,r17,1
  207468:	380e913a 	slli	r7,r7,4
  20746c:	310003cc 	andi	r4,r6,15
  207470:	02c000c4 	movi	r11,3
  207474:	11c7883a 	add	r3,r2,r7
  207478:	29cb883a 	add	r5,r5,r7
  20747c:	5900212e 	bgeu	r11,r4,207504 <memcpy+0x140>
  207480:	1813883a 	mov	r9,r3
  207484:	2811883a 	mov	r8,r5
  207488:	200f883a 	mov	r7,r4
  20748c:	42800017 	ldw	r10,0(r8)
  207490:	4a400104 	addi	r9,r9,4
  207494:	39ffff04 	addi	r7,r7,-4
  207498:	4abfff15 	stw	r10,-4(r9)
  20749c:	42000104 	addi	r8,r8,4
  2074a0:	59fffa36 	bltu	r11,r7,20748c <_gp+0xffdf58a8>
  2074a4:	213fff04 	addi	r4,r4,-4
  2074a8:	2008d0ba 	srli	r4,r4,2
  2074ac:	318000cc 	andi	r6,r6,3
  2074b0:	21000044 	addi	r4,r4,1
  2074b4:	2109883a 	add	r4,r4,r4
  2074b8:	2109883a 	add	r4,r4,r4
  2074bc:	1907883a 	add	r3,r3,r4
  2074c0:	290b883a 	add	r5,r5,r4
  2074c4:	30000626 	beq	r6,zero,2074e0 <memcpy+0x11c>
  2074c8:	198d883a 	add	r6,r3,r6
  2074cc:	29c00003 	ldbu	r7,0(r5)
  2074d0:	18c00044 	addi	r3,r3,1
  2074d4:	29400044 	addi	r5,r5,1
  2074d8:	19ffffc5 	stb	r7,-1(r3)
  2074dc:	19bffb1e 	bne	r3,r6,2074cc <_gp+0xffdf58e8>
  2074e0:	dfc00217 	ldw	ra,8(sp)
  2074e4:	dc400117 	ldw	r17,4(sp)
  2074e8:	dc000017 	ldw	r16,0(sp)
  2074ec:	dec00304 	addi	sp,sp,12
  2074f0:	f800283a 	ret
  2074f4:	2007883a 	mov	r3,r4
  2074f8:	003ff206 	br	2074c4 <_gp+0xffdf58e0>
  2074fc:	2007883a 	mov	r3,r4
  207500:	003ff106 	br	2074c8 <_gp+0xffdf58e4>
  207504:	200d883a 	mov	r6,r4
  207508:	003fee06 	br	2074c4 <_gp+0xffdf58e0>

0020750c <memmove>:
  20750c:	2005883a 	mov	r2,r4
  207510:	29000b2e 	bgeu	r5,r4,207540 <memmove+0x34>
  207514:	298f883a 	add	r7,r5,r6
  207518:	21c0092e 	bgeu	r4,r7,207540 <memmove+0x34>
  20751c:	2187883a 	add	r3,r4,r6
  207520:	198bc83a 	sub	r5,r3,r6
  207524:	30004826 	beq	r6,zero,207648 <memmove+0x13c>
  207528:	39ffffc4 	addi	r7,r7,-1
  20752c:	39000003 	ldbu	r4,0(r7)
  207530:	18ffffc4 	addi	r3,r3,-1
  207534:	19000005 	stb	r4,0(r3)
  207538:	28fffb1e 	bne	r5,r3,207528 <_gp+0xffdf5944>
  20753c:	f800283a 	ret
  207540:	00c003c4 	movi	r3,15
  207544:	1980412e 	bgeu	r3,r6,20764c <memmove+0x140>
  207548:	2886b03a 	or	r3,r5,r2
  20754c:	18c000cc 	andi	r3,r3,3
  207550:	1800401e 	bne	r3,zero,207654 <memmove+0x148>
  207554:	33fffc04 	addi	r15,r6,-16
  207558:	781ed13a 	srli	r15,r15,4
  20755c:	28c00104 	addi	r3,r5,4
  207560:	13400104 	addi	r13,r2,4
  207564:	781c913a 	slli	r14,r15,4
  207568:	2b000204 	addi	r12,r5,8
  20756c:	12c00204 	addi	r11,r2,8
  207570:	73800504 	addi	r14,r14,20
  207574:	2a800304 	addi	r10,r5,12
  207578:	12400304 	addi	r9,r2,12
  20757c:	2b9d883a 	add	r14,r5,r14
  207580:	2811883a 	mov	r8,r5
  207584:	100f883a 	mov	r7,r2
  207588:	41000017 	ldw	r4,0(r8)
  20758c:	39c00404 	addi	r7,r7,16
  207590:	18c00404 	addi	r3,r3,16
  207594:	393ffc15 	stw	r4,-16(r7)
  207598:	193ffc17 	ldw	r4,-16(r3)
  20759c:	6b400404 	addi	r13,r13,16
  2075a0:	5ac00404 	addi	r11,r11,16
  2075a4:	693ffc15 	stw	r4,-16(r13)
  2075a8:	61000017 	ldw	r4,0(r12)
  2075ac:	4a400404 	addi	r9,r9,16
  2075b0:	42000404 	addi	r8,r8,16
  2075b4:	593ffc15 	stw	r4,-16(r11)
  2075b8:	51000017 	ldw	r4,0(r10)
  2075bc:	63000404 	addi	r12,r12,16
  2075c0:	52800404 	addi	r10,r10,16
  2075c4:	493ffc15 	stw	r4,-16(r9)
  2075c8:	1bbfef1e 	bne	r3,r14,207588 <_gp+0xffdf59a4>
  2075cc:	79000044 	addi	r4,r15,1
  2075d0:	2008913a 	slli	r4,r4,4
  2075d4:	328003cc 	andi	r10,r6,15
  2075d8:	02c000c4 	movi	r11,3
  2075dc:	1107883a 	add	r3,r2,r4
  2075e0:	290b883a 	add	r5,r5,r4
  2075e4:	5a801e2e 	bgeu	r11,r10,207660 <memmove+0x154>
  2075e8:	1813883a 	mov	r9,r3
  2075ec:	2811883a 	mov	r8,r5
  2075f0:	500f883a 	mov	r7,r10
  2075f4:	41000017 	ldw	r4,0(r8)
  2075f8:	4a400104 	addi	r9,r9,4
  2075fc:	39ffff04 	addi	r7,r7,-4
  207600:	493fff15 	stw	r4,-4(r9)
  207604:	42000104 	addi	r8,r8,4
  207608:	59fffa36 	bltu	r11,r7,2075f4 <_gp+0xffdf5a10>
  20760c:	513fff04 	addi	r4,r10,-4
  207610:	2008d0ba 	srli	r4,r4,2
  207614:	318000cc 	andi	r6,r6,3
  207618:	21000044 	addi	r4,r4,1
  20761c:	2109883a 	add	r4,r4,r4
  207620:	2109883a 	add	r4,r4,r4
  207624:	1907883a 	add	r3,r3,r4
  207628:	290b883a 	add	r5,r5,r4
  20762c:	30000b26 	beq	r6,zero,20765c <memmove+0x150>
  207630:	198d883a 	add	r6,r3,r6
  207634:	29c00003 	ldbu	r7,0(r5)
  207638:	18c00044 	addi	r3,r3,1
  20763c:	29400044 	addi	r5,r5,1
  207640:	19ffffc5 	stb	r7,-1(r3)
  207644:	19bffb1e 	bne	r3,r6,207634 <_gp+0xffdf5a50>
  207648:	f800283a 	ret
  20764c:	1007883a 	mov	r3,r2
  207650:	003ff606 	br	20762c <_gp+0xffdf5a48>
  207654:	1007883a 	mov	r3,r2
  207658:	003ff506 	br	207630 <_gp+0xffdf5a4c>
  20765c:	f800283a 	ret
  207660:	500d883a 	mov	r6,r10
  207664:	003ff106 	br	20762c <_gp+0xffdf5a48>

00207668 <memset>:
  207668:	20c000cc 	andi	r3,r4,3
  20766c:	2005883a 	mov	r2,r4
  207670:	18004426 	beq	r3,zero,207784 <memset+0x11c>
  207674:	31ffffc4 	addi	r7,r6,-1
  207678:	30004026 	beq	r6,zero,20777c <memset+0x114>
  20767c:	2813883a 	mov	r9,r5
  207680:	200d883a 	mov	r6,r4
  207684:	2007883a 	mov	r3,r4
  207688:	00000406 	br	20769c <memset+0x34>
  20768c:	3a3fffc4 	addi	r8,r7,-1
  207690:	31800044 	addi	r6,r6,1
  207694:	38003926 	beq	r7,zero,20777c <memset+0x114>
  207698:	400f883a 	mov	r7,r8
  20769c:	18c00044 	addi	r3,r3,1
  2076a0:	32400005 	stb	r9,0(r6)
  2076a4:	1a0000cc 	andi	r8,r3,3
  2076a8:	403ff81e 	bne	r8,zero,20768c <_gp+0xffdf5aa8>
  2076ac:	010000c4 	movi	r4,3
  2076b0:	21c02d2e 	bgeu	r4,r7,207768 <memset+0x100>
  2076b4:	29003fcc 	andi	r4,r5,255
  2076b8:	200c923a 	slli	r6,r4,8
  2076bc:	3108b03a 	or	r4,r6,r4
  2076c0:	200c943a 	slli	r6,r4,16
  2076c4:	218cb03a 	or	r6,r4,r6
  2076c8:	010003c4 	movi	r4,15
  2076cc:	21c0182e 	bgeu	r4,r7,207730 <memset+0xc8>
  2076d0:	3b3ffc04 	addi	r12,r7,-16
  2076d4:	6018d13a 	srli	r12,r12,4
  2076d8:	1a000104 	addi	r8,r3,4
  2076dc:	1ac00204 	addi	r11,r3,8
  2076e0:	6008913a 	slli	r4,r12,4
  2076e4:	1a800304 	addi	r10,r3,12
  2076e8:	1813883a 	mov	r9,r3
  2076ec:	21000504 	addi	r4,r4,20
  2076f0:	1909883a 	add	r4,r3,r4
  2076f4:	49800015 	stw	r6,0(r9)
  2076f8:	41800015 	stw	r6,0(r8)
  2076fc:	59800015 	stw	r6,0(r11)
  207700:	51800015 	stw	r6,0(r10)
  207704:	42000404 	addi	r8,r8,16
  207708:	4a400404 	addi	r9,r9,16
  20770c:	5ac00404 	addi	r11,r11,16
  207710:	52800404 	addi	r10,r10,16
  207714:	413ff71e 	bne	r8,r4,2076f4 <_gp+0xffdf5b10>
  207718:	63000044 	addi	r12,r12,1
  20771c:	6018913a 	slli	r12,r12,4
  207720:	39c003cc 	andi	r7,r7,15
  207724:	010000c4 	movi	r4,3
  207728:	1b07883a 	add	r3,r3,r12
  20772c:	21c00e2e 	bgeu	r4,r7,207768 <memset+0x100>
  207730:	1813883a 	mov	r9,r3
  207734:	3811883a 	mov	r8,r7
  207738:	010000c4 	movi	r4,3
  20773c:	49800015 	stw	r6,0(r9)
  207740:	423fff04 	addi	r8,r8,-4
  207744:	4a400104 	addi	r9,r9,4
  207748:	223ffc36 	bltu	r4,r8,20773c <_gp+0xffdf5b58>
  20774c:	393fff04 	addi	r4,r7,-4
  207750:	2008d0ba 	srli	r4,r4,2
  207754:	39c000cc 	andi	r7,r7,3
  207758:	21000044 	addi	r4,r4,1
  20775c:	2109883a 	add	r4,r4,r4
  207760:	2109883a 	add	r4,r4,r4
  207764:	1907883a 	add	r3,r3,r4
  207768:	38000526 	beq	r7,zero,207780 <memset+0x118>
  20776c:	19cf883a 	add	r7,r3,r7
  207770:	19400005 	stb	r5,0(r3)
  207774:	18c00044 	addi	r3,r3,1
  207778:	38fffd1e 	bne	r7,r3,207770 <_gp+0xffdf5b8c>
  20777c:	f800283a 	ret
  207780:	f800283a 	ret
  207784:	2007883a 	mov	r3,r4
  207788:	300f883a 	mov	r7,r6
  20778c:	003fc706 	br	2076ac <_gp+0xffdf5ac8>

00207790 <_Balloc>:
  207790:	20801317 	ldw	r2,76(r4)
  207794:	defffc04 	addi	sp,sp,-16
  207798:	dc400115 	stw	r17,4(sp)
  20779c:	dc000015 	stw	r16,0(sp)
  2077a0:	dfc00315 	stw	ra,12(sp)
  2077a4:	dc800215 	stw	r18,8(sp)
  2077a8:	2023883a 	mov	r17,r4
  2077ac:	2821883a 	mov	r16,r5
  2077b0:	10000f26 	beq	r2,zero,2077f0 <_Balloc+0x60>
  2077b4:	8407883a 	add	r3,r16,r16
  2077b8:	18c7883a 	add	r3,r3,r3
  2077bc:	10c7883a 	add	r3,r2,r3
  2077c0:	18800017 	ldw	r2,0(r3)
  2077c4:	10001126 	beq	r2,zero,20780c <_Balloc+0x7c>
  2077c8:	11000017 	ldw	r4,0(r2)
  2077cc:	19000015 	stw	r4,0(r3)
  2077d0:	10000415 	stw	zero,16(r2)
  2077d4:	10000315 	stw	zero,12(r2)
  2077d8:	dfc00317 	ldw	ra,12(sp)
  2077dc:	dc800217 	ldw	r18,8(sp)
  2077e0:	dc400117 	ldw	r17,4(sp)
  2077e4:	dc000017 	ldw	r16,0(sp)
  2077e8:	dec00404 	addi	sp,sp,16
  2077ec:	f800283a 	ret
  2077f0:	01800844 	movi	r6,33
  2077f4:	01400104 	movi	r5,4
  2077f8:	020a8380 	call	20a838 <_calloc_r>
  2077fc:	88801315 	stw	r2,76(r17)
  207800:	103fec1e 	bne	r2,zero,2077b4 <_gp+0xffdf5bd0>
  207804:	0005883a 	mov	r2,zero
  207808:	003ff306 	br	2077d8 <_gp+0xffdf5bf4>
  20780c:	01400044 	movi	r5,1
  207810:	2c24983a 	sll	r18,r5,r16
  207814:	8809883a 	mov	r4,r17
  207818:	91800144 	addi	r6,r18,5
  20781c:	318d883a 	add	r6,r6,r6
  207820:	318d883a 	add	r6,r6,r6
  207824:	020a8380 	call	20a838 <_calloc_r>
  207828:	103ff626 	beq	r2,zero,207804 <_gp+0xffdf5c20>
  20782c:	14000115 	stw	r16,4(r2)
  207830:	14800215 	stw	r18,8(r2)
  207834:	003fe606 	br	2077d0 <_gp+0xffdf5bec>

00207838 <_Bfree>:
  207838:	28000826 	beq	r5,zero,20785c <_Bfree+0x24>
  20783c:	28c00117 	ldw	r3,4(r5)
  207840:	20801317 	ldw	r2,76(r4)
  207844:	18c7883a 	add	r3,r3,r3
  207848:	18c7883a 	add	r3,r3,r3
  20784c:	10c5883a 	add	r2,r2,r3
  207850:	10c00017 	ldw	r3,0(r2)
  207854:	28c00015 	stw	r3,0(r5)
  207858:	11400015 	stw	r5,0(r2)
  20785c:	f800283a 	ret

00207860 <__multadd>:
  207860:	defff704 	addi	sp,sp,-36
  207864:	dc800215 	stw	r18,8(sp)
  207868:	2c800417 	ldw	r18,16(r5)
  20786c:	dd800615 	stw	r22,24(sp)
  207870:	dd400515 	stw	r21,20(sp)
  207874:	dd000415 	stw	r20,16(sp)
  207878:	dcc00315 	stw	r19,12(sp)
  20787c:	dc400115 	stw	r17,4(sp)
  207880:	dc000015 	stw	r16,0(sp)
  207884:	dfc00815 	stw	ra,32(sp)
  207888:	ddc00715 	stw	r23,28(sp)
  20788c:	2827883a 	mov	r19,r5
  207890:	2029883a 	mov	r20,r4
  207894:	3023883a 	mov	r17,r6
  207898:	3821883a 	mov	r16,r7
  20789c:	2d400504 	addi	r21,r5,20
  2078a0:	002d883a 	mov	r22,zero
  2078a4:	adc00017 	ldw	r23,0(r21)
  2078a8:	880b883a 	mov	r5,r17
  2078ac:	ad400104 	addi	r21,r21,4
  2078b0:	b93fffcc 	andi	r4,r23,65535
  2078b4:	02017a80 	call	2017a8 <__mulsi3>
  2078b8:	b808d43a 	srli	r4,r23,16
  2078bc:	880b883a 	mov	r5,r17
  2078c0:	1421883a 	add	r16,r2,r16
  2078c4:	02017a80 	call	2017a8 <__mulsi3>
  2078c8:	800ed43a 	srli	r7,r16,16
  2078cc:	80ffffcc 	andi	r3,r16,65535
  2078d0:	b5800044 	addi	r22,r22,1
  2078d4:	11c5883a 	add	r2,r2,r7
  2078d8:	100e943a 	slli	r7,r2,16
  2078dc:	1020d43a 	srli	r16,r2,16
  2078e0:	38c7883a 	add	r3,r7,r3
  2078e4:	a8ffff15 	stw	r3,-4(r21)
  2078e8:	b4bfee16 	blt	r22,r18,2078a4 <_gp+0xffdf5cc0>
  2078ec:	80000926 	beq	r16,zero,207914 <__multadd+0xb4>
  2078f0:	98800217 	ldw	r2,8(r19)
  2078f4:	9080130e 	bge	r18,r2,207944 <__multadd+0xe4>
  2078f8:	90800144 	addi	r2,r18,5
  2078fc:	1085883a 	add	r2,r2,r2
  207900:	1085883a 	add	r2,r2,r2
  207904:	9885883a 	add	r2,r19,r2
  207908:	14000015 	stw	r16,0(r2)
  20790c:	94800044 	addi	r18,r18,1
  207910:	9c800415 	stw	r18,16(r19)
  207914:	9805883a 	mov	r2,r19
  207918:	dfc00817 	ldw	ra,32(sp)
  20791c:	ddc00717 	ldw	r23,28(sp)
  207920:	dd800617 	ldw	r22,24(sp)
  207924:	dd400517 	ldw	r21,20(sp)
  207928:	dd000417 	ldw	r20,16(sp)
  20792c:	dcc00317 	ldw	r19,12(sp)
  207930:	dc800217 	ldw	r18,8(sp)
  207934:	dc400117 	ldw	r17,4(sp)
  207938:	dc000017 	ldw	r16,0(sp)
  20793c:	dec00904 	addi	sp,sp,36
  207940:	f800283a 	ret
  207944:	99400117 	ldw	r5,4(r19)
  207948:	a009883a 	mov	r4,r20
  20794c:	29400044 	addi	r5,r5,1
  207950:	02077900 	call	207790 <_Balloc>
  207954:	99800417 	ldw	r6,16(r19)
  207958:	99400304 	addi	r5,r19,12
  20795c:	11000304 	addi	r4,r2,12
  207960:	31800084 	addi	r6,r6,2
  207964:	318d883a 	add	r6,r6,r6
  207968:	318d883a 	add	r6,r6,r6
  20796c:	1023883a 	mov	r17,r2
  207970:	02073c40 	call	2073c4 <memcpy>
  207974:	98000a26 	beq	r19,zero,2079a0 <__multadd+0x140>
  207978:	98c00117 	ldw	r3,4(r19)
  20797c:	a0801317 	ldw	r2,76(r20)
  207980:	18c7883a 	add	r3,r3,r3
  207984:	18c7883a 	add	r3,r3,r3
  207988:	10c5883a 	add	r2,r2,r3
  20798c:	10c00017 	ldw	r3,0(r2)
  207990:	98c00015 	stw	r3,0(r19)
  207994:	14c00015 	stw	r19,0(r2)
  207998:	8827883a 	mov	r19,r17
  20799c:	003fd606 	br	2078f8 <_gp+0xffdf5d14>
  2079a0:	8827883a 	mov	r19,r17
  2079a4:	003fd406 	br	2078f8 <_gp+0xffdf5d14>

002079a8 <__s2b>:
  2079a8:	defff904 	addi	sp,sp,-28
  2079ac:	dc400115 	stw	r17,4(sp)
  2079b0:	dc000015 	stw	r16,0(sp)
  2079b4:	2023883a 	mov	r17,r4
  2079b8:	2821883a 	mov	r16,r5
  2079bc:	39000204 	addi	r4,r7,8
  2079c0:	01400244 	movi	r5,9
  2079c4:	dcc00315 	stw	r19,12(sp)
  2079c8:	dc800215 	stw	r18,8(sp)
  2079cc:	dfc00615 	stw	ra,24(sp)
  2079d0:	dd400515 	stw	r21,20(sp)
  2079d4:	dd000415 	stw	r20,16(sp)
  2079d8:	3825883a 	mov	r18,r7
  2079dc:	3027883a 	mov	r19,r6
  2079e0:	0200a600 	call	200a60 <__divsi3>
  2079e4:	00c00044 	movi	r3,1
  2079e8:	000b883a 	mov	r5,zero
  2079ec:	1880030e 	bge	r3,r2,2079fc <__s2b+0x54>
  2079f0:	18c7883a 	add	r3,r3,r3
  2079f4:	29400044 	addi	r5,r5,1
  2079f8:	18bffd16 	blt	r3,r2,2079f0 <_gp+0xffdf5e0c>
  2079fc:	8809883a 	mov	r4,r17
  207a00:	02077900 	call	207790 <_Balloc>
  207a04:	d8c00717 	ldw	r3,28(sp)
  207a08:	10c00515 	stw	r3,20(r2)
  207a0c:	00c00044 	movi	r3,1
  207a10:	10c00415 	stw	r3,16(r2)
  207a14:	00c00244 	movi	r3,9
  207a18:	1cc0210e 	bge	r3,r19,207aa0 <__s2b+0xf8>
  207a1c:	80eb883a 	add	r21,r16,r3
  207a20:	a829883a 	mov	r20,r21
  207a24:	84e1883a 	add	r16,r16,r19
  207a28:	a1c00007 	ldb	r7,0(r20)
  207a2c:	01800284 	movi	r6,10
  207a30:	a5000044 	addi	r20,r20,1
  207a34:	100b883a 	mov	r5,r2
  207a38:	39fff404 	addi	r7,r7,-48
  207a3c:	8809883a 	mov	r4,r17
  207a40:	02078600 	call	207860 <__multadd>
  207a44:	a43ff81e 	bne	r20,r16,207a28 <_gp+0xffdf5e44>
  207a48:	ace1883a 	add	r16,r21,r19
  207a4c:	843ffe04 	addi	r16,r16,-8
  207a50:	9c800a0e 	bge	r19,r18,207a7c <__s2b+0xd4>
  207a54:	94e5c83a 	sub	r18,r18,r19
  207a58:	84a5883a 	add	r18,r16,r18
  207a5c:	81c00007 	ldb	r7,0(r16)
  207a60:	01800284 	movi	r6,10
  207a64:	84000044 	addi	r16,r16,1
  207a68:	100b883a 	mov	r5,r2
  207a6c:	39fff404 	addi	r7,r7,-48
  207a70:	8809883a 	mov	r4,r17
  207a74:	02078600 	call	207860 <__multadd>
  207a78:	84bff81e 	bne	r16,r18,207a5c <_gp+0xffdf5e78>
  207a7c:	dfc00617 	ldw	ra,24(sp)
  207a80:	dd400517 	ldw	r21,20(sp)
  207a84:	dd000417 	ldw	r20,16(sp)
  207a88:	dcc00317 	ldw	r19,12(sp)
  207a8c:	dc800217 	ldw	r18,8(sp)
  207a90:	dc400117 	ldw	r17,4(sp)
  207a94:	dc000017 	ldw	r16,0(sp)
  207a98:	dec00704 	addi	sp,sp,28
  207a9c:	f800283a 	ret
  207aa0:	84000284 	addi	r16,r16,10
  207aa4:	1827883a 	mov	r19,r3
  207aa8:	003fe906 	br	207a50 <_gp+0xffdf5e6c>

00207aac <__hi0bits>:
  207aac:	20bfffec 	andhi	r2,r4,65535
  207ab0:	1000141e 	bne	r2,zero,207b04 <__hi0bits+0x58>
  207ab4:	2008943a 	slli	r4,r4,16
  207ab8:	00800404 	movi	r2,16
  207abc:	20ffc02c 	andhi	r3,r4,65280
  207ac0:	1800021e 	bne	r3,zero,207acc <__hi0bits+0x20>
  207ac4:	2008923a 	slli	r4,r4,8
  207ac8:	10800204 	addi	r2,r2,8
  207acc:	20fc002c 	andhi	r3,r4,61440
  207ad0:	1800021e 	bne	r3,zero,207adc <__hi0bits+0x30>
  207ad4:	2008913a 	slli	r4,r4,4
  207ad8:	10800104 	addi	r2,r2,4
  207adc:	20f0002c 	andhi	r3,r4,49152
  207ae0:	1800031e 	bne	r3,zero,207af0 <__hi0bits+0x44>
  207ae4:	2109883a 	add	r4,r4,r4
  207ae8:	10800084 	addi	r2,r2,2
  207aec:	2109883a 	add	r4,r4,r4
  207af0:	20000316 	blt	r4,zero,207b00 <__hi0bits+0x54>
  207af4:	2110002c 	andhi	r4,r4,16384
  207af8:	2000041e 	bne	r4,zero,207b0c <__hi0bits+0x60>
  207afc:	00800804 	movi	r2,32
  207b00:	f800283a 	ret
  207b04:	0005883a 	mov	r2,zero
  207b08:	003fec06 	br	207abc <_gp+0xffdf5ed8>
  207b0c:	10800044 	addi	r2,r2,1
  207b10:	f800283a 	ret

00207b14 <__lo0bits>:
  207b14:	20c00017 	ldw	r3,0(r4)
  207b18:	188001cc 	andi	r2,r3,7
  207b1c:	10000826 	beq	r2,zero,207b40 <__lo0bits+0x2c>
  207b20:	1880004c 	andi	r2,r3,1
  207b24:	1000211e 	bne	r2,zero,207bac <__lo0bits+0x98>
  207b28:	1880008c 	andi	r2,r3,2
  207b2c:	1000211e 	bne	r2,zero,207bb4 <__lo0bits+0xa0>
  207b30:	1806d0ba 	srli	r3,r3,2
  207b34:	00800084 	movi	r2,2
  207b38:	20c00015 	stw	r3,0(r4)
  207b3c:	f800283a 	ret
  207b40:	18bfffcc 	andi	r2,r3,65535
  207b44:	10001326 	beq	r2,zero,207b94 <__lo0bits+0x80>
  207b48:	0005883a 	mov	r2,zero
  207b4c:	19403fcc 	andi	r5,r3,255
  207b50:	2800021e 	bne	r5,zero,207b5c <__lo0bits+0x48>
  207b54:	1806d23a 	srli	r3,r3,8
  207b58:	10800204 	addi	r2,r2,8
  207b5c:	194003cc 	andi	r5,r3,15
  207b60:	2800021e 	bne	r5,zero,207b6c <__lo0bits+0x58>
  207b64:	1806d13a 	srli	r3,r3,4
  207b68:	10800104 	addi	r2,r2,4
  207b6c:	194000cc 	andi	r5,r3,3
  207b70:	2800021e 	bne	r5,zero,207b7c <__lo0bits+0x68>
  207b74:	1806d0ba 	srli	r3,r3,2
  207b78:	10800084 	addi	r2,r2,2
  207b7c:	1940004c 	andi	r5,r3,1
  207b80:	2800081e 	bne	r5,zero,207ba4 <__lo0bits+0x90>
  207b84:	1806d07a 	srli	r3,r3,1
  207b88:	1800051e 	bne	r3,zero,207ba0 <__lo0bits+0x8c>
  207b8c:	00800804 	movi	r2,32
  207b90:	f800283a 	ret
  207b94:	1806d43a 	srli	r3,r3,16
  207b98:	00800404 	movi	r2,16
  207b9c:	003feb06 	br	207b4c <_gp+0xffdf5f68>
  207ba0:	10800044 	addi	r2,r2,1
  207ba4:	20c00015 	stw	r3,0(r4)
  207ba8:	f800283a 	ret
  207bac:	0005883a 	mov	r2,zero
  207bb0:	f800283a 	ret
  207bb4:	1806d07a 	srli	r3,r3,1
  207bb8:	00800044 	movi	r2,1
  207bbc:	20c00015 	stw	r3,0(r4)
  207bc0:	f800283a 	ret

00207bc4 <__i2b>:
  207bc4:	defffd04 	addi	sp,sp,-12
  207bc8:	dc000015 	stw	r16,0(sp)
  207bcc:	04000044 	movi	r16,1
  207bd0:	dc400115 	stw	r17,4(sp)
  207bd4:	2823883a 	mov	r17,r5
  207bd8:	800b883a 	mov	r5,r16
  207bdc:	dfc00215 	stw	ra,8(sp)
  207be0:	02077900 	call	207790 <_Balloc>
  207be4:	14400515 	stw	r17,20(r2)
  207be8:	14000415 	stw	r16,16(r2)
  207bec:	dfc00217 	ldw	ra,8(sp)
  207bf0:	dc400117 	ldw	r17,4(sp)
  207bf4:	dc000017 	ldw	r16,0(sp)
  207bf8:	dec00304 	addi	sp,sp,12
  207bfc:	f800283a 	ret

00207c00 <__multiply>:
  207c00:	deffef04 	addi	sp,sp,-68
  207c04:	dc400815 	stw	r17,32(sp)
  207c08:	dc000715 	stw	r16,28(sp)
  207c0c:	34400417 	ldw	r17,16(r6)
  207c10:	2c000417 	ldw	r16,16(r5)
  207c14:	dd800d15 	stw	r22,52(sp)
  207c18:	dc800915 	stw	r18,36(sp)
  207c1c:	dfc01015 	stw	ra,64(sp)
  207c20:	df000f15 	stw	fp,60(sp)
  207c24:	ddc00e15 	stw	r23,56(sp)
  207c28:	dd400c15 	stw	r21,48(sp)
  207c2c:	dd000b15 	stw	r20,44(sp)
  207c30:	dcc00a15 	stw	r19,40(sp)
  207c34:	2825883a 	mov	r18,r5
  207c38:	302d883a 	mov	r22,r6
  207c3c:	8440050e 	bge	r16,r17,207c54 <__multiply+0x54>
  207c40:	8007883a 	mov	r3,r16
  207c44:	3025883a 	mov	r18,r6
  207c48:	8821883a 	mov	r16,r17
  207c4c:	282d883a 	mov	r22,r5
  207c50:	1823883a 	mov	r17,r3
  207c54:	90800217 	ldw	r2,8(r18)
  207c58:	8447883a 	add	r3,r16,r17
  207c5c:	d8c00215 	stw	r3,8(sp)
  207c60:	91400117 	ldw	r5,4(r18)
  207c64:	10c0010e 	bge	r2,r3,207c6c <__multiply+0x6c>
  207c68:	29400044 	addi	r5,r5,1
  207c6c:	02077900 	call	207790 <_Balloc>
  207c70:	d8c00217 	ldw	r3,8(sp)
  207c74:	d8800615 	stw	r2,24(sp)
  207c78:	18eb883a 	add	r21,r3,r3
  207c7c:	ad6b883a 	add	r21,r21,r21
  207c80:	10c00504 	addi	r3,r2,20
  207c84:	1d6b883a 	add	r21,r3,r21
  207c88:	d8c00115 	stw	r3,4(sp)
  207c8c:	dd400315 	stw	r21,12(sp)
  207c90:	1805883a 	mov	r2,r3
  207c94:	1d40042e 	bgeu	r3,r21,207ca8 <__multiply+0xa8>
  207c98:	d8c00317 	ldw	r3,12(sp)
  207c9c:	10000015 	stw	zero,0(r2)
  207ca0:	10800104 	addi	r2,r2,4
  207ca4:	10fffc36 	bltu	r2,r3,207c98 <_gp+0xffdf60b4>
  207ca8:	8c63883a 	add	r17,r17,r17
  207cac:	b5800504 	addi	r22,r22,20
  207cb0:	8c63883a 	add	r17,r17,r17
  207cb4:	94800504 	addi	r18,r18,20
  207cb8:	8421883a 	add	r16,r16,r16
  207cbc:	b463883a 	add	r17,r22,r17
  207cc0:	8421883a 	add	r16,r16,r16
  207cc4:	dd800015 	stw	r22,0(sp)
  207cc8:	dc800415 	stw	r18,16(sp)
  207ccc:	dc400515 	stw	r17,20(sp)
  207cd0:	9429883a 	add	r20,r18,r16
  207cd4:	b4404f2e 	bgeu	r22,r17,207e14 <__multiply+0x214>
  207cd8:	d8c00017 	ldw	r3,0(sp)
  207cdc:	1c800017 	ldw	r18,0(r3)
  207ce0:	947fffcc 	andi	r17,r18,65535
  207ce4:	88001e26 	beq	r17,zero,207d60 <__multiply+0x160>
  207ce8:	dd800117 	ldw	r22,4(sp)
  207cec:	dd400417 	ldw	r21,16(sp)
  207cf0:	0027883a 	mov	r19,zero
  207cf4:	ac800017 	ldw	r18,0(r21)
  207cf8:	b4000017 	ldw	r16,0(r22)
  207cfc:	880b883a 	mov	r5,r17
  207d00:	913fffcc 	andi	r4,r18,65535
  207d04:	02017a80 	call	2017a8 <__mulsi3>
  207d08:	9008d43a 	srli	r4,r18,16
  207d0c:	84bfffcc 	andi	r18,r16,65535
  207d10:	1485883a 	add	r2,r2,r18
  207d14:	14e5883a 	add	r18,r2,r19
  207d18:	8020d43a 	srli	r16,r16,16
  207d1c:	9026d43a 	srli	r19,r18,16
  207d20:	880b883a 	mov	r5,r17
  207d24:	02017a80 	call	2017a8 <__mulsi3>
  207d28:	1405883a 	add	r2,r2,r16
  207d2c:	14e1883a 	add	r16,r2,r19
  207d30:	90ffffcc 	andi	r3,r18,65535
  207d34:	8024943a 	slli	r18,r16,16
  207d38:	ad400104 	addi	r21,r21,4
  207d3c:	b005883a 	mov	r2,r22
  207d40:	90c6b03a 	or	r3,r18,r3
  207d44:	b0c00015 	stw	r3,0(r22)
  207d48:	8026d43a 	srli	r19,r16,16
  207d4c:	b5800104 	addi	r22,r22,4
  207d50:	ad3fe836 	bltu	r21,r20,207cf4 <_gp+0xffdf6110>
  207d54:	d8c00017 	ldw	r3,0(sp)
  207d58:	14c00115 	stw	r19,4(r2)
  207d5c:	1c800017 	ldw	r18,0(r3)
  207d60:	9024d43a 	srli	r18,r18,16
  207d64:	90002226 	beq	r18,zero,207df0 <__multiply+0x1f0>
  207d68:	d8c00117 	ldw	r3,4(sp)
  207d6c:	dd800417 	ldw	r22,16(sp)
  207d70:	002f883a 	mov	r23,zero
  207d74:	1f000017 	ldw	fp,0(r3)
  207d78:	1823883a 	mov	r17,r3
  207d7c:	182b883a 	mov	r21,r3
  207d80:	e021883a 	mov	r16,fp
  207d84:	00000106 	br	207d8c <__multiply+0x18c>
  207d88:	982b883a 	mov	r21,r19
  207d8c:	b100000b 	ldhu	r4,0(r22)
  207d90:	8020d43a 	srli	r16,r16,16
  207d94:	900b883a 	mov	r5,r18
  207d98:	02017a80 	call	2017a8 <__mulsi3>
  207d9c:	1405883a 	add	r2,r2,r16
  207da0:	15ef883a 	add	r23,r2,r23
  207da4:	b804943a 	slli	r2,r23,16
  207da8:	e0ffffcc 	andi	r3,fp,65535
  207dac:	8c400104 	addi	r17,r17,4
  207db0:	10c6b03a 	or	r3,r2,r3
  207db4:	88ffff15 	stw	r3,-4(r17)
  207db8:	b5800104 	addi	r22,r22,4
  207dbc:	b13fff17 	ldw	r4,-4(r22)
  207dc0:	acc00104 	addi	r19,r21,4
  207dc4:	900b883a 	mov	r5,r18
  207dc8:	2008d43a 	srli	r4,r4,16
  207dcc:	9c000017 	ldw	r16,0(r19)
  207dd0:	02017a80 	call	2017a8 <__mulsi3>
  207dd4:	b806d43a 	srli	r3,r23,16
  207dd8:	813fffcc 	andi	r4,r16,65535
  207ddc:	1105883a 	add	r2,r2,r4
  207de0:	10f9883a 	add	fp,r2,r3
  207de4:	e02ed43a 	srli	r23,fp,16
  207de8:	b53fe736 	bltu	r22,r20,207d88 <_gp+0xffdf61a4>
  207dec:	af000115 	stw	fp,4(r21)
  207df0:	d8c00017 	ldw	r3,0(sp)
  207df4:	d9000517 	ldw	r4,20(sp)
  207df8:	18c00104 	addi	r3,r3,4
  207dfc:	d8c00015 	stw	r3,0(sp)
  207e00:	d8c00117 	ldw	r3,4(sp)
  207e04:	18c00104 	addi	r3,r3,4
  207e08:	d8c00115 	stw	r3,4(sp)
  207e0c:	d8c00017 	ldw	r3,0(sp)
  207e10:	193fb136 	bltu	r3,r4,207cd8 <_gp+0xffdf60f4>
  207e14:	d8c00217 	ldw	r3,8(sp)
  207e18:	00c00c0e 	bge	zero,r3,207e4c <__multiply+0x24c>
  207e1c:	d8c00317 	ldw	r3,12(sp)
  207e20:	18bfff17 	ldw	r2,-4(r3)
  207e24:	1d7fff04 	addi	r21,r3,-4
  207e28:	10000326 	beq	r2,zero,207e38 <__multiply+0x238>
  207e2c:	00000706 	br	207e4c <__multiply+0x24c>
  207e30:	a8800017 	ldw	r2,0(r21)
  207e34:	1000051e 	bne	r2,zero,207e4c <__multiply+0x24c>
  207e38:	d8c00217 	ldw	r3,8(sp)
  207e3c:	ad7fff04 	addi	r21,r21,-4
  207e40:	18ffffc4 	addi	r3,r3,-1
  207e44:	d8c00215 	stw	r3,8(sp)
  207e48:	183ff91e 	bne	r3,zero,207e30 <_gp+0xffdf624c>
  207e4c:	d8c00617 	ldw	r3,24(sp)
  207e50:	d9000217 	ldw	r4,8(sp)
  207e54:	1805883a 	mov	r2,r3
  207e58:	19000415 	stw	r4,16(r3)
  207e5c:	dfc01017 	ldw	ra,64(sp)
  207e60:	df000f17 	ldw	fp,60(sp)
  207e64:	ddc00e17 	ldw	r23,56(sp)
  207e68:	dd800d17 	ldw	r22,52(sp)
  207e6c:	dd400c17 	ldw	r21,48(sp)
  207e70:	dd000b17 	ldw	r20,44(sp)
  207e74:	dcc00a17 	ldw	r19,40(sp)
  207e78:	dc800917 	ldw	r18,36(sp)
  207e7c:	dc400817 	ldw	r17,32(sp)
  207e80:	dc000717 	ldw	r16,28(sp)
  207e84:	dec01104 	addi	sp,sp,68
  207e88:	f800283a 	ret

00207e8c <__pow5mult>:
  207e8c:	defffa04 	addi	sp,sp,-24
  207e90:	dcc00315 	stw	r19,12(sp)
  207e94:	dc000015 	stw	r16,0(sp)
  207e98:	dfc00515 	stw	ra,20(sp)
  207e9c:	dd000415 	stw	r20,16(sp)
  207ea0:	dc800215 	stw	r18,8(sp)
  207ea4:	dc400115 	stw	r17,4(sp)
  207ea8:	308000cc 	andi	r2,r6,3
  207eac:	3021883a 	mov	r16,r6
  207eb0:	2027883a 	mov	r19,r4
  207eb4:	10002f1e 	bne	r2,zero,207f74 <__pow5mult+0xe8>
  207eb8:	2825883a 	mov	r18,r5
  207ebc:	8021d0ba 	srai	r16,r16,2
  207ec0:	80001a26 	beq	r16,zero,207f2c <__pow5mult+0xa0>
  207ec4:	9c401217 	ldw	r17,72(r19)
  207ec8:	8800061e 	bne	r17,zero,207ee4 <__pow5mult+0x58>
  207ecc:	00003406 	br	207fa0 <__pow5mult+0x114>
  207ed0:	8021d07a 	srai	r16,r16,1
  207ed4:	80001526 	beq	r16,zero,207f2c <__pow5mult+0xa0>
  207ed8:	88800017 	ldw	r2,0(r17)
  207edc:	10001c26 	beq	r2,zero,207f50 <__pow5mult+0xc4>
  207ee0:	1023883a 	mov	r17,r2
  207ee4:	8080004c 	andi	r2,r16,1
  207ee8:	103ff926 	beq	r2,zero,207ed0 <_gp+0xffdf62ec>
  207eec:	880d883a 	mov	r6,r17
  207ef0:	900b883a 	mov	r5,r18
  207ef4:	9809883a 	mov	r4,r19
  207ef8:	0207c000 	call	207c00 <__multiply>
  207efc:	90001b26 	beq	r18,zero,207f6c <__pow5mult+0xe0>
  207f00:	91000117 	ldw	r4,4(r18)
  207f04:	98c01317 	ldw	r3,76(r19)
  207f08:	8021d07a 	srai	r16,r16,1
  207f0c:	2109883a 	add	r4,r4,r4
  207f10:	2109883a 	add	r4,r4,r4
  207f14:	1907883a 	add	r3,r3,r4
  207f18:	19000017 	ldw	r4,0(r3)
  207f1c:	91000015 	stw	r4,0(r18)
  207f20:	1c800015 	stw	r18,0(r3)
  207f24:	1025883a 	mov	r18,r2
  207f28:	803feb1e 	bne	r16,zero,207ed8 <_gp+0xffdf62f4>
  207f2c:	9005883a 	mov	r2,r18
  207f30:	dfc00517 	ldw	ra,20(sp)
  207f34:	dd000417 	ldw	r20,16(sp)
  207f38:	dcc00317 	ldw	r19,12(sp)
  207f3c:	dc800217 	ldw	r18,8(sp)
  207f40:	dc400117 	ldw	r17,4(sp)
  207f44:	dc000017 	ldw	r16,0(sp)
  207f48:	dec00604 	addi	sp,sp,24
  207f4c:	f800283a 	ret
  207f50:	880d883a 	mov	r6,r17
  207f54:	880b883a 	mov	r5,r17
  207f58:	9809883a 	mov	r4,r19
  207f5c:	0207c000 	call	207c00 <__multiply>
  207f60:	88800015 	stw	r2,0(r17)
  207f64:	10000015 	stw	zero,0(r2)
  207f68:	003fdd06 	br	207ee0 <_gp+0xffdf62fc>
  207f6c:	1025883a 	mov	r18,r2
  207f70:	003fd706 	br	207ed0 <_gp+0xffdf62ec>
  207f74:	10bfffc4 	addi	r2,r2,-1
  207f78:	1085883a 	add	r2,r2,r2
  207f7c:	00c00874 	movhi	r3,33
  207f80:	18d06404 	addi	r3,r3,16784
  207f84:	1085883a 	add	r2,r2,r2
  207f88:	1885883a 	add	r2,r3,r2
  207f8c:	11800017 	ldw	r6,0(r2)
  207f90:	000f883a 	mov	r7,zero
  207f94:	02078600 	call	207860 <__multadd>
  207f98:	1025883a 	mov	r18,r2
  207f9c:	003fc706 	br	207ebc <_gp+0xffdf62d8>
  207fa0:	05000044 	movi	r20,1
  207fa4:	a00b883a 	mov	r5,r20
  207fa8:	9809883a 	mov	r4,r19
  207fac:	02077900 	call	207790 <_Balloc>
  207fb0:	1023883a 	mov	r17,r2
  207fb4:	00809c44 	movi	r2,625
  207fb8:	88800515 	stw	r2,20(r17)
  207fbc:	8d000415 	stw	r20,16(r17)
  207fc0:	9c401215 	stw	r17,72(r19)
  207fc4:	88000015 	stw	zero,0(r17)
  207fc8:	003fc606 	br	207ee4 <_gp+0xffdf6300>

00207fcc <__lshift>:
  207fcc:	defff904 	addi	sp,sp,-28
  207fd0:	dd400515 	stw	r21,20(sp)
  207fd4:	dcc00315 	stw	r19,12(sp)
  207fd8:	302bd17a 	srai	r21,r6,5
  207fdc:	2cc00417 	ldw	r19,16(r5)
  207fe0:	28800217 	ldw	r2,8(r5)
  207fe4:	dd000415 	stw	r20,16(sp)
  207fe8:	ace7883a 	add	r19,r21,r19
  207fec:	dc800215 	stw	r18,8(sp)
  207ff0:	dc400115 	stw	r17,4(sp)
  207ff4:	dc000015 	stw	r16,0(sp)
  207ff8:	dfc00615 	stw	ra,24(sp)
  207ffc:	9c000044 	addi	r16,r19,1
  208000:	2823883a 	mov	r17,r5
  208004:	3029883a 	mov	r20,r6
  208008:	2025883a 	mov	r18,r4
  20800c:	29400117 	ldw	r5,4(r5)
  208010:	1400030e 	bge	r2,r16,208020 <__lshift+0x54>
  208014:	1085883a 	add	r2,r2,r2
  208018:	29400044 	addi	r5,r5,1
  20801c:	143ffd16 	blt	r2,r16,208014 <_gp+0xffdf6430>
  208020:	9009883a 	mov	r4,r18
  208024:	02077900 	call	207790 <_Balloc>
  208028:	10c00504 	addi	r3,r2,20
  20802c:	0540070e 	bge	zero,r21,20804c <__lshift+0x80>
  208030:	ad6b883a 	add	r21,r21,r21
  208034:	ad6b883a 	add	r21,r21,r21
  208038:	1809883a 	mov	r4,r3
  20803c:	1d47883a 	add	r3,r3,r21
  208040:	20000015 	stw	zero,0(r4)
  208044:	21000104 	addi	r4,r4,4
  208048:	193ffd1e 	bne	r3,r4,208040 <_gp+0xffdf645c>
  20804c:	8a000417 	ldw	r8,16(r17)
  208050:	89000504 	addi	r4,r17,20
  208054:	a18007cc 	andi	r6,r20,31
  208058:	4211883a 	add	r8,r8,r8
  20805c:	4211883a 	add	r8,r8,r8
  208060:	2211883a 	add	r8,r4,r8
  208064:	30002326 	beq	r6,zero,2080f4 <__lshift+0x128>
  208068:	02400804 	movi	r9,32
  20806c:	4993c83a 	sub	r9,r9,r6
  208070:	000b883a 	mov	r5,zero
  208074:	21c00017 	ldw	r7,0(r4)
  208078:	1815883a 	mov	r10,r3
  20807c:	18c00104 	addi	r3,r3,4
  208080:	398e983a 	sll	r7,r7,r6
  208084:	21000104 	addi	r4,r4,4
  208088:	394ab03a 	or	r5,r7,r5
  20808c:	197fff15 	stw	r5,-4(r3)
  208090:	217fff17 	ldw	r5,-4(r4)
  208094:	2a4ad83a 	srl	r5,r5,r9
  208098:	223ff636 	bltu	r4,r8,208074 <_gp+0xffdf6490>
  20809c:	51400115 	stw	r5,4(r10)
  2080a0:	28001a1e 	bne	r5,zero,20810c <__lshift+0x140>
  2080a4:	843fffc4 	addi	r16,r16,-1
  2080a8:	14000415 	stw	r16,16(r2)
  2080ac:	88000826 	beq	r17,zero,2080d0 <__lshift+0x104>
  2080b0:	89000117 	ldw	r4,4(r17)
  2080b4:	90c01317 	ldw	r3,76(r18)
  2080b8:	2109883a 	add	r4,r4,r4
  2080bc:	2109883a 	add	r4,r4,r4
  2080c0:	1907883a 	add	r3,r3,r4
  2080c4:	19000017 	ldw	r4,0(r3)
  2080c8:	89000015 	stw	r4,0(r17)
  2080cc:	1c400015 	stw	r17,0(r3)
  2080d0:	dfc00617 	ldw	ra,24(sp)
  2080d4:	dd400517 	ldw	r21,20(sp)
  2080d8:	dd000417 	ldw	r20,16(sp)
  2080dc:	dcc00317 	ldw	r19,12(sp)
  2080e0:	dc800217 	ldw	r18,8(sp)
  2080e4:	dc400117 	ldw	r17,4(sp)
  2080e8:	dc000017 	ldw	r16,0(sp)
  2080ec:	dec00704 	addi	sp,sp,28
  2080f0:	f800283a 	ret
  2080f4:	21400017 	ldw	r5,0(r4)
  2080f8:	18c00104 	addi	r3,r3,4
  2080fc:	21000104 	addi	r4,r4,4
  208100:	197fff15 	stw	r5,-4(r3)
  208104:	223ffb36 	bltu	r4,r8,2080f4 <_gp+0xffdf6510>
  208108:	003fe606 	br	2080a4 <_gp+0xffdf64c0>
  20810c:	9c000084 	addi	r16,r19,2
  208110:	003fe406 	br	2080a4 <_gp+0xffdf64c0>

00208114 <__mcmp>:
  208114:	20800417 	ldw	r2,16(r4)
  208118:	28c00417 	ldw	r3,16(r5)
  20811c:	10c5c83a 	sub	r2,r2,r3
  208120:	1000111e 	bne	r2,zero,208168 <__mcmp+0x54>
  208124:	18c7883a 	add	r3,r3,r3
  208128:	18c7883a 	add	r3,r3,r3
  20812c:	21000504 	addi	r4,r4,20
  208130:	29400504 	addi	r5,r5,20
  208134:	20c5883a 	add	r2,r4,r3
  208138:	28cb883a 	add	r5,r5,r3
  20813c:	00000106 	br	208144 <__mcmp+0x30>
  208140:	20800a2e 	bgeu	r4,r2,20816c <__mcmp+0x58>
  208144:	10bfff04 	addi	r2,r2,-4
  208148:	297fff04 	addi	r5,r5,-4
  20814c:	11800017 	ldw	r6,0(r2)
  208150:	28c00017 	ldw	r3,0(r5)
  208154:	30fffa26 	beq	r6,r3,208140 <_gp+0xffdf655c>
  208158:	30c00236 	bltu	r6,r3,208164 <__mcmp+0x50>
  20815c:	00800044 	movi	r2,1
  208160:	f800283a 	ret
  208164:	00bfffc4 	movi	r2,-1
  208168:	f800283a 	ret
  20816c:	0005883a 	mov	r2,zero
  208170:	f800283a 	ret

00208174 <__mdiff>:
  208174:	28c00417 	ldw	r3,16(r5)
  208178:	30800417 	ldw	r2,16(r6)
  20817c:	defffa04 	addi	sp,sp,-24
  208180:	dcc00315 	stw	r19,12(sp)
  208184:	dc800215 	stw	r18,8(sp)
  208188:	dfc00515 	stw	ra,20(sp)
  20818c:	dd000415 	stw	r20,16(sp)
  208190:	dc400115 	stw	r17,4(sp)
  208194:	dc000015 	stw	r16,0(sp)
  208198:	1887c83a 	sub	r3,r3,r2
  20819c:	2825883a 	mov	r18,r5
  2081a0:	3027883a 	mov	r19,r6
  2081a4:	1800141e 	bne	r3,zero,2081f8 <__mdiff+0x84>
  2081a8:	1085883a 	add	r2,r2,r2
  2081ac:	1085883a 	add	r2,r2,r2
  2081b0:	2a000504 	addi	r8,r5,20
  2081b4:	34000504 	addi	r16,r6,20
  2081b8:	4087883a 	add	r3,r8,r2
  2081bc:	8085883a 	add	r2,r16,r2
  2081c0:	00000106 	br	2081c8 <__mdiff+0x54>
  2081c4:	40c0592e 	bgeu	r8,r3,20832c <__mdiff+0x1b8>
  2081c8:	18ffff04 	addi	r3,r3,-4
  2081cc:	10bfff04 	addi	r2,r2,-4
  2081d0:	19c00017 	ldw	r7,0(r3)
  2081d4:	11400017 	ldw	r5,0(r2)
  2081d8:	397ffa26 	beq	r7,r5,2081c4 <_gp+0xffdf65e0>
  2081dc:	3940592e 	bgeu	r7,r5,208344 <__mdiff+0x1d0>
  2081e0:	9005883a 	mov	r2,r18
  2081e4:	4023883a 	mov	r17,r8
  2081e8:	9825883a 	mov	r18,r19
  2081ec:	05000044 	movi	r20,1
  2081f0:	1027883a 	mov	r19,r2
  2081f4:	00000406 	br	208208 <__mdiff+0x94>
  2081f8:	18005616 	blt	r3,zero,208354 <__mdiff+0x1e0>
  2081fc:	34400504 	addi	r17,r6,20
  208200:	2c000504 	addi	r16,r5,20
  208204:	0029883a 	mov	r20,zero
  208208:	91400117 	ldw	r5,4(r18)
  20820c:	02077900 	call	207790 <_Balloc>
  208210:	92400417 	ldw	r9,16(r18)
  208214:	9b000417 	ldw	r12,16(r19)
  208218:	12c00504 	addi	r11,r2,20
  20821c:	4a51883a 	add	r8,r9,r9
  208220:	6319883a 	add	r12,r12,r12
  208224:	4211883a 	add	r8,r8,r8
  208228:	6319883a 	add	r12,r12,r12
  20822c:	15000315 	stw	r20,12(r2)
  208230:	8211883a 	add	r8,r16,r8
  208234:	8b19883a 	add	r12,r17,r12
  208238:	0007883a 	mov	r3,zero
  20823c:	81400017 	ldw	r5,0(r16)
  208240:	89c00017 	ldw	r7,0(r17)
  208244:	59800104 	addi	r6,r11,4
  208248:	293fffcc 	andi	r4,r5,65535
  20824c:	20c7883a 	add	r3,r4,r3
  208250:	393fffcc 	andi	r4,r7,65535
  208254:	1909c83a 	sub	r4,r3,r4
  208258:	280ad43a 	srli	r5,r5,16
  20825c:	380ed43a 	srli	r7,r7,16
  208260:	2007d43a 	srai	r3,r4,16
  208264:	213fffcc 	andi	r4,r4,65535
  208268:	29cbc83a 	sub	r5,r5,r7
  20826c:	28c7883a 	add	r3,r5,r3
  208270:	180a943a 	slli	r5,r3,16
  208274:	8c400104 	addi	r17,r17,4
  208278:	84000104 	addi	r16,r16,4
  20827c:	2908b03a 	or	r4,r5,r4
  208280:	59000015 	stw	r4,0(r11)
  208284:	1807d43a 	srai	r3,r3,16
  208288:	3015883a 	mov	r10,r6
  20828c:	3017883a 	mov	r11,r6
  208290:	8b3fea36 	bltu	r17,r12,20823c <_gp+0xffdf6658>
  208294:	8200162e 	bgeu	r16,r8,2082f0 <__mdiff+0x17c>
  208298:	8017883a 	mov	r11,r16
  20829c:	59400017 	ldw	r5,0(r11)
  2082a0:	31800104 	addi	r6,r6,4
  2082a4:	5ac00104 	addi	r11,r11,4
  2082a8:	293fffcc 	andi	r4,r5,65535
  2082ac:	20c7883a 	add	r3,r4,r3
  2082b0:	280ed43a 	srli	r7,r5,16
  2082b4:	180bd43a 	srai	r5,r3,16
  2082b8:	193fffcc 	andi	r4,r3,65535
  2082bc:	3947883a 	add	r3,r7,r5
  2082c0:	180a943a 	slli	r5,r3,16
  2082c4:	1807d43a 	srai	r3,r3,16
  2082c8:	2908b03a 	or	r4,r5,r4
  2082cc:	313fff15 	stw	r4,-4(r6)
  2082d0:	5a3ff236 	bltu	r11,r8,20829c <_gp+0xffdf66b8>
  2082d4:	0406303a 	nor	r3,zero,r16
  2082d8:	1a07883a 	add	r3,r3,r8
  2082dc:	1806d0ba 	srli	r3,r3,2
  2082e0:	18c00044 	addi	r3,r3,1
  2082e4:	18c7883a 	add	r3,r3,r3
  2082e8:	18c7883a 	add	r3,r3,r3
  2082ec:	50d5883a 	add	r10,r10,r3
  2082f0:	50ffff04 	addi	r3,r10,-4
  2082f4:	2000041e 	bne	r4,zero,208308 <__mdiff+0x194>
  2082f8:	18ffff04 	addi	r3,r3,-4
  2082fc:	19000017 	ldw	r4,0(r3)
  208300:	4a7fffc4 	addi	r9,r9,-1
  208304:	203ffc26 	beq	r4,zero,2082f8 <_gp+0xffdf6714>
  208308:	12400415 	stw	r9,16(r2)
  20830c:	dfc00517 	ldw	ra,20(sp)
  208310:	dd000417 	ldw	r20,16(sp)
  208314:	dcc00317 	ldw	r19,12(sp)
  208318:	dc800217 	ldw	r18,8(sp)
  20831c:	dc400117 	ldw	r17,4(sp)
  208320:	dc000017 	ldw	r16,0(sp)
  208324:	dec00604 	addi	sp,sp,24
  208328:	f800283a 	ret
  20832c:	000b883a 	mov	r5,zero
  208330:	02077900 	call	207790 <_Balloc>
  208334:	00c00044 	movi	r3,1
  208338:	10c00415 	stw	r3,16(r2)
  20833c:	10000515 	stw	zero,20(r2)
  208340:	003ff206 	br	20830c <_gp+0xffdf6728>
  208344:	8023883a 	mov	r17,r16
  208348:	0029883a 	mov	r20,zero
  20834c:	4021883a 	mov	r16,r8
  208350:	003fad06 	br	208208 <_gp+0xffdf6624>
  208354:	9005883a 	mov	r2,r18
  208358:	94400504 	addi	r17,r18,20
  20835c:	9c000504 	addi	r16,r19,20
  208360:	9825883a 	mov	r18,r19
  208364:	05000044 	movi	r20,1
  208368:	1027883a 	mov	r19,r2
  20836c:	003fa606 	br	208208 <_gp+0xffdf6624>

00208370 <__ulp>:
  208370:	295ffc2c 	andhi	r5,r5,32752
  208374:	00bf3034 	movhi	r2,64704
  208378:	2887883a 	add	r3,r5,r2
  20837c:	00c0020e 	bge	zero,r3,208388 <__ulp+0x18>
  208380:	0005883a 	mov	r2,zero
  208384:	f800283a 	ret
  208388:	00c7c83a 	sub	r3,zero,r3
  20838c:	1807d53a 	srai	r3,r3,20
  208390:	008004c4 	movi	r2,19
  208394:	10c00b0e 	bge	r2,r3,2083c4 <__ulp+0x54>
  208398:	18bffb04 	addi	r2,r3,-20
  20839c:	01000784 	movi	r4,30
  2083a0:	0007883a 	mov	r3,zero
  2083a4:	20800516 	blt	r4,r2,2083bc <__ulp+0x4c>
  2083a8:	010007c4 	movi	r4,31
  2083ac:	2089c83a 	sub	r4,r4,r2
  2083b0:	00800044 	movi	r2,1
  2083b4:	1104983a 	sll	r2,r2,r4
  2083b8:	f800283a 	ret
  2083bc:	00800044 	movi	r2,1
  2083c0:	f800283a 	ret
  2083c4:	01400234 	movhi	r5,8
  2083c8:	28c7d83a 	sra	r3,r5,r3
  2083cc:	0005883a 	mov	r2,zero
  2083d0:	f800283a 	ret

002083d4 <__b2d>:
  2083d4:	defffa04 	addi	sp,sp,-24
  2083d8:	dc000015 	stw	r16,0(sp)
  2083dc:	24000417 	ldw	r16,16(r4)
  2083e0:	dc400115 	stw	r17,4(sp)
  2083e4:	24400504 	addi	r17,r4,20
  2083e8:	8421883a 	add	r16,r16,r16
  2083ec:	8421883a 	add	r16,r16,r16
  2083f0:	8c21883a 	add	r16,r17,r16
  2083f4:	dc800215 	stw	r18,8(sp)
  2083f8:	84bfff17 	ldw	r18,-4(r16)
  2083fc:	dd000415 	stw	r20,16(sp)
  208400:	dcc00315 	stw	r19,12(sp)
  208404:	9009883a 	mov	r4,r18
  208408:	2829883a 	mov	r20,r5
  20840c:	dfc00515 	stw	ra,20(sp)
  208410:	0207aac0 	call	207aac <__hi0bits>
  208414:	00c00804 	movi	r3,32
  208418:	1889c83a 	sub	r4,r3,r2
  20841c:	a1000015 	stw	r4,0(r20)
  208420:	01000284 	movi	r4,10
  208424:	84ffff04 	addi	r19,r16,-4
  208428:	20801216 	blt	r4,r2,208474 <__b2d+0xa0>
  20842c:	018002c4 	movi	r6,11
  208430:	308dc83a 	sub	r6,r6,r2
  208434:	9186d83a 	srl	r3,r18,r6
  208438:	18cffc34 	orhi	r3,r3,16368
  20843c:	8cc0212e 	bgeu	r17,r19,2084c4 <__b2d+0xf0>
  208440:	813ffe17 	ldw	r4,-8(r16)
  208444:	218cd83a 	srl	r6,r4,r6
  208448:	10800544 	addi	r2,r2,21
  20844c:	9084983a 	sll	r2,r18,r2
  208450:	1184b03a 	or	r2,r2,r6
  208454:	dfc00517 	ldw	ra,20(sp)
  208458:	dd000417 	ldw	r20,16(sp)
  20845c:	dcc00317 	ldw	r19,12(sp)
  208460:	dc800217 	ldw	r18,8(sp)
  208464:	dc400117 	ldw	r17,4(sp)
  208468:	dc000017 	ldw	r16,0(sp)
  20846c:	dec00604 	addi	sp,sp,24
  208470:	f800283a 	ret
  208474:	8cc00f2e 	bgeu	r17,r19,2084b4 <__b2d+0xe0>
  208478:	117ffd44 	addi	r5,r2,-11
  20847c:	80bffe17 	ldw	r2,-8(r16)
  208480:	28000e26 	beq	r5,zero,2084bc <__b2d+0xe8>
  208484:	1949c83a 	sub	r4,r3,r5
  208488:	9164983a 	sll	r18,r18,r5
  20848c:	1106d83a 	srl	r3,r2,r4
  208490:	81bffe04 	addi	r6,r16,-8
  208494:	948ffc34 	orhi	r18,r18,16368
  208498:	90c6b03a 	or	r3,r18,r3
  20849c:	89800e2e 	bgeu	r17,r6,2084d8 <__b2d+0x104>
  2084a0:	81bffd17 	ldw	r6,-12(r16)
  2084a4:	1144983a 	sll	r2,r2,r5
  2084a8:	310ad83a 	srl	r5,r6,r4
  2084ac:	2884b03a 	or	r2,r5,r2
  2084b0:	003fe806 	br	208454 <_gp+0xffdf6870>
  2084b4:	10bffd44 	addi	r2,r2,-11
  2084b8:	1000041e 	bne	r2,zero,2084cc <__b2d+0xf8>
  2084bc:	90cffc34 	orhi	r3,r18,16368
  2084c0:	003fe406 	br	208454 <_gp+0xffdf6870>
  2084c4:	000d883a 	mov	r6,zero
  2084c8:	003fdf06 	br	208448 <_gp+0xffdf6864>
  2084cc:	90a4983a 	sll	r18,r18,r2
  2084d0:	0005883a 	mov	r2,zero
  2084d4:	003ff906 	br	2084bc <_gp+0xffdf68d8>
  2084d8:	1144983a 	sll	r2,r2,r5
  2084dc:	003fdd06 	br	208454 <_gp+0xffdf6870>

002084e0 <__d2b>:
  2084e0:	defff804 	addi	sp,sp,-32
  2084e4:	dc000215 	stw	r16,8(sp)
  2084e8:	3021883a 	mov	r16,r6
  2084ec:	dc400315 	stw	r17,12(sp)
  2084f0:	8022907a 	slli	r17,r16,1
  2084f4:	dd000615 	stw	r20,24(sp)
  2084f8:	2829883a 	mov	r20,r5
  2084fc:	01400044 	movi	r5,1
  208500:	dcc00515 	stw	r19,20(sp)
  208504:	dc800415 	stw	r18,16(sp)
  208508:	dfc00715 	stw	ra,28(sp)
  20850c:	3825883a 	mov	r18,r7
  208510:	8822d57a 	srli	r17,r17,21
  208514:	02077900 	call	207790 <_Balloc>
  208518:	1027883a 	mov	r19,r2
  20851c:	00800434 	movhi	r2,16
  208520:	10bfffc4 	addi	r2,r2,-1
  208524:	808c703a 	and	r6,r16,r2
  208528:	88000126 	beq	r17,zero,208530 <__d2b+0x50>
  20852c:	31800434 	orhi	r6,r6,16
  208530:	d9800015 	stw	r6,0(sp)
  208534:	a0002426 	beq	r20,zero,2085c8 <__d2b+0xe8>
  208538:	d9000104 	addi	r4,sp,4
  20853c:	dd000115 	stw	r20,4(sp)
  208540:	0207b140 	call	207b14 <__lo0bits>
  208544:	d8c00017 	ldw	r3,0(sp)
  208548:	10002f1e 	bne	r2,zero,208608 <__d2b+0x128>
  20854c:	d9000117 	ldw	r4,4(sp)
  208550:	99000515 	stw	r4,20(r19)
  208554:	1821003a 	cmpeq	r16,r3,zero
  208558:	01000084 	movi	r4,2
  20855c:	2421c83a 	sub	r16,r4,r16
  208560:	98c00615 	stw	r3,24(r19)
  208564:	9c000415 	stw	r16,16(r19)
  208568:	88001f1e 	bne	r17,zero,2085e8 <__d2b+0x108>
  20856c:	10bef384 	addi	r2,r2,-1074
  208570:	90800015 	stw	r2,0(r18)
  208574:	00900034 	movhi	r2,16384
  208578:	10bfffc4 	addi	r2,r2,-1
  20857c:	8085883a 	add	r2,r16,r2
  208580:	1085883a 	add	r2,r2,r2
  208584:	1085883a 	add	r2,r2,r2
  208588:	9885883a 	add	r2,r19,r2
  20858c:	11000517 	ldw	r4,20(r2)
  208590:	8020917a 	slli	r16,r16,5
  208594:	0207aac0 	call	207aac <__hi0bits>
  208598:	d8c00817 	ldw	r3,32(sp)
  20859c:	8085c83a 	sub	r2,r16,r2
  2085a0:	18800015 	stw	r2,0(r3)
  2085a4:	9805883a 	mov	r2,r19
  2085a8:	dfc00717 	ldw	ra,28(sp)
  2085ac:	dd000617 	ldw	r20,24(sp)
  2085b0:	dcc00517 	ldw	r19,20(sp)
  2085b4:	dc800417 	ldw	r18,16(sp)
  2085b8:	dc400317 	ldw	r17,12(sp)
  2085bc:	dc000217 	ldw	r16,8(sp)
  2085c0:	dec00804 	addi	sp,sp,32
  2085c4:	f800283a 	ret
  2085c8:	d809883a 	mov	r4,sp
  2085cc:	0207b140 	call	207b14 <__lo0bits>
  2085d0:	d8c00017 	ldw	r3,0(sp)
  2085d4:	04000044 	movi	r16,1
  2085d8:	9c000415 	stw	r16,16(r19)
  2085dc:	98c00515 	stw	r3,20(r19)
  2085e0:	10800804 	addi	r2,r2,32
  2085e4:	883fe126 	beq	r17,zero,20856c <_gp+0xffdf6988>
  2085e8:	00c00d44 	movi	r3,53
  2085ec:	8c7ef344 	addi	r17,r17,-1075
  2085f0:	88a3883a 	add	r17,r17,r2
  2085f4:	1885c83a 	sub	r2,r3,r2
  2085f8:	d8c00817 	ldw	r3,32(sp)
  2085fc:	94400015 	stw	r17,0(r18)
  208600:	18800015 	stw	r2,0(r3)
  208604:	003fe706 	br	2085a4 <_gp+0xffdf69c0>
  208608:	01000804 	movi	r4,32
  20860c:	2089c83a 	sub	r4,r4,r2
  208610:	1908983a 	sll	r4,r3,r4
  208614:	d9400117 	ldw	r5,4(sp)
  208618:	1886d83a 	srl	r3,r3,r2
  20861c:	2148b03a 	or	r4,r4,r5
  208620:	99000515 	stw	r4,20(r19)
  208624:	d8c00015 	stw	r3,0(sp)
  208628:	003fca06 	br	208554 <_gp+0xffdf6970>

0020862c <__ratio>:
  20862c:	defff904 	addi	sp,sp,-28
  208630:	dc400315 	stw	r17,12(sp)
  208634:	2823883a 	mov	r17,r5
  208638:	d9400104 	addi	r5,sp,4
  20863c:	dfc00615 	stw	ra,24(sp)
  208640:	dcc00515 	stw	r19,20(sp)
  208644:	dc800415 	stw	r18,16(sp)
  208648:	2027883a 	mov	r19,r4
  20864c:	dc000215 	stw	r16,8(sp)
  208650:	02083d40 	call	2083d4 <__b2d>
  208654:	d80b883a 	mov	r5,sp
  208658:	8809883a 	mov	r4,r17
  20865c:	1025883a 	mov	r18,r2
  208660:	1821883a 	mov	r16,r3
  208664:	02083d40 	call	2083d4 <__b2d>
  208668:	8a000417 	ldw	r8,16(r17)
  20866c:	99000417 	ldw	r4,16(r19)
  208670:	d9400117 	ldw	r5,4(sp)
  208674:	2209c83a 	sub	r4,r4,r8
  208678:	2010917a 	slli	r8,r4,5
  20867c:	d9000017 	ldw	r4,0(sp)
  208680:	2909c83a 	sub	r4,r5,r4
  208684:	4109883a 	add	r4,r8,r4
  208688:	01000e0e 	bge	zero,r4,2086c4 <__ratio+0x98>
  20868c:	2008953a 	slli	r4,r4,20
  208690:	2421883a 	add	r16,r4,r16
  208694:	100d883a 	mov	r6,r2
  208698:	180f883a 	mov	r7,r3
  20869c:	9009883a 	mov	r4,r18
  2086a0:	800b883a 	mov	r5,r16
  2086a4:	020c53c0 	call	20c53c <__divdf3>
  2086a8:	dfc00617 	ldw	ra,24(sp)
  2086ac:	dcc00517 	ldw	r19,20(sp)
  2086b0:	dc800417 	ldw	r18,16(sp)
  2086b4:	dc400317 	ldw	r17,12(sp)
  2086b8:	dc000217 	ldw	r16,8(sp)
  2086bc:	dec00704 	addi	sp,sp,28
  2086c0:	f800283a 	ret
  2086c4:	2008953a 	slli	r4,r4,20
  2086c8:	1907c83a 	sub	r3,r3,r4
  2086cc:	003ff106 	br	208694 <_gp+0xffdf6ab0>

002086d0 <_mprec_log10>:
  2086d0:	defffe04 	addi	sp,sp,-8
  2086d4:	dc000015 	stw	r16,0(sp)
  2086d8:	dfc00115 	stw	ra,4(sp)
  2086dc:	008005c4 	movi	r2,23
  2086e0:	2021883a 	mov	r16,r4
  2086e4:	11000d0e 	bge	r2,r4,20871c <_mprec_log10+0x4c>
  2086e8:	0005883a 	mov	r2,zero
  2086ec:	00cffc34 	movhi	r3,16368
  2086f0:	843fffc4 	addi	r16,r16,-1
  2086f4:	000d883a 	mov	r6,zero
  2086f8:	01d00934 	movhi	r7,16420
  2086fc:	1009883a 	mov	r4,r2
  208700:	180b883a 	mov	r5,r3
  208704:	020d1640 	call	20d164 <__muldf3>
  208708:	803ff91e 	bne	r16,zero,2086f0 <_gp+0xffdf6b0c>
  20870c:	dfc00117 	ldw	ra,4(sp)
  208710:	dc000017 	ldw	r16,0(sp)
  208714:	dec00204 	addi	sp,sp,8
  208718:	f800283a 	ret
  20871c:	202090fa 	slli	r16,r4,3
  208720:	00800874 	movhi	r2,33
  208724:	10907b04 	addi	r2,r2,16876
  208728:	1421883a 	add	r16,r2,r16
  20872c:	80800017 	ldw	r2,0(r16)
  208730:	80c00117 	ldw	r3,4(r16)
  208734:	dfc00117 	ldw	ra,4(sp)
  208738:	dc000017 	ldw	r16,0(sp)
  20873c:	dec00204 	addi	sp,sp,8
  208740:	f800283a 	ret

00208744 <__copybits>:
  208744:	297fffc4 	addi	r5,r5,-1
  208748:	280fd17a 	srai	r7,r5,5
  20874c:	30c00417 	ldw	r3,16(r6)
  208750:	30800504 	addi	r2,r6,20
  208754:	39c00044 	addi	r7,r7,1
  208758:	18c7883a 	add	r3,r3,r3
  20875c:	39cf883a 	add	r7,r7,r7
  208760:	18c7883a 	add	r3,r3,r3
  208764:	39cf883a 	add	r7,r7,r7
  208768:	10c7883a 	add	r3,r2,r3
  20876c:	21cf883a 	add	r7,r4,r7
  208770:	10c00d2e 	bgeu	r2,r3,2087a8 <__copybits+0x64>
  208774:	200b883a 	mov	r5,r4
  208778:	12000017 	ldw	r8,0(r2)
  20877c:	29400104 	addi	r5,r5,4
  208780:	10800104 	addi	r2,r2,4
  208784:	2a3fff15 	stw	r8,-4(r5)
  208788:	10fffb36 	bltu	r2,r3,208778 <_gp+0xffdf6b94>
  20878c:	1985c83a 	sub	r2,r3,r6
  208790:	10bffac4 	addi	r2,r2,-21
  208794:	1004d0ba 	srli	r2,r2,2
  208798:	10800044 	addi	r2,r2,1
  20879c:	1085883a 	add	r2,r2,r2
  2087a0:	1085883a 	add	r2,r2,r2
  2087a4:	2089883a 	add	r4,r4,r2
  2087a8:	21c0032e 	bgeu	r4,r7,2087b8 <__copybits+0x74>
  2087ac:	20000015 	stw	zero,0(r4)
  2087b0:	21000104 	addi	r4,r4,4
  2087b4:	21fffd36 	bltu	r4,r7,2087ac <_gp+0xffdf6bc8>
  2087b8:	f800283a 	ret

002087bc <__any_on>:
  2087bc:	20c00417 	ldw	r3,16(r4)
  2087c0:	2805d17a 	srai	r2,r5,5
  2087c4:	21000504 	addi	r4,r4,20
  2087c8:	18800d0e 	bge	r3,r2,208800 <__any_on+0x44>
  2087cc:	18c7883a 	add	r3,r3,r3
  2087d0:	18c7883a 	add	r3,r3,r3
  2087d4:	20c7883a 	add	r3,r4,r3
  2087d8:	20c0192e 	bgeu	r4,r3,208840 <__any_on+0x84>
  2087dc:	18bfff17 	ldw	r2,-4(r3)
  2087e0:	18ffff04 	addi	r3,r3,-4
  2087e4:	1000041e 	bne	r2,zero,2087f8 <__any_on+0x3c>
  2087e8:	20c0142e 	bgeu	r4,r3,20883c <__any_on+0x80>
  2087ec:	18ffff04 	addi	r3,r3,-4
  2087f0:	19400017 	ldw	r5,0(r3)
  2087f4:	283ffc26 	beq	r5,zero,2087e8 <_gp+0xffdf6c04>
  2087f8:	00800044 	movi	r2,1
  2087fc:	f800283a 	ret
  208800:	10c00a0e 	bge	r2,r3,20882c <__any_on+0x70>
  208804:	1085883a 	add	r2,r2,r2
  208808:	1085883a 	add	r2,r2,r2
  20880c:	294007cc 	andi	r5,r5,31
  208810:	2087883a 	add	r3,r4,r2
  208814:	283ff026 	beq	r5,zero,2087d8 <_gp+0xffdf6bf4>
  208818:	19800017 	ldw	r6,0(r3)
  20881c:	3144d83a 	srl	r2,r6,r5
  208820:	114a983a 	sll	r5,r2,r5
  208824:	317ff41e 	bne	r6,r5,2087f8 <_gp+0xffdf6c14>
  208828:	003feb06 	br	2087d8 <_gp+0xffdf6bf4>
  20882c:	1085883a 	add	r2,r2,r2
  208830:	1085883a 	add	r2,r2,r2
  208834:	2087883a 	add	r3,r4,r2
  208838:	003fe706 	br	2087d8 <_gp+0xffdf6bf4>
  20883c:	f800283a 	ret
  208840:	0005883a 	mov	r2,zero
  208844:	f800283a 	ret

00208848 <_realloc_r>:
  208848:	defff604 	addi	sp,sp,-40
  20884c:	dc800215 	stw	r18,8(sp)
  208850:	dfc00915 	stw	ra,36(sp)
  208854:	df000815 	stw	fp,32(sp)
  208858:	ddc00715 	stw	r23,28(sp)
  20885c:	dd800615 	stw	r22,24(sp)
  208860:	dd400515 	stw	r21,20(sp)
  208864:	dd000415 	stw	r20,16(sp)
  208868:	dcc00315 	stw	r19,12(sp)
  20886c:	dc400115 	stw	r17,4(sp)
  208870:	dc000015 	stw	r16,0(sp)
  208874:	3025883a 	mov	r18,r6
  208878:	2800b726 	beq	r5,zero,208b58 <_realloc_r+0x310>
  20887c:	282b883a 	mov	r21,r5
  208880:	2029883a 	mov	r20,r4
  208884:	020ea6c0 	call	20ea6c <__malloc_lock>
  208888:	a8bfff17 	ldw	r2,-4(r21)
  20888c:	043fff04 	movi	r16,-4
  208890:	90c002c4 	addi	r3,r18,11
  208894:	01000584 	movi	r4,22
  208898:	acfffe04 	addi	r19,r21,-8
  20889c:	1420703a 	and	r16,r2,r16
  2088a0:	20c0332e 	bgeu	r4,r3,208970 <_realloc_r+0x128>
  2088a4:	047ffe04 	movi	r17,-8
  2088a8:	1c62703a 	and	r17,r3,r17
  2088ac:	8807883a 	mov	r3,r17
  2088b0:	88005816 	blt	r17,zero,208a14 <_realloc_r+0x1cc>
  2088b4:	8c805736 	bltu	r17,r18,208a14 <_realloc_r+0x1cc>
  2088b8:	80c0300e 	bge	r16,r3,20897c <_realloc_r+0x134>
  2088bc:	07001074 	movhi	fp,65
  2088c0:	e7212704 	addi	fp,fp,-31588
  2088c4:	e1c00217 	ldw	r7,8(fp)
  2088c8:	9c09883a 	add	r4,r19,r16
  2088cc:	22000117 	ldw	r8,4(r4)
  2088d0:	21c06326 	beq	r4,r7,208a60 <_realloc_r+0x218>
  2088d4:	017fff84 	movi	r5,-2
  2088d8:	414a703a 	and	r5,r8,r5
  2088dc:	214b883a 	add	r5,r4,r5
  2088e0:	29800117 	ldw	r6,4(r5)
  2088e4:	3180004c 	andi	r6,r6,1
  2088e8:	30003f26 	beq	r6,zero,2089e8 <_realloc_r+0x1a0>
  2088ec:	1080004c 	andi	r2,r2,1
  2088f0:	10008326 	beq	r2,zero,208b00 <_realloc_r+0x2b8>
  2088f4:	900b883a 	mov	r5,r18
  2088f8:	a009883a 	mov	r4,r20
  2088fc:	0206ad40 	call	206ad4 <_malloc_r>
  208900:	1025883a 	mov	r18,r2
  208904:	10011e26 	beq	r2,zero,208d80 <_realloc_r+0x538>
  208908:	a93fff17 	ldw	r4,-4(r21)
  20890c:	10fffe04 	addi	r3,r2,-8
  208910:	00bfff84 	movi	r2,-2
  208914:	2084703a 	and	r2,r4,r2
  208918:	9885883a 	add	r2,r19,r2
  20891c:	1880ee26 	beq	r3,r2,208cd8 <_realloc_r+0x490>
  208920:	81bfff04 	addi	r6,r16,-4
  208924:	00800904 	movi	r2,36
  208928:	1180b836 	bltu	r2,r6,208c0c <_realloc_r+0x3c4>
  20892c:	00c004c4 	movi	r3,19
  208930:	19809636 	bltu	r3,r6,208b8c <_realloc_r+0x344>
  208934:	9005883a 	mov	r2,r18
  208938:	a807883a 	mov	r3,r21
  20893c:	19000017 	ldw	r4,0(r3)
  208940:	11000015 	stw	r4,0(r2)
  208944:	19000117 	ldw	r4,4(r3)
  208948:	11000115 	stw	r4,4(r2)
  20894c:	18c00217 	ldw	r3,8(r3)
  208950:	10c00215 	stw	r3,8(r2)
  208954:	a80b883a 	mov	r5,r21
  208958:	a009883a 	mov	r4,r20
  20895c:	0205edc0 	call	205edc <_free_r>
  208960:	a009883a 	mov	r4,r20
  208964:	020ea900 	call	20ea90 <__malloc_unlock>
  208968:	9005883a 	mov	r2,r18
  20896c:	00001206 	br	2089b8 <_realloc_r+0x170>
  208970:	00c00404 	movi	r3,16
  208974:	1823883a 	mov	r17,r3
  208978:	003fce06 	br	2088b4 <_gp+0xffdf6cd0>
  20897c:	a825883a 	mov	r18,r21
  208980:	8445c83a 	sub	r2,r16,r17
  208984:	00c003c4 	movi	r3,15
  208988:	18802636 	bltu	r3,r2,208a24 <_realloc_r+0x1dc>
  20898c:	99800117 	ldw	r6,4(r19)
  208990:	9c07883a 	add	r3,r19,r16
  208994:	3180004c 	andi	r6,r6,1
  208998:	3420b03a 	or	r16,r6,r16
  20899c:	9c000115 	stw	r16,4(r19)
  2089a0:	18800117 	ldw	r2,4(r3)
  2089a4:	10800054 	ori	r2,r2,1
  2089a8:	18800115 	stw	r2,4(r3)
  2089ac:	a009883a 	mov	r4,r20
  2089b0:	020ea900 	call	20ea90 <__malloc_unlock>
  2089b4:	9005883a 	mov	r2,r18
  2089b8:	dfc00917 	ldw	ra,36(sp)
  2089bc:	df000817 	ldw	fp,32(sp)
  2089c0:	ddc00717 	ldw	r23,28(sp)
  2089c4:	dd800617 	ldw	r22,24(sp)
  2089c8:	dd400517 	ldw	r21,20(sp)
  2089cc:	dd000417 	ldw	r20,16(sp)
  2089d0:	dcc00317 	ldw	r19,12(sp)
  2089d4:	dc800217 	ldw	r18,8(sp)
  2089d8:	dc400117 	ldw	r17,4(sp)
  2089dc:	dc000017 	ldw	r16,0(sp)
  2089e0:	dec00a04 	addi	sp,sp,40
  2089e4:	f800283a 	ret
  2089e8:	017fff04 	movi	r5,-4
  2089ec:	414a703a 	and	r5,r8,r5
  2089f0:	814d883a 	add	r6,r16,r5
  2089f4:	30c01f16 	blt	r6,r3,208a74 <_realloc_r+0x22c>
  2089f8:	20800317 	ldw	r2,12(r4)
  2089fc:	20c00217 	ldw	r3,8(r4)
  208a00:	a825883a 	mov	r18,r21
  208a04:	3021883a 	mov	r16,r6
  208a08:	18800315 	stw	r2,12(r3)
  208a0c:	10c00215 	stw	r3,8(r2)
  208a10:	003fdb06 	br	208980 <_gp+0xffdf6d9c>
  208a14:	00800304 	movi	r2,12
  208a18:	a0800015 	stw	r2,0(r20)
  208a1c:	0005883a 	mov	r2,zero
  208a20:	003fe506 	br	2089b8 <_gp+0xffdf6dd4>
  208a24:	98c00117 	ldw	r3,4(r19)
  208a28:	9c4b883a 	add	r5,r19,r17
  208a2c:	11000054 	ori	r4,r2,1
  208a30:	18c0004c 	andi	r3,r3,1
  208a34:	1c62b03a 	or	r17,r3,r17
  208a38:	9c400115 	stw	r17,4(r19)
  208a3c:	29000115 	stw	r4,4(r5)
  208a40:	2885883a 	add	r2,r5,r2
  208a44:	10c00117 	ldw	r3,4(r2)
  208a48:	29400204 	addi	r5,r5,8
  208a4c:	a009883a 	mov	r4,r20
  208a50:	18c00054 	ori	r3,r3,1
  208a54:	10c00115 	stw	r3,4(r2)
  208a58:	0205edc0 	call	205edc <_free_r>
  208a5c:	003fd306 	br	2089ac <_gp+0xffdf6dc8>
  208a60:	017fff04 	movi	r5,-4
  208a64:	414a703a 	and	r5,r8,r5
  208a68:	89800404 	addi	r6,r17,16
  208a6c:	8151883a 	add	r8,r16,r5
  208a70:	4180590e 	bge	r8,r6,208bd8 <_realloc_r+0x390>
  208a74:	1080004c 	andi	r2,r2,1
  208a78:	103f9e1e 	bne	r2,zero,2088f4 <_gp+0xffdf6d10>
  208a7c:	adbffe17 	ldw	r22,-8(r21)
  208a80:	00bfff04 	movi	r2,-4
  208a84:	9dadc83a 	sub	r22,r19,r22
  208a88:	b1800117 	ldw	r6,4(r22)
  208a8c:	3084703a 	and	r2,r6,r2
  208a90:	20002026 	beq	r4,zero,208b14 <_realloc_r+0x2cc>
  208a94:	80af883a 	add	r23,r16,r2
  208a98:	b96f883a 	add	r23,r23,r5
  208a9c:	21c05f26 	beq	r4,r7,208c1c <_realloc_r+0x3d4>
  208aa0:	b8c01c16 	blt	r23,r3,208b14 <_realloc_r+0x2cc>
  208aa4:	20800317 	ldw	r2,12(r4)
  208aa8:	20c00217 	ldw	r3,8(r4)
  208aac:	81bfff04 	addi	r6,r16,-4
  208ab0:	01000904 	movi	r4,36
  208ab4:	18800315 	stw	r2,12(r3)
  208ab8:	10c00215 	stw	r3,8(r2)
  208abc:	b0c00217 	ldw	r3,8(r22)
  208ac0:	b0800317 	ldw	r2,12(r22)
  208ac4:	b4800204 	addi	r18,r22,8
  208ac8:	18800315 	stw	r2,12(r3)
  208acc:	10c00215 	stw	r3,8(r2)
  208ad0:	21801b36 	bltu	r4,r6,208b40 <_realloc_r+0x2f8>
  208ad4:	008004c4 	movi	r2,19
  208ad8:	1180352e 	bgeu	r2,r6,208bb0 <_realloc_r+0x368>
  208adc:	a8800017 	ldw	r2,0(r21)
  208ae0:	b0800215 	stw	r2,8(r22)
  208ae4:	a8800117 	ldw	r2,4(r21)
  208ae8:	b0800315 	stw	r2,12(r22)
  208aec:	008006c4 	movi	r2,27
  208af0:	11807f36 	bltu	r2,r6,208cf0 <_realloc_r+0x4a8>
  208af4:	b0800404 	addi	r2,r22,16
  208af8:	ad400204 	addi	r21,r21,8
  208afc:	00002d06 	br	208bb4 <_realloc_r+0x36c>
  208b00:	adbffe17 	ldw	r22,-8(r21)
  208b04:	00bfff04 	movi	r2,-4
  208b08:	9dadc83a 	sub	r22,r19,r22
  208b0c:	b1000117 	ldw	r4,4(r22)
  208b10:	2084703a 	and	r2,r4,r2
  208b14:	b03f7726 	beq	r22,zero,2088f4 <_gp+0xffdf6d10>
  208b18:	80af883a 	add	r23,r16,r2
  208b1c:	b8ff7516 	blt	r23,r3,2088f4 <_gp+0xffdf6d10>
  208b20:	b0800317 	ldw	r2,12(r22)
  208b24:	b0c00217 	ldw	r3,8(r22)
  208b28:	81bfff04 	addi	r6,r16,-4
  208b2c:	01000904 	movi	r4,36
  208b30:	18800315 	stw	r2,12(r3)
  208b34:	10c00215 	stw	r3,8(r2)
  208b38:	b4800204 	addi	r18,r22,8
  208b3c:	21bfe52e 	bgeu	r4,r6,208ad4 <_gp+0xffdf6ef0>
  208b40:	a80b883a 	mov	r5,r21
  208b44:	9009883a 	mov	r4,r18
  208b48:	020750c0 	call	20750c <memmove>
  208b4c:	b821883a 	mov	r16,r23
  208b50:	b027883a 	mov	r19,r22
  208b54:	003f8a06 	br	208980 <_gp+0xffdf6d9c>
  208b58:	300b883a 	mov	r5,r6
  208b5c:	dfc00917 	ldw	ra,36(sp)
  208b60:	df000817 	ldw	fp,32(sp)
  208b64:	ddc00717 	ldw	r23,28(sp)
  208b68:	dd800617 	ldw	r22,24(sp)
  208b6c:	dd400517 	ldw	r21,20(sp)
  208b70:	dd000417 	ldw	r20,16(sp)
  208b74:	dcc00317 	ldw	r19,12(sp)
  208b78:	dc800217 	ldw	r18,8(sp)
  208b7c:	dc400117 	ldw	r17,4(sp)
  208b80:	dc000017 	ldw	r16,0(sp)
  208b84:	dec00a04 	addi	sp,sp,40
  208b88:	0206ad41 	jmpi	206ad4 <_malloc_r>
  208b8c:	a8c00017 	ldw	r3,0(r21)
  208b90:	90c00015 	stw	r3,0(r18)
  208b94:	a8c00117 	ldw	r3,4(r21)
  208b98:	90c00115 	stw	r3,4(r18)
  208b9c:	00c006c4 	movi	r3,27
  208ba0:	19804536 	bltu	r3,r6,208cb8 <_realloc_r+0x470>
  208ba4:	90800204 	addi	r2,r18,8
  208ba8:	a8c00204 	addi	r3,r21,8
  208bac:	003f6306 	br	20893c <_gp+0xffdf6d58>
  208bb0:	9005883a 	mov	r2,r18
  208bb4:	a8c00017 	ldw	r3,0(r21)
  208bb8:	b821883a 	mov	r16,r23
  208bbc:	b027883a 	mov	r19,r22
  208bc0:	10c00015 	stw	r3,0(r2)
  208bc4:	a8c00117 	ldw	r3,4(r21)
  208bc8:	10c00115 	stw	r3,4(r2)
  208bcc:	a8c00217 	ldw	r3,8(r21)
  208bd0:	10c00215 	stw	r3,8(r2)
  208bd4:	003f6a06 	br	208980 <_gp+0xffdf6d9c>
  208bd8:	9c67883a 	add	r19,r19,r17
  208bdc:	4445c83a 	sub	r2,r8,r17
  208be0:	e4c00215 	stw	r19,8(fp)
  208be4:	10800054 	ori	r2,r2,1
  208be8:	98800115 	stw	r2,4(r19)
  208bec:	a8bfff17 	ldw	r2,-4(r21)
  208bf0:	a009883a 	mov	r4,r20
  208bf4:	1080004c 	andi	r2,r2,1
  208bf8:	1462b03a 	or	r17,r2,r17
  208bfc:	ac7fff15 	stw	r17,-4(r21)
  208c00:	020ea900 	call	20ea90 <__malloc_unlock>
  208c04:	a805883a 	mov	r2,r21
  208c08:	003f6b06 	br	2089b8 <_gp+0xffdf6dd4>
  208c0c:	a80b883a 	mov	r5,r21
  208c10:	9009883a 	mov	r4,r18
  208c14:	020750c0 	call	20750c <memmove>
  208c18:	003f4e06 	br	208954 <_gp+0xffdf6d70>
  208c1c:	89000404 	addi	r4,r17,16
  208c20:	b93fbc16 	blt	r23,r4,208b14 <_gp+0xffdf6f30>
  208c24:	b0800317 	ldw	r2,12(r22)
  208c28:	b0c00217 	ldw	r3,8(r22)
  208c2c:	81bfff04 	addi	r6,r16,-4
  208c30:	01000904 	movi	r4,36
  208c34:	18800315 	stw	r2,12(r3)
  208c38:	10c00215 	stw	r3,8(r2)
  208c3c:	b4800204 	addi	r18,r22,8
  208c40:	21804336 	bltu	r4,r6,208d50 <_realloc_r+0x508>
  208c44:	008004c4 	movi	r2,19
  208c48:	11803f2e 	bgeu	r2,r6,208d48 <_realloc_r+0x500>
  208c4c:	a8800017 	ldw	r2,0(r21)
  208c50:	b0800215 	stw	r2,8(r22)
  208c54:	a8800117 	ldw	r2,4(r21)
  208c58:	b0800315 	stw	r2,12(r22)
  208c5c:	008006c4 	movi	r2,27
  208c60:	11803f36 	bltu	r2,r6,208d60 <_realloc_r+0x518>
  208c64:	b0800404 	addi	r2,r22,16
  208c68:	ad400204 	addi	r21,r21,8
  208c6c:	a8c00017 	ldw	r3,0(r21)
  208c70:	10c00015 	stw	r3,0(r2)
  208c74:	a8c00117 	ldw	r3,4(r21)
  208c78:	10c00115 	stw	r3,4(r2)
  208c7c:	a8c00217 	ldw	r3,8(r21)
  208c80:	10c00215 	stw	r3,8(r2)
  208c84:	b447883a 	add	r3,r22,r17
  208c88:	bc45c83a 	sub	r2,r23,r17
  208c8c:	e0c00215 	stw	r3,8(fp)
  208c90:	10800054 	ori	r2,r2,1
  208c94:	18800115 	stw	r2,4(r3)
  208c98:	b0800117 	ldw	r2,4(r22)
  208c9c:	a009883a 	mov	r4,r20
  208ca0:	1080004c 	andi	r2,r2,1
  208ca4:	1462b03a 	or	r17,r2,r17
  208ca8:	b4400115 	stw	r17,4(r22)
  208cac:	020ea900 	call	20ea90 <__malloc_unlock>
  208cb0:	9005883a 	mov	r2,r18
  208cb4:	003f4006 	br	2089b8 <_gp+0xffdf6dd4>
  208cb8:	a8c00217 	ldw	r3,8(r21)
  208cbc:	90c00215 	stw	r3,8(r18)
  208cc0:	a8c00317 	ldw	r3,12(r21)
  208cc4:	90c00315 	stw	r3,12(r18)
  208cc8:	30801126 	beq	r6,r2,208d10 <_realloc_r+0x4c8>
  208ccc:	90800404 	addi	r2,r18,16
  208cd0:	a8c00404 	addi	r3,r21,16
  208cd4:	003f1906 	br	20893c <_gp+0xffdf6d58>
  208cd8:	90ffff17 	ldw	r3,-4(r18)
  208cdc:	00bfff04 	movi	r2,-4
  208ce0:	a825883a 	mov	r18,r21
  208ce4:	1884703a 	and	r2,r3,r2
  208ce8:	80a1883a 	add	r16,r16,r2
  208cec:	003f2406 	br	208980 <_gp+0xffdf6d9c>
  208cf0:	a8800217 	ldw	r2,8(r21)
  208cf4:	b0800415 	stw	r2,16(r22)
  208cf8:	a8800317 	ldw	r2,12(r21)
  208cfc:	b0800515 	stw	r2,20(r22)
  208d00:	31000a26 	beq	r6,r4,208d2c <_realloc_r+0x4e4>
  208d04:	b0800604 	addi	r2,r22,24
  208d08:	ad400404 	addi	r21,r21,16
  208d0c:	003fa906 	br	208bb4 <_gp+0xffdf6fd0>
  208d10:	a9000417 	ldw	r4,16(r21)
  208d14:	90800604 	addi	r2,r18,24
  208d18:	a8c00604 	addi	r3,r21,24
  208d1c:	91000415 	stw	r4,16(r18)
  208d20:	a9000517 	ldw	r4,20(r21)
  208d24:	91000515 	stw	r4,20(r18)
  208d28:	003f0406 	br	20893c <_gp+0xffdf6d58>
  208d2c:	a8c00417 	ldw	r3,16(r21)
  208d30:	ad400604 	addi	r21,r21,24
  208d34:	b0800804 	addi	r2,r22,32
  208d38:	b0c00615 	stw	r3,24(r22)
  208d3c:	a8ffff17 	ldw	r3,-4(r21)
  208d40:	b0c00715 	stw	r3,28(r22)
  208d44:	003f9b06 	br	208bb4 <_gp+0xffdf6fd0>
  208d48:	9005883a 	mov	r2,r18
  208d4c:	003fc706 	br	208c6c <_gp+0xffdf7088>
  208d50:	a80b883a 	mov	r5,r21
  208d54:	9009883a 	mov	r4,r18
  208d58:	020750c0 	call	20750c <memmove>
  208d5c:	003fc906 	br	208c84 <_gp+0xffdf70a0>
  208d60:	a8800217 	ldw	r2,8(r21)
  208d64:	b0800415 	stw	r2,16(r22)
  208d68:	a8800317 	ldw	r2,12(r21)
  208d6c:	b0800515 	stw	r2,20(r22)
  208d70:	31000726 	beq	r6,r4,208d90 <_realloc_r+0x548>
  208d74:	b0800604 	addi	r2,r22,24
  208d78:	ad400404 	addi	r21,r21,16
  208d7c:	003fbb06 	br	208c6c <_gp+0xffdf7088>
  208d80:	a009883a 	mov	r4,r20
  208d84:	020ea900 	call	20ea90 <__malloc_unlock>
  208d88:	0005883a 	mov	r2,zero
  208d8c:	003f0a06 	br	2089b8 <_gp+0xffdf6dd4>
  208d90:	a8c00417 	ldw	r3,16(r21)
  208d94:	ad400604 	addi	r21,r21,24
  208d98:	b0800804 	addi	r2,r22,32
  208d9c:	b0c00615 	stw	r3,24(r22)
  208da0:	a8ffff17 	ldw	r3,-4(r21)
  208da4:	b0c00715 	stw	r3,28(r22)
  208da8:	003fb006 	br	208c6c <_gp+0xffdf7088>

00208dac <__fpclassifyd>:
  208dac:	00a00034 	movhi	r2,32768
  208db0:	10bfffc4 	addi	r2,r2,-1
  208db4:	2884703a 	and	r2,r5,r2
  208db8:	10000726 	beq	r2,zero,208dd8 <__fpclassifyd+0x2c>
  208dbc:	00fffc34 	movhi	r3,65520
  208dc0:	019ff834 	movhi	r6,32736
  208dc4:	28c7883a 	add	r3,r5,r3
  208dc8:	31bfffc4 	addi	r6,r6,-1
  208dcc:	30c00536 	bltu	r6,r3,208de4 <__fpclassifyd+0x38>
  208dd0:	00800104 	movi	r2,4
  208dd4:	f800283a 	ret
  208dd8:	2000021e 	bne	r4,zero,208de4 <__fpclassifyd+0x38>
  208ddc:	00800084 	movi	r2,2
  208de0:	f800283a 	ret
  208de4:	00dffc34 	movhi	r3,32752
  208de8:	019ff834 	movhi	r6,32736
  208dec:	28cb883a 	add	r5,r5,r3
  208df0:	31bfffc4 	addi	r6,r6,-1
  208df4:	317ff62e 	bgeu	r6,r5,208dd0 <_gp+0xffdf71ec>
  208df8:	01400434 	movhi	r5,16
  208dfc:	297fffc4 	addi	r5,r5,-1
  208e00:	28800236 	bltu	r5,r2,208e0c <__fpclassifyd+0x60>
  208e04:	008000c4 	movi	r2,3
  208e08:	f800283a 	ret
  208e0c:	10c00226 	beq	r2,r3,208e18 <__fpclassifyd+0x6c>
  208e10:	0005883a 	mov	r2,zero
  208e14:	f800283a 	ret
  208e18:	2005003a 	cmpeq	r2,r4,zero
  208e1c:	f800283a 	ret

00208e20 <_sbrk_r>:
  208e20:	defffd04 	addi	sp,sp,-12
  208e24:	dc000015 	stw	r16,0(sp)
  208e28:	04001074 	movhi	r16,65
  208e2c:	dc400115 	stw	r17,4(sp)
  208e30:	84271504 	addi	r16,r16,-25516
  208e34:	2023883a 	mov	r17,r4
  208e38:	2809883a 	mov	r4,r5
  208e3c:	dfc00215 	stw	ra,8(sp)
  208e40:	80000015 	stw	zero,0(r16)
  208e44:	020ec780 	call	20ec78 <sbrk>
  208e48:	00ffffc4 	movi	r3,-1
  208e4c:	10c00526 	beq	r2,r3,208e64 <_sbrk_r+0x44>
  208e50:	dfc00217 	ldw	ra,8(sp)
  208e54:	dc400117 	ldw	r17,4(sp)
  208e58:	dc000017 	ldw	r16,0(sp)
  208e5c:	dec00304 	addi	sp,sp,12
  208e60:	f800283a 	ret
  208e64:	80c00017 	ldw	r3,0(r16)
  208e68:	183ff926 	beq	r3,zero,208e50 <_gp+0xffdf726c>
  208e6c:	88c00015 	stw	r3,0(r17)
  208e70:	003ff706 	br	208e50 <_gp+0xffdf726c>

00208e74 <__sread>:
  208e74:	defffe04 	addi	sp,sp,-8
  208e78:	dc000015 	stw	r16,0(sp)
  208e7c:	2821883a 	mov	r16,r5
  208e80:	2940038f 	ldh	r5,14(r5)
  208e84:	dfc00115 	stw	ra,4(sp)
  208e88:	020ad300 	call	20ad30 <_read_r>
  208e8c:	10000716 	blt	r2,zero,208eac <__sread+0x38>
  208e90:	80c01417 	ldw	r3,80(r16)
  208e94:	1887883a 	add	r3,r3,r2
  208e98:	80c01415 	stw	r3,80(r16)
  208e9c:	dfc00117 	ldw	ra,4(sp)
  208ea0:	dc000017 	ldw	r16,0(sp)
  208ea4:	dec00204 	addi	sp,sp,8
  208ea8:	f800283a 	ret
  208eac:	80c0030b 	ldhu	r3,12(r16)
  208eb0:	18fbffcc 	andi	r3,r3,61439
  208eb4:	80c0030d 	sth	r3,12(r16)
  208eb8:	dfc00117 	ldw	ra,4(sp)
  208ebc:	dc000017 	ldw	r16,0(sp)
  208ec0:	dec00204 	addi	sp,sp,8
  208ec4:	f800283a 	ret

00208ec8 <__seofread>:
  208ec8:	0005883a 	mov	r2,zero
  208ecc:	f800283a 	ret

00208ed0 <__swrite>:
  208ed0:	2880030b 	ldhu	r2,12(r5)
  208ed4:	defffb04 	addi	sp,sp,-20
  208ed8:	dcc00315 	stw	r19,12(sp)
  208edc:	dc800215 	stw	r18,8(sp)
  208ee0:	dc400115 	stw	r17,4(sp)
  208ee4:	dc000015 	stw	r16,0(sp)
  208ee8:	dfc00415 	stw	ra,16(sp)
  208eec:	10c0400c 	andi	r3,r2,256
  208ef0:	2821883a 	mov	r16,r5
  208ef4:	2023883a 	mov	r17,r4
  208ef8:	3025883a 	mov	r18,r6
  208efc:	3827883a 	mov	r19,r7
  208f00:	18000526 	beq	r3,zero,208f18 <__swrite+0x48>
  208f04:	2940038f 	ldh	r5,14(r5)
  208f08:	01c00084 	movi	r7,2
  208f0c:	000d883a 	mov	r6,zero
  208f10:	020acd00 	call	20acd0 <_lseek_r>
  208f14:	8080030b 	ldhu	r2,12(r16)
  208f18:	8140038f 	ldh	r5,14(r16)
  208f1c:	10bbffcc 	andi	r2,r2,61439
  208f20:	980f883a 	mov	r7,r19
  208f24:	900d883a 	mov	r6,r18
  208f28:	8809883a 	mov	r4,r17
  208f2c:	8080030d 	sth	r2,12(r16)
  208f30:	dfc00417 	ldw	ra,16(sp)
  208f34:	dcc00317 	ldw	r19,12(sp)
  208f38:	dc800217 	ldw	r18,8(sp)
  208f3c:	dc400117 	ldw	r17,4(sp)
  208f40:	dc000017 	ldw	r16,0(sp)
  208f44:	dec00504 	addi	sp,sp,20
  208f48:	020a7841 	jmpi	20a784 <_write_r>

00208f4c <__sseek>:
  208f4c:	defffe04 	addi	sp,sp,-8
  208f50:	dc000015 	stw	r16,0(sp)
  208f54:	2821883a 	mov	r16,r5
  208f58:	2940038f 	ldh	r5,14(r5)
  208f5c:	dfc00115 	stw	ra,4(sp)
  208f60:	020acd00 	call	20acd0 <_lseek_r>
  208f64:	00ffffc4 	movi	r3,-1
  208f68:	10c00826 	beq	r2,r3,208f8c <__sseek+0x40>
  208f6c:	80c0030b 	ldhu	r3,12(r16)
  208f70:	80801415 	stw	r2,80(r16)
  208f74:	18c40014 	ori	r3,r3,4096
  208f78:	80c0030d 	sth	r3,12(r16)
  208f7c:	dfc00117 	ldw	ra,4(sp)
  208f80:	dc000017 	ldw	r16,0(sp)
  208f84:	dec00204 	addi	sp,sp,8
  208f88:	f800283a 	ret
  208f8c:	80c0030b 	ldhu	r3,12(r16)
  208f90:	18fbffcc 	andi	r3,r3,61439
  208f94:	80c0030d 	sth	r3,12(r16)
  208f98:	dfc00117 	ldw	ra,4(sp)
  208f9c:	dc000017 	ldw	r16,0(sp)
  208fa0:	dec00204 	addi	sp,sp,8
  208fa4:	f800283a 	ret

00208fa8 <__sclose>:
  208fa8:	2940038f 	ldh	r5,14(r5)
  208fac:	020a7e41 	jmpi	20a7e4 <_close_r>

00208fb0 <strcmp>:
  208fb0:	2144b03a 	or	r2,r4,r5
  208fb4:	108000cc 	andi	r2,r2,3
  208fb8:	1000171e 	bne	r2,zero,209018 <strcmp+0x68>
  208fbc:	20800017 	ldw	r2,0(r4)
  208fc0:	28c00017 	ldw	r3,0(r5)
  208fc4:	10c0141e 	bne	r2,r3,209018 <strcmp+0x68>
  208fc8:	027fbff4 	movhi	r9,65279
  208fcc:	4a7fbfc4 	addi	r9,r9,-257
  208fd0:	0086303a 	nor	r3,zero,r2
  208fd4:	02202074 	movhi	r8,32897
  208fd8:	1245883a 	add	r2,r2,r9
  208fdc:	42202004 	addi	r8,r8,-32640
  208fe0:	10c4703a 	and	r2,r2,r3
  208fe4:	1204703a 	and	r2,r2,r8
  208fe8:	10000226 	beq	r2,zero,208ff4 <strcmp+0x44>
  208fec:	00002306 	br	20907c <strcmp+0xcc>
  208ff0:	1000221e 	bne	r2,zero,20907c <strcmp+0xcc>
  208ff4:	21000104 	addi	r4,r4,4
  208ff8:	20c00017 	ldw	r3,0(r4)
  208ffc:	29400104 	addi	r5,r5,4
  209000:	29800017 	ldw	r6,0(r5)
  209004:	1a4f883a 	add	r7,r3,r9
  209008:	00c4303a 	nor	r2,zero,r3
  20900c:	3884703a 	and	r2,r7,r2
  209010:	1204703a 	and	r2,r2,r8
  209014:	19bff626 	beq	r3,r6,208ff0 <_gp+0xffdf740c>
  209018:	20800003 	ldbu	r2,0(r4)
  20901c:	10c03fcc 	andi	r3,r2,255
  209020:	18c0201c 	xori	r3,r3,128
  209024:	18ffe004 	addi	r3,r3,-128
  209028:	18000c26 	beq	r3,zero,20905c <strcmp+0xac>
  20902c:	29800007 	ldb	r6,0(r5)
  209030:	19800326 	beq	r3,r6,209040 <strcmp+0x90>
  209034:	00001306 	br	209084 <strcmp+0xd4>
  209038:	29800007 	ldb	r6,0(r5)
  20903c:	11800b1e 	bne	r2,r6,20906c <strcmp+0xbc>
  209040:	21000044 	addi	r4,r4,1
  209044:	20c00003 	ldbu	r3,0(r4)
  209048:	29400044 	addi	r5,r5,1
  20904c:	18803fcc 	andi	r2,r3,255
  209050:	1080201c 	xori	r2,r2,128
  209054:	10bfe004 	addi	r2,r2,-128
  209058:	103ff71e 	bne	r2,zero,209038 <_gp+0xffdf7454>
  20905c:	0007883a 	mov	r3,zero
  209060:	28800003 	ldbu	r2,0(r5)
  209064:	1885c83a 	sub	r2,r3,r2
  209068:	f800283a 	ret
  20906c:	28800003 	ldbu	r2,0(r5)
  209070:	18c03fcc 	andi	r3,r3,255
  209074:	1885c83a 	sub	r2,r3,r2
  209078:	f800283a 	ret
  20907c:	0005883a 	mov	r2,zero
  209080:	f800283a 	ret
  209084:	10c03fcc 	andi	r3,r2,255
  209088:	003ff506 	br	209060 <_gp+0xffdf747c>

0020908c <__sprint_r.part.0>:
  20908c:	28801917 	ldw	r2,100(r5)
  209090:	defff604 	addi	sp,sp,-40
  209094:	dd400515 	stw	r21,20(sp)
  209098:	dfc00915 	stw	ra,36(sp)
  20909c:	df000815 	stw	fp,32(sp)
  2090a0:	ddc00715 	stw	r23,28(sp)
  2090a4:	dd800615 	stw	r22,24(sp)
  2090a8:	dd000415 	stw	r20,16(sp)
  2090ac:	dcc00315 	stw	r19,12(sp)
  2090b0:	dc800215 	stw	r18,8(sp)
  2090b4:	dc400115 	stw	r17,4(sp)
  2090b8:	dc000015 	stw	r16,0(sp)
  2090bc:	1088000c 	andi	r2,r2,8192
  2090c0:	302b883a 	mov	r21,r6
  2090c4:	10002e26 	beq	r2,zero,209180 <__sprint_r.part.0+0xf4>
  2090c8:	30800217 	ldw	r2,8(r6)
  2090cc:	35800017 	ldw	r22,0(r6)
  2090d0:	10002926 	beq	r2,zero,209178 <__sprint_r.part.0+0xec>
  2090d4:	2827883a 	mov	r19,r5
  2090d8:	2029883a 	mov	r20,r4
  2090dc:	b5c00104 	addi	r23,r22,4
  2090e0:	04bfffc4 	movi	r18,-1
  2090e4:	bc400017 	ldw	r17,0(r23)
  2090e8:	b4000017 	ldw	r16,0(r22)
  2090ec:	0039883a 	mov	fp,zero
  2090f0:	8822d0ba 	srli	r17,r17,2
  2090f4:	8800031e 	bne	r17,zero,209104 <__sprint_r.part.0+0x78>
  2090f8:	00001806 	br	20915c <__sprint_r.part.0+0xd0>
  2090fc:	84000104 	addi	r16,r16,4
  209100:	8f001526 	beq	r17,fp,209158 <__sprint_r.part.0+0xcc>
  209104:	81400017 	ldw	r5,0(r16)
  209108:	980d883a 	mov	r6,r19
  20910c:	a009883a 	mov	r4,r20
  209110:	020ab7c0 	call	20ab7c <_fputwc_r>
  209114:	e7000044 	addi	fp,fp,1
  209118:	14bff81e 	bne	r2,r18,2090fc <_gp+0xffdf7518>
  20911c:	9005883a 	mov	r2,r18
  209120:	a8000215 	stw	zero,8(r21)
  209124:	a8000115 	stw	zero,4(r21)
  209128:	dfc00917 	ldw	ra,36(sp)
  20912c:	df000817 	ldw	fp,32(sp)
  209130:	ddc00717 	ldw	r23,28(sp)
  209134:	dd800617 	ldw	r22,24(sp)
  209138:	dd400517 	ldw	r21,20(sp)
  20913c:	dd000417 	ldw	r20,16(sp)
  209140:	dcc00317 	ldw	r19,12(sp)
  209144:	dc800217 	ldw	r18,8(sp)
  209148:	dc400117 	ldw	r17,4(sp)
  20914c:	dc000017 	ldw	r16,0(sp)
  209150:	dec00a04 	addi	sp,sp,40
  209154:	f800283a 	ret
  209158:	a8800217 	ldw	r2,8(r21)
  20915c:	8c63883a 	add	r17,r17,r17
  209160:	8c63883a 	add	r17,r17,r17
  209164:	1445c83a 	sub	r2,r2,r17
  209168:	a8800215 	stw	r2,8(r21)
  20916c:	b5800204 	addi	r22,r22,8
  209170:	bdc00204 	addi	r23,r23,8
  209174:	103fdb1e 	bne	r2,zero,2090e4 <_gp+0xffdf7500>
  209178:	0005883a 	mov	r2,zero
  20917c:	003fe806 	br	209120 <_gp+0xffdf753c>
  209180:	02061ec0 	call	2061ec <__sfvwrite_r>
  209184:	003fe606 	br	209120 <_gp+0xffdf753c>

00209188 <__sprint_r>:
  209188:	30c00217 	ldw	r3,8(r6)
  20918c:	18000126 	beq	r3,zero,209194 <__sprint_r+0xc>
  209190:	020908c1 	jmpi	20908c <__sprint_r.part.0>
  209194:	30000115 	stw	zero,4(r6)
  209198:	0005883a 	mov	r2,zero
  20919c:	f800283a 	ret

002091a0 <___vfiprintf_internal_r>:
  2091a0:	deffca04 	addi	sp,sp,-216
  2091a4:	dd403115 	stw	r21,196(sp)
  2091a8:	dfc03515 	stw	ra,212(sp)
  2091ac:	df003415 	stw	fp,208(sp)
  2091b0:	ddc03315 	stw	r23,204(sp)
  2091b4:	dd803215 	stw	r22,200(sp)
  2091b8:	dd003015 	stw	r20,192(sp)
  2091bc:	dcc02f15 	stw	r19,188(sp)
  2091c0:	dc802e15 	stw	r18,184(sp)
  2091c4:	dc402d15 	stw	r17,180(sp)
  2091c8:	dc002c15 	stw	r16,176(sp)
  2091cc:	d9002115 	stw	r4,132(sp)
  2091d0:	d9402015 	stw	r5,128(sp)
  2091d4:	d9c02215 	stw	r7,136(sp)
  2091d8:	302b883a 	mov	r21,r6
  2091dc:	20000226 	beq	r4,zero,2091e8 <___vfiprintf_internal_r+0x48>
  2091e0:	20800e17 	ldw	r2,56(r4)
  2091e4:	1000cf26 	beq	r2,zero,209524 <___vfiprintf_internal_r+0x384>
  2091e8:	d8c02017 	ldw	r3,128(sp)
  2091ec:	1880030b 	ldhu	r2,12(r3)
  2091f0:	10c8000c 	andi	r3,r2,8192
  2091f4:	1800071e 	bne	r3,zero,209214 <___vfiprintf_internal_r+0x74>
  2091f8:	d9402017 	ldw	r5,128(sp)
  2091fc:	00f7ffc4 	movi	r3,-8193
  209200:	10880014 	ori	r2,r2,8192
  209204:	29001917 	ldw	r4,100(r5)
  209208:	2880030d 	sth	r2,12(r5)
  20920c:	20c6703a 	and	r3,r4,r3
  209210:	28c01915 	stw	r3,100(r5)
  209214:	10c0020c 	andi	r3,r2,8
  209218:	1800a526 	beq	r3,zero,2094b0 <___vfiprintf_internal_r+0x310>
  20921c:	d9002017 	ldw	r4,128(sp)
  209220:	20c00417 	ldw	r3,16(r4)
  209224:	1800a226 	beq	r3,zero,2094b0 <___vfiprintf_internal_r+0x310>
  209228:	1080068c 	andi	r2,r2,26
  20922c:	00c00284 	movi	r3,10
  209230:	10c0a826 	beq	r2,r3,2094d4 <___vfiprintf_internal_r+0x334>
  209234:	d9001a04 	addi	r4,sp,104
  209238:	d94019c4 	addi	r5,sp,103
  20923c:	04800874 	movhi	r18,33
  209240:	2145c83a 	sub	r2,r4,r5
  209244:	9490ad04 	addi	r18,r18,17076
  209248:	d9001e15 	stw	r4,120(sp)
  20924c:	d9401f15 	stw	r5,124(sp)
  209250:	dec01a15 	stw	sp,104(sp)
  209254:	d8001c15 	stw	zero,112(sp)
  209258:	d8001b15 	stw	zero,108(sp)
  20925c:	d811883a 	mov	r8,sp
  209260:	d8002615 	stw	zero,152(sp)
  209264:	d8002415 	stw	zero,144(sp)
  209268:	d8802815 	stw	r2,160(sp)
  20926c:	a82d883a 	mov	r22,r21
  209270:	b0800007 	ldb	r2,0(r22)
  209274:	10040d26 	beq	r2,zero,20a2ac <___vfiprintf_internal_r+0x110c>
  209278:	00c00944 	movi	r3,37
  20927c:	b029883a 	mov	r20,r22
  209280:	10c0021e 	bne	r2,r3,20928c <___vfiprintf_internal_r+0xec>
  209284:	00001606 	br	2092e0 <___vfiprintf_internal_r+0x140>
  209288:	10c00326 	beq	r2,r3,209298 <___vfiprintf_internal_r+0xf8>
  20928c:	a5000044 	addi	r20,r20,1
  209290:	a0800007 	ldb	r2,0(r20)
  209294:	103ffc1e 	bne	r2,zero,209288 <_gp+0xffdf76a4>
  209298:	a5a1c83a 	sub	r16,r20,r22
  20929c:	80001026 	beq	r16,zero,2092e0 <___vfiprintf_internal_r+0x140>
  2092a0:	d8c01c17 	ldw	r3,112(sp)
  2092a4:	d8801b17 	ldw	r2,108(sp)
  2092a8:	45800015 	stw	r22,0(r8)
  2092ac:	80c7883a 	add	r3,r16,r3
  2092b0:	10800044 	addi	r2,r2,1
  2092b4:	44000115 	stw	r16,4(r8)
  2092b8:	d8c01c15 	stw	r3,112(sp)
  2092bc:	d8801b15 	stw	r2,108(sp)
  2092c0:	010001c4 	movi	r4,7
  2092c4:	2080750e 	bge	r4,r2,20949c <___vfiprintf_internal_r+0x2fc>
  2092c8:	1803951e 	bne	r3,zero,20a120 <___vfiprintf_internal_r+0xf80>
  2092cc:	d8c02417 	ldw	r3,144(sp)
  2092d0:	d8001b15 	stw	zero,108(sp)
  2092d4:	d811883a 	mov	r8,sp
  2092d8:	1c07883a 	add	r3,r3,r16
  2092dc:	d8c02415 	stw	r3,144(sp)
  2092e0:	a0800007 	ldb	r2,0(r20)
  2092e4:	1002e026 	beq	r2,zero,209e68 <___vfiprintf_internal_r+0xcc8>
  2092e8:	a5800044 	addi	r22,r20,1
  2092ec:	a0c00047 	ldb	r3,1(r20)
  2092f0:	d8001d85 	stb	zero,118(sp)
  2092f4:	0027883a 	mov	r19,zero
  2092f8:	d8002305 	stb	zero,140(sp)
  2092fc:	043fffc4 	movi	r16,-1
  209300:	d8002515 	stw	zero,148(sp)
  209304:	0023883a 	mov	r17,zero
  209308:	05001604 	movi	r20,88
  20930c:	05400244 	movi	r21,9
  209310:	402f883a 	mov	r23,r8
  209314:	b5800044 	addi	r22,r22,1
  209318:	18bff804 	addi	r2,r3,-32
  20931c:	a0827736 	bltu	r20,r2,209cfc <___vfiprintf_internal_r+0xb5c>
  209320:	100490ba 	slli	r2,r2,2
  209324:	01000874 	movhi	r4,33
  209328:	2124ce04 	addi	r4,r4,-27848
  20932c:	1105883a 	add	r2,r2,r4
  209330:	10800017 	ldw	r2,0(r2)
  209334:	1000683a 	jmp	r2
  209338:	002099fc 	xorhi	zero,zero,33383
  20933c:	00209cfc 	xorhi	zero,zero,33395
  209340:	00209cfc 	xorhi	zero,zero,33395
  209344:	00209a18 	cmpnei	zero,zero,-32152
  209348:	00209cfc 	xorhi	zero,zero,33395
  20934c:	00209cfc 	xorhi	zero,zero,33395
  209350:	00209cfc 	xorhi	zero,zero,33395
  209354:	00209cfc 	xorhi	zero,zero,33395
  209358:	00209cfc 	xorhi	zero,zero,33395
  20935c:	00209cfc 	xorhi	zero,zero,33395
  209360:	00209c20 	cmpeqi	zero,zero,-32144
  209364:	00209c44 	movi	zero,-32143
  209368:	00209cfc 	xorhi	zero,zero,33395
  20936c:	0020953c 	xorhi	zero,zero,33364
  209370:	00209c58 	cmpnei	zero,zero,-32143
  209374:	00209cfc 	xorhi	zero,zero,33395
  209378:	00209a24 	muli	zero,zero,-32152
  20937c:	00209a30 	cmpltui	zero,zero,33384
  209380:	00209a30 	cmpltui	zero,zero,33384
  209384:	00209a30 	cmpltui	zero,zero,33384
  209388:	00209a30 	cmpltui	zero,zero,33384
  20938c:	00209a30 	cmpltui	zero,zero,33384
  209390:	00209a30 	cmpltui	zero,zero,33384
  209394:	00209a30 	cmpltui	zero,zero,33384
  209398:	00209a30 	cmpltui	zero,zero,33384
  20939c:	00209a30 	cmpltui	zero,zero,33384
  2093a0:	00209cfc 	xorhi	zero,zero,33395
  2093a4:	00209cfc 	xorhi	zero,zero,33395
  2093a8:	00209cfc 	xorhi	zero,zero,33395
  2093ac:	00209cfc 	xorhi	zero,zero,33395
  2093b0:	00209cfc 	xorhi	zero,zero,33395
  2093b4:	00209cfc 	xorhi	zero,zero,33395
  2093b8:	00209cfc 	xorhi	zero,zero,33395
  2093bc:	00209cfc 	xorhi	zero,zero,33395
  2093c0:	00209cfc 	xorhi	zero,zero,33395
  2093c4:	00209cfc 	xorhi	zero,zero,33395
  2093c8:	00209a70 	cmpltui	zero,zero,33385
  2093cc:	00209cfc 	xorhi	zero,zero,33395
  2093d0:	00209cfc 	xorhi	zero,zero,33395
  2093d4:	00209cfc 	xorhi	zero,zero,33395
  2093d8:	00209cfc 	xorhi	zero,zero,33395
  2093dc:	00209cfc 	xorhi	zero,zero,33395
  2093e0:	00209cfc 	xorhi	zero,zero,33395
  2093e4:	00209cfc 	xorhi	zero,zero,33395
  2093e8:	00209cfc 	xorhi	zero,zero,33395
  2093ec:	00209cfc 	xorhi	zero,zero,33395
  2093f0:	00209cfc 	xorhi	zero,zero,33395
  2093f4:	00209aac 	andhi	zero,zero,33386
  2093f8:	00209cfc 	xorhi	zero,zero,33395
  2093fc:	00209cfc 	xorhi	zero,zero,33395
  209400:	00209cfc 	xorhi	zero,zero,33395
  209404:	00209cfc 	xorhi	zero,zero,33395
  209408:	00209cfc 	xorhi	zero,zero,33395
  20940c:	00209b08 	cmpgei	zero,zero,-32148
  209410:	00209cfc 	xorhi	zero,zero,33395
  209414:	00209cfc 	xorhi	zero,zero,33395
  209418:	00209b7c 	xorhi	zero,zero,33389
  20941c:	00209cfc 	xorhi	zero,zero,33395
  209420:	00209cfc 	xorhi	zero,zero,33395
  209424:	00209cfc 	xorhi	zero,zero,33395
  209428:	00209cfc 	xorhi	zero,zero,33395
  20942c:	00209cfc 	xorhi	zero,zero,33395
  209430:	00209cfc 	xorhi	zero,zero,33395
  209434:	00209cfc 	xorhi	zero,zero,33395
  209438:	00209cfc 	xorhi	zero,zero,33395
  20943c:	00209cfc 	xorhi	zero,zero,33395
  209440:	00209cfc 	xorhi	zero,zero,33395
  209444:	00209924 	muli	zero,zero,-32156
  209448:	00209954 	movui	zero,33381
  20944c:	00209cfc 	xorhi	zero,zero,33395
  209450:	00209cfc 	xorhi	zero,zero,33395
  209454:	00209cfc 	xorhi	zero,zero,33395
  209458:	00209ca4 	muli	zero,zero,-32142
  20945c:	00209954 	movui	zero,33381
  209460:	00209cfc 	xorhi	zero,zero,33395
  209464:	00209cfc 	xorhi	zero,zero,33395
  209468:	002097fc 	xorhi	zero,zero,33375
  20946c:	00209cfc 	xorhi	zero,zero,33395
  209470:	00209810 	cmplti	zero,zero,-32160
  209474:	00209848 	cmpgei	zero,zero,-32159
  209478:	00209548 	cmpgei	zero,zero,-32171
  20947c:	002097f0 	cmpltui	zero,zero,33375
  209480:	00209cfc 	xorhi	zero,zero,33395
  209484:	00209bbc 	xorhi	zero,zero,33390
  209488:	00209cfc 	xorhi	zero,zero,33395
  20948c:	00209c08 	cmpgei	zero,zero,-32144
  209490:	00209cfc 	xorhi	zero,zero,33395
  209494:	00209cfc 	xorhi	zero,zero,33395
  209498:	002098cc 	andi	zero,zero,33379
  20949c:	42000204 	addi	r8,r8,8
  2094a0:	d8c02417 	ldw	r3,144(sp)
  2094a4:	1c07883a 	add	r3,r3,r16
  2094a8:	d8c02415 	stw	r3,144(sp)
  2094ac:	003f8c06 	br	2092e0 <_gp+0xffdf76fc>
  2094b0:	d9402017 	ldw	r5,128(sp)
  2094b4:	d9002117 	ldw	r4,132(sp)
  2094b8:	0203d5c0 	call	203d5c <__swsetup_r>
  2094bc:	1003c11e 	bne	r2,zero,20a3c4 <___vfiprintf_internal_r+0x1224>
  2094c0:	d9402017 	ldw	r5,128(sp)
  2094c4:	00c00284 	movi	r3,10
  2094c8:	2880030b 	ldhu	r2,12(r5)
  2094cc:	1080068c 	andi	r2,r2,26
  2094d0:	10ff581e 	bne	r2,r3,209234 <_gp+0xffdf7650>
  2094d4:	d8c02017 	ldw	r3,128(sp)
  2094d8:	1880038f 	ldh	r2,14(r3)
  2094dc:	103f5516 	blt	r2,zero,209234 <_gp+0xffdf7650>
  2094e0:	d9c02217 	ldw	r7,136(sp)
  2094e4:	d9002117 	ldw	r4,132(sp)
  2094e8:	a80d883a 	mov	r6,r21
  2094ec:	180b883a 	mov	r5,r3
  2094f0:	020a6c80 	call	20a6c8 <__sbprintf>
  2094f4:	dfc03517 	ldw	ra,212(sp)
  2094f8:	df003417 	ldw	fp,208(sp)
  2094fc:	ddc03317 	ldw	r23,204(sp)
  209500:	dd803217 	ldw	r22,200(sp)
  209504:	dd403117 	ldw	r21,196(sp)
  209508:	dd003017 	ldw	r20,192(sp)
  20950c:	dcc02f17 	ldw	r19,188(sp)
  209510:	dc802e17 	ldw	r18,184(sp)
  209514:	dc402d17 	ldw	r17,180(sp)
  209518:	dc002c17 	ldw	r16,176(sp)
  20951c:	dec03604 	addi	sp,sp,216
  209520:	f800283a 	ret
  209524:	0205d680 	call	205d68 <__sinit>
  209528:	003f2f06 	br	2091e8 <_gp+0xffdf7604>
  20952c:	d8c02517 	ldw	r3,148(sp)
  209530:	d8802215 	stw	r2,136(sp)
  209534:	00c7c83a 	sub	r3,zero,r3
  209538:	d8c02515 	stw	r3,148(sp)
  20953c:	8c400114 	ori	r17,r17,4
  209540:	b0c00007 	ldb	r3,0(r22)
  209544:	003f7306 	br	209314 <_gp+0xffdf7730>
  209548:	00800c04 	movi	r2,48
  20954c:	d9402217 	ldw	r5,136(sp)
  209550:	d8801d05 	stb	r2,116(sp)
  209554:	00801e04 	movi	r2,120
  209558:	d8801d45 	stb	r2,117(sp)
  20955c:	d8001d85 	stb	zero,118(sp)
  209560:	b811883a 	mov	r8,r23
  209564:	28c00104 	addi	r3,r5,4
  209568:	2cc00017 	ldw	r19,0(r5)
  20956c:	0029883a 	mov	r20,zero
  209570:	88800094 	ori	r2,r17,2
  209574:	80032516 	blt	r16,zero,20a20c <___vfiprintf_internal_r+0x106c>
  209578:	00bfdfc4 	movi	r2,-129
  20957c:	88a2703a 	and	r17,r17,r2
  209580:	d8c02215 	stw	r3,136(sp)
  209584:	8c400094 	ori	r17,r17,2
  209588:	98032a1e 	bne	r19,zero,20a234 <___vfiprintf_internal_r+0x1094>
  20958c:	00800874 	movhi	r2,33
  209590:	10904c04 	addi	r2,r2,16688
  209594:	d8802615 	stw	r2,152(sp)
  209598:	002b883a 	mov	r21,zero
  20959c:	8001741e 	bne	r16,zero,209b70 <___vfiprintf_internal_r+0x9d0>
  2095a0:	0021883a 	mov	r16,zero
  2095a4:	0029883a 	mov	r20,zero
  2095a8:	ddc01a04 	addi	r23,sp,104
  2095ac:	8027883a 	mov	r19,r16
  2095b0:	8500010e 	bge	r16,r20,2095b8 <___vfiprintf_internal_r+0x418>
  2095b4:	a027883a 	mov	r19,r20
  2095b8:	ad403fcc 	andi	r21,r21,255
  2095bc:	ad40201c 	xori	r21,r21,128
  2095c0:	ad7fe004 	addi	r21,r21,-128
  2095c4:	a8000126 	beq	r21,zero,2095cc <___vfiprintf_internal_r+0x42c>
  2095c8:	9cc00044 	addi	r19,r19,1
  2095cc:	89c0008c 	andi	r7,r17,2
  2095d0:	38000126 	beq	r7,zero,2095d8 <___vfiprintf_internal_r+0x438>
  2095d4:	9cc00084 	addi	r19,r19,2
  2095d8:	88c0210c 	andi	r3,r17,132
  2095dc:	1801dd1e 	bne	r3,zero,209d54 <___vfiprintf_internal_r+0xbb4>
  2095e0:	d9402517 	ldw	r5,148(sp)
  2095e4:	2cebc83a 	sub	r21,r5,r19
  2095e8:	0541da0e 	bge	zero,r21,209d54 <___vfiprintf_internal_r+0xbb4>
  2095ec:	07000404 	movi	fp,16
  2095f0:	d8801c17 	ldw	r2,112(sp)
  2095f4:	e543be0e 	bge	fp,r21,20a4f0 <___vfiprintf_internal_r+0x1350>
  2095f8:	01400874 	movhi	r5,33
  2095fc:	2950b104 	addi	r5,r5,17092
  209600:	dc002715 	stw	r16,156(sp)
  209604:	d9801b17 	ldw	r6,108(sp)
  209608:	a821883a 	mov	r16,r21
  20960c:	d9402315 	stw	r5,140(sp)
  209610:	028001c4 	movi	r10,7
  209614:	d9c02915 	stw	r7,164(sp)
  209618:	182b883a 	mov	r21,r3
  20961c:	00000506 	br	209634 <___vfiprintf_internal_r+0x494>
  209620:	31000084 	addi	r4,r6,2
  209624:	42000204 	addi	r8,r8,8
  209628:	180d883a 	mov	r6,r3
  20962c:	843ffc04 	addi	r16,r16,-16
  209630:	e4000f0e 	bge	fp,r16,209670 <___vfiprintf_internal_r+0x4d0>
  209634:	01000874 	movhi	r4,33
  209638:	10800404 	addi	r2,r2,16
  20963c:	30c00044 	addi	r3,r6,1
  209640:	2110b104 	addi	r4,r4,17092
  209644:	41000015 	stw	r4,0(r8)
  209648:	47000115 	stw	fp,4(r8)
  20964c:	d8801c15 	stw	r2,112(sp)
  209650:	d8c01b15 	stw	r3,108(sp)
  209654:	50fff20e 	bge	r10,r3,209620 <_gp+0xffdf7a3c>
  209658:	1001b21e 	bne	r2,zero,209d24 <___vfiprintf_internal_r+0xb84>
  20965c:	843ffc04 	addi	r16,r16,-16
  209660:	000d883a 	mov	r6,zero
  209664:	01000044 	movi	r4,1
  209668:	d811883a 	mov	r8,sp
  20966c:	e43ff116 	blt	fp,r16,209634 <_gp+0xffdf7a50>
  209670:	a807883a 	mov	r3,r21
  209674:	d9c02917 	ldw	r7,164(sp)
  209678:	802b883a 	mov	r21,r16
  20967c:	dc002717 	ldw	r16,156(sp)
  209680:	d9402317 	ldw	r5,140(sp)
  209684:	a885883a 	add	r2,r21,r2
  209688:	45400115 	stw	r21,4(r8)
  20968c:	41400015 	stw	r5,0(r8)
  209690:	d8801c15 	stw	r2,112(sp)
  209694:	d9001b15 	stw	r4,108(sp)
  209698:	014001c4 	movi	r5,7
  20969c:	29026216 	blt	r5,r4,20a028 <___vfiprintf_internal_r+0xe88>
  2096a0:	d9801d87 	ldb	r6,118(sp)
  2096a4:	42000204 	addi	r8,r8,8
  2096a8:	21400044 	addi	r5,r4,1
  2096ac:	3001ae1e 	bne	r6,zero,209d68 <___vfiprintf_internal_r+0xbc8>
  2096b0:	3801bb26 	beq	r7,zero,209da0 <___vfiprintf_internal_r+0xc00>
  2096b4:	d9001d04 	addi	r4,sp,116
  2096b8:	10800084 	addi	r2,r2,2
  2096bc:	41000015 	stw	r4,0(r8)
  2096c0:	01000084 	movi	r4,2
  2096c4:	41000115 	stw	r4,4(r8)
  2096c8:	d8801c15 	stw	r2,112(sp)
  2096cc:	d9401b15 	stw	r5,108(sp)
  2096d0:	010001c4 	movi	r4,7
  2096d4:	2142680e 	bge	r4,r5,20a078 <___vfiprintf_internal_r+0xed8>
  2096d8:	1002b11e 	bne	r2,zero,20a1a0 <___vfiprintf_internal_r+0x1000>
  2096dc:	01802004 	movi	r6,128
  2096e0:	01400044 	movi	r5,1
  2096e4:	0009883a 	mov	r4,zero
  2096e8:	d811883a 	mov	r8,sp
  2096ec:	1981ae1e 	bne	r3,r6,209da8 <___vfiprintf_internal_r+0xc08>
  2096f0:	d8c02517 	ldw	r3,148(sp)
  2096f4:	1cf9c83a 	sub	fp,r3,r19
  2096f8:	0701ab0e 	bge	zero,fp,209da8 <___vfiprintf_internal_r+0xc08>
  2096fc:	05400404 	movi	r21,16
  209700:	af03a90e 	bge	r21,fp,20a5a8 <___vfiprintf_internal_r+0x1408>
  209704:	01400874 	movhi	r5,33
  209708:	2950ad04 	addi	r5,r5,17076
  20970c:	d9402315 	stw	r5,140(sp)
  209710:	01c001c4 	movi	r7,7
  209714:	00000506 	br	20972c <___vfiprintf_internal_r+0x58c>
  209718:	21800084 	addi	r6,r4,2
  20971c:	42000204 	addi	r8,r8,8
  209720:	1809883a 	mov	r4,r3
  209724:	e73ffc04 	addi	fp,fp,-16
  209728:	af000d0e 	bge	r21,fp,209760 <___vfiprintf_internal_r+0x5c0>
  20972c:	10800404 	addi	r2,r2,16
  209730:	20c00044 	addi	r3,r4,1
  209734:	44800015 	stw	r18,0(r8)
  209738:	45400115 	stw	r21,4(r8)
  20973c:	d8801c15 	stw	r2,112(sp)
  209740:	d8c01b15 	stw	r3,108(sp)
  209744:	38fff40e 	bge	r7,r3,209718 <_gp+0xffdf7b34>
  209748:	10022b1e 	bne	r2,zero,209ff8 <___vfiprintf_internal_r+0xe58>
  20974c:	e73ffc04 	addi	fp,fp,-16
  209750:	01800044 	movi	r6,1
  209754:	0009883a 	mov	r4,zero
  209758:	d811883a 	mov	r8,sp
  20975c:	af3ff316 	blt	r21,fp,20972c <_gp+0xffdf7b48>
  209760:	d8c02317 	ldw	r3,140(sp)
  209764:	1705883a 	add	r2,r2,fp
  209768:	47000115 	stw	fp,4(r8)
  20976c:	40c00015 	stw	r3,0(r8)
  209770:	d8801c15 	stw	r2,112(sp)
  209774:	d9801b15 	stw	r6,108(sp)
  209778:	00c001c4 	movi	r3,7
  20977c:	19829416 	blt	r3,r6,20a1d0 <___vfiprintf_internal_r+0x1030>
  209780:	8521c83a 	sub	r16,r16,r20
  209784:	42000204 	addi	r8,r8,8
  209788:	31400044 	addi	r5,r6,1
  20978c:	3009883a 	mov	r4,r6
  209790:	04018716 	blt	zero,r16,209db0 <___vfiprintf_internal_r+0xc10>
  209794:	a085883a 	add	r2,r20,r2
  209798:	45c00015 	stw	r23,0(r8)
  20979c:	45000115 	stw	r20,4(r8)
  2097a0:	d8801c15 	stw	r2,112(sp)
  2097a4:	d9401b15 	stw	r5,108(sp)
  2097a8:	00c001c4 	movi	r3,7
  2097ac:	1941c20e 	bge	r3,r5,209eb8 <___vfiprintf_internal_r+0xd18>
  2097b0:	1002531e 	bne	r2,zero,20a100 <___vfiprintf_internal_r+0xf60>
  2097b4:	d8001b15 	stw	zero,108(sp)
  2097b8:	8c40010c 	andi	r17,r17,4
  2097bc:	88023226 	beq	r17,zero,20a088 <___vfiprintf_internal_r+0xee8>
  2097c0:	d9002517 	ldw	r4,148(sp)
  2097c4:	24e3c83a 	sub	r17,r4,r19
  2097c8:	04432916 	blt	zero,r17,20a470 <___vfiprintf_internal_r+0x12d0>
  2097cc:	d8802517 	ldw	r2,148(sp)
  2097d0:	14c0010e 	bge	r2,r19,2097d8 <___vfiprintf_internal_r+0x638>
  2097d4:	9805883a 	mov	r2,r19
  2097d8:	d8c02417 	ldw	r3,144(sp)
  2097dc:	1887883a 	add	r3,r3,r2
  2097e0:	d8c02415 	stw	r3,144(sp)
  2097e4:	d8001b15 	stw	zero,108(sp)
  2097e8:	d811883a 	mov	r8,sp
  2097ec:	003ea006 	br	209270 <_gp+0xffdf768c>
  2097f0:	8c400814 	ori	r17,r17,32
  2097f4:	b0c00007 	ldb	r3,0(r22)
  2097f8:	003ec606 	br	209314 <_gp+0xffdf7730>
  2097fc:	b0c00007 	ldb	r3,0(r22)
  209800:	00801b04 	movi	r2,108
  209804:	18832026 	beq	r3,r2,20a488 <___vfiprintf_internal_r+0x12e8>
  209808:	8c400414 	ori	r17,r17,16
  20980c:	003ec106 	br	209314 <_gp+0xffdf7730>
  209810:	9cc03fcc 	andi	r19,r19,255
  209814:	b811883a 	mov	r8,r23
  209818:	9803981e 	bne	r19,zero,20a67c <___vfiprintf_internal_r+0x14dc>
  20981c:	8880080c 	andi	r2,r17,32
  209820:	1002be26 	beq	r2,zero,20a31c <___vfiprintf_internal_r+0x117c>
  209824:	d9002217 	ldw	r4,136(sp)
  209828:	d9402417 	ldw	r5,144(sp)
  20982c:	20800017 	ldw	r2,0(r4)
  209830:	2807d7fa 	srai	r3,r5,31
  209834:	21000104 	addi	r4,r4,4
  209838:	d9002215 	stw	r4,136(sp)
  20983c:	11400015 	stw	r5,0(r2)
  209840:	10c00115 	stw	r3,4(r2)
  209844:	003e8a06 	br	209270 <_gp+0xffdf768c>
  209848:	9cc03fcc 	andi	r19,r19,255
  20984c:	b811883a 	mov	r8,r23
  209850:	9803871e 	bne	r19,zero,20a670 <___vfiprintf_internal_r+0x14d0>
  209854:	8880080c 	andi	r2,r17,32
  209858:	10009a26 	beq	r2,zero,209ac4 <___vfiprintf_internal_r+0x924>
  20985c:	d9002217 	ldw	r4,136(sp)
  209860:	d8001d85 	stb	zero,118(sp)
  209864:	20800204 	addi	r2,r4,8
  209868:	24c00017 	ldw	r19,0(r4)
  20986c:	25000117 	ldw	r20,4(r4)
  209870:	8002a416 	blt	r16,zero,20a304 <___vfiprintf_internal_r+0x1164>
  209874:	013fdfc4 	movi	r4,-129
  209878:	9d06b03a 	or	r3,r19,r20
  20987c:	d8802215 	stw	r2,136(sp)
  209880:	8922703a 	and	r17,r17,r4
  209884:	18009b26 	beq	r3,zero,209af4 <___vfiprintf_internal_r+0x954>
  209888:	002b883a 	mov	r21,zero
  20988c:	ddc01a04 	addi	r23,sp,104
  209890:	9806d0fa 	srli	r3,r19,3
  209894:	a008977a 	slli	r4,r20,29
  209898:	a028d0fa 	srli	r20,r20,3
  20989c:	9cc001cc 	andi	r19,r19,7
  2098a0:	98800c04 	addi	r2,r19,48
  2098a4:	bdffffc4 	addi	r23,r23,-1
  2098a8:	20e6b03a 	or	r19,r4,r3
  2098ac:	b8800005 	stb	r2,0(r23)
  2098b0:	9d06b03a 	or	r3,r19,r20
  2098b4:	183ff61e 	bne	r3,zero,209890 <_gp+0xffdf7cac>
  2098b8:	88c0004c 	andi	r3,r17,1
  2098bc:	18021f1e 	bne	r3,zero,20a13c <___vfiprintf_internal_r+0xf9c>
  2098c0:	d9401e17 	ldw	r5,120(sp)
  2098c4:	2de9c83a 	sub	r20,r5,r23
  2098c8:	003f3806 	br	2095ac <_gp+0xffdf79c8>
  2098cc:	9cc03fcc 	andi	r19,r19,255
  2098d0:	b811883a 	mov	r8,r23
  2098d4:	98034f1e 	bne	r19,zero,20a614 <___vfiprintf_internal_r+0x1474>
  2098d8:	00800874 	movhi	r2,33
  2098dc:	10904c04 	addi	r2,r2,16688
  2098e0:	d8802615 	stw	r2,152(sp)
  2098e4:	8880080c 	andi	r2,r17,32
  2098e8:	1000ac26 	beq	r2,zero,209b9c <___vfiprintf_internal_r+0x9fc>
  2098ec:	d9002217 	ldw	r4,136(sp)
  2098f0:	24c00017 	ldw	r19,0(r4)
  2098f4:	25000117 	ldw	r20,4(r4)
  2098f8:	21000204 	addi	r4,r4,8
  2098fc:	d9002215 	stw	r4,136(sp)
  209900:	8880004c 	andi	r2,r17,1
  209904:	1001e726 	beq	r2,zero,20a0a4 <___vfiprintf_internal_r+0xf04>
  209908:	9d04b03a 	or	r2,r19,r20
  20990c:	10025c1e 	bne	r2,zero,20a280 <___vfiprintf_internal_r+0x10e0>
  209910:	d8001d85 	stb	zero,118(sp)
  209914:	80024416 	blt	r16,zero,20a228 <___vfiprintf_internal_r+0x1088>
  209918:	00bfdfc4 	movi	r2,-129
  20991c:	88a2703a 	and	r17,r17,r2
  209920:	003f1d06 	br	209598 <_gp+0xffdf79b4>
  209924:	d8c02217 	ldw	r3,136(sp)
  209928:	04c00044 	movi	r19,1
  20992c:	b811883a 	mov	r8,r23
  209930:	18800017 	ldw	r2,0(r3)
  209934:	18c00104 	addi	r3,r3,4
  209938:	d8001d85 	stb	zero,118(sp)
  20993c:	d8801005 	stb	r2,64(sp)
  209940:	d8c02215 	stw	r3,136(sp)
  209944:	9829883a 	mov	r20,r19
  209948:	ddc01004 	addi	r23,sp,64
  20994c:	0021883a 	mov	r16,zero
  209950:	003f1e06 	br	2095cc <_gp+0xffdf79e8>
  209954:	9cc03fcc 	andi	r19,r19,255
  209958:	b811883a 	mov	r8,r23
  20995c:	9803331e 	bne	r19,zero,20a62c <___vfiprintf_internal_r+0x148c>
  209960:	8880080c 	andi	r2,r17,32
  209964:	10004826 	beq	r2,zero,209a88 <___vfiprintf_internal_r+0x8e8>
  209968:	d9002217 	ldw	r4,136(sp)
  20996c:	20800117 	ldw	r2,4(r4)
  209970:	24c00017 	ldw	r19,0(r4)
  209974:	21000204 	addi	r4,r4,8
  209978:	d9002215 	stw	r4,136(sp)
  20997c:	1029883a 	mov	r20,r2
  209980:	10024c16 	blt	r2,zero,20a2b4 <___vfiprintf_internal_r+0x1114>
  209984:	dd401d83 	ldbu	r21,118(sp)
  209988:	80007116 	blt	r16,zero,209b50 <___vfiprintf_internal_r+0x9b0>
  20998c:	00ffdfc4 	movi	r3,-129
  209990:	9d04b03a 	or	r2,r19,r20
  209994:	88e2703a 	and	r17,r17,r3
  209998:	1000d126 	beq	r2,zero,209ce0 <___vfiprintf_internal_r+0xb40>
  20999c:	a0023526 	beq	r20,zero,20a274 <___vfiprintf_internal_r+0x10d4>
  2099a0:	ddc01a04 	addi	r23,sp,104
  2099a4:	4039883a 	mov	fp,r8
  2099a8:	9809883a 	mov	r4,r19
  2099ac:	a00b883a 	mov	r5,r20
  2099b0:	01800284 	movi	r6,10
  2099b4:	000f883a 	mov	r7,zero
  2099b8:	020b6cc0 	call	20b6cc <__umoddi3>
  2099bc:	10800c04 	addi	r2,r2,48
  2099c0:	bdffffc4 	addi	r23,r23,-1
  2099c4:	9809883a 	mov	r4,r19
  2099c8:	a00b883a 	mov	r5,r20
  2099cc:	b8800005 	stb	r2,0(r23)
  2099d0:	01800284 	movi	r6,10
  2099d4:	000f883a 	mov	r7,zero
  2099d8:	020b0d00 	call	20b0d0 <__udivdi3>
  2099dc:	1027883a 	mov	r19,r2
  2099e0:	10c4b03a 	or	r2,r2,r3
  2099e4:	1829883a 	mov	r20,r3
  2099e8:	103fef1e 	bne	r2,zero,2099a8 <_gp+0xffdf7dc4>
  2099ec:	d9001e17 	ldw	r4,120(sp)
  2099f0:	e011883a 	mov	r8,fp
  2099f4:	25e9c83a 	sub	r20,r4,r23
  2099f8:	003eec06 	br	2095ac <_gp+0xffdf79c8>
  2099fc:	d8802307 	ldb	r2,140(sp)
  209a00:	1002361e 	bne	r2,zero,20a2dc <___vfiprintf_internal_r+0x113c>
  209a04:	00c00804 	movi	r3,32
  209a08:	d8c02305 	stb	r3,140(sp)
  209a0c:	04c00044 	movi	r19,1
  209a10:	b0c00007 	ldb	r3,0(r22)
  209a14:	003e3f06 	br	209314 <_gp+0xffdf7730>
  209a18:	8c400054 	ori	r17,r17,1
  209a1c:	b0c00007 	ldb	r3,0(r22)
  209a20:	003e3c06 	br	209314 <_gp+0xffdf7730>
  209a24:	8c402014 	ori	r17,r17,128
  209a28:	b0c00007 	ldb	r3,0(r22)
  209a2c:	003e3906 	br	209314 <_gp+0xffdf7730>
  209a30:	dc002715 	stw	r16,156(sp)
  209a34:	d8002515 	stw	zero,148(sp)
  209a38:	1f3ff404 	addi	fp,r3,-48
  209a3c:	0009883a 	mov	r4,zero
  209a40:	b021883a 	mov	r16,r22
  209a44:	01400284 	movi	r5,10
  209a48:	02017a80 	call	2017a8 <__mulsi3>
  209a4c:	80c00007 	ldb	r3,0(r16)
  209a50:	e089883a 	add	r4,fp,r2
  209a54:	b5800044 	addi	r22,r22,1
  209a58:	1f3ff404 	addi	fp,r3,-48
  209a5c:	b021883a 	mov	r16,r22
  209a60:	af3ff82e 	bgeu	r21,fp,209a44 <_gp+0xffdf7e60>
  209a64:	d9002515 	stw	r4,148(sp)
  209a68:	dc002717 	ldw	r16,156(sp)
  209a6c:	003e2a06 	br	209318 <_gp+0xffdf7734>
  209a70:	9cc03fcc 	andi	r19,r19,255
  209a74:	b811883a 	mov	r8,r23
  209a78:	9802e91e 	bne	r19,zero,20a620 <___vfiprintf_internal_r+0x1480>
  209a7c:	8c400414 	ori	r17,r17,16
  209a80:	8880080c 	andi	r2,r17,32
  209a84:	103fb81e 	bne	r2,zero,209968 <_gp+0xffdf7d84>
  209a88:	8880040c 	andi	r2,r17,16
  209a8c:	10022e26 	beq	r2,zero,20a348 <___vfiprintf_internal_r+0x11a8>
  209a90:	d9402217 	ldw	r5,136(sp)
  209a94:	2cc00017 	ldw	r19,0(r5)
  209a98:	29400104 	addi	r5,r5,4
  209a9c:	d9402215 	stw	r5,136(sp)
  209aa0:	9829d7fa 	srai	r20,r19,31
  209aa4:	a005883a 	mov	r2,r20
  209aa8:	003fb506 	br	209980 <_gp+0xffdf7d9c>
  209aac:	9cc03fcc 	andi	r19,r19,255
  209ab0:	b811883a 	mov	r8,r23
  209ab4:	9802fa1e 	bne	r19,zero,20a6a0 <___vfiprintf_internal_r+0x1500>
  209ab8:	8c400414 	ori	r17,r17,16
  209abc:	8880080c 	andi	r2,r17,32
  209ac0:	103f661e 	bne	r2,zero,20985c <_gp+0xffdf7c78>
  209ac4:	8880040c 	andi	r2,r17,16
  209ac8:	10020626 	beq	r2,zero,20a2e4 <___vfiprintf_internal_r+0x1144>
  209acc:	d9402217 	ldw	r5,136(sp)
  209ad0:	d8001d85 	stb	zero,118(sp)
  209ad4:	0029883a 	mov	r20,zero
  209ad8:	28800104 	addi	r2,r5,4
  209adc:	2cc00017 	ldw	r19,0(r5)
  209ae0:	80020816 	blt	r16,zero,20a304 <___vfiprintf_internal_r+0x1164>
  209ae4:	00ffdfc4 	movi	r3,-129
  209ae8:	d8802215 	stw	r2,136(sp)
  209aec:	88e2703a 	and	r17,r17,r3
  209af0:	983f651e 	bne	r19,zero,209888 <_gp+0xffdf7ca4>
  209af4:	002b883a 	mov	r21,zero
  209af8:	8002cf26 	beq	r16,zero,20a638 <___vfiprintf_internal_r+0x1498>
  209afc:	0027883a 	mov	r19,zero
  209b00:	0029883a 	mov	r20,zero
  209b04:	003f6106 	br	20988c <_gp+0xffdf7ca8>
  209b08:	9cc03fcc 	andi	r19,r19,255
  209b0c:	b811883a 	mov	r8,r23
  209b10:	9802e01e 	bne	r19,zero,20a694 <___vfiprintf_internal_r+0x14f4>
  209b14:	8c400414 	ori	r17,r17,16
  209b18:	8880080c 	andi	r2,r17,32
  209b1c:	1000641e 	bne	r2,zero,209cb0 <___vfiprintf_internal_r+0xb10>
  209b20:	8880040c 	andi	r2,r17,16
  209b24:	1001c81e 	bne	r2,zero,20a248 <___vfiprintf_internal_r+0x10a8>
  209b28:	8880100c 	andi	r2,r17,64
  209b2c:	d8001d85 	stb	zero,118(sp)
  209b30:	1002281e 	bne	r2,zero,20a3d4 <___vfiprintf_internal_r+0x1234>
  209b34:	d9002217 	ldw	r4,136(sp)
  209b38:	0029883a 	mov	r20,zero
  209b3c:	20800104 	addi	r2,r4,4
  209b40:	24c00017 	ldw	r19,0(r4)
  209b44:	8001c60e 	bge	r16,zero,20a260 <___vfiprintf_internal_r+0x10c0>
  209b48:	d8802215 	stw	r2,136(sp)
  209b4c:	002b883a 	mov	r21,zero
  209b50:	9d04b03a 	or	r2,r19,r20
  209b54:	103f911e 	bne	r2,zero,20999c <_gp+0xffdf7db8>
  209b58:	00800044 	movi	r2,1
  209b5c:	10803fcc 	andi	r2,r2,255
  209b60:	00c00044 	movi	r3,1
  209b64:	10c05f26 	beq	r2,r3,209ce4 <___vfiprintf_internal_r+0xb44>
  209b68:	00c00084 	movi	r3,2
  209b6c:	10ffe31e 	bne	r2,r3,209afc <_gp+0xffdf7f18>
  209b70:	0027883a 	mov	r19,zero
  209b74:	0029883a 	mov	r20,zero
  209b78:	00015106 	br	20a0c0 <___vfiprintf_internal_r+0xf20>
  209b7c:	9cc03fcc 	andi	r19,r19,255
  209b80:	b811883a 	mov	r8,r23
  209b84:	9802c01e 	bne	r19,zero,20a688 <___vfiprintf_internal_r+0x14e8>
  209b88:	01400874 	movhi	r5,33
  209b8c:	29504704 	addi	r5,r5,16668
  209b90:	d9402615 	stw	r5,152(sp)
  209b94:	8880080c 	andi	r2,r17,32
  209b98:	103f541e 	bne	r2,zero,2098ec <_gp+0xffdf7d08>
  209b9c:	8880040c 	andi	r2,r17,16
  209ba0:	1001f226 	beq	r2,zero,20a36c <___vfiprintf_internal_r+0x11cc>
  209ba4:	d9402217 	ldw	r5,136(sp)
  209ba8:	0029883a 	mov	r20,zero
  209bac:	2cc00017 	ldw	r19,0(r5)
  209bb0:	29400104 	addi	r5,r5,4
  209bb4:	d9402215 	stw	r5,136(sp)
  209bb8:	003f5106 	br	209900 <_gp+0xffdf7d1c>
  209bbc:	d8c02217 	ldw	r3,136(sp)
  209bc0:	b811883a 	mov	r8,r23
  209bc4:	d8001d85 	stb	zero,118(sp)
  209bc8:	1dc00017 	ldw	r23,0(r3)
  209bcc:	1f000104 	addi	fp,r3,4
  209bd0:	b8025926 	beq	r23,zero,20a538 <___vfiprintf_internal_r+0x1398>
  209bd4:	80023316 	blt	r16,zero,20a4a4 <___vfiprintf_internal_r+0x1304>
  209bd8:	800d883a 	mov	r6,r16
  209bdc:	000b883a 	mov	r5,zero
  209be0:	b809883a 	mov	r4,r23
  209be4:	da002a15 	stw	r8,168(sp)
  209be8:	02072e00 	call	2072e0 <memchr>
  209bec:	da002a17 	ldw	r8,168(sp)
  209bf0:	10026826 	beq	r2,zero,20a594 <___vfiprintf_internal_r+0x13f4>
  209bf4:	15e9c83a 	sub	r20,r2,r23
  209bf8:	dd401d83 	ldbu	r21,118(sp)
  209bfc:	df002215 	stw	fp,136(sp)
  209c00:	0021883a 	mov	r16,zero
  209c04:	003e6906 	br	2095ac <_gp+0xffdf79c8>
  209c08:	9cc03fcc 	andi	r19,r19,255
  209c0c:	b811883a 	mov	r8,r23
  209c10:	983fc126 	beq	r19,zero,209b18 <_gp+0xffdf7f34>
  209c14:	d8c02303 	ldbu	r3,140(sp)
  209c18:	d8c01d85 	stb	r3,118(sp)
  209c1c:	003fbe06 	br	209b18 <_gp+0xffdf7f34>
  209c20:	d9002217 	ldw	r4,136(sp)
  209c24:	d9402217 	ldw	r5,136(sp)
  209c28:	21000017 	ldw	r4,0(r4)
  209c2c:	28800104 	addi	r2,r5,4
  209c30:	d9002515 	stw	r4,148(sp)
  209c34:	203e3d16 	blt	r4,zero,20952c <_gp+0xffdf7948>
  209c38:	d8802215 	stw	r2,136(sp)
  209c3c:	b0c00007 	ldb	r3,0(r22)
  209c40:	003db406 	br	209314 <_gp+0xffdf7730>
  209c44:	00c00ac4 	movi	r3,43
  209c48:	d8c02305 	stb	r3,140(sp)
  209c4c:	04c00044 	movi	r19,1
  209c50:	b0c00007 	ldb	r3,0(r22)
  209c54:	003daf06 	br	209314 <_gp+0xffdf7730>
  209c58:	b0c00007 	ldb	r3,0(r22)
  209c5c:	01000a84 	movi	r4,42
  209c60:	b4000044 	addi	r16,r22,1
  209c64:	19025e26 	beq	r3,r4,20a5e0 <___vfiprintf_internal_r+0x1440>
  209c68:	1f3ff404 	addi	fp,r3,-48
  209c6c:	0009883a 	mov	r4,zero
  209c70:	af025236 	bltu	r21,fp,20a5bc <___vfiprintf_internal_r+0x141c>
  209c74:	01400284 	movi	r5,10
  209c78:	02017a80 	call	2017a8 <__mulsi3>
  209c7c:	80c00007 	ldb	r3,0(r16)
  209c80:	1709883a 	add	r4,r2,fp
  209c84:	85800044 	addi	r22,r16,1
  209c88:	1f3ff404 	addi	fp,r3,-48
  209c8c:	b021883a 	mov	r16,r22
  209c90:	af3ff82e 	bgeu	r21,fp,209c74 <_gp+0xffdf8090>
  209c94:	2021883a 	mov	r16,r4
  209c98:	203d9f0e 	bge	r4,zero,209318 <_gp+0xffdf7734>
  209c9c:	043fffc4 	movi	r16,-1
  209ca0:	003d9d06 	br	209318 <_gp+0xffdf7734>
  209ca4:	8c401014 	ori	r17,r17,64
  209ca8:	b0c00007 	ldb	r3,0(r22)
  209cac:	003d9906 	br	209314 <_gp+0xffdf7730>
  209cb0:	d9002217 	ldw	r4,136(sp)
  209cb4:	d8001d85 	stb	zero,118(sp)
  209cb8:	20c00204 	addi	r3,r4,8
  209cbc:	24c00017 	ldw	r19,0(r4)
  209cc0:	25000117 	ldw	r20,4(r4)
  209cc4:	8001e716 	blt	r16,zero,20a464 <___vfiprintf_internal_r+0x12c4>
  209cc8:	013fdfc4 	movi	r4,-129
  209ccc:	9d04b03a 	or	r2,r19,r20
  209cd0:	d8c02215 	stw	r3,136(sp)
  209cd4:	8922703a 	and	r17,r17,r4
  209cd8:	002b883a 	mov	r21,zero
  209cdc:	103f2f1e 	bne	r2,zero,20999c <_gp+0xffdf7db8>
  209ce0:	803e2f26 	beq	r16,zero,2095a0 <_gp+0xffdf79bc>
  209ce4:	0027883a 	mov	r19,zero
  209ce8:	9cc00c04 	addi	r19,r19,48
  209cec:	dcc019c5 	stb	r19,103(sp)
  209cf0:	dd002817 	ldw	r20,160(sp)
  209cf4:	ddc019c4 	addi	r23,sp,103
  209cf8:	003e2c06 	br	2095ac <_gp+0xffdf79c8>
  209cfc:	9cc03fcc 	andi	r19,r19,255
  209d00:	b811883a 	mov	r8,r23
  209d04:	9802571e 	bne	r19,zero,20a664 <___vfiprintf_internal_r+0x14c4>
  209d08:	18005726 	beq	r3,zero,209e68 <___vfiprintf_internal_r+0xcc8>
  209d0c:	04c00044 	movi	r19,1
  209d10:	d8c01005 	stb	r3,64(sp)
  209d14:	d8001d85 	stb	zero,118(sp)
  209d18:	9829883a 	mov	r20,r19
  209d1c:	ddc01004 	addi	r23,sp,64
  209d20:	003f0a06 	br	20994c <_gp+0xffdf7d68>
  209d24:	d9402017 	ldw	r5,128(sp)
  209d28:	d9002117 	ldw	r4,132(sp)
  209d2c:	d9801a04 	addi	r6,sp,104
  209d30:	da802a15 	stw	r10,168(sp)
  209d34:	020908c0 	call	20908c <__sprint_r.part.0>
  209d38:	da802a17 	ldw	r10,168(sp)
  209d3c:	1000501e 	bne	r2,zero,209e80 <___vfiprintf_internal_r+0xce0>
  209d40:	d9801b17 	ldw	r6,108(sp)
  209d44:	d8801c17 	ldw	r2,112(sp)
  209d48:	d811883a 	mov	r8,sp
  209d4c:	31000044 	addi	r4,r6,1
  209d50:	003e3606 	br	20962c <_gp+0xffdf7a48>
  209d54:	d9001b17 	ldw	r4,108(sp)
  209d58:	d8801c17 	ldw	r2,112(sp)
  209d5c:	21400044 	addi	r5,r4,1
  209d60:	d9801d87 	ldb	r6,118(sp)
  209d64:	303e5226 	beq	r6,zero,2096b0 <_gp+0xffdf7acc>
  209d68:	01800044 	movi	r6,1
  209d6c:	d9001d84 	addi	r4,sp,118
  209d70:	1185883a 	add	r2,r2,r6
  209d74:	41000015 	stw	r4,0(r8)
  209d78:	41800115 	stw	r6,4(r8)
  209d7c:	d8801c15 	stw	r2,112(sp)
  209d80:	d9401b15 	stw	r5,108(sp)
  209d84:	010001c4 	movi	r4,7
  209d88:	2140b00e 	bge	r4,r5,20a04c <___vfiprintf_internal_r+0xeac>
  209d8c:	1000f61e 	bne	r2,zero,20a168 <___vfiprintf_internal_r+0xfc8>
  209d90:	3800b31e 	bne	r7,zero,20a060 <___vfiprintf_internal_r+0xec0>
  209d94:	0009883a 	mov	r4,zero
  209d98:	300b883a 	mov	r5,r6
  209d9c:	d811883a 	mov	r8,sp
  209da0:	01802004 	movi	r6,128
  209da4:	19be5226 	beq	r3,r6,2096f0 <_gp+0xffdf7b0c>
  209da8:	8521c83a 	sub	r16,r16,r20
  209dac:	043e790e 	bge	zero,r16,209794 <_gp+0xffdf7bb0>
  209db0:	05400404 	movi	r21,16
  209db4:	ac01b00e 	bge	r21,r16,20a478 <___vfiprintf_internal_r+0x12d8>
  209db8:	01400874 	movhi	r5,33
  209dbc:	2950ad04 	addi	r5,r5,17076
  209dc0:	d9402315 	stw	r5,140(sp)
  209dc4:	070001c4 	movi	fp,7
  209dc8:	00000506 	br	209de0 <___vfiprintf_internal_r+0xc40>
  209dcc:	21400084 	addi	r5,r4,2
  209dd0:	42000204 	addi	r8,r8,8
  209dd4:	1809883a 	mov	r4,r3
  209dd8:	843ffc04 	addi	r16,r16,-16
  209ddc:	ac000d0e 	bge	r21,r16,209e14 <___vfiprintf_internal_r+0xc74>
  209de0:	10800404 	addi	r2,r2,16
  209de4:	20c00044 	addi	r3,r4,1
  209de8:	44800015 	stw	r18,0(r8)
  209dec:	45400115 	stw	r21,4(r8)
  209df0:	d8801c15 	stw	r2,112(sp)
  209df4:	d8c01b15 	stw	r3,108(sp)
  209df8:	e0fff40e 	bge	fp,r3,209dcc <_gp+0xffdf81e8>
  209dfc:	1000101e 	bne	r2,zero,209e40 <___vfiprintf_internal_r+0xca0>
  209e00:	843ffc04 	addi	r16,r16,-16
  209e04:	01400044 	movi	r5,1
  209e08:	0009883a 	mov	r4,zero
  209e0c:	d811883a 	mov	r8,sp
  209e10:	ac3ff316 	blt	r21,r16,209de0 <_gp+0xffdf81fc>
  209e14:	d8c02317 	ldw	r3,140(sp)
  209e18:	1405883a 	add	r2,r2,r16
  209e1c:	44000115 	stw	r16,4(r8)
  209e20:	40c00015 	stw	r3,0(r8)
  209e24:	d8801c15 	stw	r2,112(sp)
  209e28:	d9401b15 	stw	r5,108(sp)
  209e2c:	00c001c4 	movi	r3,7
  209e30:	19401916 	blt	r3,r5,209e98 <___vfiprintf_internal_r+0xcf8>
  209e34:	42000204 	addi	r8,r8,8
  209e38:	29400044 	addi	r5,r5,1
  209e3c:	003e5506 	br	209794 <_gp+0xffdf7bb0>
  209e40:	d9402017 	ldw	r5,128(sp)
  209e44:	d9002117 	ldw	r4,132(sp)
  209e48:	d9801a04 	addi	r6,sp,104
  209e4c:	020908c0 	call	20908c <__sprint_r.part.0>
  209e50:	10000b1e 	bne	r2,zero,209e80 <___vfiprintf_internal_r+0xce0>
  209e54:	d9001b17 	ldw	r4,108(sp)
  209e58:	d8801c17 	ldw	r2,112(sp)
  209e5c:	d811883a 	mov	r8,sp
  209e60:	21400044 	addi	r5,r4,1
  209e64:	003fdc06 	br	209dd8 <_gp+0xffdf81f4>
  209e68:	d8801c17 	ldw	r2,112(sp)
  209e6c:	10000426 	beq	r2,zero,209e80 <___vfiprintf_internal_r+0xce0>
  209e70:	d9402017 	ldw	r5,128(sp)
  209e74:	d9002117 	ldw	r4,132(sp)
  209e78:	d9801a04 	addi	r6,sp,104
  209e7c:	020908c0 	call	20908c <__sprint_r.part.0>
  209e80:	d9402017 	ldw	r5,128(sp)
  209e84:	2880030b 	ldhu	r2,12(r5)
  209e88:	1080100c 	andi	r2,r2,64
  209e8c:	10014d1e 	bne	r2,zero,20a3c4 <___vfiprintf_internal_r+0x1224>
  209e90:	d8802417 	ldw	r2,144(sp)
  209e94:	003d9706 	br	2094f4 <_gp+0xffdf7910>
  209e98:	1000d21e 	bne	r2,zero,20a1e4 <___vfiprintf_internal_r+0x1044>
  209e9c:	00c00044 	movi	r3,1
  209ea0:	a005883a 	mov	r2,r20
  209ea4:	ddc00015 	stw	r23,0(sp)
  209ea8:	dd000115 	stw	r20,4(sp)
  209eac:	dd001c15 	stw	r20,112(sp)
  209eb0:	d8c01b15 	stw	r3,108(sp)
  209eb4:	d811883a 	mov	r8,sp
  209eb8:	42000204 	addi	r8,r8,8
  209ebc:	8c40010c 	andi	r17,r17,4
  209ec0:	88004026 	beq	r17,zero,209fc4 <___vfiprintf_internal_r+0xe24>
  209ec4:	d9002517 	ldw	r4,148(sp)
  209ec8:	24e3c83a 	sub	r17,r4,r19
  209ecc:	04403d0e 	bge	zero,r17,209fc4 <___vfiprintf_internal_r+0xe24>
  209ed0:	04000404 	movi	r16,16
  209ed4:	8441a90e 	bge	r16,r17,20a57c <___vfiprintf_internal_r+0x13dc>
  209ed8:	00c00874 	movhi	r3,33
  209edc:	18d0b104 	addi	r3,r3,17092
  209ee0:	d9001b17 	ldw	r4,108(sp)
  209ee4:	d8c02315 	stw	r3,140(sp)
  209ee8:	050001c4 	movi	r20,7
  209eec:	dd402117 	ldw	r21,132(sp)
  209ef0:	ddc02017 	ldw	r23,128(sp)
  209ef4:	00000506 	br	209f0c <___vfiprintf_internal_r+0xd6c>
  209ef8:	21400084 	addi	r5,r4,2
  209efc:	42000204 	addi	r8,r8,8
  209f00:	1809883a 	mov	r4,r3
  209f04:	8c7ffc04 	addi	r17,r17,-16
  209f08:	84400f0e 	bge	r16,r17,209f48 <___vfiprintf_internal_r+0xda8>
  209f0c:	01400874 	movhi	r5,33
  209f10:	10800404 	addi	r2,r2,16
  209f14:	20c00044 	addi	r3,r4,1
  209f18:	2950b104 	addi	r5,r5,17092
  209f1c:	41400015 	stw	r5,0(r8)
  209f20:	44000115 	stw	r16,4(r8)
  209f24:	d8801c15 	stw	r2,112(sp)
  209f28:	d8c01b15 	stw	r3,108(sp)
  209f2c:	a0fff20e 	bge	r20,r3,209ef8 <_gp+0xffdf8314>
  209f30:	1000141e 	bne	r2,zero,209f84 <___vfiprintf_internal_r+0xde4>
  209f34:	8c7ffc04 	addi	r17,r17,-16
  209f38:	01400044 	movi	r5,1
  209f3c:	0009883a 	mov	r4,zero
  209f40:	d811883a 	mov	r8,sp
  209f44:	847ff116 	blt	r16,r17,209f0c <_gp+0xffdf8328>
  209f48:	d8c02317 	ldw	r3,140(sp)
  209f4c:	1445883a 	add	r2,r2,r17
  209f50:	44400115 	stw	r17,4(r8)
  209f54:	40c00015 	stw	r3,0(r8)
  209f58:	d8801c15 	stw	r2,112(sp)
  209f5c:	d9401b15 	stw	r5,108(sp)
  209f60:	00c001c4 	movi	r3,7
  209f64:	1940170e 	bge	r3,r5,209fc4 <___vfiprintf_internal_r+0xe24>
  209f68:	1000101e 	bne	r2,zero,209fac <___vfiprintf_internal_r+0xe0c>
  209f6c:	d8802517 	ldw	r2,148(sp)
  209f70:	14c11616 	blt	r2,r19,20a3cc <___vfiprintf_internal_r+0x122c>
  209f74:	d9002417 	ldw	r4,144(sp)
  209f78:	2089883a 	add	r4,r4,r2
  209f7c:	d9002415 	stw	r4,144(sp)
  209f80:	003e1806 	br	2097e4 <_gp+0xffdf7c00>
  209f84:	d9801a04 	addi	r6,sp,104
  209f88:	b80b883a 	mov	r5,r23
  209f8c:	a809883a 	mov	r4,r21
  209f90:	020908c0 	call	20908c <__sprint_r.part.0>
  209f94:	103fba1e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  209f98:	d9001b17 	ldw	r4,108(sp)
  209f9c:	d8801c17 	ldw	r2,112(sp)
  209fa0:	d811883a 	mov	r8,sp
  209fa4:	21400044 	addi	r5,r4,1
  209fa8:	003fd606 	br	209f04 <_gp+0xffdf8320>
  209fac:	d9402017 	ldw	r5,128(sp)
  209fb0:	d9002117 	ldw	r4,132(sp)
  209fb4:	d9801a04 	addi	r6,sp,104
  209fb8:	020908c0 	call	20908c <__sprint_r.part.0>
  209fbc:	103fb01e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  209fc0:	d8801c17 	ldw	r2,112(sp)
  209fc4:	d8c02517 	ldw	r3,148(sp)
  209fc8:	1cc0010e 	bge	r3,r19,209fd0 <___vfiprintf_internal_r+0xe30>
  209fcc:	9807883a 	mov	r3,r19
  209fd0:	d9002417 	ldw	r4,144(sp)
  209fd4:	20c9883a 	add	r4,r4,r3
  209fd8:	d9002415 	stw	r4,144(sp)
  209fdc:	103e0126 	beq	r2,zero,2097e4 <_gp+0xffdf7c00>
  209fe0:	d9402017 	ldw	r5,128(sp)
  209fe4:	d9002117 	ldw	r4,132(sp)
  209fe8:	d9801a04 	addi	r6,sp,104
  209fec:	020908c0 	call	20908c <__sprint_r.part.0>
  209ff0:	103dfc26 	beq	r2,zero,2097e4 <_gp+0xffdf7c00>
  209ff4:	003fa206 	br	209e80 <_gp+0xffdf829c>
  209ff8:	d9402017 	ldw	r5,128(sp)
  209ffc:	d9002117 	ldw	r4,132(sp)
  20a000:	d9801a04 	addi	r6,sp,104
  20a004:	d9c02b15 	stw	r7,172(sp)
  20a008:	020908c0 	call	20908c <__sprint_r.part.0>
  20a00c:	d9c02b17 	ldw	r7,172(sp)
  20a010:	103f9b1e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a014:	d9001b17 	ldw	r4,108(sp)
  20a018:	d8801c17 	ldw	r2,112(sp)
  20a01c:	d811883a 	mov	r8,sp
  20a020:	21800044 	addi	r6,r4,1
  20a024:	003dbf06 	br	209724 <_gp+0xffdf7b40>
  20a028:	1000d81e 	bne	r2,zero,20a38c <___vfiprintf_internal_r+0x11ec>
  20a02c:	d9001d87 	ldb	r4,118(sp)
  20a030:	20000a26 	beq	r4,zero,20a05c <___vfiprintf_internal_r+0xebc>
  20a034:	00800044 	movi	r2,1
  20a038:	d9001d84 	addi	r4,sp,118
  20a03c:	100b883a 	mov	r5,r2
  20a040:	d9000015 	stw	r4,0(sp)
  20a044:	d8800115 	stw	r2,4(sp)
  20a048:	d811883a 	mov	r8,sp
  20a04c:	2809883a 	mov	r4,r5
  20a050:	42000204 	addi	r8,r8,8
  20a054:	29400044 	addi	r5,r5,1
  20a058:	003d9506 	br	2096b0 <_gp+0xffdf7acc>
  20a05c:	3800fd26 	beq	r7,zero,20a454 <___vfiprintf_internal_r+0x12b4>
  20a060:	00800084 	movi	r2,2
  20a064:	d9001d04 	addi	r4,sp,116
  20a068:	d9000015 	stw	r4,0(sp)
  20a06c:	d8800115 	stw	r2,4(sp)
  20a070:	01400044 	movi	r5,1
  20a074:	d811883a 	mov	r8,sp
  20a078:	2809883a 	mov	r4,r5
  20a07c:	42000204 	addi	r8,r8,8
  20a080:	29400044 	addi	r5,r5,1
  20a084:	003f4606 	br	209da0 <_gp+0xffdf81bc>
  20a088:	d8802517 	ldw	r2,148(sp)
  20a08c:	14c0010e 	bge	r2,r19,20a094 <___vfiprintf_internal_r+0xef4>
  20a090:	9805883a 	mov	r2,r19
  20a094:	d9402417 	ldw	r5,144(sp)
  20a098:	288b883a 	add	r5,r5,r2
  20a09c:	d9402415 	stw	r5,144(sp)
  20a0a0:	003dd006 	br	2097e4 <_gp+0xffdf7c00>
  20a0a4:	d8001d85 	stb	zero,118(sp)
  20a0a8:	80005d16 	blt	r16,zero,20a220 <___vfiprintf_internal_r+0x1080>
  20a0ac:	00ffdfc4 	movi	r3,-129
  20a0b0:	9d04b03a 	or	r2,r19,r20
  20a0b4:	88e2703a 	and	r17,r17,r3
  20a0b8:	103d3726 	beq	r2,zero,209598 <_gp+0xffdf79b4>
  20a0bc:	002b883a 	mov	r21,zero
  20a0c0:	d9002617 	ldw	r4,152(sp)
  20a0c4:	ddc01a04 	addi	r23,sp,104
  20a0c8:	988003cc 	andi	r2,r19,15
  20a0cc:	a006973a 	slli	r3,r20,28
  20a0d0:	2085883a 	add	r2,r4,r2
  20a0d4:	9826d13a 	srli	r19,r19,4
  20a0d8:	10800003 	ldbu	r2,0(r2)
  20a0dc:	a028d13a 	srli	r20,r20,4
  20a0e0:	bdffffc4 	addi	r23,r23,-1
  20a0e4:	1ce6b03a 	or	r19,r3,r19
  20a0e8:	b8800005 	stb	r2,0(r23)
  20a0ec:	9d04b03a 	or	r2,r19,r20
  20a0f0:	103ff51e 	bne	r2,zero,20a0c8 <_gp+0xffdf84e4>
  20a0f4:	d8801e17 	ldw	r2,120(sp)
  20a0f8:	15e9c83a 	sub	r20,r2,r23
  20a0fc:	003d2b06 	br	2095ac <_gp+0xffdf79c8>
  20a100:	d9402017 	ldw	r5,128(sp)
  20a104:	d9002117 	ldw	r4,132(sp)
  20a108:	d9801a04 	addi	r6,sp,104
  20a10c:	020908c0 	call	20908c <__sprint_r.part.0>
  20a110:	103f5b1e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a114:	d8801c17 	ldw	r2,112(sp)
  20a118:	d811883a 	mov	r8,sp
  20a11c:	003f6706 	br	209ebc <_gp+0xffdf82d8>
  20a120:	d9402017 	ldw	r5,128(sp)
  20a124:	d9002117 	ldw	r4,132(sp)
  20a128:	d9801a04 	addi	r6,sp,104
  20a12c:	020908c0 	call	20908c <__sprint_r.part.0>
  20a130:	103f531e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a134:	d811883a 	mov	r8,sp
  20a138:	003cd906 	br	2094a0 <_gp+0xffdf78bc>
  20a13c:	10803fcc 	andi	r2,r2,255
  20a140:	1080201c 	xori	r2,r2,128
  20a144:	10bfe004 	addi	r2,r2,-128
  20a148:	00c00c04 	movi	r3,48
  20a14c:	10ffe926 	beq	r2,r3,20a0f4 <_gp+0xffdf8510>
  20a150:	b8ffffc5 	stb	r3,-1(r23)
  20a154:	d8c01e17 	ldw	r3,120(sp)
  20a158:	b8bfffc4 	addi	r2,r23,-1
  20a15c:	102f883a 	mov	r23,r2
  20a160:	18a9c83a 	sub	r20,r3,r2
  20a164:	003d1106 	br	2095ac <_gp+0xffdf79c8>
  20a168:	d9402017 	ldw	r5,128(sp)
  20a16c:	d9002117 	ldw	r4,132(sp)
  20a170:	d9801a04 	addi	r6,sp,104
  20a174:	d8c02a15 	stw	r3,168(sp)
  20a178:	d9c02b15 	stw	r7,172(sp)
  20a17c:	020908c0 	call	20908c <__sprint_r.part.0>
  20a180:	d8c02a17 	ldw	r3,168(sp)
  20a184:	d9c02b17 	ldw	r7,172(sp)
  20a188:	103f3d1e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a18c:	d9001b17 	ldw	r4,108(sp)
  20a190:	d8801c17 	ldw	r2,112(sp)
  20a194:	d811883a 	mov	r8,sp
  20a198:	21400044 	addi	r5,r4,1
  20a19c:	003d4406 	br	2096b0 <_gp+0xffdf7acc>
  20a1a0:	d9402017 	ldw	r5,128(sp)
  20a1a4:	d9002117 	ldw	r4,132(sp)
  20a1a8:	d9801a04 	addi	r6,sp,104
  20a1ac:	d8c02a15 	stw	r3,168(sp)
  20a1b0:	020908c0 	call	20908c <__sprint_r.part.0>
  20a1b4:	d8c02a17 	ldw	r3,168(sp)
  20a1b8:	103f311e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a1bc:	d9001b17 	ldw	r4,108(sp)
  20a1c0:	d8801c17 	ldw	r2,112(sp)
  20a1c4:	d811883a 	mov	r8,sp
  20a1c8:	21400044 	addi	r5,r4,1
  20a1cc:	003ef406 	br	209da0 <_gp+0xffdf81bc>
  20a1d0:	1000bd1e 	bne	r2,zero,20a4c8 <___vfiprintf_internal_r+0x1328>
  20a1d4:	01400044 	movi	r5,1
  20a1d8:	0009883a 	mov	r4,zero
  20a1dc:	d811883a 	mov	r8,sp
  20a1e0:	003ef106 	br	209da8 <_gp+0xffdf81c4>
  20a1e4:	d9402017 	ldw	r5,128(sp)
  20a1e8:	d9002117 	ldw	r4,132(sp)
  20a1ec:	d9801a04 	addi	r6,sp,104
  20a1f0:	020908c0 	call	20908c <__sprint_r.part.0>
  20a1f4:	103f221e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a1f8:	d9401b17 	ldw	r5,108(sp)
  20a1fc:	d8801c17 	ldw	r2,112(sp)
  20a200:	d811883a 	mov	r8,sp
  20a204:	29400044 	addi	r5,r5,1
  20a208:	003d6206 	br	209794 <_gp+0xffdf7bb0>
  20a20c:	01400874 	movhi	r5,33
  20a210:	29504c04 	addi	r5,r5,16688
  20a214:	d9402615 	stw	r5,152(sp)
  20a218:	d8c02215 	stw	r3,136(sp)
  20a21c:	1023883a 	mov	r17,r2
  20a220:	9d04b03a 	or	r2,r19,r20
  20a224:	103fa51e 	bne	r2,zero,20a0bc <_gp+0xffdf84d8>
  20a228:	002b883a 	mov	r21,zero
  20a22c:	00800084 	movi	r2,2
  20a230:	003e4a06 	br	209b5c <_gp+0xffdf7f78>
  20a234:	01400874 	movhi	r5,33
  20a238:	29504c04 	addi	r5,r5,16688
  20a23c:	002b883a 	mov	r21,zero
  20a240:	d9402615 	stw	r5,152(sp)
  20a244:	003f9e06 	br	20a0c0 <_gp+0xffdf84dc>
  20a248:	d9402217 	ldw	r5,136(sp)
  20a24c:	d8001d85 	stb	zero,118(sp)
  20a250:	0029883a 	mov	r20,zero
  20a254:	28800104 	addi	r2,r5,4
  20a258:	2cc00017 	ldw	r19,0(r5)
  20a25c:	803e3a16 	blt	r16,zero,209b48 <_gp+0xffdf7f64>
  20a260:	00ffdfc4 	movi	r3,-129
  20a264:	d8802215 	stw	r2,136(sp)
  20a268:	88e2703a 	and	r17,r17,r3
  20a26c:	002b883a 	mov	r21,zero
  20a270:	983e9b26 	beq	r19,zero,209ce0 <_gp+0xffdf80fc>
  20a274:	00800244 	movi	r2,9
  20a278:	14fdc936 	bltu	r2,r19,2099a0 <_gp+0xffdf7dbc>
  20a27c:	003e9a06 	br	209ce8 <_gp+0xffdf8104>
  20a280:	00800c04 	movi	r2,48
  20a284:	d8c01d45 	stb	r3,117(sp)
  20a288:	d8801d05 	stb	r2,116(sp)
  20a28c:	d8001d85 	stb	zero,118(sp)
  20a290:	88c00094 	ori	r3,r17,2
  20a294:	80009c16 	blt	r16,zero,20a508 <___vfiprintf_internal_r+0x1368>
  20a298:	00bfdfc4 	movi	r2,-129
  20a29c:	88a2703a 	and	r17,r17,r2
  20a2a0:	8c400094 	ori	r17,r17,2
  20a2a4:	002b883a 	mov	r21,zero
  20a2a8:	003f8506 	br	20a0c0 <_gp+0xffdf84dc>
  20a2ac:	b029883a 	mov	r20,r22
  20a2b0:	003c0b06 	br	2092e0 <_gp+0xffdf76fc>
  20a2b4:	04e7c83a 	sub	r19,zero,r19
  20a2b8:	05400b44 	movi	r21,45
  20a2bc:	9804c03a 	cmpne	r2,r19,zero
  20a2c0:	0529c83a 	sub	r20,zero,r20
  20a2c4:	dd401d85 	stb	r21,118(sp)
  20a2c8:	a0a9c83a 	sub	r20,r20,r2
  20a2cc:	80009716 	blt	r16,zero,20a52c <___vfiprintf_internal_r+0x138c>
  20a2d0:	00bfdfc4 	movi	r2,-129
  20a2d4:	88a2703a 	and	r17,r17,r2
  20a2d8:	003db006 	br	20999c <_gp+0xffdf7db8>
  20a2dc:	b0c00007 	ldb	r3,0(r22)
  20a2e0:	003c0c06 	br	209314 <_gp+0xffdf7730>
  20a2e4:	8880100c 	andi	r2,r17,64
  20a2e8:	d8001d85 	stb	zero,118(sp)
  20a2ec:	1000461e 	bne	r2,zero,20a408 <___vfiprintf_internal_r+0x1268>
  20a2f0:	d9002217 	ldw	r4,136(sp)
  20a2f4:	0029883a 	mov	r20,zero
  20a2f8:	20800104 	addi	r2,r4,4
  20a2fc:	24c00017 	ldw	r19,0(r4)
  20a300:	803df80e 	bge	r16,zero,209ae4 <_gp+0xffdf7f00>
  20a304:	9d06b03a 	or	r3,r19,r20
  20a308:	d8802215 	stw	r2,136(sp)
  20a30c:	183d5e1e 	bne	r3,zero,209888 <_gp+0xffdf7ca4>
  20a310:	002b883a 	mov	r21,zero
  20a314:	0005883a 	mov	r2,zero
  20a318:	003e1006 	br	209b5c <_gp+0xffdf7f78>
  20a31c:	8880040c 	andi	r2,r17,16
  20a320:	1000321e 	bne	r2,zero,20a3ec <___vfiprintf_internal_r+0x124c>
  20a324:	8c40100c 	andi	r17,r17,64
  20a328:	88008d26 	beq	r17,zero,20a560 <___vfiprintf_internal_r+0x13c0>
  20a32c:	d9402217 	ldw	r5,136(sp)
  20a330:	d8c02417 	ldw	r3,144(sp)
  20a334:	28800017 	ldw	r2,0(r5)
  20a338:	29400104 	addi	r5,r5,4
  20a33c:	d9402215 	stw	r5,136(sp)
  20a340:	10c0000d 	sth	r3,0(r2)
  20a344:	003bca06 	br	209270 <_gp+0xffdf768c>
  20a348:	8880100c 	andi	r2,r17,64
  20a34c:	10003a26 	beq	r2,zero,20a438 <___vfiprintf_internal_r+0x1298>
  20a350:	d8802217 	ldw	r2,136(sp)
  20a354:	14c0000f 	ldh	r19,0(r2)
  20a358:	10800104 	addi	r2,r2,4
  20a35c:	d8802215 	stw	r2,136(sp)
  20a360:	9829d7fa 	srai	r20,r19,31
  20a364:	a005883a 	mov	r2,r20
  20a368:	003d8506 	br	209980 <_gp+0xffdf7d9c>
  20a36c:	8880100c 	andi	r2,r17,64
  20a370:	10002b26 	beq	r2,zero,20a420 <___vfiprintf_internal_r+0x1280>
  20a374:	d8802217 	ldw	r2,136(sp)
  20a378:	0029883a 	mov	r20,zero
  20a37c:	14c0000b 	ldhu	r19,0(r2)
  20a380:	10800104 	addi	r2,r2,4
  20a384:	d8802215 	stw	r2,136(sp)
  20a388:	003d5d06 	br	209900 <_gp+0xffdf7d1c>
  20a38c:	d9402017 	ldw	r5,128(sp)
  20a390:	d9002117 	ldw	r4,132(sp)
  20a394:	d9801a04 	addi	r6,sp,104
  20a398:	d8c02a15 	stw	r3,168(sp)
  20a39c:	d9c02b15 	stw	r7,172(sp)
  20a3a0:	020908c0 	call	20908c <__sprint_r.part.0>
  20a3a4:	d8c02a17 	ldw	r3,168(sp)
  20a3a8:	d9c02b17 	ldw	r7,172(sp)
  20a3ac:	103eb41e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a3b0:	d9001b17 	ldw	r4,108(sp)
  20a3b4:	d8801c17 	ldw	r2,112(sp)
  20a3b8:	d811883a 	mov	r8,sp
  20a3bc:	21400044 	addi	r5,r4,1
  20a3c0:	003e6706 	br	209d60 <_gp+0xffdf817c>
  20a3c4:	00bfffc4 	movi	r2,-1
  20a3c8:	003c4a06 	br	2094f4 <_gp+0xffdf7910>
  20a3cc:	9805883a 	mov	r2,r19
  20a3d0:	003ee806 	br	209f74 <_gp+0xffdf8390>
  20a3d4:	d8c02217 	ldw	r3,136(sp)
  20a3d8:	0029883a 	mov	r20,zero
  20a3dc:	18800104 	addi	r2,r3,4
  20a3e0:	1cc0000b 	ldhu	r19,0(r3)
  20a3e4:	803f9e0e 	bge	r16,zero,20a260 <_gp+0xffdf867c>
  20a3e8:	003dd706 	br	209b48 <_gp+0xffdf7f64>
  20a3ec:	d8c02217 	ldw	r3,136(sp)
  20a3f0:	d9002417 	ldw	r4,144(sp)
  20a3f4:	18800017 	ldw	r2,0(r3)
  20a3f8:	18c00104 	addi	r3,r3,4
  20a3fc:	d8c02215 	stw	r3,136(sp)
  20a400:	11000015 	stw	r4,0(r2)
  20a404:	003b9a06 	br	209270 <_gp+0xffdf768c>
  20a408:	d8c02217 	ldw	r3,136(sp)
  20a40c:	0029883a 	mov	r20,zero
  20a410:	18800104 	addi	r2,r3,4
  20a414:	1cc0000b 	ldhu	r19,0(r3)
  20a418:	803db20e 	bge	r16,zero,209ae4 <_gp+0xffdf7f00>
  20a41c:	003fb906 	br	20a304 <_gp+0xffdf8720>
  20a420:	d9002217 	ldw	r4,136(sp)
  20a424:	0029883a 	mov	r20,zero
  20a428:	24c00017 	ldw	r19,0(r4)
  20a42c:	21000104 	addi	r4,r4,4
  20a430:	d9002215 	stw	r4,136(sp)
  20a434:	003d3206 	br	209900 <_gp+0xffdf7d1c>
  20a438:	d8c02217 	ldw	r3,136(sp)
  20a43c:	1cc00017 	ldw	r19,0(r3)
  20a440:	18c00104 	addi	r3,r3,4
  20a444:	d8c02215 	stw	r3,136(sp)
  20a448:	9829d7fa 	srai	r20,r19,31
  20a44c:	a005883a 	mov	r2,r20
  20a450:	003d4b06 	br	209980 <_gp+0xffdf7d9c>
  20a454:	0009883a 	mov	r4,zero
  20a458:	01400044 	movi	r5,1
  20a45c:	d811883a 	mov	r8,sp
  20a460:	003e4f06 	br	209da0 <_gp+0xffdf81bc>
  20a464:	d8c02215 	stw	r3,136(sp)
  20a468:	002b883a 	mov	r21,zero
  20a46c:	003db806 	br	209b50 <_gp+0xffdf7f6c>
  20a470:	d811883a 	mov	r8,sp
  20a474:	003e9606 	br	209ed0 <_gp+0xffdf82ec>
  20a478:	01000874 	movhi	r4,33
  20a47c:	2110ad04 	addi	r4,r4,17076
  20a480:	d9002315 	stw	r4,140(sp)
  20a484:	003e6306 	br	209e14 <_gp+0xffdf8230>
  20a488:	b0c00043 	ldbu	r3,1(r22)
  20a48c:	8c400814 	ori	r17,r17,32
  20a490:	b5800044 	addi	r22,r22,1
  20a494:	18c03fcc 	andi	r3,r3,255
  20a498:	18c0201c 	xori	r3,r3,128
  20a49c:	18ffe004 	addi	r3,r3,-128
  20a4a0:	003b9c06 	br	209314 <_gp+0xffdf7730>
  20a4a4:	b809883a 	mov	r4,r23
  20a4a8:	da002a15 	stw	r8,168(sp)
  20a4ac:	02019100 	call	201910 <strlen>
  20a4b0:	1029883a 	mov	r20,r2
  20a4b4:	dd401d83 	ldbu	r21,118(sp)
  20a4b8:	df002215 	stw	fp,136(sp)
  20a4bc:	0021883a 	mov	r16,zero
  20a4c0:	da002a17 	ldw	r8,168(sp)
  20a4c4:	003c3906 	br	2095ac <_gp+0xffdf79c8>
  20a4c8:	d9402017 	ldw	r5,128(sp)
  20a4cc:	d9002117 	ldw	r4,132(sp)
  20a4d0:	d9801a04 	addi	r6,sp,104
  20a4d4:	020908c0 	call	20908c <__sprint_r.part.0>
  20a4d8:	103e691e 	bne	r2,zero,209e80 <_gp+0xffdf829c>
  20a4dc:	d9001b17 	ldw	r4,108(sp)
  20a4e0:	d8801c17 	ldw	r2,112(sp)
  20a4e4:	d811883a 	mov	r8,sp
  20a4e8:	21400044 	addi	r5,r4,1
  20a4ec:	003e2e06 	br	209da8 <_gp+0xffdf81c4>
  20a4f0:	01000874 	movhi	r4,33
  20a4f4:	2110b104 	addi	r4,r4,17092
  20a4f8:	d9002315 	stw	r4,140(sp)
  20a4fc:	d9001b17 	ldw	r4,108(sp)
  20a500:	21000044 	addi	r4,r4,1
  20a504:	003c5e06 	br	209680 <_gp+0xffdf7a9c>
  20a508:	002b883a 	mov	r21,zero
  20a50c:	00800084 	movi	r2,2
  20a510:	10803fcc 	andi	r2,r2,255
  20a514:	01000044 	movi	r4,1
  20a518:	11002b26 	beq	r2,r4,20a5c8 <___vfiprintf_internal_r+0x1428>
  20a51c:	01000084 	movi	r4,2
  20a520:	11002b1e 	bne	r2,r4,20a5d0 <___vfiprintf_internal_r+0x1430>
  20a524:	1823883a 	mov	r17,r3
  20a528:	003ee506 	br	20a0c0 <_gp+0xffdf84dc>
  20a52c:	8807883a 	mov	r3,r17
  20a530:	00800044 	movi	r2,1
  20a534:	003ff606 	br	20a510 <_gp+0xffdf892c>
  20a538:	00800184 	movi	r2,6
  20a53c:	1400012e 	bgeu	r2,r16,20a544 <___vfiprintf_internal_r+0x13a4>
  20a540:	1021883a 	mov	r16,r2
  20a544:	8029883a 	mov	r20,r16
  20a548:	8027883a 	mov	r19,r16
  20a54c:	80002216 	blt	r16,zero,20a5d8 <___vfiprintf_internal_r+0x1438>
  20a550:	05c00874 	movhi	r23,33
  20a554:	df002215 	stw	fp,136(sp)
  20a558:	bdd05104 	addi	r23,r23,16708
  20a55c:	003cfb06 	br	20994c <_gp+0xffdf7d68>
  20a560:	d9002217 	ldw	r4,136(sp)
  20a564:	d9402417 	ldw	r5,144(sp)
  20a568:	20800017 	ldw	r2,0(r4)
  20a56c:	21000104 	addi	r4,r4,4
  20a570:	d9002215 	stw	r4,136(sp)
  20a574:	11400015 	stw	r5,0(r2)
  20a578:	003b3d06 	br	209270 <_gp+0xffdf768c>
  20a57c:	01400874 	movhi	r5,33
  20a580:	2950b104 	addi	r5,r5,17092
  20a584:	d9402315 	stw	r5,140(sp)
  20a588:	d9401b17 	ldw	r5,108(sp)
  20a58c:	29400044 	addi	r5,r5,1
  20a590:	003e6d06 	br	209f48 <_gp+0xffdf8364>
  20a594:	8029883a 	mov	r20,r16
  20a598:	dd401d83 	ldbu	r21,118(sp)
  20a59c:	df002215 	stw	fp,136(sp)
  20a5a0:	0021883a 	mov	r16,zero
  20a5a4:	003c0106 	br	2095ac <_gp+0xffdf79c8>
  20a5a8:	00c00874 	movhi	r3,33
  20a5ac:	18d0ad04 	addi	r3,r3,17076
  20a5b0:	d8c02315 	stw	r3,140(sp)
  20a5b4:	280d883a 	mov	r6,r5
  20a5b8:	003c6906 	br	209760 <_gp+0xffdf7b7c>
  20a5bc:	802d883a 	mov	r22,r16
  20a5c0:	0021883a 	mov	r16,zero
  20a5c4:	003b5406 	br	209318 <_gp+0xffdf7734>
  20a5c8:	1823883a 	mov	r17,r3
  20a5cc:	003cf306 	br	20999c <_gp+0xffdf7db8>
  20a5d0:	1823883a 	mov	r17,r3
  20a5d4:	003cad06 	br	20988c <_gp+0xffdf7ca8>
  20a5d8:	0027883a 	mov	r19,zero
  20a5dc:	003fdc06 	br	20a550 <_gp+0xffdf896c>
  20a5e0:	d9402217 	ldw	r5,136(sp)
  20a5e4:	8005883a 	mov	r2,r16
  20a5e8:	b0c00043 	ldbu	r3,1(r22)
  20a5ec:	2c000017 	ldw	r16,0(r5)
  20a5f0:	29000104 	addi	r4,r5,4
  20a5f4:	d9002215 	stw	r4,136(sp)
  20a5f8:	102d883a 	mov	r22,r2
  20a5fc:	803fa50e 	bge	r16,zero,20a494 <_gp+0xffdf88b0>
  20a600:	18c03fcc 	andi	r3,r3,255
  20a604:	18c0201c 	xori	r3,r3,128
  20a608:	043fffc4 	movi	r16,-1
  20a60c:	18ffe004 	addi	r3,r3,-128
  20a610:	003b4006 	br	209314 <_gp+0xffdf7730>
  20a614:	d9402303 	ldbu	r5,140(sp)
  20a618:	d9401d85 	stb	r5,118(sp)
  20a61c:	003cae06 	br	2098d8 <_gp+0xffdf7cf4>
  20a620:	d8c02303 	ldbu	r3,140(sp)
  20a624:	d8c01d85 	stb	r3,118(sp)
  20a628:	003d1406 	br	209a7c <_gp+0xffdf7e98>
  20a62c:	d8c02303 	ldbu	r3,140(sp)
  20a630:	d8c01d85 	stb	r3,118(sp)
  20a634:	003cca06 	br	209960 <_gp+0xffdf7d7c>
  20a638:	8880004c 	andi	r2,r17,1
  20a63c:	002b883a 	mov	r21,zero
  20a640:	10000526 	beq	r2,zero,20a658 <___vfiprintf_internal_r+0x14b8>
  20a644:	00800c04 	movi	r2,48
  20a648:	d88019c5 	stb	r2,103(sp)
  20a64c:	dd002817 	ldw	r20,160(sp)
  20a650:	ddc019c4 	addi	r23,sp,103
  20a654:	003bd506 	br	2095ac <_gp+0xffdf79c8>
  20a658:	0029883a 	mov	r20,zero
  20a65c:	ddc01a04 	addi	r23,sp,104
  20a660:	003bd206 	br	2095ac <_gp+0xffdf79c8>
  20a664:	d9002303 	ldbu	r4,140(sp)
  20a668:	d9001d85 	stb	r4,118(sp)
  20a66c:	003da606 	br	209d08 <_gp+0xffdf8124>
  20a670:	d8c02303 	ldbu	r3,140(sp)
  20a674:	d8c01d85 	stb	r3,118(sp)
  20a678:	003c7606 	br	209854 <_gp+0xffdf7c70>
  20a67c:	d8c02303 	ldbu	r3,140(sp)
  20a680:	d8c01d85 	stb	r3,118(sp)
  20a684:	003c6506 	br	20981c <_gp+0xffdf7c38>
  20a688:	d9002303 	ldbu	r4,140(sp)
  20a68c:	d9001d85 	stb	r4,118(sp)
  20a690:	003d3d06 	br	209b88 <_gp+0xffdf7fa4>
  20a694:	d8c02303 	ldbu	r3,140(sp)
  20a698:	d8c01d85 	stb	r3,118(sp)
  20a69c:	003d1d06 	br	209b14 <_gp+0xffdf7f30>
  20a6a0:	d8c02303 	ldbu	r3,140(sp)
  20a6a4:	d8c01d85 	stb	r3,118(sp)
  20a6a8:	003d0306 	br	209ab8 <_gp+0xffdf7ed4>

0020a6ac <__vfiprintf_internal>:
  20a6ac:	00801074 	movhi	r2,65
  20a6b0:	10a6fa04 	addi	r2,r2,-25624
  20a6b4:	300f883a 	mov	r7,r6
  20a6b8:	280d883a 	mov	r6,r5
  20a6bc:	200b883a 	mov	r5,r4
  20a6c0:	11000017 	ldw	r4,0(r2)
  20a6c4:	02091a01 	jmpi	2091a0 <___vfiprintf_internal_r>

0020a6c8 <__sbprintf>:
  20a6c8:	2880030b 	ldhu	r2,12(r5)
  20a6cc:	2ac01917 	ldw	r11,100(r5)
  20a6d0:	2a80038b 	ldhu	r10,14(r5)
  20a6d4:	2a400717 	ldw	r9,28(r5)
  20a6d8:	2a000917 	ldw	r8,36(r5)
  20a6dc:	defee204 	addi	sp,sp,-1144
  20a6e0:	00c10004 	movi	r3,1024
  20a6e4:	dc011a15 	stw	r16,1128(sp)
  20a6e8:	10bfff4c 	andi	r2,r2,65533
  20a6ec:	2821883a 	mov	r16,r5
  20a6f0:	d8cb883a 	add	r5,sp,r3
  20a6f4:	dc811c15 	stw	r18,1136(sp)
  20a6f8:	dc411b15 	stw	r17,1132(sp)
  20a6fc:	dfc11d15 	stw	ra,1140(sp)
  20a700:	2025883a 	mov	r18,r4
  20a704:	d881030d 	sth	r2,1036(sp)
  20a708:	dac11915 	stw	r11,1124(sp)
  20a70c:	da81038d 	sth	r10,1038(sp)
  20a710:	da410715 	stw	r9,1052(sp)
  20a714:	da010915 	stw	r8,1060(sp)
  20a718:	dec10015 	stw	sp,1024(sp)
  20a71c:	dec10415 	stw	sp,1040(sp)
  20a720:	d8c10215 	stw	r3,1032(sp)
  20a724:	d8c10515 	stw	r3,1044(sp)
  20a728:	d8010615 	stw	zero,1048(sp)
  20a72c:	02091a00 	call	2091a0 <___vfiprintf_internal_r>
  20a730:	1023883a 	mov	r17,r2
  20a734:	10000416 	blt	r2,zero,20a748 <__sbprintf+0x80>
  20a738:	d9410004 	addi	r5,sp,1024
  20a73c:	9009883a 	mov	r4,r18
  20a740:	020597c0 	call	20597c <_fflush_r>
  20a744:	10000d1e 	bne	r2,zero,20a77c <__sbprintf+0xb4>
  20a748:	d881030b 	ldhu	r2,1036(sp)
  20a74c:	1080100c 	andi	r2,r2,64
  20a750:	10000326 	beq	r2,zero,20a760 <__sbprintf+0x98>
  20a754:	8080030b 	ldhu	r2,12(r16)
  20a758:	10801014 	ori	r2,r2,64
  20a75c:	8080030d 	sth	r2,12(r16)
  20a760:	8805883a 	mov	r2,r17
  20a764:	dfc11d17 	ldw	ra,1140(sp)
  20a768:	dc811c17 	ldw	r18,1136(sp)
  20a76c:	dc411b17 	ldw	r17,1132(sp)
  20a770:	dc011a17 	ldw	r16,1128(sp)
  20a774:	dec11e04 	addi	sp,sp,1144
  20a778:	f800283a 	ret
  20a77c:	047fffc4 	movi	r17,-1
  20a780:	003ff106 	br	20a748 <_gp+0xffdf8b64>

0020a784 <_write_r>:
  20a784:	defffd04 	addi	sp,sp,-12
  20a788:	2805883a 	mov	r2,r5
  20a78c:	dc000015 	stw	r16,0(sp)
  20a790:	04001074 	movhi	r16,65
  20a794:	dc400115 	stw	r17,4(sp)
  20a798:	300b883a 	mov	r5,r6
  20a79c:	84271504 	addi	r16,r16,-25516
  20a7a0:	2023883a 	mov	r17,r4
  20a7a4:	380d883a 	mov	r6,r7
  20a7a8:	1009883a 	mov	r4,r2
  20a7ac:	dfc00215 	stw	ra,8(sp)
  20a7b0:	80000015 	stw	zero,0(r16)
  20a7b4:	020ed940 	call	20ed94 <write>
  20a7b8:	00ffffc4 	movi	r3,-1
  20a7bc:	10c00526 	beq	r2,r3,20a7d4 <_write_r+0x50>
  20a7c0:	dfc00217 	ldw	ra,8(sp)
  20a7c4:	dc400117 	ldw	r17,4(sp)
  20a7c8:	dc000017 	ldw	r16,0(sp)
  20a7cc:	dec00304 	addi	sp,sp,12
  20a7d0:	f800283a 	ret
  20a7d4:	80c00017 	ldw	r3,0(r16)
  20a7d8:	183ff926 	beq	r3,zero,20a7c0 <_gp+0xffdf8bdc>
  20a7dc:	88c00015 	stw	r3,0(r17)
  20a7e0:	003ff706 	br	20a7c0 <_gp+0xffdf8bdc>

0020a7e4 <_close_r>:
  20a7e4:	defffd04 	addi	sp,sp,-12
  20a7e8:	dc000015 	stw	r16,0(sp)
  20a7ec:	04001074 	movhi	r16,65
  20a7f0:	dc400115 	stw	r17,4(sp)
  20a7f4:	84271504 	addi	r16,r16,-25516
  20a7f8:	2023883a 	mov	r17,r4
  20a7fc:	2809883a 	mov	r4,r5
  20a800:	dfc00215 	stw	ra,8(sp)
  20a804:	80000015 	stw	zero,0(r16)
  20a808:	020e50c0 	call	20e50c <close>
  20a80c:	00ffffc4 	movi	r3,-1
  20a810:	10c00526 	beq	r2,r3,20a828 <_close_r+0x44>
  20a814:	dfc00217 	ldw	ra,8(sp)
  20a818:	dc400117 	ldw	r17,4(sp)
  20a81c:	dc000017 	ldw	r16,0(sp)
  20a820:	dec00304 	addi	sp,sp,12
  20a824:	f800283a 	ret
  20a828:	80c00017 	ldw	r3,0(r16)
  20a82c:	183ff926 	beq	r3,zero,20a814 <_gp+0xffdf8c30>
  20a830:	88c00015 	stw	r3,0(r17)
  20a834:	003ff706 	br	20a814 <_gp+0xffdf8c30>

0020a838 <_calloc_r>:
  20a838:	defffe04 	addi	sp,sp,-8
  20a83c:	2805883a 	mov	r2,r5
  20a840:	dc000015 	stw	r16,0(sp)
  20a844:	300b883a 	mov	r5,r6
  20a848:	2021883a 	mov	r16,r4
  20a84c:	1009883a 	mov	r4,r2
  20a850:	dfc00115 	stw	ra,4(sp)
  20a854:	02017a80 	call	2017a8 <__mulsi3>
  20a858:	100b883a 	mov	r5,r2
  20a85c:	8009883a 	mov	r4,r16
  20a860:	0206ad40 	call	206ad4 <_malloc_r>
  20a864:	10002926 	beq	r2,zero,20a90c <_calloc_r+0xd4>
  20a868:	11bfff17 	ldw	r6,-4(r2)
  20a86c:	1021883a 	mov	r16,r2
  20a870:	00bfff04 	movi	r2,-4
  20a874:	308c703a 	and	r6,r6,r2
  20a878:	00c00904 	movi	r3,36
  20a87c:	308d883a 	add	r6,r6,r2
  20a880:	19801636 	bltu	r3,r6,20a8dc <_calloc_r+0xa4>
  20a884:	008004c4 	movi	r2,19
  20a888:	11800b2e 	bgeu	r2,r6,20a8b8 <_calloc_r+0x80>
  20a88c:	80000015 	stw	zero,0(r16)
  20a890:	80000115 	stw	zero,4(r16)
  20a894:	008006c4 	movi	r2,27
  20a898:	11801a2e 	bgeu	r2,r6,20a904 <_calloc_r+0xcc>
  20a89c:	80000215 	stw	zero,8(r16)
  20a8a0:	80000315 	stw	zero,12(r16)
  20a8a4:	30c0151e 	bne	r6,r3,20a8fc <_calloc_r+0xc4>
  20a8a8:	80000415 	stw	zero,16(r16)
  20a8ac:	80800604 	addi	r2,r16,24
  20a8b0:	80000515 	stw	zero,20(r16)
  20a8b4:	00000106 	br	20a8bc <_calloc_r+0x84>
  20a8b8:	8005883a 	mov	r2,r16
  20a8bc:	10000015 	stw	zero,0(r2)
  20a8c0:	10000115 	stw	zero,4(r2)
  20a8c4:	10000215 	stw	zero,8(r2)
  20a8c8:	8005883a 	mov	r2,r16
  20a8cc:	dfc00117 	ldw	ra,4(sp)
  20a8d0:	dc000017 	ldw	r16,0(sp)
  20a8d4:	dec00204 	addi	sp,sp,8
  20a8d8:	f800283a 	ret
  20a8dc:	000b883a 	mov	r5,zero
  20a8e0:	8009883a 	mov	r4,r16
  20a8e4:	02076680 	call	207668 <memset>
  20a8e8:	8005883a 	mov	r2,r16
  20a8ec:	dfc00117 	ldw	ra,4(sp)
  20a8f0:	dc000017 	ldw	r16,0(sp)
  20a8f4:	dec00204 	addi	sp,sp,8
  20a8f8:	f800283a 	ret
  20a8fc:	80800404 	addi	r2,r16,16
  20a900:	003fee06 	br	20a8bc <_gp+0xffdf8cd8>
  20a904:	80800204 	addi	r2,r16,8
  20a908:	003fec06 	br	20a8bc <_gp+0xffdf8cd8>
  20a90c:	0005883a 	mov	r2,zero
  20a910:	003fee06 	br	20a8cc <_gp+0xffdf8ce8>

0020a914 <_fclose_r>:
  20a914:	28003926 	beq	r5,zero,20a9fc <_fclose_r+0xe8>
  20a918:	defffc04 	addi	sp,sp,-16
  20a91c:	dc400115 	stw	r17,4(sp)
  20a920:	dc000015 	stw	r16,0(sp)
  20a924:	dfc00315 	stw	ra,12(sp)
  20a928:	dc800215 	stw	r18,8(sp)
  20a92c:	2023883a 	mov	r17,r4
  20a930:	2821883a 	mov	r16,r5
  20a934:	20000226 	beq	r4,zero,20a940 <_fclose_r+0x2c>
  20a938:	20800e17 	ldw	r2,56(r4)
  20a93c:	10002726 	beq	r2,zero,20a9dc <_fclose_r+0xc8>
  20a940:	8080030f 	ldh	r2,12(r16)
  20a944:	1000071e 	bne	r2,zero,20a964 <_fclose_r+0x50>
  20a948:	0005883a 	mov	r2,zero
  20a94c:	dfc00317 	ldw	ra,12(sp)
  20a950:	dc800217 	ldw	r18,8(sp)
  20a954:	dc400117 	ldw	r17,4(sp)
  20a958:	dc000017 	ldw	r16,0(sp)
  20a95c:	dec00404 	addi	sp,sp,16
  20a960:	f800283a 	ret
  20a964:	800b883a 	mov	r5,r16
  20a968:	8809883a 	mov	r4,r17
  20a96c:	02057600 	call	205760 <__sflush_r>
  20a970:	1025883a 	mov	r18,r2
  20a974:	80800b17 	ldw	r2,44(r16)
  20a978:	10000426 	beq	r2,zero,20a98c <_fclose_r+0x78>
  20a97c:	81400717 	ldw	r5,28(r16)
  20a980:	8809883a 	mov	r4,r17
  20a984:	103ee83a 	callr	r2
  20a988:	10001616 	blt	r2,zero,20a9e4 <_fclose_r+0xd0>
  20a98c:	8080030b 	ldhu	r2,12(r16)
  20a990:	1080200c 	andi	r2,r2,128
  20a994:	1000151e 	bne	r2,zero,20a9ec <_fclose_r+0xd8>
  20a998:	81400c17 	ldw	r5,48(r16)
  20a99c:	28000526 	beq	r5,zero,20a9b4 <_fclose_r+0xa0>
  20a9a0:	80801004 	addi	r2,r16,64
  20a9a4:	28800226 	beq	r5,r2,20a9b0 <_fclose_r+0x9c>
  20a9a8:	8809883a 	mov	r4,r17
  20a9ac:	0205edc0 	call	205edc <_free_r>
  20a9b0:	80000c15 	stw	zero,48(r16)
  20a9b4:	81401117 	ldw	r5,68(r16)
  20a9b8:	28000326 	beq	r5,zero,20a9c8 <_fclose_r+0xb4>
  20a9bc:	8809883a 	mov	r4,r17
  20a9c0:	0205edc0 	call	205edc <_free_r>
  20a9c4:	80001115 	stw	zero,68(r16)
  20a9c8:	0205d780 	call	205d78 <__sfp_lock_acquire>
  20a9cc:	8000030d 	sth	zero,12(r16)
  20a9d0:	0205d7c0 	call	205d7c <__sfp_lock_release>
  20a9d4:	9005883a 	mov	r2,r18
  20a9d8:	003fdc06 	br	20a94c <_gp+0xffdf8d68>
  20a9dc:	0205d680 	call	205d68 <__sinit>
  20a9e0:	003fd706 	br	20a940 <_gp+0xffdf8d5c>
  20a9e4:	04bfffc4 	movi	r18,-1
  20a9e8:	003fe806 	br	20a98c <_gp+0xffdf8da8>
  20a9ec:	81400417 	ldw	r5,16(r16)
  20a9f0:	8809883a 	mov	r4,r17
  20a9f4:	0205edc0 	call	205edc <_free_r>
  20a9f8:	003fe706 	br	20a998 <_gp+0xffdf8db4>
  20a9fc:	0005883a 	mov	r2,zero
  20aa00:	f800283a 	ret

0020aa04 <fclose>:
  20aa04:	00801074 	movhi	r2,65
  20aa08:	10a6fa04 	addi	r2,r2,-25624
  20aa0c:	200b883a 	mov	r5,r4
  20aa10:	11000017 	ldw	r4,0(r2)
  20aa14:	020a9141 	jmpi	20a914 <_fclose_r>

0020aa18 <__fputwc>:
  20aa18:	defff804 	addi	sp,sp,-32
  20aa1c:	dcc00415 	stw	r19,16(sp)
  20aa20:	dc800315 	stw	r18,12(sp)
  20aa24:	dc000115 	stw	r16,4(sp)
  20aa28:	dfc00715 	stw	ra,28(sp)
  20aa2c:	dd400615 	stw	r21,24(sp)
  20aa30:	dd000515 	stw	r20,20(sp)
  20aa34:	dc400215 	stw	r17,8(sp)
  20aa38:	2027883a 	mov	r19,r4
  20aa3c:	2825883a 	mov	r18,r5
  20aa40:	3021883a 	mov	r16,r6
  20aa44:	02068c40 	call	2068c4 <__locale_mb_cur_max>
  20aa48:	00c00044 	movi	r3,1
  20aa4c:	10c03e26 	beq	r2,r3,20ab48 <__fputwc+0x130>
  20aa50:	81c01704 	addi	r7,r16,92
  20aa54:	900d883a 	mov	r6,r18
  20aa58:	d80b883a 	mov	r5,sp
  20aa5c:	9809883a 	mov	r4,r19
  20aa60:	020aee80 	call	20aee8 <_wcrtomb_r>
  20aa64:	1029883a 	mov	r20,r2
  20aa68:	00bfffc4 	movi	r2,-1
  20aa6c:	a0802026 	beq	r20,r2,20aaf0 <__fputwc+0xd8>
  20aa70:	d9400003 	ldbu	r5,0(sp)
  20aa74:	a0001c26 	beq	r20,zero,20aae8 <__fputwc+0xd0>
  20aa78:	0023883a 	mov	r17,zero
  20aa7c:	05400284 	movi	r21,10
  20aa80:	00000906 	br	20aaa8 <__fputwc+0x90>
  20aa84:	80800017 	ldw	r2,0(r16)
  20aa88:	11400005 	stb	r5,0(r2)
  20aa8c:	80c00017 	ldw	r3,0(r16)
  20aa90:	18c00044 	addi	r3,r3,1
  20aa94:	80c00015 	stw	r3,0(r16)
  20aa98:	8c400044 	addi	r17,r17,1
  20aa9c:	dc45883a 	add	r2,sp,r17
  20aaa0:	8d00112e 	bgeu	r17,r20,20aae8 <__fputwc+0xd0>
  20aaa4:	11400003 	ldbu	r5,0(r2)
  20aaa8:	80c00217 	ldw	r3,8(r16)
  20aaac:	18ffffc4 	addi	r3,r3,-1
  20aab0:	80c00215 	stw	r3,8(r16)
  20aab4:	183ff30e 	bge	r3,zero,20aa84 <_gp+0xffdf8ea0>
  20aab8:	80800617 	ldw	r2,24(r16)
  20aabc:	18801916 	blt	r3,r2,20ab24 <__fputwc+0x10c>
  20aac0:	80800017 	ldw	r2,0(r16)
  20aac4:	11400005 	stb	r5,0(r2)
  20aac8:	80800017 	ldw	r2,0(r16)
  20aacc:	10c00003 	ldbu	r3,0(r2)
  20aad0:	10800044 	addi	r2,r2,1
  20aad4:	1d402326 	beq	r3,r21,20ab64 <__fputwc+0x14c>
  20aad8:	80800015 	stw	r2,0(r16)
  20aadc:	8c400044 	addi	r17,r17,1
  20aae0:	dc45883a 	add	r2,sp,r17
  20aae4:	8d3fef36 	bltu	r17,r20,20aaa4 <_gp+0xffdf8ec0>
  20aae8:	9005883a 	mov	r2,r18
  20aaec:	00000406 	br	20ab00 <__fputwc+0xe8>
  20aaf0:	80c0030b 	ldhu	r3,12(r16)
  20aaf4:	a005883a 	mov	r2,r20
  20aaf8:	18c01014 	ori	r3,r3,64
  20aafc:	80c0030d 	sth	r3,12(r16)
  20ab00:	dfc00717 	ldw	ra,28(sp)
  20ab04:	dd400617 	ldw	r21,24(sp)
  20ab08:	dd000517 	ldw	r20,20(sp)
  20ab0c:	dcc00417 	ldw	r19,16(sp)
  20ab10:	dc800317 	ldw	r18,12(sp)
  20ab14:	dc400217 	ldw	r17,8(sp)
  20ab18:	dc000117 	ldw	r16,4(sp)
  20ab1c:	dec00804 	addi	sp,sp,32
  20ab20:	f800283a 	ret
  20ab24:	800d883a 	mov	r6,r16
  20ab28:	29403fcc 	andi	r5,r5,255
  20ab2c:	9809883a 	mov	r4,r19
  20ab30:	020ad900 	call	20ad90 <__swbuf_r>
  20ab34:	10bfffe0 	cmpeqi	r2,r2,-1
  20ab38:	10803fcc 	andi	r2,r2,255
  20ab3c:	103fd626 	beq	r2,zero,20aa98 <_gp+0xffdf8eb4>
  20ab40:	00bfffc4 	movi	r2,-1
  20ab44:	003fee06 	br	20ab00 <_gp+0xffdf8f1c>
  20ab48:	90ffffc4 	addi	r3,r18,-1
  20ab4c:	01003f84 	movi	r4,254
  20ab50:	20ffbf36 	bltu	r4,r3,20aa50 <_gp+0xffdf8e6c>
  20ab54:	900b883a 	mov	r5,r18
  20ab58:	dc800005 	stb	r18,0(sp)
  20ab5c:	1029883a 	mov	r20,r2
  20ab60:	003fc506 	br	20aa78 <_gp+0xffdf8e94>
  20ab64:	800d883a 	mov	r6,r16
  20ab68:	a80b883a 	mov	r5,r21
  20ab6c:	9809883a 	mov	r4,r19
  20ab70:	020ad900 	call	20ad90 <__swbuf_r>
  20ab74:	10bfffe0 	cmpeqi	r2,r2,-1
  20ab78:	003fef06 	br	20ab38 <_gp+0xffdf8f54>

0020ab7c <_fputwc_r>:
  20ab7c:	3080030b 	ldhu	r2,12(r6)
  20ab80:	10c8000c 	andi	r3,r2,8192
  20ab84:	1800051e 	bne	r3,zero,20ab9c <_fputwc_r+0x20>
  20ab88:	30c01917 	ldw	r3,100(r6)
  20ab8c:	10880014 	ori	r2,r2,8192
  20ab90:	3080030d 	sth	r2,12(r6)
  20ab94:	18880014 	ori	r2,r3,8192
  20ab98:	30801915 	stw	r2,100(r6)
  20ab9c:	020aa181 	jmpi	20aa18 <__fputwc>

0020aba0 <fputwc>:
  20aba0:	00801074 	movhi	r2,65
  20aba4:	defffc04 	addi	sp,sp,-16
  20aba8:	10a6fa04 	addi	r2,r2,-25624
  20abac:	dc000115 	stw	r16,4(sp)
  20abb0:	14000017 	ldw	r16,0(r2)
  20abb4:	dc400215 	stw	r17,8(sp)
  20abb8:	dfc00315 	stw	ra,12(sp)
  20abbc:	2023883a 	mov	r17,r4
  20abc0:	80000226 	beq	r16,zero,20abcc <fputwc+0x2c>
  20abc4:	80800e17 	ldw	r2,56(r16)
  20abc8:	10001026 	beq	r2,zero,20ac0c <fputwc+0x6c>
  20abcc:	2880030b 	ldhu	r2,12(r5)
  20abd0:	10c8000c 	andi	r3,r2,8192
  20abd4:	1800051e 	bne	r3,zero,20abec <fputwc+0x4c>
  20abd8:	28c01917 	ldw	r3,100(r5)
  20abdc:	10880014 	ori	r2,r2,8192
  20abe0:	2880030d 	sth	r2,12(r5)
  20abe4:	18880014 	ori	r2,r3,8192
  20abe8:	28801915 	stw	r2,100(r5)
  20abec:	280d883a 	mov	r6,r5
  20abf0:	8009883a 	mov	r4,r16
  20abf4:	880b883a 	mov	r5,r17
  20abf8:	dfc00317 	ldw	ra,12(sp)
  20abfc:	dc400217 	ldw	r17,8(sp)
  20ac00:	dc000117 	ldw	r16,4(sp)
  20ac04:	dec00404 	addi	sp,sp,16
  20ac08:	020aa181 	jmpi	20aa18 <__fputwc>
  20ac0c:	8009883a 	mov	r4,r16
  20ac10:	d9400015 	stw	r5,0(sp)
  20ac14:	0205d680 	call	205d68 <__sinit>
  20ac18:	d9400017 	ldw	r5,0(sp)
  20ac1c:	003feb06 	br	20abcc <_gp+0xffdf8fe8>

0020ac20 <_fstat_r>:
  20ac20:	defffd04 	addi	sp,sp,-12
  20ac24:	2805883a 	mov	r2,r5
  20ac28:	dc000015 	stw	r16,0(sp)
  20ac2c:	04001074 	movhi	r16,65
  20ac30:	dc400115 	stw	r17,4(sp)
  20ac34:	84271504 	addi	r16,r16,-25516
  20ac38:	2023883a 	mov	r17,r4
  20ac3c:	300b883a 	mov	r5,r6
  20ac40:	1009883a 	mov	r4,r2
  20ac44:	dfc00215 	stw	ra,8(sp)
  20ac48:	80000015 	stw	zero,0(r16)
  20ac4c:	020e64c0 	call	20e64c <fstat>
  20ac50:	00ffffc4 	movi	r3,-1
  20ac54:	10c00526 	beq	r2,r3,20ac6c <_fstat_r+0x4c>
  20ac58:	dfc00217 	ldw	ra,8(sp)
  20ac5c:	dc400117 	ldw	r17,4(sp)
  20ac60:	dc000017 	ldw	r16,0(sp)
  20ac64:	dec00304 	addi	sp,sp,12
  20ac68:	f800283a 	ret
  20ac6c:	80c00017 	ldw	r3,0(r16)
  20ac70:	183ff926 	beq	r3,zero,20ac58 <_gp+0xffdf9074>
  20ac74:	88c00015 	stw	r3,0(r17)
  20ac78:	003ff706 	br	20ac58 <_gp+0xffdf9074>

0020ac7c <_isatty_r>:
  20ac7c:	defffd04 	addi	sp,sp,-12
  20ac80:	dc000015 	stw	r16,0(sp)
  20ac84:	04001074 	movhi	r16,65
  20ac88:	dc400115 	stw	r17,4(sp)
  20ac8c:	84271504 	addi	r16,r16,-25516
  20ac90:	2023883a 	mov	r17,r4
  20ac94:	2809883a 	mov	r4,r5
  20ac98:	dfc00215 	stw	ra,8(sp)
  20ac9c:	80000015 	stw	zero,0(r16)
  20aca0:	020e7400 	call	20e740 <isatty>
  20aca4:	00ffffc4 	movi	r3,-1
  20aca8:	10c00526 	beq	r2,r3,20acc0 <_isatty_r+0x44>
  20acac:	dfc00217 	ldw	ra,8(sp)
  20acb0:	dc400117 	ldw	r17,4(sp)
  20acb4:	dc000017 	ldw	r16,0(sp)
  20acb8:	dec00304 	addi	sp,sp,12
  20acbc:	f800283a 	ret
  20acc0:	80c00017 	ldw	r3,0(r16)
  20acc4:	183ff926 	beq	r3,zero,20acac <_gp+0xffdf90c8>
  20acc8:	88c00015 	stw	r3,0(r17)
  20accc:	003ff706 	br	20acac <_gp+0xffdf90c8>

0020acd0 <_lseek_r>:
  20acd0:	defffd04 	addi	sp,sp,-12
  20acd4:	2805883a 	mov	r2,r5
  20acd8:	dc000015 	stw	r16,0(sp)
  20acdc:	04001074 	movhi	r16,65
  20ace0:	dc400115 	stw	r17,4(sp)
  20ace4:	300b883a 	mov	r5,r6
  20ace8:	84271504 	addi	r16,r16,-25516
  20acec:	2023883a 	mov	r17,r4
  20acf0:	380d883a 	mov	r6,r7
  20acf4:	1009883a 	mov	r4,r2
  20acf8:	dfc00215 	stw	ra,8(sp)
  20acfc:	80000015 	stw	zero,0(r16)
  20ad00:	020e9140 	call	20e914 <lseek>
  20ad04:	00ffffc4 	movi	r3,-1
  20ad08:	10c00526 	beq	r2,r3,20ad20 <_lseek_r+0x50>
  20ad0c:	dfc00217 	ldw	ra,8(sp)
  20ad10:	dc400117 	ldw	r17,4(sp)
  20ad14:	dc000017 	ldw	r16,0(sp)
  20ad18:	dec00304 	addi	sp,sp,12
  20ad1c:	f800283a 	ret
  20ad20:	80c00017 	ldw	r3,0(r16)
  20ad24:	183ff926 	beq	r3,zero,20ad0c <_gp+0xffdf9128>
  20ad28:	88c00015 	stw	r3,0(r17)
  20ad2c:	003ff706 	br	20ad0c <_gp+0xffdf9128>

0020ad30 <_read_r>:
  20ad30:	defffd04 	addi	sp,sp,-12
  20ad34:	2805883a 	mov	r2,r5
  20ad38:	dc000015 	stw	r16,0(sp)
  20ad3c:	04001074 	movhi	r16,65
  20ad40:	dc400115 	stw	r17,4(sp)
  20ad44:	300b883a 	mov	r5,r6
  20ad48:	84271504 	addi	r16,r16,-25516
  20ad4c:	2023883a 	mov	r17,r4
  20ad50:	380d883a 	mov	r6,r7
  20ad54:	1009883a 	mov	r4,r2
  20ad58:	dfc00215 	stw	ra,8(sp)
  20ad5c:	80000015 	stw	zero,0(r16)
  20ad60:	020eaf00 	call	20eaf0 <read>
  20ad64:	00ffffc4 	movi	r3,-1
  20ad68:	10c00526 	beq	r2,r3,20ad80 <_read_r+0x50>
  20ad6c:	dfc00217 	ldw	ra,8(sp)
  20ad70:	dc400117 	ldw	r17,4(sp)
  20ad74:	dc000017 	ldw	r16,0(sp)
  20ad78:	dec00304 	addi	sp,sp,12
  20ad7c:	f800283a 	ret
  20ad80:	80c00017 	ldw	r3,0(r16)
  20ad84:	183ff926 	beq	r3,zero,20ad6c <_gp+0xffdf9188>
  20ad88:	88c00015 	stw	r3,0(r17)
  20ad8c:	003ff706 	br	20ad6c <_gp+0xffdf9188>

0020ad90 <__swbuf_r>:
  20ad90:	defffb04 	addi	sp,sp,-20
  20ad94:	dcc00315 	stw	r19,12(sp)
  20ad98:	dc800215 	stw	r18,8(sp)
  20ad9c:	dc000015 	stw	r16,0(sp)
  20ada0:	dfc00415 	stw	ra,16(sp)
  20ada4:	dc400115 	stw	r17,4(sp)
  20ada8:	2025883a 	mov	r18,r4
  20adac:	2827883a 	mov	r19,r5
  20adb0:	3021883a 	mov	r16,r6
  20adb4:	20000226 	beq	r4,zero,20adc0 <__swbuf_r+0x30>
  20adb8:	20800e17 	ldw	r2,56(r4)
  20adbc:	10004226 	beq	r2,zero,20aec8 <__swbuf_r+0x138>
  20adc0:	80800617 	ldw	r2,24(r16)
  20adc4:	8100030b 	ldhu	r4,12(r16)
  20adc8:	80800215 	stw	r2,8(r16)
  20adcc:	2080020c 	andi	r2,r4,8
  20add0:	10003626 	beq	r2,zero,20aeac <__swbuf_r+0x11c>
  20add4:	80c00417 	ldw	r3,16(r16)
  20add8:	18003426 	beq	r3,zero,20aeac <__swbuf_r+0x11c>
  20addc:	2088000c 	andi	r2,r4,8192
  20ade0:	9c403fcc 	andi	r17,r19,255
  20ade4:	10001a26 	beq	r2,zero,20ae50 <__swbuf_r+0xc0>
  20ade8:	80800017 	ldw	r2,0(r16)
  20adec:	81000517 	ldw	r4,20(r16)
  20adf0:	10c7c83a 	sub	r3,r2,r3
  20adf4:	1900200e 	bge	r3,r4,20ae78 <__swbuf_r+0xe8>
  20adf8:	18c00044 	addi	r3,r3,1
  20adfc:	81000217 	ldw	r4,8(r16)
  20ae00:	11400044 	addi	r5,r2,1
  20ae04:	81400015 	stw	r5,0(r16)
  20ae08:	213fffc4 	addi	r4,r4,-1
  20ae0c:	81000215 	stw	r4,8(r16)
  20ae10:	14c00005 	stb	r19,0(r2)
  20ae14:	80800517 	ldw	r2,20(r16)
  20ae18:	10c01e26 	beq	r2,r3,20ae94 <__swbuf_r+0x104>
  20ae1c:	8080030b 	ldhu	r2,12(r16)
  20ae20:	1080004c 	andi	r2,r2,1
  20ae24:	10000226 	beq	r2,zero,20ae30 <__swbuf_r+0xa0>
  20ae28:	00800284 	movi	r2,10
  20ae2c:	88801926 	beq	r17,r2,20ae94 <__swbuf_r+0x104>
  20ae30:	8805883a 	mov	r2,r17
  20ae34:	dfc00417 	ldw	ra,16(sp)
  20ae38:	dcc00317 	ldw	r19,12(sp)
  20ae3c:	dc800217 	ldw	r18,8(sp)
  20ae40:	dc400117 	ldw	r17,4(sp)
  20ae44:	dc000017 	ldw	r16,0(sp)
  20ae48:	dec00504 	addi	sp,sp,20
  20ae4c:	f800283a 	ret
  20ae50:	81401917 	ldw	r5,100(r16)
  20ae54:	00b7ffc4 	movi	r2,-8193
  20ae58:	21080014 	ori	r4,r4,8192
  20ae5c:	2884703a 	and	r2,r5,r2
  20ae60:	80801915 	stw	r2,100(r16)
  20ae64:	80800017 	ldw	r2,0(r16)
  20ae68:	8100030d 	sth	r4,12(r16)
  20ae6c:	81000517 	ldw	r4,20(r16)
  20ae70:	10c7c83a 	sub	r3,r2,r3
  20ae74:	193fe016 	blt	r3,r4,20adf8 <_gp+0xffdf9214>
  20ae78:	800b883a 	mov	r5,r16
  20ae7c:	9009883a 	mov	r4,r18
  20ae80:	020597c0 	call	20597c <_fflush_r>
  20ae84:	1000071e 	bne	r2,zero,20aea4 <__swbuf_r+0x114>
  20ae88:	80800017 	ldw	r2,0(r16)
  20ae8c:	00c00044 	movi	r3,1
  20ae90:	003fda06 	br	20adfc <_gp+0xffdf9218>
  20ae94:	800b883a 	mov	r5,r16
  20ae98:	9009883a 	mov	r4,r18
  20ae9c:	020597c0 	call	20597c <_fflush_r>
  20aea0:	103fe326 	beq	r2,zero,20ae30 <_gp+0xffdf924c>
  20aea4:	00bfffc4 	movi	r2,-1
  20aea8:	003fe206 	br	20ae34 <_gp+0xffdf9250>
  20aeac:	800b883a 	mov	r5,r16
  20aeb0:	9009883a 	mov	r4,r18
  20aeb4:	0203d5c0 	call	203d5c <__swsetup_r>
  20aeb8:	103ffa1e 	bne	r2,zero,20aea4 <_gp+0xffdf92c0>
  20aebc:	8100030b 	ldhu	r4,12(r16)
  20aec0:	80c00417 	ldw	r3,16(r16)
  20aec4:	003fc506 	br	20addc <_gp+0xffdf91f8>
  20aec8:	0205d680 	call	205d68 <__sinit>
  20aecc:	003fbc06 	br	20adc0 <_gp+0xffdf91dc>

0020aed0 <__swbuf>:
  20aed0:	00801074 	movhi	r2,65
  20aed4:	10a6fa04 	addi	r2,r2,-25624
  20aed8:	280d883a 	mov	r6,r5
  20aedc:	200b883a 	mov	r5,r4
  20aee0:	11000017 	ldw	r4,0(r2)
  20aee4:	020ad901 	jmpi	20ad90 <__swbuf_r>

0020aee8 <_wcrtomb_r>:
  20aee8:	defff604 	addi	sp,sp,-40
  20aeec:	00801074 	movhi	r2,65
  20aef0:	dc800815 	stw	r18,32(sp)
  20aef4:	dc400715 	stw	r17,28(sp)
  20aef8:	dc000615 	stw	r16,24(sp)
  20aefc:	10a6fe04 	addi	r2,r2,-25608
  20af00:	dfc00915 	stw	ra,36(sp)
  20af04:	2021883a 	mov	r16,r4
  20af08:	3823883a 	mov	r17,r7
  20af0c:	14800017 	ldw	r18,0(r2)
  20af10:	28001426 	beq	r5,zero,20af64 <_wcrtomb_r+0x7c>
  20af14:	d9400415 	stw	r5,16(sp)
  20af18:	d9800515 	stw	r6,20(sp)
  20af1c:	02068b80 	call	2068b8 <__locale_charset>
  20af20:	d9800517 	ldw	r6,20(sp)
  20af24:	d9400417 	ldw	r5,16(sp)
  20af28:	100f883a 	mov	r7,r2
  20af2c:	dc400015 	stw	r17,0(sp)
  20af30:	8009883a 	mov	r4,r16
  20af34:	903ee83a 	callr	r18
  20af38:	00ffffc4 	movi	r3,-1
  20af3c:	10c0031e 	bne	r2,r3,20af4c <_wcrtomb_r+0x64>
  20af40:	88000015 	stw	zero,0(r17)
  20af44:	00c02284 	movi	r3,138
  20af48:	80c00015 	stw	r3,0(r16)
  20af4c:	dfc00917 	ldw	ra,36(sp)
  20af50:	dc800817 	ldw	r18,32(sp)
  20af54:	dc400717 	ldw	r17,28(sp)
  20af58:	dc000617 	ldw	r16,24(sp)
  20af5c:	dec00a04 	addi	sp,sp,40
  20af60:	f800283a 	ret
  20af64:	02068b80 	call	2068b8 <__locale_charset>
  20af68:	100f883a 	mov	r7,r2
  20af6c:	dc400015 	stw	r17,0(sp)
  20af70:	000d883a 	mov	r6,zero
  20af74:	d9400104 	addi	r5,sp,4
  20af78:	8009883a 	mov	r4,r16
  20af7c:	903ee83a 	callr	r18
  20af80:	003fed06 	br	20af38 <_gp+0xffdf9354>

0020af84 <wcrtomb>:
  20af84:	defff604 	addi	sp,sp,-40
  20af88:	00801074 	movhi	r2,65
  20af8c:	dc800615 	stw	r18,24(sp)
  20af90:	dc400515 	stw	r17,20(sp)
  20af94:	10a6fa04 	addi	r2,r2,-25624
  20af98:	dfc00915 	stw	ra,36(sp)
  20af9c:	dd000815 	stw	r20,32(sp)
  20afa0:	dcc00715 	stw	r19,28(sp)
  20afa4:	dc000415 	stw	r16,16(sp)
  20afa8:	3025883a 	mov	r18,r6
  20afac:	14400017 	ldw	r17,0(r2)
  20afb0:	20001926 	beq	r4,zero,20b018 <wcrtomb+0x94>
  20afb4:	00801074 	movhi	r2,65
  20afb8:	10a6fe04 	addi	r2,r2,-25608
  20afbc:	15000017 	ldw	r20,0(r2)
  20afc0:	2021883a 	mov	r16,r4
  20afc4:	2827883a 	mov	r19,r5
  20afc8:	02068b80 	call	2068b8 <__locale_charset>
  20afcc:	100f883a 	mov	r7,r2
  20afd0:	dc800015 	stw	r18,0(sp)
  20afd4:	980d883a 	mov	r6,r19
  20afd8:	800b883a 	mov	r5,r16
  20afdc:	8809883a 	mov	r4,r17
  20afe0:	a03ee83a 	callr	r20
  20afe4:	00ffffc4 	movi	r3,-1
  20afe8:	10c0031e 	bne	r2,r3,20aff8 <wcrtomb+0x74>
  20afec:	90000015 	stw	zero,0(r18)
  20aff0:	00c02284 	movi	r3,138
  20aff4:	88c00015 	stw	r3,0(r17)
  20aff8:	dfc00917 	ldw	ra,36(sp)
  20affc:	dd000817 	ldw	r20,32(sp)
  20b000:	dcc00717 	ldw	r19,28(sp)
  20b004:	dc800617 	ldw	r18,24(sp)
  20b008:	dc400517 	ldw	r17,20(sp)
  20b00c:	dc000417 	ldw	r16,16(sp)
  20b010:	dec00a04 	addi	sp,sp,40
  20b014:	f800283a 	ret
  20b018:	00801074 	movhi	r2,65
  20b01c:	10a6fe04 	addi	r2,r2,-25608
  20b020:	14000017 	ldw	r16,0(r2)
  20b024:	02068b80 	call	2068b8 <__locale_charset>
  20b028:	100f883a 	mov	r7,r2
  20b02c:	dc800015 	stw	r18,0(sp)
  20b030:	000d883a 	mov	r6,zero
  20b034:	d9400104 	addi	r5,sp,4
  20b038:	8809883a 	mov	r4,r17
  20b03c:	803ee83a 	callr	r16
  20b040:	003fe806 	br	20afe4 <_gp+0xffdf9400>

0020b044 <__ascii_wctomb>:
  20b044:	28000526 	beq	r5,zero,20b05c <__ascii_wctomb+0x18>
  20b048:	00803fc4 	movi	r2,255
  20b04c:	11800536 	bltu	r2,r6,20b064 <__ascii_wctomb+0x20>
  20b050:	29800005 	stb	r6,0(r5)
  20b054:	00800044 	movi	r2,1
  20b058:	f800283a 	ret
  20b05c:	0005883a 	mov	r2,zero
  20b060:	f800283a 	ret
  20b064:	00802284 	movi	r2,138
  20b068:	20800015 	stw	r2,0(r4)
  20b06c:	00bfffc4 	movi	r2,-1
  20b070:	f800283a 	ret

0020b074 <_wctomb_r>:
  20b074:	00801074 	movhi	r2,65
  20b078:	defff904 	addi	sp,sp,-28
  20b07c:	10a6fe04 	addi	r2,r2,-25608
  20b080:	dfc00615 	stw	ra,24(sp)
  20b084:	dc400515 	stw	r17,20(sp)
  20b088:	dc000415 	stw	r16,16(sp)
  20b08c:	3823883a 	mov	r17,r7
  20b090:	14000017 	ldw	r16,0(r2)
  20b094:	d9000115 	stw	r4,4(sp)
  20b098:	d9400215 	stw	r5,8(sp)
  20b09c:	d9800315 	stw	r6,12(sp)
  20b0a0:	02068b80 	call	2068b8 <__locale_charset>
  20b0a4:	d9800317 	ldw	r6,12(sp)
  20b0a8:	d9400217 	ldw	r5,8(sp)
  20b0ac:	d9000117 	ldw	r4,4(sp)
  20b0b0:	100f883a 	mov	r7,r2
  20b0b4:	dc400015 	stw	r17,0(sp)
  20b0b8:	803ee83a 	callr	r16
  20b0bc:	dfc00617 	ldw	ra,24(sp)
  20b0c0:	dc400517 	ldw	r17,20(sp)
  20b0c4:	dc000417 	ldw	r16,16(sp)
  20b0c8:	dec00704 	addi	sp,sp,28
  20b0cc:	f800283a 	ret

0020b0d0 <__udivdi3>:
  20b0d0:	defff404 	addi	sp,sp,-48
  20b0d4:	dcc00515 	stw	r19,20(sp)
  20b0d8:	dc000215 	stw	r16,8(sp)
  20b0dc:	dfc00b15 	stw	ra,44(sp)
  20b0e0:	df000a15 	stw	fp,40(sp)
  20b0e4:	ddc00915 	stw	r23,36(sp)
  20b0e8:	dd800815 	stw	r22,32(sp)
  20b0ec:	dd400715 	stw	r21,28(sp)
  20b0f0:	dd000615 	stw	r20,24(sp)
  20b0f4:	dc800415 	stw	r18,16(sp)
  20b0f8:	dc400315 	stw	r17,12(sp)
  20b0fc:	2027883a 	mov	r19,r4
  20b100:	2821883a 	mov	r16,r5
  20b104:	3800461e 	bne	r7,zero,20b220 <__udivdi3+0x150>
  20b108:	3023883a 	mov	r17,r6
  20b10c:	2025883a 	mov	r18,r4
  20b110:	2980572e 	bgeu	r5,r6,20b270 <__udivdi3+0x1a0>
  20b114:	00bfffd4 	movui	r2,65535
  20b118:	282d883a 	mov	r22,r5
  20b11c:	1180b236 	bltu	r2,r6,20b3e8 <__udivdi3+0x318>
  20b120:	00803fc4 	movi	r2,255
  20b124:	1185803a 	cmpltu	r2,r2,r6
  20b128:	100490fa 	slli	r2,r2,3
  20b12c:	3086d83a 	srl	r3,r6,r2
  20b130:	01000874 	movhi	r4,33
  20b134:	21100204 	addi	r4,r4,16392
  20b138:	20c7883a 	add	r3,r4,r3
  20b13c:	18c00003 	ldbu	r3,0(r3)
  20b140:	1885883a 	add	r2,r3,r2
  20b144:	00c00804 	movi	r3,32
  20b148:	1887c83a 	sub	r3,r3,r2
  20b14c:	18000526 	beq	r3,zero,20b164 <__udivdi3+0x94>
  20b150:	80e0983a 	sll	r16,r16,r3
  20b154:	9884d83a 	srl	r2,r19,r2
  20b158:	30e2983a 	sll	r17,r6,r3
  20b15c:	98e4983a 	sll	r18,r19,r3
  20b160:	142cb03a 	or	r22,r2,r16
  20b164:	882ad43a 	srli	r21,r17,16
  20b168:	b009883a 	mov	r4,r22
  20b16c:	8d3fffcc 	andi	r20,r17,65535
  20b170:	a80b883a 	mov	r5,r21
  20b174:	0200bbc0 	call	200bbc <__umodsi3>
  20b178:	b009883a 	mov	r4,r22
  20b17c:	a80b883a 	mov	r5,r21
  20b180:	1027883a 	mov	r19,r2
  20b184:	0200b580 	call	200b58 <__udivsi3>
  20b188:	100b883a 	mov	r5,r2
  20b18c:	a009883a 	mov	r4,r20
  20b190:	102d883a 	mov	r22,r2
  20b194:	02017a80 	call	2017a8 <__mulsi3>
  20b198:	9826943a 	slli	r19,r19,16
  20b19c:	9006d43a 	srli	r3,r18,16
  20b1a0:	1cc6b03a 	or	r3,r3,r19
  20b1a4:	1880052e 	bgeu	r3,r2,20b1bc <__udivdi3+0xec>
  20b1a8:	1c47883a 	add	r3,r3,r17
  20b1ac:	b13fffc4 	addi	r4,r22,-1
  20b1b0:	1c400136 	bltu	r3,r17,20b1b8 <__udivdi3+0xe8>
  20b1b4:	18814236 	bltu	r3,r2,20b6c0 <__udivdi3+0x5f0>
  20b1b8:	202d883a 	mov	r22,r4
  20b1bc:	18a1c83a 	sub	r16,r3,r2
  20b1c0:	8009883a 	mov	r4,r16
  20b1c4:	a80b883a 	mov	r5,r21
  20b1c8:	0200bbc0 	call	200bbc <__umodsi3>
  20b1cc:	1027883a 	mov	r19,r2
  20b1d0:	8009883a 	mov	r4,r16
  20b1d4:	a80b883a 	mov	r5,r21
  20b1d8:	9826943a 	slli	r19,r19,16
  20b1dc:	0200b580 	call	200b58 <__udivsi3>
  20b1e0:	100b883a 	mov	r5,r2
  20b1e4:	a009883a 	mov	r4,r20
  20b1e8:	94bfffcc 	andi	r18,r18,65535
  20b1ec:	1021883a 	mov	r16,r2
  20b1f0:	94e4b03a 	or	r18,r18,r19
  20b1f4:	02017a80 	call	2017a8 <__mulsi3>
  20b1f8:	9080052e 	bgeu	r18,r2,20b210 <__udivdi3+0x140>
  20b1fc:	8ca5883a 	add	r18,r17,r18
  20b200:	80ffffc4 	addi	r3,r16,-1
  20b204:	94410c36 	bltu	r18,r17,20b638 <__udivdi3+0x568>
  20b208:	90810b2e 	bgeu	r18,r2,20b638 <__udivdi3+0x568>
  20b20c:	843fff84 	addi	r16,r16,-2
  20b210:	b004943a 	slli	r2,r22,16
  20b214:	0007883a 	mov	r3,zero
  20b218:	1404b03a 	or	r2,r2,r16
  20b21c:	00005e06 	br	20b398 <__udivdi3+0x2c8>
  20b220:	29c05b36 	bltu	r5,r7,20b390 <__udivdi3+0x2c0>
  20b224:	00bfffd4 	movui	r2,65535
  20b228:	11c0672e 	bgeu	r2,r7,20b3c8 <__udivdi3+0x2f8>
  20b22c:	00804034 	movhi	r2,256
  20b230:	10bfffc4 	addi	r2,r2,-1
  20b234:	11c10a36 	bltu	r2,r7,20b660 <__udivdi3+0x590>
  20b238:	00800404 	movi	r2,16
  20b23c:	3886d83a 	srl	r3,r7,r2
  20b240:	01000874 	movhi	r4,33
  20b244:	21100204 	addi	r4,r4,16392
  20b248:	20c7883a 	add	r3,r4,r3
  20b24c:	18c00003 	ldbu	r3,0(r3)
  20b250:	05c00804 	movi	r23,32
  20b254:	1885883a 	add	r2,r3,r2
  20b258:	b8afc83a 	sub	r23,r23,r2
  20b25c:	b800671e 	bne	r23,zero,20b3fc <__udivdi3+0x32c>
  20b260:	3c010536 	bltu	r7,r16,20b678 <__udivdi3+0x5a8>
  20b264:	9985403a 	cmpgeu	r2,r19,r6
  20b268:	0007883a 	mov	r3,zero
  20b26c:	00004a06 	br	20b398 <__udivdi3+0x2c8>
  20b270:	3000041e 	bne	r6,zero,20b284 <__udivdi3+0x1b4>
  20b274:	000b883a 	mov	r5,zero
  20b278:	01000044 	movi	r4,1
  20b27c:	0200b580 	call	200b58 <__udivsi3>
  20b280:	1023883a 	mov	r17,r2
  20b284:	00bfffd4 	movui	r2,65535
  20b288:	1440532e 	bgeu	r2,r17,20b3d8 <__udivdi3+0x308>
  20b28c:	00804034 	movhi	r2,256
  20b290:	10bfffc4 	addi	r2,r2,-1
  20b294:	1440f436 	bltu	r2,r17,20b668 <__udivdi3+0x598>
  20b298:	00800404 	movi	r2,16
  20b29c:	8886d83a 	srl	r3,r17,r2
  20b2a0:	01000874 	movhi	r4,33
  20b2a4:	21100204 	addi	r4,r4,16392
  20b2a8:	20c7883a 	add	r3,r4,r3
  20b2ac:	18c00003 	ldbu	r3,0(r3)
  20b2b0:	1885883a 	add	r2,r3,r2
  20b2b4:	00c00804 	movi	r3,32
  20b2b8:	1887c83a 	sub	r3,r3,r2
  20b2bc:	1800a51e 	bne	r3,zero,20b554 <__udivdi3+0x484>
  20b2c0:	882ad43a 	srli	r21,r17,16
  20b2c4:	8461c83a 	sub	r16,r16,r17
  20b2c8:	8d3fffcc 	andi	r20,r17,65535
  20b2cc:	00c00044 	movi	r3,1
  20b2d0:	a80b883a 	mov	r5,r21
  20b2d4:	8009883a 	mov	r4,r16
  20b2d8:	d8c00115 	stw	r3,4(sp)
  20b2dc:	0200bbc0 	call	200bbc <__umodsi3>
  20b2e0:	a80b883a 	mov	r5,r21
  20b2e4:	8009883a 	mov	r4,r16
  20b2e8:	1027883a 	mov	r19,r2
  20b2ec:	0200b580 	call	200b58 <__udivsi3>
  20b2f0:	a00b883a 	mov	r5,r20
  20b2f4:	1009883a 	mov	r4,r2
  20b2f8:	102d883a 	mov	r22,r2
  20b2fc:	02017a80 	call	2017a8 <__mulsi3>
  20b300:	9826943a 	slli	r19,r19,16
  20b304:	900ed43a 	srli	r7,r18,16
  20b308:	d8c00117 	ldw	r3,4(sp)
  20b30c:	3cceb03a 	or	r7,r7,r19
  20b310:	3880052e 	bgeu	r7,r2,20b328 <__udivdi3+0x258>
  20b314:	3c4f883a 	add	r7,r7,r17
  20b318:	b13fffc4 	addi	r4,r22,-1
  20b31c:	3c400136 	bltu	r7,r17,20b324 <__udivdi3+0x254>
  20b320:	3880e436 	bltu	r7,r2,20b6b4 <__udivdi3+0x5e4>
  20b324:	202d883a 	mov	r22,r4
  20b328:	38a1c83a 	sub	r16,r7,r2
  20b32c:	8009883a 	mov	r4,r16
  20b330:	a80b883a 	mov	r5,r21
  20b334:	d8c00115 	stw	r3,4(sp)
  20b338:	0200bbc0 	call	200bbc <__umodsi3>
  20b33c:	1027883a 	mov	r19,r2
  20b340:	8009883a 	mov	r4,r16
  20b344:	a80b883a 	mov	r5,r21
  20b348:	9826943a 	slli	r19,r19,16
  20b34c:	0200b580 	call	200b58 <__udivsi3>
  20b350:	a00b883a 	mov	r5,r20
  20b354:	1009883a 	mov	r4,r2
  20b358:	94bfffcc 	andi	r18,r18,65535
  20b35c:	1021883a 	mov	r16,r2
  20b360:	94e4b03a 	or	r18,r18,r19
  20b364:	02017a80 	call	2017a8 <__mulsi3>
  20b368:	d8c00117 	ldw	r3,4(sp)
  20b36c:	9080052e 	bgeu	r18,r2,20b384 <__udivdi3+0x2b4>
  20b370:	8ca5883a 	add	r18,r17,r18
  20b374:	813fffc4 	addi	r4,r16,-1
  20b378:	9440ad36 	bltu	r18,r17,20b630 <__udivdi3+0x560>
  20b37c:	9080ac2e 	bgeu	r18,r2,20b630 <__udivdi3+0x560>
  20b380:	843fff84 	addi	r16,r16,-2
  20b384:	b004943a 	slli	r2,r22,16
  20b388:	1404b03a 	or	r2,r2,r16
  20b38c:	00000206 	br	20b398 <__udivdi3+0x2c8>
  20b390:	0007883a 	mov	r3,zero
  20b394:	0005883a 	mov	r2,zero
  20b398:	dfc00b17 	ldw	ra,44(sp)
  20b39c:	df000a17 	ldw	fp,40(sp)
  20b3a0:	ddc00917 	ldw	r23,36(sp)
  20b3a4:	dd800817 	ldw	r22,32(sp)
  20b3a8:	dd400717 	ldw	r21,28(sp)
  20b3ac:	dd000617 	ldw	r20,24(sp)
  20b3b0:	dcc00517 	ldw	r19,20(sp)
  20b3b4:	dc800417 	ldw	r18,16(sp)
  20b3b8:	dc400317 	ldw	r17,12(sp)
  20b3bc:	dc000217 	ldw	r16,8(sp)
  20b3c0:	dec00c04 	addi	sp,sp,48
  20b3c4:	f800283a 	ret
  20b3c8:	00803fc4 	movi	r2,255
  20b3cc:	11c5803a 	cmpltu	r2,r2,r7
  20b3d0:	100490fa 	slli	r2,r2,3
  20b3d4:	003f9906 	br	20b23c <_gp+0xffdf9658>
  20b3d8:	00803fc4 	movi	r2,255
  20b3dc:	1445803a 	cmpltu	r2,r2,r17
  20b3e0:	100490fa 	slli	r2,r2,3
  20b3e4:	003fad06 	br	20b29c <_gp+0xffdf96b8>
  20b3e8:	00804034 	movhi	r2,256
  20b3ec:	10bfffc4 	addi	r2,r2,-1
  20b3f0:	11809f36 	bltu	r2,r6,20b670 <__udivdi3+0x5a0>
  20b3f4:	00800404 	movi	r2,16
  20b3f8:	003f4c06 	br	20b12c <_gp+0xffdf9548>
  20b3fc:	3dce983a 	sll	r7,r7,r23
  20b400:	30b8d83a 	srl	fp,r6,r2
  20b404:	80a2d83a 	srl	r17,r16,r2
  20b408:	35cc983a 	sll	r6,r6,r23
  20b40c:	3f38b03a 	or	fp,r7,fp
  20b410:	e024d43a 	srli	r18,fp,16
  20b414:	9884d83a 	srl	r2,r19,r2
  20b418:	85e0983a 	sll	r16,r16,r23
  20b41c:	8809883a 	mov	r4,r17
  20b420:	900b883a 	mov	r5,r18
  20b424:	d9800015 	stw	r6,0(sp)
  20b428:	1420b03a 	or	r16,r2,r16
  20b42c:	0200bbc0 	call	200bbc <__umodsi3>
  20b430:	900b883a 	mov	r5,r18
  20b434:	8809883a 	mov	r4,r17
  20b438:	1029883a 	mov	r20,r2
  20b43c:	e5bfffcc 	andi	r22,fp,65535
  20b440:	0200b580 	call	200b58 <__udivsi3>
  20b444:	100b883a 	mov	r5,r2
  20b448:	b009883a 	mov	r4,r22
  20b44c:	102b883a 	mov	r21,r2
  20b450:	02017a80 	call	2017a8 <__mulsi3>
  20b454:	a028943a 	slli	r20,r20,16
  20b458:	8006d43a 	srli	r3,r16,16
  20b45c:	1d06b03a 	or	r3,r3,r20
  20b460:	1880042e 	bgeu	r3,r2,20b474 <__udivdi3+0x3a4>
  20b464:	1f07883a 	add	r3,r3,fp
  20b468:	a93fffc4 	addi	r4,r21,-1
  20b46c:	1f00892e 	bgeu	r3,fp,20b694 <__udivdi3+0x5c4>
  20b470:	202b883a 	mov	r21,r4
  20b474:	18a3c83a 	sub	r17,r3,r2
  20b478:	8809883a 	mov	r4,r17
  20b47c:	900b883a 	mov	r5,r18
  20b480:	0200bbc0 	call	200bbc <__umodsi3>
  20b484:	1029883a 	mov	r20,r2
  20b488:	8809883a 	mov	r4,r17
  20b48c:	900b883a 	mov	r5,r18
  20b490:	a028943a 	slli	r20,r20,16
  20b494:	0200b580 	call	200b58 <__udivsi3>
  20b498:	100b883a 	mov	r5,r2
  20b49c:	b009883a 	mov	r4,r22
  20b4a0:	843fffcc 	andi	r16,r16,65535
  20b4a4:	1023883a 	mov	r17,r2
  20b4a8:	8520b03a 	or	r16,r16,r20
  20b4ac:	02017a80 	call	2017a8 <__mulsi3>
  20b4b0:	8080042e 	bgeu	r16,r2,20b4c4 <__udivdi3+0x3f4>
  20b4b4:	8721883a 	add	r16,r16,fp
  20b4b8:	88ffffc4 	addi	r3,r17,-1
  20b4bc:	8700712e 	bgeu	r16,fp,20b684 <__udivdi3+0x5b4>
  20b4c0:	1823883a 	mov	r17,r3
  20b4c4:	a80e943a 	slli	r7,r21,16
  20b4c8:	d8c00017 	ldw	r3,0(sp)
  20b4cc:	80a1c83a 	sub	r16,r16,r2
  20b4d0:	3c64b03a 	or	r18,r7,r17
  20b4d4:	1d3fffcc 	andi	r20,r3,65535
  20b4d8:	9022d43a 	srli	r17,r18,16
  20b4dc:	95bfffcc 	andi	r22,r18,65535
  20b4e0:	a00b883a 	mov	r5,r20
  20b4e4:	b009883a 	mov	r4,r22
  20b4e8:	182ad43a 	srli	r21,r3,16
  20b4ec:	02017a80 	call	2017a8 <__mulsi3>
  20b4f0:	a00b883a 	mov	r5,r20
  20b4f4:	8809883a 	mov	r4,r17
  20b4f8:	1039883a 	mov	fp,r2
  20b4fc:	02017a80 	call	2017a8 <__mulsi3>
  20b500:	8809883a 	mov	r4,r17
  20b504:	a80b883a 	mov	r5,r21
  20b508:	1029883a 	mov	r20,r2
  20b50c:	02017a80 	call	2017a8 <__mulsi3>
  20b510:	a80b883a 	mov	r5,r21
  20b514:	b009883a 	mov	r4,r22
  20b518:	1023883a 	mov	r17,r2
  20b51c:	02017a80 	call	2017a8 <__mulsi3>
  20b520:	e006d43a 	srli	r3,fp,16
  20b524:	1505883a 	add	r2,r2,r20
  20b528:	1887883a 	add	r3,r3,r2
  20b52c:	1d00022e 	bgeu	r3,r20,20b538 <__udivdi3+0x468>
  20b530:	00800074 	movhi	r2,1
  20b534:	88a3883a 	add	r17,r17,r2
  20b538:	1804d43a 	srli	r2,r3,16
  20b53c:	1463883a 	add	r17,r2,r17
  20b540:	84404436 	bltu	r16,r17,20b654 <__udivdi3+0x584>
  20b544:	84403e26 	beq	r16,r17,20b640 <__udivdi3+0x570>
  20b548:	9005883a 	mov	r2,r18
  20b54c:	0007883a 	mov	r3,zero
  20b550:	003f9106 	br	20b398 <_gp+0xffdf97b4>
  20b554:	88e2983a 	sll	r17,r17,r3
  20b558:	80aed83a 	srl	r23,r16,r2
  20b55c:	80e0983a 	sll	r16,r16,r3
  20b560:	882ad43a 	srli	r21,r17,16
  20b564:	9884d83a 	srl	r2,r19,r2
  20b568:	b809883a 	mov	r4,r23
  20b56c:	a80b883a 	mov	r5,r21
  20b570:	98e4983a 	sll	r18,r19,r3
  20b574:	142cb03a 	or	r22,r2,r16
  20b578:	0200bbc0 	call	200bbc <__umodsi3>
  20b57c:	b809883a 	mov	r4,r23
  20b580:	a80b883a 	mov	r5,r21
  20b584:	1027883a 	mov	r19,r2
  20b588:	8d3fffcc 	andi	r20,r17,65535
  20b58c:	0200b580 	call	200b58 <__udivsi3>
  20b590:	a009883a 	mov	r4,r20
  20b594:	100b883a 	mov	r5,r2
  20b598:	102f883a 	mov	r23,r2
  20b59c:	02017a80 	call	2017a8 <__mulsi3>
  20b5a0:	9826943a 	slli	r19,r19,16
  20b5a4:	b008d43a 	srli	r4,r22,16
  20b5a8:	24c8b03a 	or	r4,r4,r19
  20b5ac:	2080062e 	bgeu	r4,r2,20b5c8 <__udivdi3+0x4f8>
  20b5b0:	2449883a 	add	r4,r4,r17
  20b5b4:	b8ffffc4 	addi	r3,r23,-1
  20b5b8:	24403c36 	bltu	r4,r17,20b6ac <__udivdi3+0x5dc>
  20b5bc:	20803b2e 	bgeu	r4,r2,20b6ac <__udivdi3+0x5dc>
  20b5c0:	bdffff84 	addi	r23,r23,-2
  20b5c4:	2449883a 	add	r4,r4,r17
  20b5c8:	20a1c83a 	sub	r16,r4,r2
  20b5cc:	a80b883a 	mov	r5,r21
  20b5d0:	8009883a 	mov	r4,r16
  20b5d4:	0200bbc0 	call	200bbc <__umodsi3>
  20b5d8:	a80b883a 	mov	r5,r21
  20b5dc:	8009883a 	mov	r4,r16
  20b5e0:	1027883a 	mov	r19,r2
  20b5e4:	0200b580 	call	200b58 <__udivsi3>
  20b5e8:	a009883a 	mov	r4,r20
  20b5ec:	100b883a 	mov	r5,r2
  20b5f0:	9826943a 	slli	r19,r19,16
  20b5f4:	1039883a 	mov	fp,r2
  20b5f8:	02017a80 	call	2017a8 <__mulsi3>
  20b5fc:	b13fffcc 	andi	r4,r22,65535
  20b600:	24c8b03a 	or	r4,r4,r19
  20b604:	2080062e 	bgeu	r4,r2,20b620 <__udivdi3+0x550>
  20b608:	2449883a 	add	r4,r4,r17
  20b60c:	e0ffffc4 	addi	r3,fp,-1
  20b610:	24402436 	bltu	r4,r17,20b6a4 <__udivdi3+0x5d4>
  20b614:	2080232e 	bgeu	r4,r2,20b6a4 <__udivdi3+0x5d4>
  20b618:	e73fff84 	addi	fp,fp,-2
  20b61c:	2449883a 	add	r4,r4,r17
  20b620:	b82e943a 	slli	r23,r23,16
  20b624:	20a1c83a 	sub	r16,r4,r2
  20b628:	bf06b03a 	or	r3,r23,fp
  20b62c:	003f2806 	br	20b2d0 <_gp+0xffdf96ec>
  20b630:	2021883a 	mov	r16,r4
  20b634:	003f5306 	br	20b384 <_gp+0xffdf97a0>
  20b638:	1821883a 	mov	r16,r3
  20b63c:	003ef406 	br	20b210 <_gp+0xffdf962c>
  20b640:	1806943a 	slli	r3,r3,16
  20b644:	9de6983a 	sll	r19,r19,r23
  20b648:	e73fffcc 	andi	fp,fp,65535
  20b64c:	1f07883a 	add	r3,r3,fp
  20b650:	98ffbd2e 	bgeu	r19,r3,20b548 <_gp+0xffdf9964>
  20b654:	90bfffc4 	addi	r2,r18,-1
  20b658:	0007883a 	mov	r3,zero
  20b65c:	003f4e06 	br	20b398 <_gp+0xffdf97b4>
  20b660:	00800604 	movi	r2,24
  20b664:	003ef506 	br	20b23c <_gp+0xffdf9658>
  20b668:	00800604 	movi	r2,24
  20b66c:	003f0b06 	br	20b29c <_gp+0xffdf96b8>
  20b670:	00800604 	movi	r2,24
  20b674:	003ead06 	br	20b12c <_gp+0xffdf9548>
  20b678:	0007883a 	mov	r3,zero
  20b67c:	00800044 	movi	r2,1
  20b680:	003f4506 	br	20b398 <_gp+0xffdf97b4>
  20b684:	80bf8e2e 	bgeu	r16,r2,20b4c0 <_gp+0xffdf98dc>
  20b688:	8c7fff84 	addi	r17,r17,-2
  20b68c:	8721883a 	add	r16,r16,fp
  20b690:	003f8c06 	br	20b4c4 <_gp+0xffdf98e0>
  20b694:	18bf762e 	bgeu	r3,r2,20b470 <_gp+0xffdf988c>
  20b698:	ad7fff84 	addi	r21,r21,-2
  20b69c:	1f07883a 	add	r3,r3,fp
  20b6a0:	003f7406 	br	20b474 <_gp+0xffdf9890>
  20b6a4:	1839883a 	mov	fp,r3
  20b6a8:	003fdd06 	br	20b620 <_gp+0xffdf9a3c>
  20b6ac:	182f883a 	mov	r23,r3
  20b6b0:	003fc506 	br	20b5c8 <_gp+0xffdf99e4>
  20b6b4:	b5bfff84 	addi	r22,r22,-2
  20b6b8:	3c4f883a 	add	r7,r7,r17
  20b6bc:	003f1a06 	br	20b328 <_gp+0xffdf9744>
  20b6c0:	b5bfff84 	addi	r22,r22,-2
  20b6c4:	1c47883a 	add	r3,r3,r17
  20b6c8:	003ebc06 	br	20b1bc <_gp+0xffdf95d8>

0020b6cc <__umoddi3>:
  20b6cc:	defff304 	addi	sp,sp,-52
  20b6d0:	df000b15 	stw	fp,44(sp)
  20b6d4:	dc400415 	stw	r17,16(sp)
  20b6d8:	dc000315 	stw	r16,12(sp)
  20b6dc:	dfc00c15 	stw	ra,48(sp)
  20b6e0:	ddc00a15 	stw	r23,40(sp)
  20b6e4:	dd800915 	stw	r22,36(sp)
  20b6e8:	dd400815 	stw	r21,32(sp)
  20b6ec:	dd000715 	stw	r20,28(sp)
  20b6f0:	dcc00615 	stw	r19,24(sp)
  20b6f4:	dc800515 	stw	r18,20(sp)
  20b6f8:	2021883a 	mov	r16,r4
  20b6fc:	2823883a 	mov	r17,r5
  20b700:	2839883a 	mov	fp,r5
  20b704:	3800401e 	bne	r7,zero,20b808 <__umoddi3+0x13c>
  20b708:	3027883a 	mov	r19,r6
  20b70c:	2029883a 	mov	r20,r4
  20b710:	2980552e 	bgeu	r5,r6,20b868 <__umoddi3+0x19c>
  20b714:	00bfffd4 	movui	r2,65535
  20b718:	1180a236 	bltu	r2,r6,20b9a4 <__umoddi3+0x2d8>
  20b71c:	01003fc4 	movi	r4,255
  20b720:	2189803a 	cmpltu	r4,r4,r6
  20b724:	200890fa 	slli	r4,r4,3
  20b728:	3104d83a 	srl	r2,r6,r4
  20b72c:	00c00874 	movhi	r3,33
  20b730:	18d00204 	addi	r3,r3,16392
  20b734:	1885883a 	add	r2,r3,r2
  20b738:	10c00003 	ldbu	r3,0(r2)
  20b73c:	00800804 	movi	r2,32
  20b740:	1909883a 	add	r4,r3,r4
  20b744:	1125c83a 	sub	r18,r2,r4
  20b748:	90000526 	beq	r18,zero,20b760 <__umoddi3+0x94>
  20b74c:	8ca2983a 	sll	r17,r17,r18
  20b750:	8108d83a 	srl	r4,r16,r4
  20b754:	34a6983a 	sll	r19,r6,r18
  20b758:	84a8983a 	sll	r20,r16,r18
  20b75c:	2478b03a 	or	fp,r4,r17
  20b760:	982cd43a 	srli	r22,r19,16
  20b764:	e009883a 	mov	r4,fp
  20b768:	9dffffcc 	andi	r23,r19,65535
  20b76c:	b00b883a 	mov	r5,r22
  20b770:	0200bbc0 	call	200bbc <__umodsi3>
  20b774:	b00b883a 	mov	r5,r22
  20b778:	e009883a 	mov	r4,fp
  20b77c:	102b883a 	mov	r21,r2
  20b780:	0200b580 	call	200b58 <__udivsi3>
  20b784:	100b883a 	mov	r5,r2
  20b788:	b809883a 	mov	r4,r23
  20b78c:	02017a80 	call	2017a8 <__mulsi3>
  20b790:	a82a943a 	slli	r21,r21,16
  20b794:	a006d43a 	srli	r3,r20,16
  20b798:	1d46b03a 	or	r3,r3,r21
  20b79c:	1880032e 	bgeu	r3,r2,20b7ac <__umoddi3+0xe0>
  20b7a0:	1cc7883a 	add	r3,r3,r19
  20b7a4:	1cc00136 	bltu	r3,r19,20b7ac <__umoddi3+0xe0>
  20b7a8:	18813136 	bltu	r3,r2,20bc70 <__umoddi3+0x5a4>
  20b7ac:	18a1c83a 	sub	r16,r3,r2
  20b7b0:	b00b883a 	mov	r5,r22
  20b7b4:	8009883a 	mov	r4,r16
  20b7b8:	0200bbc0 	call	200bbc <__umodsi3>
  20b7bc:	b00b883a 	mov	r5,r22
  20b7c0:	8009883a 	mov	r4,r16
  20b7c4:	1023883a 	mov	r17,r2
  20b7c8:	0200b580 	call	200b58 <__udivsi3>
  20b7cc:	100b883a 	mov	r5,r2
  20b7d0:	b809883a 	mov	r4,r23
  20b7d4:	8822943a 	slli	r17,r17,16
  20b7d8:	02017a80 	call	2017a8 <__mulsi3>
  20b7dc:	a0ffffcc 	andi	r3,r20,65535
  20b7e0:	1c46b03a 	or	r3,r3,r17
  20b7e4:	1880042e 	bgeu	r3,r2,20b7f8 <__umoddi3+0x12c>
  20b7e8:	1cc7883a 	add	r3,r3,r19
  20b7ec:	1cc00236 	bltu	r3,r19,20b7f8 <__umoddi3+0x12c>
  20b7f0:	1880012e 	bgeu	r3,r2,20b7f8 <__umoddi3+0x12c>
  20b7f4:	1cc7883a 	add	r3,r3,r19
  20b7f8:	1885c83a 	sub	r2,r3,r2
  20b7fc:	1484d83a 	srl	r2,r2,r18
  20b800:	0007883a 	mov	r3,zero
  20b804:	00005306 	br	20b954 <__umoddi3+0x288>
  20b808:	29c05036 	bltu	r5,r7,20b94c <__umoddi3+0x280>
  20b80c:	00bfffd4 	movui	r2,65535
  20b810:	11c05c2e 	bgeu	r2,r7,20b984 <__umoddi3+0x2b8>
  20b814:	00804034 	movhi	r2,256
  20b818:	10bfffc4 	addi	r2,r2,-1
  20b81c:	11c10636 	bltu	r2,r7,20bc38 <__umoddi3+0x56c>
  20b820:	01000404 	movi	r4,16
  20b824:	3904d83a 	srl	r2,r7,r4
  20b828:	00c00874 	movhi	r3,33
  20b82c:	18d00204 	addi	r3,r3,16392
  20b830:	1885883a 	add	r2,r3,r2
  20b834:	14c00003 	ldbu	r19,0(r2)
  20b838:	00c00804 	movi	r3,32
  20b83c:	9927883a 	add	r19,r19,r4
  20b840:	1ce9c83a 	sub	r20,r3,r19
  20b844:	a0005c1e 	bne	r20,zero,20b9b8 <__umoddi3+0x2ec>
  20b848:	3c400136 	bltu	r7,r17,20b850 <__umoddi3+0x184>
  20b84c:	81810a36 	bltu	r16,r6,20bc78 <__umoddi3+0x5ac>
  20b850:	8185c83a 	sub	r2,r16,r6
  20b854:	89e3c83a 	sub	r17,r17,r7
  20b858:	8089803a 	cmpltu	r4,r16,r2
  20b85c:	8939c83a 	sub	fp,r17,r4
  20b860:	e007883a 	mov	r3,fp
  20b864:	00003b06 	br	20b954 <__umoddi3+0x288>
  20b868:	3000041e 	bne	r6,zero,20b87c <__umoddi3+0x1b0>
  20b86c:	000b883a 	mov	r5,zero
  20b870:	01000044 	movi	r4,1
  20b874:	0200b580 	call	200b58 <__udivsi3>
  20b878:	1027883a 	mov	r19,r2
  20b87c:	00bfffd4 	movui	r2,65535
  20b880:	14c0442e 	bgeu	r2,r19,20b994 <__umoddi3+0x2c8>
  20b884:	00804034 	movhi	r2,256
  20b888:	10bfffc4 	addi	r2,r2,-1
  20b88c:	14c0ec36 	bltu	r2,r19,20bc40 <__umoddi3+0x574>
  20b890:	00800404 	movi	r2,16
  20b894:	9886d83a 	srl	r3,r19,r2
  20b898:	01000874 	movhi	r4,33
  20b89c:	21100204 	addi	r4,r4,16392
  20b8a0:	20c7883a 	add	r3,r4,r3
  20b8a4:	18c00003 	ldbu	r3,0(r3)
  20b8a8:	1887883a 	add	r3,r3,r2
  20b8ac:	00800804 	movi	r2,32
  20b8b0:	10e5c83a 	sub	r18,r2,r3
  20b8b4:	9000ab1e 	bne	r18,zero,20bb64 <__umoddi3+0x498>
  20b8b8:	982cd43a 	srli	r22,r19,16
  20b8bc:	8ce3c83a 	sub	r17,r17,r19
  20b8c0:	9dffffcc 	andi	r23,r19,65535
  20b8c4:	b00b883a 	mov	r5,r22
  20b8c8:	8809883a 	mov	r4,r17
  20b8cc:	0200bbc0 	call	200bbc <__umodsi3>
  20b8d0:	b00b883a 	mov	r5,r22
  20b8d4:	8809883a 	mov	r4,r17
  20b8d8:	102b883a 	mov	r21,r2
  20b8dc:	0200b580 	call	200b58 <__udivsi3>
  20b8e0:	b80b883a 	mov	r5,r23
  20b8e4:	1009883a 	mov	r4,r2
  20b8e8:	02017a80 	call	2017a8 <__mulsi3>
  20b8ec:	a82a943a 	slli	r21,r21,16
  20b8f0:	a006d43a 	srli	r3,r20,16
  20b8f4:	1d46b03a 	or	r3,r3,r21
  20b8f8:	1880042e 	bgeu	r3,r2,20b90c <__umoddi3+0x240>
  20b8fc:	1cc7883a 	add	r3,r3,r19
  20b900:	1cc00236 	bltu	r3,r19,20b90c <__umoddi3+0x240>
  20b904:	1880012e 	bgeu	r3,r2,20b90c <__umoddi3+0x240>
  20b908:	1cc7883a 	add	r3,r3,r19
  20b90c:	18a1c83a 	sub	r16,r3,r2
  20b910:	b00b883a 	mov	r5,r22
  20b914:	8009883a 	mov	r4,r16
  20b918:	0200bbc0 	call	200bbc <__umodsi3>
  20b91c:	1023883a 	mov	r17,r2
  20b920:	b00b883a 	mov	r5,r22
  20b924:	8009883a 	mov	r4,r16
  20b928:	0200b580 	call	200b58 <__udivsi3>
  20b92c:	8822943a 	slli	r17,r17,16
  20b930:	b80b883a 	mov	r5,r23
  20b934:	1009883a 	mov	r4,r2
  20b938:	02017a80 	call	2017a8 <__mulsi3>
  20b93c:	a53fffcc 	andi	r20,r20,65535
  20b940:	a446b03a 	or	r3,r20,r17
  20b944:	18bfac2e 	bgeu	r3,r2,20b7f8 <_gp+0xffdf9c14>
  20b948:	003fa706 	br	20b7e8 <_gp+0xffdf9c04>
  20b94c:	2005883a 	mov	r2,r4
  20b950:	2807883a 	mov	r3,r5
  20b954:	dfc00c17 	ldw	ra,48(sp)
  20b958:	df000b17 	ldw	fp,44(sp)
  20b95c:	ddc00a17 	ldw	r23,40(sp)
  20b960:	dd800917 	ldw	r22,36(sp)
  20b964:	dd400817 	ldw	r21,32(sp)
  20b968:	dd000717 	ldw	r20,28(sp)
  20b96c:	dcc00617 	ldw	r19,24(sp)
  20b970:	dc800517 	ldw	r18,20(sp)
  20b974:	dc400417 	ldw	r17,16(sp)
  20b978:	dc000317 	ldw	r16,12(sp)
  20b97c:	dec00d04 	addi	sp,sp,52
  20b980:	f800283a 	ret
  20b984:	04c03fc4 	movi	r19,255
  20b988:	99c9803a 	cmpltu	r4,r19,r7
  20b98c:	200890fa 	slli	r4,r4,3
  20b990:	003fa406 	br	20b824 <_gp+0xffdf9c40>
  20b994:	00803fc4 	movi	r2,255
  20b998:	14c5803a 	cmpltu	r2,r2,r19
  20b99c:	100490fa 	slli	r2,r2,3
  20b9a0:	003fbc06 	br	20b894 <_gp+0xffdf9cb0>
  20b9a4:	00804034 	movhi	r2,256
  20b9a8:	10bfffc4 	addi	r2,r2,-1
  20b9ac:	1180a636 	bltu	r2,r6,20bc48 <__umoddi3+0x57c>
  20b9b0:	01000404 	movi	r4,16
  20b9b4:	003f5c06 	br	20b728 <_gp+0xffdf9b44>
  20b9b8:	3d0e983a 	sll	r7,r7,r20
  20b9bc:	34ead83a 	srl	r21,r6,r19
  20b9c0:	8cc6d83a 	srl	r3,r17,r19
  20b9c4:	8d10983a 	sll	r8,r17,r20
  20b9c8:	3d6ab03a 	or	r21,r7,r21
  20b9cc:	a82cd43a 	srli	r22,r21,16
  20b9d0:	84e2d83a 	srl	r17,r16,r19
  20b9d4:	1809883a 	mov	r4,r3
  20b9d8:	b00b883a 	mov	r5,r22
  20b9dc:	8a22b03a 	or	r17,r17,r8
  20b9e0:	3524983a 	sll	r18,r6,r20
  20b9e4:	dc400015 	stw	r17,0(sp)
  20b9e8:	d8c00115 	stw	r3,4(sp)
  20b9ec:	0200bbc0 	call	200bbc <__umodsi3>
  20b9f0:	d8c00117 	ldw	r3,4(sp)
  20b9f4:	b00b883a 	mov	r5,r22
  20b9f8:	1039883a 	mov	fp,r2
  20b9fc:	1809883a 	mov	r4,r3
  20ba00:	0200b580 	call	200b58 <__udivsi3>
  20ba04:	adffffcc 	andi	r23,r21,65535
  20ba08:	100b883a 	mov	r5,r2
  20ba0c:	b809883a 	mov	r4,r23
  20ba10:	1023883a 	mov	r17,r2
  20ba14:	02017a80 	call	2017a8 <__mulsi3>
  20ba18:	d9400017 	ldw	r5,0(sp)
  20ba1c:	e008943a 	slli	r4,fp,16
  20ba20:	8520983a 	sll	r16,r16,r20
  20ba24:	2806d43a 	srli	r3,r5,16
  20ba28:	1906b03a 	or	r3,r3,r4
  20ba2c:	1880042e 	bgeu	r3,r2,20ba40 <__umoddi3+0x374>
  20ba30:	1d47883a 	add	r3,r3,r21
  20ba34:	893fffc4 	addi	r4,r17,-1
  20ba38:	1d40892e 	bgeu	r3,r21,20bc60 <__umoddi3+0x594>
  20ba3c:	2023883a 	mov	r17,r4
  20ba40:	18b9c83a 	sub	fp,r3,r2
  20ba44:	b00b883a 	mov	r5,r22
  20ba48:	e009883a 	mov	r4,fp
  20ba4c:	0200bbc0 	call	200bbc <__umodsi3>
  20ba50:	b00b883a 	mov	r5,r22
  20ba54:	e009883a 	mov	r4,fp
  20ba58:	d8800215 	stw	r2,8(sp)
  20ba5c:	0200b580 	call	200b58 <__udivsi3>
  20ba60:	100b883a 	mov	r5,r2
  20ba64:	b809883a 	mov	r4,r23
  20ba68:	102d883a 	mov	r22,r2
  20ba6c:	02017a80 	call	2017a8 <__mulsi3>
  20ba70:	d9800217 	ldw	r6,8(sp)
  20ba74:	d8c00017 	ldw	r3,0(sp)
  20ba78:	300c943a 	slli	r6,r6,16
  20ba7c:	1a3fffcc 	andi	r8,r3,65535
  20ba80:	4190b03a 	or	r8,r8,r6
  20ba84:	4080042e 	bgeu	r8,r2,20ba98 <__umoddi3+0x3cc>
  20ba88:	4551883a 	add	r8,r8,r21
  20ba8c:	b0ffffc4 	addi	r3,r22,-1
  20ba90:	45406f2e 	bgeu	r8,r21,20bc50 <__umoddi3+0x584>
  20ba94:	182d883a 	mov	r22,r3
  20ba98:	880e943a 	slli	r7,r17,16
  20ba9c:	9006d43a 	srli	r3,r18,16
  20baa0:	91bfffcc 	andi	r6,r18,65535
  20baa4:	3dacb03a 	or	r22,r7,r22
  20baa8:	b02ed43a 	srli	r23,r22,16
  20baac:	b5bfffcc 	andi	r22,r22,65535
  20bab0:	300b883a 	mov	r5,r6
  20bab4:	b009883a 	mov	r4,r22
  20bab8:	40a3c83a 	sub	r17,r8,r2
  20babc:	d8c00115 	stw	r3,4(sp)
  20bac0:	d9800215 	stw	r6,8(sp)
  20bac4:	02017a80 	call	2017a8 <__mulsi3>
  20bac8:	d9800217 	ldw	r6,8(sp)
  20bacc:	b809883a 	mov	r4,r23
  20bad0:	1039883a 	mov	fp,r2
  20bad4:	300b883a 	mov	r5,r6
  20bad8:	02017a80 	call	2017a8 <__mulsi3>
  20badc:	d8c00117 	ldw	r3,4(sp)
  20bae0:	b809883a 	mov	r4,r23
  20bae4:	d8800215 	stw	r2,8(sp)
  20bae8:	180b883a 	mov	r5,r3
  20baec:	02017a80 	call	2017a8 <__mulsi3>
  20baf0:	d8c00117 	ldw	r3,4(sp)
  20baf4:	b009883a 	mov	r4,r22
  20baf8:	102f883a 	mov	r23,r2
  20bafc:	180b883a 	mov	r5,r3
  20bb00:	02017a80 	call	2017a8 <__mulsi3>
  20bb04:	d9800217 	ldw	r6,8(sp)
  20bb08:	e006d43a 	srli	r3,fp,16
  20bb0c:	1185883a 	add	r2,r2,r6
  20bb10:	1885883a 	add	r2,r3,r2
  20bb14:	1180022e 	bgeu	r2,r6,20bb20 <__umoddi3+0x454>
  20bb18:	00c00074 	movhi	r3,1
  20bb1c:	b8ef883a 	add	r23,r23,r3
  20bb20:	1006d43a 	srli	r3,r2,16
  20bb24:	1004943a 	slli	r2,r2,16
  20bb28:	e73fffcc 	andi	fp,fp,65535
  20bb2c:	1dc7883a 	add	r3,r3,r23
  20bb30:	1739883a 	add	fp,r2,fp
  20bb34:	88c03a36 	bltu	r17,r3,20bc20 <__umoddi3+0x554>
  20bb38:	88c05126 	beq	r17,r3,20bc80 <__umoddi3+0x5b4>
  20bb3c:	88c9c83a 	sub	r4,r17,r3
  20bb40:	e00f883a 	mov	r7,fp
  20bb44:	81cfc83a 	sub	r7,r16,r7
  20bb48:	81c7803a 	cmpltu	r3,r16,r7
  20bb4c:	20c7c83a 	sub	r3,r4,r3
  20bb50:	1cc4983a 	sll	r2,r3,r19
  20bb54:	3d0ed83a 	srl	r7,r7,r20
  20bb58:	1d06d83a 	srl	r3,r3,r20
  20bb5c:	11c4b03a 	or	r2,r2,r7
  20bb60:	003f7c06 	br	20b954 <_gp+0xffdf9d70>
  20bb64:	9ca6983a 	sll	r19,r19,r18
  20bb68:	88f8d83a 	srl	fp,r17,r3
  20bb6c:	80c4d83a 	srl	r2,r16,r3
  20bb70:	982cd43a 	srli	r22,r19,16
  20bb74:	8ca2983a 	sll	r17,r17,r18
  20bb78:	e009883a 	mov	r4,fp
  20bb7c:	b00b883a 	mov	r5,r22
  20bb80:	146ab03a 	or	r21,r2,r17
  20bb84:	0200bbc0 	call	200bbc <__umodsi3>
  20bb88:	b00b883a 	mov	r5,r22
  20bb8c:	e009883a 	mov	r4,fp
  20bb90:	1029883a 	mov	r20,r2
  20bb94:	9dffffcc 	andi	r23,r19,65535
  20bb98:	0200b580 	call	200b58 <__udivsi3>
  20bb9c:	b809883a 	mov	r4,r23
  20bba0:	100b883a 	mov	r5,r2
  20bba4:	02017a80 	call	2017a8 <__mulsi3>
  20bba8:	a008943a 	slli	r4,r20,16
  20bbac:	a806d43a 	srli	r3,r21,16
  20bbb0:	84a8983a 	sll	r20,r16,r18
  20bbb4:	1906b03a 	or	r3,r3,r4
  20bbb8:	1880042e 	bgeu	r3,r2,20bbcc <__umoddi3+0x500>
  20bbbc:	1cc7883a 	add	r3,r3,r19
  20bbc0:	1cc00236 	bltu	r3,r19,20bbcc <__umoddi3+0x500>
  20bbc4:	1880012e 	bgeu	r3,r2,20bbcc <__umoddi3+0x500>
  20bbc8:	1cc7883a 	add	r3,r3,r19
  20bbcc:	18a3c83a 	sub	r17,r3,r2
  20bbd0:	b00b883a 	mov	r5,r22
  20bbd4:	8809883a 	mov	r4,r17
  20bbd8:	0200bbc0 	call	200bbc <__umodsi3>
  20bbdc:	b00b883a 	mov	r5,r22
  20bbe0:	8809883a 	mov	r4,r17
  20bbe4:	1021883a 	mov	r16,r2
  20bbe8:	0200b580 	call	200b58 <__udivsi3>
  20bbec:	100b883a 	mov	r5,r2
  20bbf0:	b809883a 	mov	r4,r23
  20bbf4:	8020943a 	slli	r16,r16,16
  20bbf8:	02017a80 	call	2017a8 <__mulsi3>
  20bbfc:	a8ffffcc 	andi	r3,r21,65535
  20bc00:	1c06b03a 	or	r3,r3,r16
  20bc04:	1880042e 	bgeu	r3,r2,20bc18 <__umoddi3+0x54c>
  20bc08:	1cc7883a 	add	r3,r3,r19
  20bc0c:	1cc00236 	bltu	r3,r19,20bc18 <__umoddi3+0x54c>
  20bc10:	1880012e 	bgeu	r3,r2,20bc18 <__umoddi3+0x54c>
  20bc14:	1cc7883a 	add	r3,r3,r19
  20bc18:	18a3c83a 	sub	r17,r3,r2
  20bc1c:	003f2906 	br	20b8c4 <_gp+0xffdf9ce0>
  20bc20:	e48fc83a 	sub	r7,fp,r18
  20bc24:	1d49c83a 	sub	r4,r3,r21
  20bc28:	e1f9803a 	cmpltu	fp,fp,r7
  20bc2c:	2739c83a 	sub	fp,r4,fp
  20bc30:	8f09c83a 	sub	r4,r17,fp
  20bc34:	003fc306 	br	20bb44 <_gp+0xffdf9f60>
  20bc38:	01000604 	movi	r4,24
  20bc3c:	003ef906 	br	20b824 <_gp+0xffdf9c40>
  20bc40:	00800604 	movi	r2,24
  20bc44:	003f1306 	br	20b894 <_gp+0xffdf9cb0>
  20bc48:	01000604 	movi	r4,24
  20bc4c:	003eb606 	br	20b728 <_gp+0xffdf9b44>
  20bc50:	40bf902e 	bgeu	r8,r2,20ba94 <_gp+0xffdf9eb0>
  20bc54:	b5bfff84 	addi	r22,r22,-2
  20bc58:	4551883a 	add	r8,r8,r21
  20bc5c:	003f8e06 	br	20ba98 <_gp+0xffdf9eb4>
  20bc60:	18bf762e 	bgeu	r3,r2,20ba3c <_gp+0xffdf9e58>
  20bc64:	8c7fff84 	addi	r17,r17,-2
  20bc68:	1d47883a 	add	r3,r3,r21
  20bc6c:	003f7406 	br	20ba40 <_gp+0xffdf9e5c>
  20bc70:	1cc7883a 	add	r3,r3,r19
  20bc74:	003ecd06 	br	20b7ac <_gp+0xffdf9bc8>
  20bc78:	8005883a 	mov	r2,r16
  20bc7c:	003ef806 	br	20b860 <_gp+0xffdf9c7c>
  20bc80:	873fe736 	bltu	r16,fp,20bc20 <_gp+0xffdfa03c>
  20bc84:	e00f883a 	mov	r7,fp
  20bc88:	0009883a 	mov	r4,zero
  20bc8c:	003fad06 	br	20bb44 <_gp+0xffdf9f60>

0020bc90 <__adddf3>:
  20bc90:	02c00434 	movhi	r11,16
  20bc94:	5affffc4 	addi	r11,r11,-1
  20bc98:	2806d7fa 	srli	r3,r5,31
  20bc9c:	2ad4703a 	and	r10,r5,r11
  20bca0:	3ad2703a 	and	r9,r7,r11
  20bca4:	3804d53a 	srli	r2,r7,20
  20bca8:	3018d77a 	srli	r12,r6,29
  20bcac:	280ad53a 	srli	r5,r5,20
  20bcb0:	501490fa 	slli	r10,r10,3
  20bcb4:	2010d77a 	srli	r8,r4,29
  20bcb8:	481290fa 	slli	r9,r9,3
  20bcbc:	380ed7fa 	srli	r7,r7,31
  20bcc0:	defffb04 	addi	sp,sp,-20
  20bcc4:	dc800215 	stw	r18,8(sp)
  20bcc8:	dc400115 	stw	r17,4(sp)
  20bccc:	dc000015 	stw	r16,0(sp)
  20bcd0:	dfc00415 	stw	ra,16(sp)
  20bcd4:	dcc00315 	stw	r19,12(sp)
  20bcd8:	1c803fcc 	andi	r18,r3,255
  20bcdc:	2c01ffcc 	andi	r16,r5,2047
  20bce0:	5210b03a 	or	r8,r10,r8
  20bce4:	202290fa 	slli	r17,r4,3
  20bce8:	1081ffcc 	andi	r2,r2,2047
  20bcec:	4b12b03a 	or	r9,r9,r12
  20bcf0:	300c90fa 	slli	r6,r6,3
  20bcf4:	91c07526 	beq	r18,r7,20becc <__adddf3+0x23c>
  20bcf8:	8087c83a 	sub	r3,r16,r2
  20bcfc:	00c0ab0e 	bge	zero,r3,20bfac <__adddf3+0x31c>
  20bd00:	10002a1e 	bne	r2,zero,20bdac <__adddf3+0x11c>
  20bd04:	4984b03a 	or	r2,r9,r6
  20bd08:	1000961e 	bne	r2,zero,20bf64 <__adddf3+0x2d4>
  20bd0c:	888001cc 	andi	r2,r17,7
  20bd10:	10000726 	beq	r2,zero,20bd30 <__adddf3+0xa0>
  20bd14:	888003cc 	andi	r2,r17,15
  20bd18:	00c00104 	movi	r3,4
  20bd1c:	10c00426 	beq	r2,r3,20bd30 <__adddf3+0xa0>
  20bd20:	88c7883a 	add	r3,r17,r3
  20bd24:	1c63803a 	cmpltu	r17,r3,r17
  20bd28:	4451883a 	add	r8,r8,r17
  20bd2c:	1823883a 	mov	r17,r3
  20bd30:	4080202c 	andhi	r2,r8,128
  20bd34:	10005926 	beq	r2,zero,20be9c <__adddf3+0x20c>
  20bd38:	84000044 	addi	r16,r16,1
  20bd3c:	0081ffc4 	movi	r2,2047
  20bd40:	8080ba26 	beq	r16,r2,20c02c <__adddf3+0x39c>
  20bd44:	00bfe034 	movhi	r2,65408
  20bd48:	10bfffc4 	addi	r2,r2,-1
  20bd4c:	4090703a 	and	r8,r8,r2
  20bd50:	4004977a 	slli	r2,r8,29
  20bd54:	4010927a 	slli	r8,r8,9
  20bd58:	8822d0fa 	srli	r17,r17,3
  20bd5c:	8401ffcc 	andi	r16,r16,2047
  20bd60:	4010d33a 	srli	r8,r8,12
  20bd64:	9007883a 	mov	r3,r18
  20bd68:	1444b03a 	or	r2,r2,r17
  20bd6c:	8401ffcc 	andi	r16,r16,2047
  20bd70:	8020953a 	slli	r16,r16,20
  20bd74:	18c03fcc 	andi	r3,r3,255
  20bd78:	01000434 	movhi	r4,16
  20bd7c:	213fffc4 	addi	r4,r4,-1
  20bd80:	180697fa 	slli	r3,r3,31
  20bd84:	4110703a 	and	r8,r8,r4
  20bd88:	4410b03a 	or	r8,r8,r16
  20bd8c:	40c6b03a 	or	r3,r8,r3
  20bd90:	dfc00417 	ldw	ra,16(sp)
  20bd94:	dcc00317 	ldw	r19,12(sp)
  20bd98:	dc800217 	ldw	r18,8(sp)
  20bd9c:	dc400117 	ldw	r17,4(sp)
  20bda0:	dc000017 	ldw	r16,0(sp)
  20bda4:	dec00504 	addi	sp,sp,20
  20bda8:	f800283a 	ret
  20bdac:	0081ffc4 	movi	r2,2047
  20bdb0:	80bfd626 	beq	r16,r2,20bd0c <_gp+0xffdfa128>
  20bdb4:	4a402034 	orhi	r9,r9,128
  20bdb8:	00800e04 	movi	r2,56
  20bdbc:	10c09f16 	blt	r2,r3,20c03c <__adddf3+0x3ac>
  20bdc0:	008007c4 	movi	r2,31
  20bdc4:	10c0c216 	blt	r2,r3,20c0d0 <__adddf3+0x440>
  20bdc8:	00800804 	movi	r2,32
  20bdcc:	10c5c83a 	sub	r2,r2,r3
  20bdd0:	488a983a 	sll	r5,r9,r2
  20bdd4:	30c8d83a 	srl	r4,r6,r3
  20bdd8:	3084983a 	sll	r2,r6,r2
  20bddc:	48c6d83a 	srl	r3,r9,r3
  20bde0:	290cb03a 	or	r6,r5,r4
  20bde4:	1004c03a 	cmpne	r2,r2,zero
  20bde8:	308cb03a 	or	r6,r6,r2
  20bdec:	898dc83a 	sub	r6,r17,r6
  20bdf0:	89a3803a 	cmpltu	r17,r17,r6
  20bdf4:	40d1c83a 	sub	r8,r8,r3
  20bdf8:	4451c83a 	sub	r8,r8,r17
  20bdfc:	3023883a 	mov	r17,r6
  20be00:	4080202c 	andhi	r2,r8,128
  20be04:	10002326 	beq	r2,zero,20be94 <__adddf3+0x204>
  20be08:	04c02034 	movhi	r19,128
  20be0c:	9cffffc4 	addi	r19,r19,-1
  20be10:	44e6703a 	and	r19,r8,r19
  20be14:	98007626 	beq	r19,zero,20bff0 <__adddf3+0x360>
  20be18:	9809883a 	mov	r4,r19
  20be1c:	02017440 	call	201744 <__clzsi2>
  20be20:	10fffe04 	addi	r3,r2,-8
  20be24:	010007c4 	movi	r4,31
  20be28:	20c07716 	blt	r4,r3,20c008 <__adddf3+0x378>
  20be2c:	00800804 	movi	r2,32
  20be30:	10c5c83a 	sub	r2,r2,r3
  20be34:	8884d83a 	srl	r2,r17,r2
  20be38:	98d0983a 	sll	r8,r19,r3
  20be3c:	88e2983a 	sll	r17,r17,r3
  20be40:	1204b03a 	or	r2,r2,r8
  20be44:	1c007416 	blt	r3,r16,20c018 <__adddf3+0x388>
  20be48:	1c21c83a 	sub	r16,r3,r16
  20be4c:	82000044 	addi	r8,r16,1
  20be50:	00c007c4 	movi	r3,31
  20be54:	1a009116 	blt	r3,r8,20c09c <__adddf3+0x40c>
  20be58:	00c00804 	movi	r3,32
  20be5c:	1a07c83a 	sub	r3,r3,r8
  20be60:	8a08d83a 	srl	r4,r17,r8
  20be64:	88e2983a 	sll	r17,r17,r3
  20be68:	10c6983a 	sll	r3,r2,r3
  20be6c:	1210d83a 	srl	r8,r2,r8
  20be70:	8804c03a 	cmpne	r2,r17,zero
  20be74:	1906b03a 	or	r3,r3,r4
  20be78:	18a2b03a 	or	r17,r3,r2
  20be7c:	0021883a 	mov	r16,zero
  20be80:	003fa206 	br	20bd0c <_gp+0xffdfa128>
  20be84:	1890b03a 	or	r8,r3,r2
  20be88:	40017d26 	beq	r8,zero,20c480 <__adddf3+0x7f0>
  20be8c:	1011883a 	mov	r8,r2
  20be90:	1823883a 	mov	r17,r3
  20be94:	888001cc 	andi	r2,r17,7
  20be98:	103f9e1e 	bne	r2,zero,20bd14 <_gp+0xffdfa130>
  20be9c:	4004977a 	slli	r2,r8,29
  20bea0:	8822d0fa 	srli	r17,r17,3
  20bea4:	4010d0fa 	srli	r8,r8,3
  20bea8:	9007883a 	mov	r3,r18
  20beac:	1444b03a 	or	r2,r2,r17
  20beb0:	0101ffc4 	movi	r4,2047
  20beb4:	81002426 	beq	r16,r4,20bf48 <__adddf3+0x2b8>
  20beb8:	8120703a 	and	r16,r16,r4
  20bebc:	01000434 	movhi	r4,16
  20bec0:	213fffc4 	addi	r4,r4,-1
  20bec4:	4110703a 	and	r8,r8,r4
  20bec8:	003fa806 	br	20bd6c <_gp+0xffdfa188>
  20becc:	8089c83a 	sub	r4,r16,r2
  20bed0:	01005e0e 	bge	zero,r4,20c04c <__adddf3+0x3bc>
  20bed4:	10002b26 	beq	r2,zero,20bf84 <__adddf3+0x2f4>
  20bed8:	0081ffc4 	movi	r2,2047
  20bedc:	80bf8b26 	beq	r16,r2,20bd0c <_gp+0xffdfa128>
  20bee0:	4a402034 	orhi	r9,r9,128
  20bee4:	00800e04 	movi	r2,56
  20bee8:	1100a40e 	bge	r2,r4,20c17c <__adddf3+0x4ec>
  20beec:	498cb03a 	or	r6,r9,r6
  20bef0:	300ac03a 	cmpne	r5,r6,zero
  20bef4:	0013883a 	mov	r9,zero
  20bef8:	2c4b883a 	add	r5,r5,r17
  20befc:	2c63803a 	cmpltu	r17,r5,r17
  20bf00:	4a11883a 	add	r8,r9,r8
  20bf04:	8a11883a 	add	r8,r17,r8
  20bf08:	2823883a 	mov	r17,r5
  20bf0c:	4080202c 	andhi	r2,r8,128
  20bf10:	103fe026 	beq	r2,zero,20be94 <_gp+0xffdfa2b0>
  20bf14:	84000044 	addi	r16,r16,1
  20bf18:	0081ffc4 	movi	r2,2047
  20bf1c:	8080d226 	beq	r16,r2,20c268 <__adddf3+0x5d8>
  20bf20:	00bfe034 	movhi	r2,65408
  20bf24:	10bfffc4 	addi	r2,r2,-1
  20bf28:	4090703a 	and	r8,r8,r2
  20bf2c:	880ad07a 	srli	r5,r17,1
  20bf30:	400897fa 	slli	r4,r8,31
  20bf34:	88c0004c 	andi	r3,r17,1
  20bf38:	28e2b03a 	or	r17,r5,r3
  20bf3c:	4010d07a 	srli	r8,r8,1
  20bf40:	2462b03a 	or	r17,r4,r17
  20bf44:	003f7106 	br	20bd0c <_gp+0xffdfa128>
  20bf48:	4088b03a 	or	r4,r8,r2
  20bf4c:	20014526 	beq	r4,zero,20c464 <__adddf3+0x7d4>
  20bf50:	01000434 	movhi	r4,16
  20bf54:	42000234 	orhi	r8,r8,8
  20bf58:	213fffc4 	addi	r4,r4,-1
  20bf5c:	4110703a 	and	r8,r8,r4
  20bf60:	003f8206 	br	20bd6c <_gp+0xffdfa188>
  20bf64:	18ffffc4 	addi	r3,r3,-1
  20bf68:	1800491e 	bne	r3,zero,20c090 <__adddf3+0x400>
  20bf6c:	898bc83a 	sub	r5,r17,r6
  20bf70:	8963803a 	cmpltu	r17,r17,r5
  20bf74:	4251c83a 	sub	r8,r8,r9
  20bf78:	4451c83a 	sub	r8,r8,r17
  20bf7c:	2823883a 	mov	r17,r5
  20bf80:	003f9f06 	br	20be00 <_gp+0xffdfa21c>
  20bf84:	4984b03a 	or	r2,r9,r6
  20bf88:	103f6026 	beq	r2,zero,20bd0c <_gp+0xffdfa128>
  20bf8c:	213fffc4 	addi	r4,r4,-1
  20bf90:	2000931e 	bne	r4,zero,20c1e0 <__adddf3+0x550>
  20bf94:	898d883a 	add	r6,r17,r6
  20bf98:	3463803a 	cmpltu	r17,r6,r17
  20bf9c:	4251883a 	add	r8,r8,r9
  20bfa0:	8a11883a 	add	r8,r17,r8
  20bfa4:	3023883a 	mov	r17,r6
  20bfa8:	003fd806 	br	20bf0c <_gp+0xffdfa328>
  20bfac:	1800541e 	bne	r3,zero,20c100 <__adddf3+0x470>
  20bfb0:	80800044 	addi	r2,r16,1
  20bfb4:	1081ffcc 	andi	r2,r2,2047
  20bfb8:	00c00044 	movi	r3,1
  20bfbc:	1880a00e 	bge	r3,r2,20c240 <__adddf3+0x5b0>
  20bfc0:	8989c83a 	sub	r4,r17,r6
  20bfc4:	8905803a 	cmpltu	r2,r17,r4
  20bfc8:	4267c83a 	sub	r19,r8,r9
  20bfcc:	98a7c83a 	sub	r19,r19,r2
  20bfd0:	9880202c 	andhi	r2,r19,128
  20bfd4:	10006326 	beq	r2,zero,20c164 <__adddf3+0x4d4>
  20bfd8:	3463c83a 	sub	r17,r6,r17
  20bfdc:	4a07c83a 	sub	r3,r9,r8
  20bfe0:	344d803a 	cmpltu	r6,r6,r17
  20bfe4:	19a7c83a 	sub	r19,r3,r6
  20bfe8:	3825883a 	mov	r18,r7
  20bfec:	983f8a1e 	bne	r19,zero,20be18 <_gp+0xffdfa234>
  20bff0:	8809883a 	mov	r4,r17
  20bff4:	02017440 	call	201744 <__clzsi2>
  20bff8:	10800804 	addi	r2,r2,32
  20bffc:	10fffe04 	addi	r3,r2,-8
  20c000:	010007c4 	movi	r4,31
  20c004:	20ff890e 	bge	r4,r3,20be2c <_gp+0xffdfa248>
  20c008:	10bff604 	addi	r2,r2,-40
  20c00c:	8884983a 	sll	r2,r17,r2
  20c010:	0023883a 	mov	r17,zero
  20c014:	1c3f8c0e 	bge	r3,r16,20be48 <_gp+0xffdfa264>
  20c018:	023fe034 	movhi	r8,65408
  20c01c:	423fffc4 	addi	r8,r8,-1
  20c020:	80e1c83a 	sub	r16,r16,r3
  20c024:	1210703a 	and	r8,r2,r8
  20c028:	003f3806 	br	20bd0c <_gp+0xffdfa128>
  20c02c:	9007883a 	mov	r3,r18
  20c030:	0011883a 	mov	r8,zero
  20c034:	0005883a 	mov	r2,zero
  20c038:	003f4c06 	br	20bd6c <_gp+0xffdfa188>
  20c03c:	498cb03a 	or	r6,r9,r6
  20c040:	300cc03a 	cmpne	r6,r6,zero
  20c044:	0007883a 	mov	r3,zero
  20c048:	003f6806 	br	20bdec <_gp+0xffdfa208>
  20c04c:	20009c1e 	bne	r4,zero,20c2c0 <__adddf3+0x630>
  20c050:	80800044 	addi	r2,r16,1
  20c054:	1141ffcc 	andi	r5,r2,2047
  20c058:	01000044 	movi	r4,1
  20c05c:	2140670e 	bge	r4,r5,20c1fc <__adddf3+0x56c>
  20c060:	0101ffc4 	movi	r4,2047
  20c064:	11007f26 	beq	r2,r4,20c264 <__adddf3+0x5d4>
  20c068:	898d883a 	add	r6,r17,r6
  20c06c:	4247883a 	add	r3,r8,r9
  20c070:	3451803a 	cmpltu	r8,r6,r17
  20c074:	40d1883a 	add	r8,r8,r3
  20c078:	402297fa 	slli	r17,r8,31
  20c07c:	300cd07a 	srli	r6,r6,1
  20c080:	4010d07a 	srli	r8,r8,1
  20c084:	1021883a 	mov	r16,r2
  20c088:	89a2b03a 	or	r17,r17,r6
  20c08c:	003f1f06 	br	20bd0c <_gp+0xffdfa128>
  20c090:	0081ffc4 	movi	r2,2047
  20c094:	80bf481e 	bne	r16,r2,20bdb8 <_gp+0xffdfa1d4>
  20c098:	003f1c06 	br	20bd0c <_gp+0xffdfa128>
  20c09c:	843ff844 	addi	r16,r16,-31
  20c0a0:	01000804 	movi	r4,32
  20c0a4:	1406d83a 	srl	r3,r2,r16
  20c0a8:	41005026 	beq	r8,r4,20c1ec <__adddf3+0x55c>
  20c0ac:	01001004 	movi	r4,64
  20c0b0:	2211c83a 	sub	r8,r4,r8
  20c0b4:	1204983a 	sll	r2,r2,r8
  20c0b8:	88a2b03a 	or	r17,r17,r2
  20c0bc:	8822c03a 	cmpne	r17,r17,zero
  20c0c0:	1c62b03a 	or	r17,r3,r17
  20c0c4:	0011883a 	mov	r8,zero
  20c0c8:	0021883a 	mov	r16,zero
  20c0cc:	003f7106 	br	20be94 <_gp+0xffdfa2b0>
  20c0d0:	193ff804 	addi	r4,r3,-32
  20c0d4:	00800804 	movi	r2,32
  20c0d8:	4908d83a 	srl	r4,r9,r4
  20c0dc:	18804526 	beq	r3,r2,20c1f4 <__adddf3+0x564>
  20c0e0:	00801004 	movi	r2,64
  20c0e4:	10c5c83a 	sub	r2,r2,r3
  20c0e8:	4886983a 	sll	r3,r9,r2
  20c0ec:	198cb03a 	or	r6,r3,r6
  20c0f0:	300cc03a 	cmpne	r6,r6,zero
  20c0f4:	218cb03a 	or	r6,r4,r6
  20c0f8:	0007883a 	mov	r3,zero
  20c0fc:	003f3b06 	br	20bdec <_gp+0xffdfa208>
  20c100:	80002a26 	beq	r16,zero,20c1ac <__adddf3+0x51c>
  20c104:	0101ffc4 	movi	r4,2047
  20c108:	11006826 	beq	r2,r4,20c2ac <__adddf3+0x61c>
  20c10c:	00c7c83a 	sub	r3,zero,r3
  20c110:	42002034 	orhi	r8,r8,128
  20c114:	01000e04 	movi	r4,56
  20c118:	20c07c16 	blt	r4,r3,20c30c <__adddf3+0x67c>
  20c11c:	010007c4 	movi	r4,31
  20c120:	20c0da16 	blt	r4,r3,20c48c <__adddf3+0x7fc>
  20c124:	01000804 	movi	r4,32
  20c128:	20c9c83a 	sub	r4,r4,r3
  20c12c:	4114983a 	sll	r10,r8,r4
  20c130:	88cad83a 	srl	r5,r17,r3
  20c134:	8908983a 	sll	r4,r17,r4
  20c138:	40c6d83a 	srl	r3,r8,r3
  20c13c:	5162b03a 	or	r17,r10,r5
  20c140:	2008c03a 	cmpne	r4,r4,zero
  20c144:	8922b03a 	or	r17,r17,r4
  20c148:	3463c83a 	sub	r17,r6,r17
  20c14c:	48c7c83a 	sub	r3,r9,r3
  20c150:	344d803a 	cmpltu	r6,r6,r17
  20c154:	1991c83a 	sub	r8,r3,r6
  20c158:	1021883a 	mov	r16,r2
  20c15c:	3825883a 	mov	r18,r7
  20c160:	003f2706 	br	20be00 <_gp+0xffdfa21c>
  20c164:	24d0b03a 	or	r8,r4,r19
  20c168:	40001b1e 	bne	r8,zero,20c1d8 <__adddf3+0x548>
  20c16c:	0005883a 	mov	r2,zero
  20c170:	0007883a 	mov	r3,zero
  20c174:	0021883a 	mov	r16,zero
  20c178:	003f4d06 	br	20beb0 <_gp+0xffdfa2cc>
  20c17c:	008007c4 	movi	r2,31
  20c180:	11003c16 	blt	r2,r4,20c274 <__adddf3+0x5e4>
  20c184:	00800804 	movi	r2,32
  20c188:	1105c83a 	sub	r2,r2,r4
  20c18c:	488e983a 	sll	r7,r9,r2
  20c190:	310ad83a 	srl	r5,r6,r4
  20c194:	3084983a 	sll	r2,r6,r2
  20c198:	4912d83a 	srl	r9,r9,r4
  20c19c:	394ab03a 	or	r5,r7,r5
  20c1a0:	1004c03a 	cmpne	r2,r2,zero
  20c1a4:	288ab03a 	or	r5,r5,r2
  20c1a8:	003f5306 	br	20bef8 <_gp+0xffdfa314>
  20c1ac:	4448b03a 	or	r4,r8,r17
  20c1b0:	20003e26 	beq	r4,zero,20c2ac <__adddf3+0x61c>
  20c1b4:	00c6303a 	nor	r3,zero,r3
  20c1b8:	18003a1e 	bne	r3,zero,20c2a4 <__adddf3+0x614>
  20c1bc:	3463c83a 	sub	r17,r6,r17
  20c1c0:	4a07c83a 	sub	r3,r9,r8
  20c1c4:	344d803a 	cmpltu	r6,r6,r17
  20c1c8:	1991c83a 	sub	r8,r3,r6
  20c1cc:	1021883a 	mov	r16,r2
  20c1d0:	3825883a 	mov	r18,r7
  20c1d4:	003f0a06 	br	20be00 <_gp+0xffdfa21c>
  20c1d8:	2023883a 	mov	r17,r4
  20c1dc:	003f0d06 	br	20be14 <_gp+0xffdfa230>
  20c1e0:	0081ffc4 	movi	r2,2047
  20c1e4:	80bf3f1e 	bne	r16,r2,20bee4 <_gp+0xffdfa300>
  20c1e8:	003ec806 	br	20bd0c <_gp+0xffdfa128>
  20c1ec:	0005883a 	mov	r2,zero
  20c1f0:	003fb106 	br	20c0b8 <_gp+0xffdfa4d4>
  20c1f4:	0007883a 	mov	r3,zero
  20c1f8:	003fbc06 	br	20c0ec <_gp+0xffdfa508>
  20c1fc:	4444b03a 	or	r2,r8,r17
  20c200:	8000871e 	bne	r16,zero,20c420 <__adddf3+0x790>
  20c204:	1000ba26 	beq	r2,zero,20c4f0 <__adddf3+0x860>
  20c208:	4984b03a 	or	r2,r9,r6
  20c20c:	103ebf26 	beq	r2,zero,20bd0c <_gp+0xffdfa128>
  20c210:	8985883a 	add	r2,r17,r6
  20c214:	4247883a 	add	r3,r8,r9
  20c218:	1451803a 	cmpltu	r8,r2,r17
  20c21c:	40d1883a 	add	r8,r8,r3
  20c220:	40c0202c 	andhi	r3,r8,128
  20c224:	1023883a 	mov	r17,r2
  20c228:	183f1a26 	beq	r3,zero,20be94 <_gp+0xffdfa2b0>
  20c22c:	00bfe034 	movhi	r2,65408
  20c230:	10bfffc4 	addi	r2,r2,-1
  20c234:	2021883a 	mov	r16,r4
  20c238:	4090703a 	and	r8,r8,r2
  20c23c:	003eb306 	br	20bd0c <_gp+0xffdfa128>
  20c240:	4444b03a 	or	r2,r8,r17
  20c244:	8000291e 	bne	r16,zero,20c2ec <__adddf3+0x65c>
  20c248:	10004b1e 	bne	r2,zero,20c378 <__adddf3+0x6e8>
  20c24c:	4990b03a 	or	r8,r9,r6
  20c250:	40008b26 	beq	r8,zero,20c480 <__adddf3+0x7f0>
  20c254:	4811883a 	mov	r8,r9
  20c258:	3023883a 	mov	r17,r6
  20c25c:	3825883a 	mov	r18,r7
  20c260:	003eaa06 	br	20bd0c <_gp+0xffdfa128>
  20c264:	1021883a 	mov	r16,r2
  20c268:	0011883a 	mov	r8,zero
  20c26c:	0005883a 	mov	r2,zero
  20c270:	003f0f06 	br	20beb0 <_gp+0xffdfa2cc>
  20c274:	217ff804 	addi	r5,r4,-32
  20c278:	00800804 	movi	r2,32
  20c27c:	494ad83a 	srl	r5,r9,r5
  20c280:	20807d26 	beq	r4,r2,20c478 <__adddf3+0x7e8>
  20c284:	00801004 	movi	r2,64
  20c288:	1109c83a 	sub	r4,r2,r4
  20c28c:	4912983a 	sll	r9,r9,r4
  20c290:	498cb03a 	or	r6,r9,r6
  20c294:	300cc03a 	cmpne	r6,r6,zero
  20c298:	298ab03a 	or	r5,r5,r6
  20c29c:	0013883a 	mov	r9,zero
  20c2a0:	003f1506 	br	20bef8 <_gp+0xffdfa314>
  20c2a4:	0101ffc4 	movi	r4,2047
  20c2a8:	113f9a1e 	bne	r2,r4,20c114 <_gp+0xffdfa530>
  20c2ac:	4811883a 	mov	r8,r9
  20c2b0:	3023883a 	mov	r17,r6
  20c2b4:	1021883a 	mov	r16,r2
  20c2b8:	3825883a 	mov	r18,r7
  20c2bc:	003e9306 	br	20bd0c <_gp+0xffdfa128>
  20c2c0:	8000161e 	bne	r16,zero,20c31c <__adddf3+0x68c>
  20c2c4:	444ab03a 	or	r5,r8,r17
  20c2c8:	28005126 	beq	r5,zero,20c410 <__adddf3+0x780>
  20c2cc:	0108303a 	nor	r4,zero,r4
  20c2d0:	20004d1e 	bne	r4,zero,20c408 <__adddf3+0x778>
  20c2d4:	89a3883a 	add	r17,r17,r6
  20c2d8:	4253883a 	add	r9,r8,r9
  20c2dc:	898d803a 	cmpltu	r6,r17,r6
  20c2e0:	3251883a 	add	r8,r6,r9
  20c2e4:	1021883a 	mov	r16,r2
  20c2e8:	003f0806 	br	20bf0c <_gp+0xffdfa328>
  20c2ec:	1000301e 	bne	r2,zero,20c3b0 <__adddf3+0x720>
  20c2f0:	4984b03a 	or	r2,r9,r6
  20c2f4:	10007126 	beq	r2,zero,20c4bc <__adddf3+0x82c>
  20c2f8:	4811883a 	mov	r8,r9
  20c2fc:	3023883a 	mov	r17,r6
  20c300:	3825883a 	mov	r18,r7
  20c304:	0401ffc4 	movi	r16,2047
  20c308:	003e8006 	br	20bd0c <_gp+0xffdfa128>
  20c30c:	4462b03a 	or	r17,r8,r17
  20c310:	8822c03a 	cmpne	r17,r17,zero
  20c314:	0007883a 	mov	r3,zero
  20c318:	003f8b06 	br	20c148 <_gp+0xffdfa564>
  20c31c:	0141ffc4 	movi	r5,2047
  20c320:	11403b26 	beq	r2,r5,20c410 <__adddf3+0x780>
  20c324:	0109c83a 	sub	r4,zero,r4
  20c328:	42002034 	orhi	r8,r8,128
  20c32c:	01400e04 	movi	r5,56
  20c330:	29006716 	blt	r5,r4,20c4d0 <__adddf3+0x840>
  20c334:	014007c4 	movi	r5,31
  20c338:	29007016 	blt	r5,r4,20c4fc <__adddf3+0x86c>
  20c33c:	01400804 	movi	r5,32
  20c340:	290bc83a 	sub	r5,r5,r4
  20c344:	4154983a 	sll	r10,r8,r5
  20c348:	890ed83a 	srl	r7,r17,r4
  20c34c:	894a983a 	sll	r5,r17,r5
  20c350:	4108d83a 	srl	r4,r8,r4
  20c354:	51e2b03a 	or	r17,r10,r7
  20c358:	280ac03a 	cmpne	r5,r5,zero
  20c35c:	8962b03a 	or	r17,r17,r5
  20c360:	89a3883a 	add	r17,r17,r6
  20c364:	2253883a 	add	r9,r4,r9
  20c368:	898d803a 	cmpltu	r6,r17,r6
  20c36c:	3251883a 	add	r8,r6,r9
  20c370:	1021883a 	mov	r16,r2
  20c374:	003ee506 	br	20bf0c <_gp+0xffdfa328>
  20c378:	4984b03a 	or	r2,r9,r6
  20c37c:	103e6326 	beq	r2,zero,20bd0c <_gp+0xffdfa128>
  20c380:	8987c83a 	sub	r3,r17,r6
  20c384:	88c9803a 	cmpltu	r4,r17,r3
  20c388:	4245c83a 	sub	r2,r8,r9
  20c38c:	1105c83a 	sub	r2,r2,r4
  20c390:	1100202c 	andhi	r4,r2,128
  20c394:	203ebb26 	beq	r4,zero,20be84 <_gp+0xffdfa2a0>
  20c398:	3463c83a 	sub	r17,r6,r17
  20c39c:	4a07c83a 	sub	r3,r9,r8
  20c3a0:	344d803a 	cmpltu	r6,r6,r17
  20c3a4:	1991c83a 	sub	r8,r3,r6
  20c3a8:	3825883a 	mov	r18,r7
  20c3ac:	003e5706 	br	20bd0c <_gp+0xffdfa128>
  20c3b0:	4984b03a 	or	r2,r9,r6
  20c3b4:	10002e26 	beq	r2,zero,20c470 <__adddf3+0x7e0>
  20c3b8:	4004d0fa 	srli	r2,r8,3
  20c3bc:	8822d0fa 	srli	r17,r17,3
  20c3c0:	4010977a 	slli	r8,r8,29
  20c3c4:	10c0022c 	andhi	r3,r2,8
  20c3c8:	4462b03a 	or	r17,r8,r17
  20c3cc:	18000826 	beq	r3,zero,20c3f0 <__adddf3+0x760>
  20c3d0:	4808d0fa 	srli	r4,r9,3
  20c3d4:	20c0022c 	andhi	r3,r4,8
  20c3d8:	1800051e 	bne	r3,zero,20c3f0 <__adddf3+0x760>
  20c3dc:	300cd0fa 	srli	r6,r6,3
  20c3e0:	4806977a 	slli	r3,r9,29
  20c3e4:	2005883a 	mov	r2,r4
  20c3e8:	3825883a 	mov	r18,r7
  20c3ec:	19a2b03a 	or	r17,r3,r6
  20c3f0:	8810d77a 	srli	r8,r17,29
  20c3f4:	100490fa 	slli	r2,r2,3
  20c3f8:	882290fa 	slli	r17,r17,3
  20c3fc:	0401ffc4 	movi	r16,2047
  20c400:	4090b03a 	or	r8,r8,r2
  20c404:	003e4106 	br	20bd0c <_gp+0xffdfa128>
  20c408:	0141ffc4 	movi	r5,2047
  20c40c:	117fc71e 	bne	r2,r5,20c32c <_gp+0xffdfa748>
  20c410:	4811883a 	mov	r8,r9
  20c414:	3023883a 	mov	r17,r6
  20c418:	1021883a 	mov	r16,r2
  20c41c:	003e3b06 	br	20bd0c <_gp+0xffdfa128>
  20c420:	10002f26 	beq	r2,zero,20c4e0 <__adddf3+0x850>
  20c424:	4984b03a 	or	r2,r9,r6
  20c428:	10001126 	beq	r2,zero,20c470 <__adddf3+0x7e0>
  20c42c:	4004d0fa 	srli	r2,r8,3
  20c430:	8822d0fa 	srli	r17,r17,3
  20c434:	4010977a 	slli	r8,r8,29
  20c438:	10c0022c 	andhi	r3,r2,8
  20c43c:	4462b03a 	or	r17,r8,r17
  20c440:	183feb26 	beq	r3,zero,20c3f0 <_gp+0xffdfa80c>
  20c444:	4808d0fa 	srli	r4,r9,3
  20c448:	20c0022c 	andhi	r3,r4,8
  20c44c:	183fe81e 	bne	r3,zero,20c3f0 <_gp+0xffdfa80c>
  20c450:	300cd0fa 	srli	r6,r6,3
  20c454:	4806977a 	slli	r3,r9,29
  20c458:	2005883a 	mov	r2,r4
  20c45c:	19a2b03a 	or	r17,r3,r6
  20c460:	003fe306 	br	20c3f0 <_gp+0xffdfa80c>
  20c464:	0011883a 	mov	r8,zero
  20c468:	0005883a 	mov	r2,zero
  20c46c:	003e3f06 	br	20bd6c <_gp+0xffdfa188>
  20c470:	0401ffc4 	movi	r16,2047
  20c474:	003e2506 	br	20bd0c <_gp+0xffdfa128>
  20c478:	0013883a 	mov	r9,zero
  20c47c:	003f8406 	br	20c290 <_gp+0xffdfa6ac>
  20c480:	0005883a 	mov	r2,zero
  20c484:	0007883a 	mov	r3,zero
  20c488:	003e8906 	br	20beb0 <_gp+0xffdfa2cc>
  20c48c:	197ff804 	addi	r5,r3,-32
  20c490:	01000804 	movi	r4,32
  20c494:	414ad83a 	srl	r5,r8,r5
  20c498:	19002426 	beq	r3,r4,20c52c <__adddf3+0x89c>
  20c49c:	01001004 	movi	r4,64
  20c4a0:	20c7c83a 	sub	r3,r4,r3
  20c4a4:	40c6983a 	sll	r3,r8,r3
  20c4a8:	1c46b03a 	or	r3,r3,r17
  20c4ac:	1806c03a 	cmpne	r3,r3,zero
  20c4b0:	28e2b03a 	or	r17,r5,r3
  20c4b4:	0007883a 	mov	r3,zero
  20c4b8:	003f2306 	br	20c148 <_gp+0xffdfa564>
  20c4bc:	0007883a 	mov	r3,zero
  20c4c0:	5811883a 	mov	r8,r11
  20c4c4:	00bfffc4 	movi	r2,-1
  20c4c8:	0401ffc4 	movi	r16,2047
  20c4cc:	003e7806 	br	20beb0 <_gp+0xffdfa2cc>
  20c4d0:	4462b03a 	or	r17,r8,r17
  20c4d4:	8822c03a 	cmpne	r17,r17,zero
  20c4d8:	0009883a 	mov	r4,zero
  20c4dc:	003fa006 	br	20c360 <_gp+0xffdfa77c>
  20c4e0:	4811883a 	mov	r8,r9
  20c4e4:	3023883a 	mov	r17,r6
  20c4e8:	0401ffc4 	movi	r16,2047
  20c4ec:	003e0706 	br	20bd0c <_gp+0xffdfa128>
  20c4f0:	4811883a 	mov	r8,r9
  20c4f4:	3023883a 	mov	r17,r6
  20c4f8:	003e0406 	br	20bd0c <_gp+0xffdfa128>
  20c4fc:	21fff804 	addi	r7,r4,-32
  20c500:	01400804 	movi	r5,32
  20c504:	41ced83a 	srl	r7,r8,r7
  20c508:	21400a26 	beq	r4,r5,20c534 <__adddf3+0x8a4>
  20c50c:	01401004 	movi	r5,64
  20c510:	2909c83a 	sub	r4,r5,r4
  20c514:	4108983a 	sll	r4,r8,r4
  20c518:	2448b03a 	or	r4,r4,r17
  20c51c:	2008c03a 	cmpne	r4,r4,zero
  20c520:	3922b03a 	or	r17,r7,r4
  20c524:	0009883a 	mov	r4,zero
  20c528:	003f8d06 	br	20c360 <_gp+0xffdfa77c>
  20c52c:	0007883a 	mov	r3,zero
  20c530:	003fdd06 	br	20c4a8 <_gp+0xffdfa8c4>
  20c534:	0009883a 	mov	r4,zero
  20c538:	003ff706 	br	20c518 <_gp+0xffdfa934>

0020c53c <__divdf3>:
  20c53c:	defff004 	addi	sp,sp,-64
  20c540:	dc800815 	stw	r18,32(sp)
  20c544:	2824d53a 	srli	r18,r5,20
  20c548:	dd800c15 	stw	r22,48(sp)
  20c54c:	282cd7fa 	srli	r22,r5,31
  20c550:	dc000615 	stw	r16,24(sp)
  20c554:	04000434 	movhi	r16,16
  20c558:	843fffc4 	addi	r16,r16,-1
  20c55c:	dfc00f15 	stw	ra,60(sp)
  20c560:	df000e15 	stw	fp,56(sp)
  20c564:	ddc00d15 	stw	r23,52(sp)
  20c568:	dd400b15 	stw	r21,44(sp)
  20c56c:	dd000a15 	stw	r20,40(sp)
  20c570:	dcc00915 	stw	r19,36(sp)
  20c574:	dc400715 	stw	r17,28(sp)
  20c578:	9481ffcc 	andi	r18,r18,2047
  20c57c:	2c20703a 	and	r16,r5,r16
  20c580:	b2003fcc 	andi	r8,r22,255
  20c584:	90006126 	beq	r18,zero,20c70c <__divdf3+0x1d0>
  20c588:	0081ffc4 	movi	r2,2047
  20c58c:	202b883a 	mov	r21,r4
  20c590:	90803726 	beq	r18,r2,20c670 <__divdf3+0x134>
  20c594:	80800434 	orhi	r2,r16,16
  20c598:	100490fa 	slli	r2,r2,3
  20c59c:	2020d77a 	srli	r16,r4,29
  20c5a0:	202a90fa 	slli	r21,r4,3
  20c5a4:	94bf0044 	addi	r18,r18,-1023
  20c5a8:	80a0b03a 	or	r16,r16,r2
  20c5ac:	0013883a 	mov	r9,zero
  20c5b0:	000b883a 	mov	r5,zero
  20c5b4:	3806d53a 	srli	r3,r7,20
  20c5b8:	382ed7fa 	srli	r23,r7,31
  20c5bc:	04400434 	movhi	r17,16
  20c5c0:	8c7fffc4 	addi	r17,r17,-1
  20c5c4:	18c1ffcc 	andi	r3,r3,2047
  20c5c8:	3029883a 	mov	r20,r6
  20c5cc:	3c62703a 	and	r17,r7,r17
  20c5d0:	bf003fcc 	andi	fp,r23,255
  20c5d4:	18006e26 	beq	r3,zero,20c790 <__divdf3+0x254>
  20c5d8:	0081ffc4 	movi	r2,2047
  20c5dc:	18806626 	beq	r3,r2,20c778 <__divdf3+0x23c>
  20c5e0:	88800434 	orhi	r2,r17,16
  20c5e4:	100490fa 	slli	r2,r2,3
  20c5e8:	3022d77a 	srli	r17,r6,29
  20c5ec:	302890fa 	slli	r20,r6,3
  20c5f0:	18ff0044 	addi	r3,r3,-1023
  20c5f4:	88a2b03a 	or	r17,r17,r2
  20c5f8:	000f883a 	mov	r7,zero
  20c5fc:	b5e6f03a 	xor	r19,r22,r23
  20c600:	3a4cb03a 	or	r6,r7,r9
  20c604:	008003c4 	movi	r2,15
  20c608:	9809883a 	mov	r4,r19
  20c60c:	90c7c83a 	sub	r3,r18,r3
  20c610:	9cc03fcc 	andi	r19,r19,255
  20c614:	11809636 	bltu	r2,r6,20c870 <__divdf3+0x334>
  20c618:	300c90ba 	slli	r6,r6,2
  20c61c:	00800874 	movhi	r2,33
  20c620:	10b18c04 	addi	r2,r2,-14800
  20c624:	308d883a 	add	r6,r6,r2
  20c628:	30800017 	ldw	r2,0(r6)
  20c62c:	1000683a 	jmp	r2
  20c630:	0020c870 	cmpltui	zero,zero,33569
  20c634:	0020c6a8 	cmpgeui	zero,zero,33562
  20c638:	0020c860 	cmpeqi	zero,zero,-31967
  20c63c:	0020c69c 	xori	zero,zero,33562
  20c640:	0020c860 	cmpeqi	zero,zero,-31967
  20c644:	0020c834 	movhi	zero,33568
  20c648:	0020c860 	cmpeqi	zero,zero,-31967
  20c64c:	0020c69c 	xori	zero,zero,33562
  20c650:	0020c6a8 	cmpgeui	zero,zero,33562
  20c654:	0020c6a8 	cmpgeui	zero,zero,33562
  20c658:	0020c834 	movhi	zero,33568
  20c65c:	0020c69c 	xori	zero,zero,33562
  20c660:	0020c68c 	andi	zero,zero,33562
  20c664:	0020c68c 	andi	zero,zero,33562
  20c668:	0020c68c 	andi	zero,zero,33562
  20c66c:	0020cbf8 	rdprs	zero,zero,-31953
  20c670:	2404b03a 	or	r2,r4,r16
  20c674:	10006c1e 	bne	r2,zero,20c828 <__divdf3+0x2ec>
  20c678:	02400204 	movi	r9,8
  20c67c:	0021883a 	mov	r16,zero
  20c680:	002b883a 	mov	r21,zero
  20c684:	01400084 	movi	r5,2
  20c688:	003fca06 	br	20c5b4 <_gp+0xffdfa9d0>
  20c68c:	8023883a 	mov	r17,r16
  20c690:	a829883a 	mov	r20,r21
  20c694:	4039883a 	mov	fp,r8
  20c698:	280f883a 	mov	r7,r5
  20c69c:	00800084 	movi	r2,2
  20c6a0:	3881601e 	bne	r7,r2,20cc24 <__divdf3+0x6e8>
  20c6a4:	e027883a 	mov	r19,fp
  20c6a8:	9900004c 	andi	r4,r19,1
  20c6ac:	0081ffc4 	movi	r2,2047
  20c6b0:	0021883a 	mov	r16,zero
  20c6b4:	002b883a 	mov	r21,zero
  20c6b8:	1004953a 	slli	r2,r2,20
  20c6bc:	20c03fcc 	andi	r3,r4,255
  20c6c0:	01400434 	movhi	r5,16
  20c6c4:	297fffc4 	addi	r5,r5,-1
  20c6c8:	180697fa 	slli	r3,r3,31
  20c6cc:	8160703a 	and	r16,r16,r5
  20c6d0:	80a0b03a 	or	r16,r16,r2
  20c6d4:	80c6b03a 	or	r3,r16,r3
  20c6d8:	a805883a 	mov	r2,r21
  20c6dc:	dfc00f17 	ldw	ra,60(sp)
  20c6e0:	df000e17 	ldw	fp,56(sp)
  20c6e4:	ddc00d17 	ldw	r23,52(sp)
  20c6e8:	dd800c17 	ldw	r22,48(sp)
  20c6ec:	dd400b17 	ldw	r21,44(sp)
  20c6f0:	dd000a17 	ldw	r20,40(sp)
  20c6f4:	dcc00917 	ldw	r19,36(sp)
  20c6f8:	dc800817 	ldw	r18,32(sp)
  20c6fc:	dc400717 	ldw	r17,28(sp)
  20c700:	dc000617 	ldw	r16,24(sp)
  20c704:	dec01004 	addi	sp,sp,64
  20c708:	f800283a 	ret
  20c70c:	2404b03a 	or	r2,r4,r16
  20c710:	2023883a 	mov	r17,r4
  20c714:	10003f26 	beq	r2,zero,20c814 <__divdf3+0x2d8>
  20c718:	80015e26 	beq	r16,zero,20cc94 <__divdf3+0x758>
  20c71c:	8009883a 	mov	r4,r16
  20c720:	d9800215 	stw	r6,8(sp)
  20c724:	d9c00515 	stw	r7,20(sp)
  20c728:	da000415 	stw	r8,16(sp)
  20c72c:	02017440 	call	201744 <__clzsi2>
  20c730:	d9800217 	ldw	r6,8(sp)
  20c734:	d9c00517 	ldw	r7,20(sp)
  20c738:	da000417 	ldw	r8,16(sp)
  20c73c:	113ffd44 	addi	r4,r2,-11
  20c740:	00c00704 	movi	r3,28
  20c744:	19014f16 	blt	r3,r4,20cc84 <__divdf3+0x748>
  20c748:	00c00744 	movi	r3,29
  20c74c:	157ffe04 	addi	r21,r2,-8
  20c750:	1907c83a 	sub	r3,r3,r4
  20c754:	8560983a 	sll	r16,r16,r21
  20c758:	88c6d83a 	srl	r3,r17,r3
  20c75c:	8d6a983a 	sll	r21,r17,r21
  20c760:	1c20b03a 	or	r16,r3,r16
  20c764:	1080fcc4 	addi	r2,r2,1011
  20c768:	00a5c83a 	sub	r18,zero,r2
  20c76c:	0013883a 	mov	r9,zero
  20c770:	000b883a 	mov	r5,zero
  20c774:	003f8f06 	br	20c5b4 <_gp+0xffdfa9d0>
  20c778:	3444b03a 	or	r2,r6,r17
  20c77c:	1000231e 	bne	r2,zero,20c80c <__divdf3+0x2d0>
  20c780:	0023883a 	mov	r17,zero
  20c784:	0029883a 	mov	r20,zero
  20c788:	01c00084 	movi	r7,2
  20c78c:	003f9b06 	br	20c5fc <_gp+0xffdfaa18>
  20c790:	3444b03a 	or	r2,r6,r17
  20c794:	10001926 	beq	r2,zero,20c7fc <__divdf3+0x2c0>
  20c798:	88014b26 	beq	r17,zero,20ccc8 <__divdf3+0x78c>
  20c79c:	8809883a 	mov	r4,r17
  20c7a0:	d9400115 	stw	r5,4(sp)
  20c7a4:	d9800215 	stw	r6,8(sp)
  20c7a8:	da000415 	stw	r8,16(sp)
  20c7ac:	da400315 	stw	r9,12(sp)
  20c7b0:	02017440 	call	201744 <__clzsi2>
  20c7b4:	d9400117 	ldw	r5,4(sp)
  20c7b8:	d9800217 	ldw	r6,8(sp)
  20c7bc:	da000417 	ldw	r8,16(sp)
  20c7c0:	da400317 	ldw	r9,12(sp)
  20c7c4:	113ffd44 	addi	r4,r2,-11
  20c7c8:	00c00704 	movi	r3,28
  20c7cc:	19013a16 	blt	r3,r4,20ccb8 <__divdf3+0x77c>
  20c7d0:	00c00744 	movi	r3,29
  20c7d4:	153ffe04 	addi	r20,r2,-8
  20c7d8:	1907c83a 	sub	r3,r3,r4
  20c7dc:	8d22983a 	sll	r17,r17,r20
  20c7e0:	30c6d83a 	srl	r3,r6,r3
  20c7e4:	3528983a 	sll	r20,r6,r20
  20c7e8:	1c62b03a 	or	r17,r3,r17
  20c7ec:	1080fcc4 	addi	r2,r2,1011
  20c7f0:	0087c83a 	sub	r3,zero,r2
  20c7f4:	000f883a 	mov	r7,zero
  20c7f8:	003f8006 	br	20c5fc <_gp+0xffdfaa18>
  20c7fc:	0023883a 	mov	r17,zero
  20c800:	0029883a 	mov	r20,zero
  20c804:	01c00044 	movi	r7,1
  20c808:	003f7c06 	br	20c5fc <_gp+0xffdfaa18>
  20c80c:	01c000c4 	movi	r7,3
  20c810:	003f7a06 	br	20c5fc <_gp+0xffdfaa18>
  20c814:	02400104 	movi	r9,4
  20c818:	0021883a 	mov	r16,zero
  20c81c:	002b883a 	mov	r21,zero
  20c820:	01400044 	movi	r5,1
  20c824:	003f6306 	br	20c5b4 <_gp+0xffdfa9d0>
  20c828:	02400304 	movi	r9,12
  20c82c:	014000c4 	movi	r5,3
  20c830:	003f6006 	br	20c5b4 <_gp+0xffdfa9d0>
  20c834:	04000434 	movhi	r16,16
  20c838:	0009883a 	mov	r4,zero
  20c83c:	843fffc4 	addi	r16,r16,-1
  20c840:	057fffc4 	movi	r21,-1
  20c844:	0081ffc4 	movi	r2,2047
  20c848:	003f9b06 	br	20c6b8 <_gp+0xffdfaad4>
  20c84c:	00c00044 	movi	r3,1
  20c850:	1887c83a 	sub	r3,r3,r2
  20c854:	01000e04 	movi	r4,56
  20c858:	20c1530e 	bge	r4,r3,20cda8 <__divdf3+0x86c>
  20c85c:	9900004c 	andi	r4,r19,1
  20c860:	0005883a 	mov	r2,zero
  20c864:	0021883a 	mov	r16,zero
  20c868:	002b883a 	mov	r21,zero
  20c86c:	003f9206 	br	20c6b8 <_gp+0xffdfaad4>
  20c870:	8c012e36 	bltu	r17,r16,20cd2c <__divdf3+0x7f0>
  20c874:	84412c26 	beq	r16,r17,20cd28 <__divdf3+0x7ec>
  20c878:	a82f883a 	mov	r23,r21
  20c87c:	18ffffc4 	addi	r3,r3,-1
  20c880:	002b883a 	mov	r21,zero
  20c884:	a004d63a 	srli	r2,r20,24
  20c888:	8822923a 	slli	r17,r17,8
  20c88c:	a028923a 	slli	r20,r20,8
  20c890:	8009883a 	mov	r4,r16
  20c894:	88acb03a 	or	r22,r17,r2
  20c898:	dd000015 	stw	r20,0(sp)
  20c89c:	b028d43a 	srli	r20,r22,16
  20c8a0:	d8c00215 	stw	r3,8(sp)
  20c8a4:	b4bfffcc 	andi	r18,r22,65535
  20c8a8:	a00b883a 	mov	r5,r20
  20c8ac:	0200b580 	call	200b58 <__udivsi3>
  20c8b0:	100b883a 	mov	r5,r2
  20c8b4:	9009883a 	mov	r4,r18
  20c8b8:	1023883a 	mov	r17,r2
  20c8bc:	02017a80 	call	2017a8 <__mulsi3>
  20c8c0:	8009883a 	mov	r4,r16
  20c8c4:	a00b883a 	mov	r5,r20
  20c8c8:	1039883a 	mov	fp,r2
  20c8cc:	0200bbc0 	call	200bbc <__umodsi3>
  20c8d0:	1004943a 	slli	r2,r2,16
  20c8d4:	b808d43a 	srli	r4,r23,16
  20c8d8:	d8c00217 	ldw	r3,8(sp)
  20c8dc:	2084b03a 	or	r2,r4,r2
  20c8e0:	1700062e 	bgeu	r2,fp,20c8fc <__divdf3+0x3c0>
  20c8e4:	1585883a 	add	r2,r2,r22
  20c8e8:	893fffc4 	addi	r4,r17,-1
  20c8ec:	15811d36 	bltu	r2,r22,20cd64 <__divdf3+0x828>
  20c8f0:	17011c2e 	bgeu	r2,fp,20cd64 <__divdf3+0x828>
  20c8f4:	8c7fff84 	addi	r17,r17,-2
  20c8f8:	1585883a 	add	r2,r2,r22
  20c8fc:	1739c83a 	sub	fp,r2,fp
  20c900:	a00b883a 	mov	r5,r20
  20c904:	e009883a 	mov	r4,fp
  20c908:	d8c00215 	stw	r3,8(sp)
  20c90c:	0200b580 	call	200b58 <__udivsi3>
  20c910:	100b883a 	mov	r5,r2
  20c914:	9009883a 	mov	r4,r18
  20c918:	1021883a 	mov	r16,r2
  20c91c:	02017a80 	call	2017a8 <__mulsi3>
  20c920:	a00b883a 	mov	r5,r20
  20c924:	e009883a 	mov	r4,fp
  20c928:	d8800415 	stw	r2,16(sp)
  20c92c:	0200bbc0 	call	200bbc <__umodsi3>
  20c930:	1004943a 	slli	r2,r2,16
  20c934:	da000417 	ldw	r8,16(sp)
  20c938:	bdffffcc 	andi	r23,r23,65535
  20c93c:	b884b03a 	or	r2,r23,r2
  20c940:	d8c00217 	ldw	r3,8(sp)
  20c944:	1200062e 	bgeu	r2,r8,20c960 <__divdf3+0x424>
  20c948:	1585883a 	add	r2,r2,r22
  20c94c:	813fffc4 	addi	r4,r16,-1
  20c950:	15810236 	bltu	r2,r22,20cd5c <__divdf3+0x820>
  20c954:	1201012e 	bgeu	r2,r8,20cd5c <__divdf3+0x820>
  20c958:	843fff84 	addi	r16,r16,-2
  20c95c:	1585883a 	add	r2,r2,r22
  20c960:	8822943a 	slli	r17,r17,16
  20c964:	d9800017 	ldw	r6,0(sp)
  20c968:	1211c83a 	sub	r8,r2,r8
  20c96c:	8c22b03a 	or	r17,r17,r16
  20c970:	373fffcc 	andi	fp,r6,65535
  20c974:	8abfffcc 	andi	r10,r17,65535
  20c978:	8820d43a 	srli	r16,r17,16
  20c97c:	5009883a 	mov	r4,r10
  20c980:	e00b883a 	mov	r5,fp
  20c984:	302ed43a 	srli	r23,r6,16
  20c988:	d8c00215 	stw	r3,8(sp)
  20c98c:	da000415 	stw	r8,16(sp)
  20c990:	da800115 	stw	r10,4(sp)
  20c994:	02017a80 	call	2017a8 <__mulsi3>
  20c998:	800b883a 	mov	r5,r16
  20c99c:	e009883a 	mov	r4,fp
  20c9a0:	d8800515 	stw	r2,20(sp)
  20c9a4:	02017a80 	call	2017a8 <__mulsi3>
  20c9a8:	8009883a 	mov	r4,r16
  20c9ac:	b80b883a 	mov	r5,r23
  20c9b0:	d8800315 	stw	r2,12(sp)
  20c9b4:	02017a80 	call	2017a8 <__mulsi3>
  20c9b8:	da800117 	ldw	r10,4(sp)
  20c9bc:	b80b883a 	mov	r5,r23
  20c9c0:	1021883a 	mov	r16,r2
  20c9c4:	5009883a 	mov	r4,r10
  20c9c8:	02017a80 	call	2017a8 <__mulsi3>
  20c9cc:	d9c00517 	ldw	r7,20(sp)
  20c9d0:	da400317 	ldw	r9,12(sp)
  20c9d4:	d8c00217 	ldw	r3,8(sp)
  20c9d8:	3808d43a 	srli	r4,r7,16
  20c9dc:	1245883a 	add	r2,r2,r9
  20c9e0:	da000417 	ldw	r8,16(sp)
  20c9e4:	2085883a 	add	r2,r4,r2
  20c9e8:	1240022e 	bgeu	r2,r9,20c9f4 <__divdf3+0x4b8>
  20c9ec:	01000074 	movhi	r4,1
  20c9f0:	8121883a 	add	r16,r16,r4
  20c9f4:	1008d43a 	srli	r4,r2,16
  20c9f8:	1004943a 	slli	r2,r2,16
  20c9fc:	39ffffcc 	andi	r7,r7,65535
  20ca00:	2409883a 	add	r4,r4,r16
  20ca04:	11c5883a 	add	r2,r2,r7
  20ca08:	4100bb36 	bltu	r8,r4,20ccf8 <__divdf3+0x7bc>
  20ca0c:	4100d726 	beq	r8,r4,20cd6c <__divdf3+0x830>
  20ca10:	4109c83a 	sub	r4,r8,r4
  20ca14:	a8a1c83a 	sub	r16,r21,r2
  20ca18:	ac2b803a 	cmpltu	r21,r21,r16
  20ca1c:	256bc83a 	sub	r21,r4,r21
  20ca20:	b540d926 	beq	r22,r21,20cd88 <__divdf3+0x84c>
  20ca24:	a00b883a 	mov	r5,r20
  20ca28:	a809883a 	mov	r4,r21
  20ca2c:	d8c00215 	stw	r3,8(sp)
  20ca30:	0200b580 	call	200b58 <__udivsi3>
  20ca34:	100b883a 	mov	r5,r2
  20ca38:	9009883a 	mov	r4,r18
  20ca3c:	d8800515 	stw	r2,20(sp)
  20ca40:	02017a80 	call	2017a8 <__mulsi3>
  20ca44:	a809883a 	mov	r4,r21
  20ca48:	a00b883a 	mov	r5,r20
  20ca4c:	d8800415 	stw	r2,16(sp)
  20ca50:	0200bbc0 	call	200bbc <__umodsi3>
  20ca54:	1004943a 	slli	r2,r2,16
  20ca58:	8008d43a 	srli	r4,r16,16
  20ca5c:	da000417 	ldw	r8,16(sp)
  20ca60:	d8c00217 	ldw	r3,8(sp)
  20ca64:	2084b03a 	or	r2,r4,r2
  20ca68:	d9c00517 	ldw	r7,20(sp)
  20ca6c:	1200062e 	bgeu	r2,r8,20ca88 <__divdf3+0x54c>
  20ca70:	1585883a 	add	r2,r2,r22
  20ca74:	393fffc4 	addi	r4,r7,-1
  20ca78:	1580c536 	bltu	r2,r22,20cd90 <__divdf3+0x854>
  20ca7c:	1200c42e 	bgeu	r2,r8,20cd90 <__divdf3+0x854>
  20ca80:	39ffff84 	addi	r7,r7,-2
  20ca84:	1585883a 	add	r2,r2,r22
  20ca88:	122bc83a 	sub	r21,r2,r8
  20ca8c:	a00b883a 	mov	r5,r20
  20ca90:	a809883a 	mov	r4,r21
  20ca94:	d8c00215 	stw	r3,8(sp)
  20ca98:	d9c00515 	stw	r7,20(sp)
  20ca9c:	0200b580 	call	200b58 <__udivsi3>
  20caa0:	9009883a 	mov	r4,r18
  20caa4:	100b883a 	mov	r5,r2
  20caa8:	d8800415 	stw	r2,16(sp)
  20caac:	02017a80 	call	2017a8 <__mulsi3>
  20cab0:	a809883a 	mov	r4,r21
  20cab4:	a00b883a 	mov	r5,r20
  20cab8:	1025883a 	mov	r18,r2
  20cabc:	0200bbc0 	call	200bbc <__umodsi3>
  20cac0:	1004943a 	slli	r2,r2,16
  20cac4:	813fffcc 	andi	r4,r16,65535
  20cac8:	d8c00217 	ldw	r3,8(sp)
  20cacc:	20a0b03a 	or	r16,r4,r2
  20cad0:	d9c00517 	ldw	r7,20(sp)
  20cad4:	da000417 	ldw	r8,16(sp)
  20cad8:	8480062e 	bgeu	r16,r18,20caf4 <__divdf3+0x5b8>
  20cadc:	85a1883a 	add	r16,r16,r22
  20cae0:	40bfffc4 	addi	r2,r8,-1
  20cae4:	8580ac36 	bltu	r16,r22,20cd98 <__divdf3+0x85c>
  20cae8:	8480ab2e 	bgeu	r16,r18,20cd98 <__divdf3+0x85c>
  20caec:	423fff84 	addi	r8,r8,-2
  20caf0:	85a1883a 	add	r16,r16,r22
  20caf4:	3804943a 	slli	r2,r7,16
  20caf8:	84a1c83a 	sub	r16,r16,r18
  20cafc:	e009883a 	mov	r4,fp
  20cb00:	1228b03a 	or	r20,r2,r8
  20cb04:	a1ffffcc 	andi	r7,r20,65535
  20cb08:	a024d43a 	srli	r18,r20,16
  20cb0c:	380b883a 	mov	r5,r7
  20cb10:	d8c00215 	stw	r3,8(sp)
  20cb14:	d9c00515 	stw	r7,20(sp)
  20cb18:	02017a80 	call	2017a8 <__mulsi3>
  20cb1c:	900b883a 	mov	r5,r18
  20cb20:	e009883a 	mov	r4,fp
  20cb24:	102b883a 	mov	r21,r2
  20cb28:	02017a80 	call	2017a8 <__mulsi3>
  20cb2c:	900b883a 	mov	r5,r18
  20cb30:	b809883a 	mov	r4,r23
  20cb34:	1039883a 	mov	fp,r2
  20cb38:	02017a80 	call	2017a8 <__mulsi3>
  20cb3c:	d9c00517 	ldw	r7,20(sp)
  20cb40:	b80b883a 	mov	r5,r23
  20cb44:	1025883a 	mov	r18,r2
  20cb48:	3809883a 	mov	r4,r7
  20cb4c:	02017a80 	call	2017a8 <__mulsi3>
  20cb50:	a808d43a 	srli	r4,r21,16
  20cb54:	1705883a 	add	r2,r2,fp
  20cb58:	d8c00217 	ldw	r3,8(sp)
  20cb5c:	2085883a 	add	r2,r4,r2
  20cb60:	1700022e 	bgeu	r2,fp,20cb6c <__divdf3+0x630>
  20cb64:	01000074 	movhi	r4,1
  20cb68:	9125883a 	add	r18,r18,r4
  20cb6c:	1008d43a 	srli	r4,r2,16
  20cb70:	1004943a 	slli	r2,r2,16
  20cb74:	ad7fffcc 	andi	r21,r21,65535
  20cb78:	2489883a 	add	r4,r4,r18
  20cb7c:	1545883a 	add	r2,r2,r21
  20cb80:	81003836 	bltu	r16,r4,20cc64 <__divdf3+0x728>
  20cb84:	81003626 	beq	r16,r4,20cc60 <__divdf3+0x724>
  20cb88:	a5000054 	ori	r20,r20,1
  20cb8c:	1880ffc4 	addi	r2,r3,1023
  20cb90:	00bf2e0e 	bge	zero,r2,20c84c <_gp+0xffdfac68>
  20cb94:	a10001cc 	andi	r4,r20,7
  20cb98:	20000726 	beq	r4,zero,20cbb8 <__divdf3+0x67c>
  20cb9c:	a10003cc 	andi	r4,r20,15
  20cba0:	01400104 	movi	r5,4
  20cba4:	21400426 	beq	r4,r5,20cbb8 <__divdf3+0x67c>
  20cba8:	a149883a 	add	r4,r20,r5
  20cbac:	2529803a 	cmpltu	r20,r4,r20
  20cbb0:	8d23883a 	add	r17,r17,r20
  20cbb4:	2029883a 	mov	r20,r4
  20cbb8:	8900402c 	andhi	r4,r17,256
  20cbbc:	20000426 	beq	r4,zero,20cbd0 <__divdf3+0x694>
  20cbc0:	18810004 	addi	r2,r3,1024
  20cbc4:	00ffc034 	movhi	r3,65280
  20cbc8:	18ffffc4 	addi	r3,r3,-1
  20cbcc:	88e2703a 	and	r17,r17,r3
  20cbd0:	00c1ff84 	movi	r3,2046
  20cbd4:	18beb416 	blt	r3,r2,20c6a8 <_gp+0xffdfaac4>
  20cbd8:	a028d0fa 	srli	r20,r20,3
  20cbdc:	882a977a 	slli	r21,r17,29
  20cbe0:	8820927a 	slli	r16,r17,9
  20cbe4:	1081ffcc 	andi	r2,r2,2047
  20cbe8:	ad2ab03a 	or	r21,r21,r20
  20cbec:	8020d33a 	srli	r16,r16,12
  20cbf0:	9900004c 	andi	r4,r19,1
  20cbf4:	003eb006 	br	20c6b8 <_gp+0xffdfaad4>
  20cbf8:	8080022c 	andhi	r2,r16,8
  20cbfc:	10001226 	beq	r2,zero,20cc48 <__divdf3+0x70c>
  20cc00:	8880022c 	andhi	r2,r17,8
  20cc04:	1000101e 	bne	r2,zero,20cc48 <__divdf3+0x70c>
  20cc08:	00800434 	movhi	r2,16
  20cc0c:	8c000234 	orhi	r16,r17,8
  20cc10:	10bfffc4 	addi	r2,r2,-1
  20cc14:	b809883a 	mov	r4,r23
  20cc18:	80a0703a 	and	r16,r16,r2
  20cc1c:	a02b883a 	mov	r21,r20
  20cc20:	003f0806 	br	20c844 <_gp+0xffdfac60>
  20cc24:	008000c4 	movi	r2,3
  20cc28:	3880b126 	beq	r7,r2,20cef0 <__divdf3+0x9b4>
  20cc2c:	00800044 	movi	r2,1
  20cc30:	38805b1e 	bne	r7,r2,20cda0 <__divdf3+0x864>
  20cc34:	e009883a 	mov	r4,fp
  20cc38:	0005883a 	mov	r2,zero
  20cc3c:	0021883a 	mov	r16,zero
  20cc40:	002b883a 	mov	r21,zero
  20cc44:	003e9c06 	br	20c6b8 <_gp+0xffdfaad4>
  20cc48:	00800434 	movhi	r2,16
  20cc4c:	84000234 	orhi	r16,r16,8
  20cc50:	10bfffc4 	addi	r2,r2,-1
  20cc54:	b009883a 	mov	r4,r22
  20cc58:	80a0703a 	and	r16,r16,r2
  20cc5c:	003ef906 	br	20c844 <_gp+0xffdfac60>
  20cc60:	103fca26 	beq	r2,zero,20cb8c <_gp+0xffdfafa8>
  20cc64:	b421883a 	add	r16,r22,r16
  20cc68:	a17fffc4 	addi	r5,r20,-1
  20cc6c:	8580422e 	bgeu	r16,r22,20cd78 <__divdf3+0x83c>
  20cc70:	2829883a 	mov	r20,r5
  20cc74:	813fc41e 	bne	r16,r4,20cb88 <_gp+0xffdfafa4>
  20cc78:	d9800017 	ldw	r6,0(sp)
  20cc7c:	30bfc21e 	bne	r6,r2,20cb88 <_gp+0xffdfafa4>
  20cc80:	003fc206 	br	20cb8c <_gp+0xffdfafa8>
  20cc84:	143ff604 	addi	r16,r2,-40
  20cc88:	8c20983a 	sll	r16,r17,r16
  20cc8c:	002b883a 	mov	r21,zero
  20cc90:	003eb406 	br	20c764 <_gp+0xffdfab80>
  20cc94:	d9800215 	stw	r6,8(sp)
  20cc98:	d9c00515 	stw	r7,20(sp)
  20cc9c:	da000415 	stw	r8,16(sp)
  20cca0:	02017440 	call	201744 <__clzsi2>
  20cca4:	10800804 	addi	r2,r2,32
  20cca8:	da000417 	ldw	r8,16(sp)
  20ccac:	d9c00517 	ldw	r7,20(sp)
  20ccb0:	d9800217 	ldw	r6,8(sp)
  20ccb4:	003ea106 	br	20c73c <_gp+0xffdfab58>
  20ccb8:	147ff604 	addi	r17,r2,-40
  20ccbc:	3462983a 	sll	r17,r6,r17
  20ccc0:	0029883a 	mov	r20,zero
  20ccc4:	003ec906 	br	20c7ec <_gp+0xffdfac08>
  20ccc8:	3009883a 	mov	r4,r6
  20cccc:	d9400115 	stw	r5,4(sp)
  20ccd0:	d9800215 	stw	r6,8(sp)
  20ccd4:	da000415 	stw	r8,16(sp)
  20ccd8:	da400315 	stw	r9,12(sp)
  20ccdc:	02017440 	call	201744 <__clzsi2>
  20cce0:	10800804 	addi	r2,r2,32
  20cce4:	da400317 	ldw	r9,12(sp)
  20cce8:	da000417 	ldw	r8,16(sp)
  20ccec:	d9800217 	ldw	r6,8(sp)
  20ccf0:	d9400117 	ldw	r5,4(sp)
  20ccf4:	003eb306 	br	20c7c4 <_gp+0xffdfabe0>
  20ccf8:	d9800017 	ldw	r6,0(sp)
  20ccfc:	a9ab883a 	add	r21,r21,r6
  20cd00:	a98b803a 	cmpltu	r5,r21,r6
  20cd04:	2d8b883a 	add	r5,r5,r22
  20cd08:	2a11883a 	add	r8,r5,r8
  20cd0c:	897fffc4 	addi	r5,r17,-1
  20cd10:	b2000c2e 	bgeu	r22,r8,20cd44 <__divdf3+0x808>
  20cd14:	41003f36 	bltu	r8,r4,20ce14 <__divdf3+0x8d8>
  20cd18:	22006c26 	beq	r4,r8,20cecc <__divdf3+0x990>
  20cd1c:	4109c83a 	sub	r4,r8,r4
  20cd20:	2823883a 	mov	r17,r5
  20cd24:	003f3b06 	br	20ca14 <_gp+0xffdfae30>
  20cd28:	ad3ed336 	bltu	r21,r20,20c878 <_gp+0xffdfac94>
  20cd2c:	a804d07a 	srli	r2,r21,1
  20cd30:	802e97fa 	slli	r23,r16,31
  20cd34:	a82a97fa 	slli	r21,r21,31
  20cd38:	8020d07a 	srli	r16,r16,1
  20cd3c:	b8aeb03a 	or	r23,r23,r2
  20cd40:	003ed006 	br	20c884 <_gp+0xffdfaca0>
  20cd44:	b23ff51e 	bne	r22,r8,20cd1c <_gp+0xffdfb138>
  20cd48:	d9800017 	ldw	r6,0(sp)
  20cd4c:	a9bff12e 	bgeu	r21,r6,20cd14 <_gp+0xffdfb130>
  20cd50:	b109c83a 	sub	r4,r22,r4
  20cd54:	2823883a 	mov	r17,r5
  20cd58:	003f2e06 	br	20ca14 <_gp+0xffdfae30>
  20cd5c:	2021883a 	mov	r16,r4
  20cd60:	003eff06 	br	20c960 <_gp+0xffdfad7c>
  20cd64:	2023883a 	mov	r17,r4
  20cd68:	003ee406 	br	20c8fc <_gp+0xffdfad18>
  20cd6c:	a8bfe236 	bltu	r21,r2,20ccf8 <_gp+0xffdfb114>
  20cd70:	0009883a 	mov	r4,zero
  20cd74:	003f2706 	br	20ca14 <_gp+0xffdfae30>
  20cd78:	81002d36 	bltu	r16,r4,20ce30 <__divdf3+0x8f4>
  20cd7c:	24005626 	beq	r4,r16,20ced8 <__divdf3+0x99c>
  20cd80:	2829883a 	mov	r20,r5
  20cd84:	003f8006 	br	20cb88 <_gp+0xffdfafa4>
  20cd88:	053fffc4 	movi	r20,-1
  20cd8c:	003f7f06 	br	20cb8c <_gp+0xffdfafa8>
  20cd90:	200f883a 	mov	r7,r4
  20cd94:	003f3c06 	br	20ca88 <_gp+0xffdfaea4>
  20cd98:	1011883a 	mov	r8,r2
  20cd9c:	003f5506 	br	20caf4 <_gp+0xffdfaf10>
  20cda0:	e027883a 	mov	r19,fp
  20cda4:	003f7906 	br	20cb8c <_gp+0xffdfafa8>
  20cda8:	010007c4 	movi	r4,31
  20cdac:	20c02816 	blt	r4,r3,20ce50 <__divdf3+0x914>
  20cdb0:	00800804 	movi	r2,32
  20cdb4:	10c5c83a 	sub	r2,r2,r3
  20cdb8:	888a983a 	sll	r5,r17,r2
  20cdbc:	a0c8d83a 	srl	r4,r20,r3
  20cdc0:	a084983a 	sll	r2,r20,r2
  20cdc4:	88e2d83a 	srl	r17,r17,r3
  20cdc8:	2906b03a 	or	r3,r5,r4
  20cdcc:	1004c03a 	cmpne	r2,r2,zero
  20cdd0:	1886b03a 	or	r3,r3,r2
  20cdd4:	188001cc 	andi	r2,r3,7
  20cdd8:	10000726 	beq	r2,zero,20cdf8 <__divdf3+0x8bc>
  20cddc:	188003cc 	andi	r2,r3,15
  20cde0:	01000104 	movi	r4,4
  20cde4:	11000426 	beq	r2,r4,20cdf8 <__divdf3+0x8bc>
  20cde8:	1805883a 	mov	r2,r3
  20cdec:	10c00104 	addi	r3,r2,4
  20cdf0:	1885803a 	cmpltu	r2,r3,r2
  20cdf4:	88a3883a 	add	r17,r17,r2
  20cdf8:	8880202c 	andhi	r2,r17,128
  20cdfc:	10002926 	beq	r2,zero,20cea4 <__divdf3+0x968>
  20ce00:	9900004c 	andi	r4,r19,1
  20ce04:	00800044 	movi	r2,1
  20ce08:	0021883a 	mov	r16,zero
  20ce0c:	002b883a 	mov	r21,zero
  20ce10:	003e2906 	br	20c6b8 <_gp+0xffdfaad4>
  20ce14:	d9800017 	ldw	r6,0(sp)
  20ce18:	8c7fff84 	addi	r17,r17,-2
  20ce1c:	a9ab883a 	add	r21,r21,r6
  20ce20:	a98b803a 	cmpltu	r5,r21,r6
  20ce24:	2d8b883a 	add	r5,r5,r22
  20ce28:	2a11883a 	add	r8,r5,r8
  20ce2c:	003ef806 	br	20ca10 <_gp+0xffdfae2c>
  20ce30:	d9800017 	ldw	r6,0(sp)
  20ce34:	318f883a 	add	r7,r6,r6
  20ce38:	398b803a 	cmpltu	r5,r7,r6
  20ce3c:	2d8d883a 	add	r6,r5,r22
  20ce40:	81a1883a 	add	r16,r16,r6
  20ce44:	a17fff84 	addi	r5,r20,-2
  20ce48:	d9c00015 	stw	r7,0(sp)
  20ce4c:	003f8806 	br	20cc70 <_gp+0xffdfb08c>
  20ce50:	013ff844 	movi	r4,-31
  20ce54:	2085c83a 	sub	r2,r4,r2
  20ce58:	8888d83a 	srl	r4,r17,r2
  20ce5c:	00800804 	movi	r2,32
  20ce60:	18802126 	beq	r3,r2,20cee8 <__divdf3+0x9ac>
  20ce64:	04001004 	movi	r16,64
  20ce68:	80c7c83a 	sub	r3,r16,r3
  20ce6c:	88e0983a 	sll	r16,r17,r3
  20ce70:	8504b03a 	or	r2,r16,r20
  20ce74:	1004c03a 	cmpne	r2,r2,zero
  20ce78:	2084b03a 	or	r2,r4,r2
  20ce7c:	144001cc 	andi	r17,r2,7
  20ce80:	88000d1e 	bne	r17,zero,20ceb8 <__divdf3+0x97c>
  20ce84:	0021883a 	mov	r16,zero
  20ce88:	102ad0fa 	srli	r21,r2,3
  20ce8c:	9900004c 	andi	r4,r19,1
  20ce90:	0005883a 	mov	r2,zero
  20ce94:	ac6ab03a 	or	r21,r21,r17
  20ce98:	003e0706 	br	20c6b8 <_gp+0xffdfaad4>
  20ce9c:	1007883a 	mov	r3,r2
  20cea0:	0023883a 	mov	r17,zero
  20cea4:	8820927a 	slli	r16,r17,9
  20cea8:	1805883a 	mov	r2,r3
  20ceac:	8822977a 	slli	r17,r17,29
  20ceb0:	8020d33a 	srli	r16,r16,12
  20ceb4:	003ff406 	br	20ce88 <_gp+0xffdfb2a4>
  20ceb8:	10c003cc 	andi	r3,r2,15
  20cebc:	01000104 	movi	r4,4
  20cec0:	193ff626 	beq	r3,r4,20ce9c <_gp+0xffdfb2b8>
  20cec4:	0023883a 	mov	r17,zero
  20cec8:	003fc806 	br	20cdec <_gp+0xffdfb208>
  20cecc:	a8bfd136 	bltu	r21,r2,20ce14 <_gp+0xffdfb230>
  20ced0:	2823883a 	mov	r17,r5
  20ced4:	003fa606 	br	20cd70 <_gp+0xffdfb18c>
  20ced8:	d9800017 	ldw	r6,0(sp)
  20cedc:	30bfd436 	bltu	r6,r2,20ce30 <_gp+0xffdfb24c>
  20cee0:	2829883a 	mov	r20,r5
  20cee4:	003f6406 	br	20cc78 <_gp+0xffdfb094>
  20cee8:	0021883a 	mov	r16,zero
  20ceec:	003fe006 	br	20ce70 <_gp+0xffdfb28c>
  20cef0:	00800434 	movhi	r2,16
  20cef4:	8c000234 	orhi	r16,r17,8
  20cef8:	10bfffc4 	addi	r2,r2,-1
  20cefc:	e009883a 	mov	r4,fp
  20cf00:	80a0703a 	and	r16,r16,r2
  20cf04:	a02b883a 	mov	r21,r20
  20cf08:	003e4e06 	br	20c844 <_gp+0xffdfac60>

0020cf0c <__eqdf2>:
  20cf0c:	2804d53a 	srli	r2,r5,20
  20cf10:	3806d53a 	srli	r3,r7,20
  20cf14:	02000434 	movhi	r8,16
  20cf18:	423fffc4 	addi	r8,r8,-1
  20cf1c:	1081ffcc 	andi	r2,r2,2047
  20cf20:	0281ffc4 	movi	r10,2047
  20cf24:	2a12703a 	and	r9,r5,r8
  20cf28:	18c1ffcc 	andi	r3,r3,2047
  20cf2c:	3a10703a 	and	r8,r7,r8
  20cf30:	280ad7fa 	srli	r5,r5,31
  20cf34:	380ed7fa 	srli	r7,r7,31
  20cf38:	12801026 	beq	r2,r10,20cf7c <__eqdf2+0x70>
  20cf3c:	0281ffc4 	movi	r10,2047
  20cf40:	1a800a26 	beq	r3,r10,20cf6c <__eqdf2+0x60>
  20cf44:	10c00226 	beq	r2,r3,20cf50 <__eqdf2+0x44>
  20cf48:	00800044 	movi	r2,1
  20cf4c:	f800283a 	ret
  20cf50:	4a3ffd1e 	bne	r9,r8,20cf48 <_gp+0xffdfb364>
  20cf54:	21bffc1e 	bne	r4,r6,20cf48 <_gp+0xffdfb364>
  20cf58:	29c00c26 	beq	r5,r7,20cf8c <__eqdf2+0x80>
  20cf5c:	103ffa1e 	bne	r2,zero,20cf48 <_gp+0xffdfb364>
  20cf60:	2244b03a 	or	r2,r4,r9
  20cf64:	1004c03a 	cmpne	r2,r2,zero
  20cf68:	f800283a 	ret
  20cf6c:	3214b03a 	or	r10,r6,r8
  20cf70:	503ff426 	beq	r10,zero,20cf44 <_gp+0xffdfb360>
  20cf74:	00800044 	movi	r2,1
  20cf78:	f800283a 	ret
  20cf7c:	2254b03a 	or	r10,r4,r9
  20cf80:	503fee26 	beq	r10,zero,20cf3c <_gp+0xffdfb358>
  20cf84:	00800044 	movi	r2,1
  20cf88:	f800283a 	ret
  20cf8c:	0005883a 	mov	r2,zero
  20cf90:	f800283a 	ret

0020cf94 <__gedf2>:
  20cf94:	2804d53a 	srli	r2,r5,20
  20cf98:	3806d53a 	srli	r3,r7,20
  20cf9c:	02000434 	movhi	r8,16
  20cfa0:	423fffc4 	addi	r8,r8,-1
  20cfa4:	1081ffcc 	andi	r2,r2,2047
  20cfa8:	0241ffc4 	movi	r9,2047
  20cfac:	2a14703a 	and	r10,r5,r8
  20cfb0:	18c1ffcc 	andi	r3,r3,2047
  20cfb4:	3a10703a 	and	r8,r7,r8
  20cfb8:	280ad7fa 	srli	r5,r5,31
  20cfbc:	380ed7fa 	srli	r7,r7,31
  20cfc0:	12401d26 	beq	r2,r9,20d038 <__gedf2+0xa4>
  20cfc4:	0241ffc4 	movi	r9,2047
  20cfc8:	1a401226 	beq	r3,r9,20d014 <__gedf2+0x80>
  20cfcc:	1000081e 	bne	r2,zero,20cff0 <__gedf2+0x5c>
  20cfd0:	2296b03a 	or	r11,r4,r10
  20cfd4:	5813003a 	cmpeq	r9,r11,zero
  20cfd8:	1800091e 	bne	r3,zero,20d000 <__gedf2+0x6c>
  20cfdc:	3218b03a 	or	r12,r6,r8
  20cfe0:	6000071e 	bne	r12,zero,20d000 <__gedf2+0x6c>
  20cfe4:	0005883a 	mov	r2,zero
  20cfe8:	5800101e 	bne	r11,zero,20d02c <__gedf2+0x98>
  20cfec:	f800283a 	ret
  20cff0:	18000c1e 	bne	r3,zero,20d024 <__gedf2+0x90>
  20cff4:	3212b03a 	or	r9,r6,r8
  20cff8:	48000c26 	beq	r9,zero,20d02c <__gedf2+0x98>
  20cffc:	0013883a 	mov	r9,zero
  20d000:	39c03fcc 	andi	r7,r7,255
  20d004:	48000826 	beq	r9,zero,20d028 <__gedf2+0x94>
  20d008:	38000926 	beq	r7,zero,20d030 <__gedf2+0x9c>
  20d00c:	00800044 	movi	r2,1
  20d010:	f800283a 	ret
  20d014:	3212b03a 	or	r9,r6,r8
  20d018:	483fec26 	beq	r9,zero,20cfcc <_gp+0xffdfb3e8>
  20d01c:	00bfff84 	movi	r2,-2
  20d020:	f800283a 	ret
  20d024:	39c03fcc 	andi	r7,r7,255
  20d028:	29c00626 	beq	r5,r7,20d044 <__gedf2+0xb0>
  20d02c:	283ff726 	beq	r5,zero,20d00c <_gp+0xffdfb428>
  20d030:	00bfffc4 	movi	r2,-1
  20d034:	f800283a 	ret
  20d038:	2292b03a 	or	r9,r4,r10
  20d03c:	483fe126 	beq	r9,zero,20cfc4 <_gp+0xffdfb3e0>
  20d040:	003ff606 	br	20d01c <_gp+0xffdfb438>
  20d044:	18bff916 	blt	r3,r2,20d02c <_gp+0xffdfb448>
  20d048:	10c00316 	blt	r2,r3,20d058 <__gedf2+0xc4>
  20d04c:	42bff736 	bltu	r8,r10,20d02c <_gp+0xffdfb448>
  20d050:	52000326 	beq	r10,r8,20d060 <__gedf2+0xcc>
  20d054:	5200042e 	bgeu	r10,r8,20d068 <__gedf2+0xd4>
  20d058:	283fec1e 	bne	r5,zero,20d00c <_gp+0xffdfb428>
  20d05c:	003ff406 	br	20d030 <_gp+0xffdfb44c>
  20d060:	313ff236 	bltu	r6,r4,20d02c <_gp+0xffdfb448>
  20d064:	21bffc36 	bltu	r4,r6,20d058 <_gp+0xffdfb474>
  20d068:	0005883a 	mov	r2,zero
  20d06c:	f800283a 	ret

0020d070 <__ledf2>:
  20d070:	2804d53a 	srli	r2,r5,20
  20d074:	3810d53a 	srli	r8,r7,20
  20d078:	00c00434 	movhi	r3,16
  20d07c:	18ffffc4 	addi	r3,r3,-1
  20d080:	1081ffcc 	andi	r2,r2,2047
  20d084:	0241ffc4 	movi	r9,2047
  20d088:	28d4703a 	and	r10,r5,r3
  20d08c:	4201ffcc 	andi	r8,r8,2047
  20d090:	38c6703a 	and	r3,r7,r3
  20d094:	280ad7fa 	srli	r5,r5,31
  20d098:	380ed7fa 	srli	r7,r7,31
  20d09c:	12401f26 	beq	r2,r9,20d11c <__ledf2+0xac>
  20d0a0:	0241ffc4 	movi	r9,2047
  20d0a4:	42401426 	beq	r8,r9,20d0f8 <__ledf2+0x88>
  20d0a8:	1000091e 	bne	r2,zero,20d0d0 <__ledf2+0x60>
  20d0ac:	2296b03a 	or	r11,r4,r10
  20d0b0:	5813003a 	cmpeq	r9,r11,zero
  20d0b4:	29403fcc 	andi	r5,r5,255
  20d0b8:	40000a1e 	bne	r8,zero,20d0e4 <__ledf2+0x74>
  20d0bc:	30d8b03a 	or	r12,r6,r3
  20d0c0:	6000081e 	bne	r12,zero,20d0e4 <__ledf2+0x74>
  20d0c4:	0005883a 	mov	r2,zero
  20d0c8:	5800111e 	bne	r11,zero,20d110 <__ledf2+0xa0>
  20d0cc:	f800283a 	ret
  20d0d0:	29403fcc 	andi	r5,r5,255
  20d0d4:	40000c1e 	bne	r8,zero,20d108 <__ledf2+0x98>
  20d0d8:	30d2b03a 	or	r9,r6,r3
  20d0dc:	48000c26 	beq	r9,zero,20d110 <__ledf2+0xa0>
  20d0e0:	0013883a 	mov	r9,zero
  20d0e4:	39c03fcc 	andi	r7,r7,255
  20d0e8:	48000826 	beq	r9,zero,20d10c <__ledf2+0x9c>
  20d0ec:	38001126 	beq	r7,zero,20d134 <__ledf2+0xc4>
  20d0f0:	00800044 	movi	r2,1
  20d0f4:	f800283a 	ret
  20d0f8:	30d2b03a 	or	r9,r6,r3
  20d0fc:	483fea26 	beq	r9,zero,20d0a8 <_gp+0xffdfb4c4>
  20d100:	00800084 	movi	r2,2
  20d104:	f800283a 	ret
  20d108:	39c03fcc 	andi	r7,r7,255
  20d10c:	39400726 	beq	r7,r5,20d12c <__ledf2+0xbc>
  20d110:	2800081e 	bne	r5,zero,20d134 <__ledf2+0xc4>
  20d114:	00800044 	movi	r2,1
  20d118:	f800283a 	ret
  20d11c:	2292b03a 	or	r9,r4,r10
  20d120:	483fdf26 	beq	r9,zero,20d0a0 <_gp+0xffdfb4bc>
  20d124:	00800084 	movi	r2,2
  20d128:	f800283a 	ret
  20d12c:	4080030e 	bge	r8,r2,20d13c <__ledf2+0xcc>
  20d130:	383fef26 	beq	r7,zero,20d0f0 <_gp+0xffdfb50c>
  20d134:	00bfffc4 	movi	r2,-1
  20d138:	f800283a 	ret
  20d13c:	123feb16 	blt	r2,r8,20d0ec <_gp+0xffdfb508>
  20d140:	1abff336 	bltu	r3,r10,20d110 <_gp+0xffdfb52c>
  20d144:	50c00326 	beq	r10,r3,20d154 <__ledf2+0xe4>
  20d148:	50c0042e 	bgeu	r10,r3,20d15c <__ledf2+0xec>
  20d14c:	283fe81e 	bne	r5,zero,20d0f0 <_gp+0xffdfb50c>
  20d150:	003ff806 	br	20d134 <_gp+0xffdfb550>
  20d154:	313fee36 	bltu	r6,r4,20d110 <_gp+0xffdfb52c>
  20d158:	21bffc36 	bltu	r4,r6,20d14c <_gp+0xffdfb568>
  20d15c:	0005883a 	mov	r2,zero
  20d160:	f800283a 	ret

0020d164 <__muldf3>:
  20d164:	deffee04 	addi	sp,sp,-72
  20d168:	dd000c15 	stw	r20,48(sp)
  20d16c:	2828d53a 	srli	r20,r5,20
  20d170:	ddc00f15 	stw	r23,60(sp)
  20d174:	282ed7fa 	srli	r23,r5,31
  20d178:	dc000815 	stw	r16,32(sp)
  20d17c:	04000434 	movhi	r16,16
  20d180:	dcc00b15 	stw	r19,44(sp)
  20d184:	843fffc4 	addi	r16,r16,-1
  20d188:	dfc01115 	stw	ra,68(sp)
  20d18c:	df001015 	stw	fp,64(sp)
  20d190:	dd800e15 	stw	r22,56(sp)
  20d194:	dd400d15 	stw	r21,52(sp)
  20d198:	dc800a15 	stw	r18,40(sp)
  20d19c:	dc400915 	stw	r17,36(sp)
  20d1a0:	a501ffcc 	andi	r20,r20,2047
  20d1a4:	2c20703a 	and	r16,r5,r16
  20d1a8:	b827883a 	mov	r19,r23
  20d1ac:	ba403fcc 	andi	r9,r23,255
  20d1b0:	a0006026 	beq	r20,zero,20d334 <__muldf3+0x1d0>
  20d1b4:	0081ffc4 	movi	r2,2047
  20d1b8:	202d883a 	mov	r22,r4
  20d1bc:	a0803626 	beq	r20,r2,20d298 <__muldf3+0x134>
  20d1c0:	84000434 	orhi	r16,r16,16
  20d1c4:	200ad77a 	srli	r5,r4,29
  20d1c8:	800490fa 	slli	r2,r16,3
  20d1cc:	202c90fa 	slli	r22,r4,3
  20d1d0:	a53f0044 	addi	r20,r20,-1023
  20d1d4:	28a0b03a 	or	r16,r5,r2
  20d1d8:	002b883a 	mov	r21,zero
  20d1dc:	000b883a 	mov	r5,zero
  20d1e0:	3804d53a 	srli	r2,r7,20
  20d1e4:	3838d7fa 	srli	fp,r7,31
  20d1e8:	04400434 	movhi	r17,16
  20d1ec:	8c7fffc4 	addi	r17,r17,-1
  20d1f0:	1081ffcc 	andi	r2,r2,2047
  20d1f4:	3025883a 	mov	r18,r6
  20d1f8:	3c62703a 	and	r17,r7,r17
  20d1fc:	e2803fcc 	andi	r10,fp,255
  20d200:	10006d26 	beq	r2,zero,20d3b8 <__muldf3+0x254>
  20d204:	00c1ffc4 	movi	r3,2047
  20d208:	10c06526 	beq	r2,r3,20d3a0 <__muldf3+0x23c>
  20d20c:	8c400434 	orhi	r17,r17,16
  20d210:	300ed77a 	srli	r7,r6,29
  20d214:	880690fa 	slli	r3,r17,3
  20d218:	302490fa 	slli	r18,r6,3
  20d21c:	10bf0044 	addi	r2,r2,-1023
  20d220:	38e2b03a 	or	r17,r7,r3
  20d224:	000f883a 	mov	r7,zero
  20d228:	a087883a 	add	r3,r20,r2
  20d22c:	010003c4 	movi	r4,15
  20d230:	3d44b03a 	or	r2,r7,r21
  20d234:	e5ccf03a 	xor	r6,fp,r23
  20d238:	1a000044 	addi	r8,r3,1
  20d23c:	20809b36 	bltu	r4,r2,20d4ac <__muldf3+0x348>
  20d240:	100490ba 	slli	r2,r2,2
  20d244:	01000874 	movhi	r4,33
  20d248:	21349604 	addi	r4,r4,-11688
  20d24c:	1105883a 	add	r2,r2,r4
  20d250:	10800017 	ldw	r2,0(r2)
  20d254:	1000683a 	jmp	r2
  20d258:	0020d4ac 	andhi	zero,zero,33618
  20d25c:	0020d2b8 	rdprs	zero,zero,-31926
  20d260:	0020d2b8 	rdprs	zero,zero,-31926
  20d264:	0020d2b4 	movhi	zero,33610
  20d268:	0020d488 	cmpgei	zero,zero,-31918
  20d26c:	0020d488 	cmpgei	zero,zero,-31918
  20d270:	0020d470 	cmpltui	zero,zero,33617
  20d274:	0020d2b4 	movhi	zero,33610
  20d278:	0020d488 	cmpgei	zero,zero,-31918
  20d27c:	0020d470 	cmpltui	zero,zero,33617
  20d280:	0020d488 	cmpgei	zero,zero,-31918
  20d284:	0020d2b4 	movhi	zero,33610
  20d288:	0020d498 	cmpnei	zero,zero,-31918
  20d28c:	0020d498 	cmpnei	zero,zero,-31918
  20d290:	0020d498 	cmpnei	zero,zero,-31918
  20d294:	0020d7f8 	rdprs	zero,zero,-31905
  20d298:	2404b03a 	or	r2,r4,r16
  20d29c:	1000711e 	bne	r2,zero,20d464 <__muldf3+0x300>
  20d2a0:	05400204 	movi	r21,8
  20d2a4:	0021883a 	mov	r16,zero
  20d2a8:	002d883a 	mov	r22,zero
  20d2ac:	01400084 	movi	r5,2
  20d2b0:	003fcb06 	br	20d1e0 <_gp+0xffdfb5fc>
  20d2b4:	500d883a 	mov	r6,r10
  20d2b8:	00800084 	movi	r2,2
  20d2bc:	38805926 	beq	r7,r2,20d424 <__muldf3+0x2c0>
  20d2c0:	008000c4 	movi	r2,3
  20d2c4:	3881bb26 	beq	r7,r2,20d9b4 <__muldf3+0x850>
  20d2c8:	00800044 	movi	r2,1
  20d2cc:	3881961e 	bne	r7,r2,20d928 <__muldf3+0x7c4>
  20d2d0:	3027883a 	mov	r19,r6
  20d2d4:	0005883a 	mov	r2,zero
  20d2d8:	0021883a 	mov	r16,zero
  20d2dc:	002d883a 	mov	r22,zero
  20d2e0:	1004953a 	slli	r2,r2,20
  20d2e4:	98c03fcc 	andi	r3,r19,255
  20d2e8:	04400434 	movhi	r17,16
  20d2ec:	8c7fffc4 	addi	r17,r17,-1
  20d2f0:	180697fa 	slli	r3,r3,31
  20d2f4:	8460703a 	and	r16,r16,r17
  20d2f8:	80a0b03a 	or	r16,r16,r2
  20d2fc:	80c6b03a 	or	r3,r16,r3
  20d300:	b005883a 	mov	r2,r22
  20d304:	dfc01117 	ldw	ra,68(sp)
  20d308:	df001017 	ldw	fp,64(sp)
  20d30c:	ddc00f17 	ldw	r23,60(sp)
  20d310:	dd800e17 	ldw	r22,56(sp)
  20d314:	dd400d17 	ldw	r21,52(sp)
  20d318:	dd000c17 	ldw	r20,48(sp)
  20d31c:	dcc00b17 	ldw	r19,44(sp)
  20d320:	dc800a17 	ldw	r18,40(sp)
  20d324:	dc400917 	ldw	r17,36(sp)
  20d328:	dc000817 	ldw	r16,32(sp)
  20d32c:	dec01204 	addi	sp,sp,72
  20d330:	f800283a 	ret
  20d334:	2404b03a 	or	r2,r4,r16
  20d338:	202b883a 	mov	r21,r4
  20d33c:	10004426 	beq	r2,zero,20d450 <__muldf3+0x2ec>
  20d340:	80015126 	beq	r16,zero,20d888 <__muldf3+0x724>
  20d344:	8009883a 	mov	r4,r16
  20d348:	d9800715 	stw	r6,28(sp)
  20d34c:	d9c00215 	stw	r7,8(sp)
  20d350:	da400415 	stw	r9,16(sp)
  20d354:	02017440 	call	201744 <__clzsi2>
  20d358:	d9800717 	ldw	r6,28(sp)
  20d35c:	d9c00217 	ldw	r7,8(sp)
  20d360:	da400417 	ldw	r9,16(sp)
  20d364:	113ffd44 	addi	r4,r2,-11
  20d368:	00c00704 	movi	r3,28
  20d36c:	19014216 	blt	r3,r4,20d878 <__muldf3+0x714>
  20d370:	00c00744 	movi	r3,29
  20d374:	15bffe04 	addi	r22,r2,-8
  20d378:	1907c83a 	sub	r3,r3,r4
  20d37c:	85a0983a 	sll	r16,r16,r22
  20d380:	a8c6d83a 	srl	r3,r21,r3
  20d384:	adac983a 	sll	r22,r21,r22
  20d388:	1c20b03a 	or	r16,r3,r16
  20d38c:	1080fcc4 	addi	r2,r2,1011
  20d390:	00a9c83a 	sub	r20,zero,r2
  20d394:	002b883a 	mov	r21,zero
  20d398:	000b883a 	mov	r5,zero
  20d39c:	003f9006 	br	20d1e0 <_gp+0xffdfb5fc>
  20d3a0:	3446b03a 	or	r3,r6,r17
  20d3a4:	1800281e 	bne	r3,zero,20d448 <__muldf3+0x2e4>
  20d3a8:	0023883a 	mov	r17,zero
  20d3ac:	0025883a 	mov	r18,zero
  20d3b0:	01c00084 	movi	r7,2
  20d3b4:	003f9c06 	br	20d228 <_gp+0xffdfb644>
  20d3b8:	3446b03a 	or	r3,r6,r17
  20d3bc:	18001e26 	beq	r3,zero,20d438 <__muldf3+0x2d4>
  20d3c0:	88012126 	beq	r17,zero,20d848 <__muldf3+0x6e4>
  20d3c4:	8809883a 	mov	r4,r17
  20d3c8:	d9400215 	stw	r5,8(sp)
  20d3cc:	d9800715 	stw	r6,28(sp)
  20d3d0:	da400415 	stw	r9,16(sp)
  20d3d4:	da800315 	stw	r10,12(sp)
  20d3d8:	02017440 	call	201744 <__clzsi2>
  20d3dc:	d9400217 	ldw	r5,8(sp)
  20d3e0:	d9800717 	ldw	r6,28(sp)
  20d3e4:	da400417 	ldw	r9,16(sp)
  20d3e8:	da800317 	ldw	r10,12(sp)
  20d3ec:	113ffd44 	addi	r4,r2,-11
  20d3f0:	00c00704 	movi	r3,28
  20d3f4:	19011016 	blt	r3,r4,20d838 <__muldf3+0x6d4>
  20d3f8:	00c00744 	movi	r3,29
  20d3fc:	14bffe04 	addi	r18,r2,-8
  20d400:	1907c83a 	sub	r3,r3,r4
  20d404:	8ca2983a 	sll	r17,r17,r18
  20d408:	30c6d83a 	srl	r3,r6,r3
  20d40c:	34a4983a 	sll	r18,r6,r18
  20d410:	1c62b03a 	or	r17,r3,r17
  20d414:	1080fcc4 	addi	r2,r2,1011
  20d418:	0085c83a 	sub	r2,zero,r2
  20d41c:	000f883a 	mov	r7,zero
  20d420:	003f8106 	br	20d228 <_gp+0xffdfb644>
  20d424:	3027883a 	mov	r19,r6
  20d428:	0081ffc4 	movi	r2,2047
  20d42c:	0021883a 	mov	r16,zero
  20d430:	002d883a 	mov	r22,zero
  20d434:	003faa06 	br	20d2e0 <_gp+0xffdfb6fc>
  20d438:	0023883a 	mov	r17,zero
  20d43c:	0025883a 	mov	r18,zero
  20d440:	01c00044 	movi	r7,1
  20d444:	003f7806 	br	20d228 <_gp+0xffdfb644>
  20d448:	01c000c4 	movi	r7,3
  20d44c:	003f7606 	br	20d228 <_gp+0xffdfb644>
  20d450:	05400104 	movi	r21,4
  20d454:	0021883a 	mov	r16,zero
  20d458:	002d883a 	mov	r22,zero
  20d45c:	01400044 	movi	r5,1
  20d460:	003f5f06 	br	20d1e0 <_gp+0xffdfb5fc>
  20d464:	05400304 	movi	r21,12
  20d468:	014000c4 	movi	r5,3
  20d46c:	003f5c06 	br	20d1e0 <_gp+0xffdfb5fc>
  20d470:	04000434 	movhi	r16,16
  20d474:	0027883a 	mov	r19,zero
  20d478:	843fffc4 	addi	r16,r16,-1
  20d47c:	05bfffc4 	movi	r22,-1
  20d480:	0081ffc4 	movi	r2,2047
  20d484:	003f9606 	br	20d2e0 <_gp+0xffdfb6fc>
  20d488:	8023883a 	mov	r17,r16
  20d48c:	b025883a 	mov	r18,r22
  20d490:	280f883a 	mov	r7,r5
  20d494:	003f8806 	br	20d2b8 <_gp+0xffdfb6d4>
  20d498:	8023883a 	mov	r17,r16
  20d49c:	b025883a 	mov	r18,r22
  20d4a0:	480d883a 	mov	r6,r9
  20d4a4:	280f883a 	mov	r7,r5
  20d4a8:	003f8306 	br	20d2b8 <_gp+0xffdfb6d4>
  20d4ac:	b026d43a 	srli	r19,r22,16
  20d4b0:	902ed43a 	srli	r23,r18,16
  20d4b4:	b5bfffcc 	andi	r22,r22,65535
  20d4b8:	94bfffcc 	andi	r18,r18,65535
  20d4bc:	b00b883a 	mov	r5,r22
  20d4c0:	9009883a 	mov	r4,r18
  20d4c4:	d8c00515 	stw	r3,20(sp)
  20d4c8:	d9800715 	stw	r6,28(sp)
  20d4cc:	da000615 	stw	r8,24(sp)
  20d4d0:	02017a80 	call	2017a8 <__mulsi3>
  20d4d4:	980b883a 	mov	r5,r19
  20d4d8:	9009883a 	mov	r4,r18
  20d4dc:	1029883a 	mov	r20,r2
  20d4e0:	02017a80 	call	2017a8 <__mulsi3>
  20d4e4:	b80b883a 	mov	r5,r23
  20d4e8:	9809883a 	mov	r4,r19
  20d4ec:	102b883a 	mov	r21,r2
  20d4f0:	02017a80 	call	2017a8 <__mulsi3>
  20d4f4:	b809883a 	mov	r4,r23
  20d4f8:	b00b883a 	mov	r5,r22
  20d4fc:	1039883a 	mov	fp,r2
  20d500:	02017a80 	call	2017a8 <__mulsi3>
  20d504:	a008d43a 	srli	r4,r20,16
  20d508:	1545883a 	add	r2,r2,r21
  20d50c:	d8c00517 	ldw	r3,20(sp)
  20d510:	2085883a 	add	r2,r4,r2
  20d514:	d9800717 	ldw	r6,28(sp)
  20d518:	da000617 	ldw	r8,24(sp)
  20d51c:	1540022e 	bgeu	r2,r21,20d528 <__muldf3+0x3c4>
  20d520:	01000074 	movhi	r4,1
  20d524:	e139883a 	add	fp,fp,r4
  20d528:	100e943a 	slli	r7,r2,16
  20d52c:	1004d43a 	srli	r2,r2,16
  20d530:	882ad43a 	srli	r21,r17,16
  20d534:	a53fffcc 	andi	r20,r20,65535
  20d538:	8c7fffcc 	andi	r17,r17,65535
  20d53c:	3d29883a 	add	r20,r7,r20
  20d540:	b00b883a 	mov	r5,r22
  20d544:	8809883a 	mov	r4,r17
  20d548:	d8c00515 	stw	r3,20(sp)
  20d54c:	d9800715 	stw	r6,28(sp)
  20d550:	da000615 	stw	r8,24(sp)
  20d554:	dd000115 	stw	r20,4(sp)
  20d558:	d8800015 	stw	r2,0(sp)
  20d55c:	02017a80 	call	2017a8 <__mulsi3>
  20d560:	980b883a 	mov	r5,r19
  20d564:	8809883a 	mov	r4,r17
  20d568:	d8800215 	stw	r2,8(sp)
  20d56c:	02017a80 	call	2017a8 <__mulsi3>
  20d570:	9809883a 	mov	r4,r19
  20d574:	a80b883a 	mov	r5,r21
  20d578:	1029883a 	mov	r20,r2
  20d57c:	02017a80 	call	2017a8 <__mulsi3>
  20d580:	b00b883a 	mov	r5,r22
  20d584:	a809883a 	mov	r4,r21
  20d588:	d8800415 	stw	r2,16(sp)
  20d58c:	02017a80 	call	2017a8 <__mulsi3>
  20d590:	d9c00217 	ldw	r7,8(sp)
  20d594:	1505883a 	add	r2,r2,r20
  20d598:	d8c00517 	ldw	r3,20(sp)
  20d59c:	3826d43a 	srli	r19,r7,16
  20d5a0:	d9800717 	ldw	r6,28(sp)
  20d5a4:	da000617 	ldw	r8,24(sp)
  20d5a8:	9885883a 	add	r2,r19,r2
  20d5ac:	da400417 	ldw	r9,16(sp)
  20d5b0:	1500022e 	bgeu	r2,r20,20d5bc <__muldf3+0x458>
  20d5b4:	01000074 	movhi	r4,1
  20d5b8:	4913883a 	add	r9,r9,r4
  20d5bc:	1028d43a 	srli	r20,r2,16
  20d5c0:	1004943a 	slli	r2,r2,16
  20d5c4:	802cd43a 	srli	r22,r16,16
  20d5c8:	843fffcc 	andi	r16,r16,65535
  20d5cc:	3cffffcc 	andi	r19,r7,65535
  20d5d0:	9009883a 	mov	r4,r18
  20d5d4:	800b883a 	mov	r5,r16
  20d5d8:	a269883a 	add	r20,r20,r9
  20d5dc:	d8c00515 	stw	r3,20(sp)
  20d5e0:	d9800715 	stw	r6,28(sp)
  20d5e4:	da000615 	stw	r8,24(sp)
  20d5e8:	14e7883a 	add	r19,r2,r19
  20d5ec:	02017a80 	call	2017a8 <__mulsi3>
  20d5f0:	9009883a 	mov	r4,r18
  20d5f4:	b00b883a 	mov	r5,r22
  20d5f8:	d8800315 	stw	r2,12(sp)
  20d5fc:	02017a80 	call	2017a8 <__mulsi3>
  20d600:	b809883a 	mov	r4,r23
  20d604:	b00b883a 	mov	r5,r22
  20d608:	d8800215 	stw	r2,8(sp)
  20d60c:	02017a80 	call	2017a8 <__mulsi3>
  20d610:	b80b883a 	mov	r5,r23
  20d614:	8009883a 	mov	r4,r16
  20d618:	d8800415 	stw	r2,16(sp)
  20d61c:	02017a80 	call	2017a8 <__mulsi3>
  20d620:	da800317 	ldw	r10,12(sp)
  20d624:	d9c00217 	ldw	r7,8(sp)
  20d628:	d9000017 	ldw	r4,0(sp)
  20d62c:	502ed43a 	srli	r23,r10,16
  20d630:	11c5883a 	add	r2,r2,r7
  20d634:	24e5883a 	add	r18,r4,r19
  20d638:	b885883a 	add	r2,r23,r2
  20d63c:	d8c00517 	ldw	r3,20(sp)
  20d640:	d9800717 	ldw	r6,28(sp)
  20d644:	da000617 	ldw	r8,24(sp)
  20d648:	da400417 	ldw	r9,16(sp)
  20d64c:	11c0022e 	bgeu	r2,r7,20d658 <__muldf3+0x4f4>
  20d650:	01000074 	movhi	r4,1
  20d654:	4913883a 	add	r9,r9,r4
  20d658:	100ed43a 	srli	r7,r2,16
  20d65c:	1004943a 	slli	r2,r2,16
  20d660:	55ffffcc 	andi	r23,r10,65535
  20d664:	3a53883a 	add	r9,r7,r9
  20d668:	8809883a 	mov	r4,r17
  20d66c:	800b883a 	mov	r5,r16
  20d670:	d8c00515 	stw	r3,20(sp)
  20d674:	d9800715 	stw	r6,28(sp)
  20d678:	da000615 	stw	r8,24(sp)
  20d67c:	da400415 	stw	r9,16(sp)
  20d680:	15ef883a 	add	r23,r2,r23
  20d684:	02017a80 	call	2017a8 <__mulsi3>
  20d688:	8809883a 	mov	r4,r17
  20d68c:	b00b883a 	mov	r5,r22
  20d690:	d8800215 	stw	r2,8(sp)
  20d694:	02017a80 	call	2017a8 <__mulsi3>
  20d698:	b00b883a 	mov	r5,r22
  20d69c:	a809883a 	mov	r4,r21
  20d6a0:	d8800315 	stw	r2,12(sp)
  20d6a4:	02017a80 	call	2017a8 <__mulsi3>
  20d6a8:	8009883a 	mov	r4,r16
  20d6ac:	a80b883a 	mov	r5,r21
  20d6b0:	1023883a 	mov	r17,r2
  20d6b4:	02017a80 	call	2017a8 <__mulsi3>
  20d6b8:	d9c00217 	ldw	r7,8(sp)
  20d6bc:	da800317 	ldw	r10,12(sp)
  20d6c0:	d8c00517 	ldw	r3,20(sp)
  20d6c4:	3808d43a 	srli	r4,r7,16
  20d6c8:	1285883a 	add	r2,r2,r10
  20d6cc:	d9800717 	ldw	r6,28(sp)
  20d6d0:	2085883a 	add	r2,r4,r2
  20d6d4:	da000617 	ldw	r8,24(sp)
  20d6d8:	da400417 	ldw	r9,16(sp)
  20d6dc:	1280022e 	bgeu	r2,r10,20d6e8 <__muldf3+0x584>
  20d6e0:	01000074 	movhi	r4,1
  20d6e4:	8923883a 	add	r17,r17,r4
  20d6e8:	1008943a 	slli	r4,r2,16
  20d6ec:	39ffffcc 	andi	r7,r7,65535
  20d6f0:	e4b9883a 	add	fp,fp,r18
  20d6f4:	21cf883a 	add	r7,r4,r7
  20d6f8:	e4e7803a 	cmpltu	r19,fp,r19
  20d6fc:	3d0f883a 	add	r7,r7,r20
  20d700:	bf39883a 	add	fp,r23,fp
  20d704:	99c9883a 	add	r4,r19,r7
  20d708:	e5ef803a 	cmpltu	r23,fp,r23
  20d70c:	490b883a 	add	r5,r9,r4
  20d710:	1004d43a 	srli	r2,r2,16
  20d714:	b965883a 	add	r18,r23,r5
  20d718:	24c9803a 	cmpltu	r4,r4,r19
  20d71c:	3d29803a 	cmpltu	r20,r7,r20
  20d720:	a128b03a 	or	r20,r20,r4
  20d724:	95ef803a 	cmpltu	r23,r18,r23
  20d728:	2a53803a 	cmpltu	r9,r5,r9
  20d72c:	a0a9883a 	add	r20,r20,r2
  20d730:	4deeb03a 	or	r23,r9,r23
  20d734:	a5ef883a 	add	r23,r20,r23
  20d738:	bc63883a 	add	r17,r23,r17
  20d73c:	e004927a 	slli	r2,fp,9
  20d740:	d9000117 	ldw	r4,4(sp)
  20d744:	882e927a 	slli	r23,r17,9
  20d748:	9022d5fa 	srli	r17,r18,23
  20d74c:	e038d5fa 	srli	fp,fp,23
  20d750:	1104b03a 	or	r2,r2,r4
  20d754:	9024927a 	slli	r18,r18,9
  20d758:	1004c03a 	cmpne	r2,r2,zero
  20d75c:	bc62b03a 	or	r17,r23,r17
  20d760:	1738b03a 	or	fp,r2,fp
  20d764:	8880402c 	andhi	r2,r17,256
  20d768:	e4a4b03a 	or	r18,fp,r18
  20d76c:	10000726 	beq	r2,zero,20d78c <__muldf3+0x628>
  20d770:	9006d07a 	srli	r3,r18,1
  20d774:	880497fa 	slli	r2,r17,31
  20d778:	9480004c 	andi	r18,r18,1
  20d77c:	8822d07a 	srli	r17,r17,1
  20d780:	1ca4b03a 	or	r18,r3,r18
  20d784:	14a4b03a 	or	r18,r2,r18
  20d788:	4007883a 	mov	r3,r8
  20d78c:	1880ffc4 	addi	r2,r3,1023
  20d790:	0080460e 	bge	zero,r2,20d8ac <__muldf3+0x748>
  20d794:	910001cc 	andi	r4,r18,7
  20d798:	20000726 	beq	r4,zero,20d7b8 <__muldf3+0x654>
  20d79c:	910003cc 	andi	r4,r18,15
  20d7a0:	01400104 	movi	r5,4
  20d7a4:	21400426 	beq	r4,r5,20d7b8 <__muldf3+0x654>
  20d7a8:	9149883a 	add	r4,r18,r5
  20d7ac:	24a5803a 	cmpltu	r18,r4,r18
  20d7b0:	8ca3883a 	add	r17,r17,r18
  20d7b4:	2025883a 	mov	r18,r4
  20d7b8:	8900402c 	andhi	r4,r17,256
  20d7bc:	20000426 	beq	r4,zero,20d7d0 <__muldf3+0x66c>
  20d7c0:	18810004 	addi	r2,r3,1024
  20d7c4:	00ffc034 	movhi	r3,65280
  20d7c8:	18ffffc4 	addi	r3,r3,-1
  20d7cc:	88e2703a 	and	r17,r17,r3
  20d7d0:	00c1ff84 	movi	r3,2046
  20d7d4:	18bf1316 	blt	r3,r2,20d424 <_gp+0xffdfb840>
  20d7d8:	882c977a 	slli	r22,r17,29
  20d7dc:	9024d0fa 	srli	r18,r18,3
  20d7e0:	8822927a 	slli	r17,r17,9
  20d7e4:	1081ffcc 	andi	r2,r2,2047
  20d7e8:	b4acb03a 	or	r22,r22,r18
  20d7ec:	8820d33a 	srli	r16,r17,12
  20d7f0:	3027883a 	mov	r19,r6
  20d7f4:	003eba06 	br	20d2e0 <_gp+0xffdfb6fc>
  20d7f8:	8080022c 	andhi	r2,r16,8
  20d7fc:	10000926 	beq	r2,zero,20d824 <__muldf3+0x6c0>
  20d800:	8880022c 	andhi	r2,r17,8
  20d804:	1000071e 	bne	r2,zero,20d824 <__muldf3+0x6c0>
  20d808:	00800434 	movhi	r2,16
  20d80c:	8c000234 	orhi	r16,r17,8
  20d810:	10bfffc4 	addi	r2,r2,-1
  20d814:	e027883a 	mov	r19,fp
  20d818:	80a0703a 	and	r16,r16,r2
  20d81c:	902d883a 	mov	r22,r18
  20d820:	003f1706 	br	20d480 <_gp+0xffdfb89c>
  20d824:	00800434 	movhi	r2,16
  20d828:	84000234 	orhi	r16,r16,8
  20d82c:	10bfffc4 	addi	r2,r2,-1
  20d830:	80a0703a 	and	r16,r16,r2
  20d834:	003f1206 	br	20d480 <_gp+0xffdfb89c>
  20d838:	147ff604 	addi	r17,r2,-40
  20d83c:	3462983a 	sll	r17,r6,r17
  20d840:	0025883a 	mov	r18,zero
  20d844:	003ef306 	br	20d414 <_gp+0xffdfb830>
  20d848:	3009883a 	mov	r4,r6
  20d84c:	d9400215 	stw	r5,8(sp)
  20d850:	d9800715 	stw	r6,28(sp)
  20d854:	da400415 	stw	r9,16(sp)
  20d858:	da800315 	stw	r10,12(sp)
  20d85c:	02017440 	call	201744 <__clzsi2>
  20d860:	10800804 	addi	r2,r2,32
  20d864:	da800317 	ldw	r10,12(sp)
  20d868:	da400417 	ldw	r9,16(sp)
  20d86c:	d9800717 	ldw	r6,28(sp)
  20d870:	d9400217 	ldw	r5,8(sp)
  20d874:	003edd06 	br	20d3ec <_gp+0xffdfb808>
  20d878:	143ff604 	addi	r16,r2,-40
  20d87c:	ac20983a 	sll	r16,r21,r16
  20d880:	002d883a 	mov	r22,zero
  20d884:	003ec106 	br	20d38c <_gp+0xffdfb7a8>
  20d888:	d9800715 	stw	r6,28(sp)
  20d88c:	d9c00215 	stw	r7,8(sp)
  20d890:	da400415 	stw	r9,16(sp)
  20d894:	02017440 	call	201744 <__clzsi2>
  20d898:	10800804 	addi	r2,r2,32
  20d89c:	da400417 	ldw	r9,16(sp)
  20d8a0:	d9c00217 	ldw	r7,8(sp)
  20d8a4:	d9800717 	ldw	r6,28(sp)
  20d8a8:	003eae06 	br	20d364 <_gp+0xffdfb780>
  20d8ac:	00c00044 	movi	r3,1
  20d8b0:	1887c83a 	sub	r3,r3,r2
  20d8b4:	01000e04 	movi	r4,56
  20d8b8:	20fe8516 	blt	r4,r3,20d2d0 <_gp+0xffdfb6ec>
  20d8bc:	010007c4 	movi	r4,31
  20d8c0:	20c01b16 	blt	r4,r3,20d930 <__muldf3+0x7cc>
  20d8c4:	00800804 	movi	r2,32
  20d8c8:	10c5c83a 	sub	r2,r2,r3
  20d8cc:	888a983a 	sll	r5,r17,r2
  20d8d0:	90c8d83a 	srl	r4,r18,r3
  20d8d4:	9084983a 	sll	r2,r18,r2
  20d8d8:	88e2d83a 	srl	r17,r17,r3
  20d8dc:	2906b03a 	or	r3,r5,r4
  20d8e0:	1004c03a 	cmpne	r2,r2,zero
  20d8e4:	1886b03a 	or	r3,r3,r2
  20d8e8:	188001cc 	andi	r2,r3,7
  20d8ec:	10000726 	beq	r2,zero,20d90c <__muldf3+0x7a8>
  20d8f0:	188003cc 	andi	r2,r3,15
  20d8f4:	01000104 	movi	r4,4
  20d8f8:	11000426 	beq	r2,r4,20d90c <__muldf3+0x7a8>
  20d8fc:	1805883a 	mov	r2,r3
  20d900:	10c00104 	addi	r3,r2,4
  20d904:	1885803a 	cmpltu	r2,r3,r2
  20d908:	88a3883a 	add	r17,r17,r2
  20d90c:	8880202c 	andhi	r2,r17,128
  20d910:	10001c26 	beq	r2,zero,20d984 <__muldf3+0x820>
  20d914:	3027883a 	mov	r19,r6
  20d918:	00800044 	movi	r2,1
  20d91c:	0021883a 	mov	r16,zero
  20d920:	002d883a 	mov	r22,zero
  20d924:	003e6e06 	br	20d2e0 <_gp+0xffdfb6fc>
  20d928:	4007883a 	mov	r3,r8
  20d92c:	003f9706 	br	20d78c <_gp+0xffdfbba8>
  20d930:	017ff844 	movi	r5,-31
  20d934:	2885c83a 	sub	r2,r5,r2
  20d938:	888ad83a 	srl	r5,r17,r2
  20d93c:	00800804 	movi	r2,32
  20d940:	18801a26 	beq	r3,r2,20d9ac <__muldf3+0x848>
  20d944:	01001004 	movi	r4,64
  20d948:	20c7c83a 	sub	r3,r4,r3
  20d94c:	88e2983a 	sll	r17,r17,r3
  20d950:	8ca4b03a 	or	r18,r17,r18
  20d954:	9004c03a 	cmpne	r2,r18,zero
  20d958:	2884b03a 	or	r2,r5,r2
  20d95c:	144001cc 	andi	r17,r2,7
  20d960:	88000d1e 	bne	r17,zero,20d998 <__muldf3+0x834>
  20d964:	0021883a 	mov	r16,zero
  20d968:	102cd0fa 	srli	r22,r2,3
  20d96c:	3027883a 	mov	r19,r6
  20d970:	0005883a 	mov	r2,zero
  20d974:	b46cb03a 	or	r22,r22,r17
  20d978:	003e5906 	br	20d2e0 <_gp+0xffdfb6fc>
  20d97c:	1007883a 	mov	r3,r2
  20d980:	0023883a 	mov	r17,zero
  20d984:	8820927a 	slli	r16,r17,9
  20d988:	1805883a 	mov	r2,r3
  20d98c:	8822977a 	slli	r17,r17,29
  20d990:	8020d33a 	srli	r16,r16,12
  20d994:	003ff406 	br	20d968 <_gp+0xffdfbd84>
  20d998:	10c003cc 	andi	r3,r2,15
  20d99c:	01000104 	movi	r4,4
  20d9a0:	193ff626 	beq	r3,r4,20d97c <_gp+0xffdfbd98>
  20d9a4:	0023883a 	mov	r17,zero
  20d9a8:	003fd506 	br	20d900 <_gp+0xffdfbd1c>
  20d9ac:	0023883a 	mov	r17,zero
  20d9b0:	003fe706 	br	20d950 <_gp+0xffdfbd6c>
  20d9b4:	00800434 	movhi	r2,16
  20d9b8:	8c000234 	orhi	r16,r17,8
  20d9bc:	10bfffc4 	addi	r2,r2,-1
  20d9c0:	3027883a 	mov	r19,r6
  20d9c4:	80a0703a 	and	r16,r16,r2
  20d9c8:	902d883a 	mov	r22,r18
  20d9cc:	003eac06 	br	20d480 <_gp+0xffdfb89c>

0020d9d0 <__subdf3>:
  20d9d0:	02000434 	movhi	r8,16
  20d9d4:	423fffc4 	addi	r8,r8,-1
  20d9d8:	defffb04 	addi	sp,sp,-20
  20d9dc:	2a14703a 	and	r10,r5,r8
  20d9e0:	3812d53a 	srli	r9,r7,20
  20d9e4:	3a10703a 	and	r8,r7,r8
  20d9e8:	2006d77a 	srli	r3,r4,29
  20d9ec:	3004d77a 	srli	r2,r6,29
  20d9f0:	dc000015 	stw	r16,0(sp)
  20d9f4:	501490fa 	slli	r10,r10,3
  20d9f8:	2820d53a 	srli	r16,r5,20
  20d9fc:	401090fa 	slli	r8,r8,3
  20da00:	dc800215 	stw	r18,8(sp)
  20da04:	dc400115 	stw	r17,4(sp)
  20da08:	dfc00415 	stw	ra,16(sp)
  20da0c:	202290fa 	slli	r17,r4,3
  20da10:	dcc00315 	stw	r19,12(sp)
  20da14:	4a41ffcc 	andi	r9,r9,2047
  20da18:	0101ffc4 	movi	r4,2047
  20da1c:	2824d7fa 	srli	r18,r5,31
  20da20:	8401ffcc 	andi	r16,r16,2047
  20da24:	50c6b03a 	or	r3,r10,r3
  20da28:	380ed7fa 	srli	r7,r7,31
  20da2c:	408ab03a 	or	r5,r8,r2
  20da30:	300c90fa 	slli	r6,r6,3
  20da34:	49009626 	beq	r9,r4,20dc90 <__subdf3+0x2c0>
  20da38:	39c0005c 	xori	r7,r7,1
  20da3c:	8245c83a 	sub	r2,r16,r9
  20da40:	3c807426 	beq	r7,r18,20dc14 <__subdf3+0x244>
  20da44:	0080af0e 	bge	zero,r2,20dd04 <__subdf3+0x334>
  20da48:	48002a1e 	bne	r9,zero,20daf4 <__subdf3+0x124>
  20da4c:	2988b03a 	or	r4,r5,r6
  20da50:	20009a1e 	bne	r4,zero,20dcbc <__subdf3+0x2ec>
  20da54:	888001cc 	andi	r2,r17,7
  20da58:	10000726 	beq	r2,zero,20da78 <__subdf3+0xa8>
  20da5c:	888003cc 	andi	r2,r17,15
  20da60:	01000104 	movi	r4,4
  20da64:	11000426 	beq	r2,r4,20da78 <__subdf3+0xa8>
  20da68:	890b883a 	add	r5,r17,r4
  20da6c:	2c63803a 	cmpltu	r17,r5,r17
  20da70:	1c47883a 	add	r3,r3,r17
  20da74:	2823883a 	mov	r17,r5
  20da78:	1880202c 	andhi	r2,r3,128
  20da7c:	10005926 	beq	r2,zero,20dbe4 <__subdf3+0x214>
  20da80:	84000044 	addi	r16,r16,1
  20da84:	0081ffc4 	movi	r2,2047
  20da88:	8080be26 	beq	r16,r2,20dd84 <__subdf3+0x3b4>
  20da8c:	017fe034 	movhi	r5,65408
  20da90:	297fffc4 	addi	r5,r5,-1
  20da94:	1946703a 	and	r3,r3,r5
  20da98:	1804977a 	slli	r2,r3,29
  20da9c:	1806927a 	slli	r3,r3,9
  20daa0:	8822d0fa 	srli	r17,r17,3
  20daa4:	8401ffcc 	andi	r16,r16,2047
  20daa8:	180ad33a 	srli	r5,r3,12
  20daac:	9100004c 	andi	r4,r18,1
  20dab0:	1444b03a 	or	r2,r2,r17
  20dab4:	80c1ffcc 	andi	r3,r16,2047
  20dab8:	1820953a 	slli	r16,r3,20
  20dabc:	20c03fcc 	andi	r3,r4,255
  20dac0:	180897fa 	slli	r4,r3,31
  20dac4:	00c00434 	movhi	r3,16
  20dac8:	18ffffc4 	addi	r3,r3,-1
  20dacc:	28c6703a 	and	r3,r5,r3
  20dad0:	1c06b03a 	or	r3,r3,r16
  20dad4:	1906b03a 	or	r3,r3,r4
  20dad8:	dfc00417 	ldw	ra,16(sp)
  20dadc:	dcc00317 	ldw	r19,12(sp)
  20dae0:	dc800217 	ldw	r18,8(sp)
  20dae4:	dc400117 	ldw	r17,4(sp)
  20dae8:	dc000017 	ldw	r16,0(sp)
  20daec:	dec00504 	addi	sp,sp,20
  20daf0:	f800283a 	ret
  20daf4:	0101ffc4 	movi	r4,2047
  20daf8:	813fd626 	beq	r16,r4,20da54 <_gp+0xffdfbe70>
  20dafc:	29402034 	orhi	r5,r5,128
  20db00:	01000e04 	movi	r4,56
  20db04:	2080a316 	blt	r4,r2,20dd94 <__subdf3+0x3c4>
  20db08:	010007c4 	movi	r4,31
  20db0c:	2080c616 	blt	r4,r2,20de28 <__subdf3+0x458>
  20db10:	01000804 	movi	r4,32
  20db14:	2089c83a 	sub	r4,r4,r2
  20db18:	2910983a 	sll	r8,r5,r4
  20db1c:	308ed83a 	srl	r7,r6,r2
  20db20:	3108983a 	sll	r4,r6,r4
  20db24:	2884d83a 	srl	r2,r5,r2
  20db28:	41ccb03a 	or	r6,r8,r7
  20db2c:	2008c03a 	cmpne	r4,r4,zero
  20db30:	310cb03a 	or	r6,r6,r4
  20db34:	898dc83a 	sub	r6,r17,r6
  20db38:	89a3803a 	cmpltu	r17,r17,r6
  20db3c:	1887c83a 	sub	r3,r3,r2
  20db40:	1c47c83a 	sub	r3,r3,r17
  20db44:	3023883a 	mov	r17,r6
  20db48:	1880202c 	andhi	r2,r3,128
  20db4c:	10002326 	beq	r2,zero,20dbdc <__subdf3+0x20c>
  20db50:	04c02034 	movhi	r19,128
  20db54:	9cffffc4 	addi	r19,r19,-1
  20db58:	1ce6703a 	and	r19,r3,r19
  20db5c:	98007a26 	beq	r19,zero,20dd48 <__subdf3+0x378>
  20db60:	9809883a 	mov	r4,r19
  20db64:	02017440 	call	201744 <__clzsi2>
  20db68:	113ffe04 	addi	r4,r2,-8
  20db6c:	00c007c4 	movi	r3,31
  20db70:	19007b16 	blt	r3,r4,20dd60 <__subdf3+0x390>
  20db74:	00800804 	movi	r2,32
  20db78:	1105c83a 	sub	r2,r2,r4
  20db7c:	8884d83a 	srl	r2,r17,r2
  20db80:	9906983a 	sll	r3,r19,r4
  20db84:	8922983a 	sll	r17,r17,r4
  20db88:	10c4b03a 	or	r2,r2,r3
  20db8c:	24007816 	blt	r4,r16,20dd70 <__subdf3+0x3a0>
  20db90:	2421c83a 	sub	r16,r4,r16
  20db94:	80c00044 	addi	r3,r16,1
  20db98:	010007c4 	movi	r4,31
  20db9c:	20c09516 	blt	r4,r3,20ddf4 <__subdf3+0x424>
  20dba0:	01400804 	movi	r5,32
  20dba4:	28cbc83a 	sub	r5,r5,r3
  20dba8:	88c8d83a 	srl	r4,r17,r3
  20dbac:	8962983a 	sll	r17,r17,r5
  20dbb0:	114a983a 	sll	r5,r2,r5
  20dbb4:	10c6d83a 	srl	r3,r2,r3
  20dbb8:	8804c03a 	cmpne	r2,r17,zero
  20dbbc:	290ab03a 	or	r5,r5,r4
  20dbc0:	28a2b03a 	or	r17,r5,r2
  20dbc4:	0021883a 	mov	r16,zero
  20dbc8:	003fa206 	br	20da54 <_gp+0xffdfbe70>
  20dbcc:	2090b03a 	or	r8,r4,r2
  20dbd0:	40018e26 	beq	r8,zero,20e20c <__subdf3+0x83c>
  20dbd4:	1007883a 	mov	r3,r2
  20dbd8:	2023883a 	mov	r17,r4
  20dbdc:	888001cc 	andi	r2,r17,7
  20dbe0:	103f9e1e 	bne	r2,zero,20da5c <_gp+0xffdfbe78>
  20dbe4:	1804977a 	slli	r2,r3,29
  20dbe8:	8822d0fa 	srli	r17,r17,3
  20dbec:	1810d0fa 	srli	r8,r3,3
  20dbf0:	9100004c 	andi	r4,r18,1
  20dbf4:	1444b03a 	or	r2,r2,r17
  20dbf8:	00c1ffc4 	movi	r3,2047
  20dbfc:	80c02826 	beq	r16,r3,20dca0 <__subdf3+0x2d0>
  20dc00:	01400434 	movhi	r5,16
  20dc04:	297fffc4 	addi	r5,r5,-1
  20dc08:	80e0703a 	and	r16,r16,r3
  20dc0c:	414a703a 	and	r5,r8,r5
  20dc10:	003fa806 	br	20dab4 <_gp+0xffdfbed0>
  20dc14:	0080630e 	bge	zero,r2,20dda4 <__subdf3+0x3d4>
  20dc18:	48003026 	beq	r9,zero,20dcdc <__subdf3+0x30c>
  20dc1c:	0101ffc4 	movi	r4,2047
  20dc20:	813f8c26 	beq	r16,r4,20da54 <_gp+0xffdfbe70>
  20dc24:	29402034 	orhi	r5,r5,128
  20dc28:	01000e04 	movi	r4,56
  20dc2c:	2080a90e 	bge	r4,r2,20ded4 <__subdf3+0x504>
  20dc30:	298cb03a 	or	r6,r5,r6
  20dc34:	3012c03a 	cmpne	r9,r6,zero
  20dc38:	0005883a 	mov	r2,zero
  20dc3c:	4c53883a 	add	r9,r9,r17
  20dc40:	4c63803a 	cmpltu	r17,r9,r17
  20dc44:	10c7883a 	add	r3,r2,r3
  20dc48:	88c7883a 	add	r3,r17,r3
  20dc4c:	4823883a 	mov	r17,r9
  20dc50:	1880202c 	andhi	r2,r3,128
  20dc54:	1000d026 	beq	r2,zero,20df98 <__subdf3+0x5c8>
  20dc58:	84000044 	addi	r16,r16,1
  20dc5c:	0081ffc4 	movi	r2,2047
  20dc60:	8080fe26 	beq	r16,r2,20e05c <__subdf3+0x68c>
  20dc64:	00bfe034 	movhi	r2,65408
  20dc68:	10bfffc4 	addi	r2,r2,-1
  20dc6c:	1886703a 	and	r3,r3,r2
  20dc70:	880ad07a 	srli	r5,r17,1
  20dc74:	180497fa 	slli	r2,r3,31
  20dc78:	8900004c 	andi	r4,r17,1
  20dc7c:	2922b03a 	or	r17,r5,r4
  20dc80:	1806d07a 	srli	r3,r3,1
  20dc84:	1462b03a 	or	r17,r2,r17
  20dc88:	3825883a 	mov	r18,r7
  20dc8c:	003f7106 	br	20da54 <_gp+0xffdfbe70>
  20dc90:	2984b03a 	or	r2,r5,r6
  20dc94:	103f6826 	beq	r2,zero,20da38 <_gp+0xffdfbe54>
  20dc98:	39c03fcc 	andi	r7,r7,255
  20dc9c:	003f6706 	br	20da3c <_gp+0xffdfbe58>
  20dca0:	4086b03a 	or	r3,r8,r2
  20dca4:	18015226 	beq	r3,zero,20e1f0 <__subdf3+0x820>
  20dca8:	00c00434 	movhi	r3,16
  20dcac:	41400234 	orhi	r5,r8,8
  20dcb0:	18ffffc4 	addi	r3,r3,-1
  20dcb4:	28ca703a 	and	r5,r5,r3
  20dcb8:	003f7e06 	br	20dab4 <_gp+0xffdfbed0>
  20dcbc:	10bfffc4 	addi	r2,r2,-1
  20dcc0:	1000491e 	bne	r2,zero,20dde8 <__subdf3+0x418>
  20dcc4:	898fc83a 	sub	r7,r17,r6
  20dcc8:	89e3803a 	cmpltu	r17,r17,r7
  20dccc:	1947c83a 	sub	r3,r3,r5
  20dcd0:	1c47c83a 	sub	r3,r3,r17
  20dcd4:	3823883a 	mov	r17,r7
  20dcd8:	003f9b06 	br	20db48 <_gp+0xffdfbf64>
  20dcdc:	2988b03a 	or	r4,r5,r6
  20dce0:	203f5c26 	beq	r4,zero,20da54 <_gp+0xffdfbe70>
  20dce4:	10bfffc4 	addi	r2,r2,-1
  20dce8:	1000931e 	bne	r2,zero,20df38 <__subdf3+0x568>
  20dcec:	898d883a 	add	r6,r17,r6
  20dcf0:	3463803a 	cmpltu	r17,r6,r17
  20dcf4:	1947883a 	add	r3,r3,r5
  20dcf8:	88c7883a 	add	r3,r17,r3
  20dcfc:	3023883a 	mov	r17,r6
  20dd00:	003fd306 	br	20dc50 <_gp+0xffdfc06c>
  20dd04:	1000541e 	bne	r2,zero,20de58 <__subdf3+0x488>
  20dd08:	80800044 	addi	r2,r16,1
  20dd0c:	1081ffcc 	andi	r2,r2,2047
  20dd10:	01000044 	movi	r4,1
  20dd14:	2080a20e 	bge	r4,r2,20dfa0 <__subdf3+0x5d0>
  20dd18:	8989c83a 	sub	r4,r17,r6
  20dd1c:	8905803a 	cmpltu	r2,r17,r4
  20dd20:	1967c83a 	sub	r19,r3,r5
  20dd24:	98a7c83a 	sub	r19,r19,r2
  20dd28:	9880202c 	andhi	r2,r19,128
  20dd2c:	10006326 	beq	r2,zero,20debc <__subdf3+0x4ec>
  20dd30:	3463c83a 	sub	r17,r6,r17
  20dd34:	28c7c83a 	sub	r3,r5,r3
  20dd38:	344d803a 	cmpltu	r6,r6,r17
  20dd3c:	19a7c83a 	sub	r19,r3,r6
  20dd40:	3825883a 	mov	r18,r7
  20dd44:	983f861e 	bne	r19,zero,20db60 <_gp+0xffdfbf7c>
  20dd48:	8809883a 	mov	r4,r17
  20dd4c:	02017440 	call	201744 <__clzsi2>
  20dd50:	10800804 	addi	r2,r2,32
  20dd54:	113ffe04 	addi	r4,r2,-8
  20dd58:	00c007c4 	movi	r3,31
  20dd5c:	193f850e 	bge	r3,r4,20db74 <_gp+0xffdfbf90>
  20dd60:	10bff604 	addi	r2,r2,-40
  20dd64:	8884983a 	sll	r2,r17,r2
  20dd68:	0023883a 	mov	r17,zero
  20dd6c:	243f880e 	bge	r4,r16,20db90 <_gp+0xffdfbfac>
  20dd70:	00ffe034 	movhi	r3,65408
  20dd74:	18ffffc4 	addi	r3,r3,-1
  20dd78:	8121c83a 	sub	r16,r16,r4
  20dd7c:	10c6703a 	and	r3,r2,r3
  20dd80:	003f3406 	br	20da54 <_gp+0xffdfbe70>
  20dd84:	9100004c 	andi	r4,r18,1
  20dd88:	000b883a 	mov	r5,zero
  20dd8c:	0005883a 	mov	r2,zero
  20dd90:	003f4806 	br	20dab4 <_gp+0xffdfbed0>
  20dd94:	298cb03a 	or	r6,r5,r6
  20dd98:	300cc03a 	cmpne	r6,r6,zero
  20dd9c:	0005883a 	mov	r2,zero
  20dda0:	003f6406 	br	20db34 <_gp+0xffdfbf50>
  20dda4:	10009a1e 	bne	r2,zero,20e010 <__subdf3+0x640>
  20dda8:	82400044 	addi	r9,r16,1
  20ddac:	4881ffcc 	andi	r2,r9,2047
  20ddb0:	02800044 	movi	r10,1
  20ddb4:	5080670e 	bge	r10,r2,20df54 <__subdf3+0x584>
  20ddb8:	0081ffc4 	movi	r2,2047
  20ddbc:	4880af26 	beq	r9,r2,20e07c <__subdf3+0x6ac>
  20ddc0:	898d883a 	add	r6,r17,r6
  20ddc4:	1945883a 	add	r2,r3,r5
  20ddc8:	3447803a 	cmpltu	r3,r6,r17
  20ddcc:	1887883a 	add	r3,r3,r2
  20ddd0:	182297fa 	slli	r17,r3,31
  20ddd4:	300cd07a 	srli	r6,r6,1
  20ddd8:	1806d07a 	srli	r3,r3,1
  20dddc:	4821883a 	mov	r16,r9
  20dde0:	89a2b03a 	or	r17,r17,r6
  20dde4:	003f1b06 	br	20da54 <_gp+0xffdfbe70>
  20dde8:	0101ffc4 	movi	r4,2047
  20ddec:	813f441e 	bne	r16,r4,20db00 <_gp+0xffdfbf1c>
  20ddf0:	003f1806 	br	20da54 <_gp+0xffdfbe70>
  20ddf4:	843ff844 	addi	r16,r16,-31
  20ddf8:	01400804 	movi	r5,32
  20ddfc:	1408d83a 	srl	r4,r2,r16
  20de00:	19405026 	beq	r3,r5,20df44 <__subdf3+0x574>
  20de04:	01401004 	movi	r5,64
  20de08:	28c7c83a 	sub	r3,r5,r3
  20de0c:	10c4983a 	sll	r2,r2,r3
  20de10:	88a2b03a 	or	r17,r17,r2
  20de14:	8822c03a 	cmpne	r17,r17,zero
  20de18:	2462b03a 	or	r17,r4,r17
  20de1c:	0007883a 	mov	r3,zero
  20de20:	0021883a 	mov	r16,zero
  20de24:	003f6d06 	br	20dbdc <_gp+0xffdfbff8>
  20de28:	11fff804 	addi	r7,r2,-32
  20de2c:	01000804 	movi	r4,32
  20de30:	29ced83a 	srl	r7,r5,r7
  20de34:	11004526 	beq	r2,r4,20df4c <__subdf3+0x57c>
  20de38:	01001004 	movi	r4,64
  20de3c:	2089c83a 	sub	r4,r4,r2
  20de40:	2904983a 	sll	r2,r5,r4
  20de44:	118cb03a 	or	r6,r2,r6
  20de48:	300cc03a 	cmpne	r6,r6,zero
  20de4c:	398cb03a 	or	r6,r7,r6
  20de50:	0005883a 	mov	r2,zero
  20de54:	003f3706 	br	20db34 <_gp+0xffdfbf50>
  20de58:	80002a26 	beq	r16,zero,20df04 <__subdf3+0x534>
  20de5c:	0101ffc4 	movi	r4,2047
  20de60:	49006626 	beq	r9,r4,20dffc <__subdf3+0x62c>
  20de64:	0085c83a 	sub	r2,zero,r2
  20de68:	18c02034 	orhi	r3,r3,128
  20de6c:	01000e04 	movi	r4,56
  20de70:	20807e16 	blt	r4,r2,20e06c <__subdf3+0x69c>
  20de74:	010007c4 	movi	r4,31
  20de78:	2080e716 	blt	r4,r2,20e218 <__subdf3+0x848>
  20de7c:	01000804 	movi	r4,32
  20de80:	2089c83a 	sub	r4,r4,r2
  20de84:	1914983a 	sll	r10,r3,r4
  20de88:	8890d83a 	srl	r8,r17,r2
  20de8c:	8908983a 	sll	r4,r17,r4
  20de90:	1884d83a 	srl	r2,r3,r2
  20de94:	5222b03a 	or	r17,r10,r8
  20de98:	2006c03a 	cmpne	r3,r4,zero
  20de9c:	88e2b03a 	or	r17,r17,r3
  20dea0:	3463c83a 	sub	r17,r6,r17
  20dea4:	2885c83a 	sub	r2,r5,r2
  20dea8:	344d803a 	cmpltu	r6,r6,r17
  20deac:	1187c83a 	sub	r3,r2,r6
  20deb0:	4821883a 	mov	r16,r9
  20deb4:	3825883a 	mov	r18,r7
  20deb8:	003f2306 	br	20db48 <_gp+0xffdfbf64>
  20debc:	24d0b03a 	or	r8,r4,r19
  20dec0:	40001b1e 	bne	r8,zero,20df30 <__subdf3+0x560>
  20dec4:	0005883a 	mov	r2,zero
  20dec8:	0009883a 	mov	r4,zero
  20decc:	0021883a 	mov	r16,zero
  20ded0:	003f4906 	br	20dbf8 <_gp+0xffdfc014>
  20ded4:	010007c4 	movi	r4,31
  20ded8:	20803a16 	blt	r4,r2,20dfc4 <__subdf3+0x5f4>
  20dedc:	01000804 	movi	r4,32
  20dee0:	2089c83a 	sub	r4,r4,r2
  20dee4:	2912983a 	sll	r9,r5,r4
  20dee8:	3090d83a 	srl	r8,r6,r2
  20deec:	3108983a 	sll	r4,r6,r4
  20def0:	2884d83a 	srl	r2,r5,r2
  20def4:	4a12b03a 	or	r9,r9,r8
  20def8:	2008c03a 	cmpne	r4,r4,zero
  20defc:	4912b03a 	or	r9,r9,r4
  20df00:	003f4e06 	br	20dc3c <_gp+0xffdfc058>
  20df04:	1c48b03a 	or	r4,r3,r17
  20df08:	20003c26 	beq	r4,zero,20dffc <__subdf3+0x62c>
  20df0c:	0084303a 	nor	r2,zero,r2
  20df10:	1000381e 	bne	r2,zero,20dff4 <__subdf3+0x624>
  20df14:	3463c83a 	sub	r17,r6,r17
  20df18:	28c5c83a 	sub	r2,r5,r3
  20df1c:	344d803a 	cmpltu	r6,r6,r17
  20df20:	1187c83a 	sub	r3,r2,r6
  20df24:	4821883a 	mov	r16,r9
  20df28:	3825883a 	mov	r18,r7
  20df2c:	003f0606 	br	20db48 <_gp+0xffdfbf64>
  20df30:	2023883a 	mov	r17,r4
  20df34:	003f0906 	br	20db5c <_gp+0xffdfbf78>
  20df38:	0101ffc4 	movi	r4,2047
  20df3c:	813f3a1e 	bne	r16,r4,20dc28 <_gp+0xffdfc044>
  20df40:	003ec406 	br	20da54 <_gp+0xffdfbe70>
  20df44:	0005883a 	mov	r2,zero
  20df48:	003fb106 	br	20de10 <_gp+0xffdfc22c>
  20df4c:	0005883a 	mov	r2,zero
  20df50:	003fbc06 	br	20de44 <_gp+0xffdfc260>
  20df54:	1c44b03a 	or	r2,r3,r17
  20df58:	80008e1e 	bne	r16,zero,20e194 <__subdf3+0x7c4>
  20df5c:	1000c826 	beq	r2,zero,20e280 <__subdf3+0x8b0>
  20df60:	2984b03a 	or	r2,r5,r6
  20df64:	103ebb26 	beq	r2,zero,20da54 <_gp+0xffdfbe70>
  20df68:	8989883a 	add	r4,r17,r6
  20df6c:	1945883a 	add	r2,r3,r5
  20df70:	2447803a 	cmpltu	r3,r4,r17
  20df74:	1887883a 	add	r3,r3,r2
  20df78:	1880202c 	andhi	r2,r3,128
  20df7c:	2023883a 	mov	r17,r4
  20df80:	103f1626 	beq	r2,zero,20dbdc <_gp+0xffdfbff8>
  20df84:	00bfe034 	movhi	r2,65408
  20df88:	10bfffc4 	addi	r2,r2,-1
  20df8c:	5021883a 	mov	r16,r10
  20df90:	1886703a 	and	r3,r3,r2
  20df94:	003eaf06 	br	20da54 <_gp+0xffdfbe70>
  20df98:	3825883a 	mov	r18,r7
  20df9c:	003f0f06 	br	20dbdc <_gp+0xffdfbff8>
  20dfa0:	1c44b03a 	or	r2,r3,r17
  20dfa4:	8000251e 	bne	r16,zero,20e03c <__subdf3+0x66c>
  20dfa8:	1000661e 	bne	r2,zero,20e144 <__subdf3+0x774>
  20dfac:	2990b03a 	or	r8,r5,r6
  20dfb0:	40009626 	beq	r8,zero,20e20c <__subdf3+0x83c>
  20dfb4:	2807883a 	mov	r3,r5
  20dfb8:	3023883a 	mov	r17,r6
  20dfbc:	3825883a 	mov	r18,r7
  20dfc0:	003ea406 	br	20da54 <_gp+0xffdfbe70>
  20dfc4:	127ff804 	addi	r9,r2,-32
  20dfc8:	01000804 	movi	r4,32
  20dfcc:	2a52d83a 	srl	r9,r5,r9
  20dfd0:	11008c26 	beq	r2,r4,20e204 <__subdf3+0x834>
  20dfd4:	01001004 	movi	r4,64
  20dfd8:	2085c83a 	sub	r2,r4,r2
  20dfdc:	2884983a 	sll	r2,r5,r2
  20dfe0:	118cb03a 	or	r6,r2,r6
  20dfe4:	300cc03a 	cmpne	r6,r6,zero
  20dfe8:	4992b03a 	or	r9,r9,r6
  20dfec:	0005883a 	mov	r2,zero
  20dff0:	003f1206 	br	20dc3c <_gp+0xffdfc058>
  20dff4:	0101ffc4 	movi	r4,2047
  20dff8:	493f9c1e 	bne	r9,r4,20de6c <_gp+0xffdfc288>
  20dffc:	2807883a 	mov	r3,r5
  20e000:	3023883a 	mov	r17,r6
  20e004:	4821883a 	mov	r16,r9
  20e008:	3825883a 	mov	r18,r7
  20e00c:	003e9106 	br	20da54 <_gp+0xffdfbe70>
  20e010:	80001f1e 	bne	r16,zero,20e090 <__subdf3+0x6c0>
  20e014:	1c48b03a 	or	r4,r3,r17
  20e018:	20005a26 	beq	r4,zero,20e184 <__subdf3+0x7b4>
  20e01c:	0084303a 	nor	r2,zero,r2
  20e020:	1000561e 	bne	r2,zero,20e17c <__subdf3+0x7ac>
  20e024:	89a3883a 	add	r17,r17,r6
  20e028:	1945883a 	add	r2,r3,r5
  20e02c:	898d803a 	cmpltu	r6,r17,r6
  20e030:	3087883a 	add	r3,r6,r2
  20e034:	4821883a 	mov	r16,r9
  20e038:	003f0506 	br	20dc50 <_gp+0xffdfc06c>
  20e03c:	10002b1e 	bne	r2,zero,20e0ec <__subdf3+0x71c>
  20e040:	2984b03a 	or	r2,r5,r6
  20e044:	10008026 	beq	r2,zero,20e248 <__subdf3+0x878>
  20e048:	2807883a 	mov	r3,r5
  20e04c:	3023883a 	mov	r17,r6
  20e050:	3825883a 	mov	r18,r7
  20e054:	0401ffc4 	movi	r16,2047
  20e058:	003e7e06 	br	20da54 <_gp+0xffdfbe70>
  20e05c:	3809883a 	mov	r4,r7
  20e060:	0011883a 	mov	r8,zero
  20e064:	0005883a 	mov	r2,zero
  20e068:	003ee306 	br	20dbf8 <_gp+0xffdfc014>
  20e06c:	1c62b03a 	or	r17,r3,r17
  20e070:	8822c03a 	cmpne	r17,r17,zero
  20e074:	0005883a 	mov	r2,zero
  20e078:	003f8906 	br	20dea0 <_gp+0xffdfc2bc>
  20e07c:	3809883a 	mov	r4,r7
  20e080:	4821883a 	mov	r16,r9
  20e084:	0011883a 	mov	r8,zero
  20e088:	0005883a 	mov	r2,zero
  20e08c:	003eda06 	br	20dbf8 <_gp+0xffdfc014>
  20e090:	0101ffc4 	movi	r4,2047
  20e094:	49003b26 	beq	r9,r4,20e184 <__subdf3+0x7b4>
  20e098:	0085c83a 	sub	r2,zero,r2
  20e09c:	18c02034 	orhi	r3,r3,128
  20e0a0:	01000e04 	movi	r4,56
  20e0a4:	20806e16 	blt	r4,r2,20e260 <__subdf3+0x890>
  20e0a8:	010007c4 	movi	r4,31
  20e0ac:	20807716 	blt	r4,r2,20e28c <__subdf3+0x8bc>
  20e0b0:	01000804 	movi	r4,32
  20e0b4:	2089c83a 	sub	r4,r4,r2
  20e0b8:	1914983a 	sll	r10,r3,r4
  20e0bc:	8890d83a 	srl	r8,r17,r2
  20e0c0:	8908983a 	sll	r4,r17,r4
  20e0c4:	1884d83a 	srl	r2,r3,r2
  20e0c8:	5222b03a 	or	r17,r10,r8
  20e0cc:	2006c03a 	cmpne	r3,r4,zero
  20e0d0:	88e2b03a 	or	r17,r17,r3
  20e0d4:	89a3883a 	add	r17,r17,r6
  20e0d8:	1145883a 	add	r2,r2,r5
  20e0dc:	898d803a 	cmpltu	r6,r17,r6
  20e0e0:	3087883a 	add	r3,r6,r2
  20e0e4:	4821883a 	mov	r16,r9
  20e0e8:	003ed906 	br	20dc50 <_gp+0xffdfc06c>
  20e0ec:	2984b03a 	or	r2,r5,r6
  20e0f0:	10004226 	beq	r2,zero,20e1fc <__subdf3+0x82c>
  20e0f4:	1808d0fa 	srli	r4,r3,3
  20e0f8:	8822d0fa 	srli	r17,r17,3
  20e0fc:	1806977a 	slli	r3,r3,29
  20e100:	2080022c 	andhi	r2,r4,8
  20e104:	1c62b03a 	or	r17,r3,r17
  20e108:	10000826 	beq	r2,zero,20e12c <__subdf3+0x75c>
  20e10c:	2812d0fa 	srli	r9,r5,3
  20e110:	4880022c 	andhi	r2,r9,8
  20e114:	1000051e 	bne	r2,zero,20e12c <__subdf3+0x75c>
  20e118:	300cd0fa 	srli	r6,r6,3
  20e11c:	2804977a 	slli	r2,r5,29
  20e120:	4809883a 	mov	r4,r9
  20e124:	3825883a 	mov	r18,r7
  20e128:	11a2b03a 	or	r17,r2,r6
  20e12c:	8806d77a 	srli	r3,r17,29
  20e130:	200890fa 	slli	r4,r4,3
  20e134:	882290fa 	slli	r17,r17,3
  20e138:	0401ffc4 	movi	r16,2047
  20e13c:	1906b03a 	or	r3,r3,r4
  20e140:	003e4406 	br	20da54 <_gp+0xffdfbe70>
  20e144:	2984b03a 	or	r2,r5,r6
  20e148:	103e4226 	beq	r2,zero,20da54 <_gp+0xffdfbe70>
  20e14c:	8989c83a 	sub	r4,r17,r6
  20e150:	8911803a 	cmpltu	r8,r17,r4
  20e154:	1945c83a 	sub	r2,r3,r5
  20e158:	1205c83a 	sub	r2,r2,r8
  20e15c:	1200202c 	andhi	r8,r2,128
  20e160:	403e9a26 	beq	r8,zero,20dbcc <_gp+0xffdfbfe8>
  20e164:	3463c83a 	sub	r17,r6,r17
  20e168:	28c5c83a 	sub	r2,r5,r3
  20e16c:	344d803a 	cmpltu	r6,r6,r17
  20e170:	1187c83a 	sub	r3,r2,r6
  20e174:	3825883a 	mov	r18,r7
  20e178:	003e3606 	br	20da54 <_gp+0xffdfbe70>
  20e17c:	0101ffc4 	movi	r4,2047
  20e180:	493fc71e 	bne	r9,r4,20e0a0 <_gp+0xffdfc4bc>
  20e184:	2807883a 	mov	r3,r5
  20e188:	3023883a 	mov	r17,r6
  20e18c:	4821883a 	mov	r16,r9
  20e190:	003e3006 	br	20da54 <_gp+0xffdfbe70>
  20e194:	10003626 	beq	r2,zero,20e270 <__subdf3+0x8a0>
  20e198:	2984b03a 	or	r2,r5,r6
  20e19c:	10001726 	beq	r2,zero,20e1fc <__subdf3+0x82c>
  20e1a0:	1808d0fa 	srli	r4,r3,3
  20e1a4:	8822d0fa 	srli	r17,r17,3
  20e1a8:	1806977a 	slli	r3,r3,29
  20e1ac:	2080022c 	andhi	r2,r4,8
  20e1b0:	1c62b03a 	or	r17,r3,r17
  20e1b4:	10000726 	beq	r2,zero,20e1d4 <__subdf3+0x804>
  20e1b8:	2812d0fa 	srli	r9,r5,3
  20e1bc:	4880022c 	andhi	r2,r9,8
  20e1c0:	1000041e 	bne	r2,zero,20e1d4 <__subdf3+0x804>
  20e1c4:	300cd0fa 	srli	r6,r6,3
  20e1c8:	2804977a 	slli	r2,r5,29
  20e1cc:	4809883a 	mov	r4,r9
  20e1d0:	11a2b03a 	or	r17,r2,r6
  20e1d4:	8806d77a 	srli	r3,r17,29
  20e1d8:	200890fa 	slli	r4,r4,3
  20e1dc:	882290fa 	slli	r17,r17,3
  20e1e0:	3825883a 	mov	r18,r7
  20e1e4:	1906b03a 	or	r3,r3,r4
  20e1e8:	0401ffc4 	movi	r16,2047
  20e1ec:	003e1906 	br	20da54 <_gp+0xffdfbe70>
  20e1f0:	000b883a 	mov	r5,zero
  20e1f4:	0005883a 	mov	r2,zero
  20e1f8:	003e2e06 	br	20dab4 <_gp+0xffdfbed0>
  20e1fc:	0401ffc4 	movi	r16,2047
  20e200:	003e1406 	br	20da54 <_gp+0xffdfbe70>
  20e204:	0005883a 	mov	r2,zero
  20e208:	003f7506 	br	20dfe0 <_gp+0xffdfc3fc>
  20e20c:	0005883a 	mov	r2,zero
  20e210:	0009883a 	mov	r4,zero
  20e214:	003e7806 	br	20dbf8 <_gp+0xffdfc014>
  20e218:	123ff804 	addi	r8,r2,-32
  20e21c:	01000804 	movi	r4,32
  20e220:	1a10d83a 	srl	r8,r3,r8
  20e224:	11002526 	beq	r2,r4,20e2bc <__subdf3+0x8ec>
  20e228:	01001004 	movi	r4,64
  20e22c:	2085c83a 	sub	r2,r4,r2
  20e230:	1884983a 	sll	r2,r3,r2
  20e234:	1444b03a 	or	r2,r2,r17
  20e238:	1004c03a 	cmpne	r2,r2,zero
  20e23c:	40a2b03a 	or	r17,r8,r2
  20e240:	0005883a 	mov	r2,zero
  20e244:	003f1606 	br	20dea0 <_gp+0xffdfc2bc>
  20e248:	02000434 	movhi	r8,16
  20e24c:	0009883a 	mov	r4,zero
  20e250:	423fffc4 	addi	r8,r8,-1
  20e254:	00bfffc4 	movi	r2,-1
  20e258:	0401ffc4 	movi	r16,2047
  20e25c:	003e6606 	br	20dbf8 <_gp+0xffdfc014>
  20e260:	1c62b03a 	or	r17,r3,r17
  20e264:	8822c03a 	cmpne	r17,r17,zero
  20e268:	0005883a 	mov	r2,zero
  20e26c:	003f9906 	br	20e0d4 <_gp+0xffdfc4f0>
  20e270:	2807883a 	mov	r3,r5
  20e274:	3023883a 	mov	r17,r6
  20e278:	0401ffc4 	movi	r16,2047
  20e27c:	003df506 	br	20da54 <_gp+0xffdfbe70>
  20e280:	2807883a 	mov	r3,r5
  20e284:	3023883a 	mov	r17,r6
  20e288:	003df206 	br	20da54 <_gp+0xffdfbe70>
  20e28c:	123ff804 	addi	r8,r2,-32
  20e290:	01000804 	movi	r4,32
  20e294:	1a10d83a 	srl	r8,r3,r8
  20e298:	11000a26 	beq	r2,r4,20e2c4 <__subdf3+0x8f4>
  20e29c:	01001004 	movi	r4,64
  20e2a0:	2085c83a 	sub	r2,r4,r2
  20e2a4:	1884983a 	sll	r2,r3,r2
  20e2a8:	1444b03a 	or	r2,r2,r17
  20e2ac:	1004c03a 	cmpne	r2,r2,zero
  20e2b0:	40a2b03a 	or	r17,r8,r2
  20e2b4:	0005883a 	mov	r2,zero
  20e2b8:	003f8606 	br	20e0d4 <_gp+0xffdfc4f0>
  20e2bc:	0005883a 	mov	r2,zero
  20e2c0:	003fdc06 	br	20e234 <_gp+0xffdfc650>
  20e2c4:	0005883a 	mov	r2,zero
  20e2c8:	003ff706 	br	20e2a8 <_gp+0xffdfc6c4>

0020e2cc <__fixdfsi>:
  20e2cc:	280cd53a 	srli	r6,r5,20
  20e2d0:	00c00434 	movhi	r3,16
  20e2d4:	18ffffc4 	addi	r3,r3,-1
  20e2d8:	3181ffcc 	andi	r6,r6,2047
  20e2dc:	01c0ff84 	movi	r7,1022
  20e2e0:	28c6703a 	and	r3,r5,r3
  20e2e4:	280ad7fa 	srli	r5,r5,31
  20e2e8:	3980120e 	bge	r7,r6,20e334 <__fixdfsi+0x68>
  20e2ec:	00810744 	movi	r2,1053
  20e2f0:	11800c16 	blt	r2,r6,20e324 <__fixdfsi+0x58>
  20e2f4:	00810cc4 	movi	r2,1075
  20e2f8:	1185c83a 	sub	r2,r2,r6
  20e2fc:	01c007c4 	movi	r7,31
  20e300:	18c00434 	orhi	r3,r3,16
  20e304:	38800d16 	blt	r7,r2,20e33c <__fixdfsi+0x70>
  20e308:	31befb44 	addi	r6,r6,-1043
  20e30c:	2084d83a 	srl	r2,r4,r2
  20e310:	1986983a 	sll	r3,r3,r6
  20e314:	1884b03a 	or	r2,r3,r2
  20e318:	28000726 	beq	r5,zero,20e338 <__fixdfsi+0x6c>
  20e31c:	0085c83a 	sub	r2,zero,r2
  20e320:	f800283a 	ret
  20e324:	00a00034 	movhi	r2,32768
  20e328:	10bfffc4 	addi	r2,r2,-1
  20e32c:	2885883a 	add	r2,r5,r2
  20e330:	f800283a 	ret
  20e334:	0005883a 	mov	r2,zero
  20e338:	f800283a 	ret
  20e33c:	008104c4 	movi	r2,1043
  20e340:	1185c83a 	sub	r2,r2,r6
  20e344:	1884d83a 	srl	r2,r3,r2
  20e348:	003ff306 	br	20e318 <_gp+0xffdfc734>

0020e34c <__floatsidf>:
  20e34c:	defffd04 	addi	sp,sp,-12
  20e350:	dfc00215 	stw	ra,8(sp)
  20e354:	dc400115 	stw	r17,4(sp)
  20e358:	dc000015 	stw	r16,0(sp)
  20e35c:	20002b26 	beq	r4,zero,20e40c <__floatsidf+0xc0>
  20e360:	2023883a 	mov	r17,r4
  20e364:	2020d7fa 	srli	r16,r4,31
  20e368:	20002d16 	blt	r4,zero,20e420 <__floatsidf+0xd4>
  20e36c:	8809883a 	mov	r4,r17
  20e370:	02017440 	call	201744 <__clzsi2>
  20e374:	01410784 	movi	r5,1054
  20e378:	288bc83a 	sub	r5,r5,r2
  20e37c:	01010cc4 	movi	r4,1075
  20e380:	2149c83a 	sub	r4,r4,r5
  20e384:	00c007c4 	movi	r3,31
  20e388:	1900160e 	bge	r3,r4,20e3e4 <__floatsidf+0x98>
  20e38c:	00c104c4 	movi	r3,1043
  20e390:	1947c83a 	sub	r3,r3,r5
  20e394:	88c6983a 	sll	r3,r17,r3
  20e398:	00800434 	movhi	r2,16
  20e39c:	10bfffc4 	addi	r2,r2,-1
  20e3a0:	1886703a 	and	r3,r3,r2
  20e3a4:	2941ffcc 	andi	r5,r5,2047
  20e3a8:	800d883a 	mov	r6,r16
  20e3ac:	0005883a 	mov	r2,zero
  20e3b0:	280a953a 	slli	r5,r5,20
  20e3b4:	31803fcc 	andi	r6,r6,255
  20e3b8:	01000434 	movhi	r4,16
  20e3bc:	300c97fa 	slli	r6,r6,31
  20e3c0:	213fffc4 	addi	r4,r4,-1
  20e3c4:	1906703a 	and	r3,r3,r4
  20e3c8:	1946b03a 	or	r3,r3,r5
  20e3cc:	1986b03a 	or	r3,r3,r6
  20e3d0:	dfc00217 	ldw	ra,8(sp)
  20e3d4:	dc400117 	ldw	r17,4(sp)
  20e3d8:	dc000017 	ldw	r16,0(sp)
  20e3dc:	dec00304 	addi	sp,sp,12
  20e3e0:	f800283a 	ret
  20e3e4:	00c002c4 	movi	r3,11
  20e3e8:	1887c83a 	sub	r3,r3,r2
  20e3ec:	88c6d83a 	srl	r3,r17,r3
  20e3f0:	8904983a 	sll	r2,r17,r4
  20e3f4:	01000434 	movhi	r4,16
  20e3f8:	213fffc4 	addi	r4,r4,-1
  20e3fc:	2941ffcc 	andi	r5,r5,2047
  20e400:	1906703a 	and	r3,r3,r4
  20e404:	800d883a 	mov	r6,r16
  20e408:	003fe906 	br	20e3b0 <_gp+0xffdfc7cc>
  20e40c:	000d883a 	mov	r6,zero
  20e410:	000b883a 	mov	r5,zero
  20e414:	0007883a 	mov	r3,zero
  20e418:	0005883a 	mov	r2,zero
  20e41c:	003fe406 	br	20e3b0 <_gp+0xffdfc7cc>
  20e420:	0123c83a 	sub	r17,zero,r4
  20e424:	003fd106 	br	20e36c <_gp+0xffdfc788>

0020e428 <__floatunsidf>:
  20e428:	defffe04 	addi	sp,sp,-8
  20e42c:	dc000015 	stw	r16,0(sp)
  20e430:	dfc00115 	stw	ra,4(sp)
  20e434:	2021883a 	mov	r16,r4
  20e438:	20002226 	beq	r4,zero,20e4c4 <__floatunsidf+0x9c>
  20e43c:	02017440 	call	201744 <__clzsi2>
  20e440:	01010784 	movi	r4,1054
  20e444:	2089c83a 	sub	r4,r4,r2
  20e448:	01810cc4 	movi	r6,1075
  20e44c:	310dc83a 	sub	r6,r6,r4
  20e450:	00c007c4 	movi	r3,31
  20e454:	1980120e 	bge	r3,r6,20e4a0 <__floatunsidf+0x78>
  20e458:	00c104c4 	movi	r3,1043
  20e45c:	1907c83a 	sub	r3,r3,r4
  20e460:	80ca983a 	sll	r5,r16,r3
  20e464:	00800434 	movhi	r2,16
  20e468:	10bfffc4 	addi	r2,r2,-1
  20e46c:	2101ffcc 	andi	r4,r4,2047
  20e470:	0021883a 	mov	r16,zero
  20e474:	288a703a 	and	r5,r5,r2
  20e478:	2008953a 	slli	r4,r4,20
  20e47c:	00c00434 	movhi	r3,16
  20e480:	18ffffc4 	addi	r3,r3,-1
  20e484:	28c6703a 	and	r3,r5,r3
  20e488:	8005883a 	mov	r2,r16
  20e48c:	1906b03a 	or	r3,r3,r4
  20e490:	dfc00117 	ldw	ra,4(sp)
  20e494:	dc000017 	ldw	r16,0(sp)
  20e498:	dec00204 	addi	sp,sp,8
  20e49c:	f800283a 	ret
  20e4a0:	00c002c4 	movi	r3,11
  20e4a4:	188bc83a 	sub	r5,r3,r2
  20e4a8:	814ad83a 	srl	r5,r16,r5
  20e4ac:	00c00434 	movhi	r3,16
  20e4b0:	18ffffc4 	addi	r3,r3,-1
  20e4b4:	81a0983a 	sll	r16,r16,r6
  20e4b8:	2101ffcc 	andi	r4,r4,2047
  20e4bc:	28ca703a 	and	r5,r5,r3
  20e4c0:	003fed06 	br	20e478 <_gp+0xffdfc894>
  20e4c4:	0009883a 	mov	r4,zero
  20e4c8:	000b883a 	mov	r5,zero
  20e4cc:	003fea06 	br	20e478 <_gp+0xffdfc894>

0020e4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e4d0:	defffe04 	addi	sp,sp,-8
  20e4d4:	dfc00115 	stw	ra,4(sp)
  20e4d8:	df000015 	stw	fp,0(sp)
  20e4dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e4e0:	d0a00b17 	ldw	r2,-32724(gp)
  20e4e4:	10000326 	beq	r2,zero,20e4f4 <alt_get_errno+0x24>
  20e4e8:	d0a00b17 	ldw	r2,-32724(gp)
  20e4ec:	103ee83a 	callr	r2
  20e4f0:	00000106 	br	20e4f8 <alt_get_errno+0x28>
  20e4f4:	d0a01c04 	addi	r2,gp,-32656
}
  20e4f8:	e037883a 	mov	sp,fp
  20e4fc:	dfc00117 	ldw	ra,4(sp)
  20e500:	df000017 	ldw	fp,0(sp)
  20e504:	dec00204 	addi	sp,sp,8
  20e508:	f800283a 	ret

0020e50c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  20e50c:	defffb04 	addi	sp,sp,-20
  20e510:	dfc00415 	stw	ra,16(sp)
  20e514:	df000315 	stw	fp,12(sp)
  20e518:	df000304 	addi	fp,sp,12
  20e51c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  20e520:	e0bfff17 	ldw	r2,-4(fp)
  20e524:	10000816 	blt	r2,zero,20e548 <close+0x3c>
  20e528:	01400304 	movi	r5,12
  20e52c:	e13fff17 	ldw	r4,-4(fp)
  20e530:	02017a80 	call	2017a8 <__mulsi3>
  20e534:	1007883a 	mov	r3,r2
  20e538:	00801074 	movhi	r2,65
  20e53c:	10a23304 	addi	r2,r2,-30516
  20e540:	1885883a 	add	r2,r3,r2
  20e544:	00000106 	br	20e54c <close+0x40>
  20e548:	0005883a 	mov	r2,zero
  20e54c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  20e550:	e0bffd17 	ldw	r2,-12(fp)
  20e554:	10001926 	beq	r2,zero,20e5bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  20e558:	e0bffd17 	ldw	r2,-12(fp)
  20e55c:	10800017 	ldw	r2,0(r2)
  20e560:	10800417 	ldw	r2,16(r2)
  20e564:	10000626 	beq	r2,zero,20e580 <close+0x74>
  20e568:	e0bffd17 	ldw	r2,-12(fp)
  20e56c:	10800017 	ldw	r2,0(r2)
  20e570:	10800417 	ldw	r2,16(r2)
  20e574:	e13ffd17 	ldw	r4,-12(fp)
  20e578:	103ee83a 	callr	r2
  20e57c:	00000106 	br	20e584 <close+0x78>
  20e580:	0005883a 	mov	r2,zero
  20e584:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  20e588:	e13fff17 	ldw	r4,-4(fp)
  20e58c:	020ebf40 	call	20ebf4 <alt_release_fd>
    if (rval < 0)
  20e590:	e0bffe17 	ldw	r2,-8(fp)
  20e594:	1000070e 	bge	r2,zero,20e5b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  20e598:	020e4d00 	call	20e4d0 <alt_get_errno>
  20e59c:	1007883a 	mov	r3,r2
  20e5a0:	e0bffe17 	ldw	r2,-8(fp)
  20e5a4:	0085c83a 	sub	r2,zero,r2
  20e5a8:	18800015 	stw	r2,0(r3)
      return -1;
  20e5ac:	00bfffc4 	movi	r2,-1
  20e5b0:	00000706 	br	20e5d0 <close+0xc4>
    }
    return 0;
  20e5b4:	0005883a 	mov	r2,zero
  20e5b8:	00000506 	br	20e5d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e5bc:	020e4d00 	call	20e4d0 <alt_get_errno>
  20e5c0:	1007883a 	mov	r3,r2
  20e5c4:	00801444 	movi	r2,81
  20e5c8:	18800015 	stw	r2,0(r3)
    return -1;
  20e5cc:	00bfffc4 	movi	r2,-1
  }
}
  20e5d0:	e037883a 	mov	sp,fp
  20e5d4:	dfc00117 	ldw	ra,4(sp)
  20e5d8:	df000017 	ldw	fp,0(sp)
  20e5dc:	dec00204 	addi	sp,sp,8
  20e5e0:	f800283a 	ret

0020e5e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  20e5e4:	defffc04 	addi	sp,sp,-16
  20e5e8:	df000315 	stw	fp,12(sp)
  20e5ec:	df000304 	addi	fp,sp,12
  20e5f0:	e13ffd15 	stw	r4,-12(fp)
  20e5f4:	e17ffe15 	stw	r5,-8(fp)
  20e5f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  20e5fc:	e0bfff17 	ldw	r2,-4(fp)
}
  20e600:	e037883a 	mov	sp,fp
  20e604:	df000017 	ldw	fp,0(sp)
  20e608:	dec00104 	addi	sp,sp,4
  20e60c:	f800283a 	ret

0020e610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e610:	defffe04 	addi	sp,sp,-8
  20e614:	dfc00115 	stw	ra,4(sp)
  20e618:	df000015 	stw	fp,0(sp)
  20e61c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e620:	d0a00b17 	ldw	r2,-32724(gp)
  20e624:	10000326 	beq	r2,zero,20e634 <alt_get_errno+0x24>
  20e628:	d0a00b17 	ldw	r2,-32724(gp)
  20e62c:	103ee83a 	callr	r2
  20e630:	00000106 	br	20e638 <alt_get_errno+0x28>
  20e634:	d0a01c04 	addi	r2,gp,-32656
}
  20e638:	e037883a 	mov	sp,fp
  20e63c:	dfc00117 	ldw	ra,4(sp)
  20e640:	df000017 	ldw	fp,0(sp)
  20e644:	dec00204 	addi	sp,sp,8
  20e648:	f800283a 	ret

0020e64c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  20e64c:	defffb04 	addi	sp,sp,-20
  20e650:	dfc00415 	stw	ra,16(sp)
  20e654:	df000315 	stw	fp,12(sp)
  20e658:	df000304 	addi	fp,sp,12
  20e65c:	e13ffe15 	stw	r4,-8(fp)
  20e660:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e664:	e0bffe17 	ldw	r2,-8(fp)
  20e668:	10000816 	blt	r2,zero,20e68c <fstat+0x40>
  20e66c:	01400304 	movi	r5,12
  20e670:	e13ffe17 	ldw	r4,-8(fp)
  20e674:	02017a80 	call	2017a8 <__mulsi3>
  20e678:	1007883a 	mov	r3,r2
  20e67c:	00801074 	movhi	r2,65
  20e680:	10a23304 	addi	r2,r2,-30516
  20e684:	1885883a 	add	r2,r3,r2
  20e688:	00000106 	br	20e690 <fstat+0x44>
  20e68c:	0005883a 	mov	r2,zero
  20e690:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  20e694:	e0bffd17 	ldw	r2,-12(fp)
  20e698:	10001026 	beq	r2,zero,20e6dc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  20e69c:	e0bffd17 	ldw	r2,-12(fp)
  20e6a0:	10800017 	ldw	r2,0(r2)
  20e6a4:	10800817 	ldw	r2,32(r2)
  20e6a8:	10000726 	beq	r2,zero,20e6c8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  20e6ac:	e0bffd17 	ldw	r2,-12(fp)
  20e6b0:	10800017 	ldw	r2,0(r2)
  20e6b4:	10800817 	ldw	r2,32(r2)
  20e6b8:	e17fff17 	ldw	r5,-4(fp)
  20e6bc:	e13ffd17 	ldw	r4,-12(fp)
  20e6c0:	103ee83a 	callr	r2
  20e6c4:	00000a06 	br	20e6f0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  20e6c8:	e0bfff17 	ldw	r2,-4(fp)
  20e6cc:	00c80004 	movi	r3,8192
  20e6d0:	10c00115 	stw	r3,4(r2)
      return 0;
  20e6d4:	0005883a 	mov	r2,zero
  20e6d8:	00000506 	br	20e6f0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e6dc:	020e6100 	call	20e610 <alt_get_errno>
  20e6e0:	1007883a 	mov	r3,r2
  20e6e4:	00801444 	movi	r2,81
  20e6e8:	18800015 	stw	r2,0(r3)
    return -1;
  20e6ec:	00bfffc4 	movi	r2,-1
  }
}
  20e6f0:	e037883a 	mov	sp,fp
  20e6f4:	dfc00117 	ldw	ra,4(sp)
  20e6f8:	df000017 	ldw	fp,0(sp)
  20e6fc:	dec00204 	addi	sp,sp,8
  20e700:	f800283a 	ret

0020e704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e704:	defffe04 	addi	sp,sp,-8
  20e708:	dfc00115 	stw	ra,4(sp)
  20e70c:	df000015 	stw	fp,0(sp)
  20e710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e714:	d0a00b17 	ldw	r2,-32724(gp)
  20e718:	10000326 	beq	r2,zero,20e728 <alt_get_errno+0x24>
  20e71c:	d0a00b17 	ldw	r2,-32724(gp)
  20e720:	103ee83a 	callr	r2
  20e724:	00000106 	br	20e72c <alt_get_errno+0x28>
  20e728:	d0a01c04 	addi	r2,gp,-32656
}
  20e72c:	e037883a 	mov	sp,fp
  20e730:	dfc00117 	ldw	ra,4(sp)
  20e734:	df000017 	ldw	fp,0(sp)
  20e738:	dec00204 	addi	sp,sp,8
  20e73c:	f800283a 	ret

0020e740 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  20e740:	deffed04 	addi	sp,sp,-76
  20e744:	dfc01215 	stw	ra,72(sp)
  20e748:	df001115 	stw	fp,68(sp)
  20e74c:	df001104 	addi	fp,sp,68
  20e750:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e754:	e0bfff17 	ldw	r2,-4(fp)
  20e758:	10000816 	blt	r2,zero,20e77c <isatty+0x3c>
  20e75c:	01400304 	movi	r5,12
  20e760:	e13fff17 	ldw	r4,-4(fp)
  20e764:	02017a80 	call	2017a8 <__mulsi3>
  20e768:	1007883a 	mov	r3,r2
  20e76c:	00801074 	movhi	r2,65
  20e770:	10a23304 	addi	r2,r2,-30516
  20e774:	1885883a 	add	r2,r3,r2
  20e778:	00000106 	br	20e780 <isatty+0x40>
  20e77c:	0005883a 	mov	r2,zero
  20e780:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  20e784:	e0bfef17 	ldw	r2,-68(fp)
  20e788:	10000e26 	beq	r2,zero,20e7c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  20e78c:	e0bfef17 	ldw	r2,-68(fp)
  20e790:	10800017 	ldw	r2,0(r2)
  20e794:	10800817 	ldw	r2,32(r2)
  20e798:	1000021e 	bne	r2,zero,20e7a4 <isatty+0x64>
    {
      return 1;
  20e79c:	00800044 	movi	r2,1
  20e7a0:	00000d06 	br	20e7d8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  20e7a4:	e0bff004 	addi	r2,fp,-64
  20e7a8:	100b883a 	mov	r5,r2
  20e7ac:	e13fff17 	ldw	r4,-4(fp)
  20e7b0:	020e64c0 	call	20e64c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  20e7b4:	e0bff117 	ldw	r2,-60(fp)
  20e7b8:	10880020 	cmpeqi	r2,r2,8192
  20e7bc:	10803fcc 	andi	r2,r2,255
  20e7c0:	00000506 	br	20e7d8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e7c4:	020e7040 	call	20e704 <alt_get_errno>
  20e7c8:	1007883a 	mov	r3,r2
  20e7cc:	00801444 	movi	r2,81
  20e7d0:	18800015 	stw	r2,0(r3)
    return 0;
  20e7d4:	0005883a 	mov	r2,zero
  }
}
  20e7d8:	e037883a 	mov	sp,fp
  20e7dc:	dfc00117 	ldw	ra,4(sp)
  20e7e0:	df000017 	ldw	fp,0(sp)
  20e7e4:	dec00204 	addi	sp,sp,8
  20e7e8:	f800283a 	ret

0020e7ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  20e7ec:	defffc04 	addi	sp,sp,-16
  20e7f0:	df000315 	stw	fp,12(sp)
  20e7f4:	df000304 	addi	fp,sp,12
  20e7f8:	e13ffd15 	stw	r4,-12(fp)
  20e7fc:	e17ffe15 	stw	r5,-8(fp)
  20e800:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  20e804:	e0fffe17 	ldw	r3,-8(fp)
  20e808:	e0bffd17 	ldw	r2,-12(fp)
  20e80c:	18800c26 	beq	r3,r2,20e840 <alt_load_section+0x54>
  {
    while( to != end )
  20e810:	00000806 	br	20e834 <alt_load_section+0x48>
    {
      *to++ = *from++;
  20e814:	e0bffe17 	ldw	r2,-8(fp)
  20e818:	10c00104 	addi	r3,r2,4
  20e81c:	e0fffe15 	stw	r3,-8(fp)
  20e820:	e0fffd17 	ldw	r3,-12(fp)
  20e824:	19000104 	addi	r4,r3,4
  20e828:	e13ffd15 	stw	r4,-12(fp)
  20e82c:	18c00017 	ldw	r3,0(r3)
  20e830:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  20e834:	e0fffe17 	ldw	r3,-8(fp)
  20e838:	e0bfff17 	ldw	r2,-4(fp)
  20e83c:	18bff51e 	bne	r3,r2,20e814 <_gp+0xffdfcc30>
    {
      *to++ = *from++;
    }
  }
}
  20e840:	0001883a 	nop
  20e844:	e037883a 	mov	sp,fp
  20e848:	df000017 	ldw	fp,0(sp)
  20e84c:	dec00104 	addi	sp,sp,4
  20e850:	f800283a 	ret

0020e854 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  20e854:	defffe04 	addi	sp,sp,-8
  20e858:	dfc00115 	stw	ra,4(sp)
  20e85c:	df000015 	stw	fp,0(sp)
  20e860:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  20e864:	01801074 	movhi	r6,65
  20e868:	31a70f04 	addi	r6,r6,-25540
  20e86c:	01401074 	movhi	r5,65
  20e870:	29600004 	addi	r5,r5,-32768
  20e874:	01000874 	movhi	r4,33
  20e878:	2110d404 	addi	r4,r4,17232
  20e87c:	020e7ec0 	call	20e7ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  20e880:	01800834 	movhi	r6,32
  20e884:	31808c04 	addi	r6,r6,560
  20e888:	01400834 	movhi	r5,32
  20e88c:	29400804 	addi	r5,r5,32
  20e890:	01000834 	movhi	r4,32
  20e894:	21000804 	addi	r4,r4,32
  20e898:	020e7ec0 	call	20e7ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  20e89c:	01800874 	movhi	r6,33
  20e8a0:	3190d404 	addi	r6,r6,17232
  20e8a4:	01400874 	movhi	r5,33
  20e8a8:	294f8904 	addi	r5,r5,15908
  20e8ac:	01000874 	movhi	r4,33
  20e8b0:	210f8904 	addi	r4,r4,15908
  20e8b4:	020e7ec0 	call	20e7ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  20e8b8:	02128e00 	call	2128e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  20e8bc:	0212bec0 	call	212bec <alt_icache_flush_all>
}
  20e8c0:	0001883a 	nop
  20e8c4:	e037883a 	mov	sp,fp
  20e8c8:	dfc00117 	ldw	ra,4(sp)
  20e8cc:	df000017 	ldw	fp,0(sp)
  20e8d0:	dec00204 	addi	sp,sp,8
  20e8d4:	f800283a 	ret

0020e8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e8d8:	defffe04 	addi	sp,sp,-8
  20e8dc:	dfc00115 	stw	ra,4(sp)
  20e8e0:	df000015 	stw	fp,0(sp)
  20e8e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e8e8:	d0a00b17 	ldw	r2,-32724(gp)
  20e8ec:	10000326 	beq	r2,zero,20e8fc <alt_get_errno+0x24>
  20e8f0:	d0a00b17 	ldw	r2,-32724(gp)
  20e8f4:	103ee83a 	callr	r2
  20e8f8:	00000106 	br	20e900 <alt_get_errno+0x28>
  20e8fc:	d0a01c04 	addi	r2,gp,-32656
}
  20e900:	e037883a 	mov	sp,fp
  20e904:	dfc00117 	ldw	ra,4(sp)
  20e908:	df000017 	ldw	fp,0(sp)
  20e90c:	dec00204 	addi	sp,sp,8
  20e910:	f800283a 	ret

0020e914 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  20e914:	defff904 	addi	sp,sp,-28
  20e918:	dfc00615 	stw	ra,24(sp)
  20e91c:	df000515 	stw	fp,20(sp)
  20e920:	df000504 	addi	fp,sp,20
  20e924:	e13ffd15 	stw	r4,-12(fp)
  20e928:	e17ffe15 	stw	r5,-8(fp)
  20e92c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  20e930:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e934:	e0bffd17 	ldw	r2,-12(fp)
  20e938:	10000816 	blt	r2,zero,20e95c <lseek+0x48>
  20e93c:	01400304 	movi	r5,12
  20e940:	e13ffd17 	ldw	r4,-12(fp)
  20e944:	02017a80 	call	2017a8 <__mulsi3>
  20e948:	1007883a 	mov	r3,r2
  20e94c:	00801074 	movhi	r2,65
  20e950:	10a23304 	addi	r2,r2,-30516
  20e954:	1885883a 	add	r2,r3,r2
  20e958:	00000106 	br	20e960 <lseek+0x4c>
  20e95c:	0005883a 	mov	r2,zero
  20e960:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  20e964:	e0bffc17 	ldw	r2,-16(fp)
  20e968:	10001026 	beq	r2,zero,20e9ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  20e96c:	e0bffc17 	ldw	r2,-16(fp)
  20e970:	10800017 	ldw	r2,0(r2)
  20e974:	10800717 	ldw	r2,28(r2)
  20e978:	10000926 	beq	r2,zero,20e9a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  20e97c:	e0bffc17 	ldw	r2,-16(fp)
  20e980:	10800017 	ldw	r2,0(r2)
  20e984:	10800717 	ldw	r2,28(r2)
  20e988:	e1bfff17 	ldw	r6,-4(fp)
  20e98c:	e17ffe17 	ldw	r5,-8(fp)
  20e990:	e13ffc17 	ldw	r4,-16(fp)
  20e994:	103ee83a 	callr	r2
  20e998:	e0bffb15 	stw	r2,-20(fp)
  20e99c:	00000506 	br	20e9b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  20e9a0:	00bfde84 	movi	r2,-134
  20e9a4:	e0bffb15 	stw	r2,-20(fp)
  20e9a8:	00000206 	br	20e9b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  20e9ac:	00bfebc4 	movi	r2,-81
  20e9b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  20e9b4:	e0bffb17 	ldw	r2,-20(fp)
  20e9b8:	1000070e 	bge	r2,zero,20e9d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  20e9bc:	020e8d80 	call	20e8d8 <alt_get_errno>
  20e9c0:	1007883a 	mov	r3,r2
  20e9c4:	e0bffb17 	ldw	r2,-20(fp)
  20e9c8:	0085c83a 	sub	r2,zero,r2
  20e9cc:	18800015 	stw	r2,0(r3)
    rc = -1;
  20e9d0:	00bfffc4 	movi	r2,-1
  20e9d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  20e9d8:	e0bffb17 	ldw	r2,-20(fp)
}
  20e9dc:	e037883a 	mov	sp,fp
  20e9e0:	dfc00117 	ldw	ra,4(sp)
  20e9e4:	df000017 	ldw	fp,0(sp)
  20e9e8:	dec00204 	addi	sp,sp,8
  20e9ec:	f800283a 	ret

0020e9f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  20e9f0:	defffd04 	addi	sp,sp,-12
  20e9f4:	dfc00215 	stw	ra,8(sp)
  20e9f8:	df000115 	stw	fp,4(sp)
  20e9fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  20ea00:	0009883a 	mov	r4,zero
  20ea04:	020eec80 	call	20eec8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  20ea08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  20ea0c:	020ef000 	call	20ef00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  20ea10:	01800874 	movhi	r6,33
  20ea14:	3190b804 	addi	r6,r6,17120
  20ea18:	01400874 	movhi	r5,33
  20ea1c:	2950b804 	addi	r5,r5,17120
  20ea20:	01000874 	movhi	r4,33
  20ea24:	2110b804 	addi	r4,r4,17120
  20ea28:	0212f900 	call	212f90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  20ea2c:	02129e00 	call	2129e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  20ea30:	01000874 	movhi	r4,33
  20ea34:	210a9004 	addi	r4,r4,10816
  20ea38:	02139280 	call	213928 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  20ea3c:	d0a01d17 	ldw	r2,-32652(gp)
  20ea40:	d0e01e17 	ldw	r3,-32648(gp)
  20ea44:	d1201f17 	ldw	r4,-32644(gp)
  20ea48:	200d883a 	mov	r6,r4
  20ea4c:	180b883a 	mov	r5,r3
  20ea50:	1009883a 	mov	r4,r2
  20ea54:	020026c0 	call	20026c <main>
  20ea58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  20ea5c:	01000044 	movi	r4,1
  20ea60:	020e50c0 	call	20e50c <close>
  exit (result);
  20ea64:	e13fff17 	ldw	r4,-4(fp)
  20ea68:	021393c0 	call	21393c <exit>

0020ea6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  20ea6c:	defffe04 	addi	sp,sp,-8
  20ea70:	df000115 	stw	fp,4(sp)
  20ea74:	df000104 	addi	fp,sp,4
  20ea78:	e13fff15 	stw	r4,-4(fp)
}
  20ea7c:	0001883a 	nop
  20ea80:	e037883a 	mov	sp,fp
  20ea84:	df000017 	ldw	fp,0(sp)
  20ea88:	dec00104 	addi	sp,sp,4
  20ea8c:	f800283a 	ret

0020ea90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  20ea90:	defffe04 	addi	sp,sp,-8
  20ea94:	df000115 	stw	fp,4(sp)
  20ea98:	df000104 	addi	fp,sp,4
  20ea9c:	e13fff15 	stw	r4,-4(fp)
}
  20eaa0:	0001883a 	nop
  20eaa4:	e037883a 	mov	sp,fp
  20eaa8:	df000017 	ldw	fp,0(sp)
  20eaac:	dec00104 	addi	sp,sp,4
  20eab0:	f800283a 	ret

0020eab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20eab4:	defffe04 	addi	sp,sp,-8
  20eab8:	dfc00115 	stw	ra,4(sp)
  20eabc:	df000015 	stw	fp,0(sp)
  20eac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20eac4:	d0a00b17 	ldw	r2,-32724(gp)
  20eac8:	10000326 	beq	r2,zero,20ead8 <alt_get_errno+0x24>
  20eacc:	d0a00b17 	ldw	r2,-32724(gp)
  20ead0:	103ee83a 	callr	r2
  20ead4:	00000106 	br	20eadc <alt_get_errno+0x28>
  20ead8:	d0a01c04 	addi	r2,gp,-32656
}
  20eadc:	e037883a 	mov	sp,fp
  20eae0:	dfc00117 	ldw	ra,4(sp)
  20eae4:	df000017 	ldw	fp,0(sp)
  20eae8:	dec00204 	addi	sp,sp,8
  20eaec:	f800283a 	ret

0020eaf0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  20eaf0:	defff904 	addi	sp,sp,-28
  20eaf4:	dfc00615 	stw	ra,24(sp)
  20eaf8:	df000515 	stw	fp,20(sp)
  20eafc:	df000504 	addi	fp,sp,20
  20eb00:	e13ffd15 	stw	r4,-12(fp)
  20eb04:	e17ffe15 	stw	r5,-8(fp)
  20eb08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20eb0c:	e0bffd17 	ldw	r2,-12(fp)
  20eb10:	10000816 	blt	r2,zero,20eb34 <read+0x44>
  20eb14:	01400304 	movi	r5,12
  20eb18:	e13ffd17 	ldw	r4,-12(fp)
  20eb1c:	02017a80 	call	2017a8 <__mulsi3>
  20eb20:	1007883a 	mov	r3,r2
  20eb24:	00801074 	movhi	r2,65
  20eb28:	10a23304 	addi	r2,r2,-30516
  20eb2c:	1885883a 	add	r2,r3,r2
  20eb30:	00000106 	br	20eb38 <read+0x48>
  20eb34:	0005883a 	mov	r2,zero
  20eb38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  20eb3c:	e0bffb17 	ldw	r2,-20(fp)
  20eb40:	10002226 	beq	r2,zero,20ebcc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  20eb44:	e0bffb17 	ldw	r2,-20(fp)
  20eb48:	10800217 	ldw	r2,8(r2)
  20eb4c:	108000cc 	andi	r2,r2,3
  20eb50:	10800060 	cmpeqi	r2,r2,1
  20eb54:	1000181e 	bne	r2,zero,20ebb8 <read+0xc8>
        (fd->dev->read))
  20eb58:	e0bffb17 	ldw	r2,-20(fp)
  20eb5c:	10800017 	ldw	r2,0(r2)
  20eb60:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  20eb64:	10001426 	beq	r2,zero,20ebb8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  20eb68:	e0bffb17 	ldw	r2,-20(fp)
  20eb6c:	10800017 	ldw	r2,0(r2)
  20eb70:	10800517 	ldw	r2,20(r2)
  20eb74:	e0ffff17 	ldw	r3,-4(fp)
  20eb78:	180d883a 	mov	r6,r3
  20eb7c:	e17ffe17 	ldw	r5,-8(fp)
  20eb80:	e13ffb17 	ldw	r4,-20(fp)
  20eb84:	103ee83a 	callr	r2
  20eb88:	e0bffc15 	stw	r2,-16(fp)
  20eb8c:	e0bffc17 	ldw	r2,-16(fp)
  20eb90:	1000070e 	bge	r2,zero,20ebb0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  20eb94:	020eab40 	call	20eab4 <alt_get_errno>
  20eb98:	1007883a 	mov	r3,r2
  20eb9c:	e0bffc17 	ldw	r2,-16(fp)
  20eba0:	0085c83a 	sub	r2,zero,r2
  20eba4:	18800015 	stw	r2,0(r3)
          return -1;
  20eba8:	00bfffc4 	movi	r2,-1
  20ebac:	00000c06 	br	20ebe0 <read+0xf0>
        }
        return rval;
  20ebb0:	e0bffc17 	ldw	r2,-16(fp)
  20ebb4:	00000a06 	br	20ebe0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  20ebb8:	020eab40 	call	20eab4 <alt_get_errno>
  20ebbc:	1007883a 	mov	r3,r2
  20ebc0:	00800344 	movi	r2,13
  20ebc4:	18800015 	stw	r2,0(r3)
  20ebc8:	00000406 	br	20ebdc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  20ebcc:	020eab40 	call	20eab4 <alt_get_errno>
  20ebd0:	1007883a 	mov	r3,r2
  20ebd4:	00801444 	movi	r2,81
  20ebd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  20ebdc:	00bfffc4 	movi	r2,-1
}
  20ebe0:	e037883a 	mov	sp,fp
  20ebe4:	dfc00117 	ldw	ra,4(sp)
  20ebe8:	df000017 	ldw	fp,0(sp)
  20ebec:	dec00204 	addi	sp,sp,8
  20ebf0:	f800283a 	ret

0020ebf4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  20ebf4:	defffc04 	addi	sp,sp,-16
  20ebf8:	dfc00315 	stw	ra,12(sp)
  20ebfc:	df000215 	stw	fp,8(sp)
  20ec00:	dc000115 	stw	r16,4(sp)
  20ec04:	df000204 	addi	fp,sp,8
  20ec08:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  20ec0c:	e0bffe17 	ldw	r2,-8(fp)
  20ec10:	108000d0 	cmplti	r2,r2,3
  20ec14:	1000111e 	bne	r2,zero,20ec5c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  20ec18:	04001074 	movhi	r16,65
  20ec1c:	84223304 	addi	r16,r16,-30516
  20ec20:	e0bffe17 	ldw	r2,-8(fp)
  20ec24:	01400304 	movi	r5,12
  20ec28:	1009883a 	mov	r4,r2
  20ec2c:	02017a80 	call	2017a8 <__mulsi3>
  20ec30:	8085883a 	add	r2,r16,r2
  20ec34:	10800204 	addi	r2,r2,8
  20ec38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  20ec3c:	04001074 	movhi	r16,65
  20ec40:	84223304 	addi	r16,r16,-30516
  20ec44:	e0bffe17 	ldw	r2,-8(fp)
  20ec48:	01400304 	movi	r5,12
  20ec4c:	1009883a 	mov	r4,r2
  20ec50:	02017a80 	call	2017a8 <__mulsi3>
  20ec54:	8085883a 	add	r2,r16,r2
  20ec58:	10000015 	stw	zero,0(r2)
  }
}
  20ec5c:	0001883a 	nop
  20ec60:	e6ffff04 	addi	sp,fp,-4
  20ec64:	dfc00217 	ldw	ra,8(sp)
  20ec68:	df000117 	ldw	fp,4(sp)
  20ec6c:	dc000017 	ldw	r16,0(sp)
  20ec70:	dec00304 	addi	sp,sp,12
  20ec74:	f800283a 	ret

0020ec78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  20ec78:	defff904 	addi	sp,sp,-28
  20ec7c:	df000615 	stw	fp,24(sp)
  20ec80:	df000604 	addi	fp,sp,24
  20ec84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  20ec88:	0005303a 	rdctl	r2,status
  20ec8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  20ec90:	e0fffe17 	ldw	r3,-8(fp)
  20ec94:	00bfff84 	movi	r2,-2
  20ec98:	1884703a 	and	r2,r3,r2
  20ec9c:	1001703a 	wrctl	status,r2
  
  return context;
  20eca0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  20eca4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  20eca8:	d0a00c17 	ldw	r2,-32720(gp)
  20ecac:	10c000c4 	addi	r3,r2,3
  20ecb0:	00bfff04 	movi	r2,-4
  20ecb4:	1884703a 	and	r2,r3,r2
  20ecb8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  20ecbc:	d0e00c17 	ldw	r3,-32720(gp)
  20ecc0:	e0bfff17 	ldw	r2,-4(fp)
  20ecc4:	1887883a 	add	r3,r3,r2
  20ecc8:	00801074 	movhi	r2,65
  20eccc:	10800004 	addi	r2,r2,0
  20ecd0:	10c0062e 	bgeu	r2,r3,20ecec <sbrk+0x74>
  20ecd4:	e0bffb17 	ldw	r2,-20(fp)
  20ecd8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  20ecdc:	e0bffa17 	ldw	r2,-24(fp)
  20ece0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  20ece4:	00bfffc4 	movi	r2,-1
  20ece8:	00000b06 	br	20ed18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  20ecec:	d0a00c17 	ldw	r2,-32720(gp)
  20ecf0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  20ecf4:	d0e00c17 	ldw	r3,-32720(gp)
  20ecf8:	e0bfff17 	ldw	r2,-4(fp)
  20ecfc:	1885883a 	add	r2,r3,r2
  20ed00:	d0a00c15 	stw	r2,-32720(gp)
  20ed04:	e0bffb17 	ldw	r2,-20(fp)
  20ed08:	e0bffc15 	stw	r2,-16(fp)
  20ed0c:	e0bffc17 	ldw	r2,-16(fp)
  20ed10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  20ed14:	e0bffd17 	ldw	r2,-12(fp)
} 
  20ed18:	e037883a 	mov	sp,fp
  20ed1c:	df000017 	ldw	fp,0(sp)
  20ed20:	dec00104 	addi	sp,sp,4
  20ed24:	f800283a 	ret

0020ed28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  20ed28:	defffd04 	addi	sp,sp,-12
  20ed2c:	dfc00215 	stw	ra,8(sp)
  20ed30:	df000115 	stw	fp,4(sp)
  20ed34:	df000104 	addi	fp,sp,4
  20ed38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  20ed3c:	e13fff17 	ldw	r4,-4(fp)
  20ed40:	02127600 	call	212760 <alt_busy_sleep>
}
  20ed44:	e037883a 	mov	sp,fp
  20ed48:	dfc00117 	ldw	ra,4(sp)
  20ed4c:	df000017 	ldw	fp,0(sp)
  20ed50:	dec00204 	addi	sp,sp,8
  20ed54:	f800283a 	ret

0020ed58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20ed58:	defffe04 	addi	sp,sp,-8
  20ed5c:	dfc00115 	stw	ra,4(sp)
  20ed60:	df000015 	stw	fp,0(sp)
  20ed64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20ed68:	d0a00b17 	ldw	r2,-32724(gp)
  20ed6c:	10000326 	beq	r2,zero,20ed7c <alt_get_errno+0x24>
  20ed70:	d0a00b17 	ldw	r2,-32724(gp)
  20ed74:	103ee83a 	callr	r2
  20ed78:	00000106 	br	20ed80 <alt_get_errno+0x28>
  20ed7c:	d0a01c04 	addi	r2,gp,-32656
}
  20ed80:	e037883a 	mov	sp,fp
  20ed84:	dfc00117 	ldw	ra,4(sp)
  20ed88:	df000017 	ldw	fp,0(sp)
  20ed8c:	dec00204 	addi	sp,sp,8
  20ed90:	f800283a 	ret

0020ed94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  20ed94:	defff904 	addi	sp,sp,-28
  20ed98:	dfc00615 	stw	ra,24(sp)
  20ed9c:	df000515 	stw	fp,20(sp)
  20eda0:	df000504 	addi	fp,sp,20
  20eda4:	e13ffd15 	stw	r4,-12(fp)
  20eda8:	e17ffe15 	stw	r5,-8(fp)
  20edac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20edb0:	e0bffd17 	ldw	r2,-12(fp)
  20edb4:	10000816 	blt	r2,zero,20edd8 <write+0x44>
  20edb8:	01400304 	movi	r5,12
  20edbc:	e13ffd17 	ldw	r4,-12(fp)
  20edc0:	02017a80 	call	2017a8 <__mulsi3>
  20edc4:	1007883a 	mov	r3,r2
  20edc8:	00801074 	movhi	r2,65
  20edcc:	10a23304 	addi	r2,r2,-30516
  20edd0:	1885883a 	add	r2,r3,r2
  20edd4:	00000106 	br	20eddc <write+0x48>
  20edd8:	0005883a 	mov	r2,zero
  20eddc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  20ede0:	e0bffb17 	ldw	r2,-20(fp)
  20ede4:	10002126 	beq	r2,zero,20ee6c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  20ede8:	e0bffb17 	ldw	r2,-20(fp)
  20edec:	10800217 	ldw	r2,8(r2)
  20edf0:	108000cc 	andi	r2,r2,3
  20edf4:	10001826 	beq	r2,zero,20ee58 <write+0xc4>
  20edf8:	e0bffb17 	ldw	r2,-20(fp)
  20edfc:	10800017 	ldw	r2,0(r2)
  20ee00:	10800617 	ldw	r2,24(r2)
  20ee04:	10001426 	beq	r2,zero,20ee58 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  20ee08:	e0bffb17 	ldw	r2,-20(fp)
  20ee0c:	10800017 	ldw	r2,0(r2)
  20ee10:	10800617 	ldw	r2,24(r2)
  20ee14:	e0ffff17 	ldw	r3,-4(fp)
  20ee18:	180d883a 	mov	r6,r3
  20ee1c:	e17ffe17 	ldw	r5,-8(fp)
  20ee20:	e13ffb17 	ldw	r4,-20(fp)
  20ee24:	103ee83a 	callr	r2
  20ee28:	e0bffc15 	stw	r2,-16(fp)
  20ee2c:	e0bffc17 	ldw	r2,-16(fp)
  20ee30:	1000070e 	bge	r2,zero,20ee50 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  20ee34:	020ed580 	call	20ed58 <alt_get_errno>
  20ee38:	1007883a 	mov	r3,r2
  20ee3c:	e0bffc17 	ldw	r2,-16(fp)
  20ee40:	0085c83a 	sub	r2,zero,r2
  20ee44:	18800015 	stw	r2,0(r3)
        return -1;
  20ee48:	00bfffc4 	movi	r2,-1
  20ee4c:	00000c06 	br	20ee80 <write+0xec>
      }
      return rval;
  20ee50:	e0bffc17 	ldw	r2,-16(fp)
  20ee54:	00000a06 	br	20ee80 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  20ee58:	020ed580 	call	20ed58 <alt_get_errno>
  20ee5c:	1007883a 	mov	r3,r2
  20ee60:	00800344 	movi	r2,13
  20ee64:	18800015 	stw	r2,0(r3)
  20ee68:	00000406 	br	20ee7c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  20ee6c:	020ed580 	call	20ed58 <alt_get_errno>
  20ee70:	1007883a 	mov	r3,r2
  20ee74:	00801444 	movi	r2,81
  20ee78:	18800015 	stw	r2,0(r3)
  }
  return -1;
  20ee7c:	00bfffc4 	movi	r2,-1
}
  20ee80:	e037883a 	mov	sp,fp
  20ee84:	dfc00117 	ldw	ra,4(sp)
  20ee88:	df000017 	ldw	fp,0(sp)
  20ee8c:	dec00204 	addi	sp,sp,8
  20ee90:	f800283a 	ret

0020ee94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  20ee94:	defffd04 	addi	sp,sp,-12
  20ee98:	dfc00215 	stw	ra,8(sp)
  20ee9c:	df000115 	stw	fp,4(sp)
  20eea0:	df000104 	addi	fp,sp,4
  20eea4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  20eea8:	d1600804 	addi	r5,gp,-32736
  20eeac:	e13fff17 	ldw	r4,-4(fp)
  20eeb0:	021293c0 	call	21293c <alt_dev_llist_insert>
}
  20eeb4:	e037883a 	mov	sp,fp
  20eeb8:	dfc00117 	ldw	ra,4(sp)
  20eebc:	df000017 	ldw	fp,0(sp)
  20eec0:	dec00204 	addi	sp,sp,8
  20eec4:	f800283a 	ret

0020eec8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  20eec8:	defffd04 	addi	sp,sp,-12
  20eecc:	dfc00215 	stw	ra,8(sp)
  20eed0:	df000115 	stw	fp,4(sp)
  20eed4:	df000104 	addi	fp,sp,4
  20eed8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  20eedc:	021369c0 	call	21369c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  20eee0:	00800044 	movi	r2,1
  20eee4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  20eee8:	0001883a 	nop
  20eeec:	e037883a 	mov	sp,fp
  20eef0:	dfc00117 	ldw	ra,4(sp)
  20eef4:	df000017 	ldw	fp,0(sp)
  20eef8:	dec00204 	addi	sp,sp,8
  20eefc:	f800283a 	ret

0020ef00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  20ef00:	defffe04 	addi	sp,sp,-8
  20ef04:	dfc00115 	stw	ra,4(sp)
  20ef08:	df000015 	stw	fp,0(sp)
  20ef0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  20ef10:	01c0fa04 	movi	r7,1000
  20ef14:	01800044 	movi	r6,1
  20ef18:	000b883a 	mov	r5,zero
  20ef1c:	01001074 	movhi	r4,65
  20ef20:	21040004 	addi	r4,r4,4096
  20ef24:	02116780 	call	211678 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
  20ef28:	01001074 	movhi	r4,65
  20ef2c:	21229304 	addi	r4,r4,-30132
  20ef30:	020f1d00 	call	20f1d0 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  20ef34:	000d883a 	mov	r6,zero
  20ef38:	000b883a 	mov	r5,zero
  20ef3c:	01001074 	movhi	r4,65
  20ef40:	2122ab04 	addi	r4,r4,-30036
  20ef44:	0210cfc0 	call	210cfc <altera_avalon_jtag_uart_init>
  20ef48:	01001074 	movhi	r4,65
  20ef4c:	2122a104 	addi	r4,r4,-30076
  20ef50:	020ee940 	call	20ee94 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
  20ef54:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  20ef58:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  20ef5c:	01001074 	movhi	r4,65
  20ef60:	2126b904 	addi	r4,r4,-25884
  20ef64:	0211fa80 	call	211fa8 <altera_onchip_flash_init>
}
  20ef68:	0001883a 	nop
  20ef6c:	e037883a 	mov	sp,fp
  20ef70:	dfc00117 	ldw	ra,4(sp)
  20ef74:	df000017 	ldw	fp,0(sp)
  20ef78:	dec00204 	addi	sp,sp,8
  20ef7c:	f800283a 	ret

0020ef80 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
  20ef80:	defff904 	addi	sp,sp,-28
  20ef84:	dfc00615 	stw	ra,24(sp)
  20ef88:	df000515 	stw	fp,20(sp)
  20ef8c:	df000504 	addi	fp,sp,20
  20ef90:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
  20ef94:	008000b4 	movhi	r2,2
  20ef98:	10a1a804 	addi	r2,r2,-31072
  20ef9c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
  20efa0:	e0bfff17 	ldw	r2,-4(fp)
  20efa4:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
  20efa8:	e0bffc17 	ldw	r2,-16(fp)
  20efac:	10800717 	ldw	r2,28(r2)
  20efb0:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
  20efb4:	e0bffd17 	ldw	r2,-12(fp)
  20efb8:	10800217 	ldw	r2,8(r2)
  20efbc:	10800098 	cmpnei	r2,r2,2
  20efc0:	1000251e 	bne	r2,zero,20f058 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
  20efc4:	e0bffd17 	ldw	r2,-12(fp)
  20efc8:	10c00017 	ldw	r3,0(r2)
  20efcc:	e0bffd17 	ldw	r2,-12(fp)
  20efd0:	10800117 	ldw	r2,4(r2)
  20efd4:	e13ffe04 	addi	r4,fp,-8
  20efd8:	200f883a 	mov	r7,r4
  20efdc:	100d883a 	mov	r6,r2
  20efe0:	180b883a 	mov	r5,r3
  20efe4:	e13ffc17 	ldw	r4,-16(fp)
  20efe8:	020f7300 	call	20f730 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
  20efec:	e0bffd17 	ldw	r2,-12(fp)
  20eff0:	10c00117 	ldw	r3,4(r2)
  20eff4:	e0bffe17 	ldw	r2,-8(fp)
  20eff8:	1887c83a 	sub	r3,r3,r2
  20effc:	e0bffd17 	ldw	r2,-12(fp)
  20f000:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
  20f004:	e0bffd17 	ldw	r2,-12(fp)
  20f008:	10c00017 	ldw	r3,0(r2)
  20f00c:	e0bffe17 	ldw	r2,-8(fp)
  20f010:	1887883a 	add	r3,r3,r2
  20f014:	e0bffd17 	ldw	r2,-12(fp)
  20f018:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
  20f01c:	e0bffd17 	ldw	r2,-12(fp)
  20f020:	10800117 	ldw	r2,4(r2)
  20f024:	10000c26 	beq	r2,zero,20f058 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f028:	01400704 	movi	r5,28
  20f02c:	e13ffc17 	ldw	r4,-16(fp)
  20f030:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  20f034:	01400084 	movi	r5,2
  20f038:	e13ffc17 	ldw	r4,-16(fp)
  20f03c:	021098c0 	call	21098c <alt_avalon_i2c_int_enable>
  20f040:	00000e06 	br	20f07c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
  20f044:	e0bffb17 	ldw	r2,-20(fp)
  20f048:	10bfffc4 	addi	r2,r2,-1
  20f04c:	e0bffb15 	stw	r2,-20(fp)
  20f050:	e0bffb17 	ldw	r2,-20(fp)
  20f054:	10000426 	beq	r2,zero,20f068 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
  20f058:	e13ffc17 	ldw	r4,-16(fp)
  20f05c:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  20f060:	103ff81e 	bne	r2,zero,20f044 <_gp+0xffdfd460>
  20f064:	00000106 	br	20f06c <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
  20f068:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
  20f06c:	e13ffc17 	ldw	r4,-16(fp)
  20f070:	020f3940 	call	20f394 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
  20f074:	e0bffd17 	ldw	r2,-12(fp)
  20f078:	10000215 	stw	zero,8(r2)
}
  20f07c:	e037883a 	mov	sp,fp
  20f080:	dfc00117 	ldw	ra,4(sp)
  20f084:	df000017 	ldw	fp,0(sp)
  20f088:	dec00204 	addi	sp,sp,8
  20f08c:	f800283a 	ret

0020f090 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
  20f090:	defffc04 	addi	sp,sp,-16
  20f094:	dfc00315 	stw	ra,12(sp)
  20f098:	df000215 	stw	fp,8(sp)
  20f09c:	df000204 	addi	fp,sp,8
  20f0a0:	e13ffe15 	stw	r4,-8(fp)
  20f0a4:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
  20f0a8:	e0bfff17 	ldw	r2,-4(fp)
  20f0ac:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
  20f0b0:	e1ffff17 	ldw	r7,-4(fp)
  20f0b4:	000d883a 	mov	r6,zero
  20f0b8:	01400874 	movhi	r5,33
  20f0bc:	297be004 	addi	r5,r5,-4224
  20f0c0:	e13ffe17 	ldw	r4,-8(fp)
  20f0c4:	020f17c0 	call	20f17c <alt_avalon_i2c_register_callback>
}
  20f0c8:	0001883a 	nop
  20f0cc:	e037883a 	mov	sp,fp
  20f0d0:	dfc00117 	ldw	ra,4(sp)
  20f0d4:	df000017 	ldw	fp,0(sp)
  20f0d8:	dec00204 	addi	sp,sp,8
  20f0dc:	f800283a 	ret

0020f0e0 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
  20f0e0:	defff904 	addi	sp,sp,-28
  20f0e4:	dfc00615 	stw	ra,24(sp)
  20f0e8:	df000515 	stw	fp,20(sp)
  20f0ec:	df000504 	addi	fp,sp,20
  20f0f0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
  20f0f4:	e0bfff17 	ldw	r2,-4(fp)
  20f0f8:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  20f0fc:	014007c4 	movi	r5,31
  20f100:	e13ffb17 	ldw	r4,-20(fp)
  20f104:	02109240 	call	210924 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f108:	01400704 	movi	r5,28
  20f10c:	e13ffb17 	ldw	r4,-20(fp)
  20f110:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
  20f114:	e0bffb17 	ldw	r2,-20(fp)
  20f118:	10800617 	ldw	r2,24(r2)
  20f11c:	10001126 	beq	r2,zero,20f164 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  20f120:	0005303a 	rdctl	r2,status
  20f124:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  20f128:	e0fffd17 	ldw	r3,-12(fp)
  20f12c:	00bfff84 	movi	r2,-2
  20f130:	1884703a 	and	r2,r3,r2
  20f134:	1001703a 	wrctl	status,r2
  
  return context;
  20f138:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
  20f13c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
  20f140:	e0bffb17 	ldw	r2,-20(fp)
  20f144:	10800617 	ldw	r2,24(r2)
  20f148:	e13ffb17 	ldw	r4,-20(fp)
  20f14c:	103ee83a 	callr	r2
  20f150:	e0bffc17 	ldw	r2,-16(fp)
  20f154:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  20f158:	e0bffe17 	ldw	r2,-8(fp)
  20f15c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
  20f160:	0001883a 	nop
  20f164:	0001883a 	nop
}
  20f168:	e037883a 	mov	sp,fp
  20f16c:	dfc00117 	ldw	ra,4(sp)
  20f170:	df000017 	ldw	fp,0(sp)
  20f174:	dec00204 	addi	sp,sp,8
  20f178:	f800283a 	ret

0020f17c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
  20f17c:	defffb04 	addi	sp,sp,-20
  20f180:	df000415 	stw	fp,16(sp)
  20f184:	df000404 	addi	fp,sp,16
  20f188:	e13ffc15 	stw	r4,-16(fp)
  20f18c:	e17ffd15 	stw	r5,-12(fp)
  20f190:	e1bffe15 	stw	r6,-8(fp)
  20f194:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  20f198:	e0bffc17 	ldw	r2,-16(fp)
  20f19c:	e0fffd17 	ldw	r3,-12(fp)
  20f1a0:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
  20f1a4:	e0bffc17 	ldw	r2,-16(fp)
  20f1a8:	e0ffff17 	ldw	r3,-4(fp)
  20f1ac:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
  20f1b0:	e0bffc17 	ldw	r2,-16(fp)
  20f1b4:	e0fffe17 	ldw	r3,-8(fp)
  20f1b8:	10c00815 	stw	r3,32(r2)

    return ;
  20f1bc:	0001883a 	nop
}
  20f1c0:	e037883a 	mov	sp,fp
  20f1c4:	df000017 	ldw	fp,0(sp)
  20f1c8:	dec00104 	addi	sp,sp,4
  20f1cc:	f800283a 	ret

0020f1d0 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
  20f1d0:	defff704 	addi	sp,sp,-36
  20f1d4:	dfc00815 	stw	ra,32(sp)
  20f1d8:	df000715 	stw	fp,28(sp)
  20f1dc:	df000704 	addi	fp,sp,28
  20f1e0:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
  20f1e4:	e13fff17 	ldw	r4,-4(fp)
  20f1e8:	020f3940 	call	20f394 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  20f1ec:	014007c4 	movi	r5,31
  20f1f0:	e13fff17 	ldw	r4,-4(fp)
  20f1f4:	02109240 	call	210924 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f1f8:	01400704 	movi	r5,28
  20f1fc:	e13fff17 	ldw	r4,-4(fp)
  20f200:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
  20f204:	014000c4 	movi	r5,3
  20f208:	e13fff17 	ldw	r4,-4(fp)
  20f20c:	0210b300 	call	210b30 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
  20f210:	014000c4 	movi	r5,3
  20f214:	e13fff17 	ldw	r4,-4(fp)
  20f218:	0210a800 	call	210a80 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
  20f21c:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
  20f220:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
  20f224:	e0bffb04 	addi	r2,fp,-20
  20f228:	018000b4 	movhi	r6,2
  20f22c:	31a1a804 	addi	r6,r6,-31072
  20f230:	100b883a 	mov	r5,r2
  20f234:	e13fff17 	ldw	r4,-4(fp)
  20f238:	020f5f00 	call	20f5f0 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
  20f23c:	e0bffb04 	addi	r2,fp,-20
  20f240:	100b883a 	mov	r5,r2
  20f244:	e13fff17 	ldw	r4,-4(fp)
  20f248:	020f4900 	call	20f490 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
  20f24c:	d1600d04 	addi	r5,gp,-32716
  20f250:	e13fff17 	ldw	r4,-4(fp)
  20f254:	021293c0 	call	21293c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  20f258:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
  20f25c:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
  20f260:	e0bffa17 	ldw	r2,-24(fp)
  20f264:	10000c1e 	bne	r2,zero,20f298 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
  20f268:	e0bfff17 	ldw	r2,-4(fp)
  20f26c:	10c00417 	ldw	r3,16(r2)
  20f270:	e0bfff17 	ldw	r2,-4(fp)
  20f274:	10800517 	ldw	r2,20(r2)
  20f278:	d8000015 	stw	zero,0(sp)
  20f27c:	e1ffff17 	ldw	r7,-4(fp)
  20f280:	01800874 	movhi	r6,33
  20f284:	31bc3804 	addi	r6,r6,-3872
  20f288:	100b883a 	mov	r5,r2
  20f28c:	1809883a 	mov	r4,r3
  20f290:	0212c0c0 	call	212c0c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
  20f294:	00000406 	br	20f2a8 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
  20f298:	01000874 	movhi	r4,33
  20f29c:	2110cc04 	addi	r4,r4,17200
  20f2a0:	02132900 	call	213290 <alt_printf>
    }

    return;
  20f2a4:	0001883a 	nop

}
  20f2a8:	e037883a 	mov	sp,fp
  20f2ac:	dfc00117 	ldw	ra,4(sp)
  20f2b0:	df000017 	ldw	fp,0(sp)
  20f2b4:	dec00204 	addi	sp,sp,8
  20f2b8:	f800283a 	ret

0020f2bc <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
  20f2bc:	defffc04 	addi	sp,sp,-16
  20f2c0:	dfc00315 	stw	ra,12(sp)
  20f2c4:	df000215 	stw	fp,8(sp)
  20f2c8:	df000204 	addi	fp,sp,8
  20f2cc:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
  20f2d0:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
  20f2d4:	d1600d04 	addi	r5,gp,-32716
  20f2d8:	e13fff17 	ldw	r4,-4(fp)
  20f2dc:	0212aa00 	call	212aa0 <alt_find_dev>
  20f2e0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  20f2e4:	e0bffe17 	ldw	r2,-8(fp)
}
  20f2e8:	e037883a 	mov	sp,fp
  20f2ec:	dfc00117 	ldw	ra,4(sp)
  20f2f0:	df000017 	ldw	fp,0(sp)
  20f2f4:	dec00204 	addi	sp,sp,8
  20f2f8:	f800283a 	ret

0020f2fc <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f2fc:	defffc04 	addi	sp,sp,-16
  20f300:	df000315 	stw	fp,12(sp)
  20f304:	df000304 	addi	fp,sp,12
  20f308:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  20f30c:	e0bfff17 	ldw	r2,-4(fp)
  20f310:	10800717 	ldw	r2,28(r2)
  20f314:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
  20f318:	e0bfff17 	ldw	r2,-4(fp)
  20f31c:	10800317 	ldw	r2,12(r2)
  20f320:	10800204 	addi	r2,r2,8
  20f324:	10800037 	ldwio	r2,0(r2)
  20f328:	1080004c 	andi	r2,r2,1
  20f32c:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
  20f330:	e0bffe17 	ldw	r2,-8(fp)
  20f334:	10000226 	beq	r2,zero,20f340 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
  20f338:	00bffe44 	movi	r2,-7
  20f33c:	00001106 	br	20f384 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
  20f340:	e0bfff17 	ldw	r2,-4(fp)
  20f344:	10c00617 	ldw	r3,24(r2)
  20f348:	00800874 	movhi	r2,33
  20f34c:	10bbe004 	addi	r2,r2,-4224
  20f350:	1880021e 	bne	r3,r2,20f35c <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
  20f354:	e0bffd17 	ldw	r2,-12(fp)
  20f358:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
  20f35c:	e0bfff17 	ldw	r2,-4(fp)
  20f360:	10800317 	ldw	r2,12(r2)
  20f364:	10800204 	addi	r2,r2,8
  20f368:	e0ffff17 	ldw	r3,-4(fp)
  20f36c:	18c00317 	ldw	r3,12(r3)
  20f370:	18c00204 	addi	r3,r3,8
  20f374:	18c00037 	ldwio	r3,0(r3)
  20f378:	18c00054 	ori	r3,r3,1
  20f37c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  20f380:	0005883a 	mov	r2,zero
}
  20f384:	e037883a 	mov	sp,fp
  20f388:	df000017 	ldw	fp,0(sp)
  20f38c:	dec00104 	addi	sp,sp,4
  20f390:	f800283a 	ret

0020f394 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f394:	defffe04 	addi	sp,sp,-8
  20f398:	df000115 	stw	fp,4(sp)
  20f39c:	df000104 	addi	fp,sp,4
  20f3a0:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
  20f3a4:	e0bfff17 	ldw	r2,-4(fp)
  20f3a8:	10800317 	ldw	r2,12(r2)
  20f3ac:	10800204 	addi	r2,r2,8
  20f3b0:	e0ffff17 	ldw	r3,-4(fp)
  20f3b4:	18c00317 	ldw	r3,12(r3)
  20f3b8:	18c00204 	addi	r3,r3,8
  20f3bc:	19000037 	ldwio	r4,0(r3)
  20f3c0:	00ffff84 	movi	r3,-2
  20f3c4:	20c6703a 	and	r3,r4,r3
  20f3c8:	10c00035 	stwio	r3,0(r2)

}
  20f3cc:	0001883a 	nop
  20f3d0:	e037883a 	mov	sp,fp
  20f3d4:	df000017 	ldw	fp,0(sp)
  20f3d8:	dec00104 	addi	sp,sp,4
  20f3dc:	f800283a 	ret

0020f3e0 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  20f3e0:	defffd04 	addi	sp,sp,-12
  20f3e4:	df000215 	stw	fp,8(sp)
  20f3e8:	df000204 	addi	fp,sp,8
  20f3ec:	e13ffe15 	stw	r4,-8(fp)
  20f3f0:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
  20f3f4:	e0bffe17 	ldw	r2,-8(fp)
  20f3f8:	10c00d17 	ldw	r3,52(r2)
  20f3fc:	e0bfff17 	ldw	r2,-4(fp)
  20f400:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
  20f404:	e0bffe17 	ldw	r2,-8(fp)
  20f408:	10800317 	ldw	r2,12(r2)
  20f40c:	10800204 	addi	r2,r2,8
  20f410:	10800037 	ldwio	r2,0(r2)
  20f414:	1080008c 	andi	r2,r2,2
  20f418:	1005d07a 	srai	r2,r2,1
  20f41c:	1007883a 	mov	r3,r2
  20f420:	e0bfff17 	ldw	r2,-4(fp)
  20f424:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
  20f428:	e0bffe17 	ldw	r2,-8(fp)
  20f42c:	10800317 	ldw	r2,12(r2)
  20f430:	10800904 	addi	r2,r2,36
  20f434:	10800037 	ldwio	r2,0(r2)
  20f438:	1007883a 	mov	r3,r2
  20f43c:	e0bfff17 	ldw	r2,-4(fp)
  20f440:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
  20f444:	e0bffe17 	ldw	r2,-8(fp)
  20f448:	10800317 	ldw	r2,12(r2)
  20f44c:	10800804 	addi	r2,r2,32
  20f450:	10800037 	ldwio	r2,0(r2)
  20f454:	1007883a 	mov	r3,r2
  20f458:	e0bfff17 	ldw	r2,-4(fp)
  20f45c:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
  20f460:	e0bffe17 	ldw	r2,-8(fp)
  20f464:	10800317 	ldw	r2,12(r2)
  20f468:	10800a04 	addi	r2,r2,40
  20f46c:	10800037 	ldwio	r2,0(r2)
  20f470:	1007883a 	mov	r3,r2
  20f474:	e0bfff17 	ldw	r2,-4(fp)
  20f478:	10c0030d 	sth	r3,12(r2)
}
  20f47c:	0001883a 	nop
  20f480:	e037883a 	mov	sp,fp
  20f484:	df000017 	ldw	fp,0(sp)
  20f488:	dec00104 	addi	sp,sp,4
  20f48c:	f800283a 	ret

0020f490 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  20f490:	defffd04 	addi	sp,sp,-12
  20f494:	df000215 	stw	fp,8(sp)
  20f498:	df000204 	addi	fp,sp,8
  20f49c:	e13ffe15 	stw	r4,-8(fp)
  20f4a0:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
  20f4a4:	e0bfff17 	ldw	r2,-4(fp)
  20f4a8:	10c00017 	ldw	r3,0(r2)
  20f4ac:	e0bffe17 	ldw	r2,-8(fp)
  20f4b0:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
  20f4b4:	e0bffe17 	ldw	r2,-8(fp)
  20f4b8:	10800317 	ldw	r2,12(r2)
  20f4bc:	10c00204 	addi	r3,r2,8
  20f4c0:	e0bffe17 	ldw	r2,-8(fp)
  20f4c4:	10800317 	ldw	r2,12(r2)
  20f4c8:	10800204 	addi	r2,r2,8
  20f4cc:	10800037 	ldwio	r2,0(r2)
  20f4d0:	1009883a 	mov	r4,r2
  20f4d4:	00bfff44 	movi	r2,-3
  20f4d8:	2088703a 	and	r4,r4,r2
  20f4dc:	e0bfff17 	ldw	r2,-4(fp)
  20f4e0:	10800117 	ldw	r2,4(r2)
  20f4e4:	1085883a 	add	r2,r2,r2
  20f4e8:	1080008c 	andi	r2,r2,2
  20f4ec:	2084b03a 	or	r2,r4,r2
  20f4f0:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
  20f4f4:	e0bffe17 	ldw	r2,-8(fp)
  20f4f8:	10800317 	ldw	r2,12(r2)
  20f4fc:	10800904 	addi	r2,r2,36
  20f500:	e0ffff17 	ldw	r3,-4(fp)
  20f504:	18c0020b 	ldhu	r3,8(r3)
  20f508:	18ffffcc 	andi	r3,r3,65535
  20f50c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
  20f510:	e0bffe17 	ldw	r2,-8(fp)
  20f514:	10800317 	ldw	r2,12(r2)
  20f518:	10800804 	addi	r2,r2,32
  20f51c:	e0ffff17 	ldw	r3,-4(fp)
  20f520:	18c0028b 	ldhu	r3,10(r3)
  20f524:	18ffffcc 	andi	r3,r3,65535
  20f528:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
  20f52c:	e0bffe17 	ldw	r2,-8(fp)
  20f530:	10800317 	ldw	r2,12(r2)
  20f534:	10800a04 	addi	r2,r2,40
  20f538:	e0ffff17 	ldw	r3,-4(fp)
  20f53c:	18c0030b 	ldhu	r3,12(r3)
  20f540:	18ffffcc 	andi	r3,r3,65535
  20f544:	10c00035 	stwio	r3,0(r2)
}
  20f548:	0001883a 	nop
  20f54c:	e037883a 	mov	sp,fp
  20f550:	df000017 	ldw	fp,0(sp)
  20f554:	dec00104 	addi	sp,sp,4
  20f558:	f800283a 	ret

0020f55c <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
  20f55c:	defffb04 	addi	sp,sp,-20
  20f560:	dfc00415 	stw	ra,16(sp)
  20f564:	df000315 	stw	fp,12(sp)
  20f568:	df000304 	addi	fp,sp,12
  20f56c:	e13ffd15 	stw	r4,-12(fp)
  20f570:	e17ffe15 	stw	r5,-8(fp)
  20f574:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
  20f578:	e0bffe17 	ldw	r2,-8(fp)
  20f57c:	1080028b 	ldhu	r2,10(r2)
  20f580:	10bfffcc 	andi	r2,r2,65535
  20f584:	10000426 	beq	r2,zero,20f598 <alt_avalon_i2c_master_config_speed_get+0x3c>
  20f588:	e0bffe17 	ldw	r2,-8(fp)
  20f58c:	1080020b 	ldhu	r2,8(r2)
  20f590:	10bfffcc 	andi	r2,r2,65535
  20f594:	1000021e 	bne	r2,zero,20f5a0 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
  20f598:	00bfff44 	movi	r2,-3
  20f59c:	00000f06 	br	20f5dc <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
  20f5a0:	e0bffd17 	ldw	r2,-12(fp)
  20f5a4:	11000c17 	ldw	r4,48(r2)
  20f5a8:	e0bffe17 	ldw	r2,-8(fp)
  20f5ac:	1080028b 	ldhu	r2,10(r2)
  20f5b0:	10ffffcc 	andi	r3,r2,65535
  20f5b4:	e0bffe17 	ldw	r2,-8(fp)
  20f5b8:	1080020b 	ldhu	r2,8(r2)
  20f5bc:	10bfffcc 	andi	r2,r2,65535
  20f5c0:	1885883a 	add	r2,r3,r2
  20f5c4:	100b883a 	mov	r5,r2
  20f5c8:	0200b580 	call	200b58 <__udivsi3>
  20f5cc:	1007883a 	mov	r3,r2
  20f5d0:	e0bfff17 	ldw	r2,-4(fp)
  20f5d4:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  20f5d8:	0005883a 	mov	r2,zero
}
  20f5dc:	e037883a 	mov	sp,fp
  20f5e0:	dfc00117 	ldw	ra,4(sp)
  20f5e4:	df000017 	ldw	fp,0(sp)
  20f5e8:	dec00204 	addi	sp,sp,8
  20f5ec:	f800283a 	ret

0020f5f0 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
  20f5f0:	defff904 	addi	sp,sp,-28
  20f5f4:	dfc00615 	stw	ra,24(sp)
  20f5f8:	df000515 	stw	fp,20(sp)
  20f5fc:	df000504 	addi	fp,sp,20
  20f600:	e13ffd15 	stw	r4,-12(fp)
  20f604:	e17ffe15 	stw	r5,-8(fp)
  20f608:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
  20f60c:	e0ffff17 	ldw	r3,-4(fp)
  20f610:	008001b4 	movhi	r2,6
  20f614:	1086a004 	addi	r2,r2,6784
  20f618:	10c00436 	bltu	r2,r3,20f62c <alt_avalon_i2c_master_config_speed_set+0x3c>
  20f61c:	e0bfff17 	ldw	r2,-4(fp)
  20f620:	10000226 	beq	r2,zero,20f62c <alt_avalon_i2c_master_config_speed_set+0x3c>
  20f624:	e0bfff17 	ldw	r2,-4(fp)
  20f628:	1000021e 	bne	r2,zero,20f634 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
  20f62c:	00bfff04 	movi	r2,-4
  20f630:	00002906 	br	20f6d8 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
  20f634:	e0bffd17 	ldw	r2,-12(fp)
  20f638:	10c00c17 	ldw	r3,48(r2)
  20f63c:	e0bfff17 	ldw	r2,-4(fp)
  20f640:	1085883a 	add	r2,r2,r2
  20f644:	100b883a 	mov	r5,r2
  20f648:	1809883a 	mov	r4,r3
  20f64c:	0200b580 	call	200b58 <__udivsi3>
  20f650:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  20f654:	e0bffb17 	ldw	r2,-20(fp)
  20f658:	10800f04 	addi	r2,r2,60
  20f65c:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  20f660:	e0bffb17 	ldw	r2,-20(fp)
  20f664:	10bff104 	addi	r2,r2,-60
  20f668:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
  20f66c:	e0ffff17 	ldw	r3,-4(fp)
  20f670:	008000b4 	movhi	r2,2
  20f674:	10a1a804 	addi	r2,r2,-31072
  20f678:	10c0042e 	bgeu	r2,r3,20f68c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
  20f67c:	e0bffe17 	ldw	r2,-8(fp)
  20f680:	00c00044 	movi	r3,1
  20f684:	10c00115 	stw	r3,4(r2)
  20f688:	00000206 	br	20f694 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
  20f68c:	e0bffe17 	ldw	r2,-8(fp)
  20f690:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
  20f694:	e0bffb17 	ldw	r2,-20(fp)
  20f698:	1007883a 	mov	r3,r2
  20f69c:	e0bffe17 	ldw	r2,-8(fp)
  20f6a0:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
  20f6a4:	e0bffc17 	ldw	r2,-16(fp)
  20f6a8:	1007883a 	mov	r3,r2
  20f6ac:	e0bffe17 	ldw	r2,-8(fp)
  20f6b0:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
  20f6b4:	e0bffb17 	ldw	r2,-20(fp)
  20f6b8:	1007883a 	mov	r3,r2
  20f6bc:	e0bffb17 	ldw	r2,-20(fp)
  20f6c0:	1004d07a 	srli	r2,r2,1
  20f6c4:	1885c83a 	sub	r2,r3,r2
  20f6c8:	1007883a 	mov	r3,r2
  20f6cc:	e0bffe17 	ldw	r2,-8(fp)
  20f6d0:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
  20f6d4:	0005883a 	mov	r2,zero

}
  20f6d8:	e037883a 	mov	sp,fp
  20f6dc:	dfc00117 	ldw	ra,4(sp)
  20f6e0:	df000017 	ldw	fp,0(sp)
  20f6e4:	dec00204 	addi	sp,sp,8
  20f6e8:	f800283a 	ret

0020f6ec <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f6ec:	defffe04 	addi	sp,sp,-8
  20f6f0:	df000115 	stw	fp,4(sp)
  20f6f4:	df000104 	addi	fp,sp,4
  20f6f8:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
  20f6fc:	e0bfff17 	ldw	r2,-4(fp)
  20f700:	10800317 	ldw	r2,12(r2)
  20f704:	10800504 	addi	r2,r2,20
  20f708:	10800037 	ldwio	r2,0(r2)
  20f70c:	1080004c 	andi	r2,r2,1
  20f710:	10000226 	beq	r2,zero,20f71c <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
  20f714:	00800044 	movi	r2,1
  20f718:	00000106 	br	20f720 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
  20f71c:	0005883a 	mov	r2,zero
}
  20f720:	e037883a 	mov	sp,fp
  20f724:	df000017 	ldw	fp,0(sp)
  20f728:	dec00104 	addi	sp,sp,4
  20f72c:	f800283a 	ret

0020f730 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
  20f730:	defffb04 	addi	sp,sp,-20
  20f734:	df000415 	stw	fp,16(sp)
  20f738:	df000404 	addi	fp,sp,16
  20f73c:	e13ffc15 	stw	r4,-16(fp)
  20f740:	e17ffd15 	stw	r5,-12(fp)
  20f744:	e1bffe15 	stw	r6,-8(fp)
  20f748:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
  20f74c:	e0bfff17 	ldw	r2,-4(fp)
  20f750:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  20f754:	00001406 	br	20f7a8 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  20f758:	e0bfff17 	ldw	r2,-4(fp)
  20f75c:	10800017 	ldw	r2,0(r2)
  20f760:	e0fffd17 	ldw	r3,-12(fp)
  20f764:	1885883a 	add	r2,r3,r2
  20f768:	e0fffc17 	ldw	r3,-16(fp)
  20f76c:	18c00317 	ldw	r3,12(r3)
  20f770:	18c00104 	addi	r3,r3,4
  20f774:	18c00037 	ldwio	r3,0(r3)
  20f778:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
  20f77c:	e0bfff17 	ldw	r2,-4(fp)
  20f780:	10800017 	ldw	r2,0(r2)
  20f784:	10c00044 	addi	r3,r2,1
  20f788:	e0bfff17 	ldw	r2,-4(fp)
  20f78c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  20f790:	e0bfff17 	ldw	r2,-4(fp)
  20f794:	10c00017 	ldw	r3,0(r2)
  20f798:	e0bffe17 	ldw	r2,-8(fp)
  20f79c:	1880021e 	bne	r3,r2,20f7a8 <alt_avalon_i2c_rx_read_available+0x78>
  20f7a0:	e0bffe17 	ldw	r2,-8(fp)
  20f7a4:	1000061e 	bne	r2,zero,20f7c0 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  20f7a8:	e0bffc17 	ldw	r2,-16(fp)
  20f7ac:	10800317 	ldw	r2,12(r2)
  20f7b0:	10800704 	addi	r2,r2,28
  20f7b4:	10800037 	ldwio	r2,0(r2)
  20f7b8:	103fe71e 	bne	r2,zero,20f758 <_gp+0xffdfdb74>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
  20f7bc:	00000106 	br	20f7c4 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  20f7c0:	0001883a 	nop
    }
}
  20f7c4:	0001883a 	nop
  20f7c8:	e037883a 	mov	sp,fp
  20f7cc:	df000017 	ldw	fp,0(sp)
  20f7d0:	dec00104 	addi	sp,sp,4
  20f7d4:	f800283a 	ret

0020f7d8 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
  20f7d8:	defffa04 	addi	sp,sp,-24
  20f7dc:	dfc00515 	stw	ra,20(sp)
  20f7e0:	df000415 	stw	fp,16(sp)
  20f7e4:	df000404 	addi	fp,sp,16
  20f7e8:	e13ffe15 	stw	r4,-8(fp)
  20f7ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
  20f7f0:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
  20f7f4:	008000b4 	movhi	r2,2
  20f7f8:	10a1a804 	addi	r2,r2,-31072
  20f7fc:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  20f800:	00000d06 	br	20f838 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
  20f804:	e0bffd17 	ldw	r2,-12(fp)
  20f808:	108002a8 	cmpgeui	r2,r2,10
  20f80c:	1000021e 	bne	r2,zero,20f818 <alt_avalon_i2c_rx_read+0x40>
  20f810:	0109c404 	movi	r4,10000
  20f814:	02127600 	call	212760 <alt_busy_sleep>
      if (--timeout == 0)
  20f818:	e0bffd17 	ldw	r2,-12(fp)
  20f81c:	10bfffc4 	addi	r2,r2,-1
  20f820:	e0bffd15 	stw	r2,-12(fp)
  20f824:	e0bffd17 	ldw	r2,-12(fp)
  20f828:	1000031e 	bne	r2,zero,20f838 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
  20f82c:	00bfff84 	movi	r2,-2
  20f830:	e0bffc15 	stw	r2,-16(fp)
        break;
  20f834:	00000506 	br	20f84c <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  20f838:	e0bffe17 	ldw	r2,-8(fp)
  20f83c:	10800317 	ldw	r2,12(r2)
  20f840:	10800704 	addi	r2,r2,28
  20f844:	10800037 	ldwio	r2,0(r2)
  20f848:	103fee26 	beq	r2,zero,20f804 <_gp+0xffdfdc20>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  20f84c:	e0bffe17 	ldw	r2,-8(fp)
  20f850:	10800317 	ldw	r2,12(r2)
  20f854:	10800104 	addi	r2,r2,4
  20f858:	10800037 	ldwio	r2,0(r2)
  20f85c:	1007883a 	mov	r3,r2
  20f860:	e0bfff17 	ldw	r2,-4(fp)
  20f864:	10c00005 	stb	r3,0(r2)
        
    return status;
  20f868:	e0bffc17 	ldw	r2,-16(fp)
}
  20f86c:	e037883a 	mov	sp,fp
  20f870:	dfc00117 	ldw	ra,4(sp)
  20f874:	df000017 	ldw	fp,0(sp)
  20f878:	dec00204 	addi	sp,sp,8
  20f87c:	f800283a 	ret

0020f880 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
  20f880:	defff804 	addi	sp,sp,-32
  20f884:	dfc00715 	stw	ra,28(sp)
  20f888:	df000615 	stw	fp,24(sp)
  20f88c:	df000604 	addi	fp,sp,24
  20f890:	e13ffc15 	stw	r4,-16(fp)
  20f894:	2809883a 	mov	r4,r5
  20f898:	3007883a 	mov	r3,r6
  20f89c:	3805883a 	mov	r2,r7
  20f8a0:	e13ffd05 	stb	r4,-12(fp)
  20f8a4:	e0fffe05 	stb	r3,-8(fp)
  20f8a8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
  20f8ac:	0089c404 	movi	r2,10000
  20f8b0:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  20f8b4:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  20f8b8:	00000c06 	br	20f8ec <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
  20f8bc:	e0bffa17 	ldw	r2,-24(fp)
  20f8c0:	108002a8 	cmpgeui	r2,r2,10
  20f8c4:	1000021e 	bne	r2,zero,20f8d0 <alt_avalon_i2c_cmd_write+0x50>
  20f8c8:	0109c404 	movi	r4,10000
  20f8cc:	02127600 	call	212760 <alt_busy_sleep>
      if (--timeout == 0)
  20f8d0:	e0bffa17 	ldw	r2,-24(fp)
  20f8d4:	10bfffc4 	addi	r2,r2,-1
  20f8d8:	e0bffa15 	stw	r2,-24(fp)
  20f8dc:	e0bffa17 	ldw	r2,-24(fp)
  20f8e0:	1000021e 	bne	r2,zero,20f8ec <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
  20f8e4:	00bfff84 	movi	r2,-2
  20f8e8:	00001906 	br	20f950 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  20f8ec:	e0bffc17 	ldw	r2,-16(fp)
  20f8f0:	10800317 	ldw	r2,12(r2)
  20f8f4:	10800404 	addi	r2,r2,16
  20f8f8:	10800037 	ldwio	r2,0(r2)
  20f8fc:	1080004c 	andi	r2,r2,1
  20f900:	103fee26 	beq	r2,zero,20f8bc <_gp+0xffdfdcd8>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
  20f904:	e0bffc17 	ldw	r2,-16(fp)
  20f908:	10800317 	ldw	r2,12(r2)
  20f90c:	e13ffd03 	ldbu	r4,-12(fp)
  20f910:	e0fffe03 	ldbu	r3,-8(fp)
  20f914:	1806927a 	slli	r3,r3,9
  20f918:	20c8b03a 	or	r4,r4,r3
  20f91c:	e0ffff03 	ldbu	r3,-4(fp)
  20f920:	1806923a 	slli	r3,r3,8
  20f924:	20c6b03a 	or	r3,r4,r3
  20f928:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  20f92c:	e0bffb04 	addi	r2,fp,-20
  20f930:	100b883a 	mov	r5,r2
  20f934:	e13ffc17 	ldw	r4,-16(fp)
  20f938:	020fac00 	call	20fac0 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
  20f93c:	e0bffb04 	addi	r2,fp,-20
  20f940:	100b883a 	mov	r5,r2
  20f944:	e13ffc17 	ldw	r4,-16(fp)
  20f948:	020fb0c0 	call	20fb0c <alt_avalon_i2c_check_arblost>
    
    return status;
  20f94c:	e0bffb17 	ldw	r2,-20(fp)
}
  20f950:	e037883a 	mov	sp,fp
  20f954:	dfc00117 	ldw	ra,4(sp)
  20f958:	df000017 	ldw	fp,0(sp)
  20f95c:	dec00204 	addi	sp,sp,8
  20f960:	f800283a 	ret

0020f964 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
  20f964:	defffa04 	addi	sp,sp,-24
  20f968:	dfc00515 	stw	ra,20(sp)
  20f96c:	df000415 	stw	fp,16(sp)
  20f970:	df000404 	addi	fp,sp,16
  20f974:	e13ffd15 	stw	r4,-12(fp)
  20f978:	e17ffe15 	stw	r5,-8(fp)
  20f97c:	3005883a 	mov	r2,r6
  20f980:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
  20f984:	e0bffd17 	ldw	r2,-12(fp)
  20f988:	10800d17 	ldw	r2,52(r2)
  20f98c:	10800058 	cmpnei	r2,r2,1
  20f990:	10001c1e 	bne	r2,zero,20fa04 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  20f994:	e0bffd17 	ldw	r2,-12(fp)
  20f998:	10800917 	ldw	r2,36(r2)
  20f99c:	109e0014 	ori	r2,r2,30720
  20f9a0:	1004d1fa 	srli	r2,r2,7
  20f9a4:	1007883a 	mov	r3,r2
  20f9a8:	00bfff84 	movi	r2,-2
  20f9ac:	1884703a 	and	r2,r3,r2
  20f9b0:	1007883a 	mov	r3,r2
  20f9b4:	e0bffe17 	ldw	r2,-8(fp)
  20f9b8:	1884b03a 	or	r2,r3,r2
  20f9bc:	10803fcc 	andi	r2,r2,255
  20f9c0:	e0ffff03 	ldbu	r3,-4(fp)
  20f9c4:	000f883a 	mov	r7,zero
  20f9c8:	180d883a 	mov	r6,r3
  20f9cc:	100b883a 	mov	r5,r2
  20f9d0:	e13ffd17 	ldw	r4,-12(fp)
  20f9d4:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  20f9d8:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
  20f9dc:	e0bffd17 	ldw	r2,-12(fp)
  20f9e0:	10800917 	ldw	r2,36(r2)
  20f9e4:	10803fcc 	andi	r2,r2,255
  20f9e8:	000f883a 	mov	r7,zero
  20f9ec:	000d883a 	mov	r6,zero
  20f9f0:	100b883a 	mov	r5,r2
  20f9f4:	e13ffd17 	ldw	r4,-12(fp)
  20f9f8:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  20f9fc:	e0bffc15 	stw	r2,-16(fp)
  20fa00:	00000e06 	br	20fa3c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  20fa04:	e0bffd17 	ldw	r2,-12(fp)
  20fa08:	10800917 	ldw	r2,36(r2)
  20fa0c:	1085883a 	add	r2,r2,r2
  20fa10:	1007883a 	mov	r3,r2
  20fa14:	e0bffe17 	ldw	r2,-8(fp)
  20fa18:	1884b03a 	or	r2,r3,r2
  20fa1c:	10803fcc 	andi	r2,r2,255
  20fa20:	e0ffff03 	ldbu	r3,-4(fp)
  20fa24:	000f883a 	mov	r7,zero
  20fa28:	180d883a 	mov	r6,r3
  20fa2c:	100b883a 	mov	r5,r2
  20fa30:	e13ffd17 	ldw	r4,-12(fp)
  20fa34:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  20fa38:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
  20fa3c:	e0bffc17 	ldw	r2,-16(fp)
}
  20fa40:	e037883a 	mov	sp,fp
  20fa44:	dfc00117 	ldw	ra,4(sp)
  20fa48:	df000017 	ldw	fp,0(sp)
  20fa4c:	dec00204 	addi	sp,sp,8
  20fa50:	f800283a 	ret

0020fa54 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
  20fa54:	defffd04 	addi	sp,sp,-12
  20fa58:	df000215 	stw	fp,8(sp)
  20fa5c:	df000204 	addi	fp,sp,8
  20fa60:	e13ffe15 	stw	r4,-8(fp)
  20fa64:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
  20fa68:	e0bffe17 	ldw	r2,-8(fp)
  20fa6c:	10c00917 	ldw	r3,36(r2)
  20fa70:	e0bfff17 	ldw	r2,-4(fp)
  20fa74:	10c00015 	stw	r3,0(r2)
}
  20fa78:	0001883a 	nop
  20fa7c:	e037883a 	mov	sp,fp
  20fa80:	df000017 	ldw	fp,0(sp)
  20fa84:	dec00104 	addi	sp,sp,4
  20fa88:	f800283a 	ret

0020fa8c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
  20fa8c:	defffd04 	addi	sp,sp,-12
  20fa90:	df000215 	stw	fp,8(sp)
  20fa94:	df000204 	addi	fp,sp,8
  20fa98:	e13ffe15 	stw	r4,-8(fp)
  20fa9c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
  20faa0:	e0bffe17 	ldw	r2,-8(fp)
  20faa4:	e0ffff17 	ldw	r3,-4(fp)
  20faa8:	10c00915 	stw	r3,36(r2)
}
  20faac:	0001883a 	nop
  20fab0:	e037883a 	mov	sp,fp
  20fab4:	df000017 	ldw	fp,0(sp)
  20fab8:	dec00104 	addi	sp,sp,4
  20fabc:	f800283a 	ret

0020fac0 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
  20fac0:	defffd04 	addi	sp,sp,-12
  20fac4:	df000215 	stw	fp,8(sp)
  20fac8:	df000204 	addi	fp,sp,8
  20facc:	e13ffe15 	stw	r4,-8(fp)
  20fad0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
  20fad4:	e0bffe17 	ldw	r2,-8(fp)
  20fad8:	10800317 	ldw	r2,12(r2)
  20fadc:	10800404 	addi	r2,r2,16
  20fae0:	10800037 	ldwio	r2,0(r2)
  20fae4:	1080010c 	andi	r2,r2,4
  20fae8:	10000326 	beq	r2,zero,20faf8 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
  20faec:	e0bfff17 	ldw	r2,-4(fp)
  20faf0:	00fffec4 	movi	r3,-5
  20faf4:	10c00015 	stw	r3,0(r2)
    }
}
  20faf8:	0001883a 	nop
  20fafc:	e037883a 	mov	sp,fp
  20fb00:	df000017 	ldw	fp,0(sp)
  20fb04:	dec00104 	addi	sp,sp,4
  20fb08:	f800283a 	ret

0020fb0c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
  20fb0c:	defffd04 	addi	sp,sp,-12
  20fb10:	df000215 	stw	fp,8(sp)
  20fb14:	df000204 	addi	fp,sp,8
  20fb18:	e13ffe15 	stw	r4,-8(fp)
  20fb1c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
  20fb20:	e0bffe17 	ldw	r2,-8(fp)
  20fb24:	10800317 	ldw	r2,12(r2)
  20fb28:	10800404 	addi	r2,r2,16
  20fb2c:	10800037 	ldwio	r2,0(r2)
  20fb30:	1080020c 	andi	r2,r2,8
  20fb34:	10000326 	beq	r2,zero,20fb44 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
  20fb38:	e0bfff17 	ldw	r2,-4(fp)
  20fb3c:	00fffe84 	movi	r3,-6
  20fb40:	10c00015 	stw	r3,0(r2)
    }
}
  20fb44:	0001883a 	nop
  20fb48:	e037883a 	mov	sp,fp
  20fb4c:	df000017 	ldw	fp,0(sp)
  20fb50:	dec00104 	addi	sp,sp,4
  20fb54:	f800283a 	ret

0020fb58 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20fb58:	defff804 	addi	sp,sp,-32
  20fb5c:	dfc00715 	stw	ra,28(sp)
  20fb60:	df000615 	stw	fp,24(sp)
  20fb64:	df000604 	addi	fp,sp,24
  20fb68:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  20fb6c:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  20fb70:	e0bfff17 	ldw	r2,-4(fp)
  20fb74:	10800717 	ldw	r2,28(r2)
  20fb78:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
  20fb7c:	e0bffb17 	ldw	r2,-20(fp)
  20fb80:	10800117 	ldw	r2,4(r2)
  20fb84:	10800044 	addi	r2,r2,1
  20fb88:	0149c404 	movi	r5,10000
  20fb8c:	1009883a 	mov	r4,r2
  20fb90:	02017a80 	call	2017a8 <__mulsi3>
  20fb94:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
  20fb98:	e0bffd04 	addi	r2,fp,-12
  20fb9c:	100b883a 	mov	r5,r2
  20fba0:	e13fff17 	ldw	r4,-4(fp)
  20fba4:	02109f00 	call	2109f0 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
  20fba8:	e0bffd17 	ldw	r2,-12(fp)
  20fbac:	100b883a 	mov	r5,r2
  20fbb0:	e13fff17 	ldw	r4,-4(fp)
  20fbb4:	02109240 	call	210924 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  20fbb8:	e0bffc04 	addi	r2,fp,-16
  20fbbc:	100b883a 	mov	r5,r2
  20fbc0:	e13fff17 	ldw	r4,-4(fp)
  20fbc4:	020fac00 	call	20fac0 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
  20fbc8:	e0bffc17 	ldw	r2,-16(fp)
  20fbcc:	10002226 	beq	r2,zero,20fc58 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
  20fbd0:	e0bffb17 	ldw	r2,-20(fp)
  20fbd4:	10800217 	ldw	r2,8(r2)
  20fbd8:	10001d26 	beq	r2,zero,20fc50 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  20fbdc:	00000d06 	br	20fc14 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
  20fbe0:	e0bffa17 	ldw	r2,-24(fp)
  20fbe4:	108002a8 	cmpgeui	r2,r2,10
  20fbe8:	1000021e 	bne	r2,zero,20fbf4 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
  20fbec:	0109c404 	movi	r4,10000
  20fbf0:	02127600 	call	212760 <alt_busy_sleep>
              if (--timeout == 0)
  20fbf4:	e0bffa17 	ldw	r2,-24(fp)
  20fbf8:	10bfffc4 	addi	r2,r2,-1
  20fbfc:	e0bffa15 	stw	r2,-24(fp)
  20fc00:	e0bffa17 	ldw	r2,-24(fp)
  20fc04:	1000031e 	bne	r2,zero,20fc14 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
  20fc08:	00bfff84 	movi	r2,-2
  20fc0c:	e0bffc15 	stw	r2,-16(fp)
                 break;
  20fc10:	00000306 	br	20fc20 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  20fc14:	e13fff17 	ldw	r4,-4(fp)
  20fc18:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  20fc1c:	103ff01e 	bne	r2,zero,20fbe0 <_gp+0xffdfdffc>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
  20fc20:	e0bffb17 	ldw	r2,-20(fp)
  20fc24:	10800017 	ldw	r2,0(r2)
  20fc28:	e0fffe04 	addi	r3,fp,-8
  20fc2c:	180f883a 	mov	r7,r3
  20fc30:	000d883a 	mov	r6,zero
  20fc34:	100b883a 	mov	r5,r2
  20fc38:	e13fff17 	ldw	r4,-4(fp)
  20fc3c:	020f7300 	call	20f730 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
  20fc40:	e13fff17 	ldw	r4,-4(fp)
  20fc44:	020f3940 	call	20f394 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
  20fc48:	e0bffb17 	ldw	r2,-20(fp)
  20fc4c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
  20fc50:	e0bffc17 	ldw	r2,-16(fp)
  20fc54:	00000a06 	br	20fc80 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
  20fc58:	e0bffb17 	ldw	r2,-20(fp)
  20fc5c:	10800217 	ldw	r2,8(r2)
  20fc60:	10000626 	beq	r2,zero,20fc7c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
  20fc64:	e0bffd17 	ldw	r2,-12(fp)
  20fc68:	100b883a 	mov	r5,r2
  20fc6c:	e13fff17 	ldw	r4,-4(fp)
  20fc70:	021098c0 	call	21098c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
  20fc74:	00bffe44 	movi	r2,-7
  20fc78:	00000106 	br	20fc80 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
  20fc7c:	0005883a 	mov	r2,zero
}
  20fc80:	e037883a 	mov	sp,fp
  20fc84:	dfc00117 	ldw	ra,4(sp)
  20fc88:	df000017 	ldw	fp,0(sp)
  20fc8c:	dec00204 	addi	sp,sp,8
  20fc90:	f800283a 	ret

0020fc94 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  20fc94:	defff704 	addi	sp,sp,-36
  20fc98:	dfc00815 	stw	ra,32(sp)
  20fc9c:	df000715 	stw	fp,28(sp)
  20fca0:	df000704 	addi	fp,sp,28
  20fca4:	e13ffc15 	stw	r4,-16(fp)
  20fca8:	e17ffd15 	stw	r5,-12(fp)
  20fcac:	e1bffe15 	stw	r6,-8(fp)
  20fcb0:	3805883a 	mov	r2,r7
  20fcb4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fcb8:	0089c404 	movi	r2,10000
  20fcbc:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
  20fcc0:	00002206 	br	20fd4c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
  20fcc4:	e0bffb17 	ldw	r2,-20(fp)
  20fcc8:	108002a8 	cmpgeui	r2,r2,10
  20fccc:	1000021e 	bne	r2,zero,20fcd8 <alt_avalon_i2c_master_tx+0x44>
  20fcd0:	0109c404 	movi	r4,10000
  20fcd4:	02127600 	call	212760 <alt_busy_sleep>
      if (use_interrupts)
  20fcd8:	e0bfff03 	ldbu	r2,-4(fp)
  20fcdc:	10000926 	beq	r2,zero,20fd04 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
  20fce0:	00800044 	movi	r2,1
  20fce4:	d8800015 	stw	r2,0(sp)
  20fce8:	000f883a 	mov	r7,zero
  20fcec:	e1bffe17 	ldw	r6,-8(fp)
  20fcf0:	e17ffd17 	ldw	r5,-12(fp)
  20fcf4:	e13ffc17 	ldw	r4,-16(fp)
  20fcf8:	02102400 	call	210240 <alt_avalon_i2c_master_transmit_using_interrupts>
  20fcfc:	e0bffa15 	stw	r2,-24(fp)
  20fd00:	00000806 	br	20fd24 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
  20fd04:	00800044 	movi	r2,1
  20fd08:	d8800015 	stw	r2,0(sp)
  20fd0c:	000f883a 	mov	r7,zero
  20fd10:	e1bffe17 	ldw	r6,-8(fp)
  20fd14:	e17ffd17 	ldw	r5,-12(fp)
  20fd18:	e13ffc17 	ldw	r4,-16(fp)
  20fd1c:	02100800 	call	210080 <alt_avalon_i2c_master_transmit>
  20fd20:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fd24:	e0bffa17 	ldw	r2,-24(fp)
  20fd28:	10bffea0 	cmpeqi	r2,r2,-6
  20fd2c:	1000061e 	bne	r2,zero,20fd48 <alt_avalon_i2c_master_tx+0xb4>
  20fd30:	e0bffa17 	ldw	r2,-24(fp)
  20fd34:	10bffee0 	cmpeqi	r2,r2,-5
  20fd38:	1000031e 	bne	r2,zero,20fd48 <alt_avalon_i2c_master_tx+0xb4>
  20fd3c:	e0bffa17 	ldw	r2,-24(fp)
  20fd40:	10bffe58 	cmpnei	r2,r2,-7
  20fd44:	1000061e 	bne	r2,zero,20fd60 <alt_avalon_i2c_master_tx+0xcc>
  20fd48:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
  20fd4c:	e0bffb17 	ldw	r2,-20(fp)
  20fd50:	10ffffc4 	addi	r3,r2,-1
  20fd54:	e0fffb15 	stw	r3,-20(fp)
  20fd58:	103fda1e 	bne	r2,zero,20fcc4 <_gp+0xffdfe0e0>
  20fd5c:	00000106 	br	20fd64 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
  20fd60:	0001883a 	nop
    }

    return status;
  20fd64:	e0bffa17 	ldw	r2,-24(fp)
}        
  20fd68:	e037883a 	mov	sp,fp
  20fd6c:	dfc00117 	ldw	ra,4(sp)
  20fd70:	df000017 	ldw	fp,0(sp)
  20fd74:	dec00204 	addi	sp,sp,8
  20fd78:	f800283a 	ret

0020fd7c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  20fd7c:	defff704 	addi	sp,sp,-36
  20fd80:	dfc00815 	stw	ra,32(sp)
  20fd84:	df000715 	stw	fp,28(sp)
  20fd88:	df000704 	addi	fp,sp,28
  20fd8c:	e13ffc15 	stw	r4,-16(fp)
  20fd90:	e17ffd15 	stw	r5,-12(fp)
  20fd94:	e1bffe15 	stw	r6,-8(fp)
  20fd98:	3805883a 	mov	r2,r7
  20fd9c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fda0:	0089c404 	movi	r2,10000
  20fda4:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
  20fda8:	e0bfff03 	ldbu	r2,-4(fp)
  20fdac:	10003426 	beq	r2,zero,20fe80 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
  20fdb0:	00001706 	br	20fe10 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fdb4:	e0bffb17 	ldw	r2,-20(fp)
  20fdb8:	108002a8 	cmpgeui	r2,r2,10
  20fdbc:	1000021e 	bne	r2,zero,20fdc8 <alt_avalon_i2c_master_rx+0x4c>
  20fdc0:	0109c404 	movi	r4,10000
  20fdc4:	02127600 	call	212760 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  20fdc8:	00800044 	movi	r2,1
  20fdcc:	d8800015 	stw	r2,0(sp)
  20fdd0:	000f883a 	mov	r7,zero
  20fdd4:	e1bffe17 	ldw	r6,-8(fp)
  20fdd8:	e17ffd17 	ldw	r5,-12(fp)
  20fddc:	e13ffc17 	ldw	r4,-16(fp)
  20fde0:	021065c0 	call	21065c <alt_avalon_i2c_master_receive_using_interrupts>
  20fde4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fde8:	e0bffa17 	ldw	r2,-24(fp)
  20fdec:	10bffea0 	cmpeqi	r2,r2,-6
  20fdf0:	1000061e 	bne	r2,zero,20fe0c <alt_avalon_i2c_master_rx+0x90>
  20fdf4:	e0bffa17 	ldw	r2,-24(fp)
  20fdf8:	10bffee0 	cmpeqi	r2,r2,-5
  20fdfc:	1000031e 	bne	r2,zero,20fe0c <alt_avalon_i2c_master_rx+0x90>
  20fe00:	e0bffa17 	ldw	r2,-24(fp)
  20fe04:	10bffe58 	cmpnei	r2,r2,-7
  20fe08:	1000221e 	bne	r2,zero,20fe94 <alt_avalon_i2c_master_rx+0x118>
  20fe0c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
  20fe10:	e0bffb17 	ldw	r2,-20(fp)
  20fe14:	10ffffc4 	addi	r3,r2,-1
  20fe18:	e0fffb15 	stw	r3,-20(fp)
  20fe1c:	103fe51e 	bne	r2,zero,20fdb4 <_gp+0xffdfe1d0>
  20fe20:	00001f06 	br	20fea0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fe24:	e0bffb17 	ldw	r2,-20(fp)
  20fe28:	108002a8 	cmpgeui	r2,r2,10
  20fe2c:	1000021e 	bne	r2,zero,20fe38 <alt_avalon_i2c_master_rx+0xbc>
  20fe30:	0109c404 	movi	r4,10000
  20fe34:	02127600 	call	212760 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  20fe38:	00800044 	movi	r2,1
  20fe3c:	d8800015 	stw	r2,0(sp)
  20fe40:	000f883a 	mov	r7,zero
  20fe44:	e1bffe17 	ldw	r6,-8(fp)
  20fe48:	e17ffd17 	ldw	r5,-12(fp)
  20fe4c:	e13ffc17 	ldw	r4,-16(fp)
  20fe50:	021044c0 	call	21044c <alt_avalon_i2c_master_receive>
  20fe54:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fe58:	e0bffa17 	ldw	r2,-24(fp)
  20fe5c:	10bffea0 	cmpeqi	r2,r2,-6
  20fe60:	1000061e 	bne	r2,zero,20fe7c <alt_avalon_i2c_master_rx+0x100>
  20fe64:	e0bffa17 	ldw	r2,-24(fp)
  20fe68:	10bffee0 	cmpeqi	r2,r2,-5
  20fe6c:	1000031e 	bne	r2,zero,20fe7c <alt_avalon_i2c_master_rx+0x100>
  20fe70:	e0bffa17 	ldw	r2,-24(fp)
  20fe74:	10bffe58 	cmpnei	r2,r2,-7
  20fe78:	1000081e 	bne	r2,zero,20fe9c <alt_avalon_i2c_master_rx+0x120>
  20fe7c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
  20fe80:	e0bffb17 	ldw	r2,-20(fp)
  20fe84:	10ffffc4 	addi	r3,r2,-1
  20fe88:	e0fffb15 	stw	r3,-20(fp)
  20fe8c:	103fe51e 	bne	r2,zero,20fe24 <_gp+0xffdfe240>
  20fe90:	00000306 	br	20fea0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  20fe94:	0001883a 	nop
  20fe98:	00000106 	br	20fea0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  20fe9c:	0001883a 	nop
      }
    }
    
    return status;
  20fea0:	e0bffa17 	ldw	r2,-24(fp)
}        
  20fea4:	e037883a 	mov	sp,fp
  20fea8:	dfc00117 	ldw	ra,4(sp)
  20feac:	df000017 	ldw	fp,0(sp)
  20feb0:	dec00204 	addi	sp,sp,8
  20feb4:	f800283a 	ret

0020feb8 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
  20feb8:	defff604 	addi	sp,sp,-40
  20febc:	dfc00915 	stw	ra,36(sp)
  20fec0:	df000815 	stw	fp,32(sp)
  20fec4:	df000804 	addi	fp,sp,32
  20fec8:	e13ffb15 	stw	r4,-20(fp)
  20fecc:	e17ffc15 	stw	r5,-16(fp)
  20fed0:	e1bffd15 	stw	r6,-12(fp)
  20fed4:	e1fffe15 	stw	r7,-8(fp)
  20fed8:	e0800317 	ldw	r2,12(fp)
  20fedc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fee0:	0089c404 	movi	r2,10000
  20fee4:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
  20fee8:	e0bfff03 	ldbu	r2,-4(fp)
  20feec:	10005626 	beq	r2,zero,210048 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
  20fef0:	00002806 	br	20ff94 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fef4:	e0bffa17 	ldw	r2,-24(fp)
  20fef8:	108002a8 	cmpgeui	r2,r2,10
  20fefc:	1000021e 	bne	r2,zero,20ff08 <alt_avalon_i2c_master_tx_rx+0x50>
  20ff00:	0109c404 	movi	r4,10000
  20ff04:	02127600 	call	212760 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  20ff08:	d8000015 	stw	zero,0(sp)
  20ff0c:	000f883a 	mov	r7,zero
  20ff10:	e1bffd17 	ldw	r6,-12(fp)
  20ff14:	e17ffc17 	ldw	r5,-16(fp)
  20ff18:	e13ffb17 	ldw	r4,-20(fp)
  20ff1c:	02102400 	call	210240 <alt_avalon_i2c_master_transmit_using_interrupts>
  20ff20:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ff24:	e0bff917 	ldw	r2,-28(fp)
  20ff28:	10bffea0 	cmpeqi	r2,r2,-6
  20ff2c:	1000191e 	bne	r2,zero,20ff94 <alt_avalon_i2c_master_tx_rx+0xdc>
  20ff30:	e0bff917 	ldw	r2,-28(fp)
  20ff34:	10bffee0 	cmpeqi	r2,r2,-5
  20ff38:	1000161e 	bne	r2,zero,20ff94 <alt_avalon_i2c_master_tx_rx+0xdc>
  20ff3c:	e0bff917 	ldw	r2,-28(fp)
  20ff40:	10bffe58 	cmpnei	r2,r2,-7
  20ff44:	1000011e 	bne	r2,zero,20ff4c <alt_avalon_i2c_master_tx_rx+0x94>
  20ff48:	00001206 	br	20ff94 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  20ff4c:	00800044 	movi	r2,1
  20ff50:	d8800015 	stw	r2,0(sp)
  20ff54:	01c00044 	movi	r7,1
  20ff58:	e1800217 	ldw	r6,8(fp)
  20ff5c:	e17ffe17 	ldw	r5,-8(fp)
  20ff60:	e13ffb17 	ldw	r4,-20(fp)
  20ff64:	021065c0 	call	21065c <alt_avalon_i2c_master_receive_using_interrupts>
  20ff68:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ff6c:	e0bff917 	ldw	r2,-28(fp)
  20ff70:	10bffea0 	cmpeqi	r2,r2,-6
  20ff74:	1000061e 	bne	r2,zero,20ff90 <alt_avalon_i2c_master_tx_rx+0xd8>
  20ff78:	e0bff917 	ldw	r2,-28(fp)
  20ff7c:	10bffee0 	cmpeqi	r2,r2,-5
  20ff80:	1000031e 	bne	r2,zero,20ff90 <alt_avalon_i2c_master_tx_rx+0xd8>
  20ff84:	e0bff917 	ldw	r2,-28(fp)
  20ff88:	10bffe58 	cmpnei	r2,r2,-7
  20ff8c:	1000331e 	bne	r2,zero,21005c <alt_avalon_i2c_master_tx_rx+0x1a4>
  20ff90:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
  20ff94:	e0bffa17 	ldw	r2,-24(fp)
  20ff98:	10ffffc4 	addi	r3,r2,-1
  20ff9c:	e0fffa15 	stw	r3,-24(fp)
  20ffa0:	103fd41e 	bne	r2,zero,20fef4 <_gp+0xffdfe310>
  20ffa4:	00003006 	br	210068 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  20ffa8:	e0bffa17 	ldw	r2,-24(fp)
  20ffac:	108002a8 	cmpgeui	r2,r2,10
  20ffb0:	1000021e 	bne	r2,zero,20ffbc <alt_avalon_i2c_master_tx_rx+0x104>
  20ffb4:	0109c404 	movi	r4,10000
  20ffb8:	02127600 	call	212760 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  20ffbc:	d8000015 	stw	zero,0(sp)
  20ffc0:	000f883a 	mov	r7,zero
  20ffc4:	e1bffd17 	ldw	r6,-12(fp)
  20ffc8:	e17ffc17 	ldw	r5,-16(fp)
  20ffcc:	e13ffb17 	ldw	r4,-20(fp)
  20ffd0:	02100800 	call	210080 <alt_avalon_i2c_master_transmit>
  20ffd4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ffd8:	e0bff917 	ldw	r2,-28(fp)
  20ffdc:	10bffea0 	cmpeqi	r2,r2,-6
  20ffe0:	1000191e 	bne	r2,zero,210048 <alt_avalon_i2c_master_tx_rx+0x190>
  20ffe4:	e0bff917 	ldw	r2,-28(fp)
  20ffe8:	10bffee0 	cmpeqi	r2,r2,-5
  20ffec:	1000161e 	bne	r2,zero,210048 <alt_avalon_i2c_master_tx_rx+0x190>
  20fff0:	e0bff917 	ldw	r2,-28(fp)
  20fff4:	10bffe58 	cmpnei	r2,r2,-7
  20fff8:	1000011e 	bne	r2,zero,210000 <alt_avalon_i2c_master_tx_rx+0x148>
  20fffc:	00001206 	br	210048 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  210000:	00800044 	movi	r2,1
  210004:	d8800015 	stw	r2,0(sp)
  210008:	01c00044 	movi	r7,1
  21000c:	e1800217 	ldw	r6,8(fp)
  210010:	e17ffe17 	ldw	r5,-8(fp)
  210014:	e13ffb17 	ldw	r4,-20(fp)
  210018:	021044c0 	call	21044c <alt_avalon_i2c_master_receive>
  21001c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  210020:	e0bff917 	ldw	r2,-28(fp)
  210024:	10bffea0 	cmpeqi	r2,r2,-6
  210028:	1000061e 	bne	r2,zero,210044 <alt_avalon_i2c_master_tx_rx+0x18c>
  21002c:	e0bff917 	ldw	r2,-28(fp)
  210030:	10bffee0 	cmpeqi	r2,r2,-5
  210034:	1000031e 	bne	r2,zero,210044 <alt_avalon_i2c_master_tx_rx+0x18c>
  210038:	e0bff917 	ldw	r2,-28(fp)
  21003c:	10bffe58 	cmpnei	r2,r2,-7
  210040:	1000081e 	bne	r2,zero,210064 <alt_avalon_i2c_master_tx_rx+0x1ac>
  210044:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
  210048:	e0bffa17 	ldw	r2,-24(fp)
  21004c:	10ffffc4 	addi	r3,r2,-1
  210050:	e0fffa15 	stw	r3,-24(fp)
  210054:	103fd41e 	bne	r2,zero,20ffa8 <_gp+0xffdfe3c4>
  210058:	00000306 	br	210068 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  21005c:	0001883a 	nop
  210060:	00000106 	br	210068 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  210064:	0001883a 	nop
      }
    }
    
    return status;
  210068:	e0bff917 	ldw	r2,-28(fp)
}                                       
  21006c:	e037883a 	mov	sp,fp
  210070:	dfc00117 	ldw	ra,4(sp)
  210074:	df000017 	ldw	fp,0(sp)
  210078:	dec00204 	addi	sp,sp,8
  21007c:	f800283a 	ret

00210080 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  210080:	defff704 	addi	sp,sp,-36
  210084:	dfc00815 	stw	ra,32(sp)
  210088:	df000715 	stw	fp,28(sp)
  21008c:	df000704 	addi	fp,sp,28
  210090:	e13ffb15 	stw	r4,-20(fp)
  210094:	e17ffc15 	stw	r5,-16(fp)
  210098:	e1bffd15 	stw	r6,-12(fp)
  21009c:	3807883a 	mov	r3,r7
  2100a0:	e0800217 	ldw	r2,8(fp)
  2100a4:	e0fffe05 	stb	r3,-8(fp)
  2100a8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  2100ac:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
  2100b0:	0149c404 	movi	r5,10000
  2100b4:	e13ffd17 	ldw	r4,-12(fp)
  2100b8:	02017a80 	call	2017a8 <__mulsi3>
  2100bc:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
  2100c0:	e0bffd17 	ldw	r2,-12(fp)
  2100c4:	1000021e 	bne	r2,zero,2100d0 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  2100c8:	0005883a 	mov	r2,zero
  2100cc:	00005706 	br	21022c <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2100d0:	e0bffe03 	ldbu	r2,-8(fp)
  2100d4:	10000a1e 	bne	r2,zero,210100 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2100d8:	e13ffb17 	ldw	r4,-20(fp)
  2100dc:	020f2fc0 	call	20f2fc <alt_avalon_i2c_enable>
  2100e0:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2100e4:	e0bffa17 	ldw	r2,-24(fp)
  2100e8:	10000226 	beq	r2,zero,2100f4 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
  2100ec:	e0bffa17 	ldw	r2,-24(fp)
  2100f0:	00004e06 	br	21022c <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2100f4:	01400704 	movi	r5,28
  2100f8:	e13ffb17 	ldw	r4,-20(fp)
  2100fc:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  210100:	e0bffe03 	ldbu	r2,-8(fp)
  210104:	100d883a 	mov	r6,r2
  210108:	000b883a 	mov	r5,zero
  21010c:	e13ffb17 	ldw	r4,-20(fp)
  210110:	020f9640 	call	20f964 <alt_avalon_i2c_send_address>
  210114:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
  210118:	e0bffa17 	ldw	r2,-24(fp)
  21011c:	1000271e 	bne	r2,zero,2101bc <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210120:	00000f06 	br	210160 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  210124:	e0bffc17 	ldw	r2,-16(fp)
  210128:	10800003 	ldbu	r2,0(r2)
  21012c:	10803fcc 	andi	r2,r2,255
  210130:	000f883a 	mov	r7,zero
  210134:	000d883a 	mov	r6,zero
  210138:	100b883a 	mov	r5,r2
  21013c:	e13ffb17 	ldw	r4,-20(fp)
  210140:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  210144:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
  210148:	e0bffc17 	ldw	r2,-16(fp)
  21014c:	10800044 	addi	r2,r2,1
  210150:	e0bffc15 	stw	r2,-16(fp)
            --size;
  210154:	e0bffd17 	ldw	r2,-12(fp)
  210158:	10bfffc4 	addi	r2,r2,-1
  21015c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210160:	e0bffd17 	ldw	r2,-12(fp)
  210164:	108000b0 	cmpltui	r2,r2,2
  210168:	1000021e 	bne	r2,zero,210174 <alt_avalon_i2c_master_transmit+0xf4>
  21016c:	e0bffa17 	ldw	r2,-24(fp)
  210170:	103fec26 	beq	r2,zero,210124 <_gp+0xffdfe540>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210174:	e0bffa17 	ldw	r2,-24(fp)
  210178:	1000101e 	bne	r2,zero,2101bc <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  21017c:	e0bffc17 	ldw	r2,-16(fp)
  210180:	10800003 	ldbu	r2,0(r2)
  210184:	10803fcc 	andi	r2,r2,255
  210188:	e0ffff03 	ldbu	r3,-4(fp)
  21018c:	180f883a 	mov	r7,r3
  210190:	000d883a 	mov	r6,zero
  210194:	100b883a 	mov	r5,r2
  210198:	e13ffb17 	ldw	r4,-20(fp)
  21019c:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  2101a0:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
  2101a4:	e0bffc17 	ldw	r2,-16(fp)
  2101a8:	10800044 	addi	r2,r2,1
  2101ac:	e0bffc15 	stw	r2,-16(fp)
            --size;
  2101b0:	e0bffd17 	ldw	r2,-12(fp)
  2101b4:	10bfffc4 	addi	r2,r2,-1
  2101b8:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  2101bc:	e0bfff03 	ldbu	r2,-4(fp)
  2101c0:	1000101e 	bne	r2,zero,210204 <alt_avalon_i2c_master_transmit+0x184>
  2101c4:	e0bffa17 	ldw	r2,-24(fp)
  2101c8:	10001726 	beq	r2,zero,210228 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2101cc:	00000d06 	br	210204 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
  2101d0:	e0bff917 	ldw	r2,-28(fp)
  2101d4:	108002a8 	cmpgeui	r2,r2,10
  2101d8:	1000021e 	bne	r2,zero,2101e4 <alt_avalon_i2c_master_transmit+0x164>
  2101dc:	0109c404 	movi	r4,10000
  2101e0:	02127600 	call	212760 <alt_busy_sleep>
            if (--timeout == 0)
  2101e4:	e0bff917 	ldw	r2,-28(fp)
  2101e8:	10bfffc4 	addi	r2,r2,-1
  2101ec:	e0bff915 	stw	r2,-28(fp)
  2101f0:	e0bff917 	ldw	r2,-28(fp)
  2101f4:	1000031e 	bne	r2,zero,210204 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2101f8:	00bfff84 	movi	r2,-2
  2101fc:	e0bffa15 	stw	r2,-24(fp)
               break;
  210200:	00000306 	br	210210 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  210204:	e13ffb17 	ldw	r4,-20(fp)
  210208:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  21020c:	103ff01e 	bne	r2,zero,2101d0 <_gp+0xffdfe5ec>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
  210210:	e0bffa04 	addi	r2,fp,-24
  210214:	100b883a 	mov	r5,r2
  210218:	e13ffb17 	ldw	r4,-20(fp)
  21021c:	020fac00 	call	20fac0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  210220:	e13ffb17 	ldw	r4,-20(fp)
  210224:	020f3940 	call	20f394 <alt_avalon_i2c_disable>
    }


    return status;
  210228:	e0bffa17 	ldw	r2,-24(fp)
}
  21022c:	e037883a 	mov	sp,fp
  210230:	dfc00117 	ldw	ra,4(sp)
  210234:	df000017 	ldw	fp,0(sp)
  210238:	dec00204 	addi	sp,sp,8
  21023c:	f800283a 	ret

00210240 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  210240:	defff604 	addi	sp,sp,-40
  210244:	dfc00915 	stw	ra,36(sp)
  210248:	df000815 	stw	fp,32(sp)
  21024c:	df000804 	addi	fp,sp,32
  210250:	e13ffb15 	stw	r4,-20(fp)
  210254:	e17ffc15 	stw	r5,-16(fp)
  210258:	e1bffd15 	stw	r6,-12(fp)
  21025c:	3807883a 	mov	r3,r7
  210260:	e0800217 	ldw	r2,8(fp)
  210264:	e0fffe05 	stb	r3,-8(fp)
  210268:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  21026c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
  210270:	0149c404 	movi	r5,10000
  210274:	e13ffd17 	ldw	r4,-12(fp)
  210278:	02017a80 	call	2017a8 <__mulsi3>
  21027c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  210280:	e0bffb17 	ldw	r2,-20(fp)
  210284:	10800717 	ldw	r2,28(r2)
  210288:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
  21028c:	e0bffd17 	ldw	r2,-12(fp)
  210290:	1000021e 	bne	r2,zero,21029c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
  210294:	0005883a 	mov	r2,zero
  210298:	00006706 	br	210438 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  21029c:	e0bffb17 	ldw	r2,-20(fp)
  2102a0:	10c00617 	ldw	r3,24(r2)
  2102a4:	00800874 	movhi	r2,33
  2102a8:	10bbe004 	addi	r2,r2,-4224
  2102ac:	18800226 	beq	r3,r2,2102b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  2102b0:	00bfff44 	movi	r2,-3
  2102b4:	00006006 	br	210438 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2102b8:	e0bffe03 	ldbu	r2,-8(fp)
  2102bc:	10000a1e 	bne	r2,zero,2102e8 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2102c0:	e13ffb17 	ldw	r4,-20(fp)
  2102c4:	020f2fc0 	call	20f2fc <alt_avalon_i2c_enable>
  2102c8:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2102cc:	e0bff817 	ldw	r2,-32(fp)
  2102d0:	10000226 	beq	r2,zero,2102dc <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
  2102d4:	e0bff817 	ldw	r2,-32(fp)
  2102d8:	00005706 	br	210438 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2102dc:	01400704 	movi	r5,28
  2102e0:	e13ffb17 	ldw	r4,-20(fp)
  2102e4:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  2102e8:	e0bffe03 	ldbu	r2,-8(fp)
  2102ec:	100d883a 	mov	r6,r2
  2102f0:	000b883a 	mov	r5,zero
  2102f4:	e13ffb17 	ldw	r4,-20(fp)
  2102f8:	020f9640 	call	20f964 <alt_avalon_i2c_send_address>
  2102fc:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
  210300:	e0bff817 	ldw	r2,-32(fp)
  210304:	1000271e 	bne	r2,zero,2103a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210308:	00000f06 	br	210348 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  21030c:	e0bffc17 	ldw	r2,-16(fp)
  210310:	10800003 	ldbu	r2,0(r2)
  210314:	10803fcc 	andi	r2,r2,255
  210318:	000f883a 	mov	r7,zero
  21031c:	000d883a 	mov	r6,zero
  210320:	100b883a 	mov	r5,r2
  210324:	e13ffb17 	ldw	r4,-20(fp)
  210328:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  21032c:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
  210330:	e0bffc17 	ldw	r2,-16(fp)
  210334:	10800044 	addi	r2,r2,1
  210338:	e0bffc15 	stw	r2,-16(fp)
            --size;
  21033c:	e0bffd17 	ldw	r2,-12(fp)
  210340:	10bfffc4 	addi	r2,r2,-1
  210344:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210348:	e0bffd17 	ldw	r2,-12(fp)
  21034c:	108000b0 	cmpltui	r2,r2,2
  210350:	1000021e 	bne	r2,zero,21035c <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
  210354:	e0bff817 	ldw	r2,-32(fp)
  210358:	103fec26 	beq	r2,zero,21030c <_gp+0xffdfe728>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  21035c:	e0bff817 	ldw	r2,-32(fp)
  210360:	1000101e 	bne	r2,zero,2103a4 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210364:	e0bffc17 	ldw	r2,-16(fp)
  210368:	10800003 	ldbu	r2,0(r2)
  21036c:	10803fcc 	andi	r2,r2,255
  210370:	e0ffff03 	ldbu	r3,-4(fp)
  210374:	180f883a 	mov	r7,r3
  210378:	000d883a 	mov	r6,zero
  21037c:	100b883a 	mov	r5,r2
  210380:	e13ffb17 	ldw	r4,-20(fp)
  210384:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  210388:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
  21038c:	e0bffc17 	ldw	r2,-16(fp)
  210390:	10800044 	addi	r2,r2,1
  210394:	e0bffc15 	stw	r2,-16(fp)
            --size;
  210398:	e0bffd17 	ldw	r2,-12(fp)
  21039c:	10bfffc4 	addi	r2,r2,-1
  2103a0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  2103a4:	e0bff817 	ldw	r2,-32(fp)
  2103a8:	10001426 	beq	r2,zero,2103fc <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2103ac:	00000d06 	br	2103e4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
  2103b0:	e0bff917 	ldw	r2,-28(fp)
  2103b4:	108002a8 	cmpgeui	r2,r2,10
  2103b8:	1000021e 	bne	r2,zero,2103c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
  2103bc:	0109c404 	movi	r4,10000
  2103c0:	02127600 	call	212760 <alt_busy_sleep>
            if (--timeout == 0)
  2103c4:	e0bff917 	ldw	r2,-28(fp)
  2103c8:	10bfffc4 	addi	r2,r2,-1
  2103cc:	e0bff915 	stw	r2,-28(fp)
  2103d0:	e0bff917 	ldw	r2,-28(fp)
  2103d4:	1000031e 	bne	r2,zero,2103e4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2103d8:	00bfff84 	movi	r2,-2
  2103dc:	e0bff815 	stw	r2,-32(fp)
               break;
  2103e0:	00000306 	br	2103f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2103e4:	e13ffb17 	ldw	r4,-20(fp)
  2103e8:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  2103ec:	103ff01e 	bne	r2,zero,2103b0 <_gp+0xffdfe7cc>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  2103f0:	e13ffb17 	ldw	r4,-20(fp)
  2103f4:	020f3940 	call	20f394 <alt_avalon_i2c_disable>
  2103f8:	00000e06 	br	210434 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
  2103fc:	e0bfff03 	ldbu	r2,-4(fp)
  210400:	10000c26 	beq	r2,zero,210434 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  210404:	01400704 	movi	r5,28
  210408:	e13ffb17 	ldw	r4,-20(fp)
  21040c:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
  210410:	000b883a 	mov	r5,zero
  210414:	e13ffb17 	ldw	r4,-20(fp)
  210418:	0210b300 	call	210b30 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
  21041c:	e0bffa17 	ldw	r2,-24(fp)
  210420:	00c00044 	movi	r3,1
  210424:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
  210428:	01400044 	movi	r5,1
  21042c:	e13ffb17 	ldw	r4,-20(fp)
  210430:	021098c0 	call	21098c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
  210434:	e0bff817 	ldw	r2,-32(fp)
}
  210438:	e037883a 	mov	sp,fp
  21043c:	dfc00117 	ldw	ra,4(sp)
  210440:	df000017 	ldw	fp,0(sp)
  210444:	dec00204 	addi	sp,sp,8
  210448:	f800283a 	ret

0021044c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  21044c:	defff404 	addi	sp,sp,-48
  210450:	dfc00b15 	stw	ra,44(sp)
  210454:	df000a15 	stw	fp,40(sp)
  210458:	df000a04 	addi	fp,sp,40
  21045c:	e13ffb15 	stw	r4,-20(fp)
  210460:	e17ffc15 	stw	r5,-16(fp)
  210464:	e1bffd15 	stw	r6,-12(fp)
  210468:	3807883a 	mov	r3,r7
  21046c:	e0800217 	ldw	r2,8(fp)
  210470:	e0fffe05 	stb	r3,-8(fp)
  210474:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  210478:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
  21047c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
  210480:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
  210484:	e0bffd17 	ldw	r2,-12(fp)
  210488:	1000021e 	bne	r2,zero,210494 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
  21048c:	0005883a 	mov	r2,zero
  210490:	00006d06 	br	210648 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  210494:	e0bffe03 	ldbu	r2,-8(fp)
  210498:	10000a1e 	bne	r2,zero,2104c4 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  21049c:	e13ffb17 	ldw	r4,-20(fp)
  2104a0:	020f2fc0 	call	20f2fc <alt_avalon_i2c_enable>
  2104a4:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2104a8:	e0bff917 	ldw	r2,-28(fp)
  2104ac:	10000226 	beq	r2,zero,2104b8 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
  2104b0:	e0bff917 	ldw	r2,-28(fp)
  2104b4:	00006406 	br	210648 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2104b8:	01400704 	movi	r5,28
  2104bc:	e13ffb17 	ldw	r4,-20(fp)
  2104c0:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  2104c4:	e0bffe03 	ldbu	r2,-8(fp)
  2104c8:	100d883a 	mov	r6,r2
  2104cc:	01400044 	movi	r5,1
  2104d0:	e13ffb17 	ldw	r4,-20(fp)
  2104d4:	020f9640 	call	20f964 <alt_avalon_i2c_send_address>
  2104d8:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  2104dc:	e0bff917 	ldw	r2,-28(fp)
  2104e0:	1000341e 	bne	r2,zero,2105b4 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2104e4:	00001906 	br	21054c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  2104e8:	000f883a 	mov	r7,zero
  2104ec:	000d883a 	mov	r6,zero
  2104f0:	000b883a 	mov	r5,zero
  2104f4:	e13ffb17 	ldw	r4,-20(fp)
  2104f8:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  2104fc:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
  210500:	e0bff817 	ldw	r2,-32(fp)
  210504:	10800044 	addi	r2,r2,1
  210508:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
  21050c:	e0bff917 	ldw	r2,-28(fp)
  210510:	10000e1e 	bne	r2,zero,21054c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
  210514:	e0bffa04 	addi	r2,fp,-24
  210518:	100f883a 	mov	r7,r2
  21051c:	000d883a 	mov	r6,zero
  210520:	e17ffc17 	ldw	r5,-16(fp)
  210524:	e13ffb17 	ldw	r4,-20(fp)
  210528:	020f7300 	call	20f730 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
  21052c:	e0bffa17 	ldw	r2,-24(fp)
  210530:	e0fffc17 	ldw	r3,-16(fp)
  210534:	1885883a 	add	r2,r3,r2
  210538:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
  21053c:	e0bffa17 	ldw	r2,-24(fp)
  210540:	e0fff717 	ldw	r3,-36(fp)
  210544:	1885883a 	add	r2,r3,r2
  210548:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  21054c:	e0bffd17 	ldw	r2,-12(fp)
  210550:	10bfffc4 	addi	r2,r2,-1
  210554:	e0fff817 	ldw	r3,-32(fp)
  210558:	1880022e 	bgeu	r3,r2,210564 <alt_avalon_i2c_master_receive+0x118>
  21055c:	e0bff917 	ldw	r2,-28(fp)
  210560:	103fe126 	beq	r2,zero,2104e8 <_gp+0xffdfe904>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210564:	e0bff917 	ldw	r2,-28(fp)
  210568:	1000121e 	bne	r2,zero,2105b4 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  21056c:	e0bfff03 	ldbu	r2,-4(fp)
  210570:	100f883a 	mov	r7,r2
  210574:	000d883a 	mov	r6,zero
  210578:	000b883a 	mov	r5,zero
  21057c:	e13ffb17 	ldw	r4,-20(fp)
  210580:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  210584:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  210588:	00000a06 	br	2105b4 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
  21058c:	e17ffc17 	ldw	r5,-16(fp)
  210590:	e13ffb17 	ldw	r4,-20(fp)
  210594:	020f7d80 	call	20f7d8 <alt_avalon_i2c_rx_read>
  210598:	e0bff915 	stw	r2,-28(fp)
        buffer++;
  21059c:	e0bffc17 	ldw	r2,-16(fp)
  2105a0:	10800044 	addi	r2,r2,1
  2105a4:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
  2105a8:	e0bff717 	ldw	r2,-36(fp)
  2105ac:	10800044 	addi	r2,r2,1
  2105b0:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  2105b4:	e0fff717 	ldw	r3,-36(fp)
  2105b8:	e0bffd17 	ldw	r2,-12(fp)
  2105bc:	1880022e 	bgeu	r3,r2,2105c8 <alt_avalon_i2c_master_receive+0x17c>
  2105c0:	e0bff917 	ldw	r2,-28(fp)
  2105c4:	103ff126 	beq	r2,zero,21058c <_gp+0xffdfe9a8>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  2105c8:	e0bfff03 	ldbu	r2,-4(fp)
  2105cc:	1000021e 	bne	r2,zero,2105d8 <alt_avalon_i2c_master_receive+0x18c>
  2105d0:	e0bff917 	ldw	r2,-28(fp)
  2105d4:	10001b26 	beq	r2,zero,210644 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
  2105d8:	0149c404 	movi	r5,10000
  2105dc:	e13ffd17 	ldw	r4,-12(fp)
  2105e0:	02017a80 	call	2017a8 <__mulsi3>
  2105e4:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2105e8:	00000d06 	br	210620 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
  2105ec:	e0bff617 	ldw	r2,-40(fp)
  2105f0:	108002a8 	cmpgeui	r2,r2,10
  2105f4:	1000021e 	bne	r2,zero,210600 <alt_avalon_i2c_master_receive+0x1b4>
  2105f8:	0109c404 	movi	r4,10000
  2105fc:	02127600 	call	212760 <alt_busy_sleep>
            if (--timeout == 0)
  210600:	e0bff617 	ldw	r2,-40(fp)
  210604:	10bfffc4 	addi	r2,r2,-1
  210608:	e0bff615 	stw	r2,-40(fp)
  21060c:	e0bff617 	ldw	r2,-40(fp)
  210610:	1000031e 	bne	r2,zero,210620 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  210614:	00bfff84 	movi	r2,-2
  210618:	e0bff915 	stw	r2,-28(fp)
               break;
  21061c:	00000306 	br	21062c <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  210620:	e13ffb17 	ldw	r4,-20(fp)
  210624:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  210628:	103ff01e 	bne	r2,zero,2105ec <_gp+0xffdfea08>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
  21062c:	e0bff904 	addi	r2,fp,-28
  210630:	100b883a 	mov	r5,r2
  210634:	e13ffb17 	ldw	r4,-20(fp)
  210638:	020fac00 	call	20fac0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  21063c:	e13ffb17 	ldw	r4,-20(fp)
  210640:	020f3940 	call	20f394 <alt_avalon_i2c_disable>
    }

    return status;
  210644:	e0bff917 	ldw	r2,-28(fp)
}
  210648:	e037883a 	mov	sp,fp
  21064c:	dfc00117 	ldw	ra,4(sp)
  210650:	df000017 	ldw	fp,0(sp)
  210654:	dec00204 	addi	sp,sp,8
  210658:	f800283a 	ret

0021065c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  21065c:	defff504 	addi	sp,sp,-44
  210660:	dfc00a15 	stw	ra,40(sp)
  210664:	df000915 	stw	fp,36(sp)
  210668:	df000904 	addi	fp,sp,36
  21066c:	e13ffb15 	stw	r4,-20(fp)
  210670:	e17ffc15 	stw	r5,-16(fp)
  210674:	e1bffd15 	stw	r6,-12(fp)
  210678:	3807883a 	mov	r3,r7
  21067c:	e0800217 	ldw	r2,8(fp)
  210680:	e0fffe05 	stb	r3,-8(fp)
  210684:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  210688:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  21068c:	e0bffb17 	ldw	r2,-20(fp)
  210690:	10800717 	ldw	r2,28(r2)
  210694:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
  210698:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
  21069c:	e0bffd17 	ldw	r2,-12(fp)
  2106a0:	1000021e 	bne	r2,zero,2106ac <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  2106a4:	0005883a 	mov	r2,zero
  2106a8:	00006306 	br	210838 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  2106ac:	e0bffb17 	ldw	r2,-20(fp)
  2106b0:	10c00617 	ldw	r3,24(r2)
  2106b4:	00800874 	movhi	r2,33
  2106b8:	10bbe004 	addi	r2,r2,-4224
  2106bc:	18800226 	beq	r3,r2,2106c8 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  2106c0:	00bfff44 	movi	r2,-3
  2106c4:	00005c06 	br	210838 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2106c8:	e0bffe03 	ldbu	r2,-8(fp)
  2106cc:	10000a1e 	bne	r2,zero,2106f8 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2106d0:	e13ffb17 	ldw	r4,-20(fp)
  2106d4:	020f2fc0 	call	20f2fc <alt_avalon_i2c_enable>
  2106d8:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2106dc:	e0bff717 	ldw	r2,-36(fp)
  2106e0:	10000226 	beq	r2,zero,2106ec <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
  2106e4:	e0bff717 	ldw	r2,-36(fp)
  2106e8:	00005306 	br	210838 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2106ec:	01400704 	movi	r5,28
  2106f0:	e13ffb17 	ldw	r4,-20(fp)
  2106f4:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  2106f8:	e0bffe03 	ldbu	r2,-8(fp)
  2106fc:	100d883a 	mov	r6,r2
  210700:	01400044 	movi	r5,1
  210704:	e13ffb17 	ldw	r4,-20(fp)
  210708:	020f9640 	call	20f964 <alt_avalon_i2c_send_address>
  21070c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  210710:	e0bff717 	ldw	r2,-36(fp)
  210714:	1000191e 	bne	r2,zero,21077c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  210718:	00000906 	br	210740 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  21071c:	000f883a 	mov	r7,zero
  210720:	000d883a 	mov	r6,zero
  210724:	000b883a 	mov	r5,zero
  210728:	e13ffb17 	ldw	r4,-20(fp)
  21072c:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  210730:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
  210734:	e0bff917 	ldw	r2,-28(fp)
  210738:	10800044 	addi	r2,r2,1
  21073c:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  210740:	e0bffd17 	ldw	r2,-12(fp)
  210744:	10bfffc4 	addi	r2,r2,-1
  210748:	e0fff917 	ldw	r3,-28(fp)
  21074c:	1880022e 	bgeu	r3,r2,210758 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
  210750:	e0bff717 	ldw	r2,-36(fp)
  210754:	103ff126 	beq	r2,zero,21071c <_gp+0xffdfeb38>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210758:	e0bff717 	ldw	r2,-36(fp)
  21075c:	1000071e 	bne	r2,zero,21077c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210760:	e0bfff03 	ldbu	r2,-4(fp)
  210764:	100f883a 	mov	r7,r2
  210768:	000d883a 	mov	r6,zero
  21076c:	000b883a 	mov	r5,zero
  210770:	e13ffb17 	ldw	r4,-20(fp)
  210774:	020f8800 	call	20f880 <alt_avalon_i2c_cmd_write>
  210778:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  21077c:	e0bff717 	ldw	r2,-36(fp)
  210780:	10001826 	beq	r2,zero,2107e4 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
  210784:	0149c404 	movi	r5,10000
  210788:	e13ffd17 	ldw	r4,-12(fp)
  21078c:	02017a80 	call	2017a8 <__mulsi3>
  210790:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  210794:	00000d06 	br	2107cc <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
  210798:	e0bff817 	ldw	r2,-32(fp)
  21079c:	108002a8 	cmpgeui	r2,r2,10
  2107a0:	1000021e 	bne	r2,zero,2107ac <alt_avalon_i2c_master_receive_using_interrupts+0x150>
  2107a4:	0109c404 	movi	r4,10000
  2107a8:	02127600 	call	212760 <alt_busy_sleep>
            if (--timeout == 0)
  2107ac:	e0bff817 	ldw	r2,-32(fp)
  2107b0:	10bfffc4 	addi	r2,r2,-1
  2107b4:	e0bff815 	stw	r2,-32(fp)
  2107b8:	e0bff817 	ldw	r2,-32(fp)
  2107bc:	1000031e 	bne	r2,zero,2107cc <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2107c0:	00bfff84 	movi	r2,-2
  2107c4:	e0bff715 	stw	r2,-36(fp)
               break;
  2107c8:	00000306 	br	2107d8 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2107cc:	e13ffb17 	ldw	r4,-20(fp)
  2107d0:	020f6ec0 	call	20f6ec <alt_avalon_i2c_is_busy>
  2107d4:	103ff01e 	bne	r2,zero,210798 <_gp+0xffdfebb4>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  2107d8:	e13ffb17 	ldw	r4,-20(fp)
  2107dc:	020f3940 	call	20f394 <alt_avalon_i2c_disable>
  2107e0:	00001406 	br	210834 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
  2107e4:	e0bfff03 	ldbu	r2,-4(fp)
  2107e8:	10001226 	beq	r2,zero,210834 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2107ec:	01400704 	movi	r5,28
  2107f0:	e13ffb17 	ldw	r4,-20(fp)
  2107f4:	02108e80 	call	2108e8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
  2107f8:	000b883a 	mov	r5,zero
  2107fc:	e13ffb17 	ldw	r4,-20(fp)
  210800:	0210a800 	call	210a80 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
  210804:	e0bffa17 	ldw	r2,-24(fp)
  210808:	00c00084 	movi	r3,2
  21080c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
  210810:	e0bffa17 	ldw	r2,-24(fp)
  210814:	e0fffc17 	ldw	r3,-16(fp)
  210818:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
  21081c:	e0bffa17 	ldw	r2,-24(fp)
  210820:	e0fffd17 	ldw	r3,-12(fp)
  210824:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  210828:	01400084 	movi	r5,2
  21082c:	e13ffb17 	ldw	r4,-20(fp)
  210830:	021098c0 	call	21098c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
  210834:	e0bff717 	ldw	r2,-36(fp)
}
  210838:	e037883a 	mov	sp,fp
  21083c:	dfc00117 	ldw	ra,4(sp)
  210840:	df000017 	ldw	fp,0(sp)
  210844:	dec00204 	addi	sp,sp,8
  210848:	f800283a 	ret

0021084c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
  21084c:	defffd04 	addi	sp,sp,-12
  210850:	df000215 	stw	fp,8(sp)
  210854:	df000204 	addi	fp,sp,8
  210858:	e13ffe15 	stw	r4,-8(fp)
  21085c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
  210860:	e0bffe17 	ldw	r2,-8(fp)
  210864:	10800317 	ldw	r2,12(r2)
  210868:	10800404 	addi	r2,r2,16
  21086c:	10c00037 	ldwio	r3,0(r2)
  210870:	e0bffe17 	ldw	r2,-8(fp)
  210874:	10800317 	ldw	r2,12(r2)
  210878:	10800304 	addi	r2,r2,12
  21087c:	10800037 	ldwio	r2,0(r2)
  210880:	1884703a 	and	r2,r3,r2
  210884:	1007883a 	mov	r3,r2
  210888:	e0bfff17 	ldw	r2,-4(fp)
  21088c:	10c00015 	stw	r3,0(r2)
}
  210890:	0001883a 	nop
  210894:	e037883a 	mov	sp,fp
  210898:	df000017 	ldw	fp,0(sp)
  21089c:	dec00104 	addi	sp,sp,4
  2108a0:	f800283a 	ret

002108a4 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
  2108a4:	defffd04 	addi	sp,sp,-12
  2108a8:	df000215 	stw	fp,8(sp)
  2108ac:	df000204 	addi	fp,sp,8
  2108b0:	e13ffe15 	stw	r4,-8(fp)
  2108b4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
  2108b8:	e0bffe17 	ldw	r2,-8(fp)
  2108bc:	10800317 	ldw	r2,12(r2)
  2108c0:	10800404 	addi	r2,r2,16
  2108c4:	10800037 	ldwio	r2,0(r2)
  2108c8:	1007883a 	mov	r3,r2
  2108cc:	e0bfff17 	ldw	r2,-4(fp)
  2108d0:	10c00015 	stw	r3,0(r2)
}
  2108d4:	0001883a 	nop
  2108d8:	e037883a 	mov	sp,fp
  2108dc:	df000017 	ldw	fp,0(sp)
  2108e0:	dec00104 	addi	sp,sp,4
  2108e4:	f800283a 	ret

002108e8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  2108e8:	defffd04 	addi	sp,sp,-12
  2108ec:	df000215 	stw	fp,8(sp)
  2108f0:	df000204 	addi	fp,sp,8
  2108f4:	e13ffe15 	stw	r4,-8(fp)
  2108f8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
  2108fc:	e0bffe17 	ldw	r2,-8(fp)
  210900:	10800317 	ldw	r2,12(r2)
  210904:	10800404 	addi	r2,r2,16
  210908:	e0ffff17 	ldw	r3,-4(fp)
  21090c:	10c00035 	stwio	r3,0(r2)
}
  210910:	0001883a 	nop
  210914:	e037883a 	mov	sp,fp
  210918:	df000017 	ldw	fp,0(sp)
  21091c:	dec00104 	addi	sp,sp,4
  210920:	f800283a 	ret

00210924 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  210924:	defffb04 	addi	sp,sp,-20
  210928:	dfc00415 	stw	ra,16(sp)
  21092c:	df000315 	stw	fp,12(sp)
  210930:	df000304 	addi	fp,sp,12
  210934:	e13ffe15 	stw	r4,-8(fp)
  210938:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  21093c:	e17ffd04 	addi	r5,fp,-12
  210940:	e13ffe17 	ldw	r4,-8(fp)
  210944:	02109f00 	call	2109f0 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
  210948:	e0bfff17 	ldw	r2,-4(fp)
  21094c:	0086303a 	nor	r3,zero,r2
  210950:	e0bffd17 	ldw	r2,-12(fp)
  210954:	1884703a 	and	r2,r3,r2
  210958:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  21095c:	e0bffe17 	ldw	r2,-8(fp)
  210960:	10800317 	ldw	r2,12(r2)
  210964:	10800304 	addi	r2,r2,12
  210968:	e0fffd17 	ldw	r3,-12(fp)
  21096c:	18c007cc 	andi	r3,r3,31
  210970:	10c00035 	stwio	r3,0(r2)
}
  210974:	0001883a 	nop
  210978:	e037883a 	mov	sp,fp
  21097c:	dfc00117 	ldw	ra,4(sp)
  210980:	df000017 	ldw	fp,0(sp)
  210984:	dec00204 	addi	sp,sp,8
  210988:	f800283a 	ret

0021098c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  21098c:	defffb04 	addi	sp,sp,-20
  210990:	dfc00415 	stw	ra,16(sp)
  210994:	df000315 	stw	fp,12(sp)
  210998:	df000304 	addi	fp,sp,12
  21099c:	e13ffe15 	stw	r4,-8(fp)
  2109a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  2109a4:	e17ffd04 	addi	r5,fp,-12
  2109a8:	e13ffe17 	ldw	r4,-8(fp)
  2109ac:	02109f00 	call	2109f0 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
  2109b0:	e0fffd17 	ldw	r3,-12(fp)
  2109b4:	e0bfff17 	ldw	r2,-4(fp)
  2109b8:	1884b03a 	or	r2,r3,r2
  2109bc:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  2109c0:	e0bffe17 	ldw	r2,-8(fp)
  2109c4:	10800317 	ldw	r2,12(r2)
  2109c8:	10800304 	addi	r2,r2,12
  2109cc:	e0fffd17 	ldw	r3,-12(fp)
  2109d0:	18c007cc 	andi	r3,r3,31
  2109d4:	10c00035 	stwio	r3,0(r2)
}
  2109d8:	0001883a 	nop
  2109dc:	e037883a 	mov	sp,fp
  2109e0:	dfc00117 	ldw	ra,4(sp)
  2109e4:	df000017 	ldw	fp,0(sp)
  2109e8:	dec00204 	addi	sp,sp,8
  2109ec:	f800283a 	ret

002109f0 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
  2109f0:	defffd04 	addi	sp,sp,-12
  2109f4:	df000215 	stw	fp,8(sp)
  2109f8:	df000204 	addi	fp,sp,8
  2109fc:	e13ffe15 	stw	r4,-8(fp)
  210a00:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
  210a04:	e0bffe17 	ldw	r2,-8(fp)
  210a08:	10800317 	ldw	r2,12(r2)
  210a0c:	10800304 	addi	r2,r2,12
  210a10:	10800037 	ldwio	r2,0(r2)
  210a14:	10c007cc 	andi	r3,r2,31
  210a18:	e0bfff17 	ldw	r2,-4(fp)
  210a1c:	10c00015 	stw	r3,0(r2)
}
  210a20:	0001883a 	nop
  210a24:	e037883a 	mov	sp,fp
  210a28:	df000017 	ldw	fp,0(sp)
  210a2c:	dec00104 	addi	sp,sp,4
  210a30:	f800283a 	ret

00210a34 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
  210a34:	defffd04 	addi	sp,sp,-12
  210a38:	df000215 	stw	fp,8(sp)
  210a3c:	df000204 	addi	fp,sp,8
  210a40:	e13ffe15 	stw	r4,-8(fp)
  210a44:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
  210a48:	e0bffe17 	ldw	r2,-8(fp)
  210a4c:	10800317 	ldw	r2,12(r2)
  210a50:	10800204 	addi	r2,r2,8
  210a54:	10800037 	ldwio	r2,0(r2)
  210a58:	10800c0c 	andi	r2,r2,48
  210a5c:	1005d13a 	srai	r2,r2,4
  210a60:	1007883a 	mov	r3,r2
  210a64:	e0bfff17 	ldw	r2,-4(fp)
  210a68:	10c00015 	stw	r3,0(r2)
}
  210a6c:	0001883a 	nop
  210a70:	e037883a 	mov	sp,fp
  210a74:	df000017 	ldw	fp,0(sp)
  210a78:	dec00104 	addi	sp,sp,4
  210a7c:	f800283a 	ret

00210a80 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
  210a80:	defffd04 	addi	sp,sp,-12
  210a84:	df000215 	stw	fp,8(sp)
  210a88:	df000204 	addi	fp,sp,8
  210a8c:	e13ffe15 	stw	r4,-8(fp)
  210a90:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
  210a94:	e0bffe17 	ldw	r2,-8(fp)
  210a98:	10800317 	ldw	r2,12(r2)
  210a9c:	10800204 	addi	r2,r2,8
  210aa0:	e0fffe17 	ldw	r3,-8(fp)
  210aa4:	18c00317 	ldw	r3,12(r3)
  210aa8:	18c00204 	addi	r3,r3,8
  210aac:	18c00037 	ldwio	r3,0(r3)
  210ab0:	1809883a 	mov	r4,r3
  210ab4:	00fff3c4 	movi	r3,-49
  210ab8:	20c8703a 	and	r4,r4,r3
  210abc:	e0ffff17 	ldw	r3,-4(fp)
  210ac0:	1806913a 	slli	r3,r3,4
  210ac4:	18c00c0c 	andi	r3,r3,48
  210ac8:	20c6b03a 	or	r3,r4,r3
  210acc:	10c00035 	stwio	r3,0(r2)
}
  210ad0:	0001883a 	nop
  210ad4:	e037883a 	mov	sp,fp
  210ad8:	df000017 	ldw	fp,0(sp)
  210adc:	dec00104 	addi	sp,sp,4
  210ae0:	f800283a 	ret

00210ae4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
  210ae4:	defffd04 	addi	sp,sp,-12
  210ae8:	df000215 	stw	fp,8(sp)
  210aec:	df000204 	addi	fp,sp,8
  210af0:	e13ffe15 	stw	r4,-8(fp)
  210af4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
  210af8:	e0bffe17 	ldw	r2,-8(fp)
  210afc:	10800317 	ldw	r2,12(r2)
  210b00:	10800204 	addi	r2,r2,8
  210b04:	10800037 	ldwio	r2,0(r2)
  210b08:	1080030c 	andi	r2,r2,12
  210b0c:	1005d0ba 	srai	r2,r2,2
  210b10:	1007883a 	mov	r3,r2
  210b14:	e0bfff17 	ldw	r2,-4(fp)
  210b18:	10c00015 	stw	r3,0(r2)
}
  210b1c:	0001883a 	nop
  210b20:	e037883a 	mov	sp,fp
  210b24:	df000017 	ldw	fp,0(sp)
  210b28:	dec00104 	addi	sp,sp,4
  210b2c:	f800283a 	ret

00210b30 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  210b30:	defffd04 	addi	sp,sp,-12
  210b34:	df000215 	stw	fp,8(sp)
  210b38:	df000204 	addi	fp,sp,8
  210b3c:	e13ffe15 	stw	r4,-8(fp)
  210b40:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
  210b44:	e0bffe17 	ldw	r2,-8(fp)
  210b48:	10800317 	ldw	r2,12(r2)
  210b4c:	10c00204 	addi	r3,r2,8
  210b50:	e0bffe17 	ldw	r2,-8(fp)
  210b54:	10800317 	ldw	r2,12(r2)
  210b58:	10800204 	addi	r2,r2,8
  210b5c:	10800037 	ldwio	r2,0(r2)
  210b60:	1009883a 	mov	r4,r2
  210b64:	00bffcc4 	movi	r2,-13
  210b68:	2088703a 	and	r4,r4,r2
  210b6c:	e0bfff17 	ldw	r2,-4(fp)
  210b70:	1085883a 	add	r2,r2,r2
  210b74:	1085883a 	add	r2,r2,r2
  210b78:	1080030c 	andi	r2,r2,12
  210b7c:	2084b03a 	or	r2,r4,r2
  210b80:	18800035 	stwio	r2,0(r3)
}
  210b84:	0001883a 	nop
  210b88:	e037883a 	mov	sp,fp
  210b8c:	df000017 	ldw	fp,0(sp)
  210b90:	dec00104 	addi	sp,sp,4
  210b94:	f800283a 	ret

00210b98 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  210b98:	defffa04 	addi	sp,sp,-24
  210b9c:	dfc00515 	stw	ra,20(sp)
  210ba0:	df000415 	stw	fp,16(sp)
  210ba4:	df000404 	addi	fp,sp,16
  210ba8:	e13ffd15 	stw	r4,-12(fp)
  210bac:	e17ffe15 	stw	r5,-8(fp)
  210bb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210bb4:	e0bffd17 	ldw	r2,-12(fp)
  210bb8:	10800017 	ldw	r2,0(r2)
  210bbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  210bc0:	e0bffc17 	ldw	r2,-16(fp)
  210bc4:	10c00a04 	addi	r3,r2,40
  210bc8:	e0bffd17 	ldw	r2,-12(fp)
  210bcc:	10800217 	ldw	r2,8(r2)
  210bd0:	100f883a 	mov	r7,r2
  210bd4:	e1bfff17 	ldw	r6,-4(fp)
  210bd8:	e17ffe17 	ldw	r5,-8(fp)
  210bdc:	1809883a 	mov	r4,r3
  210be0:	02111c00 	call	2111c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  210be4:	e037883a 	mov	sp,fp
  210be8:	dfc00117 	ldw	ra,4(sp)
  210bec:	df000017 	ldw	fp,0(sp)
  210bf0:	dec00204 	addi	sp,sp,8
  210bf4:	f800283a 	ret

00210bf8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  210bf8:	defffa04 	addi	sp,sp,-24
  210bfc:	dfc00515 	stw	ra,20(sp)
  210c00:	df000415 	stw	fp,16(sp)
  210c04:	df000404 	addi	fp,sp,16
  210c08:	e13ffd15 	stw	r4,-12(fp)
  210c0c:	e17ffe15 	stw	r5,-8(fp)
  210c10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210c14:	e0bffd17 	ldw	r2,-12(fp)
  210c18:	10800017 	ldw	r2,0(r2)
  210c1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  210c20:	e0bffc17 	ldw	r2,-16(fp)
  210c24:	10c00a04 	addi	r3,r2,40
  210c28:	e0bffd17 	ldw	r2,-12(fp)
  210c2c:	10800217 	ldw	r2,8(r2)
  210c30:	100f883a 	mov	r7,r2
  210c34:	e1bfff17 	ldw	r6,-4(fp)
  210c38:	e17ffe17 	ldw	r5,-8(fp)
  210c3c:	1809883a 	mov	r4,r3
  210c40:	02113dc0 	call	2113dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  210c44:	e037883a 	mov	sp,fp
  210c48:	dfc00117 	ldw	ra,4(sp)
  210c4c:	df000017 	ldw	fp,0(sp)
  210c50:	dec00204 	addi	sp,sp,8
  210c54:	f800283a 	ret

00210c58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  210c58:	defffc04 	addi	sp,sp,-16
  210c5c:	dfc00315 	stw	ra,12(sp)
  210c60:	df000215 	stw	fp,8(sp)
  210c64:	df000204 	addi	fp,sp,8
  210c68:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210c6c:	e0bfff17 	ldw	r2,-4(fp)
  210c70:	10800017 	ldw	r2,0(r2)
  210c74:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  210c78:	e0bffe17 	ldw	r2,-8(fp)
  210c7c:	10c00a04 	addi	r3,r2,40
  210c80:	e0bfff17 	ldw	r2,-4(fp)
  210c84:	10800217 	ldw	r2,8(r2)
  210c88:	100b883a 	mov	r5,r2
  210c8c:	1809883a 	mov	r4,r3
  210c90:	02110680 	call	211068 <altera_avalon_jtag_uart_close>
}
  210c94:	e037883a 	mov	sp,fp
  210c98:	dfc00117 	ldw	ra,4(sp)
  210c9c:	df000017 	ldw	fp,0(sp)
  210ca0:	dec00204 	addi	sp,sp,8
  210ca4:	f800283a 	ret

00210ca8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  210ca8:	defffa04 	addi	sp,sp,-24
  210cac:	dfc00515 	stw	ra,20(sp)
  210cb0:	df000415 	stw	fp,16(sp)
  210cb4:	df000404 	addi	fp,sp,16
  210cb8:	e13ffd15 	stw	r4,-12(fp)
  210cbc:	e17ffe15 	stw	r5,-8(fp)
  210cc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  210cc4:	e0bffd17 	ldw	r2,-12(fp)
  210cc8:	10800017 	ldw	r2,0(r2)
  210ccc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  210cd0:	e0bffc17 	ldw	r2,-16(fp)
  210cd4:	10800a04 	addi	r2,r2,40
  210cd8:	e1bfff17 	ldw	r6,-4(fp)
  210cdc:	e17ffe17 	ldw	r5,-8(fp)
  210ce0:	1009883a 	mov	r4,r2
  210ce4:	02110d00 	call	2110d0 <altera_avalon_jtag_uart_ioctl>
}
  210ce8:	e037883a 	mov	sp,fp
  210cec:	dfc00117 	ldw	ra,4(sp)
  210cf0:	df000017 	ldw	fp,0(sp)
  210cf4:	dec00204 	addi	sp,sp,8
  210cf8:	f800283a 	ret

00210cfc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  210cfc:	defffa04 	addi	sp,sp,-24
  210d00:	dfc00515 	stw	ra,20(sp)
  210d04:	df000415 	stw	fp,16(sp)
  210d08:	df000404 	addi	fp,sp,16
  210d0c:	e13ffd15 	stw	r4,-12(fp)
  210d10:	e17ffe15 	stw	r5,-8(fp)
  210d14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  210d18:	e0bffd17 	ldw	r2,-12(fp)
  210d1c:	00c00044 	movi	r3,1
  210d20:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  210d24:	e0bffd17 	ldw	r2,-12(fp)
  210d28:	10800017 	ldw	r2,0(r2)
  210d2c:	10800104 	addi	r2,r2,4
  210d30:	1007883a 	mov	r3,r2
  210d34:	e0bffd17 	ldw	r2,-12(fp)
  210d38:	10800817 	ldw	r2,32(r2)
  210d3c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  210d40:	e0bffe17 	ldw	r2,-8(fp)
  210d44:	e0ffff17 	ldw	r3,-4(fp)
  210d48:	d8000015 	stw	zero,0(sp)
  210d4c:	e1fffd17 	ldw	r7,-12(fp)
  210d50:	01800874 	movhi	r6,33
  210d54:	31836f04 	addi	r6,r6,3516
  210d58:	180b883a 	mov	r5,r3
  210d5c:	1009883a 	mov	r4,r2
  210d60:	0212c0c0 	call	212c0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  210d64:	e0bffd17 	ldw	r2,-12(fp)
  210d68:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  210d6c:	e0bffd17 	ldw	r2,-12(fp)
  210d70:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  210d74:	d0e02117 	ldw	r3,-32636(gp)
  210d78:	e1fffd17 	ldw	r7,-12(fp)
  210d7c:	01800874 	movhi	r6,33
  210d80:	3183f204 	addi	r6,r6,4040
  210d84:	180b883a 	mov	r5,r3
  210d88:	1009883a 	mov	r4,r2
  210d8c:	02126340 	call	212634 <alt_alarm_start>
  210d90:	1000040e 	bge	r2,zero,210da4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  210d94:	e0fffd17 	ldw	r3,-12(fp)
  210d98:	00a00034 	movhi	r2,32768
  210d9c:	10bfffc4 	addi	r2,r2,-1
  210da0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  210da4:	0001883a 	nop
  210da8:	e037883a 	mov	sp,fp
  210dac:	dfc00117 	ldw	ra,4(sp)
  210db0:	df000017 	ldw	fp,0(sp)
  210db4:	dec00204 	addi	sp,sp,8
  210db8:	f800283a 	ret

00210dbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  210dbc:	defff804 	addi	sp,sp,-32
  210dc0:	df000715 	stw	fp,28(sp)
  210dc4:	df000704 	addi	fp,sp,28
  210dc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  210dcc:	e0bfff17 	ldw	r2,-4(fp)
  210dd0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  210dd4:	e0bffb17 	ldw	r2,-20(fp)
  210dd8:	10800017 	ldw	r2,0(r2)
  210ddc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210de0:	e0bffc17 	ldw	r2,-16(fp)
  210de4:	10800104 	addi	r2,r2,4
  210de8:	10800037 	ldwio	r2,0(r2)
  210dec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  210df0:	e0bffd17 	ldw	r2,-12(fp)
  210df4:	1080c00c 	andi	r2,r2,768
  210df8:	10006d26 	beq	r2,zero,210fb0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  210dfc:	e0bffd17 	ldw	r2,-12(fp)
  210e00:	1080400c 	andi	r2,r2,256
  210e04:	10003526 	beq	r2,zero,210edc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  210e08:	00800074 	movhi	r2,1
  210e0c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210e10:	e0bffb17 	ldw	r2,-20(fp)
  210e14:	10800a17 	ldw	r2,40(r2)
  210e18:	10800044 	addi	r2,r2,1
  210e1c:	1081ffcc 	andi	r2,r2,2047
  210e20:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  210e24:	e0bffb17 	ldw	r2,-20(fp)
  210e28:	10c00b17 	ldw	r3,44(r2)
  210e2c:	e0bffe17 	ldw	r2,-8(fp)
  210e30:	18801526 	beq	r3,r2,210e88 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  210e34:	e0bffc17 	ldw	r2,-16(fp)
  210e38:	10800037 	ldwio	r2,0(r2)
  210e3c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  210e40:	e0bff917 	ldw	r2,-28(fp)
  210e44:	10a0000c 	andi	r2,r2,32768
  210e48:	10001126 	beq	r2,zero,210e90 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  210e4c:	e0bffb17 	ldw	r2,-20(fp)
  210e50:	10800a17 	ldw	r2,40(r2)
  210e54:	e0fff917 	ldw	r3,-28(fp)
  210e58:	1809883a 	mov	r4,r3
  210e5c:	e0fffb17 	ldw	r3,-20(fp)
  210e60:	1885883a 	add	r2,r3,r2
  210e64:	10800e04 	addi	r2,r2,56
  210e68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210e6c:	e0bffb17 	ldw	r2,-20(fp)
  210e70:	10800a17 	ldw	r2,40(r2)
  210e74:	10800044 	addi	r2,r2,1
  210e78:	10c1ffcc 	andi	r3,r2,2047
  210e7c:	e0bffb17 	ldw	r2,-20(fp)
  210e80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  210e84:	003fe206 	br	210e10 <_gp+0xffdff22c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  210e88:	0001883a 	nop
  210e8c:	00000106 	br	210e94 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  210e90:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  210e94:	e0bff917 	ldw	r2,-28(fp)
  210e98:	10bfffec 	andhi	r2,r2,65535
  210e9c:	10000f26 	beq	r2,zero,210edc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  210ea0:	e0bffb17 	ldw	r2,-20(fp)
  210ea4:	10c00817 	ldw	r3,32(r2)
  210ea8:	00bfff84 	movi	r2,-2
  210eac:	1886703a 	and	r3,r3,r2
  210eb0:	e0bffb17 	ldw	r2,-20(fp)
  210eb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  210eb8:	e0bffc17 	ldw	r2,-16(fp)
  210ebc:	10800104 	addi	r2,r2,4
  210ec0:	1007883a 	mov	r3,r2
  210ec4:	e0bffb17 	ldw	r2,-20(fp)
  210ec8:	10800817 	ldw	r2,32(r2)
  210ecc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210ed0:	e0bffc17 	ldw	r2,-16(fp)
  210ed4:	10800104 	addi	r2,r2,4
  210ed8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  210edc:	e0bffd17 	ldw	r2,-12(fp)
  210ee0:	1080800c 	andi	r2,r2,512
  210ee4:	103fbe26 	beq	r2,zero,210de0 <_gp+0xffdff1fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  210ee8:	e0bffd17 	ldw	r2,-12(fp)
  210eec:	1004d43a 	srli	r2,r2,16
  210ef0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  210ef4:	00001406 	br	210f48 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  210ef8:	e0bffc17 	ldw	r2,-16(fp)
  210efc:	e0fffb17 	ldw	r3,-20(fp)
  210f00:	18c00d17 	ldw	r3,52(r3)
  210f04:	e13ffb17 	ldw	r4,-20(fp)
  210f08:	20c7883a 	add	r3,r4,r3
  210f0c:	18c20e04 	addi	r3,r3,2104
  210f10:	18c00003 	ldbu	r3,0(r3)
  210f14:	18c03fcc 	andi	r3,r3,255
  210f18:	18c0201c 	xori	r3,r3,128
  210f1c:	18ffe004 	addi	r3,r3,-128
  210f20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210f24:	e0bffb17 	ldw	r2,-20(fp)
  210f28:	10800d17 	ldw	r2,52(r2)
  210f2c:	10800044 	addi	r2,r2,1
  210f30:	10c1ffcc 	andi	r3,r2,2047
  210f34:	e0bffb17 	ldw	r2,-20(fp)
  210f38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  210f3c:	e0bffa17 	ldw	r2,-24(fp)
  210f40:	10bfffc4 	addi	r2,r2,-1
  210f44:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  210f48:	e0bffa17 	ldw	r2,-24(fp)
  210f4c:	10000526 	beq	r2,zero,210f64 <altera_avalon_jtag_uart_irq+0x1a8>
  210f50:	e0bffb17 	ldw	r2,-20(fp)
  210f54:	10c00d17 	ldw	r3,52(r2)
  210f58:	e0bffb17 	ldw	r2,-20(fp)
  210f5c:	10800c17 	ldw	r2,48(r2)
  210f60:	18bfe51e 	bne	r3,r2,210ef8 <_gp+0xffdff314>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  210f64:	e0bffa17 	ldw	r2,-24(fp)
  210f68:	103f9d26 	beq	r2,zero,210de0 <_gp+0xffdff1fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  210f6c:	e0bffb17 	ldw	r2,-20(fp)
  210f70:	10c00817 	ldw	r3,32(r2)
  210f74:	00bfff44 	movi	r2,-3
  210f78:	1886703a 	and	r3,r3,r2
  210f7c:	e0bffb17 	ldw	r2,-20(fp)
  210f80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  210f84:	e0bffb17 	ldw	r2,-20(fp)
  210f88:	10800017 	ldw	r2,0(r2)
  210f8c:	10800104 	addi	r2,r2,4
  210f90:	1007883a 	mov	r3,r2
  210f94:	e0bffb17 	ldw	r2,-20(fp)
  210f98:	10800817 	ldw	r2,32(r2)
  210f9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210fa0:	e0bffc17 	ldw	r2,-16(fp)
  210fa4:	10800104 	addi	r2,r2,4
  210fa8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  210fac:	003f8c06 	br	210de0 <_gp+0xffdff1fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  210fb0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  210fb4:	0001883a 	nop
  210fb8:	e037883a 	mov	sp,fp
  210fbc:	df000017 	ldw	fp,0(sp)
  210fc0:	dec00104 	addi	sp,sp,4
  210fc4:	f800283a 	ret

00210fc8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  210fc8:	defff804 	addi	sp,sp,-32
  210fcc:	df000715 	stw	fp,28(sp)
  210fd0:	df000704 	addi	fp,sp,28
  210fd4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  210fd8:	e0bffb17 	ldw	r2,-20(fp)
  210fdc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  210fe0:	e0bff917 	ldw	r2,-28(fp)
  210fe4:	10800017 	ldw	r2,0(r2)
  210fe8:	10800104 	addi	r2,r2,4
  210fec:	10800037 	ldwio	r2,0(r2)
  210ff0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  210ff4:	e0bffa17 	ldw	r2,-24(fp)
  210ff8:	1081000c 	andi	r2,r2,1024
  210ffc:	10000b26 	beq	r2,zero,21102c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  211000:	e0bff917 	ldw	r2,-28(fp)
  211004:	10800017 	ldw	r2,0(r2)
  211008:	10800104 	addi	r2,r2,4
  21100c:	1007883a 	mov	r3,r2
  211010:	e0bff917 	ldw	r2,-28(fp)
  211014:	10800817 	ldw	r2,32(r2)
  211018:	10810014 	ori	r2,r2,1024
  21101c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  211020:	e0bff917 	ldw	r2,-28(fp)
  211024:	10000915 	stw	zero,36(r2)
  211028:	00000a06 	br	211054 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  21102c:	e0bff917 	ldw	r2,-28(fp)
  211030:	10c00917 	ldw	r3,36(r2)
  211034:	00a00034 	movhi	r2,32768
  211038:	10bfff04 	addi	r2,r2,-4
  21103c:	10c00536 	bltu	r2,r3,211054 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  211040:	e0bff917 	ldw	r2,-28(fp)
  211044:	10800917 	ldw	r2,36(r2)
  211048:	10c00044 	addi	r3,r2,1
  21104c:	e0bff917 	ldw	r2,-28(fp)
  211050:	10c00915 	stw	r3,36(r2)
  211054:	d0a02117 	ldw	r2,-32636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  211058:	e037883a 	mov	sp,fp
  21105c:	df000017 	ldw	fp,0(sp)
  211060:	dec00104 	addi	sp,sp,4
  211064:	f800283a 	ret

00211068 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  211068:	defffd04 	addi	sp,sp,-12
  21106c:	df000215 	stw	fp,8(sp)
  211070:	df000204 	addi	fp,sp,8
  211074:	e13ffe15 	stw	r4,-8(fp)
  211078:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  21107c:	00000506 	br	211094 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  211080:	e0bfff17 	ldw	r2,-4(fp)
  211084:	1090000c 	andi	r2,r2,16384
  211088:	10000226 	beq	r2,zero,211094 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  21108c:	00bffd44 	movi	r2,-11
  211090:	00000b06 	br	2110c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  211094:	e0bffe17 	ldw	r2,-8(fp)
  211098:	10c00d17 	ldw	r3,52(r2)
  21109c:	e0bffe17 	ldw	r2,-8(fp)
  2110a0:	10800c17 	ldw	r2,48(r2)
  2110a4:	18800526 	beq	r3,r2,2110bc <altera_avalon_jtag_uart_close+0x54>
  2110a8:	e0bffe17 	ldw	r2,-8(fp)
  2110ac:	10c00917 	ldw	r3,36(r2)
  2110b0:	e0bffe17 	ldw	r2,-8(fp)
  2110b4:	10800117 	ldw	r2,4(r2)
  2110b8:	18bff136 	bltu	r3,r2,211080 <_gp+0xffdff49c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  2110bc:	0005883a 	mov	r2,zero
}
  2110c0:	e037883a 	mov	sp,fp
  2110c4:	df000017 	ldw	fp,0(sp)
  2110c8:	dec00104 	addi	sp,sp,4
  2110cc:	f800283a 	ret

002110d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  2110d0:	defffa04 	addi	sp,sp,-24
  2110d4:	df000515 	stw	fp,20(sp)
  2110d8:	df000504 	addi	fp,sp,20
  2110dc:	e13ffd15 	stw	r4,-12(fp)
  2110e0:	e17ffe15 	stw	r5,-8(fp)
  2110e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  2110e8:	00bff9c4 	movi	r2,-25
  2110ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  2110f0:	e0bffe17 	ldw	r2,-8(fp)
  2110f4:	10da8060 	cmpeqi	r3,r2,27137
  2110f8:	1800031e 	bne	r3,zero,211108 <altera_avalon_jtag_uart_ioctl+0x38>
  2110fc:	109a80a0 	cmpeqi	r2,r2,27138
  211100:	1000181e 	bne	r2,zero,211164 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  211104:	00002906 	br	2111ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  211108:	e0bffd17 	ldw	r2,-12(fp)
  21110c:	10c00117 	ldw	r3,4(r2)
  211110:	00a00034 	movhi	r2,32768
  211114:	10bfffc4 	addi	r2,r2,-1
  211118:	18802126 	beq	r3,r2,2111a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  21111c:	e0bfff17 	ldw	r2,-4(fp)
  211120:	10800017 	ldw	r2,0(r2)
  211124:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  211128:	e0bffc17 	ldw	r2,-16(fp)
  21112c:	10800090 	cmplti	r2,r2,2
  211130:	1000061e 	bne	r2,zero,21114c <altera_avalon_jtag_uart_ioctl+0x7c>
  211134:	e0fffc17 	ldw	r3,-16(fp)
  211138:	00a00034 	movhi	r2,32768
  21113c:	10bfffc4 	addi	r2,r2,-1
  211140:	18800226 	beq	r3,r2,21114c <altera_avalon_jtag_uart_ioctl+0x7c>
  211144:	e0bffc17 	ldw	r2,-16(fp)
  211148:	00000206 	br	211154 <altera_avalon_jtag_uart_ioctl+0x84>
  21114c:	00a00034 	movhi	r2,32768
  211150:	10bfff84 	addi	r2,r2,-2
  211154:	e0fffd17 	ldw	r3,-12(fp)
  211158:	18800115 	stw	r2,4(r3)
      rc = 0;
  21115c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  211160:	00000f06 	br	2111a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  211164:	e0bffd17 	ldw	r2,-12(fp)
  211168:	10c00117 	ldw	r3,4(r2)
  21116c:	00a00034 	movhi	r2,32768
  211170:	10bfffc4 	addi	r2,r2,-1
  211174:	18800c26 	beq	r3,r2,2111a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  211178:	e0bffd17 	ldw	r2,-12(fp)
  21117c:	10c00917 	ldw	r3,36(r2)
  211180:	e0bffd17 	ldw	r2,-12(fp)
  211184:	10800117 	ldw	r2,4(r2)
  211188:	1885803a 	cmpltu	r2,r3,r2
  21118c:	10c03fcc 	andi	r3,r2,255
  211190:	e0bfff17 	ldw	r2,-4(fp)
  211194:	10c00015 	stw	r3,0(r2)
      rc = 0;
  211198:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  21119c:	00000206 	br	2111a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  2111a0:	0001883a 	nop
  2111a4:	00000106 	br	2111ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  2111a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  2111ac:	e0bffb17 	ldw	r2,-20(fp)
}
  2111b0:	e037883a 	mov	sp,fp
  2111b4:	df000017 	ldw	fp,0(sp)
  2111b8:	dec00104 	addi	sp,sp,4
  2111bc:	f800283a 	ret

002111c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  2111c0:	defff304 	addi	sp,sp,-52
  2111c4:	dfc00c15 	stw	ra,48(sp)
  2111c8:	df000b15 	stw	fp,44(sp)
  2111cc:	df000b04 	addi	fp,sp,44
  2111d0:	e13ffc15 	stw	r4,-16(fp)
  2111d4:	e17ffd15 	stw	r5,-12(fp)
  2111d8:	e1bffe15 	stw	r6,-8(fp)
  2111dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  2111e0:	e0bffd17 	ldw	r2,-12(fp)
  2111e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  2111e8:	00004706 	br	211308 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  2111ec:	e0bffc17 	ldw	r2,-16(fp)
  2111f0:	10800a17 	ldw	r2,40(r2)
  2111f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  2111f8:	e0bffc17 	ldw	r2,-16(fp)
  2111fc:	10800b17 	ldw	r2,44(r2)
  211200:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  211204:	e0fff717 	ldw	r3,-36(fp)
  211208:	e0bff817 	ldw	r2,-32(fp)
  21120c:	18800536 	bltu	r3,r2,211224 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  211210:	e0fff717 	ldw	r3,-36(fp)
  211214:	e0bff817 	ldw	r2,-32(fp)
  211218:	1885c83a 	sub	r2,r3,r2
  21121c:	e0bff615 	stw	r2,-40(fp)
  211220:	00000406 	br	211234 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  211224:	00c20004 	movi	r3,2048
  211228:	e0bff817 	ldw	r2,-32(fp)
  21122c:	1885c83a 	sub	r2,r3,r2
  211230:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  211234:	e0bff617 	ldw	r2,-40(fp)
  211238:	10001e26 	beq	r2,zero,2112b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  21123c:	e0fffe17 	ldw	r3,-8(fp)
  211240:	e0bff617 	ldw	r2,-40(fp)
  211244:	1880022e 	bgeu	r3,r2,211250 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  211248:	e0bffe17 	ldw	r2,-8(fp)
  21124c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  211250:	e0bffc17 	ldw	r2,-16(fp)
  211254:	10c00e04 	addi	r3,r2,56
  211258:	e0bff817 	ldw	r2,-32(fp)
  21125c:	1885883a 	add	r2,r3,r2
  211260:	e1bff617 	ldw	r6,-40(fp)
  211264:	100b883a 	mov	r5,r2
  211268:	e13ff517 	ldw	r4,-44(fp)
  21126c:	02073c40 	call	2073c4 <memcpy>
      ptr   += n;
  211270:	e0fff517 	ldw	r3,-44(fp)
  211274:	e0bff617 	ldw	r2,-40(fp)
  211278:	1885883a 	add	r2,r3,r2
  21127c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  211280:	e0fffe17 	ldw	r3,-8(fp)
  211284:	e0bff617 	ldw	r2,-40(fp)
  211288:	1885c83a 	sub	r2,r3,r2
  21128c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  211290:	e0fff817 	ldw	r3,-32(fp)
  211294:	e0bff617 	ldw	r2,-40(fp)
  211298:	1885883a 	add	r2,r3,r2
  21129c:	10c1ffcc 	andi	r3,r2,2047
  2112a0:	e0bffc17 	ldw	r2,-16(fp)
  2112a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  2112a8:	e0bffe17 	ldw	r2,-8(fp)
  2112ac:	00bfcf16 	blt	zero,r2,2111ec <_gp+0xffdff608>
  2112b0:	00000106 	br	2112b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  2112b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  2112b8:	e0fff517 	ldw	r3,-44(fp)
  2112bc:	e0bffd17 	ldw	r2,-12(fp)
  2112c0:	1880141e 	bne	r3,r2,211314 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  2112c4:	e0bfff17 	ldw	r2,-4(fp)
  2112c8:	1090000c 	andi	r2,r2,16384
  2112cc:	1000131e 	bne	r2,zero,21131c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  2112d0:	0001883a 	nop
  2112d4:	e0bffc17 	ldw	r2,-16(fp)
  2112d8:	10c00a17 	ldw	r3,40(r2)
  2112dc:	e0bff717 	ldw	r2,-36(fp)
  2112e0:	1880051e 	bne	r3,r2,2112f8 <altera_avalon_jtag_uart_read+0x138>
  2112e4:	e0bffc17 	ldw	r2,-16(fp)
  2112e8:	10c00917 	ldw	r3,36(r2)
  2112ec:	e0bffc17 	ldw	r2,-16(fp)
  2112f0:	10800117 	ldw	r2,4(r2)
  2112f4:	18bff736 	bltu	r3,r2,2112d4 <_gp+0xffdff6f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  2112f8:	e0bffc17 	ldw	r2,-16(fp)
  2112fc:	10c00a17 	ldw	r3,40(r2)
  211300:	e0bff717 	ldw	r2,-36(fp)
  211304:	18800726 	beq	r3,r2,211324 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  211308:	e0bffe17 	ldw	r2,-8(fp)
  21130c:	00bfb716 	blt	zero,r2,2111ec <_gp+0xffdff608>
  211310:	00000506 	br	211328 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  211314:	0001883a 	nop
  211318:	00000306 	br	211328 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  21131c:	0001883a 	nop
  211320:	00000106 	br	211328 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  211324:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  211328:	e0fff517 	ldw	r3,-44(fp)
  21132c:	e0bffd17 	ldw	r2,-12(fp)
  211330:	18801826 	beq	r3,r2,211394 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211334:	0005303a 	rdctl	r2,status
  211338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21133c:	e0fffb17 	ldw	r3,-20(fp)
  211340:	00bfff84 	movi	r2,-2
  211344:	1884703a 	and	r2,r3,r2
  211348:	1001703a 	wrctl	status,r2
  
  return context;
  21134c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  211350:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  211354:	e0bffc17 	ldw	r2,-16(fp)
  211358:	10800817 	ldw	r2,32(r2)
  21135c:	10c00054 	ori	r3,r2,1
  211360:	e0bffc17 	ldw	r2,-16(fp)
  211364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  211368:	e0bffc17 	ldw	r2,-16(fp)
  21136c:	10800017 	ldw	r2,0(r2)
  211370:	10800104 	addi	r2,r2,4
  211374:	1007883a 	mov	r3,r2
  211378:	e0bffc17 	ldw	r2,-16(fp)
  21137c:	10800817 	ldw	r2,32(r2)
  211380:	18800035 	stwio	r2,0(r3)
  211384:	e0bffa17 	ldw	r2,-24(fp)
  211388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  21138c:	e0bff917 	ldw	r2,-28(fp)
  211390:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  211394:	e0fff517 	ldw	r3,-44(fp)
  211398:	e0bffd17 	ldw	r2,-12(fp)
  21139c:	18800426 	beq	r3,r2,2113b0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  2113a0:	e0fff517 	ldw	r3,-44(fp)
  2113a4:	e0bffd17 	ldw	r2,-12(fp)
  2113a8:	1885c83a 	sub	r2,r3,r2
  2113ac:	00000606 	br	2113c8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  2113b0:	e0bfff17 	ldw	r2,-4(fp)
  2113b4:	1090000c 	andi	r2,r2,16384
  2113b8:	10000226 	beq	r2,zero,2113c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  2113bc:	00bffd44 	movi	r2,-11
  2113c0:	00000106 	br	2113c8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  2113c4:	00bffec4 	movi	r2,-5
}
  2113c8:	e037883a 	mov	sp,fp
  2113cc:	dfc00117 	ldw	ra,4(sp)
  2113d0:	df000017 	ldw	fp,0(sp)
  2113d4:	dec00204 	addi	sp,sp,8
  2113d8:	f800283a 	ret

002113dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  2113dc:	defff304 	addi	sp,sp,-52
  2113e0:	dfc00c15 	stw	ra,48(sp)
  2113e4:	df000b15 	stw	fp,44(sp)
  2113e8:	df000b04 	addi	fp,sp,44
  2113ec:	e13ffc15 	stw	r4,-16(fp)
  2113f0:	e17ffd15 	stw	r5,-12(fp)
  2113f4:	e1bffe15 	stw	r6,-8(fp)
  2113f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  2113fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  211400:	e0bffd17 	ldw	r2,-12(fp)
  211404:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  211408:	00003706 	br	2114e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  21140c:	e0bffc17 	ldw	r2,-16(fp)
  211410:	10800c17 	ldw	r2,48(r2)
  211414:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  211418:	e0bffc17 	ldw	r2,-16(fp)
  21141c:	10800d17 	ldw	r2,52(r2)
  211420:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  211424:	e0fff917 	ldw	r3,-28(fp)
  211428:	e0bff517 	ldw	r2,-44(fp)
  21142c:	1880062e 	bgeu	r3,r2,211448 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  211430:	e0fff517 	ldw	r3,-44(fp)
  211434:	e0bff917 	ldw	r2,-28(fp)
  211438:	1885c83a 	sub	r2,r3,r2
  21143c:	10bfffc4 	addi	r2,r2,-1
  211440:	e0bff615 	stw	r2,-40(fp)
  211444:	00000b06 	br	211474 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  211448:	e0bff517 	ldw	r2,-44(fp)
  21144c:	10000526 	beq	r2,zero,211464 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  211450:	00c20004 	movi	r3,2048
  211454:	e0bff917 	ldw	r2,-28(fp)
  211458:	1885c83a 	sub	r2,r3,r2
  21145c:	e0bff615 	stw	r2,-40(fp)
  211460:	00000406 	br	211474 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  211464:	00c1ffc4 	movi	r3,2047
  211468:	e0bff917 	ldw	r2,-28(fp)
  21146c:	1885c83a 	sub	r2,r3,r2
  211470:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  211474:	e0bff617 	ldw	r2,-40(fp)
  211478:	10001e26 	beq	r2,zero,2114f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  21147c:	e0fffe17 	ldw	r3,-8(fp)
  211480:	e0bff617 	ldw	r2,-40(fp)
  211484:	1880022e 	bgeu	r3,r2,211490 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  211488:	e0bffe17 	ldw	r2,-8(fp)
  21148c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  211490:	e0bffc17 	ldw	r2,-16(fp)
  211494:	10c20e04 	addi	r3,r2,2104
  211498:	e0bff917 	ldw	r2,-28(fp)
  21149c:	1885883a 	add	r2,r3,r2
  2114a0:	e1bff617 	ldw	r6,-40(fp)
  2114a4:	e17ffd17 	ldw	r5,-12(fp)
  2114a8:	1009883a 	mov	r4,r2
  2114ac:	02073c40 	call	2073c4 <memcpy>
      ptr   += n;
  2114b0:	e0fffd17 	ldw	r3,-12(fp)
  2114b4:	e0bff617 	ldw	r2,-40(fp)
  2114b8:	1885883a 	add	r2,r3,r2
  2114bc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  2114c0:	e0fffe17 	ldw	r3,-8(fp)
  2114c4:	e0bff617 	ldw	r2,-40(fp)
  2114c8:	1885c83a 	sub	r2,r3,r2
  2114cc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2114d0:	e0fff917 	ldw	r3,-28(fp)
  2114d4:	e0bff617 	ldw	r2,-40(fp)
  2114d8:	1885883a 	add	r2,r3,r2
  2114dc:	10c1ffcc 	andi	r3,r2,2047
  2114e0:	e0bffc17 	ldw	r2,-16(fp)
  2114e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2114e8:	e0bffe17 	ldw	r2,-8(fp)
  2114ec:	00bfc716 	blt	zero,r2,21140c <_gp+0xffdff828>
  2114f0:	00000106 	br	2114f8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  2114f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2114f8:	0005303a 	rdctl	r2,status
  2114fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211500:	e0fffb17 	ldw	r3,-20(fp)
  211504:	00bfff84 	movi	r2,-2
  211508:	1884703a 	and	r2,r3,r2
  21150c:	1001703a 	wrctl	status,r2
  
  return context;
  211510:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  211514:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  211518:	e0bffc17 	ldw	r2,-16(fp)
  21151c:	10800817 	ldw	r2,32(r2)
  211520:	10c00094 	ori	r3,r2,2
  211524:	e0bffc17 	ldw	r2,-16(fp)
  211528:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  21152c:	e0bffc17 	ldw	r2,-16(fp)
  211530:	10800017 	ldw	r2,0(r2)
  211534:	10800104 	addi	r2,r2,4
  211538:	1007883a 	mov	r3,r2
  21153c:	e0bffc17 	ldw	r2,-16(fp)
  211540:	10800817 	ldw	r2,32(r2)
  211544:	18800035 	stwio	r2,0(r3)
  211548:	e0bffa17 	ldw	r2,-24(fp)
  21154c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211550:	e0bff817 	ldw	r2,-32(fp)
  211554:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  211558:	e0bffe17 	ldw	r2,-8(fp)
  21155c:	0080100e 	bge	zero,r2,2115a0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  211560:	e0bfff17 	ldw	r2,-4(fp)
  211564:	1090000c 	andi	r2,r2,16384
  211568:	1000101e 	bne	r2,zero,2115ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  21156c:	0001883a 	nop
  211570:	e0bffc17 	ldw	r2,-16(fp)
  211574:	10c00d17 	ldw	r3,52(r2)
  211578:	e0bff517 	ldw	r2,-44(fp)
  21157c:	1880051e 	bne	r3,r2,211594 <altera_avalon_jtag_uart_write+0x1b8>
  211580:	e0bffc17 	ldw	r2,-16(fp)
  211584:	10c00917 	ldw	r3,36(r2)
  211588:	e0bffc17 	ldw	r2,-16(fp)
  21158c:	10800117 	ldw	r2,4(r2)
  211590:	18bff736 	bltu	r3,r2,211570 <_gp+0xffdff98c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  211594:	e0bffc17 	ldw	r2,-16(fp)
  211598:	10800917 	ldw	r2,36(r2)
  21159c:	1000051e 	bne	r2,zero,2115b4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  2115a0:	e0bffe17 	ldw	r2,-8(fp)
  2115a4:	00bfd016 	blt	zero,r2,2114e8 <_gp+0xffdff904>
  2115a8:	00000306 	br	2115b8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  2115ac:	0001883a 	nop
  2115b0:	00000106 	br	2115b8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  2115b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  2115b8:	e0fffd17 	ldw	r3,-12(fp)
  2115bc:	e0bff717 	ldw	r2,-36(fp)
  2115c0:	18800426 	beq	r3,r2,2115d4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  2115c4:	e0fffd17 	ldw	r3,-12(fp)
  2115c8:	e0bff717 	ldw	r2,-36(fp)
  2115cc:	1885c83a 	sub	r2,r3,r2
  2115d0:	00000606 	br	2115ec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  2115d4:	e0bfff17 	ldw	r2,-4(fp)
  2115d8:	1090000c 	andi	r2,r2,16384
  2115dc:	10000226 	beq	r2,zero,2115e8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  2115e0:	00bffd44 	movi	r2,-11
  2115e4:	00000106 	br	2115ec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  2115e8:	00bffec4 	movi	r2,-5
}
  2115ec:	e037883a 	mov	sp,fp
  2115f0:	dfc00117 	ldw	ra,4(sp)
  2115f4:	df000017 	ldw	fp,0(sp)
  2115f8:	dec00204 	addi	sp,sp,8
  2115fc:	f800283a 	ret

00211600 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  211600:	defffa04 	addi	sp,sp,-24
  211604:	dfc00515 	stw	ra,20(sp)
  211608:	df000415 	stw	fp,16(sp)
  21160c:	df000404 	addi	fp,sp,16
  211610:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  211614:	0007883a 	mov	r3,zero
  211618:	e0bfff17 	ldw	r2,-4(fp)
  21161c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  211620:	e0bfff17 	ldw	r2,-4(fp)
  211624:	10800104 	addi	r2,r2,4
  211628:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  21162c:	0005303a 	rdctl	r2,status
  211630:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211634:	e0fffd17 	ldw	r3,-12(fp)
  211638:	00bfff84 	movi	r2,-2
  21163c:	1884703a 	and	r2,r3,r2
  211640:	1001703a 	wrctl	status,r2
  
  return context;
  211644:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  211648:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  21164c:	02135940 	call	213594 <alt_tick>
  211650:	e0bffc17 	ldw	r2,-16(fp)
  211654:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211658:	e0bffe17 	ldw	r2,-8(fp)
  21165c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  211660:	0001883a 	nop
  211664:	e037883a 	mov	sp,fp
  211668:	dfc00117 	ldw	ra,4(sp)
  21166c:	df000017 	ldw	fp,0(sp)
  211670:	dec00204 	addi	sp,sp,8
  211674:	f800283a 	ret

00211678 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  211678:	defff804 	addi	sp,sp,-32
  21167c:	dfc00715 	stw	ra,28(sp)
  211680:	df000615 	stw	fp,24(sp)
  211684:	df000604 	addi	fp,sp,24
  211688:	e13ffc15 	stw	r4,-16(fp)
  21168c:	e17ffd15 	stw	r5,-12(fp)
  211690:	e1bffe15 	stw	r6,-8(fp)
  211694:	e1ffff15 	stw	r7,-4(fp)
  211698:	e0bfff17 	ldw	r2,-4(fp)
  21169c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  2116a0:	d0a02117 	ldw	r2,-32636(gp)
  2116a4:	1000021e 	bne	r2,zero,2116b0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  2116a8:	e0bffb17 	ldw	r2,-20(fp)
  2116ac:	d0a02115 	stw	r2,-32636(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  2116b0:	e0bffc17 	ldw	r2,-16(fp)
  2116b4:	10800104 	addi	r2,r2,4
  2116b8:	00c001c4 	movi	r3,7
  2116bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  2116c0:	d8000015 	stw	zero,0(sp)
  2116c4:	e1fffc17 	ldw	r7,-16(fp)
  2116c8:	01800874 	movhi	r6,33
  2116cc:	31858004 	addi	r6,r6,5632
  2116d0:	e17ffe17 	ldw	r5,-8(fp)
  2116d4:	e13ffd17 	ldw	r4,-12(fp)
  2116d8:	0212c0c0 	call	212c0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  2116dc:	0001883a 	nop
  2116e0:	e037883a 	mov	sp,fp
  2116e4:	dfc00117 	ldw	ra,4(sp)
  2116e8:	df000017 	ldw	fp,0(sp)
  2116ec:	dec00204 	addi	sp,sp,8
  2116f0:	f800283a 	ret

002116f4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  2116f4:	defffd04 	addi	sp,sp,-12
  2116f8:	dfc00215 	stw	ra,8(sp)
  2116fc:	df000115 	stw	fp,4(sp)
  211700:	df000104 	addi	fp,sp,4
  211704:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  211708:	d1601104 	addi	r5,gp,-32700
  21170c:	e13fff17 	ldw	r4,-4(fp)
  211710:	021293c0 	call	21293c <alt_dev_llist_insert>
}
  211714:	e037883a 	mov	sp,fp
  211718:	dfc00117 	ldw	ra,4(sp)
  21171c:	df000017 	ldw	fp,0(sp)
  211720:	dec00204 	addi	sp,sp,8
  211724:	f800283a 	ret

00211728 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  211728:	defff704 	addi	sp,sp,-36
  21172c:	dfc00815 	stw	ra,32(sp)
  211730:	df000715 	stw	fp,28(sp)
  211734:	df000704 	addi	fp,sp,28
  211738:	e13ffc15 	stw	r4,-16(fp)
  21173c:	e17ffd15 	stw	r5,-12(fp)
  211740:	e1bffe15 	stw	r6,-8(fp)
  211744:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  211748:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  21174c:	e0bffc17 	ldw	r2,-16(fp)
  211750:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  211754:	e0bffa17 	ldw	r2,-24(fp)
  211758:	10800b17 	ldw	r2,44(r2)
  21175c:	e0fffd17 	ldw	r3,-12(fp)
  211760:	1880060e 	bge	r3,r2,21177c <alt_onchip_flash_read+0x54>
  211764:	e0fffd17 	ldw	r3,-12(fp)
  211768:	e0bfff17 	ldw	r2,-4(fp)
  21176c:	1885883a 	add	r2,r3,r2
  211770:	e0fffa17 	ldw	r3,-24(fp)
  211774:	18c00b17 	ldw	r3,44(r3)
  211778:	1880020e 	bge	r3,r2,211784 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  21177c:	00bffc84 	movi	r2,-14
  211780:	00001706 	br	2117e0 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  211784:	e0bffa17 	ldw	r2,-24(fp)
  211788:	10c00a17 	ldw	r3,40(r2)
  21178c:	e0bffd17 	ldw	r2,-12(fp)
  211790:	1885883a 	add	r2,r3,r2
  211794:	e0ffff17 	ldw	r3,-4(fp)
  211798:	180d883a 	mov	r6,r3
  21179c:	100b883a 	mov	r5,r2
  2117a0:	e13ffe17 	ldw	r4,-8(fp)
  2117a4:	02073c40 	call	2073c4 <memcpy>

    if (NULL != flash->csr_base) {
  2117a8:	e0bffa17 	ldw	r2,-24(fp)
  2117ac:	10802f17 	ldw	r2,188(r2)
  2117b0:	10000a26 	beq	r2,zero,2117dc <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  2117b4:	e0bffa17 	ldw	r2,-24(fp)
  2117b8:	10802f17 	ldw	r2,188(r2)
  2117bc:	10800037 	ldwio	r2,0(r2)
  2117c0:	1080010c 	andi	r2,r2,4
  2117c4:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  2117c8:	e0bffb17 	ldw	r2,-20(fp)
  2117cc:	10800120 	cmpeqi	r2,r2,4
  2117d0:	1000021e 	bne	r2,zero,2117dc <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  2117d4:	00bffec4 	movi	r2,-5
  2117d8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  2117dc:	e0bff917 	ldw	r2,-28(fp)
}
  2117e0:	e037883a 	mov	sp,fp
  2117e4:	dfc00117 	ldw	ra,4(sp)
  2117e8:	df000017 	ldw	fp,0(sp)
  2117ec:	dec00204 	addi	sp,sp,8
  2117f0:	f800283a 	ret

002117f4 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  2117f4:	defffa04 	addi	sp,sp,-24
  2117f8:	df000515 	stw	fp,20(sp)
  2117fc:	df000504 	addi	fp,sp,20
  211800:	e13ffd15 	stw	r4,-12(fp)
  211804:	e17ffe15 	stw	r5,-8(fp)
  211808:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  21180c:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  211810:	e0bffd17 	ldw	r2,-12(fp)
  211814:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  211818:	e0bfff17 	ldw	r2,-4(fp)
  21181c:	10000426 	beq	r2,zero,211830 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  211820:	e0bffc17 	ldw	r2,-16(fp)
  211824:	10c00c17 	ldw	r3,48(r2)
  211828:	e0bfff17 	ldw	r2,-4(fp)
  21182c:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  211830:	e0bffc17 	ldw	r2,-16(fp)
  211834:	10800c17 	ldw	r2,48(r2)
  211838:	1000031e 	bne	r2,zero,211848 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  21183c:	00bffd04 	movi	r2,-12
  211840:	e0bffb15 	stw	r2,-20(fp)
  211844:	00000d06 	br	21187c <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  211848:	e0bffc17 	ldw	r2,-16(fp)
  21184c:	10800c17 	ldw	r2,48(r2)
  211850:	10800250 	cmplti	r2,r2,9
  211854:	1000031e 	bne	r2,zero,211864 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  211858:	00bffc84 	movi	r2,-14
  21185c:	e0bffb15 	stw	r2,-20(fp)
  211860:	00000606 	br	21187c <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  211864:	e0bffe17 	ldw	r2,-8(fp)
  211868:	10000426 	beq	r2,zero,21187c <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  21186c:	e0bffc17 	ldw	r2,-16(fp)
  211870:	10c00d04 	addi	r3,r2,52
  211874:	e0bffe17 	ldw	r2,-8(fp)
  211878:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  21187c:	e0bffb17 	ldw	r2,-20(fp)
}
  211880:	e037883a 	mov	sp,fp
  211884:	df000017 	ldw	fp,0(sp)
  211888:	dec00104 	addi	sp,sp,4
  21188c:	f800283a 	ret

00211890 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  211890:	defff904 	addi	sp,sp,-28
  211894:	dfc00615 	stw	ra,24(sp)
  211898:	df000515 	stw	fp,20(sp)
  21189c:	df000504 	addi	fp,sp,20
  2118a0:	e13ffe15 	stw	r4,-8(fp)
  2118a4:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  2118a8:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  2118ac:	e0bffe17 	ldw	r2,-8(fp)
  2118b0:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  2118b4:	e0bffc17 	ldw	r2,-16(fp)
  2118b8:	10800b17 	ldw	r2,44(r2)
  2118bc:	e0ffff17 	ldw	r3,-4(fp)
  2118c0:	18800216 	blt	r3,r2,2118cc <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  2118c4:	00bffc84 	movi	r2,-14
  2118c8:	00004606 	br	2119e4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  2118cc:	e0bffc17 	ldw	r2,-16(fp)
  2118d0:	10802f17 	ldw	r2,188(r2)
  2118d4:	10000326 	beq	r2,zero,2118e4 <alt_onchip_flash_erase_block+0x54>
  2118d8:	e0bffc17 	ldw	r2,-16(fp)
  2118dc:	10802e17 	ldw	r2,184(r2)
  2118e0:	10000226 	beq	r2,zero,2118ec <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  2118e4:	00bffb44 	movi	r2,-19
  2118e8:	00003e06 	br	2119e4 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  2118ec:	e0bffc17 	ldw	r2,-16(fp)
  2118f0:	10803f17 	ldw	r2,252(r2)
  2118f4:	10ffffc4 	addi	r3,r2,-1
  2118f8:	e0bfff17 	ldw	r2,-4(fp)
  2118fc:	1884703a 	and	r2,r3,r2
  211900:	10000226 	beq	r2,zero,21190c <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  211904:	00bffa84 	movi	r2,-22
  211908:	00003606 	br	2119e4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  21190c:	e13ffc17 	ldw	r4,-16(fp)
  211910:	02124840 	call	212484 <alt_onchip_flash_poll_for_status_to_go_idle>
  211914:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  211918:	e0bffb17 	ldw	r2,-20(fp)
  21191c:	10000226 	beq	r2,zero,211928 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  211920:	e0bffb17 	ldw	r2,-20(fp)
  211924:	00002f06 	br	2119e4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  211928:	e0bffc17 	ldw	r2,-16(fp)
  21192c:	10802f17 	ldw	r2,188(r2)
  211930:	10c00104 	addi	r3,r2,4
  211934:	e0bffc17 	ldw	r2,-16(fp)
  211938:	10802f17 	ldw	r2,188(r2)
  21193c:	10800104 	addi	r2,r2,4
  211940:	10800037 	ldwio	r2,0(r2)
  211944:	113c002c 	andhi	r4,r2,61440
  211948:	00802034 	movhi	r2,128
  21194c:	10bfffc4 	addi	r2,r2,-1
  211950:	2084b03a 	or	r2,r4,r2
  211954:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  211958:	e0bfff17 	ldw	r2,-4(fp)
  21195c:	1000010e 	bge	r2,zero,211964 <alt_onchip_flash_erase_block+0xd4>
  211960:	108000c4 	addi	r2,r2,3
  211964:	1005d0ba 	srai	r2,r2,2
  211968:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  21196c:	e0bffc17 	ldw	r2,-16(fp)
  211970:	10802f17 	ldw	r2,188(r2)
  211974:	10800104 	addi	r2,r2,4
  211978:	e0fffc17 	ldw	r3,-16(fp)
  21197c:	18c02f17 	ldw	r3,188(r3)
  211980:	18c00104 	addi	r3,r3,4
  211984:	18c00037 	ldwio	r3,0(r3)
  211988:	193c002c 	andhi	r4,r3,61440
  21198c:	e0fffd17 	ldw	r3,-12(fp)
  211990:	18c01c34 	orhi	r3,r3,112
  211994:	20c6b03a 	or	r3,r4,r3
  211998:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  21199c:	e13ffc17 	ldw	r4,-16(fp)
  2119a0:	02124840 	call	212484 <alt_onchip_flash_poll_for_status_to_go_idle>
  2119a4:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  2119a8:	e13ffc17 	ldw	r4,-16(fp)
  2119ac:	02125140 	call	212514 <alt_onchip_flash_poll_for_status_erase_passed>
  2119b0:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  2119b4:	e0bffc17 	ldw	r2,-16(fp)
  2119b8:	10802f17 	ldw	r2,188(r2)
  2119bc:	10c00104 	addi	r3,r2,4
  2119c0:	e0bffc17 	ldw	r2,-16(fp)
  2119c4:	10802f17 	ldw	r2,188(r2)
  2119c8:	10800104 	addi	r2,r2,4
  2119cc:	11000037 	ldwio	r4,0(r2)
  2119d0:	00840034 	movhi	r2,4096
  2119d4:	10bfffc4 	addi	r2,r2,-1
  2119d8:	2084b03a 	or	r2,r4,r2
  2119dc:	18800035 	stwio	r2,0(r3)

    return ret_code;
  2119e0:	e0bffb17 	ldw	r2,-20(fp)
}
  2119e4:	e037883a 	mov	sp,fp
  2119e8:	dfc00117 	ldw	ra,4(sp)
  2119ec:	df000017 	ldw	fp,0(sp)
  2119f0:	dec00204 	addi	sp,sp,8
  2119f4:	f800283a 	ret

002119f8 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  2119f8:	defff204 	addi	sp,sp,-56
  2119fc:	dfc00d15 	stw	ra,52(sp)
  211a00:	df000c15 	stw	fp,48(sp)
  211a04:	df000c04 	addi	fp,sp,48
  211a08:	e13ffc15 	stw	r4,-16(fp)
  211a0c:	e17ffd15 	stw	r5,-12(fp)
  211a10:	e1bffe15 	stw	r6,-8(fp)
  211a14:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  211a18:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  211a1c:	e0bffc17 	ldw	r2,-16(fp)
  211a20:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  211a24:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  211a28:	e0bffe17 	ldw	r2,-8(fp)
  211a2c:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  211a30:	e0bff817 	ldw	r2,-32(fp)
  211a34:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  211a38:	e0fffd17 	ldw	r3,-12(fp)
  211a3c:	18800a0e 	bge	r3,r2,211a68 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  211a40:	e0bff817 	ldw	r2,-32(fp)
  211a44:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  211a48:	e0fffe17 	ldw	r3,-8(fp)
  211a4c:	1880060e 	bge	r3,r2,211a68 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  211a50:	e0bff817 	ldw	r2,-32(fp)
  211a54:	10c00b17 	ldw	r3,44(r2)
  211a58:	e0bffe17 	ldw	r2,-8(fp)
  211a5c:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  211a60:	e0800217 	ldw	r2,8(fp)
  211a64:	1880020e 	bge	r3,r2,211a70 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  211a68:	00bffc84 	movi	r2,-14
  211a6c:	00009306 	br	211cbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  211a70:	e0bff817 	ldw	r2,-32(fp)
  211a74:	10802f17 	ldw	r2,188(r2)
  211a78:	10000326 	beq	r2,zero,211a88 <alt_onchip_flash_write_block+0x90>
  211a7c:	e0bff817 	ldw	r2,-32(fp)
  211a80:	10802e17 	ldw	r2,184(r2)
  211a84:	10000226 	beq	r2,zero,211a90 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  211a88:	00bffb44 	movi	r2,-19
  211a8c:	00008b06 	br	211cbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211a90:	e13ff817 	ldw	r4,-32(fp)
  211a94:	02124840 	call	212484 <alt_onchip_flash_poll_for_status_to_go_idle>
  211a98:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  211a9c:	e0bff417 	ldw	r2,-48(fp)
  211aa0:	10000226 	beq	r2,zero,211aac <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  211aa4:	e0bff417 	ldw	r2,-48(fp)
  211aa8:	00008406 	br	211cbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  211aac:	e0bff817 	ldw	r2,-32(fp)
  211ab0:	10802f17 	ldw	r2,188(r2)
  211ab4:	10c00104 	addi	r3,r2,4
  211ab8:	e0bff817 	ldw	r2,-32(fp)
  211abc:	10802f17 	ldw	r2,188(r2)
  211ac0:	10800104 	addi	r2,r2,4
  211ac4:	10800037 	ldwio	r2,0(r2)
  211ac8:	113c002c 	andhi	r4,r2,61440
  211acc:	00802034 	movhi	r2,128
  211ad0:	10bfffc4 	addi	r2,r2,-1
  211ad4:	2084b03a 	or	r2,r4,r2
  211ad8:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  211adc:	00006506 	br	211c74 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  211ae0:	00bfffc4 	movi	r2,-1
  211ae4:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  211ae8:	e0bff617 	ldw	r2,-40(fp)
  211aec:	108000cc 	andi	r2,r2,3
  211af0:	10001e1e 	bne	r2,zero,211b6c <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211af4:	e0bff617 	ldw	r2,-40(fp)
  211af8:	10c00104 	addi	r3,r2,4
  211afc:	00bfff04 	movi	r2,-4
  211b00:	1884703a 	and	r2,r3,r2
  211b04:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  211b08:	e0fff717 	ldw	r3,-36(fp)
  211b0c:	e0bff617 	ldw	r2,-40(fp)
  211b10:	1885c83a 	sub	r2,r3,r2
  211b14:	e0c00217 	ldw	r3,8(fp)
  211b18:	1880010e 	bge	r3,r2,211b20 <alt_onchip_flash_write_block+0x128>
  211b1c:	1805883a 	mov	r2,r3
  211b20:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  211b24:	e0bff517 	ldw	r2,-44(fp)
  211b28:	e0ffff17 	ldw	r3,-4(fp)
  211b2c:	1887883a 	add	r3,r3,r2
  211b30:	e13ff917 	ldw	r4,-28(fp)
  211b34:	e0bffb04 	addi	r2,fp,-20
  211b38:	200d883a 	mov	r6,r4
  211b3c:	180b883a 	mov	r5,r3
  211b40:	1009883a 	mov	r4,r2
  211b44:	02073c40 	call	2073c4 <memcpy>
            buffer_offset += length_of_current_write;
  211b48:	e0fff517 	ldw	r3,-44(fp)
  211b4c:	e0bff917 	ldw	r2,-28(fp)
  211b50:	1885883a 	add	r2,r3,r2
  211b54:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  211b58:	e0c00217 	ldw	r3,8(fp)
  211b5c:	e0bff917 	ldw	r2,-28(fp)
  211b60:	1885c83a 	sub	r2,r3,r2
  211b64:	e0800215 	stw	r2,8(fp)
  211b68:	00003006 	br	211c2c <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211b6c:	e0bff617 	ldw	r2,-40(fp)
  211b70:	108000cc 	andi	r2,r2,3
  211b74:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  211b78:	e0fff617 	ldw	r3,-40(fp)
  211b7c:	e0bffa17 	ldw	r2,-24(fp)
  211b80:	1885c83a 	sub	r2,r3,r2
  211b84:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211b88:	e0bff617 	ldw	r2,-40(fp)
  211b8c:	10c00104 	addi	r3,r2,4
  211b90:	00bfff04 	movi	r2,-4
  211b94:	1884703a 	and	r2,r3,r2
  211b98:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  211b9c:	e0fff717 	ldw	r3,-36(fp)
  211ba0:	e0bff617 	ldw	r2,-40(fp)
  211ba4:	1889c83a 	sub	r4,r3,r2
  211ba8:	e0c00217 	ldw	r3,8(fp)
  211bac:	e0bffa17 	ldw	r2,-24(fp)
  211bb0:	1887883a 	add	r3,r3,r2
  211bb4:	2005883a 	mov	r2,r4
  211bb8:	1880010e 	bge	r3,r2,211bc0 <alt_onchip_flash_write_block+0x1c8>
  211bbc:	1805883a 	mov	r2,r3
  211bc0:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  211bc4:	e0fffb04 	addi	r3,fp,-20
  211bc8:	e0bffa17 	ldw	r2,-24(fp)
  211bcc:	1885883a 	add	r2,r3,r2
  211bd0:	100f883a 	mov	r7,r2
  211bd4:	e0bff517 	ldw	r2,-44(fp)
  211bd8:	e0ffff17 	ldw	r3,-4(fp)
  211bdc:	1889883a 	add	r4,r3,r2
  211be0:	e0fff917 	ldw	r3,-28(fp)
  211be4:	e0bffa17 	ldw	r2,-24(fp)
  211be8:	1885c83a 	sub	r2,r3,r2
  211bec:	100d883a 	mov	r6,r2
  211bf0:	200b883a 	mov	r5,r4
  211bf4:	3809883a 	mov	r4,r7
  211bf8:	02073c40 	call	2073c4 <memcpy>
            buffer_offset += length_of_current_write - padding;
  211bfc:	e0fff917 	ldw	r3,-28(fp)
  211c00:	e0bffa17 	ldw	r2,-24(fp)
  211c04:	1885c83a 	sub	r2,r3,r2
  211c08:	e0fff517 	ldw	r3,-44(fp)
  211c0c:	1885883a 	add	r2,r3,r2
  211c10:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  211c14:	e0fff917 	ldw	r3,-28(fp)
  211c18:	e0bffa17 	ldw	r2,-24(fp)
  211c1c:	1885c83a 	sub	r2,r3,r2
  211c20:	e0c00217 	ldw	r3,8(fp)
  211c24:	1885c83a 	sub	r2,r3,r2
  211c28:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  211c2c:	e0bff817 	ldw	r2,-32(fp)
  211c30:	10c00a17 	ldw	r3,40(r2)
  211c34:	e0bff617 	ldw	r2,-40(fp)
  211c38:	1885883a 	add	r2,r3,r2
  211c3c:	e0fffb17 	ldw	r3,-20(fp)
  211c40:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211c44:	e13ff817 	ldw	r4,-32(fp)
  211c48:	02124840 	call	212484 <alt_onchip_flash_poll_for_status_to_go_idle>
  211c4c:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  211c50:	e0bff417 	ldw	r2,-48(fp)
  211c54:	10000a1e 	bne	r2,zero,211c80 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  211c58:	e13ff817 	ldw	r4,-32(fp)
  211c5c:	02125a40 	call	2125a4 <alt_onchip_flash_poll_for_status_write_passed>
  211c60:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  211c64:	e0bff417 	ldw	r2,-48(fp)
  211c68:	1000071e 	bne	r2,zero,211c88 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  211c6c:	e0bff717 	ldw	r2,-36(fp)
  211c70:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  211c74:	e0800217 	ldw	r2,8(fp)
  211c78:	103f991e 	bne	r2,zero,211ae0 <_gp+0xffdffefc>
  211c7c:	00000306 	br	211c8c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  211c80:	0001883a 	nop
  211c84:	00000106 	br	211c8c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  211c88:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  211c8c:	e0bff817 	ldw	r2,-32(fp)
  211c90:	10802f17 	ldw	r2,188(r2)
  211c94:	10c00104 	addi	r3,r2,4
  211c98:	e0bff817 	ldw	r2,-32(fp)
  211c9c:	10802f17 	ldw	r2,188(r2)
  211ca0:	10800104 	addi	r2,r2,4
  211ca4:	11000037 	ldwio	r4,0(r2)
  211ca8:	00840034 	movhi	r2,4096
  211cac:	10bfffc4 	addi	r2,r2,-1
  211cb0:	2084b03a 	or	r2,r4,r2
  211cb4:	18800035 	stwio	r2,0(r3)

    return ret_code;
  211cb8:	e0bff417 	ldw	r2,-48(fp)
}
  211cbc:	e037883a 	mov	sp,fp
  211cc0:	dfc00117 	ldw	ra,4(sp)
  211cc4:	df000017 	ldw	fp,0(sp)
  211cc8:	dec00204 	addi	sp,sp,8
  211ccc:	f800283a 	ret

00211cd0 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  211cd0:	defff104 	addi	sp,sp,-60
  211cd4:	dfc00e15 	stw	ra,56(sp)
  211cd8:	df000d15 	stw	fp,52(sp)
  211cdc:	df000d04 	addi	fp,sp,52
  211ce0:	e13ffc15 	stw	r4,-16(fp)
  211ce4:	e17ffd15 	stw	r5,-12(fp)
  211ce8:	e1bffe15 	stw	r6,-8(fp)
  211cec:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  211cf0:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  211cf4:	e0bfff17 	ldw	r2,-4(fp)
  211cf8:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  211cfc:	e0bffd17 	ldw	r2,-12(fp)
  211d00:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  211d04:	e0bffc17 	ldw	r2,-16(fp)
  211d08:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  211d0c:	e0bffa17 	ldw	r2,-24(fp)
  211d10:	10800b17 	ldw	r2,44(r2)
  211d14:	e0fffd17 	ldw	r3,-12(fp)
  211d18:	1880060e 	bge	r3,r2,211d34 <alt_onchip_flash_write+0x64>
  211d1c:	e0bffa17 	ldw	r2,-24(fp)
  211d20:	10c00b17 	ldw	r3,44(r2)
  211d24:	e0bffd17 	ldw	r2,-12(fp)
  211d28:	1887c83a 	sub	r3,r3,r2
  211d2c:	e0bfff17 	ldw	r2,-4(fp)
  211d30:	1880020e 	bge	r3,r2,211d3c <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  211d34:	00bffc84 	movi	r2,-14
  211d38:	00009606 	br	211f94 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  211d3c:	e03ff515 	stw	zero,-44(fp)
  211d40:	00008706 	br	211f60 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  211d44:	e0fffa17 	ldw	r3,-24(fp)
  211d48:	e0bff517 	ldw	r2,-44(fp)
  211d4c:	1004913a 	slli	r2,r2,4
  211d50:	1885883a 	add	r2,r3,r2
  211d54:	10800d04 	addi	r2,r2,52
  211d58:	10800017 	ldw	r2,0(r2)
  211d5c:	e0fffd17 	ldw	r3,-12(fp)
  211d60:	18807c16 	blt	r3,r2,211f54 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  211d64:	e0fffa17 	ldw	r3,-24(fp)
  211d68:	e0bff517 	ldw	r2,-44(fp)
  211d6c:	1004913a 	slli	r2,r2,4
  211d70:	1885883a 	add	r2,r3,r2
  211d74:	10800d04 	addi	r2,r2,52
  211d78:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  211d7c:	e13ffa17 	ldw	r4,-24(fp)
  211d80:	e0bff517 	ldw	r2,-44(fp)
  211d84:	1004913a 	slli	r2,r2,4
  211d88:	2085883a 	add	r2,r4,r2
  211d8c:	10800e04 	addi	r2,r2,56
  211d90:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  211d94:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  211d98:	e0fffd17 	ldw	r3,-12(fp)
  211d9c:	18806d0e 	bge	r3,r2,211f54 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  211da0:	e0fffa17 	ldw	r3,-24(fp)
  211da4:	e0bff517 	ldw	r2,-44(fp)
  211da8:	1004913a 	slli	r2,r2,4
  211dac:	1885883a 	add	r2,r3,r2
  211db0:	10800d04 	addi	r2,r2,52
  211db4:	10800017 	ldw	r2,0(r2)
  211db8:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  211dbc:	e03ff615 	stw	zero,-40(fp)
  211dc0:	00005c06 	br	211f34 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  211dc4:	e0fffd17 	ldw	r3,-12(fp)
  211dc8:	e0bff717 	ldw	r2,-36(fp)
  211dcc:	18804d16 	blt	r3,r2,211f04 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  211dd0:	e0fffa17 	ldw	r3,-24(fp)
  211dd4:	e0bff517 	ldw	r2,-44(fp)
  211dd8:	10800104 	addi	r2,r2,4
  211ddc:	1004913a 	slli	r2,r2,4
  211de0:	1885883a 	add	r2,r3,r2
  211de4:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  211de8:	e0bff717 	ldw	r2,-36(fp)
  211dec:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  211df0:	e0fffd17 	ldw	r3,-12(fp)
  211df4:	1880430e 	bge	r3,r2,211f04 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  211df8:	e0fffa17 	ldw	r3,-24(fp)
  211dfc:	e0bff517 	ldw	r2,-44(fp)
  211e00:	10800104 	addi	r2,r2,4
  211e04:	1004913a 	slli	r2,r2,4
  211e08:	1885883a 	add	r2,r3,r2
  211e0c:	10c00017 	ldw	r3,0(r2)
  211e10:	e0bff717 	ldw	r2,-36(fp)
  211e14:	1887883a 	add	r3,r3,r2
  211e18:	e0bffd17 	ldw	r2,-12(fp)
  211e1c:	1885c83a 	sub	r2,r3,r2
  211e20:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  211e24:	e0fffb17 	ldw	r3,-20(fp)
  211e28:	e0bfff17 	ldw	r2,-4(fp)
  211e2c:	1880010e 	bge	r3,r2,211e34 <alt_onchip_flash_write+0x164>
  211e30:	1805883a 	mov	r2,r3
  211e34:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  211e38:	e0bffa17 	ldw	r2,-24(fp)
  211e3c:	10c00a17 	ldw	r3,40(r2)
  211e40:	e0bffd17 	ldw	r2,-12(fp)
  211e44:	1885883a 	add	r2,r3,r2
  211e48:	e0fffb17 	ldw	r3,-20(fp)
  211e4c:	180d883a 	mov	r6,r3
  211e50:	100b883a 	mov	r5,r2
  211e54:	e13ffe17 	ldw	r4,-8(fp)
  211e58:	02139740 	call	213974 <memcmp>
  211e5c:	10001326 	beq	r2,zero,211eac <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  211e60:	e0bffa17 	ldw	r2,-24(fp)
  211e64:	10800817 	ldw	r2,32(r2)
  211e68:	e0fffa17 	ldw	r3,-24(fp)
  211e6c:	e17ff717 	ldw	r5,-36(fp)
  211e70:	1809883a 	mov	r4,r3
  211e74:	103ee83a 	callr	r2
  211e78:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  211e7c:	e0bff417 	ldw	r2,-48(fp)
  211e80:	10000a1e 	bne	r2,zero,211eac <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  211e84:	e0bffa17 	ldw	r2,-24(fp)
  211e88:	10800917 	ldw	r2,36(r2)
  211e8c:	e13ffa17 	ldw	r4,-24(fp)
  211e90:	e0fffb17 	ldw	r3,-20(fp)
  211e94:	d8c00015 	stw	r3,0(sp)
  211e98:	e1fffe17 	ldw	r7,-8(fp)
  211e9c:	e1bffd17 	ldw	r6,-12(fp)
  211ea0:	e17ff717 	ldw	r5,-36(fp)
  211ea4:	103ee83a 	callr	r2
  211ea8:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  211eac:	e0ffff17 	ldw	r3,-4(fp)
  211eb0:	e0bffb17 	ldw	r2,-20(fp)
  211eb4:	18802e26 	beq	r3,r2,211f70 <alt_onchip_flash_write+0x2a0>
  211eb8:	e0bff417 	ldw	r2,-48(fp)
  211ebc:	10002c1e 	bne	r2,zero,211f70 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  211ec0:	e0ffff17 	ldw	r3,-4(fp)
  211ec4:	e0bffb17 	ldw	r2,-20(fp)
  211ec8:	1885c83a 	sub	r2,r3,r2
  211ecc:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  211ed0:	e0fffa17 	ldw	r3,-24(fp)
  211ed4:	e0bff517 	ldw	r2,-44(fp)
  211ed8:	10800104 	addi	r2,r2,4
  211edc:	1004913a 	slli	r2,r2,4
  211ee0:	1885883a 	add	r2,r3,r2
  211ee4:	10c00017 	ldw	r3,0(r2)
  211ee8:	e0bff717 	ldw	r2,-36(fp)
  211eec:	1885883a 	add	r2,r3,r2
  211ef0:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  211ef4:	e0bffb17 	ldw	r2,-20(fp)
  211ef8:	e0fffe17 	ldw	r3,-8(fp)
  211efc:	1885883a 	add	r2,r3,r2
  211f00:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  211f04:	e0fffa17 	ldw	r3,-24(fp)
  211f08:	e0bff517 	ldw	r2,-44(fp)
  211f0c:	10800104 	addi	r2,r2,4
  211f10:	1004913a 	slli	r2,r2,4
  211f14:	1885883a 	add	r2,r3,r2
  211f18:	10800017 	ldw	r2,0(r2)
  211f1c:	e0fff717 	ldw	r3,-36(fp)
  211f20:	1885883a 	add	r2,r3,r2
  211f24:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  211f28:	e0bff617 	ldw	r2,-40(fp)
  211f2c:	10800044 	addi	r2,r2,1
  211f30:	e0bff615 	stw	r2,-40(fp)
  211f34:	e0fffa17 	ldw	r3,-24(fp)
  211f38:	e0bff517 	ldw	r2,-44(fp)
  211f3c:	1004913a 	slli	r2,r2,4
  211f40:	1885883a 	add	r2,r3,r2
  211f44:	10800f04 	addi	r2,r2,60
  211f48:	10800017 	ldw	r2,0(r2)
  211f4c:	e0fff617 	ldw	r3,-40(fp)
  211f50:	18bf9c16 	blt	r3,r2,211dc4 <_gp+0xffe001e0>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  211f54:	e0bff517 	ldw	r2,-44(fp)
  211f58:	10800044 	addi	r2,r2,1
  211f5c:	e0bff515 	stw	r2,-44(fp)
  211f60:	e0bffa17 	ldw	r2,-24(fp)
  211f64:	10800c17 	ldw	r2,48(r2)
  211f68:	e0fff517 	ldw	r3,-44(fp)
  211f6c:	18bf7516 	blt	r3,r2,211d44 <_gp+0xffe00160>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  211f70:	e0bffa17 	ldw	r2,-24(fp)
  211f74:	10c00a17 	ldw	r3,40(r2)
  211f78:	e0bff917 	ldw	r2,-28(fp)
  211f7c:	1885883a 	add	r2,r3,r2
  211f80:	e0fff817 	ldw	r3,-32(fp)
  211f84:	180b883a 	mov	r5,r3
  211f88:	1009883a 	mov	r4,r2
  211f8c:	02128b80 	call	2128b8 <alt_dcache_flush>
    return ret_code;
  211f90:	e0bff417 	ldw	r2,-48(fp)
}
  211f94:	e037883a 	mov	sp,fp
  211f98:	dfc00117 	ldw	ra,4(sp)
  211f9c:	df000017 	ldw	fp,0(sp)
  211fa0:	dec00204 	addi	sp,sp,8
  211fa4:	f800283a 	ret

00211fa8 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  211fa8:	defff504 	addi	sp,sp,-44
  211fac:	dfc00a15 	stw	ra,40(sp)
  211fb0:	df000915 	stw	fp,36(sp)
  211fb4:	dc000815 	stw	r16,32(sp)
  211fb8:	df000904 	addi	fp,sp,36
  211fbc:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  211fc0:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  211fc4:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  211fc8:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  211fcc:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  211fd0:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  211fd4:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  211fd8:	e0bffe17 	ldw	r2,-8(fp)
  211fdc:	10800d04 	addi	r2,r2,52
  211fe0:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  211fe4:	e0bffe17 	ldw	r2,-8(fp)
  211fe8:	10802f17 	ldw	r2,188(r2)
  211fec:	10001926 	beq	r2,zero,212054 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  211ff0:	e0bffe17 	ldw	r2,-8(fp)
  211ff4:	10802f17 	ldw	r2,188(r2)
  211ff8:	10800037 	ldwio	r2,0(r2)
  211ffc:	1080080c 	andi	r2,r2,32
  212000:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  212004:	e0bffe17 	ldw	r2,-8(fp)
  212008:	10802f17 	ldw	r2,188(r2)
  21200c:	10800037 	ldwio	r2,0(r2)
  212010:	1080100c 	andi	r2,r2,64
  212014:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  212018:	e0bffe17 	ldw	r2,-8(fp)
  21201c:	10802f17 	ldw	r2,188(r2)
  212020:	10800037 	ldwio	r2,0(r2)
  212024:	1080200c 	andi	r2,r2,128
  212028:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  21202c:	e0bffe17 	ldw	r2,-8(fp)
  212030:	10802f17 	ldw	r2,188(r2)
  212034:	10800037 	ldwio	r2,0(r2)
  212038:	1080400c 	andi	r2,r2,256
  21203c:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  212040:	e0bffe17 	ldw	r2,-8(fp)
  212044:	10802f17 	ldw	r2,188(r2)
  212048:	10800037 	ldwio	r2,0(r2)
  21204c:	1080800c 	andi	r2,r2,512
  212050:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  212054:	e0bffe17 	ldw	r2,-8(fp)
  212058:	10803017 	ldw	r2,192(r2)
  21205c:	10800058 	cmpnei	r2,r2,1
  212060:	10002f1e 	bne	r2,zero,212120 <altera_onchip_flash_init+0x178>
  212064:	e0bff817 	ldw	r2,-32(fp)
  212068:	10800820 	cmpeqi	r2,r2,32
  21206c:	10002c1e 	bne	r2,zero,212120 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  212070:	e0bff717 	ldw	r2,-36(fp)
  212074:	1004913a 	slli	r2,r2,4
  212078:	e0fffd17 	ldw	r3,-12(fp)
  21207c:	1885883a 	add	r2,r3,r2
  212080:	e0fffe17 	ldw	r3,-8(fp)
  212084:	18c03117 	ldw	r3,196(r3)
  212088:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  21208c:	e0bff717 	ldw	r2,-36(fp)
  212090:	1004913a 	slli	r2,r2,4
  212094:	e0fffd17 	ldw	r3,-12(fp)
  212098:	1885883a 	add	r2,r3,r2
  21209c:	e0fffe17 	ldw	r3,-8(fp)
  2120a0:	19003217 	ldw	r4,200(r3)
  2120a4:	e0fffe17 	ldw	r3,-8(fp)
  2120a8:	18c03117 	ldw	r3,196(r3)
  2120ac:	20c7c83a 	sub	r3,r4,r3
  2120b0:	18c00044 	addi	r3,r3,1
  2120b4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  2120b8:	e0bff717 	ldw	r2,-36(fp)
  2120bc:	1004913a 	slli	r2,r2,4
  2120c0:	e0fffd17 	ldw	r3,-12(fp)
  2120c4:	18a1883a 	add	r16,r3,r2
  2120c8:	e0fffe17 	ldw	r3,-8(fp)
  2120cc:	e0bff717 	ldw	r2,-36(fp)
  2120d0:	1004913a 	slli	r2,r2,4
  2120d4:	1885883a 	add	r2,r3,r2
  2120d8:	10800e04 	addi	r2,r2,56
  2120dc:	10c00017 	ldw	r3,0(r2)
  2120e0:	e0bffe17 	ldw	r2,-8(fp)
  2120e4:	10803f17 	ldw	r2,252(r2)
  2120e8:	100b883a 	mov	r5,r2
  2120ec:	1809883a 	mov	r4,r3
  2120f0:	0200a600 	call	200a60 <__divsi3>
  2120f4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  2120f8:	e0bff717 	ldw	r2,-36(fp)
  2120fc:	1004913a 	slli	r2,r2,4
  212100:	e0fffd17 	ldw	r3,-12(fp)
  212104:	1885883a 	add	r2,r3,r2
  212108:	e0fffe17 	ldw	r3,-8(fp)
  21210c:	18c03f17 	ldw	r3,252(r3)
  212110:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  212114:	e0bff717 	ldw	r2,-36(fp)
  212118:	10800044 	addi	r2,r2,1
  21211c:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  212120:	e0bffe17 	ldw	r2,-8(fp)
  212124:	10803317 	ldw	r2,204(r2)
  212128:	10800058 	cmpnei	r2,r2,1
  21212c:	10002f1e 	bne	r2,zero,2121ec <altera_onchip_flash_init+0x244>
  212130:	e0bff917 	ldw	r2,-28(fp)
  212134:	10801020 	cmpeqi	r2,r2,64
  212138:	10002c1e 	bne	r2,zero,2121ec <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  21213c:	e0bff717 	ldw	r2,-36(fp)
  212140:	1004913a 	slli	r2,r2,4
  212144:	e0fffd17 	ldw	r3,-12(fp)
  212148:	1885883a 	add	r2,r3,r2
  21214c:	e0fffe17 	ldw	r3,-8(fp)
  212150:	18c03417 	ldw	r3,208(r3)
  212154:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  212158:	e0bff717 	ldw	r2,-36(fp)
  21215c:	1004913a 	slli	r2,r2,4
  212160:	e0fffd17 	ldw	r3,-12(fp)
  212164:	1885883a 	add	r2,r3,r2
  212168:	e0fffe17 	ldw	r3,-8(fp)
  21216c:	19003517 	ldw	r4,212(r3)
  212170:	e0fffe17 	ldw	r3,-8(fp)
  212174:	18c03417 	ldw	r3,208(r3)
  212178:	20c7c83a 	sub	r3,r4,r3
  21217c:	18c00044 	addi	r3,r3,1
  212180:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  212184:	e0bff717 	ldw	r2,-36(fp)
  212188:	1004913a 	slli	r2,r2,4
  21218c:	e0fffd17 	ldw	r3,-12(fp)
  212190:	18a1883a 	add	r16,r3,r2
  212194:	e0fffe17 	ldw	r3,-8(fp)
  212198:	e0bff717 	ldw	r2,-36(fp)
  21219c:	1004913a 	slli	r2,r2,4
  2121a0:	1885883a 	add	r2,r3,r2
  2121a4:	10800e04 	addi	r2,r2,56
  2121a8:	10c00017 	ldw	r3,0(r2)
  2121ac:	e0bffe17 	ldw	r2,-8(fp)
  2121b0:	10803f17 	ldw	r2,252(r2)
  2121b4:	100b883a 	mov	r5,r2
  2121b8:	1809883a 	mov	r4,r3
  2121bc:	0200a600 	call	200a60 <__divsi3>
  2121c0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  2121c4:	e0bff717 	ldw	r2,-36(fp)
  2121c8:	1004913a 	slli	r2,r2,4
  2121cc:	e0fffd17 	ldw	r3,-12(fp)
  2121d0:	1885883a 	add	r2,r3,r2
  2121d4:	e0fffe17 	ldw	r3,-8(fp)
  2121d8:	18c03f17 	ldw	r3,252(r3)
  2121dc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  2121e0:	e0bff717 	ldw	r2,-36(fp)
  2121e4:	10800044 	addi	r2,r2,1
  2121e8:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  2121ec:	e0bffe17 	ldw	r2,-8(fp)
  2121f0:	10803617 	ldw	r2,216(r2)
  2121f4:	10800058 	cmpnei	r2,r2,1
  2121f8:	10002f1e 	bne	r2,zero,2122b8 <altera_onchip_flash_init+0x310>
  2121fc:	e0bffa17 	ldw	r2,-24(fp)
  212200:	10802020 	cmpeqi	r2,r2,128
  212204:	10002c1e 	bne	r2,zero,2122b8 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  212208:	e0bff717 	ldw	r2,-36(fp)
  21220c:	1004913a 	slli	r2,r2,4
  212210:	e0fffd17 	ldw	r3,-12(fp)
  212214:	1885883a 	add	r2,r3,r2
  212218:	e0fffe17 	ldw	r3,-8(fp)
  21221c:	18c03717 	ldw	r3,220(r3)
  212220:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  212224:	e0bff717 	ldw	r2,-36(fp)
  212228:	1004913a 	slli	r2,r2,4
  21222c:	e0fffd17 	ldw	r3,-12(fp)
  212230:	1885883a 	add	r2,r3,r2
  212234:	e0fffe17 	ldw	r3,-8(fp)
  212238:	19003817 	ldw	r4,224(r3)
  21223c:	e0fffe17 	ldw	r3,-8(fp)
  212240:	18c03717 	ldw	r3,220(r3)
  212244:	20c7c83a 	sub	r3,r4,r3
  212248:	18c00044 	addi	r3,r3,1
  21224c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  212250:	e0bff717 	ldw	r2,-36(fp)
  212254:	1004913a 	slli	r2,r2,4
  212258:	e0fffd17 	ldw	r3,-12(fp)
  21225c:	18a1883a 	add	r16,r3,r2
  212260:	e0fffe17 	ldw	r3,-8(fp)
  212264:	e0bff717 	ldw	r2,-36(fp)
  212268:	1004913a 	slli	r2,r2,4
  21226c:	1885883a 	add	r2,r3,r2
  212270:	10800e04 	addi	r2,r2,56
  212274:	10c00017 	ldw	r3,0(r2)
  212278:	e0bffe17 	ldw	r2,-8(fp)
  21227c:	10803f17 	ldw	r2,252(r2)
  212280:	100b883a 	mov	r5,r2
  212284:	1809883a 	mov	r4,r3
  212288:	0200a600 	call	200a60 <__divsi3>
  21228c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  212290:	e0bff717 	ldw	r2,-36(fp)
  212294:	1004913a 	slli	r2,r2,4
  212298:	e0fffd17 	ldw	r3,-12(fp)
  21229c:	1885883a 	add	r2,r3,r2
  2122a0:	e0fffe17 	ldw	r3,-8(fp)
  2122a4:	18c03f17 	ldw	r3,252(r3)
  2122a8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  2122ac:	e0bff717 	ldw	r2,-36(fp)
  2122b0:	10800044 	addi	r2,r2,1
  2122b4:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  2122b8:	e0bffe17 	ldw	r2,-8(fp)
  2122bc:	10803917 	ldw	r2,228(r2)
  2122c0:	10800058 	cmpnei	r2,r2,1
  2122c4:	10002f1e 	bne	r2,zero,212384 <altera_onchip_flash_init+0x3dc>
  2122c8:	e0bffb17 	ldw	r2,-20(fp)
  2122cc:	10804020 	cmpeqi	r2,r2,256
  2122d0:	10002c1e 	bne	r2,zero,212384 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  2122d4:	e0bff717 	ldw	r2,-36(fp)
  2122d8:	1004913a 	slli	r2,r2,4
  2122dc:	e0fffd17 	ldw	r3,-12(fp)
  2122e0:	1885883a 	add	r2,r3,r2
  2122e4:	e0fffe17 	ldw	r3,-8(fp)
  2122e8:	18c03a17 	ldw	r3,232(r3)
  2122ec:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  2122f0:	e0bff717 	ldw	r2,-36(fp)
  2122f4:	1004913a 	slli	r2,r2,4
  2122f8:	e0fffd17 	ldw	r3,-12(fp)
  2122fc:	1885883a 	add	r2,r3,r2
  212300:	e0fffe17 	ldw	r3,-8(fp)
  212304:	19003b17 	ldw	r4,236(r3)
  212308:	e0fffe17 	ldw	r3,-8(fp)
  21230c:	18c03a17 	ldw	r3,232(r3)
  212310:	20c7c83a 	sub	r3,r4,r3
  212314:	18c00044 	addi	r3,r3,1
  212318:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  21231c:	e0bff717 	ldw	r2,-36(fp)
  212320:	1004913a 	slli	r2,r2,4
  212324:	e0fffd17 	ldw	r3,-12(fp)
  212328:	18a1883a 	add	r16,r3,r2
  21232c:	e0fffe17 	ldw	r3,-8(fp)
  212330:	e0bff717 	ldw	r2,-36(fp)
  212334:	1004913a 	slli	r2,r2,4
  212338:	1885883a 	add	r2,r3,r2
  21233c:	10800e04 	addi	r2,r2,56
  212340:	10c00017 	ldw	r3,0(r2)
  212344:	e0bffe17 	ldw	r2,-8(fp)
  212348:	10803f17 	ldw	r2,252(r2)
  21234c:	100b883a 	mov	r5,r2
  212350:	1809883a 	mov	r4,r3
  212354:	0200a600 	call	200a60 <__divsi3>
  212358:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  21235c:	e0bff717 	ldw	r2,-36(fp)
  212360:	1004913a 	slli	r2,r2,4
  212364:	e0fffd17 	ldw	r3,-12(fp)
  212368:	1885883a 	add	r2,r3,r2
  21236c:	e0fffe17 	ldw	r3,-8(fp)
  212370:	18c03f17 	ldw	r3,252(r3)
  212374:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  212378:	e0bff717 	ldw	r2,-36(fp)
  21237c:	10800044 	addi	r2,r2,1
  212380:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  212384:	e0bffe17 	ldw	r2,-8(fp)
  212388:	10803c17 	ldw	r2,240(r2)
  21238c:	10800058 	cmpnei	r2,r2,1
  212390:	10002f1e 	bne	r2,zero,212450 <altera_onchip_flash_init+0x4a8>
  212394:	e0bffc17 	ldw	r2,-16(fp)
  212398:	10808020 	cmpeqi	r2,r2,512
  21239c:	10002c1e 	bne	r2,zero,212450 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  2123a0:	e0bff717 	ldw	r2,-36(fp)
  2123a4:	1004913a 	slli	r2,r2,4
  2123a8:	e0fffd17 	ldw	r3,-12(fp)
  2123ac:	1885883a 	add	r2,r3,r2
  2123b0:	e0fffe17 	ldw	r3,-8(fp)
  2123b4:	18c03d17 	ldw	r3,244(r3)
  2123b8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  2123bc:	e0bff717 	ldw	r2,-36(fp)
  2123c0:	1004913a 	slli	r2,r2,4
  2123c4:	e0fffd17 	ldw	r3,-12(fp)
  2123c8:	1885883a 	add	r2,r3,r2
  2123cc:	e0fffe17 	ldw	r3,-8(fp)
  2123d0:	19003e17 	ldw	r4,248(r3)
  2123d4:	e0fffe17 	ldw	r3,-8(fp)
  2123d8:	18c03d17 	ldw	r3,244(r3)
  2123dc:	20c7c83a 	sub	r3,r4,r3
  2123e0:	18c00044 	addi	r3,r3,1
  2123e4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  2123e8:	e0bff717 	ldw	r2,-36(fp)
  2123ec:	1004913a 	slli	r2,r2,4
  2123f0:	e0fffd17 	ldw	r3,-12(fp)
  2123f4:	18a1883a 	add	r16,r3,r2
  2123f8:	e0fffe17 	ldw	r3,-8(fp)
  2123fc:	e0bff717 	ldw	r2,-36(fp)
  212400:	1004913a 	slli	r2,r2,4
  212404:	1885883a 	add	r2,r3,r2
  212408:	10800e04 	addi	r2,r2,56
  21240c:	10c00017 	ldw	r3,0(r2)
  212410:	e0bffe17 	ldw	r2,-8(fp)
  212414:	10803f17 	ldw	r2,252(r2)
  212418:	100b883a 	mov	r5,r2
  21241c:	1809883a 	mov	r4,r3
  212420:	0200a600 	call	200a60 <__divsi3>
  212424:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  212428:	e0bff717 	ldw	r2,-36(fp)
  21242c:	1004913a 	slli	r2,r2,4
  212430:	e0fffd17 	ldw	r3,-12(fp)
  212434:	1885883a 	add	r2,r3,r2
  212438:	e0fffe17 	ldw	r3,-8(fp)
  21243c:	18c03f17 	ldw	r3,252(r3)
  212440:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  212444:	e0bff717 	ldw	r2,-36(fp)
  212448:	10800044 	addi	r2,r2,1
  21244c:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  212450:	e0bffe17 	ldw	r2,-8(fp)
  212454:	e0fff717 	ldw	r3,-36(fp)
  212458:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  21245c:	e0bffe17 	ldw	r2,-8(fp)
  212460:	1009883a 	mov	r4,r2
  212464:	02116f40 	call	2116f4 <alt_flash_device_register>
}
  212468:	0001883a 	nop
  21246c:	e6ffff04 	addi	sp,fp,-4
  212470:	dfc00217 	ldw	ra,8(sp)
  212474:	df000117 	ldw	fp,4(sp)
  212478:	dc000017 	ldw	r16,0(sp)
  21247c:	dec00304 	addi	sp,sp,12
  212480:	f800283a 	ret

00212484 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  212484:	defffa04 	addi	sp,sp,-24
  212488:	dfc00515 	stw	ra,20(sp)
  21248c:	df000415 	stw	fp,16(sp)
  212490:	df000404 	addi	fp,sp,16
  212494:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  212498:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  21249c:	008002f4 	movhi	r2,11
  2124a0:	10ab9804 	addi	r2,r2,-20896
  2124a4:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2124a8:	008002f4 	movhi	r2,11
  2124ac:	10ab9804 	addi	r2,r2,-20896
  2124b0:	e0bffd15 	stw	r2,-12(fp)

    while (
  2124b4:	00000c06 	br	2124e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  2124b8:	01000044 	movi	r4,1
  2124bc:	02127600 	call	212760 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  2124c0:	e0bffe17 	ldw	r2,-8(fp)
  2124c4:	10000826 	beq	r2,zero,2124e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  2124c8:	e0bffd17 	ldw	r2,-12(fp)
  2124cc:	10bfffc4 	addi	r2,r2,-1
  2124d0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2124d4:	e0bffd17 	ldw	r2,-12(fp)
  2124d8:	1000031e 	bne	r2,zero,2124e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2124dc:	00bfe304 	movi	r2,-116
  2124e0:	e0bffc15 	stw	r2,-16(fp)
                break;
  2124e4:	00000506 	br	2124fc <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  2124e8:	e0bfff17 	ldw	r2,-4(fp)
  2124ec:	10802f17 	ldw	r2,188(r2)
  2124f0:	10800037 	ldwio	r2,0(r2)
  2124f4:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  2124f8:	103fef1e 	bne	r2,zero,2124b8 <_gp+0xffe008d4>
                break;
            }
        }
    }

    return ret_code;
  2124fc:	e0bffc17 	ldw	r2,-16(fp)
}
  212500:	e037883a 	mov	sp,fp
  212504:	dfc00117 	ldw	ra,4(sp)
  212508:	df000017 	ldw	fp,0(sp)
  21250c:	dec00204 	addi	sp,sp,8
  212510:	f800283a 	ret

00212514 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  212514:	defffa04 	addi	sp,sp,-24
  212518:	dfc00515 	stw	ra,20(sp)
  21251c:	df000415 	stw	fp,16(sp)
  212520:	df000404 	addi	fp,sp,16
  212524:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  212528:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  21252c:	008002f4 	movhi	r2,11
  212530:	10ab9804 	addi	r2,r2,-20896
  212534:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  212538:	008002f4 	movhi	r2,11
  21253c:	10ab9804 	addi	r2,r2,-20896
  212540:	e0bffd15 	stw	r2,-12(fp)

    while (
  212544:	00000c06 	br	212578 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  212548:	01000044 	movi	r4,1
  21254c:	02127600 	call	212760 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  212550:	e0bffe17 	ldw	r2,-8(fp)
  212554:	10000826 	beq	r2,zero,212578 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  212558:	e0bffd17 	ldw	r2,-12(fp)
  21255c:	10bfffc4 	addi	r2,r2,-1
  212560:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  212564:	e0bffd17 	ldw	r2,-12(fp)
  212568:	1000031e 	bne	r2,zero,212578 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  21256c:	00bfe304 	movi	r2,-116
  212570:	e0bffc15 	stw	r2,-16(fp)
                break;
  212574:	00000506 	br	21258c <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  212578:	e0bfff17 	ldw	r2,-4(fp)
  21257c:	10802f17 	ldw	r2,188(r2)
  212580:	10800037 	ldwio	r2,0(r2)
  212584:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  212588:	103fef26 	beq	r2,zero,212548 <_gp+0xffe00964>
                break;
            }
        }
    }

    return ret_code;
  21258c:	e0bffc17 	ldw	r2,-16(fp)
}
  212590:	e037883a 	mov	sp,fp
  212594:	dfc00117 	ldw	ra,4(sp)
  212598:	df000017 	ldw	fp,0(sp)
  21259c:	dec00204 	addi	sp,sp,8
  2125a0:	f800283a 	ret

002125a4 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  2125a4:	defffa04 	addi	sp,sp,-24
  2125a8:	dfc00515 	stw	ra,20(sp)
  2125ac:	df000415 	stw	fp,16(sp)
  2125b0:	df000404 	addi	fp,sp,16
  2125b4:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  2125b8:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2125bc:	008002f4 	movhi	r2,11
  2125c0:	10ab9804 	addi	r2,r2,-20896
  2125c4:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2125c8:	008002f4 	movhi	r2,11
  2125cc:	10ab9804 	addi	r2,r2,-20896
  2125d0:	e0bffd15 	stw	r2,-12(fp)

    while (
  2125d4:	00000c06 	br	212608 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  2125d8:	01000044 	movi	r4,1
  2125dc:	02127600 	call	212760 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  2125e0:	e0bffe17 	ldw	r2,-8(fp)
  2125e4:	10000826 	beq	r2,zero,212608 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  2125e8:	e0bffd17 	ldw	r2,-12(fp)
  2125ec:	10bfffc4 	addi	r2,r2,-1
  2125f0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2125f4:	e0bffd17 	ldw	r2,-12(fp)
  2125f8:	1000031e 	bne	r2,zero,212608 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2125fc:	00bfe304 	movi	r2,-116
  212600:	e0bffc15 	stw	r2,-16(fp)
                break;
  212604:	00000506 	br	21261c <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  212608:	e0bfff17 	ldw	r2,-4(fp)
  21260c:	10802f17 	ldw	r2,188(r2)
  212610:	10800037 	ldwio	r2,0(r2)
  212614:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  212618:	103fef26 	beq	r2,zero,2125d8 <_gp+0xffe009f4>
                break;
            }
        }
    }

    return ret_code;
  21261c:	e0bffc17 	ldw	r2,-16(fp)
}
  212620:	e037883a 	mov	sp,fp
  212624:	dfc00117 	ldw	ra,4(sp)
  212628:	df000017 	ldw	fp,0(sp)
  21262c:	dec00204 	addi	sp,sp,8
  212630:	f800283a 	ret

00212634 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  212634:	defff504 	addi	sp,sp,-44
  212638:	df000a15 	stw	fp,40(sp)
  21263c:	df000a04 	addi	fp,sp,40
  212640:	e13ffc15 	stw	r4,-16(fp)
  212644:	e17ffd15 	stw	r5,-12(fp)
  212648:	e1bffe15 	stw	r6,-8(fp)
  21264c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  212650:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  212654:	d0a02117 	ldw	r2,-32636(gp)
  
  if (alt_ticks_per_second ())
  212658:	10003c26 	beq	r2,zero,21274c <alt_alarm_start+0x118>
  {
    if (alarm)
  21265c:	e0bffc17 	ldw	r2,-16(fp)
  212660:	10003826 	beq	r2,zero,212744 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  212664:	e0bffc17 	ldw	r2,-16(fp)
  212668:	e0fffe17 	ldw	r3,-8(fp)
  21266c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  212670:	e0bffc17 	ldw	r2,-16(fp)
  212674:	e0ffff17 	ldw	r3,-4(fp)
  212678:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  21267c:	0005303a 	rdctl	r2,status
  212680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212684:	e0fff917 	ldw	r3,-28(fp)
  212688:	00bfff84 	movi	r2,-2
  21268c:	1884703a 	and	r2,r3,r2
  212690:	1001703a 	wrctl	status,r2
  
  return context;
  212694:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  212698:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  21269c:	d0a02217 	ldw	r2,-32632(gp)
      
      current_nticks = alt_nticks();
  2126a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  2126a4:	e0fffd17 	ldw	r3,-12(fp)
  2126a8:	e0bff617 	ldw	r2,-40(fp)
  2126ac:	1885883a 	add	r2,r3,r2
  2126b0:	10c00044 	addi	r3,r2,1
  2126b4:	e0bffc17 	ldw	r2,-16(fp)
  2126b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  2126bc:	e0bffc17 	ldw	r2,-16(fp)
  2126c0:	10c00217 	ldw	r3,8(r2)
  2126c4:	e0bff617 	ldw	r2,-40(fp)
  2126c8:	1880042e 	bgeu	r3,r2,2126dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  2126cc:	e0bffc17 	ldw	r2,-16(fp)
  2126d0:	00c00044 	movi	r3,1
  2126d4:	10c00405 	stb	r3,16(r2)
  2126d8:	00000206 	br	2126e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  2126dc:	e0bffc17 	ldw	r2,-16(fp)
  2126e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  2126e4:	e0bffc17 	ldw	r2,-16(fp)
  2126e8:	d0e01404 	addi	r3,gp,-32688
  2126ec:	e0fffa15 	stw	r3,-24(fp)
  2126f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2126f4:	e0bffb17 	ldw	r2,-20(fp)
  2126f8:	e0fffa17 	ldw	r3,-24(fp)
  2126fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  212700:	e0bffa17 	ldw	r2,-24(fp)
  212704:	10c00017 	ldw	r3,0(r2)
  212708:	e0bffb17 	ldw	r2,-20(fp)
  21270c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  212710:	e0bffa17 	ldw	r2,-24(fp)
  212714:	10800017 	ldw	r2,0(r2)
  212718:	e0fffb17 	ldw	r3,-20(fp)
  21271c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  212720:	e0bffa17 	ldw	r2,-24(fp)
  212724:	e0fffb17 	ldw	r3,-20(fp)
  212728:	10c00015 	stw	r3,0(r2)
  21272c:	e0bff817 	ldw	r2,-32(fp)
  212730:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212734:	e0bff717 	ldw	r2,-36(fp)
  212738:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  21273c:	0005883a 	mov	r2,zero
  212740:	00000306 	br	212750 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  212744:	00bffa84 	movi	r2,-22
  212748:	00000106 	br	212750 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  21274c:	00bfde84 	movi	r2,-134
  }
}
  212750:	e037883a 	mov	sp,fp
  212754:	df000017 	ldw	fp,0(sp)
  212758:	dec00104 	addi	sp,sp,4
  21275c:	f800283a 	ret

00212760 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  212760:	defffa04 	addi	sp,sp,-24
  212764:	dfc00515 	stw	ra,20(sp)
  212768:	df000415 	stw	fp,16(sp)
  21276c:	df000404 	addi	fp,sp,16
  212770:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  212774:	00800244 	movi	r2,9
  212778:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  21277c:	014003f4 	movhi	r5,15
  212780:	29509004 	addi	r5,r5,16960
  212784:	e13ffd17 	ldw	r4,-12(fp)
  212788:	02017a80 	call	2017a8 <__mulsi3>
  21278c:	100b883a 	mov	r5,r2
  212790:	0100bef4 	movhi	r4,763
  212794:	213c2004 	addi	r4,r4,-3968
  212798:	0200b580 	call	200b58 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  21279c:	100b883a 	mov	r5,r2
  2127a0:	01200034 	movhi	r4,32768
  2127a4:	213fffc4 	addi	r4,r4,-1
  2127a8:	0200b580 	call	200b58 <__udivsi3>
  2127ac:	100b883a 	mov	r5,r2
  2127b0:	e13fff17 	ldw	r4,-4(fp)
  2127b4:	0200b580 	call	200b58 <__udivsi3>
  2127b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  2127bc:	e0bffe17 	ldw	r2,-8(fp)
  2127c0:	10002a26 	beq	r2,zero,21286c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  2127c4:	e03ffc15 	stw	zero,-16(fp)
  2127c8:	00001706 	br	212828 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  2127cc:	00a00034 	movhi	r2,32768
  2127d0:	10bfffc4 	addi	r2,r2,-1
  2127d4:	10bfffc4 	addi	r2,r2,-1
  2127d8:	103ffe1e 	bne	r2,zero,2127d4 <_gp+0xffe00bf0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  2127dc:	014003f4 	movhi	r5,15
  2127e0:	29509004 	addi	r5,r5,16960
  2127e4:	e13ffd17 	ldw	r4,-12(fp)
  2127e8:	02017a80 	call	2017a8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  2127ec:	100b883a 	mov	r5,r2
  2127f0:	0100bef4 	movhi	r4,763
  2127f4:	213c2004 	addi	r4,r4,-3968
  2127f8:	0200b580 	call	200b58 <__udivsi3>
  2127fc:	100b883a 	mov	r5,r2
  212800:	01200034 	movhi	r4,32768
  212804:	213fffc4 	addi	r4,r4,-1
  212808:	0200b580 	call	200b58 <__udivsi3>
  21280c:	1007883a 	mov	r3,r2
  212810:	e0bfff17 	ldw	r2,-4(fp)
  212814:	10c5c83a 	sub	r2,r2,r3
  212818:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  21281c:	e0bffc17 	ldw	r2,-16(fp)
  212820:	10800044 	addi	r2,r2,1
  212824:	e0bffc15 	stw	r2,-16(fp)
  212828:	e0fffc17 	ldw	r3,-16(fp)
  21282c:	e0bffe17 	ldw	r2,-8(fp)
  212830:	18bfe616 	blt	r3,r2,2127cc <_gp+0xffe00be8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  212834:	014003f4 	movhi	r5,15
  212838:	29509004 	addi	r5,r5,16960
  21283c:	e13ffd17 	ldw	r4,-12(fp)
  212840:	02017a80 	call	2017a8 <__mulsi3>
  212844:	100b883a 	mov	r5,r2
  212848:	0100bef4 	movhi	r4,763
  21284c:	213c2004 	addi	r4,r4,-3968
  212850:	0200b580 	call	200b58 <__udivsi3>
  212854:	e17fff17 	ldw	r5,-4(fp)
  212858:	1009883a 	mov	r4,r2
  21285c:	02017a80 	call	2017a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  212860:	10bfffc4 	addi	r2,r2,-1
  212864:	103ffe1e 	bne	r2,zero,212860 <_gp+0xffe00c7c>
  212868:	00000d06 	br	2128a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  21286c:	014003f4 	movhi	r5,15
  212870:	29509004 	addi	r5,r5,16960
  212874:	e13ffd17 	ldw	r4,-12(fp)
  212878:	02017a80 	call	2017a8 <__mulsi3>
  21287c:	100b883a 	mov	r5,r2
  212880:	0100bef4 	movhi	r4,763
  212884:	213c2004 	addi	r4,r4,-3968
  212888:	0200b580 	call	200b58 <__udivsi3>
  21288c:	e17fff17 	ldw	r5,-4(fp)
  212890:	1009883a 	mov	r4,r2
  212894:	02017a80 	call	2017a8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  212898:	10bfffc4 	addi	r2,r2,-1
  21289c:	00bffe16 	blt	zero,r2,212898 <_gp+0xffe00cb4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  2128a0:	0005883a 	mov	r2,zero
}
  2128a4:	e037883a 	mov	sp,fp
  2128a8:	dfc00117 	ldw	ra,4(sp)
  2128ac:	df000017 	ldw	fp,0(sp)
  2128b0:	dec00204 	addi	sp,sp,8
  2128b4:	f800283a 	ret

002128b8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  2128b8:	defffd04 	addi	sp,sp,-12
  2128bc:	df000215 	stw	fp,8(sp)
  2128c0:	df000204 	addi	fp,sp,8
  2128c4:	e13ffe15 	stw	r4,-8(fp)
  2128c8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2128cc:	0001883a 	nop
  2128d0:	e037883a 	mov	sp,fp
  2128d4:	df000017 	ldw	fp,0(sp)
  2128d8:	dec00104 	addi	sp,sp,4
  2128dc:	f800283a 	ret

002128e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  2128e0:	deffff04 	addi	sp,sp,-4
  2128e4:	df000015 	stw	fp,0(sp)
  2128e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2128ec:	0001883a 	nop
  2128f0:	e037883a 	mov	sp,fp
  2128f4:	df000017 	ldw	fp,0(sp)
  2128f8:	dec00104 	addi	sp,sp,4
  2128fc:	f800283a 	ret

00212900 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  212900:	defffe04 	addi	sp,sp,-8
  212904:	dfc00115 	stw	ra,4(sp)
  212908:	df000015 	stw	fp,0(sp)
  21290c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  212910:	d0a00b17 	ldw	r2,-32724(gp)
  212914:	10000326 	beq	r2,zero,212924 <alt_get_errno+0x24>
  212918:	d0a00b17 	ldw	r2,-32724(gp)
  21291c:	103ee83a 	callr	r2
  212920:	00000106 	br	212928 <alt_get_errno+0x28>
  212924:	d0a01c04 	addi	r2,gp,-32656
}
  212928:	e037883a 	mov	sp,fp
  21292c:	dfc00117 	ldw	ra,4(sp)
  212930:	df000017 	ldw	fp,0(sp)
  212934:	dec00204 	addi	sp,sp,8
  212938:	f800283a 	ret

0021293c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  21293c:	defffa04 	addi	sp,sp,-24
  212940:	dfc00515 	stw	ra,20(sp)
  212944:	df000415 	stw	fp,16(sp)
  212948:	df000404 	addi	fp,sp,16
  21294c:	e13ffe15 	stw	r4,-8(fp)
  212950:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  212954:	e0bffe17 	ldw	r2,-8(fp)
  212958:	10000326 	beq	r2,zero,212968 <alt_dev_llist_insert+0x2c>
  21295c:	e0bffe17 	ldw	r2,-8(fp)
  212960:	10800217 	ldw	r2,8(r2)
  212964:	1000061e 	bne	r2,zero,212980 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  212968:	02129000 	call	212900 <alt_get_errno>
  21296c:	1007883a 	mov	r3,r2
  212970:	00800584 	movi	r2,22
  212974:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  212978:	00bffa84 	movi	r2,-22
  21297c:	00001306 	br	2129cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  212980:	e0bffe17 	ldw	r2,-8(fp)
  212984:	e0ffff17 	ldw	r3,-4(fp)
  212988:	e0fffc15 	stw	r3,-16(fp)
  21298c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  212990:	e0bffd17 	ldw	r2,-12(fp)
  212994:	e0fffc17 	ldw	r3,-16(fp)
  212998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  21299c:	e0bffc17 	ldw	r2,-16(fp)
  2129a0:	10c00017 	ldw	r3,0(r2)
  2129a4:	e0bffd17 	ldw	r2,-12(fp)
  2129a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2129ac:	e0bffc17 	ldw	r2,-16(fp)
  2129b0:	10800017 	ldw	r2,0(r2)
  2129b4:	e0fffd17 	ldw	r3,-12(fp)
  2129b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  2129bc:	e0bffc17 	ldw	r2,-16(fp)
  2129c0:	e0fffd17 	ldw	r3,-12(fp)
  2129c4:	10c00015 	stw	r3,0(r2)

  return 0;  
  2129c8:	0005883a 	mov	r2,zero
}
  2129cc:	e037883a 	mov	sp,fp
  2129d0:	dfc00117 	ldw	ra,4(sp)
  2129d4:	df000017 	ldw	fp,0(sp)
  2129d8:	dec00204 	addi	sp,sp,8
  2129dc:	f800283a 	ret

002129e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  2129e0:	defffd04 	addi	sp,sp,-12
  2129e4:	dfc00215 	stw	ra,8(sp)
  2129e8:	df000115 	stw	fp,4(sp)
  2129ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  2129f0:	00800874 	movhi	r2,33
  2129f4:	108f8804 	addi	r2,r2,15904
  2129f8:	e0bfff15 	stw	r2,-4(fp)
  2129fc:	00000606 	br	212a18 <_do_ctors+0x38>
        (*ctor) (); 
  212a00:	e0bfff17 	ldw	r2,-4(fp)
  212a04:	10800017 	ldw	r2,0(r2)
  212a08:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  212a0c:	e0bfff17 	ldw	r2,-4(fp)
  212a10:	10bfff04 	addi	r2,r2,-4
  212a14:	e0bfff15 	stw	r2,-4(fp)
  212a18:	e0ffff17 	ldw	r3,-4(fp)
  212a1c:	00800874 	movhi	r2,33
  212a20:	108f8904 	addi	r2,r2,15908
  212a24:	18bff62e 	bgeu	r3,r2,212a00 <_gp+0xffe00e1c>
        (*ctor) (); 
}
  212a28:	0001883a 	nop
  212a2c:	e037883a 	mov	sp,fp
  212a30:	dfc00117 	ldw	ra,4(sp)
  212a34:	df000017 	ldw	fp,0(sp)
  212a38:	dec00204 	addi	sp,sp,8
  212a3c:	f800283a 	ret

00212a40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  212a40:	defffd04 	addi	sp,sp,-12
  212a44:	dfc00215 	stw	ra,8(sp)
  212a48:	df000115 	stw	fp,4(sp)
  212a4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  212a50:	00800874 	movhi	r2,33
  212a54:	108f8804 	addi	r2,r2,15904
  212a58:	e0bfff15 	stw	r2,-4(fp)
  212a5c:	00000606 	br	212a78 <_do_dtors+0x38>
        (*dtor) (); 
  212a60:	e0bfff17 	ldw	r2,-4(fp)
  212a64:	10800017 	ldw	r2,0(r2)
  212a68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  212a6c:	e0bfff17 	ldw	r2,-4(fp)
  212a70:	10bfff04 	addi	r2,r2,-4
  212a74:	e0bfff15 	stw	r2,-4(fp)
  212a78:	e0ffff17 	ldw	r3,-4(fp)
  212a7c:	00800874 	movhi	r2,33
  212a80:	108f8904 	addi	r2,r2,15908
  212a84:	18bff62e 	bgeu	r3,r2,212a60 <_gp+0xffe00e7c>
        (*dtor) (); 
}
  212a88:	0001883a 	nop
  212a8c:	e037883a 	mov	sp,fp
  212a90:	dfc00117 	ldw	ra,4(sp)
  212a94:	df000017 	ldw	fp,0(sp)
  212a98:	dec00204 	addi	sp,sp,8
  212a9c:	f800283a 	ret

00212aa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  212aa0:	defffa04 	addi	sp,sp,-24
  212aa4:	dfc00515 	stw	ra,20(sp)
  212aa8:	df000415 	stw	fp,16(sp)
  212aac:	df000404 	addi	fp,sp,16
  212ab0:	e13ffe15 	stw	r4,-8(fp)
  212ab4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  212ab8:	e0bfff17 	ldw	r2,-4(fp)
  212abc:	10800017 	ldw	r2,0(r2)
  212ac0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  212ac4:	e13ffe17 	ldw	r4,-8(fp)
  212ac8:	02019100 	call	201910 <strlen>
  212acc:	10800044 	addi	r2,r2,1
  212ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  212ad4:	00000d06 	br	212b0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  212ad8:	e0bffc17 	ldw	r2,-16(fp)
  212adc:	10800217 	ldw	r2,8(r2)
  212ae0:	e0fffd17 	ldw	r3,-12(fp)
  212ae4:	180d883a 	mov	r6,r3
  212ae8:	e17ffe17 	ldw	r5,-8(fp)
  212aec:	1009883a 	mov	r4,r2
  212af0:	02139740 	call	213974 <memcmp>
  212af4:	1000021e 	bne	r2,zero,212b00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  212af8:	e0bffc17 	ldw	r2,-16(fp)
  212afc:	00000706 	br	212b1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  212b00:	e0bffc17 	ldw	r2,-16(fp)
  212b04:	10800017 	ldw	r2,0(r2)
  212b08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  212b0c:	e0fffc17 	ldw	r3,-16(fp)
  212b10:	e0bfff17 	ldw	r2,-4(fp)
  212b14:	18bff01e 	bne	r3,r2,212ad8 <_gp+0xffe00ef4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  212b18:	0005883a 	mov	r2,zero
}
  212b1c:	e037883a 	mov	sp,fp
  212b20:	dfc00117 	ldw	ra,4(sp)
  212b24:	df000017 	ldw	fp,0(sp)
  212b28:	dec00204 	addi	sp,sp,8
  212b2c:	f800283a 	ret

00212b30 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  212b30:	defffc04 	addi	sp,sp,-16
  212b34:	dfc00315 	stw	ra,12(sp)
  212b38:	df000215 	stw	fp,8(sp)
  212b3c:	df000204 	addi	fp,sp,8
  212b40:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  212b44:	d1601104 	addi	r5,gp,-32700
  212b48:	e13fff17 	ldw	r4,-4(fp)
  212b4c:	0212aa00 	call	212aa0 <alt_find_dev>
  212b50:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  212b54:	e0bffe17 	ldw	r2,-8(fp)
  212b58:	10000926 	beq	r2,zero,212b80 <alt_flash_open_dev+0x50>
  212b5c:	e0bffe17 	ldw	r2,-8(fp)
  212b60:	10800317 	ldw	r2,12(r2)
  212b64:	10000626 	beq	r2,zero,212b80 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  212b68:	e0bffe17 	ldw	r2,-8(fp)
  212b6c:	10800317 	ldw	r2,12(r2)
  212b70:	e17fff17 	ldw	r5,-4(fp)
  212b74:	e13ffe17 	ldw	r4,-8(fp)
  212b78:	103ee83a 	callr	r2
  212b7c:	00000106 	br	212b84 <alt_flash_open_dev+0x54>
  }

  return dev;
  212b80:	e0bffe17 	ldw	r2,-8(fp)
}
  212b84:	e037883a 	mov	sp,fp
  212b88:	dfc00117 	ldw	ra,4(sp)
  212b8c:	df000017 	ldw	fp,0(sp)
  212b90:	dec00204 	addi	sp,sp,8
  212b94:	f800283a 	ret

00212b98 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  212b98:	defffd04 	addi	sp,sp,-12
  212b9c:	dfc00215 	stw	ra,8(sp)
  212ba0:	df000115 	stw	fp,4(sp)
  212ba4:	df000104 	addi	fp,sp,4
  212ba8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  212bac:	e0bfff17 	ldw	r2,-4(fp)
  212bb0:	10000826 	beq	r2,zero,212bd4 <alt_flash_close_dev+0x3c>
  212bb4:	e0bfff17 	ldw	r2,-4(fp)
  212bb8:	10800417 	ldw	r2,16(r2)
  212bbc:	10000526 	beq	r2,zero,212bd4 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  212bc0:	e0bfff17 	ldw	r2,-4(fp)
  212bc4:	10800417 	ldw	r2,16(r2)
  212bc8:	e13fff17 	ldw	r4,-4(fp)
  212bcc:	103ee83a 	callr	r2
  }
  return;
  212bd0:	0001883a 	nop
  212bd4:	0001883a 	nop
}
  212bd8:	e037883a 	mov	sp,fp
  212bdc:	dfc00117 	ldw	ra,4(sp)
  212be0:	df000017 	ldw	fp,0(sp)
  212be4:	dec00204 	addi	sp,sp,8
  212be8:	f800283a 	ret

00212bec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  212bec:	deffff04 	addi	sp,sp,-4
  212bf0:	df000015 	stw	fp,0(sp)
  212bf4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  212bf8:	0001883a 	nop
  212bfc:	e037883a 	mov	sp,fp
  212c00:	df000017 	ldw	fp,0(sp)
  212c04:	dec00104 	addi	sp,sp,4
  212c08:	f800283a 	ret

00212c0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  212c0c:	defff904 	addi	sp,sp,-28
  212c10:	dfc00615 	stw	ra,24(sp)
  212c14:	df000515 	stw	fp,20(sp)
  212c18:	df000504 	addi	fp,sp,20
  212c1c:	e13ffc15 	stw	r4,-16(fp)
  212c20:	e17ffd15 	stw	r5,-12(fp)
  212c24:	e1bffe15 	stw	r6,-8(fp)
  212c28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  212c2c:	e0800217 	ldw	r2,8(fp)
  212c30:	d8800015 	stw	r2,0(sp)
  212c34:	e1ffff17 	ldw	r7,-4(fp)
  212c38:	e1bffe17 	ldw	r6,-8(fp)
  212c3c:	e17ffd17 	ldw	r5,-12(fp)
  212c40:	e13ffc17 	ldw	r4,-16(fp)
  212c44:	0212dbc0 	call	212dbc <alt_iic_isr_register>
}  
  212c48:	e037883a 	mov	sp,fp
  212c4c:	dfc00117 	ldw	ra,4(sp)
  212c50:	df000017 	ldw	fp,0(sp)
  212c54:	dec00204 	addi	sp,sp,8
  212c58:	f800283a 	ret

00212c5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  212c5c:	defff904 	addi	sp,sp,-28
  212c60:	df000615 	stw	fp,24(sp)
  212c64:	df000604 	addi	fp,sp,24
  212c68:	e13ffe15 	stw	r4,-8(fp)
  212c6c:	e17fff15 	stw	r5,-4(fp)
  212c70:	e0bfff17 	ldw	r2,-4(fp)
  212c74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212c78:	0005303a 	rdctl	r2,status
  212c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212c80:	e0fffb17 	ldw	r3,-20(fp)
  212c84:	00bfff84 	movi	r2,-2
  212c88:	1884703a 	and	r2,r3,r2
  212c8c:	1001703a 	wrctl	status,r2
  
  return context;
  212c90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  212c94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  212c98:	00c00044 	movi	r3,1
  212c9c:	e0bffa17 	ldw	r2,-24(fp)
  212ca0:	1884983a 	sll	r2,r3,r2
  212ca4:	1007883a 	mov	r3,r2
  212ca8:	d0a02017 	ldw	r2,-32640(gp)
  212cac:	1884b03a 	or	r2,r3,r2
  212cb0:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  212cb4:	d0a02017 	ldw	r2,-32640(gp)
  212cb8:	100170fa 	wrctl	ienable,r2
  212cbc:	e0bffc17 	ldw	r2,-16(fp)
  212cc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212cc4:	e0bffd17 	ldw	r2,-12(fp)
  212cc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  212ccc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  212cd0:	0001883a 	nop
}
  212cd4:	e037883a 	mov	sp,fp
  212cd8:	df000017 	ldw	fp,0(sp)
  212cdc:	dec00104 	addi	sp,sp,4
  212ce0:	f800283a 	ret

00212ce4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  212ce4:	defff904 	addi	sp,sp,-28
  212ce8:	df000615 	stw	fp,24(sp)
  212cec:	df000604 	addi	fp,sp,24
  212cf0:	e13ffe15 	stw	r4,-8(fp)
  212cf4:	e17fff15 	stw	r5,-4(fp)
  212cf8:	e0bfff17 	ldw	r2,-4(fp)
  212cfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212d00:	0005303a 	rdctl	r2,status
  212d04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212d08:	e0fffb17 	ldw	r3,-20(fp)
  212d0c:	00bfff84 	movi	r2,-2
  212d10:	1884703a 	and	r2,r3,r2
  212d14:	1001703a 	wrctl	status,r2
  
  return context;
  212d18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  212d1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  212d20:	00c00044 	movi	r3,1
  212d24:	e0bffa17 	ldw	r2,-24(fp)
  212d28:	1884983a 	sll	r2,r3,r2
  212d2c:	0084303a 	nor	r2,zero,r2
  212d30:	1007883a 	mov	r3,r2
  212d34:	d0a02017 	ldw	r2,-32640(gp)
  212d38:	1884703a 	and	r2,r3,r2
  212d3c:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  212d40:	d0a02017 	ldw	r2,-32640(gp)
  212d44:	100170fa 	wrctl	ienable,r2
  212d48:	e0bffc17 	ldw	r2,-16(fp)
  212d4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212d50:	e0bffd17 	ldw	r2,-12(fp)
  212d54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  212d58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  212d5c:	0001883a 	nop
}
  212d60:	e037883a 	mov	sp,fp
  212d64:	df000017 	ldw	fp,0(sp)
  212d68:	dec00104 	addi	sp,sp,4
  212d6c:	f800283a 	ret

00212d70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  212d70:	defffc04 	addi	sp,sp,-16
  212d74:	df000315 	stw	fp,12(sp)
  212d78:	df000304 	addi	fp,sp,12
  212d7c:	e13ffe15 	stw	r4,-8(fp)
  212d80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  212d84:	000530fa 	rdctl	r2,ienable
  212d88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  212d8c:	00c00044 	movi	r3,1
  212d90:	e0bfff17 	ldw	r2,-4(fp)
  212d94:	1884983a 	sll	r2,r3,r2
  212d98:	1007883a 	mov	r3,r2
  212d9c:	e0bffd17 	ldw	r2,-12(fp)
  212da0:	1884703a 	and	r2,r3,r2
  212da4:	1004c03a 	cmpne	r2,r2,zero
  212da8:	10803fcc 	andi	r2,r2,255
}
  212dac:	e037883a 	mov	sp,fp
  212db0:	df000017 	ldw	fp,0(sp)
  212db4:	dec00104 	addi	sp,sp,4
  212db8:	f800283a 	ret

00212dbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  212dbc:	defff504 	addi	sp,sp,-44
  212dc0:	dfc00a15 	stw	ra,40(sp)
  212dc4:	df000915 	stw	fp,36(sp)
  212dc8:	df000904 	addi	fp,sp,36
  212dcc:	e13ffc15 	stw	r4,-16(fp)
  212dd0:	e17ffd15 	stw	r5,-12(fp)
  212dd4:	e1bffe15 	stw	r6,-8(fp)
  212dd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  212ddc:	00bffa84 	movi	r2,-22
  212de0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  212de4:	e0bffd17 	ldw	r2,-12(fp)
  212de8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  212dec:	e0bff817 	ldw	r2,-32(fp)
  212df0:	10800808 	cmpgei	r2,r2,32
  212df4:	1000271e 	bne	r2,zero,212e94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212df8:	0005303a 	rdctl	r2,status
  212dfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212e00:	e0fffb17 	ldw	r3,-20(fp)
  212e04:	00bfff84 	movi	r2,-2
  212e08:	1884703a 	and	r2,r3,r2
  212e0c:	1001703a 	wrctl	status,r2
  
  return context;
  212e10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  212e14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  212e18:	00801074 	movhi	r2,65
  212e1c:	10a72704 	addi	r2,r2,-25444
  212e20:	e0fff817 	ldw	r3,-32(fp)
  212e24:	180690fa 	slli	r3,r3,3
  212e28:	10c5883a 	add	r2,r2,r3
  212e2c:	e0fffe17 	ldw	r3,-8(fp)
  212e30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  212e34:	00801074 	movhi	r2,65
  212e38:	10a72704 	addi	r2,r2,-25444
  212e3c:	e0fff817 	ldw	r3,-32(fp)
  212e40:	180690fa 	slli	r3,r3,3
  212e44:	10c5883a 	add	r2,r2,r3
  212e48:	10800104 	addi	r2,r2,4
  212e4c:	e0ffff17 	ldw	r3,-4(fp)
  212e50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  212e54:	e0bffe17 	ldw	r2,-8(fp)
  212e58:	10000526 	beq	r2,zero,212e70 <alt_iic_isr_register+0xb4>
  212e5c:	e0bff817 	ldw	r2,-32(fp)
  212e60:	100b883a 	mov	r5,r2
  212e64:	e13ffc17 	ldw	r4,-16(fp)
  212e68:	0212c5c0 	call	212c5c <alt_ic_irq_enable>
  212e6c:	00000406 	br	212e80 <alt_iic_isr_register+0xc4>
  212e70:	e0bff817 	ldw	r2,-32(fp)
  212e74:	100b883a 	mov	r5,r2
  212e78:	e13ffc17 	ldw	r4,-16(fp)
  212e7c:	0212ce40 	call	212ce4 <alt_ic_irq_disable>
  212e80:	e0bff715 	stw	r2,-36(fp)
  212e84:	e0bffa17 	ldw	r2,-24(fp)
  212e88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212e8c:	e0bff917 	ldw	r2,-28(fp)
  212e90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  212e94:	e0bff717 	ldw	r2,-36(fp)
}
  212e98:	e037883a 	mov	sp,fp
  212e9c:	dfc00117 	ldw	ra,4(sp)
  212ea0:	df000017 	ldw	fp,0(sp)
  212ea4:	dec00204 	addi	sp,sp,8
  212ea8:	f800283a 	ret

00212eac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  212eac:	defff804 	addi	sp,sp,-32
  212eb0:	dfc00715 	stw	ra,28(sp)
  212eb4:	df000615 	stw	fp,24(sp)
  212eb8:	dc000515 	stw	r16,20(sp)
  212ebc:	df000604 	addi	fp,sp,24
  212ec0:	e13ffb15 	stw	r4,-20(fp)
  212ec4:	e17ffc15 	stw	r5,-16(fp)
  212ec8:	e1bffd15 	stw	r6,-12(fp)
  212ecc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  212ed0:	e1bffe17 	ldw	r6,-8(fp)
  212ed4:	e17ffd17 	ldw	r5,-12(fp)
  212ed8:	e13ffc17 	ldw	r4,-16(fp)
  212edc:	02131340 	call	213134 <open>
  212ee0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  212ee4:	e0bffa17 	ldw	r2,-24(fp)
  212ee8:	10002216 	blt	r2,zero,212f74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  212eec:	04001074 	movhi	r16,65
  212ef0:	84223304 	addi	r16,r16,-30516
  212ef4:	e0bffa17 	ldw	r2,-24(fp)
  212ef8:	01400304 	movi	r5,12
  212efc:	1009883a 	mov	r4,r2
  212f00:	02017a80 	call	2017a8 <__mulsi3>
  212f04:	8085883a 	add	r2,r16,r2
  212f08:	10c00017 	ldw	r3,0(r2)
  212f0c:	e0bffb17 	ldw	r2,-20(fp)
  212f10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  212f14:	04001074 	movhi	r16,65
  212f18:	84223304 	addi	r16,r16,-30516
  212f1c:	e0bffa17 	ldw	r2,-24(fp)
  212f20:	01400304 	movi	r5,12
  212f24:	1009883a 	mov	r4,r2
  212f28:	02017a80 	call	2017a8 <__mulsi3>
  212f2c:	8085883a 	add	r2,r16,r2
  212f30:	10800104 	addi	r2,r2,4
  212f34:	10c00017 	ldw	r3,0(r2)
  212f38:	e0bffb17 	ldw	r2,-20(fp)
  212f3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  212f40:	04001074 	movhi	r16,65
  212f44:	84223304 	addi	r16,r16,-30516
  212f48:	e0bffa17 	ldw	r2,-24(fp)
  212f4c:	01400304 	movi	r5,12
  212f50:	1009883a 	mov	r4,r2
  212f54:	02017a80 	call	2017a8 <__mulsi3>
  212f58:	8085883a 	add	r2,r16,r2
  212f5c:	10800204 	addi	r2,r2,8
  212f60:	10c00017 	ldw	r3,0(r2)
  212f64:	e0bffb17 	ldw	r2,-20(fp)
  212f68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  212f6c:	e13ffa17 	ldw	r4,-24(fp)
  212f70:	020ebf40 	call	20ebf4 <alt_release_fd>
  }
} 
  212f74:	0001883a 	nop
  212f78:	e6ffff04 	addi	sp,fp,-4
  212f7c:	dfc00217 	ldw	ra,8(sp)
  212f80:	df000117 	ldw	fp,4(sp)
  212f84:	dc000017 	ldw	r16,0(sp)
  212f88:	dec00304 	addi	sp,sp,12
  212f8c:	f800283a 	ret

00212f90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  212f90:	defffb04 	addi	sp,sp,-20
  212f94:	dfc00415 	stw	ra,16(sp)
  212f98:	df000315 	stw	fp,12(sp)
  212f9c:	df000304 	addi	fp,sp,12
  212fa0:	e13ffd15 	stw	r4,-12(fp)
  212fa4:	e17ffe15 	stw	r5,-8(fp)
  212fa8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  212fac:	01c07fc4 	movi	r7,511
  212fb0:	01800044 	movi	r6,1
  212fb4:	e17ffd17 	ldw	r5,-12(fp)
  212fb8:	01001074 	movhi	r4,65
  212fbc:	21223604 	addi	r4,r4,-30504
  212fc0:	0212eac0 	call	212eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  212fc4:	01c07fc4 	movi	r7,511
  212fc8:	000d883a 	mov	r6,zero
  212fcc:	e17ffe17 	ldw	r5,-8(fp)
  212fd0:	01001074 	movhi	r4,65
  212fd4:	21223304 	addi	r4,r4,-30516
  212fd8:	0212eac0 	call	212eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  212fdc:	01c07fc4 	movi	r7,511
  212fe0:	01800044 	movi	r6,1
  212fe4:	e17fff17 	ldw	r5,-4(fp)
  212fe8:	01001074 	movhi	r4,65
  212fec:	21223904 	addi	r4,r4,-30492
  212ff0:	0212eac0 	call	212eac <alt_open_fd>
}  
  212ff4:	0001883a 	nop
  212ff8:	e037883a 	mov	sp,fp
  212ffc:	dfc00117 	ldw	ra,4(sp)
  213000:	df000017 	ldw	fp,0(sp)
  213004:	dec00204 	addi	sp,sp,8
  213008:	f800283a 	ret

0021300c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  21300c:	defffe04 	addi	sp,sp,-8
  213010:	dfc00115 	stw	ra,4(sp)
  213014:	df000015 	stw	fp,0(sp)
  213018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  21301c:	d0a00b17 	ldw	r2,-32724(gp)
  213020:	10000326 	beq	r2,zero,213030 <alt_get_errno+0x24>
  213024:	d0a00b17 	ldw	r2,-32724(gp)
  213028:	103ee83a 	callr	r2
  21302c:	00000106 	br	213034 <alt_get_errno+0x28>
  213030:	d0a01c04 	addi	r2,gp,-32656
}
  213034:	e037883a 	mov	sp,fp
  213038:	dfc00117 	ldw	ra,4(sp)
  21303c:	df000017 	ldw	fp,0(sp)
  213040:	dec00204 	addi	sp,sp,8
  213044:	f800283a 	ret

00213048 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  213048:	defffb04 	addi	sp,sp,-20
  21304c:	dfc00415 	stw	ra,16(sp)
  213050:	df000315 	stw	fp,12(sp)
  213054:	dc000215 	stw	r16,8(sp)
  213058:	df000304 	addi	fp,sp,12
  21305c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  213060:	e0bffe17 	ldw	r2,-8(fp)
  213064:	10800217 	ldw	r2,8(r2)
  213068:	10d00034 	orhi	r3,r2,16384
  21306c:	e0bffe17 	ldw	r2,-8(fp)
  213070:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  213074:	e03ffd15 	stw	zero,-12(fp)
  213078:	00002306 	br	213108 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  21307c:	04001074 	movhi	r16,65
  213080:	84223304 	addi	r16,r16,-30516
  213084:	e0bffd17 	ldw	r2,-12(fp)
  213088:	01400304 	movi	r5,12
  21308c:	1009883a 	mov	r4,r2
  213090:	02017a80 	call	2017a8 <__mulsi3>
  213094:	8085883a 	add	r2,r16,r2
  213098:	10c00017 	ldw	r3,0(r2)
  21309c:	e0bffe17 	ldw	r2,-8(fp)
  2130a0:	10800017 	ldw	r2,0(r2)
  2130a4:	1880151e 	bne	r3,r2,2130fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  2130a8:	04001074 	movhi	r16,65
  2130ac:	84223304 	addi	r16,r16,-30516
  2130b0:	e0bffd17 	ldw	r2,-12(fp)
  2130b4:	01400304 	movi	r5,12
  2130b8:	1009883a 	mov	r4,r2
  2130bc:	02017a80 	call	2017a8 <__mulsi3>
  2130c0:	8085883a 	add	r2,r16,r2
  2130c4:	10800204 	addi	r2,r2,8
  2130c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  2130cc:	10000b0e 	bge	r2,zero,2130fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  2130d0:	01400304 	movi	r5,12
  2130d4:	e13ffd17 	ldw	r4,-12(fp)
  2130d8:	02017a80 	call	2017a8 <__mulsi3>
  2130dc:	1007883a 	mov	r3,r2
  2130e0:	00801074 	movhi	r2,65
  2130e4:	10a23304 	addi	r2,r2,-30516
  2130e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  2130ec:	e0bffe17 	ldw	r2,-8(fp)
  2130f0:	18800226 	beq	r3,r2,2130fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  2130f4:	00bffcc4 	movi	r2,-13
  2130f8:	00000806 	br	21311c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  2130fc:	e0bffd17 	ldw	r2,-12(fp)
  213100:	10800044 	addi	r2,r2,1
  213104:	e0bffd15 	stw	r2,-12(fp)
  213108:	d0a00a17 	ldw	r2,-32728(gp)
  21310c:	1007883a 	mov	r3,r2
  213110:	e0bffd17 	ldw	r2,-12(fp)
  213114:	18bfd92e 	bgeu	r3,r2,21307c <_gp+0xffe01498>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  213118:	0005883a 	mov	r2,zero
}
  21311c:	e6ffff04 	addi	sp,fp,-4
  213120:	dfc00217 	ldw	ra,8(sp)
  213124:	df000117 	ldw	fp,4(sp)
  213128:	dc000017 	ldw	r16,0(sp)
  21312c:	dec00304 	addi	sp,sp,12
  213130:	f800283a 	ret

00213134 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  213134:	defff604 	addi	sp,sp,-40
  213138:	dfc00915 	stw	ra,36(sp)
  21313c:	df000815 	stw	fp,32(sp)
  213140:	df000804 	addi	fp,sp,32
  213144:	e13ffd15 	stw	r4,-12(fp)
  213148:	e17ffe15 	stw	r5,-8(fp)
  21314c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  213150:	00bfffc4 	movi	r2,-1
  213154:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  213158:	00bffb44 	movi	r2,-19
  21315c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  213160:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  213164:	d1600804 	addi	r5,gp,-32736
  213168:	e13ffd17 	ldw	r4,-12(fp)
  21316c:	0212aa00 	call	212aa0 <alt_find_dev>
  213170:	e0bff815 	stw	r2,-32(fp)
  213174:	e0bff817 	ldw	r2,-32(fp)
  213178:	1000051e 	bne	r2,zero,213190 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  21317c:	e13ffd17 	ldw	r4,-12(fp)
  213180:	02136c00 	call	2136c0 <alt_find_file>
  213184:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  213188:	00800044 	movi	r2,1
  21318c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  213190:	e0bff817 	ldw	r2,-32(fp)
  213194:	10002b26 	beq	r2,zero,213244 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  213198:	e13ff817 	ldw	r4,-32(fp)
  21319c:	02137c80 	call	2137c8 <alt_get_fd>
  2131a0:	e0bff915 	stw	r2,-28(fp)
  2131a4:	e0bff917 	ldw	r2,-28(fp)
  2131a8:	1000030e 	bge	r2,zero,2131b8 <open+0x84>
    {
      status = index;
  2131ac:	e0bff917 	ldw	r2,-28(fp)
  2131b0:	e0bffa15 	stw	r2,-24(fp)
  2131b4:	00002506 	br	21324c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  2131b8:	01400304 	movi	r5,12
  2131bc:	e13ff917 	ldw	r4,-28(fp)
  2131c0:	02017a80 	call	2017a8 <__mulsi3>
  2131c4:	1007883a 	mov	r3,r2
  2131c8:	00801074 	movhi	r2,65
  2131cc:	10a23304 	addi	r2,r2,-30516
  2131d0:	1885883a 	add	r2,r3,r2
  2131d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  2131d8:	e0fffe17 	ldw	r3,-8(fp)
  2131dc:	00900034 	movhi	r2,16384
  2131e0:	10bfffc4 	addi	r2,r2,-1
  2131e4:	1886703a 	and	r3,r3,r2
  2131e8:	e0bffc17 	ldw	r2,-16(fp)
  2131ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  2131f0:	e0bffb17 	ldw	r2,-20(fp)
  2131f4:	1000051e 	bne	r2,zero,21320c <open+0xd8>
  2131f8:	e13ffc17 	ldw	r4,-16(fp)
  2131fc:	02130480 	call	213048 <alt_file_locked>
  213200:	e0bffa15 	stw	r2,-24(fp)
  213204:	e0bffa17 	ldw	r2,-24(fp)
  213208:	10001016 	blt	r2,zero,21324c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  21320c:	e0bff817 	ldw	r2,-32(fp)
  213210:	10800317 	ldw	r2,12(r2)
  213214:	10000826 	beq	r2,zero,213238 <open+0x104>
  213218:	e0bff817 	ldw	r2,-32(fp)
  21321c:	10800317 	ldw	r2,12(r2)
  213220:	e1ffff17 	ldw	r7,-4(fp)
  213224:	e1bffe17 	ldw	r6,-8(fp)
  213228:	e17ffd17 	ldw	r5,-12(fp)
  21322c:	e13ffc17 	ldw	r4,-16(fp)
  213230:	103ee83a 	callr	r2
  213234:	00000106 	br	21323c <open+0x108>
  213238:	0005883a 	mov	r2,zero
  21323c:	e0bffa15 	stw	r2,-24(fp)
  213240:	00000206 	br	21324c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  213244:	00bffb44 	movi	r2,-19
  213248:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  21324c:	e0bffa17 	ldw	r2,-24(fp)
  213250:	1000090e 	bge	r2,zero,213278 <open+0x144>
  {
    alt_release_fd (index);  
  213254:	e13ff917 	ldw	r4,-28(fp)
  213258:	020ebf40 	call	20ebf4 <alt_release_fd>
    ALT_ERRNO = -status;
  21325c:	021300c0 	call	21300c <alt_get_errno>
  213260:	1007883a 	mov	r3,r2
  213264:	e0bffa17 	ldw	r2,-24(fp)
  213268:	0085c83a 	sub	r2,zero,r2
  21326c:	18800015 	stw	r2,0(r3)
    return -1;
  213270:	00bfffc4 	movi	r2,-1
  213274:	00000106 	br	21327c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  213278:	e0bff917 	ldw	r2,-28(fp)
}
  21327c:	e037883a 	mov	sp,fp
  213280:	dfc00117 	ldw	ra,4(sp)
  213284:	df000017 	ldw	fp,0(sp)
  213288:	dec00204 	addi	sp,sp,8
  21328c:	f800283a 	ret

00213290 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  213290:	defff204 	addi	sp,sp,-56
  213294:	dfc00a15 	stw	ra,40(sp)
  213298:	df000915 	stw	fp,36(sp)
  21329c:	df000904 	addi	fp,sp,36
  2132a0:	e13fff15 	stw	r4,-4(fp)
  2132a4:	e1400215 	stw	r5,8(fp)
  2132a8:	e1800315 	stw	r6,12(fp)
  2132ac:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  2132b0:	e0800204 	addi	r2,fp,8
  2132b4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  2132b8:	e0bfff17 	ldw	r2,-4(fp)
  2132bc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  2132c0:	00006f06 	br	213480 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  2132c4:	e0bff807 	ldb	r2,-32(fp)
  2132c8:	10800960 	cmpeqi	r2,r2,37
  2132cc:	1000041e 	bne	r2,zero,2132e0 <alt_printf+0x50>
        {
            alt_putchar(c);
  2132d0:	e0bff807 	ldb	r2,-32(fp)
  2132d4:	1009883a 	mov	r4,r2
  2132d8:	02134bc0 	call	2134bc <alt_putchar>
  2132dc:	00006806 	br	213480 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  2132e0:	e0bff717 	ldw	r2,-36(fp)
  2132e4:	10c00044 	addi	r3,r2,1
  2132e8:	e0fff715 	stw	r3,-36(fp)
  2132ec:	10800003 	ldbu	r2,0(r2)
  2132f0:	e0bff805 	stb	r2,-32(fp)
  2132f4:	e0bff807 	ldb	r2,-32(fp)
  2132f8:	10006926 	beq	r2,zero,2134a0 <alt_printf+0x210>
            {
                if (c == '%')
  2132fc:	e0bff807 	ldb	r2,-32(fp)
  213300:	10800958 	cmpnei	r2,r2,37
  213304:	1000041e 	bne	r2,zero,213318 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  213308:	e0bff807 	ldb	r2,-32(fp)
  21330c:	1009883a 	mov	r4,r2
  213310:	02134bc0 	call	2134bc <alt_putchar>
  213314:	00005a06 	br	213480 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  213318:	e0bff807 	ldb	r2,-32(fp)
  21331c:	108018d8 	cmpnei	r2,r2,99
  213320:	1000081e 	bne	r2,zero,213344 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  213324:	e0bffe17 	ldw	r2,-8(fp)
  213328:	10c00104 	addi	r3,r2,4
  21332c:	e0fffe15 	stw	r3,-8(fp)
  213330:	10800017 	ldw	r2,0(r2)
  213334:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  213338:	e13ffd17 	ldw	r4,-12(fp)
  21333c:	02134bc0 	call	2134bc <alt_putchar>
  213340:	00004f06 	br	213480 <alt_printf+0x1f0>
                }
                else if (c == 'x')
  213344:	e0bff807 	ldb	r2,-32(fp)
  213348:	10801e18 	cmpnei	r2,r2,120
  21334c:	1000341e 	bne	r2,zero,213420 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  213350:	e0bffe17 	ldw	r2,-8(fp)
  213354:	10c00104 	addi	r3,r2,4
  213358:	e0fffe15 	stw	r3,-8(fp)
  21335c:	10800017 	ldw	r2,0(r2)
  213360:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  213364:	e0bffb17 	ldw	r2,-20(fp)
  213368:	1000031e 	bne	r2,zero,213378 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  21336c:	01000c04 	movi	r4,48
  213370:	02134bc0 	call	2134bc <alt_putchar>
                        continue;
  213374:	00004206 	br	213480 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  213378:	00800704 	movi	r2,28
  21337c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  213380:	00000306 	br	213390 <alt_printf+0x100>
                        digit_shift -= 4;
  213384:	e0bff917 	ldw	r2,-28(fp)
  213388:	10bfff04 	addi	r2,r2,-4
  21338c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  213390:	00c003c4 	movi	r3,15
  213394:	e0bff917 	ldw	r2,-28(fp)
  213398:	1884983a 	sll	r2,r3,r2
  21339c:	1007883a 	mov	r3,r2
  2133a0:	e0bffb17 	ldw	r2,-20(fp)
  2133a4:	1884703a 	and	r2,r3,r2
  2133a8:	103ff626 	beq	r2,zero,213384 <_gp+0xffe017a0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  2133ac:	00001906 	br	213414 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  2133b0:	00c003c4 	movi	r3,15
  2133b4:	e0bff917 	ldw	r2,-28(fp)
  2133b8:	1884983a 	sll	r2,r3,r2
  2133bc:	1007883a 	mov	r3,r2
  2133c0:	e0bffb17 	ldw	r2,-20(fp)
  2133c4:	1886703a 	and	r3,r3,r2
  2133c8:	e0bff917 	ldw	r2,-28(fp)
  2133cc:	1884d83a 	srl	r2,r3,r2
  2133d0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  2133d4:	e0bffc17 	ldw	r2,-16(fp)
  2133d8:	108002a8 	cmpgeui	r2,r2,10
  2133dc:	1000041e 	bne	r2,zero,2133f0 <alt_printf+0x160>
                            c = '0' + digit;
  2133e0:	e0bffc17 	ldw	r2,-16(fp)
  2133e4:	10800c04 	addi	r2,r2,48
  2133e8:	e0bff805 	stb	r2,-32(fp)
  2133ec:	00000306 	br	2133fc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  2133f0:	e0bffc17 	ldw	r2,-16(fp)
  2133f4:	108015c4 	addi	r2,r2,87
  2133f8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  2133fc:	e0bff807 	ldb	r2,-32(fp)
  213400:	1009883a 	mov	r4,r2
  213404:	02134bc0 	call	2134bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  213408:	e0bff917 	ldw	r2,-28(fp)
  21340c:	10bfff04 	addi	r2,r2,-4
  213410:	e0bff915 	stw	r2,-28(fp)
  213414:	e0bff917 	ldw	r2,-28(fp)
  213418:	103fe50e 	bge	r2,zero,2133b0 <_gp+0xffe017cc>
  21341c:	00001806 	br	213480 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  213420:	e0bff807 	ldb	r2,-32(fp)
  213424:	10801cd8 	cmpnei	r2,r2,115
  213428:	1000151e 	bne	r2,zero,213480 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  21342c:	e0bffe17 	ldw	r2,-8(fp)
  213430:	10c00104 	addi	r3,r2,4
  213434:	e0fffe15 	stw	r3,-8(fp)
  213438:	10800017 	ldw	r2,0(r2)
  21343c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  213440:	00000906 	br	213468 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  213444:	e0bffa17 	ldw	r2,-24(fp)
  213448:	10c00044 	addi	r3,r2,1
  21344c:	e0fffa15 	stw	r3,-24(fp)
  213450:	10800003 	ldbu	r2,0(r2)
  213454:	10803fcc 	andi	r2,r2,255
  213458:	1080201c 	xori	r2,r2,128
  21345c:	10bfe004 	addi	r2,r2,-128
  213460:	1009883a 	mov	r4,r2
  213464:	02134bc0 	call	2134bc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  213468:	e0bffa17 	ldw	r2,-24(fp)
  21346c:	10800003 	ldbu	r2,0(r2)
  213470:	10803fcc 	andi	r2,r2,255
  213474:	1080201c 	xori	r2,r2,128
  213478:	10bfe004 	addi	r2,r2,-128
  21347c:	103ff11e 	bne	r2,zero,213444 <_gp+0xffe01860>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  213480:	e0bff717 	ldw	r2,-36(fp)
  213484:	10c00044 	addi	r3,r2,1
  213488:	e0fff715 	stw	r3,-36(fp)
  21348c:	10800003 	ldbu	r2,0(r2)
  213490:	e0bff805 	stb	r2,-32(fp)
  213494:	e0bff807 	ldb	r2,-32(fp)
  213498:	103f8a1e 	bne	r2,zero,2132c4 <_gp+0xffe016e0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  21349c:	00000106 	br	2134a4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  2134a0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  2134a4:	0001883a 	nop
  2134a8:	e037883a 	mov	sp,fp
  2134ac:	dfc00117 	ldw	ra,4(sp)
  2134b0:	df000017 	ldw	fp,0(sp)
  2134b4:	dec00504 	addi	sp,sp,20
  2134b8:	f800283a 	ret

002134bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  2134bc:	defffd04 	addi	sp,sp,-12
  2134c0:	dfc00215 	stw	ra,8(sp)
  2134c4:	df000115 	stw	fp,4(sp)
  2134c8:	df000104 	addi	fp,sp,4
  2134cc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  2134d0:	d0a00117 	ldw	r2,-32764(gp)
  2134d4:	10800217 	ldw	r2,8(r2)
  2134d8:	100b883a 	mov	r5,r2
  2134dc:	e13fff17 	ldw	r4,-4(fp)
  2134e0:	0213a900 	call	213a90 <putc>
#endif
#endif
}
  2134e4:	e037883a 	mov	sp,fp
  2134e8:	dfc00117 	ldw	ra,4(sp)
  2134ec:	df000017 	ldw	fp,0(sp)
  2134f0:	dec00204 	addi	sp,sp,8
  2134f4:	f800283a 	ret

002134f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  2134f8:	defffa04 	addi	sp,sp,-24
  2134fc:	df000515 	stw	fp,20(sp)
  213500:	df000504 	addi	fp,sp,20
  213504:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  213508:	0005303a 	rdctl	r2,status
  21350c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213510:	e0fffc17 	ldw	r3,-16(fp)
  213514:	00bfff84 	movi	r2,-2
  213518:	1884703a 	and	r2,r3,r2
  21351c:	1001703a 	wrctl	status,r2
  
  return context;
  213520:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  213524:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  213528:	e0bfff17 	ldw	r2,-4(fp)
  21352c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  213530:	e0bffd17 	ldw	r2,-12(fp)
  213534:	10800017 	ldw	r2,0(r2)
  213538:	e0fffd17 	ldw	r3,-12(fp)
  21353c:	18c00117 	ldw	r3,4(r3)
  213540:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  213544:	e0bffd17 	ldw	r2,-12(fp)
  213548:	10800117 	ldw	r2,4(r2)
  21354c:	e0fffd17 	ldw	r3,-12(fp)
  213550:	18c00017 	ldw	r3,0(r3)
  213554:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  213558:	e0bffd17 	ldw	r2,-12(fp)
  21355c:	e0fffd17 	ldw	r3,-12(fp)
  213560:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  213564:	e0bffd17 	ldw	r2,-12(fp)
  213568:	e0fffd17 	ldw	r3,-12(fp)
  21356c:	10c00015 	stw	r3,0(r2)
  213570:	e0bffb17 	ldw	r2,-20(fp)
  213574:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  213578:	e0bffe17 	ldw	r2,-8(fp)
  21357c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  213580:	0001883a 	nop
  213584:	e037883a 	mov	sp,fp
  213588:	df000017 	ldw	fp,0(sp)
  21358c:	dec00104 	addi	sp,sp,4
  213590:	f800283a 	ret

00213594 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  213594:	defffb04 	addi	sp,sp,-20
  213598:	dfc00415 	stw	ra,16(sp)
  21359c:	df000315 	stw	fp,12(sp)
  2135a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  2135a4:	d0a01417 	ldw	r2,-32688(gp)
  2135a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  2135ac:	d0a02217 	ldw	r2,-32632(gp)
  2135b0:	10800044 	addi	r2,r2,1
  2135b4:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  2135b8:	00002e06 	br	213674 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  2135bc:	e0bffd17 	ldw	r2,-12(fp)
  2135c0:	10800017 	ldw	r2,0(r2)
  2135c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  2135c8:	e0bffd17 	ldw	r2,-12(fp)
  2135cc:	10800403 	ldbu	r2,16(r2)
  2135d0:	10803fcc 	andi	r2,r2,255
  2135d4:	10000426 	beq	r2,zero,2135e8 <alt_tick+0x54>
  2135d8:	d0a02217 	ldw	r2,-32632(gp)
  2135dc:	1000021e 	bne	r2,zero,2135e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  2135e0:	e0bffd17 	ldw	r2,-12(fp)
  2135e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  2135e8:	e0bffd17 	ldw	r2,-12(fp)
  2135ec:	10800217 	ldw	r2,8(r2)
  2135f0:	d0e02217 	ldw	r3,-32632(gp)
  2135f4:	18801d36 	bltu	r3,r2,21366c <alt_tick+0xd8>
  2135f8:	e0bffd17 	ldw	r2,-12(fp)
  2135fc:	10800403 	ldbu	r2,16(r2)
  213600:	10803fcc 	andi	r2,r2,255
  213604:	1000191e 	bne	r2,zero,21366c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  213608:	e0bffd17 	ldw	r2,-12(fp)
  21360c:	10800317 	ldw	r2,12(r2)
  213610:	e0fffd17 	ldw	r3,-12(fp)
  213614:	18c00517 	ldw	r3,20(r3)
  213618:	1809883a 	mov	r4,r3
  21361c:	103ee83a 	callr	r2
  213620:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  213624:	e0bfff17 	ldw	r2,-4(fp)
  213628:	1000031e 	bne	r2,zero,213638 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  21362c:	e13ffd17 	ldw	r4,-12(fp)
  213630:	02134f80 	call	2134f8 <alt_alarm_stop>
  213634:	00000d06 	br	21366c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  213638:	e0bffd17 	ldw	r2,-12(fp)
  21363c:	10c00217 	ldw	r3,8(r2)
  213640:	e0bfff17 	ldw	r2,-4(fp)
  213644:	1887883a 	add	r3,r3,r2
  213648:	e0bffd17 	ldw	r2,-12(fp)
  21364c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  213650:	e0bffd17 	ldw	r2,-12(fp)
  213654:	10c00217 	ldw	r3,8(r2)
  213658:	d0a02217 	ldw	r2,-32632(gp)
  21365c:	1880032e 	bgeu	r3,r2,21366c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  213660:	e0bffd17 	ldw	r2,-12(fp)
  213664:	00c00044 	movi	r3,1
  213668:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  21366c:	e0bffe17 	ldw	r2,-8(fp)
  213670:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  213674:	e0fffd17 	ldw	r3,-12(fp)
  213678:	d0a01404 	addi	r2,gp,-32688
  21367c:	18bfcf1e 	bne	r3,r2,2135bc <_gp+0xffe019d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  213680:	0001883a 	nop
}
  213684:	0001883a 	nop
  213688:	e037883a 	mov	sp,fp
  21368c:	dfc00117 	ldw	ra,4(sp)
  213690:	df000017 	ldw	fp,0(sp)
  213694:	dec00204 	addi	sp,sp,8
  213698:	f800283a 	ret

0021369c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  21369c:	deffff04 	addi	sp,sp,-4
  2136a0:	df000015 	stw	fp,0(sp)
  2136a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  2136a8:	000170fa 	wrctl	ienable,zero
}
  2136ac:	0001883a 	nop
  2136b0:	e037883a 	mov	sp,fp
  2136b4:	df000017 	ldw	fp,0(sp)
  2136b8:	dec00104 	addi	sp,sp,4
  2136bc:	f800283a 	ret

002136c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  2136c0:	defffb04 	addi	sp,sp,-20
  2136c4:	dfc00415 	stw	ra,16(sp)
  2136c8:	df000315 	stw	fp,12(sp)
  2136cc:	df000304 	addi	fp,sp,12
  2136d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2136d4:	d0a00617 	ldw	r2,-32744(gp)
  2136d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2136dc:	00003106 	br	2137a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2136e0:	e0bffd17 	ldw	r2,-12(fp)
  2136e4:	10800217 	ldw	r2,8(r2)
  2136e8:	1009883a 	mov	r4,r2
  2136ec:	02019100 	call	201910 <strlen>
  2136f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  2136f4:	e0bffd17 	ldw	r2,-12(fp)
  2136f8:	10c00217 	ldw	r3,8(r2)
  2136fc:	e0bffe17 	ldw	r2,-8(fp)
  213700:	10bfffc4 	addi	r2,r2,-1
  213704:	1885883a 	add	r2,r3,r2
  213708:	10800003 	ldbu	r2,0(r2)
  21370c:	10803fcc 	andi	r2,r2,255
  213710:	1080201c 	xori	r2,r2,128
  213714:	10bfe004 	addi	r2,r2,-128
  213718:	10800bd8 	cmpnei	r2,r2,47
  21371c:	1000031e 	bne	r2,zero,21372c <alt_find_file+0x6c>
    {
      len -= 1;
  213720:	e0bffe17 	ldw	r2,-8(fp)
  213724:	10bfffc4 	addi	r2,r2,-1
  213728:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  21372c:	e0bffe17 	ldw	r2,-8(fp)
  213730:	e0ffff17 	ldw	r3,-4(fp)
  213734:	1885883a 	add	r2,r3,r2
  213738:	10800003 	ldbu	r2,0(r2)
  21373c:	10803fcc 	andi	r2,r2,255
  213740:	1080201c 	xori	r2,r2,128
  213744:	10bfe004 	addi	r2,r2,-128
  213748:	10800be0 	cmpeqi	r2,r2,47
  21374c:	1000081e 	bne	r2,zero,213770 <alt_find_file+0xb0>
  213750:	e0bffe17 	ldw	r2,-8(fp)
  213754:	e0ffff17 	ldw	r3,-4(fp)
  213758:	1885883a 	add	r2,r3,r2
  21375c:	10800003 	ldbu	r2,0(r2)
  213760:	10803fcc 	andi	r2,r2,255
  213764:	1080201c 	xori	r2,r2,128
  213768:	10bfe004 	addi	r2,r2,-128
  21376c:	10000a1e 	bne	r2,zero,213798 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  213770:	e0bffd17 	ldw	r2,-12(fp)
  213774:	10800217 	ldw	r2,8(r2)
  213778:	e0fffe17 	ldw	r3,-8(fp)
  21377c:	180d883a 	mov	r6,r3
  213780:	e17fff17 	ldw	r5,-4(fp)
  213784:	1009883a 	mov	r4,r2
  213788:	02139740 	call	213974 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  21378c:	1000021e 	bne	r2,zero,213798 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  213790:	e0bffd17 	ldw	r2,-12(fp)
  213794:	00000706 	br	2137b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  213798:	e0bffd17 	ldw	r2,-12(fp)
  21379c:	10800017 	ldw	r2,0(r2)
  2137a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2137a4:	e0fffd17 	ldw	r3,-12(fp)
  2137a8:	d0a00604 	addi	r2,gp,-32744
  2137ac:	18bfcc1e 	bne	r3,r2,2136e0 <_gp+0xffe01afc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  2137b0:	0005883a 	mov	r2,zero
}
  2137b4:	e037883a 	mov	sp,fp
  2137b8:	dfc00117 	ldw	ra,4(sp)
  2137bc:	df000017 	ldw	fp,0(sp)
  2137c0:	dec00204 	addi	sp,sp,8
  2137c4:	f800283a 	ret

002137c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2137c8:	defffa04 	addi	sp,sp,-24
  2137cc:	dfc00515 	stw	ra,20(sp)
  2137d0:	df000415 	stw	fp,16(sp)
  2137d4:	dc000315 	stw	r16,12(sp)
  2137d8:	df000404 	addi	fp,sp,16
  2137dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  2137e0:	00bffa04 	movi	r2,-24
  2137e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2137e8:	e03ffc15 	stw	zero,-16(fp)
  2137ec:	00001d06 	br	213864 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  2137f0:	04001074 	movhi	r16,65
  2137f4:	84223304 	addi	r16,r16,-30516
  2137f8:	e0bffc17 	ldw	r2,-16(fp)
  2137fc:	01400304 	movi	r5,12
  213800:	1009883a 	mov	r4,r2
  213804:	02017a80 	call	2017a8 <__mulsi3>
  213808:	8085883a 	add	r2,r16,r2
  21380c:	10800017 	ldw	r2,0(r2)
  213810:	1000111e 	bne	r2,zero,213858 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  213814:	04001074 	movhi	r16,65
  213818:	84223304 	addi	r16,r16,-30516
  21381c:	e0bffc17 	ldw	r2,-16(fp)
  213820:	01400304 	movi	r5,12
  213824:	1009883a 	mov	r4,r2
  213828:	02017a80 	call	2017a8 <__mulsi3>
  21382c:	8085883a 	add	r2,r16,r2
  213830:	e0fffe17 	ldw	r3,-8(fp)
  213834:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  213838:	d0e00a17 	ldw	r3,-32728(gp)
  21383c:	e0bffc17 	ldw	r2,-16(fp)
  213840:	1880020e 	bge	r3,r2,21384c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  213844:	e0bffc17 	ldw	r2,-16(fp)
  213848:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  21384c:	e0bffc17 	ldw	r2,-16(fp)
  213850:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  213854:	00000606 	br	213870 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  213858:	e0bffc17 	ldw	r2,-16(fp)
  21385c:	10800044 	addi	r2,r2,1
  213860:	e0bffc15 	stw	r2,-16(fp)
  213864:	e0bffc17 	ldw	r2,-16(fp)
  213868:	10800810 	cmplti	r2,r2,32
  21386c:	103fe01e 	bne	r2,zero,2137f0 <_gp+0xffe01c0c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  213870:	e0bffd17 	ldw	r2,-12(fp)
}
  213874:	e6ffff04 	addi	sp,fp,-4
  213878:	dfc00217 	ldw	ra,8(sp)
  21387c:	df000117 	ldw	fp,4(sp)
  213880:	dc000017 	ldw	r16,0(sp)
  213884:	dec00304 	addi	sp,sp,12
  213888:	f800283a 	ret

0021388c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  21388c:	defffe04 	addi	sp,sp,-8
  213890:	df000115 	stw	fp,4(sp)
  213894:	df000104 	addi	fp,sp,4
  213898:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  21389c:	e0bfff17 	ldw	r2,-4(fp)
  2138a0:	10bffe84 	addi	r2,r2,-6
  2138a4:	10c00428 	cmpgeui	r3,r2,16
  2138a8:	18001a1e 	bne	r3,zero,213914 <alt_exception_cause_generated_bad_addr+0x88>
  2138ac:	100690ba 	slli	r3,r2,2
  2138b0:	00800874 	movhi	r2,33
  2138b4:	108e3104 	addi	r2,r2,14532
  2138b8:	1885883a 	add	r2,r3,r2
  2138bc:	10800017 	ldw	r2,0(r2)
  2138c0:	1000683a 	jmp	r2
  2138c4:	00213904 	movi	zero,-31516
  2138c8:	00213904 	movi	zero,-31516
  2138cc:	00213914 	movui	zero,34020
  2138d0:	00213914 	movui	zero,34020
  2138d4:	00213914 	movui	zero,34020
  2138d8:	00213904 	movi	zero,-31516
  2138dc:	0021390c 	andi	zero,zero,34020
  2138e0:	00213914 	movui	zero,34020
  2138e4:	00213904 	movi	zero,-31516
  2138e8:	00213904 	movi	zero,-31516
  2138ec:	00213914 	movui	zero,34020
  2138f0:	00213904 	movi	zero,-31516
  2138f4:	0021390c 	andi	zero,zero,34020
  2138f8:	00213914 	movui	zero,34020
  2138fc:	00213914 	movui	zero,34020
  213900:	00213904 	movi	zero,-31516
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  213904:	00800044 	movi	r2,1
  213908:	00000306 	br	213918 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  21390c:	0005883a 	mov	r2,zero
  213910:	00000106 	br	213918 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  213914:	0005883a 	mov	r2,zero
  }
}
  213918:	e037883a 	mov	sp,fp
  21391c:	df000017 	ldw	fp,0(sp)
  213920:	dec00104 	addi	sp,sp,4
  213924:	f800283a 	ret

00213928 <atexit>:
  213928:	200b883a 	mov	r5,r4
  21392c:	000f883a 	mov	r7,zero
  213930:	000d883a 	mov	r6,zero
  213934:	0009883a 	mov	r4,zero
  213938:	0213b581 	jmpi	213b58 <__register_exitproc>

0021393c <exit>:
  21393c:	defffe04 	addi	sp,sp,-8
  213940:	000b883a 	mov	r5,zero
  213944:	dc000015 	stw	r16,0(sp)
  213948:	dfc00115 	stw	ra,4(sp)
  21394c:	2021883a 	mov	r16,r4
  213950:	0213c700 	call	213c70 <__call_exitprocs>
  213954:	00801074 	movhi	r2,65
  213958:	10a6f904 	addi	r2,r2,-25628
  21395c:	11000017 	ldw	r4,0(r2)
  213960:	20800f17 	ldw	r2,60(r4)
  213964:	10000126 	beq	r2,zero,21396c <exit+0x30>
  213968:	103ee83a 	callr	r2
  21396c:	8009883a 	mov	r4,r16
  213970:	0213df00 	call	213df0 <_exit>

00213974 <memcmp>:
  213974:	01c000c4 	movi	r7,3
  213978:	3980192e 	bgeu	r7,r6,2139e0 <memcmp+0x6c>
  21397c:	2144b03a 	or	r2,r4,r5
  213980:	11c4703a 	and	r2,r2,r7
  213984:	10000f26 	beq	r2,zero,2139c4 <memcmp+0x50>
  213988:	20800003 	ldbu	r2,0(r4)
  21398c:	28c00003 	ldbu	r3,0(r5)
  213990:	10c0151e 	bne	r2,r3,2139e8 <memcmp+0x74>
  213994:	31bfff84 	addi	r6,r6,-2
  213998:	01ffffc4 	movi	r7,-1
  21399c:	00000406 	br	2139b0 <memcmp+0x3c>
  2139a0:	20800003 	ldbu	r2,0(r4)
  2139a4:	28c00003 	ldbu	r3,0(r5)
  2139a8:	31bfffc4 	addi	r6,r6,-1
  2139ac:	10c00e1e 	bne	r2,r3,2139e8 <memcmp+0x74>
  2139b0:	21000044 	addi	r4,r4,1
  2139b4:	29400044 	addi	r5,r5,1
  2139b8:	31fff91e 	bne	r6,r7,2139a0 <_gp+0xffe01dbc>
  2139bc:	0005883a 	mov	r2,zero
  2139c0:	f800283a 	ret
  2139c4:	20c00017 	ldw	r3,0(r4)
  2139c8:	28800017 	ldw	r2,0(r5)
  2139cc:	18bfee1e 	bne	r3,r2,213988 <_gp+0xffe01da4>
  2139d0:	31bfff04 	addi	r6,r6,-4
  2139d4:	21000104 	addi	r4,r4,4
  2139d8:	29400104 	addi	r5,r5,4
  2139dc:	39bff936 	bltu	r7,r6,2139c4 <_gp+0xffe01de0>
  2139e0:	303fe91e 	bne	r6,zero,213988 <_gp+0xffe01da4>
  2139e4:	003ff506 	br	2139bc <_gp+0xffe01dd8>
  2139e8:	10c5c83a 	sub	r2,r2,r3
  2139ec:	f800283a 	ret

002139f0 <_putc_r>:
  2139f0:	defffc04 	addi	sp,sp,-16
  2139f4:	dc000215 	stw	r16,8(sp)
  2139f8:	dfc00315 	stw	ra,12(sp)
  2139fc:	2021883a 	mov	r16,r4
  213a00:	20000226 	beq	r4,zero,213a0c <_putc_r+0x1c>
  213a04:	20800e17 	ldw	r2,56(r4)
  213a08:	10001b26 	beq	r2,zero,213a78 <_putc_r+0x88>
  213a0c:	30800217 	ldw	r2,8(r6)
  213a10:	10bfffc4 	addi	r2,r2,-1
  213a14:	30800215 	stw	r2,8(r6)
  213a18:	10000a16 	blt	r2,zero,213a44 <_putc_r+0x54>
  213a1c:	30800017 	ldw	r2,0(r6)
  213a20:	11400005 	stb	r5,0(r2)
  213a24:	30800017 	ldw	r2,0(r6)
  213a28:	10c00044 	addi	r3,r2,1
  213a2c:	30c00015 	stw	r3,0(r6)
  213a30:	10800003 	ldbu	r2,0(r2)
  213a34:	dfc00317 	ldw	ra,12(sp)
  213a38:	dc000217 	ldw	r16,8(sp)
  213a3c:	dec00404 	addi	sp,sp,16
  213a40:	f800283a 	ret
  213a44:	30c00617 	ldw	r3,24(r6)
  213a48:	10c00616 	blt	r2,r3,213a64 <_putc_r+0x74>
  213a4c:	30800017 	ldw	r2,0(r6)
  213a50:	00c00284 	movi	r3,10
  213a54:	11400005 	stb	r5,0(r2)
  213a58:	30800017 	ldw	r2,0(r6)
  213a5c:	11400003 	ldbu	r5,0(r2)
  213a60:	28fff11e 	bne	r5,r3,213a28 <_gp+0xffe01e44>
  213a64:	8009883a 	mov	r4,r16
  213a68:	dfc00317 	ldw	ra,12(sp)
  213a6c:	dc000217 	ldw	r16,8(sp)
  213a70:	dec00404 	addi	sp,sp,16
  213a74:	020ad901 	jmpi	20ad90 <__swbuf_r>
  213a78:	d9400015 	stw	r5,0(sp)
  213a7c:	d9800115 	stw	r6,4(sp)
  213a80:	0205d680 	call	205d68 <__sinit>
  213a84:	d9800117 	ldw	r6,4(sp)
  213a88:	d9400017 	ldw	r5,0(sp)
  213a8c:	003fdf06 	br	213a0c <_gp+0xffe01e28>

00213a90 <putc>:
  213a90:	00801074 	movhi	r2,65
  213a94:	defffc04 	addi	sp,sp,-16
  213a98:	10a6fa04 	addi	r2,r2,-25624
  213a9c:	dc000115 	stw	r16,4(sp)
  213aa0:	14000017 	ldw	r16,0(r2)
  213aa4:	dc400215 	stw	r17,8(sp)
  213aa8:	dfc00315 	stw	ra,12(sp)
  213aac:	2023883a 	mov	r17,r4
  213ab0:	80000226 	beq	r16,zero,213abc <putc+0x2c>
  213ab4:	80800e17 	ldw	r2,56(r16)
  213ab8:	10001a26 	beq	r2,zero,213b24 <putc+0x94>
  213abc:	28800217 	ldw	r2,8(r5)
  213ac0:	10bfffc4 	addi	r2,r2,-1
  213ac4:	28800215 	stw	r2,8(r5)
  213ac8:	10000b16 	blt	r2,zero,213af8 <putc+0x68>
  213acc:	28800017 	ldw	r2,0(r5)
  213ad0:	14400005 	stb	r17,0(r2)
  213ad4:	28800017 	ldw	r2,0(r5)
  213ad8:	10c00044 	addi	r3,r2,1
  213adc:	28c00015 	stw	r3,0(r5)
  213ae0:	10800003 	ldbu	r2,0(r2)
  213ae4:	dfc00317 	ldw	ra,12(sp)
  213ae8:	dc400217 	ldw	r17,8(sp)
  213aec:	dc000117 	ldw	r16,4(sp)
  213af0:	dec00404 	addi	sp,sp,16
  213af4:	f800283a 	ret
  213af8:	28c00617 	ldw	r3,24(r5)
  213afc:	10c00e16 	blt	r2,r3,213b38 <putc+0xa8>
  213b00:	28800017 	ldw	r2,0(r5)
  213b04:	01000284 	movi	r4,10
  213b08:	14400005 	stb	r17,0(r2)
  213b0c:	28800017 	ldw	r2,0(r5)
  213b10:	10c00003 	ldbu	r3,0(r2)
  213b14:	193ff01e 	bne	r3,r4,213ad8 <_gp+0xffe01ef4>
  213b18:	280d883a 	mov	r6,r5
  213b1c:	180b883a 	mov	r5,r3
  213b20:	00000706 	br	213b40 <putc+0xb0>
  213b24:	8009883a 	mov	r4,r16
  213b28:	d9400015 	stw	r5,0(sp)
  213b2c:	0205d680 	call	205d68 <__sinit>
  213b30:	d9400017 	ldw	r5,0(sp)
  213b34:	003fe106 	br	213abc <_gp+0xffe01ed8>
  213b38:	280d883a 	mov	r6,r5
  213b3c:	880b883a 	mov	r5,r17
  213b40:	8009883a 	mov	r4,r16
  213b44:	dfc00317 	ldw	ra,12(sp)
  213b48:	dc400217 	ldw	r17,8(sp)
  213b4c:	dc000117 	ldw	r16,4(sp)
  213b50:	dec00404 	addi	sp,sp,16
  213b54:	020ad901 	jmpi	20ad90 <__swbuf_r>

00213b58 <__register_exitproc>:
  213b58:	defffa04 	addi	sp,sp,-24
  213b5c:	dc000315 	stw	r16,12(sp)
  213b60:	04001074 	movhi	r16,65
  213b64:	8426f904 	addi	r16,r16,-25628
  213b68:	80c00017 	ldw	r3,0(r16)
  213b6c:	dc400415 	stw	r17,16(sp)
  213b70:	dfc00515 	stw	ra,20(sp)
  213b74:	18805217 	ldw	r2,328(r3)
  213b78:	2023883a 	mov	r17,r4
  213b7c:	10003726 	beq	r2,zero,213c5c <__register_exitproc+0x104>
  213b80:	10c00117 	ldw	r3,4(r2)
  213b84:	010007c4 	movi	r4,31
  213b88:	20c00e16 	blt	r4,r3,213bc4 <__register_exitproc+0x6c>
  213b8c:	1a000044 	addi	r8,r3,1
  213b90:	8800221e 	bne	r17,zero,213c1c <__register_exitproc+0xc4>
  213b94:	18c00084 	addi	r3,r3,2
  213b98:	18c7883a 	add	r3,r3,r3
  213b9c:	18c7883a 	add	r3,r3,r3
  213ba0:	12000115 	stw	r8,4(r2)
  213ba4:	10c7883a 	add	r3,r2,r3
  213ba8:	19400015 	stw	r5,0(r3)
  213bac:	0005883a 	mov	r2,zero
  213bb0:	dfc00517 	ldw	ra,20(sp)
  213bb4:	dc400417 	ldw	r17,16(sp)
  213bb8:	dc000317 	ldw	r16,12(sp)
  213bbc:	dec00604 	addi	sp,sp,24
  213bc0:	f800283a 	ret
  213bc4:	00800034 	movhi	r2,0
  213bc8:	10800004 	addi	r2,r2,0
  213bcc:	10002626 	beq	r2,zero,213c68 <__register_exitproc+0x110>
  213bd0:	01006404 	movi	r4,400
  213bd4:	d9400015 	stw	r5,0(sp)
  213bd8:	d9800115 	stw	r6,4(sp)
  213bdc:	d9c00215 	stw	r7,8(sp)
  213be0:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  213be4:	d9400017 	ldw	r5,0(sp)
  213be8:	d9800117 	ldw	r6,4(sp)
  213bec:	d9c00217 	ldw	r7,8(sp)
  213bf0:	10001d26 	beq	r2,zero,213c68 <__register_exitproc+0x110>
  213bf4:	81000017 	ldw	r4,0(r16)
  213bf8:	10000115 	stw	zero,4(r2)
  213bfc:	02000044 	movi	r8,1
  213c00:	22405217 	ldw	r9,328(r4)
  213c04:	0007883a 	mov	r3,zero
  213c08:	12400015 	stw	r9,0(r2)
  213c0c:	20805215 	stw	r2,328(r4)
  213c10:	10006215 	stw	zero,392(r2)
  213c14:	10006315 	stw	zero,396(r2)
  213c18:	883fde26 	beq	r17,zero,213b94 <_gp+0xffe01fb0>
  213c1c:	18c9883a 	add	r4,r3,r3
  213c20:	2109883a 	add	r4,r4,r4
  213c24:	1109883a 	add	r4,r2,r4
  213c28:	21802215 	stw	r6,136(r4)
  213c2c:	01800044 	movi	r6,1
  213c30:	12406217 	ldw	r9,392(r2)
  213c34:	30cc983a 	sll	r6,r6,r3
  213c38:	4992b03a 	or	r9,r9,r6
  213c3c:	12406215 	stw	r9,392(r2)
  213c40:	21c04215 	stw	r7,264(r4)
  213c44:	01000084 	movi	r4,2
  213c48:	893fd21e 	bne	r17,r4,213b94 <_gp+0xffe01fb0>
  213c4c:	11006317 	ldw	r4,396(r2)
  213c50:	218cb03a 	or	r6,r4,r6
  213c54:	11806315 	stw	r6,396(r2)
  213c58:	003fce06 	br	213b94 <_gp+0xffe01fb0>
  213c5c:	18805304 	addi	r2,r3,332
  213c60:	18805215 	stw	r2,328(r3)
  213c64:	003fc606 	br	213b80 <_gp+0xffe01f9c>
  213c68:	00bfffc4 	movi	r2,-1
  213c6c:	003fd006 	br	213bb0 <_gp+0xffe01fcc>

00213c70 <__call_exitprocs>:
  213c70:	defff504 	addi	sp,sp,-44
  213c74:	df000915 	stw	fp,36(sp)
  213c78:	dd400615 	stw	r21,24(sp)
  213c7c:	dc800315 	stw	r18,12(sp)
  213c80:	dfc00a15 	stw	ra,40(sp)
  213c84:	ddc00815 	stw	r23,32(sp)
  213c88:	dd800715 	stw	r22,28(sp)
  213c8c:	dd000515 	stw	r20,20(sp)
  213c90:	dcc00415 	stw	r19,16(sp)
  213c94:	dc400215 	stw	r17,8(sp)
  213c98:	dc000115 	stw	r16,4(sp)
  213c9c:	d9000015 	stw	r4,0(sp)
  213ca0:	2839883a 	mov	fp,r5
  213ca4:	04800044 	movi	r18,1
  213ca8:	057fffc4 	movi	r21,-1
  213cac:	00801074 	movhi	r2,65
  213cb0:	10a6f904 	addi	r2,r2,-25628
  213cb4:	12000017 	ldw	r8,0(r2)
  213cb8:	45005217 	ldw	r20,328(r8)
  213cbc:	44c05204 	addi	r19,r8,328
  213cc0:	a0001c26 	beq	r20,zero,213d34 <__call_exitprocs+0xc4>
  213cc4:	a0800117 	ldw	r2,4(r20)
  213cc8:	15ffffc4 	addi	r23,r2,-1
  213ccc:	b8000d16 	blt	r23,zero,213d04 <__call_exitprocs+0x94>
  213cd0:	14000044 	addi	r16,r2,1
  213cd4:	8421883a 	add	r16,r16,r16
  213cd8:	8421883a 	add	r16,r16,r16
  213cdc:	84402004 	addi	r17,r16,128
  213ce0:	a463883a 	add	r17,r20,r17
  213ce4:	a421883a 	add	r16,r20,r16
  213ce8:	e0001e26 	beq	fp,zero,213d64 <__call_exitprocs+0xf4>
  213cec:	80804017 	ldw	r2,256(r16)
  213cf0:	e0801c26 	beq	fp,r2,213d64 <__call_exitprocs+0xf4>
  213cf4:	bdffffc4 	addi	r23,r23,-1
  213cf8:	843fff04 	addi	r16,r16,-4
  213cfc:	8c7fff04 	addi	r17,r17,-4
  213d00:	bd7ff91e 	bne	r23,r21,213ce8 <_gp+0xffe02104>
  213d04:	00800034 	movhi	r2,0
  213d08:	10800004 	addi	r2,r2,0
  213d0c:	10000926 	beq	r2,zero,213d34 <__call_exitprocs+0xc4>
  213d10:	a0800117 	ldw	r2,4(r20)
  213d14:	1000301e 	bne	r2,zero,213dd8 <__call_exitprocs+0x168>
  213d18:	a0800017 	ldw	r2,0(r20)
  213d1c:	10003226 	beq	r2,zero,213de8 <__call_exitprocs+0x178>
  213d20:	a009883a 	mov	r4,r20
  213d24:	98800015 	stw	r2,0(r19)
  213d28:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  213d2c:	9d000017 	ldw	r20,0(r19)
  213d30:	a03fe41e 	bne	r20,zero,213cc4 <_gp+0xffe020e0>
  213d34:	dfc00a17 	ldw	ra,40(sp)
  213d38:	df000917 	ldw	fp,36(sp)
  213d3c:	ddc00817 	ldw	r23,32(sp)
  213d40:	dd800717 	ldw	r22,28(sp)
  213d44:	dd400617 	ldw	r21,24(sp)
  213d48:	dd000517 	ldw	r20,20(sp)
  213d4c:	dcc00417 	ldw	r19,16(sp)
  213d50:	dc800317 	ldw	r18,12(sp)
  213d54:	dc400217 	ldw	r17,8(sp)
  213d58:	dc000117 	ldw	r16,4(sp)
  213d5c:	dec00b04 	addi	sp,sp,44
  213d60:	f800283a 	ret
  213d64:	a0800117 	ldw	r2,4(r20)
  213d68:	80c00017 	ldw	r3,0(r16)
  213d6c:	10bfffc4 	addi	r2,r2,-1
  213d70:	15c01426 	beq	r2,r23,213dc4 <__call_exitprocs+0x154>
  213d74:	80000015 	stw	zero,0(r16)
  213d78:	183fde26 	beq	r3,zero,213cf4 <_gp+0xffe02110>
  213d7c:	95c8983a 	sll	r4,r18,r23
  213d80:	a0806217 	ldw	r2,392(r20)
  213d84:	a5800117 	ldw	r22,4(r20)
  213d88:	2084703a 	and	r2,r4,r2
  213d8c:	10000b26 	beq	r2,zero,213dbc <__call_exitprocs+0x14c>
  213d90:	a0806317 	ldw	r2,396(r20)
  213d94:	2088703a 	and	r4,r4,r2
  213d98:	20000c1e 	bne	r4,zero,213dcc <__call_exitprocs+0x15c>
  213d9c:	89400017 	ldw	r5,0(r17)
  213da0:	d9000017 	ldw	r4,0(sp)
  213da4:	183ee83a 	callr	r3
  213da8:	a0800117 	ldw	r2,4(r20)
  213dac:	15bfbf1e 	bne	r2,r22,213cac <_gp+0xffe020c8>
  213db0:	98800017 	ldw	r2,0(r19)
  213db4:	153fcf26 	beq	r2,r20,213cf4 <_gp+0xffe02110>
  213db8:	003fbc06 	br	213cac <_gp+0xffe020c8>
  213dbc:	183ee83a 	callr	r3
  213dc0:	003ff906 	br	213da8 <_gp+0xffe021c4>
  213dc4:	a5c00115 	stw	r23,4(r20)
  213dc8:	003feb06 	br	213d78 <_gp+0xffe02194>
  213dcc:	89000017 	ldw	r4,0(r17)
  213dd0:	183ee83a 	callr	r3
  213dd4:	003ff406 	br	213da8 <_gp+0xffe021c4>
  213dd8:	a0800017 	ldw	r2,0(r20)
  213ddc:	a027883a 	mov	r19,r20
  213de0:	1029883a 	mov	r20,r2
  213de4:	003fb606 	br	213cc0 <_gp+0xffe020dc>
  213de8:	0005883a 	mov	r2,zero
  213dec:	003ffb06 	br	213ddc <_gp+0xffe021f8>

00213df0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  213df0:	defffd04 	addi	sp,sp,-12
  213df4:	df000215 	stw	fp,8(sp)
  213df8:	df000204 	addi	fp,sp,8
  213dfc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  213e00:	0001883a 	nop
  213e04:	e0bfff17 	ldw	r2,-4(fp)
  213e08:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  213e0c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  213e10:	10000226 	beq	r2,zero,213e1c <_exit+0x2c>
    ALT_SIM_FAIL();
  213e14:	002af070 	cmpltui	zero,zero,43969
  213e18:	00000106 	br	213e20 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  213e1c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  213e20:	003fff06 	br	213e20 <_gp+0xffe0223c>
