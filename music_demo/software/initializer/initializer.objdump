
initializer.elf:     file format elf32-littlenios2
initializer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000142e8 memsz 0x000142e8 flags r-x
    LOAD off    0x00016000 vaddr 0x00108000 paddr 0x00094308 align 2**12
         filesz 0x00001c3c memsz 0x00001d9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013bac  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  00093ddc  00093ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  00108000  00094308  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00109c3c  00095f44  00017c3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_0_data 00000000  00095f44  00095f44  00017c3c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00109d9c  00109d9c  00017c3c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017c3c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010c0  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027d8a  00000000  00000000  00018d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a3fa  00000000  00000000  00040aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cbc6  00000000  00000000  0004aea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002c3c  00000000  00000000  00057a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004b99  00000000  00000000  0005a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001908e  00000000  00000000  0005f241  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000782d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  00078310  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007de1a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007de1d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007de29  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007de2a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007de2b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007de2f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007de33  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007de37  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007de42  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007de4d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0007de58  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  0007de62  2**0
                  CONTENTS, READONLY
 30 .jdi          0000647d  00000000  00000000  0007de8a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00082070  00000000  00000000  00084307  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00093ddc l    d  .rodata	00000000 .rodata
00108000 l    d  .rwdata	00000000 .rwdata
00109c3c l    d  .bss	00000000 .bss
00095f44 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00109d9c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../initializer_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00094106 l     O .rodata	00000010 zeroes.4404
00083c88 l     F .text	000000bc __sbprintf
00094116 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083e98 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000859f0 l     F .text	00000008 __fp_unlock
00085a04 l     F .text	0000019c __sinit.part.1
00085ba0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00108000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00108444 l     O .rwdata	00000020 lc_ctype_charset
00108424 l     O .rwdata	00000020 lc_message_charset
00108464 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00094148 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00089074 l     F .text	000000fc __sprint_r.part.0
0009426c l     O .rodata	00000010 zeroes.4349
0008a6b0 l     F .text	000000bc __sbprintf
0009427c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e4b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008e5cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e5f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e6ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e7d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e8c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ea9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00109c14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008ed10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008ee4c l     F .text	00000034 alt_dev_reg
00108a4c l     O .rwdata	00000038 i2c_0
00108a84 l     O .rwdata	00001060 jtag_uart_0
00109ae4 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0008ef38 l     F .text	00000110 optional_irq_callback
0008f098 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00090d74 l     F .text	0000020c altera_avalon_jtag_uart_irq
00090f80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000915b8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
000916ac l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000928b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00092e64 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00092fc4 l     F .text	0000003c alt_get_errno
00093000 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00109c70 g     O .bss	00000004 alt_instruction_exception_handler
000886b8 g     F .text	00000074 _mprec_log10
000887a4 g     F .text	0000008c __any_on
0008ac64 g     F .text	00000054 _isatty_r
00094154 g     O .rodata	00000028 __mprec_tinytens
0008e9d8 g     F .text	0000007c alt_main
00081824 g     F .text	000000c0 _puts_r
00109c9c g     O .bss	00000100 alt_irq
0008acb8 g     F .text	00000060 _lseek_r
00094308 g       *ABS*	00000000 __flash_rwdata_start
0008cef4 g     F .text	00000088 .hidden __eqdf2
00109d9c g       *ABS*	00000000 __alt_heap_start
000817e8 g     F .text	0000003c printf
0008aed0 g     F .text	0000009c _wcrtomb_r
00088f34 g     F .text	0000005c __sseek
00085d50 g     F .text	00000010 __sinit
0008ad78 g     F .text	00000140 __swbuf_r
00086824 g     F .text	0000007c _setlocale_r
00085ba8 g     F .text	00000078 __sfmoreglue
0008f790 g     F .text	000000a8 alt_avalon_i2c_rx_read
0008ea78 g     F .text	00000024 __malloc_unlock
000909a8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0008f514 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
000874f4 g     F .text	0000015c memmove
00085d38 g     F .text	00000018 _cleanup
000901f8 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00087778 g     F .text	000000a8 _Balloc
000815cc g     F .text	00000070 .hidden __fixsfsi
0008cf7c g     F .text	000000dc .hidden __gtdf2
00093654 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008ac08 g     F .text	0000005c _fstat_r
00109c54 g     O .bss	00000004 errno
00088eb0 g     F .text	00000008 __seofread
00109c5c g     O .bss	00000004 alt_argv
00111be4 g       *ABS*	00000000 _gp
000909ec g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
000810e8 g     F .text	000004e4 .hidden __subsf3
0009255c g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0008f6a4 g     F .text	00000044 alt_avalon_i2c_is_busy
001088cc g     O .rwdata	00000180 alt_fd_list
0008f448 g     F .text	000000cc alt_avalon_i2c_master_config_set
00092a58 g     F .text	00000090 alt_find_dev
000873ac g     F .text	00000148 memcpy
00080000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
000859f8 g     F .text	0000000c _cleanup_r
0008e334 g     F .text	000000dc .hidden __floatsidf
00092f48 g     F .text	0000007c alt_io_redirect
0008d058 g     F .text	000000f4 .hidden __ltdf2
00093ddc g       *ABS*	00000000 __DTOR_END__
00090038 g     F .text	000001c0 alt_avalon_i2c_master_transmit
000818e4 g     F .text	00000014 puts
00093844 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088d94 g     F .text	00000074 __fpclassifyd
00088614 g     F .text	000000a4 __ratio
0008a694 g     F .text	0000001c __vfiprintf_internal
00091178 g     F .text	0000021c altera_avalon_jtag_uart_read
000817b8 g     F .text	00000030 _printf_r
00108000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080b40 g     F .text	00000064 .hidden __udivsi3
0008e728 g     F .text	000000ac isatty
000924cc g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
000941a4 g     O .rodata	000000c8 __mprec_tens
000868a0 g     F .text	0000000c __locale_charset
0008f2b4 g     F .text	00000098 alt_avalon_i2c_enable
00109c50 g     O .bss	00000004 __malloc_top_pad
00109c20 g     O .rwdata	00000008 altera_onchip_flash_list
000908dc g     F .text	00000068 alt_avalon_i2c_int_disable
00109bec g     O .rwdata	00000004 __mb_cur_max
000868d0 g     F .text	0000000c _localeconv_r
00087bac g     F .text	0000003c __i2b
000861d4 g     F .text	000004c8 __sfvwrite_r
00088e08 g     F .text	00000054 _sbrk_r
0008ad18 g     F .text	00000060 _read_r
00092870 g     F .text	00000028 alt_dcache_flush
00091848 g     F .text	00000168 alt_onchip_flash_erase_block
00080298 g     F .text	000000b4 SGTL5000_Reg_Rd
00109c0c g     O .rwdata	00000004 alt_max_fd
0008a8fc g     F .text	000000f0 _fclose_r
000859c0 g     F .text	00000030 fflush
00109c4c g     O .bss	00000004 __malloc_max_sbrked_mem
00090404 g     F .text	00000210 alt_avalon_i2c_master_receive
0008bc78 g     F .text	000008ac .hidden __adddf3
000883bc g     F .text	0000010c __b2d
0008b6b4 g     F .text	000005c4 .hidden __umoddi3
0008e8fc g     F .text	000000dc lseek
00090944 g     F .text	00000064 alt_avalon_i2c_int_enable
00109be4 g     O .rwdata	00000004 _global_impure_ptr
00088830 g     F .text	00000564 _realloc_r
00109d9c g       *ABS*	00000000 __bss_end
00092d74 g     F .text	000000f0 alt_iic_isr_register
0009354c g     F .text	00000108 alt_tick
0008b0b8 g     F .text	000005fc .hidden __udivdi3
00090804 g     F .text	00000058 alt_avalon_i2c_int_status_get
0008ab64 g     F .text	00000024 _fputwc_r
0009417c g     O .rodata	00000028 __mprec_bigtens
00087990 g     F .text	00000104 __s2b
0008e410 g     F .text	000000a8 .hidden __floatunsidf
000880fc g     F .text	00000060 __mcmp
00085d70 g     F .text	00000018 __fp_lock_all
00092d28 g     F .text	0000004c alt_ic_irq_enabled
000934b0 g     F .text	0000009c alt_alarm_stop
0008f134 g     F .text	00000054 alt_avalon_i2c_register_callback
00109c64 g     O .bss	00000004 alt_irq_active
0008f188 g     F .text	000000ec alt_avalon_i2c_init
000800fc g     F .exceptions	000000d4 alt_irq_handler
001088a4 g     O .rwdata	00000028 alt_dev_null
00092898 g     F .text	00000020 alt_dcache_flush_all
00087a94 g     F .text	00000068 __hi0bits
0008e2b4 g     F .text	00000080 .hidden __fixdfsi
00109c3c g       *ABS*	00000000 __ram_rwdata_end
00109c04 g     O .rwdata	00000008 alt_dev_list
0008ed4c g     F .text	00000100 write
000939a8 g     F .text	000000a0 _putc_r
0008fac4 g     F .text	0000004c alt_avalon_i2c_check_arblost
00080bfc g     F .text	000000bc .hidden __gtsf2
000908a0 g     F .text	0000003c alt_avalon_i2c_int_clear
00094308 g       *ABS*	00000000 __ram_rodata_end
0008e634 g     F .text	000000b8 fstat
0008d058 g     F .text	000000f4 .hidden __ledf2
00109c18 g     O .rwdata	00000008 alt_avalon_i2c_list
00087e74 g     F .text	00000140 __pow5mult
00089188 g     F .text	0000150c ___vfiprintf_internal_r
00109c44 g     O .bss	00000004 __nlocale_changed
00080ba4 g     F .text	00000058 .hidden __umodsi3
00109d9c g       *ABS*	00000000 end
00090cb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0008f274 g     F .text	00000040 alt_avalon_i2c_open
00093ddc g       *ABS*	00000000 __CTOR_LIST__
00110000 g       *ABS*	00000000 __alt_stack_pointer
0008fc4c g     F .text	000000e8 alt_avalon_i2c_master_tx
00091630 g     F .text	0000007c alt_avalon_timer_sc_init
0008172c g     F .text	00000064 .hidden __clzsi2
00091394 g     F .text	00000224 altera_avalon_jtag_uart_write
00085d60 g     F .text	00000004 __sfp_lock_acquire
000872c8 g     F .text	000000e4 memchr
00081990 g     F .text	000022dc ___vfprintf_internal_r
000917ac g     F .text	0000009c alt_onchip_flash_get_info
00085ec4 g     F .text	00000310 _free_r
00093248 g     F .text	0000022c alt_printf
000868ac g     F .text	00000010 __locale_mb_cur_max
00093c28 g     F .text	00000180 __call_exitprocs
00109c40 g     O .bss	00000004 __mlocale_changed
0008f048 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00109bf0 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
00109c68 g     O .bss	00000004 _alt_tick_rate
00090614 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00090a38 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00087fb4 g     F .text	00000148 __lshift
00109c6c g     O .bss	00000004 _alt_nticks
0008ead8 g     F .text	00000104 read
0008eeb8 g     F .text	00000080 alt_sys_init
00093b10 g     F .text	00000118 __register_exitproc
0008fe70 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00087be8 g     F .text	0000028c __multiply
00091020 g     F .text	00000068 altera_avalon_jtag_uart_close
00081790 g     F .text	00000028 .hidden __mulsi3
00108000 g       *ABS*	00000000 __ram_rwdata_start
00093ddc g       *ABS*	00000000 __ram_rodata_start
00109c74 g     O .bss	00000028 __malloc_current_mallinfo
000884c8 g     F .text	0000014c __d2b
00080438 g     F .text	00000050 clearLED
00090b50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00093780 g     F .text	000000c4 alt_get_fd
00092718 g     F .text	00000158 alt_busy_sleep
0008a7cc g     F .text	00000054 _close_r
0009392c g     F .text	0000007c memcmp
0008f6e8 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00090c10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00109d9c g       *ABS*	00000000 __alt_stack_base
00090c60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083d44 g     F .text	00000154 __swsetup_r
0008c524 g     F .text	000009d0 .hidden __divdf3
000916e0 g     F .text	000000cc alt_onchip_flash_read
00085c20 g     F .text	00000118 __sfp
0008872c g     F .text	00000078 __copybits
0010849c g     O .rwdata	00000408 __malloc_av_
00085d6c g     F .text	00000004 __sinit_lock_release
0008d14c g     F .text	0000086c .hidden __muldf3
00088e5c g     F .text	00000054 __sread
00093678 g     F .text	00000108 alt_find_file
000928f4 g     F .text	000000a4 alt_dev_llist_insert
0008ea54 g     F .text	00000024 __malloc_lock
0008ec60 g     F .text	000000b0 sbrk
0008fb10 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0008fa78 g     F .text	0000004c alt_avalon_i2c_check_nack
00085964 g     F .text	0000005c _fflush_r
0008a820 g     F .text	000000dc _calloc_r
00109c28 g     O .rwdata	00000008 alt_flash_dev_list
00109c3c g       *ABS*	00000000 __bss_start
00087650 g     F .text	00000128 memset
0008026c g     F .text	0000002c main
0008fa44 g     F .text	00000034 alt_avalon_i2c_master_target_set
00109c60 g     O .bss	00000004 alt_envp
00109c48 g     O .bss	00000004 __malloc_max_total_mem
00090bb0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008aeb8 g     F .text	00000018 __swbuf
0009085c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00088f90 g     F .text	00000008 __sclose
00110000 g       *ABS*	00000000 __alt_heap_limit
0008a9ec g     F .text	00000014 fclose
000840c0 g     F .text	00001688 _dtoa_r
00086abc g     F .text	0000080c _malloc_r
0008b02c g     F .text	00000030 __ascii_wctomb
00109c10 g     O .rwdata	00000004 alt_errno
0009243c g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
0008669c g     F .text	000000c4 _fwalk
00093a48 g     F .text	000000c8 putc
00080a48 g     F .text	00000084 .hidden __divsi3
000805a8 g     F .text	00000140 printSignedHex1
00085da0 g     F .text	00000124 _malloc_trim_r
00093ddc g       *ABS*	00000000 __CTOR_END__
00091f60 g     F .text	000004dc altera_onchip_flash_init
00080cb8 g     F .text	00000430 .hidden __mulsf3
00088f98 g     F .text	000000dc strcmp
00093ddc g       *ABS*	00000000 __flash_rodata_start
00093ddc g       *ABS*	00000000 __DTOR_LIST__
0008034c g     F .text	000000a0 SGTL5000_Reg_Wr
0008cef4 g     F .text	00000088 .hidden __nedf2
0008ee80 g     F .text	00000038 alt_irq_init
0008ebdc g     F .text	00000084 alt_release_fd
00093fc0 g     O .rodata	00000100 .hidden __clz_tab
00109c3c g     O .bss	00000004 _PathLocale
000938e0 g     F .text	00000014 atexit
00080bfc g     F .text	000000bc .hidden __gesf2
0008a76c g     F .text	00000060 _write_r
000868dc g     F .text	00000018 setlocale
00109be8 g     O .rwdata	00000004 _impure_ptr
00109c58 g     O .bss	00000004 alt_argc
00085748 g     F .text	0000021c __sflush_r
000929f8 g     F .text	00000060 _do_dtors
000868c8 g     F .text	00000008 __locale_cjk_lang
0008fa0c g     F .text	00000038 alt_avalon_i2c_master_target_get
0008f91c g     F .text	000000f0 alt_avalon_i2c_send_address
00080020 g       .exceptions	00000000 alt_irq_entry
00088358 g     F .text	00000064 __ulp
00085d88 g     F .text	00000018 __fp_unlock_all
00109bfc g     O .rwdata	00000008 alt_fs_list
000919b0 g     F .text	000002d8 alt_onchip_flash_write_block
00080020 g       *ABS*	00000000 __ram_exceptions_start
000868f4 g     F .text	0000000c localeconv
000803ec g     F .text	0000004c setLED
00090ae8 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00092bc4 g     F .text	00000050 alt_ic_isr_register
0008f34c g     F .text	0000004c alt_avalon_i2c_disable
00109c3c g       *ABS*	00000000 _edata
00091c88 g     F .text	000002d8 alt_onchip_flash_write
000806e8 g     F .text	00000300 setup_i2c
00109d9c g       *ABS*	00000000 _end
00092ae8 g     F .text	00000068 alt_flash_open_dev
0008aa00 g     F .text	00000164 __fputwc
00080230 g       *ABS*	00000000 __ram_exceptions_end
00091088 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008f398 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00092c9c g     F .text	0000008c alt_ic_irq_disable
00088eb8 g     F .text	0000007c __swrite
00109bf4 g     O .rwdata	00000004 __malloc_trim_threshold
000868bc g     F .text	0000000c __locale_msgcharset
000938f4 g     F .text	00000038 exit
00086760 g     F .text	000000c4 _fwalk_reent
0008163c g     F .text	000000f0 .hidden __floatunsisf
0008815c g     F .text	000001fc __mdiff
00092b50 g     F .text	00000054 alt_flash_close_dev
00080acc g     F .text	00000074 .hidden __modsi3
00110000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085d64 g     F .text	00000004 __sfp_lock_release
0008f5a8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0008f838 g     F .text	000000e4 alt_avalon_i2c_cmd_write
000809e8 g     F .text	00000060 .hidden __fixunssfsi
00093da8 g     F .text	00000034 _exit
000925ec g     F .text	0000012c alt_alarm_start
00080488 g     F .text	00000120 printSignedHex0
00086900 g     F .text	000001bc __smakebuf_r
000818f8 g     F .text	00000098 strlen
000930ec g     F .text	0000015c open
0008cf7c g     F .text	000000dc .hidden __gedf2
00093474 g     F .text	0000003c alt_putchar
00109bf8 g     O .rwdata	00000004 __wctomb
00089170 g     F .text	00000018 __sprint_r
00092ba4 g     F .text	00000020 alt_icache_flush_all
00109c30 g     O .rwdata	00000004 alt_priority_mask
00092c14 g     F .text	00000088 alt_ic_irq_enable
00083c6c g     F .text	0000001c __vfprintf_internal
0008b05c g     F .text	0000005c _wctomb_r
0008d9b8 g     F .text	000008fc .hidden __subdf3
00087afc g     F .text	000000b0 __lo0bits
00109c34 g     O .rwdata	00000008 alt_alarm_list
00092998 g     F .text	00000060 _do_ctors
0008af6c g     F .text	000000c0 wcrtomb
0008e4f4 g     F .text	000000d8 close
00090a9c g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0008e83c g     F .text	00000084 alt_load
0008fd34 g     F .text	0000013c alt_avalon_i2c_master_rx
0008ab88 g     F .text	00000080 fputwc
00085d68 g     F .text	00000004 __sinit_lock_acquire
00087848 g     F .text	00000148 __multadd
00087820 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800474 	movhi	r2,17
   80140:	10a72704 	addi	r2,r2,-25444
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800474 	movhi	r2,17
   80158:	10a72704 	addi	r2,r2,-25444
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <_gp+0xfff6e548>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <_gp+0xfff6e53c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a02317 	ldw	r2,-32628(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a02317 	ldw	r2,-32628(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c00474 	movhi	sp,17
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   80238:	06800474 	movhi	gp,17
    ori gp, gp, %lo(_gp)
   8023c:	d686f914 	ori	gp,gp,7140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800434 	movhi	r2,16
    ori r2, r2, %lo(__bss_start)
   80244:	10a70f14 	ori	r2,r2,39996

    movhi r3, %hi(__bss_end)
   80248:	00c00434 	movhi	r3,16
    ori r3, r3, %lo(__bss_end)
   8024c:	18e76714 	ori	r3,r3,40348

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <_gp+0xfff6e670>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	008e83c0 	call	8e83c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	008e9d80 	call	8e9d8 <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <_gp+0xfff6e684>

0008026c <main>:

int main(){
   8026c:	defffe04 	addi	sp,sp,-8
   80270:	dfc00115 	stw	ra,4(sp)
   80274:	df000015 	stw	fp,0(sp)
   80278:	d839883a 	mov	fp,sp
	setup_i2c();
   8027c:	00806e80 	call	806e8 <setup_i2c>
return 0;
   80280:	0005883a 	mov	r2,zero
}
   80284:	e037883a 	mov	sp,fp
   80288:	dfc00117 	ldw	ra,4(sp)
   8028c:	df000017 	ldw	fp,0(sp)
   80290:	dec00204 	addi	sp,sp,8
   80294:	f800283a 	ret

00080298 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
   80298:	defff804 	addi	sp,sp,-32
   8029c:	dfc00715 	stw	ra,28(sp)
   802a0:	df000615 	stw	fp,24(sp)
   802a4:	df000604 	addi	fp,sp,24
   802a8:	e13ffe15 	stw	r4,-8(fp)
   802ac:	2805883a 	mov	r2,r5
   802b0:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
   802b4:	e0bfff0b 	ldhu	r2,-4(fp)
   802b8:	1004d23a 	srli	r2,r2,8
   802bc:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
   802c0:	e0bfff0b 	ldhu	r2,-4(fp)
   802c4:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
   802c8:	e13ffd84 	addi	r4,fp,-10
   802cc:	e0fffd84 	addi	r3,fp,-10
   802d0:	d8000115 	stw	zero,4(sp)
   802d4:	00800084 	movi	r2,2
   802d8:	d8800015 	stw	r2,0(sp)
   802dc:	200f883a 	mov	r7,r4
   802e0:	01800084 	movi	r6,2
   802e4:	180b883a 	mov	r5,r3
   802e8:	e13ffe17 	ldw	r4,-8(fp)
   802ec:	008fe700 	call	8fe70 <alt_avalon_i2c_master_tx_rx>
   802f0:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
   802f4:	e0bffc17 	ldw	r2,-16(fp)
   802f8:	10000626 	beq	r2,zero,80314 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
   802fc:	e0bfff0b 	ldhu	r2,-4(fp)
   80300:	100b883a 	mov	r5,r2
   80304:	01000274 	movhi	r4,9
   80308:	210f7704 	addi	r4,r4,15836
   8030c:	00817e80 	call	817e8 <printf>
		while (1)
		{
			//hang here
		}
   80310:	003fff06 	br	80310 <_gp+0xfff6e72c>
	}
	value = (buffer[0] << 8) | buffer[1];
   80314:	e0bffd83 	ldbu	r2,-10(fp)
   80318:	10803fcc 	andi	r2,r2,255
   8031c:	1004923a 	slli	r2,r2,8
   80320:	1007883a 	mov	r3,r2
   80324:	e0bffdc3 	ldbu	r2,-9(fp)
   80328:	10803fcc 	andi	r2,r2,255
   8032c:	1884b03a 	or	r2,r3,r2
   80330:	e0bffd0d 	sth	r2,-12(fp)
	return value;
   80334:	e0bffd0b 	ldhu	r2,-12(fp)
}
   80338:	e037883a 	mov	sp,fp
   8033c:	dfc00117 	ldw	ra,4(sp)
   80340:	df000017 	ldw	fp,0(sp)
   80344:	dec00204 	addi	sp,sp,8
   80348:	f800283a 	ret

0008034c <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
   8034c:	defff904 	addi	sp,sp,-28
   80350:	dfc00615 	stw	ra,24(sp)
   80354:	df000515 	stw	fp,20(sp)
   80358:	df000504 	addi	fp,sp,20
   8035c:	e13ffd15 	stw	r4,-12(fp)
   80360:	2807883a 	mov	r3,r5
   80364:	3005883a 	mov	r2,r6
   80368:	e0fffe0d 	sth	r3,-8(fp)
   8036c:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
   80370:	e0bffe0b 	ldhu	r2,-8(fp)
   80374:	1004d23a 	srli	r2,r2,8
   80378:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
   8037c:	e0bffe0b 	ldhu	r2,-8(fp)
   80380:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
   80384:	e0bfff0b 	ldhu	r2,-4(fp)
   80388:	1004d23a 	srli	r2,r2,8
   8038c:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
   80390:	e0bfff0b 	ldhu	r2,-4(fp)
   80394:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
   80398:	e0bffc04 	addi	r2,fp,-16
   8039c:	000f883a 	mov	r7,zero
   803a0:	01800104 	movi	r6,4
   803a4:	100b883a 	mov	r5,r2
   803a8:	e13ffd17 	ldw	r4,-12(fp)
   803ac:	008fc4c0 	call	8fc4c <alt_avalon_i2c_master_tx>
   803b0:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
   803b4:	e0bffb17 	ldw	r2,-20(fp)
   803b8:	10000626 	beq	r2,zero,803d4 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
   803bc:	e0bffe0b 	ldhu	r2,-8(fp)
   803c0:	100b883a 	mov	r5,r2
   803c4:	01000274 	movhi	r4,9
   803c8:	210f7704 	addi	r4,r4,15836
   803cc:	00817e80 	call	817e8 <printf>
		while (1)
		{
			//hang here
		}
   803d0:	003fff06 	br	803d0 <_gp+0xfff6e7ec>
	}
	return DATA;
   803d4:	e0bfff0b 	ldhu	r2,-4(fp)
}
   803d8:	e037883a 	mov	sp,fp
   803dc:	dfc00117 	ldw	ra,4(sp)
   803e0:	df000017 	ldw	fp,0(sp)
   803e4:	dec00204 	addi	sp,sp,8
   803e8:	f800283a 	ret

000803ec <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
   803ec:	defffe04 	addi	sp,sp,-8
   803f0:	df000115 	stw	fp,4(sp)
   803f4:	df000104 	addi	fp,sp,4
   803f8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
   803fc:	00800474 	movhi	r2,17
   80400:	10843004 	addi	r2,r2,4288
   80404:	10c00037 	ldwio	r3,0(r2)
   80408:	01000044 	movi	r4,1
   8040c:	e0bfff17 	ldw	r2,-4(fp)
   80410:	2084983a 	sll	r2,r4,r2
   80414:	1886b03a 	or	r3,r3,r2
   80418:	00800474 	movhi	r2,17
   8041c:	10843004 	addi	r2,r2,4288
   80420:	10c00035 	stwio	r3,0(r2)
}
   80424:	0001883a 	nop
   80428:	e037883a 	mov	sp,fp
   8042c:	df000017 	ldw	fp,0(sp)
   80430:	dec00104 	addi	sp,sp,4
   80434:	f800283a 	ret

00080438 <clearLED>:

void clearLED(int LED)
{
   80438:	defffe04 	addi	sp,sp,-8
   8043c:	df000115 	stw	fp,4(sp)
   80440:	df000104 	addi	fp,sp,4
   80444:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
   80448:	00800474 	movhi	r2,17
   8044c:	10843004 	addi	r2,r2,4288
   80450:	10c00037 	ldwio	r3,0(r2)
   80454:	01000044 	movi	r4,1
   80458:	e0bfff17 	ldw	r2,-4(fp)
   8045c:	2084983a 	sll	r2,r4,r2
   80460:	0084303a 	nor	r2,zero,r2
   80464:	1886703a 	and	r3,r3,r2
   80468:	00800474 	movhi	r2,17
   8046c:	10843004 	addi	r2,r2,4288
   80470:	10c00035 	stwio	r3,0(r2)

}
   80474:	0001883a 	nop
   80478:	e037883a 	mov	sp,fp
   8047c:	df000017 	ldw	fp,0(sp)
   80480:	dec00104 	addi	sp,sp,4
   80484:	f800283a 	ret

00080488 <printSignedHex0>:

void printSignedHex0(signed char value)
{
   80488:	defffc04 	addi	sp,sp,-16
   8048c:	dfc00315 	stw	ra,12(sp)
   80490:	df000215 	stw	fp,8(sp)
   80494:	df000204 	addi	fp,sp,8
   80498:	2005883a 	mov	r2,r4
   8049c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
   804a0:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
   804a4:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
   804a8:	00800474 	movhi	r2,17
   804ac:	10843404 	addi	r2,r2,4304
   804b0:	10800037 	ldwio	r2,0(r2)
   804b4:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
   804b8:	e0bfff07 	ldb	r2,-4(fp)
   804bc:	1000060e 	bge	r2,zero,804d8 <printSignedHex0+0x50>
	{
		setLED(11);
   804c0:	010002c4 	movi	r4,11
   804c4:	00803ec0 	call	803ec <setLED>
		value = -value;
   804c8:	e0bfff03 	ldbu	r2,-4(fp)
   804cc:	0085c83a 	sub	r2,zero,r2
   804d0:	e0bfff05 	stb	r2,-4(fp)
   804d4:	00000206 	br	804e0 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
   804d8:	010002c4 	movi	r4,11
   804dc:	00804380 	call	80438 <clearLED>
	}
	//handled hundreds
	if (value / 100)
   804e0:	e0bfff03 	ldbu	r2,-4(fp)
   804e4:	108018c4 	addi	r2,r2,99
   804e8:	10803fcc 	andi	r2,r2,255
   804ec:	108031f0 	cmpltui	r2,r2,199
   804f0:	1000031e 	bne	r2,zero,80500 <printSignedHex0+0x78>
		setLED(13);
   804f4:	01000344 	movi	r4,13
   804f8:	00803ec0 	call	803ec <setLED>
   804fc:	00000206 	br	80508 <printSignedHex0+0x80>
	else
		clearLED(13);
   80500:	01000344 	movi	r4,13
   80504:	00804380 	call	80438 <clearLED>

	value = value % 100;
   80508:	e0bfff07 	ldb	r2,-4(fp)
   8050c:	01401904 	movi	r5,100
   80510:	1009883a 	mov	r4,r2
   80514:	0080acc0 	call	80acc <__modsi3>
   80518:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
   8051c:	e0bfff07 	ldb	r2,-4(fp)
   80520:	01400284 	movi	r5,10
   80524:	1009883a 	mov	r4,r2
   80528:	0080a480 	call	80a48 <__divsi3>
   8052c:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
   80530:	e0bfff07 	ldb	r2,-4(fp)
   80534:	01400284 	movi	r5,10
   80538:	1009883a 	mov	r4,r2
   8053c:	0080acc0 	call	80acc <__modsi3>
   80540:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
   80544:	e0bffe8b 	ldhu	r2,-6(fp)
   80548:	10803fcc 	andi	r2,r2,255
   8054c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
   80550:	e0bffe03 	ldbu	r2,-8(fp)
   80554:	1004933a 	slli	r2,r2,12
   80558:	1007883a 	mov	r3,r2
   8055c:	e0bffe8b 	ldhu	r2,-6(fp)
   80560:	1884b03a 	or	r2,r3,r2
   80564:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
   80568:	e0bffe43 	ldbu	r2,-7(fp)
   8056c:	1004923a 	slli	r2,r2,8
   80570:	1007883a 	mov	r3,r2
   80574:	e0bffe8b 	ldhu	r2,-6(fp)
   80578:	1884b03a 	or	r2,r3,r2
   8057c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
   80580:	e0fffe8b 	ldhu	r3,-6(fp)
   80584:	00800474 	movhi	r2,17
   80588:	10843404 	addi	r2,r2,4304
   8058c:	10c00035 	stwio	r3,0(r2)
}
   80590:	0001883a 	nop
   80594:	e037883a 	mov	sp,fp
   80598:	dfc00117 	ldw	ra,4(sp)
   8059c:	df000017 	ldw	fp,0(sp)
   805a0:	dec00204 	addi	sp,sp,8
   805a4:	f800283a 	ret

000805a8 <printSignedHex1>:

void printSignedHex1(signed char value)
{
   805a8:	defffb04 	addi	sp,sp,-20
   805ac:	dfc00415 	stw	ra,16(sp)
   805b0:	df000315 	stw	fp,12(sp)
   805b4:	df000304 	addi	fp,sp,12
   805b8:	2005883a 	mov	r2,r4
   805bc:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
   805c0:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
   805c4:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
   805c8:	00800474 	movhi	r2,17
   805cc:	10843404 	addi	r2,r2,4304
   805d0:	10800037 	ldwio	r2,0(r2)
   805d4:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
   805d8:	e0bfff07 	ldb	r2,-4(fp)
   805dc:	1000060e 	bge	r2,zero,805f8 <printSignedHex1+0x50>
	{
		setLED(10);
   805e0:	01000284 	movi	r4,10
   805e4:	00803ec0 	call	803ec <setLED>
		value = -value;
   805e8:	e0bfff03 	ldbu	r2,-4(fp)
   805ec:	0085c83a 	sub	r2,zero,r2
   805f0:	e0bfff05 	stb	r2,-4(fp)
   805f4:	00000206 	br	80600 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
   805f8:	01000284 	movi	r4,10
   805fc:	00804380 	call	80438 <clearLED>
	}
	//handled hundreds
	if (value / 100)
   80600:	e0bfff03 	ldbu	r2,-4(fp)
   80604:	108018c4 	addi	r2,r2,99
   80608:	10803fcc 	andi	r2,r2,255
   8060c:	108031f0 	cmpltui	r2,r2,199
   80610:	1000031e 	bne	r2,zero,80620 <printSignedHex1+0x78>
		setLED(12);
   80614:	01000304 	movi	r4,12
   80618:	00803ec0 	call	803ec <setLED>
   8061c:	00000206 	br	80628 <printSignedHex1+0x80>
	else
		clearLED(12);
   80620:	01000304 	movi	r4,12
   80624:	00804380 	call	80438 <clearLED>

	value = value % 100;
   80628:	e0bfff07 	ldb	r2,-4(fp)
   8062c:	01401904 	movi	r5,100
   80630:	1009883a 	mov	r4,r2
   80634:	0080acc0 	call	80acc <__modsi3>
   80638:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
   8063c:	e0bfff07 	ldb	r2,-4(fp)
   80640:	01400284 	movi	r5,10
   80644:	1009883a 	mov	r4,r2
   80648:	0080a480 	call	80a48 <__divsi3>
   8064c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
   80650:	e0bfff07 	ldb	r2,-4(fp)
   80654:	01400284 	movi	r5,10
   80658:	1009883a 	mov	r4,r2
   8065c:	0080acc0 	call	80acc <__modsi3>
   80660:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
   80664:	e0bfff07 	ldb	r2,-4(fp)
   80668:	01400284 	movi	r5,10
   8066c:	1009883a 	mov	r4,r2
   80670:	0080a480 	call	80a48 <__divsi3>
   80674:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
   80678:	e0bfff07 	ldb	r2,-4(fp)
   8067c:	01400284 	movi	r5,10
   80680:	1009883a 	mov	r4,r2
   80684:	0080acc0 	call	80acc <__modsi3>
   80688:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
   8068c:	e0bffe17 	ldw	r2,-8(fp)
   80690:	10bfc00c 	andi	r2,r2,65280
   80694:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
   80698:	e0bffd03 	ldbu	r2,-12(fp)
   8069c:	1004913a 	slli	r2,r2,4
   806a0:	1007883a 	mov	r3,r2
   806a4:	e0bffe17 	ldw	r2,-8(fp)
   806a8:	10c4b03a 	or	r2,r2,r3
   806ac:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
   806b0:	e0bffd43 	ldbu	r2,-11(fp)
   806b4:	e0fffe17 	ldw	r3,-8(fp)
   806b8:	1884b03a 	or	r2,r3,r2
   806bc:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
   806c0:	e0fffe17 	ldw	r3,-8(fp)
   806c4:	00800474 	movhi	r2,17
   806c8:	10843404 	addi	r2,r2,4304
   806cc:	10c00035 	stwio	r3,0(r2)
}
   806d0:	0001883a 	nop
   806d4:	e037883a 	mov	sp,fp
   806d8:	dfc00117 	ldw	ra,4(sp)
   806dc:	df000017 	ldw	fp,0(sp)
   806e0:	dec00204 	addi	sp,sp,8
   806e4:	f800283a 	ret

000806e8 <setup_i2c>:


int setup_i2c()
{
   806e8:	defffc04 	addi	sp,sp,-16
   806ec:	dfc00315 	stw	ra,12(sp)
   806f0:	df000215 	stw	fp,8(sp)
   806f4:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
   806f8:	01000274 	movhi	r4,9
   806fc:	210f7f04 	addi	r4,r4,15868
   80700:	008f2740 	call	8f274 <alt_avalon_i2c_open>
   80704:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
   80708:	e0bffe17 	ldw	r2,-8(fp)
   8070c:	1000051e 	bne	r2,zero,80724 <setup_i2c+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
   80710:	01000274 	movhi	r4,9
   80714:	210f8204 	addi	r4,r4,15880
   80718:	00818e40 	call	818e4 <puts>
		return 1;
   8071c:	00800044 	movi	r2,1
   80720:	0000ac06 	br	809d4 <setup_i2c+0x2ec>
	}
	printf ("I2C Test Program\n");
   80724:	01000274 	movhi	r4,9
   80728:	210f8a04 	addi	r4,r4,15912
   8072c:	00818e40 	call	818e4 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
   80730:	01400284 	movi	r5,10
   80734:	e13ffe17 	ldw	r4,-8(fp)
   80738:	008fa440 	call	8fa44 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
   8073c:	000b883a 	mov	r5,zero
   80740:	e13ffe17 	ldw	r4,-8(fp)
   80744:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   80748:	10bfffcc 	andi	r2,r2,65535
   8074c:	100b883a 	mov	r5,r2
   80750:	01000274 	movhi	r4,9
   80754:	210f8f04 	addi	r4,r4,15932
   80758:	00817e80 	call	817e8 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
   8075c:	00800384 	movi	r2,14
   80760:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
   80764:	e0bfff03 	ldbu	r2,-4(fp)
   80768:	1009883a 	mov	r4,r2
   8076c:	008163c0 	call	8163c <__floatunsisf>
   80770:	1007883a 	mov	r3,r2
   80774:	180b883a 	mov	r5,r3
   80778:	01105f34 	movhi	r4,16764
   8077c:	212a2084 	addi	r4,r4,-22398
   80780:	00810e80 	call	810e8 <__subsf3>
   80784:	1007883a 	mov	r3,r2
   80788:	1805883a 	mov	r2,r3
   8078c:	01514034 	movhi	r5,17664
   80790:	1009883a 	mov	r4,r2
   80794:	0080cb80 	call	80cb8 <__mulsf3>
   80798:	1007883a 	mov	r3,r2
   8079c:	1805883a 	mov	r2,r3
   807a0:	1009883a 	mov	r4,r2
   807a4:	00809e80 	call	809e8 <__fixunssfsi>
   807a8:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
   807ac:	e0bfff03 	ldbu	r2,-4(fp)
   807b0:	e0ffff8b 	ldhu	r3,-2(fp)
   807b4:	180d883a 	mov	r6,r3
   807b8:	100b883a 	mov	r5,r2
   807bc:	01000274 	movhi	r4,9
   807c0:	210f9504 	addi	r4,r4,15956
   807c4:	00817e80 	call	817e8 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
   807c8:	e0bfff03 	ldbu	r2,-4(fp)
   807cc:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
   807d0:	1007883a 	mov	r3,r2
   807d4:	e0bfff8b 	ldhu	r2,-2(fp)
   807d8:	1884b03a 	or	r2,r3,r2
   807dc:	10bfffcc 	andi	r2,r2,65535
   807e0:	100d883a 	mov	r6,r2
   807e4:	01400c84 	movi	r5,50
   807e8:	e13ffe17 	ldw	r4,-8(fp)
   807ec:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
   807f0:	01400c84 	movi	r5,50
   807f4:	e13ffe17 	ldw	r4,-8(fp)
   807f8:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   807fc:	10bfffcc 	andi	r2,r2,65535
   80800:	100b883a 	mov	r5,r2
   80804:	01000274 	movhi	r4,9
   80808:	210fa604 	addi	r4,r4,16024
   8080c:	00817e80 	call	817e8 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
   80810:	01917f84 	movi	r6,17918
   80814:	01400c04 	movi	r5,48
   80818:	e13ffe17 	ldw	r4,-8(fp)
   8081c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
   80820:	01400c04 	movi	r5,48
   80824:	e13ffe17 	ldw	r4,-8(fp)
   80828:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8082c:	10bfffcc 	andi	r2,r2,65535
   80830:	100b883a 	mov	r5,r2
   80834:	01000274 	movhi	r4,9
   80838:	210fad04 	addi	r4,r4,16052
   8083c:	00817e80 	call	817e8 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
   80840:	01801384 	movi	r6,78
   80844:	01400a04 	movi	r5,40
   80848:	e13ffe17 	ldw	r4,-8(fp)
   8084c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
   80850:	01400a04 	movi	r5,40
   80854:	e13ffe17 	ldw	r4,-8(fp)
   80858:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8085c:	10bfffcc 	andi	r2,r2,65535
   80860:	100b883a 	mov	r5,r2
   80864:	01000274 	movhi	r4,9
   80868:	210fb504 	addi	r4,r4,16084
   8086c:	00817e80 	call	817e8 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
   80870:	018018c4 	movi	r6,99
   80874:	01400084 	movi	r5,2
   80878:	e13ffe17 	ldw	r4,-8(fp)
   8087c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
   80880:	01400084 	movi	r5,2
   80884:	e13ffe17 	ldw	r4,-8(fp)
   80888:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8088c:	10bfffcc 	andi	r2,r2,65535
   80890:	100b883a 	mov	r5,r2
   80894:	01000274 	movhi	r4,9
   80898:	210fbc04 	addi	r4,r4,16112
   8089c:	00817e80 	call	817e8 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
   808a0:	018001c4 	movi	r6,7
   808a4:	01400104 	movi	r5,4
   808a8:	e13ffe17 	ldw	r4,-8(fp)
   808ac:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
   808b0:	01400104 	movi	r5,4
   808b4:	e13ffe17 	ldw	r4,-8(fp)
   808b8:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   808bc:	10bfffcc 	andi	r2,r2,65535
   808c0:	100b883a 	mov	r5,r2
   808c4:	01000274 	movhi	r4,9
   808c8:	210fc404 	addi	r4,r4,16144
   808cc:	00817e80 	call	817e8 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
   808d0:	01802004 	movi	r6,128
   808d4:	01400184 	movi	r5,6
   808d8:	e13ffe17 	ldw	r4,-8(fp)
   808dc:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
   808e0:	01400184 	movi	r5,6
   808e4:	e13ffe17 	ldw	r4,-8(fp)
   808e8:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   808ec:	10bfffcc 	andi	r2,r2,65535
   808f0:	100b883a 	mov	r5,r2
   808f4:	01000274 	movhi	r4,9
   808f8:	210fcb04 	addi	r4,r4,16172
   808fc:	00817e80 	call	817e8 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
   80900:	01800104 	movi	r6,4
   80904:	01400904 	movi	r5,36
   80908:	e13ffe17 	ldw	r4,-8(fp)
   8090c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
   80910:	01400904 	movi	r5,36
   80914:	e13ffe17 	ldw	r4,-8(fp)
   80918:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8091c:	10bfffcc 	andi	r2,r2,65535
   80920:	100b883a 	mov	r5,r2
   80924:	01000274 	movhi	r4,9
   80928:	210fd204 	addi	r4,r4,16200
   8092c:	00817e80 	call	817e8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
   80930:	01800404 	movi	r6,16
   80934:	01400284 	movi	r5,10
   80938:	e13ffe17 	ldw	r4,-8(fp)
   8093c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
   80940:	01400284 	movi	r5,10
   80944:	e13ffe17 	ldw	r4,-8(fp)
   80948:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8094c:	10bfffcc 	andi	r2,r2,65535
   80950:	100b883a 	mov	r5,r2
   80954:	01000274 	movhi	r4,9
   80958:	210fd904 	addi	r4,r4,16228
   8095c:	00817e80 	call	817e8 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
   80960:	01400904 	movi	r5,36
   80964:	e13ffe17 	ldw	r4,-8(fp)
   80968:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8096c:	10bfffcc 	andi	r2,r2,65535
   80970:	100b883a 	mov	r5,r2
   80974:	01000274 	movhi	r4,9
   80978:	210fd204 	addi	r4,r4,16200
   8097c:	00817e80 	call	817e8 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
   80980:	000d883a 	mov	r6,zero
   80984:	01400384 	movi	r5,14
   80988:	e13ffe17 	ldw	r4,-8(fp)
   8098c:	008034c0 	call	8034c <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
   80990:	01400384 	movi	r5,14
   80994:	e13ffe17 	ldw	r4,-8(fp)
   80998:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   8099c:	10bfffcc 	andi	r2,r2,65535
   809a0:	100b883a 	mov	r5,r2
   809a4:	01000274 	movhi	r4,9
   809a8:	210fe004 	addi	r4,r4,16256
   809ac:	00817e80 	call	817e8 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
   809b0:	01400504 	movi	r5,20
   809b4:	e13ffe17 	ldw	r4,-8(fp)
   809b8:	00802980 	call	80298 <SGTL5000_Reg_Rd>
   809bc:	10bfffcc 	andi	r2,r2,65535
   809c0:	100b883a 	mov	r5,r2
   809c4:	01000274 	movhi	r4,9
   809c8:	210fe804 	addi	r4,r4,16288
   809cc:	00817e80 	call	817e8 <printf>


	return 0;
   809d0:	0005883a 	mov	r2,zero
}
   809d4:	e037883a 	mov	sp,fp
   809d8:	dfc00117 	ldw	ra,4(sp)
   809dc:	df000017 	ldw	fp,0(sp)
   809e0:	dec00204 	addi	sp,sp,8
   809e4:	f800283a 	ret

000809e8 <__fixunssfsi>:
   809e8:	defffd04 	addi	sp,sp,-12
   809ec:	dc000015 	stw	r16,0(sp)
   809f0:	0413c034 	movhi	r16,20224
   809f4:	800b883a 	mov	r5,r16
   809f8:	dc400115 	stw	r17,4(sp)
   809fc:	dfc00215 	stw	ra,8(sp)
   80a00:	2023883a 	mov	r17,r4
   80a04:	0080bfc0 	call	80bfc <__gesf2>
   80a08:	1000070e 	bge	r2,zero,80a28 <__fixunssfsi+0x40>
   80a0c:	8809883a 	mov	r4,r17
   80a10:	00815cc0 	call	815cc <__fixsfsi>
   80a14:	dfc00217 	ldw	ra,8(sp)
   80a18:	dc400117 	ldw	r17,4(sp)
   80a1c:	dc000017 	ldw	r16,0(sp)
   80a20:	dec00304 	addi	sp,sp,12
   80a24:	f800283a 	ret
   80a28:	800b883a 	mov	r5,r16
   80a2c:	8809883a 	mov	r4,r17
   80a30:	00810e80 	call	810e8 <__subsf3>
   80a34:	1009883a 	mov	r4,r2
   80a38:	00815cc0 	call	815cc <__fixsfsi>
   80a3c:	00e00034 	movhi	r3,32768
   80a40:	10c5883a 	add	r2,r2,r3
   80a44:	003ff306 	br	80a14 <_gp+0xfff6ee30>

00080a48 <__divsi3>:
   80a48:	20001b16 	blt	r4,zero,80ab8 <__divsi3+0x70>
   80a4c:	000f883a 	mov	r7,zero
   80a50:	28001616 	blt	r5,zero,80aac <__divsi3+0x64>
   80a54:	200d883a 	mov	r6,r4
   80a58:	29001a2e 	bgeu	r5,r4,80ac4 <__divsi3+0x7c>
   80a5c:	00800804 	movi	r2,32
   80a60:	00c00044 	movi	r3,1
   80a64:	00000106 	br	80a6c <__divsi3+0x24>
   80a68:	10000d26 	beq	r2,zero,80aa0 <__divsi3+0x58>
   80a6c:	294b883a 	add	r5,r5,r5
   80a70:	10bfffc4 	addi	r2,r2,-1
   80a74:	18c7883a 	add	r3,r3,r3
   80a78:	293ffb36 	bltu	r5,r4,80a68 <_gp+0xfff6ee84>
   80a7c:	0005883a 	mov	r2,zero
   80a80:	18000726 	beq	r3,zero,80aa0 <__divsi3+0x58>
   80a84:	0005883a 	mov	r2,zero
   80a88:	31400236 	bltu	r6,r5,80a94 <__divsi3+0x4c>
   80a8c:	314dc83a 	sub	r6,r6,r5
   80a90:	10c4b03a 	or	r2,r2,r3
   80a94:	1806d07a 	srli	r3,r3,1
   80a98:	280ad07a 	srli	r5,r5,1
   80a9c:	183ffa1e 	bne	r3,zero,80a88 <_gp+0xfff6eea4>
   80aa0:	38000126 	beq	r7,zero,80aa8 <__divsi3+0x60>
   80aa4:	0085c83a 	sub	r2,zero,r2
   80aa8:	f800283a 	ret
   80aac:	014bc83a 	sub	r5,zero,r5
   80ab0:	39c0005c 	xori	r7,r7,1
   80ab4:	003fe706 	br	80a54 <_gp+0xfff6ee70>
   80ab8:	0109c83a 	sub	r4,zero,r4
   80abc:	01c00044 	movi	r7,1
   80ac0:	003fe306 	br	80a50 <_gp+0xfff6ee6c>
   80ac4:	00c00044 	movi	r3,1
   80ac8:	003fee06 	br	80a84 <_gp+0xfff6eea0>

00080acc <__modsi3>:
   80acc:	20001716 	blt	r4,zero,80b2c <__modsi3+0x60>
   80ad0:	000f883a 	mov	r7,zero
   80ad4:	2005883a 	mov	r2,r4
   80ad8:	28001216 	blt	r5,zero,80b24 <__modsi3+0x58>
   80adc:	2900162e 	bgeu	r5,r4,80b38 <__modsi3+0x6c>
   80ae0:	01800804 	movi	r6,32
   80ae4:	00c00044 	movi	r3,1
   80ae8:	00000106 	br	80af0 <__modsi3+0x24>
   80aec:	30000a26 	beq	r6,zero,80b18 <__modsi3+0x4c>
   80af0:	294b883a 	add	r5,r5,r5
   80af4:	31bfffc4 	addi	r6,r6,-1
   80af8:	18c7883a 	add	r3,r3,r3
   80afc:	293ffb36 	bltu	r5,r4,80aec <_gp+0xfff6ef08>
   80b00:	18000526 	beq	r3,zero,80b18 <__modsi3+0x4c>
   80b04:	1806d07a 	srli	r3,r3,1
   80b08:	11400136 	bltu	r2,r5,80b10 <__modsi3+0x44>
   80b0c:	1145c83a 	sub	r2,r2,r5
   80b10:	280ad07a 	srli	r5,r5,1
   80b14:	183ffb1e 	bne	r3,zero,80b04 <_gp+0xfff6ef20>
   80b18:	38000126 	beq	r7,zero,80b20 <__modsi3+0x54>
   80b1c:	0085c83a 	sub	r2,zero,r2
   80b20:	f800283a 	ret
   80b24:	014bc83a 	sub	r5,zero,r5
   80b28:	003fec06 	br	80adc <_gp+0xfff6eef8>
   80b2c:	0109c83a 	sub	r4,zero,r4
   80b30:	01c00044 	movi	r7,1
   80b34:	003fe706 	br	80ad4 <_gp+0xfff6eef0>
   80b38:	00c00044 	movi	r3,1
   80b3c:	003ff106 	br	80b04 <_gp+0xfff6ef20>

00080b40 <__udivsi3>:
   80b40:	200d883a 	mov	r6,r4
   80b44:	2900152e 	bgeu	r5,r4,80b9c <__udivsi3+0x5c>
   80b48:	28001416 	blt	r5,zero,80b9c <__udivsi3+0x5c>
   80b4c:	00800804 	movi	r2,32
   80b50:	00c00044 	movi	r3,1
   80b54:	00000206 	br	80b60 <__udivsi3+0x20>
   80b58:	10000e26 	beq	r2,zero,80b94 <__udivsi3+0x54>
   80b5c:	28000516 	blt	r5,zero,80b74 <__udivsi3+0x34>
   80b60:	294b883a 	add	r5,r5,r5
   80b64:	10bfffc4 	addi	r2,r2,-1
   80b68:	18c7883a 	add	r3,r3,r3
   80b6c:	293ffa36 	bltu	r5,r4,80b58 <_gp+0xfff6ef74>
   80b70:	18000826 	beq	r3,zero,80b94 <__udivsi3+0x54>
   80b74:	0005883a 	mov	r2,zero
   80b78:	31400236 	bltu	r6,r5,80b84 <__udivsi3+0x44>
   80b7c:	314dc83a 	sub	r6,r6,r5
   80b80:	10c4b03a 	or	r2,r2,r3
   80b84:	1806d07a 	srli	r3,r3,1
   80b88:	280ad07a 	srli	r5,r5,1
   80b8c:	183ffa1e 	bne	r3,zero,80b78 <_gp+0xfff6ef94>
   80b90:	f800283a 	ret
   80b94:	0005883a 	mov	r2,zero
   80b98:	f800283a 	ret
   80b9c:	00c00044 	movi	r3,1
   80ba0:	003ff406 	br	80b74 <_gp+0xfff6ef90>

00080ba4 <__umodsi3>:
   80ba4:	2005883a 	mov	r2,r4
   80ba8:	2900122e 	bgeu	r5,r4,80bf4 <__umodsi3+0x50>
   80bac:	28001116 	blt	r5,zero,80bf4 <__umodsi3+0x50>
   80bb0:	01800804 	movi	r6,32
   80bb4:	00c00044 	movi	r3,1
   80bb8:	00000206 	br	80bc4 <__umodsi3+0x20>
   80bbc:	30000c26 	beq	r6,zero,80bf0 <__umodsi3+0x4c>
   80bc0:	28000516 	blt	r5,zero,80bd8 <__umodsi3+0x34>
   80bc4:	294b883a 	add	r5,r5,r5
   80bc8:	31bfffc4 	addi	r6,r6,-1
   80bcc:	18c7883a 	add	r3,r3,r3
   80bd0:	293ffa36 	bltu	r5,r4,80bbc <_gp+0xfff6efd8>
   80bd4:	18000626 	beq	r3,zero,80bf0 <__umodsi3+0x4c>
   80bd8:	1806d07a 	srli	r3,r3,1
   80bdc:	11400136 	bltu	r2,r5,80be4 <__umodsi3+0x40>
   80be0:	1145c83a 	sub	r2,r2,r5
   80be4:	280ad07a 	srli	r5,r5,1
   80be8:	183ffb1e 	bne	r3,zero,80bd8 <_gp+0xfff6eff4>
   80bec:	f800283a 	ret
   80bf0:	f800283a 	ret
   80bf4:	00c00044 	movi	r3,1
   80bf8:	003ff706 	br	80bd8 <_gp+0xfff6eff4>

00080bfc <__gesf2>:
   80bfc:	2004d5fa 	srli	r2,r4,23
   80c00:	2806d5fa 	srli	r3,r5,23
   80c04:	01802034 	movhi	r6,128
   80c08:	31bfffc4 	addi	r6,r6,-1
   80c0c:	10803fcc 	andi	r2,r2,255
   80c10:	01c03fc4 	movi	r7,255
   80c14:	3110703a 	and	r8,r6,r4
   80c18:	18c03fcc 	andi	r3,r3,255
   80c1c:	314c703a 	and	r6,r6,r5
   80c20:	2008d7fa 	srli	r4,r4,31
   80c24:	280ad7fa 	srli	r5,r5,31
   80c28:	11c01926 	beq	r2,r7,80c90 <__gesf2+0x94>
   80c2c:	01c03fc4 	movi	r7,255
   80c30:	19c00f26 	beq	r3,r7,80c70 <__gesf2+0x74>
   80c34:	1000061e 	bne	r2,zero,80c50 <__gesf2+0x54>
   80c38:	400f003a 	cmpeq	r7,r8,zero
   80c3c:	1800071e 	bne	r3,zero,80c5c <__gesf2+0x60>
   80c40:	3000061e 	bne	r6,zero,80c5c <__gesf2+0x60>
   80c44:	0005883a 	mov	r2,zero
   80c48:	40000e1e 	bne	r8,zero,80c84 <__gesf2+0x88>
   80c4c:	f800283a 	ret
   80c50:	18000a1e 	bne	r3,zero,80c7c <__gesf2+0x80>
   80c54:	30000b26 	beq	r6,zero,80c84 <__gesf2+0x88>
   80c58:	000f883a 	mov	r7,zero
   80c5c:	29403fcc 	andi	r5,r5,255
   80c60:	38000726 	beq	r7,zero,80c80 <__gesf2+0x84>
   80c64:	28000826 	beq	r5,zero,80c88 <__gesf2+0x8c>
   80c68:	00800044 	movi	r2,1
   80c6c:	f800283a 	ret
   80c70:	303ff026 	beq	r6,zero,80c34 <_gp+0xfff6f050>
   80c74:	00bfff84 	movi	r2,-2
   80c78:	f800283a 	ret
   80c7c:	29403fcc 	andi	r5,r5,255
   80c80:	21400526 	beq	r4,r5,80c98 <__gesf2+0x9c>
   80c84:	203ff826 	beq	r4,zero,80c68 <_gp+0xfff6f084>
   80c88:	00bfffc4 	movi	r2,-1
   80c8c:	f800283a 	ret
   80c90:	403fe626 	beq	r8,zero,80c2c <_gp+0xfff6f048>
   80c94:	003ff706 	br	80c74 <_gp+0xfff6f090>
   80c98:	18bffa16 	blt	r3,r2,80c84 <_gp+0xfff6f0a0>
   80c9c:	10c00216 	blt	r2,r3,80ca8 <__gesf2+0xac>
   80ca0:	323ff836 	bltu	r6,r8,80c84 <_gp+0xfff6f0a0>
   80ca4:	4180022e 	bgeu	r8,r6,80cb0 <__gesf2+0xb4>
   80ca8:	203fef1e 	bne	r4,zero,80c68 <_gp+0xfff6f084>
   80cac:	003ff606 	br	80c88 <_gp+0xfff6f0a4>
   80cb0:	0005883a 	mov	r2,zero
   80cb4:	f800283a 	ret

00080cb8 <__mulsf3>:
   80cb8:	defff504 	addi	sp,sp,-44
   80cbc:	dc000115 	stw	r16,4(sp)
   80cc0:	2020d5fa 	srli	r16,r4,23
   80cc4:	dd400615 	stw	r21,24(sp)
   80cc8:	202ad7fa 	srli	r21,r4,31
   80ccc:	dc800315 	stw	r18,12(sp)
   80cd0:	04802034 	movhi	r18,128
   80cd4:	df000915 	stw	fp,36(sp)
   80cd8:	dd000515 	stw	r20,20(sp)
   80cdc:	94bfffc4 	addi	r18,r18,-1
   80ce0:	dfc00a15 	stw	ra,40(sp)
   80ce4:	ddc00815 	stw	r23,32(sp)
   80ce8:	dd800715 	stw	r22,28(sp)
   80cec:	dcc00415 	stw	r19,16(sp)
   80cf0:	dc400215 	stw	r17,8(sp)
   80cf4:	84003fcc 	andi	r16,r16,255
   80cf8:	9124703a 	and	r18,r18,r4
   80cfc:	a829883a 	mov	r20,r21
   80d00:	af003fcc 	andi	fp,r21,255
   80d04:	80005426 	beq	r16,zero,80e58 <__mulsf3+0x1a0>
   80d08:	00803fc4 	movi	r2,255
   80d0c:	80802f26 	beq	r16,r2,80dcc <__mulsf3+0x114>
   80d10:	91002034 	orhi	r4,r18,128
   80d14:	202490fa 	slli	r18,r4,3
   80d18:	843fe044 	addi	r16,r16,-127
   80d1c:	0023883a 	mov	r17,zero
   80d20:	002f883a 	mov	r23,zero
   80d24:	2804d5fa 	srli	r2,r5,23
   80d28:	282cd7fa 	srli	r22,r5,31
   80d2c:	01002034 	movhi	r4,128
   80d30:	213fffc4 	addi	r4,r4,-1
   80d34:	10803fcc 	andi	r2,r2,255
   80d38:	2166703a 	and	r19,r4,r5
   80d3c:	b1803fcc 	andi	r6,r22,255
   80d40:	10004c26 	beq	r2,zero,80e74 <__mulsf3+0x1bc>
   80d44:	00c03fc4 	movi	r3,255
   80d48:	10c04726 	beq	r2,r3,80e68 <__mulsf3+0x1b0>
   80d4c:	99002034 	orhi	r4,r19,128
   80d50:	202690fa 	slli	r19,r4,3
   80d54:	10bfe044 	addi	r2,r2,-127
   80d58:	0007883a 	mov	r3,zero
   80d5c:	80a1883a 	add	r16,r16,r2
   80d60:	010003c4 	movi	r4,15
   80d64:	1c44b03a 	or	r2,r3,r17
   80d68:	b56af03a 	xor	r21,r22,r21
   80d6c:	81c00044 	addi	r7,r16,1
   80d70:	20806b36 	bltu	r4,r2,80f20 <__mulsf3+0x268>
   80d74:	100490ba 	slli	r2,r2,2
   80d78:	01000234 	movhi	r4,8
   80d7c:	21036304 	addi	r4,r4,3468
   80d80:	1105883a 	add	r2,r2,r4
   80d84:	10800017 	ldw	r2,0(r2)
   80d88:	1000683a 	jmp	r2
   80d8c:	00080f20 	cmpeqi	zero,zero,8252
   80d90:	00080de0 	cmpeqi	zero,zero,8247
   80d94:	00080de0 	cmpeqi	zero,zero,8247
   80d98:	00080ddc 	xori	zero,zero,8247
   80d9c:	00080f04 	movi	zero,8252
   80da0:	00080f04 	movi	zero,8252
   80da4:	00080ef0 	cmpltui	zero,zero,8251
   80da8:	00080ddc 	xori	zero,zero,8247
   80dac:	00080f04 	movi	zero,8252
   80db0:	00080ef0 	cmpltui	zero,zero,8251
   80db4:	00080f04 	movi	zero,8252
   80db8:	00080ddc 	xori	zero,zero,8247
   80dbc:	00080f10 	cmplti	zero,zero,8252
   80dc0:	00080f10 	cmplti	zero,zero,8252
   80dc4:	00080f10 	cmplti	zero,zero,8252
   80dc8:	00081020 	cmpeqi	zero,zero,8256
   80dcc:	90003b1e 	bne	r18,zero,80ebc <__mulsf3+0x204>
   80dd0:	04400204 	movi	r17,8
   80dd4:	05c00084 	movi	r23,2
   80dd8:	003fd206 	br	80d24 <_gp+0xfff6f140>
   80ddc:	302b883a 	mov	r21,r6
   80de0:	00800084 	movi	r2,2
   80de4:	18802626 	beq	r3,r2,80e80 <__mulsf3+0x1c8>
   80de8:	008000c4 	movi	r2,3
   80dec:	1880b826 	beq	r3,r2,810d0 <__mulsf3+0x418>
   80df0:	00800044 	movi	r2,1
   80df4:	1880af1e 	bne	r3,r2,810b4 <__mulsf3+0x3fc>
   80df8:	a829883a 	mov	r20,r21
   80dfc:	0007883a 	mov	r3,zero
   80e00:	0009883a 	mov	r4,zero
   80e04:	18803fcc 	andi	r2,r3,255
   80e08:	100695fa 	slli	r3,r2,23
   80e0c:	a0803fcc 	andi	r2,r20,255
   80e10:	100a97fa 	slli	r5,r2,31
   80e14:	00802034 	movhi	r2,128
   80e18:	10bfffc4 	addi	r2,r2,-1
   80e1c:	2084703a 	and	r2,r4,r2
   80e20:	10c4b03a 	or	r2,r2,r3
   80e24:	1144b03a 	or	r2,r2,r5
   80e28:	dfc00a17 	ldw	ra,40(sp)
   80e2c:	df000917 	ldw	fp,36(sp)
   80e30:	ddc00817 	ldw	r23,32(sp)
   80e34:	dd800717 	ldw	r22,28(sp)
   80e38:	dd400617 	ldw	r21,24(sp)
   80e3c:	dd000517 	ldw	r20,20(sp)
   80e40:	dcc00417 	ldw	r19,16(sp)
   80e44:	dc800317 	ldw	r18,12(sp)
   80e48:	dc400217 	ldw	r17,8(sp)
   80e4c:	dc000117 	ldw	r16,4(sp)
   80e50:	dec00b04 	addi	sp,sp,44
   80e54:	f800283a 	ret
   80e58:	90000d1e 	bne	r18,zero,80e90 <__mulsf3+0x1d8>
   80e5c:	04400104 	movi	r17,4
   80e60:	05c00044 	movi	r23,1
   80e64:	003faf06 	br	80d24 <_gp+0xfff6f140>
   80e68:	9806c03a 	cmpne	r3,r19,zero
   80e6c:	18c00084 	addi	r3,r3,2
   80e70:	003fba06 	br	80d5c <_gp+0xfff6f178>
   80e74:	9800141e 	bne	r19,zero,80ec8 <__mulsf3+0x210>
   80e78:	00c00044 	movi	r3,1
   80e7c:	003fb706 	br	80d5c <_gp+0xfff6f178>
   80e80:	a829883a 	mov	r20,r21
   80e84:	00ffffc4 	movi	r3,-1
   80e88:	0009883a 	mov	r4,zero
   80e8c:	003fdd06 	br	80e04 <_gp+0xfff6f220>
   80e90:	9009883a 	mov	r4,r18
   80e94:	d9400015 	stw	r5,0(sp)
   80e98:	008172c0 	call	8172c <__clzsi2>
   80e9c:	10fffec4 	addi	r3,r2,-5
   80ea0:	10801d84 	addi	r2,r2,118
   80ea4:	90e4983a 	sll	r18,r18,r3
   80ea8:	00a1c83a 	sub	r16,zero,r2
   80eac:	0023883a 	mov	r17,zero
   80eb0:	002f883a 	mov	r23,zero
   80eb4:	d9400017 	ldw	r5,0(sp)
   80eb8:	003f9a06 	br	80d24 <_gp+0xfff6f140>
   80ebc:	04400304 	movi	r17,12
   80ec0:	05c000c4 	movi	r23,3
   80ec4:	003f9706 	br	80d24 <_gp+0xfff6f140>
   80ec8:	9809883a 	mov	r4,r19
   80ecc:	d9800015 	stw	r6,0(sp)
   80ed0:	008172c0 	call	8172c <__clzsi2>
   80ed4:	10fffec4 	addi	r3,r2,-5
   80ed8:	10801d84 	addi	r2,r2,118
   80edc:	98e6983a 	sll	r19,r19,r3
   80ee0:	0085c83a 	sub	r2,zero,r2
   80ee4:	0007883a 	mov	r3,zero
   80ee8:	d9800017 	ldw	r6,0(sp)
   80eec:	003f9b06 	br	80d5c <_gp+0xfff6f178>
   80ef0:	01002034 	movhi	r4,128
   80ef4:	0029883a 	mov	r20,zero
   80ef8:	213fffc4 	addi	r4,r4,-1
   80efc:	00ffffc4 	movi	r3,-1
   80f00:	003fc006 	br	80e04 <_gp+0xfff6f220>
   80f04:	9027883a 	mov	r19,r18
   80f08:	b807883a 	mov	r3,r23
   80f0c:	003fb406 	br	80de0 <_gp+0xfff6f1fc>
   80f10:	9027883a 	mov	r19,r18
   80f14:	e02b883a 	mov	r21,fp
   80f18:	b807883a 	mov	r3,r23
   80f1c:	003fb006 	br	80de0 <_gp+0xfff6f1fc>
   80f20:	9028d43a 	srli	r20,r18,16
   80f24:	982cd43a 	srli	r22,r19,16
   80f28:	94bfffcc 	andi	r18,r18,65535
   80f2c:	9cffffcc 	andi	r19,r19,65535
   80f30:	980b883a 	mov	r5,r19
   80f34:	9009883a 	mov	r4,r18
   80f38:	d9c00015 	stw	r7,0(sp)
   80f3c:	00817900 	call	81790 <__mulsi3>
   80f40:	a00b883a 	mov	r5,r20
   80f44:	9809883a 	mov	r4,r19
   80f48:	1023883a 	mov	r17,r2
   80f4c:	00817900 	call	81790 <__mulsi3>
   80f50:	a009883a 	mov	r4,r20
   80f54:	b00b883a 	mov	r5,r22
   80f58:	1027883a 	mov	r19,r2
   80f5c:	00817900 	call	81790 <__mulsi3>
   80f60:	b00b883a 	mov	r5,r22
   80f64:	9009883a 	mov	r4,r18
   80f68:	1029883a 	mov	r20,r2
   80f6c:	00817900 	call	81790 <__mulsi3>
   80f70:	8806d43a 	srli	r3,r17,16
   80f74:	14c5883a 	add	r2,r2,r19
   80f78:	d9c00017 	ldw	r7,0(sp)
   80f7c:	1885883a 	add	r2,r3,r2
   80f80:	14c0022e 	bgeu	r2,r19,80f8c <__mulsf3+0x2d4>
   80f84:	00c00074 	movhi	r3,1
   80f88:	a0e9883a 	add	r20,r20,r3
   80f8c:	1026943a 	slli	r19,r2,16
   80f90:	8c7fffcc 	andi	r17,r17,65535
   80f94:	1004d43a 	srli	r2,r2,16
   80f98:	9c63883a 	add	r17,r19,r17
   80f9c:	882691ba 	slli	r19,r17,6
   80fa0:	1505883a 	add	r2,r2,r20
   80fa4:	8822d6ba 	srli	r17,r17,26
   80fa8:	100891ba 	slli	r4,r2,6
   80fac:	9826c03a 	cmpne	r19,r19,zero
   80fb0:	9c62b03a 	or	r17,r19,r17
   80fb4:	8926b03a 	or	r19,r17,r4
   80fb8:	9882002c 	andhi	r2,r19,2048
   80fbc:	10000426 	beq	r2,zero,80fd0 <__mulsf3+0x318>
   80fc0:	9804d07a 	srli	r2,r19,1
   80fc4:	9900004c 	andi	r4,r19,1
   80fc8:	3821883a 	mov	r16,r7
   80fcc:	1126b03a 	or	r19,r2,r4
   80fd0:	80c01fc4 	addi	r3,r16,127
   80fd4:	00c0210e 	bge	zero,r3,8105c <__mulsf3+0x3a4>
   80fd8:	988001cc 	andi	r2,r19,7
   80fdc:	10000426 	beq	r2,zero,80ff0 <__mulsf3+0x338>
   80fe0:	988003cc 	andi	r2,r19,15
   80fe4:	01000104 	movi	r4,4
   80fe8:	11000126 	beq	r2,r4,80ff0 <__mulsf3+0x338>
   80fec:	9927883a 	add	r19,r19,r4
   80ff0:	9882002c 	andhi	r2,r19,2048
   80ff4:	10000426 	beq	r2,zero,81008 <__mulsf3+0x350>
   80ff8:	00be0034 	movhi	r2,63488
   80ffc:	10bfffc4 	addi	r2,r2,-1
   81000:	80c02004 	addi	r3,r16,128
   81004:	98a6703a 	and	r19,r19,r2
   81008:	00803f84 	movi	r2,254
   8100c:	10ff9c16 	blt	r2,r3,80e80 <_gp+0xfff6f29c>
   81010:	980891ba 	slli	r4,r19,6
   81014:	a829883a 	mov	r20,r21
   81018:	2008d27a 	srli	r4,r4,9
   8101c:	003f7906 	br	80e04 <_gp+0xfff6f220>
   81020:	9080102c 	andhi	r2,r18,64
   81024:	10000826 	beq	r2,zero,81048 <__mulsf3+0x390>
   81028:	9880102c 	andhi	r2,r19,64
   8102c:	1000061e 	bne	r2,zero,81048 <__mulsf3+0x390>
   81030:	00802034 	movhi	r2,128
   81034:	99001034 	orhi	r4,r19,64
   81038:	10bfffc4 	addi	r2,r2,-1
   8103c:	b029883a 	mov	r20,r22
   81040:	2088703a 	and	r4,r4,r2
   81044:	003fad06 	br	80efc <_gp+0xfff6f318>
   81048:	00802034 	movhi	r2,128
   8104c:	91001034 	orhi	r4,r18,64
   81050:	10bfffc4 	addi	r2,r2,-1
   81054:	2088703a 	and	r4,r4,r2
   81058:	003fa806 	br	80efc <_gp+0xfff6f318>
   8105c:	00800044 	movi	r2,1
   81060:	10c7c83a 	sub	r3,r2,r3
   81064:	008006c4 	movi	r2,27
   81068:	10ff6316 	blt	r2,r3,80df8 <_gp+0xfff6f214>
   8106c:	00800804 	movi	r2,32
   81070:	10c5c83a 	sub	r2,r2,r3
   81074:	9884983a 	sll	r2,r19,r2
   81078:	98c6d83a 	srl	r3,r19,r3
   8107c:	1004c03a 	cmpne	r2,r2,zero
   81080:	1884b03a 	or	r2,r3,r2
   81084:	10c001cc 	andi	r3,r2,7
   81088:	18000426 	beq	r3,zero,8109c <__mulsf3+0x3e4>
   8108c:	10c003cc 	andi	r3,r2,15
   81090:	01000104 	movi	r4,4
   81094:	19000126 	beq	r3,r4,8109c <__mulsf3+0x3e4>
   81098:	1105883a 	add	r2,r2,r4
   8109c:	10c1002c 	andhi	r3,r2,1024
   810a0:	18000626 	beq	r3,zero,810bc <__mulsf3+0x404>
   810a4:	a829883a 	mov	r20,r21
   810a8:	00c00044 	movi	r3,1
   810ac:	0009883a 	mov	r4,zero
   810b0:	003f5406 	br	80e04 <_gp+0xfff6f220>
   810b4:	3821883a 	mov	r16,r7
   810b8:	003fc506 	br	80fd0 <_gp+0xfff6f3ec>
   810bc:	100491ba 	slli	r2,r2,6
   810c0:	a829883a 	mov	r20,r21
   810c4:	0007883a 	mov	r3,zero
   810c8:	1008d27a 	srli	r4,r2,9
   810cc:	003f4d06 	br	80e04 <_gp+0xfff6f220>
   810d0:	00802034 	movhi	r2,128
   810d4:	99001034 	orhi	r4,r19,64
   810d8:	10bfffc4 	addi	r2,r2,-1
   810dc:	a829883a 	mov	r20,r21
   810e0:	2088703a 	and	r4,r4,r2
   810e4:	003f8506 	br	80efc <_gp+0xfff6f318>

000810e8 <__subsf3>:
   810e8:	defffc04 	addi	sp,sp,-16
   810ec:	280cd5fa 	srli	r6,r5,23
   810f0:	dc000015 	stw	r16,0(sp)
   810f4:	01c02034 	movhi	r7,128
   810f8:	2020d5fa 	srli	r16,r4,23
   810fc:	39ffffc4 	addi	r7,r7,-1
   81100:	3906703a 	and	r3,r7,r4
   81104:	dc400115 	stw	r17,4(sp)
   81108:	394e703a 	and	r7,r7,r5
   8110c:	2022d7fa 	srli	r17,r4,31
   81110:	dfc00315 	stw	ra,12(sp)
   81114:	dc800215 	stw	r18,8(sp)
   81118:	31803fcc 	andi	r6,r6,255
   8111c:	01003fc4 	movi	r4,255
   81120:	84003fcc 	andi	r16,r16,255
   81124:	180690fa 	slli	r3,r3,3
   81128:	2804d7fa 	srli	r2,r5,31
   8112c:	380e90fa 	slli	r7,r7,3
   81130:	31006d26 	beq	r6,r4,812e8 <__subsf3+0x200>
   81134:	1080005c 	xori	r2,r2,1
   81138:	8189c83a 	sub	r4,r16,r6
   8113c:	14404f26 	beq	r2,r17,8127c <__subsf3+0x194>
   81140:	0100770e 	bge	zero,r4,81320 <__subsf3+0x238>
   81144:	30001e1e 	bne	r6,zero,811c0 <__subsf3+0xd8>
   81148:	38006a1e 	bne	r7,zero,812f4 <__subsf3+0x20c>
   8114c:	188001cc 	andi	r2,r3,7
   81150:	10000426 	beq	r2,zero,81164 <__subsf3+0x7c>
   81154:	188003cc 	andi	r2,r3,15
   81158:	01000104 	movi	r4,4
   8115c:	11000126 	beq	r2,r4,81164 <__subsf3+0x7c>
   81160:	1907883a 	add	r3,r3,r4
   81164:	1881002c 	andhi	r2,r3,1024
   81168:	10003926 	beq	r2,zero,81250 <__subsf3+0x168>
   8116c:	84000044 	addi	r16,r16,1
   81170:	00803fc4 	movi	r2,255
   81174:	80807526 	beq	r16,r2,8134c <__subsf3+0x264>
   81178:	180691ba 	slli	r3,r3,6
   8117c:	8880004c 	andi	r2,r17,1
   81180:	180ad27a 	srli	r5,r3,9
   81184:	84003fcc 	andi	r16,r16,255
   81188:	800695fa 	slli	r3,r16,23
   8118c:	10803fcc 	andi	r2,r2,255
   81190:	01002034 	movhi	r4,128
   81194:	213fffc4 	addi	r4,r4,-1
   81198:	100497fa 	slli	r2,r2,31
   8119c:	2920703a 	and	r16,r5,r4
   811a0:	80e0b03a 	or	r16,r16,r3
   811a4:	8084b03a 	or	r2,r16,r2
   811a8:	dfc00317 	ldw	ra,12(sp)
   811ac:	dc800217 	ldw	r18,8(sp)
   811b0:	dc400117 	ldw	r17,4(sp)
   811b4:	dc000017 	ldw	r16,0(sp)
   811b8:	dec00404 	addi	sp,sp,16
   811bc:	f800283a 	ret
   811c0:	00803fc4 	movi	r2,255
   811c4:	80bfe126 	beq	r16,r2,8114c <_gp+0xfff6f568>
   811c8:	39c10034 	orhi	r7,r7,1024
   811cc:	008006c4 	movi	r2,27
   811d0:	11007416 	blt	r2,r4,813a4 <__subsf3+0x2bc>
   811d4:	00800804 	movi	r2,32
   811d8:	1105c83a 	sub	r2,r2,r4
   811dc:	3884983a 	sll	r2,r7,r2
   811e0:	390ed83a 	srl	r7,r7,r4
   811e4:	1008c03a 	cmpne	r4,r2,zero
   811e8:	390eb03a 	or	r7,r7,r4
   811ec:	19c7c83a 	sub	r3,r3,r7
   811f0:	1881002c 	andhi	r2,r3,1024
   811f4:	10001426 	beq	r2,zero,81248 <__subsf3+0x160>
   811f8:	04810034 	movhi	r18,1024
   811fc:	94bfffc4 	addi	r18,r18,-1
   81200:	1ca4703a 	and	r18,r3,r18
   81204:	9009883a 	mov	r4,r18
   81208:	008172c0 	call	8172c <__clzsi2>
   8120c:	10bffec4 	addi	r2,r2,-5
   81210:	90a4983a 	sll	r18,r18,r2
   81214:	14005116 	blt	r2,r16,8135c <__subsf3+0x274>
   81218:	1405c83a 	sub	r2,r2,r16
   8121c:	10c00044 	addi	r3,r2,1
   81220:	00800804 	movi	r2,32
   81224:	10c5c83a 	sub	r2,r2,r3
   81228:	9084983a 	sll	r2,r18,r2
   8122c:	90e4d83a 	srl	r18,r18,r3
   81230:	0021883a 	mov	r16,zero
   81234:	1006c03a 	cmpne	r3,r2,zero
   81238:	90c6b03a 	or	r3,r18,r3
   8123c:	003fc306 	br	8114c <_gp+0xfff6f568>
   81240:	2000e026 	beq	r4,zero,815c4 <__subsf3+0x4dc>
   81244:	2007883a 	mov	r3,r4
   81248:	188001cc 	andi	r2,r3,7
   8124c:	103fc11e 	bne	r2,zero,81154 <_gp+0xfff6f570>
   81250:	180ad0fa 	srli	r5,r3,3
   81254:	00c03fc4 	movi	r3,255
   81258:	8880004c 	andi	r2,r17,1
   8125c:	80c0031e 	bne	r16,r3,8126c <__subsf3+0x184>
   81260:	28006d26 	beq	r5,zero,81418 <__subsf3+0x330>
   81264:	29401034 	orhi	r5,r5,64
   81268:	043fffc4 	movi	r16,-1
   8126c:	00c02034 	movhi	r3,128
   81270:	18ffffc4 	addi	r3,r3,-1
   81274:	28ca703a 	and	r5,r5,r3
   81278:	003fc206 	br	81184 <_gp+0xfff6f5a0>
   8127c:	01003c0e 	bge	zero,r4,81370 <__subsf3+0x288>
   81280:	30002126 	beq	r6,zero,81308 <__subsf3+0x220>
   81284:	01403fc4 	movi	r5,255
   81288:	817fb026 	beq	r16,r5,8114c <_gp+0xfff6f568>
   8128c:	39c10034 	orhi	r7,r7,1024
   81290:	014006c4 	movi	r5,27
   81294:	29007416 	blt	r5,r4,81468 <__subsf3+0x380>
   81298:	01400804 	movi	r5,32
   8129c:	290bc83a 	sub	r5,r5,r4
   812a0:	394a983a 	sll	r5,r7,r5
   812a4:	390ed83a 	srl	r7,r7,r4
   812a8:	2808c03a 	cmpne	r4,r5,zero
   812ac:	390eb03a 	or	r7,r7,r4
   812b0:	19c7883a 	add	r3,r3,r7
   812b4:	1901002c 	andhi	r4,r3,1024
   812b8:	20003826 	beq	r4,zero,8139c <__subsf3+0x2b4>
   812bc:	84000044 	addi	r16,r16,1
   812c0:	01003fc4 	movi	r4,255
   812c4:	81005426 	beq	r16,r4,81418 <__subsf3+0x330>
   812c8:	1023883a 	mov	r17,r2
   812cc:	00bf0034 	movhi	r2,64512
   812d0:	10bfffc4 	addi	r2,r2,-1
   812d4:	1900004c 	andi	r4,r3,1
   812d8:	1886703a 	and	r3,r3,r2
   812dc:	1806d07a 	srli	r3,r3,1
   812e0:	1906b03a 	or	r3,r3,r4
   812e4:	003f9906 	br	8114c <_gp+0xfff6f568>
   812e8:	383f9226 	beq	r7,zero,81134 <_gp+0xfff6f550>
   812ec:	10803fcc 	andi	r2,r2,255
   812f0:	003f9106 	br	81138 <_gp+0xfff6f554>
   812f4:	213fffc4 	addi	r4,r4,-1
   812f8:	203fbc26 	beq	r4,zero,811ec <_gp+0xfff6f608>
   812fc:	00803fc4 	movi	r2,255
   81300:	80bfb21e 	bne	r16,r2,811cc <_gp+0xfff6f5e8>
   81304:	003f9106 	br	8114c <_gp+0xfff6f568>
   81308:	383f9026 	beq	r7,zero,8114c <_gp+0xfff6f568>
   8130c:	213fffc4 	addi	r4,r4,-1
   81310:	203fe726 	beq	r4,zero,812b0 <_gp+0xfff6f6cc>
   81314:	01403fc4 	movi	r5,255
   81318:	817fdd1e 	bne	r16,r5,81290 <_gp+0xfff6f6ac>
   8131c:	003f8b06 	br	8114c <_gp+0xfff6f568>
   81320:	2000221e 	bne	r4,zero,813ac <__subsf3+0x2c4>
   81324:	81000044 	addi	r4,r16,1
   81328:	21003fcc 	andi	r4,r4,255
   8132c:	01400044 	movi	r5,1
   81330:	2900470e 	bge	r5,r4,81450 <__subsf3+0x368>
   81334:	19e5c83a 	sub	r18,r3,r7
   81338:	9141002c 	andhi	r5,r18,1024
   8133c:	28002d26 	beq	r5,zero,813f4 <__subsf3+0x30c>
   81340:	38e5c83a 	sub	r18,r7,r3
   81344:	1023883a 	mov	r17,r2
   81348:	003fae06 	br	81204 <_gp+0xfff6f620>
   8134c:	8880004c 	andi	r2,r17,1
   81350:	043fffc4 	movi	r16,-1
   81354:	000b883a 	mov	r5,zero
   81358:	003f8a06 	br	81184 <_gp+0xfff6f5a0>
   8135c:	00ff0034 	movhi	r3,64512
   81360:	18ffffc4 	addi	r3,r3,-1
   81364:	80a1c83a 	sub	r16,r16,r2
   81368:	90c6703a 	and	r3,r18,r3
   8136c:	003f7706 	br	8114c <_gp+0xfff6f568>
   81370:	2000431e 	bne	r4,zero,81480 <__subsf3+0x398>
   81374:	81000044 	addi	r4,r16,1
   81378:	21803fcc 	andi	r6,r4,255
   8137c:	01400044 	movi	r5,1
   81380:	2980280e 	bge	r5,r6,81424 <__subsf3+0x33c>
   81384:	01403fc4 	movi	r5,255
   81388:	21402326 	beq	r4,r5,81418 <__subsf3+0x330>
   8138c:	19c7883a 	add	r3,r3,r7
   81390:	1806d07a 	srli	r3,r3,1
   81394:	2021883a 	mov	r16,r4
   81398:	003f6c06 	br	8114c <_gp+0xfff6f568>
   8139c:	1023883a 	mov	r17,r2
   813a0:	003fa906 	br	81248 <_gp+0xfff6f664>
   813a4:	01c00044 	movi	r7,1
   813a8:	003f9006 	br	811ec <_gp+0xfff6f608>
   813ac:	8000151e 	bne	r16,zero,81404 <__subsf3+0x31c>
   813b0:	18002f26 	beq	r3,zero,81470 <__subsf3+0x388>
   813b4:	0108303a 	nor	r4,zero,r4
   813b8:	20000a26 	beq	r4,zero,813e4 <__subsf3+0x2fc>
   813bc:	01403fc4 	movi	r5,255
   813c0:	31402b26 	beq	r6,r5,81470 <__subsf3+0x388>
   813c4:	014006c4 	movi	r5,27
   813c8:	29006e16 	blt	r5,r4,81584 <__subsf3+0x49c>
   813cc:	01400804 	movi	r5,32
   813d0:	290bc83a 	sub	r5,r5,r4
   813d4:	194a983a 	sll	r5,r3,r5
   813d8:	1908d83a 	srl	r4,r3,r4
   813dc:	2806c03a 	cmpne	r3,r5,zero
   813e0:	20c6b03a 	or	r3,r4,r3
   813e4:	38c7c83a 	sub	r3,r7,r3
   813e8:	3021883a 	mov	r16,r6
   813ec:	1023883a 	mov	r17,r2
   813f0:	003f7f06 	br	811f0 <_gp+0xfff6f60c>
   813f4:	903f831e 	bne	r18,zero,81204 <_gp+0xfff6f620>
   813f8:	0005883a 	mov	r2,zero
   813fc:	0021883a 	mov	r16,zero
   81400:	003f9a06 	br	8126c <_gp+0xfff6f688>
   81404:	01403fc4 	movi	r5,255
   81408:	31401926 	beq	r6,r5,81470 <__subsf3+0x388>
   8140c:	0109c83a 	sub	r4,zero,r4
   81410:	18c10034 	orhi	r3,r3,1024
   81414:	003feb06 	br	813c4 <_gp+0xfff6f7e0>
   81418:	043fffc4 	movi	r16,-1
   8141c:	000b883a 	mov	r5,zero
   81420:	003f5806 	br	81184 <_gp+0xfff6f5a0>
   81424:	8000481e 	bne	r16,zero,81548 <__subsf3+0x460>
   81428:	18006226 	beq	r3,zero,815b4 <__subsf3+0x4cc>
   8142c:	383f4726 	beq	r7,zero,8114c <_gp+0xfff6f568>
   81430:	19c7883a 	add	r3,r3,r7
   81434:	1881002c 	andhi	r2,r3,1024
   81438:	103f8326 	beq	r2,zero,81248 <_gp+0xfff6f664>
   8143c:	00bf0034 	movhi	r2,64512
   81440:	10bfffc4 	addi	r2,r2,-1
   81444:	2821883a 	mov	r16,r5
   81448:	1886703a 	and	r3,r3,r2
   8144c:	003f3f06 	br	8114c <_gp+0xfff6f568>
   81450:	80001c1e 	bne	r16,zero,814c4 <__subsf3+0x3dc>
   81454:	1800261e 	bne	r3,zero,814f0 <__subsf3+0x408>
   81458:	38004c26 	beq	r7,zero,8158c <__subsf3+0x4a4>
   8145c:	3807883a 	mov	r3,r7
   81460:	1023883a 	mov	r17,r2
   81464:	003f3906 	br	8114c <_gp+0xfff6f568>
   81468:	01c00044 	movi	r7,1
   8146c:	003f9006 	br	812b0 <_gp+0xfff6f6cc>
   81470:	3807883a 	mov	r3,r7
   81474:	3021883a 	mov	r16,r6
   81478:	1023883a 	mov	r17,r2
   8147c:	003f3306 	br	8114c <_gp+0xfff6f568>
   81480:	8000161e 	bne	r16,zero,814dc <__subsf3+0x3f4>
   81484:	18002d26 	beq	r3,zero,8153c <__subsf3+0x454>
   81488:	0108303a 	nor	r4,zero,r4
   8148c:	20000a26 	beq	r4,zero,814b8 <__subsf3+0x3d0>
   81490:	01403fc4 	movi	r5,255
   81494:	31402926 	beq	r6,r5,8153c <__subsf3+0x454>
   81498:	014006c4 	movi	r5,27
   8149c:	29004716 	blt	r5,r4,815bc <__subsf3+0x4d4>
   814a0:	01400804 	movi	r5,32
   814a4:	290bc83a 	sub	r5,r5,r4
   814a8:	194a983a 	sll	r5,r3,r5
   814ac:	1908d83a 	srl	r4,r3,r4
   814b0:	2806c03a 	cmpne	r3,r5,zero
   814b4:	20c6b03a 	or	r3,r4,r3
   814b8:	19c7883a 	add	r3,r3,r7
   814bc:	3021883a 	mov	r16,r6
   814c0:	003f7c06 	br	812b4 <_gp+0xfff6f6d0>
   814c4:	1800111e 	bne	r3,zero,8150c <__subsf3+0x424>
   814c8:	38003326 	beq	r7,zero,81598 <__subsf3+0x4b0>
   814cc:	3807883a 	mov	r3,r7
   814d0:	1023883a 	mov	r17,r2
   814d4:	04003fc4 	movi	r16,255
   814d8:	003f1c06 	br	8114c <_gp+0xfff6f568>
   814dc:	01403fc4 	movi	r5,255
   814e0:	31401626 	beq	r6,r5,8153c <__subsf3+0x454>
   814e4:	0109c83a 	sub	r4,zero,r4
   814e8:	18c10034 	orhi	r3,r3,1024
   814ec:	003fea06 	br	81498 <_gp+0xfff6f8b4>
   814f0:	383f1626 	beq	r7,zero,8114c <_gp+0xfff6f568>
   814f4:	19c9c83a 	sub	r4,r3,r7
   814f8:	2141002c 	andhi	r5,r4,1024
   814fc:	283f5026 	beq	r5,zero,81240 <_gp+0xfff6f65c>
   81500:	38c7c83a 	sub	r3,r7,r3
   81504:	1023883a 	mov	r17,r2
   81508:	003f1006 	br	8114c <_gp+0xfff6f568>
   8150c:	38001b26 	beq	r7,zero,8157c <__subsf3+0x494>
   81510:	1806d0fa 	srli	r3,r3,3
   81514:	1900102c 	andhi	r4,r3,64
   81518:	20000526 	beq	r4,zero,81530 <__subsf3+0x448>
   8151c:	380ed0fa 	srli	r7,r7,3
   81520:	3900102c 	andhi	r4,r7,64
   81524:	2000021e 	bne	r4,zero,81530 <__subsf3+0x448>
   81528:	3807883a 	mov	r3,r7
   8152c:	1023883a 	mov	r17,r2
   81530:	180690fa 	slli	r3,r3,3
   81534:	04003fc4 	movi	r16,255
   81538:	003f0406 	br	8114c <_gp+0xfff6f568>
   8153c:	3807883a 	mov	r3,r7
   81540:	3021883a 	mov	r16,r6
   81544:	003f0106 	br	8114c <_gp+0xfff6f568>
   81548:	18001726 	beq	r3,zero,815a8 <__subsf3+0x4c0>
   8154c:	38000b26 	beq	r7,zero,8157c <__subsf3+0x494>
   81550:	1806d0fa 	srli	r3,r3,3
   81554:	1900102c 	andhi	r4,r3,64
   81558:	20000426 	beq	r4,zero,8156c <__subsf3+0x484>
   8155c:	380ed0fa 	srli	r7,r7,3
   81560:	3900102c 	andhi	r4,r7,64
   81564:	2000011e 	bne	r4,zero,8156c <__subsf3+0x484>
   81568:	3807883a 	mov	r3,r7
   8156c:	180690fa 	slli	r3,r3,3
   81570:	1023883a 	mov	r17,r2
   81574:	04003fc4 	movi	r16,255
   81578:	003ef406 	br	8114c <_gp+0xfff6f568>
   8157c:	04003fc4 	movi	r16,255
   81580:	003ef206 	br	8114c <_gp+0xfff6f568>
   81584:	00c00044 	movi	r3,1
   81588:	003f9606 	br	813e4 <_gp+0xfff6f800>
   8158c:	000b883a 	mov	r5,zero
   81590:	0005883a 	mov	r2,zero
   81594:	003f3506 	br	8126c <_gp+0xfff6f688>
   81598:	01402034 	movhi	r5,128
   8159c:	297fffc4 	addi	r5,r5,-1
   815a0:	0005883a 	mov	r2,zero
   815a4:	003f2f06 	br	81264 <_gp+0xfff6f680>
   815a8:	3807883a 	mov	r3,r7
   815ac:	04003fc4 	movi	r16,255
   815b0:	003ee606 	br	8114c <_gp+0xfff6f568>
   815b4:	3807883a 	mov	r3,r7
   815b8:	003ee406 	br	8114c <_gp+0xfff6f568>
   815bc:	00c00044 	movi	r3,1
   815c0:	003fbd06 	br	814b8 <_gp+0xfff6f8d4>
   815c4:	0005883a 	mov	r2,zero
   815c8:	003f2806 	br	8126c <_gp+0xfff6f688>

000815cc <__fixsfsi>:
   815cc:	200ad5fa 	srli	r5,r4,23
   815d0:	00c02034 	movhi	r3,128
   815d4:	18ffffc4 	addi	r3,r3,-1
   815d8:	29403fcc 	andi	r5,r5,255
   815dc:	00801f84 	movi	r2,126
   815e0:	1906703a 	and	r3,r3,r4
   815e4:	2008d7fa 	srli	r4,r4,31
   815e8:	11400e0e 	bge	r2,r5,81624 <__fixsfsi+0x58>
   815ec:	00802744 	movi	r2,157
   815f0:	11400816 	blt	r2,r5,81614 <__fixsfsi+0x48>
   815f4:	00802544 	movi	r2,149
   815f8:	18c02034 	orhi	r3,r3,128
   815fc:	11400b0e 	bge	r2,r5,8162c <__fixsfsi+0x60>
   81600:	28bfda84 	addi	r2,r5,-150
   81604:	1884983a 	sll	r2,r3,r2
   81608:	20000726 	beq	r4,zero,81628 <__fixsfsi+0x5c>
   8160c:	0085c83a 	sub	r2,zero,r2
   81610:	f800283a 	ret
   81614:	00a00034 	movhi	r2,32768
   81618:	10bfffc4 	addi	r2,r2,-1
   8161c:	2085883a 	add	r2,r4,r2
   81620:	f800283a 	ret
   81624:	0005883a 	mov	r2,zero
   81628:	f800283a 	ret
   8162c:	00802584 	movi	r2,150
   81630:	1145c83a 	sub	r2,r2,r5
   81634:	1884d83a 	srl	r2,r3,r2
   81638:	003ff306 	br	81608 <_gp+0xfff6fa24>

0008163c <__floatunsisf>:
   8163c:	defffe04 	addi	sp,sp,-8
   81640:	dfc00115 	stw	ra,4(sp)
   81644:	dc000015 	stw	r16,0(sp)
   81648:	20002c26 	beq	r4,zero,816fc <__floatunsisf+0xc0>
   8164c:	2021883a 	mov	r16,r4
   81650:	008172c0 	call	8172c <__clzsi2>
   81654:	00c02784 	movi	r3,158
   81658:	1887c83a 	sub	r3,r3,r2
   8165c:	01002584 	movi	r4,150
   81660:	20c00f16 	blt	r4,r3,816a0 <__floatunsisf+0x64>
   81664:	20c9c83a 	sub	r4,r4,r3
   81668:	8108983a 	sll	r4,r16,r4
   8166c:	00802034 	movhi	r2,128
   81670:	10bfffc4 	addi	r2,r2,-1
   81674:	2088703a 	and	r4,r4,r2
   81678:	18803fcc 	andi	r2,r3,255
   8167c:	100695fa 	slli	r3,r2,23
   81680:	00802034 	movhi	r2,128
   81684:	10bfffc4 	addi	r2,r2,-1
   81688:	2084703a 	and	r2,r4,r2
   8168c:	10c4b03a 	or	r2,r2,r3
   81690:	dfc00117 	ldw	ra,4(sp)
   81694:	dc000017 	ldw	r16,0(sp)
   81698:	dec00204 	addi	sp,sp,8
   8169c:	f800283a 	ret
   816a0:	01002644 	movi	r4,153
   816a4:	20c01816 	blt	r4,r3,81708 <__floatunsisf+0xcc>
   816a8:	20c9c83a 	sub	r4,r4,r3
   816ac:	8108983a 	sll	r4,r16,r4
   816b0:	017f0034 	movhi	r5,64512
   816b4:	297fffc4 	addi	r5,r5,-1
   816b8:	218001cc 	andi	r6,r4,7
   816bc:	214a703a 	and	r5,r4,r5
   816c0:	30000426 	beq	r6,zero,816d4 <__floatunsisf+0x98>
   816c4:	210003cc 	andi	r4,r4,15
   816c8:	01800104 	movi	r6,4
   816cc:	21800126 	beq	r4,r6,816d4 <__floatunsisf+0x98>
   816d0:	298b883a 	add	r5,r5,r6
   816d4:	2901002c 	andhi	r4,r5,1024
   816d8:	20000526 	beq	r4,zero,816f0 <__floatunsisf+0xb4>
   816dc:	00c027c4 	movi	r3,159
   816e0:	1887c83a 	sub	r3,r3,r2
   816e4:	00bf0034 	movhi	r2,64512
   816e8:	10bfffc4 	addi	r2,r2,-1
   816ec:	288a703a 	and	r5,r5,r2
   816f0:	280891ba 	slli	r4,r5,6
   816f4:	2008d27a 	srli	r4,r4,9
   816f8:	003fdf06 	br	81678 <_gp+0xfff6fa94>
   816fc:	0007883a 	mov	r3,zero
   81700:	0009883a 	mov	r4,zero
   81704:	003fdc06 	br	81678 <_gp+0xfff6fa94>
   81708:	01402e44 	movi	r5,185
   8170c:	28cbc83a 	sub	r5,r5,r3
   81710:	01000144 	movi	r4,5
   81714:	2089c83a 	sub	r4,r4,r2
   81718:	814a983a 	sll	r5,r16,r5
   8171c:	8108d83a 	srl	r4,r16,r4
   81720:	2820c03a 	cmpne	r16,r5,zero
   81724:	2408b03a 	or	r4,r4,r16
   81728:	003fe106 	br	816b0 <_gp+0xfff6facc>

0008172c <__clzsi2>:
   8172c:	00bfffd4 	movui	r2,65535
   81730:	11000536 	bltu	r2,r4,81748 <__clzsi2+0x1c>
   81734:	00803fc4 	movi	r2,255
   81738:	11000f36 	bltu	r2,r4,81778 <__clzsi2+0x4c>
   8173c:	00800804 	movi	r2,32
   81740:	0007883a 	mov	r3,zero
   81744:	00000506 	br	8175c <__clzsi2+0x30>
   81748:	00804034 	movhi	r2,256
   8174c:	10bfffc4 	addi	r2,r2,-1
   81750:	11000c2e 	bgeu	r2,r4,81784 <__clzsi2+0x58>
   81754:	00800204 	movi	r2,8
   81758:	00c00604 	movi	r3,24
   8175c:	20c8d83a 	srl	r4,r4,r3
   81760:	00c00274 	movhi	r3,9
   81764:	18cff004 	addi	r3,r3,16320
   81768:	1909883a 	add	r4,r3,r4
   8176c:	20c00003 	ldbu	r3,0(r4)
   81770:	10c5c83a 	sub	r2,r2,r3
   81774:	f800283a 	ret
   81778:	00800604 	movi	r2,24
   8177c:	00c00204 	movi	r3,8
   81780:	003ff606 	br	8175c <_gp+0xfff6fb78>
   81784:	00800404 	movi	r2,16
   81788:	1007883a 	mov	r3,r2
   8178c:	003ff306 	br	8175c <_gp+0xfff6fb78>

00081790 <__mulsi3>:
   81790:	0005883a 	mov	r2,zero
   81794:	20000726 	beq	r4,zero,817b4 <__mulsi3+0x24>
   81798:	20c0004c 	andi	r3,r4,1
   8179c:	2008d07a 	srli	r4,r4,1
   817a0:	18000126 	beq	r3,zero,817a8 <__mulsi3+0x18>
   817a4:	1145883a 	add	r2,r2,r5
   817a8:	294b883a 	add	r5,r5,r5
   817ac:	203ffa1e 	bne	r4,zero,81798 <_gp+0xfff6fbb4>
   817b0:	f800283a 	ret
   817b4:	f800283a 	ret

000817b8 <_printf_r>:
   817b8:	defffd04 	addi	sp,sp,-12
   817bc:	2805883a 	mov	r2,r5
   817c0:	dfc00015 	stw	ra,0(sp)
   817c4:	d9800115 	stw	r6,4(sp)
   817c8:	d9c00215 	stw	r7,8(sp)
   817cc:	21400217 	ldw	r5,8(r4)
   817d0:	d9c00104 	addi	r7,sp,4
   817d4:	100d883a 	mov	r6,r2
   817d8:	00819900 	call	81990 <___vfprintf_internal_r>
   817dc:	dfc00017 	ldw	ra,0(sp)
   817e0:	dec00304 	addi	sp,sp,12
   817e4:	f800283a 	ret

000817e8 <printf>:
   817e8:	defffc04 	addi	sp,sp,-16
   817ec:	dfc00015 	stw	ra,0(sp)
   817f0:	d9400115 	stw	r5,4(sp)
   817f4:	d9800215 	stw	r6,8(sp)
   817f8:	d9c00315 	stw	r7,12(sp)
   817fc:	00800474 	movhi	r2,17
   81800:	10a6fa04 	addi	r2,r2,-25624
   81804:	10800017 	ldw	r2,0(r2)
   81808:	200b883a 	mov	r5,r4
   8180c:	d9800104 	addi	r6,sp,4
   81810:	11000217 	ldw	r4,8(r2)
   81814:	0083c6c0 	call	83c6c <__vfprintf_internal>
   81818:	dfc00017 	ldw	ra,0(sp)
   8181c:	dec00404 	addi	sp,sp,16
   81820:	f800283a 	ret

00081824 <_puts_r>:
   81824:	defff604 	addi	sp,sp,-40
   81828:	dc000715 	stw	r16,28(sp)
   8182c:	2021883a 	mov	r16,r4
   81830:	2809883a 	mov	r4,r5
   81834:	dc400815 	stw	r17,32(sp)
   81838:	dfc00915 	stw	ra,36(sp)
   8183c:	2823883a 	mov	r17,r5
   81840:	00818f80 	call	818f8 <strlen>
   81844:	10c00044 	addi	r3,r2,1
   81848:	d8800115 	stw	r2,4(sp)
   8184c:	00800274 	movhi	r2,9
   81850:	10903004 	addi	r2,r2,16576
   81854:	d8800215 	stw	r2,8(sp)
   81858:	00800044 	movi	r2,1
   8185c:	d8800315 	stw	r2,12(sp)
   81860:	00800084 	movi	r2,2
   81864:	dc400015 	stw	r17,0(sp)
   81868:	d8c00615 	stw	r3,24(sp)
   8186c:	dec00415 	stw	sp,16(sp)
   81870:	d8800515 	stw	r2,20(sp)
   81874:	80000226 	beq	r16,zero,81880 <_puts_r+0x5c>
   81878:	80800e17 	ldw	r2,56(r16)
   8187c:	10001426 	beq	r2,zero,818d0 <_puts_r+0xac>
   81880:	81400217 	ldw	r5,8(r16)
   81884:	2880030b 	ldhu	r2,12(r5)
   81888:	10c8000c 	andi	r3,r2,8192
   8188c:	1800061e 	bne	r3,zero,818a8 <_puts_r+0x84>
   81890:	29001917 	ldw	r4,100(r5)
   81894:	00f7ffc4 	movi	r3,-8193
   81898:	10880014 	ori	r2,r2,8192
   8189c:	20c6703a 	and	r3,r4,r3
   818a0:	2880030d 	sth	r2,12(r5)
   818a4:	28c01915 	stw	r3,100(r5)
   818a8:	d9800404 	addi	r6,sp,16
   818ac:	8009883a 	mov	r4,r16
   818b0:	00861d40 	call	861d4 <__sfvwrite_r>
   818b4:	1000091e 	bne	r2,zero,818dc <_puts_r+0xb8>
   818b8:	00800284 	movi	r2,10
   818bc:	dfc00917 	ldw	ra,36(sp)
   818c0:	dc400817 	ldw	r17,32(sp)
   818c4:	dc000717 	ldw	r16,28(sp)
   818c8:	dec00a04 	addi	sp,sp,40
   818cc:	f800283a 	ret
   818d0:	8009883a 	mov	r4,r16
   818d4:	0085d500 	call	85d50 <__sinit>
   818d8:	003fe906 	br	81880 <_gp+0xfff6fc9c>
   818dc:	00bfffc4 	movi	r2,-1
   818e0:	003ff606 	br	818bc <_gp+0xfff6fcd8>

000818e4 <puts>:
   818e4:	00800474 	movhi	r2,17
   818e8:	10a6fa04 	addi	r2,r2,-25624
   818ec:	200b883a 	mov	r5,r4
   818f0:	11000017 	ldw	r4,0(r2)
   818f4:	00818241 	jmpi	81824 <_puts_r>

000818f8 <strlen>:
   818f8:	208000cc 	andi	r2,r4,3
   818fc:	10002026 	beq	r2,zero,81980 <strlen+0x88>
   81900:	20800007 	ldb	r2,0(r4)
   81904:	10002026 	beq	r2,zero,81988 <strlen+0x90>
   81908:	2005883a 	mov	r2,r4
   8190c:	00000206 	br	81918 <strlen+0x20>
   81910:	10c00007 	ldb	r3,0(r2)
   81914:	18001826 	beq	r3,zero,81978 <strlen+0x80>
   81918:	10800044 	addi	r2,r2,1
   8191c:	10c000cc 	andi	r3,r2,3
   81920:	183ffb1e 	bne	r3,zero,81910 <_gp+0xfff6fd2c>
   81924:	10c00017 	ldw	r3,0(r2)
   81928:	01ffbff4 	movhi	r7,65279
   8192c:	39ffbfc4 	addi	r7,r7,-257
   81930:	00ca303a 	nor	r5,zero,r3
   81934:	01a02074 	movhi	r6,32897
   81938:	19c7883a 	add	r3,r3,r7
   8193c:	31a02004 	addi	r6,r6,-32640
   81940:	1946703a 	and	r3,r3,r5
   81944:	1986703a 	and	r3,r3,r6
   81948:	1800091e 	bne	r3,zero,81970 <strlen+0x78>
   8194c:	10800104 	addi	r2,r2,4
   81950:	10c00017 	ldw	r3,0(r2)
   81954:	19cb883a 	add	r5,r3,r7
   81958:	00c6303a 	nor	r3,zero,r3
   8195c:	28c6703a 	and	r3,r5,r3
   81960:	1986703a 	and	r3,r3,r6
   81964:	183ff926 	beq	r3,zero,8194c <_gp+0xfff6fd68>
   81968:	00000106 	br	81970 <strlen+0x78>
   8196c:	10800044 	addi	r2,r2,1
   81970:	10c00007 	ldb	r3,0(r2)
   81974:	183ffd1e 	bne	r3,zero,8196c <_gp+0xfff6fd88>
   81978:	1105c83a 	sub	r2,r2,r4
   8197c:	f800283a 	ret
   81980:	2005883a 	mov	r2,r4
   81984:	003fe706 	br	81924 <_gp+0xfff6fd40>
   81988:	0005883a 	mov	r2,zero
   8198c:	f800283a 	ret

00081990 <___vfprintf_internal_r>:
   81990:	deffb804 	addi	sp,sp,-288
   81994:	dfc04715 	stw	ra,284(sp)
   81998:	ddc04515 	stw	r23,276(sp)
   8199c:	dd404315 	stw	r21,268(sp)
   819a0:	d9002d15 	stw	r4,180(sp)
   819a4:	282f883a 	mov	r23,r5
   819a8:	302b883a 	mov	r21,r6
   819ac:	d9c02e15 	stw	r7,184(sp)
   819b0:	df004615 	stw	fp,280(sp)
   819b4:	dd804415 	stw	r22,272(sp)
   819b8:	dd004215 	stw	r20,264(sp)
   819bc:	dcc04115 	stw	r19,260(sp)
   819c0:	dc804015 	stw	r18,256(sp)
   819c4:	dc403f15 	stw	r17,252(sp)
   819c8:	dc003e15 	stw	r16,248(sp)
   819cc:	00868d00 	call	868d0 <_localeconv_r>
   819d0:	10800017 	ldw	r2,0(r2)
   819d4:	1009883a 	mov	r4,r2
   819d8:	d8803415 	stw	r2,208(sp)
   819dc:	00818f80 	call	818f8 <strlen>
   819e0:	d8803715 	stw	r2,220(sp)
   819e4:	d8802d17 	ldw	r2,180(sp)
   819e8:	10000226 	beq	r2,zero,819f4 <___vfprintf_internal_r+0x64>
   819ec:	10800e17 	ldw	r2,56(r2)
   819f0:	1000fb26 	beq	r2,zero,81de0 <___vfprintf_internal_r+0x450>
   819f4:	b880030b 	ldhu	r2,12(r23)
   819f8:	10c8000c 	andi	r3,r2,8192
   819fc:	1800061e 	bne	r3,zero,81a18 <___vfprintf_internal_r+0x88>
   81a00:	b9001917 	ldw	r4,100(r23)
   81a04:	00f7ffc4 	movi	r3,-8193
   81a08:	10880014 	ori	r2,r2,8192
   81a0c:	20c6703a 	and	r3,r4,r3
   81a10:	b880030d 	sth	r2,12(r23)
   81a14:	b8c01915 	stw	r3,100(r23)
   81a18:	10c0020c 	andi	r3,r2,8
   81a1c:	1800c326 	beq	r3,zero,81d2c <___vfprintf_internal_r+0x39c>
   81a20:	b8c00417 	ldw	r3,16(r23)
   81a24:	1800c126 	beq	r3,zero,81d2c <___vfprintf_internal_r+0x39c>
   81a28:	1080068c 	andi	r2,r2,26
   81a2c:	00c00284 	movi	r3,10
   81a30:	10c0c626 	beq	r2,r3,81d4c <___vfprintf_internal_r+0x3bc>
   81a34:	d8c00404 	addi	r3,sp,16
   81a38:	05000274 	movhi	r20,9
   81a3c:	d9001e04 	addi	r4,sp,120
   81a40:	a5104184 	addi	r20,r20,16646
   81a44:	d8c01e15 	stw	r3,120(sp)
   81a48:	d8002015 	stw	zero,128(sp)
   81a4c:	d8001f15 	stw	zero,124(sp)
   81a50:	d8003315 	stw	zero,204(sp)
   81a54:	d8003615 	stw	zero,216(sp)
   81a58:	d8003815 	stw	zero,224(sp)
   81a5c:	1811883a 	mov	r8,r3
   81a60:	d8003915 	stw	zero,228(sp)
   81a64:	d8003a15 	stw	zero,232(sp)
   81a68:	d8002f15 	stw	zero,188(sp)
   81a6c:	d9002815 	stw	r4,160(sp)
   81a70:	a8800007 	ldb	r2,0(r21)
   81a74:	10028b26 	beq	r2,zero,824a4 <___vfprintf_internal_r+0xb14>
   81a78:	00c00944 	movi	r3,37
   81a7c:	a823883a 	mov	r17,r21
   81a80:	10c0021e 	bne	r2,r3,81a8c <___vfprintf_internal_r+0xfc>
   81a84:	00001406 	br	81ad8 <___vfprintf_internal_r+0x148>
   81a88:	10c00326 	beq	r2,r3,81a98 <___vfprintf_internal_r+0x108>
   81a8c:	8c400044 	addi	r17,r17,1
   81a90:	88800007 	ldb	r2,0(r17)
   81a94:	103ffc1e 	bne	r2,zero,81a88 <_gp+0xfff6fea4>
   81a98:	8d61c83a 	sub	r16,r17,r21
   81a9c:	80000e26 	beq	r16,zero,81ad8 <___vfprintf_internal_r+0x148>
   81aa0:	d8c02017 	ldw	r3,128(sp)
   81aa4:	d8801f17 	ldw	r2,124(sp)
   81aa8:	45400015 	stw	r21,0(r8)
   81aac:	1c07883a 	add	r3,r3,r16
   81ab0:	10800044 	addi	r2,r2,1
   81ab4:	d8c02015 	stw	r3,128(sp)
   81ab8:	44000115 	stw	r16,4(r8)
   81abc:	d8801f15 	stw	r2,124(sp)
   81ac0:	00c001c4 	movi	r3,7
   81ac4:	1880a916 	blt	r3,r2,81d6c <___vfprintf_internal_r+0x3dc>
   81ac8:	42000204 	addi	r8,r8,8
   81acc:	d9402f17 	ldw	r5,188(sp)
   81ad0:	2c0b883a 	add	r5,r5,r16
   81ad4:	d9402f15 	stw	r5,188(sp)
   81ad8:	88800007 	ldb	r2,0(r17)
   81adc:	1000aa26 	beq	r2,zero,81d88 <___vfprintf_internal_r+0x3f8>
   81ae0:	8d400044 	addi	r21,r17,1
   81ae4:	8c400047 	ldb	r17,1(r17)
   81ae8:	0021883a 	mov	r16,zero
   81aec:	00bfffc4 	movi	r2,-1
   81af0:	0025883a 	mov	r18,zero
   81af4:	dc002905 	stb	r16,164(sp)
   81af8:	d8002785 	stb	zero,158(sp)
   81afc:	d8002b05 	stb	zero,172(sp)
   81b00:	d8802a15 	stw	r2,168(sp)
   81b04:	d8003115 	stw	zero,196(sp)
   81b08:	04c01604 	movi	r19,88
   81b0c:	05800244 	movi	r22,9
   81b10:	9021883a 	mov	r16,r18
   81b14:	4039883a 	mov	fp,r8
   81b18:	ad400044 	addi	r21,r21,1
   81b1c:	88bff804 	addi	r2,r17,-32
   81b20:	98833236 	bltu	r19,r2,827ec <___vfprintf_internal_r+0xe5c>
   81b24:	100490ba 	slli	r2,r2,2
   81b28:	00c00234 	movhi	r3,8
   81b2c:	18c6cf04 	addi	r3,r3,6972
   81b30:	10c5883a 	add	r2,r2,r3
   81b34:	10800017 	ldw	r2,0(r2)
   81b38:	1000683a 	jmp	r2
   81b3c:	000826e4 	muli	zero,zero,8347
   81b40:	000827ec 	andhi	zero,zero,8351
   81b44:	000827ec 	andhi	zero,zero,8351
   81b48:	00082704 	movi	zero,8348
   81b4c:	000827ec 	andhi	zero,zero,8351
   81b50:	000827ec 	andhi	zero,zero,8351
   81b54:	000827ec 	andhi	zero,zero,8351
   81b58:	000827ec 	andhi	zero,zero,8351
   81b5c:	000827ec 	andhi	zero,zero,8351
   81b60:	000827ec 	andhi	zero,zero,8351
   81b64:	00081dec 	andhi	zero,zero,8311
   81b68:	000825f4 	movhi	zero,8343
   81b6c:	000827ec 	andhi	zero,zero,8351
   81b70:	00081cb0 	cmpltui	zero,zero,8306
   81b74:	00081e10 	cmplti	zero,zero,8312
   81b78:	000827ec 	andhi	zero,zero,8351
   81b7c:	00081e60 	cmpeqi	zero,zero,8313
   81b80:	00081e6c 	andhi	zero,zero,8313
   81b84:	00081e6c 	andhi	zero,zero,8313
   81b88:	00081e6c 	andhi	zero,zero,8313
   81b8c:	00081e6c 	andhi	zero,zero,8313
   81b90:	00081e6c 	andhi	zero,zero,8313
   81b94:	00081e6c 	andhi	zero,zero,8313
   81b98:	00081e6c 	andhi	zero,zero,8313
   81b9c:	00081e6c 	andhi	zero,zero,8313
   81ba0:	00081e6c 	andhi	zero,zero,8313
   81ba4:	000827ec 	andhi	zero,zero,8351
   81ba8:	000827ec 	andhi	zero,zero,8351
   81bac:	000827ec 	andhi	zero,zero,8351
   81bb0:	000827ec 	andhi	zero,zero,8351
   81bb4:	000827ec 	andhi	zero,zero,8351
   81bb8:	000827ec 	andhi	zero,zero,8351
   81bbc:	000827ec 	andhi	zero,zero,8351
   81bc0:	000827ec 	andhi	zero,zero,8351
   81bc4:	000827ec 	andhi	zero,zero,8351
   81bc8:	000827ec 	andhi	zero,zero,8351
   81bcc:	00081ea8 	cmpgeui	zero,zero,8314
   81bd0:	00081f70 	cmpltui	zero,zero,8317
   81bd4:	000827ec 	andhi	zero,zero,8351
   81bd8:	00081f70 	cmpltui	zero,zero,8317
   81bdc:	000827ec 	andhi	zero,zero,8351
   81be0:	000827ec 	andhi	zero,zero,8351
   81be4:	000827ec 	andhi	zero,zero,8351
   81be8:	000827ec 	andhi	zero,zero,8351
   81bec:	0008201c 	xori	zero,zero,8320
   81bf0:	000827ec 	andhi	zero,zero,8351
   81bf4:	000827ec 	andhi	zero,zero,8351
   81bf8:	00082028 	cmpgeui	zero,zero,8320
   81bfc:	000827ec 	andhi	zero,zero,8351
   81c00:	000827ec 	andhi	zero,zero,8351
   81c04:	000827ec 	andhi	zero,zero,8351
   81c08:	000827ec 	andhi	zero,zero,8351
   81c0c:	000827ec 	andhi	zero,zero,8351
   81c10:	000824ac 	andhi	zero,zero,8338
   81c14:	000827ec 	andhi	zero,zero,8351
   81c18:	000827ec 	andhi	zero,zero,8351
   81c1c:	00082518 	cmpnei	zero,zero,8340
   81c20:	000827ec 	andhi	zero,zero,8351
   81c24:	000827ec 	andhi	zero,zero,8351
   81c28:	000827ec 	andhi	zero,zero,8351
   81c2c:	000827ec 	andhi	zero,zero,8351
   81c30:	000827ec 	andhi	zero,zero,8351
   81c34:	000827ec 	andhi	zero,zero,8351
   81c38:	000827ec 	andhi	zero,zero,8351
   81c3c:	000827ec 	andhi	zero,zero,8351
   81c40:	000827ec 	andhi	zero,zero,8351
   81c44:	000827ec 	andhi	zero,zero,8351
   81c48:	00082790 	cmplti	zero,zero,8350
   81c4c:	00082710 	cmplti	zero,zero,8348
   81c50:	00081f70 	cmpltui	zero,zero,8317
   81c54:	00081f70 	cmpltui	zero,zero,8317
   81c58:	00081f70 	cmpltui	zero,zero,8317
   81c5c:	00082730 	cmpltui	zero,zero,8348
   81c60:	00082710 	cmplti	zero,zero,8348
   81c64:	000827ec 	andhi	zero,zero,8351
   81c68:	000827ec 	andhi	zero,zero,8351
   81c6c:	0008273c 	xorhi	zero,zero,8348
   81c70:	000827ec 	andhi	zero,zero,8351
   81c74:	00082750 	cmplti	zero,zero,8349
   81c78:	000825d4 	movui	zero,8343
   81c7c:	00081cbc 	xorhi	zero,zero,8306
   81c80:	0008260c 	andi	zero,zero,8344
   81c84:	000827ec 	andhi	zero,zero,8351
   81c88:	00082618 	cmpnei	zero,zero,8344
   81c8c:	000827ec 	andhi	zero,zero,8351
   81c90:	0008267c 	xorhi	zero,zero,8345
   81c94:	000827ec 	andhi	zero,zero,8351
   81c98:	000827ec 	andhi	zero,zero,8351
   81c9c:	0008269c 	xori	zero,zero,8346
   81ca0:	d8c03117 	ldw	r3,196(sp)
   81ca4:	d8802e15 	stw	r2,184(sp)
   81ca8:	00c7c83a 	sub	r3,zero,r3
   81cac:	d8c03115 	stw	r3,196(sp)
   81cb0:	84000114 	ori	r16,r16,4
   81cb4:	ac400007 	ldb	r17,0(r21)
   81cb8:	003f9706 	br	81b18 <_gp+0xfff6ff34>
   81cbc:	00800c04 	movi	r2,48
   81cc0:	d8802705 	stb	r2,156(sp)
   81cc4:	00801e04 	movi	r2,120
   81cc8:	d8802745 	stb	r2,157(sp)
   81ccc:	d9002a17 	ldw	r4,168(sp)
   81cd0:	d8802e17 	ldw	r2,184(sp)
   81cd4:	d8002785 	stb	zero,158(sp)
   81cd8:	e011883a 	mov	r8,fp
   81cdc:	10c00104 	addi	r3,r2,4
   81ce0:	14c00017 	ldw	r19,0(r2)
   81ce4:	002d883a 	mov	r22,zero
   81ce8:	80800094 	ori	r2,r16,2
   81cec:	2002ca16 	blt	r4,zero,82818 <___vfprintf_internal_r+0xe88>
   81cf0:	00bfdfc4 	movi	r2,-129
   81cf4:	80a4703a 	and	r18,r16,r2
   81cf8:	d8c02e15 	stw	r3,184(sp)
   81cfc:	94800094 	ori	r18,r18,2
   81d00:	9802b41e 	bne	r19,zero,827d4 <___vfprintf_internal_r+0xe44>
   81d04:	01400274 	movhi	r5,9
   81d08:	29503a04 	addi	r5,r5,16616
   81d0c:	d9403915 	stw	r5,228(sp)
   81d10:	04401e04 	movi	r17,120
   81d14:	d8802a17 	ldw	r2,168(sp)
   81d18:	0039883a 	mov	fp,zero
   81d1c:	1001fa26 	beq	r2,zero,82508 <___vfprintf_internal_r+0xb78>
   81d20:	0027883a 	mov	r19,zero
   81d24:	002d883a 	mov	r22,zero
   81d28:	00021906 	br	82590 <___vfprintf_internal_r+0xc00>
   81d2c:	d9002d17 	ldw	r4,180(sp)
   81d30:	b80b883a 	mov	r5,r23
   81d34:	0083d440 	call	83d44 <__swsetup_r>
   81d38:	1005dc1e 	bne	r2,zero,834ac <___vfprintf_internal_r+0x1b1c>
   81d3c:	b880030b 	ldhu	r2,12(r23)
   81d40:	00c00284 	movi	r3,10
   81d44:	1080068c 	andi	r2,r2,26
   81d48:	10ff3a1e 	bne	r2,r3,81a34 <_gp+0xfff6fe50>
   81d4c:	b880038f 	ldh	r2,14(r23)
   81d50:	103f3816 	blt	r2,zero,81a34 <_gp+0xfff6fe50>
   81d54:	d9c02e17 	ldw	r7,184(sp)
   81d58:	d9002d17 	ldw	r4,180(sp)
   81d5c:	a80d883a 	mov	r6,r21
   81d60:	b80b883a 	mov	r5,r23
   81d64:	0083c880 	call	83c88 <__sbprintf>
   81d68:	00001106 	br	81db0 <___vfprintf_internal_r+0x420>
   81d6c:	d9002d17 	ldw	r4,180(sp)
   81d70:	d9801e04 	addi	r6,sp,120
   81d74:	b80b883a 	mov	r5,r23
   81d78:	00891700 	call	89170 <__sprint_r>
   81d7c:	1000081e 	bne	r2,zero,81da0 <___vfprintf_internal_r+0x410>
   81d80:	da000404 	addi	r8,sp,16
   81d84:	003f5106 	br	81acc <_gp+0xfff6fee8>
   81d88:	d8802017 	ldw	r2,128(sp)
   81d8c:	10000426 	beq	r2,zero,81da0 <___vfprintf_internal_r+0x410>
   81d90:	d9002d17 	ldw	r4,180(sp)
   81d94:	d9801e04 	addi	r6,sp,120
   81d98:	b80b883a 	mov	r5,r23
   81d9c:	00891700 	call	89170 <__sprint_r>
   81da0:	b880030b 	ldhu	r2,12(r23)
   81da4:	1080100c 	andi	r2,r2,64
   81da8:	1005c01e 	bne	r2,zero,834ac <___vfprintf_internal_r+0x1b1c>
   81dac:	d8802f17 	ldw	r2,188(sp)
   81db0:	dfc04717 	ldw	ra,284(sp)
   81db4:	df004617 	ldw	fp,280(sp)
   81db8:	ddc04517 	ldw	r23,276(sp)
   81dbc:	dd804417 	ldw	r22,272(sp)
   81dc0:	dd404317 	ldw	r21,268(sp)
   81dc4:	dd004217 	ldw	r20,264(sp)
   81dc8:	dcc04117 	ldw	r19,260(sp)
   81dcc:	dc804017 	ldw	r18,256(sp)
   81dd0:	dc403f17 	ldw	r17,252(sp)
   81dd4:	dc003e17 	ldw	r16,248(sp)
   81dd8:	dec04804 	addi	sp,sp,288
   81ddc:	f800283a 	ret
   81de0:	d9002d17 	ldw	r4,180(sp)
   81de4:	0085d500 	call	85d50 <__sinit>
   81de8:	003f0206 	br	819f4 <_gp+0xfff6fe10>
   81dec:	d9002e17 	ldw	r4,184(sp)
   81df0:	d9402e17 	ldw	r5,184(sp)
   81df4:	21000017 	ldw	r4,0(r4)
   81df8:	28800104 	addi	r2,r5,4
   81dfc:	d9003115 	stw	r4,196(sp)
   81e00:	203fa716 	blt	r4,zero,81ca0 <_gp+0xfff700bc>
   81e04:	d8802e15 	stw	r2,184(sp)
   81e08:	ac400007 	ldb	r17,0(r21)
   81e0c:	003f4206 	br	81b18 <_gp+0xfff6ff34>
   81e10:	ac400007 	ldb	r17,0(r21)
   81e14:	01000a84 	movi	r4,42
   81e18:	a8c00044 	addi	r3,r21,1
   81e1c:	89075826 	beq	r17,r4,83b80 <___vfprintf_internal_r+0x21f0>
   81e20:	8cbff404 	addi	r18,r17,-48
   81e24:	b486ae36 	bltu	r22,r18,838e0 <___vfprintf_internal_r+0x1f50>
   81e28:	0009883a 	mov	r4,zero
   81e2c:	1823883a 	mov	r17,r3
   81e30:	01400284 	movi	r5,10
   81e34:	00817900 	call	81790 <__mulsi3>
   81e38:	88c00007 	ldb	r3,0(r17)
   81e3c:	1489883a 	add	r4,r2,r18
   81e40:	8d400044 	addi	r21,r17,1
   81e44:	1cbff404 	addi	r18,r3,-48
   81e48:	a823883a 	mov	r17,r21
   81e4c:	b4bff82e 	bgeu	r22,r18,81e30 <_gp+0xfff7024c>
   81e50:	1823883a 	mov	r17,r3
   81e54:	2005f616 	blt	r4,zero,83630 <___vfprintf_internal_r+0x1ca0>
   81e58:	d9002a15 	stw	r4,168(sp)
   81e5c:	003f2f06 	br	81b1c <_gp+0xfff6ff38>
   81e60:	84002014 	ori	r16,r16,128
   81e64:	ac400007 	ldb	r17,0(r21)
   81e68:	003f2b06 	br	81b18 <_gp+0xfff6ff34>
   81e6c:	8cbff404 	addi	r18,r17,-48
   81e70:	d8003115 	stw	zero,196(sp)
   81e74:	0009883a 	mov	r4,zero
   81e78:	a823883a 	mov	r17,r21
   81e7c:	01400284 	movi	r5,10
   81e80:	00817900 	call	81790 <__mulsi3>
   81e84:	88c00007 	ldb	r3,0(r17)
   81e88:	9089883a 	add	r4,r18,r2
   81e8c:	ad400044 	addi	r21,r21,1
   81e90:	1cbff404 	addi	r18,r3,-48
   81e94:	a823883a 	mov	r17,r21
   81e98:	b4bff82e 	bgeu	r22,r18,81e7c <_gp+0xfff70298>
   81e9c:	1823883a 	mov	r17,r3
   81ea0:	d9003115 	stw	r4,196(sp)
   81ea4:	003f1d06 	br	81b1c <_gp+0xfff6ff38>
   81ea8:	8025883a 	mov	r18,r16
   81eac:	dc002903 	ldbu	r16,164(sp)
   81eb0:	e011883a 	mov	r8,fp
   81eb4:	84003fcc 	andi	r16,r16,255
   81eb8:	8007531e 	bne	r16,zero,83c08 <___vfprintf_internal_r+0x2278>
   81ebc:	94800414 	ori	r18,r18,16
   81ec0:	9080080c 	andi	r2,r18,32
   81ec4:	1003a326 	beq	r2,zero,82d54 <___vfprintf_internal_r+0x13c4>
   81ec8:	d9002e17 	ldw	r4,184(sp)
   81ecc:	20800117 	ldw	r2,4(r4)
   81ed0:	24c00017 	ldw	r19,0(r4)
   81ed4:	21000204 	addi	r4,r4,8
   81ed8:	d9002e15 	stw	r4,184(sp)
   81edc:	102d883a 	mov	r22,r2
   81ee0:	10047316 	blt	r2,zero,830b0 <___vfprintf_internal_r+0x1720>
   81ee4:	d9002a17 	ldw	r4,168(sp)
   81ee8:	df002783 	ldbu	fp,158(sp)
   81eec:	2003e416 	blt	r4,zero,82e80 <___vfprintf_internal_r+0x14f0>
   81ef0:	00ffdfc4 	movi	r3,-129
   81ef4:	9d84b03a 	or	r2,r19,r22
   81ef8:	90e4703a 	and	r18,r18,r3
   81efc:	10018026 	beq	r2,zero,82500 <___vfprintf_internal_r+0xb70>
   81f00:	b003ab26 	beq	r22,zero,82db0 <___vfprintf_internal_r+0x1420>
   81f04:	dc402915 	stw	r17,164(sp)
   81f08:	dc001e04 	addi	r16,sp,120
   81f0c:	b023883a 	mov	r17,r22
   81f10:	402d883a 	mov	r22,r8
   81f14:	9809883a 	mov	r4,r19
   81f18:	880b883a 	mov	r5,r17
   81f1c:	01800284 	movi	r6,10
   81f20:	000f883a 	mov	r7,zero
   81f24:	008b6b40 	call	8b6b4 <__umoddi3>
   81f28:	10800c04 	addi	r2,r2,48
   81f2c:	843fffc4 	addi	r16,r16,-1
   81f30:	9809883a 	mov	r4,r19
   81f34:	880b883a 	mov	r5,r17
   81f38:	80800005 	stb	r2,0(r16)
   81f3c:	01800284 	movi	r6,10
   81f40:	000f883a 	mov	r7,zero
   81f44:	008b0b80 	call	8b0b8 <__udivdi3>
   81f48:	1027883a 	mov	r19,r2
   81f4c:	10c4b03a 	or	r2,r2,r3
   81f50:	1823883a 	mov	r17,r3
   81f54:	103fef1e 	bne	r2,zero,81f14 <_gp+0xfff70330>
   81f58:	d8c02817 	ldw	r3,160(sp)
   81f5c:	dc402917 	ldw	r17,164(sp)
   81f60:	b011883a 	mov	r8,r22
   81f64:	1c07c83a 	sub	r3,r3,r16
   81f68:	d8c02b15 	stw	r3,172(sp)
   81f6c:	00005f06 	br	820ec <___vfprintf_internal_r+0x75c>
   81f70:	8025883a 	mov	r18,r16
   81f74:	dc002903 	ldbu	r16,164(sp)
   81f78:	e011883a 	mov	r8,fp
   81f7c:	84003fcc 	andi	r16,r16,255
   81f80:	80071e1e 	bne	r16,zero,83bfc <___vfprintf_internal_r+0x226c>
   81f84:	9080020c 	andi	r2,r18,8
   81f88:	1004af26 	beq	r2,zero,83248 <___vfprintf_internal_r+0x18b8>
   81f8c:	d9002e17 	ldw	r4,184(sp)
   81f90:	d9402e17 	ldw	r5,184(sp)
   81f94:	d8802e17 	ldw	r2,184(sp)
   81f98:	21000017 	ldw	r4,0(r4)
   81f9c:	29400117 	ldw	r5,4(r5)
   81fa0:	10800204 	addi	r2,r2,8
   81fa4:	d9003615 	stw	r4,216(sp)
   81fa8:	d9403815 	stw	r5,224(sp)
   81fac:	d8802e15 	stw	r2,184(sp)
   81fb0:	d9003617 	ldw	r4,216(sp)
   81fb4:	d9403817 	ldw	r5,224(sp)
   81fb8:	da003d15 	stw	r8,244(sp)
   81fbc:	04000044 	movi	r16,1
   81fc0:	0088d940 	call	88d94 <__fpclassifyd>
   81fc4:	da003d17 	ldw	r8,244(sp)
   81fc8:	1404441e 	bne	r2,r16,830dc <___vfprintf_internal_r+0x174c>
   81fcc:	d9003617 	ldw	r4,216(sp)
   81fd0:	d9403817 	ldw	r5,224(sp)
   81fd4:	000d883a 	mov	r6,zero
   81fd8:	000f883a 	mov	r7,zero
   81fdc:	008d0580 	call	8d058 <__ledf2>
   81fe0:	da003d17 	ldw	r8,244(sp)
   81fe4:	1005e316 	blt	r2,zero,83774 <___vfprintf_internal_r+0x1de4>
   81fe8:	df002783 	ldbu	fp,158(sp)
   81fec:	008011c4 	movi	r2,71
   81ff0:	1445580e 	bge	r2,r17,83554 <___vfprintf_internal_r+0x1bc4>
   81ff4:	04000274 	movhi	r16,9
   81ff8:	84103204 	addi	r16,r16,16584
   81ffc:	00c000c4 	movi	r3,3
   82000:	00bfdfc4 	movi	r2,-129
   82004:	d8c02915 	stw	r3,164(sp)
   82008:	90a4703a 	and	r18,r18,r2
   8200c:	d8c02b15 	stw	r3,172(sp)
   82010:	d8002a15 	stw	zero,168(sp)
   82014:	d8003215 	stw	zero,200(sp)
   82018:	00003a06 	br	82104 <___vfprintf_internal_r+0x774>
   8201c:	84000214 	ori	r16,r16,8
   82020:	ac400007 	ldb	r17,0(r21)
   82024:	003ebc06 	br	81b18 <_gp+0xfff6ff34>
   82028:	8025883a 	mov	r18,r16
   8202c:	dc002903 	ldbu	r16,164(sp)
   82030:	e011883a 	mov	r8,fp
   82034:	84003fcc 	andi	r16,r16,255
   82038:	8007001e 	bne	r16,zero,83c3c <___vfprintf_internal_r+0x22ac>
   8203c:	94800414 	ori	r18,r18,16
   82040:	9080080c 	andi	r2,r18,32
   82044:	1002fa26 	beq	r2,zero,82c30 <___vfprintf_internal_r+0x12a0>
   82048:	d9002e17 	ldw	r4,184(sp)
   8204c:	d9402a17 	ldw	r5,168(sp)
   82050:	d8002785 	stb	zero,158(sp)
   82054:	20800204 	addi	r2,r4,8
   82058:	24c00017 	ldw	r19,0(r4)
   8205c:	25800117 	ldw	r22,4(r4)
   82060:	2804b116 	blt	r5,zero,83328 <___vfprintf_internal_r+0x1998>
   82064:	013fdfc4 	movi	r4,-129
   82068:	9d86b03a 	or	r3,r19,r22
   8206c:	d8802e15 	stw	r2,184(sp)
   82070:	9124703a 	and	r18,r18,r4
   82074:	1802fb1e 	bne	r3,zero,82c64 <___vfprintf_internal_r+0x12d4>
   82078:	d8c02a17 	ldw	r3,168(sp)
   8207c:	0039883a 	mov	fp,zero
   82080:	1805e526 	beq	r3,zero,83818 <___vfprintf_internal_r+0x1e88>
   82084:	0027883a 	mov	r19,zero
   82088:	002d883a 	mov	r22,zero
   8208c:	dc001e04 	addi	r16,sp,120
   82090:	9806d0fa 	srli	r3,r19,3
   82094:	b008977a 	slli	r4,r22,29
   82098:	b02cd0fa 	srli	r22,r22,3
   8209c:	9cc001cc 	andi	r19,r19,7
   820a0:	98800c04 	addi	r2,r19,48
   820a4:	843fffc4 	addi	r16,r16,-1
   820a8:	20e6b03a 	or	r19,r4,r3
   820ac:	80800005 	stb	r2,0(r16)
   820b0:	9d86b03a 	or	r3,r19,r22
   820b4:	183ff61e 	bne	r3,zero,82090 <_gp+0xfff704ac>
   820b8:	90c0004c 	andi	r3,r18,1
   820bc:	18014126 	beq	r3,zero,825c4 <___vfprintf_internal_r+0xc34>
   820c0:	10803fcc 	andi	r2,r2,255
   820c4:	1080201c 	xori	r2,r2,128
   820c8:	10bfe004 	addi	r2,r2,-128
   820cc:	00c00c04 	movi	r3,48
   820d0:	10c13c26 	beq	r2,r3,825c4 <___vfprintf_internal_r+0xc34>
   820d4:	80ffffc5 	stb	r3,-1(r16)
   820d8:	d8c02817 	ldw	r3,160(sp)
   820dc:	80bfffc4 	addi	r2,r16,-1
   820e0:	1021883a 	mov	r16,r2
   820e4:	1887c83a 	sub	r3,r3,r2
   820e8:	d8c02b15 	stw	r3,172(sp)
   820ec:	d8802b17 	ldw	r2,172(sp)
   820f0:	d9002a17 	ldw	r4,168(sp)
   820f4:	1100010e 	bge	r2,r4,820fc <___vfprintf_internal_r+0x76c>
   820f8:	2005883a 	mov	r2,r4
   820fc:	d8802915 	stw	r2,164(sp)
   82100:	d8003215 	stw	zero,200(sp)
   82104:	e7003fcc 	andi	fp,fp,255
   82108:	e700201c 	xori	fp,fp,128
   8210c:	e73fe004 	addi	fp,fp,-128
   82110:	e0000326 	beq	fp,zero,82120 <___vfprintf_internal_r+0x790>
   82114:	d8c02917 	ldw	r3,164(sp)
   82118:	18c00044 	addi	r3,r3,1
   8211c:	d8c02915 	stw	r3,164(sp)
   82120:	90c0008c 	andi	r3,r18,2
   82124:	d8c02c15 	stw	r3,176(sp)
   82128:	18000326 	beq	r3,zero,82138 <___vfprintf_internal_r+0x7a8>
   8212c:	d8c02917 	ldw	r3,164(sp)
   82130:	18c00084 	addi	r3,r3,2
   82134:	d8c02915 	stw	r3,164(sp)
   82138:	90c0210c 	andi	r3,r18,132
   8213c:	d8c03015 	stw	r3,192(sp)
   82140:	1801c51e 	bne	r3,zero,82858 <___vfprintf_internal_r+0xec8>
   82144:	d9003117 	ldw	r4,196(sp)
   82148:	d8c02917 	ldw	r3,164(sp)
   8214c:	20e7c83a 	sub	r19,r4,r3
   82150:	04c1c10e 	bge	zero,r19,82858 <___vfprintf_internal_r+0xec8>
   82154:	02400404 	movi	r9,16
   82158:	d8c02017 	ldw	r3,128(sp)
   8215c:	d8801f17 	ldw	r2,124(sp)
   82160:	4cc52f0e 	bge	r9,r19,83620 <___vfprintf_internal_r+0x1c90>
   82164:	01400274 	movhi	r5,9
   82168:	29504584 	addi	r5,r5,16662
   8216c:	dc403b15 	stw	r17,236(sp)
   82170:	d9403515 	stw	r5,212(sp)
   82174:	9823883a 	mov	r17,r19
   82178:	482d883a 	mov	r22,r9
   8217c:	9027883a 	mov	r19,r18
   82180:	070001c4 	movi	fp,7
   82184:	8025883a 	mov	r18,r16
   82188:	dc002d17 	ldw	r16,180(sp)
   8218c:	00000306 	br	8219c <___vfprintf_internal_r+0x80c>
   82190:	8c7ffc04 	addi	r17,r17,-16
   82194:	42000204 	addi	r8,r8,8
   82198:	b440130e 	bge	r22,r17,821e8 <___vfprintf_internal_r+0x858>
   8219c:	01000274 	movhi	r4,9
   821a0:	18c00404 	addi	r3,r3,16
   821a4:	10800044 	addi	r2,r2,1
   821a8:	21104584 	addi	r4,r4,16662
   821ac:	41000015 	stw	r4,0(r8)
   821b0:	45800115 	stw	r22,4(r8)
   821b4:	d8c02015 	stw	r3,128(sp)
   821b8:	d8801f15 	stw	r2,124(sp)
   821bc:	e0bff40e 	bge	fp,r2,82190 <_gp+0xfff705ac>
   821c0:	d9801e04 	addi	r6,sp,120
   821c4:	b80b883a 	mov	r5,r23
   821c8:	8009883a 	mov	r4,r16
   821cc:	00891700 	call	89170 <__sprint_r>
   821d0:	103ef31e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   821d4:	8c7ffc04 	addi	r17,r17,-16
   821d8:	d8c02017 	ldw	r3,128(sp)
   821dc:	d8801f17 	ldw	r2,124(sp)
   821e0:	da000404 	addi	r8,sp,16
   821e4:	b47fed16 	blt	r22,r17,8219c <_gp+0xfff705b8>
   821e8:	9021883a 	mov	r16,r18
   821ec:	9825883a 	mov	r18,r19
   821f0:	8827883a 	mov	r19,r17
   821f4:	dc403b17 	ldw	r17,236(sp)
   821f8:	d9403517 	ldw	r5,212(sp)
   821fc:	98c7883a 	add	r3,r19,r3
   82200:	10800044 	addi	r2,r2,1
   82204:	41400015 	stw	r5,0(r8)
   82208:	44c00115 	stw	r19,4(r8)
   8220c:	d8c02015 	stw	r3,128(sp)
   82210:	d8801f15 	stw	r2,124(sp)
   82214:	010001c4 	movi	r4,7
   82218:	2082c516 	blt	r4,r2,82d30 <___vfprintf_internal_r+0x13a0>
   8221c:	df002787 	ldb	fp,158(sp)
   82220:	42000204 	addi	r8,r8,8
   82224:	e0000c26 	beq	fp,zero,82258 <___vfprintf_internal_r+0x8c8>
   82228:	d8801f17 	ldw	r2,124(sp)
   8222c:	d9002784 	addi	r4,sp,158
   82230:	18c00044 	addi	r3,r3,1
   82234:	10800044 	addi	r2,r2,1
   82238:	41000015 	stw	r4,0(r8)
   8223c:	01000044 	movi	r4,1
   82240:	41000115 	stw	r4,4(r8)
   82244:	d8c02015 	stw	r3,128(sp)
   82248:	d8801f15 	stw	r2,124(sp)
   8224c:	010001c4 	movi	r4,7
   82250:	20825e16 	blt	r4,r2,82bcc <___vfprintf_internal_r+0x123c>
   82254:	42000204 	addi	r8,r8,8
   82258:	d8802c17 	ldw	r2,176(sp)
   8225c:	10000c26 	beq	r2,zero,82290 <___vfprintf_internal_r+0x900>
   82260:	d8801f17 	ldw	r2,124(sp)
   82264:	d9002704 	addi	r4,sp,156
   82268:	18c00084 	addi	r3,r3,2
   8226c:	10800044 	addi	r2,r2,1
   82270:	41000015 	stw	r4,0(r8)
   82274:	01000084 	movi	r4,2
   82278:	41000115 	stw	r4,4(r8)
   8227c:	d8c02015 	stw	r3,128(sp)
   82280:	d8801f15 	stw	r2,124(sp)
   82284:	010001c4 	movi	r4,7
   82288:	20825816 	blt	r4,r2,82bec <___vfprintf_internal_r+0x125c>
   8228c:	42000204 	addi	r8,r8,8
   82290:	d9003017 	ldw	r4,192(sp)
   82294:	00802004 	movi	r2,128
   82298:	2081bb26 	beq	r4,r2,82988 <___vfprintf_internal_r+0xff8>
   8229c:	d9402a17 	ldw	r5,168(sp)
   822a0:	d8802b17 	ldw	r2,172(sp)
   822a4:	28adc83a 	sub	r22,r5,r2
   822a8:	0580310e 	bge	zero,r22,82370 <___vfprintf_internal_r+0x9e0>
   822ac:	07000404 	movi	fp,16
   822b0:	d8801f17 	ldw	r2,124(sp)
   822b4:	e584360e 	bge	fp,r22,83390 <___vfprintf_internal_r+0x1a00>
   822b8:	01400274 	movhi	r5,9
   822bc:	29504184 	addi	r5,r5,16646
   822c0:	dc402a15 	stw	r17,168(sp)
   822c4:	d9402c15 	stw	r5,176(sp)
   822c8:	b023883a 	mov	r17,r22
   822cc:	04c001c4 	movi	r19,7
   822d0:	a82d883a 	mov	r22,r21
   822d4:	902b883a 	mov	r21,r18
   822d8:	8025883a 	mov	r18,r16
   822dc:	dc002d17 	ldw	r16,180(sp)
   822e0:	00000306 	br	822f0 <___vfprintf_internal_r+0x960>
   822e4:	8c7ffc04 	addi	r17,r17,-16
   822e8:	42000204 	addi	r8,r8,8
   822ec:	e440110e 	bge	fp,r17,82334 <___vfprintf_internal_r+0x9a4>
   822f0:	18c00404 	addi	r3,r3,16
   822f4:	10800044 	addi	r2,r2,1
   822f8:	45000015 	stw	r20,0(r8)
   822fc:	47000115 	stw	fp,4(r8)
   82300:	d8c02015 	stw	r3,128(sp)
   82304:	d8801f15 	stw	r2,124(sp)
   82308:	98bff60e 	bge	r19,r2,822e4 <_gp+0xfff70700>
   8230c:	d9801e04 	addi	r6,sp,120
   82310:	b80b883a 	mov	r5,r23
   82314:	8009883a 	mov	r4,r16
   82318:	00891700 	call	89170 <__sprint_r>
   8231c:	103ea01e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82320:	8c7ffc04 	addi	r17,r17,-16
   82324:	d8c02017 	ldw	r3,128(sp)
   82328:	d8801f17 	ldw	r2,124(sp)
   8232c:	da000404 	addi	r8,sp,16
   82330:	e47fef16 	blt	fp,r17,822f0 <_gp+0xfff7070c>
   82334:	9021883a 	mov	r16,r18
   82338:	a825883a 	mov	r18,r21
   8233c:	b02b883a 	mov	r21,r22
   82340:	882d883a 	mov	r22,r17
   82344:	dc402a17 	ldw	r17,168(sp)
   82348:	d9002c17 	ldw	r4,176(sp)
   8234c:	1d87883a 	add	r3,r3,r22
   82350:	10800044 	addi	r2,r2,1
   82354:	41000015 	stw	r4,0(r8)
   82358:	45800115 	stw	r22,4(r8)
   8235c:	d8c02015 	stw	r3,128(sp)
   82360:	d8801f15 	stw	r2,124(sp)
   82364:	010001c4 	movi	r4,7
   82368:	20821016 	blt	r4,r2,82bac <___vfprintf_internal_r+0x121c>
   8236c:	42000204 	addi	r8,r8,8
   82370:	9080400c 	andi	r2,r18,256
   82374:	10013a1e 	bne	r2,zero,82860 <___vfprintf_internal_r+0xed0>
   82378:	d9402b17 	ldw	r5,172(sp)
   8237c:	d8801f17 	ldw	r2,124(sp)
   82380:	44000015 	stw	r16,0(r8)
   82384:	1947883a 	add	r3,r3,r5
   82388:	10800044 	addi	r2,r2,1
   8238c:	41400115 	stw	r5,4(r8)
   82390:	d8c02015 	stw	r3,128(sp)
   82394:	d8801f15 	stw	r2,124(sp)
   82398:	010001c4 	movi	r4,7
   8239c:	2081f516 	blt	r4,r2,82b74 <___vfprintf_internal_r+0x11e4>
   823a0:	42000204 	addi	r8,r8,8
   823a4:	9480010c 	andi	r18,r18,4
   823a8:	90003226 	beq	r18,zero,82474 <___vfprintf_internal_r+0xae4>
   823ac:	d9403117 	ldw	r5,196(sp)
   823b0:	d8802917 	ldw	r2,164(sp)
   823b4:	28a1c83a 	sub	r16,r5,r2
   823b8:	04002e0e 	bge	zero,r16,82474 <___vfprintf_internal_r+0xae4>
   823bc:	04400404 	movi	r17,16
   823c0:	d8801f17 	ldw	r2,124(sp)
   823c4:	8c04c40e 	bge	r17,r16,836d8 <___vfprintf_internal_r+0x1d48>
   823c8:	01400274 	movhi	r5,9
   823cc:	29504584 	addi	r5,r5,16662
   823d0:	d9403515 	stw	r5,212(sp)
   823d4:	048001c4 	movi	r18,7
   823d8:	dcc02d17 	ldw	r19,180(sp)
   823dc:	00000306 	br	823ec <___vfprintf_internal_r+0xa5c>
   823e0:	843ffc04 	addi	r16,r16,-16
   823e4:	42000204 	addi	r8,r8,8
   823e8:	8c00130e 	bge	r17,r16,82438 <___vfprintf_internal_r+0xaa8>
   823ec:	01000274 	movhi	r4,9
   823f0:	18c00404 	addi	r3,r3,16
   823f4:	10800044 	addi	r2,r2,1
   823f8:	21104584 	addi	r4,r4,16662
   823fc:	41000015 	stw	r4,0(r8)
   82400:	44400115 	stw	r17,4(r8)
   82404:	d8c02015 	stw	r3,128(sp)
   82408:	d8801f15 	stw	r2,124(sp)
   8240c:	90bff40e 	bge	r18,r2,823e0 <_gp+0xfff707fc>
   82410:	d9801e04 	addi	r6,sp,120
   82414:	b80b883a 	mov	r5,r23
   82418:	9809883a 	mov	r4,r19
   8241c:	00891700 	call	89170 <__sprint_r>
   82420:	103e5f1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82424:	843ffc04 	addi	r16,r16,-16
   82428:	d8c02017 	ldw	r3,128(sp)
   8242c:	d8801f17 	ldw	r2,124(sp)
   82430:	da000404 	addi	r8,sp,16
   82434:	8c3fed16 	blt	r17,r16,823ec <_gp+0xfff70808>
   82438:	d9403517 	ldw	r5,212(sp)
   8243c:	1c07883a 	add	r3,r3,r16
   82440:	10800044 	addi	r2,r2,1
   82444:	41400015 	stw	r5,0(r8)
   82448:	44000115 	stw	r16,4(r8)
   8244c:	d8c02015 	stw	r3,128(sp)
   82450:	d8801f15 	stw	r2,124(sp)
   82454:	010001c4 	movi	r4,7
   82458:	2080060e 	bge	r4,r2,82474 <___vfprintf_internal_r+0xae4>
   8245c:	d9002d17 	ldw	r4,180(sp)
   82460:	d9801e04 	addi	r6,sp,120
   82464:	b80b883a 	mov	r5,r23
   82468:	00891700 	call	89170 <__sprint_r>
   8246c:	103e4c1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82470:	d8c02017 	ldw	r3,128(sp)
   82474:	d8803117 	ldw	r2,196(sp)
   82478:	d9002917 	ldw	r4,164(sp)
   8247c:	1100010e 	bge	r2,r4,82484 <___vfprintf_internal_r+0xaf4>
   82480:	2005883a 	mov	r2,r4
   82484:	d9402f17 	ldw	r5,188(sp)
   82488:	288b883a 	add	r5,r5,r2
   8248c:	d9402f15 	stw	r5,188(sp)
   82490:	1801c01e 	bne	r3,zero,82b94 <___vfprintf_internal_r+0x1204>
   82494:	a8800007 	ldb	r2,0(r21)
   82498:	d8001f15 	stw	zero,124(sp)
   8249c:	da000404 	addi	r8,sp,16
   824a0:	103d751e 	bne	r2,zero,81a78 <_gp+0xfff6fe94>
   824a4:	a823883a 	mov	r17,r21
   824a8:	003d8b06 	br	81ad8 <_gp+0xfff6fef4>
   824ac:	8025883a 	mov	r18,r16
   824b0:	dc002903 	ldbu	r16,164(sp)
   824b4:	e011883a 	mov	r8,fp
   824b8:	84003fcc 	andi	r16,r16,255
   824bc:	8005e51e 	bne	r16,zero,83c54 <___vfprintf_internal_r+0x22c4>
   824c0:	94800414 	ori	r18,r18,16
   824c4:	9080080c 	andi	r2,r18,32
   824c8:	10022b26 	beq	r2,zero,82d78 <___vfprintf_internal_r+0x13e8>
   824cc:	d9002e17 	ldw	r4,184(sp)
   824d0:	d9402a17 	ldw	r5,168(sp)
   824d4:	d8002785 	stb	zero,158(sp)
   824d8:	20c00204 	addi	r3,r4,8
   824dc:	24c00017 	ldw	r19,0(r4)
   824e0:	25800117 	ldw	r22,4(r4)
   824e4:	28042e16 	blt	r5,zero,835a0 <___vfprintf_internal_r+0x1c10>
   824e8:	013fdfc4 	movi	r4,-129
   824ec:	9d84b03a 	or	r2,r19,r22
   824f0:	d8c02e15 	stw	r3,184(sp)
   824f4:	9124703a 	and	r18,r18,r4
   824f8:	0039883a 	mov	fp,zero
   824fc:	103e801e 	bne	r2,zero,81f00 <_gp+0xfff7031c>
   82500:	d9002a17 	ldw	r4,168(sp)
   82504:	2002e01e 	bne	r4,zero,83088 <___vfprintf_internal_r+0x16f8>
   82508:	d8002a15 	stw	zero,168(sp)
   8250c:	d8002b15 	stw	zero,172(sp)
   82510:	dc001e04 	addi	r16,sp,120
   82514:	003ef506 	br	820ec <_gp+0xfff70508>
   82518:	8025883a 	mov	r18,r16
   8251c:	dc002903 	ldbu	r16,164(sp)
   82520:	e011883a 	mov	r8,fp
   82524:	84003fcc 	andi	r16,r16,255
   82528:	8005ba1e 	bne	r16,zero,83c14 <___vfprintf_internal_r+0x2284>
   8252c:	01000274 	movhi	r4,9
   82530:	21103504 	addi	r4,r4,16596
   82534:	d9003915 	stw	r4,228(sp)
   82538:	9080080c 	andi	r2,r18,32
   8253c:	10006126 	beq	r2,zero,826c4 <___vfprintf_internal_r+0xd34>
   82540:	d9402e17 	ldw	r5,184(sp)
   82544:	2cc00017 	ldw	r19,0(r5)
   82548:	2d800117 	ldw	r22,4(r5)
   8254c:	29400204 	addi	r5,r5,8
   82550:	d9402e15 	stw	r5,184(sp)
   82554:	9080004c 	andi	r2,r18,1
   82558:	1001ac26 	beq	r2,zero,82c0c <___vfprintf_internal_r+0x127c>
   8255c:	9d84b03a 	or	r2,r19,r22
   82560:	10038526 	beq	r2,zero,83378 <___vfprintf_internal_r+0x19e8>
   82564:	d8c02a17 	ldw	r3,168(sp)
   82568:	00800c04 	movi	r2,48
   8256c:	d8802705 	stb	r2,156(sp)
   82570:	dc402745 	stb	r17,157(sp)
   82574:	d8002785 	stb	zero,158(sp)
   82578:	90800094 	ori	r2,r18,2
   8257c:	18047916 	blt	r3,zero,83764 <___vfprintf_internal_r+0x1dd4>
   82580:	00bfdfc4 	movi	r2,-129
   82584:	90a4703a 	and	r18,r18,r2
   82588:	94800094 	ori	r18,r18,2
   8258c:	0039883a 	mov	fp,zero
   82590:	d9003917 	ldw	r4,228(sp)
   82594:	dc001e04 	addi	r16,sp,120
   82598:	988003cc 	andi	r2,r19,15
   8259c:	b006973a 	slli	r3,r22,28
   825a0:	2085883a 	add	r2,r4,r2
   825a4:	9826d13a 	srli	r19,r19,4
   825a8:	10800003 	ldbu	r2,0(r2)
   825ac:	b02cd13a 	srli	r22,r22,4
   825b0:	843fffc4 	addi	r16,r16,-1
   825b4:	1ce6b03a 	or	r19,r3,r19
   825b8:	80800005 	stb	r2,0(r16)
   825bc:	9d84b03a 	or	r2,r19,r22
   825c0:	103ff51e 	bne	r2,zero,82598 <_gp+0xfff709b4>
   825c4:	d8c02817 	ldw	r3,160(sp)
   825c8:	1c07c83a 	sub	r3,r3,r16
   825cc:	d8c02b15 	stw	r3,172(sp)
   825d0:	003ec606 	br	820ec <_gp+0xfff70508>
   825d4:	8025883a 	mov	r18,r16
   825d8:	dc002903 	ldbu	r16,164(sp)
   825dc:	e011883a 	mov	r8,fp
   825e0:	84003fcc 	andi	r16,r16,255
   825e4:	803e9626 	beq	r16,zero,82040 <_gp+0xfff7045c>
   825e8:	d8c02b03 	ldbu	r3,172(sp)
   825ec:	d8c02785 	stb	r3,158(sp)
   825f0:	003e9306 	br	82040 <_gp+0xfff7045c>
   825f4:	00c00044 	movi	r3,1
   825f8:	d8c02905 	stb	r3,164(sp)
   825fc:	00c00ac4 	movi	r3,43
   82600:	d8c02b05 	stb	r3,172(sp)
   82604:	ac400007 	ldb	r17,0(r21)
   82608:	003d4306 	br	81b18 <_gp+0xfff6ff34>
   8260c:	84000814 	ori	r16,r16,32
   82610:	ac400007 	ldb	r17,0(r21)
   82614:	003d4006 	br	81b18 <_gp+0xfff6ff34>
   82618:	d8802e17 	ldw	r2,184(sp)
   8261c:	8025883a 	mov	r18,r16
   82620:	d8002785 	stb	zero,158(sp)
   82624:	14000017 	ldw	r16,0(r2)
   82628:	e011883a 	mov	r8,fp
   8262c:	14c00104 	addi	r19,r2,4
   82630:	80042d26 	beq	r16,zero,836e8 <___vfprintf_internal_r+0x1d58>
   82634:	d8c02a17 	ldw	r3,168(sp)
   82638:	1803e416 	blt	r3,zero,835cc <___vfprintf_internal_r+0x1c3c>
   8263c:	180d883a 	mov	r6,r3
   82640:	000b883a 	mov	r5,zero
   82644:	8009883a 	mov	r4,r16
   82648:	df003d15 	stw	fp,244(sp)
   8264c:	00872c80 	call	872c8 <memchr>
   82650:	da003d17 	ldw	r8,244(sp)
   82654:	10046826 	beq	r2,zero,837f8 <___vfprintf_internal_r+0x1e68>
   82658:	1405c83a 	sub	r2,r2,r16
   8265c:	d8802b15 	stw	r2,172(sp)
   82660:	1003e016 	blt	r2,zero,835e4 <___vfprintf_internal_r+0x1c54>
   82664:	df002783 	ldbu	fp,158(sp)
   82668:	d8802915 	stw	r2,164(sp)
   8266c:	dcc02e15 	stw	r19,184(sp)
   82670:	d8002a15 	stw	zero,168(sp)
   82674:	d8003215 	stw	zero,200(sp)
   82678:	003ea206 	br	82104 <_gp+0xfff70520>
   8267c:	8025883a 	mov	r18,r16
   82680:	dc002903 	ldbu	r16,164(sp)
   82684:	e011883a 	mov	r8,fp
   82688:	84003fcc 	andi	r16,r16,255
   8268c:	803f8d26 	beq	r16,zero,824c4 <_gp+0xfff708e0>
   82690:	d8c02b03 	ldbu	r3,172(sp)
   82694:	d8c02785 	stb	r3,158(sp)
   82698:	003f8a06 	br	824c4 <_gp+0xfff708e0>
   8269c:	8025883a 	mov	r18,r16
   826a0:	dc002903 	ldbu	r16,164(sp)
   826a4:	e011883a 	mov	r8,fp
   826a8:	84003fcc 	andi	r16,r16,255
   826ac:	8005661e 	bne	r16,zero,83c48 <___vfprintf_internal_r+0x22b8>
   826b0:	01000274 	movhi	r4,9
   826b4:	21103a04 	addi	r4,r4,16616
   826b8:	d9003915 	stw	r4,228(sp)
   826bc:	9080080c 	andi	r2,r18,32
   826c0:	103f9f1e 	bne	r2,zero,82540 <_gp+0xfff7095c>
   826c4:	9080040c 	andi	r2,r18,16
   826c8:	1002eb26 	beq	r2,zero,83278 <___vfprintf_internal_r+0x18e8>
   826cc:	d8802e17 	ldw	r2,184(sp)
   826d0:	002d883a 	mov	r22,zero
   826d4:	14c00017 	ldw	r19,0(r2)
   826d8:	10800104 	addi	r2,r2,4
   826dc:	d8802e15 	stw	r2,184(sp)
   826e0:	003f9c06 	br	82554 <_gp+0xfff70970>
   826e4:	d8802b07 	ldb	r2,172(sp)
   826e8:	1002e11e 	bne	r2,zero,83270 <___vfprintf_internal_r+0x18e0>
   826ec:	00c00044 	movi	r3,1
   826f0:	d8c02905 	stb	r3,164(sp)
   826f4:	00c00804 	movi	r3,32
   826f8:	d8c02b05 	stb	r3,172(sp)
   826fc:	ac400007 	ldb	r17,0(r21)
   82700:	003d0506 	br	81b18 <_gp+0xfff6ff34>
   82704:	84000054 	ori	r16,r16,1
   82708:	ac400007 	ldb	r17,0(r21)
   8270c:	003d0206 	br	81b18 <_gp+0xfff6ff34>
   82710:	8025883a 	mov	r18,r16
   82714:	dc002903 	ldbu	r16,164(sp)
   82718:	e011883a 	mov	r8,fp
   8271c:	84003fcc 	andi	r16,r16,255
   82720:	803de726 	beq	r16,zero,81ec0 <_gp+0xfff702dc>
   82724:	d8c02b03 	ldbu	r3,172(sp)
   82728:	d8c02785 	stb	r3,158(sp)
   8272c:	003de406 	br	81ec0 <_gp+0xfff702dc>
   82730:	84001014 	ori	r16,r16,64
   82734:	ac400007 	ldb	r17,0(r21)
   82738:	003cf706 	br	81b18 <_gp+0xfff6ff34>
   8273c:	ac400007 	ldb	r17,0(r21)
   82740:	00801b04 	movi	r2,108
   82744:	88838f26 	beq	r17,r2,83584 <___vfprintf_internal_r+0x1bf4>
   82748:	84000414 	ori	r16,r16,16
   8274c:	003cf206 	br	81b18 <_gp+0xfff6ff34>
   82750:	8025883a 	mov	r18,r16
   82754:	dc002903 	ldbu	r16,164(sp)
   82758:	e011883a 	mov	r8,fp
   8275c:	84003fcc 	andi	r16,r16,255
   82760:	80053f1e 	bne	r16,zero,83c60 <___vfprintf_internal_r+0x22d0>
   82764:	9080080c 	andi	r2,r18,32
   82768:	1002d226 	beq	r2,zero,832b4 <___vfprintf_internal_r+0x1924>
   8276c:	d9002e17 	ldw	r4,184(sp)
   82770:	d9402f17 	ldw	r5,188(sp)
   82774:	20800017 	ldw	r2,0(r4)
   82778:	2807d7fa 	srai	r3,r5,31
   8277c:	21000104 	addi	r4,r4,4
   82780:	d9002e15 	stw	r4,184(sp)
   82784:	11400015 	stw	r5,0(r2)
   82788:	10c00115 	stw	r3,4(r2)
   8278c:	003cb806 	br	81a70 <_gp+0xfff6fe8c>
   82790:	d8c02e17 	ldw	r3,184(sp)
   82794:	d9002e17 	ldw	r4,184(sp)
   82798:	8025883a 	mov	r18,r16
   8279c:	18800017 	ldw	r2,0(r3)
   827a0:	21000104 	addi	r4,r4,4
   827a4:	00c00044 	movi	r3,1
   827a8:	e011883a 	mov	r8,fp
   827ac:	d8c02915 	stw	r3,164(sp)
   827b0:	d8002785 	stb	zero,158(sp)
   827b4:	d8801405 	stb	r2,80(sp)
   827b8:	d9002e15 	stw	r4,184(sp)
   827bc:	d8c02b15 	stw	r3,172(sp)
   827c0:	d8002a15 	stw	zero,168(sp)
   827c4:	d8003215 	stw	zero,200(sp)
   827c8:	dc001404 	addi	r16,sp,80
   827cc:	0039883a 	mov	fp,zero
   827d0:	003e5306 	br	82120 <_gp+0xfff7053c>
   827d4:	01000274 	movhi	r4,9
   827d8:	21103a04 	addi	r4,r4,16616
   827dc:	0039883a 	mov	fp,zero
   827e0:	d9003915 	stw	r4,228(sp)
   827e4:	04401e04 	movi	r17,120
   827e8:	003f6906 	br	82590 <_gp+0xfff709ac>
   827ec:	8025883a 	mov	r18,r16
   827f0:	dc002903 	ldbu	r16,164(sp)
   827f4:	e011883a 	mov	r8,fp
   827f8:	84003fcc 	andi	r16,r16,255
   827fc:	8005081e 	bne	r16,zero,83c20 <___vfprintf_internal_r+0x2290>
   82800:	883d6126 	beq	r17,zero,81d88 <_gp+0xfff701a4>
   82804:	00c00044 	movi	r3,1
   82808:	d8c02915 	stw	r3,164(sp)
   8280c:	dc401405 	stb	r17,80(sp)
   82810:	d8002785 	stb	zero,158(sp)
   82814:	003fe906 	br	827bc <_gp+0xfff70bd8>
   82818:	01400274 	movhi	r5,9
   8281c:	29503a04 	addi	r5,r5,16616
   82820:	d9403915 	stw	r5,228(sp)
   82824:	d8c02e15 	stw	r3,184(sp)
   82828:	1025883a 	mov	r18,r2
   8282c:	04401e04 	movi	r17,120
   82830:	9d84b03a 	or	r2,r19,r22
   82834:	1000fc1e 	bne	r2,zero,82c28 <___vfprintf_internal_r+0x1298>
   82838:	0039883a 	mov	fp,zero
   8283c:	00800084 	movi	r2,2
   82840:	10803fcc 	andi	r2,r2,255
   82844:	00c00044 	movi	r3,1
   82848:	10c20f26 	beq	r2,r3,83088 <___vfprintf_internal_r+0x16f8>
   8284c:	00c00084 	movi	r3,2
   82850:	10fd3326 	beq	r2,r3,81d20 <_gp+0xfff7013c>
   82854:	003e0b06 	br	82084 <_gp+0xfff704a0>
   82858:	d8c02017 	ldw	r3,128(sp)
   8285c:	003e7106 	br	82224 <_gp+0xfff70640>
   82860:	00801944 	movi	r2,101
   82864:	14407e0e 	bge	r2,r17,82a60 <___vfprintf_internal_r+0x10d0>
   82868:	d9003617 	ldw	r4,216(sp)
   8286c:	d9403817 	ldw	r5,224(sp)
   82870:	000d883a 	mov	r6,zero
   82874:	000f883a 	mov	r7,zero
   82878:	d8c03c15 	stw	r3,240(sp)
   8287c:	da003d15 	stw	r8,244(sp)
   82880:	008cef40 	call	8cef4 <__eqdf2>
   82884:	d8c03c17 	ldw	r3,240(sp)
   82888:	da003d17 	ldw	r8,244(sp)
   8288c:	1000f71e 	bne	r2,zero,82c6c <___vfprintf_internal_r+0x12dc>
   82890:	d8801f17 	ldw	r2,124(sp)
   82894:	01000274 	movhi	r4,9
   82898:	21104104 	addi	r4,r4,16644
   8289c:	18c00044 	addi	r3,r3,1
   828a0:	10800044 	addi	r2,r2,1
   828a4:	41000015 	stw	r4,0(r8)
   828a8:	01000044 	movi	r4,1
   828ac:	41000115 	stw	r4,4(r8)
   828b0:	d8c02015 	stw	r3,128(sp)
   828b4:	d8801f15 	stw	r2,124(sp)
   828b8:	010001c4 	movi	r4,7
   828bc:	2082b816 	blt	r4,r2,833a0 <___vfprintf_internal_r+0x1a10>
   828c0:	42000204 	addi	r8,r8,8
   828c4:	d8802617 	ldw	r2,152(sp)
   828c8:	d9403317 	ldw	r5,204(sp)
   828cc:	11400216 	blt	r2,r5,828d8 <___vfprintf_internal_r+0xf48>
   828d0:	9080004c 	andi	r2,r18,1
   828d4:	103eb326 	beq	r2,zero,823a4 <_gp+0xfff707c0>
   828d8:	d8803717 	ldw	r2,220(sp)
   828dc:	d9003417 	ldw	r4,208(sp)
   828e0:	d9403717 	ldw	r5,220(sp)
   828e4:	1887883a 	add	r3,r3,r2
   828e8:	d8801f17 	ldw	r2,124(sp)
   828ec:	41000015 	stw	r4,0(r8)
   828f0:	41400115 	stw	r5,4(r8)
   828f4:	10800044 	addi	r2,r2,1
   828f8:	d8c02015 	stw	r3,128(sp)
   828fc:	d8801f15 	stw	r2,124(sp)
   82900:	010001c4 	movi	r4,7
   82904:	20832916 	blt	r4,r2,835ac <___vfprintf_internal_r+0x1c1c>
   82908:	42000204 	addi	r8,r8,8
   8290c:	d8803317 	ldw	r2,204(sp)
   82910:	143fffc4 	addi	r16,r2,-1
   82914:	043ea30e 	bge	zero,r16,823a4 <_gp+0xfff707c0>
   82918:	04400404 	movi	r17,16
   8291c:	d8801f17 	ldw	r2,124(sp)
   82920:	8c00880e 	bge	r17,r16,82b44 <___vfprintf_internal_r+0x11b4>
   82924:	01400274 	movhi	r5,9
   82928:	29504184 	addi	r5,r5,16646
   8292c:	d9402c15 	stw	r5,176(sp)
   82930:	058001c4 	movi	r22,7
   82934:	dcc02d17 	ldw	r19,180(sp)
   82938:	00000306 	br	82948 <___vfprintf_internal_r+0xfb8>
   8293c:	42000204 	addi	r8,r8,8
   82940:	843ffc04 	addi	r16,r16,-16
   82944:	8c00820e 	bge	r17,r16,82b50 <___vfprintf_internal_r+0x11c0>
   82948:	18c00404 	addi	r3,r3,16
   8294c:	10800044 	addi	r2,r2,1
   82950:	45000015 	stw	r20,0(r8)
   82954:	44400115 	stw	r17,4(r8)
   82958:	d8c02015 	stw	r3,128(sp)
   8295c:	d8801f15 	stw	r2,124(sp)
   82960:	b0bff60e 	bge	r22,r2,8293c <_gp+0xfff70d58>
   82964:	d9801e04 	addi	r6,sp,120
   82968:	b80b883a 	mov	r5,r23
   8296c:	9809883a 	mov	r4,r19
   82970:	00891700 	call	89170 <__sprint_r>
   82974:	103d0a1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82978:	d8c02017 	ldw	r3,128(sp)
   8297c:	d8801f17 	ldw	r2,124(sp)
   82980:	da000404 	addi	r8,sp,16
   82984:	003fee06 	br	82940 <_gp+0xfff70d5c>
   82988:	d9403117 	ldw	r5,196(sp)
   8298c:	d8802917 	ldw	r2,164(sp)
   82990:	28adc83a 	sub	r22,r5,r2
   82994:	05be410e 	bge	zero,r22,8229c <_gp+0xfff706b8>
   82998:	07000404 	movi	fp,16
   8299c:	d8801f17 	ldw	r2,124(sp)
   829a0:	e5838f0e 	bge	fp,r22,837e0 <___vfprintf_internal_r+0x1e50>
   829a4:	01400274 	movhi	r5,9
   829a8:	29504184 	addi	r5,r5,16646
   829ac:	dc403015 	stw	r17,192(sp)
   829b0:	d9402c15 	stw	r5,176(sp)
   829b4:	b023883a 	mov	r17,r22
   829b8:	04c001c4 	movi	r19,7
   829bc:	a82d883a 	mov	r22,r21
   829c0:	902b883a 	mov	r21,r18
   829c4:	8025883a 	mov	r18,r16
   829c8:	dc002d17 	ldw	r16,180(sp)
   829cc:	00000306 	br	829dc <___vfprintf_internal_r+0x104c>
   829d0:	8c7ffc04 	addi	r17,r17,-16
   829d4:	42000204 	addi	r8,r8,8
   829d8:	e440110e 	bge	fp,r17,82a20 <___vfprintf_internal_r+0x1090>
   829dc:	18c00404 	addi	r3,r3,16
   829e0:	10800044 	addi	r2,r2,1
   829e4:	45000015 	stw	r20,0(r8)
   829e8:	47000115 	stw	fp,4(r8)
   829ec:	d8c02015 	stw	r3,128(sp)
   829f0:	d8801f15 	stw	r2,124(sp)
   829f4:	98bff60e 	bge	r19,r2,829d0 <_gp+0xfff70dec>
   829f8:	d9801e04 	addi	r6,sp,120
   829fc:	b80b883a 	mov	r5,r23
   82a00:	8009883a 	mov	r4,r16
   82a04:	00891700 	call	89170 <__sprint_r>
   82a08:	103ce51e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82a0c:	8c7ffc04 	addi	r17,r17,-16
   82a10:	d8c02017 	ldw	r3,128(sp)
   82a14:	d8801f17 	ldw	r2,124(sp)
   82a18:	da000404 	addi	r8,sp,16
   82a1c:	e47fef16 	blt	fp,r17,829dc <_gp+0xfff70df8>
   82a20:	9021883a 	mov	r16,r18
   82a24:	a825883a 	mov	r18,r21
   82a28:	b02b883a 	mov	r21,r22
   82a2c:	882d883a 	mov	r22,r17
   82a30:	dc403017 	ldw	r17,192(sp)
   82a34:	d9002c17 	ldw	r4,176(sp)
   82a38:	1d87883a 	add	r3,r3,r22
   82a3c:	10800044 	addi	r2,r2,1
   82a40:	41000015 	stw	r4,0(r8)
   82a44:	45800115 	stw	r22,4(r8)
   82a48:	d8c02015 	stw	r3,128(sp)
   82a4c:	d8801f15 	stw	r2,124(sp)
   82a50:	010001c4 	movi	r4,7
   82a54:	20818e16 	blt	r4,r2,83090 <___vfprintf_internal_r+0x1700>
   82a58:	42000204 	addi	r8,r8,8
   82a5c:	003e0f06 	br	8229c <_gp+0xfff706b8>
   82a60:	d9403317 	ldw	r5,204(sp)
   82a64:	00800044 	movi	r2,1
   82a68:	18c00044 	addi	r3,r3,1
   82a6c:	1141530e 	bge	r2,r5,82fbc <___vfprintf_internal_r+0x162c>
   82a70:	dc401f17 	ldw	r17,124(sp)
   82a74:	00800044 	movi	r2,1
   82a78:	40800115 	stw	r2,4(r8)
   82a7c:	8c400044 	addi	r17,r17,1
   82a80:	44000015 	stw	r16,0(r8)
   82a84:	d8c02015 	stw	r3,128(sp)
   82a88:	dc401f15 	stw	r17,124(sp)
   82a8c:	008001c4 	movi	r2,7
   82a90:	14416b16 	blt	r2,r17,83040 <___vfprintf_internal_r+0x16b0>
   82a94:	42000204 	addi	r8,r8,8
   82a98:	d8803717 	ldw	r2,220(sp)
   82a9c:	d9003417 	ldw	r4,208(sp)
   82aa0:	8c400044 	addi	r17,r17,1
   82aa4:	10c7883a 	add	r3,r2,r3
   82aa8:	40800115 	stw	r2,4(r8)
   82aac:	41000015 	stw	r4,0(r8)
   82ab0:	d8c02015 	stw	r3,128(sp)
   82ab4:	dc401f15 	stw	r17,124(sp)
   82ab8:	008001c4 	movi	r2,7
   82abc:	14416916 	blt	r2,r17,83064 <___vfprintf_internal_r+0x16d4>
   82ac0:	45800204 	addi	r22,r8,8
   82ac4:	d9003617 	ldw	r4,216(sp)
   82ac8:	d9403817 	ldw	r5,224(sp)
   82acc:	000d883a 	mov	r6,zero
   82ad0:	000f883a 	mov	r7,zero
   82ad4:	d8c03c15 	stw	r3,240(sp)
   82ad8:	008cef40 	call	8cef4 <__eqdf2>
   82adc:	d8c03c17 	ldw	r3,240(sp)
   82ae0:	1000bc26 	beq	r2,zero,82dd4 <___vfprintf_internal_r+0x1444>
   82ae4:	d9403317 	ldw	r5,204(sp)
   82ae8:	84000044 	addi	r16,r16,1
   82aec:	8c400044 	addi	r17,r17,1
   82af0:	28bfffc4 	addi	r2,r5,-1
   82af4:	1887883a 	add	r3,r3,r2
   82af8:	b0800115 	stw	r2,4(r22)
   82afc:	b4000015 	stw	r16,0(r22)
   82b00:	d8c02015 	stw	r3,128(sp)
   82b04:	dc401f15 	stw	r17,124(sp)
   82b08:	008001c4 	movi	r2,7
   82b0c:	14414316 	blt	r2,r17,8301c <___vfprintf_internal_r+0x168c>
   82b10:	b5800204 	addi	r22,r22,8
   82b14:	d9003a17 	ldw	r4,232(sp)
   82b18:	df0022c4 	addi	fp,sp,139
   82b1c:	8c400044 	addi	r17,r17,1
   82b20:	20c7883a 	add	r3,r4,r3
   82b24:	b7000015 	stw	fp,0(r22)
   82b28:	b1000115 	stw	r4,4(r22)
   82b2c:	d8c02015 	stw	r3,128(sp)
   82b30:	dc401f15 	stw	r17,124(sp)
   82b34:	008001c4 	movi	r2,7
   82b38:	14400e16 	blt	r2,r17,82b74 <___vfprintf_internal_r+0x11e4>
   82b3c:	b2000204 	addi	r8,r22,8
   82b40:	003e1806 	br	823a4 <_gp+0xfff707c0>
   82b44:	01000274 	movhi	r4,9
   82b48:	21104184 	addi	r4,r4,16646
   82b4c:	d9002c15 	stw	r4,176(sp)
   82b50:	d9002c17 	ldw	r4,176(sp)
   82b54:	1c07883a 	add	r3,r3,r16
   82b58:	44000115 	stw	r16,4(r8)
   82b5c:	41000015 	stw	r4,0(r8)
   82b60:	10800044 	addi	r2,r2,1
   82b64:	d8c02015 	stw	r3,128(sp)
   82b68:	d8801f15 	stw	r2,124(sp)
   82b6c:	010001c4 	movi	r4,7
   82b70:	20be0b0e 	bge	r4,r2,823a0 <_gp+0xfff707bc>
   82b74:	d9002d17 	ldw	r4,180(sp)
   82b78:	d9801e04 	addi	r6,sp,120
   82b7c:	b80b883a 	mov	r5,r23
   82b80:	00891700 	call	89170 <__sprint_r>
   82b84:	103c861e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82b88:	d8c02017 	ldw	r3,128(sp)
   82b8c:	da000404 	addi	r8,sp,16
   82b90:	003e0406 	br	823a4 <_gp+0xfff707c0>
   82b94:	d9002d17 	ldw	r4,180(sp)
   82b98:	d9801e04 	addi	r6,sp,120
   82b9c:	b80b883a 	mov	r5,r23
   82ba0:	00891700 	call	89170 <__sprint_r>
   82ba4:	103e3b26 	beq	r2,zero,82494 <_gp+0xfff708b0>
   82ba8:	003c7d06 	br	81da0 <_gp+0xfff701bc>
   82bac:	d9002d17 	ldw	r4,180(sp)
   82bb0:	d9801e04 	addi	r6,sp,120
   82bb4:	b80b883a 	mov	r5,r23
   82bb8:	00891700 	call	89170 <__sprint_r>
   82bbc:	103c781e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82bc0:	d8c02017 	ldw	r3,128(sp)
   82bc4:	da000404 	addi	r8,sp,16
   82bc8:	003de906 	br	82370 <_gp+0xfff7078c>
   82bcc:	d9002d17 	ldw	r4,180(sp)
   82bd0:	d9801e04 	addi	r6,sp,120
   82bd4:	b80b883a 	mov	r5,r23
   82bd8:	00891700 	call	89170 <__sprint_r>
   82bdc:	103c701e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82be0:	d8c02017 	ldw	r3,128(sp)
   82be4:	da000404 	addi	r8,sp,16
   82be8:	003d9b06 	br	82258 <_gp+0xfff70674>
   82bec:	d9002d17 	ldw	r4,180(sp)
   82bf0:	d9801e04 	addi	r6,sp,120
   82bf4:	b80b883a 	mov	r5,r23
   82bf8:	00891700 	call	89170 <__sprint_r>
   82bfc:	103c681e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82c00:	d8c02017 	ldw	r3,128(sp)
   82c04:	da000404 	addi	r8,sp,16
   82c08:	003da106 	br	82290 <_gp+0xfff706ac>
   82c0c:	d9402a17 	ldw	r5,168(sp)
   82c10:	d8002785 	stb	zero,158(sp)
   82c14:	283f0616 	blt	r5,zero,82830 <_gp+0xfff70c4c>
   82c18:	00ffdfc4 	movi	r3,-129
   82c1c:	9d84b03a 	or	r2,r19,r22
   82c20:	90e4703a 	and	r18,r18,r3
   82c24:	103c3b26 	beq	r2,zero,81d14 <_gp+0xfff70130>
   82c28:	0039883a 	mov	fp,zero
   82c2c:	003e5806 	br	82590 <_gp+0xfff709ac>
   82c30:	9080040c 	andi	r2,r18,16
   82c34:	1001b326 	beq	r2,zero,83304 <___vfprintf_internal_r+0x1974>
   82c38:	d8c02e17 	ldw	r3,184(sp)
   82c3c:	d9002a17 	ldw	r4,168(sp)
   82c40:	d8002785 	stb	zero,158(sp)
   82c44:	18800104 	addi	r2,r3,4
   82c48:	1cc00017 	ldw	r19,0(r3)
   82c4c:	002d883a 	mov	r22,zero
   82c50:	2001b516 	blt	r4,zero,83328 <___vfprintf_internal_r+0x1998>
   82c54:	00ffdfc4 	movi	r3,-129
   82c58:	d8802e15 	stw	r2,184(sp)
   82c5c:	90e4703a 	and	r18,r18,r3
   82c60:	983d0526 	beq	r19,zero,82078 <_gp+0xfff70494>
   82c64:	0039883a 	mov	fp,zero
   82c68:	003d0806 	br	8208c <_gp+0xfff704a8>
   82c6c:	dc402617 	ldw	r17,152(sp)
   82c70:	0441d30e 	bge	zero,r17,833c0 <___vfprintf_internal_r+0x1a30>
   82c74:	dc403217 	ldw	r17,200(sp)
   82c78:	d8803317 	ldw	r2,204(sp)
   82c7c:	1440010e 	bge	r2,r17,82c84 <___vfprintf_internal_r+0x12f4>
   82c80:	1023883a 	mov	r17,r2
   82c84:	04400a0e 	bge	zero,r17,82cb0 <___vfprintf_internal_r+0x1320>
   82c88:	d8801f17 	ldw	r2,124(sp)
   82c8c:	1c47883a 	add	r3,r3,r17
   82c90:	44000015 	stw	r16,0(r8)
   82c94:	10800044 	addi	r2,r2,1
   82c98:	44400115 	stw	r17,4(r8)
   82c9c:	d8c02015 	stw	r3,128(sp)
   82ca0:	d8801f15 	stw	r2,124(sp)
   82ca4:	010001c4 	movi	r4,7
   82ca8:	20826516 	blt	r4,r2,83640 <___vfprintf_internal_r+0x1cb0>
   82cac:	42000204 	addi	r8,r8,8
   82cb0:	88026116 	blt	r17,zero,83638 <___vfprintf_internal_r+0x1ca8>
   82cb4:	d9003217 	ldw	r4,200(sp)
   82cb8:	2463c83a 	sub	r17,r4,r17
   82cbc:	04407b0e 	bge	zero,r17,82eac <___vfprintf_internal_r+0x151c>
   82cc0:	05800404 	movi	r22,16
   82cc4:	d8801f17 	ldw	r2,124(sp)
   82cc8:	b4419d0e 	bge	r22,r17,83340 <___vfprintf_internal_r+0x19b0>
   82ccc:	01000274 	movhi	r4,9
   82cd0:	21104184 	addi	r4,r4,16646
   82cd4:	d9002c15 	stw	r4,176(sp)
   82cd8:	070001c4 	movi	fp,7
   82cdc:	dcc02d17 	ldw	r19,180(sp)
   82ce0:	00000306 	br	82cf0 <___vfprintf_internal_r+0x1360>
   82ce4:	42000204 	addi	r8,r8,8
   82ce8:	8c7ffc04 	addi	r17,r17,-16
   82cec:	b441970e 	bge	r22,r17,8334c <___vfprintf_internal_r+0x19bc>
   82cf0:	18c00404 	addi	r3,r3,16
   82cf4:	10800044 	addi	r2,r2,1
   82cf8:	45000015 	stw	r20,0(r8)
   82cfc:	45800115 	stw	r22,4(r8)
   82d00:	d8c02015 	stw	r3,128(sp)
   82d04:	d8801f15 	stw	r2,124(sp)
   82d08:	e0bff60e 	bge	fp,r2,82ce4 <_gp+0xfff71100>
   82d0c:	d9801e04 	addi	r6,sp,120
   82d10:	b80b883a 	mov	r5,r23
   82d14:	9809883a 	mov	r4,r19
   82d18:	00891700 	call	89170 <__sprint_r>
   82d1c:	103c201e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82d20:	d8c02017 	ldw	r3,128(sp)
   82d24:	d8801f17 	ldw	r2,124(sp)
   82d28:	da000404 	addi	r8,sp,16
   82d2c:	003fee06 	br	82ce8 <_gp+0xfff71104>
   82d30:	d9002d17 	ldw	r4,180(sp)
   82d34:	d9801e04 	addi	r6,sp,120
   82d38:	b80b883a 	mov	r5,r23
   82d3c:	00891700 	call	89170 <__sprint_r>
   82d40:	103c171e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82d44:	d8c02017 	ldw	r3,128(sp)
   82d48:	df002787 	ldb	fp,158(sp)
   82d4c:	da000404 	addi	r8,sp,16
   82d50:	003d3406 	br	82224 <_gp+0xfff70640>
   82d54:	9080040c 	andi	r2,r18,16
   82d58:	10016126 	beq	r2,zero,832e0 <___vfprintf_internal_r+0x1950>
   82d5c:	d9402e17 	ldw	r5,184(sp)
   82d60:	2cc00017 	ldw	r19,0(r5)
   82d64:	29400104 	addi	r5,r5,4
   82d68:	d9402e15 	stw	r5,184(sp)
   82d6c:	982dd7fa 	srai	r22,r19,31
   82d70:	b005883a 	mov	r2,r22
   82d74:	003c5a06 	br	81ee0 <_gp+0xfff702fc>
   82d78:	9080040c 	andi	r2,r18,16
   82d7c:	10003526 	beq	r2,zero,82e54 <___vfprintf_internal_r+0x14c4>
   82d80:	d8c02e17 	ldw	r3,184(sp)
   82d84:	d9002a17 	ldw	r4,168(sp)
   82d88:	d8002785 	stb	zero,158(sp)
   82d8c:	18800104 	addi	r2,r3,4
   82d90:	1cc00017 	ldw	r19,0(r3)
   82d94:	002d883a 	mov	r22,zero
   82d98:	20003716 	blt	r4,zero,82e78 <___vfprintf_internal_r+0x14e8>
   82d9c:	00ffdfc4 	movi	r3,-129
   82da0:	d8802e15 	stw	r2,184(sp)
   82da4:	90e4703a 	and	r18,r18,r3
   82da8:	0039883a 	mov	fp,zero
   82dac:	983dd426 	beq	r19,zero,82500 <_gp+0xfff7091c>
   82db0:	00800244 	movi	r2,9
   82db4:	14fc5336 	bltu	r2,r19,81f04 <_gp+0xfff70320>
   82db8:	d8c02817 	ldw	r3,160(sp)
   82dbc:	dc001dc4 	addi	r16,sp,119
   82dc0:	9cc00c04 	addi	r19,r19,48
   82dc4:	1c07c83a 	sub	r3,r3,r16
   82dc8:	dcc01dc5 	stb	r19,119(sp)
   82dcc:	d8c02b15 	stw	r3,172(sp)
   82dd0:	003cc606 	br	820ec <_gp+0xfff70508>
   82dd4:	d8803317 	ldw	r2,204(sp)
   82dd8:	143fffc4 	addi	r16,r2,-1
   82ddc:	043f4d0e 	bge	zero,r16,82b14 <_gp+0xfff70f30>
   82de0:	07000404 	movi	fp,16
   82de4:	e400810e 	bge	fp,r16,82fec <___vfprintf_internal_r+0x165c>
   82de8:	01400274 	movhi	r5,9
   82dec:	29504184 	addi	r5,r5,16646
   82df0:	d9402c15 	stw	r5,176(sp)
   82df4:	01c001c4 	movi	r7,7
   82df8:	dcc02d17 	ldw	r19,180(sp)
   82dfc:	00000306 	br	82e0c <___vfprintf_internal_r+0x147c>
   82e00:	b5800204 	addi	r22,r22,8
   82e04:	843ffc04 	addi	r16,r16,-16
   82e08:	e4007b0e 	bge	fp,r16,82ff8 <___vfprintf_internal_r+0x1668>
   82e0c:	18c00404 	addi	r3,r3,16
   82e10:	8c400044 	addi	r17,r17,1
   82e14:	b5000015 	stw	r20,0(r22)
   82e18:	b7000115 	stw	fp,4(r22)
   82e1c:	d8c02015 	stw	r3,128(sp)
   82e20:	dc401f15 	stw	r17,124(sp)
   82e24:	3c7ff60e 	bge	r7,r17,82e00 <_gp+0xfff7121c>
   82e28:	d9801e04 	addi	r6,sp,120
   82e2c:	b80b883a 	mov	r5,r23
   82e30:	9809883a 	mov	r4,r19
   82e34:	d9c03c15 	stw	r7,240(sp)
   82e38:	00891700 	call	89170 <__sprint_r>
   82e3c:	d9c03c17 	ldw	r7,240(sp)
   82e40:	103bd71e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82e44:	d8c02017 	ldw	r3,128(sp)
   82e48:	dc401f17 	ldw	r17,124(sp)
   82e4c:	dd800404 	addi	r22,sp,16
   82e50:	003fec06 	br	82e04 <_gp+0xfff71220>
   82e54:	9080100c 	andi	r2,r18,64
   82e58:	d8002785 	stb	zero,158(sp)
   82e5c:	10010e26 	beq	r2,zero,83298 <___vfprintf_internal_r+0x1908>
   82e60:	d9402e17 	ldw	r5,184(sp)
   82e64:	d8c02a17 	ldw	r3,168(sp)
   82e68:	002d883a 	mov	r22,zero
   82e6c:	28800104 	addi	r2,r5,4
   82e70:	2cc0000b 	ldhu	r19,0(r5)
   82e74:	183fc90e 	bge	r3,zero,82d9c <_gp+0xfff711b8>
   82e78:	d8802e15 	stw	r2,184(sp)
   82e7c:	0039883a 	mov	fp,zero
   82e80:	9d84b03a 	or	r2,r19,r22
   82e84:	103c1e1e 	bne	r2,zero,81f00 <_gp+0xfff7031c>
   82e88:	00800044 	movi	r2,1
   82e8c:	003e6c06 	br	82840 <_gp+0xfff70c5c>
   82e90:	d9002d17 	ldw	r4,180(sp)
   82e94:	d9801e04 	addi	r6,sp,120
   82e98:	b80b883a 	mov	r5,r23
   82e9c:	00891700 	call	89170 <__sprint_r>
   82ea0:	103bbf1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82ea4:	d8c02017 	ldw	r3,128(sp)
   82ea8:	da000404 	addi	r8,sp,16
   82eac:	d9003217 	ldw	r4,200(sp)
   82eb0:	d8802617 	ldw	r2,152(sp)
   82eb4:	d9403317 	ldw	r5,204(sp)
   82eb8:	8123883a 	add	r17,r16,r4
   82ebc:	11400216 	blt	r2,r5,82ec8 <___vfprintf_internal_r+0x1538>
   82ec0:	9100004c 	andi	r4,r18,1
   82ec4:	20000d26 	beq	r4,zero,82efc <___vfprintf_internal_r+0x156c>
   82ec8:	d9003717 	ldw	r4,220(sp)
   82ecc:	d9403417 	ldw	r5,208(sp)
   82ed0:	1907883a 	add	r3,r3,r4
   82ed4:	d9001f17 	ldw	r4,124(sp)
   82ed8:	41400015 	stw	r5,0(r8)
   82edc:	d9403717 	ldw	r5,220(sp)
   82ee0:	21000044 	addi	r4,r4,1
   82ee4:	d8c02015 	stw	r3,128(sp)
   82ee8:	41400115 	stw	r5,4(r8)
   82eec:	d9001f15 	stw	r4,124(sp)
   82ef0:	014001c4 	movi	r5,7
   82ef4:	2901e816 	blt	r5,r4,83698 <___vfprintf_internal_r+0x1d08>
   82ef8:	42000204 	addi	r8,r8,8
   82efc:	d9003317 	ldw	r4,204(sp)
   82f00:	8121883a 	add	r16,r16,r4
   82f04:	2085c83a 	sub	r2,r4,r2
   82f08:	8461c83a 	sub	r16,r16,r17
   82f0c:	1400010e 	bge	r2,r16,82f14 <___vfprintf_internal_r+0x1584>
   82f10:	1021883a 	mov	r16,r2
   82f14:	04000a0e 	bge	zero,r16,82f40 <___vfprintf_internal_r+0x15b0>
   82f18:	d9001f17 	ldw	r4,124(sp)
   82f1c:	1c07883a 	add	r3,r3,r16
   82f20:	44400015 	stw	r17,0(r8)
   82f24:	21000044 	addi	r4,r4,1
   82f28:	44000115 	stw	r16,4(r8)
   82f2c:	d8c02015 	stw	r3,128(sp)
   82f30:	d9001f15 	stw	r4,124(sp)
   82f34:	014001c4 	movi	r5,7
   82f38:	2901fb16 	blt	r5,r4,83728 <___vfprintf_internal_r+0x1d98>
   82f3c:	42000204 	addi	r8,r8,8
   82f40:	8001f716 	blt	r16,zero,83720 <___vfprintf_internal_r+0x1d90>
   82f44:	1421c83a 	sub	r16,r2,r16
   82f48:	043d160e 	bge	zero,r16,823a4 <_gp+0xfff707c0>
   82f4c:	04400404 	movi	r17,16
   82f50:	d8801f17 	ldw	r2,124(sp)
   82f54:	8c3efb0e 	bge	r17,r16,82b44 <_gp+0xfff70f60>
   82f58:	01400274 	movhi	r5,9
   82f5c:	29504184 	addi	r5,r5,16646
   82f60:	d9402c15 	stw	r5,176(sp)
   82f64:	058001c4 	movi	r22,7
   82f68:	dcc02d17 	ldw	r19,180(sp)
   82f6c:	00000306 	br	82f7c <___vfprintf_internal_r+0x15ec>
   82f70:	42000204 	addi	r8,r8,8
   82f74:	843ffc04 	addi	r16,r16,-16
   82f78:	8c3ef50e 	bge	r17,r16,82b50 <_gp+0xfff70f6c>
   82f7c:	18c00404 	addi	r3,r3,16
   82f80:	10800044 	addi	r2,r2,1
   82f84:	45000015 	stw	r20,0(r8)
   82f88:	44400115 	stw	r17,4(r8)
   82f8c:	d8c02015 	stw	r3,128(sp)
   82f90:	d8801f15 	stw	r2,124(sp)
   82f94:	b0bff60e 	bge	r22,r2,82f70 <_gp+0xfff7138c>
   82f98:	d9801e04 	addi	r6,sp,120
   82f9c:	b80b883a 	mov	r5,r23
   82fa0:	9809883a 	mov	r4,r19
   82fa4:	00891700 	call	89170 <__sprint_r>
   82fa8:	103b7d1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   82fac:	d8c02017 	ldw	r3,128(sp)
   82fb0:	d8801f17 	ldw	r2,124(sp)
   82fb4:	da000404 	addi	r8,sp,16
   82fb8:	003fee06 	br	82f74 <_gp+0xfff71390>
   82fbc:	9088703a 	and	r4,r18,r2
   82fc0:	203eab1e 	bne	r4,zero,82a70 <_gp+0xfff70e8c>
   82fc4:	dc401f17 	ldw	r17,124(sp)
   82fc8:	40800115 	stw	r2,4(r8)
   82fcc:	44000015 	stw	r16,0(r8)
   82fd0:	8c400044 	addi	r17,r17,1
   82fd4:	d8c02015 	stw	r3,128(sp)
   82fd8:	dc401f15 	stw	r17,124(sp)
   82fdc:	008001c4 	movi	r2,7
   82fe0:	14400e16 	blt	r2,r17,8301c <___vfprintf_internal_r+0x168c>
   82fe4:	45800204 	addi	r22,r8,8
   82fe8:	003eca06 	br	82b14 <_gp+0xfff70f30>
   82fec:	01000274 	movhi	r4,9
   82ff0:	21104184 	addi	r4,r4,16646
   82ff4:	d9002c15 	stw	r4,176(sp)
   82ff8:	d8802c17 	ldw	r2,176(sp)
   82ffc:	1c07883a 	add	r3,r3,r16
   83000:	8c400044 	addi	r17,r17,1
   83004:	b0800015 	stw	r2,0(r22)
   83008:	b4000115 	stw	r16,4(r22)
   8300c:	d8c02015 	stw	r3,128(sp)
   83010:	dc401f15 	stw	r17,124(sp)
   83014:	008001c4 	movi	r2,7
   83018:	147ebd0e 	bge	r2,r17,82b10 <_gp+0xfff70f2c>
   8301c:	d9002d17 	ldw	r4,180(sp)
   83020:	d9801e04 	addi	r6,sp,120
   83024:	b80b883a 	mov	r5,r23
   83028:	00891700 	call	89170 <__sprint_r>
   8302c:	103b5c1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83030:	d8c02017 	ldw	r3,128(sp)
   83034:	dc401f17 	ldw	r17,124(sp)
   83038:	dd800404 	addi	r22,sp,16
   8303c:	003eb506 	br	82b14 <_gp+0xfff70f30>
   83040:	d9002d17 	ldw	r4,180(sp)
   83044:	d9801e04 	addi	r6,sp,120
   83048:	b80b883a 	mov	r5,r23
   8304c:	00891700 	call	89170 <__sprint_r>
   83050:	103b531e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83054:	d8c02017 	ldw	r3,128(sp)
   83058:	dc401f17 	ldw	r17,124(sp)
   8305c:	da000404 	addi	r8,sp,16
   83060:	003e8d06 	br	82a98 <_gp+0xfff70eb4>
   83064:	d9002d17 	ldw	r4,180(sp)
   83068:	d9801e04 	addi	r6,sp,120
   8306c:	b80b883a 	mov	r5,r23
   83070:	00891700 	call	89170 <__sprint_r>
   83074:	103b4a1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83078:	d8c02017 	ldw	r3,128(sp)
   8307c:	dc401f17 	ldw	r17,124(sp)
   83080:	dd800404 	addi	r22,sp,16
   83084:	003e8f06 	br	82ac4 <_gp+0xfff70ee0>
   83088:	0027883a 	mov	r19,zero
   8308c:	003f4a06 	br	82db8 <_gp+0xfff711d4>
   83090:	d9002d17 	ldw	r4,180(sp)
   83094:	d9801e04 	addi	r6,sp,120
   83098:	b80b883a 	mov	r5,r23
   8309c:	00891700 	call	89170 <__sprint_r>
   830a0:	103b3f1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   830a4:	d8c02017 	ldw	r3,128(sp)
   830a8:	da000404 	addi	r8,sp,16
   830ac:	003c7b06 	br	8229c <_gp+0xfff706b8>
   830b0:	d9402a17 	ldw	r5,168(sp)
   830b4:	04e7c83a 	sub	r19,zero,r19
   830b8:	07000b44 	movi	fp,45
   830bc:	9804c03a 	cmpne	r2,r19,zero
   830c0:	05adc83a 	sub	r22,zero,r22
   830c4:	df002785 	stb	fp,158(sp)
   830c8:	b0adc83a 	sub	r22,r22,r2
   830cc:	28017b16 	blt	r5,zero,836bc <___vfprintf_internal_r+0x1d2c>
   830d0:	00bfdfc4 	movi	r2,-129
   830d4:	90a4703a 	and	r18,r18,r2
   830d8:	003b8906 	br	81f00 <_gp+0xfff7031c>
   830dc:	d9003617 	ldw	r4,216(sp)
   830e0:	d9403817 	ldw	r5,224(sp)
   830e4:	da003d15 	stw	r8,244(sp)
   830e8:	0088d940 	call	88d94 <__fpclassifyd>
   830ec:	da003d17 	ldw	r8,244(sp)
   830f0:	1000f026 	beq	r2,zero,834b4 <___vfprintf_internal_r+0x1b24>
   830f4:	d9002a17 	ldw	r4,168(sp)
   830f8:	05bff7c4 	movi	r22,-33
   830fc:	00bfffc4 	movi	r2,-1
   83100:	8dac703a 	and	r22,r17,r22
   83104:	20820026 	beq	r4,r2,83908 <___vfprintf_internal_r+0x1f78>
   83108:	008011c4 	movi	r2,71
   8310c:	b081f726 	beq	r22,r2,838ec <___vfprintf_internal_r+0x1f5c>
   83110:	d9003817 	ldw	r4,224(sp)
   83114:	90c04014 	ori	r3,r18,256
   83118:	d8c02c15 	stw	r3,176(sp)
   8311c:	20021516 	blt	r4,zero,83974 <___vfprintf_internal_r+0x1fe4>
   83120:	dcc03817 	ldw	r19,224(sp)
   83124:	d8002905 	stb	zero,164(sp)
   83128:	00801984 	movi	r2,102
   8312c:	8881f926 	beq	r17,r2,83914 <___vfprintf_internal_r+0x1f84>
   83130:	00801184 	movi	r2,70
   83134:	88821c26 	beq	r17,r2,839a8 <___vfprintf_internal_r+0x2018>
   83138:	00801144 	movi	r2,69
   8313c:	b081ef26 	beq	r22,r2,838fc <___vfprintf_internal_r+0x1f6c>
   83140:	d8c02a17 	ldw	r3,168(sp)
   83144:	d8802104 	addi	r2,sp,132
   83148:	d8800315 	stw	r2,12(sp)
   8314c:	d9403617 	ldw	r5,216(sp)
   83150:	d8802504 	addi	r2,sp,148
   83154:	d9002d17 	ldw	r4,180(sp)
   83158:	d8800215 	stw	r2,8(sp)
   8315c:	d8802604 	addi	r2,sp,152
   83160:	d8c00015 	stw	r3,0(sp)
   83164:	d8800115 	stw	r2,4(sp)
   83168:	01c00084 	movi	r7,2
   8316c:	980d883a 	mov	r6,r19
   83170:	d8c03c15 	stw	r3,240(sp)
   83174:	da003d15 	stw	r8,244(sp)
   83178:	00840c00 	call	840c0 <_dtoa_r>
   8317c:	1021883a 	mov	r16,r2
   83180:	008019c4 	movi	r2,103
   83184:	d8c03c17 	ldw	r3,240(sp)
   83188:	da003d17 	ldw	r8,244(sp)
   8318c:	88817126 	beq	r17,r2,83754 <___vfprintf_internal_r+0x1dc4>
   83190:	008011c4 	movi	r2,71
   83194:	88829126 	beq	r17,r2,83bdc <___vfprintf_internal_r+0x224c>
   83198:	80f9883a 	add	fp,r16,r3
   8319c:	d9003617 	ldw	r4,216(sp)
   831a0:	000d883a 	mov	r6,zero
   831a4:	000f883a 	mov	r7,zero
   831a8:	980b883a 	mov	r5,r19
   831ac:	da003d15 	stw	r8,244(sp)
   831b0:	008cef40 	call	8cef4 <__eqdf2>
   831b4:	da003d17 	ldw	r8,244(sp)
   831b8:	10018d26 	beq	r2,zero,837f0 <___vfprintf_internal_r+0x1e60>
   831bc:	d8802117 	ldw	r2,132(sp)
   831c0:	1700062e 	bgeu	r2,fp,831dc <___vfprintf_internal_r+0x184c>
   831c4:	01000c04 	movi	r4,48
   831c8:	10c00044 	addi	r3,r2,1
   831cc:	d8c02115 	stw	r3,132(sp)
   831d0:	11000005 	stb	r4,0(r2)
   831d4:	d8802117 	ldw	r2,132(sp)
   831d8:	173ffb36 	bltu	r2,fp,831c8 <_gp+0xfff715e4>
   831dc:	1405c83a 	sub	r2,r2,r16
   831e0:	d8803315 	stw	r2,204(sp)
   831e4:	008011c4 	movi	r2,71
   831e8:	b0817626 	beq	r22,r2,837c4 <___vfprintf_internal_r+0x1e34>
   831ec:	00801944 	movi	r2,101
   831f0:	1442800e 	bge	r2,r17,83bf4 <___vfprintf_internal_r+0x2264>
   831f4:	d8c02617 	ldw	r3,152(sp)
   831f8:	00801984 	movi	r2,102
   831fc:	d8c03215 	stw	r3,200(sp)
   83200:	8881fe26 	beq	r17,r2,839fc <___vfprintf_internal_r+0x206c>
   83204:	d8c03217 	ldw	r3,200(sp)
   83208:	d9003317 	ldw	r4,204(sp)
   8320c:	1901dd16 	blt	r3,r4,83984 <___vfprintf_internal_r+0x1ff4>
   83210:	9480004c 	andi	r18,r18,1
   83214:	90022b1e 	bne	r18,zero,83ac4 <___vfprintf_internal_r+0x2134>
   83218:	1805883a 	mov	r2,r3
   8321c:	18028316 	blt	r3,zero,83c2c <___vfprintf_internal_r+0x229c>
   83220:	d8c03217 	ldw	r3,200(sp)
   83224:	044019c4 	movi	r17,103
   83228:	d8c02b15 	stw	r3,172(sp)
   8322c:	df002907 	ldb	fp,164(sp)
   83230:	e001531e 	bne	fp,zero,83780 <___vfprintf_internal_r+0x1df0>
   83234:	df002783 	ldbu	fp,158(sp)
   83238:	d8802915 	stw	r2,164(sp)
   8323c:	dc802c17 	ldw	r18,176(sp)
   83240:	d8002a15 	stw	zero,168(sp)
   83244:	003baf06 	br	82104 <_gp+0xfff70520>
   83248:	d8c02e17 	ldw	r3,184(sp)
   8324c:	d9002e17 	ldw	r4,184(sp)
   83250:	d9402e17 	ldw	r5,184(sp)
   83254:	18c00017 	ldw	r3,0(r3)
   83258:	21000117 	ldw	r4,4(r4)
   8325c:	29400204 	addi	r5,r5,8
   83260:	d8c03615 	stw	r3,216(sp)
   83264:	d9003815 	stw	r4,224(sp)
   83268:	d9402e15 	stw	r5,184(sp)
   8326c:	003b5006 	br	81fb0 <_gp+0xfff703cc>
   83270:	ac400007 	ldb	r17,0(r21)
   83274:	003a2806 	br	81b18 <_gp+0xfff6ff34>
   83278:	9080100c 	andi	r2,r18,64
   8327c:	1000a826 	beq	r2,zero,83520 <___vfprintf_internal_r+0x1b90>
   83280:	d8c02e17 	ldw	r3,184(sp)
   83284:	002d883a 	mov	r22,zero
   83288:	1cc0000b 	ldhu	r19,0(r3)
   8328c:	18c00104 	addi	r3,r3,4
   83290:	d8c02e15 	stw	r3,184(sp)
   83294:	003caf06 	br	82554 <_gp+0xfff70970>
   83298:	d9002e17 	ldw	r4,184(sp)
   8329c:	d9402a17 	ldw	r5,168(sp)
   832a0:	002d883a 	mov	r22,zero
   832a4:	20800104 	addi	r2,r4,4
   832a8:	24c00017 	ldw	r19,0(r4)
   832ac:	283ebb0e 	bge	r5,zero,82d9c <_gp+0xfff711b8>
   832b0:	003ef106 	br	82e78 <_gp+0xfff71294>
   832b4:	9080040c 	andi	r2,r18,16
   832b8:	1000921e 	bne	r2,zero,83504 <___vfprintf_internal_r+0x1b74>
   832bc:	9480100c 	andi	r18,r18,64
   832c0:	90013926 	beq	r18,zero,837a8 <___vfprintf_internal_r+0x1e18>
   832c4:	d9402e17 	ldw	r5,184(sp)
   832c8:	d8c02f17 	ldw	r3,188(sp)
   832cc:	28800017 	ldw	r2,0(r5)
   832d0:	29400104 	addi	r5,r5,4
   832d4:	d9402e15 	stw	r5,184(sp)
   832d8:	10c0000d 	sth	r3,0(r2)
   832dc:	0039e406 	br	81a70 <_gp+0xfff6fe8c>
   832e0:	9080100c 	andi	r2,r18,64
   832e4:	10008026 	beq	r2,zero,834e8 <___vfprintf_internal_r+0x1b58>
   832e8:	d8802e17 	ldw	r2,184(sp)
   832ec:	14c0000f 	ldh	r19,0(r2)
   832f0:	10800104 	addi	r2,r2,4
   832f4:	d8802e15 	stw	r2,184(sp)
   832f8:	982dd7fa 	srai	r22,r19,31
   832fc:	b005883a 	mov	r2,r22
   83300:	003af706 	br	81ee0 <_gp+0xfff702fc>
   83304:	9080100c 	andi	r2,r18,64
   83308:	d8002785 	stb	zero,158(sp)
   8330c:	10008a1e 	bne	r2,zero,83538 <___vfprintf_internal_r+0x1ba8>
   83310:	d9002e17 	ldw	r4,184(sp)
   83314:	d9402a17 	ldw	r5,168(sp)
   83318:	002d883a 	mov	r22,zero
   8331c:	20800104 	addi	r2,r4,4
   83320:	24c00017 	ldw	r19,0(r4)
   83324:	283e4b0e 	bge	r5,zero,82c54 <_gp+0xfff71070>
   83328:	9d86b03a 	or	r3,r19,r22
   8332c:	d8802e15 	stw	r2,184(sp)
   83330:	183e4c1e 	bne	r3,zero,82c64 <_gp+0xfff71080>
   83334:	0039883a 	mov	fp,zero
   83338:	0005883a 	mov	r2,zero
   8333c:	003d4006 	br	82840 <_gp+0xfff70c5c>
   83340:	01400274 	movhi	r5,9
   83344:	29504184 	addi	r5,r5,16646
   83348:	d9402c15 	stw	r5,176(sp)
   8334c:	d9402c17 	ldw	r5,176(sp)
   83350:	1c47883a 	add	r3,r3,r17
   83354:	10800044 	addi	r2,r2,1
   83358:	41400015 	stw	r5,0(r8)
   8335c:	44400115 	stw	r17,4(r8)
   83360:	d8c02015 	stw	r3,128(sp)
   83364:	d8801f15 	stw	r2,124(sp)
   83368:	010001c4 	movi	r4,7
   8336c:	20bec816 	blt	r4,r2,82e90 <_gp+0xfff712ac>
   83370:	42000204 	addi	r8,r8,8
   83374:	003ecd06 	br	82eac <_gp+0xfff712c8>
   83378:	d9002a17 	ldw	r4,168(sp)
   8337c:	d8002785 	stb	zero,158(sp)
   83380:	203d2d16 	blt	r4,zero,82838 <_gp+0xfff70c54>
   83384:	00bfdfc4 	movi	r2,-129
   83388:	90a4703a 	and	r18,r18,r2
   8338c:	003a6106 	br	81d14 <_gp+0xfff70130>
   83390:	01000274 	movhi	r4,9
   83394:	21104184 	addi	r4,r4,16646
   83398:	d9002c15 	stw	r4,176(sp)
   8339c:	003bea06 	br	82348 <_gp+0xfff70764>
   833a0:	d9002d17 	ldw	r4,180(sp)
   833a4:	d9801e04 	addi	r6,sp,120
   833a8:	b80b883a 	mov	r5,r23
   833ac:	00891700 	call	89170 <__sprint_r>
   833b0:	103a7b1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   833b4:	d8c02017 	ldw	r3,128(sp)
   833b8:	da000404 	addi	r8,sp,16
   833bc:	003d4106 	br	828c4 <_gp+0xfff70ce0>
   833c0:	d8801f17 	ldw	r2,124(sp)
   833c4:	01400274 	movhi	r5,9
   833c8:	01000044 	movi	r4,1
   833cc:	18c00044 	addi	r3,r3,1
   833d0:	10800044 	addi	r2,r2,1
   833d4:	29504104 	addi	r5,r5,16644
   833d8:	41000115 	stw	r4,4(r8)
   833dc:	41400015 	stw	r5,0(r8)
   833e0:	d8c02015 	stw	r3,128(sp)
   833e4:	d8801f15 	stw	r2,124(sp)
   833e8:	010001c4 	movi	r4,7
   833ec:	20805c16 	blt	r4,r2,83560 <___vfprintf_internal_r+0x1bd0>
   833f0:	42000204 	addi	r8,r8,8
   833f4:	8800041e 	bne	r17,zero,83408 <___vfprintf_internal_r+0x1a78>
   833f8:	d8803317 	ldw	r2,204(sp)
   833fc:	1000021e 	bne	r2,zero,83408 <___vfprintf_internal_r+0x1a78>
   83400:	9080004c 	andi	r2,r18,1
   83404:	103be726 	beq	r2,zero,823a4 <_gp+0xfff707c0>
   83408:	d9003717 	ldw	r4,220(sp)
   8340c:	d8801f17 	ldw	r2,124(sp)
   83410:	d9403417 	ldw	r5,208(sp)
   83414:	20c7883a 	add	r3,r4,r3
   83418:	10800044 	addi	r2,r2,1
   8341c:	41000115 	stw	r4,4(r8)
   83420:	41400015 	stw	r5,0(r8)
   83424:	d8c02015 	stw	r3,128(sp)
   83428:	d8801f15 	stw	r2,124(sp)
   8342c:	010001c4 	movi	r4,7
   83430:	20812116 	blt	r4,r2,838b8 <___vfprintf_internal_r+0x1f28>
   83434:	42000204 	addi	r8,r8,8
   83438:	0463c83a 	sub	r17,zero,r17
   8343c:	0440730e 	bge	zero,r17,8360c <___vfprintf_internal_r+0x1c7c>
   83440:	05800404 	movi	r22,16
   83444:	b440860e 	bge	r22,r17,83660 <___vfprintf_internal_r+0x1cd0>
   83448:	01400274 	movhi	r5,9
   8344c:	29504184 	addi	r5,r5,16646
   83450:	d9402c15 	stw	r5,176(sp)
   83454:	070001c4 	movi	fp,7
   83458:	dcc02d17 	ldw	r19,180(sp)
   8345c:	00000306 	br	8346c <___vfprintf_internal_r+0x1adc>
   83460:	42000204 	addi	r8,r8,8
   83464:	8c7ffc04 	addi	r17,r17,-16
   83468:	b440800e 	bge	r22,r17,8366c <___vfprintf_internal_r+0x1cdc>
   8346c:	18c00404 	addi	r3,r3,16
   83470:	10800044 	addi	r2,r2,1
   83474:	45000015 	stw	r20,0(r8)
   83478:	45800115 	stw	r22,4(r8)
   8347c:	d8c02015 	stw	r3,128(sp)
   83480:	d8801f15 	stw	r2,124(sp)
   83484:	e0bff60e 	bge	fp,r2,83460 <_gp+0xfff7187c>
   83488:	d9801e04 	addi	r6,sp,120
   8348c:	b80b883a 	mov	r5,r23
   83490:	9809883a 	mov	r4,r19
   83494:	00891700 	call	89170 <__sprint_r>
   83498:	103a411e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   8349c:	d8c02017 	ldw	r3,128(sp)
   834a0:	d8801f17 	ldw	r2,124(sp)
   834a4:	da000404 	addi	r8,sp,16
   834a8:	003fee06 	br	83464 <_gp+0xfff71880>
   834ac:	00bfffc4 	movi	r2,-1
   834b0:	003a3f06 	br	81db0 <_gp+0xfff701cc>
   834b4:	008011c4 	movi	r2,71
   834b8:	1440b816 	blt	r2,r17,8379c <___vfprintf_internal_r+0x1e0c>
   834bc:	04000274 	movhi	r16,9
   834c0:	84103304 	addi	r16,r16,16588
   834c4:	00c000c4 	movi	r3,3
   834c8:	00bfdfc4 	movi	r2,-129
   834cc:	d8c02915 	stw	r3,164(sp)
   834d0:	90a4703a 	and	r18,r18,r2
   834d4:	df002783 	ldbu	fp,158(sp)
   834d8:	d8c02b15 	stw	r3,172(sp)
   834dc:	d8002a15 	stw	zero,168(sp)
   834e0:	d8003215 	stw	zero,200(sp)
   834e4:	003b0706 	br	82104 <_gp+0xfff70520>
   834e8:	d8c02e17 	ldw	r3,184(sp)
   834ec:	1cc00017 	ldw	r19,0(r3)
   834f0:	18c00104 	addi	r3,r3,4
   834f4:	d8c02e15 	stw	r3,184(sp)
   834f8:	982dd7fa 	srai	r22,r19,31
   834fc:	b005883a 	mov	r2,r22
   83500:	003a7706 	br	81ee0 <_gp+0xfff702fc>
   83504:	d8c02e17 	ldw	r3,184(sp)
   83508:	d9002f17 	ldw	r4,188(sp)
   8350c:	18800017 	ldw	r2,0(r3)
   83510:	18c00104 	addi	r3,r3,4
   83514:	d8c02e15 	stw	r3,184(sp)
   83518:	11000015 	stw	r4,0(r2)
   8351c:	00395406 	br	81a70 <_gp+0xfff6fe8c>
   83520:	d9002e17 	ldw	r4,184(sp)
   83524:	002d883a 	mov	r22,zero
   83528:	24c00017 	ldw	r19,0(r4)
   8352c:	21000104 	addi	r4,r4,4
   83530:	d9002e15 	stw	r4,184(sp)
   83534:	003c0706 	br	82554 <_gp+0xfff70970>
   83538:	d9402e17 	ldw	r5,184(sp)
   8353c:	d8c02a17 	ldw	r3,168(sp)
   83540:	002d883a 	mov	r22,zero
   83544:	28800104 	addi	r2,r5,4
   83548:	2cc0000b 	ldhu	r19,0(r5)
   8354c:	183dc10e 	bge	r3,zero,82c54 <_gp+0xfff71070>
   83550:	003f7506 	br	83328 <_gp+0xfff71744>
   83554:	04000274 	movhi	r16,9
   83558:	84103104 	addi	r16,r16,16580
   8355c:	003aa706 	br	81ffc <_gp+0xfff70418>
   83560:	d9002d17 	ldw	r4,180(sp)
   83564:	d9801e04 	addi	r6,sp,120
   83568:	b80b883a 	mov	r5,r23
   8356c:	00891700 	call	89170 <__sprint_r>
   83570:	103a0b1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83574:	dc402617 	ldw	r17,152(sp)
   83578:	d8c02017 	ldw	r3,128(sp)
   8357c:	da000404 	addi	r8,sp,16
   83580:	003f9c06 	br	833f4 <_gp+0xfff71810>
   83584:	ac400043 	ldbu	r17,1(r21)
   83588:	84000814 	ori	r16,r16,32
   8358c:	ad400044 	addi	r21,r21,1
   83590:	8c403fcc 	andi	r17,r17,255
   83594:	8c40201c 	xori	r17,r17,128
   83598:	8c7fe004 	addi	r17,r17,-128
   8359c:	00395e06 	br	81b18 <_gp+0xfff6ff34>
   835a0:	d8c02e15 	stw	r3,184(sp)
   835a4:	0039883a 	mov	fp,zero
   835a8:	003e3506 	br	82e80 <_gp+0xfff7129c>
   835ac:	d9002d17 	ldw	r4,180(sp)
   835b0:	d9801e04 	addi	r6,sp,120
   835b4:	b80b883a 	mov	r5,r23
   835b8:	00891700 	call	89170 <__sprint_r>
   835bc:	1039f81e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   835c0:	d8c02017 	ldw	r3,128(sp)
   835c4:	da000404 	addi	r8,sp,16
   835c8:	003cd006 	br	8290c <_gp+0xfff70d28>
   835cc:	8009883a 	mov	r4,r16
   835d0:	df003d15 	stw	fp,244(sp)
   835d4:	00818f80 	call	818f8 <strlen>
   835d8:	d8802b15 	stw	r2,172(sp)
   835dc:	da003d17 	ldw	r8,244(sp)
   835e0:	103c200e 	bge	r2,zero,82664 <_gp+0xfff70a80>
   835e4:	0005883a 	mov	r2,zero
   835e8:	003c1e06 	br	82664 <_gp+0xfff70a80>
   835ec:	d9002d17 	ldw	r4,180(sp)
   835f0:	d9801e04 	addi	r6,sp,120
   835f4:	b80b883a 	mov	r5,r23
   835f8:	00891700 	call	89170 <__sprint_r>
   835fc:	1039e81e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83600:	d8c02017 	ldw	r3,128(sp)
   83604:	d8801f17 	ldw	r2,124(sp)
   83608:	da000404 	addi	r8,sp,16
   8360c:	d9403317 	ldw	r5,204(sp)
   83610:	10800044 	addi	r2,r2,1
   83614:	44000015 	stw	r16,0(r8)
   83618:	28c7883a 	add	r3,r5,r3
   8361c:	003b5b06 	br	8238c <_gp+0xfff707a8>
   83620:	01000274 	movhi	r4,9
   83624:	21104584 	addi	r4,r4,16662
   83628:	d9003515 	stw	r4,212(sp)
   8362c:	003af206 	br	821f8 <_gp+0xfff70614>
   83630:	013fffc4 	movi	r4,-1
   83634:	003a0806 	br	81e58 <_gp+0xfff70274>
   83638:	0023883a 	mov	r17,zero
   8363c:	003d9d06 	br	82cb4 <_gp+0xfff710d0>
   83640:	d9002d17 	ldw	r4,180(sp)
   83644:	d9801e04 	addi	r6,sp,120
   83648:	b80b883a 	mov	r5,r23
   8364c:	00891700 	call	89170 <__sprint_r>
   83650:	1039d31e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   83654:	d8c02017 	ldw	r3,128(sp)
   83658:	da000404 	addi	r8,sp,16
   8365c:	003d9406 	br	82cb0 <_gp+0xfff710cc>
   83660:	01000274 	movhi	r4,9
   83664:	21104184 	addi	r4,r4,16646
   83668:	d9002c15 	stw	r4,176(sp)
   8366c:	d9002c17 	ldw	r4,176(sp)
   83670:	1c47883a 	add	r3,r3,r17
   83674:	10800044 	addi	r2,r2,1
   83678:	41000015 	stw	r4,0(r8)
   8367c:	44400115 	stw	r17,4(r8)
   83680:	d8c02015 	stw	r3,128(sp)
   83684:	d8801f15 	stw	r2,124(sp)
   83688:	010001c4 	movi	r4,7
   8368c:	20bfd716 	blt	r4,r2,835ec <_gp+0xfff71a08>
   83690:	42000204 	addi	r8,r8,8
   83694:	003fdd06 	br	8360c <_gp+0xfff71a28>
   83698:	d9002d17 	ldw	r4,180(sp)
   8369c:	d9801e04 	addi	r6,sp,120
   836a0:	b80b883a 	mov	r5,r23
   836a4:	00891700 	call	89170 <__sprint_r>
   836a8:	1039bd1e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   836ac:	d8802617 	ldw	r2,152(sp)
   836b0:	d8c02017 	ldw	r3,128(sp)
   836b4:	da000404 	addi	r8,sp,16
   836b8:	003e1006 	br	82efc <_gp+0xfff71318>
   836bc:	00800044 	movi	r2,1
   836c0:	10803fcc 	andi	r2,r2,255
   836c4:	00c00044 	movi	r3,1
   836c8:	10fa0d26 	beq	r2,r3,81f00 <_gp+0xfff7031c>
   836cc:	00c00084 	movi	r3,2
   836d0:	10fbaf26 	beq	r2,r3,82590 <_gp+0xfff709ac>
   836d4:	003a6d06 	br	8208c <_gp+0xfff704a8>
   836d8:	01000274 	movhi	r4,9
   836dc:	21104584 	addi	r4,r4,16662
   836e0:	d9003515 	stw	r4,212(sp)
   836e4:	003b5406 	br	82438 <_gp+0xfff70854>
   836e8:	d8802a17 	ldw	r2,168(sp)
   836ec:	00c00184 	movi	r3,6
   836f0:	1880012e 	bgeu	r3,r2,836f8 <___vfprintf_internal_r+0x1d68>
   836f4:	1805883a 	mov	r2,r3
   836f8:	d8802b15 	stw	r2,172(sp)
   836fc:	1000ef16 	blt	r2,zero,83abc <___vfprintf_internal_r+0x212c>
   83700:	04000274 	movhi	r16,9
   83704:	d8802915 	stw	r2,164(sp)
   83708:	dcc02e15 	stw	r19,184(sp)
   8370c:	d8002a15 	stw	zero,168(sp)
   83710:	d8003215 	stw	zero,200(sp)
   83714:	84103f04 	addi	r16,r16,16636
   83718:	0039883a 	mov	fp,zero
   8371c:	003a8006 	br	82120 <_gp+0xfff7053c>
   83720:	0021883a 	mov	r16,zero
   83724:	003e0706 	br	82f44 <_gp+0xfff71360>
   83728:	d9002d17 	ldw	r4,180(sp)
   8372c:	d9801e04 	addi	r6,sp,120
   83730:	b80b883a 	mov	r5,r23
   83734:	00891700 	call	89170 <__sprint_r>
   83738:	1039991e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   8373c:	d8802617 	ldw	r2,152(sp)
   83740:	d9403317 	ldw	r5,204(sp)
   83744:	d8c02017 	ldw	r3,128(sp)
   83748:	da000404 	addi	r8,sp,16
   8374c:	2885c83a 	sub	r2,r5,r2
   83750:	003dfb06 	br	82f40 <_gp+0xfff7135c>
   83754:	9080004c 	andi	r2,r18,1
   83758:	103e8f1e 	bne	r2,zero,83198 <_gp+0xfff715b4>
   8375c:	d8802117 	ldw	r2,132(sp)
   83760:	003e9e06 	br	831dc <_gp+0xfff715f8>
   83764:	1025883a 	mov	r18,r2
   83768:	0039883a 	mov	fp,zero
   8376c:	00800084 	movi	r2,2
   83770:	003fd306 	br	836c0 <_gp+0xfff71adc>
   83774:	07000b44 	movi	fp,45
   83778:	df002785 	stb	fp,158(sp)
   8377c:	003a1b06 	br	81fec <_gp+0xfff70408>
   83780:	00c00b44 	movi	r3,45
   83784:	d8c02785 	stb	r3,158(sp)
   83788:	d8802915 	stw	r2,164(sp)
   8378c:	dc802c17 	ldw	r18,176(sp)
   83790:	d8002a15 	stw	zero,168(sp)
   83794:	07000b44 	movi	fp,45
   83798:	003a5e06 	br	82114 <_gp+0xfff70530>
   8379c:	04000274 	movhi	r16,9
   837a0:	84103404 	addi	r16,r16,16592
   837a4:	003f4706 	br	834c4 <_gp+0xfff718e0>
   837a8:	d9002e17 	ldw	r4,184(sp)
   837ac:	d9402f17 	ldw	r5,188(sp)
   837b0:	20800017 	ldw	r2,0(r4)
   837b4:	21000104 	addi	r4,r4,4
   837b8:	d9002e15 	stw	r4,184(sp)
   837bc:	11400015 	stw	r5,0(r2)
   837c0:	0038ab06 	br	81a70 <_gp+0xfff6fe8c>
   837c4:	dd802617 	ldw	r22,152(sp)
   837c8:	00bfff44 	movi	r2,-3
   837cc:	b0801c16 	blt	r22,r2,83840 <___vfprintf_internal_r+0x1eb0>
   837d0:	d9402a17 	ldw	r5,168(sp)
   837d4:	2d801a16 	blt	r5,r22,83840 <___vfprintf_internal_r+0x1eb0>
   837d8:	dd803215 	stw	r22,200(sp)
   837dc:	003e8906 	br	83204 <_gp+0xfff71620>
   837e0:	01000274 	movhi	r4,9
   837e4:	21104184 	addi	r4,r4,16646
   837e8:	d9002c15 	stw	r4,176(sp)
   837ec:	003c9106 	br	82a34 <_gp+0xfff70e50>
   837f0:	e005883a 	mov	r2,fp
   837f4:	003e7906 	br	831dc <_gp+0xfff715f8>
   837f8:	d9002a17 	ldw	r4,168(sp)
   837fc:	df002783 	ldbu	fp,158(sp)
   83800:	dcc02e15 	stw	r19,184(sp)
   83804:	d9002915 	stw	r4,164(sp)
   83808:	d9002b15 	stw	r4,172(sp)
   8380c:	d8002a15 	stw	zero,168(sp)
   83810:	d8003215 	stw	zero,200(sp)
   83814:	003a3b06 	br	82104 <_gp+0xfff70520>
   83818:	9080004c 	andi	r2,r18,1
   8381c:	0039883a 	mov	fp,zero
   83820:	10000426 	beq	r2,zero,83834 <___vfprintf_internal_r+0x1ea4>
   83824:	00800c04 	movi	r2,48
   83828:	dc001dc4 	addi	r16,sp,119
   8382c:	d8801dc5 	stb	r2,119(sp)
   83830:	003b6406 	br	825c4 <_gp+0xfff709e0>
   83834:	d8002b15 	stw	zero,172(sp)
   83838:	dc001e04 	addi	r16,sp,120
   8383c:	003a2b06 	br	820ec <_gp+0xfff70508>
   83840:	8c7fff84 	addi	r17,r17,-2
   83844:	b5bfffc4 	addi	r22,r22,-1
   83848:	dd802615 	stw	r22,152(sp)
   8384c:	dc4022c5 	stb	r17,139(sp)
   83850:	b000bf16 	blt	r22,zero,83b50 <___vfprintf_internal_r+0x21c0>
   83854:	00800ac4 	movi	r2,43
   83858:	d8802305 	stb	r2,140(sp)
   8385c:	00800244 	movi	r2,9
   83860:	15807016 	blt	r2,r22,83a24 <___vfprintf_internal_r+0x2094>
   83864:	00800c04 	movi	r2,48
   83868:	b5800c04 	addi	r22,r22,48
   8386c:	d8802345 	stb	r2,141(sp)
   83870:	dd802385 	stb	r22,142(sp)
   83874:	d88023c4 	addi	r2,sp,143
   83878:	df0022c4 	addi	fp,sp,139
   8387c:	d8c03317 	ldw	r3,204(sp)
   83880:	1739c83a 	sub	fp,r2,fp
   83884:	d9003317 	ldw	r4,204(sp)
   83888:	e0c7883a 	add	r3,fp,r3
   8388c:	df003a15 	stw	fp,232(sp)
   83890:	d8c02b15 	stw	r3,172(sp)
   83894:	00800044 	movi	r2,1
   83898:	1100b30e 	bge	r2,r4,83b68 <___vfprintf_internal_r+0x21d8>
   8389c:	d8c02b17 	ldw	r3,172(sp)
   838a0:	18c00044 	addi	r3,r3,1
   838a4:	d8c02b15 	stw	r3,172(sp)
   838a8:	1805883a 	mov	r2,r3
   838ac:	1800ac16 	blt	r3,zero,83b60 <___vfprintf_internal_r+0x21d0>
   838b0:	d8003215 	stw	zero,200(sp)
   838b4:	003e5d06 	br	8322c <_gp+0xfff71648>
   838b8:	d9002d17 	ldw	r4,180(sp)
   838bc:	d9801e04 	addi	r6,sp,120
   838c0:	b80b883a 	mov	r5,r23
   838c4:	00891700 	call	89170 <__sprint_r>
   838c8:	1039351e 	bne	r2,zero,81da0 <_gp+0xfff701bc>
   838cc:	dc402617 	ldw	r17,152(sp)
   838d0:	d8c02017 	ldw	r3,128(sp)
   838d4:	d8801f17 	ldw	r2,124(sp)
   838d8:	da000404 	addi	r8,sp,16
   838dc:	003ed606 	br	83438 <_gp+0xfff71854>
   838e0:	182b883a 	mov	r21,r3
   838e4:	d8002a15 	stw	zero,168(sp)
   838e8:	00388c06 	br	81b1c <_gp+0xfff6ff38>
   838ec:	d8802a17 	ldw	r2,168(sp)
   838f0:	103e071e 	bne	r2,zero,83110 <_gp+0xfff7152c>
   838f4:	dc002a15 	stw	r16,168(sp)
   838f8:	003e0506 	br	83110 <_gp+0xfff7152c>
   838fc:	d9002a17 	ldw	r4,168(sp)
   83900:	20c00044 	addi	r3,r4,1
   83904:	003e0f06 	br	83144 <_gp+0xfff71560>
   83908:	01400184 	movi	r5,6
   8390c:	d9402a15 	stw	r5,168(sp)
   83910:	003dff06 	br	83110 <_gp+0xfff7152c>
   83914:	d8802104 	addi	r2,sp,132
   83918:	d8800315 	stw	r2,12(sp)
   8391c:	d8802504 	addi	r2,sp,148
   83920:	d8800215 	stw	r2,8(sp)
   83924:	d8802604 	addi	r2,sp,152
   83928:	d8800115 	stw	r2,4(sp)
   8392c:	d8802a17 	ldw	r2,168(sp)
   83930:	d9403617 	ldw	r5,216(sp)
   83934:	d9002d17 	ldw	r4,180(sp)
   83938:	d8800015 	stw	r2,0(sp)
   8393c:	01c000c4 	movi	r7,3
   83940:	980d883a 	mov	r6,r19
   83944:	da003d15 	stw	r8,244(sp)
   83948:	00840c00 	call	840c0 <_dtoa_r>
   8394c:	d8c02a17 	ldw	r3,168(sp)
   83950:	da003d17 	ldw	r8,244(sp)
   83954:	1021883a 	mov	r16,r2
   83958:	10f9883a 	add	fp,r2,r3
   8395c:	81000007 	ldb	r4,0(r16)
   83960:	00800c04 	movi	r2,48
   83964:	20805e26 	beq	r4,r2,83ae0 <___vfprintf_internal_r+0x2150>
   83968:	d8c02617 	ldw	r3,152(sp)
   8396c:	e0f9883a 	add	fp,fp,r3
   83970:	003e0a06 	br	8319c <_gp+0xfff715b8>
   83974:	00c00b44 	movi	r3,45
   83978:	24e0003c 	xorhi	r19,r4,32768
   8397c:	d8c02905 	stb	r3,164(sp)
   83980:	003de906 	br	83128 <_gp+0xfff71544>
   83984:	d8c03217 	ldw	r3,200(sp)
   83988:	00c07a0e 	bge	zero,r3,83b74 <___vfprintf_internal_r+0x21e4>
   8398c:	00800044 	movi	r2,1
   83990:	d9003317 	ldw	r4,204(sp)
   83994:	1105883a 	add	r2,r2,r4
   83998:	d8802b15 	stw	r2,172(sp)
   8399c:	10004e16 	blt	r2,zero,83ad8 <___vfprintf_internal_r+0x2148>
   839a0:	044019c4 	movi	r17,103
   839a4:	003e2106 	br	8322c <_gp+0xfff71648>
   839a8:	d9002a17 	ldw	r4,168(sp)
   839ac:	d8802104 	addi	r2,sp,132
   839b0:	d8800315 	stw	r2,12(sp)
   839b4:	d9000015 	stw	r4,0(sp)
   839b8:	d8802504 	addi	r2,sp,148
   839bc:	d9403617 	ldw	r5,216(sp)
   839c0:	d9002d17 	ldw	r4,180(sp)
   839c4:	d8800215 	stw	r2,8(sp)
   839c8:	d8802604 	addi	r2,sp,152
   839cc:	d8800115 	stw	r2,4(sp)
   839d0:	01c000c4 	movi	r7,3
   839d4:	980d883a 	mov	r6,r19
   839d8:	da003d15 	stw	r8,244(sp)
   839dc:	00840c00 	call	840c0 <_dtoa_r>
   839e0:	d8c02a17 	ldw	r3,168(sp)
   839e4:	da003d17 	ldw	r8,244(sp)
   839e8:	1021883a 	mov	r16,r2
   839ec:	00801184 	movi	r2,70
   839f0:	80f9883a 	add	fp,r16,r3
   839f4:	88bfd926 	beq	r17,r2,8395c <_gp+0xfff71d78>
   839f8:	003de806 	br	8319c <_gp+0xfff715b8>
   839fc:	d9002a17 	ldw	r4,168(sp)
   83a00:	00c04d0e 	bge	zero,r3,83b38 <___vfprintf_internal_r+0x21a8>
   83a04:	2000441e 	bne	r4,zero,83b18 <___vfprintf_internal_r+0x2188>
   83a08:	9480004c 	andi	r18,r18,1
   83a0c:	9000421e 	bne	r18,zero,83b18 <___vfprintf_internal_r+0x2188>
   83a10:	1805883a 	mov	r2,r3
   83a14:	18006f16 	blt	r3,zero,83bd4 <___vfprintf_internal_r+0x2244>
   83a18:	d8c03217 	ldw	r3,200(sp)
   83a1c:	d8c02b15 	stw	r3,172(sp)
   83a20:	003e0206 	br	8322c <_gp+0xfff71648>
   83a24:	df0022c4 	addi	fp,sp,139
   83a28:	dc002a15 	stw	r16,168(sp)
   83a2c:	4027883a 	mov	r19,r8
   83a30:	e021883a 	mov	r16,fp
   83a34:	b009883a 	mov	r4,r22
   83a38:	01400284 	movi	r5,10
   83a3c:	0080acc0 	call	80acc <__modsi3>
   83a40:	10800c04 	addi	r2,r2,48
   83a44:	843fffc4 	addi	r16,r16,-1
   83a48:	b009883a 	mov	r4,r22
   83a4c:	01400284 	movi	r5,10
   83a50:	80800005 	stb	r2,0(r16)
   83a54:	0080a480 	call	80a48 <__divsi3>
   83a58:	102d883a 	mov	r22,r2
   83a5c:	00800244 	movi	r2,9
   83a60:	15bff416 	blt	r2,r22,83a34 <_gp+0xfff71e50>
   83a64:	9811883a 	mov	r8,r19
   83a68:	b0800c04 	addi	r2,r22,48
   83a6c:	8027883a 	mov	r19,r16
   83a70:	997fffc4 	addi	r5,r19,-1
   83a74:	98bfffc5 	stb	r2,-1(r19)
   83a78:	dc002a17 	ldw	r16,168(sp)
   83a7c:	2f006d2e 	bgeu	r5,fp,83c34 <___vfprintf_internal_r+0x22a4>
   83a80:	d9c02384 	addi	r7,sp,142
   83a84:	3ccfc83a 	sub	r7,r7,r19
   83a88:	d9002344 	addi	r4,sp,141
   83a8c:	e1cf883a 	add	r7,fp,r7
   83a90:	00000106 	br	83a98 <___vfprintf_internal_r+0x2108>
   83a94:	28800003 	ldbu	r2,0(r5)
   83a98:	20800005 	stb	r2,0(r4)
   83a9c:	21000044 	addi	r4,r4,1
   83aa0:	29400044 	addi	r5,r5,1
   83aa4:	393ffb1e 	bne	r7,r4,83a94 <_gp+0xfff71eb0>
   83aa8:	d8802304 	addi	r2,sp,140
   83aac:	14c5c83a 	sub	r2,r2,r19
   83ab0:	d8c02344 	addi	r3,sp,141
   83ab4:	1885883a 	add	r2,r3,r2
   83ab8:	003f7006 	br	8387c <_gp+0xfff71c98>
   83abc:	0005883a 	mov	r2,zero
   83ac0:	003f0f06 	br	83700 <_gp+0xfff71b1c>
   83ac4:	d8c03217 	ldw	r3,200(sp)
   83ac8:	18c00044 	addi	r3,r3,1
   83acc:	d8c02b15 	stw	r3,172(sp)
   83ad0:	1805883a 	mov	r2,r3
   83ad4:	183fb20e 	bge	r3,zero,839a0 <_gp+0xfff71dbc>
   83ad8:	0005883a 	mov	r2,zero
   83adc:	003fb006 	br	839a0 <_gp+0xfff71dbc>
   83ae0:	d9003617 	ldw	r4,216(sp)
   83ae4:	000d883a 	mov	r6,zero
   83ae8:	000f883a 	mov	r7,zero
   83aec:	980b883a 	mov	r5,r19
   83af0:	d8c03c15 	stw	r3,240(sp)
   83af4:	da003d15 	stw	r8,244(sp)
   83af8:	008cef40 	call	8cef4 <__eqdf2>
   83afc:	d8c03c17 	ldw	r3,240(sp)
   83b00:	da003d17 	ldw	r8,244(sp)
   83b04:	103f9826 	beq	r2,zero,83968 <_gp+0xfff71d84>
   83b08:	00800044 	movi	r2,1
   83b0c:	10c7c83a 	sub	r3,r2,r3
   83b10:	d8c02615 	stw	r3,152(sp)
   83b14:	003f9506 	br	8396c <_gp+0xfff71d88>
   83b18:	d9002a17 	ldw	r4,168(sp)
   83b1c:	d8c03217 	ldw	r3,200(sp)
   83b20:	20800044 	addi	r2,r4,1
   83b24:	1885883a 	add	r2,r3,r2
   83b28:	d8802b15 	stw	r2,172(sp)
   83b2c:	103dbf0e 	bge	r2,zero,8322c <_gp+0xfff71648>
   83b30:	0005883a 	mov	r2,zero
   83b34:	003dbd06 	br	8322c <_gp+0xfff71648>
   83b38:	2000201e 	bne	r4,zero,83bbc <___vfprintf_internal_r+0x222c>
   83b3c:	9480004c 	andi	r18,r18,1
   83b40:	90001e1e 	bne	r18,zero,83bbc <___vfprintf_internal_r+0x222c>
   83b44:	00800044 	movi	r2,1
   83b48:	d8802b15 	stw	r2,172(sp)
   83b4c:	003db706 	br	8322c <_gp+0xfff71648>
   83b50:	00800b44 	movi	r2,45
   83b54:	05adc83a 	sub	r22,zero,r22
   83b58:	d8802305 	stb	r2,140(sp)
   83b5c:	003f3f06 	br	8385c <_gp+0xfff71c78>
   83b60:	0005883a 	mov	r2,zero
   83b64:	003f5206 	br	838b0 <_gp+0xfff71ccc>
   83b68:	90a4703a 	and	r18,r18,r2
   83b6c:	903f4e26 	beq	r18,zero,838a8 <_gp+0xfff71cc4>
   83b70:	003f4a06 	br	8389c <_gp+0xfff71cb8>
   83b74:	00800084 	movi	r2,2
   83b78:	10c5c83a 	sub	r2,r2,r3
   83b7c:	003f8406 	br	83990 <_gp+0xfff71dac>
   83b80:	d9402e17 	ldw	r5,184(sp)
   83b84:	d9002e17 	ldw	r4,184(sp)
   83b88:	ac400043 	ldbu	r17,1(r21)
   83b8c:	29400017 	ldw	r5,0(r5)
   83b90:	20800104 	addi	r2,r4,4
   83b94:	d8802e15 	stw	r2,184(sp)
   83b98:	d9402a15 	stw	r5,168(sp)
   83b9c:	182b883a 	mov	r21,r3
   83ba0:	283e7b0e 	bge	r5,zero,83590 <_gp+0xfff719ac>
   83ba4:	8c403fcc 	andi	r17,r17,255
   83ba8:	017fffc4 	movi	r5,-1
   83bac:	8c40201c 	xori	r17,r17,128
   83bb0:	d9402a15 	stw	r5,168(sp)
   83bb4:	8c7fe004 	addi	r17,r17,-128
   83bb8:	0037d706 	br	81b18 <_gp+0xfff6ff34>
   83bbc:	d8c02a17 	ldw	r3,168(sp)
   83bc0:	18c00084 	addi	r3,r3,2
   83bc4:	d8c02b15 	stw	r3,172(sp)
   83bc8:	1805883a 	mov	r2,r3
   83bcc:	183d970e 	bge	r3,zero,8322c <_gp+0xfff71648>
   83bd0:	003fd706 	br	83b30 <_gp+0xfff71f4c>
   83bd4:	0005883a 	mov	r2,zero
   83bd8:	003f8f06 	br	83a18 <_gp+0xfff71e34>
   83bdc:	9080004c 	andi	r2,r18,1
   83be0:	103f821e 	bne	r2,zero,839ec <_gp+0xfff71e08>
   83be4:	d8802117 	ldw	r2,132(sp)
   83be8:	1405c83a 	sub	r2,r2,r16
   83bec:	d8803315 	stw	r2,204(sp)
   83bf0:	b47ef426 	beq	r22,r17,837c4 <_gp+0xfff71be0>
   83bf4:	dd802617 	ldw	r22,152(sp)
   83bf8:	003f1206 	br	83844 <_gp+0xfff71c60>
   83bfc:	d8c02b03 	ldbu	r3,172(sp)
   83c00:	d8c02785 	stb	r3,158(sp)
   83c04:	0038df06 	br	81f84 <_gp+0xfff703a0>
   83c08:	d8c02b03 	ldbu	r3,172(sp)
   83c0c:	d8c02785 	stb	r3,158(sp)
   83c10:	0038aa06 	br	81ebc <_gp+0xfff702d8>
   83c14:	d8c02b03 	ldbu	r3,172(sp)
   83c18:	d8c02785 	stb	r3,158(sp)
   83c1c:	003a4306 	br	8252c <_gp+0xfff70948>
   83c20:	d8c02b03 	ldbu	r3,172(sp)
   83c24:	d8c02785 	stb	r3,158(sp)
   83c28:	003af506 	br	82800 <_gp+0xfff70c1c>
   83c2c:	0005883a 	mov	r2,zero
   83c30:	003d7b06 	br	83220 <_gp+0xfff7163c>
   83c34:	d8802344 	addi	r2,sp,141
   83c38:	003f1006 	br	8387c <_gp+0xfff71c98>
   83c3c:	d8c02b03 	ldbu	r3,172(sp)
   83c40:	d8c02785 	stb	r3,158(sp)
   83c44:	0038fd06 	br	8203c <_gp+0xfff70458>
   83c48:	d8c02b03 	ldbu	r3,172(sp)
   83c4c:	d8c02785 	stb	r3,158(sp)
   83c50:	003a9706 	br	826b0 <_gp+0xfff70acc>
   83c54:	d8c02b03 	ldbu	r3,172(sp)
   83c58:	d8c02785 	stb	r3,158(sp)
   83c5c:	003a1806 	br	824c0 <_gp+0xfff708dc>
   83c60:	d8c02b03 	ldbu	r3,172(sp)
   83c64:	d8c02785 	stb	r3,158(sp)
   83c68:	003abe06 	br	82764 <_gp+0xfff70b80>

00083c6c <__vfprintf_internal>:
   83c6c:	00800474 	movhi	r2,17
   83c70:	10a6fa04 	addi	r2,r2,-25624
   83c74:	300f883a 	mov	r7,r6
   83c78:	280d883a 	mov	r6,r5
   83c7c:	200b883a 	mov	r5,r4
   83c80:	11000017 	ldw	r4,0(r2)
   83c84:	00819901 	jmpi	81990 <___vfprintf_internal_r>

00083c88 <__sbprintf>:
   83c88:	2880030b 	ldhu	r2,12(r5)
   83c8c:	2ac01917 	ldw	r11,100(r5)
   83c90:	2a80038b 	ldhu	r10,14(r5)
   83c94:	2a400717 	ldw	r9,28(r5)
   83c98:	2a000917 	ldw	r8,36(r5)
   83c9c:	defee204 	addi	sp,sp,-1144
   83ca0:	00c10004 	movi	r3,1024
   83ca4:	dc011a15 	stw	r16,1128(sp)
   83ca8:	10bfff4c 	andi	r2,r2,65533
   83cac:	2821883a 	mov	r16,r5
   83cb0:	d8cb883a 	add	r5,sp,r3
   83cb4:	dc811c15 	stw	r18,1136(sp)
   83cb8:	dc411b15 	stw	r17,1132(sp)
   83cbc:	dfc11d15 	stw	ra,1140(sp)
   83cc0:	2025883a 	mov	r18,r4
   83cc4:	d881030d 	sth	r2,1036(sp)
   83cc8:	dac11915 	stw	r11,1124(sp)
   83ccc:	da81038d 	sth	r10,1038(sp)
   83cd0:	da410715 	stw	r9,1052(sp)
   83cd4:	da010915 	stw	r8,1060(sp)
   83cd8:	dec10015 	stw	sp,1024(sp)
   83cdc:	dec10415 	stw	sp,1040(sp)
   83ce0:	d8c10215 	stw	r3,1032(sp)
   83ce4:	d8c10515 	stw	r3,1044(sp)
   83ce8:	d8010615 	stw	zero,1048(sp)
   83cec:	00819900 	call	81990 <___vfprintf_internal_r>
   83cf0:	1023883a 	mov	r17,r2
   83cf4:	10000416 	blt	r2,zero,83d08 <__sbprintf+0x80>
   83cf8:	d9410004 	addi	r5,sp,1024
   83cfc:	9009883a 	mov	r4,r18
   83d00:	00859640 	call	85964 <_fflush_r>
   83d04:	10000d1e 	bne	r2,zero,83d3c <__sbprintf+0xb4>
   83d08:	d881030b 	ldhu	r2,1036(sp)
   83d0c:	1080100c 	andi	r2,r2,64
   83d10:	10000326 	beq	r2,zero,83d20 <__sbprintf+0x98>
   83d14:	8080030b 	ldhu	r2,12(r16)
   83d18:	10801014 	ori	r2,r2,64
   83d1c:	8080030d 	sth	r2,12(r16)
   83d20:	8805883a 	mov	r2,r17
   83d24:	dfc11d17 	ldw	ra,1140(sp)
   83d28:	dc811c17 	ldw	r18,1136(sp)
   83d2c:	dc411b17 	ldw	r17,1132(sp)
   83d30:	dc011a17 	ldw	r16,1128(sp)
   83d34:	dec11e04 	addi	sp,sp,1144
   83d38:	f800283a 	ret
   83d3c:	047fffc4 	movi	r17,-1
   83d40:	003ff106 	br	83d08 <_gp+0xfff72124>

00083d44 <__swsetup_r>:
   83d44:	00800474 	movhi	r2,17
   83d48:	defffd04 	addi	sp,sp,-12
   83d4c:	10a6fa04 	addi	r2,r2,-25624
   83d50:	dc400115 	stw	r17,4(sp)
   83d54:	2023883a 	mov	r17,r4
   83d58:	11000017 	ldw	r4,0(r2)
   83d5c:	dc000015 	stw	r16,0(sp)
   83d60:	dfc00215 	stw	ra,8(sp)
   83d64:	2821883a 	mov	r16,r5
   83d68:	20000226 	beq	r4,zero,83d74 <__swsetup_r+0x30>
   83d6c:	20800e17 	ldw	r2,56(r4)
   83d70:	10003126 	beq	r2,zero,83e38 <__swsetup_r+0xf4>
   83d74:	8080030b 	ldhu	r2,12(r16)
   83d78:	10c0020c 	andi	r3,r2,8
   83d7c:	1009883a 	mov	r4,r2
   83d80:	18000f26 	beq	r3,zero,83dc0 <__swsetup_r+0x7c>
   83d84:	80c00417 	ldw	r3,16(r16)
   83d88:	18001526 	beq	r3,zero,83de0 <__swsetup_r+0x9c>
   83d8c:	1100004c 	andi	r4,r2,1
   83d90:	20001c1e 	bne	r4,zero,83e04 <__swsetup_r+0xc0>
   83d94:	1080008c 	andi	r2,r2,2
   83d98:	1000291e 	bne	r2,zero,83e40 <__swsetup_r+0xfc>
   83d9c:	80800517 	ldw	r2,20(r16)
   83da0:	80800215 	stw	r2,8(r16)
   83da4:	18001c26 	beq	r3,zero,83e18 <__swsetup_r+0xd4>
   83da8:	0005883a 	mov	r2,zero
   83dac:	dfc00217 	ldw	ra,8(sp)
   83db0:	dc400117 	ldw	r17,4(sp)
   83db4:	dc000017 	ldw	r16,0(sp)
   83db8:	dec00304 	addi	sp,sp,12
   83dbc:	f800283a 	ret
   83dc0:	2080040c 	andi	r2,r4,16
   83dc4:	10002e26 	beq	r2,zero,83e80 <__swsetup_r+0x13c>
   83dc8:	2080010c 	andi	r2,r4,4
   83dcc:	10001e1e 	bne	r2,zero,83e48 <__swsetup_r+0x104>
   83dd0:	80c00417 	ldw	r3,16(r16)
   83dd4:	20800214 	ori	r2,r4,8
   83dd8:	8080030d 	sth	r2,12(r16)
   83ddc:	183feb1e 	bne	r3,zero,83d8c <_gp+0xfff721a8>
   83de0:	1100a00c 	andi	r4,r2,640
   83de4:	01408004 	movi	r5,512
   83de8:	217fe826 	beq	r4,r5,83d8c <_gp+0xfff721a8>
   83dec:	800b883a 	mov	r5,r16
   83df0:	8809883a 	mov	r4,r17
   83df4:	00869000 	call	86900 <__smakebuf_r>
   83df8:	8080030b 	ldhu	r2,12(r16)
   83dfc:	80c00417 	ldw	r3,16(r16)
   83e00:	003fe206 	br	83d8c <_gp+0xfff721a8>
   83e04:	80800517 	ldw	r2,20(r16)
   83e08:	80000215 	stw	zero,8(r16)
   83e0c:	0085c83a 	sub	r2,zero,r2
   83e10:	80800615 	stw	r2,24(r16)
   83e14:	183fe41e 	bne	r3,zero,83da8 <_gp+0xfff721c4>
   83e18:	80c0030b 	ldhu	r3,12(r16)
   83e1c:	0005883a 	mov	r2,zero
   83e20:	1900200c 	andi	r4,r3,128
   83e24:	203fe126 	beq	r4,zero,83dac <_gp+0xfff721c8>
   83e28:	18c01014 	ori	r3,r3,64
   83e2c:	80c0030d 	sth	r3,12(r16)
   83e30:	00bfffc4 	movi	r2,-1
   83e34:	003fdd06 	br	83dac <_gp+0xfff721c8>
   83e38:	0085d500 	call	85d50 <__sinit>
   83e3c:	003fcd06 	br	83d74 <_gp+0xfff72190>
   83e40:	0005883a 	mov	r2,zero
   83e44:	003fd606 	br	83da0 <_gp+0xfff721bc>
   83e48:	81400c17 	ldw	r5,48(r16)
   83e4c:	28000626 	beq	r5,zero,83e68 <__swsetup_r+0x124>
   83e50:	80801004 	addi	r2,r16,64
   83e54:	28800326 	beq	r5,r2,83e64 <__swsetup_r+0x120>
   83e58:	8809883a 	mov	r4,r17
   83e5c:	0085ec40 	call	85ec4 <_free_r>
   83e60:	8100030b 	ldhu	r4,12(r16)
   83e64:	80000c15 	stw	zero,48(r16)
   83e68:	80c00417 	ldw	r3,16(r16)
   83e6c:	00bff6c4 	movi	r2,-37
   83e70:	1108703a 	and	r4,r2,r4
   83e74:	80000115 	stw	zero,4(r16)
   83e78:	80c00015 	stw	r3,0(r16)
   83e7c:	003fd506 	br	83dd4 <_gp+0xfff721f0>
   83e80:	00800244 	movi	r2,9
   83e84:	88800015 	stw	r2,0(r17)
   83e88:	20801014 	ori	r2,r4,64
   83e8c:	8080030d 	sth	r2,12(r16)
   83e90:	00bfffc4 	movi	r2,-1
   83e94:	003fc506 	br	83dac <_gp+0xfff721c8>

00083e98 <quorem>:
   83e98:	defff204 	addi	sp,sp,-56
   83e9c:	ddc00b15 	stw	r23,44(sp)
   83ea0:	20800417 	ldw	r2,16(r4)
   83ea4:	2dc00417 	ldw	r23,16(r5)
   83ea8:	dfc00d15 	stw	ra,52(sp)
   83eac:	df000c15 	stw	fp,48(sp)
   83eb0:	dd800a15 	stw	r22,40(sp)
   83eb4:	dd400915 	stw	r21,36(sp)
   83eb8:	dd000815 	stw	r20,32(sp)
   83ebc:	dcc00715 	stw	r19,28(sp)
   83ec0:	dc800615 	stw	r18,24(sp)
   83ec4:	dc400515 	stw	r17,20(sp)
   83ec8:	dc000415 	stw	r16,16(sp)
   83ecc:	15c07a16 	blt	r2,r23,840b8 <quorem+0x220>
   83ed0:	bdffffc4 	addi	r23,r23,-1
   83ed4:	bde9883a 	add	r20,r23,r23
   83ed8:	28c00504 	addi	r3,r5,20
   83edc:	a529883a 	add	r20,r20,r20
   83ee0:	1d39883a 	add	fp,r3,r20
   83ee4:	24c00504 	addi	r19,r4,20
   83ee8:	d9400215 	stw	r5,8(sp)
   83eec:	9d29883a 	add	r20,r19,r20
   83ef0:	e1400017 	ldw	r5,0(fp)
   83ef4:	d9000015 	stw	r4,0(sp)
   83ef8:	a1000017 	ldw	r4,0(r20)
   83efc:	29400044 	addi	r5,r5,1
   83f00:	d8c00115 	stw	r3,4(sp)
   83f04:	dd000315 	stw	r20,12(sp)
   83f08:	0080b400 	call	80b40 <__udivsi3>
   83f0c:	1025883a 	mov	r18,r2
   83f10:	10003026 	beq	r2,zero,83fd4 <quorem+0x13c>
   83f14:	dc400117 	ldw	r17,4(sp)
   83f18:	9829883a 	mov	r20,r19
   83f1c:	002d883a 	mov	r22,zero
   83f20:	0021883a 	mov	r16,zero
   83f24:	8d400017 	ldw	r21,0(r17)
   83f28:	900b883a 	mov	r5,r18
   83f2c:	8c400104 	addi	r17,r17,4
   83f30:	a93fffcc 	andi	r4,r21,65535
   83f34:	00817900 	call	81790 <__mulsi3>
   83f38:	a808d43a 	srli	r4,r21,16
   83f3c:	900b883a 	mov	r5,r18
   83f40:	15ad883a 	add	r22,r2,r22
   83f44:	00817900 	call	81790 <__mulsi3>
   83f48:	a1000017 	ldw	r4,0(r20)
   83f4c:	b00cd43a 	srli	r6,r22,16
   83f50:	b0ffffcc 	andi	r3,r22,65535
   83f54:	217fffcc 	andi	r5,r4,65535
   83f58:	2c21883a 	add	r16,r5,r16
   83f5c:	80c7c83a 	sub	r3,r16,r3
   83f60:	2008d43a 	srli	r4,r4,16
   83f64:	1185883a 	add	r2,r2,r6
   83f68:	1821d43a 	srai	r16,r3,16
   83f6c:	117fffcc 	andi	r5,r2,65535
   83f70:	2149c83a 	sub	r4,r4,r5
   83f74:	2421883a 	add	r16,r4,r16
   83f78:	8008943a 	slli	r4,r16,16
   83f7c:	18ffffcc 	andi	r3,r3,65535
   83f80:	102cd43a 	srli	r22,r2,16
   83f84:	20c8b03a 	or	r4,r4,r3
   83f88:	a1000015 	stw	r4,0(r20)
   83f8c:	8021d43a 	srai	r16,r16,16
   83f90:	a5000104 	addi	r20,r20,4
   83f94:	e47fe32e 	bgeu	fp,r17,83f24 <_gp+0xfff72340>
   83f98:	d8c00317 	ldw	r3,12(sp)
   83f9c:	18800017 	ldw	r2,0(r3)
   83fa0:	10000c1e 	bne	r2,zero,83fd4 <quorem+0x13c>
   83fa4:	18bfff04 	addi	r2,r3,-4
   83fa8:	9880082e 	bgeu	r19,r2,83fcc <quorem+0x134>
   83fac:	18ffff17 	ldw	r3,-4(r3)
   83fb0:	18000326 	beq	r3,zero,83fc0 <quorem+0x128>
   83fb4:	00000506 	br	83fcc <quorem+0x134>
   83fb8:	10c00017 	ldw	r3,0(r2)
   83fbc:	1800031e 	bne	r3,zero,83fcc <quorem+0x134>
   83fc0:	10bfff04 	addi	r2,r2,-4
   83fc4:	bdffffc4 	addi	r23,r23,-1
   83fc8:	98bffb36 	bltu	r19,r2,83fb8 <_gp+0xfff723d4>
   83fcc:	d8c00017 	ldw	r3,0(sp)
   83fd0:	1dc00415 	stw	r23,16(r3)
   83fd4:	d9400217 	ldw	r5,8(sp)
   83fd8:	d9000017 	ldw	r4,0(sp)
   83fdc:	00880fc0 	call	880fc <__mcmp>
   83fe0:	10002816 	blt	r2,zero,84084 <quorem+0x1ec>
   83fe4:	dc400117 	ldw	r17,4(sp)
   83fe8:	94800044 	addi	r18,r18,1
   83fec:	980d883a 	mov	r6,r19
   83ff0:	0007883a 	mov	r3,zero
   83ff4:	31000017 	ldw	r4,0(r6)
   83ff8:	89400017 	ldw	r5,0(r17)
   83ffc:	31800104 	addi	r6,r6,4
   84000:	20bfffcc 	andi	r2,r4,65535
   84004:	10c7883a 	add	r3,r2,r3
   84008:	28bfffcc 	andi	r2,r5,65535
   8400c:	1885c83a 	sub	r2,r3,r2
   84010:	280ad43a 	srli	r5,r5,16
   84014:	2008d43a 	srli	r4,r4,16
   84018:	1007d43a 	srai	r3,r2,16
   8401c:	10bfffcc 	andi	r2,r2,65535
   84020:	2149c83a 	sub	r4,r4,r5
   84024:	20c9883a 	add	r4,r4,r3
   84028:	200a943a 	slli	r5,r4,16
   8402c:	8c400104 	addi	r17,r17,4
   84030:	2007d43a 	srai	r3,r4,16
   84034:	2884b03a 	or	r2,r5,r2
   84038:	30bfff15 	stw	r2,-4(r6)
   8403c:	e47fed2e 	bgeu	fp,r17,83ff4 <_gp+0xfff72410>
   84040:	bdc5883a 	add	r2,r23,r23
   84044:	1085883a 	add	r2,r2,r2
   84048:	9887883a 	add	r3,r19,r2
   8404c:	18800017 	ldw	r2,0(r3)
   84050:	10000c1e 	bne	r2,zero,84084 <quorem+0x1ec>
   84054:	18bfff04 	addi	r2,r3,-4
   84058:	9880082e 	bgeu	r19,r2,8407c <quorem+0x1e4>
   8405c:	18ffff17 	ldw	r3,-4(r3)
   84060:	18000326 	beq	r3,zero,84070 <quorem+0x1d8>
   84064:	00000506 	br	8407c <quorem+0x1e4>
   84068:	10c00017 	ldw	r3,0(r2)
   8406c:	1800031e 	bne	r3,zero,8407c <quorem+0x1e4>
   84070:	10bfff04 	addi	r2,r2,-4
   84074:	bdffffc4 	addi	r23,r23,-1
   84078:	98bffb36 	bltu	r19,r2,84068 <_gp+0xfff72484>
   8407c:	d8c00017 	ldw	r3,0(sp)
   84080:	1dc00415 	stw	r23,16(r3)
   84084:	9005883a 	mov	r2,r18
   84088:	dfc00d17 	ldw	ra,52(sp)
   8408c:	df000c17 	ldw	fp,48(sp)
   84090:	ddc00b17 	ldw	r23,44(sp)
   84094:	dd800a17 	ldw	r22,40(sp)
   84098:	dd400917 	ldw	r21,36(sp)
   8409c:	dd000817 	ldw	r20,32(sp)
   840a0:	dcc00717 	ldw	r19,28(sp)
   840a4:	dc800617 	ldw	r18,24(sp)
   840a8:	dc400517 	ldw	r17,20(sp)
   840ac:	dc000417 	ldw	r16,16(sp)
   840b0:	dec00e04 	addi	sp,sp,56
   840b4:	f800283a 	ret
   840b8:	0005883a 	mov	r2,zero
   840bc:	003ff206 	br	84088 <_gp+0xfff724a4>

000840c0 <_dtoa_r>:
   840c0:	20801017 	ldw	r2,64(r4)
   840c4:	deffde04 	addi	sp,sp,-136
   840c8:	df002015 	stw	fp,128(sp)
   840cc:	dcc01b15 	stw	r19,108(sp)
   840d0:	dc801a15 	stw	r18,104(sp)
   840d4:	dc401915 	stw	r17,100(sp)
   840d8:	dc001815 	stw	r16,96(sp)
   840dc:	dfc02115 	stw	ra,132(sp)
   840e0:	ddc01f15 	stw	r23,124(sp)
   840e4:	dd801e15 	stw	r22,120(sp)
   840e8:	dd401d15 	stw	r21,116(sp)
   840ec:	dd001c15 	stw	r20,112(sp)
   840f0:	d9c00315 	stw	r7,12(sp)
   840f4:	2039883a 	mov	fp,r4
   840f8:	3023883a 	mov	r17,r6
   840fc:	2825883a 	mov	r18,r5
   84100:	dc002417 	ldw	r16,144(sp)
   84104:	3027883a 	mov	r19,r6
   84108:	10000826 	beq	r2,zero,8412c <_dtoa_r+0x6c>
   8410c:	21801117 	ldw	r6,68(r4)
   84110:	00c00044 	movi	r3,1
   84114:	100b883a 	mov	r5,r2
   84118:	1986983a 	sll	r3,r3,r6
   8411c:	11800115 	stw	r6,4(r2)
   84120:	10c00215 	stw	r3,8(r2)
   84124:	00878200 	call	87820 <_Bfree>
   84128:	e0001015 	stw	zero,64(fp)
   8412c:	88002e16 	blt	r17,zero,841e8 <_dtoa_r+0x128>
   84130:	80000015 	stw	zero,0(r16)
   84134:	889ffc2c 	andhi	r2,r17,32752
   84138:	00dffc34 	movhi	r3,32752
   8413c:	10c01c26 	beq	r2,r3,841b0 <_dtoa_r+0xf0>
   84140:	000d883a 	mov	r6,zero
   84144:	000f883a 	mov	r7,zero
   84148:	9009883a 	mov	r4,r18
   8414c:	980b883a 	mov	r5,r19
   84150:	008cef40 	call	8cef4 <__eqdf2>
   84154:	10002b1e 	bne	r2,zero,84204 <_dtoa_r+0x144>
   84158:	d9c02317 	ldw	r7,140(sp)
   8415c:	00800044 	movi	r2,1
   84160:	38800015 	stw	r2,0(r7)
   84164:	d8802517 	ldw	r2,148(sp)
   84168:	10019e26 	beq	r2,zero,847e4 <_dtoa_r+0x724>
   8416c:	d8c02517 	ldw	r3,148(sp)
   84170:	00800274 	movhi	r2,9
   84174:	10904144 	addi	r2,r2,16645
   84178:	18800015 	stw	r2,0(r3)
   8417c:	10bfffc4 	addi	r2,r2,-1
   84180:	dfc02117 	ldw	ra,132(sp)
   84184:	df002017 	ldw	fp,128(sp)
   84188:	ddc01f17 	ldw	r23,124(sp)
   8418c:	dd801e17 	ldw	r22,120(sp)
   84190:	dd401d17 	ldw	r21,116(sp)
   84194:	dd001c17 	ldw	r20,112(sp)
   84198:	dcc01b17 	ldw	r19,108(sp)
   8419c:	dc801a17 	ldw	r18,104(sp)
   841a0:	dc401917 	ldw	r17,100(sp)
   841a4:	dc001817 	ldw	r16,96(sp)
   841a8:	dec02204 	addi	sp,sp,136
   841ac:	f800283a 	ret
   841b0:	d8c02317 	ldw	r3,140(sp)
   841b4:	0089c3c4 	movi	r2,9999
   841b8:	18800015 	stw	r2,0(r3)
   841bc:	90017726 	beq	r18,zero,8479c <_dtoa_r+0x6dc>
   841c0:	00800274 	movhi	r2,9
   841c4:	10904d04 	addi	r2,r2,16692
   841c8:	d9002517 	ldw	r4,148(sp)
   841cc:	203fec26 	beq	r4,zero,84180 <_gp+0xfff7259c>
   841d0:	10c000c7 	ldb	r3,3(r2)
   841d4:	1801781e 	bne	r3,zero,847b8 <_dtoa_r+0x6f8>
   841d8:	10c000c4 	addi	r3,r2,3
   841dc:	d9802517 	ldw	r6,148(sp)
   841e0:	30c00015 	stw	r3,0(r6)
   841e4:	003fe606 	br	84180 <_gp+0xfff7259c>
   841e8:	04e00034 	movhi	r19,32768
   841ec:	9cffffc4 	addi	r19,r19,-1
   841f0:	00800044 	movi	r2,1
   841f4:	8ce6703a 	and	r19,r17,r19
   841f8:	80800015 	stw	r2,0(r16)
   841fc:	9823883a 	mov	r17,r19
   84200:	003fcc06 	br	84134 <_gp+0xfff72550>
   84204:	d8800204 	addi	r2,sp,8
   84208:	d8800015 	stw	r2,0(sp)
   8420c:	d9c00104 	addi	r7,sp,4
   84210:	900b883a 	mov	r5,r18
   84214:	980d883a 	mov	r6,r19
   84218:	e009883a 	mov	r4,fp
   8421c:	8820d53a 	srli	r16,r17,20
   84220:	00884c80 	call	884c8 <__d2b>
   84224:	d8800915 	stw	r2,36(sp)
   84228:	8001651e 	bne	r16,zero,847c0 <_dtoa_r+0x700>
   8422c:	dd800217 	ldw	r22,8(sp)
   84230:	dc000117 	ldw	r16,4(sp)
   84234:	00800804 	movi	r2,32
   84238:	b421883a 	add	r16,r22,r16
   8423c:	80c10c84 	addi	r3,r16,1074
   84240:	10c2d10e 	bge	r2,r3,84d88 <_dtoa_r+0xcc8>
   84244:	00801004 	movi	r2,64
   84248:	81010484 	addi	r4,r16,1042
   8424c:	10c7c83a 	sub	r3,r2,r3
   84250:	9108d83a 	srl	r4,r18,r4
   84254:	88e2983a 	sll	r17,r17,r3
   84258:	2448b03a 	or	r4,r4,r17
   8425c:	008e4100 	call	8e410 <__floatunsidf>
   84260:	017f8434 	movhi	r5,65040
   84264:	01800044 	movi	r6,1
   84268:	1009883a 	mov	r4,r2
   8426c:	194b883a 	add	r5,r3,r5
   84270:	843fffc4 	addi	r16,r16,-1
   84274:	d9801115 	stw	r6,68(sp)
   84278:	000d883a 	mov	r6,zero
   8427c:	01cffe34 	movhi	r7,16376
   84280:	008d9b80 	call	8d9b8 <__subdf3>
   84284:	0198dbf4 	movhi	r6,25455
   84288:	01cff4f4 	movhi	r7,16339
   8428c:	3190d844 	addi	r6,r6,17249
   84290:	39e1e9c4 	addi	r7,r7,-30809
   84294:	1009883a 	mov	r4,r2
   84298:	180b883a 	mov	r5,r3
   8429c:	008d14c0 	call	8d14c <__muldf3>
   842a0:	01a2d874 	movhi	r6,35681
   842a4:	01cff1f4 	movhi	r7,16327
   842a8:	31b22cc4 	addi	r6,r6,-14157
   842ac:	39e28a04 	addi	r7,r7,-30168
   842b0:	180b883a 	mov	r5,r3
   842b4:	1009883a 	mov	r4,r2
   842b8:	008bc780 	call	8bc78 <__adddf3>
   842bc:	8009883a 	mov	r4,r16
   842c0:	1029883a 	mov	r20,r2
   842c4:	1823883a 	mov	r17,r3
   842c8:	008e3340 	call	8e334 <__floatsidf>
   842cc:	019427f4 	movhi	r6,20639
   842d0:	01cff4f4 	movhi	r7,16339
   842d4:	319e7ec4 	addi	r6,r6,31227
   842d8:	39d104c4 	addi	r7,r7,17427
   842dc:	1009883a 	mov	r4,r2
   842e0:	180b883a 	mov	r5,r3
   842e4:	008d14c0 	call	8d14c <__muldf3>
   842e8:	100d883a 	mov	r6,r2
   842ec:	180f883a 	mov	r7,r3
   842f0:	a009883a 	mov	r4,r20
   842f4:	880b883a 	mov	r5,r17
   842f8:	008bc780 	call	8bc78 <__adddf3>
   842fc:	1009883a 	mov	r4,r2
   84300:	180b883a 	mov	r5,r3
   84304:	1029883a 	mov	r20,r2
   84308:	1823883a 	mov	r17,r3
   8430c:	008e2b40 	call	8e2b4 <__fixdfsi>
   84310:	000d883a 	mov	r6,zero
   84314:	000f883a 	mov	r7,zero
   84318:	a009883a 	mov	r4,r20
   8431c:	880b883a 	mov	r5,r17
   84320:	d8800515 	stw	r2,20(sp)
   84324:	008d0580 	call	8d058 <__ledf2>
   84328:	10028716 	blt	r2,zero,84d48 <_dtoa_r+0xc88>
   8432c:	d8c00517 	ldw	r3,20(sp)
   84330:	00800584 	movi	r2,22
   84334:	10c27536 	bltu	r2,r3,84d0c <_dtoa_r+0xc4c>
   84338:	180490fa 	slli	r2,r3,3
   8433c:	00c00274 	movhi	r3,9
   84340:	18d06904 	addi	r3,r3,16804
   84344:	1885883a 	add	r2,r3,r2
   84348:	11000017 	ldw	r4,0(r2)
   8434c:	11400117 	ldw	r5,4(r2)
   84350:	900d883a 	mov	r6,r18
   84354:	980f883a 	mov	r7,r19
   84358:	008cf7c0 	call	8cf7c <__gedf2>
   8435c:	00828d0e 	bge	zero,r2,84d94 <_dtoa_r+0xcd4>
   84360:	d9000517 	ldw	r4,20(sp)
   84364:	d8000e15 	stw	zero,56(sp)
   84368:	213fffc4 	addi	r4,r4,-1
   8436c:	d9000515 	stw	r4,20(sp)
   84370:	b42dc83a 	sub	r22,r22,r16
   84374:	b5bfffc4 	addi	r22,r22,-1
   84378:	b0026f16 	blt	r22,zero,84d38 <_dtoa_r+0xc78>
   8437c:	d8000815 	stw	zero,32(sp)
   84380:	d9c00517 	ldw	r7,20(sp)
   84384:	38026416 	blt	r7,zero,84d18 <_dtoa_r+0xc58>
   84388:	b1ed883a 	add	r22,r22,r7
   8438c:	d9c00d15 	stw	r7,52(sp)
   84390:	d8000a15 	stw	zero,40(sp)
   84394:	d9800317 	ldw	r6,12(sp)
   84398:	00800244 	movi	r2,9
   8439c:	11811436 	bltu	r2,r6,847f0 <_dtoa_r+0x730>
   843a0:	00800144 	movi	r2,5
   843a4:	1184e10e 	bge	r2,r6,8572c <_dtoa_r+0x166c>
   843a8:	31bfff04 	addi	r6,r6,-4
   843ac:	d9800315 	stw	r6,12(sp)
   843b0:	0023883a 	mov	r17,zero
   843b4:	d9800317 	ldw	r6,12(sp)
   843b8:	008000c4 	movi	r2,3
   843bc:	30836726 	beq	r6,r2,8515c <_dtoa_r+0x109c>
   843c0:	1183410e 	bge	r2,r6,850c8 <_dtoa_r+0x1008>
   843c4:	d9c00317 	ldw	r7,12(sp)
   843c8:	00800104 	movi	r2,4
   843cc:	38827c26 	beq	r7,r2,84dc0 <_dtoa_r+0xd00>
   843d0:	00800144 	movi	r2,5
   843d4:	3884c41e 	bne	r7,r2,856e8 <_dtoa_r+0x1628>
   843d8:	00800044 	movi	r2,1
   843dc:	d8800b15 	stw	r2,44(sp)
   843e0:	d8c00517 	ldw	r3,20(sp)
   843e4:	d9002217 	ldw	r4,136(sp)
   843e8:	1907883a 	add	r3,r3,r4
   843ec:	19800044 	addi	r6,r3,1
   843f0:	d8c00c15 	stw	r3,48(sp)
   843f4:	d9800615 	stw	r6,24(sp)
   843f8:	0183a40e 	bge	zero,r6,8528c <_dtoa_r+0x11cc>
   843fc:	d9800617 	ldw	r6,24(sp)
   84400:	3021883a 	mov	r16,r6
   84404:	e0001115 	stw	zero,68(fp)
   84408:	008005c4 	movi	r2,23
   8440c:	1184c92e 	bgeu	r2,r6,85734 <_dtoa_r+0x1674>
   84410:	00c00044 	movi	r3,1
   84414:	00800104 	movi	r2,4
   84418:	1085883a 	add	r2,r2,r2
   8441c:	11000504 	addi	r4,r2,20
   84420:	180b883a 	mov	r5,r3
   84424:	18c00044 	addi	r3,r3,1
   84428:	313ffb2e 	bgeu	r6,r4,84418 <_gp+0xfff72834>
   8442c:	e1401115 	stw	r5,68(fp)
   84430:	e009883a 	mov	r4,fp
   84434:	00877780 	call	87778 <_Balloc>
   84438:	d8800715 	stw	r2,28(sp)
   8443c:	e0801015 	stw	r2,64(fp)
   84440:	00800384 	movi	r2,14
   84444:	1400f736 	bltu	r2,r16,84824 <_dtoa_r+0x764>
   84448:	8800f626 	beq	r17,zero,84824 <_dtoa_r+0x764>
   8444c:	d9c00517 	ldw	r7,20(sp)
   84450:	01c39a0e 	bge	zero,r7,852bc <_dtoa_r+0x11fc>
   84454:	388003cc 	andi	r2,r7,15
   84458:	100490fa 	slli	r2,r2,3
   8445c:	382bd13a 	srai	r21,r7,4
   84460:	00c00274 	movhi	r3,9
   84464:	18d06904 	addi	r3,r3,16804
   84468:	1885883a 	add	r2,r3,r2
   8446c:	a8c0040c 	andi	r3,r21,16
   84470:	12400017 	ldw	r9,0(r2)
   84474:	12000117 	ldw	r8,4(r2)
   84478:	18037926 	beq	r3,zero,85260 <_dtoa_r+0x11a0>
   8447c:	00800274 	movhi	r2,9
   84480:	10905f04 	addi	r2,r2,16764
   84484:	11800817 	ldw	r6,32(r2)
   84488:	11c00917 	ldw	r7,36(r2)
   8448c:	9009883a 	mov	r4,r18
   84490:	980b883a 	mov	r5,r19
   84494:	da001715 	stw	r8,92(sp)
   84498:	da401615 	stw	r9,88(sp)
   8449c:	008c5240 	call	8c524 <__divdf3>
   844a0:	da001717 	ldw	r8,92(sp)
   844a4:	da401617 	ldw	r9,88(sp)
   844a8:	ad4003cc 	andi	r21,r21,15
   844ac:	040000c4 	movi	r16,3
   844b0:	1023883a 	mov	r17,r2
   844b4:	1829883a 	mov	r20,r3
   844b8:	a8001126 	beq	r21,zero,84500 <_dtoa_r+0x440>
   844bc:	05c00274 	movhi	r23,9
   844c0:	bdd05f04 	addi	r23,r23,16764
   844c4:	4805883a 	mov	r2,r9
   844c8:	4007883a 	mov	r3,r8
   844cc:	a980004c 	andi	r6,r21,1
   844d0:	1009883a 	mov	r4,r2
   844d4:	a82bd07a 	srai	r21,r21,1
   844d8:	180b883a 	mov	r5,r3
   844dc:	30000426 	beq	r6,zero,844f0 <_dtoa_r+0x430>
   844e0:	b9800017 	ldw	r6,0(r23)
   844e4:	b9c00117 	ldw	r7,4(r23)
   844e8:	84000044 	addi	r16,r16,1
   844ec:	008d14c0 	call	8d14c <__muldf3>
   844f0:	bdc00204 	addi	r23,r23,8
   844f4:	a83ff51e 	bne	r21,zero,844cc <_gp+0xfff728e8>
   844f8:	1013883a 	mov	r9,r2
   844fc:	1811883a 	mov	r8,r3
   84500:	480d883a 	mov	r6,r9
   84504:	400f883a 	mov	r7,r8
   84508:	8809883a 	mov	r4,r17
   8450c:	a00b883a 	mov	r5,r20
   84510:	008c5240 	call	8c524 <__divdf3>
   84514:	d8800f15 	stw	r2,60(sp)
   84518:	d8c01015 	stw	r3,64(sp)
   8451c:	d8c00e17 	ldw	r3,56(sp)
   84520:	18000626 	beq	r3,zero,8453c <_dtoa_r+0x47c>
   84524:	d9000f17 	ldw	r4,60(sp)
   84528:	d9401017 	ldw	r5,64(sp)
   8452c:	000d883a 	mov	r6,zero
   84530:	01cffc34 	movhi	r7,16368
   84534:	008d0580 	call	8d058 <__ledf2>
   84538:	10040b16 	blt	r2,zero,85568 <_dtoa_r+0x14a8>
   8453c:	8009883a 	mov	r4,r16
   84540:	008e3340 	call	8e334 <__floatsidf>
   84544:	d9800f17 	ldw	r6,60(sp)
   84548:	d9c01017 	ldw	r7,64(sp)
   8454c:	1009883a 	mov	r4,r2
   84550:	180b883a 	mov	r5,r3
   84554:	008d14c0 	call	8d14c <__muldf3>
   84558:	000d883a 	mov	r6,zero
   8455c:	01d00734 	movhi	r7,16412
   84560:	1009883a 	mov	r4,r2
   84564:	180b883a 	mov	r5,r3
   84568:	008bc780 	call	8bc78 <__adddf3>
   8456c:	1021883a 	mov	r16,r2
   84570:	d8800617 	ldw	r2,24(sp)
   84574:	047f3034 	movhi	r17,64704
   84578:	1c63883a 	add	r17,r3,r17
   8457c:	10031826 	beq	r2,zero,851e0 <_dtoa_r+0x1120>
   84580:	d8c00517 	ldw	r3,20(sp)
   84584:	db000617 	ldw	r12,24(sp)
   84588:	d8c01315 	stw	r3,76(sp)
   8458c:	d9000b17 	ldw	r4,44(sp)
   84590:	20038f26 	beq	r4,zero,853d0 <_dtoa_r+0x1310>
   84594:	60bfffc4 	addi	r2,r12,-1
   84598:	100490fa 	slli	r2,r2,3
   8459c:	00c00274 	movhi	r3,9
   845a0:	18d06904 	addi	r3,r3,16804
   845a4:	1885883a 	add	r2,r3,r2
   845a8:	11800017 	ldw	r6,0(r2)
   845ac:	11c00117 	ldw	r7,4(r2)
   845b0:	d8800717 	ldw	r2,28(sp)
   845b4:	0009883a 	mov	r4,zero
   845b8:	014ff834 	movhi	r5,16352
   845bc:	db001615 	stw	r12,88(sp)
   845c0:	15c00044 	addi	r23,r2,1
   845c4:	008c5240 	call	8c524 <__divdf3>
   845c8:	800d883a 	mov	r6,r16
   845cc:	880f883a 	mov	r7,r17
   845d0:	1009883a 	mov	r4,r2
   845d4:	180b883a 	mov	r5,r3
   845d8:	008d9b80 	call	8d9b8 <__subdf3>
   845dc:	d9401017 	ldw	r5,64(sp)
   845e0:	d9000f17 	ldw	r4,60(sp)
   845e4:	102b883a 	mov	r21,r2
   845e8:	d8c01215 	stw	r3,72(sp)
   845ec:	008e2b40 	call	8e2b4 <__fixdfsi>
   845f0:	1009883a 	mov	r4,r2
   845f4:	1029883a 	mov	r20,r2
   845f8:	008e3340 	call	8e334 <__floatsidf>
   845fc:	d9000f17 	ldw	r4,60(sp)
   84600:	d9401017 	ldw	r5,64(sp)
   84604:	100d883a 	mov	r6,r2
   84608:	180f883a 	mov	r7,r3
   8460c:	008d9b80 	call	8d9b8 <__subdf3>
   84610:	1823883a 	mov	r17,r3
   84614:	d8c00717 	ldw	r3,28(sp)
   84618:	d9401217 	ldw	r5,72(sp)
   8461c:	a2000c04 	addi	r8,r20,48
   84620:	1021883a 	mov	r16,r2
   84624:	1a000005 	stb	r8,0(r3)
   84628:	800d883a 	mov	r6,r16
   8462c:	880f883a 	mov	r7,r17
   84630:	a809883a 	mov	r4,r21
   84634:	4029883a 	mov	r20,r8
   84638:	008cf7c0 	call	8cf7c <__gedf2>
   8463c:	00841d16 	blt	zero,r2,856b4 <_dtoa_r+0x15f4>
   84640:	800d883a 	mov	r6,r16
   84644:	880f883a 	mov	r7,r17
   84648:	0009883a 	mov	r4,zero
   8464c:	014ffc34 	movhi	r5,16368
   84650:	008d9b80 	call	8d9b8 <__subdf3>
   84654:	d9401217 	ldw	r5,72(sp)
   84658:	100d883a 	mov	r6,r2
   8465c:	180f883a 	mov	r7,r3
   84660:	a809883a 	mov	r4,r21
   84664:	008cf7c0 	call	8cf7c <__gedf2>
   84668:	db001617 	ldw	r12,88(sp)
   8466c:	00840e16 	blt	zero,r2,856a8 <_dtoa_r+0x15e8>
   84670:	00800044 	movi	r2,1
   84674:	13006b0e 	bge	r2,r12,84824 <_dtoa_r+0x764>
   84678:	d9000717 	ldw	r4,28(sp)
   8467c:	dd800f15 	stw	r22,60(sp)
   84680:	dcc01015 	stw	r19,64(sp)
   84684:	2319883a 	add	r12,r4,r12
   84688:	dcc01217 	ldw	r19,72(sp)
   8468c:	602d883a 	mov	r22,r12
   84690:	dc801215 	stw	r18,72(sp)
   84694:	b825883a 	mov	r18,r23
   84698:	00000906 	br	846c0 <_dtoa_r+0x600>
   8469c:	008d9b80 	call	8d9b8 <__subdf3>
   846a0:	a80d883a 	mov	r6,r21
   846a4:	980f883a 	mov	r7,r19
   846a8:	1009883a 	mov	r4,r2
   846ac:	180b883a 	mov	r5,r3
   846b0:	008d0580 	call	8d058 <__ledf2>
   846b4:	1003e816 	blt	r2,zero,85658 <_dtoa_r+0x1598>
   846b8:	b825883a 	mov	r18,r23
   846bc:	bd83e926 	beq	r23,r22,85664 <_dtoa_r+0x15a4>
   846c0:	a809883a 	mov	r4,r21
   846c4:	980b883a 	mov	r5,r19
   846c8:	000d883a 	mov	r6,zero
   846cc:	01d00934 	movhi	r7,16420
   846d0:	008d14c0 	call	8d14c <__muldf3>
   846d4:	000d883a 	mov	r6,zero
   846d8:	01d00934 	movhi	r7,16420
   846dc:	8009883a 	mov	r4,r16
   846e0:	880b883a 	mov	r5,r17
   846e4:	102b883a 	mov	r21,r2
   846e8:	1827883a 	mov	r19,r3
   846ec:	008d14c0 	call	8d14c <__muldf3>
   846f0:	180b883a 	mov	r5,r3
   846f4:	1009883a 	mov	r4,r2
   846f8:	1821883a 	mov	r16,r3
   846fc:	1023883a 	mov	r17,r2
   84700:	008e2b40 	call	8e2b4 <__fixdfsi>
   84704:	1009883a 	mov	r4,r2
   84708:	1029883a 	mov	r20,r2
   8470c:	008e3340 	call	8e334 <__floatsidf>
   84710:	8809883a 	mov	r4,r17
   84714:	800b883a 	mov	r5,r16
   84718:	100d883a 	mov	r6,r2
   8471c:	180f883a 	mov	r7,r3
   84720:	008d9b80 	call	8d9b8 <__subdf3>
   84724:	a5000c04 	addi	r20,r20,48
   84728:	a80d883a 	mov	r6,r21
   8472c:	980f883a 	mov	r7,r19
   84730:	1009883a 	mov	r4,r2
   84734:	180b883a 	mov	r5,r3
   84738:	95000005 	stb	r20,0(r18)
   8473c:	1021883a 	mov	r16,r2
   84740:	1823883a 	mov	r17,r3
   84744:	008d0580 	call	8d058 <__ledf2>
   84748:	bdc00044 	addi	r23,r23,1
   8474c:	800d883a 	mov	r6,r16
   84750:	880f883a 	mov	r7,r17
   84754:	0009883a 	mov	r4,zero
   84758:	014ffc34 	movhi	r5,16368
   8475c:	103fcf0e 	bge	r2,zero,8469c <_gp+0xfff72ab8>
   84760:	d8c01317 	ldw	r3,76(sp)
   84764:	d8c00515 	stw	r3,20(sp)
   84768:	d9400917 	ldw	r5,36(sp)
   8476c:	e009883a 	mov	r4,fp
   84770:	00878200 	call	87820 <_Bfree>
   84774:	d9000517 	ldw	r4,20(sp)
   84778:	d9802317 	ldw	r6,140(sp)
   8477c:	d9c02517 	ldw	r7,148(sp)
   84780:	b8000005 	stb	zero,0(r23)
   84784:	20800044 	addi	r2,r4,1
   84788:	30800015 	stw	r2,0(r6)
   8478c:	3802aa26 	beq	r7,zero,85238 <_dtoa_r+0x1178>
   84790:	3dc00015 	stw	r23,0(r7)
   84794:	d8800717 	ldw	r2,28(sp)
   84798:	003e7906 	br	84180 <_gp+0xfff7259c>
   8479c:	00800434 	movhi	r2,16
   847a0:	10bfffc4 	addi	r2,r2,-1
   847a4:	88a2703a 	and	r17,r17,r2
   847a8:	883e851e 	bne	r17,zero,841c0 <_gp+0xfff725dc>
   847ac:	00800274 	movhi	r2,9
   847b0:	10904a04 	addi	r2,r2,16680
   847b4:	003e8406 	br	841c8 <_gp+0xfff725e4>
   847b8:	10c00204 	addi	r3,r2,8
   847bc:	003e8706 	br	841dc <_gp+0xfff725f8>
   847c0:	01400434 	movhi	r5,16
   847c4:	297fffc4 	addi	r5,r5,-1
   847c8:	994a703a 	and	r5,r19,r5
   847cc:	9009883a 	mov	r4,r18
   847d0:	843f0044 	addi	r16,r16,-1023
   847d4:	294ffc34 	orhi	r5,r5,16368
   847d8:	dd800217 	ldw	r22,8(sp)
   847dc:	d8001115 	stw	zero,68(sp)
   847e0:	003ea506 	br	84278 <_gp+0xfff72694>
   847e4:	00800274 	movhi	r2,9
   847e8:	10904104 	addi	r2,r2,16644
   847ec:	003e6406 	br	84180 <_gp+0xfff7259c>
   847f0:	e0001115 	stw	zero,68(fp)
   847f4:	000b883a 	mov	r5,zero
   847f8:	e009883a 	mov	r4,fp
   847fc:	00877780 	call	87778 <_Balloc>
   84800:	01bfffc4 	movi	r6,-1
   84804:	01c00044 	movi	r7,1
   84808:	d8800715 	stw	r2,28(sp)
   8480c:	d9800c15 	stw	r6,48(sp)
   84810:	e0801015 	stw	r2,64(fp)
   84814:	d8000315 	stw	zero,12(sp)
   84818:	d9c00b15 	stw	r7,44(sp)
   8481c:	d9800615 	stw	r6,24(sp)
   84820:	d8002215 	stw	zero,136(sp)
   84824:	d8800117 	ldw	r2,4(sp)
   84828:	10008916 	blt	r2,zero,84a50 <_dtoa_r+0x990>
   8482c:	d9000517 	ldw	r4,20(sp)
   84830:	00c00384 	movi	r3,14
   84834:	19008616 	blt	r3,r4,84a50 <_dtoa_r+0x990>
   84838:	200490fa 	slli	r2,r4,3
   8483c:	00c00274 	movhi	r3,9
   84840:	d9802217 	ldw	r6,136(sp)
   84844:	18d06904 	addi	r3,r3,16804
   84848:	1885883a 	add	r2,r3,r2
   8484c:	14000017 	ldw	r16,0(r2)
   84850:	14400117 	ldw	r17,4(r2)
   84854:	30016316 	blt	r6,zero,84de4 <_dtoa_r+0xd24>
   84858:	800d883a 	mov	r6,r16
   8485c:	880f883a 	mov	r7,r17
   84860:	9009883a 	mov	r4,r18
   84864:	980b883a 	mov	r5,r19
   84868:	008c5240 	call	8c524 <__divdf3>
   8486c:	180b883a 	mov	r5,r3
   84870:	1009883a 	mov	r4,r2
   84874:	008e2b40 	call	8e2b4 <__fixdfsi>
   84878:	1009883a 	mov	r4,r2
   8487c:	102b883a 	mov	r21,r2
   84880:	008e3340 	call	8e334 <__floatsidf>
   84884:	800d883a 	mov	r6,r16
   84888:	880f883a 	mov	r7,r17
   8488c:	1009883a 	mov	r4,r2
   84890:	180b883a 	mov	r5,r3
   84894:	008d14c0 	call	8d14c <__muldf3>
   84898:	100d883a 	mov	r6,r2
   8489c:	180f883a 	mov	r7,r3
   848a0:	9009883a 	mov	r4,r18
   848a4:	980b883a 	mov	r5,r19
   848a8:	008d9b80 	call	8d9b8 <__subdf3>
   848ac:	d9c00717 	ldw	r7,28(sp)
   848b0:	1009883a 	mov	r4,r2
   848b4:	a8800c04 	addi	r2,r21,48
   848b8:	38800005 	stb	r2,0(r7)
   848bc:	3dc00044 	addi	r23,r7,1
   848c0:	d9c00617 	ldw	r7,24(sp)
   848c4:	01800044 	movi	r6,1
   848c8:	180b883a 	mov	r5,r3
   848cc:	2005883a 	mov	r2,r4
   848d0:	39803826 	beq	r7,r6,849b4 <_dtoa_r+0x8f4>
   848d4:	000d883a 	mov	r6,zero
   848d8:	01d00934 	movhi	r7,16420
   848dc:	008d14c0 	call	8d14c <__muldf3>
   848e0:	000d883a 	mov	r6,zero
   848e4:	000f883a 	mov	r7,zero
   848e8:	1009883a 	mov	r4,r2
   848ec:	180b883a 	mov	r5,r3
   848f0:	1025883a 	mov	r18,r2
   848f4:	1827883a 	mov	r19,r3
   848f8:	008cef40 	call	8cef4 <__eqdf2>
   848fc:	103f9a26 	beq	r2,zero,84768 <_gp+0xfff72b84>
   84900:	d9c00617 	ldw	r7,24(sp)
   84904:	d8c00717 	ldw	r3,28(sp)
   84908:	b829883a 	mov	r20,r23
   8490c:	38bfffc4 	addi	r2,r7,-1
   84910:	18ad883a 	add	r22,r3,r2
   84914:	00000a06 	br	84940 <_dtoa_r+0x880>
   84918:	008d14c0 	call	8d14c <__muldf3>
   8491c:	000d883a 	mov	r6,zero
   84920:	000f883a 	mov	r7,zero
   84924:	1009883a 	mov	r4,r2
   84928:	180b883a 	mov	r5,r3
   8492c:	1025883a 	mov	r18,r2
   84930:	1827883a 	mov	r19,r3
   84934:	b829883a 	mov	r20,r23
   84938:	008cef40 	call	8cef4 <__eqdf2>
   8493c:	103f8a26 	beq	r2,zero,84768 <_gp+0xfff72b84>
   84940:	800d883a 	mov	r6,r16
   84944:	880f883a 	mov	r7,r17
   84948:	9009883a 	mov	r4,r18
   8494c:	980b883a 	mov	r5,r19
   84950:	008c5240 	call	8c524 <__divdf3>
   84954:	180b883a 	mov	r5,r3
   84958:	1009883a 	mov	r4,r2
   8495c:	008e2b40 	call	8e2b4 <__fixdfsi>
   84960:	1009883a 	mov	r4,r2
   84964:	102b883a 	mov	r21,r2
   84968:	008e3340 	call	8e334 <__floatsidf>
   8496c:	800d883a 	mov	r6,r16
   84970:	880f883a 	mov	r7,r17
   84974:	1009883a 	mov	r4,r2
   84978:	180b883a 	mov	r5,r3
   8497c:	008d14c0 	call	8d14c <__muldf3>
   84980:	100d883a 	mov	r6,r2
   84984:	180f883a 	mov	r7,r3
   84988:	9009883a 	mov	r4,r18
   8498c:	980b883a 	mov	r5,r19
   84990:	008d9b80 	call	8d9b8 <__subdf3>
   84994:	aa000c04 	addi	r8,r21,48
   84998:	a2000005 	stb	r8,0(r20)
   8499c:	000d883a 	mov	r6,zero
   849a0:	01d00934 	movhi	r7,16420
   849a4:	1009883a 	mov	r4,r2
   849a8:	180b883a 	mov	r5,r3
   849ac:	a5c00044 	addi	r23,r20,1
   849b0:	b53fd91e 	bne	r22,r20,84918 <_gp+0xfff72d34>
   849b4:	100d883a 	mov	r6,r2
   849b8:	180f883a 	mov	r7,r3
   849bc:	1009883a 	mov	r4,r2
   849c0:	180b883a 	mov	r5,r3
   849c4:	008bc780 	call	8bc78 <__adddf3>
   849c8:	100d883a 	mov	r6,r2
   849cc:	180f883a 	mov	r7,r3
   849d0:	8009883a 	mov	r4,r16
   849d4:	880b883a 	mov	r5,r17
   849d8:	1027883a 	mov	r19,r2
   849dc:	1825883a 	mov	r18,r3
   849e0:	008d0580 	call	8d058 <__ledf2>
   849e4:	10000816 	blt	r2,zero,84a08 <_dtoa_r+0x948>
   849e8:	980d883a 	mov	r6,r19
   849ec:	900f883a 	mov	r7,r18
   849f0:	8009883a 	mov	r4,r16
   849f4:	880b883a 	mov	r5,r17
   849f8:	008cef40 	call	8cef4 <__eqdf2>
   849fc:	103f5a1e 	bne	r2,zero,84768 <_gp+0xfff72b84>
   84a00:	ad40004c 	andi	r21,r21,1
   84a04:	a83f5826 	beq	r21,zero,84768 <_gp+0xfff72b84>
   84a08:	bd3fffc3 	ldbu	r20,-1(r23)
   84a0c:	b8bfffc4 	addi	r2,r23,-1
   84a10:	1007883a 	mov	r3,r2
   84a14:	01400e44 	movi	r5,57
   84a18:	d9800717 	ldw	r6,28(sp)
   84a1c:	00000506 	br	84a34 <_dtoa_r+0x974>
   84a20:	18ffffc4 	addi	r3,r3,-1
   84a24:	11824726 	beq	r2,r6,85344 <_dtoa_r+0x1284>
   84a28:	1d000003 	ldbu	r20,0(r3)
   84a2c:	102f883a 	mov	r23,r2
   84a30:	10bfffc4 	addi	r2,r2,-1
   84a34:	a1003fcc 	andi	r4,r20,255
   84a38:	2100201c 	xori	r4,r4,128
   84a3c:	213fe004 	addi	r4,r4,-128
   84a40:	217ff726 	beq	r4,r5,84a20 <_gp+0xfff72e3c>
   84a44:	a2000044 	addi	r8,r20,1
   84a48:	12000005 	stb	r8,0(r2)
   84a4c:	003f4606 	br	84768 <_gp+0xfff72b84>
   84a50:	d9000b17 	ldw	r4,44(sp)
   84a54:	2000c826 	beq	r4,zero,84d78 <_dtoa_r+0xcb8>
   84a58:	d9800317 	ldw	r6,12(sp)
   84a5c:	00c00044 	movi	r3,1
   84a60:	1980f90e 	bge	r3,r6,84e48 <_dtoa_r+0xd88>
   84a64:	d8800617 	ldw	r2,24(sp)
   84a68:	d8c00a17 	ldw	r3,40(sp)
   84a6c:	157fffc4 	addi	r21,r2,-1
   84a70:	1d41f316 	blt	r3,r21,85240 <_dtoa_r+0x1180>
   84a74:	1d6bc83a 	sub	r21,r3,r21
   84a78:	d9c00617 	ldw	r7,24(sp)
   84a7c:	3802aa16 	blt	r7,zero,85528 <_dtoa_r+0x1468>
   84a80:	dd000817 	ldw	r20,32(sp)
   84a84:	d8800617 	ldw	r2,24(sp)
   84a88:	d8c00817 	ldw	r3,32(sp)
   84a8c:	01400044 	movi	r5,1
   84a90:	e009883a 	mov	r4,fp
   84a94:	1887883a 	add	r3,r3,r2
   84a98:	d8c00815 	stw	r3,32(sp)
   84a9c:	b0ad883a 	add	r22,r22,r2
   84aa0:	0087bac0 	call	87bac <__i2b>
   84aa4:	1023883a 	mov	r17,r2
   84aa8:	a0000826 	beq	r20,zero,84acc <_dtoa_r+0xa0c>
   84aac:	0580070e 	bge	zero,r22,84acc <_dtoa_r+0xa0c>
   84ab0:	a005883a 	mov	r2,r20
   84ab4:	b500b916 	blt	r22,r20,84d9c <_dtoa_r+0xcdc>
   84ab8:	d9000817 	ldw	r4,32(sp)
   84abc:	a0a9c83a 	sub	r20,r20,r2
   84ac0:	b0adc83a 	sub	r22,r22,r2
   84ac4:	2089c83a 	sub	r4,r4,r2
   84ac8:	d9000815 	stw	r4,32(sp)
   84acc:	d9800a17 	ldw	r6,40(sp)
   84ad0:	0181810e 	bge	zero,r6,850d8 <_dtoa_r+0x1018>
   84ad4:	d9c00b17 	ldw	r7,44(sp)
   84ad8:	3800b326 	beq	r7,zero,84da8 <_dtoa_r+0xce8>
   84adc:	a800b226 	beq	r21,zero,84da8 <_dtoa_r+0xce8>
   84ae0:	880b883a 	mov	r5,r17
   84ae4:	a80d883a 	mov	r6,r21
   84ae8:	e009883a 	mov	r4,fp
   84aec:	0087e740 	call	87e74 <__pow5mult>
   84af0:	d9800917 	ldw	r6,36(sp)
   84af4:	100b883a 	mov	r5,r2
   84af8:	e009883a 	mov	r4,fp
   84afc:	1023883a 	mov	r17,r2
   84b00:	0087be80 	call	87be8 <__multiply>
   84b04:	1021883a 	mov	r16,r2
   84b08:	d8800a17 	ldw	r2,40(sp)
   84b0c:	d9400917 	ldw	r5,36(sp)
   84b10:	e009883a 	mov	r4,fp
   84b14:	1545c83a 	sub	r2,r2,r21
   84b18:	d8800a15 	stw	r2,40(sp)
   84b1c:	00878200 	call	87820 <_Bfree>
   84b20:	d8c00a17 	ldw	r3,40(sp)
   84b24:	18009f1e 	bne	r3,zero,84da4 <_dtoa_r+0xce4>
   84b28:	05c00044 	movi	r23,1
   84b2c:	e009883a 	mov	r4,fp
   84b30:	b80b883a 	mov	r5,r23
   84b34:	0087bac0 	call	87bac <__i2b>
   84b38:	d9000d17 	ldw	r4,52(sp)
   84b3c:	102b883a 	mov	r21,r2
   84b40:	2000ce26 	beq	r4,zero,84e7c <_dtoa_r+0xdbc>
   84b44:	200d883a 	mov	r6,r4
   84b48:	100b883a 	mov	r5,r2
   84b4c:	e009883a 	mov	r4,fp
   84b50:	0087e740 	call	87e74 <__pow5mult>
   84b54:	d9800317 	ldw	r6,12(sp)
   84b58:	102b883a 	mov	r21,r2
   84b5c:	b981810e 	bge	r23,r6,85164 <_dtoa_r+0x10a4>
   84b60:	0027883a 	mov	r19,zero
   84b64:	a8800417 	ldw	r2,16(r21)
   84b68:	05c00804 	movi	r23,32
   84b6c:	10800104 	addi	r2,r2,4
   84b70:	1085883a 	add	r2,r2,r2
   84b74:	1085883a 	add	r2,r2,r2
   84b78:	a885883a 	add	r2,r21,r2
   84b7c:	11000017 	ldw	r4,0(r2)
   84b80:	0087a940 	call	87a94 <__hi0bits>
   84b84:	b885c83a 	sub	r2,r23,r2
   84b88:	1585883a 	add	r2,r2,r22
   84b8c:	108007cc 	andi	r2,r2,31
   84b90:	1000b326 	beq	r2,zero,84e60 <_dtoa_r+0xda0>
   84b94:	00c00804 	movi	r3,32
   84b98:	1887c83a 	sub	r3,r3,r2
   84b9c:	01000104 	movi	r4,4
   84ba0:	20c2cd0e 	bge	r4,r3,856d8 <_dtoa_r+0x1618>
   84ba4:	00c00704 	movi	r3,28
   84ba8:	1885c83a 	sub	r2,r3,r2
   84bac:	d8c00817 	ldw	r3,32(sp)
   84bb0:	a0a9883a 	add	r20,r20,r2
   84bb4:	b0ad883a 	add	r22,r22,r2
   84bb8:	1887883a 	add	r3,r3,r2
   84bbc:	d8c00815 	stw	r3,32(sp)
   84bc0:	d9800817 	ldw	r6,32(sp)
   84bc4:	0180040e 	bge	zero,r6,84bd8 <_dtoa_r+0xb18>
   84bc8:	800b883a 	mov	r5,r16
   84bcc:	e009883a 	mov	r4,fp
   84bd0:	0087fb40 	call	87fb4 <__lshift>
   84bd4:	1021883a 	mov	r16,r2
   84bd8:	0580050e 	bge	zero,r22,84bf0 <_dtoa_r+0xb30>
   84bdc:	a80b883a 	mov	r5,r21
   84be0:	b00d883a 	mov	r6,r22
   84be4:	e009883a 	mov	r4,fp
   84be8:	0087fb40 	call	87fb4 <__lshift>
   84bec:	102b883a 	mov	r21,r2
   84bf0:	d9c00e17 	ldw	r7,56(sp)
   84bf4:	3801211e 	bne	r7,zero,8507c <_dtoa_r+0xfbc>
   84bf8:	d9800617 	ldw	r6,24(sp)
   84bfc:	0181380e 	bge	zero,r6,850e0 <_dtoa_r+0x1020>
   84c00:	d8c00b17 	ldw	r3,44(sp)
   84c04:	1800ab1e 	bne	r3,zero,84eb4 <_dtoa_r+0xdf4>
   84c08:	dc800717 	ldw	r18,28(sp)
   84c0c:	dcc00617 	ldw	r19,24(sp)
   84c10:	9029883a 	mov	r20,r18
   84c14:	00000206 	br	84c20 <_dtoa_r+0xb60>
   84c18:	00878480 	call	87848 <__multadd>
   84c1c:	1021883a 	mov	r16,r2
   84c20:	a80b883a 	mov	r5,r21
   84c24:	8009883a 	mov	r4,r16
   84c28:	0083e980 	call	83e98 <quorem>
   84c2c:	10800c04 	addi	r2,r2,48
   84c30:	90800005 	stb	r2,0(r18)
   84c34:	94800044 	addi	r18,r18,1
   84c38:	9507c83a 	sub	r3,r18,r20
   84c3c:	000f883a 	mov	r7,zero
   84c40:	01800284 	movi	r6,10
   84c44:	800b883a 	mov	r5,r16
   84c48:	e009883a 	mov	r4,fp
   84c4c:	1cfff216 	blt	r3,r19,84c18 <_gp+0xfff73034>
   84c50:	1011883a 	mov	r8,r2
   84c54:	d8800617 	ldw	r2,24(sp)
   84c58:	0082370e 	bge	zero,r2,85538 <_dtoa_r+0x1478>
   84c5c:	d9000717 	ldw	r4,28(sp)
   84c60:	0025883a 	mov	r18,zero
   84c64:	20af883a 	add	r23,r4,r2
   84c68:	01800044 	movi	r6,1
   84c6c:	800b883a 	mov	r5,r16
   84c70:	e009883a 	mov	r4,fp
   84c74:	da001715 	stw	r8,92(sp)
   84c78:	0087fb40 	call	87fb4 <__lshift>
   84c7c:	a80b883a 	mov	r5,r21
   84c80:	1009883a 	mov	r4,r2
   84c84:	d8800915 	stw	r2,36(sp)
   84c88:	00880fc0 	call	880fc <__mcmp>
   84c8c:	da001717 	ldw	r8,92(sp)
   84c90:	0081800e 	bge	zero,r2,85294 <_dtoa_r+0x11d4>
   84c94:	b93fffc3 	ldbu	r4,-1(r23)
   84c98:	b8bfffc4 	addi	r2,r23,-1
   84c9c:	1007883a 	mov	r3,r2
   84ca0:	01800e44 	movi	r6,57
   84ca4:	d9c00717 	ldw	r7,28(sp)
   84ca8:	00000506 	br	84cc0 <_dtoa_r+0xc00>
   84cac:	18ffffc4 	addi	r3,r3,-1
   84cb0:	11c12326 	beq	r2,r7,85140 <_dtoa_r+0x1080>
   84cb4:	19000003 	ldbu	r4,0(r3)
   84cb8:	102f883a 	mov	r23,r2
   84cbc:	10bfffc4 	addi	r2,r2,-1
   84cc0:	21403fcc 	andi	r5,r4,255
   84cc4:	2940201c 	xori	r5,r5,128
   84cc8:	297fe004 	addi	r5,r5,-128
   84ccc:	29bff726 	beq	r5,r6,84cac <_gp+0xfff730c8>
   84cd0:	21000044 	addi	r4,r4,1
   84cd4:	11000005 	stb	r4,0(r2)
   84cd8:	a80b883a 	mov	r5,r21
   84cdc:	e009883a 	mov	r4,fp
   84ce0:	00878200 	call	87820 <_Bfree>
   84ce4:	883ea026 	beq	r17,zero,84768 <_gp+0xfff72b84>
   84ce8:	90000426 	beq	r18,zero,84cfc <_dtoa_r+0xc3c>
   84cec:	94400326 	beq	r18,r17,84cfc <_dtoa_r+0xc3c>
   84cf0:	900b883a 	mov	r5,r18
   84cf4:	e009883a 	mov	r4,fp
   84cf8:	00878200 	call	87820 <_Bfree>
   84cfc:	880b883a 	mov	r5,r17
   84d00:	e009883a 	mov	r4,fp
   84d04:	00878200 	call	87820 <_Bfree>
   84d08:	003e9706 	br	84768 <_gp+0xfff72b84>
   84d0c:	01800044 	movi	r6,1
   84d10:	d9800e15 	stw	r6,56(sp)
   84d14:	003d9606 	br	84370 <_gp+0xfff7278c>
   84d18:	d8800817 	ldw	r2,32(sp)
   84d1c:	d8c00517 	ldw	r3,20(sp)
   84d20:	d8000d15 	stw	zero,52(sp)
   84d24:	10c5c83a 	sub	r2,r2,r3
   84d28:	00c9c83a 	sub	r4,zero,r3
   84d2c:	d8800815 	stw	r2,32(sp)
   84d30:	d9000a15 	stw	r4,40(sp)
   84d34:	003d9706 	br	84394 <_gp+0xfff727b0>
   84d38:	05adc83a 	sub	r22,zero,r22
   84d3c:	dd800815 	stw	r22,32(sp)
   84d40:	002d883a 	mov	r22,zero
   84d44:	003d8e06 	br	84380 <_gp+0xfff7279c>
   84d48:	d9000517 	ldw	r4,20(sp)
   84d4c:	008e3340 	call	8e334 <__floatsidf>
   84d50:	100d883a 	mov	r6,r2
   84d54:	180f883a 	mov	r7,r3
   84d58:	a009883a 	mov	r4,r20
   84d5c:	880b883a 	mov	r5,r17
   84d60:	008cef40 	call	8cef4 <__eqdf2>
   84d64:	103d7126 	beq	r2,zero,8432c <_gp+0xfff72748>
   84d68:	d9c00517 	ldw	r7,20(sp)
   84d6c:	39ffffc4 	addi	r7,r7,-1
   84d70:	d9c00515 	stw	r7,20(sp)
   84d74:	003d6d06 	br	8432c <_gp+0xfff72748>
   84d78:	dd400a17 	ldw	r21,40(sp)
   84d7c:	dd000817 	ldw	r20,32(sp)
   84d80:	0023883a 	mov	r17,zero
   84d84:	003f4806 	br	84aa8 <_gp+0xfff72ec4>
   84d88:	10e3c83a 	sub	r17,r2,r3
   84d8c:	9448983a 	sll	r4,r18,r17
   84d90:	003d3206 	br	8425c <_gp+0xfff72678>
   84d94:	d8000e15 	stw	zero,56(sp)
   84d98:	003d7506 	br	84370 <_gp+0xfff7278c>
   84d9c:	b005883a 	mov	r2,r22
   84da0:	003f4506 	br	84ab8 <_gp+0xfff72ed4>
   84da4:	dc000915 	stw	r16,36(sp)
   84da8:	d9800a17 	ldw	r6,40(sp)
   84dac:	d9400917 	ldw	r5,36(sp)
   84db0:	e009883a 	mov	r4,fp
   84db4:	0087e740 	call	87e74 <__pow5mult>
   84db8:	1021883a 	mov	r16,r2
   84dbc:	003f5a06 	br	84b28 <_gp+0xfff72f44>
   84dc0:	01c00044 	movi	r7,1
   84dc4:	d9c00b15 	stw	r7,44(sp)
   84dc8:	d8802217 	ldw	r2,136(sp)
   84dcc:	0081280e 	bge	zero,r2,85270 <_dtoa_r+0x11b0>
   84dd0:	100d883a 	mov	r6,r2
   84dd4:	1021883a 	mov	r16,r2
   84dd8:	d8800c15 	stw	r2,48(sp)
   84ddc:	d8800615 	stw	r2,24(sp)
   84de0:	003d8806 	br	84404 <_gp+0xfff72820>
   84de4:	d8800617 	ldw	r2,24(sp)
   84de8:	00be9b16 	blt	zero,r2,84858 <_gp+0xfff72c74>
   84dec:	10010f1e 	bne	r2,zero,8522c <_dtoa_r+0x116c>
   84df0:	880b883a 	mov	r5,r17
   84df4:	000d883a 	mov	r6,zero
   84df8:	01d00534 	movhi	r7,16404
   84dfc:	8009883a 	mov	r4,r16
   84e00:	008d14c0 	call	8d14c <__muldf3>
   84e04:	900d883a 	mov	r6,r18
   84e08:	980f883a 	mov	r7,r19
   84e0c:	1009883a 	mov	r4,r2
   84e10:	180b883a 	mov	r5,r3
   84e14:	008cf7c0 	call	8cf7c <__gedf2>
   84e18:	002b883a 	mov	r21,zero
   84e1c:	0023883a 	mov	r17,zero
   84e20:	1000bf16 	blt	r2,zero,85120 <_dtoa_r+0x1060>
   84e24:	d9802217 	ldw	r6,136(sp)
   84e28:	ddc00717 	ldw	r23,28(sp)
   84e2c:	018c303a 	nor	r6,zero,r6
   84e30:	d9800515 	stw	r6,20(sp)
   84e34:	a80b883a 	mov	r5,r21
   84e38:	e009883a 	mov	r4,fp
   84e3c:	00878200 	call	87820 <_Bfree>
   84e40:	883e4926 	beq	r17,zero,84768 <_gp+0xfff72b84>
   84e44:	003fad06 	br	84cfc <_gp+0xfff73118>
   84e48:	d9c01117 	ldw	r7,68(sp)
   84e4c:	3801bc26 	beq	r7,zero,85540 <_dtoa_r+0x1480>
   84e50:	10810cc4 	addi	r2,r2,1075
   84e54:	dd400a17 	ldw	r21,40(sp)
   84e58:	dd000817 	ldw	r20,32(sp)
   84e5c:	003f0a06 	br	84a88 <_gp+0xfff72ea4>
   84e60:	00800704 	movi	r2,28
   84e64:	d9000817 	ldw	r4,32(sp)
   84e68:	a0a9883a 	add	r20,r20,r2
   84e6c:	b0ad883a 	add	r22,r22,r2
   84e70:	2089883a 	add	r4,r4,r2
   84e74:	d9000815 	stw	r4,32(sp)
   84e78:	003f5106 	br	84bc0 <_gp+0xfff72fdc>
   84e7c:	d8c00317 	ldw	r3,12(sp)
   84e80:	b8c1fc0e 	bge	r23,r3,85674 <_dtoa_r+0x15b4>
   84e84:	0027883a 	mov	r19,zero
   84e88:	b805883a 	mov	r2,r23
   84e8c:	003f3e06 	br	84b88 <_gp+0xfff72fa4>
   84e90:	880b883a 	mov	r5,r17
   84e94:	e009883a 	mov	r4,fp
   84e98:	000f883a 	mov	r7,zero
   84e9c:	01800284 	movi	r6,10
   84ea0:	00878480 	call	87848 <__multadd>
   84ea4:	d9000c17 	ldw	r4,48(sp)
   84ea8:	1023883a 	mov	r17,r2
   84eac:	0102040e 	bge	zero,r4,856c0 <_dtoa_r+0x1600>
   84eb0:	d9000615 	stw	r4,24(sp)
   84eb4:	0500050e 	bge	zero,r20,84ecc <_dtoa_r+0xe0c>
   84eb8:	880b883a 	mov	r5,r17
   84ebc:	a00d883a 	mov	r6,r20
   84ec0:	e009883a 	mov	r4,fp
   84ec4:	0087fb40 	call	87fb4 <__lshift>
   84ec8:	1023883a 	mov	r17,r2
   84ecc:	9801241e 	bne	r19,zero,85360 <_dtoa_r+0x12a0>
   84ed0:	8829883a 	mov	r20,r17
   84ed4:	d9000617 	ldw	r4,24(sp)
   84ed8:	dcc00717 	ldw	r19,28(sp)
   84edc:	9480004c 	andi	r18,r18,1
   84ee0:	20bfffc4 	addi	r2,r4,-1
   84ee4:	9885883a 	add	r2,r19,r2
   84ee8:	d8800415 	stw	r2,16(sp)
   84eec:	dc800615 	stw	r18,24(sp)
   84ef0:	a80b883a 	mov	r5,r21
   84ef4:	8009883a 	mov	r4,r16
   84ef8:	0083e980 	call	83e98 <quorem>
   84efc:	880b883a 	mov	r5,r17
   84f00:	8009883a 	mov	r4,r16
   84f04:	102f883a 	mov	r23,r2
   84f08:	00880fc0 	call	880fc <__mcmp>
   84f0c:	a80b883a 	mov	r5,r21
   84f10:	a00d883a 	mov	r6,r20
   84f14:	e009883a 	mov	r4,fp
   84f18:	102d883a 	mov	r22,r2
   84f1c:	008815c0 	call	8815c <__mdiff>
   84f20:	1007883a 	mov	r3,r2
   84f24:	10800317 	ldw	r2,12(r2)
   84f28:	bc800c04 	addi	r18,r23,48
   84f2c:	180b883a 	mov	r5,r3
   84f30:	10004e1e 	bne	r2,zero,8506c <_dtoa_r+0xfac>
   84f34:	8009883a 	mov	r4,r16
   84f38:	d8c01615 	stw	r3,88(sp)
   84f3c:	00880fc0 	call	880fc <__mcmp>
   84f40:	d8c01617 	ldw	r3,88(sp)
   84f44:	e009883a 	mov	r4,fp
   84f48:	d8801615 	stw	r2,88(sp)
   84f4c:	180b883a 	mov	r5,r3
   84f50:	00878200 	call	87820 <_Bfree>
   84f54:	d8801617 	ldw	r2,88(sp)
   84f58:	1000041e 	bne	r2,zero,84f6c <_dtoa_r+0xeac>
   84f5c:	d9800317 	ldw	r6,12(sp)
   84f60:	3000021e 	bne	r6,zero,84f6c <_dtoa_r+0xeac>
   84f64:	d8c00617 	ldw	r3,24(sp)
   84f68:	18003726 	beq	r3,zero,85048 <_dtoa_r+0xf88>
   84f6c:	b0002016 	blt	r22,zero,84ff0 <_dtoa_r+0xf30>
   84f70:	b000041e 	bne	r22,zero,84f84 <_dtoa_r+0xec4>
   84f74:	d9000317 	ldw	r4,12(sp)
   84f78:	2000021e 	bne	r4,zero,84f84 <_dtoa_r+0xec4>
   84f7c:	d8c00617 	ldw	r3,24(sp)
   84f80:	18001b26 	beq	r3,zero,84ff0 <_dtoa_r+0xf30>
   84f84:	00810716 	blt	zero,r2,853a4 <_dtoa_r+0x12e4>
   84f88:	d8c00417 	ldw	r3,16(sp)
   84f8c:	9d800044 	addi	r22,r19,1
   84f90:	9c800005 	stb	r18,0(r19)
   84f94:	b02f883a 	mov	r23,r22
   84f98:	98c10626 	beq	r19,r3,853b4 <_dtoa_r+0x12f4>
   84f9c:	800b883a 	mov	r5,r16
   84fa0:	000f883a 	mov	r7,zero
   84fa4:	01800284 	movi	r6,10
   84fa8:	e009883a 	mov	r4,fp
   84fac:	00878480 	call	87848 <__multadd>
   84fb0:	1021883a 	mov	r16,r2
   84fb4:	000f883a 	mov	r7,zero
   84fb8:	01800284 	movi	r6,10
   84fbc:	880b883a 	mov	r5,r17
   84fc0:	e009883a 	mov	r4,fp
   84fc4:	8d002526 	beq	r17,r20,8505c <_dtoa_r+0xf9c>
   84fc8:	00878480 	call	87848 <__multadd>
   84fcc:	a00b883a 	mov	r5,r20
   84fd0:	000f883a 	mov	r7,zero
   84fd4:	01800284 	movi	r6,10
   84fd8:	e009883a 	mov	r4,fp
   84fdc:	1023883a 	mov	r17,r2
   84fe0:	00878480 	call	87848 <__multadd>
   84fe4:	1029883a 	mov	r20,r2
   84fe8:	b027883a 	mov	r19,r22
   84fec:	003fc006 	br	84ef0 <_gp+0xfff7330c>
   84ff0:	9011883a 	mov	r8,r18
   84ff4:	00800e0e 	bge	zero,r2,85030 <_dtoa_r+0xf70>
   84ff8:	800b883a 	mov	r5,r16
   84ffc:	01800044 	movi	r6,1
   85000:	e009883a 	mov	r4,fp
   85004:	da001715 	stw	r8,92(sp)
   85008:	0087fb40 	call	87fb4 <__lshift>
   8500c:	a80b883a 	mov	r5,r21
   85010:	1009883a 	mov	r4,r2
   85014:	1021883a 	mov	r16,r2
   85018:	00880fc0 	call	880fc <__mcmp>
   8501c:	da001717 	ldw	r8,92(sp)
   85020:	0081960e 	bge	zero,r2,8567c <_dtoa_r+0x15bc>
   85024:	00800e44 	movi	r2,57
   85028:	40817026 	beq	r8,r2,855ec <_dtoa_r+0x152c>
   8502c:	ba000c44 	addi	r8,r23,49
   85030:	8825883a 	mov	r18,r17
   85034:	9dc00044 	addi	r23,r19,1
   85038:	9a000005 	stb	r8,0(r19)
   8503c:	a023883a 	mov	r17,r20
   85040:	dc000915 	stw	r16,36(sp)
   85044:	003f2406 	br	84cd8 <_gp+0xfff730f4>
   85048:	00800e44 	movi	r2,57
   8504c:	9011883a 	mov	r8,r18
   85050:	90816626 	beq	r18,r2,855ec <_dtoa_r+0x152c>
   85054:	05bff516 	blt	zero,r22,8502c <_gp+0xfff73448>
   85058:	003ff506 	br	85030 <_gp+0xfff7344c>
   8505c:	00878480 	call	87848 <__multadd>
   85060:	1023883a 	mov	r17,r2
   85064:	1029883a 	mov	r20,r2
   85068:	003fdf06 	br	84fe8 <_gp+0xfff73404>
   8506c:	e009883a 	mov	r4,fp
   85070:	00878200 	call	87820 <_Bfree>
   85074:	00800044 	movi	r2,1
   85078:	003fbc06 	br	84f6c <_gp+0xfff73388>
   8507c:	a80b883a 	mov	r5,r21
   85080:	8009883a 	mov	r4,r16
   85084:	00880fc0 	call	880fc <__mcmp>
   85088:	103edb0e 	bge	r2,zero,84bf8 <_gp+0xfff73014>
   8508c:	800b883a 	mov	r5,r16
   85090:	000f883a 	mov	r7,zero
   85094:	01800284 	movi	r6,10
   85098:	e009883a 	mov	r4,fp
   8509c:	00878480 	call	87848 <__multadd>
   850a0:	1021883a 	mov	r16,r2
   850a4:	d8800517 	ldw	r2,20(sp)
   850a8:	d8c00b17 	ldw	r3,44(sp)
   850ac:	10bfffc4 	addi	r2,r2,-1
   850b0:	d8800515 	stw	r2,20(sp)
   850b4:	183f761e 	bne	r3,zero,84e90 <_gp+0xfff732ac>
   850b8:	d9000c17 	ldw	r4,48(sp)
   850bc:	0101730e 	bge	zero,r4,8568c <_dtoa_r+0x15cc>
   850c0:	d9000615 	stw	r4,24(sp)
   850c4:	003ed006 	br	84c08 <_gp+0xfff73024>
   850c8:	00800084 	movi	r2,2
   850cc:	3081861e 	bne	r6,r2,856e8 <_dtoa_r+0x1628>
   850d0:	d8000b15 	stw	zero,44(sp)
   850d4:	003f3c06 	br	84dc8 <_gp+0xfff731e4>
   850d8:	dc000917 	ldw	r16,36(sp)
   850dc:	003e9206 	br	84b28 <_gp+0xfff72f44>
   850e0:	d9c00317 	ldw	r7,12(sp)
   850e4:	00800084 	movi	r2,2
   850e8:	11fec50e 	bge	r2,r7,84c00 <_gp+0xfff7301c>
   850ec:	d9000617 	ldw	r4,24(sp)
   850f0:	20013c1e 	bne	r4,zero,855e4 <_dtoa_r+0x1524>
   850f4:	a80b883a 	mov	r5,r21
   850f8:	000f883a 	mov	r7,zero
   850fc:	01800144 	movi	r6,5
   85100:	e009883a 	mov	r4,fp
   85104:	00878480 	call	87848 <__multadd>
   85108:	100b883a 	mov	r5,r2
   8510c:	8009883a 	mov	r4,r16
   85110:	102b883a 	mov	r21,r2
   85114:	00880fc0 	call	880fc <__mcmp>
   85118:	dc000915 	stw	r16,36(sp)
   8511c:	00bf410e 	bge	zero,r2,84e24 <_gp+0xfff73240>
   85120:	d9c00717 	ldw	r7,28(sp)
   85124:	00800c44 	movi	r2,49
   85128:	38800005 	stb	r2,0(r7)
   8512c:	d8800517 	ldw	r2,20(sp)
   85130:	3dc00044 	addi	r23,r7,1
   85134:	10800044 	addi	r2,r2,1
   85138:	d8800515 	stw	r2,20(sp)
   8513c:	003f3d06 	br	84e34 <_gp+0xfff73250>
   85140:	d9800517 	ldw	r6,20(sp)
   85144:	d9c00717 	ldw	r7,28(sp)
   85148:	00800c44 	movi	r2,49
   8514c:	31800044 	addi	r6,r6,1
   85150:	d9800515 	stw	r6,20(sp)
   85154:	38800005 	stb	r2,0(r7)
   85158:	003edf06 	br	84cd8 <_gp+0xfff730f4>
   8515c:	d8000b15 	stw	zero,44(sp)
   85160:	003c9f06 	br	843e0 <_gp+0xfff727fc>
   85164:	903e7e1e 	bne	r18,zero,84b60 <_gp+0xfff72f7c>
   85168:	00800434 	movhi	r2,16
   8516c:	10bfffc4 	addi	r2,r2,-1
   85170:	9884703a 	and	r2,r19,r2
   85174:	1000ea1e 	bne	r2,zero,85520 <_dtoa_r+0x1460>
   85178:	9cdffc2c 	andhi	r19,r19,32752
   8517c:	9800e826 	beq	r19,zero,85520 <_dtoa_r+0x1460>
   85180:	d9c00817 	ldw	r7,32(sp)
   85184:	b5800044 	addi	r22,r22,1
   85188:	04c00044 	movi	r19,1
   8518c:	39c00044 	addi	r7,r7,1
   85190:	d9c00815 	stw	r7,32(sp)
   85194:	d8800d17 	ldw	r2,52(sp)
   85198:	103e721e 	bne	r2,zero,84b64 <_gp+0xfff72f80>
   8519c:	00800044 	movi	r2,1
   851a0:	003e7906 	br	84b88 <_gp+0xfff72fa4>
   851a4:	8009883a 	mov	r4,r16
   851a8:	008e3340 	call	8e334 <__floatsidf>
   851ac:	d9800f17 	ldw	r6,60(sp)
   851b0:	d9c01017 	ldw	r7,64(sp)
   851b4:	1009883a 	mov	r4,r2
   851b8:	180b883a 	mov	r5,r3
   851bc:	008d14c0 	call	8d14c <__muldf3>
   851c0:	000d883a 	mov	r6,zero
   851c4:	01d00734 	movhi	r7,16412
   851c8:	1009883a 	mov	r4,r2
   851cc:	180b883a 	mov	r5,r3
   851d0:	008bc780 	call	8bc78 <__adddf3>
   851d4:	047f3034 	movhi	r17,64704
   851d8:	1021883a 	mov	r16,r2
   851dc:	1c63883a 	add	r17,r3,r17
   851e0:	d9000f17 	ldw	r4,60(sp)
   851e4:	d9401017 	ldw	r5,64(sp)
   851e8:	000d883a 	mov	r6,zero
   851ec:	01d00534 	movhi	r7,16404
   851f0:	008d9b80 	call	8d9b8 <__subdf3>
   851f4:	800d883a 	mov	r6,r16
   851f8:	880f883a 	mov	r7,r17
   851fc:	1009883a 	mov	r4,r2
   85200:	180b883a 	mov	r5,r3
   85204:	102b883a 	mov	r21,r2
   85208:	1829883a 	mov	r20,r3
   8520c:	008cf7c0 	call	8cf7c <__gedf2>
   85210:	00806c16 	blt	zero,r2,853c4 <_dtoa_r+0x1304>
   85214:	89e0003c 	xorhi	r7,r17,32768
   85218:	800d883a 	mov	r6,r16
   8521c:	a809883a 	mov	r4,r21
   85220:	a00b883a 	mov	r5,r20
   85224:	008d0580 	call	8d058 <__ledf2>
   85228:	103d7e0e 	bge	r2,zero,84824 <_gp+0xfff72c40>
   8522c:	002b883a 	mov	r21,zero
   85230:	0023883a 	mov	r17,zero
   85234:	003efb06 	br	84e24 <_gp+0xfff73240>
   85238:	d8800717 	ldw	r2,28(sp)
   8523c:	003bd006 	br	84180 <_gp+0xfff7259c>
   85240:	d9000a17 	ldw	r4,40(sp)
   85244:	d9800d17 	ldw	r6,52(sp)
   85248:	dd400a15 	stw	r21,40(sp)
   8524c:	a905c83a 	sub	r2,r21,r4
   85250:	308d883a 	add	r6,r6,r2
   85254:	d9800d15 	stw	r6,52(sp)
   85258:	002b883a 	mov	r21,zero
   8525c:	003e0606 	br	84a78 <_gp+0xfff72e94>
   85260:	9023883a 	mov	r17,r18
   85264:	9829883a 	mov	r20,r19
   85268:	04000084 	movi	r16,2
   8526c:	003c9206 	br	844b8 <_gp+0xfff728d4>
   85270:	04000044 	movi	r16,1
   85274:	dc000c15 	stw	r16,48(sp)
   85278:	dc000615 	stw	r16,24(sp)
   8527c:	dc002215 	stw	r16,136(sp)
   85280:	e0001115 	stw	zero,68(fp)
   85284:	000b883a 	mov	r5,zero
   85288:	003c6906 	br	84430 <_gp+0xfff7284c>
   8528c:	3021883a 	mov	r16,r6
   85290:	003ffb06 	br	85280 <_gp+0xfff7369c>
   85294:	1000021e 	bne	r2,zero,852a0 <_dtoa_r+0x11e0>
   85298:	4200004c 	andi	r8,r8,1
   8529c:	403e7d1e 	bne	r8,zero,84c94 <_gp+0xfff730b0>
   852a0:	01000c04 	movi	r4,48
   852a4:	00000106 	br	852ac <_dtoa_r+0x11ec>
   852a8:	102f883a 	mov	r23,r2
   852ac:	b8bfffc4 	addi	r2,r23,-1
   852b0:	10c00007 	ldb	r3,0(r2)
   852b4:	193ffc26 	beq	r3,r4,852a8 <_gp+0xfff736c4>
   852b8:	003e8706 	br	84cd8 <_gp+0xfff730f4>
   852bc:	d8800517 	ldw	r2,20(sp)
   852c0:	00a3c83a 	sub	r17,zero,r2
   852c4:	8800a426 	beq	r17,zero,85558 <_dtoa_r+0x1498>
   852c8:	888003cc 	andi	r2,r17,15
   852cc:	100490fa 	slli	r2,r2,3
   852d0:	00c00274 	movhi	r3,9
   852d4:	18d06904 	addi	r3,r3,16804
   852d8:	1885883a 	add	r2,r3,r2
   852dc:	11800017 	ldw	r6,0(r2)
   852e0:	11c00117 	ldw	r7,4(r2)
   852e4:	9009883a 	mov	r4,r18
   852e8:	980b883a 	mov	r5,r19
   852ec:	8823d13a 	srai	r17,r17,4
   852f0:	008d14c0 	call	8d14c <__muldf3>
   852f4:	d8800f15 	stw	r2,60(sp)
   852f8:	d8c01015 	stw	r3,64(sp)
   852fc:	8800e826 	beq	r17,zero,856a0 <_dtoa_r+0x15e0>
   85300:	05000274 	movhi	r20,9
   85304:	a5105f04 	addi	r20,r20,16764
   85308:	04000084 	movi	r16,2
   8530c:	8980004c 	andi	r6,r17,1
   85310:	1009883a 	mov	r4,r2
   85314:	8823d07a 	srai	r17,r17,1
   85318:	180b883a 	mov	r5,r3
   8531c:	30000426 	beq	r6,zero,85330 <_dtoa_r+0x1270>
   85320:	a1800017 	ldw	r6,0(r20)
   85324:	a1c00117 	ldw	r7,4(r20)
   85328:	84000044 	addi	r16,r16,1
   8532c:	008d14c0 	call	8d14c <__muldf3>
   85330:	a5000204 	addi	r20,r20,8
   85334:	883ff51e 	bne	r17,zero,8530c <_gp+0xfff73728>
   85338:	d8800f15 	stw	r2,60(sp)
   8533c:	d8c01015 	stw	r3,64(sp)
   85340:	003c7606 	br	8451c <_gp+0xfff72938>
   85344:	00c00c04 	movi	r3,48
   85348:	10c00005 	stb	r3,0(r2)
   8534c:	d8c00517 	ldw	r3,20(sp)
   85350:	bd3fffc3 	ldbu	r20,-1(r23)
   85354:	18c00044 	addi	r3,r3,1
   85358:	d8c00515 	stw	r3,20(sp)
   8535c:	003db906 	br	84a44 <_gp+0xfff72e60>
   85360:	89400117 	ldw	r5,4(r17)
   85364:	e009883a 	mov	r4,fp
   85368:	00877780 	call	87778 <_Balloc>
   8536c:	89800417 	ldw	r6,16(r17)
   85370:	89400304 	addi	r5,r17,12
   85374:	11000304 	addi	r4,r2,12
   85378:	31800084 	addi	r6,r6,2
   8537c:	318d883a 	add	r6,r6,r6
   85380:	318d883a 	add	r6,r6,r6
   85384:	1027883a 	mov	r19,r2
   85388:	00873ac0 	call	873ac <memcpy>
   8538c:	01800044 	movi	r6,1
   85390:	980b883a 	mov	r5,r19
   85394:	e009883a 	mov	r4,fp
   85398:	0087fb40 	call	87fb4 <__lshift>
   8539c:	1029883a 	mov	r20,r2
   853a0:	003ecc06 	br	84ed4 <_gp+0xfff732f0>
   853a4:	00800e44 	movi	r2,57
   853a8:	90809026 	beq	r18,r2,855ec <_dtoa_r+0x152c>
   853ac:	92000044 	addi	r8,r18,1
   853b0:	003f1f06 	br	85030 <_gp+0xfff7344c>
   853b4:	9011883a 	mov	r8,r18
   853b8:	8825883a 	mov	r18,r17
   853bc:	a023883a 	mov	r17,r20
   853c0:	003e2906 	br	84c68 <_gp+0xfff73084>
   853c4:	002b883a 	mov	r21,zero
   853c8:	0023883a 	mov	r17,zero
   853cc:	003f5406 	br	85120 <_gp+0xfff7353c>
   853d0:	61bfffc4 	addi	r6,r12,-1
   853d4:	300490fa 	slli	r2,r6,3
   853d8:	00c00274 	movhi	r3,9
   853dc:	18d06904 	addi	r3,r3,16804
   853e0:	1885883a 	add	r2,r3,r2
   853e4:	11000017 	ldw	r4,0(r2)
   853e8:	11400117 	ldw	r5,4(r2)
   853ec:	d8800717 	ldw	r2,28(sp)
   853f0:	880f883a 	mov	r7,r17
   853f4:	d9801215 	stw	r6,72(sp)
   853f8:	800d883a 	mov	r6,r16
   853fc:	db001615 	stw	r12,88(sp)
   85400:	15c00044 	addi	r23,r2,1
   85404:	008d14c0 	call	8d14c <__muldf3>
   85408:	d9401017 	ldw	r5,64(sp)
   8540c:	d9000f17 	ldw	r4,60(sp)
   85410:	d8c01515 	stw	r3,84(sp)
   85414:	d8801415 	stw	r2,80(sp)
   85418:	008e2b40 	call	8e2b4 <__fixdfsi>
   8541c:	1009883a 	mov	r4,r2
   85420:	1021883a 	mov	r16,r2
   85424:	008e3340 	call	8e334 <__floatsidf>
   85428:	d9000f17 	ldw	r4,60(sp)
   8542c:	d9401017 	ldw	r5,64(sp)
   85430:	100d883a 	mov	r6,r2
   85434:	180f883a 	mov	r7,r3
   85438:	008d9b80 	call	8d9b8 <__subdf3>
   8543c:	1829883a 	mov	r20,r3
   85440:	d8c00717 	ldw	r3,28(sp)
   85444:	84000c04 	addi	r16,r16,48
   85448:	1023883a 	mov	r17,r2
   8544c:	1c000005 	stb	r16,0(r3)
   85450:	db001617 	ldw	r12,88(sp)
   85454:	00800044 	movi	r2,1
   85458:	60802226 	beq	r12,r2,854e4 <_dtoa_r+0x1424>
   8545c:	d9c00717 	ldw	r7,28(sp)
   85460:	8805883a 	mov	r2,r17
   85464:	b82b883a 	mov	r21,r23
   85468:	3b19883a 	add	r12,r7,r12
   8546c:	6023883a 	mov	r17,r12
   85470:	a007883a 	mov	r3,r20
   85474:	dc800f15 	stw	r18,60(sp)
   85478:	000d883a 	mov	r6,zero
   8547c:	01d00934 	movhi	r7,16420
   85480:	1009883a 	mov	r4,r2
   85484:	180b883a 	mov	r5,r3
   85488:	008d14c0 	call	8d14c <__muldf3>
   8548c:	180b883a 	mov	r5,r3
   85490:	1009883a 	mov	r4,r2
   85494:	1829883a 	mov	r20,r3
   85498:	1025883a 	mov	r18,r2
   8549c:	008e2b40 	call	8e2b4 <__fixdfsi>
   854a0:	1009883a 	mov	r4,r2
   854a4:	1021883a 	mov	r16,r2
   854a8:	008e3340 	call	8e334 <__floatsidf>
   854ac:	100d883a 	mov	r6,r2
   854b0:	180f883a 	mov	r7,r3
   854b4:	9009883a 	mov	r4,r18
   854b8:	a00b883a 	mov	r5,r20
   854bc:	84000c04 	addi	r16,r16,48
   854c0:	008d9b80 	call	8d9b8 <__subdf3>
   854c4:	ad400044 	addi	r21,r21,1
   854c8:	ac3fffc5 	stb	r16,-1(r21)
   854cc:	ac7fea1e 	bne	r21,r17,85478 <_gp+0xfff73894>
   854d0:	1023883a 	mov	r17,r2
   854d4:	d8801217 	ldw	r2,72(sp)
   854d8:	dc800f17 	ldw	r18,60(sp)
   854dc:	1829883a 	mov	r20,r3
   854e0:	b8af883a 	add	r23,r23,r2
   854e4:	d9001417 	ldw	r4,80(sp)
   854e8:	d9401517 	ldw	r5,84(sp)
   854ec:	000d883a 	mov	r6,zero
   854f0:	01cff834 	movhi	r7,16352
   854f4:	008bc780 	call	8bc78 <__adddf3>
   854f8:	880d883a 	mov	r6,r17
   854fc:	a00f883a 	mov	r7,r20
   85500:	1009883a 	mov	r4,r2
   85504:	180b883a 	mov	r5,r3
   85508:	008d0580 	call	8d058 <__ledf2>
   8550c:	10003e0e 	bge	r2,zero,85608 <_dtoa_r+0x1548>
   85510:	d9001317 	ldw	r4,76(sp)
   85514:	bd3fffc3 	ldbu	r20,-1(r23)
   85518:	d9000515 	stw	r4,20(sp)
   8551c:	003d3b06 	br	84a0c <_gp+0xfff72e28>
   85520:	0027883a 	mov	r19,zero
   85524:	003f1b06 	br	85194 <_gp+0xfff735b0>
   85528:	d8800817 	ldw	r2,32(sp)
   8552c:	11e9c83a 	sub	r20,r2,r7
   85530:	0005883a 	mov	r2,zero
   85534:	003d5406 	br	84a88 <_gp+0xfff72ea4>
   85538:	00800044 	movi	r2,1
   8553c:	003dc706 	br	84c5c <_gp+0xfff73078>
   85540:	d8c00217 	ldw	r3,8(sp)
   85544:	00800d84 	movi	r2,54
   85548:	dd400a17 	ldw	r21,40(sp)
   8554c:	10c5c83a 	sub	r2,r2,r3
   85550:	dd000817 	ldw	r20,32(sp)
   85554:	003d4c06 	br	84a88 <_gp+0xfff72ea4>
   85558:	dc800f15 	stw	r18,60(sp)
   8555c:	dcc01015 	stw	r19,64(sp)
   85560:	04000084 	movi	r16,2
   85564:	003bed06 	br	8451c <_gp+0xfff72938>
   85568:	d9000617 	ldw	r4,24(sp)
   8556c:	203f0d26 	beq	r4,zero,851a4 <_gp+0xfff735c0>
   85570:	d9800c17 	ldw	r6,48(sp)
   85574:	01bcab0e 	bge	zero,r6,84824 <_gp+0xfff72c40>
   85578:	d9401017 	ldw	r5,64(sp)
   8557c:	d9000f17 	ldw	r4,60(sp)
   85580:	000d883a 	mov	r6,zero
   85584:	01d00934 	movhi	r7,16420
   85588:	008d14c0 	call	8d14c <__muldf3>
   8558c:	81000044 	addi	r4,r16,1
   85590:	d8800f15 	stw	r2,60(sp)
   85594:	d8c01015 	stw	r3,64(sp)
   85598:	008e3340 	call	8e334 <__floatsidf>
   8559c:	d9800f17 	ldw	r6,60(sp)
   855a0:	d9c01017 	ldw	r7,64(sp)
   855a4:	1009883a 	mov	r4,r2
   855a8:	180b883a 	mov	r5,r3
   855ac:	008d14c0 	call	8d14c <__muldf3>
   855b0:	01d00734 	movhi	r7,16412
   855b4:	000d883a 	mov	r6,zero
   855b8:	1009883a 	mov	r4,r2
   855bc:	180b883a 	mov	r5,r3
   855c0:	008bc780 	call	8bc78 <__adddf3>
   855c4:	d9c00517 	ldw	r7,20(sp)
   855c8:	047f3034 	movhi	r17,64704
   855cc:	1021883a 	mov	r16,r2
   855d0:	39ffffc4 	addi	r7,r7,-1
   855d4:	d9c01315 	stw	r7,76(sp)
   855d8:	1c63883a 	add	r17,r3,r17
   855dc:	db000c17 	ldw	r12,48(sp)
   855e0:	003bea06 	br	8458c <_gp+0xfff729a8>
   855e4:	dc000915 	stw	r16,36(sp)
   855e8:	003e0e06 	br	84e24 <_gp+0xfff73240>
   855ec:	01000e44 	movi	r4,57
   855f0:	8825883a 	mov	r18,r17
   855f4:	9dc00044 	addi	r23,r19,1
   855f8:	99000005 	stb	r4,0(r19)
   855fc:	a023883a 	mov	r17,r20
   85600:	dc000915 	stw	r16,36(sp)
   85604:	003da406 	br	84c98 <_gp+0xfff730b4>
   85608:	d9801417 	ldw	r6,80(sp)
   8560c:	d9c01517 	ldw	r7,84(sp)
   85610:	0009883a 	mov	r4,zero
   85614:	014ff834 	movhi	r5,16352
   85618:	008d9b80 	call	8d9b8 <__subdf3>
   8561c:	880d883a 	mov	r6,r17
   85620:	a00f883a 	mov	r7,r20
   85624:	1009883a 	mov	r4,r2
   85628:	180b883a 	mov	r5,r3
   8562c:	008cf7c0 	call	8cf7c <__gedf2>
   85630:	00bc7c0e 	bge	zero,r2,84824 <_gp+0xfff72c40>
   85634:	01000c04 	movi	r4,48
   85638:	00000106 	br	85640 <_dtoa_r+0x1580>
   8563c:	102f883a 	mov	r23,r2
   85640:	b8bfffc4 	addi	r2,r23,-1
   85644:	10c00007 	ldb	r3,0(r2)
   85648:	193ffc26 	beq	r3,r4,8563c <_gp+0xfff73a58>
   8564c:	d9801317 	ldw	r6,76(sp)
   85650:	d9800515 	stw	r6,20(sp)
   85654:	003c4406 	br	84768 <_gp+0xfff72b84>
   85658:	d9801317 	ldw	r6,76(sp)
   8565c:	d9800515 	stw	r6,20(sp)
   85660:	003cea06 	br	84a0c <_gp+0xfff72e28>
   85664:	dd800f17 	ldw	r22,60(sp)
   85668:	dcc01017 	ldw	r19,64(sp)
   8566c:	dc801217 	ldw	r18,72(sp)
   85670:	003c6c06 	br	84824 <_gp+0xfff72c40>
   85674:	903e031e 	bne	r18,zero,84e84 <_gp+0xfff732a0>
   85678:	003ebb06 	br	85168 <_gp+0xfff73584>
   8567c:	103e6c1e 	bne	r2,zero,85030 <_gp+0xfff7344c>
   85680:	4080004c 	andi	r2,r8,1
   85684:	103e6a26 	beq	r2,zero,85030 <_gp+0xfff7344c>
   85688:	003e6606 	br	85024 <_gp+0xfff73440>
   8568c:	d8c00317 	ldw	r3,12(sp)
   85690:	00800084 	movi	r2,2
   85694:	10c02916 	blt	r2,r3,8573c <_dtoa_r+0x167c>
   85698:	d9000c17 	ldw	r4,48(sp)
   8569c:	003e8806 	br	850c0 <_gp+0xfff734dc>
   856a0:	04000084 	movi	r16,2
   856a4:	003b9d06 	br	8451c <_gp+0xfff72938>
   856a8:	d9001317 	ldw	r4,76(sp)
   856ac:	d9000515 	stw	r4,20(sp)
   856b0:	003cd606 	br	84a0c <_gp+0xfff72e28>
   856b4:	d8801317 	ldw	r2,76(sp)
   856b8:	d8800515 	stw	r2,20(sp)
   856bc:	003c2a06 	br	84768 <_gp+0xfff72b84>
   856c0:	d9800317 	ldw	r6,12(sp)
   856c4:	00800084 	movi	r2,2
   856c8:	11801516 	blt	r2,r6,85720 <_dtoa_r+0x1660>
   856cc:	d9c00c17 	ldw	r7,48(sp)
   856d0:	d9c00615 	stw	r7,24(sp)
   856d4:	003df706 	br	84eb4 <_gp+0xfff732d0>
   856d8:	193d3926 	beq	r3,r4,84bc0 <_gp+0xfff72fdc>
   856dc:	00c00f04 	movi	r3,60
   856e0:	1885c83a 	sub	r2,r3,r2
   856e4:	003ddf06 	br	84e64 <_gp+0xfff73280>
   856e8:	e009883a 	mov	r4,fp
   856ec:	e0001115 	stw	zero,68(fp)
   856f0:	000b883a 	mov	r5,zero
   856f4:	00877780 	call	87778 <_Balloc>
   856f8:	d8800715 	stw	r2,28(sp)
   856fc:	d8c00717 	ldw	r3,28(sp)
   85700:	00bfffc4 	movi	r2,-1
   85704:	01000044 	movi	r4,1
   85708:	d8800c15 	stw	r2,48(sp)
   8570c:	e0c01015 	stw	r3,64(fp)
   85710:	d9000b15 	stw	r4,44(sp)
   85714:	d8800615 	stw	r2,24(sp)
   85718:	d8002215 	stw	zero,136(sp)
   8571c:	003c4106 	br	84824 <_gp+0xfff72c40>
   85720:	d8c00c17 	ldw	r3,48(sp)
   85724:	d8c00615 	stw	r3,24(sp)
   85728:	003e7006 	br	850ec <_gp+0xfff73508>
   8572c:	04400044 	movi	r17,1
   85730:	003b2006 	br	843b4 <_gp+0xfff727d0>
   85734:	000b883a 	mov	r5,zero
   85738:	003b3d06 	br	84430 <_gp+0xfff7284c>
   8573c:	d8800c17 	ldw	r2,48(sp)
   85740:	d8800615 	stw	r2,24(sp)
   85744:	003e6906 	br	850ec <_gp+0xfff73508>

00085748 <__sflush_r>:
   85748:	2880030b 	ldhu	r2,12(r5)
   8574c:	defffb04 	addi	sp,sp,-20
   85750:	dcc00315 	stw	r19,12(sp)
   85754:	dc400115 	stw	r17,4(sp)
   85758:	dfc00415 	stw	ra,16(sp)
   8575c:	dc800215 	stw	r18,8(sp)
   85760:	dc000015 	stw	r16,0(sp)
   85764:	10c0020c 	andi	r3,r2,8
   85768:	2823883a 	mov	r17,r5
   8576c:	2027883a 	mov	r19,r4
   85770:	1800311e 	bne	r3,zero,85838 <__sflush_r+0xf0>
   85774:	28c00117 	ldw	r3,4(r5)
   85778:	10820014 	ori	r2,r2,2048
   8577c:	2880030d 	sth	r2,12(r5)
   85780:	00c04b0e 	bge	zero,r3,858b0 <__sflush_r+0x168>
   85784:	8a000a17 	ldw	r8,40(r17)
   85788:	40002326 	beq	r8,zero,85818 <__sflush_r+0xd0>
   8578c:	9c000017 	ldw	r16,0(r19)
   85790:	10c4000c 	andi	r3,r2,4096
   85794:	98000015 	stw	zero,0(r19)
   85798:	18004826 	beq	r3,zero,858bc <__sflush_r+0x174>
   8579c:	89801417 	ldw	r6,80(r17)
   857a0:	10c0010c 	andi	r3,r2,4
   857a4:	18000626 	beq	r3,zero,857c0 <__sflush_r+0x78>
   857a8:	88c00117 	ldw	r3,4(r17)
   857ac:	88800c17 	ldw	r2,48(r17)
   857b0:	30cdc83a 	sub	r6,r6,r3
   857b4:	10000226 	beq	r2,zero,857c0 <__sflush_r+0x78>
   857b8:	88800f17 	ldw	r2,60(r17)
   857bc:	308dc83a 	sub	r6,r6,r2
   857c0:	89400717 	ldw	r5,28(r17)
   857c4:	000f883a 	mov	r7,zero
   857c8:	9809883a 	mov	r4,r19
   857cc:	403ee83a 	callr	r8
   857d0:	00ffffc4 	movi	r3,-1
   857d4:	10c04426 	beq	r2,r3,858e8 <__sflush_r+0x1a0>
   857d8:	88c0030b 	ldhu	r3,12(r17)
   857dc:	89000417 	ldw	r4,16(r17)
   857e0:	88000115 	stw	zero,4(r17)
   857e4:	197dffcc 	andi	r5,r3,63487
   857e8:	8940030d 	sth	r5,12(r17)
   857ec:	89000015 	stw	r4,0(r17)
   857f0:	18c4000c 	andi	r3,r3,4096
   857f4:	18002c1e 	bne	r3,zero,858a8 <__sflush_r+0x160>
   857f8:	89400c17 	ldw	r5,48(r17)
   857fc:	9c000015 	stw	r16,0(r19)
   85800:	28000526 	beq	r5,zero,85818 <__sflush_r+0xd0>
   85804:	88801004 	addi	r2,r17,64
   85808:	28800226 	beq	r5,r2,85814 <__sflush_r+0xcc>
   8580c:	9809883a 	mov	r4,r19
   85810:	0085ec40 	call	85ec4 <_free_r>
   85814:	88000c15 	stw	zero,48(r17)
   85818:	0005883a 	mov	r2,zero
   8581c:	dfc00417 	ldw	ra,16(sp)
   85820:	dcc00317 	ldw	r19,12(sp)
   85824:	dc800217 	ldw	r18,8(sp)
   85828:	dc400117 	ldw	r17,4(sp)
   8582c:	dc000017 	ldw	r16,0(sp)
   85830:	dec00504 	addi	sp,sp,20
   85834:	f800283a 	ret
   85838:	2c800417 	ldw	r18,16(r5)
   8583c:	903ff626 	beq	r18,zero,85818 <_gp+0xfff73c34>
   85840:	2c000017 	ldw	r16,0(r5)
   85844:	108000cc 	andi	r2,r2,3
   85848:	2c800015 	stw	r18,0(r5)
   8584c:	84a1c83a 	sub	r16,r16,r18
   85850:	1000131e 	bne	r2,zero,858a0 <__sflush_r+0x158>
   85854:	28800517 	ldw	r2,20(r5)
   85858:	88800215 	stw	r2,8(r17)
   8585c:	04000316 	blt	zero,r16,8586c <__sflush_r+0x124>
   85860:	003fed06 	br	85818 <_gp+0xfff73c34>
   85864:	90a5883a 	add	r18,r18,r2
   85868:	043feb0e 	bge	zero,r16,85818 <_gp+0xfff73c34>
   8586c:	88800917 	ldw	r2,36(r17)
   85870:	89400717 	ldw	r5,28(r17)
   85874:	800f883a 	mov	r7,r16
   85878:	900d883a 	mov	r6,r18
   8587c:	9809883a 	mov	r4,r19
   85880:	103ee83a 	callr	r2
   85884:	80a1c83a 	sub	r16,r16,r2
   85888:	00bff616 	blt	zero,r2,85864 <_gp+0xfff73c80>
   8588c:	88c0030b 	ldhu	r3,12(r17)
   85890:	00bfffc4 	movi	r2,-1
   85894:	18c01014 	ori	r3,r3,64
   85898:	88c0030d 	sth	r3,12(r17)
   8589c:	003fdf06 	br	8581c <_gp+0xfff73c38>
   858a0:	0005883a 	mov	r2,zero
   858a4:	003fec06 	br	85858 <_gp+0xfff73c74>
   858a8:	88801415 	stw	r2,80(r17)
   858ac:	003fd206 	br	857f8 <_gp+0xfff73c14>
   858b0:	28c00f17 	ldw	r3,60(r5)
   858b4:	00ffb316 	blt	zero,r3,85784 <_gp+0xfff73ba0>
   858b8:	003fd706 	br	85818 <_gp+0xfff73c34>
   858bc:	89400717 	ldw	r5,28(r17)
   858c0:	000d883a 	mov	r6,zero
   858c4:	01c00044 	movi	r7,1
   858c8:	9809883a 	mov	r4,r19
   858cc:	403ee83a 	callr	r8
   858d0:	100d883a 	mov	r6,r2
   858d4:	00bfffc4 	movi	r2,-1
   858d8:	30801426 	beq	r6,r2,8592c <__sflush_r+0x1e4>
   858dc:	8880030b 	ldhu	r2,12(r17)
   858e0:	8a000a17 	ldw	r8,40(r17)
   858e4:	003fae06 	br	857a0 <_gp+0xfff73bbc>
   858e8:	98c00017 	ldw	r3,0(r19)
   858ec:	183fba26 	beq	r3,zero,857d8 <_gp+0xfff73bf4>
   858f0:	01000744 	movi	r4,29
   858f4:	19000626 	beq	r3,r4,85910 <__sflush_r+0x1c8>
   858f8:	01000584 	movi	r4,22
   858fc:	19000426 	beq	r3,r4,85910 <__sflush_r+0x1c8>
   85900:	88c0030b 	ldhu	r3,12(r17)
   85904:	18c01014 	ori	r3,r3,64
   85908:	88c0030d 	sth	r3,12(r17)
   8590c:	003fc306 	br	8581c <_gp+0xfff73c38>
   85910:	8880030b 	ldhu	r2,12(r17)
   85914:	88c00417 	ldw	r3,16(r17)
   85918:	88000115 	stw	zero,4(r17)
   8591c:	10bdffcc 	andi	r2,r2,63487
   85920:	8880030d 	sth	r2,12(r17)
   85924:	88c00015 	stw	r3,0(r17)
   85928:	003fb306 	br	857f8 <_gp+0xfff73c14>
   8592c:	98800017 	ldw	r2,0(r19)
   85930:	103fea26 	beq	r2,zero,858dc <_gp+0xfff73cf8>
   85934:	00c00744 	movi	r3,29
   85938:	10c00226 	beq	r2,r3,85944 <__sflush_r+0x1fc>
   8593c:	00c00584 	movi	r3,22
   85940:	10c0031e 	bne	r2,r3,85950 <__sflush_r+0x208>
   85944:	9c000015 	stw	r16,0(r19)
   85948:	0005883a 	mov	r2,zero
   8594c:	003fb306 	br	8581c <_gp+0xfff73c38>
   85950:	88c0030b 	ldhu	r3,12(r17)
   85954:	3005883a 	mov	r2,r6
   85958:	18c01014 	ori	r3,r3,64
   8595c:	88c0030d 	sth	r3,12(r17)
   85960:	003fae06 	br	8581c <_gp+0xfff73c38>

00085964 <_fflush_r>:
   85964:	defffd04 	addi	sp,sp,-12
   85968:	dc000115 	stw	r16,4(sp)
   8596c:	dfc00215 	stw	ra,8(sp)
   85970:	2021883a 	mov	r16,r4
   85974:	20000226 	beq	r4,zero,85980 <_fflush_r+0x1c>
   85978:	20800e17 	ldw	r2,56(r4)
   8597c:	10000c26 	beq	r2,zero,859b0 <_fflush_r+0x4c>
   85980:	2880030f 	ldh	r2,12(r5)
   85984:	1000051e 	bne	r2,zero,8599c <_fflush_r+0x38>
   85988:	0005883a 	mov	r2,zero
   8598c:	dfc00217 	ldw	ra,8(sp)
   85990:	dc000117 	ldw	r16,4(sp)
   85994:	dec00304 	addi	sp,sp,12
   85998:	f800283a 	ret
   8599c:	8009883a 	mov	r4,r16
   859a0:	dfc00217 	ldw	ra,8(sp)
   859a4:	dc000117 	ldw	r16,4(sp)
   859a8:	dec00304 	addi	sp,sp,12
   859ac:	00857481 	jmpi	85748 <__sflush_r>
   859b0:	d9400015 	stw	r5,0(sp)
   859b4:	0085d500 	call	85d50 <__sinit>
   859b8:	d9400017 	ldw	r5,0(sp)
   859bc:	003ff006 	br	85980 <_gp+0xfff73d9c>

000859c0 <fflush>:
   859c0:	20000526 	beq	r4,zero,859d8 <fflush+0x18>
   859c4:	00800474 	movhi	r2,17
   859c8:	10a6fa04 	addi	r2,r2,-25624
   859cc:	200b883a 	mov	r5,r4
   859d0:	11000017 	ldw	r4,0(r2)
   859d4:	00859641 	jmpi	85964 <_fflush_r>
   859d8:	00800474 	movhi	r2,17
   859dc:	10a6f904 	addi	r2,r2,-25628
   859e0:	11000017 	ldw	r4,0(r2)
   859e4:	01400234 	movhi	r5,8
   859e8:	29565904 	addi	r5,r5,22884
   859ec:	00867601 	jmpi	86760 <_fwalk_reent>

000859f0 <__fp_unlock>:
   859f0:	0005883a 	mov	r2,zero
   859f4:	f800283a 	ret

000859f8 <_cleanup_r>:
   859f8:	01400274 	movhi	r5,9
   859fc:	296a3f04 	addi	r5,r5,-22276
   85a00:	00867601 	jmpi	86760 <_fwalk_reent>

00085a04 <__sinit.part.1>:
   85a04:	defff704 	addi	sp,sp,-36
   85a08:	00c00234 	movhi	r3,8
   85a0c:	dfc00815 	stw	ra,32(sp)
   85a10:	ddc00715 	stw	r23,28(sp)
   85a14:	dd800615 	stw	r22,24(sp)
   85a18:	dd400515 	stw	r21,20(sp)
   85a1c:	dd000415 	stw	r20,16(sp)
   85a20:	dcc00315 	stw	r19,12(sp)
   85a24:	dc800215 	stw	r18,8(sp)
   85a28:	dc400115 	stw	r17,4(sp)
   85a2c:	dc000015 	stw	r16,0(sp)
   85a30:	18d67e04 	addi	r3,r3,23032
   85a34:	24000117 	ldw	r16,4(r4)
   85a38:	20c00f15 	stw	r3,60(r4)
   85a3c:	2080bb04 	addi	r2,r4,748
   85a40:	00c000c4 	movi	r3,3
   85a44:	20c0b915 	stw	r3,740(r4)
   85a48:	2080ba15 	stw	r2,744(r4)
   85a4c:	2000b815 	stw	zero,736(r4)
   85a50:	05c00204 	movi	r23,8
   85a54:	00800104 	movi	r2,4
   85a58:	2025883a 	mov	r18,r4
   85a5c:	b80d883a 	mov	r6,r23
   85a60:	81001704 	addi	r4,r16,92
   85a64:	000b883a 	mov	r5,zero
   85a68:	80000015 	stw	zero,0(r16)
   85a6c:	80000115 	stw	zero,4(r16)
   85a70:	80000215 	stw	zero,8(r16)
   85a74:	8080030d 	sth	r2,12(r16)
   85a78:	80001915 	stw	zero,100(r16)
   85a7c:	8000038d 	sth	zero,14(r16)
   85a80:	80000415 	stw	zero,16(r16)
   85a84:	80000515 	stw	zero,20(r16)
   85a88:	80000615 	stw	zero,24(r16)
   85a8c:	00876500 	call	87650 <memset>
   85a90:	05800274 	movhi	r22,9
   85a94:	94400217 	ldw	r17,8(r18)
   85a98:	05400274 	movhi	r21,9
   85a9c:	05000274 	movhi	r20,9
   85aa0:	04c00274 	movhi	r19,9
   85aa4:	b5a39704 	addi	r22,r22,-29092
   85aa8:	ad63ae04 	addi	r21,r21,-29000
   85aac:	a523cd04 	addi	r20,r20,-28876
   85ab0:	9ce3e404 	addi	r19,r19,-28784
   85ab4:	85800815 	stw	r22,32(r16)
   85ab8:	85400915 	stw	r21,36(r16)
   85abc:	85000a15 	stw	r20,40(r16)
   85ac0:	84c00b15 	stw	r19,44(r16)
   85ac4:	84000715 	stw	r16,28(r16)
   85ac8:	00800284 	movi	r2,10
   85acc:	8880030d 	sth	r2,12(r17)
   85ad0:	00800044 	movi	r2,1
   85ad4:	b80d883a 	mov	r6,r23
   85ad8:	89001704 	addi	r4,r17,92
   85adc:	000b883a 	mov	r5,zero
   85ae0:	88000015 	stw	zero,0(r17)
   85ae4:	88000115 	stw	zero,4(r17)
   85ae8:	88000215 	stw	zero,8(r17)
   85aec:	88001915 	stw	zero,100(r17)
   85af0:	8880038d 	sth	r2,14(r17)
   85af4:	88000415 	stw	zero,16(r17)
   85af8:	88000515 	stw	zero,20(r17)
   85afc:	88000615 	stw	zero,24(r17)
   85b00:	00876500 	call	87650 <memset>
   85b04:	94000317 	ldw	r16,12(r18)
   85b08:	00800484 	movi	r2,18
   85b0c:	8c400715 	stw	r17,28(r17)
   85b10:	8d800815 	stw	r22,32(r17)
   85b14:	8d400915 	stw	r21,36(r17)
   85b18:	8d000a15 	stw	r20,40(r17)
   85b1c:	8cc00b15 	stw	r19,44(r17)
   85b20:	8080030d 	sth	r2,12(r16)
   85b24:	00800084 	movi	r2,2
   85b28:	80000015 	stw	zero,0(r16)
   85b2c:	80000115 	stw	zero,4(r16)
   85b30:	80000215 	stw	zero,8(r16)
   85b34:	80001915 	stw	zero,100(r16)
   85b38:	8080038d 	sth	r2,14(r16)
   85b3c:	80000415 	stw	zero,16(r16)
   85b40:	80000515 	stw	zero,20(r16)
   85b44:	80000615 	stw	zero,24(r16)
   85b48:	b80d883a 	mov	r6,r23
   85b4c:	000b883a 	mov	r5,zero
   85b50:	81001704 	addi	r4,r16,92
   85b54:	00876500 	call	87650 <memset>
   85b58:	00800044 	movi	r2,1
   85b5c:	84000715 	stw	r16,28(r16)
   85b60:	85800815 	stw	r22,32(r16)
   85b64:	85400915 	stw	r21,36(r16)
   85b68:	85000a15 	stw	r20,40(r16)
   85b6c:	84c00b15 	stw	r19,44(r16)
   85b70:	90800e15 	stw	r2,56(r18)
   85b74:	dfc00817 	ldw	ra,32(sp)
   85b78:	ddc00717 	ldw	r23,28(sp)
   85b7c:	dd800617 	ldw	r22,24(sp)
   85b80:	dd400517 	ldw	r21,20(sp)
   85b84:	dd000417 	ldw	r20,16(sp)
   85b88:	dcc00317 	ldw	r19,12(sp)
   85b8c:	dc800217 	ldw	r18,8(sp)
   85b90:	dc400117 	ldw	r17,4(sp)
   85b94:	dc000017 	ldw	r16,0(sp)
   85b98:	dec00904 	addi	sp,sp,36
   85b9c:	f800283a 	ret

00085ba0 <__fp_lock>:
   85ba0:	0005883a 	mov	r2,zero
   85ba4:	f800283a 	ret

00085ba8 <__sfmoreglue>:
   85ba8:	defffc04 	addi	sp,sp,-16
   85bac:	dc800215 	stw	r18,8(sp)
   85bb0:	2825883a 	mov	r18,r5
   85bb4:	dc000015 	stw	r16,0(sp)
   85bb8:	01401a04 	movi	r5,104
   85bbc:	2021883a 	mov	r16,r4
   85bc0:	913fffc4 	addi	r4,r18,-1
   85bc4:	dfc00315 	stw	ra,12(sp)
   85bc8:	dc400115 	stw	r17,4(sp)
   85bcc:	00817900 	call	81790 <__mulsi3>
   85bd0:	8009883a 	mov	r4,r16
   85bd4:	11401d04 	addi	r5,r2,116
   85bd8:	1023883a 	mov	r17,r2
   85bdc:	0086abc0 	call	86abc <_malloc_r>
   85be0:	1021883a 	mov	r16,r2
   85be4:	10000726 	beq	r2,zero,85c04 <__sfmoreglue+0x5c>
   85be8:	11000304 	addi	r4,r2,12
   85bec:	10000015 	stw	zero,0(r2)
   85bf0:	14800115 	stw	r18,4(r2)
   85bf4:	11000215 	stw	r4,8(r2)
   85bf8:	89801a04 	addi	r6,r17,104
   85bfc:	000b883a 	mov	r5,zero
   85c00:	00876500 	call	87650 <memset>
   85c04:	8005883a 	mov	r2,r16
   85c08:	dfc00317 	ldw	ra,12(sp)
   85c0c:	dc800217 	ldw	r18,8(sp)
   85c10:	dc400117 	ldw	r17,4(sp)
   85c14:	dc000017 	ldw	r16,0(sp)
   85c18:	dec00404 	addi	sp,sp,16
   85c1c:	f800283a 	ret

00085c20 <__sfp>:
   85c20:	defffb04 	addi	sp,sp,-20
   85c24:	dc000015 	stw	r16,0(sp)
   85c28:	04000474 	movhi	r16,17
   85c2c:	8426f904 	addi	r16,r16,-25628
   85c30:	dcc00315 	stw	r19,12(sp)
   85c34:	2027883a 	mov	r19,r4
   85c38:	81000017 	ldw	r4,0(r16)
   85c3c:	dfc00415 	stw	ra,16(sp)
   85c40:	dc800215 	stw	r18,8(sp)
   85c44:	20800e17 	ldw	r2,56(r4)
   85c48:	dc400115 	stw	r17,4(sp)
   85c4c:	1000021e 	bne	r2,zero,85c58 <__sfp+0x38>
   85c50:	0085a040 	call	85a04 <__sinit.part.1>
   85c54:	81000017 	ldw	r4,0(r16)
   85c58:	2480b804 	addi	r18,r4,736
   85c5c:	047fffc4 	movi	r17,-1
   85c60:	91000117 	ldw	r4,4(r18)
   85c64:	94000217 	ldw	r16,8(r18)
   85c68:	213fffc4 	addi	r4,r4,-1
   85c6c:	20000a16 	blt	r4,zero,85c98 <__sfp+0x78>
   85c70:	8080030f 	ldh	r2,12(r16)
   85c74:	10000c26 	beq	r2,zero,85ca8 <__sfp+0x88>
   85c78:	80c01d04 	addi	r3,r16,116
   85c7c:	00000206 	br	85c88 <__sfp+0x68>
   85c80:	18bfe60f 	ldh	r2,-104(r3)
   85c84:	10000826 	beq	r2,zero,85ca8 <__sfp+0x88>
   85c88:	213fffc4 	addi	r4,r4,-1
   85c8c:	1c3ffd04 	addi	r16,r3,-12
   85c90:	18c01a04 	addi	r3,r3,104
   85c94:	247ffa1e 	bne	r4,r17,85c80 <_gp+0xfff7409c>
   85c98:	90800017 	ldw	r2,0(r18)
   85c9c:	10001d26 	beq	r2,zero,85d14 <__sfp+0xf4>
   85ca0:	1025883a 	mov	r18,r2
   85ca4:	003fee06 	br	85c60 <_gp+0xfff7407c>
   85ca8:	00bfffc4 	movi	r2,-1
   85cac:	8080038d 	sth	r2,14(r16)
   85cb0:	00800044 	movi	r2,1
   85cb4:	8080030d 	sth	r2,12(r16)
   85cb8:	80001915 	stw	zero,100(r16)
   85cbc:	80000015 	stw	zero,0(r16)
   85cc0:	80000215 	stw	zero,8(r16)
   85cc4:	80000115 	stw	zero,4(r16)
   85cc8:	80000415 	stw	zero,16(r16)
   85ccc:	80000515 	stw	zero,20(r16)
   85cd0:	80000615 	stw	zero,24(r16)
   85cd4:	01800204 	movi	r6,8
   85cd8:	000b883a 	mov	r5,zero
   85cdc:	81001704 	addi	r4,r16,92
   85ce0:	00876500 	call	87650 <memset>
   85ce4:	8005883a 	mov	r2,r16
   85ce8:	80000c15 	stw	zero,48(r16)
   85cec:	80000d15 	stw	zero,52(r16)
   85cf0:	80001115 	stw	zero,68(r16)
   85cf4:	80001215 	stw	zero,72(r16)
   85cf8:	dfc00417 	ldw	ra,16(sp)
   85cfc:	dcc00317 	ldw	r19,12(sp)
   85d00:	dc800217 	ldw	r18,8(sp)
   85d04:	dc400117 	ldw	r17,4(sp)
   85d08:	dc000017 	ldw	r16,0(sp)
   85d0c:	dec00504 	addi	sp,sp,20
   85d10:	f800283a 	ret
   85d14:	01400104 	movi	r5,4
   85d18:	9809883a 	mov	r4,r19
   85d1c:	0085ba80 	call	85ba8 <__sfmoreglue>
   85d20:	90800015 	stw	r2,0(r18)
   85d24:	103fde1e 	bne	r2,zero,85ca0 <_gp+0xfff740bc>
   85d28:	00800304 	movi	r2,12
   85d2c:	98800015 	stw	r2,0(r19)
   85d30:	0005883a 	mov	r2,zero
   85d34:	003ff006 	br	85cf8 <_gp+0xfff74114>

00085d38 <_cleanup>:
   85d38:	00800474 	movhi	r2,17
   85d3c:	10a6f904 	addi	r2,r2,-25628
   85d40:	11000017 	ldw	r4,0(r2)
   85d44:	01400274 	movhi	r5,9
   85d48:	296a3f04 	addi	r5,r5,-22276
   85d4c:	00867601 	jmpi	86760 <_fwalk_reent>

00085d50 <__sinit>:
   85d50:	20800e17 	ldw	r2,56(r4)
   85d54:	10000126 	beq	r2,zero,85d5c <__sinit+0xc>
   85d58:	f800283a 	ret
   85d5c:	0085a041 	jmpi	85a04 <__sinit.part.1>

00085d60 <__sfp_lock_acquire>:
   85d60:	f800283a 	ret

00085d64 <__sfp_lock_release>:
   85d64:	f800283a 	ret

00085d68 <__sinit_lock_acquire>:
   85d68:	f800283a 	ret

00085d6c <__sinit_lock_release>:
   85d6c:	f800283a 	ret

00085d70 <__fp_lock_all>:
   85d70:	00800474 	movhi	r2,17
   85d74:	10a6fa04 	addi	r2,r2,-25624
   85d78:	11000017 	ldw	r4,0(r2)
   85d7c:	01400234 	movhi	r5,8
   85d80:	2956e804 	addi	r5,r5,23456
   85d84:	008669c1 	jmpi	8669c <_fwalk>

00085d88 <__fp_unlock_all>:
   85d88:	00800474 	movhi	r2,17
   85d8c:	10a6fa04 	addi	r2,r2,-25624
   85d90:	11000017 	ldw	r4,0(r2)
   85d94:	01400234 	movhi	r5,8
   85d98:	29567c04 	addi	r5,r5,23024
   85d9c:	008669c1 	jmpi	8669c <_fwalk>

00085da0 <_malloc_trim_r>:
   85da0:	defffb04 	addi	sp,sp,-20
   85da4:	dcc00315 	stw	r19,12(sp)
   85da8:	04c00474 	movhi	r19,17
   85dac:	dc800215 	stw	r18,8(sp)
   85db0:	dc400115 	stw	r17,4(sp)
   85db4:	dc000015 	stw	r16,0(sp)
   85db8:	dfc00415 	stw	ra,16(sp)
   85dbc:	2821883a 	mov	r16,r5
   85dc0:	9ce12704 	addi	r19,r19,-31588
   85dc4:	2025883a 	mov	r18,r4
   85dc8:	008ea540 	call	8ea54 <__malloc_lock>
   85dcc:	98800217 	ldw	r2,8(r19)
   85dd0:	14400117 	ldw	r17,4(r2)
   85dd4:	00bfff04 	movi	r2,-4
   85dd8:	88a2703a 	and	r17,r17,r2
   85ddc:	8c21c83a 	sub	r16,r17,r16
   85de0:	8403fbc4 	addi	r16,r16,4079
   85de4:	8020d33a 	srli	r16,r16,12
   85de8:	0083ffc4 	movi	r2,4095
   85dec:	843fffc4 	addi	r16,r16,-1
   85df0:	8020933a 	slli	r16,r16,12
   85df4:	1400060e 	bge	r2,r16,85e10 <_malloc_trim_r+0x70>
   85df8:	000b883a 	mov	r5,zero
   85dfc:	9009883a 	mov	r4,r18
   85e00:	0088e080 	call	88e08 <_sbrk_r>
   85e04:	98c00217 	ldw	r3,8(r19)
   85e08:	1c47883a 	add	r3,r3,r17
   85e0c:	10c00a26 	beq	r2,r3,85e38 <_malloc_trim_r+0x98>
   85e10:	9009883a 	mov	r4,r18
   85e14:	008ea780 	call	8ea78 <__malloc_unlock>
   85e18:	0005883a 	mov	r2,zero
   85e1c:	dfc00417 	ldw	ra,16(sp)
   85e20:	dcc00317 	ldw	r19,12(sp)
   85e24:	dc800217 	ldw	r18,8(sp)
   85e28:	dc400117 	ldw	r17,4(sp)
   85e2c:	dc000017 	ldw	r16,0(sp)
   85e30:	dec00504 	addi	sp,sp,20
   85e34:	f800283a 	ret
   85e38:	040bc83a 	sub	r5,zero,r16
   85e3c:	9009883a 	mov	r4,r18
   85e40:	0088e080 	call	88e08 <_sbrk_r>
   85e44:	00ffffc4 	movi	r3,-1
   85e48:	10c00d26 	beq	r2,r3,85e80 <_malloc_trim_r+0xe0>
   85e4c:	00c00474 	movhi	r3,17
   85e50:	18e71d04 	addi	r3,r3,-25484
   85e54:	18800017 	ldw	r2,0(r3)
   85e58:	99000217 	ldw	r4,8(r19)
   85e5c:	8c23c83a 	sub	r17,r17,r16
   85e60:	8c400054 	ori	r17,r17,1
   85e64:	1421c83a 	sub	r16,r2,r16
   85e68:	24400115 	stw	r17,4(r4)
   85e6c:	9009883a 	mov	r4,r18
   85e70:	1c000015 	stw	r16,0(r3)
   85e74:	008ea780 	call	8ea78 <__malloc_unlock>
   85e78:	00800044 	movi	r2,1
   85e7c:	003fe706 	br	85e1c <_gp+0xfff74238>
   85e80:	000b883a 	mov	r5,zero
   85e84:	9009883a 	mov	r4,r18
   85e88:	0088e080 	call	88e08 <_sbrk_r>
   85e8c:	99000217 	ldw	r4,8(r19)
   85e90:	014003c4 	movi	r5,15
   85e94:	1107c83a 	sub	r3,r2,r4
   85e98:	28ffdd0e 	bge	r5,r3,85e10 <_gp+0xfff7422c>
   85e9c:	01400474 	movhi	r5,17
   85ea0:	2966fc04 	addi	r5,r5,-25616
   85ea4:	29400017 	ldw	r5,0(r5)
   85ea8:	18c00054 	ori	r3,r3,1
   85eac:	20c00115 	stw	r3,4(r4)
   85eb0:	00c00474 	movhi	r3,17
   85eb4:	1145c83a 	sub	r2,r2,r5
   85eb8:	18e71d04 	addi	r3,r3,-25484
   85ebc:	18800015 	stw	r2,0(r3)
   85ec0:	003fd306 	br	85e10 <_gp+0xfff7422c>

00085ec4 <_free_r>:
   85ec4:	28004126 	beq	r5,zero,85fcc <_free_r+0x108>
   85ec8:	defffd04 	addi	sp,sp,-12
   85ecc:	dc400115 	stw	r17,4(sp)
   85ed0:	dc000015 	stw	r16,0(sp)
   85ed4:	2023883a 	mov	r17,r4
   85ed8:	2821883a 	mov	r16,r5
   85edc:	dfc00215 	stw	ra,8(sp)
   85ee0:	008ea540 	call	8ea54 <__malloc_lock>
   85ee4:	81ffff17 	ldw	r7,-4(r16)
   85ee8:	00bfff84 	movi	r2,-2
   85eec:	01000474 	movhi	r4,17
   85ef0:	81bffe04 	addi	r6,r16,-8
   85ef4:	3884703a 	and	r2,r7,r2
   85ef8:	21212704 	addi	r4,r4,-31588
   85efc:	308b883a 	add	r5,r6,r2
   85f00:	2a400117 	ldw	r9,4(r5)
   85f04:	22000217 	ldw	r8,8(r4)
   85f08:	00ffff04 	movi	r3,-4
   85f0c:	48c6703a 	and	r3,r9,r3
   85f10:	2a005726 	beq	r5,r8,86070 <_free_r+0x1ac>
   85f14:	28c00115 	stw	r3,4(r5)
   85f18:	39c0004c 	andi	r7,r7,1
   85f1c:	3800091e 	bne	r7,zero,85f44 <_free_r+0x80>
   85f20:	823ffe17 	ldw	r8,-8(r16)
   85f24:	22400204 	addi	r9,r4,8
   85f28:	320dc83a 	sub	r6,r6,r8
   85f2c:	31c00217 	ldw	r7,8(r6)
   85f30:	1205883a 	add	r2,r2,r8
   85f34:	3a406526 	beq	r7,r9,860cc <_free_r+0x208>
   85f38:	32000317 	ldw	r8,12(r6)
   85f3c:	3a000315 	stw	r8,12(r7)
   85f40:	41c00215 	stw	r7,8(r8)
   85f44:	28cf883a 	add	r7,r5,r3
   85f48:	39c00117 	ldw	r7,4(r7)
   85f4c:	39c0004c 	andi	r7,r7,1
   85f50:	38003a26 	beq	r7,zero,8603c <_free_r+0x178>
   85f54:	10c00054 	ori	r3,r2,1
   85f58:	30c00115 	stw	r3,4(r6)
   85f5c:	3087883a 	add	r3,r6,r2
   85f60:	18800015 	stw	r2,0(r3)
   85f64:	00c07fc4 	movi	r3,511
   85f68:	18801936 	bltu	r3,r2,85fd0 <_free_r+0x10c>
   85f6c:	1004d0fa 	srli	r2,r2,3
   85f70:	01c00044 	movi	r7,1
   85f74:	21400117 	ldw	r5,4(r4)
   85f78:	10c00044 	addi	r3,r2,1
   85f7c:	18c7883a 	add	r3,r3,r3
   85f80:	1005d0ba 	srai	r2,r2,2
   85f84:	18c7883a 	add	r3,r3,r3
   85f88:	18c7883a 	add	r3,r3,r3
   85f8c:	1907883a 	add	r3,r3,r4
   85f90:	3884983a 	sll	r2,r7,r2
   85f94:	19c00017 	ldw	r7,0(r3)
   85f98:	1a3ffe04 	addi	r8,r3,-8
   85f9c:	1144b03a 	or	r2,r2,r5
   85fa0:	32000315 	stw	r8,12(r6)
   85fa4:	31c00215 	stw	r7,8(r6)
   85fa8:	20800115 	stw	r2,4(r4)
   85fac:	19800015 	stw	r6,0(r3)
   85fb0:	39800315 	stw	r6,12(r7)
   85fb4:	8809883a 	mov	r4,r17
   85fb8:	dfc00217 	ldw	ra,8(sp)
   85fbc:	dc400117 	ldw	r17,4(sp)
   85fc0:	dc000017 	ldw	r16,0(sp)
   85fc4:	dec00304 	addi	sp,sp,12
   85fc8:	008ea781 	jmpi	8ea78 <__malloc_unlock>
   85fcc:	f800283a 	ret
   85fd0:	100ad27a 	srli	r5,r2,9
   85fd4:	00c00104 	movi	r3,4
   85fd8:	19404a36 	bltu	r3,r5,86104 <_free_r+0x240>
   85fdc:	100ad1ba 	srli	r5,r2,6
   85fe0:	28c00e44 	addi	r3,r5,57
   85fe4:	18c7883a 	add	r3,r3,r3
   85fe8:	29400e04 	addi	r5,r5,56
   85fec:	18c7883a 	add	r3,r3,r3
   85ff0:	18c7883a 	add	r3,r3,r3
   85ff4:	1909883a 	add	r4,r3,r4
   85ff8:	20c00017 	ldw	r3,0(r4)
   85ffc:	01c00474 	movhi	r7,17
   86000:	213ffe04 	addi	r4,r4,-8
   86004:	39e12704 	addi	r7,r7,-31588
   86008:	20c04426 	beq	r4,r3,8611c <_free_r+0x258>
   8600c:	01ffff04 	movi	r7,-4
   86010:	19400117 	ldw	r5,4(r3)
   86014:	29ca703a 	and	r5,r5,r7
   86018:	1140022e 	bgeu	r2,r5,86024 <_free_r+0x160>
   8601c:	18c00217 	ldw	r3,8(r3)
   86020:	20fffb1e 	bne	r4,r3,86010 <_gp+0xfff7442c>
   86024:	19000317 	ldw	r4,12(r3)
   86028:	31000315 	stw	r4,12(r6)
   8602c:	30c00215 	stw	r3,8(r6)
   86030:	21800215 	stw	r6,8(r4)
   86034:	19800315 	stw	r6,12(r3)
   86038:	003fde06 	br	85fb4 <_gp+0xfff743d0>
   8603c:	29c00217 	ldw	r7,8(r5)
   86040:	10c5883a 	add	r2,r2,r3
   86044:	00c00474 	movhi	r3,17
   86048:	18e12904 	addi	r3,r3,-31580
   8604c:	38c03b26 	beq	r7,r3,8613c <_free_r+0x278>
   86050:	2a000317 	ldw	r8,12(r5)
   86054:	11400054 	ori	r5,r2,1
   86058:	3087883a 	add	r3,r6,r2
   8605c:	3a000315 	stw	r8,12(r7)
   86060:	41c00215 	stw	r7,8(r8)
   86064:	31400115 	stw	r5,4(r6)
   86068:	18800015 	stw	r2,0(r3)
   8606c:	003fbd06 	br	85f64 <_gp+0xfff74380>
   86070:	39c0004c 	andi	r7,r7,1
   86074:	10c5883a 	add	r2,r2,r3
   86078:	3800071e 	bne	r7,zero,86098 <_free_r+0x1d4>
   8607c:	81fffe17 	ldw	r7,-8(r16)
   86080:	31cdc83a 	sub	r6,r6,r7
   86084:	30c00317 	ldw	r3,12(r6)
   86088:	31400217 	ldw	r5,8(r6)
   8608c:	11c5883a 	add	r2,r2,r7
   86090:	28c00315 	stw	r3,12(r5)
   86094:	19400215 	stw	r5,8(r3)
   86098:	10c00054 	ori	r3,r2,1
   8609c:	30c00115 	stw	r3,4(r6)
   860a0:	00c00474 	movhi	r3,17
   860a4:	18e6fd04 	addi	r3,r3,-25612
   860a8:	18c00017 	ldw	r3,0(r3)
   860ac:	21800215 	stw	r6,8(r4)
   860b0:	10ffc036 	bltu	r2,r3,85fb4 <_gp+0xfff743d0>
   860b4:	00800474 	movhi	r2,17
   860b8:	10a71404 	addi	r2,r2,-25520
   860bc:	11400017 	ldw	r5,0(r2)
   860c0:	8809883a 	mov	r4,r17
   860c4:	0085da00 	call	85da0 <_malloc_trim_r>
   860c8:	003fba06 	br	85fb4 <_gp+0xfff743d0>
   860cc:	28c9883a 	add	r4,r5,r3
   860d0:	21000117 	ldw	r4,4(r4)
   860d4:	2100004c 	andi	r4,r4,1
   860d8:	2000391e 	bne	r4,zero,861c0 <_free_r+0x2fc>
   860dc:	29c00217 	ldw	r7,8(r5)
   860e0:	29000317 	ldw	r4,12(r5)
   860e4:	1885883a 	add	r2,r3,r2
   860e8:	10c00054 	ori	r3,r2,1
   860ec:	39000315 	stw	r4,12(r7)
   860f0:	21c00215 	stw	r7,8(r4)
   860f4:	30c00115 	stw	r3,4(r6)
   860f8:	308d883a 	add	r6,r6,r2
   860fc:	30800015 	stw	r2,0(r6)
   86100:	003fac06 	br	85fb4 <_gp+0xfff743d0>
   86104:	00c00504 	movi	r3,20
   86108:	19401536 	bltu	r3,r5,86160 <_free_r+0x29c>
   8610c:	28c01704 	addi	r3,r5,92
   86110:	18c7883a 	add	r3,r3,r3
   86114:	294016c4 	addi	r5,r5,91
   86118:	003fb406 	br	85fec <_gp+0xfff74408>
   8611c:	280bd0ba 	srai	r5,r5,2
   86120:	00c00044 	movi	r3,1
   86124:	38800117 	ldw	r2,4(r7)
   86128:	194a983a 	sll	r5,r3,r5
   8612c:	2007883a 	mov	r3,r4
   86130:	2884b03a 	or	r2,r5,r2
   86134:	38800115 	stw	r2,4(r7)
   86138:	003fbb06 	br	86028 <_gp+0xfff74444>
   8613c:	21800515 	stw	r6,20(r4)
   86140:	21800415 	stw	r6,16(r4)
   86144:	10c00054 	ori	r3,r2,1
   86148:	31c00315 	stw	r7,12(r6)
   8614c:	31c00215 	stw	r7,8(r6)
   86150:	30c00115 	stw	r3,4(r6)
   86154:	308d883a 	add	r6,r6,r2
   86158:	30800015 	stw	r2,0(r6)
   8615c:	003f9506 	br	85fb4 <_gp+0xfff743d0>
   86160:	00c01504 	movi	r3,84
   86164:	19400536 	bltu	r3,r5,8617c <_free_r+0x2b8>
   86168:	100ad33a 	srli	r5,r2,12
   8616c:	28c01bc4 	addi	r3,r5,111
   86170:	18c7883a 	add	r3,r3,r3
   86174:	29401b84 	addi	r5,r5,110
   86178:	003f9c06 	br	85fec <_gp+0xfff74408>
   8617c:	00c05504 	movi	r3,340
   86180:	19400536 	bltu	r3,r5,86198 <_free_r+0x2d4>
   86184:	100ad3fa 	srli	r5,r2,15
   86188:	28c01e04 	addi	r3,r5,120
   8618c:	18c7883a 	add	r3,r3,r3
   86190:	29401dc4 	addi	r5,r5,119
   86194:	003f9506 	br	85fec <_gp+0xfff74408>
   86198:	00c15504 	movi	r3,1364
   8619c:	19400536 	bltu	r3,r5,861b4 <_free_r+0x2f0>
   861a0:	100ad4ba 	srli	r5,r2,18
   861a4:	28c01f44 	addi	r3,r5,125
   861a8:	18c7883a 	add	r3,r3,r3
   861ac:	29401f04 	addi	r5,r5,124
   861b0:	003f8e06 	br	85fec <_gp+0xfff74408>
   861b4:	00c03f84 	movi	r3,254
   861b8:	01401f84 	movi	r5,126
   861bc:	003f8b06 	br	85fec <_gp+0xfff74408>
   861c0:	10c00054 	ori	r3,r2,1
   861c4:	30c00115 	stw	r3,4(r6)
   861c8:	308d883a 	add	r6,r6,r2
   861cc:	30800015 	stw	r2,0(r6)
   861d0:	003f7806 	br	85fb4 <_gp+0xfff743d0>

000861d4 <__sfvwrite_r>:
   861d4:	30800217 	ldw	r2,8(r6)
   861d8:	10006726 	beq	r2,zero,86378 <__sfvwrite_r+0x1a4>
   861dc:	28c0030b 	ldhu	r3,12(r5)
   861e0:	defff404 	addi	sp,sp,-48
   861e4:	dd400715 	stw	r21,28(sp)
   861e8:	dd000615 	stw	r20,24(sp)
   861ec:	dc000215 	stw	r16,8(sp)
   861f0:	dfc00b15 	stw	ra,44(sp)
   861f4:	df000a15 	stw	fp,40(sp)
   861f8:	ddc00915 	stw	r23,36(sp)
   861fc:	dd800815 	stw	r22,32(sp)
   86200:	dcc00515 	stw	r19,20(sp)
   86204:	dc800415 	stw	r18,16(sp)
   86208:	dc400315 	stw	r17,12(sp)
   8620c:	1880020c 	andi	r2,r3,8
   86210:	2821883a 	mov	r16,r5
   86214:	202b883a 	mov	r21,r4
   86218:	3029883a 	mov	r20,r6
   8621c:	10002726 	beq	r2,zero,862bc <__sfvwrite_r+0xe8>
   86220:	28800417 	ldw	r2,16(r5)
   86224:	10002526 	beq	r2,zero,862bc <__sfvwrite_r+0xe8>
   86228:	1880008c 	andi	r2,r3,2
   8622c:	a4400017 	ldw	r17,0(r20)
   86230:	10002a26 	beq	r2,zero,862dc <__sfvwrite_r+0x108>
   86234:	05a00034 	movhi	r22,32768
   86238:	0027883a 	mov	r19,zero
   8623c:	0025883a 	mov	r18,zero
   86240:	b5bf0004 	addi	r22,r22,-1024
   86244:	980d883a 	mov	r6,r19
   86248:	a809883a 	mov	r4,r21
   8624c:	90004626 	beq	r18,zero,86368 <__sfvwrite_r+0x194>
   86250:	900f883a 	mov	r7,r18
   86254:	b480022e 	bgeu	r22,r18,86260 <__sfvwrite_r+0x8c>
   86258:	01e00034 	movhi	r7,32768
   8625c:	39ff0004 	addi	r7,r7,-1024
   86260:	80800917 	ldw	r2,36(r16)
   86264:	81400717 	ldw	r5,28(r16)
   86268:	103ee83a 	callr	r2
   8626c:	00805a0e 	bge	zero,r2,863d8 <__sfvwrite_r+0x204>
   86270:	a0c00217 	ldw	r3,8(r20)
   86274:	98a7883a 	add	r19,r19,r2
   86278:	90a5c83a 	sub	r18,r18,r2
   8627c:	1885c83a 	sub	r2,r3,r2
   86280:	a0800215 	stw	r2,8(r20)
   86284:	103fef1e 	bne	r2,zero,86244 <_gp+0xfff74660>
   86288:	0005883a 	mov	r2,zero
   8628c:	dfc00b17 	ldw	ra,44(sp)
   86290:	df000a17 	ldw	fp,40(sp)
   86294:	ddc00917 	ldw	r23,36(sp)
   86298:	dd800817 	ldw	r22,32(sp)
   8629c:	dd400717 	ldw	r21,28(sp)
   862a0:	dd000617 	ldw	r20,24(sp)
   862a4:	dcc00517 	ldw	r19,20(sp)
   862a8:	dc800417 	ldw	r18,16(sp)
   862ac:	dc400317 	ldw	r17,12(sp)
   862b0:	dc000217 	ldw	r16,8(sp)
   862b4:	dec00c04 	addi	sp,sp,48
   862b8:	f800283a 	ret
   862bc:	800b883a 	mov	r5,r16
   862c0:	a809883a 	mov	r4,r21
   862c4:	0083d440 	call	83d44 <__swsetup_r>
   862c8:	1000ee1e 	bne	r2,zero,86684 <__sfvwrite_r+0x4b0>
   862cc:	80c0030b 	ldhu	r3,12(r16)
   862d0:	a4400017 	ldw	r17,0(r20)
   862d4:	1880008c 	andi	r2,r3,2
   862d8:	103fd61e 	bne	r2,zero,86234 <_gp+0xfff74650>
   862dc:	1880004c 	andi	r2,r3,1
   862e0:	1000421e 	bne	r2,zero,863ec <__sfvwrite_r+0x218>
   862e4:	0039883a 	mov	fp,zero
   862e8:	0025883a 	mov	r18,zero
   862ec:	90001a26 	beq	r18,zero,86358 <__sfvwrite_r+0x184>
   862f0:	1880800c 	andi	r2,r3,512
   862f4:	84c00217 	ldw	r19,8(r16)
   862f8:	10002126 	beq	r2,zero,86380 <__sfvwrite_r+0x1ac>
   862fc:	982f883a 	mov	r23,r19
   86300:	94c09636 	bltu	r18,r19,8655c <__sfvwrite_r+0x388>
   86304:	1881200c 	andi	r2,r3,1152
   86308:	1000a11e 	bne	r2,zero,86590 <__sfvwrite_r+0x3bc>
   8630c:	81000017 	ldw	r4,0(r16)
   86310:	b80d883a 	mov	r6,r23
   86314:	e00b883a 	mov	r5,fp
   86318:	00874f40 	call	874f4 <memmove>
   8631c:	80c00217 	ldw	r3,8(r16)
   86320:	81000017 	ldw	r4,0(r16)
   86324:	9005883a 	mov	r2,r18
   86328:	1ce7c83a 	sub	r19,r3,r19
   8632c:	25cf883a 	add	r7,r4,r23
   86330:	84c00215 	stw	r19,8(r16)
   86334:	81c00015 	stw	r7,0(r16)
   86338:	a0c00217 	ldw	r3,8(r20)
   8633c:	e0b9883a 	add	fp,fp,r2
   86340:	90a5c83a 	sub	r18,r18,r2
   86344:	18a7c83a 	sub	r19,r3,r2
   86348:	a4c00215 	stw	r19,8(r20)
   8634c:	983fce26 	beq	r19,zero,86288 <_gp+0xfff746a4>
   86350:	80c0030b 	ldhu	r3,12(r16)
   86354:	903fe61e 	bne	r18,zero,862f0 <_gp+0xfff7470c>
   86358:	8f000017 	ldw	fp,0(r17)
   8635c:	8c800117 	ldw	r18,4(r17)
   86360:	8c400204 	addi	r17,r17,8
   86364:	003fe106 	br	862ec <_gp+0xfff74708>
   86368:	8cc00017 	ldw	r19,0(r17)
   8636c:	8c800117 	ldw	r18,4(r17)
   86370:	8c400204 	addi	r17,r17,8
   86374:	003fb306 	br	86244 <_gp+0xfff74660>
   86378:	0005883a 	mov	r2,zero
   8637c:	f800283a 	ret
   86380:	81000017 	ldw	r4,0(r16)
   86384:	80800417 	ldw	r2,16(r16)
   86388:	11005a36 	bltu	r2,r4,864f4 <__sfvwrite_r+0x320>
   8638c:	85c00517 	ldw	r23,20(r16)
   86390:	95c05836 	bltu	r18,r23,864f4 <__sfvwrite_r+0x320>
   86394:	00a00034 	movhi	r2,32768
   86398:	10bfffc4 	addi	r2,r2,-1
   8639c:	9009883a 	mov	r4,r18
   863a0:	1480012e 	bgeu	r2,r18,863a8 <__sfvwrite_r+0x1d4>
   863a4:	1009883a 	mov	r4,r2
   863a8:	b80b883a 	mov	r5,r23
   863ac:	0080a480 	call	80a48 <__divsi3>
   863b0:	b80b883a 	mov	r5,r23
   863b4:	1009883a 	mov	r4,r2
   863b8:	00817900 	call	81790 <__mulsi3>
   863bc:	81400717 	ldw	r5,28(r16)
   863c0:	80c00917 	ldw	r3,36(r16)
   863c4:	100f883a 	mov	r7,r2
   863c8:	e00d883a 	mov	r6,fp
   863cc:	a809883a 	mov	r4,r21
   863d0:	183ee83a 	callr	r3
   863d4:	00bfd816 	blt	zero,r2,86338 <_gp+0xfff74754>
   863d8:	8080030b 	ldhu	r2,12(r16)
   863dc:	10801014 	ori	r2,r2,64
   863e0:	8080030d 	sth	r2,12(r16)
   863e4:	00bfffc4 	movi	r2,-1
   863e8:	003fa806 	br	8628c <_gp+0xfff746a8>
   863ec:	0027883a 	mov	r19,zero
   863f0:	0011883a 	mov	r8,zero
   863f4:	0039883a 	mov	fp,zero
   863f8:	0025883a 	mov	r18,zero
   863fc:	90001f26 	beq	r18,zero,8647c <__sfvwrite_r+0x2a8>
   86400:	40005a26 	beq	r8,zero,8656c <__sfvwrite_r+0x398>
   86404:	982d883a 	mov	r22,r19
   86408:	94c0012e 	bgeu	r18,r19,86410 <__sfvwrite_r+0x23c>
   8640c:	902d883a 	mov	r22,r18
   86410:	81000017 	ldw	r4,0(r16)
   86414:	80800417 	ldw	r2,16(r16)
   86418:	b02f883a 	mov	r23,r22
   8641c:	81c00517 	ldw	r7,20(r16)
   86420:	1100032e 	bgeu	r2,r4,86430 <__sfvwrite_r+0x25c>
   86424:	80c00217 	ldw	r3,8(r16)
   86428:	38c7883a 	add	r3,r7,r3
   8642c:	1d801816 	blt	r3,r22,86490 <__sfvwrite_r+0x2bc>
   86430:	b1c03e16 	blt	r22,r7,8652c <__sfvwrite_r+0x358>
   86434:	80800917 	ldw	r2,36(r16)
   86438:	81400717 	ldw	r5,28(r16)
   8643c:	e00d883a 	mov	r6,fp
   86440:	da000115 	stw	r8,4(sp)
   86444:	a809883a 	mov	r4,r21
   86448:	103ee83a 	callr	r2
   8644c:	102f883a 	mov	r23,r2
   86450:	da000117 	ldw	r8,4(sp)
   86454:	00bfe00e 	bge	zero,r2,863d8 <_gp+0xfff747f4>
   86458:	9de7c83a 	sub	r19,r19,r23
   8645c:	98001f26 	beq	r19,zero,864dc <__sfvwrite_r+0x308>
   86460:	a0800217 	ldw	r2,8(r20)
   86464:	e5f9883a 	add	fp,fp,r23
   86468:	95e5c83a 	sub	r18,r18,r23
   8646c:	15efc83a 	sub	r23,r2,r23
   86470:	a5c00215 	stw	r23,8(r20)
   86474:	b83f8426 	beq	r23,zero,86288 <_gp+0xfff746a4>
   86478:	903fe11e 	bne	r18,zero,86400 <_gp+0xfff7481c>
   8647c:	8f000017 	ldw	fp,0(r17)
   86480:	8c800117 	ldw	r18,4(r17)
   86484:	0011883a 	mov	r8,zero
   86488:	8c400204 	addi	r17,r17,8
   8648c:	003fdb06 	br	863fc <_gp+0xfff74818>
   86490:	180d883a 	mov	r6,r3
   86494:	e00b883a 	mov	r5,fp
   86498:	da000115 	stw	r8,4(sp)
   8649c:	d8c00015 	stw	r3,0(sp)
   864a0:	00874f40 	call	874f4 <memmove>
   864a4:	d8c00017 	ldw	r3,0(sp)
   864a8:	80800017 	ldw	r2,0(r16)
   864ac:	800b883a 	mov	r5,r16
   864b0:	a809883a 	mov	r4,r21
   864b4:	10c5883a 	add	r2,r2,r3
   864b8:	80800015 	stw	r2,0(r16)
   864bc:	d8c00015 	stw	r3,0(sp)
   864c0:	00859640 	call	85964 <_fflush_r>
   864c4:	d8c00017 	ldw	r3,0(sp)
   864c8:	da000117 	ldw	r8,4(sp)
   864cc:	103fc21e 	bne	r2,zero,863d8 <_gp+0xfff747f4>
   864d0:	182f883a 	mov	r23,r3
   864d4:	9de7c83a 	sub	r19,r19,r23
   864d8:	983fe11e 	bne	r19,zero,86460 <_gp+0xfff7487c>
   864dc:	800b883a 	mov	r5,r16
   864e0:	a809883a 	mov	r4,r21
   864e4:	00859640 	call	85964 <_fflush_r>
   864e8:	103fbb1e 	bne	r2,zero,863d8 <_gp+0xfff747f4>
   864ec:	0011883a 	mov	r8,zero
   864f0:	003fdb06 	br	86460 <_gp+0xfff7487c>
   864f4:	94c0012e 	bgeu	r18,r19,864fc <__sfvwrite_r+0x328>
   864f8:	9027883a 	mov	r19,r18
   864fc:	980d883a 	mov	r6,r19
   86500:	e00b883a 	mov	r5,fp
   86504:	00874f40 	call	874f4 <memmove>
   86508:	80800217 	ldw	r2,8(r16)
   8650c:	80c00017 	ldw	r3,0(r16)
   86510:	14c5c83a 	sub	r2,r2,r19
   86514:	1cc7883a 	add	r3,r3,r19
   86518:	80800215 	stw	r2,8(r16)
   8651c:	80c00015 	stw	r3,0(r16)
   86520:	10004326 	beq	r2,zero,86630 <__sfvwrite_r+0x45c>
   86524:	9805883a 	mov	r2,r19
   86528:	003f8306 	br	86338 <_gp+0xfff74754>
   8652c:	b00d883a 	mov	r6,r22
   86530:	e00b883a 	mov	r5,fp
   86534:	da000115 	stw	r8,4(sp)
   86538:	00874f40 	call	874f4 <memmove>
   8653c:	80800217 	ldw	r2,8(r16)
   86540:	80c00017 	ldw	r3,0(r16)
   86544:	da000117 	ldw	r8,4(sp)
   86548:	1585c83a 	sub	r2,r2,r22
   8654c:	1dad883a 	add	r22,r3,r22
   86550:	80800215 	stw	r2,8(r16)
   86554:	85800015 	stw	r22,0(r16)
   86558:	003fbf06 	br	86458 <_gp+0xfff74874>
   8655c:	81000017 	ldw	r4,0(r16)
   86560:	9027883a 	mov	r19,r18
   86564:	902f883a 	mov	r23,r18
   86568:	003f6906 	br	86310 <_gp+0xfff7472c>
   8656c:	900d883a 	mov	r6,r18
   86570:	01400284 	movi	r5,10
   86574:	e009883a 	mov	r4,fp
   86578:	00872c80 	call	872c8 <memchr>
   8657c:	10003e26 	beq	r2,zero,86678 <__sfvwrite_r+0x4a4>
   86580:	10800044 	addi	r2,r2,1
   86584:	1727c83a 	sub	r19,r2,fp
   86588:	02000044 	movi	r8,1
   8658c:	003f9d06 	br	86404 <_gp+0xfff74820>
   86590:	80800517 	ldw	r2,20(r16)
   86594:	81400417 	ldw	r5,16(r16)
   86598:	81c00017 	ldw	r7,0(r16)
   8659c:	10a7883a 	add	r19,r2,r2
   865a0:	9885883a 	add	r2,r19,r2
   865a4:	1026d7fa 	srli	r19,r2,31
   865a8:	396dc83a 	sub	r22,r7,r5
   865ac:	b1000044 	addi	r4,r22,1
   865b0:	9885883a 	add	r2,r19,r2
   865b4:	1027d07a 	srai	r19,r2,1
   865b8:	2485883a 	add	r2,r4,r18
   865bc:	980d883a 	mov	r6,r19
   865c0:	9880022e 	bgeu	r19,r2,865cc <__sfvwrite_r+0x3f8>
   865c4:	1027883a 	mov	r19,r2
   865c8:	100d883a 	mov	r6,r2
   865cc:	18c1000c 	andi	r3,r3,1024
   865d0:	18001c26 	beq	r3,zero,86644 <__sfvwrite_r+0x470>
   865d4:	300b883a 	mov	r5,r6
   865d8:	a809883a 	mov	r4,r21
   865dc:	0086abc0 	call	86abc <_malloc_r>
   865e0:	102f883a 	mov	r23,r2
   865e4:	10002926 	beq	r2,zero,8668c <__sfvwrite_r+0x4b8>
   865e8:	81400417 	ldw	r5,16(r16)
   865ec:	b00d883a 	mov	r6,r22
   865f0:	1009883a 	mov	r4,r2
   865f4:	00873ac0 	call	873ac <memcpy>
   865f8:	8080030b 	ldhu	r2,12(r16)
   865fc:	00fedfc4 	movi	r3,-1153
   86600:	10c4703a 	and	r2,r2,r3
   86604:	10802014 	ori	r2,r2,128
   86608:	8080030d 	sth	r2,12(r16)
   8660c:	bd89883a 	add	r4,r23,r22
   86610:	9d8fc83a 	sub	r7,r19,r22
   86614:	85c00415 	stw	r23,16(r16)
   86618:	84c00515 	stw	r19,20(r16)
   8661c:	81000015 	stw	r4,0(r16)
   86620:	9027883a 	mov	r19,r18
   86624:	81c00215 	stw	r7,8(r16)
   86628:	902f883a 	mov	r23,r18
   8662c:	003f3806 	br	86310 <_gp+0xfff7472c>
   86630:	800b883a 	mov	r5,r16
   86634:	a809883a 	mov	r4,r21
   86638:	00859640 	call	85964 <_fflush_r>
   8663c:	103fb926 	beq	r2,zero,86524 <_gp+0xfff74940>
   86640:	003f6506 	br	863d8 <_gp+0xfff747f4>
   86644:	a809883a 	mov	r4,r21
   86648:	00888300 	call	88830 <_realloc_r>
   8664c:	102f883a 	mov	r23,r2
   86650:	103fee1e 	bne	r2,zero,8660c <_gp+0xfff74a28>
   86654:	81400417 	ldw	r5,16(r16)
   86658:	a809883a 	mov	r4,r21
   8665c:	0085ec40 	call	85ec4 <_free_r>
   86660:	8080030b 	ldhu	r2,12(r16)
   86664:	00ffdfc4 	movi	r3,-129
   86668:	1884703a 	and	r2,r3,r2
   8666c:	00c00304 	movi	r3,12
   86670:	a8c00015 	stw	r3,0(r21)
   86674:	003f5906 	br	863dc <_gp+0xfff747f8>
   86678:	94c00044 	addi	r19,r18,1
   8667c:	02000044 	movi	r8,1
   86680:	003f6006 	br	86404 <_gp+0xfff74820>
   86684:	00bfffc4 	movi	r2,-1
   86688:	003f0006 	br	8628c <_gp+0xfff746a8>
   8668c:	00800304 	movi	r2,12
   86690:	a8800015 	stw	r2,0(r21)
   86694:	8080030b 	ldhu	r2,12(r16)
   86698:	003f5006 	br	863dc <_gp+0xfff747f8>

0008669c <_fwalk>:
   8669c:	defff704 	addi	sp,sp,-36
   866a0:	dd000415 	stw	r20,16(sp)
   866a4:	dfc00815 	stw	ra,32(sp)
   866a8:	ddc00715 	stw	r23,28(sp)
   866ac:	dd800615 	stw	r22,24(sp)
   866b0:	dd400515 	stw	r21,20(sp)
   866b4:	dcc00315 	stw	r19,12(sp)
   866b8:	dc800215 	stw	r18,8(sp)
   866bc:	dc400115 	stw	r17,4(sp)
   866c0:	dc000015 	stw	r16,0(sp)
   866c4:	2500b804 	addi	r20,r4,736
   866c8:	a0002326 	beq	r20,zero,86758 <_fwalk+0xbc>
   866cc:	282b883a 	mov	r21,r5
   866d0:	002f883a 	mov	r23,zero
   866d4:	05800044 	movi	r22,1
   866d8:	04ffffc4 	movi	r19,-1
   866dc:	a4400117 	ldw	r17,4(r20)
   866e0:	a4800217 	ldw	r18,8(r20)
   866e4:	8c7fffc4 	addi	r17,r17,-1
   866e8:	88000d16 	blt	r17,zero,86720 <_fwalk+0x84>
   866ec:	94000304 	addi	r16,r18,12
   866f0:	94800384 	addi	r18,r18,14
   866f4:	8080000b 	ldhu	r2,0(r16)
   866f8:	8c7fffc4 	addi	r17,r17,-1
   866fc:	813ffd04 	addi	r4,r16,-12
   86700:	b080042e 	bgeu	r22,r2,86714 <_fwalk+0x78>
   86704:	9080000f 	ldh	r2,0(r18)
   86708:	14c00226 	beq	r2,r19,86714 <_fwalk+0x78>
   8670c:	a83ee83a 	callr	r21
   86710:	b8aeb03a 	or	r23,r23,r2
   86714:	84001a04 	addi	r16,r16,104
   86718:	94801a04 	addi	r18,r18,104
   8671c:	8cfff51e 	bne	r17,r19,866f4 <_gp+0xfff74b10>
   86720:	a5000017 	ldw	r20,0(r20)
   86724:	a03fed1e 	bne	r20,zero,866dc <_gp+0xfff74af8>
   86728:	b805883a 	mov	r2,r23
   8672c:	dfc00817 	ldw	ra,32(sp)
   86730:	ddc00717 	ldw	r23,28(sp)
   86734:	dd800617 	ldw	r22,24(sp)
   86738:	dd400517 	ldw	r21,20(sp)
   8673c:	dd000417 	ldw	r20,16(sp)
   86740:	dcc00317 	ldw	r19,12(sp)
   86744:	dc800217 	ldw	r18,8(sp)
   86748:	dc400117 	ldw	r17,4(sp)
   8674c:	dc000017 	ldw	r16,0(sp)
   86750:	dec00904 	addi	sp,sp,36
   86754:	f800283a 	ret
   86758:	002f883a 	mov	r23,zero
   8675c:	003ff206 	br	86728 <_gp+0xfff74b44>

00086760 <_fwalk_reent>:
   86760:	defff704 	addi	sp,sp,-36
   86764:	dd000415 	stw	r20,16(sp)
   86768:	dfc00815 	stw	ra,32(sp)
   8676c:	ddc00715 	stw	r23,28(sp)
   86770:	dd800615 	stw	r22,24(sp)
   86774:	dd400515 	stw	r21,20(sp)
   86778:	dcc00315 	stw	r19,12(sp)
   8677c:	dc800215 	stw	r18,8(sp)
   86780:	dc400115 	stw	r17,4(sp)
   86784:	dc000015 	stw	r16,0(sp)
   86788:	2500b804 	addi	r20,r4,736
   8678c:	a0002326 	beq	r20,zero,8681c <_fwalk_reent+0xbc>
   86790:	282b883a 	mov	r21,r5
   86794:	2027883a 	mov	r19,r4
   86798:	002f883a 	mov	r23,zero
   8679c:	05800044 	movi	r22,1
   867a0:	04bfffc4 	movi	r18,-1
   867a4:	a4400117 	ldw	r17,4(r20)
   867a8:	a4000217 	ldw	r16,8(r20)
   867ac:	8c7fffc4 	addi	r17,r17,-1
   867b0:	88000c16 	blt	r17,zero,867e4 <_fwalk_reent+0x84>
   867b4:	84000304 	addi	r16,r16,12
   867b8:	8080000b 	ldhu	r2,0(r16)
   867bc:	8c7fffc4 	addi	r17,r17,-1
   867c0:	817ffd04 	addi	r5,r16,-12
   867c4:	b080052e 	bgeu	r22,r2,867dc <_fwalk_reent+0x7c>
   867c8:	8080008f 	ldh	r2,2(r16)
   867cc:	9809883a 	mov	r4,r19
   867d0:	14800226 	beq	r2,r18,867dc <_fwalk_reent+0x7c>
   867d4:	a83ee83a 	callr	r21
   867d8:	b8aeb03a 	or	r23,r23,r2
   867dc:	84001a04 	addi	r16,r16,104
   867e0:	8cbff51e 	bne	r17,r18,867b8 <_gp+0xfff74bd4>
   867e4:	a5000017 	ldw	r20,0(r20)
   867e8:	a03fee1e 	bne	r20,zero,867a4 <_gp+0xfff74bc0>
   867ec:	b805883a 	mov	r2,r23
   867f0:	dfc00817 	ldw	ra,32(sp)
   867f4:	ddc00717 	ldw	r23,28(sp)
   867f8:	dd800617 	ldw	r22,24(sp)
   867fc:	dd400517 	ldw	r21,20(sp)
   86800:	dd000417 	ldw	r20,16(sp)
   86804:	dcc00317 	ldw	r19,12(sp)
   86808:	dc800217 	ldw	r18,8(sp)
   8680c:	dc400117 	ldw	r17,4(sp)
   86810:	dc000017 	ldw	r16,0(sp)
   86814:	dec00904 	addi	sp,sp,36
   86818:	f800283a 	ret
   8681c:	002f883a 	mov	r23,zero
   86820:	003ff206 	br	867ec <_gp+0xfff74c08>

00086824 <_setlocale_r>:
   86824:	30001b26 	beq	r6,zero,86894 <_setlocale_r+0x70>
   86828:	01400274 	movhi	r5,9
   8682c:	defffe04 	addi	sp,sp,-8
   86830:	29504f04 	addi	r5,r5,16700
   86834:	3009883a 	mov	r4,r6
   86838:	dc000015 	stw	r16,0(sp)
   8683c:	dfc00115 	stw	ra,4(sp)
   86840:	3021883a 	mov	r16,r6
   86844:	0088f980 	call	88f98 <strcmp>
   86848:	1000061e 	bne	r2,zero,86864 <_setlocale_r+0x40>
   8684c:	00800274 	movhi	r2,9
   86850:	10904e04 	addi	r2,r2,16696
   86854:	dfc00117 	ldw	ra,4(sp)
   86858:	dc000017 	ldw	r16,0(sp)
   8685c:	dec00204 	addi	sp,sp,8
   86860:	f800283a 	ret
   86864:	01400274 	movhi	r5,9
   86868:	29504e04 	addi	r5,r5,16696
   8686c:	8009883a 	mov	r4,r16
   86870:	0088f980 	call	88f98 <strcmp>
   86874:	103ff526 	beq	r2,zero,8684c <_gp+0xfff74c68>
   86878:	01400274 	movhi	r5,9
   8687c:	29503904 	addi	r5,r5,16612
   86880:	8009883a 	mov	r4,r16
   86884:	0088f980 	call	88f98 <strcmp>
   86888:	103ff026 	beq	r2,zero,8684c <_gp+0xfff74c68>
   8688c:	0005883a 	mov	r2,zero
   86890:	003ff006 	br	86854 <_gp+0xfff74c70>
   86894:	00800274 	movhi	r2,9
   86898:	10904e04 	addi	r2,r2,16696
   8689c:	f800283a 	ret

000868a0 <__locale_charset>:
   868a0:	00800474 	movhi	r2,17
   868a4:	10a11104 	addi	r2,r2,-31676
   868a8:	f800283a 	ret

000868ac <__locale_mb_cur_max>:
   868ac:	00800474 	movhi	r2,17
   868b0:	10a6fb04 	addi	r2,r2,-25620
   868b4:	10800017 	ldw	r2,0(r2)
   868b8:	f800283a 	ret

000868bc <__locale_msgcharset>:
   868bc:	00800474 	movhi	r2,17
   868c0:	10a10904 	addi	r2,r2,-31708
   868c4:	f800283a 	ret

000868c8 <__locale_cjk_lang>:
   868c8:	0005883a 	mov	r2,zero
   868cc:	f800283a 	ret

000868d0 <_localeconv_r>:
   868d0:	00800474 	movhi	r2,17
   868d4:	10a11904 	addi	r2,r2,-31644
   868d8:	f800283a 	ret

000868dc <setlocale>:
   868dc:	00800474 	movhi	r2,17
   868e0:	10a6fa04 	addi	r2,r2,-25624
   868e4:	280d883a 	mov	r6,r5
   868e8:	200b883a 	mov	r5,r4
   868ec:	11000017 	ldw	r4,0(r2)
   868f0:	00868241 	jmpi	86824 <_setlocale_r>

000868f4 <localeconv>:
   868f4:	00800474 	movhi	r2,17
   868f8:	10a11904 	addi	r2,r2,-31644
   868fc:	f800283a 	ret

00086900 <__smakebuf_r>:
   86900:	2880030b 	ldhu	r2,12(r5)
   86904:	10c0008c 	andi	r3,r2,2
   86908:	1800411e 	bne	r3,zero,86a10 <__smakebuf_r+0x110>
   8690c:	deffec04 	addi	sp,sp,-80
   86910:	dc000f15 	stw	r16,60(sp)
   86914:	2821883a 	mov	r16,r5
   86918:	2940038f 	ldh	r5,14(r5)
   8691c:	dc401015 	stw	r17,64(sp)
   86920:	dfc01315 	stw	ra,76(sp)
   86924:	dcc01215 	stw	r19,72(sp)
   86928:	dc801115 	stw	r18,68(sp)
   8692c:	2023883a 	mov	r17,r4
   86930:	28001c16 	blt	r5,zero,869a4 <__smakebuf_r+0xa4>
   86934:	d80d883a 	mov	r6,sp
   86938:	008ac080 	call	8ac08 <_fstat_r>
   8693c:	10001816 	blt	r2,zero,869a0 <__smakebuf_r+0xa0>
   86940:	d8800117 	ldw	r2,4(sp)
   86944:	00e00014 	movui	r3,32768
   86948:	10bc000c 	andi	r2,r2,61440
   8694c:	14c80020 	cmpeqi	r19,r2,8192
   86950:	10c03726 	beq	r2,r3,86a30 <__smakebuf_r+0x130>
   86954:	80c0030b 	ldhu	r3,12(r16)
   86958:	18c20014 	ori	r3,r3,2048
   8695c:	80c0030d 	sth	r3,12(r16)
   86960:	00c80004 	movi	r3,8192
   86964:	10c0521e 	bne	r2,r3,86ab0 <__smakebuf_r+0x1b0>
   86968:	8140038f 	ldh	r5,14(r16)
   8696c:	8809883a 	mov	r4,r17
   86970:	008ac640 	call	8ac64 <_isatty_r>
   86974:	10004c26 	beq	r2,zero,86aa8 <__smakebuf_r+0x1a8>
   86978:	8080030b 	ldhu	r2,12(r16)
   8697c:	80c010c4 	addi	r3,r16,67
   86980:	80c00015 	stw	r3,0(r16)
   86984:	10800054 	ori	r2,r2,1
   86988:	8080030d 	sth	r2,12(r16)
   8698c:	00800044 	movi	r2,1
   86990:	80c00415 	stw	r3,16(r16)
   86994:	80800515 	stw	r2,20(r16)
   86998:	04810004 	movi	r18,1024
   8699c:	00000706 	br	869bc <__smakebuf_r+0xbc>
   869a0:	8080030b 	ldhu	r2,12(r16)
   869a4:	10c0200c 	andi	r3,r2,128
   869a8:	18001f1e 	bne	r3,zero,86a28 <__smakebuf_r+0x128>
   869ac:	04810004 	movi	r18,1024
   869b0:	10820014 	ori	r2,r2,2048
   869b4:	8080030d 	sth	r2,12(r16)
   869b8:	0027883a 	mov	r19,zero
   869bc:	900b883a 	mov	r5,r18
   869c0:	8809883a 	mov	r4,r17
   869c4:	0086abc0 	call	86abc <_malloc_r>
   869c8:	10002c26 	beq	r2,zero,86a7c <__smakebuf_r+0x17c>
   869cc:	80c0030b 	ldhu	r3,12(r16)
   869d0:	01000234 	movhi	r4,8
   869d4:	21167e04 	addi	r4,r4,23032
   869d8:	89000f15 	stw	r4,60(r17)
   869dc:	18c02014 	ori	r3,r3,128
   869e0:	80c0030d 	sth	r3,12(r16)
   869e4:	80800015 	stw	r2,0(r16)
   869e8:	80800415 	stw	r2,16(r16)
   869ec:	84800515 	stw	r18,20(r16)
   869f0:	98001a1e 	bne	r19,zero,86a5c <__smakebuf_r+0x15c>
   869f4:	dfc01317 	ldw	ra,76(sp)
   869f8:	dcc01217 	ldw	r19,72(sp)
   869fc:	dc801117 	ldw	r18,68(sp)
   86a00:	dc401017 	ldw	r17,64(sp)
   86a04:	dc000f17 	ldw	r16,60(sp)
   86a08:	dec01404 	addi	sp,sp,80
   86a0c:	f800283a 	ret
   86a10:	288010c4 	addi	r2,r5,67
   86a14:	28800015 	stw	r2,0(r5)
   86a18:	28800415 	stw	r2,16(r5)
   86a1c:	00800044 	movi	r2,1
   86a20:	28800515 	stw	r2,20(r5)
   86a24:	f800283a 	ret
   86a28:	04801004 	movi	r18,64
   86a2c:	003fe006 	br	869b0 <_gp+0xfff74dcc>
   86a30:	81000a17 	ldw	r4,40(r16)
   86a34:	00c00274 	movhi	r3,9
   86a38:	18e3cd04 	addi	r3,r3,-28876
   86a3c:	20ffc51e 	bne	r4,r3,86954 <_gp+0xfff74d70>
   86a40:	8080030b 	ldhu	r2,12(r16)
   86a44:	04810004 	movi	r18,1024
   86a48:	84801315 	stw	r18,76(r16)
   86a4c:	1484b03a 	or	r2,r2,r18
   86a50:	8080030d 	sth	r2,12(r16)
   86a54:	0027883a 	mov	r19,zero
   86a58:	003fd806 	br	869bc <_gp+0xfff74dd8>
   86a5c:	8140038f 	ldh	r5,14(r16)
   86a60:	8809883a 	mov	r4,r17
   86a64:	008ac640 	call	8ac64 <_isatty_r>
   86a68:	103fe226 	beq	r2,zero,869f4 <_gp+0xfff74e10>
   86a6c:	8080030b 	ldhu	r2,12(r16)
   86a70:	10800054 	ori	r2,r2,1
   86a74:	8080030d 	sth	r2,12(r16)
   86a78:	003fde06 	br	869f4 <_gp+0xfff74e10>
   86a7c:	8080030b 	ldhu	r2,12(r16)
   86a80:	10c0800c 	andi	r3,r2,512
   86a84:	183fdb1e 	bne	r3,zero,869f4 <_gp+0xfff74e10>
   86a88:	10800094 	ori	r2,r2,2
   86a8c:	80c010c4 	addi	r3,r16,67
   86a90:	8080030d 	sth	r2,12(r16)
   86a94:	00800044 	movi	r2,1
   86a98:	80c00015 	stw	r3,0(r16)
   86a9c:	80c00415 	stw	r3,16(r16)
   86aa0:	80800515 	stw	r2,20(r16)
   86aa4:	003fd306 	br	869f4 <_gp+0xfff74e10>
   86aa8:	04810004 	movi	r18,1024
   86aac:	003fc306 	br	869bc <_gp+0xfff74dd8>
   86ab0:	0027883a 	mov	r19,zero
   86ab4:	04810004 	movi	r18,1024
   86ab8:	003fc006 	br	869bc <_gp+0xfff74dd8>

00086abc <_malloc_r>:
   86abc:	defff504 	addi	sp,sp,-44
   86ac0:	dc800315 	stw	r18,12(sp)
   86ac4:	dfc00a15 	stw	ra,40(sp)
   86ac8:	df000915 	stw	fp,36(sp)
   86acc:	ddc00815 	stw	r23,32(sp)
   86ad0:	dd800715 	stw	r22,28(sp)
   86ad4:	dd400615 	stw	r21,24(sp)
   86ad8:	dd000515 	stw	r20,20(sp)
   86adc:	dcc00415 	stw	r19,16(sp)
   86ae0:	dc400215 	stw	r17,8(sp)
   86ae4:	dc000115 	stw	r16,4(sp)
   86ae8:	288002c4 	addi	r2,r5,11
   86aec:	00c00584 	movi	r3,22
   86af0:	2025883a 	mov	r18,r4
   86af4:	18807f2e 	bgeu	r3,r2,86cf4 <_malloc_r+0x238>
   86af8:	047ffe04 	movi	r17,-8
   86afc:	1462703a 	and	r17,r2,r17
   86b00:	8800a316 	blt	r17,zero,86d90 <_malloc_r+0x2d4>
   86b04:	8940a236 	bltu	r17,r5,86d90 <_malloc_r+0x2d4>
   86b08:	008ea540 	call	8ea54 <__malloc_lock>
   86b0c:	00807dc4 	movi	r2,503
   86b10:	1441e92e 	bgeu	r2,r17,872b8 <_malloc_r+0x7fc>
   86b14:	8804d27a 	srli	r2,r17,9
   86b18:	1000a126 	beq	r2,zero,86da0 <_malloc_r+0x2e4>
   86b1c:	00c00104 	movi	r3,4
   86b20:	18811e36 	bltu	r3,r2,86f9c <_malloc_r+0x4e0>
   86b24:	8804d1ba 	srli	r2,r17,6
   86b28:	12000e44 	addi	r8,r2,57
   86b2c:	11c00e04 	addi	r7,r2,56
   86b30:	4209883a 	add	r4,r8,r8
   86b34:	04c00474 	movhi	r19,17
   86b38:	2109883a 	add	r4,r4,r4
   86b3c:	9ce12704 	addi	r19,r19,-31588
   86b40:	2109883a 	add	r4,r4,r4
   86b44:	9909883a 	add	r4,r19,r4
   86b48:	24000117 	ldw	r16,4(r4)
   86b4c:	213ffe04 	addi	r4,r4,-8
   86b50:	24009726 	beq	r4,r16,86db0 <_malloc_r+0x2f4>
   86b54:	80800117 	ldw	r2,4(r16)
   86b58:	01bfff04 	movi	r6,-4
   86b5c:	014003c4 	movi	r5,15
   86b60:	1184703a 	and	r2,r2,r6
   86b64:	1447c83a 	sub	r3,r2,r17
   86b68:	28c00716 	blt	r5,r3,86b88 <_malloc_r+0xcc>
   86b6c:	1800920e 	bge	r3,zero,86db8 <_malloc_r+0x2fc>
   86b70:	84000317 	ldw	r16,12(r16)
   86b74:	24008e26 	beq	r4,r16,86db0 <_malloc_r+0x2f4>
   86b78:	80800117 	ldw	r2,4(r16)
   86b7c:	1184703a 	and	r2,r2,r6
   86b80:	1447c83a 	sub	r3,r2,r17
   86b84:	28fff90e 	bge	r5,r3,86b6c <_gp+0xfff74f88>
   86b88:	3809883a 	mov	r4,r7
   86b8c:	01800474 	movhi	r6,17
   86b90:	9c000417 	ldw	r16,16(r19)
   86b94:	31a12704 	addi	r6,r6,-31588
   86b98:	32000204 	addi	r8,r6,8
   86b9c:	82013426 	beq	r16,r8,87070 <_malloc_r+0x5b4>
   86ba0:	80c00117 	ldw	r3,4(r16)
   86ba4:	00bfff04 	movi	r2,-4
   86ba8:	188e703a 	and	r7,r3,r2
   86bac:	3c45c83a 	sub	r2,r7,r17
   86bb0:	00c003c4 	movi	r3,15
   86bb4:	18811f16 	blt	r3,r2,87034 <_malloc_r+0x578>
   86bb8:	32000515 	stw	r8,20(r6)
   86bbc:	32000415 	stw	r8,16(r6)
   86bc0:	10007f0e 	bge	r2,zero,86dc0 <_malloc_r+0x304>
   86bc4:	00807fc4 	movi	r2,511
   86bc8:	11c0fd36 	bltu	r2,r7,86fc0 <_malloc_r+0x504>
   86bcc:	3806d0fa 	srli	r3,r7,3
   86bd0:	01c00044 	movi	r7,1
   86bd4:	30800117 	ldw	r2,4(r6)
   86bd8:	19400044 	addi	r5,r3,1
   86bdc:	294b883a 	add	r5,r5,r5
   86be0:	1807d0ba 	srai	r3,r3,2
   86be4:	294b883a 	add	r5,r5,r5
   86be8:	294b883a 	add	r5,r5,r5
   86bec:	298b883a 	add	r5,r5,r6
   86bf0:	38c6983a 	sll	r3,r7,r3
   86bf4:	29c00017 	ldw	r7,0(r5)
   86bf8:	2a7ffe04 	addi	r9,r5,-8
   86bfc:	1886b03a 	or	r3,r3,r2
   86c00:	82400315 	stw	r9,12(r16)
   86c04:	81c00215 	stw	r7,8(r16)
   86c08:	30c00115 	stw	r3,4(r6)
   86c0c:	2c000015 	stw	r16,0(r5)
   86c10:	3c000315 	stw	r16,12(r7)
   86c14:	2005d0ba 	srai	r2,r4,2
   86c18:	01400044 	movi	r5,1
   86c1c:	288a983a 	sll	r5,r5,r2
   86c20:	19406f36 	bltu	r3,r5,86de0 <_malloc_r+0x324>
   86c24:	28c4703a 	and	r2,r5,r3
   86c28:	10000a1e 	bne	r2,zero,86c54 <_malloc_r+0x198>
   86c2c:	00bfff04 	movi	r2,-4
   86c30:	294b883a 	add	r5,r5,r5
   86c34:	2088703a 	and	r4,r4,r2
   86c38:	28c4703a 	and	r2,r5,r3
   86c3c:	21000104 	addi	r4,r4,4
   86c40:	1000041e 	bne	r2,zero,86c54 <_malloc_r+0x198>
   86c44:	294b883a 	add	r5,r5,r5
   86c48:	28c4703a 	and	r2,r5,r3
   86c4c:	21000104 	addi	r4,r4,4
   86c50:	103ffc26 	beq	r2,zero,86c44 <_gp+0xfff75060>
   86c54:	02bfff04 	movi	r10,-4
   86c58:	024003c4 	movi	r9,15
   86c5c:	21800044 	addi	r6,r4,1
   86c60:	318d883a 	add	r6,r6,r6
   86c64:	318d883a 	add	r6,r6,r6
   86c68:	318d883a 	add	r6,r6,r6
   86c6c:	998d883a 	add	r6,r19,r6
   86c70:	333ffe04 	addi	r12,r6,-8
   86c74:	2017883a 	mov	r11,r4
   86c78:	31800104 	addi	r6,r6,4
   86c7c:	34000017 	ldw	r16,0(r6)
   86c80:	31fffd04 	addi	r7,r6,-12
   86c84:	81c0041e 	bne	r16,r7,86c98 <_malloc_r+0x1dc>
   86c88:	0000fb06 	br	87078 <_malloc_r+0x5bc>
   86c8c:	1801030e 	bge	r3,zero,8709c <_malloc_r+0x5e0>
   86c90:	84000317 	ldw	r16,12(r16)
   86c94:	81c0f826 	beq	r16,r7,87078 <_malloc_r+0x5bc>
   86c98:	80800117 	ldw	r2,4(r16)
   86c9c:	1284703a 	and	r2,r2,r10
   86ca0:	1447c83a 	sub	r3,r2,r17
   86ca4:	48fff90e 	bge	r9,r3,86c8c <_gp+0xfff750a8>
   86ca8:	80800317 	ldw	r2,12(r16)
   86cac:	81000217 	ldw	r4,8(r16)
   86cb0:	89400054 	ori	r5,r17,1
   86cb4:	81400115 	stw	r5,4(r16)
   86cb8:	20800315 	stw	r2,12(r4)
   86cbc:	11000215 	stw	r4,8(r2)
   86cc0:	8463883a 	add	r17,r16,r17
   86cc4:	9c400515 	stw	r17,20(r19)
   86cc8:	9c400415 	stw	r17,16(r19)
   86ccc:	18800054 	ori	r2,r3,1
   86cd0:	88800115 	stw	r2,4(r17)
   86cd4:	8a000315 	stw	r8,12(r17)
   86cd8:	8a000215 	stw	r8,8(r17)
   86cdc:	88e3883a 	add	r17,r17,r3
   86ce0:	88c00015 	stw	r3,0(r17)
   86ce4:	9009883a 	mov	r4,r18
   86ce8:	008ea780 	call	8ea78 <__malloc_unlock>
   86cec:	80800204 	addi	r2,r16,8
   86cf0:	00001b06 	br	86d60 <_malloc_r+0x2a4>
   86cf4:	04400404 	movi	r17,16
   86cf8:	89402536 	bltu	r17,r5,86d90 <_malloc_r+0x2d4>
   86cfc:	008ea540 	call	8ea54 <__malloc_lock>
   86d00:	00800184 	movi	r2,6
   86d04:	01000084 	movi	r4,2
   86d08:	04c00474 	movhi	r19,17
   86d0c:	1085883a 	add	r2,r2,r2
   86d10:	9ce12704 	addi	r19,r19,-31588
   86d14:	1085883a 	add	r2,r2,r2
   86d18:	9885883a 	add	r2,r19,r2
   86d1c:	14000117 	ldw	r16,4(r2)
   86d20:	10fffe04 	addi	r3,r2,-8
   86d24:	80c0d926 	beq	r16,r3,8708c <_malloc_r+0x5d0>
   86d28:	80c00117 	ldw	r3,4(r16)
   86d2c:	81000317 	ldw	r4,12(r16)
   86d30:	00bfff04 	movi	r2,-4
   86d34:	1884703a 	and	r2,r3,r2
   86d38:	81400217 	ldw	r5,8(r16)
   86d3c:	8085883a 	add	r2,r16,r2
   86d40:	10c00117 	ldw	r3,4(r2)
   86d44:	29000315 	stw	r4,12(r5)
   86d48:	21400215 	stw	r5,8(r4)
   86d4c:	18c00054 	ori	r3,r3,1
   86d50:	10c00115 	stw	r3,4(r2)
   86d54:	9009883a 	mov	r4,r18
   86d58:	008ea780 	call	8ea78 <__malloc_unlock>
   86d5c:	80800204 	addi	r2,r16,8
   86d60:	dfc00a17 	ldw	ra,40(sp)
   86d64:	df000917 	ldw	fp,36(sp)
   86d68:	ddc00817 	ldw	r23,32(sp)
   86d6c:	dd800717 	ldw	r22,28(sp)
   86d70:	dd400617 	ldw	r21,24(sp)
   86d74:	dd000517 	ldw	r20,20(sp)
   86d78:	dcc00417 	ldw	r19,16(sp)
   86d7c:	dc800317 	ldw	r18,12(sp)
   86d80:	dc400217 	ldw	r17,8(sp)
   86d84:	dc000117 	ldw	r16,4(sp)
   86d88:	dec00b04 	addi	sp,sp,44
   86d8c:	f800283a 	ret
   86d90:	00800304 	movi	r2,12
   86d94:	90800015 	stw	r2,0(r18)
   86d98:	0005883a 	mov	r2,zero
   86d9c:	003ff006 	br	86d60 <_gp+0xfff7517c>
   86da0:	01002004 	movi	r4,128
   86da4:	02001004 	movi	r8,64
   86da8:	01c00fc4 	movi	r7,63
   86dac:	003f6106 	br	86b34 <_gp+0xfff74f50>
   86db0:	4009883a 	mov	r4,r8
   86db4:	003f7506 	br	86b8c <_gp+0xfff74fa8>
   86db8:	81000317 	ldw	r4,12(r16)
   86dbc:	003fde06 	br	86d38 <_gp+0xfff75154>
   86dc0:	81c5883a 	add	r2,r16,r7
   86dc4:	11400117 	ldw	r5,4(r2)
   86dc8:	9009883a 	mov	r4,r18
   86dcc:	29400054 	ori	r5,r5,1
   86dd0:	11400115 	stw	r5,4(r2)
   86dd4:	008ea780 	call	8ea78 <__malloc_unlock>
   86dd8:	80800204 	addi	r2,r16,8
   86ddc:	003fe006 	br	86d60 <_gp+0xfff7517c>
   86de0:	9c000217 	ldw	r16,8(r19)
   86de4:	00bfff04 	movi	r2,-4
   86de8:	85800117 	ldw	r22,4(r16)
   86dec:	b0ac703a 	and	r22,r22,r2
   86df0:	b4400336 	bltu	r22,r17,86e00 <_malloc_r+0x344>
   86df4:	b445c83a 	sub	r2,r22,r17
   86df8:	00c003c4 	movi	r3,15
   86dfc:	18805d16 	blt	r3,r2,86f74 <_malloc_r+0x4b8>
   86e00:	05c00474 	movhi	r23,17
   86e04:	00800474 	movhi	r2,17
   86e08:	10a71404 	addi	r2,r2,-25520
   86e0c:	bde6fc04 	addi	r23,r23,-25616
   86e10:	15400017 	ldw	r21,0(r2)
   86e14:	b8c00017 	ldw	r3,0(r23)
   86e18:	00bfffc4 	movi	r2,-1
   86e1c:	858d883a 	add	r6,r16,r22
   86e20:	8d6b883a 	add	r21,r17,r21
   86e24:	1880ea26 	beq	r3,r2,871d0 <_malloc_r+0x714>
   86e28:	ad4403c4 	addi	r21,r21,4111
   86e2c:	00bc0004 	movi	r2,-4096
   86e30:	a8aa703a 	and	r21,r21,r2
   86e34:	a80b883a 	mov	r5,r21
   86e38:	9009883a 	mov	r4,r18
   86e3c:	d9800015 	stw	r6,0(sp)
   86e40:	0088e080 	call	88e08 <_sbrk_r>
   86e44:	1029883a 	mov	r20,r2
   86e48:	00bfffc4 	movi	r2,-1
   86e4c:	d9800017 	ldw	r6,0(sp)
   86e50:	a080e826 	beq	r20,r2,871f4 <_malloc_r+0x738>
   86e54:	a180a636 	bltu	r20,r6,870f0 <_malloc_r+0x634>
   86e58:	07000474 	movhi	fp,17
   86e5c:	e7271d04 	addi	fp,fp,-25484
   86e60:	e0800017 	ldw	r2,0(fp)
   86e64:	a887883a 	add	r3,r21,r2
   86e68:	e0c00015 	stw	r3,0(fp)
   86e6c:	3500e626 	beq	r6,r20,87208 <_malloc_r+0x74c>
   86e70:	b9000017 	ldw	r4,0(r23)
   86e74:	00bfffc4 	movi	r2,-1
   86e78:	2080ee26 	beq	r4,r2,87234 <_malloc_r+0x778>
   86e7c:	a185c83a 	sub	r2,r20,r6
   86e80:	10c5883a 	add	r2,r2,r3
   86e84:	e0800015 	stw	r2,0(fp)
   86e88:	a0c001cc 	andi	r3,r20,7
   86e8c:	1800bc26 	beq	r3,zero,87180 <_malloc_r+0x6c4>
   86e90:	a0e9c83a 	sub	r20,r20,r3
   86e94:	00840204 	movi	r2,4104
   86e98:	a5000204 	addi	r20,r20,8
   86e9c:	10c7c83a 	sub	r3,r2,r3
   86ea0:	a545883a 	add	r2,r20,r21
   86ea4:	1083ffcc 	andi	r2,r2,4095
   86ea8:	18abc83a 	sub	r21,r3,r2
   86eac:	a80b883a 	mov	r5,r21
   86eb0:	9009883a 	mov	r4,r18
   86eb4:	0088e080 	call	88e08 <_sbrk_r>
   86eb8:	00ffffc4 	movi	r3,-1
   86ebc:	10c0e126 	beq	r2,r3,87244 <_malloc_r+0x788>
   86ec0:	1505c83a 	sub	r2,r2,r20
   86ec4:	1545883a 	add	r2,r2,r21
   86ec8:	10800054 	ori	r2,r2,1
   86ecc:	e0c00017 	ldw	r3,0(fp)
   86ed0:	9d000215 	stw	r20,8(r19)
   86ed4:	a0800115 	stw	r2,4(r20)
   86ed8:	a8c7883a 	add	r3,r21,r3
   86edc:	e0c00015 	stw	r3,0(fp)
   86ee0:	84c00e26 	beq	r16,r19,86f1c <_malloc_r+0x460>
   86ee4:	018003c4 	movi	r6,15
   86ee8:	3580a72e 	bgeu	r6,r22,87188 <_malloc_r+0x6cc>
   86eec:	81400117 	ldw	r5,4(r16)
   86ef0:	013ffe04 	movi	r4,-8
   86ef4:	b0bffd04 	addi	r2,r22,-12
   86ef8:	1104703a 	and	r2,r2,r4
   86efc:	2900004c 	andi	r4,r5,1
   86f00:	2088b03a 	or	r4,r4,r2
   86f04:	81000115 	stw	r4,4(r16)
   86f08:	01400144 	movi	r5,5
   86f0c:	8089883a 	add	r4,r16,r2
   86f10:	21400115 	stw	r5,4(r4)
   86f14:	21400215 	stw	r5,8(r4)
   86f18:	3080cd36 	bltu	r6,r2,87250 <_malloc_r+0x794>
   86f1c:	00800474 	movhi	r2,17
   86f20:	10a71304 	addi	r2,r2,-25524
   86f24:	11000017 	ldw	r4,0(r2)
   86f28:	20c0012e 	bgeu	r4,r3,86f30 <_malloc_r+0x474>
   86f2c:	10c00015 	stw	r3,0(r2)
   86f30:	00800474 	movhi	r2,17
   86f34:	10a71204 	addi	r2,r2,-25528
   86f38:	11000017 	ldw	r4,0(r2)
   86f3c:	9c000217 	ldw	r16,8(r19)
   86f40:	20c0012e 	bgeu	r4,r3,86f48 <_malloc_r+0x48c>
   86f44:	10c00015 	stw	r3,0(r2)
   86f48:	80c00117 	ldw	r3,4(r16)
   86f4c:	00bfff04 	movi	r2,-4
   86f50:	1886703a 	and	r3,r3,r2
   86f54:	1c45c83a 	sub	r2,r3,r17
   86f58:	1c400236 	bltu	r3,r17,86f64 <_malloc_r+0x4a8>
   86f5c:	00c003c4 	movi	r3,15
   86f60:	18800416 	blt	r3,r2,86f74 <_malloc_r+0x4b8>
   86f64:	9009883a 	mov	r4,r18
   86f68:	008ea780 	call	8ea78 <__malloc_unlock>
   86f6c:	0005883a 	mov	r2,zero
   86f70:	003f7b06 	br	86d60 <_gp+0xfff7517c>
   86f74:	88c00054 	ori	r3,r17,1
   86f78:	80c00115 	stw	r3,4(r16)
   86f7c:	8463883a 	add	r17,r16,r17
   86f80:	10800054 	ori	r2,r2,1
   86f84:	9c400215 	stw	r17,8(r19)
   86f88:	88800115 	stw	r2,4(r17)
   86f8c:	9009883a 	mov	r4,r18
   86f90:	008ea780 	call	8ea78 <__malloc_unlock>
   86f94:	80800204 	addi	r2,r16,8
   86f98:	003f7106 	br	86d60 <_gp+0xfff7517c>
   86f9c:	00c00504 	movi	r3,20
   86fa0:	18804a2e 	bgeu	r3,r2,870cc <_malloc_r+0x610>
   86fa4:	00c01504 	movi	r3,84
   86fa8:	18806e36 	bltu	r3,r2,87164 <_malloc_r+0x6a8>
   86fac:	8804d33a 	srli	r2,r17,12
   86fb0:	12001bc4 	addi	r8,r2,111
   86fb4:	11c01b84 	addi	r7,r2,110
   86fb8:	4209883a 	add	r4,r8,r8
   86fbc:	003edd06 	br	86b34 <_gp+0xfff74f50>
   86fc0:	3804d27a 	srli	r2,r7,9
   86fc4:	00c00104 	movi	r3,4
   86fc8:	1880442e 	bgeu	r3,r2,870dc <_malloc_r+0x620>
   86fcc:	00c00504 	movi	r3,20
   86fd0:	18808136 	bltu	r3,r2,871d8 <_malloc_r+0x71c>
   86fd4:	11401704 	addi	r5,r2,92
   86fd8:	10c016c4 	addi	r3,r2,91
   86fdc:	294b883a 	add	r5,r5,r5
   86fe0:	294b883a 	add	r5,r5,r5
   86fe4:	294b883a 	add	r5,r5,r5
   86fe8:	994b883a 	add	r5,r19,r5
   86fec:	28800017 	ldw	r2,0(r5)
   86ff0:	01800474 	movhi	r6,17
   86ff4:	297ffe04 	addi	r5,r5,-8
   86ff8:	31a12704 	addi	r6,r6,-31588
   86ffc:	28806526 	beq	r5,r2,87194 <_malloc_r+0x6d8>
   87000:	01bfff04 	movi	r6,-4
   87004:	10c00117 	ldw	r3,4(r2)
   87008:	1986703a 	and	r3,r3,r6
   8700c:	38c0022e 	bgeu	r7,r3,87018 <_malloc_r+0x55c>
   87010:	10800217 	ldw	r2,8(r2)
   87014:	28bffb1e 	bne	r5,r2,87004 <_gp+0xfff75420>
   87018:	11400317 	ldw	r5,12(r2)
   8701c:	98c00117 	ldw	r3,4(r19)
   87020:	81400315 	stw	r5,12(r16)
   87024:	80800215 	stw	r2,8(r16)
   87028:	2c000215 	stw	r16,8(r5)
   8702c:	14000315 	stw	r16,12(r2)
   87030:	003ef806 	br	86c14 <_gp+0xfff75030>
   87034:	88c00054 	ori	r3,r17,1
   87038:	80c00115 	stw	r3,4(r16)
   8703c:	8463883a 	add	r17,r16,r17
   87040:	34400515 	stw	r17,20(r6)
   87044:	34400415 	stw	r17,16(r6)
   87048:	10c00054 	ori	r3,r2,1
   8704c:	8a000315 	stw	r8,12(r17)
   87050:	8a000215 	stw	r8,8(r17)
   87054:	88c00115 	stw	r3,4(r17)
   87058:	88a3883a 	add	r17,r17,r2
   8705c:	88800015 	stw	r2,0(r17)
   87060:	9009883a 	mov	r4,r18
   87064:	008ea780 	call	8ea78 <__malloc_unlock>
   87068:	80800204 	addi	r2,r16,8
   8706c:	003f3c06 	br	86d60 <_gp+0xfff7517c>
   87070:	30c00117 	ldw	r3,4(r6)
   87074:	003ee706 	br	86c14 <_gp+0xfff75030>
   87078:	5ac00044 	addi	r11,r11,1
   8707c:	588000cc 	andi	r2,r11,3
   87080:	31800204 	addi	r6,r6,8
   87084:	103efd1e 	bne	r2,zero,86c7c <_gp+0xfff75098>
   87088:	00002406 	br	8711c <_malloc_r+0x660>
   8708c:	14000317 	ldw	r16,12(r2)
   87090:	143f251e 	bne	r2,r16,86d28 <_gp+0xfff75144>
   87094:	21000084 	addi	r4,r4,2
   87098:	003ebc06 	br	86b8c <_gp+0xfff74fa8>
   8709c:	8085883a 	add	r2,r16,r2
   870a0:	10c00117 	ldw	r3,4(r2)
   870a4:	81000317 	ldw	r4,12(r16)
   870a8:	81400217 	ldw	r5,8(r16)
   870ac:	18c00054 	ori	r3,r3,1
   870b0:	10c00115 	stw	r3,4(r2)
   870b4:	29000315 	stw	r4,12(r5)
   870b8:	21400215 	stw	r5,8(r4)
   870bc:	9009883a 	mov	r4,r18
   870c0:	008ea780 	call	8ea78 <__malloc_unlock>
   870c4:	80800204 	addi	r2,r16,8
   870c8:	003f2506 	br	86d60 <_gp+0xfff7517c>
   870cc:	12001704 	addi	r8,r2,92
   870d0:	11c016c4 	addi	r7,r2,91
   870d4:	4209883a 	add	r4,r8,r8
   870d8:	003e9606 	br	86b34 <_gp+0xfff74f50>
   870dc:	3804d1ba 	srli	r2,r7,6
   870e0:	11400e44 	addi	r5,r2,57
   870e4:	10c00e04 	addi	r3,r2,56
   870e8:	294b883a 	add	r5,r5,r5
   870ec:	003fbc06 	br	86fe0 <_gp+0xfff753fc>
   870f0:	84ff5926 	beq	r16,r19,86e58 <_gp+0xfff75274>
   870f4:	00800474 	movhi	r2,17
   870f8:	10a12704 	addi	r2,r2,-31588
   870fc:	14000217 	ldw	r16,8(r2)
   87100:	00bfff04 	movi	r2,-4
   87104:	80c00117 	ldw	r3,4(r16)
   87108:	1886703a 	and	r3,r3,r2
   8710c:	003f9106 	br	86f54 <_gp+0xfff75370>
   87110:	60800217 	ldw	r2,8(r12)
   87114:	213fffc4 	addi	r4,r4,-1
   87118:	1300651e 	bne	r2,r12,872b0 <_malloc_r+0x7f4>
   8711c:	208000cc 	andi	r2,r4,3
   87120:	633ffe04 	addi	r12,r12,-8
   87124:	103ffa1e 	bne	r2,zero,87110 <_gp+0xfff7552c>
   87128:	98800117 	ldw	r2,4(r19)
   8712c:	0146303a 	nor	r3,zero,r5
   87130:	1884703a 	and	r2,r3,r2
   87134:	98800115 	stw	r2,4(r19)
   87138:	294b883a 	add	r5,r5,r5
   8713c:	117f2836 	bltu	r2,r5,86de0 <_gp+0xfff751fc>
   87140:	283f2726 	beq	r5,zero,86de0 <_gp+0xfff751fc>
   87144:	2886703a 	and	r3,r5,r2
   87148:	5809883a 	mov	r4,r11
   8714c:	183ec31e 	bne	r3,zero,86c5c <_gp+0xfff75078>
   87150:	294b883a 	add	r5,r5,r5
   87154:	2886703a 	and	r3,r5,r2
   87158:	21000104 	addi	r4,r4,4
   8715c:	183ffc26 	beq	r3,zero,87150 <_gp+0xfff7556c>
   87160:	003ebe06 	br	86c5c <_gp+0xfff75078>
   87164:	00c05504 	movi	r3,340
   87168:	18801236 	bltu	r3,r2,871b4 <_malloc_r+0x6f8>
   8716c:	8804d3fa 	srli	r2,r17,15
   87170:	12001e04 	addi	r8,r2,120
   87174:	11c01dc4 	addi	r7,r2,119
   87178:	4209883a 	add	r4,r8,r8
   8717c:	003e6d06 	br	86b34 <_gp+0xfff74f50>
   87180:	00c40004 	movi	r3,4096
   87184:	003f4606 	br	86ea0 <_gp+0xfff752bc>
   87188:	00800044 	movi	r2,1
   8718c:	a0800115 	stw	r2,4(r20)
   87190:	003f7406 	br	86f64 <_gp+0xfff75380>
   87194:	1805d0ba 	srai	r2,r3,2
   87198:	01c00044 	movi	r7,1
   8719c:	30c00117 	ldw	r3,4(r6)
   871a0:	388e983a 	sll	r7,r7,r2
   871a4:	2805883a 	mov	r2,r5
   871a8:	38c6b03a 	or	r3,r7,r3
   871ac:	30c00115 	stw	r3,4(r6)
   871b0:	003f9b06 	br	87020 <_gp+0xfff7543c>
   871b4:	00c15504 	movi	r3,1364
   871b8:	18801a36 	bltu	r3,r2,87224 <_malloc_r+0x768>
   871bc:	8804d4ba 	srli	r2,r17,18
   871c0:	12001f44 	addi	r8,r2,125
   871c4:	11c01f04 	addi	r7,r2,124
   871c8:	4209883a 	add	r4,r8,r8
   871cc:	003e5906 	br	86b34 <_gp+0xfff74f50>
   871d0:	ad400404 	addi	r21,r21,16
   871d4:	003f1706 	br	86e34 <_gp+0xfff75250>
   871d8:	00c01504 	movi	r3,84
   871dc:	18802336 	bltu	r3,r2,8726c <_malloc_r+0x7b0>
   871e0:	3804d33a 	srli	r2,r7,12
   871e4:	11401bc4 	addi	r5,r2,111
   871e8:	10c01b84 	addi	r3,r2,110
   871ec:	294b883a 	add	r5,r5,r5
   871f0:	003f7b06 	br	86fe0 <_gp+0xfff753fc>
   871f4:	9c000217 	ldw	r16,8(r19)
   871f8:	00bfff04 	movi	r2,-4
   871fc:	80c00117 	ldw	r3,4(r16)
   87200:	1886703a 	and	r3,r3,r2
   87204:	003f5306 	br	86f54 <_gp+0xfff75370>
   87208:	3083ffcc 	andi	r2,r6,4095
   8720c:	103f181e 	bne	r2,zero,86e70 <_gp+0xfff7528c>
   87210:	99000217 	ldw	r4,8(r19)
   87214:	b545883a 	add	r2,r22,r21
   87218:	10800054 	ori	r2,r2,1
   8721c:	20800115 	stw	r2,4(r4)
   87220:	003f3e06 	br	86f1c <_gp+0xfff75338>
   87224:	01003f84 	movi	r4,254
   87228:	02001fc4 	movi	r8,127
   8722c:	01c01f84 	movi	r7,126
   87230:	003e4006 	br	86b34 <_gp+0xfff74f50>
   87234:	00800474 	movhi	r2,17
   87238:	10a6fc04 	addi	r2,r2,-25616
   8723c:	15000015 	stw	r20,0(r2)
   87240:	003f1106 	br	86e88 <_gp+0xfff752a4>
   87244:	00800044 	movi	r2,1
   87248:	002b883a 	mov	r21,zero
   8724c:	003f1f06 	br	86ecc <_gp+0xfff752e8>
   87250:	81400204 	addi	r5,r16,8
   87254:	9009883a 	mov	r4,r18
   87258:	0085ec40 	call	85ec4 <_free_r>
   8725c:	00800474 	movhi	r2,17
   87260:	10a71d04 	addi	r2,r2,-25484
   87264:	10c00017 	ldw	r3,0(r2)
   87268:	003f2c06 	br	86f1c <_gp+0xfff75338>
   8726c:	00c05504 	movi	r3,340
   87270:	18800536 	bltu	r3,r2,87288 <_malloc_r+0x7cc>
   87274:	3804d3fa 	srli	r2,r7,15
   87278:	11401e04 	addi	r5,r2,120
   8727c:	10c01dc4 	addi	r3,r2,119
   87280:	294b883a 	add	r5,r5,r5
   87284:	003f5606 	br	86fe0 <_gp+0xfff753fc>
   87288:	00c15504 	movi	r3,1364
   8728c:	18800536 	bltu	r3,r2,872a4 <_malloc_r+0x7e8>
   87290:	3804d4ba 	srli	r2,r7,18
   87294:	11401f44 	addi	r5,r2,125
   87298:	10c01f04 	addi	r3,r2,124
   8729c:	294b883a 	add	r5,r5,r5
   872a0:	003f4f06 	br	86fe0 <_gp+0xfff753fc>
   872a4:	01403f84 	movi	r5,254
   872a8:	00c01f84 	movi	r3,126
   872ac:	003f4c06 	br	86fe0 <_gp+0xfff753fc>
   872b0:	98800117 	ldw	r2,4(r19)
   872b4:	003fa006 	br	87138 <_gp+0xfff75554>
   872b8:	8808d0fa 	srli	r4,r17,3
   872bc:	20800044 	addi	r2,r4,1
   872c0:	1085883a 	add	r2,r2,r2
   872c4:	003e9006 	br	86d08 <_gp+0xfff75124>

000872c8 <memchr>:
   872c8:	208000cc 	andi	r2,r4,3
   872cc:	280f883a 	mov	r7,r5
   872d0:	10003426 	beq	r2,zero,873a4 <memchr+0xdc>
   872d4:	30bfffc4 	addi	r2,r6,-1
   872d8:	30001a26 	beq	r6,zero,87344 <memchr+0x7c>
   872dc:	20c00003 	ldbu	r3,0(r4)
   872e0:	29803fcc 	andi	r6,r5,255
   872e4:	30c0051e 	bne	r6,r3,872fc <memchr+0x34>
   872e8:	00001806 	br	8734c <memchr+0x84>
   872ec:	10001526 	beq	r2,zero,87344 <memchr+0x7c>
   872f0:	20c00003 	ldbu	r3,0(r4)
   872f4:	10bfffc4 	addi	r2,r2,-1
   872f8:	30c01426 	beq	r6,r3,8734c <memchr+0x84>
   872fc:	21000044 	addi	r4,r4,1
   87300:	20c000cc 	andi	r3,r4,3
   87304:	183ff91e 	bne	r3,zero,872ec <_gp+0xfff75708>
   87308:	020000c4 	movi	r8,3
   8730c:	40801136 	bltu	r8,r2,87354 <memchr+0x8c>
   87310:	10000c26 	beq	r2,zero,87344 <memchr+0x7c>
   87314:	20c00003 	ldbu	r3,0(r4)
   87318:	29403fcc 	andi	r5,r5,255
   8731c:	28c00b26 	beq	r5,r3,8734c <memchr+0x84>
   87320:	20c00044 	addi	r3,r4,1
   87324:	39803fcc 	andi	r6,r7,255
   87328:	2089883a 	add	r4,r4,r2
   8732c:	00000306 	br	8733c <memchr+0x74>
   87330:	18c00044 	addi	r3,r3,1
   87334:	197fffc3 	ldbu	r5,-1(r3)
   87338:	31400526 	beq	r6,r5,87350 <memchr+0x88>
   8733c:	1805883a 	mov	r2,r3
   87340:	20fffb1e 	bne	r4,r3,87330 <_gp+0xfff7574c>
   87344:	0005883a 	mov	r2,zero
   87348:	f800283a 	ret
   8734c:	2005883a 	mov	r2,r4
   87350:	f800283a 	ret
   87354:	28c03fcc 	andi	r3,r5,255
   87358:	1812923a 	slli	r9,r3,8
   8735c:	02ffbff4 	movhi	r11,65279
   87360:	02a02074 	movhi	r10,32897
   87364:	48d2b03a 	or	r9,r9,r3
   87368:	4806943a 	slli	r3,r9,16
   8736c:	5affbfc4 	addi	r11,r11,-257
   87370:	52a02004 	addi	r10,r10,-32640
   87374:	48d2b03a 	or	r9,r9,r3
   87378:	20c00017 	ldw	r3,0(r4)
   8737c:	48c6f03a 	xor	r3,r9,r3
   87380:	1acd883a 	add	r6,r3,r11
   87384:	00c6303a 	nor	r3,zero,r3
   87388:	30c6703a 	and	r3,r6,r3
   8738c:	1a86703a 	and	r3,r3,r10
   87390:	183fe01e 	bne	r3,zero,87314 <_gp+0xfff75730>
   87394:	10bfff04 	addi	r2,r2,-4
   87398:	21000104 	addi	r4,r4,4
   8739c:	40bff636 	bltu	r8,r2,87378 <_gp+0xfff75794>
   873a0:	003fdb06 	br	87310 <_gp+0xfff7572c>
   873a4:	3005883a 	mov	r2,r6
   873a8:	003fd706 	br	87308 <_gp+0xfff75724>

000873ac <memcpy>:
   873ac:	defffd04 	addi	sp,sp,-12
   873b0:	dfc00215 	stw	ra,8(sp)
   873b4:	dc400115 	stw	r17,4(sp)
   873b8:	dc000015 	stw	r16,0(sp)
   873bc:	00c003c4 	movi	r3,15
   873c0:	2005883a 	mov	r2,r4
   873c4:	1980452e 	bgeu	r3,r6,874dc <memcpy+0x130>
   873c8:	2906b03a 	or	r3,r5,r4
   873cc:	18c000cc 	andi	r3,r3,3
   873d0:	1800441e 	bne	r3,zero,874e4 <memcpy+0x138>
   873d4:	347ffc04 	addi	r17,r6,-16
   873d8:	8822d13a 	srli	r17,r17,4
   873dc:	28c00104 	addi	r3,r5,4
   873e0:	23400104 	addi	r13,r4,4
   873e4:	8820913a 	slli	r16,r17,4
   873e8:	2b000204 	addi	r12,r5,8
   873ec:	22c00204 	addi	r11,r4,8
   873f0:	84000504 	addi	r16,r16,20
   873f4:	2a800304 	addi	r10,r5,12
   873f8:	22400304 	addi	r9,r4,12
   873fc:	2c21883a 	add	r16,r5,r16
   87400:	2811883a 	mov	r8,r5
   87404:	200f883a 	mov	r7,r4
   87408:	41000017 	ldw	r4,0(r8)
   8740c:	1fc00017 	ldw	ra,0(r3)
   87410:	63c00017 	ldw	r15,0(r12)
   87414:	39000015 	stw	r4,0(r7)
   87418:	53800017 	ldw	r14,0(r10)
   8741c:	6fc00015 	stw	ra,0(r13)
   87420:	5bc00015 	stw	r15,0(r11)
   87424:	4b800015 	stw	r14,0(r9)
   87428:	18c00404 	addi	r3,r3,16
   8742c:	39c00404 	addi	r7,r7,16
   87430:	42000404 	addi	r8,r8,16
   87434:	6b400404 	addi	r13,r13,16
   87438:	63000404 	addi	r12,r12,16
   8743c:	5ac00404 	addi	r11,r11,16
   87440:	52800404 	addi	r10,r10,16
   87444:	4a400404 	addi	r9,r9,16
   87448:	1c3fef1e 	bne	r3,r16,87408 <_gp+0xfff75824>
   8744c:	89c00044 	addi	r7,r17,1
   87450:	380e913a 	slli	r7,r7,4
   87454:	310003cc 	andi	r4,r6,15
   87458:	02c000c4 	movi	r11,3
   8745c:	11c7883a 	add	r3,r2,r7
   87460:	29cb883a 	add	r5,r5,r7
   87464:	5900212e 	bgeu	r11,r4,874ec <memcpy+0x140>
   87468:	1813883a 	mov	r9,r3
   8746c:	2811883a 	mov	r8,r5
   87470:	200f883a 	mov	r7,r4
   87474:	42800017 	ldw	r10,0(r8)
   87478:	4a400104 	addi	r9,r9,4
   8747c:	39ffff04 	addi	r7,r7,-4
   87480:	4abfff15 	stw	r10,-4(r9)
   87484:	42000104 	addi	r8,r8,4
   87488:	59fffa36 	bltu	r11,r7,87474 <_gp+0xfff75890>
   8748c:	213fff04 	addi	r4,r4,-4
   87490:	2008d0ba 	srli	r4,r4,2
   87494:	318000cc 	andi	r6,r6,3
   87498:	21000044 	addi	r4,r4,1
   8749c:	2109883a 	add	r4,r4,r4
   874a0:	2109883a 	add	r4,r4,r4
   874a4:	1907883a 	add	r3,r3,r4
   874a8:	290b883a 	add	r5,r5,r4
   874ac:	30000626 	beq	r6,zero,874c8 <memcpy+0x11c>
   874b0:	198d883a 	add	r6,r3,r6
   874b4:	29c00003 	ldbu	r7,0(r5)
   874b8:	18c00044 	addi	r3,r3,1
   874bc:	29400044 	addi	r5,r5,1
   874c0:	19ffffc5 	stb	r7,-1(r3)
   874c4:	19bffb1e 	bne	r3,r6,874b4 <_gp+0xfff758d0>
   874c8:	dfc00217 	ldw	ra,8(sp)
   874cc:	dc400117 	ldw	r17,4(sp)
   874d0:	dc000017 	ldw	r16,0(sp)
   874d4:	dec00304 	addi	sp,sp,12
   874d8:	f800283a 	ret
   874dc:	2007883a 	mov	r3,r4
   874e0:	003ff206 	br	874ac <_gp+0xfff758c8>
   874e4:	2007883a 	mov	r3,r4
   874e8:	003ff106 	br	874b0 <_gp+0xfff758cc>
   874ec:	200d883a 	mov	r6,r4
   874f0:	003fee06 	br	874ac <_gp+0xfff758c8>

000874f4 <memmove>:
   874f4:	2005883a 	mov	r2,r4
   874f8:	29000b2e 	bgeu	r5,r4,87528 <memmove+0x34>
   874fc:	298f883a 	add	r7,r5,r6
   87500:	21c0092e 	bgeu	r4,r7,87528 <memmove+0x34>
   87504:	2187883a 	add	r3,r4,r6
   87508:	198bc83a 	sub	r5,r3,r6
   8750c:	30004826 	beq	r6,zero,87630 <memmove+0x13c>
   87510:	39ffffc4 	addi	r7,r7,-1
   87514:	39000003 	ldbu	r4,0(r7)
   87518:	18ffffc4 	addi	r3,r3,-1
   8751c:	19000005 	stb	r4,0(r3)
   87520:	28fffb1e 	bne	r5,r3,87510 <_gp+0xfff7592c>
   87524:	f800283a 	ret
   87528:	00c003c4 	movi	r3,15
   8752c:	1980412e 	bgeu	r3,r6,87634 <memmove+0x140>
   87530:	2886b03a 	or	r3,r5,r2
   87534:	18c000cc 	andi	r3,r3,3
   87538:	1800401e 	bne	r3,zero,8763c <memmove+0x148>
   8753c:	33fffc04 	addi	r15,r6,-16
   87540:	781ed13a 	srli	r15,r15,4
   87544:	28c00104 	addi	r3,r5,4
   87548:	13400104 	addi	r13,r2,4
   8754c:	781c913a 	slli	r14,r15,4
   87550:	2b000204 	addi	r12,r5,8
   87554:	12c00204 	addi	r11,r2,8
   87558:	73800504 	addi	r14,r14,20
   8755c:	2a800304 	addi	r10,r5,12
   87560:	12400304 	addi	r9,r2,12
   87564:	2b9d883a 	add	r14,r5,r14
   87568:	2811883a 	mov	r8,r5
   8756c:	100f883a 	mov	r7,r2
   87570:	41000017 	ldw	r4,0(r8)
   87574:	39c00404 	addi	r7,r7,16
   87578:	18c00404 	addi	r3,r3,16
   8757c:	393ffc15 	stw	r4,-16(r7)
   87580:	193ffc17 	ldw	r4,-16(r3)
   87584:	6b400404 	addi	r13,r13,16
   87588:	5ac00404 	addi	r11,r11,16
   8758c:	693ffc15 	stw	r4,-16(r13)
   87590:	61000017 	ldw	r4,0(r12)
   87594:	4a400404 	addi	r9,r9,16
   87598:	42000404 	addi	r8,r8,16
   8759c:	593ffc15 	stw	r4,-16(r11)
   875a0:	51000017 	ldw	r4,0(r10)
   875a4:	63000404 	addi	r12,r12,16
   875a8:	52800404 	addi	r10,r10,16
   875ac:	493ffc15 	stw	r4,-16(r9)
   875b0:	1bbfef1e 	bne	r3,r14,87570 <_gp+0xfff7598c>
   875b4:	79000044 	addi	r4,r15,1
   875b8:	2008913a 	slli	r4,r4,4
   875bc:	328003cc 	andi	r10,r6,15
   875c0:	02c000c4 	movi	r11,3
   875c4:	1107883a 	add	r3,r2,r4
   875c8:	290b883a 	add	r5,r5,r4
   875cc:	5a801e2e 	bgeu	r11,r10,87648 <memmove+0x154>
   875d0:	1813883a 	mov	r9,r3
   875d4:	2811883a 	mov	r8,r5
   875d8:	500f883a 	mov	r7,r10
   875dc:	41000017 	ldw	r4,0(r8)
   875e0:	4a400104 	addi	r9,r9,4
   875e4:	39ffff04 	addi	r7,r7,-4
   875e8:	493fff15 	stw	r4,-4(r9)
   875ec:	42000104 	addi	r8,r8,4
   875f0:	59fffa36 	bltu	r11,r7,875dc <_gp+0xfff759f8>
   875f4:	513fff04 	addi	r4,r10,-4
   875f8:	2008d0ba 	srli	r4,r4,2
   875fc:	318000cc 	andi	r6,r6,3
   87600:	21000044 	addi	r4,r4,1
   87604:	2109883a 	add	r4,r4,r4
   87608:	2109883a 	add	r4,r4,r4
   8760c:	1907883a 	add	r3,r3,r4
   87610:	290b883a 	add	r5,r5,r4
   87614:	30000b26 	beq	r6,zero,87644 <memmove+0x150>
   87618:	198d883a 	add	r6,r3,r6
   8761c:	29c00003 	ldbu	r7,0(r5)
   87620:	18c00044 	addi	r3,r3,1
   87624:	29400044 	addi	r5,r5,1
   87628:	19ffffc5 	stb	r7,-1(r3)
   8762c:	19bffb1e 	bne	r3,r6,8761c <_gp+0xfff75a38>
   87630:	f800283a 	ret
   87634:	1007883a 	mov	r3,r2
   87638:	003ff606 	br	87614 <_gp+0xfff75a30>
   8763c:	1007883a 	mov	r3,r2
   87640:	003ff506 	br	87618 <_gp+0xfff75a34>
   87644:	f800283a 	ret
   87648:	500d883a 	mov	r6,r10
   8764c:	003ff106 	br	87614 <_gp+0xfff75a30>

00087650 <memset>:
   87650:	20c000cc 	andi	r3,r4,3
   87654:	2005883a 	mov	r2,r4
   87658:	18004426 	beq	r3,zero,8776c <memset+0x11c>
   8765c:	31ffffc4 	addi	r7,r6,-1
   87660:	30004026 	beq	r6,zero,87764 <memset+0x114>
   87664:	2813883a 	mov	r9,r5
   87668:	200d883a 	mov	r6,r4
   8766c:	2007883a 	mov	r3,r4
   87670:	00000406 	br	87684 <memset+0x34>
   87674:	3a3fffc4 	addi	r8,r7,-1
   87678:	31800044 	addi	r6,r6,1
   8767c:	38003926 	beq	r7,zero,87764 <memset+0x114>
   87680:	400f883a 	mov	r7,r8
   87684:	18c00044 	addi	r3,r3,1
   87688:	32400005 	stb	r9,0(r6)
   8768c:	1a0000cc 	andi	r8,r3,3
   87690:	403ff81e 	bne	r8,zero,87674 <_gp+0xfff75a90>
   87694:	010000c4 	movi	r4,3
   87698:	21c02d2e 	bgeu	r4,r7,87750 <memset+0x100>
   8769c:	29003fcc 	andi	r4,r5,255
   876a0:	200c923a 	slli	r6,r4,8
   876a4:	3108b03a 	or	r4,r6,r4
   876a8:	200c943a 	slli	r6,r4,16
   876ac:	218cb03a 	or	r6,r4,r6
   876b0:	010003c4 	movi	r4,15
   876b4:	21c0182e 	bgeu	r4,r7,87718 <memset+0xc8>
   876b8:	3b3ffc04 	addi	r12,r7,-16
   876bc:	6018d13a 	srli	r12,r12,4
   876c0:	1a000104 	addi	r8,r3,4
   876c4:	1ac00204 	addi	r11,r3,8
   876c8:	6008913a 	slli	r4,r12,4
   876cc:	1a800304 	addi	r10,r3,12
   876d0:	1813883a 	mov	r9,r3
   876d4:	21000504 	addi	r4,r4,20
   876d8:	1909883a 	add	r4,r3,r4
   876dc:	49800015 	stw	r6,0(r9)
   876e0:	41800015 	stw	r6,0(r8)
   876e4:	59800015 	stw	r6,0(r11)
   876e8:	51800015 	stw	r6,0(r10)
   876ec:	42000404 	addi	r8,r8,16
   876f0:	4a400404 	addi	r9,r9,16
   876f4:	5ac00404 	addi	r11,r11,16
   876f8:	52800404 	addi	r10,r10,16
   876fc:	413ff71e 	bne	r8,r4,876dc <_gp+0xfff75af8>
   87700:	63000044 	addi	r12,r12,1
   87704:	6018913a 	slli	r12,r12,4
   87708:	39c003cc 	andi	r7,r7,15
   8770c:	010000c4 	movi	r4,3
   87710:	1b07883a 	add	r3,r3,r12
   87714:	21c00e2e 	bgeu	r4,r7,87750 <memset+0x100>
   87718:	1813883a 	mov	r9,r3
   8771c:	3811883a 	mov	r8,r7
   87720:	010000c4 	movi	r4,3
   87724:	49800015 	stw	r6,0(r9)
   87728:	423fff04 	addi	r8,r8,-4
   8772c:	4a400104 	addi	r9,r9,4
   87730:	223ffc36 	bltu	r4,r8,87724 <_gp+0xfff75b40>
   87734:	393fff04 	addi	r4,r7,-4
   87738:	2008d0ba 	srli	r4,r4,2
   8773c:	39c000cc 	andi	r7,r7,3
   87740:	21000044 	addi	r4,r4,1
   87744:	2109883a 	add	r4,r4,r4
   87748:	2109883a 	add	r4,r4,r4
   8774c:	1907883a 	add	r3,r3,r4
   87750:	38000526 	beq	r7,zero,87768 <memset+0x118>
   87754:	19cf883a 	add	r7,r3,r7
   87758:	19400005 	stb	r5,0(r3)
   8775c:	18c00044 	addi	r3,r3,1
   87760:	38fffd1e 	bne	r7,r3,87758 <_gp+0xfff75b74>
   87764:	f800283a 	ret
   87768:	f800283a 	ret
   8776c:	2007883a 	mov	r3,r4
   87770:	300f883a 	mov	r7,r6
   87774:	003fc706 	br	87694 <_gp+0xfff75ab0>

00087778 <_Balloc>:
   87778:	20801317 	ldw	r2,76(r4)
   8777c:	defffc04 	addi	sp,sp,-16
   87780:	dc400115 	stw	r17,4(sp)
   87784:	dc000015 	stw	r16,0(sp)
   87788:	dfc00315 	stw	ra,12(sp)
   8778c:	dc800215 	stw	r18,8(sp)
   87790:	2023883a 	mov	r17,r4
   87794:	2821883a 	mov	r16,r5
   87798:	10000f26 	beq	r2,zero,877d8 <_Balloc+0x60>
   8779c:	8407883a 	add	r3,r16,r16
   877a0:	18c7883a 	add	r3,r3,r3
   877a4:	10c7883a 	add	r3,r2,r3
   877a8:	18800017 	ldw	r2,0(r3)
   877ac:	10001126 	beq	r2,zero,877f4 <_Balloc+0x7c>
   877b0:	11000017 	ldw	r4,0(r2)
   877b4:	19000015 	stw	r4,0(r3)
   877b8:	10000415 	stw	zero,16(r2)
   877bc:	10000315 	stw	zero,12(r2)
   877c0:	dfc00317 	ldw	ra,12(sp)
   877c4:	dc800217 	ldw	r18,8(sp)
   877c8:	dc400117 	ldw	r17,4(sp)
   877cc:	dc000017 	ldw	r16,0(sp)
   877d0:	dec00404 	addi	sp,sp,16
   877d4:	f800283a 	ret
   877d8:	01800844 	movi	r6,33
   877dc:	01400104 	movi	r5,4
   877e0:	008a8200 	call	8a820 <_calloc_r>
   877e4:	88801315 	stw	r2,76(r17)
   877e8:	103fec1e 	bne	r2,zero,8779c <_gp+0xfff75bb8>
   877ec:	0005883a 	mov	r2,zero
   877f0:	003ff306 	br	877c0 <_gp+0xfff75bdc>
   877f4:	01400044 	movi	r5,1
   877f8:	2c24983a 	sll	r18,r5,r16
   877fc:	8809883a 	mov	r4,r17
   87800:	91800144 	addi	r6,r18,5
   87804:	318d883a 	add	r6,r6,r6
   87808:	318d883a 	add	r6,r6,r6
   8780c:	008a8200 	call	8a820 <_calloc_r>
   87810:	103ff626 	beq	r2,zero,877ec <_gp+0xfff75c08>
   87814:	14000115 	stw	r16,4(r2)
   87818:	14800215 	stw	r18,8(r2)
   8781c:	003fe606 	br	877b8 <_gp+0xfff75bd4>

00087820 <_Bfree>:
   87820:	28000826 	beq	r5,zero,87844 <_Bfree+0x24>
   87824:	28c00117 	ldw	r3,4(r5)
   87828:	20801317 	ldw	r2,76(r4)
   8782c:	18c7883a 	add	r3,r3,r3
   87830:	18c7883a 	add	r3,r3,r3
   87834:	10c5883a 	add	r2,r2,r3
   87838:	10c00017 	ldw	r3,0(r2)
   8783c:	28c00015 	stw	r3,0(r5)
   87840:	11400015 	stw	r5,0(r2)
   87844:	f800283a 	ret

00087848 <__multadd>:
   87848:	defff704 	addi	sp,sp,-36
   8784c:	dc800215 	stw	r18,8(sp)
   87850:	2c800417 	ldw	r18,16(r5)
   87854:	dd800615 	stw	r22,24(sp)
   87858:	dd400515 	stw	r21,20(sp)
   8785c:	dd000415 	stw	r20,16(sp)
   87860:	dcc00315 	stw	r19,12(sp)
   87864:	dc400115 	stw	r17,4(sp)
   87868:	dc000015 	stw	r16,0(sp)
   8786c:	dfc00815 	stw	ra,32(sp)
   87870:	ddc00715 	stw	r23,28(sp)
   87874:	2827883a 	mov	r19,r5
   87878:	2029883a 	mov	r20,r4
   8787c:	3023883a 	mov	r17,r6
   87880:	3821883a 	mov	r16,r7
   87884:	2d400504 	addi	r21,r5,20
   87888:	002d883a 	mov	r22,zero
   8788c:	adc00017 	ldw	r23,0(r21)
   87890:	880b883a 	mov	r5,r17
   87894:	ad400104 	addi	r21,r21,4
   87898:	b93fffcc 	andi	r4,r23,65535
   8789c:	00817900 	call	81790 <__mulsi3>
   878a0:	b808d43a 	srli	r4,r23,16
   878a4:	880b883a 	mov	r5,r17
   878a8:	1421883a 	add	r16,r2,r16
   878ac:	00817900 	call	81790 <__mulsi3>
   878b0:	800ed43a 	srli	r7,r16,16
   878b4:	80ffffcc 	andi	r3,r16,65535
   878b8:	b5800044 	addi	r22,r22,1
   878bc:	11c5883a 	add	r2,r2,r7
   878c0:	100e943a 	slli	r7,r2,16
   878c4:	1020d43a 	srli	r16,r2,16
   878c8:	38c7883a 	add	r3,r7,r3
   878cc:	a8ffff15 	stw	r3,-4(r21)
   878d0:	b4bfee16 	blt	r22,r18,8788c <_gp+0xfff75ca8>
   878d4:	80000926 	beq	r16,zero,878fc <__multadd+0xb4>
   878d8:	98800217 	ldw	r2,8(r19)
   878dc:	9080130e 	bge	r18,r2,8792c <__multadd+0xe4>
   878e0:	90800144 	addi	r2,r18,5
   878e4:	1085883a 	add	r2,r2,r2
   878e8:	1085883a 	add	r2,r2,r2
   878ec:	9885883a 	add	r2,r19,r2
   878f0:	14000015 	stw	r16,0(r2)
   878f4:	94800044 	addi	r18,r18,1
   878f8:	9c800415 	stw	r18,16(r19)
   878fc:	9805883a 	mov	r2,r19
   87900:	dfc00817 	ldw	ra,32(sp)
   87904:	ddc00717 	ldw	r23,28(sp)
   87908:	dd800617 	ldw	r22,24(sp)
   8790c:	dd400517 	ldw	r21,20(sp)
   87910:	dd000417 	ldw	r20,16(sp)
   87914:	dcc00317 	ldw	r19,12(sp)
   87918:	dc800217 	ldw	r18,8(sp)
   8791c:	dc400117 	ldw	r17,4(sp)
   87920:	dc000017 	ldw	r16,0(sp)
   87924:	dec00904 	addi	sp,sp,36
   87928:	f800283a 	ret
   8792c:	99400117 	ldw	r5,4(r19)
   87930:	a009883a 	mov	r4,r20
   87934:	29400044 	addi	r5,r5,1
   87938:	00877780 	call	87778 <_Balloc>
   8793c:	99800417 	ldw	r6,16(r19)
   87940:	99400304 	addi	r5,r19,12
   87944:	11000304 	addi	r4,r2,12
   87948:	31800084 	addi	r6,r6,2
   8794c:	318d883a 	add	r6,r6,r6
   87950:	318d883a 	add	r6,r6,r6
   87954:	1023883a 	mov	r17,r2
   87958:	00873ac0 	call	873ac <memcpy>
   8795c:	98000a26 	beq	r19,zero,87988 <__multadd+0x140>
   87960:	98c00117 	ldw	r3,4(r19)
   87964:	a0801317 	ldw	r2,76(r20)
   87968:	18c7883a 	add	r3,r3,r3
   8796c:	18c7883a 	add	r3,r3,r3
   87970:	10c5883a 	add	r2,r2,r3
   87974:	10c00017 	ldw	r3,0(r2)
   87978:	98c00015 	stw	r3,0(r19)
   8797c:	14c00015 	stw	r19,0(r2)
   87980:	8827883a 	mov	r19,r17
   87984:	003fd606 	br	878e0 <_gp+0xfff75cfc>
   87988:	8827883a 	mov	r19,r17
   8798c:	003fd406 	br	878e0 <_gp+0xfff75cfc>

00087990 <__s2b>:
   87990:	defff904 	addi	sp,sp,-28
   87994:	dc400115 	stw	r17,4(sp)
   87998:	dc000015 	stw	r16,0(sp)
   8799c:	2023883a 	mov	r17,r4
   879a0:	2821883a 	mov	r16,r5
   879a4:	39000204 	addi	r4,r7,8
   879a8:	01400244 	movi	r5,9
   879ac:	dcc00315 	stw	r19,12(sp)
   879b0:	dc800215 	stw	r18,8(sp)
   879b4:	dfc00615 	stw	ra,24(sp)
   879b8:	dd400515 	stw	r21,20(sp)
   879bc:	dd000415 	stw	r20,16(sp)
   879c0:	3825883a 	mov	r18,r7
   879c4:	3027883a 	mov	r19,r6
   879c8:	0080a480 	call	80a48 <__divsi3>
   879cc:	00c00044 	movi	r3,1
   879d0:	000b883a 	mov	r5,zero
   879d4:	1880030e 	bge	r3,r2,879e4 <__s2b+0x54>
   879d8:	18c7883a 	add	r3,r3,r3
   879dc:	29400044 	addi	r5,r5,1
   879e0:	18bffd16 	blt	r3,r2,879d8 <_gp+0xfff75df4>
   879e4:	8809883a 	mov	r4,r17
   879e8:	00877780 	call	87778 <_Balloc>
   879ec:	d8c00717 	ldw	r3,28(sp)
   879f0:	10c00515 	stw	r3,20(r2)
   879f4:	00c00044 	movi	r3,1
   879f8:	10c00415 	stw	r3,16(r2)
   879fc:	00c00244 	movi	r3,9
   87a00:	1cc0210e 	bge	r3,r19,87a88 <__s2b+0xf8>
   87a04:	80eb883a 	add	r21,r16,r3
   87a08:	a829883a 	mov	r20,r21
   87a0c:	84e1883a 	add	r16,r16,r19
   87a10:	a1c00007 	ldb	r7,0(r20)
   87a14:	01800284 	movi	r6,10
   87a18:	a5000044 	addi	r20,r20,1
   87a1c:	100b883a 	mov	r5,r2
   87a20:	39fff404 	addi	r7,r7,-48
   87a24:	8809883a 	mov	r4,r17
   87a28:	00878480 	call	87848 <__multadd>
   87a2c:	a43ff81e 	bne	r20,r16,87a10 <_gp+0xfff75e2c>
   87a30:	ace1883a 	add	r16,r21,r19
   87a34:	843ffe04 	addi	r16,r16,-8
   87a38:	9c800a0e 	bge	r19,r18,87a64 <__s2b+0xd4>
   87a3c:	94e5c83a 	sub	r18,r18,r19
   87a40:	84a5883a 	add	r18,r16,r18
   87a44:	81c00007 	ldb	r7,0(r16)
   87a48:	01800284 	movi	r6,10
   87a4c:	84000044 	addi	r16,r16,1
   87a50:	100b883a 	mov	r5,r2
   87a54:	39fff404 	addi	r7,r7,-48
   87a58:	8809883a 	mov	r4,r17
   87a5c:	00878480 	call	87848 <__multadd>
   87a60:	84bff81e 	bne	r16,r18,87a44 <_gp+0xfff75e60>
   87a64:	dfc00617 	ldw	ra,24(sp)
   87a68:	dd400517 	ldw	r21,20(sp)
   87a6c:	dd000417 	ldw	r20,16(sp)
   87a70:	dcc00317 	ldw	r19,12(sp)
   87a74:	dc800217 	ldw	r18,8(sp)
   87a78:	dc400117 	ldw	r17,4(sp)
   87a7c:	dc000017 	ldw	r16,0(sp)
   87a80:	dec00704 	addi	sp,sp,28
   87a84:	f800283a 	ret
   87a88:	84000284 	addi	r16,r16,10
   87a8c:	1827883a 	mov	r19,r3
   87a90:	003fe906 	br	87a38 <_gp+0xfff75e54>

00087a94 <__hi0bits>:
   87a94:	20bfffec 	andhi	r2,r4,65535
   87a98:	1000141e 	bne	r2,zero,87aec <__hi0bits+0x58>
   87a9c:	2008943a 	slli	r4,r4,16
   87aa0:	00800404 	movi	r2,16
   87aa4:	20ffc02c 	andhi	r3,r4,65280
   87aa8:	1800021e 	bne	r3,zero,87ab4 <__hi0bits+0x20>
   87aac:	2008923a 	slli	r4,r4,8
   87ab0:	10800204 	addi	r2,r2,8
   87ab4:	20fc002c 	andhi	r3,r4,61440
   87ab8:	1800021e 	bne	r3,zero,87ac4 <__hi0bits+0x30>
   87abc:	2008913a 	slli	r4,r4,4
   87ac0:	10800104 	addi	r2,r2,4
   87ac4:	20f0002c 	andhi	r3,r4,49152
   87ac8:	1800031e 	bne	r3,zero,87ad8 <__hi0bits+0x44>
   87acc:	2109883a 	add	r4,r4,r4
   87ad0:	10800084 	addi	r2,r2,2
   87ad4:	2109883a 	add	r4,r4,r4
   87ad8:	20000316 	blt	r4,zero,87ae8 <__hi0bits+0x54>
   87adc:	2110002c 	andhi	r4,r4,16384
   87ae0:	2000041e 	bne	r4,zero,87af4 <__hi0bits+0x60>
   87ae4:	00800804 	movi	r2,32
   87ae8:	f800283a 	ret
   87aec:	0005883a 	mov	r2,zero
   87af0:	003fec06 	br	87aa4 <_gp+0xfff75ec0>
   87af4:	10800044 	addi	r2,r2,1
   87af8:	f800283a 	ret

00087afc <__lo0bits>:
   87afc:	20c00017 	ldw	r3,0(r4)
   87b00:	188001cc 	andi	r2,r3,7
   87b04:	10000826 	beq	r2,zero,87b28 <__lo0bits+0x2c>
   87b08:	1880004c 	andi	r2,r3,1
   87b0c:	1000211e 	bne	r2,zero,87b94 <__lo0bits+0x98>
   87b10:	1880008c 	andi	r2,r3,2
   87b14:	1000211e 	bne	r2,zero,87b9c <__lo0bits+0xa0>
   87b18:	1806d0ba 	srli	r3,r3,2
   87b1c:	00800084 	movi	r2,2
   87b20:	20c00015 	stw	r3,0(r4)
   87b24:	f800283a 	ret
   87b28:	18bfffcc 	andi	r2,r3,65535
   87b2c:	10001326 	beq	r2,zero,87b7c <__lo0bits+0x80>
   87b30:	0005883a 	mov	r2,zero
   87b34:	19403fcc 	andi	r5,r3,255
   87b38:	2800021e 	bne	r5,zero,87b44 <__lo0bits+0x48>
   87b3c:	1806d23a 	srli	r3,r3,8
   87b40:	10800204 	addi	r2,r2,8
   87b44:	194003cc 	andi	r5,r3,15
   87b48:	2800021e 	bne	r5,zero,87b54 <__lo0bits+0x58>
   87b4c:	1806d13a 	srli	r3,r3,4
   87b50:	10800104 	addi	r2,r2,4
   87b54:	194000cc 	andi	r5,r3,3
   87b58:	2800021e 	bne	r5,zero,87b64 <__lo0bits+0x68>
   87b5c:	1806d0ba 	srli	r3,r3,2
   87b60:	10800084 	addi	r2,r2,2
   87b64:	1940004c 	andi	r5,r3,1
   87b68:	2800081e 	bne	r5,zero,87b8c <__lo0bits+0x90>
   87b6c:	1806d07a 	srli	r3,r3,1
   87b70:	1800051e 	bne	r3,zero,87b88 <__lo0bits+0x8c>
   87b74:	00800804 	movi	r2,32
   87b78:	f800283a 	ret
   87b7c:	1806d43a 	srli	r3,r3,16
   87b80:	00800404 	movi	r2,16
   87b84:	003feb06 	br	87b34 <_gp+0xfff75f50>
   87b88:	10800044 	addi	r2,r2,1
   87b8c:	20c00015 	stw	r3,0(r4)
   87b90:	f800283a 	ret
   87b94:	0005883a 	mov	r2,zero
   87b98:	f800283a 	ret
   87b9c:	1806d07a 	srli	r3,r3,1
   87ba0:	00800044 	movi	r2,1
   87ba4:	20c00015 	stw	r3,0(r4)
   87ba8:	f800283a 	ret

00087bac <__i2b>:
   87bac:	defffd04 	addi	sp,sp,-12
   87bb0:	dc000015 	stw	r16,0(sp)
   87bb4:	04000044 	movi	r16,1
   87bb8:	dc400115 	stw	r17,4(sp)
   87bbc:	2823883a 	mov	r17,r5
   87bc0:	800b883a 	mov	r5,r16
   87bc4:	dfc00215 	stw	ra,8(sp)
   87bc8:	00877780 	call	87778 <_Balloc>
   87bcc:	14400515 	stw	r17,20(r2)
   87bd0:	14000415 	stw	r16,16(r2)
   87bd4:	dfc00217 	ldw	ra,8(sp)
   87bd8:	dc400117 	ldw	r17,4(sp)
   87bdc:	dc000017 	ldw	r16,0(sp)
   87be0:	dec00304 	addi	sp,sp,12
   87be4:	f800283a 	ret

00087be8 <__multiply>:
   87be8:	deffef04 	addi	sp,sp,-68
   87bec:	dc400815 	stw	r17,32(sp)
   87bf0:	dc000715 	stw	r16,28(sp)
   87bf4:	34400417 	ldw	r17,16(r6)
   87bf8:	2c000417 	ldw	r16,16(r5)
   87bfc:	dd800d15 	stw	r22,52(sp)
   87c00:	dc800915 	stw	r18,36(sp)
   87c04:	dfc01015 	stw	ra,64(sp)
   87c08:	df000f15 	stw	fp,60(sp)
   87c0c:	ddc00e15 	stw	r23,56(sp)
   87c10:	dd400c15 	stw	r21,48(sp)
   87c14:	dd000b15 	stw	r20,44(sp)
   87c18:	dcc00a15 	stw	r19,40(sp)
   87c1c:	2825883a 	mov	r18,r5
   87c20:	302d883a 	mov	r22,r6
   87c24:	8440050e 	bge	r16,r17,87c3c <__multiply+0x54>
   87c28:	8007883a 	mov	r3,r16
   87c2c:	3025883a 	mov	r18,r6
   87c30:	8821883a 	mov	r16,r17
   87c34:	282d883a 	mov	r22,r5
   87c38:	1823883a 	mov	r17,r3
   87c3c:	90800217 	ldw	r2,8(r18)
   87c40:	8447883a 	add	r3,r16,r17
   87c44:	d8c00215 	stw	r3,8(sp)
   87c48:	91400117 	ldw	r5,4(r18)
   87c4c:	10c0010e 	bge	r2,r3,87c54 <__multiply+0x6c>
   87c50:	29400044 	addi	r5,r5,1
   87c54:	00877780 	call	87778 <_Balloc>
   87c58:	d8c00217 	ldw	r3,8(sp)
   87c5c:	d8800615 	stw	r2,24(sp)
   87c60:	18eb883a 	add	r21,r3,r3
   87c64:	ad6b883a 	add	r21,r21,r21
   87c68:	10c00504 	addi	r3,r2,20
   87c6c:	1d6b883a 	add	r21,r3,r21
   87c70:	d8c00115 	stw	r3,4(sp)
   87c74:	dd400315 	stw	r21,12(sp)
   87c78:	1805883a 	mov	r2,r3
   87c7c:	1d40042e 	bgeu	r3,r21,87c90 <__multiply+0xa8>
   87c80:	d8c00317 	ldw	r3,12(sp)
   87c84:	10000015 	stw	zero,0(r2)
   87c88:	10800104 	addi	r2,r2,4
   87c8c:	10fffc36 	bltu	r2,r3,87c80 <_gp+0xfff7609c>
   87c90:	8c63883a 	add	r17,r17,r17
   87c94:	b5800504 	addi	r22,r22,20
   87c98:	8c63883a 	add	r17,r17,r17
   87c9c:	94800504 	addi	r18,r18,20
   87ca0:	8421883a 	add	r16,r16,r16
   87ca4:	b463883a 	add	r17,r22,r17
   87ca8:	8421883a 	add	r16,r16,r16
   87cac:	dd800015 	stw	r22,0(sp)
   87cb0:	dc800415 	stw	r18,16(sp)
   87cb4:	dc400515 	stw	r17,20(sp)
   87cb8:	9429883a 	add	r20,r18,r16
   87cbc:	b4404f2e 	bgeu	r22,r17,87dfc <__multiply+0x214>
   87cc0:	d8c00017 	ldw	r3,0(sp)
   87cc4:	1c800017 	ldw	r18,0(r3)
   87cc8:	947fffcc 	andi	r17,r18,65535
   87ccc:	88001e26 	beq	r17,zero,87d48 <__multiply+0x160>
   87cd0:	dd800117 	ldw	r22,4(sp)
   87cd4:	dd400417 	ldw	r21,16(sp)
   87cd8:	0027883a 	mov	r19,zero
   87cdc:	ac800017 	ldw	r18,0(r21)
   87ce0:	b4000017 	ldw	r16,0(r22)
   87ce4:	880b883a 	mov	r5,r17
   87ce8:	913fffcc 	andi	r4,r18,65535
   87cec:	00817900 	call	81790 <__mulsi3>
   87cf0:	9008d43a 	srli	r4,r18,16
   87cf4:	84bfffcc 	andi	r18,r16,65535
   87cf8:	1485883a 	add	r2,r2,r18
   87cfc:	14e5883a 	add	r18,r2,r19
   87d00:	8020d43a 	srli	r16,r16,16
   87d04:	9026d43a 	srli	r19,r18,16
   87d08:	880b883a 	mov	r5,r17
   87d0c:	00817900 	call	81790 <__mulsi3>
   87d10:	1405883a 	add	r2,r2,r16
   87d14:	14e1883a 	add	r16,r2,r19
   87d18:	90ffffcc 	andi	r3,r18,65535
   87d1c:	8024943a 	slli	r18,r16,16
   87d20:	ad400104 	addi	r21,r21,4
   87d24:	b005883a 	mov	r2,r22
   87d28:	90c6b03a 	or	r3,r18,r3
   87d2c:	b0c00015 	stw	r3,0(r22)
   87d30:	8026d43a 	srli	r19,r16,16
   87d34:	b5800104 	addi	r22,r22,4
   87d38:	ad3fe836 	bltu	r21,r20,87cdc <_gp+0xfff760f8>
   87d3c:	d8c00017 	ldw	r3,0(sp)
   87d40:	14c00115 	stw	r19,4(r2)
   87d44:	1c800017 	ldw	r18,0(r3)
   87d48:	9024d43a 	srli	r18,r18,16
   87d4c:	90002226 	beq	r18,zero,87dd8 <__multiply+0x1f0>
   87d50:	d8c00117 	ldw	r3,4(sp)
   87d54:	dd800417 	ldw	r22,16(sp)
   87d58:	002f883a 	mov	r23,zero
   87d5c:	1f000017 	ldw	fp,0(r3)
   87d60:	1823883a 	mov	r17,r3
   87d64:	182b883a 	mov	r21,r3
   87d68:	e021883a 	mov	r16,fp
   87d6c:	00000106 	br	87d74 <__multiply+0x18c>
   87d70:	982b883a 	mov	r21,r19
   87d74:	b100000b 	ldhu	r4,0(r22)
   87d78:	8020d43a 	srli	r16,r16,16
   87d7c:	900b883a 	mov	r5,r18
   87d80:	00817900 	call	81790 <__mulsi3>
   87d84:	1405883a 	add	r2,r2,r16
   87d88:	15ef883a 	add	r23,r2,r23
   87d8c:	b804943a 	slli	r2,r23,16
   87d90:	e0ffffcc 	andi	r3,fp,65535
   87d94:	8c400104 	addi	r17,r17,4
   87d98:	10c6b03a 	or	r3,r2,r3
   87d9c:	88ffff15 	stw	r3,-4(r17)
   87da0:	b5800104 	addi	r22,r22,4
   87da4:	b13fff17 	ldw	r4,-4(r22)
   87da8:	acc00104 	addi	r19,r21,4
   87dac:	900b883a 	mov	r5,r18
   87db0:	2008d43a 	srli	r4,r4,16
   87db4:	9c000017 	ldw	r16,0(r19)
   87db8:	00817900 	call	81790 <__mulsi3>
   87dbc:	b806d43a 	srli	r3,r23,16
   87dc0:	813fffcc 	andi	r4,r16,65535
   87dc4:	1105883a 	add	r2,r2,r4
   87dc8:	10f9883a 	add	fp,r2,r3
   87dcc:	e02ed43a 	srli	r23,fp,16
   87dd0:	b53fe736 	bltu	r22,r20,87d70 <_gp+0xfff7618c>
   87dd4:	af000115 	stw	fp,4(r21)
   87dd8:	d8c00017 	ldw	r3,0(sp)
   87ddc:	d9000517 	ldw	r4,20(sp)
   87de0:	18c00104 	addi	r3,r3,4
   87de4:	d8c00015 	stw	r3,0(sp)
   87de8:	d8c00117 	ldw	r3,4(sp)
   87dec:	18c00104 	addi	r3,r3,4
   87df0:	d8c00115 	stw	r3,4(sp)
   87df4:	d8c00017 	ldw	r3,0(sp)
   87df8:	193fb136 	bltu	r3,r4,87cc0 <_gp+0xfff760dc>
   87dfc:	d8c00217 	ldw	r3,8(sp)
   87e00:	00c00c0e 	bge	zero,r3,87e34 <__multiply+0x24c>
   87e04:	d8c00317 	ldw	r3,12(sp)
   87e08:	18bfff17 	ldw	r2,-4(r3)
   87e0c:	1d7fff04 	addi	r21,r3,-4
   87e10:	10000326 	beq	r2,zero,87e20 <__multiply+0x238>
   87e14:	00000706 	br	87e34 <__multiply+0x24c>
   87e18:	a8800017 	ldw	r2,0(r21)
   87e1c:	1000051e 	bne	r2,zero,87e34 <__multiply+0x24c>
   87e20:	d8c00217 	ldw	r3,8(sp)
   87e24:	ad7fff04 	addi	r21,r21,-4
   87e28:	18ffffc4 	addi	r3,r3,-1
   87e2c:	d8c00215 	stw	r3,8(sp)
   87e30:	183ff91e 	bne	r3,zero,87e18 <_gp+0xfff76234>
   87e34:	d8c00617 	ldw	r3,24(sp)
   87e38:	d9000217 	ldw	r4,8(sp)
   87e3c:	1805883a 	mov	r2,r3
   87e40:	19000415 	stw	r4,16(r3)
   87e44:	dfc01017 	ldw	ra,64(sp)
   87e48:	df000f17 	ldw	fp,60(sp)
   87e4c:	ddc00e17 	ldw	r23,56(sp)
   87e50:	dd800d17 	ldw	r22,52(sp)
   87e54:	dd400c17 	ldw	r21,48(sp)
   87e58:	dd000b17 	ldw	r20,44(sp)
   87e5c:	dcc00a17 	ldw	r19,40(sp)
   87e60:	dc800917 	ldw	r18,36(sp)
   87e64:	dc400817 	ldw	r17,32(sp)
   87e68:	dc000717 	ldw	r16,28(sp)
   87e6c:	dec01104 	addi	sp,sp,68
   87e70:	f800283a 	ret

00087e74 <__pow5mult>:
   87e74:	defffa04 	addi	sp,sp,-24
   87e78:	dcc00315 	stw	r19,12(sp)
   87e7c:	dc000015 	stw	r16,0(sp)
   87e80:	dfc00515 	stw	ra,20(sp)
   87e84:	dd000415 	stw	r20,16(sp)
   87e88:	dc800215 	stw	r18,8(sp)
   87e8c:	dc400115 	stw	r17,4(sp)
   87e90:	308000cc 	andi	r2,r6,3
   87e94:	3021883a 	mov	r16,r6
   87e98:	2027883a 	mov	r19,r4
   87e9c:	10002f1e 	bne	r2,zero,87f5c <__pow5mult+0xe8>
   87ea0:	2825883a 	mov	r18,r5
   87ea4:	8021d0ba 	srai	r16,r16,2
   87ea8:	80001a26 	beq	r16,zero,87f14 <__pow5mult+0xa0>
   87eac:	9c401217 	ldw	r17,72(r19)
   87eb0:	8800061e 	bne	r17,zero,87ecc <__pow5mult+0x58>
   87eb4:	00003406 	br	87f88 <__pow5mult+0x114>
   87eb8:	8021d07a 	srai	r16,r16,1
   87ebc:	80001526 	beq	r16,zero,87f14 <__pow5mult+0xa0>
   87ec0:	88800017 	ldw	r2,0(r17)
   87ec4:	10001c26 	beq	r2,zero,87f38 <__pow5mult+0xc4>
   87ec8:	1023883a 	mov	r17,r2
   87ecc:	8080004c 	andi	r2,r16,1
   87ed0:	103ff926 	beq	r2,zero,87eb8 <_gp+0xfff762d4>
   87ed4:	880d883a 	mov	r6,r17
   87ed8:	900b883a 	mov	r5,r18
   87edc:	9809883a 	mov	r4,r19
   87ee0:	0087be80 	call	87be8 <__multiply>
   87ee4:	90001b26 	beq	r18,zero,87f54 <__pow5mult+0xe0>
   87ee8:	91000117 	ldw	r4,4(r18)
   87eec:	98c01317 	ldw	r3,76(r19)
   87ef0:	8021d07a 	srai	r16,r16,1
   87ef4:	2109883a 	add	r4,r4,r4
   87ef8:	2109883a 	add	r4,r4,r4
   87efc:	1907883a 	add	r3,r3,r4
   87f00:	19000017 	ldw	r4,0(r3)
   87f04:	91000015 	stw	r4,0(r18)
   87f08:	1c800015 	stw	r18,0(r3)
   87f0c:	1025883a 	mov	r18,r2
   87f10:	803feb1e 	bne	r16,zero,87ec0 <_gp+0xfff762dc>
   87f14:	9005883a 	mov	r2,r18
   87f18:	dfc00517 	ldw	ra,20(sp)
   87f1c:	dd000417 	ldw	r20,16(sp)
   87f20:	dcc00317 	ldw	r19,12(sp)
   87f24:	dc800217 	ldw	r18,8(sp)
   87f28:	dc400117 	ldw	r17,4(sp)
   87f2c:	dc000017 	ldw	r16,0(sp)
   87f30:	dec00604 	addi	sp,sp,24
   87f34:	f800283a 	ret
   87f38:	880d883a 	mov	r6,r17
   87f3c:	880b883a 	mov	r5,r17
   87f40:	9809883a 	mov	r4,r19
   87f44:	0087be80 	call	87be8 <__multiply>
   87f48:	88800015 	stw	r2,0(r17)
   87f4c:	10000015 	stw	zero,0(r2)
   87f50:	003fdd06 	br	87ec8 <_gp+0xfff762e4>
   87f54:	1025883a 	mov	r18,r2
   87f58:	003fd706 	br	87eb8 <_gp+0xfff762d4>
   87f5c:	10bfffc4 	addi	r2,r2,-1
   87f60:	1085883a 	add	r2,r2,r2
   87f64:	00c00274 	movhi	r3,9
   87f68:	18d05204 	addi	r3,r3,16712
   87f6c:	1085883a 	add	r2,r2,r2
   87f70:	1885883a 	add	r2,r3,r2
   87f74:	11800017 	ldw	r6,0(r2)
   87f78:	000f883a 	mov	r7,zero
   87f7c:	00878480 	call	87848 <__multadd>
   87f80:	1025883a 	mov	r18,r2
   87f84:	003fc706 	br	87ea4 <_gp+0xfff762c0>
   87f88:	05000044 	movi	r20,1
   87f8c:	a00b883a 	mov	r5,r20
   87f90:	9809883a 	mov	r4,r19
   87f94:	00877780 	call	87778 <_Balloc>
   87f98:	1023883a 	mov	r17,r2
   87f9c:	00809c44 	movi	r2,625
   87fa0:	88800515 	stw	r2,20(r17)
   87fa4:	8d000415 	stw	r20,16(r17)
   87fa8:	9c401215 	stw	r17,72(r19)
   87fac:	88000015 	stw	zero,0(r17)
   87fb0:	003fc606 	br	87ecc <_gp+0xfff762e8>

00087fb4 <__lshift>:
   87fb4:	defff904 	addi	sp,sp,-28
   87fb8:	dd400515 	stw	r21,20(sp)
   87fbc:	dcc00315 	stw	r19,12(sp)
   87fc0:	302bd17a 	srai	r21,r6,5
   87fc4:	2cc00417 	ldw	r19,16(r5)
   87fc8:	28800217 	ldw	r2,8(r5)
   87fcc:	dd000415 	stw	r20,16(sp)
   87fd0:	ace7883a 	add	r19,r21,r19
   87fd4:	dc800215 	stw	r18,8(sp)
   87fd8:	dc400115 	stw	r17,4(sp)
   87fdc:	dc000015 	stw	r16,0(sp)
   87fe0:	dfc00615 	stw	ra,24(sp)
   87fe4:	9c000044 	addi	r16,r19,1
   87fe8:	2823883a 	mov	r17,r5
   87fec:	3029883a 	mov	r20,r6
   87ff0:	2025883a 	mov	r18,r4
   87ff4:	29400117 	ldw	r5,4(r5)
   87ff8:	1400030e 	bge	r2,r16,88008 <__lshift+0x54>
   87ffc:	1085883a 	add	r2,r2,r2
   88000:	29400044 	addi	r5,r5,1
   88004:	143ffd16 	blt	r2,r16,87ffc <_gp+0xfff76418>
   88008:	9009883a 	mov	r4,r18
   8800c:	00877780 	call	87778 <_Balloc>
   88010:	10c00504 	addi	r3,r2,20
   88014:	0540070e 	bge	zero,r21,88034 <__lshift+0x80>
   88018:	ad6b883a 	add	r21,r21,r21
   8801c:	ad6b883a 	add	r21,r21,r21
   88020:	1809883a 	mov	r4,r3
   88024:	1d47883a 	add	r3,r3,r21
   88028:	20000015 	stw	zero,0(r4)
   8802c:	21000104 	addi	r4,r4,4
   88030:	193ffd1e 	bne	r3,r4,88028 <_gp+0xfff76444>
   88034:	8a000417 	ldw	r8,16(r17)
   88038:	89000504 	addi	r4,r17,20
   8803c:	a18007cc 	andi	r6,r20,31
   88040:	4211883a 	add	r8,r8,r8
   88044:	4211883a 	add	r8,r8,r8
   88048:	2211883a 	add	r8,r4,r8
   8804c:	30002326 	beq	r6,zero,880dc <__lshift+0x128>
   88050:	02400804 	movi	r9,32
   88054:	4993c83a 	sub	r9,r9,r6
   88058:	000b883a 	mov	r5,zero
   8805c:	21c00017 	ldw	r7,0(r4)
   88060:	1815883a 	mov	r10,r3
   88064:	18c00104 	addi	r3,r3,4
   88068:	398e983a 	sll	r7,r7,r6
   8806c:	21000104 	addi	r4,r4,4
   88070:	394ab03a 	or	r5,r7,r5
   88074:	197fff15 	stw	r5,-4(r3)
   88078:	217fff17 	ldw	r5,-4(r4)
   8807c:	2a4ad83a 	srl	r5,r5,r9
   88080:	223ff636 	bltu	r4,r8,8805c <_gp+0xfff76478>
   88084:	51400115 	stw	r5,4(r10)
   88088:	28001a1e 	bne	r5,zero,880f4 <__lshift+0x140>
   8808c:	843fffc4 	addi	r16,r16,-1
   88090:	14000415 	stw	r16,16(r2)
   88094:	88000826 	beq	r17,zero,880b8 <__lshift+0x104>
   88098:	89000117 	ldw	r4,4(r17)
   8809c:	90c01317 	ldw	r3,76(r18)
   880a0:	2109883a 	add	r4,r4,r4
   880a4:	2109883a 	add	r4,r4,r4
   880a8:	1907883a 	add	r3,r3,r4
   880ac:	19000017 	ldw	r4,0(r3)
   880b0:	89000015 	stw	r4,0(r17)
   880b4:	1c400015 	stw	r17,0(r3)
   880b8:	dfc00617 	ldw	ra,24(sp)
   880bc:	dd400517 	ldw	r21,20(sp)
   880c0:	dd000417 	ldw	r20,16(sp)
   880c4:	dcc00317 	ldw	r19,12(sp)
   880c8:	dc800217 	ldw	r18,8(sp)
   880cc:	dc400117 	ldw	r17,4(sp)
   880d0:	dc000017 	ldw	r16,0(sp)
   880d4:	dec00704 	addi	sp,sp,28
   880d8:	f800283a 	ret
   880dc:	21400017 	ldw	r5,0(r4)
   880e0:	18c00104 	addi	r3,r3,4
   880e4:	21000104 	addi	r4,r4,4
   880e8:	197fff15 	stw	r5,-4(r3)
   880ec:	223ffb36 	bltu	r4,r8,880dc <_gp+0xfff764f8>
   880f0:	003fe606 	br	8808c <_gp+0xfff764a8>
   880f4:	9c000084 	addi	r16,r19,2
   880f8:	003fe406 	br	8808c <_gp+0xfff764a8>

000880fc <__mcmp>:
   880fc:	20800417 	ldw	r2,16(r4)
   88100:	28c00417 	ldw	r3,16(r5)
   88104:	10c5c83a 	sub	r2,r2,r3
   88108:	1000111e 	bne	r2,zero,88150 <__mcmp+0x54>
   8810c:	18c7883a 	add	r3,r3,r3
   88110:	18c7883a 	add	r3,r3,r3
   88114:	21000504 	addi	r4,r4,20
   88118:	29400504 	addi	r5,r5,20
   8811c:	20c5883a 	add	r2,r4,r3
   88120:	28cb883a 	add	r5,r5,r3
   88124:	00000106 	br	8812c <__mcmp+0x30>
   88128:	20800a2e 	bgeu	r4,r2,88154 <__mcmp+0x58>
   8812c:	10bfff04 	addi	r2,r2,-4
   88130:	297fff04 	addi	r5,r5,-4
   88134:	11800017 	ldw	r6,0(r2)
   88138:	28c00017 	ldw	r3,0(r5)
   8813c:	30fffa26 	beq	r6,r3,88128 <_gp+0xfff76544>
   88140:	30c00236 	bltu	r6,r3,8814c <__mcmp+0x50>
   88144:	00800044 	movi	r2,1
   88148:	f800283a 	ret
   8814c:	00bfffc4 	movi	r2,-1
   88150:	f800283a 	ret
   88154:	0005883a 	mov	r2,zero
   88158:	f800283a 	ret

0008815c <__mdiff>:
   8815c:	28c00417 	ldw	r3,16(r5)
   88160:	30800417 	ldw	r2,16(r6)
   88164:	defffa04 	addi	sp,sp,-24
   88168:	dcc00315 	stw	r19,12(sp)
   8816c:	dc800215 	stw	r18,8(sp)
   88170:	dfc00515 	stw	ra,20(sp)
   88174:	dd000415 	stw	r20,16(sp)
   88178:	dc400115 	stw	r17,4(sp)
   8817c:	dc000015 	stw	r16,0(sp)
   88180:	1887c83a 	sub	r3,r3,r2
   88184:	2825883a 	mov	r18,r5
   88188:	3027883a 	mov	r19,r6
   8818c:	1800141e 	bne	r3,zero,881e0 <__mdiff+0x84>
   88190:	1085883a 	add	r2,r2,r2
   88194:	1085883a 	add	r2,r2,r2
   88198:	2a000504 	addi	r8,r5,20
   8819c:	34000504 	addi	r16,r6,20
   881a0:	4087883a 	add	r3,r8,r2
   881a4:	8085883a 	add	r2,r16,r2
   881a8:	00000106 	br	881b0 <__mdiff+0x54>
   881ac:	40c0592e 	bgeu	r8,r3,88314 <__mdiff+0x1b8>
   881b0:	18ffff04 	addi	r3,r3,-4
   881b4:	10bfff04 	addi	r2,r2,-4
   881b8:	19c00017 	ldw	r7,0(r3)
   881bc:	11400017 	ldw	r5,0(r2)
   881c0:	397ffa26 	beq	r7,r5,881ac <_gp+0xfff765c8>
   881c4:	3940592e 	bgeu	r7,r5,8832c <__mdiff+0x1d0>
   881c8:	9005883a 	mov	r2,r18
   881cc:	4023883a 	mov	r17,r8
   881d0:	9825883a 	mov	r18,r19
   881d4:	05000044 	movi	r20,1
   881d8:	1027883a 	mov	r19,r2
   881dc:	00000406 	br	881f0 <__mdiff+0x94>
   881e0:	18005616 	blt	r3,zero,8833c <__mdiff+0x1e0>
   881e4:	34400504 	addi	r17,r6,20
   881e8:	2c000504 	addi	r16,r5,20
   881ec:	0029883a 	mov	r20,zero
   881f0:	91400117 	ldw	r5,4(r18)
   881f4:	00877780 	call	87778 <_Balloc>
   881f8:	92400417 	ldw	r9,16(r18)
   881fc:	9b000417 	ldw	r12,16(r19)
   88200:	12c00504 	addi	r11,r2,20
   88204:	4a51883a 	add	r8,r9,r9
   88208:	6319883a 	add	r12,r12,r12
   8820c:	4211883a 	add	r8,r8,r8
   88210:	6319883a 	add	r12,r12,r12
   88214:	15000315 	stw	r20,12(r2)
   88218:	8211883a 	add	r8,r16,r8
   8821c:	8b19883a 	add	r12,r17,r12
   88220:	0007883a 	mov	r3,zero
   88224:	81400017 	ldw	r5,0(r16)
   88228:	89c00017 	ldw	r7,0(r17)
   8822c:	59800104 	addi	r6,r11,4
   88230:	293fffcc 	andi	r4,r5,65535
   88234:	20c7883a 	add	r3,r4,r3
   88238:	393fffcc 	andi	r4,r7,65535
   8823c:	1909c83a 	sub	r4,r3,r4
   88240:	280ad43a 	srli	r5,r5,16
   88244:	380ed43a 	srli	r7,r7,16
   88248:	2007d43a 	srai	r3,r4,16
   8824c:	213fffcc 	andi	r4,r4,65535
   88250:	29cbc83a 	sub	r5,r5,r7
   88254:	28c7883a 	add	r3,r5,r3
   88258:	180a943a 	slli	r5,r3,16
   8825c:	8c400104 	addi	r17,r17,4
   88260:	84000104 	addi	r16,r16,4
   88264:	2908b03a 	or	r4,r5,r4
   88268:	59000015 	stw	r4,0(r11)
   8826c:	1807d43a 	srai	r3,r3,16
   88270:	3015883a 	mov	r10,r6
   88274:	3017883a 	mov	r11,r6
   88278:	8b3fea36 	bltu	r17,r12,88224 <_gp+0xfff76640>
   8827c:	8200162e 	bgeu	r16,r8,882d8 <__mdiff+0x17c>
   88280:	8017883a 	mov	r11,r16
   88284:	59400017 	ldw	r5,0(r11)
   88288:	31800104 	addi	r6,r6,4
   8828c:	5ac00104 	addi	r11,r11,4
   88290:	293fffcc 	andi	r4,r5,65535
   88294:	20c7883a 	add	r3,r4,r3
   88298:	280ed43a 	srli	r7,r5,16
   8829c:	180bd43a 	srai	r5,r3,16
   882a0:	193fffcc 	andi	r4,r3,65535
   882a4:	3947883a 	add	r3,r7,r5
   882a8:	180a943a 	slli	r5,r3,16
   882ac:	1807d43a 	srai	r3,r3,16
   882b0:	2908b03a 	or	r4,r5,r4
   882b4:	313fff15 	stw	r4,-4(r6)
   882b8:	5a3ff236 	bltu	r11,r8,88284 <_gp+0xfff766a0>
   882bc:	0406303a 	nor	r3,zero,r16
   882c0:	1a07883a 	add	r3,r3,r8
   882c4:	1806d0ba 	srli	r3,r3,2
   882c8:	18c00044 	addi	r3,r3,1
   882cc:	18c7883a 	add	r3,r3,r3
   882d0:	18c7883a 	add	r3,r3,r3
   882d4:	50d5883a 	add	r10,r10,r3
   882d8:	50ffff04 	addi	r3,r10,-4
   882dc:	2000041e 	bne	r4,zero,882f0 <__mdiff+0x194>
   882e0:	18ffff04 	addi	r3,r3,-4
   882e4:	19000017 	ldw	r4,0(r3)
   882e8:	4a7fffc4 	addi	r9,r9,-1
   882ec:	203ffc26 	beq	r4,zero,882e0 <_gp+0xfff766fc>
   882f0:	12400415 	stw	r9,16(r2)
   882f4:	dfc00517 	ldw	ra,20(sp)
   882f8:	dd000417 	ldw	r20,16(sp)
   882fc:	dcc00317 	ldw	r19,12(sp)
   88300:	dc800217 	ldw	r18,8(sp)
   88304:	dc400117 	ldw	r17,4(sp)
   88308:	dc000017 	ldw	r16,0(sp)
   8830c:	dec00604 	addi	sp,sp,24
   88310:	f800283a 	ret
   88314:	000b883a 	mov	r5,zero
   88318:	00877780 	call	87778 <_Balloc>
   8831c:	00c00044 	movi	r3,1
   88320:	10c00415 	stw	r3,16(r2)
   88324:	10000515 	stw	zero,20(r2)
   88328:	003ff206 	br	882f4 <_gp+0xfff76710>
   8832c:	8023883a 	mov	r17,r16
   88330:	0029883a 	mov	r20,zero
   88334:	4021883a 	mov	r16,r8
   88338:	003fad06 	br	881f0 <_gp+0xfff7660c>
   8833c:	9005883a 	mov	r2,r18
   88340:	94400504 	addi	r17,r18,20
   88344:	9c000504 	addi	r16,r19,20
   88348:	9825883a 	mov	r18,r19
   8834c:	05000044 	movi	r20,1
   88350:	1027883a 	mov	r19,r2
   88354:	003fa606 	br	881f0 <_gp+0xfff7660c>

00088358 <__ulp>:
   88358:	295ffc2c 	andhi	r5,r5,32752
   8835c:	00bf3034 	movhi	r2,64704
   88360:	2887883a 	add	r3,r5,r2
   88364:	00c0020e 	bge	zero,r3,88370 <__ulp+0x18>
   88368:	0005883a 	mov	r2,zero
   8836c:	f800283a 	ret
   88370:	00c7c83a 	sub	r3,zero,r3
   88374:	1807d53a 	srai	r3,r3,20
   88378:	008004c4 	movi	r2,19
   8837c:	10c00b0e 	bge	r2,r3,883ac <__ulp+0x54>
   88380:	18bffb04 	addi	r2,r3,-20
   88384:	01000784 	movi	r4,30
   88388:	0007883a 	mov	r3,zero
   8838c:	20800516 	blt	r4,r2,883a4 <__ulp+0x4c>
   88390:	010007c4 	movi	r4,31
   88394:	2089c83a 	sub	r4,r4,r2
   88398:	00800044 	movi	r2,1
   8839c:	1104983a 	sll	r2,r2,r4
   883a0:	f800283a 	ret
   883a4:	00800044 	movi	r2,1
   883a8:	f800283a 	ret
   883ac:	01400234 	movhi	r5,8
   883b0:	28c7d83a 	sra	r3,r5,r3
   883b4:	0005883a 	mov	r2,zero
   883b8:	f800283a 	ret

000883bc <__b2d>:
   883bc:	defffa04 	addi	sp,sp,-24
   883c0:	dc000015 	stw	r16,0(sp)
   883c4:	24000417 	ldw	r16,16(r4)
   883c8:	dc400115 	stw	r17,4(sp)
   883cc:	24400504 	addi	r17,r4,20
   883d0:	8421883a 	add	r16,r16,r16
   883d4:	8421883a 	add	r16,r16,r16
   883d8:	8c21883a 	add	r16,r17,r16
   883dc:	dc800215 	stw	r18,8(sp)
   883e0:	84bfff17 	ldw	r18,-4(r16)
   883e4:	dd000415 	stw	r20,16(sp)
   883e8:	dcc00315 	stw	r19,12(sp)
   883ec:	9009883a 	mov	r4,r18
   883f0:	2829883a 	mov	r20,r5
   883f4:	dfc00515 	stw	ra,20(sp)
   883f8:	0087a940 	call	87a94 <__hi0bits>
   883fc:	00c00804 	movi	r3,32
   88400:	1889c83a 	sub	r4,r3,r2
   88404:	a1000015 	stw	r4,0(r20)
   88408:	01000284 	movi	r4,10
   8840c:	84ffff04 	addi	r19,r16,-4
   88410:	20801216 	blt	r4,r2,8845c <__b2d+0xa0>
   88414:	018002c4 	movi	r6,11
   88418:	308dc83a 	sub	r6,r6,r2
   8841c:	9186d83a 	srl	r3,r18,r6
   88420:	18cffc34 	orhi	r3,r3,16368
   88424:	8cc0212e 	bgeu	r17,r19,884ac <__b2d+0xf0>
   88428:	813ffe17 	ldw	r4,-8(r16)
   8842c:	218cd83a 	srl	r6,r4,r6
   88430:	10800544 	addi	r2,r2,21
   88434:	9084983a 	sll	r2,r18,r2
   88438:	1184b03a 	or	r2,r2,r6
   8843c:	dfc00517 	ldw	ra,20(sp)
   88440:	dd000417 	ldw	r20,16(sp)
   88444:	dcc00317 	ldw	r19,12(sp)
   88448:	dc800217 	ldw	r18,8(sp)
   8844c:	dc400117 	ldw	r17,4(sp)
   88450:	dc000017 	ldw	r16,0(sp)
   88454:	dec00604 	addi	sp,sp,24
   88458:	f800283a 	ret
   8845c:	8cc00f2e 	bgeu	r17,r19,8849c <__b2d+0xe0>
   88460:	117ffd44 	addi	r5,r2,-11
   88464:	80bffe17 	ldw	r2,-8(r16)
   88468:	28000e26 	beq	r5,zero,884a4 <__b2d+0xe8>
   8846c:	1949c83a 	sub	r4,r3,r5
   88470:	9164983a 	sll	r18,r18,r5
   88474:	1106d83a 	srl	r3,r2,r4
   88478:	81bffe04 	addi	r6,r16,-8
   8847c:	948ffc34 	orhi	r18,r18,16368
   88480:	90c6b03a 	or	r3,r18,r3
   88484:	89800e2e 	bgeu	r17,r6,884c0 <__b2d+0x104>
   88488:	81bffd17 	ldw	r6,-12(r16)
   8848c:	1144983a 	sll	r2,r2,r5
   88490:	310ad83a 	srl	r5,r6,r4
   88494:	2884b03a 	or	r2,r5,r2
   88498:	003fe806 	br	8843c <_gp+0xfff76858>
   8849c:	10bffd44 	addi	r2,r2,-11
   884a0:	1000041e 	bne	r2,zero,884b4 <__b2d+0xf8>
   884a4:	90cffc34 	orhi	r3,r18,16368
   884a8:	003fe406 	br	8843c <_gp+0xfff76858>
   884ac:	000d883a 	mov	r6,zero
   884b0:	003fdf06 	br	88430 <_gp+0xfff7684c>
   884b4:	90a4983a 	sll	r18,r18,r2
   884b8:	0005883a 	mov	r2,zero
   884bc:	003ff906 	br	884a4 <_gp+0xfff768c0>
   884c0:	1144983a 	sll	r2,r2,r5
   884c4:	003fdd06 	br	8843c <_gp+0xfff76858>

000884c8 <__d2b>:
   884c8:	defff804 	addi	sp,sp,-32
   884cc:	dc000215 	stw	r16,8(sp)
   884d0:	3021883a 	mov	r16,r6
   884d4:	dc400315 	stw	r17,12(sp)
   884d8:	8022907a 	slli	r17,r16,1
   884dc:	dd000615 	stw	r20,24(sp)
   884e0:	2829883a 	mov	r20,r5
   884e4:	01400044 	movi	r5,1
   884e8:	dcc00515 	stw	r19,20(sp)
   884ec:	dc800415 	stw	r18,16(sp)
   884f0:	dfc00715 	stw	ra,28(sp)
   884f4:	3825883a 	mov	r18,r7
   884f8:	8822d57a 	srli	r17,r17,21
   884fc:	00877780 	call	87778 <_Balloc>
   88500:	1027883a 	mov	r19,r2
   88504:	00800434 	movhi	r2,16
   88508:	10bfffc4 	addi	r2,r2,-1
   8850c:	808c703a 	and	r6,r16,r2
   88510:	88000126 	beq	r17,zero,88518 <__d2b+0x50>
   88514:	31800434 	orhi	r6,r6,16
   88518:	d9800015 	stw	r6,0(sp)
   8851c:	a0002426 	beq	r20,zero,885b0 <__d2b+0xe8>
   88520:	d9000104 	addi	r4,sp,4
   88524:	dd000115 	stw	r20,4(sp)
   88528:	0087afc0 	call	87afc <__lo0bits>
   8852c:	d8c00017 	ldw	r3,0(sp)
   88530:	10002f1e 	bne	r2,zero,885f0 <__d2b+0x128>
   88534:	d9000117 	ldw	r4,4(sp)
   88538:	99000515 	stw	r4,20(r19)
   8853c:	1821003a 	cmpeq	r16,r3,zero
   88540:	01000084 	movi	r4,2
   88544:	2421c83a 	sub	r16,r4,r16
   88548:	98c00615 	stw	r3,24(r19)
   8854c:	9c000415 	stw	r16,16(r19)
   88550:	88001f1e 	bne	r17,zero,885d0 <__d2b+0x108>
   88554:	10bef384 	addi	r2,r2,-1074
   88558:	90800015 	stw	r2,0(r18)
   8855c:	00900034 	movhi	r2,16384
   88560:	10bfffc4 	addi	r2,r2,-1
   88564:	8085883a 	add	r2,r16,r2
   88568:	1085883a 	add	r2,r2,r2
   8856c:	1085883a 	add	r2,r2,r2
   88570:	9885883a 	add	r2,r19,r2
   88574:	11000517 	ldw	r4,20(r2)
   88578:	8020917a 	slli	r16,r16,5
   8857c:	0087a940 	call	87a94 <__hi0bits>
   88580:	d8c00817 	ldw	r3,32(sp)
   88584:	8085c83a 	sub	r2,r16,r2
   88588:	18800015 	stw	r2,0(r3)
   8858c:	9805883a 	mov	r2,r19
   88590:	dfc00717 	ldw	ra,28(sp)
   88594:	dd000617 	ldw	r20,24(sp)
   88598:	dcc00517 	ldw	r19,20(sp)
   8859c:	dc800417 	ldw	r18,16(sp)
   885a0:	dc400317 	ldw	r17,12(sp)
   885a4:	dc000217 	ldw	r16,8(sp)
   885a8:	dec00804 	addi	sp,sp,32
   885ac:	f800283a 	ret
   885b0:	d809883a 	mov	r4,sp
   885b4:	0087afc0 	call	87afc <__lo0bits>
   885b8:	d8c00017 	ldw	r3,0(sp)
   885bc:	04000044 	movi	r16,1
   885c0:	9c000415 	stw	r16,16(r19)
   885c4:	98c00515 	stw	r3,20(r19)
   885c8:	10800804 	addi	r2,r2,32
   885cc:	883fe126 	beq	r17,zero,88554 <_gp+0xfff76970>
   885d0:	00c00d44 	movi	r3,53
   885d4:	8c7ef344 	addi	r17,r17,-1075
   885d8:	88a3883a 	add	r17,r17,r2
   885dc:	1885c83a 	sub	r2,r3,r2
   885e0:	d8c00817 	ldw	r3,32(sp)
   885e4:	94400015 	stw	r17,0(r18)
   885e8:	18800015 	stw	r2,0(r3)
   885ec:	003fe706 	br	8858c <_gp+0xfff769a8>
   885f0:	01000804 	movi	r4,32
   885f4:	2089c83a 	sub	r4,r4,r2
   885f8:	1908983a 	sll	r4,r3,r4
   885fc:	d9400117 	ldw	r5,4(sp)
   88600:	1886d83a 	srl	r3,r3,r2
   88604:	2148b03a 	or	r4,r4,r5
   88608:	99000515 	stw	r4,20(r19)
   8860c:	d8c00015 	stw	r3,0(sp)
   88610:	003fca06 	br	8853c <_gp+0xfff76958>

00088614 <__ratio>:
   88614:	defff904 	addi	sp,sp,-28
   88618:	dc400315 	stw	r17,12(sp)
   8861c:	2823883a 	mov	r17,r5
   88620:	d9400104 	addi	r5,sp,4
   88624:	dfc00615 	stw	ra,24(sp)
   88628:	dcc00515 	stw	r19,20(sp)
   8862c:	dc800415 	stw	r18,16(sp)
   88630:	2027883a 	mov	r19,r4
   88634:	dc000215 	stw	r16,8(sp)
   88638:	00883bc0 	call	883bc <__b2d>
   8863c:	d80b883a 	mov	r5,sp
   88640:	8809883a 	mov	r4,r17
   88644:	1025883a 	mov	r18,r2
   88648:	1821883a 	mov	r16,r3
   8864c:	00883bc0 	call	883bc <__b2d>
   88650:	8a000417 	ldw	r8,16(r17)
   88654:	99000417 	ldw	r4,16(r19)
   88658:	d9400117 	ldw	r5,4(sp)
   8865c:	2209c83a 	sub	r4,r4,r8
   88660:	2010917a 	slli	r8,r4,5
   88664:	d9000017 	ldw	r4,0(sp)
   88668:	2909c83a 	sub	r4,r5,r4
   8866c:	4109883a 	add	r4,r8,r4
   88670:	01000e0e 	bge	zero,r4,886ac <__ratio+0x98>
   88674:	2008953a 	slli	r4,r4,20
   88678:	2421883a 	add	r16,r4,r16
   8867c:	100d883a 	mov	r6,r2
   88680:	180f883a 	mov	r7,r3
   88684:	9009883a 	mov	r4,r18
   88688:	800b883a 	mov	r5,r16
   8868c:	008c5240 	call	8c524 <__divdf3>
   88690:	dfc00617 	ldw	ra,24(sp)
   88694:	dcc00517 	ldw	r19,20(sp)
   88698:	dc800417 	ldw	r18,16(sp)
   8869c:	dc400317 	ldw	r17,12(sp)
   886a0:	dc000217 	ldw	r16,8(sp)
   886a4:	dec00704 	addi	sp,sp,28
   886a8:	f800283a 	ret
   886ac:	2008953a 	slli	r4,r4,20
   886b0:	1907c83a 	sub	r3,r3,r4
   886b4:	003ff106 	br	8867c <_gp+0xfff76a98>

000886b8 <_mprec_log10>:
   886b8:	defffe04 	addi	sp,sp,-8
   886bc:	dc000015 	stw	r16,0(sp)
   886c0:	dfc00115 	stw	ra,4(sp)
   886c4:	008005c4 	movi	r2,23
   886c8:	2021883a 	mov	r16,r4
   886cc:	11000d0e 	bge	r2,r4,88704 <_mprec_log10+0x4c>
   886d0:	0005883a 	mov	r2,zero
   886d4:	00cffc34 	movhi	r3,16368
   886d8:	843fffc4 	addi	r16,r16,-1
   886dc:	000d883a 	mov	r6,zero
   886e0:	01d00934 	movhi	r7,16420
   886e4:	1009883a 	mov	r4,r2
   886e8:	180b883a 	mov	r5,r3
   886ec:	008d14c0 	call	8d14c <__muldf3>
   886f0:	803ff91e 	bne	r16,zero,886d8 <_gp+0xfff76af4>
   886f4:	dfc00117 	ldw	ra,4(sp)
   886f8:	dc000017 	ldw	r16,0(sp)
   886fc:	dec00204 	addi	sp,sp,8
   88700:	f800283a 	ret
   88704:	202090fa 	slli	r16,r4,3
   88708:	00800274 	movhi	r2,9
   8870c:	10906904 	addi	r2,r2,16804
   88710:	1421883a 	add	r16,r2,r16
   88714:	80800017 	ldw	r2,0(r16)
   88718:	80c00117 	ldw	r3,4(r16)
   8871c:	dfc00117 	ldw	ra,4(sp)
   88720:	dc000017 	ldw	r16,0(sp)
   88724:	dec00204 	addi	sp,sp,8
   88728:	f800283a 	ret

0008872c <__copybits>:
   8872c:	297fffc4 	addi	r5,r5,-1
   88730:	280fd17a 	srai	r7,r5,5
   88734:	30c00417 	ldw	r3,16(r6)
   88738:	30800504 	addi	r2,r6,20
   8873c:	39c00044 	addi	r7,r7,1
   88740:	18c7883a 	add	r3,r3,r3
   88744:	39cf883a 	add	r7,r7,r7
   88748:	18c7883a 	add	r3,r3,r3
   8874c:	39cf883a 	add	r7,r7,r7
   88750:	10c7883a 	add	r3,r2,r3
   88754:	21cf883a 	add	r7,r4,r7
   88758:	10c00d2e 	bgeu	r2,r3,88790 <__copybits+0x64>
   8875c:	200b883a 	mov	r5,r4
   88760:	12000017 	ldw	r8,0(r2)
   88764:	29400104 	addi	r5,r5,4
   88768:	10800104 	addi	r2,r2,4
   8876c:	2a3fff15 	stw	r8,-4(r5)
   88770:	10fffb36 	bltu	r2,r3,88760 <_gp+0xfff76b7c>
   88774:	1985c83a 	sub	r2,r3,r6
   88778:	10bffac4 	addi	r2,r2,-21
   8877c:	1004d0ba 	srli	r2,r2,2
   88780:	10800044 	addi	r2,r2,1
   88784:	1085883a 	add	r2,r2,r2
   88788:	1085883a 	add	r2,r2,r2
   8878c:	2089883a 	add	r4,r4,r2
   88790:	21c0032e 	bgeu	r4,r7,887a0 <__copybits+0x74>
   88794:	20000015 	stw	zero,0(r4)
   88798:	21000104 	addi	r4,r4,4
   8879c:	21fffd36 	bltu	r4,r7,88794 <_gp+0xfff76bb0>
   887a0:	f800283a 	ret

000887a4 <__any_on>:
   887a4:	20c00417 	ldw	r3,16(r4)
   887a8:	2805d17a 	srai	r2,r5,5
   887ac:	21000504 	addi	r4,r4,20
   887b0:	18800d0e 	bge	r3,r2,887e8 <__any_on+0x44>
   887b4:	18c7883a 	add	r3,r3,r3
   887b8:	18c7883a 	add	r3,r3,r3
   887bc:	20c7883a 	add	r3,r4,r3
   887c0:	20c0192e 	bgeu	r4,r3,88828 <__any_on+0x84>
   887c4:	18bfff17 	ldw	r2,-4(r3)
   887c8:	18ffff04 	addi	r3,r3,-4
   887cc:	1000041e 	bne	r2,zero,887e0 <__any_on+0x3c>
   887d0:	20c0142e 	bgeu	r4,r3,88824 <__any_on+0x80>
   887d4:	18ffff04 	addi	r3,r3,-4
   887d8:	19400017 	ldw	r5,0(r3)
   887dc:	283ffc26 	beq	r5,zero,887d0 <_gp+0xfff76bec>
   887e0:	00800044 	movi	r2,1
   887e4:	f800283a 	ret
   887e8:	10c00a0e 	bge	r2,r3,88814 <__any_on+0x70>
   887ec:	1085883a 	add	r2,r2,r2
   887f0:	1085883a 	add	r2,r2,r2
   887f4:	294007cc 	andi	r5,r5,31
   887f8:	2087883a 	add	r3,r4,r2
   887fc:	283ff026 	beq	r5,zero,887c0 <_gp+0xfff76bdc>
   88800:	19800017 	ldw	r6,0(r3)
   88804:	3144d83a 	srl	r2,r6,r5
   88808:	114a983a 	sll	r5,r2,r5
   8880c:	317ff41e 	bne	r6,r5,887e0 <_gp+0xfff76bfc>
   88810:	003feb06 	br	887c0 <_gp+0xfff76bdc>
   88814:	1085883a 	add	r2,r2,r2
   88818:	1085883a 	add	r2,r2,r2
   8881c:	2087883a 	add	r3,r4,r2
   88820:	003fe706 	br	887c0 <_gp+0xfff76bdc>
   88824:	f800283a 	ret
   88828:	0005883a 	mov	r2,zero
   8882c:	f800283a 	ret

00088830 <_realloc_r>:
   88830:	defff604 	addi	sp,sp,-40
   88834:	dc800215 	stw	r18,8(sp)
   88838:	dfc00915 	stw	ra,36(sp)
   8883c:	df000815 	stw	fp,32(sp)
   88840:	ddc00715 	stw	r23,28(sp)
   88844:	dd800615 	stw	r22,24(sp)
   88848:	dd400515 	stw	r21,20(sp)
   8884c:	dd000415 	stw	r20,16(sp)
   88850:	dcc00315 	stw	r19,12(sp)
   88854:	dc400115 	stw	r17,4(sp)
   88858:	dc000015 	stw	r16,0(sp)
   8885c:	3025883a 	mov	r18,r6
   88860:	2800b726 	beq	r5,zero,88b40 <_realloc_r+0x310>
   88864:	282b883a 	mov	r21,r5
   88868:	2029883a 	mov	r20,r4
   8886c:	008ea540 	call	8ea54 <__malloc_lock>
   88870:	a8bfff17 	ldw	r2,-4(r21)
   88874:	043fff04 	movi	r16,-4
   88878:	90c002c4 	addi	r3,r18,11
   8887c:	01000584 	movi	r4,22
   88880:	acfffe04 	addi	r19,r21,-8
   88884:	1420703a 	and	r16,r2,r16
   88888:	20c0332e 	bgeu	r4,r3,88958 <_realloc_r+0x128>
   8888c:	047ffe04 	movi	r17,-8
   88890:	1c62703a 	and	r17,r3,r17
   88894:	8807883a 	mov	r3,r17
   88898:	88005816 	blt	r17,zero,889fc <_realloc_r+0x1cc>
   8889c:	8c805736 	bltu	r17,r18,889fc <_realloc_r+0x1cc>
   888a0:	80c0300e 	bge	r16,r3,88964 <_realloc_r+0x134>
   888a4:	07000474 	movhi	fp,17
   888a8:	e7212704 	addi	fp,fp,-31588
   888ac:	e1c00217 	ldw	r7,8(fp)
   888b0:	9c09883a 	add	r4,r19,r16
   888b4:	22000117 	ldw	r8,4(r4)
   888b8:	21c06326 	beq	r4,r7,88a48 <_realloc_r+0x218>
   888bc:	017fff84 	movi	r5,-2
   888c0:	414a703a 	and	r5,r8,r5
   888c4:	214b883a 	add	r5,r4,r5
   888c8:	29800117 	ldw	r6,4(r5)
   888cc:	3180004c 	andi	r6,r6,1
   888d0:	30003f26 	beq	r6,zero,889d0 <_realloc_r+0x1a0>
   888d4:	1080004c 	andi	r2,r2,1
   888d8:	10008326 	beq	r2,zero,88ae8 <_realloc_r+0x2b8>
   888dc:	900b883a 	mov	r5,r18
   888e0:	a009883a 	mov	r4,r20
   888e4:	0086abc0 	call	86abc <_malloc_r>
   888e8:	1025883a 	mov	r18,r2
   888ec:	10011e26 	beq	r2,zero,88d68 <_realloc_r+0x538>
   888f0:	a93fff17 	ldw	r4,-4(r21)
   888f4:	10fffe04 	addi	r3,r2,-8
   888f8:	00bfff84 	movi	r2,-2
   888fc:	2084703a 	and	r2,r4,r2
   88900:	9885883a 	add	r2,r19,r2
   88904:	1880ee26 	beq	r3,r2,88cc0 <_realloc_r+0x490>
   88908:	81bfff04 	addi	r6,r16,-4
   8890c:	00800904 	movi	r2,36
   88910:	1180b836 	bltu	r2,r6,88bf4 <_realloc_r+0x3c4>
   88914:	00c004c4 	movi	r3,19
   88918:	19809636 	bltu	r3,r6,88b74 <_realloc_r+0x344>
   8891c:	9005883a 	mov	r2,r18
   88920:	a807883a 	mov	r3,r21
   88924:	19000017 	ldw	r4,0(r3)
   88928:	11000015 	stw	r4,0(r2)
   8892c:	19000117 	ldw	r4,4(r3)
   88930:	11000115 	stw	r4,4(r2)
   88934:	18c00217 	ldw	r3,8(r3)
   88938:	10c00215 	stw	r3,8(r2)
   8893c:	a80b883a 	mov	r5,r21
   88940:	a009883a 	mov	r4,r20
   88944:	0085ec40 	call	85ec4 <_free_r>
   88948:	a009883a 	mov	r4,r20
   8894c:	008ea780 	call	8ea78 <__malloc_unlock>
   88950:	9005883a 	mov	r2,r18
   88954:	00001206 	br	889a0 <_realloc_r+0x170>
   88958:	00c00404 	movi	r3,16
   8895c:	1823883a 	mov	r17,r3
   88960:	003fce06 	br	8889c <_gp+0xfff76cb8>
   88964:	a825883a 	mov	r18,r21
   88968:	8445c83a 	sub	r2,r16,r17
   8896c:	00c003c4 	movi	r3,15
   88970:	18802636 	bltu	r3,r2,88a0c <_realloc_r+0x1dc>
   88974:	99800117 	ldw	r6,4(r19)
   88978:	9c07883a 	add	r3,r19,r16
   8897c:	3180004c 	andi	r6,r6,1
   88980:	3420b03a 	or	r16,r6,r16
   88984:	9c000115 	stw	r16,4(r19)
   88988:	18800117 	ldw	r2,4(r3)
   8898c:	10800054 	ori	r2,r2,1
   88990:	18800115 	stw	r2,4(r3)
   88994:	a009883a 	mov	r4,r20
   88998:	008ea780 	call	8ea78 <__malloc_unlock>
   8899c:	9005883a 	mov	r2,r18
   889a0:	dfc00917 	ldw	ra,36(sp)
   889a4:	df000817 	ldw	fp,32(sp)
   889a8:	ddc00717 	ldw	r23,28(sp)
   889ac:	dd800617 	ldw	r22,24(sp)
   889b0:	dd400517 	ldw	r21,20(sp)
   889b4:	dd000417 	ldw	r20,16(sp)
   889b8:	dcc00317 	ldw	r19,12(sp)
   889bc:	dc800217 	ldw	r18,8(sp)
   889c0:	dc400117 	ldw	r17,4(sp)
   889c4:	dc000017 	ldw	r16,0(sp)
   889c8:	dec00a04 	addi	sp,sp,40
   889cc:	f800283a 	ret
   889d0:	017fff04 	movi	r5,-4
   889d4:	414a703a 	and	r5,r8,r5
   889d8:	814d883a 	add	r6,r16,r5
   889dc:	30c01f16 	blt	r6,r3,88a5c <_realloc_r+0x22c>
   889e0:	20800317 	ldw	r2,12(r4)
   889e4:	20c00217 	ldw	r3,8(r4)
   889e8:	a825883a 	mov	r18,r21
   889ec:	3021883a 	mov	r16,r6
   889f0:	18800315 	stw	r2,12(r3)
   889f4:	10c00215 	stw	r3,8(r2)
   889f8:	003fdb06 	br	88968 <_gp+0xfff76d84>
   889fc:	00800304 	movi	r2,12
   88a00:	a0800015 	stw	r2,0(r20)
   88a04:	0005883a 	mov	r2,zero
   88a08:	003fe506 	br	889a0 <_gp+0xfff76dbc>
   88a0c:	98c00117 	ldw	r3,4(r19)
   88a10:	9c4b883a 	add	r5,r19,r17
   88a14:	11000054 	ori	r4,r2,1
   88a18:	18c0004c 	andi	r3,r3,1
   88a1c:	1c62b03a 	or	r17,r3,r17
   88a20:	9c400115 	stw	r17,4(r19)
   88a24:	29000115 	stw	r4,4(r5)
   88a28:	2885883a 	add	r2,r5,r2
   88a2c:	10c00117 	ldw	r3,4(r2)
   88a30:	29400204 	addi	r5,r5,8
   88a34:	a009883a 	mov	r4,r20
   88a38:	18c00054 	ori	r3,r3,1
   88a3c:	10c00115 	stw	r3,4(r2)
   88a40:	0085ec40 	call	85ec4 <_free_r>
   88a44:	003fd306 	br	88994 <_gp+0xfff76db0>
   88a48:	017fff04 	movi	r5,-4
   88a4c:	414a703a 	and	r5,r8,r5
   88a50:	89800404 	addi	r6,r17,16
   88a54:	8151883a 	add	r8,r16,r5
   88a58:	4180590e 	bge	r8,r6,88bc0 <_realloc_r+0x390>
   88a5c:	1080004c 	andi	r2,r2,1
   88a60:	103f9e1e 	bne	r2,zero,888dc <_gp+0xfff76cf8>
   88a64:	adbffe17 	ldw	r22,-8(r21)
   88a68:	00bfff04 	movi	r2,-4
   88a6c:	9dadc83a 	sub	r22,r19,r22
   88a70:	b1800117 	ldw	r6,4(r22)
   88a74:	3084703a 	and	r2,r6,r2
   88a78:	20002026 	beq	r4,zero,88afc <_realloc_r+0x2cc>
   88a7c:	80af883a 	add	r23,r16,r2
   88a80:	b96f883a 	add	r23,r23,r5
   88a84:	21c05f26 	beq	r4,r7,88c04 <_realloc_r+0x3d4>
   88a88:	b8c01c16 	blt	r23,r3,88afc <_realloc_r+0x2cc>
   88a8c:	20800317 	ldw	r2,12(r4)
   88a90:	20c00217 	ldw	r3,8(r4)
   88a94:	81bfff04 	addi	r6,r16,-4
   88a98:	01000904 	movi	r4,36
   88a9c:	18800315 	stw	r2,12(r3)
   88aa0:	10c00215 	stw	r3,8(r2)
   88aa4:	b0c00217 	ldw	r3,8(r22)
   88aa8:	b0800317 	ldw	r2,12(r22)
   88aac:	b4800204 	addi	r18,r22,8
   88ab0:	18800315 	stw	r2,12(r3)
   88ab4:	10c00215 	stw	r3,8(r2)
   88ab8:	21801b36 	bltu	r4,r6,88b28 <_realloc_r+0x2f8>
   88abc:	008004c4 	movi	r2,19
   88ac0:	1180352e 	bgeu	r2,r6,88b98 <_realloc_r+0x368>
   88ac4:	a8800017 	ldw	r2,0(r21)
   88ac8:	b0800215 	stw	r2,8(r22)
   88acc:	a8800117 	ldw	r2,4(r21)
   88ad0:	b0800315 	stw	r2,12(r22)
   88ad4:	008006c4 	movi	r2,27
   88ad8:	11807f36 	bltu	r2,r6,88cd8 <_realloc_r+0x4a8>
   88adc:	b0800404 	addi	r2,r22,16
   88ae0:	ad400204 	addi	r21,r21,8
   88ae4:	00002d06 	br	88b9c <_realloc_r+0x36c>
   88ae8:	adbffe17 	ldw	r22,-8(r21)
   88aec:	00bfff04 	movi	r2,-4
   88af0:	9dadc83a 	sub	r22,r19,r22
   88af4:	b1000117 	ldw	r4,4(r22)
   88af8:	2084703a 	and	r2,r4,r2
   88afc:	b03f7726 	beq	r22,zero,888dc <_gp+0xfff76cf8>
   88b00:	80af883a 	add	r23,r16,r2
   88b04:	b8ff7516 	blt	r23,r3,888dc <_gp+0xfff76cf8>
   88b08:	b0800317 	ldw	r2,12(r22)
   88b0c:	b0c00217 	ldw	r3,8(r22)
   88b10:	81bfff04 	addi	r6,r16,-4
   88b14:	01000904 	movi	r4,36
   88b18:	18800315 	stw	r2,12(r3)
   88b1c:	10c00215 	stw	r3,8(r2)
   88b20:	b4800204 	addi	r18,r22,8
   88b24:	21bfe52e 	bgeu	r4,r6,88abc <_gp+0xfff76ed8>
   88b28:	a80b883a 	mov	r5,r21
   88b2c:	9009883a 	mov	r4,r18
   88b30:	00874f40 	call	874f4 <memmove>
   88b34:	b821883a 	mov	r16,r23
   88b38:	b027883a 	mov	r19,r22
   88b3c:	003f8a06 	br	88968 <_gp+0xfff76d84>
   88b40:	300b883a 	mov	r5,r6
   88b44:	dfc00917 	ldw	ra,36(sp)
   88b48:	df000817 	ldw	fp,32(sp)
   88b4c:	ddc00717 	ldw	r23,28(sp)
   88b50:	dd800617 	ldw	r22,24(sp)
   88b54:	dd400517 	ldw	r21,20(sp)
   88b58:	dd000417 	ldw	r20,16(sp)
   88b5c:	dcc00317 	ldw	r19,12(sp)
   88b60:	dc800217 	ldw	r18,8(sp)
   88b64:	dc400117 	ldw	r17,4(sp)
   88b68:	dc000017 	ldw	r16,0(sp)
   88b6c:	dec00a04 	addi	sp,sp,40
   88b70:	0086abc1 	jmpi	86abc <_malloc_r>
   88b74:	a8c00017 	ldw	r3,0(r21)
   88b78:	90c00015 	stw	r3,0(r18)
   88b7c:	a8c00117 	ldw	r3,4(r21)
   88b80:	90c00115 	stw	r3,4(r18)
   88b84:	00c006c4 	movi	r3,27
   88b88:	19804536 	bltu	r3,r6,88ca0 <_realloc_r+0x470>
   88b8c:	90800204 	addi	r2,r18,8
   88b90:	a8c00204 	addi	r3,r21,8
   88b94:	003f6306 	br	88924 <_gp+0xfff76d40>
   88b98:	9005883a 	mov	r2,r18
   88b9c:	a8c00017 	ldw	r3,0(r21)
   88ba0:	b821883a 	mov	r16,r23
   88ba4:	b027883a 	mov	r19,r22
   88ba8:	10c00015 	stw	r3,0(r2)
   88bac:	a8c00117 	ldw	r3,4(r21)
   88bb0:	10c00115 	stw	r3,4(r2)
   88bb4:	a8c00217 	ldw	r3,8(r21)
   88bb8:	10c00215 	stw	r3,8(r2)
   88bbc:	003f6a06 	br	88968 <_gp+0xfff76d84>
   88bc0:	9c67883a 	add	r19,r19,r17
   88bc4:	4445c83a 	sub	r2,r8,r17
   88bc8:	e4c00215 	stw	r19,8(fp)
   88bcc:	10800054 	ori	r2,r2,1
   88bd0:	98800115 	stw	r2,4(r19)
   88bd4:	a8bfff17 	ldw	r2,-4(r21)
   88bd8:	a009883a 	mov	r4,r20
   88bdc:	1080004c 	andi	r2,r2,1
   88be0:	1462b03a 	or	r17,r2,r17
   88be4:	ac7fff15 	stw	r17,-4(r21)
   88be8:	008ea780 	call	8ea78 <__malloc_unlock>
   88bec:	a805883a 	mov	r2,r21
   88bf0:	003f6b06 	br	889a0 <_gp+0xfff76dbc>
   88bf4:	a80b883a 	mov	r5,r21
   88bf8:	9009883a 	mov	r4,r18
   88bfc:	00874f40 	call	874f4 <memmove>
   88c00:	003f4e06 	br	8893c <_gp+0xfff76d58>
   88c04:	89000404 	addi	r4,r17,16
   88c08:	b93fbc16 	blt	r23,r4,88afc <_gp+0xfff76f18>
   88c0c:	b0800317 	ldw	r2,12(r22)
   88c10:	b0c00217 	ldw	r3,8(r22)
   88c14:	81bfff04 	addi	r6,r16,-4
   88c18:	01000904 	movi	r4,36
   88c1c:	18800315 	stw	r2,12(r3)
   88c20:	10c00215 	stw	r3,8(r2)
   88c24:	b4800204 	addi	r18,r22,8
   88c28:	21804336 	bltu	r4,r6,88d38 <_realloc_r+0x508>
   88c2c:	008004c4 	movi	r2,19
   88c30:	11803f2e 	bgeu	r2,r6,88d30 <_realloc_r+0x500>
   88c34:	a8800017 	ldw	r2,0(r21)
   88c38:	b0800215 	stw	r2,8(r22)
   88c3c:	a8800117 	ldw	r2,4(r21)
   88c40:	b0800315 	stw	r2,12(r22)
   88c44:	008006c4 	movi	r2,27
   88c48:	11803f36 	bltu	r2,r6,88d48 <_realloc_r+0x518>
   88c4c:	b0800404 	addi	r2,r22,16
   88c50:	ad400204 	addi	r21,r21,8
   88c54:	a8c00017 	ldw	r3,0(r21)
   88c58:	10c00015 	stw	r3,0(r2)
   88c5c:	a8c00117 	ldw	r3,4(r21)
   88c60:	10c00115 	stw	r3,4(r2)
   88c64:	a8c00217 	ldw	r3,8(r21)
   88c68:	10c00215 	stw	r3,8(r2)
   88c6c:	b447883a 	add	r3,r22,r17
   88c70:	bc45c83a 	sub	r2,r23,r17
   88c74:	e0c00215 	stw	r3,8(fp)
   88c78:	10800054 	ori	r2,r2,1
   88c7c:	18800115 	stw	r2,4(r3)
   88c80:	b0800117 	ldw	r2,4(r22)
   88c84:	a009883a 	mov	r4,r20
   88c88:	1080004c 	andi	r2,r2,1
   88c8c:	1462b03a 	or	r17,r2,r17
   88c90:	b4400115 	stw	r17,4(r22)
   88c94:	008ea780 	call	8ea78 <__malloc_unlock>
   88c98:	9005883a 	mov	r2,r18
   88c9c:	003f4006 	br	889a0 <_gp+0xfff76dbc>
   88ca0:	a8c00217 	ldw	r3,8(r21)
   88ca4:	90c00215 	stw	r3,8(r18)
   88ca8:	a8c00317 	ldw	r3,12(r21)
   88cac:	90c00315 	stw	r3,12(r18)
   88cb0:	30801126 	beq	r6,r2,88cf8 <_realloc_r+0x4c8>
   88cb4:	90800404 	addi	r2,r18,16
   88cb8:	a8c00404 	addi	r3,r21,16
   88cbc:	003f1906 	br	88924 <_gp+0xfff76d40>
   88cc0:	90ffff17 	ldw	r3,-4(r18)
   88cc4:	00bfff04 	movi	r2,-4
   88cc8:	a825883a 	mov	r18,r21
   88ccc:	1884703a 	and	r2,r3,r2
   88cd0:	80a1883a 	add	r16,r16,r2
   88cd4:	003f2406 	br	88968 <_gp+0xfff76d84>
   88cd8:	a8800217 	ldw	r2,8(r21)
   88cdc:	b0800415 	stw	r2,16(r22)
   88ce0:	a8800317 	ldw	r2,12(r21)
   88ce4:	b0800515 	stw	r2,20(r22)
   88ce8:	31000a26 	beq	r6,r4,88d14 <_realloc_r+0x4e4>
   88cec:	b0800604 	addi	r2,r22,24
   88cf0:	ad400404 	addi	r21,r21,16
   88cf4:	003fa906 	br	88b9c <_gp+0xfff76fb8>
   88cf8:	a9000417 	ldw	r4,16(r21)
   88cfc:	90800604 	addi	r2,r18,24
   88d00:	a8c00604 	addi	r3,r21,24
   88d04:	91000415 	stw	r4,16(r18)
   88d08:	a9000517 	ldw	r4,20(r21)
   88d0c:	91000515 	stw	r4,20(r18)
   88d10:	003f0406 	br	88924 <_gp+0xfff76d40>
   88d14:	a8c00417 	ldw	r3,16(r21)
   88d18:	ad400604 	addi	r21,r21,24
   88d1c:	b0800804 	addi	r2,r22,32
   88d20:	b0c00615 	stw	r3,24(r22)
   88d24:	a8ffff17 	ldw	r3,-4(r21)
   88d28:	b0c00715 	stw	r3,28(r22)
   88d2c:	003f9b06 	br	88b9c <_gp+0xfff76fb8>
   88d30:	9005883a 	mov	r2,r18
   88d34:	003fc706 	br	88c54 <_gp+0xfff77070>
   88d38:	a80b883a 	mov	r5,r21
   88d3c:	9009883a 	mov	r4,r18
   88d40:	00874f40 	call	874f4 <memmove>
   88d44:	003fc906 	br	88c6c <_gp+0xfff77088>
   88d48:	a8800217 	ldw	r2,8(r21)
   88d4c:	b0800415 	stw	r2,16(r22)
   88d50:	a8800317 	ldw	r2,12(r21)
   88d54:	b0800515 	stw	r2,20(r22)
   88d58:	31000726 	beq	r6,r4,88d78 <_realloc_r+0x548>
   88d5c:	b0800604 	addi	r2,r22,24
   88d60:	ad400404 	addi	r21,r21,16
   88d64:	003fbb06 	br	88c54 <_gp+0xfff77070>
   88d68:	a009883a 	mov	r4,r20
   88d6c:	008ea780 	call	8ea78 <__malloc_unlock>
   88d70:	0005883a 	mov	r2,zero
   88d74:	003f0a06 	br	889a0 <_gp+0xfff76dbc>
   88d78:	a8c00417 	ldw	r3,16(r21)
   88d7c:	ad400604 	addi	r21,r21,24
   88d80:	b0800804 	addi	r2,r22,32
   88d84:	b0c00615 	stw	r3,24(r22)
   88d88:	a8ffff17 	ldw	r3,-4(r21)
   88d8c:	b0c00715 	stw	r3,28(r22)
   88d90:	003fb006 	br	88c54 <_gp+0xfff77070>

00088d94 <__fpclassifyd>:
   88d94:	00a00034 	movhi	r2,32768
   88d98:	10bfffc4 	addi	r2,r2,-1
   88d9c:	2884703a 	and	r2,r5,r2
   88da0:	10000726 	beq	r2,zero,88dc0 <__fpclassifyd+0x2c>
   88da4:	00fffc34 	movhi	r3,65520
   88da8:	019ff834 	movhi	r6,32736
   88dac:	28c7883a 	add	r3,r5,r3
   88db0:	31bfffc4 	addi	r6,r6,-1
   88db4:	30c00536 	bltu	r6,r3,88dcc <__fpclassifyd+0x38>
   88db8:	00800104 	movi	r2,4
   88dbc:	f800283a 	ret
   88dc0:	2000021e 	bne	r4,zero,88dcc <__fpclassifyd+0x38>
   88dc4:	00800084 	movi	r2,2
   88dc8:	f800283a 	ret
   88dcc:	00dffc34 	movhi	r3,32752
   88dd0:	019ff834 	movhi	r6,32736
   88dd4:	28cb883a 	add	r5,r5,r3
   88dd8:	31bfffc4 	addi	r6,r6,-1
   88ddc:	317ff62e 	bgeu	r6,r5,88db8 <_gp+0xfff771d4>
   88de0:	01400434 	movhi	r5,16
   88de4:	297fffc4 	addi	r5,r5,-1
   88de8:	28800236 	bltu	r5,r2,88df4 <__fpclassifyd+0x60>
   88dec:	008000c4 	movi	r2,3
   88df0:	f800283a 	ret
   88df4:	10c00226 	beq	r2,r3,88e00 <__fpclassifyd+0x6c>
   88df8:	0005883a 	mov	r2,zero
   88dfc:	f800283a 	ret
   88e00:	2005003a 	cmpeq	r2,r4,zero
   88e04:	f800283a 	ret

00088e08 <_sbrk_r>:
   88e08:	defffd04 	addi	sp,sp,-12
   88e0c:	dc000015 	stw	r16,0(sp)
   88e10:	04000474 	movhi	r16,17
   88e14:	dc400115 	stw	r17,4(sp)
   88e18:	84271504 	addi	r16,r16,-25516
   88e1c:	2023883a 	mov	r17,r4
   88e20:	2809883a 	mov	r4,r5
   88e24:	dfc00215 	stw	ra,8(sp)
   88e28:	80000015 	stw	zero,0(r16)
   88e2c:	008ec600 	call	8ec60 <sbrk>
   88e30:	00ffffc4 	movi	r3,-1
   88e34:	10c00526 	beq	r2,r3,88e4c <_sbrk_r+0x44>
   88e38:	dfc00217 	ldw	ra,8(sp)
   88e3c:	dc400117 	ldw	r17,4(sp)
   88e40:	dc000017 	ldw	r16,0(sp)
   88e44:	dec00304 	addi	sp,sp,12
   88e48:	f800283a 	ret
   88e4c:	80c00017 	ldw	r3,0(r16)
   88e50:	183ff926 	beq	r3,zero,88e38 <_gp+0xfff77254>
   88e54:	88c00015 	stw	r3,0(r17)
   88e58:	003ff706 	br	88e38 <_gp+0xfff77254>

00088e5c <__sread>:
   88e5c:	defffe04 	addi	sp,sp,-8
   88e60:	dc000015 	stw	r16,0(sp)
   88e64:	2821883a 	mov	r16,r5
   88e68:	2940038f 	ldh	r5,14(r5)
   88e6c:	dfc00115 	stw	ra,4(sp)
   88e70:	008ad180 	call	8ad18 <_read_r>
   88e74:	10000716 	blt	r2,zero,88e94 <__sread+0x38>
   88e78:	80c01417 	ldw	r3,80(r16)
   88e7c:	1887883a 	add	r3,r3,r2
   88e80:	80c01415 	stw	r3,80(r16)
   88e84:	dfc00117 	ldw	ra,4(sp)
   88e88:	dc000017 	ldw	r16,0(sp)
   88e8c:	dec00204 	addi	sp,sp,8
   88e90:	f800283a 	ret
   88e94:	80c0030b 	ldhu	r3,12(r16)
   88e98:	18fbffcc 	andi	r3,r3,61439
   88e9c:	80c0030d 	sth	r3,12(r16)
   88ea0:	dfc00117 	ldw	ra,4(sp)
   88ea4:	dc000017 	ldw	r16,0(sp)
   88ea8:	dec00204 	addi	sp,sp,8
   88eac:	f800283a 	ret

00088eb0 <__seofread>:
   88eb0:	0005883a 	mov	r2,zero
   88eb4:	f800283a 	ret

00088eb8 <__swrite>:
   88eb8:	2880030b 	ldhu	r2,12(r5)
   88ebc:	defffb04 	addi	sp,sp,-20
   88ec0:	dcc00315 	stw	r19,12(sp)
   88ec4:	dc800215 	stw	r18,8(sp)
   88ec8:	dc400115 	stw	r17,4(sp)
   88ecc:	dc000015 	stw	r16,0(sp)
   88ed0:	dfc00415 	stw	ra,16(sp)
   88ed4:	10c0400c 	andi	r3,r2,256
   88ed8:	2821883a 	mov	r16,r5
   88edc:	2023883a 	mov	r17,r4
   88ee0:	3025883a 	mov	r18,r6
   88ee4:	3827883a 	mov	r19,r7
   88ee8:	18000526 	beq	r3,zero,88f00 <__swrite+0x48>
   88eec:	2940038f 	ldh	r5,14(r5)
   88ef0:	01c00084 	movi	r7,2
   88ef4:	000d883a 	mov	r6,zero
   88ef8:	008acb80 	call	8acb8 <_lseek_r>
   88efc:	8080030b 	ldhu	r2,12(r16)
   88f00:	8140038f 	ldh	r5,14(r16)
   88f04:	10bbffcc 	andi	r2,r2,61439
   88f08:	980f883a 	mov	r7,r19
   88f0c:	900d883a 	mov	r6,r18
   88f10:	8809883a 	mov	r4,r17
   88f14:	8080030d 	sth	r2,12(r16)
   88f18:	dfc00417 	ldw	ra,16(sp)
   88f1c:	dcc00317 	ldw	r19,12(sp)
   88f20:	dc800217 	ldw	r18,8(sp)
   88f24:	dc400117 	ldw	r17,4(sp)
   88f28:	dc000017 	ldw	r16,0(sp)
   88f2c:	dec00504 	addi	sp,sp,20
   88f30:	008a76c1 	jmpi	8a76c <_write_r>

00088f34 <__sseek>:
   88f34:	defffe04 	addi	sp,sp,-8
   88f38:	dc000015 	stw	r16,0(sp)
   88f3c:	2821883a 	mov	r16,r5
   88f40:	2940038f 	ldh	r5,14(r5)
   88f44:	dfc00115 	stw	ra,4(sp)
   88f48:	008acb80 	call	8acb8 <_lseek_r>
   88f4c:	00ffffc4 	movi	r3,-1
   88f50:	10c00826 	beq	r2,r3,88f74 <__sseek+0x40>
   88f54:	80c0030b 	ldhu	r3,12(r16)
   88f58:	80801415 	stw	r2,80(r16)
   88f5c:	18c40014 	ori	r3,r3,4096
   88f60:	80c0030d 	sth	r3,12(r16)
   88f64:	dfc00117 	ldw	ra,4(sp)
   88f68:	dc000017 	ldw	r16,0(sp)
   88f6c:	dec00204 	addi	sp,sp,8
   88f70:	f800283a 	ret
   88f74:	80c0030b 	ldhu	r3,12(r16)
   88f78:	18fbffcc 	andi	r3,r3,61439
   88f7c:	80c0030d 	sth	r3,12(r16)
   88f80:	dfc00117 	ldw	ra,4(sp)
   88f84:	dc000017 	ldw	r16,0(sp)
   88f88:	dec00204 	addi	sp,sp,8
   88f8c:	f800283a 	ret

00088f90 <__sclose>:
   88f90:	2940038f 	ldh	r5,14(r5)
   88f94:	008a7cc1 	jmpi	8a7cc <_close_r>

00088f98 <strcmp>:
   88f98:	2144b03a 	or	r2,r4,r5
   88f9c:	108000cc 	andi	r2,r2,3
   88fa0:	1000171e 	bne	r2,zero,89000 <strcmp+0x68>
   88fa4:	20800017 	ldw	r2,0(r4)
   88fa8:	28c00017 	ldw	r3,0(r5)
   88fac:	10c0141e 	bne	r2,r3,89000 <strcmp+0x68>
   88fb0:	027fbff4 	movhi	r9,65279
   88fb4:	4a7fbfc4 	addi	r9,r9,-257
   88fb8:	0086303a 	nor	r3,zero,r2
   88fbc:	02202074 	movhi	r8,32897
   88fc0:	1245883a 	add	r2,r2,r9
   88fc4:	42202004 	addi	r8,r8,-32640
   88fc8:	10c4703a 	and	r2,r2,r3
   88fcc:	1204703a 	and	r2,r2,r8
   88fd0:	10000226 	beq	r2,zero,88fdc <strcmp+0x44>
   88fd4:	00002306 	br	89064 <strcmp+0xcc>
   88fd8:	1000221e 	bne	r2,zero,89064 <strcmp+0xcc>
   88fdc:	21000104 	addi	r4,r4,4
   88fe0:	20c00017 	ldw	r3,0(r4)
   88fe4:	29400104 	addi	r5,r5,4
   88fe8:	29800017 	ldw	r6,0(r5)
   88fec:	1a4f883a 	add	r7,r3,r9
   88ff0:	00c4303a 	nor	r2,zero,r3
   88ff4:	3884703a 	and	r2,r7,r2
   88ff8:	1204703a 	and	r2,r2,r8
   88ffc:	19bff626 	beq	r3,r6,88fd8 <_gp+0xfff773f4>
   89000:	20800003 	ldbu	r2,0(r4)
   89004:	10c03fcc 	andi	r3,r2,255
   89008:	18c0201c 	xori	r3,r3,128
   8900c:	18ffe004 	addi	r3,r3,-128
   89010:	18000c26 	beq	r3,zero,89044 <strcmp+0xac>
   89014:	29800007 	ldb	r6,0(r5)
   89018:	19800326 	beq	r3,r6,89028 <strcmp+0x90>
   8901c:	00001306 	br	8906c <strcmp+0xd4>
   89020:	29800007 	ldb	r6,0(r5)
   89024:	11800b1e 	bne	r2,r6,89054 <strcmp+0xbc>
   89028:	21000044 	addi	r4,r4,1
   8902c:	20c00003 	ldbu	r3,0(r4)
   89030:	29400044 	addi	r5,r5,1
   89034:	18803fcc 	andi	r2,r3,255
   89038:	1080201c 	xori	r2,r2,128
   8903c:	10bfe004 	addi	r2,r2,-128
   89040:	103ff71e 	bne	r2,zero,89020 <_gp+0xfff7743c>
   89044:	0007883a 	mov	r3,zero
   89048:	28800003 	ldbu	r2,0(r5)
   8904c:	1885c83a 	sub	r2,r3,r2
   89050:	f800283a 	ret
   89054:	28800003 	ldbu	r2,0(r5)
   89058:	18c03fcc 	andi	r3,r3,255
   8905c:	1885c83a 	sub	r2,r3,r2
   89060:	f800283a 	ret
   89064:	0005883a 	mov	r2,zero
   89068:	f800283a 	ret
   8906c:	10c03fcc 	andi	r3,r2,255
   89070:	003ff506 	br	89048 <_gp+0xfff77464>

00089074 <__sprint_r.part.0>:
   89074:	28801917 	ldw	r2,100(r5)
   89078:	defff604 	addi	sp,sp,-40
   8907c:	dd400515 	stw	r21,20(sp)
   89080:	dfc00915 	stw	ra,36(sp)
   89084:	df000815 	stw	fp,32(sp)
   89088:	ddc00715 	stw	r23,28(sp)
   8908c:	dd800615 	stw	r22,24(sp)
   89090:	dd000415 	stw	r20,16(sp)
   89094:	dcc00315 	stw	r19,12(sp)
   89098:	dc800215 	stw	r18,8(sp)
   8909c:	dc400115 	stw	r17,4(sp)
   890a0:	dc000015 	stw	r16,0(sp)
   890a4:	1088000c 	andi	r2,r2,8192
   890a8:	302b883a 	mov	r21,r6
   890ac:	10002e26 	beq	r2,zero,89168 <__sprint_r.part.0+0xf4>
   890b0:	30800217 	ldw	r2,8(r6)
   890b4:	35800017 	ldw	r22,0(r6)
   890b8:	10002926 	beq	r2,zero,89160 <__sprint_r.part.0+0xec>
   890bc:	2827883a 	mov	r19,r5
   890c0:	2029883a 	mov	r20,r4
   890c4:	b5c00104 	addi	r23,r22,4
   890c8:	04bfffc4 	movi	r18,-1
   890cc:	bc400017 	ldw	r17,0(r23)
   890d0:	b4000017 	ldw	r16,0(r22)
   890d4:	0039883a 	mov	fp,zero
   890d8:	8822d0ba 	srli	r17,r17,2
   890dc:	8800031e 	bne	r17,zero,890ec <__sprint_r.part.0+0x78>
   890e0:	00001806 	br	89144 <__sprint_r.part.0+0xd0>
   890e4:	84000104 	addi	r16,r16,4
   890e8:	8f001526 	beq	r17,fp,89140 <__sprint_r.part.0+0xcc>
   890ec:	81400017 	ldw	r5,0(r16)
   890f0:	980d883a 	mov	r6,r19
   890f4:	a009883a 	mov	r4,r20
   890f8:	008ab640 	call	8ab64 <_fputwc_r>
   890fc:	e7000044 	addi	fp,fp,1
   89100:	14bff81e 	bne	r2,r18,890e4 <_gp+0xfff77500>
   89104:	9005883a 	mov	r2,r18
   89108:	a8000215 	stw	zero,8(r21)
   8910c:	a8000115 	stw	zero,4(r21)
   89110:	dfc00917 	ldw	ra,36(sp)
   89114:	df000817 	ldw	fp,32(sp)
   89118:	ddc00717 	ldw	r23,28(sp)
   8911c:	dd800617 	ldw	r22,24(sp)
   89120:	dd400517 	ldw	r21,20(sp)
   89124:	dd000417 	ldw	r20,16(sp)
   89128:	dcc00317 	ldw	r19,12(sp)
   8912c:	dc800217 	ldw	r18,8(sp)
   89130:	dc400117 	ldw	r17,4(sp)
   89134:	dc000017 	ldw	r16,0(sp)
   89138:	dec00a04 	addi	sp,sp,40
   8913c:	f800283a 	ret
   89140:	a8800217 	ldw	r2,8(r21)
   89144:	8c63883a 	add	r17,r17,r17
   89148:	8c63883a 	add	r17,r17,r17
   8914c:	1445c83a 	sub	r2,r2,r17
   89150:	a8800215 	stw	r2,8(r21)
   89154:	b5800204 	addi	r22,r22,8
   89158:	bdc00204 	addi	r23,r23,8
   8915c:	103fdb1e 	bne	r2,zero,890cc <_gp+0xfff774e8>
   89160:	0005883a 	mov	r2,zero
   89164:	003fe806 	br	89108 <_gp+0xfff77524>
   89168:	00861d40 	call	861d4 <__sfvwrite_r>
   8916c:	003fe606 	br	89108 <_gp+0xfff77524>

00089170 <__sprint_r>:
   89170:	30c00217 	ldw	r3,8(r6)
   89174:	18000126 	beq	r3,zero,8917c <__sprint_r+0xc>
   89178:	00890741 	jmpi	89074 <__sprint_r.part.0>
   8917c:	30000115 	stw	zero,4(r6)
   89180:	0005883a 	mov	r2,zero
   89184:	f800283a 	ret

00089188 <___vfiprintf_internal_r>:
   89188:	deffca04 	addi	sp,sp,-216
   8918c:	dd403115 	stw	r21,196(sp)
   89190:	dfc03515 	stw	ra,212(sp)
   89194:	df003415 	stw	fp,208(sp)
   89198:	ddc03315 	stw	r23,204(sp)
   8919c:	dd803215 	stw	r22,200(sp)
   891a0:	dd003015 	stw	r20,192(sp)
   891a4:	dcc02f15 	stw	r19,188(sp)
   891a8:	dc802e15 	stw	r18,184(sp)
   891ac:	dc402d15 	stw	r17,180(sp)
   891b0:	dc002c15 	stw	r16,176(sp)
   891b4:	d9002115 	stw	r4,132(sp)
   891b8:	d9402015 	stw	r5,128(sp)
   891bc:	d9c02215 	stw	r7,136(sp)
   891c0:	302b883a 	mov	r21,r6
   891c4:	20000226 	beq	r4,zero,891d0 <___vfiprintf_internal_r+0x48>
   891c8:	20800e17 	ldw	r2,56(r4)
   891cc:	1000cf26 	beq	r2,zero,8950c <___vfiprintf_internal_r+0x384>
   891d0:	d8c02017 	ldw	r3,128(sp)
   891d4:	1880030b 	ldhu	r2,12(r3)
   891d8:	10c8000c 	andi	r3,r2,8192
   891dc:	1800071e 	bne	r3,zero,891fc <___vfiprintf_internal_r+0x74>
   891e0:	d9402017 	ldw	r5,128(sp)
   891e4:	00f7ffc4 	movi	r3,-8193
   891e8:	10880014 	ori	r2,r2,8192
   891ec:	29001917 	ldw	r4,100(r5)
   891f0:	2880030d 	sth	r2,12(r5)
   891f4:	20c6703a 	and	r3,r4,r3
   891f8:	28c01915 	stw	r3,100(r5)
   891fc:	10c0020c 	andi	r3,r2,8
   89200:	1800a526 	beq	r3,zero,89498 <___vfiprintf_internal_r+0x310>
   89204:	d9002017 	ldw	r4,128(sp)
   89208:	20c00417 	ldw	r3,16(r4)
   8920c:	1800a226 	beq	r3,zero,89498 <___vfiprintf_internal_r+0x310>
   89210:	1080068c 	andi	r2,r2,26
   89214:	00c00284 	movi	r3,10
   89218:	10c0a826 	beq	r2,r3,894bc <___vfiprintf_internal_r+0x334>
   8921c:	d9001a04 	addi	r4,sp,104
   89220:	d94019c4 	addi	r5,sp,103
   89224:	04800274 	movhi	r18,9
   89228:	2145c83a 	sub	r2,r4,r5
   8922c:	94909b04 	addi	r18,r18,17004
   89230:	d9001e15 	stw	r4,120(sp)
   89234:	d9401f15 	stw	r5,124(sp)
   89238:	dec01a15 	stw	sp,104(sp)
   8923c:	d8001c15 	stw	zero,112(sp)
   89240:	d8001b15 	stw	zero,108(sp)
   89244:	d811883a 	mov	r8,sp
   89248:	d8002615 	stw	zero,152(sp)
   8924c:	d8002415 	stw	zero,144(sp)
   89250:	d8802815 	stw	r2,160(sp)
   89254:	a82d883a 	mov	r22,r21
   89258:	b0800007 	ldb	r2,0(r22)
   8925c:	10040d26 	beq	r2,zero,8a294 <___vfiprintf_internal_r+0x110c>
   89260:	00c00944 	movi	r3,37
   89264:	b029883a 	mov	r20,r22
   89268:	10c0021e 	bne	r2,r3,89274 <___vfiprintf_internal_r+0xec>
   8926c:	00001606 	br	892c8 <___vfiprintf_internal_r+0x140>
   89270:	10c00326 	beq	r2,r3,89280 <___vfiprintf_internal_r+0xf8>
   89274:	a5000044 	addi	r20,r20,1
   89278:	a0800007 	ldb	r2,0(r20)
   8927c:	103ffc1e 	bne	r2,zero,89270 <_gp+0xfff7768c>
   89280:	a5a1c83a 	sub	r16,r20,r22
   89284:	80001026 	beq	r16,zero,892c8 <___vfiprintf_internal_r+0x140>
   89288:	d8c01c17 	ldw	r3,112(sp)
   8928c:	d8801b17 	ldw	r2,108(sp)
   89290:	45800015 	stw	r22,0(r8)
   89294:	80c7883a 	add	r3,r16,r3
   89298:	10800044 	addi	r2,r2,1
   8929c:	44000115 	stw	r16,4(r8)
   892a0:	d8c01c15 	stw	r3,112(sp)
   892a4:	d8801b15 	stw	r2,108(sp)
   892a8:	010001c4 	movi	r4,7
   892ac:	2080750e 	bge	r4,r2,89484 <___vfiprintf_internal_r+0x2fc>
   892b0:	1803951e 	bne	r3,zero,8a108 <___vfiprintf_internal_r+0xf80>
   892b4:	d8c02417 	ldw	r3,144(sp)
   892b8:	d8001b15 	stw	zero,108(sp)
   892bc:	d811883a 	mov	r8,sp
   892c0:	1c07883a 	add	r3,r3,r16
   892c4:	d8c02415 	stw	r3,144(sp)
   892c8:	a0800007 	ldb	r2,0(r20)
   892cc:	1002e026 	beq	r2,zero,89e50 <___vfiprintf_internal_r+0xcc8>
   892d0:	a5800044 	addi	r22,r20,1
   892d4:	a0c00047 	ldb	r3,1(r20)
   892d8:	d8001d85 	stb	zero,118(sp)
   892dc:	0027883a 	mov	r19,zero
   892e0:	d8002305 	stb	zero,140(sp)
   892e4:	043fffc4 	movi	r16,-1
   892e8:	d8002515 	stw	zero,148(sp)
   892ec:	0023883a 	mov	r17,zero
   892f0:	05001604 	movi	r20,88
   892f4:	05400244 	movi	r21,9
   892f8:	402f883a 	mov	r23,r8
   892fc:	b5800044 	addi	r22,r22,1
   89300:	18bff804 	addi	r2,r3,-32
   89304:	a0827736 	bltu	r20,r2,89ce4 <___vfiprintf_internal_r+0xb5c>
   89308:	100490ba 	slli	r2,r2,2
   8930c:	01000274 	movhi	r4,9
   89310:	2124c804 	addi	r4,r4,-27872
   89314:	1105883a 	add	r2,r2,r4
   89318:	10800017 	ldw	r2,0(r2)
   8931c:	1000683a 	jmp	r2
   89320:	000899e4 	muli	zero,zero,8807
   89324:	00089ce4 	muli	zero,zero,8819
   89328:	00089ce4 	muli	zero,zero,8819
   8932c:	00089a00 	call	89a0 <__alt_mem_onchip_flash_0_data-0x77660>
   89330:	00089ce4 	muli	zero,zero,8819
   89334:	00089ce4 	muli	zero,zero,8819
   89338:	00089ce4 	muli	zero,zero,8819
   8933c:	00089ce4 	muli	zero,zero,8819
   89340:	00089ce4 	muli	zero,zero,8819
   89344:	00089ce4 	muli	zero,zero,8819
   89348:	00089c08 	cmpgei	zero,zero,8816
   8934c:	00089c2c 	andhi	zero,zero,8816
   89350:	00089ce4 	muli	zero,zero,8819
   89354:	00089524 	muli	zero,zero,8788
   89358:	00089c40 	call	89c4 <__alt_mem_onchip_flash_0_data-0x7763c>
   8935c:	00089ce4 	muli	zero,zero,8819
   89360:	00089a0c 	andi	zero,zero,8808
   89364:	00089a18 	cmpnei	zero,zero,8808
   89368:	00089a18 	cmpnei	zero,zero,8808
   8936c:	00089a18 	cmpnei	zero,zero,8808
   89370:	00089a18 	cmpnei	zero,zero,8808
   89374:	00089a18 	cmpnei	zero,zero,8808
   89378:	00089a18 	cmpnei	zero,zero,8808
   8937c:	00089a18 	cmpnei	zero,zero,8808
   89380:	00089a18 	cmpnei	zero,zero,8808
   89384:	00089a18 	cmpnei	zero,zero,8808
   89388:	00089ce4 	muli	zero,zero,8819
   8938c:	00089ce4 	muli	zero,zero,8819
   89390:	00089ce4 	muli	zero,zero,8819
   89394:	00089ce4 	muli	zero,zero,8819
   89398:	00089ce4 	muli	zero,zero,8819
   8939c:	00089ce4 	muli	zero,zero,8819
   893a0:	00089ce4 	muli	zero,zero,8819
   893a4:	00089ce4 	muli	zero,zero,8819
   893a8:	00089ce4 	muli	zero,zero,8819
   893ac:	00089ce4 	muli	zero,zero,8819
   893b0:	00089a58 	cmpnei	zero,zero,8809
   893b4:	00089ce4 	muli	zero,zero,8819
   893b8:	00089ce4 	muli	zero,zero,8819
   893bc:	00089ce4 	muli	zero,zero,8819
   893c0:	00089ce4 	muli	zero,zero,8819
   893c4:	00089ce4 	muli	zero,zero,8819
   893c8:	00089ce4 	muli	zero,zero,8819
   893cc:	00089ce4 	muli	zero,zero,8819
   893d0:	00089ce4 	muli	zero,zero,8819
   893d4:	00089ce4 	muli	zero,zero,8819
   893d8:	00089ce4 	muli	zero,zero,8819
   893dc:	00089a94 	movui	zero,8810
   893e0:	00089ce4 	muli	zero,zero,8819
   893e4:	00089ce4 	muli	zero,zero,8819
   893e8:	00089ce4 	muli	zero,zero,8819
   893ec:	00089ce4 	muli	zero,zero,8819
   893f0:	00089ce4 	muli	zero,zero,8819
   893f4:	00089af0 	cmpltui	zero,zero,8811
   893f8:	00089ce4 	muli	zero,zero,8819
   893fc:	00089ce4 	muli	zero,zero,8819
   89400:	00089b64 	muli	zero,zero,8813
   89404:	00089ce4 	muli	zero,zero,8819
   89408:	00089ce4 	muli	zero,zero,8819
   8940c:	00089ce4 	muli	zero,zero,8819
   89410:	00089ce4 	muli	zero,zero,8819
   89414:	00089ce4 	muli	zero,zero,8819
   89418:	00089ce4 	muli	zero,zero,8819
   8941c:	00089ce4 	muli	zero,zero,8819
   89420:	00089ce4 	muli	zero,zero,8819
   89424:	00089ce4 	muli	zero,zero,8819
   89428:	00089ce4 	muli	zero,zero,8819
   8942c:	0008990c 	andi	zero,zero,8804
   89430:	0008993c 	xorhi	zero,zero,8804
   89434:	00089ce4 	muli	zero,zero,8819
   89438:	00089ce4 	muli	zero,zero,8819
   8943c:	00089ce4 	muli	zero,zero,8819
   89440:	00089c8c 	andi	zero,zero,8818
   89444:	0008993c 	xorhi	zero,zero,8804
   89448:	00089ce4 	muli	zero,zero,8819
   8944c:	00089ce4 	muli	zero,zero,8819
   89450:	000897e4 	muli	zero,zero,8799
   89454:	00089ce4 	muli	zero,zero,8819
   89458:	000897f8 	rdprs	zero,zero,8799
   8945c:	00089830 	cmpltui	zero,zero,8800
   89460:	00089530 	cmpltui	zero,zero,8788
   89464:	000897d8 	cmpnei	zero,zero,8799
   89468:	00089ce4 	muli	zero,zero,8819
   8946c:	00089ba4 	muli	zero,zero,8814
   89470:	00089ce4 	muli	zero,zero,8819
   89474:	00089bf0 	cmpltui	zero,zero,8815
   89478:	00089ce4 	muli	zero,zero,8819
   8947c:	00089ce4 	muli	zero,zero,8819
   89480:	000898b4 	movhi	zero,8802
   89484:	42000204 	addi	r8,r8,8
   89488:	d8c02417 	ldw	r3,144(sp)
   8948c:	1c07883a 	add	r3,r3,r16
   89490:	d8c02415 	stw	r3,144(sp)
   89494:	003f8c06 	br	892c8 <_gp+0xfff776e4>
   89498:	d9402017 	ldw	r5,128(sp)
   8949c:	d9002117 	ldw	r4,132(sp)
   894a0:	0083d440 	call	83d44 <__swsetup_r>
   894a4:	1003c11e 	bne	r2,zero,8a3ac <___vfiprintf_internal_r+0x1224>
   894a8:	d9402017 	ldw	r5,128(sp)
   894ac:	00c00284 	movi	r3,10
   894b0:	2880030b 	ldhu	r2,12(r5)
   894b4:	1080068c 	andi	r2,r2,26
   894b8:	10ff581e 	bne	r2,r3,8921c <_gp+0xfff77638>
   894bc:	d8c02017 	ldw	r3,128(sp)
   894c0:	1880038f 	ldh	r2,14(r3)
   894c4:	103f5516 	blt	r2,zero,8921c <_gp+0xfff77638>
   894c8:	d9c02217 	ldw	r7,136(sp)
   894cc:	d9002117 	ldw	r4,132(sp)
   894d0:	a80d883a 	mov	r6,r21
   894d4:	180b883a 	mov	r5,r3
   894d8:	008a6b00 	call	8a6b0 <__sbprintf>
   894dc:	dfc03517 	ldw	ra,212(sp)
   894e0:	df003417 	ldw	fp,208(sp)
   894e4:	ddc03317 	ldw	r23,204(sp)
   894e8:	dd803217 	ldw	r22,200(sp)
   894ec:	dd403117 	ldw	r21,196(sp)
   894f0:	dd003017 	ldw	r20,192(sp)
   894f4:	dcc02f17 	ldw	r19,188(sp)
   894f8:	dc802e17 	ldw	r18,184(sp)
   894fc:	dc402d17 	ldw	r17,180(sp)
   89500:	dc002c17 	ldw	r16,176(sp)
   89504:	dec03604 	addi	sp,sp,216
   89508:	f800283a 	ret
   8950c:	0085d500 	call	85d50 <__sinit>
   89510:	003f2f06 	br	891d0 <_gp+0xfff775ec>
   89514:	d8c02517 	ldw	r3,148(sp)
   89518:	d8802215 	stw	r2,136(sp)
   8951c:	00c7c83a 	sub	r3,zero,r3
   89520:	d8c02515 	stw	r3,148(sp)
   89524:	8c400114 	ori	r17,r17,4
   89528:	b0c00007 	ldb	r3,0(r22)
   8952c:	003f7306 	br	892fc <_gp+0xfff77718>
   89530:	00800c04 	movi	r2,48
   89534:	d9402217 	ldw	r5,136(sp)
   89538:	d8801d05 	stb	r2,116(sp)
   8953c:	00801e04 	movi	r2,120
   89540:	d8801d45 	stb	r2,117(sp)
   89544:	d8001d85 	stb	zero,118(sp)
   89548:	b811883a 	mov	r8,r23
   8954c:	28c00104 	addi	r3,r5,4
   89550:	2cc00017 	ldw	r19,0(r5)
   89554:	0029883a 	mov	r20,zero
   89558:	88800094 	ori	r2,r17,2
   8955c:	80032516 	blt	r16,zero,8a1f4 <___vfiprintf_internal_r+0x106c>
   89560:	00bfdfc4 	movi	r2,-129
   89564:	88a2703a 	and	r17,r17,r2
   89568:	d8c02215 	stw	r3,136(sp)
   8956c:	8c400094 	ori	r17,r17,2
   89570:	98032a1e 	bne	r19,zero,8a21c <___vfiprintf_internal_r+0x1094>
   89574:	00800274 	movhi	r2,9
   89578:	10903a04 	addi	r2,r2,16616
   8957c:	d8802615 	stw	r2,152(sp)
   89580:	002b883a 	mov	r21,zero
   89584:	8001741e 	bne	r16,zero,89b58 <___vfiprintf_internal_r+0x9d0>
   89588:	0021883a 	mov	r16,zero
   8958c:	0029883a 	mov	r20,zero
   89590:	ddc01a04 	addi	r23,sp,104
   89594:	8027883a 	mov	r19,r16
   89598:	8500010e 	bge	r16,r20,895a0 <___vfiprintf_internal_r+0x418>
   8959c:	a027883a 	mov	r19,r20
   895a0:	ad403fcc 	andi	r21,r21,255
   895a4:	ad40201c 	xori	r21,r21,128
   895a8:	ad7fe004 	addi	r21,r21,-128
   895ac:	a8000126 	beq	r21,zero,895b4 <___vfiprintf_internal_r+0x42c>
   895b0:	9cc00044 	addi	r19,r19,1
   895b4:	89c0008c 	andi	r7,r17,2
   895b8:	38000126 	beq	r7,zero,895c0 <___vfiprintf_internal_r+0x438>
   895bc:	9cc00084 	addi	r19,r19,2
   895c0:	88c0210c 	andi	r3,r17,132
   895c4:	1801dd1e 	bne	r3,zero,89d3c <___vfiprintf_internal_r+0xbb4>
   895c8:	d9402517 	ldw	r5,148(sp)
   895cc:	2cebc83a 	sub	r21,r5,r19
   895d0:	0541da0e 	bge	zero,r21,89d3c <___vfiprintf_internal_r+0xbb4>
   895d4:	07000404 	movi	fp,16
   895d8:	d8801c17 	ldw	r2,112(sp)
   895dc:	e543be0e 	bge	fp,r21,8a4d8 <___vfiprintf_internal_r+0x1350>
   895e0:	01400274 	movhi	r5,9
   895e4:	29509f04 	addi	r5,r5,17020
   895e8:	dc002715 	stw	r16,156(sp)
   895ec:	d9801b17 	ldw	r6,108(sp)
   895f0:	a821883a 	mov	r16,r21
   895f4:	d9402315 	stw	r5,140(sp)
   895f8:	028001c4 	movi	r10,7
   895fc:	d9c02915 	stw	r7,164(sp)
   89600:	182b883a 	mov	r21,r3
   89604:	00000506 	br	8961c <___vfiprintf_internal_r+0x494>
   89608:	31000084 	addi	r4,r6,2
   8960c:	42000204 	addi	r8,r8,8
   89610:	180d883a 	mov	r6,r3
   89614:	843ffc04 	addi	r16,r16,-16
   89618:	e4000f0e 	bge	fp,r16,89658 <___vfiprintf_internal_r+0x4d0>
   8961c:	01000274 	movhi	r4,9
   89620:	10800404 	addi	r2,r2,16
   89624:	30c00044 	addi	r3,r6,1
   89628:	21109f04 	addi	r4,r4,17020
   8962c:	41000015 	stw	r4,0(r8)
   89630:	47000115 	stw	fp,4(r8)
   89634:	d8801c15 	stw	r2,112(sp)
   89638:	d8c01b15 	stw	r3,108(sp)
   8963c:	50fff20e 	bge	r10,r3,89608 <_gp+0xfff77a24>
   89640:	1001b21e 	bne	r2,zero,89d0c <___vfiprintf_internal_r+0xb84>
   89644:	843ffc04 	addi	r16,r16,-16
   89648:	000d883a 	mov	r6,zero
   8964c:	01000044 	movi	r4,1
   89650:	d811883a 	mov	r8,sp
   89654:	e43ff116 	blt	fp,r16,8961c <_gp+0xfff77a38>
   89658:	a807883a 	mov	r3,r21
   8965c:	d9c02917 	ldw	r7,164(sp)
   89660:	802b883a 	mov	r21,r16
   89664:	dc002717 	ldw	r16,156(sp)
   89668:	d9402317 	ldw	r5,140(sp)
   8966c:	a885883a 	add	r2,r21,r2
   89670:	45400115 	stw	r21,4(r8)
   89674:	41400015 	stw	r5,0(r8)
   89678:	d8801c15 	stw	r2,112(sp)
   8967c:	d9001b15 	stw	r4,108(sp)
   89680:	014001c4 	movi	r5,7
   89684:	29026216 	blt	r5,r4,8a010 <___vfiprintf_internal_r+0xe88>
   89688:	d9801d87 	ldb	r6,118(sp)
   8968c:	42000204 	addi	r8,r8,8
   89690:	21400044 	addi	r5,r4,1
   89694:	3001ae1e 	bne	r6,zero,89d50 <___vfiprintf_internal_r+0xbc8>
   89698:	3801bb26 	beq	r7,zero,89d88 <___vfiprintf_internal_r+0xc00>
   8969c:	d9001d04 	addi	r4,sp,116
   896a0:	10800084 	addi	r2,r2,2
   896a4:	41000015 	stw	r4,0(r8)
   896a8:	01000084 	movi	r4,2
   896ac:	41000115 	stw	r4,4(r8)
   896b0:	d8801c15 	stw	r2,112(sp)
   896b4:	d9401b15 	stw	r5,108(sp)
   896b8:	010001c4 	movi	r4,7
   896bc:	2142680e 	bge	r4,r5,8a060 <___vfiprintf_internal_r+0xed8>
   896c0:	1002b11e 	bne	r2,zero,8a188 <___vfiprintf_internal_r+0x1000>
   896c4:	01802004 	movi	r6,128
   896c8:	01400044 	movi	r5,1
   896cc:	0009883a 	mov	r4,zero
   896d0:	d811883a 	mov	r8,sp
   896d4:	1981ae1e 	bne	r3,r6,89d90 <___vfiprintf_internal_r+0xc08>
   896d8:	d8c02517 	ldw	r3,148(sp)
   896dc:	1cf9c83a 	sub	fp,r3,r19
   896e0:	0701ab0e 	bge	zero,fp,89d90 <___vfiprintf_internal_r+0xc08>
   896e4:	05400404 	movi	r21,16
   896e8:	af03a90e 	bge	r21,fp,8a590 <___vfiprintf_internal_r+0x1408>
   896ec:	01400274 	movhi	r5,9
   896f0:	29509b04 	addi	r5,r5,17004
   896f4:	d9402315 	stw	r5,140(sp)
   896f8:	01c001c4 	movi	r7,7
   896fc:	00000506 	br	89714 <___vfiprintf_internal_r+0x58c>
   89700:	21800084 	addi	r6,r4,2
   89704:	42000204 	addi	r8,r8,8
   89708:	1809883a 	mov	r4,r3
   8970c:	e73ffc04 	addi	fp,fp,-16
   89710:	af000d0e 	bge	r21,fp,89748 <___vfiprintf_internal_r+0x5c0>
   89714:	10800404 	addi	r2,r2,16
   89718:	20c00044 	addi	r3,r4,1
   8971c:	44800015 	stw	r18,0(r8)
   89720:	45400115 	stw	r21,4(r8)
   89724:	d8801c15 	stw	r2,112(sp)
   89728:	d8c01b15 	stw	r3,108(sp)
   8972c:	38fff40e 	bge	r7,r3,89700 <_gp+0xfff77b1c>
   89730:	10022b1e 	bne	r2,zero,89fe0 <___vfiprintf_internal_r+0xe58>
   89734:	e73ffc04 	addi	fp,fp,-16
   89738:	01800044 	movi	r6,1
   8973c:	0009883a 	mov	r4,zero
   89740:	d811883a 	mov	r8,sp
   89744:	af3ff316 	blt	r21,fp,89714 <_gp+0xfff77b30>
   89748:	d8c02317 	ldw	r3,140(sp)
   8974c:	1705883a 	add	r2,r2,fp
   89750:	47000115 	stw	fp,4(r8)
   89754:	40c00015 	stw	r3,0(r8)
   89758:	d8801c15 	stw	r2,112(sp)
   8975c:	d9801b15 	stw	r6,108(sp)
   89760:	00c001c4 	movi	r3,7
   89764:	19829416 	blt	r3,r6,8a1b8 <___vfiprintf_internal_r+0x1030>
   89768:	8521c83a 	sub	r16,r16,r20
   8976c:	42000204 	addi	r8,r8,8
   89770:	31400044 	addi	r5,r6,1
   89774:	3009883a 	mov	r4,r6
   89778:	04018716 	blt	zero,r16,89d98 <___vfiprintf_internal_r+0xc10>
   8977c:	a085883a 	add	r2,r20,r2
   89780:	45c00015 	stw	r23,0(r8)
   89784:	45000115 	stw	r20,4(r8)
   89788:	d8801c15 	stw	r2,112(sp)
   8978c:	d9401b15 	stw	r5,108(sp)
   89790:	00c001c4 	movi	r3,7
   89794:	1941c20e 	bge	r3,r5,89ea0 <___vfiprintf_internal_r+0xd18>
   89798:	1002531e 	bne	r2,zero,8a0e8 <___vfiprintf_internal_r+0xf60>
   8979c:	d8001b15 	stw	zero,108(sp)
   897a0:	8c40010c 	andi	r17,r17,4
   897a4:	88023226 	beq	r17,zero,8a070 <___vfiprintf_internal_r+0xee8>
   897a8:	d9002517 	ldw	r4,148(sp)
   897ac:	24e3c83a 	sub	r17,r4,r19
   897b0:	04432916 	blt	zero,r17,8a458 <___vfiprintf_internal_r+0x12d0>
   897b4:	d8802517 	ldw	r2,148(sp)
   897b8:	14c0010e 	bge	r2,r19,897c0 <___vfiprintf_internal_r+0x638>
   897bc:	9805883a 	mov	r2,r19
   897c0:	d8c02417 	ldw	r3,144(sp)
   897c4:	1887883a 	add	r3,r3,r2
   897c8:	d8c02415 	stw	r3,144(sp)
   897cc:	d8001b15 	stw	zero,108(sp)
   897d0:	d811883a 	mov	r8,sp
   897d4:	003ea006 	br	89258 <_gp+0xfff77674>
   897d8:	8c400814 	ori	r17,r17,32
   897dc:	b0c00007 	ldb	r3,0(r22)
   897e0:	003ec606 	br	892fc <_gp+0xfff77718>
   897e4:	b0c00007 	ldb	r3,0(r22)
   897e8:	00801b04 	movi	r2,108
   897ec:	18832026 	beq	r3,r2,8a470 <___vfiprintf_internal_r+0x12e8>
   897f0:	8c400414 	ori	r17,r17,16
   897f4:	003ec106 	br	892fc <_gp+0xfff77718>
   897f8:	9cc03fcc 	andi	r19,r19,255
   897fc:	b811883a 	mov	r8,r23
   89800:	9803981e 	bne	r19,zero,8a664 <___vfiprintf_internal_r+0x14dc>
   89804:	8880080c 	andi	r2,r17,32
   89808:	1002be26 	beq	r2,zero,8a304 <___vfiprintf_internal_r+0x117c>
   8980c:	d9002217 	ldw	r4,136(sp)
   89810:	d9402417 	ldw	r5,144(sp)
   89814:	20800017 	ldw	r2,0(r4)
   89818:	2807d7fa 	srai	r3,r5,31
   8981c:	21000104 	addi	r4,r4,4
   89820:	d9002215 	stw	r4,136(sp)
   89824:	11400015 	stw	r5,0(r2)
   89828:	10c00115 	stw	r3,4(r2)
   8982c:	003e8a06 	br	89258 <_gp+0xfff77674>
   89830:	9cc03fcc 	andi	r19,r19,255
   89834:	b811883a 	mov	r8,r23
   89838:	9803871e 	bne	r19,zero,8a658 <___vfiprintf_internal_r+0x14d0>
   8983c:	8880080c 	andi	r2,r17,32
   89840:	10009a26 	beq	r2,zero,89aac <___vfiprintf_internal_r+0x924>
   89844:	d9002217 	ldw	r4,136(sp)
   89848:	d8001d85 	stb	zero,118(sp)
   8984c:	20800204 	addi	r2,r4,8
   89850:	24c00017 	ldw	r19,0(r4)
   89854:	25000117 	ldw	r20,4(r4)
   89858:	8002a416 	blt	r16,zero,8a2ec <___vfiprintf_internal_r+0x1164>
   8985c:	013fdfc4 	movi	r4,-129
   89860:	9d06b03a 	or	r3,r19,r20
   89864:	d8802215 	stw	r2,136(sp)
   89868:	8922703a 	and	r17,r17,r4
   8986c:	18009b26 	beq	r3,zero,89adc <___vfiprintf_internal_r+0x954>
   89870:	002b883a 	mov	r21,zero
   89874:	ddc01a04 	addi	r23,sp,104
   89878:	9806d0fa 	srli	r3,r19,3
   8987c:	a008977a 	slli	r4,r20,29
   89880:	a028d0fa 	srli	r20,r20,3
   89884:	9cc001cc 	andi	r19,r19,7
   89888:	98800c04 	addi	r2,r19,48
   8988c:	bdffffc4 	addi	r23,r23,-1
   89890:	20e6b03a 	or	r19,r4,r3
   89894:	b8800005 	stb	r2,0(r23)
   89898:	9d06b03a 	or	r3,r19,r20
   8989c:	183ff61e 	bne	r3,zero,89878 <_gp+0xfff77c94>
   898a0:	88c0004c 	andi	r3,r17,1
   898a4:	18021f1e 	bne	r3,zero,8a124 <___vfiprintf_internal_r+0xf9c>
   898a8:	d9401e17 	ldw	r5,120(sp)
   898ac:	2de9c83a 	sub	r20,r5,r23
   898b0:	003f3806 	br	89594 <_gp+0xfff779b0>
   898b4:	9cc03fcc 	andi	r19,r19,255
   898b8:	b811883a 	mov	r8,r23
   898bc:	98034f1e 	bne	r19,zero,8a5fc <___vfiprintf_internal_r+0x1474>
   898c0:	00800274 	movhi	r2,9
   898c4:	10903a04 	addi	r2,r2,16616
   898c8:	d8802615 	stw	r2,152(sp)
   898cc:	8880080c 	andi	r2,r17,32
   898d0:	1000ac26 	beq	r2,zero,89b84 <___vfiprintf_internal_r+0x9fc>
   898d4:	d9002217 	ldw	r4,136(sp)
   898d8:	24c00017 	ldw	r19,0(r4)
   898dc:	25000117 	ldw	r20,4(r4)
   898e0:	21000204 	addi	r4,r4,8
   898e4:	d9002215 	stw	r4,136(sp)
   898e8:	8880004c 	andi	r2,r17,1
   898ec:	1001e726 	beq	r2,zero,8a08c <___vfiprintf_internal_r+0xf04>
   898f0:	9d04b03a 	or	r2,r19,r20
   898f4:	10025c1e 	bne	r2,zero,8a268 <___vfiprintf_internal_r+0x10e0>
   898f8:	d8001d85 	stb	zero,118(sp)
   898fc:	80024416 	blt	r16,zero,8a210 <___vfiprintf_internal_r+0x1088>
   89900:	00bfdfc4 	movi	r2,-129
   89904:	88a2703a 	and	r17,r17,r2
   89908:	003f1d06 	br	89580 <_gp+0xfff7799c>
   8990c:	d8c02217 	ldw	r3,136(sp)
   89910:	04c00044 	movi	r19,1
   89914:	b811883a 	mov	r8,r23
   89918:	18800017 	ldw	r2,0(r3)
   8991c:	18c00104 	addi	r3,r3,4
   89920:	d8001d85 	stb	zero,118(sp)
   89924:	d8801005 	stb	r2,64(sp)
   89928:	d8c02215 	stw	r3,136(sp)
   8992c:	9829883a 	mov	r20,r19
   89930:	ddc01004 	addi	r23,sp,64
   89934:	0021883a 	mov	r16,zero
   89938:	003f1e06 	br	895b4 <_gp+0xfff779d0>
   8993c:	9cc03fcc 	andi	r19,r19,255
   89940:	b811883a 	mov	r8,r23
   89944:	9803331e 	bne	r19,zero,8a614 <___vfiprintf_internal_r+0x148c>
   89948:	8880080c 	andi	r2,r17,32
   8994c:	10004826 	beq	r2,zero,89a70 <___vfiprintf_internal_r+0x8e8>
   89950:	d9002217 	ldw	r4,136(sp)
   89954:	20800117 	ldw	r2,4(r4)
   89958:	24c00017 	ldw	r19,0(r4)
   8995c:	21000204 	addi	r4,r4,8
   89960:	d9002215 	stw	r4,136(sp)
   89964:	1029883a 	mov	r20,r2
   89968:	10024c16 	blt	r2,zero,8a29c <___vfiprintf_internal_r+0x1114>
   8996c:	dd401d83 	ldbu	r21,118(sp)
   89970:	80007116 	blt	r16,zero,89b38 <___vfiprintf_internal_r+0x9b0>
   89974:	00ffdfc4 	movi	r3,-129
   89978:	9d04b03a 	or	r2,r19,r20
   8997c:	88e2703a 	and	r17,r17,r3
   89980:	1000d126 	beq	r2,zero,89cc8 <___vfiprintf_internal_r+0xb40>
   89984:	a0023526 	beq	r20,zero,8a25c <___vfiprintf_internal_r+0x10d4>
   89988:	ddc01a04 	addi	r23,sp,104
   8998c:	4039883a 	mov	fp,r8
   89990:	9809883a 	mov	r4,r19
   89994:	a00b883a 	mov	r5,r20
   89998:	01800284 	movi	r6,10
   8999c:	000f883a 	mov	r7,zero
   899a0:	008b6b40 	call	8b6b4 <__umoddi3>
   899a4:	10800c04 	addi	r2,r2,48
   899a8:	bdffffc4 	addi	r23,r23,-1
   899ac:	9809883a 	mov	r4,r19
   899b0:	a00b883a 	mov	r5,r20
   899b4:	b8800005 	stb	r2,0(r23)
   899b8:	01800284 	movi	r6,10
   899bc:	000f883a 	mov	r7,zero
   899c0:	008b0b80 	call	8b0b8 <__udivdi3>
   899c4:	1027883a 	mov	r19,r2
   899c8:	10c4b03a 	or	r2,r2,r3
   899cc:	1829883a 	mov	r20,r3
   899d0:	103fef1e 	bne	r2,zero,89990 <_gp+0xfff77dac>
   899d4:	d9001e17 	ldw	r4,120(sp)
   899d8:	e011883a 	mov	r8,fp
   899dc:	25e9c83a 	sub	r20,r4,r23
   899e0:	003eec06 	br	89594 <_gp+0xfff779b0>
   899e4:	d8802307 	ldb	r2,140(sp)
   899e8:	1002361e 	bne	r2,zero,8a2c4 <___vfiprintf_internal_r+0x113c>
   899ec:	00c00804 	movi	r3,32
   899f0:	d8c02305 	stb	r3,140(sp)
   899f4:	04c00044 	movi	r19,1
   899f8:	b0c00007 	ldb	r3,0(r22)
   899fc:	003e3f06 	br	892fc <_gp+0xfff77718>
   89a00:	8c400054 	ori	r17,r17,1
   89a04:	b0c00007 	ldb	r3,0(r22)
   89a08:	003e3c06 	br	892fc <_gp+0xfff77718>
   89a0c:	8c402014 	ori	r17,r17,128
   89a10:	b0c00007 	ldb	r3,0(r22)
   89a14:	003e3906 	br	892fc <_gp+0xfff77718>
   89a18:	dc002715 	stw	r16,156(sp)
   89a1c:	d8002515 	stw	zero,148(sp)
   89a20:	1f3ff404 	addi	fp,r3,-48
   89a24:	0009883a 	mov	r4,zero
   89a28:	b021883a 	mov	r16,r22
   89a2c:	01400284 	movi	r5,10
   89a30:	00817900 	call	81790 <__mulsi3>
   89a34:	80c00007 	ldb	r3,0(r16)
   89a38:	e089883a 	add	r4,fp,r2
   89a3c:	b5800044 	addi	r22,r22,1
   89a40:	1f3ff404 	addi	fp,r3,-48
   89a44:	b021883a 	mov	r16,r22
   89a48:	af3ff82e 	bgeu	r21,fp,89a2c <_gp+0xfff77e48>
   89a4c:	d9002515 	stw	r4,148(sp)
   89a50:	dc002717 	ldw	r16,156(sp)
   89a54:	003e2a06 	br	89300 <_gp+0xfff7771c>
   89a58:	9cc03fcc 	andi	r19,r19,255
   89a5c:	b811883a 	mov	r8,r23
   89a60:	9802e91e 	bne	r19,zero,8a608 <___vfiprintf_internal_r+0x1480>
   89a64:	8c400414 	ori	r17,r17,16
   89a68:	8880080c 	andi	r2,r17,32
   89a6c:	103fb81e 	bne	r2,zero,89950 <_gp+0xfff77d6c>
   89a70:	8880040c 	andi	r2,r17,16
   89a74:	10022e26 	beq	r2,zero,8a330 <___vfiprintf_internal_r+0x11a8>
   89a78:	d9402217 	ldw	r5,136(sp)
   89a7c:	2cc00017 	ldw	r19,0(r5)
   89a80:	29400104 	addi	r5,r5,4
   89a84:	d9402215 	stw	r5,136(sp)
   89a88:	9829d7fa 	srai	r20,r19,31
   89a8c:	a005883a 	mov	r2,r20
   89a90:	003fb506 	br	89968 <_gp+0xfff77d84>
   89a94:	9cc03fcc 	andi	r19,r19,255
   89a98:	b811883a 	mov	r8,r23
   89a9c:	9802fa1e 	bne	r19,zero,8a688 <___vfiprintf_internal_r+0x1500>
   89aa0:	8c400414 	ori	r17,r17,16
   89aa4:	8880080c 	andi	r2,r17,32
   89aa8:	103f661e 	bne	r2,zero,89844 <_gp+0xfff77c60>
   89aac:	8880040c 	andi	r2,r17,16
   89ab0:	10020626 	beq	r2,zero,8a2cc <___vfiprintf_internal_r+0x1144>
   89ab4:	d9402217 	ldw	r5,136(sp)
   89ab8:	d8001d85 	stb	zero,118(sp)
   89abc:	0029883a 	mov	r20,zero
   89ac0:	28800104 	addi	r2,r5,4
   89ac4:	2cc00017 	ldw	r19,0(r5)
   89ac8:	80020816 	blt	r16,zero,8a2ec <___vfiprintf_internal_r+0x1164>
   89acc:	00ffdfc4 	movi	r3,-129
   89ad0:	d8802215 	stw	r2,136(sp)
   89ad4:	88e2703a 	and	r17,r17,r3
   89ad8:	983f651e 	bne	r19,zero,89870 <_gp+0xfff77c8c>
   89adc:	002b883a 	mov	r21,zero
   89ae0:	8002cf26 	beq	r16,zero,8a620 <___vfiprintf_internal_r+0x1498>
   89ae4:	0027883a 	mov	r19,zero
   89ae8:	0029883a 	mov	r20,zero
   89aec:	003f6106 	br	89874 <_gp+0xfff77c90>
   89af0:	9cc03fcc 	andi	r19,r19,255
   89af4:	b811883a 	mov	r8,r23
   89af8:	9802e01e 	bne	r19,zero,8a67c <___vfiprintf_internal_r+0x14f4>
   89afc:	8c400414 	ori	r17,r17,16
   89b00:	8880080c 	andi	r2,r17,32
   89b04:	1000641e 	bne	r2,zero,89c98 <___vfiprintf_internal_r+0xb10>
   89b08:	8880040c 	andi	r2,r17,16
   89b0c:	1001c81e 	bne	r2,zero,8a230 <___vfiprintf_internal_r+0x10a8>
   89b10:	8880100c 	andi	r2,r17,64
   89b14:	d8001d85 	stb	zero,118(sp)
   89b18:	1002281e 	bne	r2,zero,8a3bc <___vfiprintf_internal_r+0x1234>
   89b1c:	d9002217 	ldw	r4,136(sp)
   89b20:	0029883a 	mov	r20,zero
   89b24:	20800104 	addi	r2,r4,4
   89b28:	24c00017 	ldw	r19,0(r4)
   89b2c:	8001c60e 	bge	r16,zero,8a248 <___vfiprintf_internal_r+0x10c0>
   89b30:	d8802215 	stw	r2,136(sp)
   89b34:	002b883a 	mov	r21,zero
   89b38:	9d04b03a 	or	r2,r19,r20
   89b3c:	103f911e 	bne	r2,zero,89984 <_gp+0xfff77da0>
   89b40:	00800044 	movi	r2,1
   89b44:	10803fcc 	andi	r2,r2,255
   89b48:	00c00044 	movi	r3,1
   89b4c:	10c05f26 	beq	r2,r3,89ccc <___vfiprintf_internal_r+0xb44>
   89b50:	00c00084 	movi	r3,2
   89b54:	10ffe31e 	bne	r2,r3,89ae4 <_gp+0xfff77f00>
   89b58:	0027883a 	mov	r19,zero
   89b5c:	0029883a 	mov	r20,zero
   89b60:	00015106 	br	8a0a8 <___vfiprintf_internal_r+0xf20>
   89b64:	9cc03fcc 	andi	r19,r19,255
   89b68:	b811883a 	mov	r8,r23
   89b6c:	9802c01e 	bne	r19,zero,8a670 <___vfiprintf_internal_r+0x14e8>
   89b70:	01400274 	movhi	r5,9
   89b74:	29503504 	addi	r5,r5,16596
   89b78:	d9402615 	stw	r5,152(sp)
   89b7c:	8880080c 	andi	r2,r17,32
   89b80:	103f541e 	bne	r2,zero,898d4 <_gp+0xfff77cf0>
   89b84:	8880040c 	andi	r2,r17,16
   89b88:	1001f226 	beq	r2,zero,8a354 <___vfiprintf_internal_r+0x11cc>
   89b8c:	d9402217 	ldw	r5,136(sp)
   89b90:	0029883a 	mov	r20,zero
   89b94:	2cc00017 	ldw	r19,0(r5)
   89b98:	29400104 	addi	r5,r5,4
   89b9c:	d9402215 	stw	r5,136(sp)
   89ba0:	003f5106 	br	898e8 <_gp+0xfff77d04>
   89ba4:	d8c02217 	ldw	r3,136(sp)
   89ba8:	b811883a 	mov	r8,r23
   89bac:	d8001d85 	stb	zero,118(sp)
   89bb0:	1dc00017 	ldw	r23,0(r3)
   89bb4:	1f000104 	addi	fp,r3,4
   89bb8:	b8025926 	beq	r23,zero,8a520 <___vfiprintf_internal_r+0x1398>
   89bbc:	80023316 	blt	r16,zero,8a48c <___vfiprintf_internal_r+0x1304>
   89bc0:	800d883a 	mov	r6,r16
   89bc4:	000b883a 	mov	r5,zero
   89bc8:	b809883a 	mov	r4,r23
   89bcc:	da002a15 	stw	r8,168(sp)
   89bd0:	00872c80 	call	872c8 <memchr>
   89bd4:	da002a17 	ldw	r8,168(sp)
   89bd8:	10026826 	beq	r2,zero,8a57c <___vfiprintf_internal_r+0x13f4>
   89bdc:	15e9c83a 	sub	r20,r2,r23
   89be0:	dd401d83 	ldbu	r21,118(sp)
   89be4:	df002215 	stw	fp,136(sp)
   89be8:	0021883a 	mov	r16,zero
   89bec:	003e6906 	br	89594 <_gp+0xfff779b0>
   89bf0:	9cc03fcc 	andi	r19,r19,255
   89bf4:	b811883a 	mov	r8,r23
   89bf8:	983fc126 	beq	r19,zero,89b00 <_gp+0xfff77f1c>
   89bfc:	d8c02303 	ldbu	r3,140(sp)
   89c00:	d8c01d85 	stb	r3,118(sp)
   89c04:	003fbe06 	br	89b00 <_gp+0xfff77f1c>
   89c08:	d9002217 	ldw	r4,136(sp)
   89c0c:	d9402217 	ldw	r5,136(sp)
   89c10:	21000017 	ldw	r4,0(r4)
   89c14:	28800104 	addi	r2,r5,4
   89c18:	d9002515 	stw	r4,148(sp)
   89c1c:	203e3d16 	blt	r4,zero,89514 <_gp+0xfff77930>
   89c20:	d8802215 	stw	r2,136(sp)
   89c24:	b0c00007 	ldb	r3,0(r22)
   89c28:	003db406 	br	892fc <_gp+0xfff77718>
   89c2c:	00c00ac4 	movi	r3,43
   89c30:	d8c02305 	stb	r3,140(sp)
   89c34:	04c00044 	movi	r19,1
   89c38:	b0c00007 	ldb	r3,0(r22)
   89c3c:	003daf06 	br	892fc <_gp+0xfff77718>
   89c40:	b0c00007 	ldb	r3,0(r22)
   89c44:	01000a84 	movi	r4,42
   89c48:	b4000044 	addi	r16,r22,1
   89c4c:	19025e26 	beq	r3,r4,8a5c8 <___vfiprintf_internal_r+0x1440>
   89c50:	1f3ff404 	addi	fp,r3,-48
   89c54:	0009883a 	mov	r4,zero
   89c58:	af025236 	bltu	r21,fp,8a5a4 <___vfiprintf_internal_r+0x141c>
   89c5c:	01400284 	movi	r5,10
   89c60:	00817900 	call	81790 <__mulsi3>
   89c64:	80c00007 	ldb	r3,0(r16)
   89c68:	1709883a 	add	r4,r2,fp
   89c6c:	85800044 	addi	r22,r16,1
   89c70:	1f3ff404 	addi	fp,r3,-48
   89c74:	b021883a 	mov	r16,r22
   89c78:	af3ff82e 	bgeu	r21,fp,89c5c <_gp+0xfff78078>
   89c7c:	2021883a 	mov	r16,r4
   89c80:	203d9f0e 	bge	r4,zero,89300 <_gp+0xfff7771c>
   89c84:	043fffc4 	movi	r16,-1
   89c88:	003d9d06 	br	89300 <_gp+0xfff7771c>
   89c8c:	8c401014 	ori	r17,r17,64
   89c90:	b0c00007 	ldb	r3,0(r22)
   89c94:	003d9906 	br	892fc <_gp+0xfff77718>
   89c98:	d9002217 	ldw	r4,136(sp)
   89c9c:	d8001d85 	stb	zero,118(sp)
   89ca0:	20c00204 	addi	r3,r4,8
   89ca4:	24c00017 	ldw	r19,0(r4)
   89ca8:	25000117 	ldw	r20,4(r4)
   89cac:	8001e716 	blt	r16,zero,8a44c <___vfiprintf_internal_r+0x12c4>
   89cb0:	013fdfc4 	movi	r4,-129
   89cb4:	9d04b03a 	or	r2,r19,r20
   89cb8:	d8c02215 	stw	r3,136(sp)
   89cbc:	8922703a 	and	r17,r17,r4
   89cc0:	002b883a 	mov	r21,zero
   89cc4:	103f2f1e 	bne	r2,zero,89984 <_gp+0xfff77da0>
   89cc8:	803e2f26 	beq	r16,zero,89588 <_gp+0xfff779a4>
   89ccc:	0027883a 	mov	r19,zero
   89cd0:	9cc00c04 	addi	r19,r19,48
   89cd4:	dcc019c5 	stb	r19,103(sp)
   89cd8:	dd002817 	ldw	r20,160(sp)
   89cdc:	ddc019c4 	addi	r23,sp,103
   89ce0:	003e2c06 	br	89594 <_gp+0xfff779b0>
   89ce4:	9cc03fcc 	andi	r19,r19,255
   89ce8:	b811883a 	mov	r8,r23
   89cec:	9802571e 	bne	r19,zero,8a64c <___vfiprintf_internal_r+0x14c4>
   89cf0:	18005726 	beq	r3,zero,89e50 <___vfiprintf_internal_r+0xcc8>
   89cf4:	04c00044 	movi	r19,1
   89cf8:	d8c01005 	stb	r3,64(sp)
   89cfc:	d8001d85 	stb	zero,118(sp)
   89d00:	9829883a 	mov	r20,r19
   89d04:	ddc01004 	addi	r23,sp,64
   89d08:	003f0a06 	br	89934 <_gp+0xfff77d50>
   89d0c:	d9402017 	ldw	r5,128(sp)
   89d10:	d9002117 	ldw	r4,132(sp)
   89d14:	d9801a04 	addi	r6,sp,104
   89d18:	da802a15 	stw	r10,168(sp)
   89d1c:	00890740 	call	89074 <__sprint_r.part.0>
   89d20:	da802a17 	ldw	r10,168(sp)
   89d24:	1000501e 	bne	r2,zero,89e68 <___vfiprintf_internal_r+0xce0>
   89d28:	d9801b17 	ldw	r6,108(sp)
   89d2c:	d8801c17 	ldw	r2,112(sp)
   89d30:	d811883a 	mov	r8,sp
   89d34:	31000044 	addi	r4,r6,1
   89d38:	003e3606 	br	89614 <_gp+0xfff77a30>
   89d3c:	d9001b17 	ldw	r4,108(sp)
   89d40:	d8801c17 	ldw	r2,112(sp)
   89d44:	21400044 	addi	r5,r4,1
   89d48:	d9801d87 	ldb	r6,118(sp)
   89d4c:	303e5226 	beq	r6,zero,89698 <_gp+0xfff77ab4>
   89d50:	01800044 	movi	r6,1
   89d54:	d9001d84 	addi	r4,sp,118
   89d58:	1185883a 	add	r2,r2,r6
   89d5c:	41000015 	stw	r4,0(r8)
   89d60:	41800115 	stw	r6,4(r8)
   89d64:	d8801c15 	stw	r2,112(sp)
   89d68:	d9401b15 	stw	r5,108(sp)
   89d6c:	010001c4 	movi	r4,7
   89d70:	2140b00e 	bge	r4,r5,8a034 <___vfiprintf_internal_r+0xeac>
   89d74:	1000f61e 	bne	r2,zero,8a150 <___vfiprintf_internal_r+0xfc8>
   89d78:	3800b31e 	bne	r7,zero,8a048 <___vfiprintf_internal_r+0xec0>
   89d7c:	0009883a 	mov	r4,zero
   89d80:	300b883a 	mov	r5,r6
   89d84:	d811883a 	mov	r8,sp
   89d88:	01802004 	movi	r6,128
   89d8c:	19be5226 	beq	r3,r6,896d8 <_gp+0xfff77af4>
   89d90:	8521c83a 	sub	r16,r16,r20
   89d94:	043e790e 	bge	zero,r16,8977c <_gp+0xfff77b98>
   89d98:	05400404 	movi	r21,16
   89d9c:	ac01b00e 	bge	r21,r16,8a460 <___vfiprintf_internal_r+0x12d8>
   89da0:	01400274 	movhi	r5,9
   89da4:	29509b04 	addi	r5,r5,17004
   89da8:	d9402315 	stw	r5,140(sp)
   89dac:	070001c4 	movi	fp,7
   89db0:	00000506 	br	89dc8 <___vfiprintf_internal_r+0xc40>
   89db4:	21400084 	addi	r5,r4,2
   89db8:	42000204 	addi	r8,r8,8
   89dbc:	1809883a 	mov	r4,r3
   89dc0:	843ffc04 	addi	r16,r16,-16
   89dc4:	ac000d0e 	bge	r21,r16,89dfc <___vfiprintf_internal_r+0xc74>
   89dc8:	10800404 	addi	r2,r2,16
   89dcc:	20c00044 	addi	r3,r4,1
   89dd0:	44800015 	stw	r18,0(r8)
   89dd4:	45400115 	stw	r21,4(r8)
   89dd8:	d8801c15 	stw	r2,112(sp)
   89ddc:	d8c01b15 	stw	r3,108(sp)
   89de0:	e0fff40e 	bge	fp,r3,89db4 <_gp+0xfff781d0>
   89de4:	1000101e 	bne	r2,zero,89e28 <___vfiprintf_internal_r+0xca0>
   89de8:	843ffc04 	addi	r16,r16,-16
   89dec:	01400044 	movi	r5,1
   89df0:	0009883a 	mov	r4,zero
   89df4:	d811883a 	mov	r8,sp
   89df8:	ac3ff316 	blt	r21,r16,89dc8 <_gp+0xfff781e4>
   89dfc:	d8c02317 	ldw	r3,140(sp)
   89e00:	1405883a 	add	r2,r2,r16
   89e04:	44000115 	stw	r16,4(r8)
   89e08:	40c00015 	stw	r3,0(r8)
   89e0c:	d8801c15 	stw	r2,112(sp)
   89e10:	d9401b15 	stw	r5,108(sp)
   89e14:	00c001c4 	movi	r3,7
   89e18:	19401916 	blt	r3,r5,89e80 <___vfiprintf_internal_r+0xcf8>
   89e1c:	42000204 	addi	r8,r8,8
   89e20:	29400044 	addi	r5,r5,1
   89e24:	003e5506 	br	8977c <_gp+0xfff77b98>
   89e28:	d9402017 	ldw	r5,128(sp)
   89e2c:	d9002117 	ldw	r4,132(sp)
   89e30:	d9801a04 	addi	r6,sp,104
   89e34:	00890740 	call	89074 <__sprint_r.part.0>
   89e38:	10000b1e 	bne	r2,zero,89e68 <___vfiprintf_internal_r+0xce0>
   89e3c:	d9001b17 	ldw	r4,108(sp)
   89e40:	d8801c17 	ldw	r2,112(sp)
   89e44:	d811883a 	mov	r8,sp
   89e48:	21400044 	addi	r5,r4,1
   89e4c:	003fdc06 	br	89dc0 <_gp+0xfff781dc>
   89e50:	d8801c17 	ldw	r2,112(sp)
   89e54:	10000426 	beq	r2,zero,89e68 <___vfiprintf_internal_r+0xce0>
   89e58:	d9402017 	ldw	r5,128(sp)
   89e5c:	d9002117 	ldw	r4,132(sp)
   89e60:	d9801a04 	addi	r6,sp,104
   89e64:	00890740 	call	89074 <__sprint_r.part.0>
   89e68:	d9402017 	ldw	r5,128(sp)
   89e6c:	2880030b 	ldhu	r2,12(r5)
   89e70:	1080100c 	andi	r2,r2,64
   89e74:	10014d1e 	bne	r2,zero,8a3ac <___vfiprintf_internal_r+0x1224>
   89e78:	d8802417 	ldw	r2,144(sp)
   89e7c:	003d9706 	br	894dc <_gp+0xfff778f8>
   89e80:	1000d21e 	bne	r2,zero,8a1cc <___vfiprintf_internal_r+0x1044>
   89e84:	00c00044 	movi	r3,1
   89e88:	a005883a 	mov	r2,r20
   89e8c:	ddc00015 	stw	r23,0(sp)
   89e90:	dd000115 	stw	r20,4(sp)
   89e94:	dd001c15 	stw	r20,112(sp)
   89e98:	d8c01b15 	stw	r3,108(sp)
   89e9c:	d811883a 	mov	r8,sp
   89ea0:	42000204 	addi	r8,r8,8
   89ea4:	8c40010c 	andi	r17,r17,4
   89ea8:	88004026 	beq	r17,zero,89fac <___vfiprintf_internal_r+0xe24>
   89eac:	d9002517 	ldw	r4,148(sp)
   89eb0:	24e3c83a 	sub	r17,r4,r19
   89eb4:	04403d0e 	bge	zero,r17,89fac <___vfiprintf_internal_r+0xe24>
   89eb8:	04000404 	movi	r16,16
   89ebc:	8441a90e 	bge	r16,r17,8a564 <___vfiprintf_internal_r+0x13dc>
   89ec0:	00c00274 	movhi	r3,9
   89ec4:	18d09f04 	addi	r3,r3,17020
   89ec8:	d9001b17 	ldw	r4,108(sp)
   89ecc:	d8c02315 	stw	r3,140(sp)
   89ed0:	050001c4 	movi	r20,7
   89ed4:	dd402117 	ldw	r21,132(sp)
   89ed8:	ddc02017 	ldw	r23,128(sp)
   89edc:	00000506 	br	89ef4 <___vfiprintf_internal_r+0xd6c>
   89ee0:	21400084 	addi	r5,r4,2
   89ee4:	42000204 	addi	r8,r8,8
   89ee8:	1809883a 	mov	r4,r3
   89eec:	8c7ffc04 	addi	r17,r17,-16
   89ef0:	84400f0e 	bge	r16,r17,89f30 <___vfiprintf_internal_r+0xda8>
   89ef4:	01400274 	movhi	r5,9
   89ef8:	10800404 	addi	r2,r2,16
   89efc:	20c00044 	addi	r3,r4,1
   89f00:	29509f04 	addi	r5,r5,17020
   89f04:	41400015 	stw	r5,0(r8)
   89f08:	44000115 	stw	r16,4(r8)
   89f0c:	d8801c15 	stw	r2,112(sp)
   89f10:	d8c01b15 	stw	r3,108(sp)
   89f14:	a0fff20e 	bge	r20,r3,89ee0 <_gp+0xfff782fc>
   89f18:	1000141e 	bne	r2,zero,89f6c <___vfiprintf_internal_r+0xde4>
   89f1c:	8c7ffc04 	addi	r17,r17,-16
   89f20:	01400044 	movi	r5,1
   89f24:	0009883a 	mov	r4,zero
   89f28:	d811883a 	mov	r8,sp
   89f2c:	847ff116 	blt	r16,r17,89ef4 <_gp+0xfff78310>
   89f30:	d8c02317 	ldw	r3,140(sp)
   89f34:	1445883a 	add	r2,r2,r17
   89f38:	44400115 	stw	r17,4(r8)
   89f3c:	40c00015 	stw	r3,0(r8)
   89f40:	d8801c15 	stw	r2,112(sp)
   89f44:	d9401b15 	stw	r5,108(sp)
   89f48:	00c001c4 	movi	r3,7
   89f4c:	1940170e 	bge	r3,r5,89fac <___vfiprintf_internal_r+0xe24>
   89f50:	1000101e 	bne	r2,zero,89f94 <___vfiprintf_internal_r+0xe0c>
   89f54:	d8802517 	ldw	r2,148(sp)
   89f58:	14c11616 	blt	r2,r19,8a3b4 <___vfiprintf_internal_r+0x122c>
   89f5c:	d9002417 	ldw	r4,144(sp)
   89f60:	2089883a 	add	r4,r4,r2
   89f64:	d9002415 	stw	r4,144(sp)
   89f68:	003e1806 	br	897cc <_gp+0xfff77be8>
   89f6c:	d9801a04 	addi	r6,sp,104
   89f70:	b80b883a 	mov	r5,r23
   89f74:	a809883a 	mov	r4,r21
   89f78:	00890740 	call	89074 <__sprint_r.part.0>
   89f7c:	103fba1e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   89f80:	d9001b17 	ldw	r4,108(sp)
   89f84:	d8801c17 	ldw	r2,112(sp)
   89f88:	d811883a 	mov	r8,sp
   89f8c:	21400044 	addi	r5,r4,1
   89f90:	003fd606 	br	89eec <_gp+0xfff78308>
   89f94:	d9402017 	ldw	r5,128(sp)
   89f98:	d9002117 	ldw	r4,132(sp)
   89f9c:	d9801a04 	addi	r6,sp,104
   89fa0:	00890740 	call	89074 <__sprint_r.part.0>
   89fa4:	103fb01e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   89fa8:	d8801c17 	ldw	r2,112(sp)
   89fac:	d8c02517 	ldw	r3,148(sp)
   89fb0:	1cc0010e 	bge	r3,r19,89fb8 <___vfiprintf_internal_r+0xe30>
   89fb4:	9807883a 	mov	r3,r19
   89fb8:	d9002417 	ldw	r4,144(sp)
   89fbc:	20c9883a 	add	r4,r4,r3
   89fc0:	d9002415 	stw	r4,144(sp)
   89fc4:	103e0126 	beq	r2,zero,897cc <_gp+0xfff77be8>
   89fc8:	d9402017 	ldw	r5,128(sp)
   89fcc:	d9002117 	ldw	r4,132(sp)
   89fd0:	d9801a04 	addi	r6,sp,104
   89fd4:	00890740 	call	89074 <__sprint_r.part.0>
   89fd8:	103dfc26 	beq	r2,zero,897cc <_gp+0xfff77be8>
   89fdc:	003fa206 	br	89e68 <_gp+0xfff78284>
   89fe0:	d9402017 	ldw	r5,128(sp)
   89fe4:	d9002117 	ldw	r4,132(sp)
   89fe8:	d9801a04 	addi	r6,sp,104
   89fec:	d9c02b15 	stw	r7,172(sp)
   89ff0:	00890740 	call	89074 <__sprint_r.part.0>
   89ff4:	d9c02b17 	ldw	r7,172(sp)
   89ff8:	103f9b1e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   89ffc:	d9001b17 	ldw	r4,108(sp)
   8a000:	d8801c17 	ldw	r2,112(sp)
   8a004:	d811883a 	mov	r8,sp
   8a008:	21800044 	addi	r6,r4,1
   8a00c:	003dbf06 	br	8970c <_gp+0xfff77b28>
   8a010:	1000d81e 	bne	r2,zero,8a374 <___vfiprintf_internal_r+0x11ec>
   8a014:	d9001d87 	ldb	r4,118(sp)
   8a018:	20000a26 	beq	r4,zero,8a044 <___vfiprintf_internal_r+0xebc>
   8a01c:	00800044 	movi	r2,1
   8a020:	d9001d84 	addi	r4,sp,118
   8a024:	100b883a 	mov	r5,r2
   8a028:	d9000015 	stw	r4,0(sp)
   8a02c:	d8800115 	stw	r2,4(sp)
   8a030:	d811883a 	mov	r8,sp
   8a034:	2809883a 	mov	r4,r5
   8a038:	42000204 	addi	r8,r8,8
   8a03c:	29400044 	addi	r5,r5,1
   8a040:	003d9506 	br	89698 <_gp+0xfff77ab4>
   8a044:	3800fd26 	beq	r7,zero,8a43c <___vfiprintf_internal_r+0x12b4>
   8a048:	00800084 	movi	r2,2
   8a04c:	d9001d04 	addi	r4,sp,116
   8a050:	d9000015 	stw	r4,0(sp)
   8a054:	d8800115 	stw	r2,4(sp)
   8a058:	01400044 	movi	r5,1
   8a05c:	d811883a 	mov	r8,sp
   8a060:	2809883a 	mov	r4,r5
   8a064:	42000204 	addi	r8,r8,8
   8a068:	29400044 	addi	r5,r5,1
   8a06c:	003f4606 	br	89d88 <_gp+0xfff781a4>
   8a070:	d8802517 	ldw	r2,148(sp)
   8a074:	14c0010e 	bge	r2,r19,8a07c <___vfiprintf_internal_r+0xef4>
   8a078:	9805883a 	mov	r2,r19
   8a07c:	d9402417 	ldw	r5,144(sp)
   8a080:	288b883a 	add	r5,r5,r2
   8a084:	d9402415 	stw	r5,144(sp)
   8a088:	003dd006 	br	897cc <_gp+0xfff77be8>
   8a08c:	d8001d85 	stb	zero,118(sp)
   8a090:	80005d16 	blt	r16,zero,8a208 <___vfiprintf_internal_r+0x1080>
   8a094:	00ffdfc4 	movi	r3,-129
   8a098:	9d04b03a 	or	r2,r19,r20
   8a09c:	88e2703a 	and	r17,r17,r3
   8a0a0:	103d3726 	beq	r2,zero,89580 <_gp+0xfff7799c>
   8a0a4:	002b883a 	mov	r21,zero
   8a0a8:	d9002617 	ldw	r4,152(sp)
   8a0ac:	ddc01a04 	addi	r23,sp,104
   8a0b0:	988003cc 	andi	r2,r19,15
   8a0b4:	a006973a 	slli	r3,r20,28
   8a0b8:	2085883a 	add	r2,r4,r2
   8a0bc:	9826d13a 	srli	r19,r19,4
   8a0c0:	10800003 	ldbu	r2,0(r2)
   8a0c4:	a028d13a 	srli	r20,r20,4
   8a0c8:	bdffffc4 	addi	r23,r23,-1
   8a0cc:	1ce6b03a 	or	r19,r3,r19
   8a0d0:	b8800005 	stb	r2,0(r23)
   8a0d4:	9d04b03a 	or	r2,r19,r20
   8a0d8:	103ff51e 	bne	r2,zero,8a0b0 <_gp+0xfff784cc>
   8a0dc:	d8801e17 	ldw	r2,120(sp)
   8a0e0:	15e9c83a 	sub	r20,r2,r23
   8a0e4:	003d2b06 	br	89594 <_gp+0xfff779b0>
   8a0e8:	d9402017 	ldw	r5,128(sp)
   8a0ec:	d9002117 	ldw	r4,132(sp)
   8a0f0:	d9801a04 	addi	r6,sp,104
   8a0f4:	00890740 	call	89074 <__sprint_r.part.0>
   8a0f8:	103f5b1e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a0fc:	d8801c17 	ldw	r2,112(sp)
   8a100:	d811883a 	mov	r8,sp
   8a104:	003f6706 	br	89ea4 <_gp+0xfff782c0>
   8a108:	d9402017 	ldw	r5,128(sp)
   8a10c:	d9002117 	ldw	r4,132(sp)
   8a110:	d9801a04 	addi	r6,sp,104
   8a114:	00890740 	call	89074 <__sprint_r.part.0>
   8a118:	103f531e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a11c:	d811883a 	mov	r8,sp
   8a120:	003cd906 	br	89488 <_gp+0xfff778a4>
   8a124:	10803fcc 	andi	r2,r2,255
   8a128:	1080201c 	xori	r2,r2,128
   8a12c:	10bfe004 	addi	r2,r2,-128
   8a130:	00c00c04 	movi	r3,48
   8a134:	10ffe926 	beq	r2,r3,8a0dc <_gp+0xfff784f8>
   8a138:	b8ffffc5 	stb	r3,-1(r23)
   8a13c:	d8c01e17 	ldw	r3,120(sp)
   8a140:	b8bfffc4 	addi	r2,r23,-1
   8a144:	102f883a 	mov	r23,r2
   8a148:	18a9c83a 	sub	r20,r3,r2
   8a14c:	003d1106 	br	89594 <_gp+0xfff779b0>
   8a150:	d9402017 	ldw	r5,128(sp)
   8a154:	d9002117 	ldw	r4,132(sp)
   8a158:	d9801a04 	addi	r6,sp,104
   8a15c:	d8c02a15 	stw	r3,168(sp)
   8a160:	d9c02b15 	stw	r7,172(sp)
   8a164:	00890740 	call	89074 <__sprint_r.part.0>
   8a168:	d8c02a17 	ldw	r3,168(sp)
   8a16c:	d9c02b17 	ldw	r7,172(sp)
   8a170:	103f3d1e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a174:	d9001b17 	ldw	r4,108(sp)
   8a178:	d8801c17 	ldw	r2,112(sp)
   8a17c:	d811883a 	mov	r8,sp
   8a180:	21400044 	addi	r5,r4,1
   8a184:	003d4406 	br	89698 <_gp+0xfff77ab4>
   8a188:	d9402017 	ldw	r5,128(sp)
   8a18c:	d9002117 	ldw	r4,132(sp)
   8a190:	d9801a04 	addi	r6,sp,104
   8a194:	d8c02a15 	stw	r3,168(sp)
   8a198:	00890740 	call	89074 <__sprint_r.part.0>
   8a19c:	d8c02a17 	ldw	r3,168(sp)
   8a1a0:	103f311e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a1a4:	d9001b17 	ldw	r4,108(sp)
   8a1a8:	d8801c17 	ldw	r2,112(sp)
   8a1ac:	d811883a 	mov	r8,sp
   8a1b0:	21400044 	addi	r5,r4,1
   8a1b4:	003ef406 	br	89d88 <_gp+0xfff781a4>
   8a1b8:	1000bd1e 	bne	r2,zero,8a4b0 <___vfiprintf_internal_r+0x1328>
   8a1bc:	01400044 	movi	r5,1
   8a1c0:	0009883a 	mov	r4,zero
   8a1c4:	d811883a 	mov	r8,sp
   8a1c8:	003ef106 	br	89d90 <_gp+0xfff781ac>
   8a1cc:	d9402017 	ldw	r5,128(sp)
   8a1d0:	d9002117 	ldw	r4,132(sp)
   8a1d4:	d9801a04 	addi	r6,sp,104
   8a1d8:	00890740 	call	89074 <__sprint_r.part.0>
   8a1dc:	103f221e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a1e0:	d9401b17 	ldw	r5,108(sp)
   8a1e4:	d8801c17 	ldw	r2,112(sp)
   8a1e8:	d811883a 	mov	r8,sp
   8a1ec:	29400044 	addi	r5,r5,1
   8a1f0:	003d6206 	br	8977c <_gp+0xfff77b98>
   8a1f4:	01400274 	movhi	r5,9
   8a1f8:	29503a04 	addi	r5,r5,16616
   8a1fc:	d9402615 	stw	r5,152(sp)
   8a200:	d8c02215 	stw	r3,136(sp)
   8a204:	1023883a 	mov	r17,r2
   8a208:	9d04b03a 	or	r2,r19,r20
   8a20c:	103fa51e 	bne	r2,zero,8a0a4 <_gp+0xfff784c0>
   8a210:	002b883a 	mov	r21,zero
   8a214:	00800084 	movi	r2,2
   8a218:	003e4a06 	br	89b44 <_gp+0xfff77f60>
   8a21c:	01400274 	movhi	r5,9
   8a220:	29503a04 	addi	r5,r5,16616
   8a224:	002b883a 	mov	r21,zero
   8a228:	d9402615 	stw	r5,152(sp)
   8a22c:	003f9e06 	br	8a0a8 <_gp+0xfff784c4>
   8a230:	d9402217 	ldw	r5,136(sp)
   8a234:	d8001d85 	stb	zero,118(sp)
   8a238:	0029883a 	mov	r20,zero
   8a23c:	28800104 	addi	r2,r5,4
   8a240:	2cc00017 	ldw	r19,0(r5)
   8a244:	803e3a16 	blt	r16,zero,89b30 <_gp+0xfff77f4c>
   8a248:	00ffdfc4 	movi	r3,-129
   8a24c:	d8802215 	stw	r2,136(sp)
   8a250:	88e2703a 	and	r17,r17,r3
   8a254:	002b883a 	mov	r21,zero
   8a258:	983e9b26 	beq	r19,zero,89cc8 <_gp+0xfff780e4>
   8a25c:	00800244 	movi	r2,9
   8a260:	14fdc936 	bltu	r2,r19,89988 <_gp+0xfff77da4>
   8a264:	003e9a06 	br	89cd0 <_gp+0xfff780ec>
   8a268:	00800c04 	movi	r2,48
   8a26c:	d8c01d45 	stb	r3,117(sp)
   8a270:	d8801d05 	stb	r2,116(sp)
   8a274:	d8001d85 	stb	zero,118(sp)
   8a278:	88c00094 	ori	r3,r17,2
   8a27c:	80009c16 	blt	r16,zero,8a4f0 <___vfiprintf_internal_r+0x1368>
   8a280:	00bfdfc4 	movi	r2,-129
   8a284:	88a2703a 	and	r17,r17,r2
   8a288:	8c400094 	ori	r17,r17,2
   8a28c:	002b883a 	mov	r21,zero
   8a290:	003f8506 	br	8a0a8 <_gp+0xfff784c4>
   8a294:	b029883a 	mov	r20,r22
   8a298:	003c0b06 	br	892c8 <_gp+0xfff776e4>
   8a29c:	04e7c83a 	sub	r19,zero,r19
   8a2a0:	05400b44 	movi	r21,45
   8a2a4:	9804c03a 	cmpne	r2,r19,zero
   8a2a8:	0529c83a 	sub	r20,zero,r20
   8a2ac:	dd401d85 	stb	r21,118(sp)
   8a2b0:	a0a9c83a 	sub	r20,r20,r2
   8a2b4:	80009716 	blt	r16,zero,8a514 <___vfiprintf_internal_r+0x138c>
   8a2b8:	00bfdfc4 	movi	r2,-129
   8a2bc:	88a2703a 	and	r17,r17,r2
   8a2c0:	003db006 	br	89984 <_gp+0xfff77da0>
   8a2c4:	b0c00007 	ldb	r3,0(r22)
   8a2c8:	003c0c06 	br	892fc <_gp+0xfff77718>
   8a2cc:	8880100c 	andi	r2,r17,64
   8a2d0:	d8001d85 	stb	zero,118(sp)
   8a2d4:	1000461e 	bne	r2,zero,8a3f0 <___vfiprintf_internal_r+0x1268>
   8a2d8:	d9002217 	ldw	r4,136(sp)
   8a2dc:	0029883a 	mov	r20,zero
   8a2e0:	20800104 	addi	r2,r4,4
   8a2e4:	24c00017 	ldw	r19,0(r4)
   8a2e8:	803df80e 	bge	r16,zero,89acc <_gp+0xfff77ee8>
   8a2ec:	9d06b03a 	or	r3,r19,r20
   8a2f0:	d8802215 	stw	r2,136(sp)
   8a2f4:	183d5e1e 	bne	r3,zero,89870 <_gp+0xfff77c8c>
   8a2f8:	002b883a 	mov	r21,zero
   8a2fc:	0005883a 	mov	r2,zero
   8a300:	003e1006 	br	89b44 <_gp+0xfff77f60>
   8a304:	8880040c 	andi	r2,r17,16
   8a308:	1000321e 	bne	r2,zero,8a3d4 <___vfiprintf_internal_r+0x124c>
   8a30c:	8c40100c 	andi	r17,r17,64
   8a310:	88008d26 	beq	r17,zero,8a548 <___vfiprintf_internal_r+0x13c0>
   8a314:	d9402217 	ldw	r5,136(sp)
   8a318:	d8c02417 	ldw	r3,144(sp)
   8a31c:	28800017 	ldw	r2,0(r5)
   8a320:	29400104 	addi	r5,r5,4
   8a324:	d9402215 	stw	r5,136(sp)
   8a328:	10c0000d 	sth	r3,0(r2)
   8a32c:	003bca06 	br	89258 <_gp+0xfff77674>
   8a330:	8880100c 	andi	r2,r17,64
   8a334:	10003a26 	beq	r2,zero,8a420 <___vfiprintf_internal_r+0x1298>
   8a338:	d8802217 	ldw	r2,136(sp)
   8a33c:	14c0000f 	ldh	r19,0(r2)
   8a340:	10800104 	addi	r2,r2,4
   8a344:	d8802215 	stw	r2,136(sp)
   8a348:	9829d7fa 	srai	r20,r19,31
   8a34c:	a005883a 	mov	r2,r20
   8a350:	003d8506 	br	89968 <_gp+0xfff77d84>
   8a354:	8880100c 	andi	r2,r17,64
   8a358:	10002b26 	beq	r2,zero,8a408 <___vfiprintf_internal_r+0x1280>
   8a35c:	d8802217 	ldw	r2,136(sp)
   8a360:	0029883a 	mov	r20,zero
   8a364:	14c0000b 	ldhu	r19,0(r2)
   8a368:	10800104 	addi	r2,r2,4
   8a36c:	d8802215 	stw	r2,136(sp)
   8a370:	003d5d06 	br	898e8 <_gp+0xfff77d04>
   8a374:	d9402017 	ldw	r5,128(sp)
   8a378:	d9002117 	ldw	r4,132(sp)
   8a37c:	d9801a04 	addi	r6,sp,104
   8a380:	d8c02a15 	stw	r3,168(sp)
   8a384:	d9c02b15 	stw	r7,172(sp)
   8a388:	00890740 	call	89074 <__sprint_r.part.0>
   8a38c:	d8c02a17 	ldw	r3,168(sp)
   8a390:	d9c02b17 	ldw	r7,172(sp)
   8a394:	103eb41e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a398:	d9001b17 	ldw	r4,108(sp)
   8a39c:	d8801c17 	ldw	r2,112(sp)
   8a3a0:	d811883a 	mov	r8,sp
   8a3a4:	21400044 	addi	r5,r4,1
   8a3a8:	003e6706 	br	89d48 <_gp+0xfff78164>
   8a3ac:	00bfffc4 	movi	r2,-1
   8a3b0:	003c4a06 	br	894dc <_gp+0xfff778f8>
   8a3b4:	9805883a 	mov	r2,r19
   8a3b8:	003ee806 	br	89f5c <_gp+0xfff78378>
   8a3bc:	d8c02217 	ldw	r3,136(sp)
   8a3c0:	0029883a 	mov	r20,zero
   8a3c4:	18800104 	addi	r2,r3,4
   8a3c8:	1cc0000b 	ldhu	r19,0(r3)
   8a3cc:	803f9e0e 	bge	r16,zero,8a248 <_gp+0xfff78664>
   8a3d0:	003dd706 	br	89b30 <_gp+0xfff77f4c>
   8a3d4:	d8c02217 	ldw	r3,136(sp)
   8a3d8:	d9002417 	ldw	r4,144(sp)
   8a3dc:	18800017 	ldw	r2,0(r3)
   8a3e0:	18c00104 	addi	r3,r3,4
   8a3e4:	d8c02215 	stw	r3,136(sp)
   8a3e8:	11000015 	stw	r4,0(r2)
   8a3ec:	003b9a06 	br	89258 <_gp+0xfff77674>
   8a3f0:	d8c02217 	ldw	r3,136(sp)
   8a3f4:	0029883a 	mov	r20,zero
   8a3f8:	18800104 	addi	r2,r3,4
   8a3fc:	1cc0000b 	ldhu	r19,0(r3)
   8a400:	803db20e 	bge	r16,zero,89acc <_gp+0xfff77ee8>
   8a404:	003fb906 	br	8a2ec <_gp+0xfff78708>
   8a408:	d9002217 	ldw	r4,136(sp)
   8a40c:	0029883a 	mov	r20,zero
   8a410:	24c00017 	ldw	r19,0(r4)
   8a414:	21000104 	addi	r4,r4,4
   8a418:	d9002215 	stw	r4,136(sp)
   8a41c:	003d3206 	br	898e8 <_gp+0xfff77d04>
   8a420:	d8c02217 	ldw	r3,136(sp)
   8a424:	1cc00017 	ldw	r19,0(r3)
   8a428:	18c00104 	addi	r3,r3,4
   8a42c:	d8c02215 	stw	r3,136(sp)
   8a430:	9829d7fa 	srai	r20,r19,31
   8a434:	a005883a 	mov	r2,r20
   8a438:	003d4b06 	br	89968 <_gp+0xfff77d84>
   8a43c:	0009883a 	mov	r4,zero
   8a440:	01400044 	movi	r5,1
   8a444:	d811883a 	mov	r8,sp
   8a448:	003e4f06 	br	89d88 <_gp+0xfff781a4>
   8a44c:	d8c02215 	stw	r3,136(sp)
   8a450:	002b883a 	mov	r21,zero
   8a454:	003db806 	br	89b38 <_gp+0xfff77f54>
   8a458:	d811883a 	mov	r8,sp
   8a45c:	003e9606 	br	89eb8 <_gp+0xfff782d4>
   8a460:	01000274 	movhi	r4,9
   8a464:	21109b04 	addi	r4,r4,17004
   8a468:	d9002315 	stw	r4,140(sp)
   8a46c:	003e6306 	br	89dfc <_gp+0xfff78218>
   8a470:	b0c00043 	ldbu	r3,1(r22)
   8a474:	8c400814 	ori	r17,r17,32
   8a478:	b5800044 	addi	r22,r22,1
   8a47c:	18c03fcc 	andi	r3,r3,255
   8a480:	18c0201c 	xori	r3,r3,128
   8a484:	18ffe004 	addi	r3,r3,-128
   8a488:	003b9c06 	br	892fc <_gp+0xfff77718>
   8a48c:	b809883a 	mov	r4,r23
   8a490:	da002a15 	stw	r8,168(sp)
   8a494:	00818f80 	call	818f8 <strlen>
   8a498:	1029883a 	mov	r20,r2
   8a49c:	dd401d83 	ldbu	r21,118(sp)
   8a4a0:	df002215 	stw	fp,136(sp)
   8a4a4:	0021883a 	mov	r16,zero
   8a4a8:	da002a17 	ldw	r8,168(sp)
   8a4ac:	003c3906 	br	89594 <_gp+0xfff779b0>
   8a4b0:	d9402017 	ldw	r5,128(sp)
   8a4b4:	d9002117 	ldw	r4,132(sp)
   8a4b8:	d9801a04 	addi	r6,sp,104
   8a4bc:	00890740 	call	89074 <__sprint_r.part.0>
   8a4c0:	103e691e 	bne	r2,zero,89e68 <_gp+0xfff78284>
   8a4c4:	d9001b17 	ldw	r4,108(sp)
   8a4c8:	d8801c17 	ldw	r2,112(sp)
   8a4cc:	d811883a 	mov	r8,sp
   8a4d0:	21400044 	addi	r5,r4,1
   8a4d4:	003e2e06 	br	89d90 <_gp+0xfff781ac>
   8a4d8:	01000274 	movhi	r4,9
   8a4dc:	21109f04 	addi	r4,r4,17020
   8a4e0:	d9002315 	stw	r4,140(sp)
   8a4e4:	d9001b17 	ldw	r4,108(sp)
   8a4e8:	21000044 	addi	r4,r4,1
   8a4ec:	003c5e06 	br	89668 <_gp+0xfff77a84>
   8a4f0:	002b883a 	mov	r21,zero
   8a4f4:	00800084 	movi	r2,2
   8a4f8:	10803fcc 	andi	r2,r2,255
   8a4fc:	01000044 	movi	r4,1
   8a500:	11002b26 	beq	r2,r4,8a5b0 <___vfiprintf_internal_r+0x1428>
   8a504:	01000084 	movi	r4,2
   8a508:	11002b1e 	bne	r2,r4,8a5b8 <___vfiprintf_internal_r+0x1430>
   8a50c:	1823883a 	mov	r17,r3
   8a510:	003ee506 	br	8a0a8 <_gp+0xfff784c4>
   8a514:	8807883a 	mov	r3,r17
   8a518:	00800044 	movi	r2,1
   8a51c:	003ff606 	br	8a4f8 <_gp+0xfff78914>
   8a520:	00800184 	movi	r2,6
   8a524:	1400012e 	bgeu	r2,r16,8a52c <___vfiprintf_internal_r+0x13a4>
   8a528:	1021883a 	mov	r16,r2
   8a52c:	8029883a 	mov	r20,r16
   8a530:	8027883a 	mov	r19,r16
   8a534:	80002216 	blt	r16,zero,8a5c0 <___vfiprintf_internal_r+0x1438>
   8a538:	05c00274 	movhi	r23,9
   8a53c:	df002215 	stw	fp,136(sp)
   8a540:	bdd03f04 	addi	r23,r23,16636
   8a544:	003cfb06 	br	89934 <_gp+0xfff77d50>
   8a548:	d9002217 	ldw	r4,136(sp)
   8a54c:	d9402417 	ldw	r5,144(sp)
   8a550:	20800017 	ldw	r2,0(r4)
   8a554:	21000104 	addi	r4,r4,4
   8a558:	d9002215 	stw	r4,136(sp)
   8a55c:	11400015 	stw	r5,0(r2)
   8a560:	003b3d06 	br	89258 <_gp+0xfff77674>
   8a564:	01400274 	movhi	r5,9
   8a568:	29509f04 	addi	r5,r5,17020
   8a56c:	d9402315 	stw	r5,140(sp)
   8a570:	d9401b17 	ldw	r5,108(sp)
   8a574:	29400044 	addi	r5,r5,1
   8a578:	003e6d06 	br	89f30 <_gp+0xfff7834c>
   8a57c:	8029883a 	mov	r20,r16
   8a580:	dd401d83 	ldbu	r21,118(sp)
   8a584:	df002215 	stw	fp,136(sp)
   8a588:	0021883a 	mov	r16,zero
   8a58c:	003c0106 	br	89594 <_gp+0xfff779b0>
   8a590:	00c00274 	movhi	r3,9
   8a594:	18d09b04 	addi	r3,r3,17004
   8a598:	d8c02315 	stw	r3,140(sp)
   8a59c:	280d883a 	mov	r6,r5
   8a5a0:	003c6906 	br	89748 <_gp+0xfff77b64>
   8a5a4:	802d883a 	mov	r22,r16
   8a5a8:	0021883a 	mov	r16,zero
   8a5ac:	003b5406 	br	89300 <_gp+0xfff7771c>
   8a5b0:	1823883a 	mov	r17,r3
   8a5b4:	003cf306 	br	89984 <_gp+0xfff77da0>
   8a5b8:	1823883a 	mov	r17,r3
   8a5bc:	003cad06 	br	89874 <_gp+0xfff77c90>
   8a5c0:	0027883a 	mov	r19,zero
   8a5c4:	003fdc06 	br	8a538 <_gp+0xfff78954>
   8a5c8:	d9402217 	ldw	r5,136(sp)
   8a5cc:	8005883a 	mov	r2,r16
   8a5d0:	b0c00043 	ldbu	r3,1(r22)
   8a5d4:	2c000017 	ldw	r16,0(r5)
   8a5d8:	29000104 	addi	r4,r5,4
   8a5dc:	d9002215 	stw	r4,136(sp)
   8a5e0:	102d883a 	mov	r22,r2
   8a5e4:	803fa50e 	bge	r16,zero,8a47c <_gp+0xfff78898>
   8a5e8:	18c03fcc 	andi	r3,r3,255
   8a5ec:	18c0201c 	xori	r3,r3,128
   8a5f0:	043fffc4 	movi	r16,-1
   8a5f4:	18ffe004 	addi	r3,r3,-128
   8a5f8:	003b4006 	br	892fc <_gp+0xfff77718>
   8a5fc:	d9402303 	ldbu	r5,140(sp)
   8a600:	d9401d85 	stb	r5,118(sp)
   8a604:	003cae06 	br	898c0 <_gp+0xfff77cdc>
   8a608:	d8c02303 	ldbu	r3,140(sp)
   8a60c:	d8c01d85 	stb	r3,118(sp)
   8a610:	003d1406 	br	89a64 <_gp+0xfff77e80>
   8a614:	d8c02303 	ldbu	r3,140(sp)
   8a618:	d8c01d85 	stb	r3,118(sp)
   8a61c:	003cca06 	br	89948 <_gp+0xfff77d64>
   8a620:	8880004c 	andi	r2,r17,1
   8a624:	002b883a 	mov	r21,zero
   8a628:	10000526 	beq	r2,zero,8a640 <___vfiprintf_internal_r+0x14b8>
   8a62c:	00800c04 	movi	r2,48
   8a630:	d88019c5 	stb	r2,103(sp)
   8a634:	dd002817 	ldw	r20,160(sp)
   8a638:	ddc019c4 	addi	r23,sp,103
   8a63c:	003bd506 	br	89594 <_gp+0xfff779b0>
   8a640:	0029883a 	mov	r20,zero
   8a644:	ddc01a04 	addi	r23,sp,104
   8a648:	003bd206 	br	89594 <_gp+0xfff779b0>
   8a64c:	d9002303 	ldbu	r4,140(sp)
   8a650:	d9001d85 	stb	r4,118(sp)
   8a654:	003da606 	br	89cf0 <_gp+0xfff7810c>
   8a658:	d8c02303 	ldbu	r3,140(sp)
   8a65c:	d8c01d85 	stb	r3,118(sp)
   8a660:	003c7606 	br	8983c <_gp+0xfff77c58>
   8a664:	d8c02303 	ldbu	r3,140(sp)
   8a668:	d8c01d85 	stb	r3,118(sp)
   8a66c:	003c6506 	br	89804 <_gp+0xfff77c20>
   8a670:	d9002303 	ldbu	r4,140(sp)
   8a674:	d9001d85 	stb	r4,118(sp)
   8a678:	003d3d06 	br	89b70 <_gp+0xfff77f8c>
   8a67c:	d8c02303 	ldbu	r3,140(sp)
   8a680:	d8c01d85 	stb	r3,118(sp)
   8a684:	003d1d06 	br	89afc <_gp+0xfff77f18>
   8a688:	d8c02303 	ldbu	r3,140(sp)
   8a68c:	d8c01d85 	stb	r3,118(sp)
   8a690:	003d0306 	br	89aa0 <_gp+0xfff77ebc>

0008a694 <__vfiprintf_internal>:
   8a694:	00800474 	movhi	r2,17
   8a698:	10a6fa04 	addi	r2,r2,-25624
   8a69c:	300f883a 	mov	r7,r6
   8a6a0:	280d883a 	mov	r6,r5
   8a6a4:	200b883a 	mov	r5,r4
   8a6a8:	11000017 	ldw	r4,0(r2)
   8a6ac:	00891881 	jmpi	89188 <___vfiprintf_internal_r>

0008a6b0 <__sbprintf>:
   8a6b0:	2880030b 	ldhu	r2,12(r5)
   8a6b4:	2ac01917 	ldw	r11,100(r5)
   8a6b8:	2a80038b 	ldhu	r10,14(r5)
   8a6bc:	2a400717 	ldw	r9,28(r5)
   8a6c0:	2a000917 	ldw	r8,36(r5)
   8a6c4:	defee204 	addi	sp,sp,-1144
   8a6c8:	00c10004 	movi	r3,1024
   8a6cc:	dc011a15 	stw	r16,1128(sp)
   8a6d0:	10bfff4c 	andi	r2,r2,65533
   8a6d4:	2821883a 	mov	r16,r5
   8a6d8:	d8cb883a 	add	r5,sp,r3
   8a6dc:	dc811c15 	stw	r18,1136(sp)
   8a6e0:	dc411b15 	stw	r17,1132(sp)
   8a6e4:	dfc11d15 	stw	ra,1140(sp)
   8a6e8:	2025883a 	mov	r18,r4
   8a6ec:	d881030d 	sth	r2,1036(sp)
   8a6f0:	dac11915 	stw	r11,1124(sp)
   8a6f4:	da81038d 	sth	r10,1038(sp)
   8a6f8:	da410715 	stw	r9,1052(sp)
   8a6fc:	da010915 	stw	r8,1060(sp)
   8a700:	dec10015 	stw	sp,1024(sp)
   8a704:	dec10415 	stw	sp,1040(sp)
   8a708:	d8c10215 	stw	r3,1032(sp)
   8a70c:	d8c10515 	stw	r3,1044(sp)
   8a710:	d8010615 	stw	zero,1048(sp)
   8a714:	00891880 	call	89188 <___vfiprintf_internal_r>
   8a718:	1023883a 	mov	r17,r2
   8a71c:	10000416 	blt	r2,zero,8a730 <__sbprintf+0x80>
   8a720:	d9410004 	addi	r5,sp,1024
   8a724:	9009883a 	mov	r4,r18
   8a728:	00859640 	call	85964 <_fflush_r>
   8a72c:	10000d1e 	bne	r2,zero,8a764 <__sbprintf+0xb4>
   8a730:	d881030b 	ldhu	r2,1036(sp)
   8a734:	1080100c 	andi	r2,r2,64
   8a738:	10000326 	beq	r2,zero,8a748 <__sbprintf+0x98>
   8a73c:	8080030b 	ldhu	r2,12(r16)
   8a740:	10801014 	ori	r2,r2,64
   8a744:	8080030d 	sth	r2,12(r16)
   8a748:	8805883a 	mov	r2,r17
   8a74c:	dfc11d17 	ldw	ra,1140(sp)
   8a750:	dc811c17 	ldw	r18,1136(sp)
   8a754:	dc411b17 	ldw	r17,1132(sp)
   8a758:	dc011a17 	ldw	r16,1128(sp)
   8a75c:	dec11e04 	addi	sp,sp,1144
   8a760:	f800283a 	ret
   8a764:	047fffc4 	movi	r17,-1
   8a768:	003ff106 	br	8a730 <_gp+0xfff78b4c>

0008a76c <_write_r>:
   8a76c:	defffd04 	addi	sp,sp,-12
   8a770:	2805883a 	mov	r2,r5
   8a774:	dc000015 	stw	r16,0(sp)
   8a778:	04000474 	movhi	r16,17
   8a77c:	dc400115 	stw	r17,4(sp)
   8a780:	300b883a 	mov	r5,r6
   8a784:	84271504 	addi	r16,r16,-25516
   8a788:	2023883a 	mov	r17,r4
   8a78c:	380d883a 	mov	r6,r7
   8a790:	1009883a 	mov	r4,r2
   8a794:	dfc00215 	stw	ra,8(sp)
   8a798:	80000015 	stw	zero,0(r16)
   8a79c:	008ed4c0 	call	8ed4c <write>
   8a7a0:	00ffffc4 	movi	r3,-1
   8a7a4:	10c00526 	beq	r2,r3,8a7bc <_write_r+0x50>
   8a7a8:	dfc00217 	ldw	ra,8(sp)
   8a7ac:	dc400117 	ldw	r17,4(sp)
   8a7b0:	dc000017 	ldw	r16,0(sp)
   8a7b4:	dec00304 	addi	sp,sp,12
   8a7b8:	f800283a 	ret
   8a7bc:	80c00017 	ldw	r3,0(r16)
   8a7c0:	183ff926 	beq	r3,zero,8a7a8 <_gp+0xfff78bc4>
   8a7c4:	88c00015 	stw	r3,0(r17)
   8a7c8:	003ff706 	br	8a7a8 <_gp+0xfff78bc4>

0008a7cc <_close_r>:
   8a7cc:	defffd04 	addi	sp,sp,-12
   8a7d0:	dc000015 	stw	r16,0(sp)
   8a7d4:	04000474 	movhi	r16,17
   8a7d8:	dc400115 	stw	r17,4(sp)
   8a7dc:	84271504 	addi	r16,r16,-25516
   8a7e0:	2023883a 	mov	r17,r4
   8a7e4:	2809883a 	mov	r4,r5
   8a7e8:	dfc00215 	stw	ra,8(sp)
   8a7ec:	80000015 	stw	zero,0(r16)
   8a7f0:	008e4f40 	call	8e4f4 <close>
   8a7f4:	00ffffc4 	movi	r3,-1
   8a7f8:	10c00526 	beq	r2,r3,8a810 <_close_r+0x44>
   8a7fc:	dfc00217 	ldw	ra,8(sp)
   8a800:	dc400117 	ldw	r17,4(sp)
   8a804:	dc000017 	ldw	r16,0(sp)
   8a808:	dec00304 	addi	sp,sp,12
   8a80c:	f800283a 	ret
   8a810:	80c00017 	ldw	r3,0(r16)
   8a814:	183ff926 	beq	r3,zero,8a7fc <_gp+0xfff78c18>
   8a818:	88c00015 	stw	r3,0(r17)
   8a81c:	003ff706 	br	8a7fc <_gp+0xfff78c18>

0008a820 <_calloc_r>:
   8a820:	defffe04 	addi	sp,sp,-8
   8a824:	2805883a 	mov	r2,r5
   8a828:	dc000015 	stw	r16,0(sp)
   8a82c:	300b883a 	mov	r5,r6
   8a830:	2021883a 	mov	r16,r4
   8a834:	1009883a 	mov	r4,r2
   8a838:	dfc00115 	stw	ra,4(sp)
   8a83c:	00817900 	call	81790 <__mulsi3>
   8a840:	100b883a 	mov	r5,r2
   8a844:	8009883a 	mov	r4,r16
   8a848:	0086abc0 	call	86abc <_malloc_r>
   8a84c:	10002926 	beq	r2,zero,8a8f4 <_calloc_r+0xd4>
   8a850:	11bfff17 	ldw	r6,-4(r2)
   8a854:	1021883a 	mov	r16,r2
   8a858:	00bfff04 	movi	r2,-4
   8a85c:	308c703a 	and	r6,r6,r2
   8a860:	00c00904 	movi	r3,36
   8a864:	308d883a 	add	r6,r6,r2
   8a868:	19801636 	bltu	r3,r6,8a8c4 <_calloc_r+0xa4>
   8a86c:	008004c4 	movi	r2,19
   8a870:	11800b2e 	bgeu	r2,r6,8a8a0 <_calloc_r+0x80>
   8a874:	80000015 	stw	zero,0(r16)
   8a878:	80000115 	stw	zero,4(r16)
   8a87c:	008006c4 	movi	r2,27
   8a880:	11801a2e 	bgeu	r2,r6,8a8ec <_calloc_r+0xcc>
   8a884:	80000215 	stw	zero,8(r16)
   8a888:	80000315 	stw	zero,12(r16)
   8a88c:	30c0151e 	bne	r6,r3,8a8e4 <_calloc_r+0xc4>
   8a890:	80000415 	stw	zero,16(r16)
   8a894:	80800604 	addi	r2,r16,24
   8a898:	80000515 	stw	zero,20(r16)
   8a89c:	00000106 	br	8a8a4 <_calloc_r+0x84>
   8a8a0:	8005883a 	mov	r2,r16
   8a8a4:	10000015 	stw	zero,0(r2)
   8a8a8:	10000115 	stw	zero,4(r2)
   8a8ac:	10000215 	stw	zero,8(r2)
   8a8b0:	8005883a 	mov	r2,r16
   8a8b4:	dfc00117 	ldw	ra,4(sp)
   8a8b8:	dc000017 	ldw	r16,0(sp)
   8a8bc:	dec00204 	addi	sp,sp,8
   8a8c0:	f800283a 	ret
   8a8c4:	000b883a 	mov	r5,zero
   8a8c8:	8009883a 	mov	r4,r16
   8a8cc:	00876500 	call	87650 <memset>
   8a8d0:	8005883a 	mov	r2,r16
   8a8d4:	dfc00117 	ldw	ra,4(sp)
   8a8d8:	dc000017 	ldw	r16,0(sp)
   8a8dc:	dec00204 	addi	sp,sp,8
   8a8e0:	f800283a 	ret
   8a8e4:	80800404 	addi	r2,r16,16
   8a8e8:	003fee06 	br	8a8a4 <_gp+0xfff78cc0>
   8a8ec:	80800204 	addi	r2,r16,8
   8a8f0:	003fec06 	br	8a8a4 <_gp+0xfff78cc0>
   8a8f4:	0005883a 	mov	r2,zero
   8a8f8:	003fee06 	br	8a8b4 <_gp+0xfff78cd0>

0008a8fc <_fclose_r>:
   8a8fc:	28003926 	beq	r5,zero,8a9e4 <_fclose_r+0xe8>
   8a900:	defffc04 	addi	sp,sp,-16
   8a904:	dc400115 	stw	r17,4(sp)
   8a908:	dc000015 	stw	r16,0(sp)
   8a90c:	dfc00315 	stw	ra,12(sp)
   8a910:	dc800215 	stw	r18,8(sp)
   8a914:	2023883a 	mov	r17,r4
   8a918:	2821883a 	mov	r16,r5
   8a91c:	20000226 	beq	r4,zero,8a928 <_fclose_r+0x2c>
   8a920:	20800e17 	ldw	r2,56(r4)
   8a924:	10002726 	beq	r2,zero,8a9c4 <_fclose_r+0xc8>
   8a928:	8080030f 	ldh	r2,12(r16)
   8a92c:	1000071e 	bne	r2,zero,8a94c <_fclose_r+0x50>
   8a930:	0005883a 	mov	r2,zero
   8a934:	dfc00317 	ldw	ra,12(sp)
   8a938:	dc800217 	ldw	r18,8(sp)
   8a93c:	dc400117 	ldw	r17,4(sp)
   8a940:	dc000017 	ldw	r16,0(sp)
   8a944:	dec00404 	addi	sp,sp,16
   8a948:	f800283a 	ret
   8a94c:	800b883a 	mov	r5,r16
   8a950:	8809883a 	mov	r4,r17
   8a954:	00857480 	call	85748 <__sflush_r>
   8a958:	1025883a 	mov	r18,r2
   8a95c:	80800b17 	ldw	r2,44(r16)
   8a960:	10000426 	beq	r2,zero,8a974 <_fclose_r+0x78>
   8a964:	81400717 	ldw	r5,28(r16)
   8a968:	8809883a 	mov	r4,r17
   8a96c:	103ee83a 	callr	r2
   8a970:	10001616 	blt	r2,zero,8a9cc <_fclose_r+0xd0>
   8a974:	8080030b 	ldhu	r2,12(r16)
   8a978:	1080200c 	andi	r2,r2,128
   8a97c:	1000151e 	bne	r2,zero,8a9d4 <_fclose_r+0xd8>
   8a980:	81400c17 	ldw	r5,48(r16)
   8a984:	28000526 	beq	r5,zero,8a99c <_fclose_r+0xa0>
   8a988:	80801004 	addi	r2,r16,64
   8a98c:	28800226 	beq	r5,r2,8a998 <_fclose_r+0x9c>
   8a990:	8809883a 	mov	r4,r17
   8a994:	0085ec40 	call	85ec4 <_free_r>
   8a998:	80000c15 	stw	zero,48(r16)
   8a99c:	81401117 	ldw	r5,68(r16)
   8a9a0:	28000326 	beq	r5,zero,8a9b0 <_fclose_r+0xb4>
   8a9a4:	8809883a 	mov	r4,r17
   8a9a8:	0085ec40 	call	85ec4 <_free_r>
   8a9ac:	80001115 	stw	zero,68(r16)
   8a9b0:	0085d600 	call	85d60 <__sfp_lock_acquire>
   8a9b4:	8000030d 	sth	zero,12(r16)
   8a9b8:	0085d640 	call	85d64 <__sfp_lock_release>
   8a9bc:	9005883a 	mov	r2,r18
   8a9c0:	003fdc06 	br	8a934 <_gp+0xfff78d50>
   8a9c4:	0085d500 	call	85d50 <__sinit>
   8a9c8:	003fd706 	br	8a928 <_gp+0xfff78d44>
   8a9cc:	04bfffc4 	movi	r18,-1
   8a9d0:	003fe806 	br	8a974 <_gp+0xfff78d90>
   8a9d4:	81400417 	ldw	r5,16(r16)
   8a9d8:	8809883a 	mov	r4,r17
   8a9dc:	0085ec40 	call	85ec4 <_free_r>
   8a9e0:	003fe706 	br	8a980 <_gp+0xfff78d9c>
   8a9e4:	0005883a 	mov	r2,zero
   8a9e8:	f800283a 	ret

0008a9ec <fclose>:
   8a9ec:	00800474 	movhi	r2,17
   8a9f0:	10a6fa04 	addi	r2,r2,-25624
   8a9f4:	200b883a 	mov	r5,r4
   8a9f8:	11000017 	ldw	r4,0(r2)
   8a9fc:	008a8fc1 	jmpi	8a8fc <_fclose_r>

0008aa00 <__fputwc>:
   8aa00:	defff804 	addi	sp,sp,-32
   8aa04:	dcc00415 	stw	r19,16(sp)
   8aa08:	dc800315 	stw	r18,12(sp)
   8aa0c:	dc000115 	stw	r16,4(sp)
   8aa10:	dfc00715 	stw	ra,28(sp)
   8aa14:	dd400615 	stw	r21,24(sp)
   8aa18:	dd000515 	stw	r20,20(sp)
   8aa1c:	dc400215 	stw	r17,8(sp)
   8aa20:	2027883a 	mov	r19,r4
   8aa24:	2825883a 	mov	r18,r5
   8aa28:	3021883a 	mov	r16,r6
   8aa2c:	00868ac0 	call	868ac <__locale_mb_cur_max>
   8aa30:	00c00044 	movi	r3,1
   8aa34:	10c03e26 	beq	r2,r3,8ab30 <__fputwc+0x130>
   8aa38:	81c01704 	addi	r7,r16,92
   8aa3c:	900d883a 	mov	r6,r18
   8aa40:	d80b883a 	mov	r5,sp
   8aa44:	9809883a 	mov	r4,r19
   8aa48:	008aed00 	call	8aed0 <_wcrtomb_r>
   8aa4c:	1029883a 	mov	r20,r2
   8aa50:	00bfffc4 	movi	r2,-1
   8aa54:	a0802026 	beq	r20,r2,8aad8 <__fputwc+0xd8>
   8aa58:	d9400003 	ldbu	r5,0(sp)
   8aa5c:	a0001c26 	beq	r20,zero,8aad0 <__fputwc+0xd0>
   8aa60:	0023883a 	mov	r17,zero
   8aa64:	05400284 	movi	r21,10
   8aa68:	00000906 	br	8aa90 <__fputwc+0x90>
   8aa6c:	80800017 	ldw	r2,0(r16)
   8aa70:	11400005 	stb	r5,0(r2)
   8aa74:	80c00017 	ldw	r3,0(r16)
   8aa78:	18c00044 	addi	r3,r3,1
   8aa7c:	80c00015 	stw	r3,0(r16)
   8aa80:	8c400044 	addi	r17,r17,1
   8aa84:	dc45883a 	add	r2,sp,r17
   8aa88:	8d00112e 	bgeu	r17,r20,8aad0 <__fputwc+0xd0>
   8aa8c:	11400003 	ldbu	r5,0(r2)
   8aa90:	80c00217 	ldw	r3,8(r16)
   8aa94:	18ffffc4 	addi	r3,r3,-1
   8aa98:	80c00215 	stw	r3,8(r16)
   8aa9c:	183ff30e 	bge	r3,zero,8aa6c <_gp+0xfff78e88>
   8aaa0:	80800617 	ldw	r2,24(r16)
   8aaa4:	18801916 	blt	r3,r2,8ab0c <__fputwc+0x10c>
   8aaa8:	80800017 	ldw	r2,0(r16)
   8aaac:	11400005 	stb	r5,0(r2)
   8aab0:	80800017 	ldw	r2,0(r16)
   8aab4:	10c00003 	ldbu	r3,0(r2)
   8aab8:	10800044 	addi	r2,r2,1
   8aabc:	1d402326 	beq	r3,r21,8ab4c <__fputwc+0x14c>
   8aac0:	80800015 	stw	r2,0(r16)
   8aac4:	8c400044 	addi	r17,r17,1
   8aac8:	dc45883a 	add	r2,sp,r17
   8aacc:	8d3fef36 	bltu	r17,r20,8aa8c <_gp+0xfff78ea8>
   8aad0:	9005883a 	mov	r2,r18
   8aad4:	00000406 	br	8aae8 <__fputwc+0xe8>
   8aad8:	80c0030b 	ldhu	r3,12(r16)
   8aadc:	a005883a 	mov	r2,r20
   8aae0:	18c01014 	ori	r3,r3,64
   8aae4:	80c0030d 	sth	r3,12(r16)
   8aae8:	dfc00717 	ldw	ra,28(sp)
   8aaec:	dd400617 	ldw	r21,24(sp)
   8aaf0:	dd000517 	ldw	r20,20(sp)
   8aaf4:	dcc00417 	ldw	r19,16(sp)
   8aaf8:	dc800317 	ldw	r18,12(sp)
   8aafc:	dc400217 	ldw	r17,8(sp)
   8ab00:	dc000117 	ldw	r16,4(sp)
   8ab04:	dec00804 	addi	sp,sp,32
   8ab08:	f800283a 	ret
   8ab0c:	800d883a 	mov	r6,r16
   8ab10:	29403fcc 	andi	r5,r5,255
   8ab14:	9809883a 	mov	r4,r19
   8ab18:	008ad780 	call	8ad78 <__swbuf_r>
   8ab1c:	10bfffe0 	cmpeqi	r2,r2,-1
   8ab20:	10803fcc 	andi	r2,r2,255
   8ab24:	103fd626 	beq	r2,zero,8aa80 <_gp+0xfff78e9c>
   8ab28:	00bfffc4 	movi	r2,-1
   8ab2c:	003fee06 	br	8aae8 <_gp+0xfff78f04>
   8ab30:	90ffffc4 	addi	r3,r18,-1
   8ab34:	01003f84 	movi	r4,254
   8ab38:	20ffbf36 	bltu	r4,r3,8aa38 <_gp+0xfff78e54>
   8ab3c:	900b883a 	mov	r5,r18
   8ab40:	dc800005 	stb	r18,0(sp)
   8ab44:	1029883a 	mov	r20,r2
   8ab48:	003fc506 	br	8aa60 <_gp+0xfff78e7c>
   8ab4c:	800d883a 	mov	r6,r16
   8ab50:	a80b883a 	mov	r5,r21
   8ab54:	9809883a 	mov	r4,r19
   8ab58:	008ad780 	call	8ad78 <__swbuf_r>
   8ab5c:	10bfffe0 	cmpeqi	r2,r2,-1
   8ab60:	003fef06 	br	8ab20 <_gp+0xfff78f3c>

0008ab64 <_fputwc_r>:
   8ab64:	3080030b 	ldhu	r2,12(r6)
   8ab68:	10c8000c 	andi	r3,r2,8192
   8ab6c:	1800051e 	bne	r3,zero,8ab84 <_fputwc_r+0x20>
   8ab70:	30c01917 	ldw	r3,100(r6)
   8ab74:	10880014 	ori	r2,r2,8192
   8ab78:	3080030d 	sth	r2,12(r6)
   8ab7c:	18880014 	ori	r2,r3,8192
   8ab80:	30801915 	stw	r2,100(r6)
   8ab84:	008aa001 	jmpi	8aa00 <__fputwc>

0008ab88 <fputwc>:
   8ab88:	00800474 	movhi	r2,17
   8ab8c:	defffc04 	addi	sp,sp,-16
   8ab90:	10a6fa04 	addi	r2,r2,-25624
   8ab94:	dc000115 	stw	r16,4(sp)
   8ab98:	14000017 	ldw	r16,0(r2)
   8ab9c:	dc400215 	stw	r17,8(sp)
   8aba0:	dfc00315 	stw	ra,12(sp)
   8aba4:	2023883a 	mov	r17,r4
   8aba8:	80000226 	beq	r16,zero,8abb4 <fputwc+0x2c>
   8abac:	80800e17 	ldw	r2,56(r16)
   8abb0:	10001026 	beq	r2,zero,8abf4 <fputwc+0x6c>
   8abb4:	2880030b 	ldhu	r2,12(r5)
   8abb8:	10c8000c 	andi	r3,r2,8192
   8abbc:	1800051e 	bne	r3,zero,8abd4 <fputwc+0x4c>
   8abc0:	28c01917 	ldw	r3,100(r5)
   8abc4:	10880014 	ori	r2,r2,8192
   8abc8:	2880030d 	sth	r2,12(r5)
   8abcc:	18880014 	ori	r2,r3,8192
   8abd0:	28801915 	stw	r2,100(r5)
   8abd4:	280d883a 	mov	r6,r5
   8abd8:	8009883a 	mov	r4,r16
   8abdc:	880b883a 	mov	r5,r17
   8abe0:	dfc00317 	ldw	ra,12(sp)
   8abe4:	dc400217 	ldw	r17,8(sp)
   8abe8:	dc000117 	ldw	r16,4(sp)
   8abec:	dec00404 	addi	sp,sp,16
   8abf0:	008aa001 	jmpi	8aa00 <__fputwc>
   8abf4:	8009883a 	mov	r4,r16
   8abf8:	d9400015 	stw	r5,0(sp)
   8abfc:	0085d500 	call	85d50 <__sinit>
   8ac00:	d9400017 	ldw	r5,0(sp)
   8ac04:	003feb06 	br	8abb4 <_gp+0xfff78fd0>

0008ac08 <_fstat_r>:
   8ac08:	defffd04 	addi	sp,sp,-12
   8ac0c:	2805883a 	mov	r2,r5
   8ac10:	dc000015 	stw	r16,0(sp)
   8ac14:	04000474 	movhi	r16,17
   8ac18:	dc400115 	stw	r17,4(sp)
   8ac1c:	84271504 	addi	r16,r16,-25516
   8ac20:	2023883a 	mov	r17,r4
   8ac24:	300b883a 	mov	r5,r6
   8ac28:	1009883a 	mov	r4,r2
   8ac2c:	dfc00215 	stw	ra,8(sp)
   8ac30:	80000015 	stw	zero,0(r16)
   8ac34:	008e6340 	call	8e634 <fstat>
   8ac38:	00ffffc4 	movi	r3,-1
   8ac3c:	10c00526 	beq	r2,r3,8ac54 <_fstat_r+0x4c>
   8ac40:	dfc00217 	ldw	ra,8(sp)
   8ac44:	dc400117 	ldw	r17,4(sp)
   8ac48:	dc000017 	ldw	r16,0(sp)
   8ac4c:	dec00304 	addi	sp,sp,12
   8ac50:	f800283a 	ret
   8ac54:	80c00017 	ldw	r3,0(r16)
   8ac58:	183ff926 	beq	r3,zero,8ac40 <_gp+0xfff7905c>
   8ac5c:	88c00015 	stw	r3,0(r17)
   8ac60:	003ff706 	br	8ac40 <_gp+0xfff7905c>

0008ac64 <_isatty_r>:
   8ac64:	defffd04 	addi	sp,sp,-12
   8ac68:	dc000015 	stw	r16,0(sp)
   8ac6c:	04000474 	movhi	r16,17
   8ac70:	dc400115 	stw	r17,4(sp)
   8ac74:	84271504 	addi	r16,r16,-25516
   8ac78:	2023883a 	mov	r17,r4
   8ac7c:	2809883a 	mov	r4,r5
   8ac80:	dfc00215 	stw	ra,8(sp)
   8ac84:	80000015 	stw	zero,0(r16)
   8ac88:	008e7280 	call	8e728 <isatty>
   8ac8c:	00ffffc4 	movi	r3,-1
   8ac90:	10c00526 	beq	r2,r3,8aca8 <_isatty_r+0x44>
   8ac94:	dfc00217 	ldw	ra,8(sp)
   8ac98:	dc400117 	ldw	r17,4(sp)
   8ac9c:	dc000017 	ldw	r16,0(sp)
   8aca0:	dec00304 	addi	sp,sp,12
   8aca4:	f800283a 	ret
   8aca8:	80c00017 	ldw	r3,0(r16)
   8acac:	183ff926 	beq	r3,zero,8ac94 <_gp+0xfff790b0>
   8acb0:	88c00015 	stw	r3,0(r17)
   8acb4:	003ff706 	br	8ac94 <_gp+0xfff790b0>

0008acb8 <_lseek_r>:
   8acb8:	defffd04 	addi	sp,sp,-12
   8acbc:	2805883a 	mov	r2,r5
   8acc0:	dc000015 	stw	r16,0(sp)
   8acc4:	04000474 	movhi	r16,17
   8acc8:	dc400115 	stw	r17,4(sp)
   8accc:	300b883a 	mov	r5,r6
   8acd0:	84271504 	addi	r16,r16,-25516
   8acd4:	2023883a 	mov	r17,r4
   8acd8:	380d883a 	mov	r6,r7
   8acdc:	1009883a 	mov	r4,r2
   8ace0:	dfc00215 	stw	ra,8(sp)
   8ace4:	80000015 	stw	zero,0(r16)
   8ace8:	008e8fc0 	call	8e8fc <lseek>
   8acec:	00ffffc4 	movi	r3,-1
   8acf0:	10c00526 	beq	r2,r3,8ad08 <_lseek_r+0x50>
   8acf4:	dfc00217 	ldw	ra,8(sp)
   8acf8:	dc400117 	ldw	r17,4(sp)
   8acfc:	dc000017 	ldw	r16,0(sp)
   8ad00:	dec00304 	addi	sp,sp,12
   8ad04:	f800283a 	ret
   8ad08:	80c00017 	ldw	r3,0(r16)
   8ad0c:	183ff926 	beq	r3,zero,8acf4 <_gp+0xfff79110>
   8ad10:	88c00015 	stw	r3,0(r17)
   8ad14:	003ff706 	br	8acf4 <_gp+0xfff79110>

0008ad18 <_read_r>:
   8ad18:	defffd04 	addi	sp,sp,-12
   8ad1c:	2805883a 	mov	r2,r5
   8ad20:	dc000015 	stw	r16,0(sp)
   8ad24:	04000474 	movhi	r16,17
   8ad28:	dc400115 	stw	r17,4(sp)
   8ad2c:	300b883a 	mov	r5,r6
   8ad30:	84271504 	addi	r16,r16,-25516
   8ad34:	2023883a 	mov	r17,r4
   8ad38:	380d883a 	mov	r6,r7
   8ad3c:	1009883a 	mov	r4,r2
   8ad40:	dfc00215 	stw	ra,8(sp)
   8ad44:	80000015 	stw	zero,0(r16)
   8ad48:	008ead80 	call	8ead8 <read>
   8ad4c:	00ffffc4 	movi	r3,-1
   8ad50:	10c00526 	beq	r2,r3,8ad68 <_read_r+0x50>
   8ad54:	dfc00217 	ldw	ra,8(sp)
   8ad58:	dc400117 	ldw	r17,4(sp)
   8ad5c:	dc000017 	ldw	r16,0(sp)
   8ad60:	dec00304 	addi	sp,sp,12
   8ad64:	f800283a 	ret
   8ad68:	80c00017 	ldw	r3,0(r16)
   8ad6c:	183ff926 	beq	r3,zero,8ad54 <_gp+0xfff79170>
   8ad70:	88c00015 	stw	r3,0(r17)
   8ad74:	003ff706 	br	8ad54 <_gp+0xfff79170>

0008ad78 <__swbuf_r>:
   8ad78:	defffb04 	addi	sp,sp,-20
   8ad7c:	dcc00315 	stw	r19,12(sp)
   8ad80:	dc800215 	stw	r18,8(sp)
   8ad84:	dc000015 	stw	r16,0(sp)
   8ad88:	dfc00415 	stw	ra,16(sp)
   8ad8c:	dc400115 	stw	r17,4(sp)
   8ad90:	2025883a 	mov	r18,r4
   8ad94:	2827883a 	mov	r19,r5
   8ad98:	3021883a 	mov	r16,r6
   8ad9c:	20000226 	beq	r4,zero,8ada8 <__swbuf_r+0x30>
   8ada0:	20800e17 	ldw	r2,56(r4)
   8ada4:	10004226 	beq	r2,zero,8aeb0 <__swbuf_r+0x138>
   8ada8:	80800617 	ldw	r2,24(r16)
   8adac:	8100030b 	ldhu	r4,12(r16)
   8adb0:	80800215 	stw	r2,8(r16)
   8adb4:	2080020c 	andi	r2,r4,8
   8adb8:	10003626 	beq	r2,zero,8ae94 <__swbuf_r+0x11c>
   8adbc:	80c00417 	ldw	r3,16(r16)
   8adc0:	18003426 	beq	r3,zero,8ae94 <__swbuf_r+0x11c>
   8adc4:	2088000c 	andi	r2,r4,8192
   8adc8:	9c403fcc 	andi	r17,r19,255
   8adcc:	10001a26 	beq	r2,zero,8ae38 <__swbuf_r+0xc0>
   8add0:	80800017 	ldw	r2,0(r16)
   8add4:	81000517 	ldw	r4,20(r16)
   8add8:	10c7c83a 	sub	r3,r2,r3
   8addc:	1900200e 	bge	r3,r4,8ae60 <__swbuf_r+0xe8>
   8ade0:	18c00044 	addi	r3,r3,1
   8ade4:	81000217 	ldw	r4,8(r16)
   8ade8:	11400044 	addi	r5,r2,1
   8adec:	81400015 	stw	r5,0(r16)
   8adf0:	213fffc4 	addi	r4,r4,-1
   8adf4:	81000215 	stw	r4,8(r16)
   8adf8:	14c00005 	stb	r19,0(r2)
   8adfc:	80800517 	ldw	r2,20(r16)
   8ae00:	10c01e26 	beq	r2,r3,8ae7c <__swbuf_r+0x104>
   8ae04:	8080030b 	ldhu	r2,12(r16)
   8ae08:	1080004c 	andi	r2,r2,1
   8ae0c:	10000226 	beq	r2,zero,8ae18 <__swbuf_r+0xa0>
   8ae10:	00800284 	movi	r2,10
   8ae14:	88801926 	beq	r17,r2,8ae7c <__swbuf_r+0x104>
   8ae18:	8805883a 	mov	r2,r17
   8ae1c:	dfc00417 	ldw	ra,16(sp)
   8ae20:	dcc00317 	ldw	r19,12(sp)
   8ae24:	dc800217 	ldw	r18,8(sp)
   8ae28:	dc400117 	ldw	r17,4(sp)
   8ae2c:	dc000017 	ldw	r16,0(sp)
   8ae30:	dec00504 	addi	sp,sp,20
   8ae34:	f800283a 	ret
   8ae38:	81401917 	ldw	r5,100(r16)
   8ae3c:	00b7ffc4 	movi	r2,-8193
   8ae40:	21080014 	ori	r4,r4,8192
   8ae44:	2884703a 	and	r2,r5,r2
   8ae48:	80801915 	stw	r2,100(r16)
   8ae4c:	80800017 	ldw	r2,0(r16)
   8ae50:	8100030d 	sth	r4,12(r16)
   8ae54:	81000517 	ldw	r4,20(r16)
   8ae58:	10c7c83a 	sub	r3,r2,r3
   8ae5c:	193fe016 	blt	r3,r4,8ade0 <_gp+0xfff791fc>
   8ae60:	800b883a 	mov	r5,r16
   8ae64:	9009883a 	mov	r4,r18
   8ae68:	00859640 	call	85964 <_fflush_r>
   8ae6c:	1000071e 	bne	r2,zero,8ae8c <__swbuf_r+0x114>
   8ae70:	80800017 	ldw	r2,0(r16)
   8ae74:	00c00044 	movi	r3,1
   8ae78:	003fda06 	br	8ade4 <_gp+0xfff79200>
   8ae7c:	800b883a 	mov	r5,r16
   8ae80:	9009883a 	mov	r4,r18
   8ae84:	00859640 	call	85964 <_fflush_r>
   8ae88:	103fe326 	beq	r2,zero,8ae18 <_gp+0xfff79234>
   8ae8c:	00bfffc4 	movi	r2,-1
   8ae90:	003fe206 	br	8ae1c <_gp+0xfff79238>
   8ae94:	800b883a 	mov	r5,r16
   8ae98:	9009883a 	mov	r4,r18
   8ae9c:	0083d440 	call	83d44 <__swsetup_r>
   8aea0:	103ffa1e 	bne	r2,zero,8ae8c <_gp+0xfff792a8>
   8aea4:	8100030b 	ldhu	r4,12(r16)
   8aea8:	80c00417 	ldw	r3,16(r16)
   8aeac:	003fc506 	br	8adc4 <_gp+0xfff791e0>
   8aeb0:	0085d500 	call	85d50 <__sinit>
   8aeb4:	003fbc06 	br	8ada8 <_gp+0xfff791c4>

0008aeb8 <__swbuf>:
   8aeb8:	00800474 	movhi	r2,17
   8aebc:	10a6fa04 	addi	r2,r2,-25624
   8aec0:	280d883a 	mov	r6,r5
   8aec4:	200b883a 	mov	r5,r4
   8aec8:	11000017 	ldw	r4,0(r2)
   8aecc:	008ad781 	jmpi	8ad78 <__swbuf_r>

0008aed0 <_wcrtomb_r>:
   8aed0:	defff604 	addi	sp,sp,-40
   8aed4:	00800474 	movhi	r2,17
   8aed8:	dc800815 	stw	r18,32(sp)
   8aedc:	dc400715 	stw	r17,28(sp)
   8aee0:	dc000615 	stw	r16,24(sp)
   8aee4:	10a6fe04 	addi	r2,r2,-25608
   8aee8:	dfc00915 	stw	ra,36(sp)
   8aeec:	2021883a 	mov	r16,r4
   8aef0:	3823883a 	mov	r17,r7
   8aef4:	14800017 	ldw	r18,0(r2)
   8aef8:	28001426 	beq	r5,zero,8af4c <_wcrtomb_r+0x7c>
   8aefc:	d9400415 	stw	r5,16(sp)
   8af00:	d9800515 	stw	r6,20(sp)
   8af04:	00868a00 	call	868a0 <__locale_charset>
   8af08:	d9800517 	ldw	r6,20(sp)
   8af0c:	d9400417 	ldw	r5,16(sp)
   8af10:	100f883a 	mov	r7,r2
   8af14:	dc400015 	stw	r17,0(sp)
   8af18:	8009883a 	mov	r4,r16
   8af1c:	903ee83a 	callr	r18
   8af20:	00ffffc4 	movi	r3,-1
   8af24:	10c0031e 	bne	r2,r3,8af34 <_wcrtomb_r+0x64>
   8af28:	88000015 	stw	zero,0(r17)
   8af2c:	00c02284 	movi	r3,138
   8af30:	80c00015 	stw	r3,0(r16)
   8af34:	dfc00917 	ldw	ra,36(sp)
   8af38:	dc800817 	ldw	r18,32(sp)
   8af3c:	dc400717 	ldw	r17,28(sp)
   8af40:	dc000617 	ldw	r16,24(sp)
   8af44:	dec00a04 	addi	sp,sp,40
   8af48:	f800283a 	ret
   8af4c:	00868a00 	call	868a0 <__locale_charset>
   8af50:	100f883a 	mov	r7,r2
   8af54:	dc400015 	stw	r17,0(sp)
   8af58:	000d883a 	mov	r6,zero
   8af5c:	d9400104 	addi	r5,sp,4
   8af60:	8009883a 	mov	r4,r16
   8af64:	903ee83a 	callr	r18
   8af68:	003fed06 	br	8af20 <_gp+0xfff7933c>

0008af6c <wcrtomb>:
   8af6c:	defff604 	addi	sp,sp,-40
   8af70:	00800474 	movhi	r2,17
   8af74:	dc800615 	stw	r18,24(sp)
   8af78:	dc400515 	stw	r17,20(sp)
   8af7c:	10a6fa04 	addi	r2,r2,-25624
   8af80:	dfc00915 	stw	ra,36(sp)
   8af84:	dd000815 	stw	r20,32(sp)
   8af88:	dcc00715 	stw	r19,28(sp)
   8af8c:	dc000415 	stw	r16,16(sp)
   8af90:	3025883a 	mov	r18,r6
   8af94:	14400017 	ldw	r17,0(r2)
   8af98:	20001926 	beq	r4,zero,8b000 <wcrtomb+0x94>
   8af9c:	00800474 	movhi	r2,17
   8afa0:	10a6fe04 	addi	r2,r2,-25608
   8afa4:	15000017 	ldw	r20,0(r2)
   8afa8:	2021883a 	mov	r16,r4
   8afac:	2827883a 	mov	r19,r5
   8afb0:	00868a00 	call	868a0 <__locale_charset>
   8afb4:	100f883a 	mov	r7,r2
   8afb8:	dc800015 	stw	r18,0(sp)
   8afbc:	980d883a 	mov	r6,r19
   8afc0:	800b883a 	mov	r5,r16
   8afc4:	8809883a 	mov	r4,r17
   8afc8:	a03ee83a 	callr	r20
   8afcc:	00ffffc4 	movi	r3,-1
   8afd0:	10c0031e 	bne	r2,r3,8afe0 <wcrtomb+0x74>
   8afd4:	90000015 	stw	zero,0(r18)
   8afd8:	00c02284 	movi	r3,138
   8afdc:	88c00015 	stw	r3,0(r17)
   8afe0:	dfc00917 	ldw	ra,36(sp)
   8afe4:	dd000817 	ldw	r20,32(sp)
   8afe8:	dcc00717 	ldw	r19,28(sp)
   8afec:	dc800617 	ldw	r18,24(sp)
   8aff0:	dc400517 	ldw	r17,20(sp)
   8aff4:	dc000417 	ldw	r16,16(sp)
   8aff8:	dec00a04 	addi	sp,sp,40
   8affc:	f800283a 	ret
   8b000:	00800474 	movhi	r2,17
   8b004:	10a6fe04 	addi	r2,r2,-25608
   8b008:	14000017 	ldw	r16,0(r2)
   8b00c:	00868a00 	call	868a0 <__locale_charset>
   8b010:	100f883a 	mov	r7,r2
   8b014:	dc800015 	stw	r18,0(sp)
   8b018:	000d883a 	mov	r6,zero
   8b01c:	d9400104 	addi	r5,sp,4
   8b020:	8809883a 	mov	r4,r17
   8b024:	803ee83a 	callr	r16
   8b028:	003fe806 	br	8afcc <_gp+0xfff793e8>

0008b02c <__ascii_wctomb>:
   8b02c:	28000526 	beq	r5,zero,8b044 <__ascii_wctomb+0x18>
   8b030:	00803fc4 	movi	r2,255
   8b034:	11800536 	bltu	r2,r6,8b04c <__ascii_wctomb+0x20>
   8b038:	29800005 	stb	r6,0(r5)
   8b03c:	00800044 	movi	r2,1
   8b040:	f800283a 	ret
   8b044:	0005883a 	mov	r2,zero
   8b048:	f800283a 	ret
   8b04c:	00802284 	movi	r2,138
   8b050:	20800015 	stw	r2,0(r4)
   8b054:	00bfffc4 	movi	r2,-1
   8b058:	f800283a 	ret

0008b05c <_wctomb_r>:
   8b05c:	00800474 	movhi	r2,17
   8b060:	defff904 	addi	sp,sp,-28
   8b064:	10a6fe04 	addi	r2,r2,-25608
   8b068:	dfc00615 	stw	ra,24(sp)
   8b06c:	dc400515 	stw	r17,20(sp)
   8b070:	dc000415 	stw	r16,16(sp)
   8b074:	3823883a 	mov	r17,r7
   8b078:	14000017 	ldw	r16,0(r2)
   8b07c:	d9000115 	stw	r4,4(sp)
   8b080:	d9400215 	stw	r5,8(sp)
   8b084:	d9800315 	stw	r6,12(sp)
   8b088:	00868a00 	call	868a0 <__locale_charset>
   8b08c:	d9800317 	ldw	r6,12(sp)
   8b090:	d9400217 	ldw	r5,8(sp)
   8b094:	d9000117 	ldw	r4,4(sp)
   8b098:	100f883a 	mov	r7,r2
   8b09c:	dc400015 	stw	r17,0(sp)
   8b0a0:	803ee83a 	callr	r16
   8b0a4:	dfc00617 	ldw	ra,24(sp)
   8b0a8:	dc400517 	ldw	r17,20(sp)
   8b0ac:	dc000417 	ldw	r16,16(sp)
   8b0b0:	dec00704 	addi	sp,sp,28
   8b0b4:	f800283a 	ret

0008b0b8 <__udivdi3>:
   8b0b8:	defff404 	addi	sp,sp,-48
   8b0bc:	dcc00515 	stw	r19,20(sp)
   8b0c0:	dc000215 	stw	r16,8(sp)
   8b0c4:	dfc00b15 	stw	ra,44(sp)
   8b0c8:	df000a15 	stw	fp,40(sp)
   8b0cc:	ddc00915 	stw	r23,36(sp)
   8b0d0:	dd800815 	stw	r22,32(sp)
   8b0d4:	dd400715 	stw	r21,28(sp)
   8b0d8:	dd000615 	stw	r20,24(sp)
   8b0dc:	dc800415 	stw	r18,16(sp)
   8b0e0:	dc400315 	stw	r17,12(sp)
   8b0e4:	2027883a 	mov	r19,r4
   8b0e8:	2821883a 	mov	r16,r5
   8b0ec:	3800461e 	bne	r7,zero,8b208 <__udivdi3+0x150>
   8b0f0:	3023883a 	mov	r17,r6
   8b0f4:	2025883a 	mov	r18,r4
   8b0f8:	2980572e 	bgeu	r5,r6,8b258 <__udivdi3+0x1a0>
   8b0fc:	00bfffd4 	movui	r2,65535
   8b100:	282d883a 	mov	r22,r5
   8b104:	1180b236 	bltu	r2,r6,8b3d0 <__udivdi3+0x318>
   8b108:	00803fc4 	movi	r2,255
   8b10c:	1185803a 	cmpltu	r2,r2,r6
   8b110:	100490fa 	slli	r2,r2,3
   8b114:	3086d83a 	srl	r3,r6,r2
   8b118:	01000274 	movhi	r4,9
   8b11c:	210ff004 	addi	r4,r4,16320
   8b120:	20c7883a 	add	r3,r4,r3
   8b124:	18c00003 	ldbu	r3,0(r3)
   8b128:	1885883a 	add	r2,r3,r2
   8b12c:	00c00804 	movi	r3,32
   8b130:	1887c83a 	sub	r3,r3,r2
   8b134:	18000526 	beq	r3,zero,8b14c <__udivdi3+0x94>
   8b138:	80e0983a 	sll	r16,r16,r3
   8b13c:	9884d83a 	srl	r2,r19,r2
   8b140:	30e2983a 	sll	r17,r6,r3
   8b144:	98e4983a 	sll	r18,r19,r3
   8b148:	142cb03a 	or	r22,r2,r16
   8b14c:	882ad43a 	srli	r21,r17,16
   8b150:	b009883a 	mov	r4,r22
   8b154:	8d3fffcc 	andi	r20,r17,65535
   8b158:	a80b883a 	mov	r5,r21
   8b15c:	0080ba40 	call	80ba4 <__umodsi3>
   8b160:	b009883a 	mov	r4,r22
   8b164:	a80b883a 	mov	r5,r21
   8b168:	1027883a 	mov	r19,r2
   8b16c:	0080b400 	call	80b40 <__udivsi3>
   8b170:	100b883a 	mov	r5,r2
   8b174:	a009883a 	mov	r4,r20
   8b178:	102d883a 	mov	r22,r2
   8b17c:	00817900 	call	81790 <__mulsi3>
   8b180:	9826943a 	slli	r19,r19,16
   8b184:	9006d43a 	srli	r3,r18,16
   8b188:	1cc6b03a 	or	r3,r3,r19
   8b18c:	1880052e 	bgeu	r3,r2,8b1a4 <__udivdi3+0xec>
   8b190:	1c47883a 	add	r3,r3,r17
   8b194:	b13fffc4 	addi	r4,r22,-1
   8b198:	1c400136 	bltu	r3,r17,8b1a0 <__udivdi3+0xe8>
   8b19c:	18814236 	bltu	r3,r2,8b6a8 <__udivdi3+0x5f0>
   8b1a0:	202d883a 	mov	r22,r4
   8b1a4:	18a1c83a 	sub	r16,r3,r2
   8b1a8:	8009883a 	mov	r4,r16
   8b1ac:	a80b883a 	mov	r5,r21
   8b1b0:	0080ba40 	call	80ba4 <__umodsi3>
   8b1b4:	1027883a 	mov	r19,r2
   8b1b8:	8009883a 	mov	r4,r16
   8b1bc:	a80b883a 	mov	r5,r21
   8b1c0:	9826943a 	slli	r19,r19,16
   8b1c4:	0080b400 	call	80b40 <__udivsi3>
   8b1c8:	100b883a 	mov	r5,r2
   8b1cc:	a009883a 	mov	r4,r20
   8b1d0:	94bfffcc 	andi	r18,r18,65535
   8b1d4:	1021883a 	mov	r16,r2
   8b1d8:	94e4b03a 	or	r18,r18,r19
   8b1dc:	00817900 	call	81790 <__mulsi3>
   8b1e0:	9080052e 	bgeu	r18,r2,8b1f8 <__udivdi3+0x140>
   8b1e4:	8ca5883a 	add	r18,r17,r18
   8b1e8:	80ffffc4 	addi	r3,r16,-1
   8b1ec:	94410c36 	bltu	r18,r17,8b620 <__udivdi3+0x568>
   8b1f0:	90810b2e 	bgeu	r18,r2,8b620 <__udivdi3+0x568>
   8b1f4:	843fff84 	addi	r16,r16,-2
   8b1f8:	b004943a 	slli	r2,r22,16
   8b1fc:	0007883a 	mov	r3,zero
   8b200:	1404b03a 	or	r2,r2,r16
   8b204:	00005e06 	br	8b380 <__udivdi3+0x2c8>
   8b208:	29c05b36 	bltu	r5,r7,8b378 <__udivdi3+0x2c0>
   8b20c:	00bfffd4 	movui	r2,65535
   8b210:	11c0672e 	bgeu	r2,r7,8b3b0 <__udivdi3+0x2f8>
   8b214:	00804034 	movhi	r2,256
   8b218:	10bfffc4 	addi	r2,r2,-1
   8b21c:	11c10a36 	bltu	r2,r7,8b648 <__udivdi3+0x590>
   8b220:	00800404 	movi	r2,16
   8b224:	3886d83a 	srl	r3,r7,r2
   8b228:	01000274 	movhi	r4,9
   8b22c:	210ff004 	addi	r4,r4,16320
   8b230:	20c7883a 	add	r3,r4,r3
   8b234:	18c00003 	ldbu	r3,0(r3)
   8b238:	05c00804 	movi	r23,32
   8b23c:	1885883a 	add	r2,r3,r2
   8b240:	b8afc83a 	sub	r23,r23,r2
   8b244:	b800671e 	bne	r23,zero,8b3e4 <__udivdi3+0x32c>
   8b248:	3c010536 	bltu	r7,r16,8b660 <__udivdi3+0x5a8>
   8b24c:	9985403a 	cmpgeu	r2,r19,r6
   8b250:	0007883a 	mov	r3,zero
   8b254:	00004a06 	br	8b380 <__udivdi3+0x2c8>
   8b258:	3000041e 	bne	r6,zero,8b26c <__udivdi3+0x1b4>
   8b25c:	000b883a 	mov	r5,zero
   8b260:	01000044 	movi	r4,1
   8b264:	0080b400 	call	80b40 <__udivsi3>
   8b268:	1023883a 	mov	r17,r2
   8b26c:	00bfffd4 	movui	r2,65535
   8b270:	1440532e 	bgeu	r2,r17,8b3c0 <__udivdi3+0x308>
   8b274:	00804034 	movhi	r2,256
   8b278:	10bfffc4 	addi	r2,r2,-1
   8b27c:	1440f436 	bltu	r2,r17,8b650 <__udivdi3+0x598>
   8b280:	00800404 	movi	r2,16
   8b284:	8886d83a 	srl	r3,r17,r2
   8b288:	01000274 	movhi	r4,9
   8b28c:	210ff004 	addi	r4,r4,16320
   8b290:	20c7883a 	add	r3,r4,r3
   8b294:	18c00003 	ldbu	r3,0(r3)
   8b298:	1885883a 	add	r2,r3,r2
   8b29c:	00c00804 	movi	r3,32
   8b2a0:	1887c83a 	sub	r3,r3,r2
   8b2a4:	1800a51e 	bne	r3,zero,8b53c <__udivdi3+0x484>
   8b2a8:	882ad43a 	srli	r21,r17,16
   8b2ac:	8461c83a 	sub	r16,r16,r17
   8b2b0:	8d3fffcc 	andi	r20,r17,65535
   8b2b4:	00c00044 	movi	r3,1
   8b2b8:	a80b883a 	mov	r5,r21
   8b2bc:	8009883a 	mov	r4,r16
   8b2c0:	d8c00115 	stw	r3,4(sp)
   8b2c4:	0080ba40 	call	80ba4 <__umodsi3>
   8b2c8:	a80b883a 	mov	r5,r21
   8b2cc:	8009883a 	mov	r4,r16
   8b2d0:	1027883a 	mov	r19,r2
   8b2d4:	0080b400 	call	80b40 <__udivsi3>
   8b2d8:	a00b883a 	mov	r5,r20
   8b2dc:	1009883a 	mov	r4,r2
   8b2e0:	102d883a 	mov	r22,r2
   8b2e4:	00817900 	call	81790 <__mulsi3>
   8b2e8:	9826943a 	slli	r19,r19,16
   8b2ec:	900ed43a 	srli	r7,r18,16
   8b2f0:	d8c00117 	ldw	r3,4(sp)
   8b2f4:	3cceb03a 	or	r7,r7,r19
   8b2f8:	3880052e 	bgeu	r7,r2,8b310 <__udivdi3+0x258>
   8b2fc:	3c4f883a 	add	r7,r7,r17
   8b300:	b13fffc4 	addi	r4,r22,-1
   8b304:	3c400136 	bltu	r7,r17,8b30c <__udivdi3+0x254>
   8b308:	3880e436 	bltu	r7,r2,8b69c <__udivdi3+0x5e4>
   8b30c:	202d883a 	mov	r22,r4
   8b310:	38a1c83a 	sub	r16,r7,r2
   8b314:	8009883a 	mov	r4,r16
   8b318:	a80b883a 	mov	r5,r21
   8b31c:	d8c00115 	stw	r3,4(sp)
   8b320:	0080ba40 	call	80ba4 <__umodsi3>
   8b324:	1027883a 	mov	r19,r2
   8b328:	8009883a 	mov	r4,r16
   8b32c:	a80b883a 	mov	r5,r21
   8b330:	9826943a 	slli	r19,r19,16
   8b334:	0080b400 	call	80b40 <__udivsi3>
   8b338:	a00b883a 	mov	r5,r20
   8b33c:	1009883a 	mov	r4,r2
   8b340:	94bfffcc 	andi	r18,r18,65535
   8b344:	1021883a 	mov	r16,r2
   8b348:	94e4b03a 	or	r18,r18,r19
   8b34c:	00817900 	call	81790 <__mulsi3>
   8b350:	d8c00117 	ldw	r3,4(sp)
   8b354:	9080052e 	bgeu	r18,r2,8b36c <__udivdi3+0x2b4>
   8b358:	8ca5883a 	add	r18,r17,r18
   8b35c:	813fffc4 	addi	r4,r16,-1
   8b360:	9440ad36 	bltu	r18,r17,8b618 <__udivdi3+0x560>
   8b364:	9080ac2e 	bgeu	r18,r2,8b618 <__udivdi3+0x560>
   8b368:	843fff84 	addi	r16,r16,-2
   8b36c:	b004943a 	slli	r2,r22,16
   8b370:	1404b03a 	or	r2,r2,r16
   8b374:	00000206 	br	8b380 <__udivdi3+0x2c8>
   8b378:	0007883a 	mov	r3,zero
   8b37c:	0005883a 	mov	r2,zero
   8b380:	dfc00b17 	ldw	ra,44(sp)
   8b384:	df000a17 	ldw	fp,40(sp)
   8b388:	ddc00917 	ldw	r23,36(sp)
   8b38c:	dd800817 	ldw	r22,32(sp)
   8b390:	dd400717 	ldw	r21,28(sp)
   8b394:	dd000617 	ldw	r20,24(sp)
   8b398:	dcc00517 	ldw	r19,20(sp)
   8b39c:	dc800417 	ldw	r18,16(sp)
   8b3a0:	dc400317 	ldw	r17,12(sp)
   8b3a4:	dc000217 	ldw	r16,8(sp)
   8b3a8:	dec00c04 	addi	sp,sp,48
   8b3ac:	f800283a 	ret
   8b3b0:	00803fc4 	movi	r2,255
   8b3b4:	11c5803a 	cmpltu	r2,r2,r7
   8b3b8:	100490fa 	slli	r2,r2,3
   8b3bc:	003f9906 	br	8b224 <_gp+0xfff79640>
   8b3c0:	00803fc4 	movi	r2,255
   8b3c4:	1445803a 	cmpltu	r2,r2,r17
   8b3c8:	100490fa 	slli	r2,r2,3
   8b3cc:	003fad06 	br	8b284 <_gp+0xfff796a0>
   8b3d0:	00804034 	movhi	r2,256
   8b3d4:	10bfffc4 	addi	r2,r2,-1
   8b3d8:	11809f36 	bltu	r2,r6,8b658 <__udivdi3+0x5a0>
   8b3dc:	00800404 	movi	r2,16
   8b3e0:	003f4c06 	br	8b114 <_gp+0xfff79530>
   8b3e4:	3dce983a 	sll	r7,r7,r23
   8b3e8:	30b8d83a 	srl	fp,r6,r2
   8b3ec:	80a2d83a 	srl	r17,r16,r2
   8b3f0:	35cc983a 	sll	r6,r6,r23
   8b3f4:	3f38b03a 	or	fp,r7,fp
   8b3f8:	e024d43a 	srli	r18,fp,16
   8b3fc:	9884d83a 	srl	r2,r19,r2
   8b400:	85e0983a 	sll	r16,r16,r23
   8b404:	8809883a 	mov	r4,r17
   8b408:	900b883a 	mov	r5,r18
   8b40c:	d9800015 	stw	r6,0(sp)
   8b410:	1420b03a 	or	r16,r2,r16
   8b414:	0080ba40 	call	80ba4 <__umodsi3>
   8b418:	900b883a 	mov	r5,r18
   8b41c:	8809883a 	mov	r4,r17
   8b420:	1029883a 	mov	r20,r2
   8b424:	e5bfffcc 	andi	r22,fp,65535
   8b428:	0080b400 	call	80b40 <__udivsi3>
   8b42c:	100b883a 	mov	r5,r2
   8b430:	b009883a 	mov	r4,r22
   8b434:	102b883a 	mov	r21,r2
   8b438:	00817900 	call	81790 <__mulsi3>
   8b43c:	a028943a 	slli	r20,r20,16
   8b440:	8006d43a 	srli	r3,r16,16
   8b444:	1d06b03a 	or	r3,r3,r20
   8b448:	1880042e 	bgeu	r3,r2,8b45c <__udivdi3+0x3a4>
   8b44c:	1f07883a 	add	r3,r3,fp
   8b450:	a93fffc4 	addi	r4,r21,-1
   8b454:	1f00892e 	bgeu	r3,fp,8b67c <__udivdi3+0x5c4>
   8b458:	202b883a 	mov	r21,r4
   8b45c:	18a3c83a 	sub	r17,r3,r2
   8b460:	8809883a 	mov	r4,r17
   8b464:	900b883a 	mov	r5,r18
   8b468:	0080ba40 	call	80ba4 <__umodsi3>
   8b46c:	1029883a 	mov	r20,r2
   8b470:	8809883a 	mov	r4,r17
   8b474:	900b883a 	mov	r5,r18
   8b478:	a028943a 	slli	r20,r20,16
   8b47c:	0080b400 	call	80b40 <__udivsi3>
   8b480:	100b883a 	mov	r5,r2
   8b484:	b009883a 	mov	r4,r22
   8b488:	843fffcc 	andi	r16,r16,65535
   8b48c:	1023883a 	mov	r17,r2
   8b490:	8520b03a 	or	r16,r16,r20
   8b494:	00817900 	call	81790 <__mulsi3>
   8b498:	8080042e 	bgeu	r16,r2,8b4ac <__udivdi3+0x3f4>
   8b49c:	8721883a 	add	r16,r16,fp
   8b4a0:	88ffffc4 	addi	r3,r17,-1
   8b4a4:	8700712e 	bgeu	r16,fp,8b66c <__udivdi3+0x5b4>
   8b4a8:	1823883a 	mov	r17,r3
   8b4ac:	a80e943a 	slli	r7,r21,16
   8b4b0:	d8c00017 	ldw	r3,0(sp)
   8b4b4:	80a1c83a 	sub	r16,r16,r2
   8b4b8:	3c64b03a 	or	r18,r7,r17
   8b4bc:	1d3fffcc 	andi	r20,r3,65535
   8b4c0:	9022d43a 	srli	r17,r18,16
   8b4c4:	95bfffcc 	andi	r22,r18,65535
   8b4c8:	a00b883a 	mov	r5,r20
   8b4cc:	b009883a 	mov	r4,r22
   8b4d0:	182ad43a 	srli	r21,r3,16
   8b4d4:	00817900 	call	81790 <__mulsi3>
   8b4d8:	a00b883a 	mov	r5,r20
   8b4dc:	8809883a 	mov	r4,r17
   8b4e0:	1039883a 	mov	fp,r2
   8b4e4:	00817900 	call	81790 <__mulsi3>
   8b4e8:	8809883a 	mov	r4,r17
   8b4ec:	a80b883a 	mov	r5,r21
   8b4f0:	1029883a 	mov	r20,r2
   8b4f4:	00817900 	call	81790 <__mulsi3>
   8b4f8:	a80b883a 	mov	r5,r21
   8b4fc:	b009883a 	mov	r4,r22
   8b500:	1023883a 	mov	r17,r2
   8b504:	00817900 	call	81790 <__mulsi3>
   8b508:	e006d43a 	srli	r3,fp,16
   8b50c:	1505883a 	add	r2,r2,r20
   8b510:	1887883a 	add	r3,r3,r2
   8b514:	1d00022e 	bgeu	r3,r20,8b520 <__udivdi3+0x468>
   8b518:	00800074 	movhi	r2,1
   8b51c:	88a3883a 	add	r17,r17,r2
   8b520:	1804d43a 	srli	r2,r3,16
   8b524:	1463883a 	add	r17,r2,r17
   8b528:	84404436 	bltu	r16,r17,8b63c <__udivdi3+0x584>
   8b52c:	84403e26 	beq	r16,r17,8b628 <__udivdi3+0x570>
   8b530:	9005883a 	mov	r2,r18
   8b534:	0007883a 	mov	r3,zero
   8b538:	003f9106 	br	8b380 <_gp+0xfff7979c>
   8b53c:	88e2983a 	sll	r17,r17,r3
   8b540:	80aed83a 	srl	r23,r16,r2
   8b544:	80e0983a 	sll	r16,r16,r3
   8b548:	882ad43a 	srli	r21,r17,16
   8b54c:	9884d83a 	srl	r2,r19,r2
   8b550:	b809883a 	mov	r4,r23
   8b554:	a80b883a 	mov	r5,r21
   8b558:	98e4983a 	sll	r18,r19,r3
   8b55c:	142cb03a 	or	r22,r2,r16
   8b560:	0080ba40 	call	80ba4 <__umodsi3>
   8b564:	b809883a 	mov	r4,r23
   8b568:	a80b883a 	mov	r5,r21
   8b56c:	1027883a 	mov	r19,r2
   8b570:	8d3fffcc 	andi	r20,r17,65535
   8b574:	0080b400 	call	80b40 <__udivsi3>
   8b578:	a009883a 	mov	r4,r20
   8b57c:	100b883a 	mov	r5,r2
   8b580:	102f883a 	mov	r23,r2
   8b584:	00817900 	call	81790 <__mulsi3>
   8b588:	9826943a 	slli	r19,r19,16
   8b58c:	b008d43a 	srli	r4,r22,16
   8b590:	24c8b03a 	or	r4,r4,r19
   8b594:	2080062e 	bgeu	r4,r2,8b5b0 <__udivdi3+0x4f8>
   8b598:	2449883a 	add	r4,r4,r17
   8b59c:	b8ffffc4 	addi	r3,r23,-1
   8b5a0:	24403c36 	bltu	r4,r17,8b694 <__udivdi3+0x5dc>
   8b5a4:	20803b2e 	bgeu	r4,r2,8b694 <__udivdi3+0x5dc>
   8b5a8:	bdffff84 	addi	r23,r23,-2
   8b5ac:	2449883a 	add	r4,r4,r17
   8b5b0:	20a1c83a 	sub	r16,r4,r2
   8b5b4:	a80b883a 	mov	r5,r21
   8b5b8:	8009883a 	mov	r4,r16
   8b5bc:	0080ba40 	call	80ba4 <__umodsi3>
   8b5c0:	a80b883a 	mov	r5,r21
   8b5c4:	8009883a 	mov	r4,r16
   8b5c8:	1027883a 	mov	r19,r2
   8b5cc:	0080b400 	call	80b40 <__udivsi3>
   8b5d0:	a009883a 	mov	r4,r20
   8b5d4:	100b883a 	mov	r5,r2
   8b5d8:	9826943a 	slli	r19,r19,16
   8b5dc:	1039883a 	mov	fp,r2
   8b5e0:	00817900 	call	81790 <__mulsi3>
   8b5e4:	b13fffcc 	andi	r4,r22,65535
   8b5e8:	24c8b03a 	or	r4,r4,r19
   8b5ec:	2080062e 	bgeu	r4,r2,8b608 <__udivdi3+0x550>
   8b5f0:	2449883a 	add	r4,r4,r17
   8b5f4:	e0ffffc4 	addi	r3,fp,-1
   8b5f8:	24402436 	bltu	r4,r17,8b68c <__udivdi3+0x5d4>
   8b5fc:	2080232e 	bgeu	r4,r2,8b68c <__udivdi3+0x5d4>
   8b600:	e73fff84 	addi	fp,fp,-2
   8b604:	2449883a 	add	r4,r4,r17
   8b608:	b82e943a 	slli	r23,r23,16
   8b60c:	20a1c83a 	sub	r16,r4,r2
   8b610:	bf06b03a 	or	r3,r23,fp
   8b614:	003f2806 	br	8b2b8 <_gp+0xfff796d4>
   8b618:	2021883a 	mov	r16,r4
   8b61c:	003f5306 	br	8b36c <_gp+0xfff79788>
   8b620:	1821883a 	mov	r16,r3
   8b624:	003ef406 	br	8b1f8 <_gp+0xfff79614>
   8b628:	1806943a 	slli	r3,r3,16
   8b62c:	9de6983a 	sll	r19,r19,r23
   8b630:	e73fffcc 	andi	fp,fp,65535
   8b634:	1f07883a 	add	r3,r3,fp
   8b638:	98ffbd2e 	bgeu	r19,r3,8b530 <_gp+0xfff7994c>
   8b63c:	90bfffc4 	addi	r2,r18,-1
   8b640:	0007883a 	mov	r3,zero
   8b644:	003f4e06 	br	8b380 <_gp+0xfff7979c>
   8b648:	00800604 	movi	r2,24
   8b64c:	003ef506 	br	8b224 <_gp+0xfff79640>
   8b650:	00800604 	movi	r2,24
   8b654:	003f0b06 	br	8b284 <_gp+0xfff796a0>
   8b658:	00800604 	movi	r2,24
   8b65c:	003ead06 	br	8b114 <_gp+0xfff79530>
   8b660:	0007883a 	mov	r3,zero
   8b664:	00800044 	movi	r2,1
   8b668:	003f4506 	br	8b380 <_gp+0xfff7979c>
   8b66c:	80bf8e2e 	bgeu	r16,r2,8b4a8 <_gp+0xfff798c4>
   8b670:	8c7fff84 	addi	r17,r17,-2
   8b674:	8721883a 	add	r16,r16,fp
   8b678:	003f8c06 	br	8b4ac <_gp+0xfff798c8>
   8b67c:	18bf762e 	bgeu	r3,r2,8b458 <_gp+0xfff79874>
   8b680:	ad7fff84 	addi	r21,r21,-2
   8b684:	1f07883a 	add	r3,r3,fp
   8b688:	003f7406 	br	8b45c <_gp+0xfff79878>
   8b68c:	1839883a 	mov	fp,r3
   8b690:	003fdd06 	br	8b608 <_gp+0xfff79a24>
   8b694:	182f883a 	mov	r23,r3
   8b698:	003fc506 	br	8b5b0 <_gp+0xfff799cc>
   8b69c:	b5bfff84 	addi	r22,r22,-2
   8b6a0:	3c4f883a 	add	r7,r7,r17
   8b6a4:	003f1a06 	br	8b310 <_gp+0xfff7972c>
   8b6a8:	b5bfff84 	addi	r22,r22,-2
   8b6ac:	1c47883a 	add	r3,r3,r17
   8b6b0:	003ebc06 	br	8b1a4 <_gp+0xfff795c0>

0008b6b4 <__umoddi3>:
   8b6b4:	defff304 	addi	sp,sp,-52
   8b6b8:	df000b15 	stw	fp,44(sp)
   8b6bc:	dc400415 	stw	r17,16(sp)
   8b6c0:	dc000315 	stw	r16,12(sp)
   8b6c4:	dfc00c15 	stw	ra,48(sp)
   8b6c8:	ddc00a15 	stw	r23,40(sp)
   8b6cc:	dd800915 	stw	r22,36(sp)
   8b6d0:	dd400815 	stw	r21,32(sp)
   8b6d4:	dd000715 	stw	r20,28(sp)
   8b6d8:	dcc00615 	stw	r19,24(sp)
   8b6dc:	dc800515 	stw	r18,20(sp)
   8b6e0:	2021883a 	mov	r16,r4
   8b6e4:	2823883a 	mov	r17,r5
   8b6e8:	2839883a 	mov	fp,r5
   8b6ec:	3800401e 	bne	r7,zero,8b7f0 <__umoddi3+0x13c>
   8b6f0:	3027883a 	mov	r19,r6
   8b6f4:	2029883a 	mov	r20,r4
   8b6f8:	2980552e 	bgeu	r5,r6,8b850 <__umoddi3+0x19c>
   8b6fc:	00bfffd4 	movui	r2,65535
   8b700:	1180a236 	bltu	r2,r6,8b98c <__umoddi3+0x2d8>
   8b704:	01003fc4 	movi	r4,255
   8b708:	2189803a 	cmpltu	r4,r4,r6
   8b70c:	200890fa 	slli	r4,r4,3
   8b710:	3104d83a 	srl	r2,r6,r4
   8b714:	00c00274 	movhi	r3,9
   8b718:	18cff004 	addi	r3,r3,16320
   8b71c:	1885883a 	add	r2,r3,r2
   8b720:	10c00003 	ldbu	r3,0(r2)
   8b724:	00800804 	movi	r2,32
   8b728:	1909883a 	add	r4,r3,r4
   8b72c:	1125c83a 	sub	r18,r2,r4
   8b730:	90000526 	beq	r18,zero,8b748 <__umoddi3+0x94>
   8b734:	8ca2983a 	sll	r17,r17,r18
   8b738:	8108d83a 	srl	r4,r16,r4
   8b73c:	34a6983a 	sll	r19,r6,r18
   8b740:	84a8983a 	sll	r20,r16,r18
   8b744:	2478b03a 	or	fp,r4,r17
   8b748:	982cd43a 	srli	r22,r19,16
   8b74c:	e009883a 	mov	r4,fp
   8b750:	9dffffcc 	andi	r23,r19,65535
   8b754:	b00b883a 	mov	r5,r22
   8b758:	0080ba40 	call	80ba4 <__umodsi3>
   8b75c:	b00b883a 	mov	r5,r22
   8b760:	e009883a 	mov	r4,fp
   8b764:	102b883a 	mov	r21,r2
   8b768:	0080b400 	call	80b40 <__udivsi3>
   8b76c:	100b883a 	mov	r5,r2
   8b770:	b809883a 	mov	r4,r23
   8b774:	00817900 	call	81790 <__mulsi3>
   8b778:	a82a943a 	slli	r21,r21,16
   8b77c:	a006d43a 	srli	r3,r20,16
   8b780:	1d46b03a 	or	r3,r3,r21
   8b784:	1880032e 	bgeu	r3,r2,8b794 <__umoddi3+0xe0>
   8b788:	1cc7883a 	add	r3,r3,r19
   8b78c:	1cc00136 	bltu	r3,r19,8b794 <__umoddi3+0xe0>
   8b790:	18813136 	bltu	r3,r2,8bc58 <__umoddi3+0x5a4>
   8b794:	18a1c83a 	sub	r16,r3,r2
   8b798:	b00b883a 	mov	r5,r22
   8b79c:	8009883a 	mov	r4,r16
   8b7a0:	0080ba40 	call	80ba4 <__umodsi3>
   8b7a4:	b00b883a 	mov	r5,r22
   8b7a8:	8009883a 	mov	r4,r16
   8b7ac:	1023883a 	mov	r17,r2
   8b7b0:	0080b400 	call	80b40 <__udivsi3>
   8b7b4:	100b883a 	mov	r5,r2
   8b7b8:	b809883a 	mov	r4,r23
   8b7bc:	8822943a 	slli	r17,r17,16
   8b7c0:	00817900 	call	81790 <__mulsi3>
   8b7c4:	a0ffffcc 	andi	r3,r20,65535
   8b7c8:	1c46b03a 	or	r3,r3,r17
   8b7cc:	1880042e 	bgeu	r3,r2,8b7e0 <__umoddi3+0x12c>
   8b7d0:	1cc7883a 	add	r3,r3,r19
   8b7d4:	1cc00236 	bltu	r3,r19,8b7e0 <__umoddi3+0x12c>
   8b7d8:	1880012e 	bgeu	r3,r2,8b7e0 <__umoddi3+0x12c>
   8b7dc:	1cc7883a 	add	r3,r3,r19
   8b7e0:	1885c83a 	sub	r2,r3,r2
   8b7e4:	1484d83a 	srl	r2,r2,r18
   8b7e8:	0007883a 	mov	r3,zero
   8b7ec:	00005306 	br	8b93c <__umoddi3+0x288>
   8b7f0:	29c05036 	bltu	r5,r7,8b934 <__umoddi3+0x280>
   8b7f4:	00bfffd4 	movui	r2,65535
   8b7f8:	11c05c2e 	bgeu	r2,r7,8b96c <__umoddi3+0x2b8>
   8b7fc:	00804034 	movhi	r2,256
   8b800:	10bfffc4 	addi	r2,r2,-1
   8b804:	11c10636 	bltu	r2,r7,8bc20 <__umoddi3+0x56c>
   8b808:	01000404 	movi	r4,16
   8b80c:	3904d83a 	srl	r2,r7,r4
   8b810:	00c00274 	movhi	r3,9
   8b814:	18cff004 	addi	r3,r3,16320
   8b818:	1885883a 	add	r2,r3,r2
   8b81c:	14c00003 	ldbu	r19,0(r2)
   8b820:	00c00804 	movi	r3,32
   8b824:	9927883a 	add	r19,r19,r4
   8b828:	1ce9c83a 	sub	r20,r3,r19
   8b82c:	a0005c1e 	bne	r20,zero,8b9a0 <__umoddi3+0x2ec>
   8b830:	3c400136 	bltu	r7,r17,8b838 <__umoddi3+0x184>
   8b834:	81810a36 	bltu	r16,r6,8bc60 <__umoddi3+0x5ac>
   8b838:	8185c83a 	sub	r2,r16,r6
   8b83c:	89e3c83a 	sub	r17,r17,r7
   8b840:	8089803a 	cmpltu	r4,r16,r2
   8b844:	8939c83a 	sub	fp,r17,r4
   8b848:	e007883a 	mov	r3,fp
   8b84c:	00003b06 	br	8b93c <__umoddi3+0x288>
   8b850:	3000041e 	bne	r6,zero,8b864 <__umoddi3+0x1b0>
   8b854:	000b883a 	mov	r5,zero
   8b858:	01000044 	movi	r4,1
   8b85c:	0080b400 	call	80b40 <__udivsi3>
   8b860:	1027883a 	mov	r19,r2
   8b864:	00bfffd4 	movui	r2,65535
   8b868:	14c0442e 	bgeu	r2,r19,8b97c <__umoddi3+0x2c8>
   8b86c:	00804034 	movhi	r2,256
   8b870:	10bfffc4 	addi	r2,r2,-1
   8b874:	14c0ec36 	bltu	r2,r19,8bc28 <__umoddi3+0x574>
   8b878:	00800404 	movi	r2,16
   8b87c:	9886d83a 	srl	r3,r19,r2
   8b880:	01000274 	movhi	r4,9
   8b884:	210ff004 	addi	r4,r4,16320
   8b888:	20c7883a 	add	r3,r4,r3
   8b88c:	18c00003 	ldbu	r3,0(r3)
   8b890:	1887883a 	add	r3,r3,r2
   8b894:	00800804 	movi	r2,32
   8b898:	10e5c83a 	sub	r18,r2,r3
   8b89c:	9000ab1e 	bne	r18,zero,8bb4c <__umoddi3+0x498>
   8b8a0:	982cd43a 	srli	r22,r19,16
   8b8a4:	8ce3c83a 	sub	r17,r17,r19
   8b8a8:	9dffffcc 	andi	r23,r19,65535
   8b8ac:	b00b883a 	mov	r5,r22
   8b8b0:	8809883a 	mov	r4,r17
   8b8b4:	0080ba40 	call	80ba4 <__umodsi3>
   8b8b8:	b00b883a 	mov	r5,r22
   8b8bc:	8809883a 	mov	r4,r17
   8b8c0:	102b883a 	mov	r21,r2
   8b8c4:	0080b400 	call	80b40 <__udivsi3>
   8b8c8:	b80b883a 	mov	r5,r23
   8b8cc:	1009883a 	mov	r4,r2
   8b8d0:	00817900 	call	81790 <__mulsi3>
   8b8d4:	a82a943a 	slli	r21,r21,16
   8b8d8:	a006d43a 	srli	r3,r20,16
   8b8dc:	1d46b03a 	or	r3,r3,r21
   8b8e0:	1880042e 	bgeu	r3,r2,8b8f4 <__umoddi3+0x240>
   8b8e4:	1cc7883a 	add	r3,r3,r19
   8b8e8:	1cc00236 	bltu	r3,r19,8b8f4 <__umoddi3+0x240>
   8b8ec:	1880012e 	bgeu	r3,r2,8b8f4 <__umoddi3+0x240>
   8b8f0:	1cc7883a 	add	r3,r3,r19
   8b8f4:	18a1c83a 	sub	r16,r3,r2
   8b8f8:	b00b883a 	mov	r5,r22
   8b8fc:	8009883a 	mov	r4,r16
   8b900:	0080ba40 	call	80ba4 <__umodsi3>
   8b904:	1023883a 	mov	r17,r2
   8b908:	b00b883a 	mov	r5,r22
   8b90c:	8009883a 	mov	r4,r16
   8b910:	0080b400 	call	80b40 <__udivsi3>
   8b914:	8822943a 	slli	r17,r17,16
   8b918:	b80b883a 	mov	r5,r23
   8b91c:	1009883a 	mov	r4,r2
   8b920:	00817900 	call	81790 <__mulsi3>
   8b924:	a53fffcc 	andi	r20,r20,65535
   8b928:	a446b03a 	or	r3,r20,r17
   8b92c:	18bfac2e 	bgeu	r3,r2,8b7e0 <_gp+0xfff79bfc>
   8b930:	003fa706 	br	8b7d0 <_gp+0xfff79bec>
   8b934:	2005883a 	mov	r2,r4
   8b938:	2807883a 	mov	r3,r5
   8b93c:	dfc00c17 	ldw	ra,48(sp)
   8b940:	df000b17 	ldw	fp,44(sp)
   8b944:	ddc00a17 	ldw	r23,40(sp)
   8b948:	dd800917 	ldw	r22,36(sp)
   8b94c:	dd400817 	ldw	r21,32(sp)
   8b950:	dd000717 	ldw	r20,28(sp)
   8b954:	dcc00617 	ldw	r19,24(sp)
   8b958:	dc800517 	ldw	r18,20(sp)
   8b95c:	dc400417 	ldw	r17,16(sp)
   8b960:	dc000317 	ldw	r16,12(sp)
   8b964:	dec00d04 	addi	sp,sp,52
   8b968:	f800283a 	ret
   8b96c:	04c03fc4 	movi	r19,255
   8b970:	99c9803a 	cmpltu	r4,r19,r7
   8b974:	200890fa 	slli	r4,r4,3
   8b978:	003fa406 	br	8b80c <_gp+0xfff79c28>
   8b97c:	00803fc4 	movi	r2,255
   8b980:	14c5803a 	cmpltu	r2,r2,r19
   8b984:	100490fa 	slli	r2,r2,3
   8b988:	003fbc06 	br	8b87c <_gp+0xfff79c98>
   8b98c:	00804034 	movhi	r2,256
   8b990:	10bfffc4 	addi	r2,r2,-1
   8b994:	1180a636 	bltu	r2,r6,8bc30 <__umoddi3+0x57c>
   8b998:	01000404 	movi	r4,16
   8b99c:	003f5c06 	br	8b710 <_gp+0xfff79b2c>
   8b9a0:	3d0e983a 	sll	r7,r7,r20
   8b9a4:	34ead83a 	srl	r21,r6,r19
   8b9a8:	8cc6d83a 	srl	r3,r17,r19
   8b9ac:	8d10983a 	sll	r8,r17,r20
   8b9b0:	3d6ab03a 	or	r21,r7,r21
   8b9b4:	a82cd43a 	srli	r22,r21,16
   8b9b8:	84e2d83a 	srl	r17,r16,r19
   8b9bc:	1809883a 	mov	r4,r3
   8b9c0:	b00b883a 	mov	r5,r22
   8b9c4:	8a22b03a 	or	r17,r17,r8
   8b9c8:	3524983a 	sll	r18,r6,r20
   8b9cc:	dc400015 	stw	r17,0(sp)
   8b9d0:	d8c00115 	stw	r3,4(sp)
   8b9d4:	0080ba40 	call	80ba4 <__umodsi3>
   8b9d8:	d8c00117 	ldw	r3,4(sp)
   8b9dc:	b00b883a 	mov	r5,r22
   8b9e0:	1039883a 	mov	fp,r2
   8b9e4:	1809883a 	mov	r4,r3
   8b9e8:	0080b400 	call	80b40 <__udivsi3>
   8b9ec:	adffffcc 	andi	r23,r21,65535
   8b9f0:	100b883a 	mov	r5,r2
   8b9f4:	b809883a 	mov	r4,r23
   8b9f8:	1023883a 	mov	r17,r2
   8b9fc:	00817900 	call	81790 <__mulsi3>
   8ba00:	d9400017 	ldw	r5,0(sp)
   8ba04:	e008943a 	slli	r4,fp,16
   8ba08:	8520983a 	sll	r16,r16,r20
   8ba0c:	2806d43a 	srli	r3,r5,16
   8ba10:	1906b03a 	or	r3,r3,r4
   8ba14:	1880042e 	bgeu	r3,r2,8ba28 <__umoddi3+0x374>
   8ba18:	1d47883a 	add	r3,r3,r21
   8ba1c:	893fffc4 	addi	r4,r17,-1
   8ba20:	1d40892e 	bgeu	r3,r21,8bc48 <__umoddi3+0x594>
   8ba24:	2023883a 	mov	r17,r4
   8ba28:	18b9c83a 	sub	fp,r3,r2
   8ba2c:	b00b883a 	mov	r5,r22
   8ba30:	e009883a 	mov	r4,fp
   8ba34:	0080ba40 	call	80ba4 <__umodsi3>
   8ba38:	b00b883a 	mov	r5,r22
   8ba3c:	e009883a 	mov	r4,fp
   8ba40:	d8800215 	stw	r2,8(sp)
   8ba44:	0080b400 	call	80b40 <__udivsi3>
   8ba48:	100b883a 	mov	r5,r2
   8ba4c:	b809883a 	mov	r4,r23
   8ba50:	102d883a 	mov	r22,r2
   8ba54:	00817900 	call	81790 <__mulsi3>
   8ba58:	d9800217 	ldw	r6,8(sp)
   8ba5c:	d8c00017 	ldw	r3,0(sp)
   8ba60:	300c943a 	slli	r6,r6,16
   8ba64:	1a3fffcc 	andi	r8,r3,65535
   8ba68:	4190b03a 	or	r8,r8,r6
   8ba6c:	4080042e 	bgeu	r8,r2,8ba80 <__umoddi3+0x3cc>
   8ba70:	4551883a 	add	r8,r8,r21
   8ba74:	b0ffffc4 	addi	r3,r22,-1
   8ba78:	45406f2e 	bgeu	r8,r21,8bc38 <__umoddi3+0x584>
   8ba7c:	182d883a 	mov	r22,r3
   8ba80:	880e943a 	slli	r7,r17,16
   8ba84:	9006d43a 	srli	r3,r18,16
   8ba88:	91bfffcc 	andi	r6,r18,65535
   8ba8c:	3dacb03a 	or	r22,r7,r22
   8ba90:	b02ed43a 	srli	r23,r22,16
   8ba94:	b5bfffcc 	andi	r22,r22,65535
   8ba98:	300b883a 	mov	r5,r6
   8ba9c:	b009883a 	mov	r4,r22
   8baa0:	40a3c83a 	sub	r17,r8,r2
   8baa4:	d8c00115 	stw	r3,4(sp)
   8baa8:	d9800215 	stw	r6,8(sp)
   8baac:	00817900 	call	81790 <__mulsi3>
   8bab0:	d9800217 	ldw	r6,8(sp)
   8bab4:	b809883a 	mov	r4,r23
   8bab8:	1039883a 	mov	fp,r2
   8babc:	300b883a 	mov	r5,r6
   8bac0:	00817900 	call	81790 <__mulsi3>
   8bac4:	d8c00117 	ldw	r3,4(sp)
   8bac8:	b809883a 	mov	r4,r23
   8bacc:	d8800215 	stw	r2,8(sp)
   8bad0:	180b883a 	mov	r5,r3
   8bad4:	00817900 	call	81790 <__mulsi3>
   8bad8:	d8c00117 	ldw	r3,4(sp)
   8badc:	b009883a 	mov	r4,r22
   8bae0:	102f883a 	mov	r23,r2
   8bae4:	180b883a 	mov	r5,r3
   8bae8:	00817900 	call	81790 <__mulsi3>
   8baec:	d9800217 	ldw	r6,8(sp)
   8baf0:	e006d43a 	srli	r3,fp,16
   8baf4:	1185883a 	add	r2,r2,r6
   8baf8:	1885883a 	add	r2,r3,r2
   8bafc:	1180022e 	bgeu	r2,r6,8bb08 <__umoddi3+0x454>
   8bb00:	00c00074 	movhi	r3,1
   8bb04:	b8ef883a 	add	r23,r23,r3
   8bb08:	1006d43a 	srli	r3,r2,16
   8bb0c:	1004943a 	slli	r2,r2,16
   8bb10:	e73fffcc 	andi	fp,fp,65535
   8bb14:	1dc7883a 	add	r3,r3,r23
   8bb18:	1739883a 	add	fp,r2,fp
   8bb1c:	88c03a36 	bltu	r17,r3,8bc08 <__umoddi3+0x554>
   8bb20:	88c05126 	beq	r17,r3,8bc68 <__umoddi3+0x5b4>
   8bb24:	88c9c83a 	sub	r4,r17,r3
   8bb28:	e00f883a 	mov	r7,fp
   8bb2c:	81cfc83a 	sub	r7,r16,r7
   8bb30:	81c7803a 	cmpltu	r3,r16,r7
   8bb34:	20c7c83a 	sub	r3,r4,r3
   8bb38:	1cc4983a 	sll	r2,r3,r19
   8bb3c:	3d0ed83a 	srl	r7,r7,r20
   8bb40:	1d06d83a 	srl	r3,r3,r20
   8bb44:	11c4b03a 	or	r2,r2,r7
   8bb48:	003f7c06 	br	8b93c <_gp+0xfff79d58>
   8bb4c:	9ca6983a 	sll	r19,r19,r18
   8bb50:	88f8d83a 	srl	fp,r17,r3
   8bb54:	80c4d83a 	srl	r2,r16,r3
   8bb58:	982cd43a 	srli	r22,r19,16
   8bb5c:	8ca2983a 	sll	r17,r17,r18
   8bb60:	e009883a 	mov	r4,fp
   8bb64:	b00b883a 	mov	r5,r22
   8bb68:	146ab03a 	or	r21,r2,r17
   8bb6c:	0080ba40 	call	80ba4 <__umodsi3>
   8bb70:	b00b883a 	mov	r5,r22
   8bb74:	e009883a 	mov	r4,fp
   8bb78:	1029883a 	mov	r20,r2
   8bb7c:	9dffffcc 	andi	r23,r19,65535
   8bb80:	0080b400 	call	80b40 <__udivsi3>
   8bb84:	b809883a 	mov	r4,r23
   8bb88:	100b883a 	mov	r5,r2
   8bb8c:	00817900 	call	81790 <__mulsi3>
   8bb90:	a008943a 	slli	r4,r20,16
   8bb94:	a806d43a 	srli	r3,r21,16
   8bb98:	84a8983a 	sll	r20,r16,r18
   8bb9c:	1906b03a 	or	r3,r3,r4
   8bba0:	1880042e 	bgeu	r3,r2,8bbb4 <__umoddi3+0x500>
   8bba4:	1cc7883a 	add	r3,r3,r19
   8bba8:	1cc00236 	bltu	r3,r19,8bbb4 <__umoddi3+0x500>
   8bbac:	1880012e 	bgeu	r3,r2,8bbb4 <__umoddi3+0x500>
   8bbb0:	1cc7883a 	add	r3,r3,r19
   8bbb4:	18a3c83a 	sub	r17,r3,r2
   8bbb8:	b00b883a 	mov	r5,r22
   8bbbc:	8809883a 	mov	r4,r17
   8bbc0:	0080ba40 	call	80ba4 <__umodsi3>
   8bbc4:	b00b883a 	mov	r5,r22
   8bbc8:	8809883a 	mov	r4,r17
   8bbcc:	1021883a 	mov	r16,r2
   8bbd0:	0080b400 	call	80b40 <__udivsi3>
   8bbd4:	100b883a 	mov	r5,r2
   8bbd8:	b809883a 	mov	r4,r23
   8bbdc:	8020943a 	slli	r16,r16,16
   8bbe0:	00817900 	call	81790 <__mulsi3>
   8bbe4:	a8ffffcc 	andi	r3,r21,65535
   8bbe8:	1c06b03a 	or	r3,r3,r16
   8bbec:	1880042e 	bgeu	r3,r2,8bc00 <__umoddi3+0x54c>
   8bbf0:	1cc7883a 	add	r3,r3,r19
   8bbf4:	1cc00236 	bltu	r3,r19,8bc00 <__umoddi3+0x54c>
   8bbf8:	1880012e 	bgeu	r3,r2,8bc00 <__umoddi3+0x54c>
   8bbfc:	1cc7883a 	add	r3,r3,r19
   8bc00:	18a3c83a 	sub	r17,r3,r2
   8bc04:	003f2906 	br	8b8ac <_gp+0xfff79cc8>
   8bc08:	e48fc83a 	sub	r7,fp,r18
   8bc0c:	1d49c83a 	sub	r4,r3,r21
   8bc10:	e1f9803a 	cmpltu	fp,fp,r7
   8bc14:	2739c83a 	sub	fp,r4,fp
   8bc18:	8f09c83a 	sub	r4,r17,fp
   8bc1c:	003fc306 	br	8bb2c <_gp+0xfff79f48>
   8bc20:	01000604 	movi	r4,24
   8bc24:	003ef906 	br	8b80c <_gp+0xfff79c28>
   8bc28:	00800604 	movi	r2,24
   8bc2c:	003f1306 	br	8b87c <_gp+0xfff79c98>
   8bc30:	01000604 	movi	r4,24
   8bc34:	003eb606 	br	8b710 <_gp+0xfff79b2c>
   8bc38:	40bf902e 	bgeu	r8,r2,8ba7c <_gp+0xfff79e98>
   8bc3c:	b5bfff84 	addi	r22,r22,-2
   8bc40:	4551883a 	add	r8,r8,r21
   8bc44:	003f8e06 	br	8ba80 <_gp+0xfff79e9c>
   8bc48:	18bf762e 	bgeu	r3,r2,8ba24 <_gp+0xfff79e40>
   8bc4c:	8c7fff84 	addi	r17,r17,-2
   8bc50:	1d47883a 	add	r3,r3,r21
   8bc54:	003f7406 	br	8ba28 <_gp+0xfff79e44>
   8bc58:	1cc7883a 	add	r3,r3,r19
   8bc5c:	003ecd06 	br	8b794 <_gp+0xfff79bb0>
   8bc60:	8005883a 	mov	r2,r16
   8bc64:	003ef806 	br	8b848 <_gp+0xfff79c64>
   8bc68:	873fe736 	bltu	r16,fp,8bc08 <_gp+0xfff7a024>
   8bc6c:	e00f883a 	mov	r7,fp
   8bc70:	0009883a 	mov	r4,zero
   8bc74:	003fad06 	br	8bb2c <_gp+0xfff79f48>

0008bc78 <__adddf3>:
   8bc78:	02c00434 	movhi	r11,16
   8bc7c:	5affffc4 	addi	r11,r11,-1
   8bc80:	2806d7fa 	srli	r3,r5,31
   8bc84:	2ad4703a 	and	r10,r5,r11
   8bc88:	3ad2703a 	and	r9,r7,r11
   8bc8c:	3804d53a 	srli	r2,r7,20
   8bc90:	3018d77a 	srli	r12,r6,29
   8bc94:	280ad53a 	srli	r5,r5,20
   8bc98:	501490fa 	slli	r10,r10,3
   8bc9c:	2010d77a 	srli	r8,r4,29
   8bca0:	481290fa 	slli	r9,r9,3
   8bca4:	380ed7fa 	srli	r7,r7,31
   8bca8:	defffb04 	addi	sp,sp,-20
   8bcac:	dc800215 	stw	r18,8(sp)
   8bcb0:	dc400115 	stw	r17,4(sp)
   8bcb4:	dc000015 	stw	r16,0(sp)
   8bcb8:	dfc00415 	stw	ra,16(sp)
   8bcbc:	dcc00315 	stw	r19,12(sp)
   8bcc0:	1c803fcc 	andi	r18,r3,255
   8bcc4:	2c01ffcc 	andi	r16,r5,2047
   8bcc8:	5210b03a 	or	r8,r10,r8
   8bccc:	202290fa 	slli	r17,r4,3
   8bcd0:	1081ffcc 	andi	r2,r2,2047
   8bcd4:	4b12b03a 	or	r9,r9,r12
   8bcd8:	300c90fa 	slli	r6,r6,3
   8bcdc:	91c07526 	beq	r18,r7,8beb4 <__adddf3+0x23c>
   8bce0:	8087c83a 	sub	r3,r16,r2
   8bce4:	00c0ab0e 	bge	zero,r3,8bf94 <__adddf3+0x31c>
   8bce8:	10002a1e 	bne	r2,zero,8bd94 <__adddf3+0x11c>
   8bcec:	4984b03a 	or	r2,r9,r6
   8bcf0:	1000961e 	bne	r2,zero,8bf4c <__adddf3+0x2d4>
   8bcf4:	888001cc 	andi	r2,r17,7
   8bcf8:	10000726 	beq	r2,zero,8bd18 <__adddf3+0xa0>
   8bcfc:	888003cc 	andi	r2,r17,15
   8bd00:	00c00104 	movi	r3,4
   8bd04:	10c00426 	beq	r2,r3,8bd18 <__adddf3+0xa0>
   8bd08:	88c7883a 	add	r3,r17,r3
   8bd0c:	1c63803a 	cmpltu	r17,r3,r17
   8bd10:	4451883a 	add	r8,r8,r17
   8bd14:	1823883a 	mov	r17,r3
   8bd18:	4080202c 	andhi	r2,r8,128
   8bd1c:	10005926 	beq	r2,zero,8be84 <__adddf3+0x20c>
   8bd20:	84000044 	addi	r16,r16,1
   8bd24:	0081ffc4 	movi	r2,2047
   8bd28:	8080ba26 	beq	r16,r2,8c014 <__adddf3+0x39c>
   8bd2c:	00bfe034 	movhi	r2,65408
   8bd30:	10bfffc4 	addi	r2,r2,-1
   8bd34:	4090703a 	and	r8,r8,r2
   8bd38:	4004977a 	slli	r2,r8,29
   8bd3c:	4010927a 	slli	r8,r8,9
   8bd40:	8822d0fa 	srli	r17,r17,3
   8bd44:	8401ffcc 	andi	r16,r16,2047
   8bd48:	4010d33a 	srli	r8,r8,12
   8bd4c:	9007883a 	mov	r3,r18
   8bd50:	1444b03a 	or	r2,r2,r17
   8bd54:	8401ffcc 	andi	r16,r16,2047
   8bd58:	8020953a 	slli	r16,r16,20
   8bd5c:	18c03fcc 	andi	r3,r3,255
   8bd60:	01000434 	movhi	r4,16
   8bd64:	213fffc4 	addi	r4,r4,-1
   8bd68:	180697fa 	slli	r3,r3,31
   8bd6c:	4110703a 	and	r8,r8,r4
   8bd70:	4410b03a 	or	r8,r8,r16
   8bd74:	40c6b03a 	or	r3,r8,r3
   8bd78:	dfc00417 	ldw	ra,16(sp)
   8bd7c:	dcc00317 	ldw	r19,12(sp)
   8bd80:	dc800217 	ldw	r18,8(sp)
   8bd84:	dc400117 	ldw	r17,4(sp)
   8bd88:	dc000017 	ldw	r16,0(sp)
   8bd8c:	dec00504 	addi	sp,sp,20
   8bd90:	f800283a 	ret
   8bd94:	0081ffc4 	movi	r2,2047
   8bd98:	80bfd626 	beq	r16,r2,8bcf4 <_gp+0xfff7a110>
   8bd9c:	4a402034 	orhi	r9,r9,128
   8bda0:	00800e04 	movi	r2,56
   8bda4:	10c09f16 	blt	r2,r3,8c024 <__adddf3+0x3ac>
   8bda8:	008007c4 	movi	r2,31
   8bdac:	10c0c216 	blt	r2,r3,8c0b8 <__adddf3+0x440>
   8bdb0:	00800804 	movi	r2,32
   8bdb4:	10c5c83a 	sub	r2,r2,r3
   8bdb8:	488a983a 	sll	r5,r9,r2
   8bdbc:	30c8d83a 	srl	r4,r6,r3
   8bdc0:	3084983a 	sll	r2,r6,r2
   8bdc4:	48c6d83a 	srl	r3,r9,r3
   8bdc8:	290cb03a 	or	r6,r5,r4
   8bdcc:	1004c03a 	cmpne	r2,r2,zero
   8bdd0:	308cb03a 	or	r6,r6,r2
   8bdd4:	898dc83a 	sub	r6,r17,r6
   8bdd8:	89a3803a 	cmpltu	r17,r17,r6
   8bddc:	40d1c83a 	sub	r8,r8,r3
   8bde0:	4451c83a 	sub	r8,r8,r17
   8bde4:	3023883a 	mov	r17,r6
   8bde8:	4080202c 	andhi	r2,r8,128
   8bdec:	10002326 	beq	r2,zero,8be7c <__adddf3+0x204>
   8bdf0:	04c02034 	movhi	r19,128
   8bdf4:	9cffffc4 	addi	r19,r19,-1
   8bdf8:	44e6703a 	and	r19,r8,r19
   8bdfc:	98007626 	beq	r19,zero,8bfd8 <__adddf3+0x360>
   8be00:	9809883a 	mov	r4,r19
   8be04:	008172c0 	call	8172c <__clzsi2>
   8be08:	10fffe04 	addi	r3,r2,-8
   8be0c:	010007c4 	movi	r4,31
   8be10:	20c07716 	blt	r4,r3,8bff0 <__adddf3+0x378>
   8be14:	00800804 	movi	r2,32
   8be18:	10c5c83a 	sub	r2,r2,r3
   8be1c:	8884d83a 	srl	r2,r17,r2
   8be20:	98d0983a 	sll	r8,r19,r3
   8be24:	88e2983a 	sll	r17,r17,r3
   8be28:	1204b03a 	or	r2,r2,r8
   8be2c:	1c007416 	blt	r3,r16,8c000 <__adddf3+0x388>
   8be30:	1c21c83a 	sub	r16,r3,r16
   8be34:	82000044 	addi	r8,r16,1
   8be38:	00c007c4 	movi	r3,31
   8be3c:	1a009116 	blt	r3,r8,8c084 <__adddf3+0x40c>
   8be40:	00c00804 	movi	r3,32
   8be44:	1a07c83a 	sub	r3,r3,r8
   8be48:	8a08d83a 	srl	r4,r17,r8
   8be4c:	88e2983a 	sll	r17,r17,r3
   8be50:	10c6983a 	sll	r3,r2,r3
   8be54:	1210d83a 	srl	r8,r2,r8
   8be58:	8804c03a 	cmpne	r2,r17,zero
   8be5c:	1906b03a 	or	r3,r3,r4
   8be60:	18a2b03a 	or	r17,r3,r2
   8be64:	0021883a 	mov	r16,zero
   8be68:	003fa206 	br	8bcf4 <_gp+0xfff7a110>
   8be6c:	1890b03a 	or	r8,r3,r2
   8be70:	40017d26 	beq	r8,zero,8c468 <__adddf3+0x7f0>
   8be74:	1011883a 	mov	r8,r2
   8be78:	1823883a 	mov	r17,r3
   8be7c:	888001cc 	andi	r2,r17,7
   8be80:	103f9e1e 	bne	r2,zero,8bcfc <_gp+0xfff7a118>
   8be84:	4004977a 	slli	r2,r8,29
   8be88:	8822d0fa 	srli	r17,r17,3
   8be8c:	4010d0fa 	srli	r8,r8,3
   8be90:	9007883a 	mov	r3,r18
   8be94:	1444b03a 	or	r2,r2,r17
   8be98:	0101ffc4 	movi	r4,2047
   8be9c:	81002426 	beq	r16,r4,8bf30 <__adddf3+0x2b8>
   8bea0:	8120703a 	and	r16,r16,r4
   8bea4:	01000434 	movhi	r4,16
   8bea8:	213fffc4 	addi	r4,r4,-1
   8beac:	4110703a 	and	r8,r8,r4
   8beb0:	003fa806 	br	8bd54 <_gp+0xfff7a170>
   8beb4:	8089c83a 	sub	r4,r16,r2
   8beb8:	01005e0e 	bge	zero,r4,8c034 <__adddf3+0x3bc>
   8bebc:	10002b26 	beq	r2,zero,8bf6c <__adddf3+0x2f4>
   8bec0:	0081ffc4 	movi	r2,2047
   8bec4:	80bf8b26 	beq	r16,r2,8bcf4 <_gp+0xfff7a110>
   8bec8:	4a402034 	orhi	r9,r9,128
   8becc:	00800e04 	movi	r2,56
   8bed0:	1100a40e 	bge	r2,r4,8c164 <__adddf3+0x4ec>
   8bed4:	498cb03a 	or	r6,r9,r6
   8bed8:	300ac03a 	cmpne	r5,r6,zero
   8bedc:	0013883a 	mov	r9,zero
   8bee0:	2c4b883a 	add	r5,r5,r17
   8bee4:	2c63803a 	cmpltu	r17,r5,r17
   8bee8:	4a11883a 	add	r8,r9,r8
   8beec:	8a11883a 	add	r8,r17,r8
   8bef0:	2823883a 	mov	r17,r5
   8bef4:	4080202c 	andhi	r2,r8,128
   8bef8:	103fe026 	beq	r2,zero,8be7c <_gp+0xfff7a298>
   8befc:	84000044 	addi	r16,r16,1
   8bf00:	0081ffc4 	movi	r2,2047
   8bf04:	8080d226 	beq	r16,r2,8c250 <__adddf3+0x5d8>
   8bf08:	00bfe034 	movhi	r2,65408
   8bf0c:	10bfffc4 	addi	r2,r2,-1
   8bf10:	4090703a 	and	r8,r8,r2
   8bf14:	880ad07a 	srli	r5,r17,1
   8bf18:	400897fa 	slli	r4,r8,31
   8bf1c:	88c0004c 	andi	r3,r17,1
   8bf20:	28e2b03a 	or	r17,r5,r3
   8bf24:	4010d07a 	srli	r8,r8,1
   8bf28:	2462b03a 	or	r17,r4,r17
   8bf2c:	003f7106 	br	8bcf4 <_gp+0xfff7a110>
   8bf30:	4088b03a 	or	r4,r8,r2
   8bf34:	20014526 	beq	r4,zero,8c44c <__adddf3+0x7d4>
   8bf38:	01000434 	movhi	r4,16
   8bf3c:	42000234 	orhi	r8,r8,8
   8bf40:	213fffc4 	addi	r4,r4,-1
   8bf44:	4110703a 	and	r8,r8,r4
   8bf48:	003f8206 	br	8bd54 <_gp+0xfff7a170>
   8bf4c:	18ffffc4 	addi	r3,r3,-1
   8bf50:	1800491e 	bne	r3,zero,8c078 <__adddf3+0x400>
   8bf54:	898bc83a 	sub	r5,r17,r6
   8bf58:	8963803a 	cmpltu	r17,r17,r5
   8bf5c:	4251c83a 	sub	r8,r8,r9
   8bf60:	4451c83a 	sub	r8,r8,r17
   8bf64:	2823883a 	mov	r17,r5
   8bf68:	003f9f06 	br	8bde8 <_gp+0xfff7a204>
   8bf6c:	4984b03a 	or	r2,r9,r6
   8bf70:	103f6026 	beq	r2,zero,8bcf4 <_gp+0xfff7a110>
   8bf74:	213fffc4 	addi	r4,r4,-1
   8bf78:	2000931e 	bne	r4,zero,8c1c8 <__adddf3+0x550>
   8bf7c:	898d883a 	add	r6,r17,r6
   8bf80:	3463803a 	cmpltu	r17,r6,r17
   8bf84:	4251883a 	add	r8,r8,r9
   8bf88:	8a11883a 	add	r8,r17,r8
   8bf8c:	3023883a 	mov	r17,r6
   8bf90:	003fd806 	br	8bef4 <_gp+0xfff7a310>
   8bf94:	1800541e 	bne	r3,zero,8c0e8 <__adddf3+0x470>
   8bf98:	80800044 	addi	r2,r16,1
   8bf9c:	1081ffcc 	andi	r2,r2,2047
   8bfa0:	00c00044 	movi	r3,1
   8bfa4:	1880a00e 	bge	r3,r2,8c228 <__adddf3+0x5b0>
   8bfa8:	8989c83a 	sub	r4,r17,r6
   8bfac:	8905803a 	cmpltu	r2,r17,r4
   8bfb0:	4267c83a 	sub	r19,r8,r9
   8bfb4:	98a7c83a 	sub	r19,r19,r2
   8bfb8:	9880202c 	andhi	r2,r19,128
   8bfbc:	10006326 	beq	r2,zero,8c14c <__adddf3+0x4d4>
   8bfc0:	3463c83a 	sub	r17,r6,r17
   8bfc4:	4a07c83a 	sub	r3,r9,r8
   8bfc8:	344d803a 	cmpltu	r6,r6,r17
   8bfcc:	19a7c83a 	sub	r19,r3,r6
   8bfd0:	3825883a 	mov	r18,r7
   8bfd4:	983f8a1e 	bne	r19,zero,8be00 <_gp+0xfff7a21c>
   8bfd8:	8809883a 	mov	r4,r17
   8bfdc:	008172c0 	call	8172c <__clzsi2>
   8bfe0:	10800804 	addi	r2,r2,32
   8bfe4:	10fffe04 	addi	r3,r2,-8
   8bfe8:	010007c4 	movi	r4,31
   8bfec:	20ff890e 	bge	r4,r3,8be14 <_gp+0xfff7a230>
   8bff0:	10bff604 	addi	r2,r2,-40
   8bff4:	8884983a 	sll	r2,r17,r2
   8bff8:	0023883a 	mov	r17,zero
   8bffc:	1c3f8c0e 	bge	r3,r16,8be30 <_gp+0xfff7a24c>
   8c000:	023fe034 	movhi	r8,65408
   8c004:	423fffc4 	addi	r8,r8,-1
   8c008:	80e1c83a 	sub	r16,r16,r3
   8c00c:	1210703a 	and	r8,r2,r8
   8c010:	003f3806 	br	8bcf4 <_gp+0xfff7a110>
   8c014:	9007883a 	mov	r3,r18
   8c018:	0011883a 	mov	r8,zero
   8c01c:	0005883a 	mov	r2,zero
   8c020:	003f4c06 	br	8bd54 <_gp+0xfff7a170>
   8c024:	498cb03a 	or	r6,r9,r6
   8c028:	300cc03a 	cmpne	r6,r6,zero
   8c02c:	0007883a 	mov	r3,zero
   8c030:	003f6806 	br	8bdd4 <_gp+0xfff7a1f0>
   8c034:	20009c1e 	bne	r4,zero,8c2a8 <__adddf3+0x630>
   8c038:	80800044 	addi	r2,r16,1
   8c03c:	1141ffcc 	andi	r5,r2,2047
   8c040:	01000044 	movi	r4,1
   8c044:	2140670e 	bge	r4,r5,8c1e4 <__adddf3+0x56c>
   8c048:	0101ffc4 	movi	r4,2047
   8c04c:	11007f26 	beq	r2,r4,8c24c <__adddf3+0x5d4>
   8c050:	898d883a 	add	r6,r17,r6
   8c054:	4247883a 	add	r3,r8,r9
   8c058:	3451803a 	cmpltu	r8,r6,r17
   8c05c:	40d1883a 	add	r8,r8,r3
   8c060:	402297fa 	slli	r17,r8,31
   8c064:	300cd07a 	srli	r6,r6,1
   8c068:	4010d07a 	srli	r8,r8,1
   8c06c:	1021883a 	mov	r16,r2
   8c070:	89a2b03a 	or	r17,r17,r6
   8c074:	003f1f06 	br	8bcf4 <_gp+0xfff7a110>
   8c078:	0081ffc4 	movi	r2,2047
   8c07c:	80bf481e 	bne	r16,r2,8bda0 <_gp+0xfff7a1bc>
   8c080:	003f1c06 	br	8bcf4 <_gp+0xfff7a110>
   8c084:	843ff844 	addi	r16,r16,-31
   8c088:	01000804 	movi	r4,32
   8c08c:	1406d83a 	srl	r3,r2,r16
   8c090:	41005026 	beq	r8,r4,8c1d4 <__adddf3+0x55c>
   8c094:	01001004 	movi	r4,64
   8c098:	2211c83a 	sub	r8,r4,r8
   8c09c:	1204983a 	sll	r2,r2,r8
   8c0a0:	88a2b03a 	or	r17,r17,r2
   8c0a4:	8822c03a 	cmpne	r17,r17,zero
   8c0a8:	1c62b03a 	or	r17,r3,r17
   8c0ac:	0011883a 	mov	r8,zero
   8c0b0:	0021883a 	mov	r16,zero
   8c0b4:	003f7106 	br	8be7c <_gp+0xfff7a298>
   8c0b8:	193ff804 	addi	r4,r3,-32
   8c0bc:	00800804 	movi	r2,32
   8c0c0:	4908d83a 	srl	r4,r9,r4
   8c0c4:	18804526 	beq	r3,r2,8c1dc <__adddf3+0x564>
   8c0c8:	00801004 	movi	r2,64
   8c0cc:	10c5c83a 	sub	r2,r2,r3
   8c0d0:	4886983a 	sll	r3,r9,r2
   8c0d4:	198cb03a 	or	r6,r3,r6
   8c0d8:	300cc03a 	cmpne	r6,r6,zero
   8c0dc:	218cb03a 	or	r6,r4,r6
   8c0e0:	0007883a 	mov	r3,zero
   8c0e4:	003f3b06 	br	8bdd4 <_gp+0xfff7a1f0>
   8c0e8:	80002a26 	beq	r16,zero,8c194 <__adddf3+0x51c>
   8c0ec:	0101ffc4 	movi	r4,2047
   8c0f0:	11006826 	beq	r2,r4,8c294 <__adddf3+0x61c>
   8c0f4:	00c7c83a 	sub	r3,zero,r3
   8c0f8:	42002034 	orhi	r8,r8,128
   8c0fc:	01000e04 	movi	r4,56
   8c100:	20c07c16 	blt	r4,r3,8c2f4 <__adddf3+0x67c>
   8c104:	010007c4 	movi	r4,31
   8c108:	20c0da16 	blt	r4,r3,8c474 <__adddf3+0x7fc>
   8c10c:	01000804 	movi	r4,32
   8c110:	20c9c83a 	sub	r4,r4,r3
   8c114:	4114983a 	sll	r10,r8,r4
   8c118:	88cad83a 	srl	r5,r17,r3
   8c11c:	8908983a 	sll	r4,r17,r4
   8c120:	40c6d83a 	srl	r3,r8,r3
   8c124:	5162b03a 	or	r17,r10,r5
   8c128:	2008c03a 	cmpne	r4,r4,zero
   8c12c:	8922b03a 	or	r17,r17,r4
   8c130:	3463c83a 	sub	r17,r6,r17
   8c134:	48c7c83a 	sub	r3,r9,r3
   8c138:	344d803a 	cmpltu	r6,r6,r17
   8c13c:	1991c83a 	sub	r8,r3,r6
   8c140:	1021883a 	mov	r16,r2
   8c144:	3825883a 	mov	r18,r7
   8c148:	003f2706 	br	8bde8 <_gp+0xfff7a204>
   8c14c:	24d0b03a 	or	r8,r4,r19
   8c150:	40001b1e 	bne	r8,zero,8c1c0 <__adddf3+0x548>
   8c154:	0005883a 	mov	r2,zero
   8c158:	0007883a 	mov	r3,zero
   8c15c:	0021883a 	mov	r16,zero
   8c160:	003f4d06 	br	8be98 <_gp+0xfff7a2b4>
   8c164:	008007c4 	movi	r2,31
   8c168:	11003c16 	blt	r2,r4,8c25c <__adddf3+0x5e4>
   8c16c:	00800804 	movi	r2,32
   8c170:	1105c83a 	sub	r2,r2,r4
   8c174:	488e983a 	sll	r7,r9,r2
   8c178:	310ad83a 	srl	r5,r6,r4
   8c17c:	3084983a 	sll	r2,r6,r2
   8c180:	4912d83a 	srl	r9,r9,r4
   8c184:	394ab03a 	or	r5,r7,r5
   8c188:	1004c03a 	cmpne	r2,r2,zero
   8c18c:	288ab03a 	or	r5,r5,r2
   8c190:	003f5306 	br	8bee0 <_gp+0xfff7a2fc>
   8c194:	4448b03a 	or	r4,r8,r17
   8c198:	20003e26 	beq	r4,zero,8c294 <__adddf3+0x61c>
   8c19c:	00c6303a 	nor	r3,zero,r3
   8c1a0:	18003a1e 	bne	r3,zero,8c28c <__adddf3+0x614>
   8c1a4:	3463c83a 	sub	r17,r6,r17
   8c1a8:	4a07c83a 	sub	r3,r9,r8
   8c1ac:	344d803a 	cmpltu	r6,r6,r17
   8c1b0:	1991c83a 	sub	r8,r3,r6
   8c1b4:	1021883a 	mov	r16,r2
   8c1b8:	3825883a 	mov	r18,r7
   8c1bc:	003f0a06 	br	8bde8 <_gp+0xfff7a204>
   8c1c0:	2023883a 	mov	r17,r4
   8c1c4:	003f0d06 	br	8bdfc <_gp+0xfff7a218>
   8c1c8:	0081ffc4 	movi	r2,2047
   8c1cc:	80bf3f1e 	bne	r16,r2,8becc <_gp+0xfff7a2e8>
   8c1d0:	003ec806 	br	8bcf4 <_gp+0xfff7a110>
   8c1d4:	0005883a 	mov	r2,zero
   8c1d8:	003fb106 	br	8c0a0 <_gp+0xfff7a4bc>
   8c1dc:	0007883a 	mov	r3,zero
   8c1e0:	003fbc06 	br	8c0d4 <_gp+0xfff7a4f0>
   8c1e4:	4444b03a 	or	r2,r8,r17
   8c1e8:	8000871e 	bne	r16,zero,8c408 <__adddf3+0x790>
   8c1ec:	1000ba26 	beq	r2,zero,8c4d8 <__adddf3+0x860>
   8c1f0:	4984b03a 	or	r2,r9,r6
   8c1f4:	103ebf26 	beq	r2,zero,8bcf4 <_gp+0xfff7a110>
   8c1f8:	8985883a 	add	r2,r17,r6
   8c1fc:	4247883a 	add	r3,r8,r9
   8c200:	1451803a 	cmpltu	r8,r2,r17
   8c204:	40d1883a 	add	r8,r8,r3
   8c208:	40c0202c 	andhi	r3,r8,128
   8c20c:	1023883a 	mov	r17,r2
   8c210:	183f1a26 	beq	r3,zero,8be7c <_gp+0xfff7a298>
   8c214:	00bfe034 	movhi	r2,65408
   8c218:	10bfffc4 	addi	r2,r2,-1
   8c21c:	2021883a 	mov	r16,r4
   8c220:	4090703a 	and	r8,r8,r2
   8c224:	003eb306 	br	8bcf4 <_gp+0xfff7a110>
   8c228:	4444b03a 	or	r2,r8,r17
   8c22c:	8000291e 	bne	r16,zero,8c2d4 <__adddf3+0x65c>
   8c230:	10004b1e 	bne	r2,zero,8c360 <__adddf3+0x6e8>
   8c234:	4990b03a 	or	r8,r9,r6
   8c238:	40008b26 	beq	r8,zero,8c468 <__adddf3+0x7f0>
   8c23c:	4811883a 	mov	r8,r9
   8c240:	3023883a 	mov	r17,r6
   8c244:	3825883a 	mov	r18,r7
   8c248:	003eaa06 	br	8bcf4 <_gp+0xfff7a110>
   8c24c:	1021883a 	mov	r16,r2
   8c250:	0011883a 	mov	r8,zero
   8c254:	0005883a 	mov	r2,zero
   8c258:	003f0f06 	br	8be98 <_gp+0xfff7a2b4>
   8c25c:	217ff804 	addi	r5,r4,-32
   8c260:	00800804 	movi	r2,32
   8c264:	494ad83a 	srl	r5,r9,r5
   8c268:	20807d26 	beq	r4,r2,8c460 <__adddf3+0x7e8>
   8c26c:	00801004 	movi	r2,64
   8c270:	1109c83a 	sub	r4,r2,r4
   8c274:	4912983a 	sll	r9,r9,r4
   8c278:	498cb03a 	or	r6,r9,r6
   8c27c:	300cc03a 	cmpne	r6,r6,zero
   8c280:	298ab03a 	or	r5,r5,r6
   8c284:	0013883a 	mov	r9,zero
   8c288:	003f1506 	br	8bee0 <_gp+0xfff7a2fc>
   8c28c:	0101ffc4 	movi	r4,2047
   8c290:	113f9a1e 	bne	r2,r4,8c0fc <_gp+0xfff7a518>
   8c294:	4811883a 	mov	r8,r9
   8c298:	3023883a 	mov	r17,r6
   8c29c:	1021883a 	mov	r16,r2
   8c2a0:	3825883a 	mov	r18,r7
   8c2a4:	003e9306 	br	8bcf4 <_gp+0xfff7a110>
   8c2a8:	8000161e 	bne	r16,zero,8c304 <__adddf3+0x68c>
   8c2ac:	444ab03a 	or	r5,r8,r17
   8c2b0:	28005126 	beq	r5,zero,8c3f8 <__adddf3+0x780>
   8c2b4:	0108303a 	nor	r4,zero,r4
   8c2b8:	20004d1e 	bne	r4,zero,8c3f0 <__adddf3+0x778>
   8c2bc:	89a3883a 	add	r17,r17,r6
   8c2c0:	4253883a 	add	r9,r8,r9
   8c2c4:	898d803a 	cmpltu	r6,r17,r6
   8c2c8:	3251883a 	add	r8,r6,r9
   8c2cc:	1021883a 	mov	r16,r2
   8c2d0:	003f0806 	br	8bef4 <_gp+0xfff7a310>
   8c2d4:	1000301e 	bne	r2,zero,8c398 <__adddf3+0x720>
   8c2d8:	4984b03a 	or	r2,r9,r6
   8c2dc:	10007126 	beq	r2,zero,8c4a4 <__adddf3+0x82c>
   8c2e0:	4811883a 	mov	r8,r9
   8c2e4:	3023883a 	mov	r17,r6
   8c2e8:	3825883a 	mov	r18,r7
   8c2ec:	0401ffc4 	movi	r16,2047
   8c2f0:	003e8006 	br	8bcf4 <_gp+0xfff7a110>
   8c2f4:	4462b03a 	or	r17,r8,r17
   8c2f8:	8822c03a 	cmpne	r17,r17,zero
   8c2fc:	0007883a 	mov	r3,zero
   8c300:	003f8b06 	br	8c130 <_gp+0xfff7a54c>
   8c304:	0141ffc4 	movi	r5,2047
   8c308:	11403b26 	beq	r2,r5,8c3f8 <__adddf3+0x780>
   8c30c:	0109c83a 	sub	r4,zero,r4
   8c310:	42002034 	orhi	r8,r8,128
   8c314:	01400e04 	movi	r5,56
   8c318:	29006716 	blt	r5,r4,8c4b8 <__adddf3+0x840>
   8c31c:	014007c4 	movi	r5,31
   8c320:	29007016 	blt	r5,r4,8c4e4 <__adddf3+0x86c>
   8c324:	01400804 	movi	r5,32
   8c328:	290bc83a 	sub	r5,r5,r4
   8c32c:	4154983a 	sll	r10,r8,r5
   8c330:	890ed83a 	srl	r7,r17,r4
   8c334:	894a983a 	sll	r5,r17,r5
   8c338:	4108d83a 	srl	r4,r8,r4
   8c33c:	51e2b03a 	or	r17,r10,r7
   8c340:	280ac03a 	cmpne	r5,r5,zero
   8c344:	8962b03a 	or	r17,r17,r5
   8c348:	89a3883a 	add	r17,r17,r6
   8c34c:	2253883a 	add	r9,r4,r9
   8c350:	898d803a 	cmpltu	r6,r17,r6
   8c354:	3251883a 	add	r8,r6,r9
   8c358:	1021883a 	mov	r16,r2
   8c35c:	003ee506 	br	8bef4 <_gp+0xfff7a310>
   8c360:	4984b03a 	or	r2,r9,r6
   8c364:	103e6326 	beq	r2,zero,8bcf4 <_gp+0xfff7a110>
   8c368:	8987c83a 	sub	r3,r17,r6
   8c36c:	88c9803a 	cmpltu	r4,r17,r3
   8c370:	4245c83a 	sub	r2,r8,r9
   8c374:	1105c83a 	sub	r2,r2,r4
   8c378:	1100202c 	andhi	r4,r2,128
   8c37c:	203ebb26 	beq	r4,zero,8be6c <_gp+0xfff7a288>
   8c380:	3463c83a 	sub	r17,r6,r17
   8c384:	4a07c83a 	sub	r3,r9,r8
   8c388:	344d803a 	cmpltu	r6,r6,r17
   8c38c:	1991c83a 	sub	r8,r3,r6
   8c390:	3825883a 	mov	r18,r7
   8c394:	003e5706 	br	8bcf4 <_gp+0xfff7a110>
   8c398:	4984b03a 	or	r2,r9,r6
   8c39c:	10002e26 	beq	r2,zero,8c458 <__adddf3+0x7e0>
   8c3a0:	4004d0fa 	srli	r2,r8,3
   8c3a4:	8822d0fa 	srli	r17,r17,3
   8c3a8:	4010977a 	slli	r8,r8,29
   8c3ac:	10c0022c 	andhi	r3,r2,8
   8c3b0:	4462b03a 	or	r17,r8,r17
   8c3b4:	18000826 	beq	r3,zero,8c3d8 <__adddf3+0x760>
   8c3b8:	4808d0fa 	srli	r4,r9,3
   8c3bc:	20c0022c 	andhi	r3,r4,8
   8c3c0:	1800051e 	bne	r3,zero,8c3d8 <__adddf3+0x760>
   8c3c4:	300cd0fa 	srli	r6,r6,3
   8c3c8:	4806977a 	slli	r3,r9,29
   8c3cc:	2005883a 	mov	r2,r4
   8c3d0:	3825883a 	mov	r18,r7
   8c3d4:	19a2b03a 	or	r17,r3,r6
   8c3d8:	8810d77a 	srli	r8,r17,29
   8c3dc:	100490fa 	slli	r2,r2,3
   8c3e0:	882290fa 	slli	r17,r17,3
   8c3e4:	0401ffc4 	movi	r16,2047
   8c3e8:	4090b03a 	or	r8,r8,r2
   8c3ec:	003e4106 	br	8bcf4 <_gp+0xfff7a110>
   8c3f0:	0141ffc4 	movi	r5,2047
   8c3f4:	117fc71e 	bne	r2,r5,8c314 <_gp+0xfff7a730>
   8c3f8:	4811883a 	mov	r8,r9
   8c3fc:	3023883a 	mov	r17,r6
   8c400:	1021883a 	mov	r16,r2
   8c404:	003e3b06 	br	8bcf4 <_gp+0xfff7a110>
   8c408:	10002f26 	beq	r2,zero,8c4c8 <__adddf3+0x850>
   8c40c:	4984b03a 	or	r2,r9,r6
   8c410:	10001126 	beq	r2,zero,8c458 <__adddf3+0x7e0>
   8c414:	4004d0fa 	srli	r2,r8,3
   8c418:	8822d0fa 	srli	r17,r17,3
   8c41c:	4010977a 	slli	r8,r8,29
   8c420:	10c0022c 	andhi	r3,r2,8
   8c424:	4462b03a 	or	r17,r8,r17
   8c428:	183feb26 	beq	r3,zero,8c3d8 <_gp+0xfff7a7f4>
   8c42c:	4808d0fa 	srli	r4,r9,3
   8c430:	20c0022c 	andhi	r3,r4,8
   8c434:	183fe81e 	bne	r3,zero,8c3d8 <_gp+0xfff7a7f4>
   8c438:	300cd0fa 	srli	r6,r6,3
   8c43c:	4806977a 	slli	r3,r9,29
   8c440:	2005883a 	mov	r2,r4
   8c444:	19a2b03a 	or	r17,r3,r6
   8c448:	003fe306 	br	8c3d8 <_gp+0xfff7a7f4>
   8c44c:	0011883a 	mov	r8,zero
   8c450:	0005883a 	mov	r2,zero
   8c454:	003e3f06 	br	8bd54 <_gp+0xfff7a170>
   8c458:	0401ffc4 	movi	r16,2047
   8c45c:	003e2506 	br	8bcf4 <_gp+0xfff7a110>
   8c460:	0013883a 	mov	r9,zero
   8c464:	003f8406 	br	8c278 <_gp+0xfff7a694>
   8c468:	0005883a 	mov	r2,zero
   8c46c:	0007883a 	mov	r3,zero
   8c470:	003e8906 	br	8be98 <_gp+0xfff7a2b4>
   8c474:	197ff804 	addi	r5,r3,-32
   8c478:	01000804 	movi	r4,32
   8c47c:	414ad83a 	srl	r5,r8,r5
   8c480:	19002426 	beq	r3,r4,8c514 <__adddf3+0x89c>
   8c484:	01001004 	movi	r4,64
   8c488:	20c7c83a 	sub	r3,r4,r3
   8c48c:	40c6983a 	sll	r3,r8,r3
   8c490:	1c46b03a 	or	r3,r3,r17
   8c494:	1806c03a 	cmpne	r3,r3,zero
   8c498:	28e2b03a 	or	r17,r5,r3
   8c49c:	0007883a 	mov	r3,zero
   8c4a0:	003f2306 	br	8c130 <_gp+0xfff7a54c>
   8c4a4:	0007883a 	mov	r3,zero
   8c4a8:	5811883a 	mov	r8,r11
   8c4ac:	00bfffc4 	movi	r2,-1
   8c4b0:	0401ffc4 	movi	r16,2047
   8c4b4:	003e7806 	br	8be98 <_gp+0xfff7a2b4>
   8c4b8:	4462b03a 	or	r17,r8,r17
   8c4bc:	8822c03a 	cmpne	r17,r17,zero
   8c4c0:	0009883a 	mov	r4,zero
   8c4c4:	003fa006 	br	8c348 <_gp+0xfff7a764>
   8c4c8:	4811883a 	mov	r8,r9
   8c4cc:	3023883a 	mov	r17,r6
   8c4d0:	0401ffc4 	movi	r16,2047
   8c4d4:	003e0706 	br	8bcf4 <_gp+0xfff7a110>
   8c4d8:	4811883a 	mov	r8,r9
   8c4dc:	3023883a 	mov	r17,r6
   8c4e0:	003e0406 	br	8bcf4 <_gp+0xfff7a110>
   8c4e4:	21fff804 	addi	r7,r4,-32
   8c4e8:	01400804 	movi	r5,32
   8c4ec:	41ced83a 	srl	r7,r8,r7
   8c4f0:	21400a26 	beq	r4,r5,8c51c <__adddf3+0x8a4>
   8c4f4:	01401004 	movi	r5,64
   8c4f8:	2909c83a 	sub	r4,r5,r4
   8c4fc:	4108983a 	sll	r4,r8,r4
   8c500:	2448b03a 	or	r4,r4,r17
   8c504:	2008c03a 	cmpne	r4,r4,zero
   8c508:	3922b03a 	or	r17,r7,r4
   8c50c:	0009883a 	mov	r4,zero
   8c510:	003f8d06 	br	8c348 <_gp+0xfff7a764>
   8c514:	0007883a 	mov	r3,zero
   8c518:	003fdd06 	br	8c490 <_gp+0xfff7a8ac>
   8c51c:	0009883a 	mov	r4,zero
   8c520:	003ff706 	br	8c500 <_gp+0xfff7a91c>

0008c524 <__divdf3>:
   8c524:	defff004 	addi	sp,sp,-64
   8c528:	dc800815 	stw	r18,32(sp)
   8c52c:	2824d53a 	srli	r18,r5,20
   8c530:	dd800c15 	stw	r22,48(sp)
   8c534:	282cd7fa 	srli	r22,r5,31
   8c538:	dc000615 	stw	r16,24(sp)
   8c53c:	04000434 	movhi	r16,16
   8c540:	843fffc4 	addi	r16,r16,-1
   8c544:	dfc00f15 	stw	ra,60(sp)
   8c548:	df000e15 	stw	fp,56(sp)
   8c54c:	ddc00d15 	stw	r23,52(sp)
   8c550:	dd400b15 	stw	r21,44(sp)
   8c554:	dd000a15 	stw	r20,40(sp)
   8c558:	dcc00915 	stw	r19,36(sp)
   8c55c:	dc400715 	stw	r17,28(sp)
   8c560:	9481ffcc 	andi	r18,r18,2047
   8c564:	2c20703a 	and	r16,r5,r16
   8c568:	b2003fcc 	andi	r8,r22,255
   8c56c:	90006126 	beq	r18,zero,8c6f4 <__divdf3+0x1d0>
   8c570:	0081ffc4 	movi	r2,2047
   8c574:	202b883a 	mov	r21,r4
   8c578:	90803726 	beq	r18,r2,8c658 <__divdf3+0x134>
   8c57c:	80800434 	orhi	r2,r16,16
   8c580:	100490fa 	slli	r2,r2,3
   8c584:	2020d77a 	srli	r16,r4,29
   8c588:	202a90fa 	slli	r21,r4,3
   8c58c:	94bf0044 	addi	r18,r18,-1023
   8c590:	80a0b03a 	or	r16,r16,r2
   8c594:	0013883a 	mov	r9,zero
   8c598:	000b883a 	mov	r5,zero
   8c59c:	3806d53a 	srli	r3,r7,20
   8c5a0:	382ed7fa 	srli	r23,r7,31
   8c5a4:	04400434 	movhi	r17,16
   8c5a8:	8c7fffc4 	addi	r17,r17,-1
   8c5ac:	18c1ffcc 	andi	r3,r3,2047
   8c5b0:	3029883a 	mov	r20,r6
   8c5b4:	3c62703a 	and	r17,r7,r17
   8c5b8:	bf003fcc 	andi	fp,r23,255
   8c5bc:	18006e26 	beq	r3,zero,8c778 <__divdf3+0x254>
   8c5c0:	0081ffc4 	movi	r2,2047
   8c5c4:	18806626 	beq	r3,r2,8c760 <__divdf3+0x23c>
   8c5c8:	88800434 	orhi	r2,r17,16
   8c5cc:	100490fa 	slli	r2,r2,3
   8c5d0:	3022d77a 	srli	r17,r6,29
   8c5d4:	302890fa 	slli	r20,r6,3
   8c5d8:	18ff0044 	addi	r3,r3,-1023
   8c5dc:	88a2b03a 	or	r17,r17,r2
   8c5e0:	000f883a 	mov	r7,zero
   8c5e4:	b5e6f03a 	xor	r19,r22,r23
   8c5e8:	3a4cb03a 	or	r6,r7,r9
   8c5ec:	008003c4 	movi	r2,15
   8c5f0:	9809883a 	mov	r4,r19
   8c5f4:	90c7c83a 	sub	r3,r18,r3
   8c5f8:	9cc03fcc 	andi	r19,r19,255
   8c5fc:	11809636 	bltu	r2,r6,8c858 <__divdf3+0x334>
   8c600:	300c90ba 	slli	r6,r6,2
   8c604:	00800274 	movhi	r2,9
   8c608:	10b18604 	addi	r2,r2,-14824
   8c60c:	308d883a 	add	r6,r6,r2
   8c610:	30800017 	ldw	r2,0(r6)
   8c614:	1000683a 	jmp	r2
   8c618:	0008c858 	cmpnei	zero,zero,8993
   8c61c:	0008c690 	cmplti	zero,zero,8986
   8c620:	0008c848 	cmpgei	zero,zero,8993
   8c624:	0008c684 	movi	zero,8986
   8c628:	0008c848 	cmpgei	zero,zero,8993
   8c62c:	0008c81c 	xori	zero,zero,8992
   8c630:	0008c848 	cmpgei	zero,zero,8993
   8c634:	0008c684 	movi	zero,8986
   8c638:	0008c690 	cmplti	zero,zero,8986
   8c63c:	0008c690 	cmplti	zero,zero,8986
   8c640:	0008c81c 	xori	zero,zero,8992
   8c644:	0008c684 	movi	zero,8986
   8c648:	0008c674 	movhi	zero,8985
   8c64c:	0008c674 	movhi	zero,8985
   8c650:	0008c674 	movhi	zero,8985
   8c654:	0008cbe0 	cmpeqi	zero,zero,9007
   8c658:	2404b03a 	or	r2,r4,r16
   8c65c:	10006c1e 	bne	r2,zero,8c810 <__divdf3+0x2ec>
   8c660:	02400204 	movi	r9,8
   8c664:	0021883a 	mov	r16,zero
   8c668:	002b883a 	mov	r21,zero
   8c66c:	01400084 	movi	r5,2
   8c670:	003fca06 	br	8c59c <_gp+0xfff7a9b8>
   8c674:	8023883a 	mov	r17,r16
   8c678:	a829883a 	mov	r20,r21
   8c67c:	4039883a 	mov	fp,r8
   8c680:	280f883a 	mov	r7,r5
   8c684:	00800084 	movi	r2,2
   8c688:	3881601e 	bne	r7,r2,8cc0c <__divdf3+0x6e8>
   8c68c:	e027883a 	mov	r19,fp
   8c690:	9900004c 	andi	r4,r19,1
   8c694:	0081ffc4 	movi	r2,2047
   8c698:	0021883a 	mov	r16,zero
   8c69c:	002b883a 	mov	r21,zero
   8c6a0:	1004953a 	slli	r2,r2,20
   8c6a4:	20c03fcc 	andi	r3,r4,255
   8c6a8:	01400434 	movhi	r5,16
   8c6ac:	297fffc4 	addi	r5,r5,-1
   8c6b0:	180697fa 	slli	r3,r3,31
   8c6b4:	8160703a 	and	r16,r16,r5
   8c6b8:	80a0b03a 	or	r16,r16,r2
   8c6bc:	80c6b03a 	or	r3,r16,r3
   8c6c0:	a805883a 	mov	r2,r21
   8c6c4:	dfc00f17 	ldw	ra,60(sp)
   8c6c8:	df000e17 	ldw	fp,56(sp)
   8c6cc:	ddc00d17 	ldw	r23,52(sp)
   8c6d0:	dd800c17 	ldw	r22,48(sp)
   8c6d4:	dd400b17 	ldw	r21,44(sp)
   8c6d8:	dd000a17 	ldw	r20,40(sp)
   8c6dc:	dcc00917 	ldw	r19,36(sp)
   8c6e0:	dc800817 	ldw	r18,32(sp)
   8c6e4:	dc400717 	ldw	r17,28(sp)
   8c6e8:	dc000617 	ldw	r16,24(sp)
   8c6ec:	dec01004 	addi	sp,sp,64
   8c6f0:	f800283a 	ret
   8c6f4:	2404b03a 	or	r2,r4,r16
   8c6f8:	2023883a 	mov	r17,r4
   8c6fc:	10003f26 	beq	r2,zero,8c7fc <__divdf3+0x2d8>
   8c700:	80015e26 	beq	r16,zero,8cc7c <__divdf3+0x758>
   8c704:	8009883a 	mov	r4,r16
   8c708:	d9800215 	stw	r6,8(sp)
   8c70c:	d9c00515 	stw	r7,20(sp)
   8c710:	da000415 	stw	r8,16(sp)
   8c714:	008172c0 	call	8172c <__clzsi2>
   8c718:	d9800217 	ldw	r6,8(sp)
   8c71c:	d9c00517 	ldw	r7,20(sp)
   8c720:	da000417 	ldw	r8,16(sp)
   8c724:	113ffd44 	addi	r4,r2,-11
   8c728:	00c00704 	movi	r3,28
   8c72c:	19014f16 	blt	r3,r4,8cc6c <__divdf3+0x748>
   8c730:	00c00744 	movi	r3,29
   8c734:	157ffe04 	addi	r21,r2,-8
   8c738:	1907c83a 	sub	r3,r3,r4
   8c73c:	8560983a 	sll	r16,r16,r21
   8c740:	88c6d83a 	srl	r3,r17,r3
   8c744:	8d6a983a 	sll	r21,r17,r21
   8c748:	1c20b03a 	or	r16,r3,r16
   8c74c:	1080fcc4 	addi	r2,r2,1011
   8c750:	00a5c83a 	sub	r18,zero,r2
   8c754:	0013883a 	mov	r9,zero
   8c758:	000b883a 	mov	r5,zero
   8c75c:	003f8f06 	br	8c59c <_gp+0xfff7a9b8>
   8c760:	3444b03a 	or	r2,r6,r17
   8c764:	1000231e 	bne	r2,zero,8c7f4 <__divdf3+0x2d0>
   8c768:	0023883a 	mov	r17,zero
   8c76c:	0029883a 	mov	r20,zero
   8c770:	01c00084 	movi	r7,2
   8c774:	003f9b06 	br	8c5e4 <_gp+0xfff7aa00>
   8c778:	3444b03a 	or	r2,r6,r17
   8c77c:	10001926 	beq	r2,zero,8c7e4 <__divdf3+0x2c0>
   8c780:	88014b26 	beq	r17,zero,8ccb0 <__divdf3+0x78c>
   8c784:	8809883a 	mov	r4,r17
   8c788:	d9400115 	stw	r5,4(sp)
   8c78c:	d9800215 	stw	r6,8(sp)
   8c790:	da000415 	stw	r8,16(sp)
   8c794:	da400315 	stw	r9,12(sp)
   8c798:	008172c0 	call	8172c <__clzsi2>
   8c79c:	d9400117 	ldw	r5,4(sp)
   8c7a0:	d9800217 	ldw	r6,8(sp)
   8c7a4:	da000417 	ldw	r8,16(sp)
   8c7a8:	da400317 	ldw	r9,12(sp)
   8c7ac:	113ffd44 	addi	r4,r2,-11
   8c7b0:	00c00704 	movi	r3,28
   8c7b4:	19013a16 	blt	r3,r4,8cca0 <__divdf3+0x77c>
   8c7b8:	00c00744 	movi	r3,29
   8c7bc:	153ffe04 	addi	r20,r2,-8
   8c7c0:	1907c83a 	sub	r3,r3,r4
   8c7c4:	8d22983a 	sll	r17,r17,r20
   8c7c8:	30c6d83a 	srl	r3,r6,r3
   8c7cc:	3528983a 	sll	r20,r6,r20
   8c7d0:	1c62b03a 	or	r17,r3,r17
   8c7d4:	1080fcc4 	addi	r2,r2,1011
   8c7d8:	0087c83a 	sub	r3,zero,r2
   8c7dc:	000f883a 	mov	r7,zero
   8c7e0:	003f8006 	br	8c5e4 <_gp+0xfff7aa00>
   8c7e4:	0023883a 	mov	r17,zero
   8c7e8:	0029883a 	mov	r20,zero
   8c7ec:	01c00044 	movi	r7,1
   8c7f0:	003f7c06 	br	8c5e4 <_gp+0xfff7aa00>
   8c7f4:	01c000c4 	movi	r7,3
   8c7f8:	003f7a06 	br	8c5e4 <_gp+0xfff7aa00>
   8c7fc:	02400104 	movi	r9,4
   8c800:	0021883a 	mov	r16,zero
   8c804:	002b883a 	mov	r21,zero
   8c808:	01400044 	movi	r5,1
   8c80c:	003f6306 	br	8c59c <_gp+0xfff7a9b8>
   8c810:	02400304 	movi	r9,12
   8c814:	014000c4 	movi	r5,3
   8c818:	003f6006 	br	8c59c <_gp+0xfff7a9b8>
   8c81c:	04000434 	movhi	r16,16
   8c820:	0009883a 	mov	r4,zero
   8c824:	843fffc4 	addi	r16,r16,-1
   8c828:	057fffc4 	movi	r21,-1
   8c82c:	0081ffc4 	movi	r2,2047
   8c830:	003f9b06 	br	8c6a0 <_gp+0xfff7aabc>
   8c834:	00c00044 	movi	r3,1
   8c838:	1887c83a 	sub	r3,r3,r2
   8c83c:	01000e04 	movi	r4,56
   8c840:	20c1530e 	bge	r4,r3,8cd90 <__divdf3+0x86c>
   8c844:	9900004c 	andi	r4,r19,1
   8c848:	0005883a 	mov	r2,zero
   8c84c:	0021883a 	mov	r16,zero
   8c850:	002b883a 	mov	r21,zero
   8c854:	003f9206 	br	8c6a0 <_gp+0xfff7aabc>
   8c858:	8c012e36 	bltu	r17,r16,8cd14 <__divdf3+0x7f0>
   8c85c:	84412c26 	beq	r16,r17,8cd10 <__divdf3+0x7ec>
   8c860:	a82f883a 	mov	r23,r21
   8c864:	18ffffc4 	addi	r3,r3,-1
   8c868:	002b883a 	mov	r21,zero
   8c86c:	a004d63a 	srli	r2,r20,24
   8c870:	8822923a 	slli	r17,r17,8
   8c874:	a028923a 	slli	r20,r20,8
   8c878:	8009883a 	mov	r4,r16
   8c87c:	88acb03a 	or	r22,r17,r2
   8c880:	dd000015 	stw	r20,0(sp)
   8c884:	b028d43a 	srli	r20,r22,16
   8c888:	d8c00215 	stw	r3,8(sp)
   8c88c:	b4bfffcc 	andi	r18,r22,65535
   8c890:	a00b883a 	mov	r5,r20
   8c894:	0080b400 	call	80b40 <__udivsi3>
   8c898:	100b883a 	mov	r5,r2
   8c89c:	9009883a 	mov	r4,r18
   8c8a0:	1023883a 	mov	r17,r2
   8c8a4:	00817900 	call	81790 <__mulsi3>
   8c8a8:	8009883a 	mov	r4,r16
   8c8ac:	a00b883a 	mov	r5,r20
   8c8b0:	1039883a 	mov	fp,r2
   8c8b4:	0080ba40 	call	80ba4 <__umodsi3>
   8c8b8:	1004943a 	slli	r2,r2,16
   8c8bc:	b808d43a 	srli	r4,r23,16
   8c8c0:	d8c00217 	ldw	r3,8(sp)
   8c8c4:	2084b03a 	or	r2,r4,r2
   8c8c8:	1700062e 	bgeu	r2,fp,8c8e4 <__divdf3+0x3c0>
   8c8cc:	1585883a 	add	r2,r2,r22
   8c8d0:	893fffc4 	addi	r4,r17,-1
   8c8d4:	15811d36 	bltu	r2,r22,8cd4c <__divdf3+0x828>
   8c8d8:	17011c2e 	bgeu	r2,fp,8cd4c <__divdf3+0x828>
   8c8dc:	8c7fff84 	addi	r17,r17,-2
   8c8e0:	1585883a 	add	r2,r2,r22
   8c8e4:	1739c83a 	sub	fp,r2,fp
   8c8e8:	a00b883a 	mov	r5,r20
   8c8ec:	e009883a 	mov	r4,fp
   8c8f0:	d8c00215 	stw	r3,8(sp)
   8c8f4:	0080b400 	call	80b40 <__udivsi3>
   8c8f8:	100b883a 	mov	r5,r2
   8c8fc:	9009883a 	mov	r4,r18
   8c900:	1021883a 	mov	r16,r2
   8c904:	00817900 	call	81790 <__mulsi3>
   8c908:	a00b883a 	mov	r5,r20
   8c90c:	e009883a 	mov	r4,fp
   8c910:	d8800415 	stw	r2,16(sp)
   8c914:	0080ba40 	call	80ba4 <__umodsi3>
   8c918:	1004943a 	slli	r2,r2,16
   8c91c:	da000417 	ldw	r8,16(sp)
   8c920:	bdffffcc 	andi	r23,r23,65535
   8c924:	b884b03a 	or	r2,r23,r2
   8c928:	d8c00217 	ldw	r3,8(sp)
   8c92c:	1200062e 	bgeu	r2,r8,8c948 <__divdf3+0x424>
   8c930:	1585883a 	add	r2,r2,r22
   8c934:	813fffc4 	addi	r4,r16,-1
   8c938:	15810236 	bltu	r2,r22,8cd44 <__divdf3+0x820>
   8c93c:	1201012e 	bgeu	r2,r8,8cd44 <__divdf3+0x820>
   8c940:	843fff84 	addi	r16,r16,-2
   8c944:	1585883a 	add	r2,r2,r22
   8c948:	8822943a 	slli	r17,r17,16
   8c94c:	d9800017 	ldw	r6,0(sp)
   8c950:	1211c83a 	sub	r8,r2,r8
   8c954:	8c22b03a 	or	r17,r17,r16
   8c958:	373fffcc 	andi	fp,r6,65535
   8c95c:	8abfffcc 	andi	r10,r17,65535
   8c960:	8820d43a 	srli	r16,r17,16
   8c964:	5009883a 	mov	r4,r10
   8c968:	e00b883a 	mov	r5,fp
   8c96c:	302ed43a 	srli	r23,r6,16
   8c970:	d8c00215 	stw	r3,8(sp)
   8c974:	da000415 	stw	r8,16(sp)
   8c978:	da800115 	stw	r10,4(sp)
   8c97c:	00817900 	call	81790 <__mulsi3>
   8c980:	800b883a 	mov	r5,r16
   8c984:	e009883a 	mov	r4,fp
   8c988:	d8800515 	stw	r2,20(sp)
   8c98c:	00817900 	call	81790 <__mulsi3>
   8c990:	8009883a 	mov	r4,r16
   8c994:	b80b883a 	mov	r5,r23
   8c998:	d8800315 	stw	r2,12(sp)
   8c99c:	00817900 	call	81790 <__mulsi3>
   8c9a0:	da800117 	ldw	r10,4(sp)
   8c9a4:	b80b883a 	mov	r5,r23
   8c9a8:	1021883a 	mov	r16,r2
   8c9ac:	5009883a 	mov	r4,r10
   8c9b0:	00817900 	call	81790 <__mulsi3>
   8c9b4:	d9c00517 	ldw	r7,20(sp)
   8c9b8:	da400317 	ldw	r9,12(sp)
   8c9bc:	d8c00217 	ldw	r3,8(sp)
   8c9c0:	3808d43a 	srli	r4,r7,16
   8c9c4:	1245883a 	add	r2,r2,r9
   8c9c8:	da000417 	ldw	r8,16(sp)
   8c9cc:	2085883a 	add	r2,r4,r2
   8c9d0:	1240022e 	bgeu	r2,r9,8c9dc <__divdf3+0x4b8>
   8c9d4:	01000074 	movhi	r4,1
   8c9d8:	8121883a 	add	r16,r16,r4
   8c9dc:	1008d43a 	srli	r4,r2,16
   8c9e0:	1004943a 	slli	r2,r2,16
   8c9e4:	39ffffcc 	andi	r7,r7,65535
   8c9e8:	2409883a 	add	r4,r4,r16
   8c9ec:	11c5883a 	add	r2,r2,r7
   8c9f0:	4100bb36 	bltu	r8,r4,8cce0 <__divdf3+0x7bc>
   8c9f4:	4100d726 	beq	r8,r4,8cd54 <__divdf3+0x830>
   8c9f8:	4109c83a 	sub	r4,r8,r4
   8c9fc:	a8a1c83a 	sub	r16,r21,r2
   8ca00:	ac2b803a 	cmpltu	r21,r21,r16
   8ca04:	256bc83a 	sub	r21,r4,r21
   8ca08:	b540d926 	beq	r22,r21,8cd70 <__divdf3+0x84c>
   8ca0c:	a00b883a 	mov	r5,r20
   8ca10:	a809883a 	mov	r4,r21
   8ca14:	d8c00215 	stw	r3,8(sp)
   8ca18:	0080b400 	call	80b40 <__udivsi3>
   8ca1c:	100b883a 	mov	r5,r2
   8ca20:	9009883a 	mov	r4,r18
   8ca24:	d8800515 	stw	r2,20(sp)
   8ca28:	00817900 	call	81790 <__mulsi3>
   8ca2c:	a809883a 	mov	r4,r21
   8ca30:	a00b883a 	mov	r5,r20
   8ca34:	d8800415 	stw	r2,16(sp)
   8ca38:	0080ba40 	call	80ba4 <__umodsi3>
   8ca3c:	1004943a 	slli	r2,r2,16
   8ca40:	8008d43a 	srli	r4,r16,16
   8ca44:	da000417 	ldw	r8,16(sp)
   8ca48:	d8c00217 	ldw	r3,8(sp)
   8ca4c:	2084b03a 	or	r2,r4,r2
   8ca50:	d9c00517 	ldw	r7,20(sp)
   8ca54:	1200062e 	bgeu	r2,r8,8ca70 <__divdf3+0x54c>
   8ca58:	1585883a 	add	r2,r2,r22
   8ca5c:	393fffc4 	addi	r4,r7,-1
   8ca60:	1580c536 	bltu	r2,r22,8cd78 <__divdf3+0x854>
   8ca64:	1200c42e 	bgeu	r2,r8,8cd78 <__divdf3+0x854>
   8ca68:	39ffff84 	addi	r7,r7,-2
   8ca6c:	1585883a 	add	r2,r2,r22
   8ca70:	122bc83a 	sub	r21,r2,r8
   8ca74:	a00b883a 	mov	r5,r20
   8ca78:	a809883a 	mov	r4,r21
   8ca7c:	d8c00215 	stw	r3,8(sp)
   8ca80:	d9c00515 	stw	r7,20(sp)
   8ca84:	0080b400 	call	80b40 <__udivsi3>
   8ca88:	9009883a 	mov	r4,r18
   8ca8c:	100b883a 	mov	r5,r2
   8ca90:	d8800415 	stw	r2,16(sp)
   8ca94:	00817900 	call	81790 <__mulsi3>
   8ca98:	a809883a 	mov	r4,r21
   8ca9c:	a00b883a 	mov	r5,r20
   8caa0:	1025883a 	mov	r18,r2
   8caa4:	0080ba40 	call	80ba4 <__umodsi3>
   8caa8:	1004943a 	slli	r2,r2,16
   8caac:	813fffcc 	andi	r4,r16,65535
   8cab0:	d8c00217 	ldw	r3,8(sp)
   8cab4:	20a0b03a 	or	r16,r4,r2
   8cab8:	d9c00517 	ldw	r7,20(sp)
   8cabc:	da000417 	ldw	r8,16(sp)
   8cac0:	8480062e 	bgeu	r16,r18,8cadc <__divdf3+0x5b8>
   8cac4:	85a1883a 	add	r16,r16,r22
   8cac8:	40bfffc4 	addi	r2,r8,-1
   8cacc:	8580ac36 	bltu	r16,r22,8cd80 <__divdf3+0x85c>
   8cad0:	8480ab2e 	bgeu	r16,r18,8cd80 <__divdf3+0x85c>
   8cad4:	423fff84 	addi	r8,r8,-2
   8cad8:	85a1883a 	add	r16,r16,r22
   8cadc:	3804943a 	slli	r2,r7,16
   8cae0:	84a1c83a 	sub	r16,r16,r18
   8cae4:	e009883a 	mov	r4,fp
   8cae8:	1228b03a 	or	r20,r2,r8
   8caec:	a1ffffcc 	andi	r7,r20,65535
   8caf0:	a024d43a 	srli	r18,r20,16
   8caf4:	380b883a 	mov	r5,r7
   8caf8:	d8c00215 	stw	r3,8(sp)
   8cafc:	d9c00515 	stw	r7,20(sp)
   8cb00:	00817900 	call	81790 <__mulsi3>
   8cb04:	900b883a 	mov	r5,r18
   8cb08:	e009883a 	mov	r4,fp
   8cb0c:	102b883a 	mov	r21,r2
   8cb10:	00817900 	call	81790 <__mulsi3>
   8cb14:	900b883a 	mov	r5,r18
   8cb18:	b809883a 	mov	r4,r23
   8cb1c:	1039883a 	mov	fp,r2
   8cb20:	00817900 	call	81790 <__mulsi3>
   8cb24:	d9c00517 	ldw	r7,20(sp)
   8cb28:	b80b883a 	mov	r5,r23
   8cb2c:	1025883a 	mov	r18,r2
   8cb30:	3809883a 	mov	r4,r7
   8cb34:	00817900 	call	81790 <__mulsi3>
   8cb38:	a808d43a 	srli	r4,r21,16
   8cb3c:	1705883a 	add	r2,r2,fp
   8cb40:	d8c00217 	ldw	r3,8(sp)
   8cb44:	2085883a 	add	r2,r4,r2
   8cb48:	1700022e 	bgeu	r2,fp,8cb54 <__divdf3+0x630>
   8cb4c:	01000074 	movhi	r4,1
   8cb50:	9125883a 	add	r18,r18,r4
   8cb54:	1008d43a 	srli	r4,r2,16
   8cb58:	1004943a 	slli	r2,r2,16
   8cb5c:	ad7fffcc 	andi	r21,r21,65535
   8cb60:	2489883a 	add	r4,r4,r18
   8cb64:	1545883a 	add	r2,r2,r21
   8cb68:	81003836 	bltu	r16,r4,8cc4c <__divdf3+0x728>
   8cb6c:	81003626 	beq	r16,r4,8cc48 <__divdf3+0x724>
   8cb70:	a5000054 	ori	r20,r20,1
   8cb74:	1880ffc4 	addi	r2,r3,1023
   8cb78:	00bf2e0e 	bge	zero,r2,8c834 <_gp+0xfff7ac50>
   8cb7c:	a10001cc 	andi	r4,r20,7
   8cb80:	20000726 	beq	r4,zero,8cba0 <__divdf3+0x67c>
   8cb84:	a10003cc 	andi	r4,r20,15
   8cb88:	01400104 	movi	r5,4
   8cb8c:	21400426 	beq	r4,r5,8cba0 <__divdf3+0x67c>
   8cb90:	a149883a 	add	r4,r20,r5
   8cb94:	2529803a 	cmpltu	r20,r4,r20
   8cb98:	8d23883a 	add	r17,r17,r20
   8cb9c:	2029883a 	mov	r20,r4
   8cba0:	8900402c 	andhi	r4,r17,256
   8cba4:	20000426 	beq	r4,zero,8cbb8 <__divdf3+0x694>
   8cba8:	18810004 	addi	r2,r3,1024
   8cbac:	00ffc034 	movhi	r3,65280
   8cbb0:	18ffffc4 	addi	r3,r3,-1
   8cbb4:	88e2703a 	and	r17,r17,r3
   8cbb8:	00c1ff84 	movi	r3,2046
   8cbbc:	18beb416 	blt	r3,r2,8c690 <_gp+0xfff7aaac>
   8cbc0:	a028d0fa 	srli	r20,r20,3
   8cbc4:	882a977a 	slli	r21,r17,29
   8cbc8:	8820927a 	slli	r16,r17,9
   8cbcc:	1081ffcc 	andi	r2,r2,2047
   8cbd0:	ad2ab03a 	or	r21,r21,r20
   8cbd4:	8020d33a 	srli	r16,r16,12
   8cbd8:	9900004c 	andi	r4,r19,1
   8cbdc:	003eb006 	br	8c6a0 <_gp+0xfff7aabc>
   8cbe0:	8080022c 	andhi	r2,r16,8
   8cbe4:	10001226 	beq	r2,zero,8cc30 <__divdf3+0x70c>
   8cbe8:	8880022c 	andhi	r2,r17,8
   8cbec:	1000101e 	bne	r2,zero,8cc30 <__divdf3+0x70c>
   8cbf0:	00800434 	movhi	r2,16
   8cbf4:	8c000234 	orhi	r16,r17,8
   8cbf8:	10bfffc4 	addi	r2,r2,-1
   8cbfc:	b809883a 	mov	r4,r23
   8cc00:	80a0703a 	and	r16,r16,r2
   8cc04:	a02b883a 	mov	r21,r20
   8cc08:	003f0806 	br	8c82c <_gp+0xfff7ac48>
   8cc0c:	008000c4 	movi	r2,3
   8cc10:	3880b126 	beq	r7,r2,8ced8 <__divdf3+0x9b4>
   8cc14:	00800044 	movi	r2,1
   8cc18:	38805b1e 	bne	r7,r2,8cd88 <__divdf3+0x864>
   8cc1c:	e009883a 	mov	r4,fp
   8cc20:	0005883a 	mov	r2,zero
   8cc24:	0021883a 	mov	r16,zero
   8cc28:	002b883a 	mov	r21,zero
   8cc2c:	003e9c06 	br	8c6a0 <_gp+0xfff7aabc>
   8cc30:	00800434 	movhi	r2,16
   8cc34:	84000234 	orhi	r16,r16,8
   8cc38:	10bfffc4 	addi	r2,r2,-1
   8cc3c:	b009883a 	mov	r4,r22
   8cc40:	80a0703a 	and	r16,r16,r2
   8cc44:	003ef906 	br	8c82c <_gp+0xfff7ac48>
   8cc48:	103fca26 	beq	r2,zero,8cb74 <_gp+0xfff7af90>
   8cc4c:	b421883a 	add	r16,r22,r16
   8cc50:	a17fffc4 	addi	r5,r20,-1
   8cc54:	8580422e 	bgeu	r16,r22,8cd60 <__divdf3+0x83c>
   8cc58:	2829883a 	mov	r20,r5
   8cc5c:	813fc41e 	bne	r16,r4,8cb70 <_gp+0xfff7af8c>
   8cc60:	d9800017 	ldw	r6,0(sp)
   8cc64:	30bfc21e 	bne	r6,r2,8cb70 <_gp+0xfff7af8c>
   8cc68:	003fc206 	br	8cb74 <_gp+0xfff7af90>
   8cc6c:	143ff604 	addi	r16,r2,-40
   8cc70:	8c20983a 	sll	r16,r17,r16
   8cc74:	002b883a 	mov	r21,zero
   8cc78:	003eb406 	br	8c74c <_gp+0xfff7ab68>
   8cc7c:	d9800215 	stw	r6,8(sp)
   8cc80:	d9c00515 	stw	r7,20(sp)
   8cc84:	da000415 	stw	r8,16(sp)
   8cc88:	008172c0 	call	8172c <__clzsi2>
   8cc8c:	10800804 	addi	r2,r2,32
   8cc90:	da000417 	ldw	r8,16(sp)
   8cc94:	d9c00517 	ldw	r7,20(sp)
   8cc98:	d9800217 	ldw	r6,8(sp)
   8cc9c:	003ea106 	br	8c724 <_gp+0xfff7ab40>
   8cca0:	147ff604 	addi	r17,r2,-40
   8cca4:	3462983a 	sll	r17,r6,r17
   8cca8:	0029883a 	mov	r20,zero
   8ccac:	003ec906 	br	8c7d4 <_gp+0xfff7abf0>
   8ccb0:	3009883a 	mov	r4,r6
   8ccb4:	d9400115 	stw	r5,4(sp)
   8ccb8:	d9800215 	stw	r6,8(sp)
   8ccbc:	da000415 	stw	r8,16(sp)
   8ccc0:	da400315 	stw	r9,12(sp)
   8ccc4:	008172c0 	call	8172c <__clzsi2>
   8ccc8:	10800804 	addi	r2,r2,32
   8cccc:	da400317 	ldw	r9,12(sp)
   8ccd0:	da000417 	ldw	r8,16(sp)
   8ccd4:	d9800217 	ldw	r6,8(sp)
   8ccd8:	d9400117 	ldw	r5,4(sp)
   8ccdc:	003eb306 	br	8c7ac <_gp+0xfff7abc8>
   8cce0:	d9800017 	ldw	r6,0(sp)
   8cce4:	a9ab883a 	add	r21,r21,r6
   8cce8:	a98b803a 	cmpltu	r5,r21,r6
   8ccec:	2d8b883a 	add	r5,r5,r22
   8ccf0:	2a11883a 	add	r8,r5,r8
   8ccf4:	897fffc4 	addi	r5,r17,-1
   8ccf8:	b2000c2e 	bgeu	r22,r8,8cd2c <__divdf3+0x808>
   8ccfc:	41003f36 	bltu	r8,r4,8cdfc <__divdf3+0x8d8>
   8cd00:	22006c26 	beq	r4,r8,8ceb4 <__divdf3+0x990>
   8cd04:	4109c83a 	sub	r4,r8,r4
   8cd08:	2823883a 	mov	r17,r5
   8cd0c:	003f3b06 	br	8c9fc <_gp+0xfff7ae18>
   8cd10:	ad3ed336 	bltu	r21,r20,8c860 <_gp+0xfff7ac7c>
   8cd14:	a804d07a 	srli	r2,r21,1
   8cd18:	802e97fa 	slli	r23,r16,31
   8cd1c:	a82a97fa 	slli	r21,r21,31
   8cd20:	8020d07a 	srli	r16,r16,1
   8cd24:	b8aeb03a 	or	r23,r23,r2
   8cd28:	003ed006 	br	8c86c <_gp+0xfff7ac88>
   8cd2c:	b23ff51e 	bne	r22,r8,8cd04 <_gp+0xfff7b120>
   8cd30:	d9800017 	ldw	r6,0(sp)
   8cd34:	a9bff12e 	bgeu	r21,r6,8ccfc <_gp+0xfff7b118>
   8cd38:	b109c83a 	sub	r4,r22,r4
   8cd3c:	2823883a 	mov	r17,r5
   8cd40:	003f2e06 	br	8c9fc <_gp+0xfff7ae18>
   8cd44:	2021883a 	mov	r16,r4
   8cd48:	003eff06 	br	8c948 <_gp+0xfff7ad64>
   8cd4c:	2023883a 	mov	r17,r4
   8cd50:	003ee406 	br	8c8e4 <_gp+0xfff7ad00>
   8cd54:	a8bfe236 	bltu	r21,r2,8cce0 <_gp+0xfff7b0fc>
   8cd58:	0009883a 	mov	r4,zero
   8cd5c:	003f2706 	br	8c9fc <_gp+0xfff7ae18>
   8cd60:	81002d36 	bltu	r16,r4,8ce18 <__divdf3+0x8f4>
   8cd64:	24005626 	beq	r4,r16,8cec0 <__divdf3+0x99c>
   8cd68:	2829883a 	mov	r20,r5
   8cd6c:	003f8006 	br	8cb70 <_gp+0xfff7af8c>
   8cd70:	053fffc4 	movi	r20,-1
   8cd74:	003f7f06 	br	8cb74 <_gp+0xfff7af90>
   8cd78:	200f883a 	mov	r7,r4
   8cd7c:	003f3c06 	br	8ca70 <_gp+0xfff7ae8c>
   8cd80:	1011883a 	mov	r8,r2
   8cd84:	003f5506 	br	8cadc <_gp+0xfff7aef8>
   8cd88:	e027883a 	mov	r19,fp
   8cd8c:	003f7906 	br	8cb74 <_gp+0xfff7af90>
   8cd90:	010007c4 	movi	r4,31
   8cd94:	20c02816 	blt	r4,r3,8ce38 <__divdf3+0x914>
   8cd98:	00800804 	movi	r2,32
   8cd9c:	10c5c83a 	sub	r2,r2,r3
   8cda0:	888a983a 	sll	r5,r17,r2
   8cda4:	a0c8d83a 	srl	r4,r20,r3
   8cda8:	a084983a 	sll	r2,r20,r2
   8cdac:	88e2d83a 	srl	r17,r17,r3
   8cdb0:	2906b03a 	or	r3,r5,r4
   8cdb4:	1004c03a 	cmpne	r2,r2,zero
   8cdb8:	1886b03a 	or	r3,r3,r2
   8cdbc:	188001cc 	andi	r2,r3,7
   8cdc0:	10000726 	beq	r2,zero,8cde0 <__divdf3+0x8bc>
   8cdc4:	188003cc 	andi	r2,r3,15
   8cdc8:	01000104 	movi	r4,4
   8cdcc:	11000426 	beq	r2,r4,8cde0 <__divdf3+0x8bc>
   8cdd0:	1805883a 	mov	r2,r3
   8cdd4:	10c00104 	addi	r3,r2,4
   8cdd8:	1885803a 	cmpltu	r2,r3,r2
   8cddc:	88a3883a 	add	r17,r17,r2
   8cde0:	8880202c 	andhi	r2,r17,128
   8cde4:	10002926 	beq	r2,zero,8ce8c <__divdf3+0x968>
   8cde8:	9900004c 	andi	r4,r19,1
   8cdec:	00800044 	movi	r2,1
   8cdf0:	0021883a 	mov	r16,zero
   8cdf4:	002b883a 	mov	r21,zero
   8cdf8:	003e2906 	br	8c6a0 <_gp+0xfff7aabc>
   8cdfc:	d9800017 	ldw	r6,0(sp)
   8ce00:	8c7fff84 	addi	r17,r17,-2
   8ce04:	a9ab883a 	add	r21,r21,r6
   8ce08:	a98b803a 	cmpltu	r5,r21,r6
   8ce0c:	2d8b883a 	add	r5,r5,r22
   8ce10:	2a11883a 	add	r8,r5,r8
   8ce14:	003ef806 	br	8c9f8 <_gp+0xfff7ae14>
   8ce18:	d9800017 	ldw	r6,0(sp)
   8ce1c:	318f883a 	add	r7,r6,r6
   8ce20:	398b803a 	cmpltu	r5,r7,r6
   8ce24:	2d8d883a 	add	r6,r5,r22
   8ce28:	81a1883a 	add	r16,r16,r6
   8ce2c:	a17fff84 	addi	r5,r20,-2
   8ce30:	d9c00015 	stw	r7,0(sp)
   8ce34:	003f8806 	br	8cc58 <_gp+0xfff7b074>
   8ce38:	013ff844 	movi	r4,-31
   8ce3c:	2085c83a 	sub	r2,r4,r2
   8ce40:	8888d83a 	srl	r4,r17,r2
   8ce44:	00800804 	movi	r2,32
   8ce48:	18802126 	beq	r3,r2,8ced0 <__divdf3+0x9ac>
   8ce4c:	04001004 	movi	r16,64
   8ce50:	80c7c83a 	sub	r3,r16,r3
   8ce54:	88e0983a 	sll	r16,r17,r3
   8ce58:	8504b03a 	or	r2,r16,r20
   8ce5c:	1004c03a 	cmpne	r2,r2,zero
   8ce60:	2084b03a 	or	r2,r4,r2
   8ce64:	144001cc 	andi	r17,r2,7
   8ce68:	88000d1e 	bne	r17,zero,8cea0 <__divdf3+0x97c>
   8ce6c:	0021883a 	mov	r16,zero
   8ce70:	102ad0fa 	srli	r21,r2,3
   8ce74:	9900004c 	andi	r4,r19,1
   8ce78:	0005883a 	mov	r2,zero
   8ce7c:	ac6ab03a 	or	r21,r21,r17
   8ce80:	003e0706 	br	8c6a0 <_gp+0xfff7aabc>
   8ce84:	1007883a 	mov	r3,r2
   8ce88:	0023883a 	mov	r17,zero
   8ce8c:	8820927a 	slli	r16,r17,9
   8ce90:	1805883a 	mov	r2,r3
   8ce94:	8822977a 	slli	r17,r17,29
   8ce98:	8020d33a 	srli	r16,r16,12
   8ce9c:	003ff406 	br	8ce70 <_gp+0xfff7b28c>
   8cea0:	10c003cc 	andi	r3,r2,15
   8cea4:	01000104 	movi	r4,4
   8cea8:	193ff626 	beq	r3,r4,8ce84 <_gp+0xfff7b2a0>
   8ceac:	0023883a 	mov	r17,zero
   8ceb0:	003fc806 	br	8cdd4 <_gp+0xfff7b1f0>
   8ceb4:	a8bfd136 	bltu	r21,r2,8cdfc <_gp+0xfff7b218>
   8ceb8:	2823883a 	mov	r17,r5
   8cebc:	003fa606 	br	8cd58 <_gp+0xfff7b174>
   8cec0:	d9800017 	ldw	r6,0(sp)
   8cec4:	30bfd436 	bltu	r6,r2,8ce18 <_gp+0xfff7b234>
   8cec8:	2829883a 	mov	r20,r5
   8cecc:	003f6406 	br	8cc60 <_gp+0xfff7b07c>
   8ced0:	0021883a 	mov	r16,zero
   8ced4:	003fe006 	br	8ce58 <_gp+0xfff7b274>
   8ced8:	00800434 	movhi	r2,16
   8cedc:	8c000234 	orhi	r16,r17,8
   8cee0:	10bfffc4 	addi	r2,r2,-1
   8cee4:	e009883a 	mov	r4,fp
   8cee8:	80a0703a 	and	r16,r16,r2
   8ceec:	a02b883a 	mov	r21,r20
   8cef0:	003e4e06 	br	8c82c <_gp+0xfff7ac48>

0008cef4 <__eqdf2>:
   8cef4:	2804d53a 	srli	r2,r5,20
   8cef8:	3806d53a 	srli	r3,r7,20
   8cefc:	02000434 	movhi	r8,16
   8cf00:	423fffc4 	addi	r8,r8,-1
   8cf04:	1081ffcc 	andi	r2,r2,2047
   8cf08:	0281ffc4 	movi	r10,2047
   8cf0c:	2a12703a 	and	r9,r5,r8
   8cf10:	18c1ffcc 	andi	r3,r3,2047
   8cf14:	3a10703a 	and	r8,r7,r8
   8cf18:	280ad7fa 	srli	r5,r5,31
   8cf1c:	380ed7fa 	srli	r7,r7,31
   8cf20:	12801026 	beq	r2,r10,8cf64 <__eqdf2+0x70>
   8cf24:	0281ffc4 	movi	r10,2047
   8cf28:	1a800a26 	beq	r3,r10,8cf54 <__eqdf2+0x60>
   8cf2c:	10c00226 	beq	r2,r3,8cf38 <__eqdf2+0x44>
   8cf30:	00800044 	movi	r2,1
   8cf34:	f800283a 	ret
   8cf38:	4a3ffd1e 	bne	r9,r8,8cf30 <_gp+0xfff7b34c>
   8cf3c:	21bffc1e 	bne	r4,r6,8cf30 <_gp+0xfff7b34c>
   8cf40:	29c00c26 	beq	r5,r7,8cf74 <__eqdf2+0x80>
   8cf44:	103ffa1e 	bne	r2,zero,8cf30 <_gp+0xfff7b34c>
   8cf48:	2244b03a 	or	r2,r4,r9
   8cf4c:	1004c03a 	cmpne	r2,r2,zero
   8cf50:	f800283a 	ret
   8cf54:	3214b03a 	or	r10,r6,r8
   8cf58:	503ff426 	beq	r10,zero,8cf2c <_gp+0xfff7b348>
   8cf5c:	00800044 	movi	r2,1
   8cf60:	f800283a 	ret
   8cf64:	2254b03a 	or	r10,r4,r9
   8cf68:	503fee26 	beq	r10,zero,8cf24 <_gp+0xfff7b340>
   8cf6c:	00800044 	movi	r2,1
   8cf70:	f800283a 	ret
   8cf74:	0005883a 	mov	r2,zero
   8cf78:	f800283a 	ret

0008cf7c <__gedf2>:
   8cf7c:	2804d53a 	srli	r2,r5,20
   8cf80:	3806d53a 	srli	r3,r7,20
   8cf84:	02000434 	movhi	r8,16
   8cf88:	423fffc4 	addi	r8,r8,-1
   8cf8c:	1081ffcc 	andi	r2,r2,2047
   8cf90:	0241ffc4 	movi	r9,2047
   8cf94:	2a14703a 	and	r10,r5,r8
   8cf98:	18c1ffcc 	andi	r3,r3,2047
   8cf9c:	3a10703a 	and	r8,r7,r8
   8cfa0:	280ad7fa 	srli	r5,r5,31
   8cfa4:	380ed7fa 	srli	r7,r7,31
   8cfa8:	12401d26 	beq	r2,r9,8d020 <__gedf2+0xa4>
   8cfac:	0241ffc4 	movi	r9,2047
   8cfb0:	1a401226 	beq	r3,r9,8cffc <__gedf2+0x80>
   8cfb4:	1000081e 	bne	r2,zero,8cfd8 <__gedf2+0x5c>
   8cfb8:	2296b03a 	or	r11,r4,r10
   8cfbc:	5813003a 	cmpeq	r9,r11,zero
   8cfc0:	1800091e 	bne	r3,zero,8cfe8 <__gedf2+0x6c>
   8cfc4:	3218b03a 	or	r12,r6,r8
   8cfc8:	6000071e 	bne	r12,zero,8cfe8 <__gedf2+0x6c>
   8cfcc:	0005883a 	mov	r2,zero
   8cfd0:	5800101e 	bne	r11,zero,8d014 <__gedf2+0x98>
   8cfd4:	f800283a 	ret
   8cfd8:	18000c1e 	bne	r3,zero,8d00c <__gedf2+0x90>
   8cfdc:	3212b03a 	or	r9,r6,r8
   8cfe0:	48000c26 	beq	r9,zero,8d014 <__gedf2+0x98>
   8cfe4:	0013883a 	mov	r9,zero
   8cfe8:	39c03fcc 	andi	r7,r7,255
   8cfec:	48000826 	beq	r9,zero,8d010 <__gedf2+0x94>
   8cff0:	38000926 	beq	r7,zero,8d018 <__gedf2+0x9c>
   8cff4:	00800044 	movi	r2,1
   8cff8:	f800283a 	ret
   8cffc:	3212b03a 	or	r9,r6,r8
   8d000:	483fec26 	beq	r9,zero,8cfb4 <_gp+0xfff7b3d0>
   8d004:	00bfff84 	movi	r2,-2
   8d008:	f800283a 	ret
   8d00c:	39c03fcc 	andi	r7,r7,255
   8d010:	29c00626 	beq	r5,r7,8d02c <__gedf2+0xb0>
   8d014:	283ff726 	beq	r5,zero,8cff4 <_gp+0xfff7b410>
   8d018:	00bfffc4 	movi	r2,-1
   8d01c:	f800283a 	ret
   8d020:	2292b03a 	or	r9,r4,r10
   8d024:	483fe126 	beq	r9,zero,8cfac <_gp+0xfff7b3c8>
   8d028:	003ff606 	br	8d004 <_gp+0xfff7b420>
   8d02c:	18bff916 	blt	r3,r2,8d014 <_gp+0xfff7b430>
   8d030:	10c00316 	blt	r2,r3,8d040 <__gedf2+0xc4>
   8d034:	42bff736 	bltu	r8,r10,8d014 <_gp+0xfff7b430>
   8d038:	52000326 	beq	r10,r8,8d048 <__gedf2+0xcc>
   8d03c:	5200042e 	bgeu	r10,r8,8d050 <__gedf2+0xd4>
   8d040:	283fec1e 	bne	r5,zero,8cff4 <_gp+0xfff7b410>
   8d044:	003ff406 	br	8d018 <_gp+0xfff7b434>
   8d048:	313ff236 	bltu	r6,r4,8d014 <_gp+0xfff7b430>
   8d04c:	21bffc36 	bltu	r4,r6,8d040 <_gp+0xfff7b45c>
   8d050:	0005883a 	mov	r2,zero
   8d054:	f800283a 	ret

0008d058 <__ledf2>:
   8d058:	2804d53a 	srli	r2,r5,20
   8d05c:	3810d53a 	srli	r8,r7,20
   8d060:	00c00434 	movhi	r3,16
   8d064:	18ffffc4 	addi	r3,r3,-1
   8d068:	1081ffcc 	andi	r2,r2,2047
   8d06c:	0241ffc4 	movi	r9,2047
   8d070:	28d4703a 	and	r10,r5,r3
   8d074:	4201ffcc 	andi	r8,r8,2047
   8d078:	38c6703a 	and	r3,r7,r3
   8d07c:	280ad7fa 	srli	r5,r5,31
   8d080:	380ed7fa 	srli	r7,r7,31
   8d084:	12401f26 	beq	r2,r9,8d104 <__ledf2+0xac>
   8d088:	0241ffc4 	movi	r9,2047
   8d08c:	42401426 	beq	r8,r9,8d0e0 <__ledf2+0x88>
   8d090:	1000091e 	bne	r2,zero,8d0b8 <__ledf2+0x60>
   8d094:	2296b03a 	or	r11,r4,r10
   8d098:	5813003a 	cmpeq	r9,r11,zero
   8d09c:	29403fcc 	andi	r5,r5,255
   8d0a0:	40000a1e 	bne	r8,zero,8d0cc <__ledf2+0x74>
   8d0a4:	30d8b03a 	or	r12,r6,r3
   8d0a8:	6000081e 	bne	r12,zero,8d0cc <__ledf2+0x74>
   8d0ac:	0005883a 	mov	r2,zero
   8d0b0:	5800111e 	bne	r11,zero,8d0f8 <__ledf2+0xa0>
   8d0b4:	f800283a 	ret
   8d0b8:	29403fcc 	andi	r5,r5,255
   8d0bc:	40000c1e 	bne	r8,zero,8d0f0 <__ledf2+0x98>
   8d0c0:	30d2b03a 	or	r9,r6,r3
   8d0c4:	48000c26 	beq	r9,zero,8d0f8 <__ledf2+0xa0>
   8d0c8:	0013883a 	mov	r9,zero
   8d0cc:	39c03fcc 	andi	r7,r7,255
   8d0d0:	48000826 	beq	r9,zero,8d0f4 <__ledf2+0x9c>
   8d0d4:	38001126 	beq	r7,zero,8d11c <__ledf2+0xc4>
   8d0d8:	00800044 	movi	r2,1
   8d0dc:	f800283a 	ret
   8d0e0:	30d2b03a 	or	r9,r6,r3
   8d0e4:	483fea26 	beq	r9,zero,8d090 <_gp+0xfff7b4ac>
   8d0e8:	00800084 	movi	r2,2
   8d0ec:	f800283a 	ret
   8d0f0:	39c03fcc 	andi	r7,r7,255
   8d0f4:	39400726 	beq	r7,r5,8d114 <__ledf2+0xbc>
   8d0f8:	2800081e 	bne	r5,zero,8d11c <__ledf2+0xc4>
   8d0fc:	00800044 	movi	r2,1
   8d100:	f800283a 	ret
   8d104:	2292b03a 	or	r9,r4,r10
   8d108:	483fdf26 	beq	r9,zero,8d088 <_gp+0xfff7b4a4>
   8d10c:	00800084 	movi	r2,2
   8d110:	f800283a 	ret
   8d114:	4080030e 	bge	r8,r2,8d124 <__ledf2+0xcc>
   8d118:	383fef26 	beq	r7,zero,8d0d8 <_gp+0xfff7b4f4>
   8d11c:	00bfffc4 	movi	r2,-1
   8d120:	f800283a 	ret
   8d124:	123feb16 	blt	r2,r8,8d0d4 <_gp+0xfff7b4f0>
   8d128:	1abff336 	bltu	r3,r10,8d0f8 <_gp+0xfff7b514>
   8d12c:	50c00326 	beq	r10,r3,8d13c <__ledf2+0xe4>
   8d130:	50c0042e 	bgeu	r10,r3,8d144 <__ledf2+0xec>
   8d134:	283fe81e 	bne	r5,zero,8d0d8 <_gp+0xfff7b4f4>
   8d138:	003ff806 	br	8d11c <_gp+0xfff7b538>
   8d13c:	313fee36 	bltu	r6,r4,8d0f8 <_gp+0xfff7b514>
   8d140:	21bffc36 	bltu	r4,r6,8d134 <_gp+0xfff7b550>
   8d144:	0005883a 	mov	r2,zero
   8d148:	f800283a 	ret

0008d14c <__muldf3>:
   8d14c:	deffee04 	addi	sp,sp,-72
   8d150:	dd000c15 	stw	r20,48(sp)
   8d154:	2828d53a 	srli	r20,r5,20
   8d158:	ddc00f15 	stw	r23,60(sp)
   8d15c:	282ed7fa 	srli	r23,r5,31
   8d160:	dc000815 	stw	r16,32(sp)
   8d164:	04000434 	movhi	r16,16
   8d168:	dcc00b15 	stw	r19,44(sp)
   8d16c:	843fffc4 	addi	r16,r16,-1
   8d170:	dfc01115 	stw	ra,68(sp)
   8d174:	df001015 	stw	fp,64(sp)
   8d178:	dd800e15 	stw	r22,56(sp)
   8d17c:	dd400d15 	stw	r21,52(sp)
   8d180:	dc800a15 	stw	r18,40(sp)
   8d184:	dc400915 	stw	r17,36(sp)
   8d188:	a501ffcc 	andi	r20,r20,2047
   8d18c:	2c20703a 	and	r16,r5,r16
   8d190:	b827883a 	mov	r19,r23
   8d194:	ba403fcc 	andi	r9,r23,255
   8d198:	a0006026 	beq	r20,zero,8d31c <__muldf3+0x1d0>
   8d19c:	0081ffc4 	movi	r2,2047
   8d1a0:	202d883a 	mov	r22,r4
   8d1a4:	a0803626 	beq	r20,r2,8d280 <__muldf3+0x134>
   8d1a8:	84000434 	orhi	r16,r16,16
   8d1ac:	200ad77a 	srli	r5,r4,29
   8d1b0:	800490fa 	slli	r2,r16,3
   8d1b4:	202c90fa 	slli	r22,r4,3
   8d1b8:	a53f0044 	addi	r20,r20,-1023
   8d1bc:	28a0b03a 	or	r16,r5,r2
   8d1c0:	002b883a 	mov	r21,zero
   8d1c4:	000b883a 	mov	r5,zero
   8d1c8:	3804d53a 	srli	r2,r7,20
   8d1cc:	3838d7fa 	srli	fp,r7,31
   8d1d0:	04400434 	movhi	r17,16
   8d1d4:	8c7fffc4 	addi	r17,r17,-1
   8d1d8:	1081ffcc 	andi	r2,r2,2047
   8d1dc:	3025883a 	mov	r18,r6
   8d1e0:	3c62703a 	and	r17,r7,r17
   8d1e4:	e2803fcc 	andi	r10,fp,255
   8d1e8:	10006d26 	beq	r2,zero,8d3a0 <__muldf3+0x254>
   8d1ec:	00c1ffc4 	movi	r3,2047
   8d1f0:	10c06526 	beq	r2,r3,8d388 <__muldf3+0x23c>
   8d1f4:	8c400434 	orhi	r17,r17,16
   8d1f8:	300ed77a 	srli	r7,r6,29
   8d1fc:	880690fa 	slli	r3,r17,3
   8d200:	302490fa 	slli	r18,r6,3
   8d204:	10bf0044 	addi	r2,r2,-1023
   8d208:	38e2b03a 	or	r17,r7,r3
   8d20c:	000f883a 	mov	r7,zero
   8d210:	a087883a 	add	r3,r20,r2
   8d214:	010003c4 	movi	r4,15
   8d218:	3d44b03a 	or	r2,r7,r21
   8d21c:	e5ccf03a 	xor	r6,fp,r23
   8d220:	1a000044 	addi	r8,r3,1
   8d224:	20809b36 	bltu	r4,r2,8d494 <__muldf3+0x348>
   8d228:	100490ba 	slli	r2,r2,2
   8d22c:	01000274 	movhi	r4,9
   8d230:	21349004 	addi	r4,r4,-11712
   8d234:	1105883a 	add	r2,r2,r4
   8d238:	10800017 	ldw	r2,0(r2)
   8d23c:	1000683a 	jmp	r2
   8d240:	0008d494 	movui	zero,9042
   8d244:	0008d2a0 	cmpeqi	zero,zero,9034
   8d248:	0008d2a0 	cmpeqi	zero,zero,9034
   8d24c:	0008d29c 	xori	zero,zero,9034
   8d250:	0008d470 	cmpltui	zero,zero,9041
   8d254:	0008d470 	cmpltui	zero,zero,9041
   8d258:	0008d458 	cmpnei	zero,zero,9041
   8d25c:	0008d29c 	xori	zero,zero,9034
   8d260:	0008d470 	cmpltui	zero,zero,9041
   8d264:	0008d458 	cmpnei	zero,zero,9041
   8d268:	0008d470 	cmpltui	zero,zero,9041
   8d26c:	0008d29c 	xori	zero,zero,9034
   8d270:	0008d480 	call	8d48 <__alt_mem_onchip_flash_0_data-0x772b8>
   8d274:	0008d480 	call	8d48 <__alt_mem_onchip_flash_0_data-0x772b8>
   8d278:	0008d480 	call	8d48 <__alt_mem_onchip_flash_0_data-0x772b8>
   8d27c:	0008d7e0 	cmpeqi	zero,zero,9055
   8d280:	2404b03a 	or	r2,r4,r16
   8d284:	1000711e 	bne	r2,zero,8d44c <__muldf3+0x300>
   8d288:	05400204 	movi	r21,8
   8d28c:	0021883a 	mov	r16,zero
   8d290:	002d883a 	mov	r22,zero
   8d294:	01400084 	movi	r5,2
   8d298:	003fcb06 	br	8d1c8 <_gp+0xfff7b5e4>
   8d29c:	500d883a 	mov	r6,r10
   8d2a0:	00800084 	movi	r2,2
   8d2a4:	38805926 	beq	r7,r2,8d40c <__muldf3+0x2c0>
   8d2a8:	008000c4 	movi	r2,3
   8d2ac:	3881bb26 	beq	r7,r2,8d99c <__muldf3+0x850>
   8d2b0:	00800044 	movi	r2,1
   8d2b4:	3881961e 	bne	r7,r2,8d910 <__muldf3+0x7c4>
   8d2b8:	3027883a 	mov	r19,r6
   8d2bc:	0005883a 	mov	r2,zero
   8d2c0:	0021883a 	mov	r16,zero
   8d2c4:	002d883a 	mov	r22,zero
   8d2c8:	1004953a 	slli	r2,r2,20
   8d2cc:	98c03fcc 	andi	r3,r19,255
   8d2d0:	04400434 	movhi	r17,16
   8d2d4:	8c7fffc4 	addi	r17,r17,-1
   8d2d8:	180697fa 	slli	r3,r3,31
   8d2dc:	8460703a 	and	r16,r16,r17
   8d2e0:	80a0b03a 	or	r16,r16,r2
   8d2e4:	80c6b03a 	or	r3,r16,r3
   8d2e8:	b005883a 	mov	r2,r22
   8d2ec:	dfc01117 	ldw	ra,68(sp)
   8d2f0:	df001017 	ldw	fp,64(sp)
   8d2f4:	ddc00f17 	ldw	r23,60(sp)
   8d2f8:	dd800e17 	ldw	r22,56(sp)
   8d2fc:	dd400d17 	ldw	r21,52(sp)
   8d300:	dd000c17 	ldw	r20,48(sp)
   8d304:	dcc00b17 	ldw	r19,44(sp)
   8d308:	dc800a17 	ldw	r18,40(sp)
   8d30c:	dc400917 	ldw	r17,36(sp)
   8d310:	dc000817 	ldw	r16,32(sp)
   8d314:	dec01204 	addi	sp,sp,72
   8d318:	f800283a 	ret
   8d31c:	2404b03a 	or	r2,r4,r16
   8d320:	202b883a 	mov	r21,r4
   8d324:	10004426 	beq	r2,zero,8d438 <__muldf3+0x2ec>
   8d328:	80015126 	beq	r16,zero,8d870 <__muldf3+0x724>
   8d32c:	8009883a 	mov	r4,r16
   8d330:	d9800715 	stw	r6,28(sp)
   8d334:	d9c00215 	stw	r7,8(sp)
   8d338:	da400415 	stw	r9,16(sp)
   8d33c:	008172c0 	call	8172c <__clzsi2>
   8d340:	d9800717 	ldw	r6,28(sp)
   8d344:	d9c00217 	ldw	r7,8(sp)
   8d348:	da400417 	ldw	r9,16(sp)
   8d34c:	113ffd44 	addi	r4,r2,-11
   8d350:	00c00704 	movi	r3,28
   8d354:	19014216 	blt	r3,r4,8d860 <__muldf3+0x714>
   8d358:	00c00744 	movi	r3,29
   8d35c:	15bffe04 	addi	r22,r2,-8
   8d360:	1907c83a 	sub	r3,r3,r4
   8d364:	85a0983a 	sll	r16,r16,r22
   8d368:	a8c6d83a 	srl	r3,r21,r3
   8d36c:	adac983a 	sll	r22,r21,r22
   8d370:	1c20b03a 	or	r16,r3,r16
   8d374:	1080fcc4 	addi	r2,r2,1011
   8d378:	00a9c83a 	sub	r20,zero,r2
   8d37c:	002b883a 	mov	r21,zero
   8d380:	000b883a 	mov	r5,zero
   8d384:	003f9006 	br	8d1c8 <_gp+0xfff7b5e4>
   8d388:	3446b03a 	or	r3,r6,r17
   8d38c:	1800281e 	bne	r3,zero,8d430 <__muldf3+0x2e4>
   8d390:	0023883a 	mov	r17,zero
   8d394:	0025883a 	mov	r18,zero
   8d398:	01c00084 	movi	r7,2
   8d39c:	003f9c06 	br	8d210 <_gp+0xfff7b62c>
   8d3a0:	3446b03a 	or	r3,r6,r17
   8d3a4:	18001e26 	beq	r3,zero,8d420 <__muldf3+0x2d4>
   8d3a8:	88012126 	beq	r17,zero,8d830 <__muldf3+0x6e4>
   8d3ac:	8809883a 	mov	r4,r17
   8d3b0:	d9400215 	stw	r5,8(sp)
   8d3b4:	d9800715 	stw	r6,28(sp)
   8d3b8:	da400415 	stw	r9,16(sp)
   8d3bc:	da800315 	stw	r10,12(sp)
   8d3c0:	008172c0 	call	8172c <__clzsi2>
   8d3c4:	d9400217 	ldw	r5,8(sp)
   8d3c8:	d9800717 	ldw	r6,28(sp)
   8d3cc:	da400417 	ldw	r9,16(sp)
   8d3d0:	da800317 	ldw	r10,12(sp)
   8d3d4:	113ffd44 	addi	r4,r2,-11
   8d3d8:	00c00704 	movi	r3,28
   8d3dc:	19011016 	blt	r3,r4,8d820 <__muldf3+0x6d4>
   8d3e0:	00c00744 	movi	r3,29
   8d3e4:	14bffe04 	addi	r18,r2,-8
   8d3e8:	1907c83a 	sub	r3,r3,r4
   8d3ec:	8ca2983a 	sll	r17,r17,r18
   8d3f0:	30c6d83a 	srl	r3,r6,r3
   8d3f4:	34a4983a 	sll	r18,r6,r18
   8d3f8:	1c62b03a 	or	r17,r3,r17
   8d3fc:	1080fcc4 	addi	r2,r2,1011
   8d400:	0085c83a 	sub	r2,zero,r2
   8d404:	000f883a 	mov	r7,zero
   8d408:	003f8106 	br	8d210 <_gp+0xfff7b62c>
   8d40c:	3027883a 	mov	r19,r6
   8d410:	0081ffc4 	movi	r2,2047
   8d414:	0021883a 	mov	r16,zero
   8d418:	002d883a 	mov	r22,zero
   8d41c:	003faa06 	br	8d2c8 <_gp+0xfff7b6e4>
   8d420:	0023883a 	mov	r17,zero
   8d424:	0025883a 	mov	r18,zero
   8d428:	01c00044 	movi	r7,1
   8d42c:	003f7806 	br	8d210 <_gp+0xfff7b62c>
   8d430:	01c000c4 	movi	r7,3
   8d434:	003f7606 	br	8d210 <_gp+0xfff7b62c>
   8d438:	05400104 	movi	r21,4
   8d43c:	0021883a 	mov	r16,zero
   8d440:	002d883a 	mov	r22,zero
   8d444:	01400044 	movi	r5,1
   8d448:	003f5f06 	br	8d1c8 <_gp+0xfff7b5e4>
   8d44c:	05400304 	movi	r21,12
   8d450:	014000c4 	movi	r5,3
   8d454:	003f5c06 	br	8d1c8 <_gp+0xfff7b5e4>
   8d458:	04000434 	movhi	r16,16
   8d45c:	0027883a 	mov	r19,zero
   8d460:	843fffc4 	addi	r16,r16,-1
   8d464:	05bfffc4 	movi	r22,-1
   8d468:	0081ffc4 	movi	r2,2047
   8d46c:	003f9606 	br	8d2c8 <_gp+0xfff7b6e4>
   8d470:	8023883a 	mov	r17,r16
   8d474:	b025883a 	mov	r18,r22
   8d478:	280f883a 	mov	r7,r5
   8d47c:	003f8806 	br	8d2a0 <_gp+0xfff7b6bc>
   8d480:	8023883a 	mov	r17,r16
   8d484:	b025883a 	mov	r18,r22
   8d488:	480d883a 	mov	r6,r9
   8d48c:	280f883a 	mov	r7,r5
   8d490:	003f8306 	br	8d2a0 <_gp+0xfff7b6bc>
   8d494:	b026d43a 	srli	r19,r22,16
   8d498:	902ed43a 	srli	r23,r18,16
   8d49c:	b5bfffcc 	andi	r22,r22,65535
   8d4a0:	94bfffcc 	andi	r18,r18,65535
   8d4a4:	b00b883a 	mov	r5,r22
   8d4a8:	9009883a 	mov	r4,r18
   8d4ac:	d8c00515 	stw	r3,20(sp)
   8d4b0:	d9800715 	stw	r6,28(sp)
   8d4b4:	da000615 	stw	r8,24(sp)
   8d4b8:	00817900 	call	81790 <__mulsi3>
   8d4bc:	980b883a 	mov	r5,r19
   8d4c0:	9009883a 	mov	r4,r18
   8d4c4:	1029883a 	mov	r20,r2
   8d4c8:	00817900 	call	81790 <__mulsi3>
   8d4cc:	b80b883a 	mov	r5,r23
   8d4d0:	9809883a 	mov	r4,r19
   8d4d4:	102b883a 	mov	r21,r2
   8d4d8:	00817900 	call	81790 <__mulsi3>
   8d4dc:	b809883a 	mov	r4,r23
   8d4e0:	b00b883a 	mov	r5,r22
   8d4e4:	1039883a 	mov	fp,r2
   8d4e8:	00817900 	call	81790 <__mulsi3>
   8d4ec:	a008d43a 	srli	r4,r20,16
   8d4f0:	1545883a 	add	r2,r2,r21
   8d4f4:	d8c00517 	ldw	r3,20(sp)
   8d4f8:	2085883a 	add	r2,r4,r2
   8d4fc:	d9800717 	ldw	r6,28(sp)
   8d500:	da000617 	ldw	r8,24(sp)
   8d504:	1540022e 	bgeu	r2,r21,8d510 <__muldf3+0x3c4>
   8d508:	01000074 	movhi	r4,1
   8d50c:	e139883a 	add	fp,fp,r4
   8d510:	100e943a 	slli	r7,r2,16
   8d514:	1004d43a 	srli	r2,r2,16
   8d518:	882ad43a 	srli	r21,r17,16
   8d51c:	a53fffcc 	andi	r20,r20,65535
   8d520:	8c7fffcc 	andi	r17,r17,65535
   8d524:	3d29883a 	add	r20,r7,r20
   8d528:	b00b883a 	mov	r5,r22
   8d52c:	8809883a 	mov	r4,r17
   8d530:	d8c00515 	stw	r3,20(sp)
   8d534:	d9800715 	stw	r6,28(sp)
   8d538:	da000615 	stw	r8,24(sp)
   8d53c:	dd000115 	stw	r20,4(sp)
   8d540:	d8800015 	stw	r2,0(sp)
   8d544:	00817900 	call	81790 <__mulsi3>
   8d548:	980b883a 	mov	r5,r19
   8d54c:	8809883a 	mov	r4,r17
   8d550:	d8800215 	stw	r2,8(sp)
   8d554:	00817900 	call	81790 <__mulsi3>
   8d558:	9809883a 	mov	r4,r19
   8d55c:	a80b883a 	mov	r5,r21
   8d560:	1029883a 	mov	r20,r2
   8d564:	00817900 	call	81790 <__mulsi3>
   8d568:	b00b883a 	mov	r5,r22
   8d56c:	a809883a 	mov	r4,r21
   8d570:	d8800415 	stw	r2,16(sp)
   8d574:	00817900 	call	81790 <__mulsi3>
   8d578:	d9c00217 	ldw	r7,8(sp)
   8d57c:	1505883a 	add	r2,r2,r20
   8d580:	d8c00517 	ldw	r3,20(sp)
   8d584:	3826d43a 	srli	r19,r7,16
   8d588:	d9800717 	ldw	r6,28(sp)
   8d58c:	da000617 	ldw	r8,24(sp)
   8d590:	9885883a 	add	r2,r19,r2
   8d594:	da400417 	ldw	r9,16(sp)
   8d598:	1500022e 	bgeu	r2,r20,8d5a4 <__muldf3+0x458>
   8d59c:	01000074 	movhi	r4,1
   8d5a0:	4913883a 	add	r9,r9,r4
   8d5a4:	1028d43a 	srli	r20,r2,16
   8d5a8:	1004943a 	slli	r2,r2,16
   8d5ac:	802cd43a 	srli	r22,r16,16
   8d5b0:	843fffcc 	andi	r16,r16,65535
   8d5b4:	3cffffcc 	andi	r19,r7,65535
   8d5b8:	9009883a 	mov	r4,r18
   8d5bc:	800b883a 	mov	r5,r16
   8d5c0:	a269883a 	add	r20,r20,r9
   8d5c4:	d8c00515 	stw	r3,20(sp)
   8d5c8:	d9800715 	stw	r6,28(sp)
   8d5cc:	da000615 	stw	r8,24(sp)
   8d5d0:	14e7883a 	add	r19,r2,r19
   8d5d4:	00817900 	call	81790 <__mulsi3>
   8d5d8:	9009883a 	mov	r4,r18
   8d5dc:	b00b883a 	mov	r5,r22
   8d5e0:	d8800315 	stw	r2,12(sp)
   8d5e4:	00817900 	call	81790 <__mulsi3>
   8d5e8:	b809883a 	mov	r4,r23
   8d5ec:	b00b883a 	mov	r5,r22
   8d5f0:	d8800215 	stw	r2,8(sp)
   8d5f4:	00817900 	call	81790 <__mulsi3>
   8d5f8:	b80b883a 	mov	r5,r23
   8d5fc:	8009883a 	mov	r4,r16
   8d600:	d8800415 	stw	r2,16(sp)
   8d604:	00817900 	call	81790 <__mulsi3>
   8d608:	da800317 	ldw	r10,12(sp)
   8d60c:	d9c00217 	ldw	r7,8(sp)
   8d610:	d9000017 	ldw	r4,0(sp)
   8d614:	502ed43a 	srli	r23,r10,16
   8d618:	11c5883a 	add	r2,r2,r7
   8d61c:	24e5883a 	add	r18,r4,r19
   8d620:	b885883a 	add	r2,r23,r2
   8d624:	d8c00517 	ldw	r3,20(sp)
   8d628:	d9800717 	ldw	r6,28(sp)
   8d62c:	da000617 	ldw	r8,24(sp)
   8d630:	da400417 	ldw	r9,16(sp)
   8d634:	11c0022e 	bgeu	r2,r7,8d640 <__muldf3+0x4f4>
   8d638:	01000074 	movhi	r4,1
   8d63c:	4913883a 	add	r9,r9,r4
   8d640:	100ed43a 	srli	r7,r2,16
   8d644:	1004943a 	slli	r2,r2,16
   8d648:	55ffffcc 	andi	r23,r10,65535
   8d64c:	3a53883a 	add	r9,r7,r9
   8d650:	8809883a 	mov	r4,r17
   8d654:	800b883a 	mov	r5,r16
   8d658:	d8c00515 	stw	r3,20(sp)
   8d65c:	d9800715 	stw	r6,28(sp)
   8d660:	da000615 	stw	r8,24(sp)
   8d664:	da400415 	stw	r9,16(sp)
   8d668:	15ef883a 	add	r23,r2,r23
   8d66c:	00817900 	call	81790 <__mulsi3>
   8d670:	8809883a 	mov	r4,r17
   8d674:	b00b883a 	mov	r5,r22
   8d678:	d8800215 	stw	r2,8(sp)
   8d67c:	00817900 	call	81790 <__mulsi3>
   8d680:	b00b883a 	mov	r5,r22
   8d684:	a809883a 	mov	r4,r21
   8d688:	d8800315 	stw	r2,12(sp)
   8d68c:	00817900 	call	81790 <__mulsi3>
   8d690:	8009883a 	mov	r4,r16
   8d694:	a80b883a 	mov	r5,r21
   8d698:	1023883a 	mov	r17,r2
   8d69c:	00817900 	call	81790 <__mulsi3>
   8d6a0:	d9c00217 	ldw	r7,8(sp)
   8d6a4:	da800317 	ldw	r10,12(sp)
   8d6a8:	d8c00517 	ldw	r3,20(sp)
   8d6ac:	3808d43a 	srli	r4,r7,16
   8d6b0:	1285883a 	add	r2,r2,r10
   8d6b4:	d9800717 	ldw	r6,28(sp)
   8d6b8:	2085883a 	add	r2,r4,r2
   8d6bc:	da000617 	ldw	r8,24(sp)
   8d6c0:	da400417 	ldw	r9,16(sp)
   8d6c4:	1280022e 	bgeu	r2,r10,8d6d0 <__muldf3+0x584>
   8d6c8:	01000074 	movhi	r4,1
   8d6cc:	8923883a 	add	r17,r17,r4
   8d6d0:	1008943a 	slli	r4,r2,16
   8d6d4:	39ffffcc 	andi	r7,r7,65535
   8d6d8:	e4b9883a 	add	fp,fp,r18
   8d6dc:	21cf883a 	add	r7,r4,r7
   8d6e0:	e4e7803a 	cmpltu	r19,fp,r19
   8d6e4:	3d0f883a 	add	r7,r7,r20
   8d6e8:	bf39883a 	add	fp,r23,fp
   8d6ec:	99c9883a 	add	r4,r19,r7
   8d6f0:	e5ef803a 	cmpltu	r23,fp,r23
   8d6f4:	490b883a 	add	r5,r9,r4
   8d6f8:	1004d43a 	srli	r2,r2,16
   8d6fc:	b965883a 	add	r18,r23,r5
   8d700:	24c9803a 	cmpltu	r4,r4,r19
   8d704:	3d29803a 	cmpltu	r20,r7,r20
   8d708:	a128b03a 	or	r20,r20,r4
   8d70c:	95ef803a 	cmpltu	r23,r18,r23
   8d710:	2a53803a 	cmpltu	r9,r5,r9
   8d714:	a0a9883a 	add	r20,r20,r2
   8d718:	4deeb03a 	or	r23,r9,r23
   8d71c:	a5ef883a 	add	r23,r20,r23
   8d720:	bc63883a 	add	r17,r23,r17
   8d724:	e004927a 	slli	r2,fp,9
   8d728:	d9000117 	ldw	r4,4(sp)
   8d72c:	882e927a 	slli	r23,r17,9
   8d730:	9022d5fa 	srli	r17,r18,23
   8d734:	e038d5fa 	srli	fp,fp,23
   8d738:	1104b03a 	or	r2,r2,r4
   8d73c:	9024927a 	slli	r18,r18,9
   8d740:	1004c03a 	cmpne	r2,r2,zero
   8d744:	bc62b03a 	or	r17,r23,r17
   8d748:	1738b03a 	or	fp,r2,fp
   8d74c:	8880402c 	andhi	r2,r17,256
   8d750:	e4a4b03a 	or	r18,fp,r18
   8d754:	10000726 	beq	r2,zero,8d774 <__muldf3+0x628>
   8d758:	9006d07a 	srli	r3,r18,1
   8d75c:	880497fa 	slli	r2,r17,31
   8d760:	9480004c 	andi	r18,r18,1
   8d764:	8822d07a 	srli	r17,r17,1
   8d768:	1ca4b03a 	or	r18,r3,r18
   8d76c:	14a4b03a 	or	r18,r2,r18
   8d770:	4007883a 	mov	r3,r8
   8d774:	1880ffc4 	addi	r2,r3,1023
   8d778:	0080460e 	bge	zero,r2,8d894 <__muldf3+0x748>
   8d77c:	910001cc 	andi	r4,r18,7
   8d780:	20000726 	beq	r4,zero,8d7a0 <__muldf3+0x654>
   8d784:	910003cc 	andi	r4,r18,15
   8d788:	01400104 	movi	r5,4
   8d78c:	21400426 	beq	r4,r5,8d7a0 <__muldf3+0x654>
   8d790:	9149883a 	add	r4,r18,r5
   8d794:	24a5803a 	cmpltu	r18,r4,r18
   8d798:	8ca3883a 	add	r17,r17,r18
   8d79c:	2025883a 	mov	r18,r4
   8d7a0:	8900402c 	andhi	r4,r17,256
   8d7a4:	20000426 	beq	r4,zero,8d7b8 <__muldf3+0x66c>
   8d7a8:	18810004 	addi	r2,r3,1024
   8d7ac:	00ffc034 	movhi	r3,65280
   8d7b0:	18ffffc4 	addi	r3,r3,-1
   8d7b4:	88e2703a 	and	r17,r17,r3
   8d7b8:	00c1ff84 	movi	r3,2046
   8d7bc:	18bf1316 	blt	r3,r2,8d40c <_gp+0xfff7b828>
   8d7c0:	882c977a 	slli	r22,r17,29
   8d7c4:	9024d0fa 	srli	r18,r18,3
   8d7c8:	8822927a 	slli	r17,r17,9
   8d7cc:	1081ffcc 	andi	r2,r2,2047
   8d7d0:	b4acb03a 	or	r22,r22,r18
   8d7d4:	8820d33a 	srli	r16,r17,12
   8d7d8:	3027883a 	mov	r19,r6
   8d7dc:	003eba06 	br	8d2c8 <_gp+0xfff7b6e4>
   8d7e0:	8080022c 	andhi	r2,r16,8
   8d7e4:	10000926 	beq	r2,zero,8d80c <__muldf3+0x6c0>
   8d7e8:	8880022c 	andhi	r2,r17,8
   8d7ec:	1000071e 	bne	r2,zero,8d80c <__muldf3+0x6c0>
   8d7f0:	00800434 	movhi	r2,16
   8d7f4:	8c000234 	orhi	r16,r17,8
   8d7f8:	10bfffc4 	addi	r2,r2,-1
   8d7fc:	e027883a 	mov	r19,fp
   8d800:	80a0703a 	and	r16,r16,r2
   8d804:	902d883a 	mov	r22,r18
   8d808:	003f1706 	br	8d468 <_gp+0xfff7b884>
   8d80c:	00800434 	movhi	r2,16
   8d810:	84000234 	orhi	r16,r16,8
   8d814:	10bfffc4 	addi	r2,r2,-1
   8d818:	80a0703a 	and	r16,r16,r2
   8d81c:	003f1206 	br	8d468 <_gp+0xfff7b884>
   8d820:	147ff604 	addi	r17,r2,-40
   8d824:	3462983a 	sll	r17,r6,r17
   8d828:	0025883a 	mov	r18,zero
   8d82c:	003ef306 	br	8d3fc <_gp+0xfff7b818>
   8d830:	3009883a 	mov	r4,r6
   8d834:	d9400215 	stw	r5,8(sp)
   8d838:	d9800715 	stw	r6,28(sp)
   8d83c:	da400415 	stw	r9,16(sp)
   8d840:	da800315 	stw	r10,12(sp)
   8d844:	008172c0 	call	8172c <__clzsi2>
   8d848:	10800804 	addi	r2,r2,32
   8d84c:	da800317 	ldw	r10,12(sp)
   8d850:	da400417 	ldw	r9,16(sp)
   8d854:	d9800717 	ldw	r6,28(sp)
   8d858:	d9400217 	ldw	r5,8(sp)
   8d85c:	003edd06 	br	8d3d4 <_gp+0xfff7b7f0>
   8d860:	143ff604 	addi	r16,r2,-40
   8d864:	ac20983a 	sll	r16,r21,r16
   8d868:	002d883a 	mov	r22,zero
   8d86c:	003ec106 	br	8d374 <_gp+0xfff7b790>
   8d870:	d9800715 	stw	r6,28(sp)
   8d874:	d9c00215 	stw	r7,8(sp)
   8d878:	da400415 	stw	r9,16(sp)
   8d87c:	008172c0 	call	8172c <__clzsi2>
   8d880:	10800804 	addi	r2,r2,32
   8d884:	da400417 	ldw	r9,16(sp)
   8d888:	d9c00217 	ldw	r7,8(sp)
   8d88c:	d9800717 	ldw	r6,28(sp)
   8d890:	003eae06 	br	8d34c <_gp+0xfff7b768>
   8d894:	00c00044 	movi	r3,1
   8d898:	1887c83a 	sub	r3,r3,r2
   8d89c:	01000e04 	movi	r4,56
   8d8a0:	20fe8516 	blt	r4,r3,8d2b8 <_gp+0xfff7b6d4>
   8d8a4:	010007c4 	movi	r4,31
   8d8a8:	20c01b16 	blt	r4,r3,8d918 <__muldf3+0x7cc>
   8d8ac:	00800804 	movi	r2,32
   8d8b0:	10c5c83a 	sub	r2,r2,r3
   8d8b4:	888a983a 	sll	r5,r17,r2
   8d8b8:	90c8d83a 	srl	r4,r18,r3
   8d8bc:	9084983a 	sll	r2,r18,r2
   8d8c0:	88e2d83a 	srl	r17,r17,r3
   8d8c4:	2906b03a 	or	r3,r5,r4
   8d8c8:	1004c03a 	cmpne	r2,r2,zero
   8d8cc:	1886b03a 	or	r3,r3,r2
   8d8d0:	188001cc 	andi	r2,r3,7
   8d8d4:	10000726 	beq	r2,zero,8d8f4 <__muldf3+0x7a8>
   8d8d8:	188003cc 	andi	r2,r3,15
   8d8dc:	01000104 	movi	r4,4
   8d8e0:	11000426 	beq	r2,r4,8d8f4 <__muldf3+0x7a8>
   8d8e4:	1805883a 	mov	r2,r3
   8d8e8:	10c00104 	addi	r3,r2,4
   8d8ec:	1885803a 	cmpltu	r2,r3,r2
   8d8f0:	88a3883a 	add	r17,r17,r2
   8d8f4:	8880202c 	andhi	r2,r17,128
   8d8f8:	10001c26 	beq	r2,zero,8d96c <__muldf3+0x820>
   8d8fc:	3027883a 	mov	r19,r6
   8d900:	00800044 	movi	r2,1
   8d904:	0021883a 	mov	r16,zero
   8d908:	002d883a 	mov	r22,zero
   8d90c:	003e6e06 	br	8d2c8 <_gp+0xfff7b6e4>
   8d910:	4007883a 	mov	r3,r8
   8d914:	003f9706 	br	8d774 <_gp+0xfff7bb90>
   8d918:	017ff844 	movi	r5,-31
   8d91c:	2885c83a 	sub	r2,r5,r2
   8d920:	888ad83a 	srl	r5,r17,r2
   8d924:	00800804 	movi	r2,32
   8d928:	18801a26 	beq	r3,r2,8d994 <__muldf3+0x848>
   8d92c:	01001004 	movi	r4,64
   8d930:	20c7c83a 	sub	r3,r4,r3
   8d934:	88e2983a 	sll	r17,r17,r3
   8d938:	8ca4b03a 	or	r18,r17,r18
   8d93c:	9004c03a 	cmpne	r2,r18,zero
   8d940:	2884b03a 	or	r2,r5,r2
   8d944:	144001cc 	andi	r17,r2,7
   8d948:	88000d1e 	bne	r17,zero,8d980 <__muldf3+0x834>
   8d94c:	0021883a 	mov	r16,zero
   8d950:	102cd0fa 	srli	r22,r2,3
   8d954:	3027883a 	mov	r19,r6
   8d958:	0005883a 	mov	r2,zero
   8d95c:	b46cb03a 	or	r22,r22,r17
   8d960:	003e5906 	br	8d2c8 <_gp+0xfff7b6e4>
   8d964:	1007883a 	mov	r3,r2
   8d968:	0023883a 	mov	r17,zero
   8d96c:	8820927a 	slli	r16,r17,9
   8d970:	1805883a 	mov	r2,r3
   8d974:	8822977a 	slli	r17,r17,29
   8d978:	8020d33a 	srli	r16,r16,12
   8d97c:	003ff406 	br	8d950 <_gp+0xfff7bd6c>
   8d980:	10c003cc 	andi	r3,r2,15
   8d984:	01000104 	movi	r4,4
   8d988:	193ff626 	beq	r3,r4,8d964 <_gp+0xfff7bd80>
   8d98c:	0023883a 	mov	r17,zero
   8d990:	003fd506 	br	8d8e8 <_gp+0xfff7bd04>
   8d994:	0023883a 	mov	r17,zero
   8d998:	003fe706 	br	8d938 <_gp+0xfff7bd54>
   8d99c:	00800434 	movhi	r2,16
   8d9a0:	8c000234 	orhi	r16,r17,8
   8d9a4:	10bfffc4 	addi	r2,r2,-1
   8d9a8:	3027883a 	mov	r19,r6
   8d9ac:	80a0703a 	and	r16,r16,r2
   8d9b0:	902d883a 	mov	r22,r18
   8d9b4:	003eac06 	br	8d468 <_gp+0xfff7b884>

0008d9b8 <__subdf3>:
   8d9b8:	02000434 	movhi	r8,16
   8d9bc:	423fffc4 	addi	r8,r8,-1
   8d9c0:	defffb04 	addi	sp,sp,-20
   8d9c4:	2a14703a 	and	r10,r5,r8
   8d9c8:	3812d53a 	srli	r9,r7,20
   8d9cc:	3a10703a 	and	r8,r7,r8
   8d9d0:	2006d77a 	srli	r3,r4,29
   8d9d4:	3004d77a 	srli	r2,r6,29
   8d9d8:	dc000015 	stw	r16,0(sp)
   8d9dc:	501490fa 	slli	r10,r10,3
   8d9e0:	2820d53a 	srli	r16,r5,20
   8d9e4:	401090fa 	slli	r8,r8,3
   8d9e8:	dc800215 	stw	r18,8(sp)
   8d9ec:	dc400115 	stw	r17,4(sp)
   8d9f0:	dfc00415 	stw	ra,16(sp)
   8d9f4:	202290fa 	slli	r17,r4,3
   8d9f8:	dcc00315 	stw	r19,12(sp)
   8d9fc:	4a41ffcc 	andi	r9,r9,2047
   8da00:	0101ffc4 	movi	r4,2047
   8da04:	2824d7fa 	srli	r18,r5,31
   8da08:	8401ffcc 	andi	r16,r16,2047
   8da0c:	50c6b03a 	or	r3,r10,r3
   8da10:	380ed7fa 	srli	r7,r7,31
   8da14:	408ab03a 	or	r5,r8,r2
   8da18:	300c90fa 	slli	r6,r6,3
   8da1c:	49009626 	beq	r9,r4,8dc78 <__subdf3+0x2c0>
   8da20:	39c0005c 	xori	r7,r7,1
   8da24:	8245c83a 	sub	r2,r16,r9
   8da28:	3c807426 	beq	r7,r18,8dbfc <__subdf3+0x244>
   8da2c:	0080af0e 	bge	zero,r2,8dcec <__subdf3+0x334>
   8da30:	48002a1e 	bne	r9,zero,8dadc <__subdf3+0x124>
   8da34:	2988b03a 	or	r4,r5,r6
   8da38:	20009a1e 	bne	r4,zero,8dca4 <__subdf3+0x2ec>
   8da3c:	888001cc 	andi	r2,r17,7
   8da40:	10000726 	beq	r2,zero,8da60 <__subdf3+0xa8>
   8da44:	888003cc 	andi	r2,r17,15
   8da48:	01000104 	movi	r4,4
   8da4c:	11000426 	beq	r2,r4,8da60 <__subdf3+0xa8>
   8da50:	890b883a 	add	r5,r17,r4
   8da54:	2c63803a 	cmpltu	r17,r5,r17
   8da58:	1c47883a 	add	r3,r3,r17
   8da5c:	2823883a 	mov	r17,r5
   8da60:	1880202c 	andhi	r2,r3,128
   8da64:	10005926 	beq	r2,zero,8dbcc <__subdf3+0x214>
   8da68:	84000044 	addi	r16,r16,1
   8da6c:	0081ffc4 	movi	r2,2047
   8da70:	8080be26 	beq	r16,r2,8dd6c <__subdf3+0x3b4>
   8da74:	017fe034 	movhi	r5,65408
   8da78:	297fffc4 	addi	r5,r5,-1
   8da7c:	1946703a 	and	r3,r3,r5
   8da80:	1804977a 	slli	r2,r3,29
   8da84:	1806927a 	slli	r3,r3,9
   8da88:	8822d0fa 	srli	r17,r17,3
   8da8c:	8401ffcc 	andi	r16,r16,2047
   8da90:	180ad33a 	srli	r5,r3,12
   8da94:	9100004c 	andi	r4,r18,1
   8da98:	1444b03a 	or	r2,r2,r17
   8da9c:	80c1ffcc 	andi	r3,r16,2047
   8daa0:	1820953a 	slli	r16,r3,20
   8daa4:	20c03fcc 	andi	r3,r4,255
   8daa8:	180897fa 	slli	r4,r3,31
   8daac:	00c00434 	movhi	r3,16
   8dab0:	18ffffc4 	addi	r3,r3,-1
   8dab4:	28c6703a 	and	r3,r5,r3
   8dab8:	1c06b03a 	or	r3,r3,r16
   8dabc:	1906b03a 	or	r3,r3,r4
   8dac0:	dfc00417 	ldw	ra,16(sp)
   8dac4:	dcc00317 	ldw	r19,12(sp)
   8dac8:	dc800217 	ldw	r18,8(sp)
   8dacc:	dc400117 	ldw	r17,4(sp)
   8dad0:	dc000017 	ldw	r16,0(sp)
   8dad4:	dec00504 	addi	sp,sp,20
   8dad8:	f800283a 	ret
   8dadc:	0101ffc4 	movi	r4,2047
   8dae0:	813fd626 	beq	r16,r4,8da3c <_gp+0xfff7be58>
   8dae4:	29402034 	orhi	r5,r5,128
   8dae8:	01000e04 	movi	r4,56
   8daec:	2080a316 	blt	r4,r2,8dd7c <__subdf3+0x3c4>
   8daf0:	010007c4 	movi	r4,31
   8daf4:	2080c616 	blt	r4,r2,8de10 <__subdf3+0x458>
   8daf8:	01000804 	movi	r4,32
   8dafc:	2089c83a 	sub	r4,r4,r2
   8db00:	2910983a 	sll	r8,r5,r4
   8db04:	308ed83a 	srl	r7,r6,r2
   8db08:	3108983a 	sll	r4,r6,r4
   8db0c:	2884d83a 	srl	r2,r5,r2
   8db10:	41ccb03a 	or	r6,r8,r7
   8db14:	2008c03a 	cmpne	r4,r4,zero
   8db18:	310cb03a 	or	r6,r6,r4
   8db1c:	898dc83a 	sub	r6,r17,r6
   8db20:	89a3803a 	cmpltu	r17,r17,r6
   8db24:	1887c83a 	sub	r3,r3,r2
   8db28:	1c47c83a 	sub	r3,r3,r17
   8db2c:	3023883a 	mov	r17,r6
   8db30:	1880202c 	andhi	r2,r3,128
   8db34:	10002326 	beq	r2,zero,8dbc4 <__subdf3+0x20c>
   8db38:	04c02034 	movhi	r19,128
   8db3c:	9cffffc4 	addi	r19,r19,-1
   8db40:	1ce6703a 	and	r19,r3,r19
   8db44:	98007a26 	beq	r19,zero,8dd30 <__subdf3+0x378>
   8db48:	9809883a 	mov	r4,r19
   8db4c:	008172c0 	call	8172c <__clzsi2>
   8db50:	113ffe04 	addi	r4,r2,-8
   8db54:	00c007c4 	movi	r3,31
   8db58:	19007b16 	blt	r3,r4,8dd48 <__subdf3+0x390>
   8db5c:	00800804 	movi	r2,32
   8db60:	1105c83a 	sub	r2,r2,r4
   8db64:	8884d83a 	srl	r2,r17,r2
   8db68:	9906983a 	sll	r3,r19,r4
   8db6c:	8922983a 	sll	r17,r17,r4
   8db70:	10c4b03a 	or	r2,r2,r3
   8db74:	24007816 	blt	r4,r16,8dd58 <__subdf3+0x3a0>
   8db78:	2421c83a 	sub	r16,r4,r16
   8db7c:	80c00044 	addi	r3,r16,1
   8db80:	010007c4 	movi	r4,31
   8db84:	20c09516 	blt	r4,r3,8dddc <__subdf3+0x424>
   8db88:	01400804 	movi	r5,32
   8db8c:	28cbc83a 	sub	r5,r5,r3
   8db90:	88c8d83a 	srl	r4,r17,r3
   8db94:	8962983a 	sll	r17,r17,r5
   8db98:	114a983a 	sll	r5,r2,r5
   8db9c:	10c6d83a 	srl	r3,r2,r3
   8dba0:	8804c03a 	cmpne	r2,r17,zero
   8dba4:	290ab03a 	or	r5,r5,r4
   8dba8:	28a2b03a 	or	r17,r5,r2
   8dbac:	0021883a 	mov	r16,zero
   8dbb0:	003fa206 	br	8da3c <_gp+0xfff7be58>
   8dbb4:	2090b03a 	or	r8,r4,r2
   8dbb8:	40018e26 	beq	r8,zero,8e1f4 <__subdf3+0x83c>
   8dbbc:	1007883a 	mov	r3,r2
   8dbc0:	2023883a 	mov	r17,r4
   8dbc4:	888001cc 	andi	r2,r17,7
   8dbc8:	103f9e1e 	bne	r2,zero,8da44 <_gp+0xfff7be60>
   8dbcc:	1804977a 	slli	r2,r3,29
   8dbd0:	8822d0fa 	srli	r17,r17,3
   8dbd4:	1810d0fa 	srli	r8,r3,3
   8dbd8:	9100004c 	andi	r4,r18,1
   8dbdc:	1444b03a 	or	r2,r2,r17
   8dbe0:	00c1ffc4 	movi	r3,2047
   8dbe4:	80c02826 	beq	r16,r3,8dc88 <__subdf3+0x2d0>
   8dbe8:	01400434 	movhi	r5,16
   8dbec:	297fffc4 	addi	r5,r5,-1
   8dbf0:	80e0703a 	and	r16,r16,r3
   8dbf4:	414a703a 	and	r5,r8,r5
   8dbf8:	003fa806 	br	8da9c <_gp+0xfff7beb8>
   8dbfc:	0080630e 	bge	zero,r2,8dd8c <__subdf3+0x3d4>
   8dc00:	48003026 	beq	r9,zero,8dcc4 <__subdf3+0x30c>
   8dc04:	0101ffc4 	movi	r4,2047
   8dc08:	813f8c26 	beq	r16,r4,8da3c <_gp+0xfff7be58>
   8dc0c:	29402034 	orhi	r5,r5,128
   8dc10:	01000e04 	movi	r4,56
   8dc14:	2080a90e 	bge	r4,r2,8debc <__subdf3+0x504>
   8dc18:	298cb03a 	or	r6,r5,r6
   8dc1c:	3012c03a 	cmpne	r9,r6,zero
   8dc20:	0005883a 	mov	r2,zero
   8dc24:	4c53883a 	add	r9,r9,r17
   8dc28:	4c63803a 	cmpltu	r17,r9,r17
   8dc2c:	10c7883a 	add	r3,r2,r3
   8dc30:	88c7883a 	add	r3,r17,r3
   8dc34:	4823883a 	mov	r17,r9
   8dc38:	1880202c 	andhi	r2,r3,128
   8dc3c:	1000d026 	beq	r2,zero,8df80 <__subdf3+0x5c8>
   8dc40:	84000044 	addi	r16,r16,1
   8dc44:	0081ffc4 	movi	r2,2047
   8dc48:	8080fe26 	beq	r16,r2,8e044 <__subdf3+0x68c>
   8dc4c:	00bfe034 	movhi	r2,65408
   8dc50:	10bfffc4 	addi	r2,r2,-1
   8dc54:	1886703a 	and	r3,r3,r2
   8dc58:	880ad07a 	srli	r5,r17,1
   8dc5c:	180497fa 	slli	r2,r3,31
   8dc60:	8900004c 	andi	r4,r17,1
   8dc64:	2922b03a 	or	r17,r5,r4
   8dc68:	1806d07a 	srli	r3,r3,1
   8dc6c:	1462b03a 	or	r17,r2,r17
   8dc70:	3825883a 	mov	r18,r7
   8dc74:	003f7106 	br	8da3c <_gp+0xfff7be58>
   8dc78:	2984b03a 	or	r2,r5,r6
   8dc7c:	103f6826 	beq	r2,zero,8da20 <_gp+0xfff7be3c>
   8dc80:	39c03fcc 	andi	r7,r7,255
   8dc84:	003f6706 	br	8da24 <_gp+0xfff7be40>
   8dc88:	4086b03a 	or	r3,r8,r2
   8dc8c:	18015226 	beq	r3,zero,8e1d8 <__subdf3+0x820>
   8dc90:	00c00434 	movhi	r3,16
   8dc94:	41400234 	orhi	r5,r8,8
   8dc98:	18ffffc4 	addi	r3,r3,-1
   8dc9c:	28ca703a 	and	r5,r5,r3
   8dca0:	003f7e06 	br	8da9c <_gp+0xfff7beb8>
   8dca4:	10bfffc4 	addi	r2,r2,-1
   8dca8:	1000491e 	bne	r2,zero,8ddd0 <__subdf3+0x418>
   8dcac:	898fc83a 	sub	r7,r17,r6
   8dcb0:	89e3803a 	cmpltu	r17,r17,r7
   8dcb4:	1947c83a 	sub	r3,r3,r5
   8dcb8:	1c47c83a 	sub	r3,r3,r17
   8dcbc:	3823883a 	mov	r17,r7
   8dcc0:	003f9b06 	br	8db30 <_gp+0xfff7bf4c>
   8dcc4:	2988b03a 	or	r4,r5,r6
   8dcc8:	203f5c26 	beq	r4,zero,8da3c <_gp+0xfff7be58>
   8dccc:	10bfffc4 	addi	r2,r2,-1
   8dcd0:	1000931e 	bne	r2,zero,8df20 <__subdf3+0x568>
   8dcd4:	898d883a 	add	r6,r17,r6
   8dcd8:	3463803a 	cmpltu	r17,r6,r17
   8dcdc:	1947883a 	add	r3,r3,r5
   8dce0:	88c7883a 	add	r3,r17,r3
   8dce4:	3023883a 	mov	r17,r6
   8dce8:	003fd306 	br	8dc38 <_gp+0xfff7c054>
   8dcec:	1000541e 	bne	r2,zero,8de40 <__subdf3+0x488>
   8dcf0:	80800044 	addi	r2,r16,1
   8dcf4:	1081ffcc 	andi	r2,r2,2047
   8dcf8:	01000044 	movi	r4,1
   8dcfc:	2080a20e 	bge	r4,r2,8df88 <__subdf3+0x5d0>
   8dd00:	8989c83a 	sub	r4,r17,r6
   8dd04:	8905803a 	cmpltu	r2,r17,r4
   8dd08:	1967c83a 	sub	r19,r3,r5
   8dd0c:	98a7c83a 	sub	r19,r19,r2
   8dd10:	9880202c 	andhi	r2,r19,128
   8dd14:	10006326 	beq	r2,zero,8dea4 <__subdf3+0x4ec>
   8dd18:	3463c83a 	sub	r17,r6,r17
   8dd1c:	28c7c83a 	sub	r3,r5,r3
   8dd20:	344d803a 	cmpltu	r6,r6,r17
   8dd24:	19a7c83a 	sub	r19,r3,r6
   8dd28:	3825883a 	mov	r18,r7
   8dd2c:	983f861e 	bne	r19,zero,8db48 <_gp+0xfff7bf64>
   8dd30:	8809883a 	mov	r4,r17
   8dd34:	008172c0 	call	8172c <__clzsi2>
   8dd38:	10800804 	addi	r2,r2,32
   8dd3c:	113ffe04 	addi	r4,r2,-8
   8dd40:	00c007c4 	movi	r3,31
   8dd44:	193f850e 	bge	r3,r4,8db5c <_gp+0xfff7bf78>
   8dd48:	10bff604 	addi	r2,r2,-40
   8dd4c:	8884983a 	sll	r2,r17,r2
   8dd50:	0023883a 	mov	r17,zero
   8dd54:	243f880e 	bge	r4,r16,8db78 <_gp+0xfff7bf94>
   8dd58:	00ffe034 	movhi	r3,65408
   8dd5c:	18ffffc4 	addi	r3,r3,-1
   8dd60:	8121c83a 	sub	r16,r16,r4
   8dd64:	10c6703a 	and	r3,r2,r3
   8dd68:	003f3406 	br	8da3c <_gp+0xfff7be58>
   8dd6c:	9100004c 	andi	r4,r18,1
   8dd70:	000b883a 	mov	r5,zero
   8dd74:	0005883a 	mov	r2,zero
   8dd78:	003f4806 	br	8da9c <_gp+0xfff7beb8>
   8dd7c:	298cb03a 	or	r6,r5,r6
   8dd80:	300cc03a 	cmpne	r6,r6,zero
   8dd84:	0005883a 	mov	r2,zero
   8dd88:	003f6406 	br	8db1c <_gp+0xfff7bf38>
   8dd8c:	10009a1e 	bne	r2,zero,8dff8 <__subdf3+0x640>
   8dd90:	82400044 	addi	r9,r16,1
   8dd94:	4881ffcc 	andi	r2,r9,2047
   8dd98:	02800044 	movi	r10,1
   8dd9c:	5080670e 	bge	r10,r2,8df3c <__subdf3+0x584>
   8dda0:	0081ffc4 	movi	r2,2047
   8dda4:	4880af26 	beq	r9,r2,8e064 <__subdf3+0x6ac>
   8dda8:	898d883a 	add	r6,r17,r6
   8ddac:	1945883a 	add	r2,r3,r5
   8ddb0:	3447803a 	cmpltu	r3,r6,r17
   8ddb4:	1887883a 	add	r3,r3,r2
   8ddb8:	182297fa 	slli	r17,r3,31
   8ddbc:	300cd07a 	srli	r6,r6,1
   8ddc0:	1806d07a 	srli	r3,r3,1
   8ddc4:	4821883a 	mov	r16,r9
   8ddc8:	89a2b03a 	or	r17,r17,r6
   8ddcc:	003f1b06 	br	8da3c <_gp+0xfff7be58>
   8ddd0:	0101ffc4 	movi	r4,2047
   8ddd4:	813f441e 	bne	r16,r4,8dae8 <_gp+0xfff7bf04>
   8ddd8:	003f1806 	br	8da3c <_gp+0xfff7be58>
   8dddc:	843ff844 	addi	r16,r16,-31
   8dde0:	01400804 	movi	r5,32
   8dde4:	1408d83a 	srl	r4,r2,r16
   8dde8:	19405026 	beq	r3,r5,8df2c <__subdf3+0x574>
   8ddec:	01401004 	movi	r5,64
   8ddf0:	28c7c83a 	sub	r3,r5,r3
   8ddf4:	10c4983a 	sll	r2,r2,r3
   8ddf8:	88a2b03a 	or	r17,r17,r2
   8ddfc:	8822c03a 	cmpne	r17,r17,zero
   8de00:	2462b03a 	or	r17,r4,r17
   8de04:	0007883a 	mov	r3,zero
   8de08:	0021883a 	mov	r16,zero
   8de0c:	003f6d06 	br	8dbc4 <_gp+0xfff7bfe0>
   8de10:	11fff804 	addi	r7,r2,-32
   8de14:	01000804 	movi	r4,32
   8de18:	29ced83a 	srl	r7,r5,r7
   8de1c:	11004526 	beq	r2,r4,8df34 <__subdf3+0x57c>
   8de20:	01001004 	movi	r4,64
   8de24:	2089c83a 	sub	r4,r4,r2
   8de28:	2904983a 	sll	r2,r5,r4
   8de2c:	118cb03a 	or	r6,r2,r6
   8de30:	300cc03a 	cmpne	r6,r6,zero
   8de34:	398cb03a 	or	r6,r7,r6
   8de38:	0005883a 	mov	r2,zero
   8de3c:	003f3706 	br	8db1c <_gp+0xfff7bf38>
   8de40:	80002a26 	beq	r16,zero,8deec <__subdf3+0x534>
   8de44:	0101ffc4 	movi	r4,2047
   8de48:	49006626 	beq	r9,r4,8dfe4 <__subdf3+0x62c>
   8de4c:	0085c83a 	sub	r2,zero,r2
   8de50:	18c02034 	orhi	r3,r3,128
   8de54:	01000e04 	movi	r4,56
   8de58:	20807e16 	blt	r4,r2,8e054 <__subdf3+0x69c>
   8de5c:	010007c4 	movi	r4,31
   8de60:	2080e716 	blt	r4,r2,8e200 <__subdf3+0x848>
   8de64:	01000804 	movi	r4,32
   8de68:	2089c83a 	sub	r4,r4,r2
   8de6c:	1914983a 	sll	r10,r3,r4
   8de70:	8890d83a 	srl	r8,r17,r2
   8de74:	8908983a 	sll	r4,r17,r4
   8de78:	1884d83a 	srl	r2,r3,r2
   8de7c:	5222b03a 	or	r17,r10,r8
   8de80:	2006c03a 	cmpne	r3,r4,zero
   8de84:	88e2b03a 	or	r17,r17,r3
   8de88:	3463c83a 	sub	r17,r6,r17
   8de8c:	2885c83a 	sub	r2,r5,r2
   8de90:	344d803a 	cmpltu	r6,r6,r17
   8de94:	1187c83a 	sub	r3,r2,r6
   8de98:	4821883a 	mov	r16,r9
   8de9c:	3825883a 	mov	r18,r7
   8dea0:	003f2306 	br	8db30 <_gp+0xfff7bf4c>
   8dea4:	24d0b03a 	or	r8,r4,r19
   8dea8:	40001b1e 	bne	r8,zero,8df18 <__subdf3+0x560>
   8deac:	0005883a 	mov	r2,zero
   8deb0:	0009883a 	mov	r4,zero
   8deb4:	0021883a 	mov	r16,zero
   8deb8:	003f4906 	br	8dbe0 <_gp+0xfff7bffc>
   8debc:	010007c4 	movi	r4,31
   8dec0:	20803a16 	blt	r4,r2,8dfac <__subdf3+0x5f4>
   8dec4:	01000804 	movi	r4,32
   8dec8:	2089c83a 	sub	r4,r4,r2
   8decc:	2912983a 	sll	r9,r5,r4
   8ded0:	3090d83a 	srl	r8,r6,r2
   8ded4:	3108983a 	sll	r4,r6,r4
   8ded8:	2884d83a 	srl	r2,r5,r2
   8dedc:	4a12b03a 	or	r9,r9,r8
   8dee0:	2008c03a 	cmpne	r4,r4,zero
   8dee4:	4912b03a 	or	r9,r9,r4
   8dee8:	003f4e06 	br	8dc24 <_gp+0xfff7c040>
   8deec:	1c48b03a 	or	r4,r3,r17
   8def0:	20003c26 	beq	r4,zero,8dfe4 <__subdf3+0x62c>
   8def4:	0084303a 	nor	r2,zero,r2
   8def8:	1000381e 	bne	r2,zero,8dfdc <__subdf3+0x624>
   8defc:	3463c83a 	sub	r17,r6,r17
   8df00:	28c5c83a 	sub	r2,r5,r3
   8df04:	344d803a 	cmpltu	r6,r6,r17
   8df08:	1187c83a 	sub	r3,r2,r6
   8df0c:	4821883a 	mov	r16,r9
   8df10:	3825883a 	mov	r18,r7
   8df14:	003f0606 	br	8db30 <_gp+0xfff7bf4c>
   8df18:	2023883a 	mov	r17,r4
   8df1c:	003f0906 	br	8db44 <_gp+0xfff7bf60>
   8df20:	0101ffc4 	movi	r4,2047
   8df24:	813f3a1e 	bne	r16,r4,8dc10 <_gp+0xfff7c02c>
   8df28:	003ec406 	br	8da3c <_gp+0xfff7be58>
   8df2c:	0005883a 	mov	r2,zero
   8df30:	003fb106 	br	8ddf8 <_gp+0xfff7c214>
   8df34:	0005883a 	mov	r2,zero
   8df38:	003fbc06 	br	8de2c <_gp+0xfff7c248>
   8df3c:	1c44b03a 	or	r2,r3,r17
   8df40:	80008e1e 	bne	r16,zero,8e17c <__subdf3+0x7c4>
   8df44:	1000c826 	beq	r2,zero,8e268 <__subdf3+0x8b0>
   8df48:	2984b03a 	or	r2,r5,r6
   8df4c:	103ebb26 	beq	r2,zero,8da3c <_gp+0xfff7be58>
   8df50:	8989883a 	add	r4,r17,r6
   8df54:	1945883a 	add	r2,r3,r5
   8df58:	2447803a 	cmpltu	r3,r4,r17
   8df5c:	1887883a 	add	r3,r3,r2
   8df60:	1880202c 	andhi	r2,r3,128
   8df64:	2023883a 	mov	r17,r4
   8df68:	103f1626 	beq	r2,zero,8dbc4 <_gp+0xfff7bfe0>
   8df6c:	00bfe034 	movhi	r2,65408
   8df70:	10bfffc4 	addi	r2,r2,-1
   8df74:	5021883a 	mov	r16,r10
   8df78:	1886703a 	and	r3,r3,r2
   8df7c:	003eaf06 	br	8da3c <_gp+0xfff7be58>
   8df80:	3825883a 	mov	r18,r7
   8df84:	003f0f06 	br	8dbc4 <_gp+0xfff7bfe0>
   8df88:	1c44b03a 	or	r2,r3,r17
   8df8c:	8000251e 	bne	r16,zero,8e024 <__subdf3+0x66c>
   8df90:	1000661e 	bne	r2,zero,8e12c <__subdf3+0x774>
   8df94:	2990b03a 	or	r8,r5,r6
   8df98:	40009626 	beq	r8,zero,8e1f4 <__subdf3+0x83c>
   8df9c:	2807883a 	mov	r3,r5
   8dfa0:	3023883a 	mov	r17,r6
   8dfa4:	3825883a 	mov	r18,r7
   8dfa8:	003ea406 	br	8da3c <_gp+0xfff7be58>
   8dfac:	127ff804 	addi	r9,r2,-32
   8dfb0:	01000804 	movi	r4,32
   8dfb4:	2a52d83a 	srl	r9,r5,r9
   8dfb8:	11008c26 	beq	r2,r4,8e1ec <__subdf3+0x834>
   8dfbc:	01001004 	movi	r4,64
   8dfc0:	2085c83a 	sub	r2,r4,r2
   8dfc4:	2884983a 	sll	r2,r5,r2
   8dfc8:	118cb03a 	or	r6,r2,r6
   8dfcc:	300cc03a 	cmpne	r6,r6,zero
   8dfd0:	4992b03a 	or	r9,r9,r6
   8dfd4:	0005883a 	mov	r2,zero
   8dfd8:	003f1206 	br	8dc24 <_gp+0xfff7c040>
   8dfdc:	0101ffc4 	movi	r4,2047
   8dfe0:	493f9c1e 	bne	r9,r4,8de54 <_gp+0xfff7c270>
   8dfe4:	2807883a 	mov	r3,r5
   8dfe8:	3023883a 	mov	r17,r6
   8dfec:	4821883a 	mov	r16,r9
   8dff0:	3825883a 	mov	r18,r7
   8dff4:	003e9106 	br	8da3c <_gp+0xfff7be58>
   8dff8:	80001f1e 	bne	r16,zero,8e078 <__subdf3+0x6c0>
   8dffc:	1c48b03a 	or	r4,r3,r17
   8e000:	20005a26 	beq	r4,zero,8e16c <__subdf3+0x7b4>
   8e004:	0084303a 	nor	r2,zero,r2
   8e008:	1000561e 	bne	r2,zero,8e164 <__subdf3+0x7ac>
   8e00c:	89a3883a 	add	r17,r17,r6
   8e010:	1945883a 	add	r2,r3,r5
   8e014:	898d803a 	cmpltu	r6,r17,r6
   8e018:	3087883a 	add	r3,r6,r2
   8e01c:	4821883a 	mov	r16,r9
   8e020:	003f0506 	br	8dc38 <_gp+0xfff7c054>
   8e024:	10002b1e 	bne	r2,zero,8e0d4 <__subdf3+0x71c>
   8e028:	2984b03a 	or	r2,r5,r6
   8e02c:	10008026 	beq	r2,zero,8e230 <__subdf3+0x878>
   8e030:	2807883a 	mov	r3,r5
   8e034:	3023883a 	mov	r17,r6
   8e038:	3825883a 	mov	r18,r7
   8e03c:	0401ffc4 	movi	r16,2047
   8e040:	003e7e06 	br	8da3c <_gp+0xfff7be58>
   8e044:	3809883a 	mov	r4,r7
   8e048:	0011883a 	mov	r8,zero
   8e04c:	0005883a 	mov	r2,zero
   8e050:	003ee306 	br	8dbe0 <_gp+0xfff7bffc>
   8e054:	1c62b03a 	or	r17,r3,r17
   8e058:	8822c03a 	cmpne	r17,r17,zero
   8e05c:	0005883a 	mov	r2,zero
   8e060:	003f8906 	br	8de88 <_gp+0xfff7c2a4>
   8e064:	3809883a 	mov	r4,r7
   8e068:	4821883a 	mov	r16,r9
   8e06c:	0011883a 	mov	r8,zero
   8e070:	0005883a 	mov	r2,zero
   8e074:	003eda06 	br	8dbe0 <_gp+0xfff7bffc>
   8e078:	0101ffc4 	movi	r4,2047
   8e07c:	49003b26 	beq	r9,r4,8e16c <__subdf3+0x7b4>
   8e080:	0085c83a 	sub	r2,zero,r2
   8e084:	18c02034 	orhi	r3,r3,128
   8e088:	01000e04 	movi	r4,56
   8e08c:	20806e16 	blt	r4,r2,8e248 <__subdf3+0x890>
   8e090:	010007c4 	movi	r4,31
   8e094:	20807716 	blt	r4,r2,8e274 <__subdf3+0x8bc>
   8e098:	01000804 	movi	r4,32
   8e09c:	2089c83a 	sub	r4,r4,r2
   8e0a0:	1914983a 	sll	r10,r3,r4
   8e0a4:	8890d83a 	srl	r8,r17,r2
   8e0a8:	8908983a 	sll	r4,r17,r4
   8e0ac:	1884d83a 	srl	r2,r3,r2
   8e0b0:	5222b03a 	or	r17,r10,r8
   8e0b4:	2006c03a 	cmpne	r3,r4,zero
   8e0b8:	88e2b03a 	or	r17,r17,r3
   8e0bc:	89a3883a 	add	r17,r17,r6
   8e0c0:	1145883a 	add	r2,r2,r5
   8e0c4:	898d803a 	cmpltu	r6,r17,r6
   8e0c8:	3087883a 	add	r3,r6,r2
   8e0cc:	4821883a 	mov	r16,r9
   8e0d0:	003ed906 	br	8dc38 <_gp+0xfff7c054>
   8e0d4:	2984b03a 	or	r2,r5,r6
   8e0d8:	10004226 	beq	r2,zero,8e1e4 <__subdf3+0x82c>
   8e0dc:	1808d0fa 	srli	r4,r3,3
   8e0e0:	8822d0fa 	srli	r17,r17,3
   8e0e4:	1806977a 	slli	r3,r3,29
   8e0e8:	2080022c 	andhi	r2,r4,8
   8e0ec:	1c62b03a 	or	r17,r3,r17
   8e0f0:	10000826 	beq	r2,zero,8e114 <__subdf3+0x75c>
   8e0f4:	2812d0fa 	srli	r9,r5,3
   8e0f8:	4880022c 	andhi	r2,r9,8
   8e0fc:	1000051e 	bne	r2,zero,8e114 <__subdf3+0x75c>
   8e100:	300cd0fa 	srli	r6,r6,3
   8e104:	2804977a 	slli	r2,r5,29
   8e108:	4809883a 	mov	r4,r9
   8e10c:	3825883a 	mov	r18,r7
   8e110:	11a2b03a 	or	r17,r2,r6
   8e114:	8806d77a 	srli	r3,r17,29
   8e118:	200890fa 	slli	r4,r4,3
   8e11c:	882290fa 	slli	r17,r17,3
   8e120:	0401ffc4 	movi	r16,2047
   8e124:	1906b03a 	or	r3,r3,r4
   8e128:	003e4406 	br	8da3c <_gp+0xfff7be58>
   8e12c:	2984b03a 	or	r2,r5,r6
   8e130:	103e4226 	beq	r2,zero,8da3c <_gp+0xfff7be58>
   8e134:	8989c83a 	sub	r4,r17,r6
   8e138:	8911803a 	cmpltu	r8,r17,r4
   8e13c:	1945c83a 	sub	r2,r3,r5
   8e140:	1205c83a 	sub	r2,r2,r8
   8e144:	1200202c 	andhi	r8,r2,128
   8e148:	403e9a26 	beq	r8,zero,8dbb4 <_gp+0xfff7bfd0>
   8e14c:	3463c83a 	sub	r17,r6,r17
   8e150:	28c5c83a 	sub	r2,r5,r3
   8e154:	344d803a 	cmpltu	r6,r6,r17
   8e158:	1187c83a 	sub	r3,r2,r6
   8e15c:	3825883a 	mov	r18,r7
   8e160:	003e3606 	br	8da3c <_gp+0xfff7be58>
   8e164:	0101ffc4 	movi	r4,2047
   8e168:	493fc71e 	bne	r9,r4,8e088 <_gp+0xfff7c4a4>
   8e16c:	2807883a 	mov	r3,r5
   8e170:	3023883a 	mov	r17,r6
   8e174:	4821883a 	mov	r16,r9
   8e178:	003e3006 	br	8da3c <_gp+0xfff7be58>
   8e17c:	10003626 	beq	r2,zero,8e258 <__subdf3+0x8a0>
   8e180:	2984b03a 	or	r2,r5,r6
   8e184:	10001726 	beq	r2,zero,8e1e4 <__subdf3+0x82c>
   8e188:	1808d0fa 	srli	r4,r3,3
   8e18c:	8822d0fa 	srli	r17,r17,3
   8e190:	1806977a 	slli	r3,r3,29
   8e194:	2080022c 	andhi	r2,r4,8
   8e198:	1c62b03a 	or	r17,r3,r17
   8e19c:	10000726 	beq	r2,zero,8e1bc <__subdf3+0x804>
   8e1a0:	2812d0fa 	srli	r9,r5,3
   8e1a4:	4880022c 	andhi	r2,r9,8
   8e1a8:	1000041e 	bne	r2,zero,8e1bc <__subdf3+0x804>
   8e1ac:	300cd0fa 	srli	r6,r6,3
   8e1b0:	2804977a 	slli	r2,r5,29
   8e1b4:	4809883a 	mov	r4,r9
   8e1b8:	11a2b03a 	or	r17,r2,r6
   8e1bc:	8806d77a 	srli	r3,r17,29
   8e1c0:	200890fa 	slli	r4,r4,3
   8e1c4:	882290fa 	slli	r17,r17,3
   8e1c8:	3825883a 	mov	r18,r7
   8e1cc:	1906b03a 	or	r3,r3,r4
   8e1d0:	0401ffc4 	movi	r16,2047
   8e1d4:	003e1906 	br	8da3c <_gp+0xfff7be58>
   8e1d8:	000b883a 	mov	r5,zero
   8e1dc:	0005883a 	mov	r2,zero
   8e1e0:	003e2e06 	br	8da9c <_gp+0xfff7beb8>
   8e1e4:	0401ffc4 	movi	r16,2047
   8e1e8:	003e1406 	br	8da3c <_gp+0xfff7be58>
   8e1ec:	0005883a 	mov	r2,zero
   8e1f0:	003f7506 	br	8dfc8 <_gp+0xfff7c3e4>
   8e1f4:	0005883a 	mov	r2,zero
   8e1f8:	0009883a 	mov	r4,zero
   8e1fc:	003e7806 	br	8dbe0 <_gp+0xfff7bffc>
   8e200:	123ff804 	addi	r8,r2,-32
   8e204:	01000804 	movi	r4,32
   8e208:	1a10d83a 	srl	r8,r3,r8
   8e20c:	11002526 	beq	r2,r4,8e2a4 <__subdf3+0x8ec>
   8e210:	01001004 	movi	r4,64
   8e214:	2085c83a 	sub	r2,r4,r2
   8e218:	1884983a 	sll	r2,r3,r2
   8e21c:	1444b03a 	or	r2,r2,r17
   8e220:	1004c03a 	cmpne	r2,r2,zero
   8e224:	40a2b03a 	or	r17,r8,r2
   8e228:	0005883a 	mov	r2,zero
   8e22c:	003f1606 	br	8de88 <_gp+0xfff7c2a4>
   8e230:	02000434 	movhi	r8,16
   8e234:	0009883a 	mov	r4,zero
   8e238:	423fffc4 	addi	r8,r8,-1
   8e23c:	00bfffc4 	movi	r2,-1
   8e240:	0401ffc4 	movi	r16,2047
   8e244:	003e6606 	br	8dbe0 <_gp+0xfff7bffc>
   8e248:	1c62b03a 	or	r17,r3,r17
   8e24c:	8822c03a 	cmpne	r17,r17,zero
   8e250:	0005883a 	mov	r2,zero
   8e254:	003f9906 	br	8e0bc <_gp+0xfff7c4d8>
   8e258:	2807883a 	mov	r3,r5
   8e25c:	3023883a 	mov	r17,r6
   8e260:	0401ffc4 	movi	r16,2047
   8e264:	003df506 	br	8da3c <_gp+0xfff7be58>
   8e268:	2807883a 	mov	r3,r5
   8e26c:	3023883a 	mov	r17,r6
   8e270:	003df206 	br	8da3c <_gp+0xfff7be58>
   8e274:	123ff804 	addi	r8,r2,-32
   8e278:	01000804 	movi	r4,32
   8e27c:	1a10d83a 	srl	r8,r3,r8
   8e280:	11000a26 	beq	r2,r4,8e2ac <__subdf3+0x8f4>
   8e284:	01001004 	movi	r4,64
   8e288:	2085c83a 	sub	r2,r4,r2
   8e28c:	1884983a 	sll	r2,r3,r2
   8e290:	1444b03a 	or	r2,r2,r17
   8e294:	1004c03a 	cmpne	r2,r2,zero
   8e298:	40a2b03a 	or	r17,r8,r2
   8e29c:	0005883a 	mov	r2,zero
   8e2a0:	003f8606 	br	8e0bc <_gp+0xfff7c4d8>
   8e2a4:	0005883a 	mov	r2,zero
   8e2a8:	003fdc06 	br	8e21c <_gp+0xfff7c638>
   8e2ac:	0005883a 	mov	r2,zero
   8e2b0:	003ff706 	br	8e290 <_gp+0xfff7c6ac>

0008e2b4 <__fixdfsi>:
   8e2b4:	280cd53a 	srli	r6,r5,20
   8e2b8:	00c00434 	movhi	r3,16
   8e2bc:	18ffffc4 	addi	r3,r3,-1
   8e2c0:	3181ffcc 	andi	r6,r6,2047
   8e2c4:	01c0ff84 	movi	r7,1022
   8e2c8:	28c6703a 	and	r3,r5,r3
   8e2cc:	280ad7fa 	srli	r5,r5,31
   8e2d0:	3980120e 	bge	r7,r6,8e31c <__fixdfsi+0x68>
   8e2d4:	00810744 	movi	r2,1053
   8e2d8:	11800c16 	blt	r2,r6,8e30c <__fixdfsi+0x58>
   8e2dc:	00810cc4 	movi	r2,1075
   8e2e0:	1185c83a 	sub	r2,r2,r6
   8e2e4:	01c007c4 	movi	r7,31
   8e2e8:	18c00434 	orhi	r3,r3,16
   8e2ec:	38800d16 	blt	r7,r2,8e324 <__fixdfsi+0x70>
   8e2f0:	31befb44 	addi	r6,r6,-1043
   8e2f4:	2084d83a 	srl	r2,r4,r2
   8e2f8:	1986983a 	sll	r3,r3,r6
   8e2fc:	1884b03a 	or	r2,r3,r2
   8e300:	28000726 	beq	r5,zero,8e320 <__fixdfsi+0x6c>
   8e304:	0085c83a 	sub	r2,zero,r2
   8e308:	f800283a 	ret
   8e30c:	00a00034 	movhi	r2,32768
   8e310:	10bfffc4 	addi	r2,r2,-1
   8e314:	2885883a 	add	r2,r5,r2
   8e318:	f800283a 	ret
   8e31c:	0005883a 	mov	r2,zero
   8e320:	f800283a 	ret
   8e324:	008104c4 	movi	r2,1043
   8e328:	1185c83a 	sub	r2,r2,r6
   8e32c:	1884d83a 	srl	r2,r3,r2
   8e330:	003ff306 	br	8e300 <_gp+0xfff7c71c>

0008e334 <__floatsidf>:
   8e334:	defffd04 	addi	sp,sp,-12
   8e338:	dfc00215 	stw	ra,8(sp)
   8e33c:	dc400115 	stw	r17,4(sp)
   8e340:	dc000015 	stw	r16,0(sp)
   8e344:	20002b26 	beq	r4,zero,8e3f4 <__floatsidf+0xc0>
   8e348:	2023883a 	mov	r17,r4
   8e34c:	2020d7fa 	srli	r16,r4,31
   8e350:	20002d16 	blt	r4,zero,8e408 <__floatsidf+0xd4>
   8e354:	8809883a 	mov	r4,r17
   8e358:	008172c0 	call	8172c <__clzsi2>
   8e35c:	01410784 	movi	r5,1054
   8e360:	288bc83a 	sub	r5,r5,r2
   8e364:	01010cc4 	movi	r4,1075
   8e368:	2149c83a 	sub	r4,r4,r5
   8e36c:	00c007c4 	movi	r3,31
   8e370:	1900160e 	bge	r3,r4,8e3cc <__floatsidf+0x98>
   8e374:	00c104c4 	movi	r3,1043
   8e378:	1947c83a 	sub	r3,r3,r5
   8e37c:	88c6983a 	sll	r3,r17,r3
   8e380:	00800434 	movhi	r2,16
   8e384:	10bfffc4 	addi	r2,r2,-1
   8e388:	1886703a 	and	r3,r3,r2
   8e38c:	2941ffcc 	andi	r5,r5,2047
   8e390:	800d883a 	mov	r6,r16
   8e394:	0005883a 	mov	r2,zero
   8e398:	280a953a 	slli	r5,r5,20
   8e39c:	31803fcc 	andi	r6,r6,255
   8e3a0:	01000434 	movhi	r4,16
   8e3a4:	300c97fa 	slli	r6,r6,31
   8e3a8:	213fffc4 	addi	r4,r4,-1
   8e3ac:	1906703a 	and	r3,r3,r4
   8e3b0:	1946b03a 	or	r3,r3,r5
   8e3b4:	1986b03a 	or	r3,r3,r6
   8e3b8:	dfc00217 	ldw	ra,8(sp)
   8e3bc:	dc400117 	ldw	r17,4(sp)
   8e3c0:	dc000017 	ldw	r16,0(sp)
   8e3c4:	dec00304 	addi	sp,sp,12
   8e3c8:	f800283a 	ret
   8e3cc:	00c002c4 	movi	r3,11
   8e3d0:	1887c83a 	sub	r3,r3,r2
   8e3d4:	88c6d83a 	srl	r3,r17,r3
   8e3d8:	8904983a 	sll	r2,r17,r4
   8e3dc:	01000434 	movhi	r4,16
   8e3e0:	213fffc4 	addi	r4,r4,-1
   8e3e4:	2941ffcc 	andi	r5,r5,2047
   8e3e8:	1906703a 	and	r3,r3,r4
   8e3ec:	800d883a 	mov	r6,r16
   8e3f0:	003fe906 	br	8e398 <_gp+0xfff7c7b4>
   8e3f4:	000d883a 	mov	r6,zero
   8e3f8:	000b883a 	mov	r5,zero
   8e3fc:	0007883a 	mov	r3,zero
   8e400:	0005883a 	mov	r2,zero
   8e404:	003fe406 	br	8e398 <_gp+0xfff7c7b4>
   8e408:	0123c83a 	sub	r17,zero,r4
   8e40c:	003fd106 	br	8e354 <_gp+0xfff7c770>

0008e410 <__floatunsidf>:
   8e410:	defffe04 	addi	sp,sp,-8
   8e414:	dc000015 	stw	r16,0(sp)
   8e418:	dfc00115 	stw	ra,4(sp)
   8e41c:	2021883a 	mov	r16,r4
   8e420:	20002226 	beq	r4,zero,8e4ac <__floatunsidf+0x9c>
   8e424:	008172c0 	call	8172c <__clzsi2>
   8e428:	01010784 	movi	r4,1054
   8e42c:	2089c83a 	sub	r4,r4,r2
   8e430:	01810cc4 	movi	r6,1075
   8e434:	310dc83a 	sub	r6,r6,r4
   8e438:	00c007c4 	movi	r3,31
   8e43c:	1980120e 	bge	r3,r6,8e488 <__floatunsidf+0x78>
   8e440:	00c104c4 	movi	r3,1043
   8e444:	1907c83a 	sub	r3,r3,r4
   8e448:	80ca983a 	sll	r5,r16,r3
   8e44c:	00800434 	movhi	r2,16
   8e450:	10bfffc4 	addi	r2,r2,-1
   8e454:	2101ffcc 	andi	r4,r4,2047
   8e458:	0021883a 	mov	r16,zero
   8e45c:	288a703a 	and	r5,r5,r2
   8e460:	2008953a 	slli	r4,r4,20
   8e464:	00c00434 	movhi	r3,16
   8e468:	18ffffc4 	addi	r3,r3,-1
   8e46c:	28c6703a 	and	r3,r5,r3
   8e470:	8005883a 	mov	r2,r16
   8e474:	1906b03a 	or	r3,r3,r4
   8e478:	dfc00117 	ldw	ra,4(sp)
   8e47c:	dc000017 	ldw	r16,0(sp)
   8e480:	dec00204 	addi	sp,sp,8
   8e484:	f800283a 	ret
   8e488:	00c002c4 	movi	r3,11
   8e48c:	188bc83a 	sub	r5,r3,r2
   8e490:	814ad83a 	srl	r5,r16,r5
   8e494:	00c00434 	movhi	r3,16
   8e498:	18ffffc4 	addi	r3,r3,-1
   8e49c:	81a0983a 	sll	r16,r16,r6
   8e4a0:	2101ffcc 	andi	r4,r4,2047
   8e4a4:	28ca703a 	and	r5,r5,r3
   8e4a8:	003fed06 	br	8e460 <_gp+0xfff7c87c>
   8e4ac:	0009883a 	mov	r4,zero
   8e4b0:	000b883a 	mov	r5,zero
   8e4b4:	003fea06 	br	8e460 <_gp+0xfff7c87c>

0008e4b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e4b8:	defffe04 	addi	sp,sp,-8
   8e4bc:	dfc00115 	stw	ra,4(sp)
   8e4c0:	df000015 	stw	fp,0(sp)
   8e4c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e4c8:	d0a00b17 	ldw	r2,-32724(gp)
   8e4cc:	10000326 	beq	r2,zero,8e4dc <alt_get_errno+0x24>
   8e4d0:	d0a00b17 	ldw	r2,-32724(gp)
   8e4d4:	103ee83a 	callr	r2
   8e4d8:	00000106 	br	8e4e0 <alt_get_errno+0x28>
   8e4dc:	d0a01c04 	addi	r2,gp,-32656
}
   8e4e0:	e037883a 	mov	sp,fp
   8e4e4:	dfc00117 	ldw	ra,4(sp)
   8e4e8:	df000017 	ldw	fp,0(sp)
   8e4ec:	dec00204 	addi	sp,sp,8
   8e4f0:	f800283a 	ret

0008e4f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e4f4:	defffb04 	addi	sp,sp,-20
   8e4f8:	dfc00415 	stw	ra,16(sp)
   8e4fc:	df000315 	stw	fp,12(sp)
   8e500:	df000304 	addi	fp,sp,12
   8e504:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e508:	e0bfff17 	ldw	r2,-4(fp)
   8e50c:	10000816 	blt	r2,zero,8e530 <close+0x3c>
   8e510:	01400304 	movi	r5,12
   8e514:	e13fff17 	ldw	r4,-4(fp)
   8e518:	00817900 	call	81790 <__mulsi3>
   8e51c:	1007883a 	mov	r3,r2
   8e520:	00800474 	movhi	r2,17
   8e524:	10a23304 	addi	r2,r2,-30516
   8e528:	1885883a 	add	r2,r3,r2
   8e52c:	00000106 	br	8e534 <close+0x40>
   8e530:	0005883a 	mov	r2,zero
   8e534:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e538:	e0bffd17 	ldw	r2,-12(fp)
   8e53c:	10001926 	beq	r2,zero,8e5a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e540:	e0bffd17 	ldw	r2,-12(fp)
   8e544:	10800017 	ldw	r2,0(r2)
   8e548:	10800417 	ldw	r2,16(r2)
   8e54c:	10000626 	beq	r2,zero,8e568 <close+0x74>
   8e550:	e0bffd17 	ldw	r2,-12(fp)
   8e554:	10800017 	ldw	r2,0(r2)
   8e558:	10800417 	ldw	r2,16(r2)
   8e55c:	e13ffd17 	ldw	r4,-12(fp)
   8e560:	103ee83a 	callr	r2
   8e564:	00000106 	br	8e56c <close+0x78>
   8e568:	0005883a 	mov	r2,zero
   8e56c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e570:	e13fff17 	ldw	r4,-4(fp)
   8e574:	008ebdc0 	call	8ebdc <alt_release_fd>
    if (rval < 0)
   8e578:	e0bffe17 	ldw	r2,-8(fp)
   8e57c:	1000070e 	bge	r2,zero,8e59c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   8e580:	008e4b80 	call	8e4b8 <alt_get_errno>
   8e584:	1007883a 	mov	r3,r2
   8e588:	e0bffe17 	ldw	r2,-8(fp)
   8e58c:	0085c83a 	sub	r2,zero,r2
   8e590:	18800015 	stw	r2,0(r3)
      return -1;
   8e594:	00bfffc4 	movi	r2,-1
   8e598:	00000706 	br	8e5b8 <close+0xc4>
    }
    return 0;
   8e59c:	0005883a 	mov	r2,zero
   8e5a0:	00000506 	br	8e5b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e5a4:	008e4b80 	call	8e4b8 <alt_get_errno>
   8e5a8:	1007883a 	mov	r3,r2
   8e5ac:	00801444 	movi	r2,81
   8e5b0:	18800015 	stw	r2,0(r3)
    return -1;
   8e5b4:	00bfffc4 	movi	r2,-1
  }
}
   8e5b8:	e037883a 	mov	sp,fp
   8e5bc:	dfc00117 	ldw	ra,4(sp)
   8e5c0:	df000017 	ldw	fp,0(sp)
   8e5c4:	dec00204 	addi	sp,sp,8
   8e5c8:	f800283a 	ret

0008e5cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e5cc:	defffc04 	addi	sp,sp,-16
   8e5d0:	df000315 	stw	fp,12(sp)
   8e5d4:	df000304 	addi	fp,sp,12
   8e5d8:	e13ffd15 	stw	r4,-12(fp)
   8e5dc:	e17ffe15 	stw	r5,-8(fp)
   8e5e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e5e4:	e0bfff17 	ldw	r2,-4(fp)
}
   8e5e8:	e037883a 	mov	sp,fp
   8e5ec:	df000017 	ldw	fp,0(sp)
   8e5f0:	dec00104 	addi	sp,sp,4
   8e5f4:	f800283a 	ret

0008e5f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e5f8:	defffe04 	addi	sp,sp,-8
   8e5fc:	dfc00115 	stw	ra,4(sp)
   8e600:	df000015 	stw	fp,0(sp)
   8e604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e608:	d0a00b17 	ldw	r2,-32724(gp)
   8e60c:	10000326 	beq	r2,zero,8e61c <alt_get_errno+0x24>
   8e610:	d0a00b17 	ldw	r2,-32724(gp)
   8e614:	103ee83a 	callr	r2
   8e618:	00000106 	br	8e620 <alt_get_errno+0x28>
   8e61c:	d0a01c04 	addi	r2,gp,-32656
}
   8e620:	e037883a 	mov	sp,fp
   8e624:	dfc00117 	ldw	ra,4(sp)
   8e628:	df000017 	ldw	fp,0(sp)
   8e62c:	dec00204 	addi	sp,sp,8
   8e630:	f800283a 	ret

0008e634 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e634:	defffb04 	addi	sp,sp,-20
   8e638:	dfc00415 	stw	ra,16(sp)
   8e63c:	df000315 	stw	fp,12(sp)
   8e640:	df000304 	addi	fp,sp,12
   8e644:	e13ffe15 	stw	r4,-8(fp)
   8e648:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e64c:	e0bffe17 	ldw	r2,-8(fp)
   8e650:	10000816 	blt	r2,zero,8e674 <fstat+0x40>
   8e654:	01400304 	movi	r5,12
   8e658:	e13ffe17 	ldw	r4,-8(fp)
   8e65c:	00817900 	call	81790 <__mulsi3>
   8e660:	1007883a 	mov	r3,r2
   8e664:	00800474 	movhi	r2,17
   8e668:	10a23304 	addi	r2,r2,-30516
   8e66c:	1885883a 	add	r2,r3,r2
   8e670:	00000106 	br	8e678 <fstat+0x44>
   8e674:	0005883a 	mov	r2,zero
   8e678:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e67c:	e0bffd17 	ldw	r2,-12(fp)
   8e680:	10001026 	beq	r2,zero,8e6c4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e684:	e0bffd17 	ldw	r2,-12(fp)
   8e688:	10800017 	ldw	r2,0(r2)
   8e68c:	10800817 	ldw	r2,32(r2)
   8e690:	10000726 	beq	r2,zero,8e6b0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   8e694:	e0bffd17 	ldw	r2,-12(fp)
   8e698:	10800017 	ldw	r2,0(r2)
   8e69c:	10800817 	ldw	r2,32(r2)
   8e6a0:	e17fff17 	ldw	r5,-4(fp)
   8e6a4:	e13ffd17 	ldw	r4,-12(fp)
   8e6a8:	103ee83a 	callr	r2
   8e6ac:	00000a06 	br	8e6d8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e6b0:	e0bfff17 	ldw	r2,-4(fp)
   8e6b4:	00c80004 	movi	r3,8192
   8e6b8:	10c00115 	stw	r3,4(r2)
      return 0;
   8e6bc:	0005883a 	mov	r2,zero
   8e6c0:	00000506 	br	8e6d8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e6c4:	008e5f80 	call	8e5f8 <alt_get_errno>
   8e6c8:	1007883a 	mov	r3,r2
   8e6cc:	00801444 	movi	r2,81
   8e6d0:	18800015 	stw	r2,0(r3)
    return -1;
   8e6d4:	00bfffc4 	movi	r2,-1
  }
}
   8e6d8:	e037883a 	mov	sp,fp
   8e6dc:	dfc00117 	ldw	ra,4(sp)
   8e6e0:	df000017 	ldw	fp,0(sp)
   8e6e4:	dec00204 	addi	sp,sp,8
   8e6e8:	f800283a 	ret

0008e6ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e6ec:	defffe04 	addi	sp,sp,-8
   8e6f0:	dfc00115 	stw	ra,4(sp)
   8e6f4:	df000015 	stw	fp,0(sp)
   8e6f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e6fc:	d0a00b17 	ldw	r2,-32724(gp)
   8e700:	10000326 	beq	r2,zero,8e710 <alt_get_errno+0x24>
   8e704:	d0a00b17 	ldw	r2,-32724(gp)
   8e708:	103ee83a 	callr	r2
   8e70c:	00000106 	br	8e714 <alt_get_errno+0x28>
   8e710:	d0a01c04 	addi	r2,gp,-32656
}
   8e714:	e037883a 	mov	sp,fp
   8e718:	dfc00117 	ldw	ra,4(sp)
   8e71c:	df000017 	ldw	fp,0(sp)
   8e720:	dec00204 	addi	sp,sp,8
   8e724:	f800283a 	ret

0008e728 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e728:	deffed04 	addi	sp,sp,-76
   8e72c:	dfc01215 	stw	ra,72(sp)
   8e730:	df001115 	stw	fp,68(sp)
   8e734:	df001104 	addi	fp,sp,68
   8e738:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e73c:	e0bfff17 	ldw	r2,-4(fp)
   8e740:	10000816 	blt	r2,zero,8e764 <isatty+0x3c>
   8e744:	01400304 	movi	r5,12
   8e748:	e13fff17 	ldw	r4,-4(fp)
   8e74c:	00817900 	call	81790 <__mulsi3>
   8e750:	1007883a 	mov	r3,r2
   8e754:	00800474 	movhi	r2,17
   8e758:	10a23304 	addi	r2,r2,-30516
   8e75c:	1885883a 	add	r2,r3,r2
   8e760:	00000106 	br	8e768 <isatty+0x40>
   8e764:	0005883a 	mov	r2,zero
   8e768:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e76c:	e0bfef17 	ldw	r2,-68(fp)
   8e770:	10000e26 	beq	r2,zero,8e7ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e774:	e0bfef17 	ldw	r2,-68(fp)
   8e778:	10800017 	ldw	r2,0(r2)
   8e77c:	10800817 	ldw	r2,32(r2)
   8e780:	1000021e 	bne	r2,zero,8e78c <isatty+0x64>
    {
      return 1;
   8e784:	00800044 	movi	r2,1
   8e788:	00000d06 	br	8e7c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e78c:	e0bff004 	addi	r2,fp,-64
   8e790:	100b883a 	mov	r5,r2
   8e794:	e13fff17 	ldw	r4,-4(fp)
   8e798:	008e6340 	call	8e634 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e79c:	e0bff117 	ldw	r2,-60(fp)
   8e7a0:	10880020 	cmpeqi	r2,r2,8192
   8e7a4:	10803fcc 	andi	r2,r2,255
   8e7a8:	00000506 	br	8e7c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e7ac:	008e6ec0 	call	8e6ec <alt_get_errno>
   8e7b0:	1007883a 	mov	r3,r2
   8e7b4:	00801444 	movi	r2,81
   8e7b8:	18800015 	stw	r2,0(r3)
    return 0;
   8e7bc:	0005883a 	mov	r2,zero
  }
}
   8e7c0:	e037883a 	mov	sp,fp
   8e7c4:	dfc00117 	ldw	ra,4(sp)
   8e7c8:	df000017 	ldw	fp,0(sp)
   8e7cc:	dec00204 	addi	sp,sp,8
   8e7d0:	f800283a 	ret

0008e7d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e7d4:	defffc04 	addi	sp,sp,-16
   8e7d8:	df000315 	stw	fp,12(sp)
   8e7dc:	df000304 	addi	fp,sp,12
   8e7e0:	e13ffd15 	stw	r4,-12(fp)
   8e7e4:	e17ffe15 	stw	r5,-8(fp)
   8e7e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e7ec:	e0fffe17 	ldw	r3,-8(fp)
   8e7f0:	e0bffd17 	ldw	r2,-12(fp)
   8e7f4:	18800c26 	beq	r3,r2,8e828 <alt_load_section+0x54>
  {
    while( to != end )
   8e7f8:	00000806 	br	8e81c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e7fc:	e0bffe17 	ldw	r2,-8(fp)
   8e800:	10c00104 	addi	r3,r2,4
   8e804:	e0fffe15 	stw	r3,-8(fp)
   8e808:	e0fffd17 	ldw	r3,-12(fp)
   8e80c:	19000104 	addi	r4,r3,4
   8e810:	e13ffd15 	stw	r4,-12(fp)
   8e814:	18c00017 	ldw	r3,0(r3)
   8e818:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e81c:	e0fffe17 	ldw	r3,-8(fp)
   8e820:	e0bfff17 	ldw	r2,-4(fp)
   8e824:	18bff51e 	bne	r3,r2,8e7fc <_gp+0xfff7cc18>
    {
      *to++ = *from++;
    }
  }
}
   8e828:	0001883a 	nop
   8e82c:	e037883a 	mov	sp,fp
   8e830:	df000017 	ldw	fp,0(sp)
   8e834:	dec00104 	addi	sp,sp,4
   8e838:	f800283a 	ret

0008e83c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e83c:	defffe04 	addi	sp,sp,-8
   8e840:	dfc00115 	stw	ra,4(sp)
   8e844:	df000015 	stw	fp,0(sp)
   8e848:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e84c:	01800474 	movhi	r6,17
   8e850:	31a70f04 	addi	r6,r6,-25540
   8e854:	01400474 	movhi	r5,17
   8e858:	29600004 	addi	r5,r5,-32768
   8e85c:	01000274 	movhi	r4,9
   8e860:	2110c204 	addi	r4,r4,17160
   8e864:	008e7d40 	call	8e7d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e868:	01800234 	movhi	r6,8
   8e86c:	31808c04 	addi	r6,r6,560
   8e870:	01400234 	movhi	r5,8
   8e874:	29400804 	addi	r5,r5,32
   8e878:	01000234 	movhi	r4,8
   8e87c:	21000804 	addi	r4,r4,32
   8e880:	008e7d40 	call	8e7d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e884:	01800274 	movhi	r6,9
   8e888:	3190c204 	addi	r6,r6,17160
   8e88c:	01400274 	movhi	r5,9
   8e890:	294f7704 	addi	r5,r5,15836
   8e894:	01000274 	movhi	r4,9
   8e898:	210f7704 	addi	r4,r4,15836
   8e89c:	008e7d40 	call	8e7d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e8a0:	00928980 	call	92898 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e8a4:	0092ba40 	call	92ba4 <alt_icache_flush_all>
}
   8e8a8:	0001883a 	nop
   8e8ac:	e037883a 	mov	sp,fp
   8e8b0:	dfc00117 	ldw	ra,4(sp)
   8e8b4:	df000017 	ldw	fp,0(sp)
   8e8b8:	dec00204 	addi	sp,sp,8
   8e8bc:	f800283a 	ret

0008e8c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e8c0:	defffe04 	addi	sp,sp,-8
   8e8c4:	dfc00115 	stw	ra,4(sp)
   8e8c8:	df000015 	stw	fp,0(sp)
   8e8cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e8d0:	d0a00b17 	ldw	r2,-32724(gp)
   8e8d4:	10000326 	beq	r2,zero,8e8e4 <alt_get_errno+0x24>
   8e8d8:	d0a00b17 	ldw	r2,-32724(gp)
   8e8dc:	103ee83a 	callr	r2
   8e8e0:	00000106 	br	8e8e8 <alt_get_errno+0x28>
   8e8e4:	d0a01c04 	addi	r2,gp,-32656
}
   8e8e8:	e037883a 	mov	sp,fp
   8e8ec:	dfc00117 	ldw	ra,4(sp)
   8e8f0:	df000017 	ldw	fp,0(sp)
   8e8f4:	dec00204 	addi	sp,sp,8
   8e8f8:	f800283a 	ret

0008e8fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e8fc:	defff904 	addi	sp,sp,-28
   8e900:	dfc00615 	stw	ra,24(sp)
   8e904:	df000515 	stw	fp,20(sp)
   8e908:	df000504 	addi	fp,sp,20
   8e90c:	e13ffd15 	stw	r4,-12(fp)
   8e910:	e17ffe15 	stw	r5,-8(fp)
   8e914:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e918:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e91c:	e0bffd17 	ldw	r2,-12(fp)
   8e920:	10000816 	blt	r2,zero,8e944 <lseek+0x48>
   8e924:	01400304 	movi	r5,12
   8e928:	e13ffd17 	ldw	r4,-12(fp)
   8e92c:	00817900 	call	81790 <__mulsi3>
   8e930:	1007883a 	mov	r3,r2
   8e934:	00800474 	movhi	r2,17
   8e938:	10a23304 	addi	r2,r2,-30516
   8e93c:	1885883a 	add	r2,r3,r2
   8e940:	00000106 	br	8e948 <lseek+0x4c>
   8e944:	0005883a 	mov	r2,zero
   8e948:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e94c:	e0bffc17 	ldw	r2,-16(fp)
   8e950:	10001026 	beq	r2,zero,8e994 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e954:	e0bffc17 	ldw	r2,-16(fp)
   8e958:	10800017 	ldw	r2,0(r2)
   8e95c:	10800717 	ldw	r2,28(r2)
   8e960:	10000926 	beq	r2,zero,8e988 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e964:	e0bffc17 	ldw	r2,-16(fp)
   8e968:	10800017 	ldw	r2,0(r2)
   8e96c:	10800717 	ldw	r2,28(r2)
   8e970:	e1bfff17 	ldw	r6,-4(fp)
   8e974:	e17ffe17 	ldw	r5,-8(fp)
   8e978:	e13ffc17 	ldw	r4,-16(fp)
   8e97c:	103ee83a 	callr	r2
   8e980:	e0bffb15 	stw	r2,-20(fp)
   8e984:	00000506 	br	8e99c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e988:	00bfde84 	movi	r2,-134
   8e98c:	e0bffb15 	stw	r2,-20(fp)
   8e990:	00000206 	br	8e99c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e994:	00bfebc4 	movi	r2,-81
   8e998:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e99c:	e0bffb17 	ldw	r2,-20(fp)
   8e9a0:	1000070e 	bge	r2,zero,8e9c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   8e9a4:	008e8c00 	call	8e8c0 <alt_get_errno>
   8e9a8:	1007883a 	mov	r3,r2
   8e9ac:	e0bffb17 	ldw	r2,-20(fp)
   8e9b0:	0085c83a 	sub	r2,zero,r2
   8e9b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e9b8:	00bfffc4 	movi	r2,-1
   8e9bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e9c0:	e0bffb17 	ldw	r2,-20(fp)
}
   8e9c4:	e037883a 	mov	sp,fp
   8e9c8:	dfc00117 	ldw	ra,4(sp)
   8e9cc:	df000017 	ldw	fp,0(sp)
   8e9d0:	dec00204 	addi	sp,sp,8
   8e9d4:	f800283a 	ret

0008e9d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e9d8:	defffd04 	addi	sp,sp,-12
   8e9dc:	dfc00215 	stw	ra,8(sp)
   8e9e0:	df000115 	stw	fp,4(sp)
   8e9e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e9e8:	0009883a 	mov	r4,zero
   8e9ec:	008ee800 	call	8ee80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e9f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e9f4:	008eeb80 	call	8eeb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e9f8:	01800274 	movhi	r6,9
   8e9fc:	3190a604 	addi	r6,r6,17048
   8ea00:	01400274 	movhi	r5,9
   8ea04:	2950a604 	addi	r5,r5,17048
   8ea08:	01000274 	movhi	r4,9
   8ea0c:	2110a604 	addi	r4,r4,17048
   8ea10:	0092f480 	call	92f48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8ea14:	00929980 	call	92998 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8ea18:	01000274 	movhi	r4,9
   8ea1c:	210a7e04 	addi	r4,r4,10744
   8ea20:	00938e00 	call	938e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8ea24:	d0a01d17 	ldw	r2,-32652(gp)
   8ea28:	d0e01e17 	ldw	r3,-32648(gp)
   8ea2c:	d1201f17 	ldw	r4,-32644(gp)
   8ea30:	200d883a 	mov	r6,r4
   8ea34:	180b883a 	mov	r5,r3
   8ea38:	1009883a 	mov	r4,r2
   8ea3c:	008026c0 	call	8026c <main>
   8ea40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8ea44:	01000044 	movi	r4,1
   8ea48:	008e4f40 	call	8e4f4 <close>
  exit (result);
   8ea4c:	e13fff17 	ldw	r4,-4(fp)
   8ea50:	00938f40 	call	938f4 <exit>

0008ea54 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8ea54:	defffe04 	addi	sp,sp,-8
   8ea58:	df000115 	stw	fp,4(sp)
   8ea5c:	df000104 	addi	fp,sp,4
   8ea60:	e13fff15 	stw	r4,-4(fp)
}
   8ea64:	0001883a 	nop
   8ea68:	e037883a 	mov	sp,fp
   8ea6c:	df000017 	ldw	fp,0(sp)
   8ea70:	dec00104 	addi	sp,sp,4
   8ea74:	f800283a 	ret

0008ea78 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8ea78:	defffe04 	addi	sp,sp,-8
   8ea7c:	df000115 	stw	fp,4(sp)
   8ea80:	df000104 	addi	fp,sp,4
   8ea84:	e13fff15 	stw	r4,-4(fp)
}
   8ea88:	0001883a 	nop
   8ea8c:	e037883a 	mov	sp,fp
   8ea90:	df000017 	ldw	fp,0(sp)
   8ea94:	dec00104 	addi	sp,sp,4
   8ea98:	f800283a 	ret

0008ea9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ea9c:	defffe04 	addi	sp,sp,-8
   8eaa0:	dfc00115 	stw	ra,4(sp)
   8eaa4:	df000015 	stw	fp,0(sp)
   8eaa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8eaac:	d0a00b17 	ldw	r2,-32724(gp)
   8eab0:	10000326 	beq	r2,zero,8eac0 <alt_get_errno+0x24>
   8eab4:	d0a00b17 	ldw	r2,-32724(gp)
   8eab8:	103ee83a 	callr	r2
   8eabc:	00000106 	br	8eac4 <alt_get_errno+0x28>
   8eac0:	d0a01c04 	addi	r2,gp,-32656
}
   8eac4:	e037883a 	mov	sp,fp
   8eac8:	dfc00117 	ldw	ra,4(sp)
   8eacc:	df000017 	ldw	fp,0(sp)
   8ead0:	dec00204 	addi	sp,sp,8
   8ead4:	f800283a 	ret

0008ead8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8ead8:	defff904 	addi	sp,sp,-28
   8eadc:	dfc00615 	stw	ra,24(sp)
   8eae0:	df000515 	stw	fp,20(sp)
   8eae4:	df000504 	addi	fp,sp,20
   8eae8:	e13ffd15 	stw	r4,-12(fp)
   8eaec:	e17ffe15 	stw	r5,-8(fp)
   8eaf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eaf4:	e0bffd17 	ldw	r2,-12(fp)
   8eaf8:	10000816 	blt	r2,zero,8eb1c <read+0x44>
   8eafc:	01400304 	movi	r5,12
   8eb00:	e13ffd17 	ldw	r4,-12(fp)
   8eb04:	00817900 	call	81790 <__mulsi3>
   8eb08:	1007883a 	mov	r3,r2
   8eb0c:	00800474 	movhi	r2,17
   8eb10:	10a23304 	addi	r2,r2,-30516
   8eb14:	1885883a 	add	r2,r3,r2
   8eb18:	00000106 	br	8eb20 <read+0x48>
   8eb1c:	0005883a 	mov	r2,zero
   8eb20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8eb24:	e0bffb17 	ldw	r2,-20(fp)
   8eb28:	10002226 	beq	r2,zero,8ebb4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eb2c:	e0bffb17 	ldw	r2,-20(fp)
   8eb30:	10800217 	ldw	r2,8(r2)
   8eb34:	108000cc 	andi	r2,r2,3
   8eb38:	10800060 	cmpeqi	r2,r2,1
   8eb3c:	1000181e 	bne	r2,zero,8eba0 <read+0xc8>
        (fd->dev->read))
   8eb40:	e0bffb17 	ldw	r2,-20(fp)
   8eb44:	10800017 	ldw	r2,0(r2)
   8eb48:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eb4c:	10001426 	beq	r2,zero,8eba0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8eb50:	e0bffb17 	ldw	r2,-20(fp)
   8eb54:	10800017 	ldw	r2,0(r2)
   8eb58:	10800517 	ldw	r2,20(r2)
   8eb5c:	e0ffff17 	ldw	r3,-4(fp)
   8eb60:	180d883a 	mov	r6,r3
   8eb64:	e17ffe17 	ldw	r5,-8(fp)
   8eb68:	e13ffb17 	ldw	r4,-20(fp)
   8eb6c:	103ee83a 	callr	r2
   8eb70:	e0bffc15 	stw	r2,-16(fp)
   8eb74:	e0bffc17 	ldw	r2,-16(fp)
   8eb78:	1000070e 	bge	r2,zero,8eb98 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   8eb7c:	008ea9c0 	call	8ea9c <alt_get_errno>
   8eb80:	1007883a 	mov	r3,r2
   8eb84:	e0bffc17 	ldw	r2,-16(fp)
   8eb88:	0085c83a 	sub	r2,zero,r2
   8eb8c:	18800015 	stw	r2,0(r3)
          return -1;
   8eb90:	00bfffc4 	movi	r2,-1
   8eb94:	00000c06 	br	8ebc8 <read+0xf0>
        }
        return rval;
   8eb98:	e0bffc17 	ldw	r2,-16(fp)
   8eb9c:	00000a06 	br	8ebc8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8eba0:	008ea9c0 	call	8ea9c <alt_get_errno>
   8eba4:	1007883a 	mov	r3,r2
   8eba8:	00800344 	movi	r2,13
   8ebac:	18800015 	stw	r2,0(r3)
   8ebb0:	00000406 	br	8ebc4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8ebb4:	008ea9c0 	call	8ea9c <alt_get_errno>
   8ebb8:	1007883a 	mov	r3,r2
   8ebbc:	00801444 	movi	r2,81
   8ebc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ebc4:	00bfffc4 	movi	r2,-1
}
   8ebc8:	e037883a 	mov	sp,fp
   8ebcc:	dfc00117 	ldw	ra,4(sp)
   8ebd0:	df000017 	ldw	fp,0(sp)
   8ebd4:	dec00204 	addi	sp,sp,8
   8ebd8:	f800283a 	ret

0008ebdc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8ebdc:	defffc04 	addi	sp,sp,-16
   8ebe0:	dfc00315 	stw	ra,12(sp)
   8ebe4:	df000215 	stw	fp,8(sp)
   8ebe8:	dc000115 	stw	r16,4(sp)
   8ebec:	df000204 	addi	fp,sp,8
   8ebf0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8ebf4:	e0bffe17 	ldw	r2,-8(fp)
   8ebf8:	108000d0 	cmplti	r2,r2,3
   8ebfc:	1000111e 	bne	r2,zero,8ec44 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ec00:	04000474 	movhi	r16,17
   8ec04:	84223304 	addi	r16,r16,-30516
   8ec08:	e0bffe17 	ldw	r2,-8(fp)
   8ec0c:	01400304 	movi	r5,12
   8ec10:	1009883a 	mov	r4,r2
   8ec14:	00817900 	call	81790 <__mulsi3>
   8ec18:	8085883a 	add	r2,r16,r2
   8ec1c:	10800204 	addi	r2,r2,8
   8ec20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ec24:	04000474 	movhi	r16,17
   8ec28:	84223304 	addi	r16,r16,-30516
   8ec2c:	e0bffe17 	ldw	r2,-8(fp)
   8ec30:	01400304 	movi	r5,12
   8ec34:	1009883a 	mov	r4,r2
   8ec38:	00817900 	call	81790 <__mulsi3>
   8ec3c:	8085883a 	add	r2,r16,r2
   8ec40:	10000015 	stw	zero,0(r2)
  }
}
   8ec44:	0001883a 	nop
   8ec48:	e6ffff04 	addi	sp,fp,-4
   8ec4c:	dfc00217 	ldw	ra,8(sp)
   8ec50:	df000117 	ldw	fp,4(sp)
   8ec54:	dc000017 	ldw	r16,0(sp)
   8ec58:	dec00304 	addi	sp,sp,12
   8ec5c:	f800283a 	ret

0008ec60 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ec60:	defff904 	addi	sp,sp,-28
   8ec64:	df000615 	stw	fp,24(sp)
   8ec68:	df000604 	addi	fp,sp,24
   8ec6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ec70:	0005303a 	rdctl	r2,status
   8ec74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ec78:	e0fffe17 	ldw	r3,-8(fp)
   8ec7c:	00bfff84 	movi	r2,-2
   8ec80:	1884703a 	and	r2,r3,r2
   8ec84:	1001703a 	wrctl	status,r2
  
  return context;
   8ec88:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ec8c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ec90:	d0a00c17 	ldw	r2,-32720(gp)
   8ec94:	10c000c4 	addi	r3,r2,3
   8ec98:	00bfff04 	movi	r2,-4
   8ec9c:	1884703a 	and	r2,r3,r2
   8eca0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8eca4:	d0e00c17 	ldw	r3,-32720(gp)
   8eca8:	e0bfff17 	ldw	r2,-4(fp)
   8ecac:	1887883a 	add	r3,r3,r2
   8ecb0:	00800474 	movhi	r2,17
   8ecb4:	10800004 	addi	r2,r2,0
   8ecb8:	10c0062e 	bgeu	r2,r3,8ecd4 <sbrk+0x74>
   8ecbc:	e0bffb17 	ldw	r2,-20(fp)
   8ecc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ecc4:	e0bffa17 	ldw	r2,-24(fp)
   8ecc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8eccc:	00bfffc4 	movi	r2,-1
   8ecd0:	00000b06 	br	8ed00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8ecd4:	d0a00c17 	ldw	r2,-32720(gp)
   8ecd8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8ecdc:	d0e00c17 	ldw	r3,-32720(gp)
   8ece0:	e0bfff17 	ldw	r2,-4(fp)
   8ece4:	1885883a 	add	r2,r3,r2
   8ece8:	d0a00c15 	stw	r2,-32720(gp)
   8ecec:	e0bffb17 	ldw	r2,-20(fp)
   8ecf0:	e0bffc15 	stw	r2,-16(fp)
   8ecf4:	e0bffc17 	ldw	r2,-16(fp)
   8ecf8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8ecfc:	e0bffd17 	ldw	r2,-12(fp)
} 
   8ed00:	e037883a 	mov	sp,fp
   8ed04:	df000017 	ldw	fp,0(sp)
   8ed08:	dec00104 	addi	sp,sp,4
   8ed0c:	f800283a 	ret

0008ed10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ed10:	defffe04 	addi	sp,sp,-8
   8ed14:	dfc00115 	stw	ra,4(sp)
   8ed18:	df000015 	stw	fp,0(sp)
   8ed1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ed20:	d0a00b17 	ldw	r2,-32724(gp)
   8ed24:	10000326 	beq	r2,zero,8ed34 <alt_get_errno+0x24>
   8ed28:	d0a00b17 	ldw	r2,-32724(gp)
   8ed2c:	103ee83a 	callr	r2
   8ed30:	00000106 	br	8ed38 <alt_get_errno+0x28>
   8ed34:	d0a01c04 	addi	r2,gp,-32656
}
   8ed38:	e037883a 	mov	sp,fp
   8ed3c:	dfc00117 	ldw	ra,4(sp)
   8ed40:	df000017 	ldw	fp,0(sp)
   8ed44:	dec00204 	addi	sp,sp,8
   8ed48:	f800283a 	ret

0008ed4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ed4c:	defff904 	addi	sp,sp,-28
   8ed50:	dfc00615 	stw	ra,24(sp)
   8ed54:	df000515 	stw	fp,20(sp)
   8ed58:	df000504 	addi	fp,sp,20
   8ed5c:	e13ffd15 	stw	r4,-12(fp)
   8ed60:	e17ffe15 	stw	r5,-8(fp)
   8ed64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ed68:	e0bffd17 	ldw	r2,-12(fp)
   8ed6c:	10000816 	blt	r2,zero,8ed90 <write+0x44>
   8ed70:	01400304 	movi	r5,12
   8ed74:	e13ffd17 	ldw	r4,-12(fp)
   8ed78:	00817900 	call	81790 <__mulsi3>
   8ed7c:	1007883a 	mov	r3,r2
   8ed80:	00800474 	movhi	r2,17
   8ed84:	10a23304 	addi	r2,r2,-30516
   8ed88:	1885883a 	add	r2,r3,r2
   8ed8c:	00000106 	br	8ed94 <write+0x48>
   8ed90:	0005883a 	mov	r2,zero
   8ed94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ed98:	e0bffb17 	ldw	r2,-20(fp)
   8ed9c:	10002126 	beq	r2,zero,8ee24 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8eda0:	e0bffb17 	ldw	r2,-20(fp)
   8eda4:	10800217 	ldw	r2,8(r2)
   8eda8:	108000cc 	andi	r2,r2,3
   8edac:	10001826 	beq	r2,zero,8ee10 <write+0xc4>
   8edb0:	e0bffb17 	ldw	r2,-20(fp)
   8edb4:	10800017 	ldw	r2,0(r2)
   8edb8:	10800617 	ldw	r2,24(r2)
   8edbc:	10001426 	beq	r2,zero,8ee10 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8edc0:	e0bffb17 	ldw	r2,-20(fp)
   8edc4:	10800017 	ldw	r2,0(r2)
   8edc8:	10800617 	ldw	r2,24(r2)
   8edcc:	e0ffff17 	ldw	r3,-4(fp)
   8edd0:	180d883a 	mov	r6,r3
   8edd4:	e17ffe17 	ldw	r5,-8(fp)
   8edd8:	e13ffb17 	ldw	r4,-20(fp)
   8eddc:	103ee83a 	callr	r2
   8ede0:	e0bffc15 	stw	r2,-16(fp)
   8ede4:	e0bffc17 	ldw	r2,-16(fp)
   8ede8:	1000070e 	bge	r2,zero,8ee08 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   8edec:	008ed100 	call	8ed10 <alt_get_errno>
   8edf0:	1007883a 	mov	r3,r2
   8edf4:	e0bffc17 	ldw	r2,-16(fp)
   8edf8:	0085c83a 	sub	r2,zero,r2
   8edfc:	18800015 	stw	r2,0(r3)
        return -1;
   8ee00:	00bfffc4 	movi	r2,-1
   8ee04:	00000c06 	br	8ee38 <write+0xec>
      }
      return rval;
   8ee08:	e0bffc17 	ldw	r2,-16(fp)
   8ee0c:	00000a06 	br	8ee38 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8ee10:	008ed100 	call	8ed10 <alt_get_errno>
   8ee14:	1007883a 	mov	r3,r2
   8ee18:	00800344 	movi	r2,13
   8ee1c:	18800015 	stw	r2,0(r3)
   8ee20:	00000406 	br	8ee34 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8ee24:	008ed100 	call	8ed10 <alt_get_errno>
   8ee28:	1007883a 	mov	r3,r2
   8ee2c:	00801444 	movi	r2,81
   8ee30:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ee34:	00bfffc4 	movi	r2,-1
}
   8ee38:	e037883a 	mov	sp,fp
   8ee3c:	dfc00117 	ldw	ra,4(sp)
   8ee40:	df000017 	ldw	fp,0(sp)
   8ee44:	dec00204 	addi	sp,sp,8
   8ee48:	f800283a 	ret

0008ee4c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8ee4c:	defffd04 	addi	sp,sp,-12
   8ee50:	dfc00215 	stw	ra,8(sp)
   8ee54:	df000115 	stw	fp,4(sp)
   8ee58:	df000104 	addi	fp,sp,4
   8ee5c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ee60:	d1600804 	addi	r5,gp,-32736
   8ee64:	e13fff17 	ldw	r4,-4(fp)
   8ee68:	00928f40 	call	928f4 <alt_dev_llist_insert>
}
   8ee6c:	e037883a 	mov	sp,fp
   8ee70:	dfc00117 	ldw	ra,4(sp)
   8ee74:	df000017 	ldw	fp,0(sp)
   8ee78:	dec00204 	addi	sp,sp,8
   8ee7c:	f800283a 	ret

0008ee80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ee80:	defffd04 	addi	sp,sp,-12
   8ee84:	dfc00215 	stw	ra,8(sp)
   8ee88:	df000115 	stw	fp,4(sp)
   8ee8c:	df000104 	addi	fp,sp,4
   8ee90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   8ee94:	00936540 	call	93654 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ee98:	00800044 	movi	r2,1
   8ee9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8eea0:	0001883a 	nop
   8eea4:	e037883a 	mov	sp,fp
   8eea8:	dfc00117 	ldw	ra,4(sp)
   8eeac:	df000017 	ldw	fp,0(sp)
   8eeb0:	dec00204 	addi	sp,sp,8
   8eeb4:	f800283a 	ret

0008eeb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8eeb8:	defffe04 	addi	sp,sp,-8
   8eebc:	dfc00115 	stw	ra,4(sp)
   8eec0:	df000015 	stw	fp,0(sp)
   8eec4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8eec8:	01c0fa04 	movi	r7,1000
   8eecc:	01800044 	movi	r6,1
   8eed0:	000b883a 	mov	r5,zero
   8eed4:	01000474 	movhi	r4,17
   8eed8:	21041004 	addi	r4,r4,4160
   8eedc:	00916300 	call	91630 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   8eee0:	01000474 	movhi	r4,17
   8eee4:	21229304 	addi	r4,r4,-30132
   8eee8:	008f1880 	call	8f188 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8eeec:	000d883a 	mov	r6,zero
   8eef0:	000b883a 	mov	r5,zero
   8eef4:	01000474 	movhi	r4,17
   8eef8:	2122ab04 	addi	r4,r4,-30036
   8eefc:	0090cb40 	call	90cb4 <altera_avalon_jtag_uart_init>
   8ef00:	01000474 	movhi	r4,17
   8ef04:	2122a104 	addi	r4,r4,-30076
   8ef08:	008ee4c0 	call	8ee4c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
   8ef0c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   8ef10:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
   8ef14:	01000474 	movhi	r4,17
   8ef18:	2126b904 	addi	r4,r4,-25884
   8ef1c:	0091f600 	call	91f60 <altera_onchip_flash_init>
}
   8ef20:	0001883a 	nop
   8ef24:	e037883a 	mov	sp,fp
   8ef28:	dfc00117 	ldw	ra,4(sp)
   8ef2c:	df000017 	ldw	fp,0(sp)
   8ef30:	dec00204 	addi	sp,sp,8
   8ef34:	f800283a 	ret

0008ef38 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   8ef38:	defff904 	addi	sp,sp,-28
   8ef3c:	dfc00615 	stw	ra,24(sp)
   8ef40:	df000515 	stw	fp,20(sp)
   8ef44:	df000504 	addi	fp,sp,20
   8ef48:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   8ef4c:	008000b4 	movhi	r2,2
   8ef50:	10a1a804 	addi	r2,r2,-31072
   8ef54:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   8ef58:	e0bfff17 	ldw	r2,-4(fp)
   8ef5c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   8ef60:	e0bffc17 	ldw	r2,-16(fp)
   8ef64:	10800717 	ldw	r2,28(r2)
   8ef68:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   8ef6c:	e0bffd17 	ldw	r2,-12(fp)
   8ef70:	10800217 	ldw	r2,8(r2)
   8ef74:	10800098 	cmpnei	r2,r2,2
   8ef78:	1000251e 	bne	r2,zero,8f010 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   8ef7c:	e0bffd17 	ldw	r2,-12(fp)
   8ef80:	10c00017 	ldw	r3,0(r2)
   8ef84:	e0bffd17 	ldw	r2,-12(fp)
   8ef88:	10800117 	ldw	r2,4(r2)
   8ef8c:	e13ffe04 	addi	r4,fp,-8
   8ef90:	200f883a 	mov	r7,r4
   8ef94:	100d883a 	mov	r6,r2
   8ef98:	180b883a 	mov	r5,r3
   8ef9c:	e13ffc17 	ldw	r4,-16(fp)
   8efa0:	008f6e80 	call	8f6e8 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   8efa4:	e0bffd17 	ldw	r2,-12(fp)
   8efa8:	10c00117 	ldw	r3,4(r2)
   8efac:	e0bffe17 	ldw	r2,-8(fp)
   8efb0:	1887c83a 	sub	r3,r3,r2
   8efb4:	e0bffd17 	ldw	r2,-12(fp)
   8efb8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   8efbc:	e0bffd17 	ldw	r2,-12(fp)
   8efc0:	10c00017 	ldw	r3,0(r2)
   8efc4:	e0bffe17 	ldw	r2,-8(fp)
   8efc8:	1887883a 	add	r3,r3,r2
   8efcc:	e0bffd17 	ldw	r2,-12(fp)
   8efd0:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   8efd4:	e0bffd17 	ldw	r2,-12(fp)
   8efd8:	10800117 	ldw	r2,4(r2)
   8efdc:	10000c26 	beq	r2,zero,8f010 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   8efe0:	01400704 	movi	r5,28
   8efe4:	e13ffc17 	ldw	r4,-16(fp)
   8efe8:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   8efec:	01400084 	movi	r5,2
   8eff0:	e13ffc17 	ldw	r4,-16(fp)
   8eff4:	00909440 	call	90944 <alt_avalon_i2c_int_enable>
   8eff8:	00000e06 	br	8f034 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   8effc:	e0bffb17 	ldw	r2,-20(fp)
   8f000:	10bfffc4 	addi	r2,r2,-1
   8f004:	e0bffb15 	stw	r2,-20(fp)
   8f008:	e0bffb17 	ldw	r2,-20(fp)
   8f00c:	10000426 	beq	r2,zero,8f020 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   8f010:	e13ffc17 	ldw	r4,-16(fp)
   8f014:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   8f018:	103ff81e 	bne	r2,zero,8effc <_gp+0xfff7d418>
   8f01c:	00000106 	br	8f024 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   8f020:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   8f024:	e13ffc17 	ldw	r4,-16(fp)
   8f028:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   8f02c:	e0bffd17 	ldw	r2,-12(fp)
   8f030:	10000215 	stw	zero,8(r2)
}
   8f034:	e037883a 	mov	sp,fp
   8f038:	dfc00117 	ldw	ra,4(sp)
   8f03c:	df000017 	ldw	fp,0(sp)
   8f040:	dec00204 	addi	sp,sp,8
   8f044:	f800283a 	ret

0008f048 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   8f048:	defffc04 	addi	sp,sp,-16
   8f04c:	dfc00315 	stw	ra,12(sp)
   8f050:	df000215 	stw	fp,8(sp)
   8f054:	df000204 	addi	fp,sp,8
   8f058:	e13ffe15 	stw	r4,-8(fp)
   8f05c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   8f060:	e0bfff17 	ldw	r2,-4(fp)
   8f064:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   8f068:	e1ffff17 	ldw	r7,-4(fp)
   8f06c:	000d883a 	mov	r6,zero
   8f070:	01400274 	movhi	r5,9
   8f074:	297bce04 	addi	r5,r5,-4296
   8f078:	e13ffe17 	ldw	r4,-8(fp)
   8f07c:	008f1340 	call	8f134 <alt_avalon_i2c_register_callback>
}
   8f080:	0001883a 	nop
   8f084:	e037883a 	mov	sp,fp
   8f088:	dfc00117 	ldw	ra,4(sp)
   8f08c:	df000017 	ldw	fp,0(sp)
   8f090:	dec00204 	addi	sp,sp,8
   8f094:	f800283a 	ret

0008f098 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   8f098:	defff904 	addi	sp,sp,-28
   8f09c:	dfc00615 	stw	ra,24(sp)
   8f0a0:	df000515 	stw	fp,20(sp)
   8f0a4:	df000504 	addi	fp,sp,20
   8f0a8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   8f0ac:	e0bfff17 	ldw	r2,-4(fp)
   8f0b0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   8f0b4:	014007c4 	movi	r5,31
   8f0b8:	e13ffb17 	ldw	r4,-20(fp)
   8f0bc:	00908dc0 	call	908dc <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   8f0c0:	01400704 	movi	r5,28
   8f0c4:	e13ffb17 	ldw	r4,-20(fp)
   8f0c8:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   8f0cc:	e0bffb17 	ldw	r2,-20(fp)
   8f0d0:	10800617 	ldw	r2,24(r2)
   8f0d4:	10001126 	beq	r2,zero,8f11c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f0d8:	0005303a 	rdctl	r2,status
   8f0dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f0e0:	e0fffd17 	ldw	r3,-12(fp)
   8f0e4:	00bfff84 	movi	r2,-2
   8f0e8:	1884703a 	and	r2,r3,r2
   8f0ec:	1001703a 	wrctl	status,r2
  
  return context;
   8f0f0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   8f0f4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   8f0f8:	e0bffb17 	ldw	r2,-20(fp)
   8f0fc:	10800617 	ldw	r2,24(r2)
   8f100:	e13ffb17 	ldw	r4,-20(fp)
   8f104:	103ee83a 	callr	r2
   8f108:	e0bffc17 	ldw	r2,-16(fp)
   8f10c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f110:	e0bffe17 	ldw	r2,-8(fp)
   8f114:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   8f118:	0001883a 	nop
   8f11c:	0001883a 	nop
}
   8f120:	e037883a 	mov	sp,fp
   8f124:	dfc00117 	ldw	ra,4(sp)
   8f128:	df000017 	ldw	fp,0(sp)
   8f12c:	dec00204 	addi	sp,sp,8
   8f130:	f800283a 	ret

0008f134 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   8f134:	defffb04 	addi	sp,sp,-20
   8f138:	df000415 	stw	fp,16(sp)
   8f13c:	df000404 	addi	fp,sp,16
   8f140:	e13ffc15 	stw	r4,-16(fp)
   8f144:	e17ffd15 	stw	r5,-12(fp)
   8f148:	e1bffe15 	stw	r6,-8(fp)
   8f14c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   8f150:	e0bffc17 	ldw	r2,-16(fp)
   8f154:	e0fffd17 	ldw	r3,-12(fp)
   8f158:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   8f15c:	e0bffc17 	ldw	r2,-16(fp)
   8f160:	e0ffff17 	ldw	r3,-4(fp)
   8f164:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   8f168:	e0bffc17 	ldw	r2,-16(fp)
   8f16c:	e0fffe17 	ldw	r3,-8(fp)
   8f170:	10c00815 	stw	r3,32(r2)

    return ;
   8f174:	0001883a 	nop
}
   8f178:	e037883a 	mov	sp,fp
   8f17c:	df000017 	ldw	fp,0(sp)
   8f180:	dec00104 	addi	sp,sp,4
   8f184:	f800283a 	ret

0008f188 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   8f188:	defff704 	addi	sp,sp,-36
   8f18c:	dfc00815 	stw	ra,32(sp)
   8f190:	df000715 	stw	fp,28(sp)
   8f194:	df000704 	addi	fp,sp,28
   8f198:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   8f19c:	e13fff17 	ldw	r4,-4(fp)
   8f1a0:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   8f1a4:	014007c4 	movi	r5,31
   8f1a8:	e13fff17 	ldw	r4,-4(fp)
   8f1ac:	00908dc0 	call	908dc <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   8f1b0:	01400704 	movi	r5,28
   8f1b4:	e13fff17 	ldw	r4,-4(fp)
   8f1b8:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   8f1bc:	014000c4 	movi	r5,3
   8f1c0:	e13fff17 	ldw	r4,-4(fp)
   8f1c4:	0090ae80 	call	90ae8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   8f1c8:	014000c4 	movi	r5,3
   8f1cc:	e13fff17 	ldw	r4,-4(fp)
   8f1d0:	0090a380 	call	90a38 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   8f1d4:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   8f1d8:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   8f1dc:	e0bffb04 	addi	r2,fp,-20
   8f1e0:	018000b4 	movhi	r6,2
   8f1e4:	31a1a804 	addi	r6,r6,-31072
   8f1e8:	100b883a 	mov	r5,r2
   8f1ec:	e13fff17 	ldw	r4,-4(fp)
   8f1f0:	008f5a80 	call	8f5a8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   8f1f4:	e0bffb04 	addi	r2,fp,-20
   8f1f8:	100b883a 	mov	r5,r2
   8f1fc:	e13fff17 	ldw	r4,-4(fp)
   8f200:	008f4480 	call	8f448 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   8f204:	d1600d04 	addi	r5,gp,-32716
   8f208:	e13fff17 	ldw	r4,-4(fp)
   8f20c:	00928f40 	call	928f4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8f210:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   8f214:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   8f218:	e0bffa17 	ldw	r2,-24(fp)
   8f21c:	10000c1e 	bne	r2,zero,8f250 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   8f220:	e0bfff17 	ldw	r2,-4(fp)
   8f224:	10c00417 	ldw	r3,16(r2)
   8f228:	e0bfff17 	ldw	r2,-4(fp)
   8f22c:	10800517 	ldw	r2,20(r2)
   8f230:	d8000015 	stw	zero,0(sp)
   8f234:	e1ffff17 	ldw	r7,-4(fp)
   8f238:	01800274 	movhi	r6,9
   8f23c:	31bc2604 	addi	r6,r6,-3944
   8f240:	100b883a 	mov	r5,r2
   8f244:	1809883a 	mov	r4,r3
   8f248:	0092bc40 	call	92bc4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   8f24c:	00000406 	br	8f260 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   8f250:	01000274 	movhi	r4,9
   8f254:	2110ba04 	addi	r4,r4,17128
   8f258:	00932480 	call	93248 <alt_printf>
    }

    return;
   8f25c:	0001883a 	nop

}
   8f260:	e037883a 	mov	sp,fp
   8f264:	dfc00117 	ldw	ra,4(sp)
   8f268:	df000017 	ldw	fp,0(sp)
   8f26c:	dec00204 	addi	sp,sp,8
   8f270:	f800283a 	ret

0008f274 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   8f274:	defffc04 	addi	sp,sp,-16
   8f278:	dfc00315 	stw	ra,12(sp)
   8f27c:	df000215 	stw	fp,8(sp)
   8f280:	df000204 	addi	fp,sp,8
   8f284:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   8f288:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   8f28c:	d1600d04 	addi	r5,gp,-32716
   8f290:	e13fff17 	ldw	r4,-4(fp)
   8f294:	0092a580 	call	92a58 <alt_find_dev>
   8f298:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   8f29c:	e0bffe17 	ldw	r2,-8(fp)
}
   8f2a0:	e037883a 	mov	sp,fp
   8f2a4:	dfc00117 	ldw	ra,4(sp)
   8f2a8:	df000017 	ldw	fp,0(sp)
   8f2ac:	dec00204 	addi	sp,sp,8
   8f2b0:	f800283a 	ret

0008f2b4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   8f2b4:	defffc04 	addi	sp,sp,-16
   8f2b8:	df000315 	stw	fp,12(sp)
   8f2bc:	df000304 	addi	fp,sp,12
   8f2c0:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   8f2c4:	e0bfff17 	ldw	r2,-4(fp)
   8f2c8:	10800717 	ldw	r2,28(r2)
   8f2cc:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   8f2d0:	e0bfff17 	ldw	r2,-4(fp)
   8f2d4:	10800317 	ldw	r2,12(r2)
   8f2d8:	10800204 	addi	r2,r2,8
   8f2dc:	10800037 	ldwio	r2,0(r2)
   8f2e0:	1080004c 	andi	r2,r2,1
   8f2e4:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   8f2e8:	e0bffe17 	ldw	r2,-8(fp)
   8f2ec:	10000226 	beq	r2,zero,8f2f8 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   8f2f0:	00bffe44 	movi	r2,-7
   8f2f4:	00001106 	br	8f33c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   8f2f8:	e0bfff17 	ldw	r2,-4(fp)
   8f2fc:	10c00617 	ldw	r3,24(r2)
   8f300:	00800274 	movhi	r2,9
   8f304:	10bbce04 	addi	r2,r2,-4296
   8f308:	1880021e 	bne	r3,r2,8f314 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   8f30c:	e0bffd17 	ldw	r2,-12(fp)
   8f310:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   8f314:	e0bfff17 	ldw	r2,-4(fp)
   8f318:	10800317 	ldw	r2,12(r2)
   8f31c:	10800204 	addi	r2,r2,8
   8f320:	e0ffff17 	ldw	r3,-4(fp)
   8f324:	18c00317 	ldw	r3,12(r3)
   8f328:	18c00204 	addi	r3,r3,8
   8f32c:	18c00037 	ldwio	r3,0(r3)
   8f330:	18c00054 	ori	r3,r3,1
   8f334:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   8f338:	0005883a 	mov	r2,zero
}
   8f33c:	e037883a 	mov	sp,fp
   8f340:	df000017 	ldw	fp,0(sp)
   8f344:	dec00104 	addi	sp,sp,4
   8f348:	f800283a 	ret

0008f34c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   8f34c:	defffe04 	addi	sp,sp,-8
   8f350:	df000115 	stw	fp,4(sp)
   8f354:	df000104 	addi	fp,sp,4
   8f358:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   8f35c:	e0bfff17 	ldw	r2,-4(fp)
   8f360:	10800317 	ldw	r2,12(r2)
   8f364:	10800204 	addi	r2,r2,8
   8f368:	e0ffff17 	ldw	r3,-4(fp)
   8f36c:	18c00317 	ldw	r3,12(r3)
   8f370:	18c00204 	addi	r3,r3,8
   8f374:	19000037 	ldwio	r4,0(r3)
   8f378:	00ffff84 	movi	r3,-2
   8f37c:	20c6703a 	and	r3,r4,r3
   8f380:	10c00035 	stwio	r3,0(r2)

}
   8f384:	0001883a 	nop
   8f388:	e037883a 	mov	sp,fp
   8f38c:	df000017 	ldw	fp,0(sp)
   8f390:	dec00104 	addi	sp,sp,4
   8f394:	f800283a 	ret

0008f398 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   8f398:	defffd04 	addi	sp,sp,-12
   8f39c:	df000215 	stw	fp,8(sp)
   8f3a0:	df000204 	addi	fp,sp,8
   8f3a4:	e13ffe15 	stw	r4,-8(fp)
   8f3a8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   8f3ac:	e0bffe17 	ldw	r2,-8(fp)
   8f3b0:	10c00d17 	ldw	r3,52(r2)
   8f3b4:	e0bfff17 	ldw	r2,-4(fp)
   8f3b8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   8f3bc:	e0bffe17 	ldw	r2,-8(fp)
   8f3c0:	10800317 	ldw	r2,12(r2)
   8f3c4:	10800204 	addi	r2,r2,8
   8f3c8:	10800037 	ldwio	r2,0(r2)
   8f3cc:	1080008c 	andi	r2,r2,2
   8f3d0:	1005d07a 	srai	r2,r2,1
   8f3d4:	1007883a 	mov	r3,r2
   8f3d8:	e0bfff17 	ldw	r2,-4(fp)
   8f3dc:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   8f3e0:	e0bffe17 	ldw	r2,-8(fp)
   8f3e4:	10800317 	ldw	r2,12(r2)
   8f3e8:	10800904 	addi	r2,r2,36
   8f3ec:	10800037 	ldwio	r2,0(r2)
   8f3f0:	1007883a 	mov	r3,r2
   8f3f4:	e0bfff17 	ldw	r2,-4(fp)
   8f3f8:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   8f3fc:	e0bffe17 	ldw	r2,-8(fp)
   8f400:	10800317 	ldw	r2,12(r2)
   8f404:	10800804 	addi	r2,r2,32
   8f408:	10800037 	ldwio	r2,0(r2)
   8f40c:	1007883a 	mov	r3,r2
   8f410:	e0bfff17 	ldw	r2,-4(fp)
   8f414:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   8f418:	e0bffe17 	ldw	r2,-8(fp)
   8f41c:	10800317 	ldw	r2,12(r2)
   8f420:	10800a04 	addi	r2,r2,40
   8f424:	10800037 	ldwio	r2,0(r2)
   8f428:	1007883a 	mov	r3,r2
   8f42c:	e0bfff17 	ldw	r2,-4(fp)
   8f430:	10c0030d 	sth	r3,12(r2)
}
   8f434:	0001883a 	nop
   8f438:	e037883a 	mov	sp,fp
   8f43c:	df000017 	ldw	fp,0(sp)
   8f440:	dec00104 	addi	sp,sp,4
   8f444:	f800283a 	ret

0008f448 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   8f448:	defffd04 	addi	sp,sp,-12
   8f44c:	df000215 	stw	fp,8(sp)
   8f450:	df000204 	addi	fp,sp,8
   8f454:	e13ffe15 	stw	r4,-8(fp)
   8f458:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   8f45c:	e0bfff17 	ldw	r2,-4(fp)
   8f460:	10c00017 	ldw	r3,0(r2)
   8f464:	e0bffe17 	ldw	r2,-8(fp)
   8f468:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   8f46c:	e0bffe17 	ldw	r2,-8(fp)
   8f470:	10800317 	ldw	r2,12(r2)
   8f474:	10c00204 	addi	r3,r2,8
   8f478:	e0bffe17 	ldw	r2,-8(fp)
   8f47c:	10800317 	ldw	r2,12(r2)
   8f480:	10800204 	addi	r2,r2,8
   8f484:	10800037 	ldwio	r2,0(r2)
   8f488:	1009883a 	mov	r4,r2
   8f48c:	00bfff44 	movi	r2,-3
   8f490:	2088703a 	and	r4,r4,r2
   8f494:	e0bfff17 	ldw	r2,-4(fp)
   8f498:	10800117 	ldw	r2,4(r2)
   8f49c:	1085883a 	add	r2,r2,r2
   8f4a0:	1080008c 	andi	r2,r2,2
   8f4a4:	2084b03a 	or	r2,r4,r2
   8f4a8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   8f4ac:	e0bffe17 	ldw	r2,-8(fp)
   8f4b0:	10800317 	ldw	r2,12(r2)
   8f4b4:	10800904 	addi	r2,r2,36
   8f4b8:	e0ffff17 	ldw	r3,-4(fp)
   8f4bc:	18c0020b 	ldhu	r3,8(r3)
   8f4c0:	18ffffcc 	andi	r3,r3,65535
   8f4c4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   8f4c8:	e0bffe17 	ldw	r2,-8(fp)
   8f4cc:	10800317 	ldw	r2,12(r2)
   8f4d0:	10800804 	addi	r2,r2,32
   8f4d4:	e0ffff17 	ldw	r3,-4(fp)
   8f4d8:	18c0028b 	ldhu	r3,10(r3)
   8f4dc:	18ffffcc 	andi	r3,r3,65535
   8f4e0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   8f4e4:	e0bffe17 	ldw	r2,-8(fp)
   8f4e8:	10800317 	ldw	r2,12(r2)
   8f4ec:	10800a04 	addi	r2,r2,40
   8f4f0:	e0ffff17 	ldw	r3,-4(fp)
   8f4f4:	18c0030b 	ldhu	r3,12(r3)
   8f4f8:	18ffffcc 	andi	r3,r3,65535
   8f4fc:	10c00035 	stwio	r3,0(r2)
}
   8f500:	0001883a 	nop
   8f504:	e037883a 	mov	sp,fp
   8f508:	df000017 	ldw	fp,0(sp)
   8f50c:	dec00104 	addi	sp,sp,4
   8f510:	f800283a 	ret

0008f514 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   8f514:	defffb04 	addi	sp,sp,-20
   8f518:	dfc00415 	stw	ra,16(sp)
   8f51c:	df000315 	stw	fp,12(sp)
   8f520:	df000304 	addi	fp,sp,12
   8f524:	e13ffd15 	stw	r4,-12(fp)
   8f528:	e17ffe15 	stw	r5,-8(fp)
   8f52c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   8f530:	e0bffe17 	ldw	r2,-8(fp)
   8f534:	1080028b 	ldhu	r2,10(r2)
   8f538:	10bfffcc 	andi	r2,r2,65535
   8f53c:	10000426 	beq	r2,zero,8f550 <alt_avalon_i2c_master_config_speed_get+0x3c>
   8f540:	e0bffe17 	ldw	r2,-8(fp)
   8f544:	1080020b 	ldhu	r2,8(r2)
   8f548:	10bfffcc 	andi	r2,r2,65535
   8f54c:	1000021e 	bne	r2,zero,8f558 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   8f550:	00bfff44 	movi	r2,-3
   8f554:	00000f06 	br	8f594 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   8f558:	e0bffd17 	ldw	r2,-12(fp)
   8f55c:	11000c17 	ldw	r4,48(r2)
   8f560:	e0bffe17 	ldw	r2,-8(fp)
   8f564:	1080028b 	ldhu	r2,10(r2)
   8f568:	10ffffcc 	andi	r3,r2,65535
   8f56c:	e0bffe17 	ldw	r2,-8(fp)
   8f570:	1080020b 	ldhu	r2,8(r2)
   8f574:	10bfffcc 	andi	r2,r2,65535
   8f578:	1885883a 	add	r2,r3,r2
   8f57c:	100b883a 	mov	r5,r2
   8f580:	0080b400 	call	80b40 <__udivsi3>
   8f584:	1007883a 	mov	r3,r2
   8f588:	e0bfff17 	ldw	r2,-4(fp)
   8f58c:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   8f590:	0005883a 	mov	r2,zero
}
   8f594:	e037883a 	mov	sp,fp
   8f598:	dfc00117 	ldw	ra,4(sp)
   8f59c:	df000017 	ldw	fp,0(sp)
   8f5a0:	dec00204 	addi	sp,sp,8
   8f5a4:	f800283a 	ret

0008f5a8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   8f5a8:	defff904 	addi	sp,sp,-28
   8f5ac:	dfc00615 	stw	ra,24(sp)
   8f5b0:	df000515 	stw	fp,20(sp)
   8f5b4:	df000504 	addi	fp,sp,20
   8f5b8:	e13ffd15 	stw	r4,-12(fp)
   8f5bc:	e17ffe15 	stw	r5,-8(fp)
   8f5c0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   8f5c4:	e0ffff17 	ldw	r3,-4(fp)
   8f5c8:	008001b4 	movhi	r2,6
   8f5cc:	1086a004 	addi	r2,r2,6784
   8f5d0:	10c00436 	bltu	r2,r3,8f5e4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   8f5d4:	e0bfff17 	ldw	r2,-4(fp)
   8f5d8:	10000226 	beq	r2,zero,8f5e4 <alt_avalon_i2c_master_config_speed_set+0x3c>
   8f5dc:	e0bfff17 	ldw	r2,-4(fp)
   8f5e0:	1000021e 	bne	r2,zero,8f5ec <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   8f5e4:	00bfff04 	movi	r2,-4
   8f5e8:	00002906 	br	8f690 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   8f5ec:	e0bffd17 	ldw	r2,-12(fp)
   8f5f0:	10c00c17 	ldw	r3,48(r2)
   8f5f4:	e0bfff17 	ldw	r2,-4(fp)
   8f5f8:	1085883a 	add	r2,r2,r2
   8f5fc:	100b883a 	mov	r5,r2
   8f600:	1809883a 	mov	r4,r3
   8f604:	0080b400 	call	80b40 <__udivsi3>
   8f608:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   8f60c:	e0bffb17 	ldw	r2,-20(fp)
   8f610:	10800f04 	addi	r2,r2,60
   8f614:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   8f618:	e0bffb17 	ldw	r2,-20(fp)
   8f61c:	10bff104 	addi	r2,r2,-60
   8f620:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   8f624:	e0ffff17 	ldw	r3,-4(fp)
   8f628:	008000b4 	movhi	r2,2
   8f62c:	10a1a804 	addi	r2,r2,-31072
   8f630:	10c0042e 	bgeu	r2,r3,8f644 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   8f634:	e0bffe17 	ldw	r2,-8(fp)
   8f638:	00c00044 	movi	r3,1
   8f63c:	10c00115 	stw	r3,4(r2)
   8f640:	00000206 	br	8f64c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   8f644:	e0bffe17 	ldw	r2,-8(fp)
   8f648:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   8f64c:	e0bffb17 	ldw	r2,-20(fp)
   8f650:	1007883a 	mov	r3,r2
   8f654:	e0bffe17 	ldw	r2,-8(fp)
   8f658:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   8f65c:	e0bffc17 	ldw	r2,-16(fp)
   8f660:	1007883a 	mov	r3,r2
   8f664:	e0bffe17 	ldw	r2,-8(fp)
   8f668:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   8f66c:	e0bffb17 	ldw	r2,-20(fp)
   8f670:	1007883a 	mov	r3,r2
   8f674:	e0bffb17 	ldw	r2,-20(fp)
   8f678:	1004d07a 	srli	r2,r2,1
   8f67c:	1885c83a 	sub	r2,r3,r2
   8f680:	1007883a 	mov	r3,r2
   8f684:	e0bffe17 	ldw	r2,-8(fp)
   8f688:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   8f68c:	0005883a 	mov	r2,zero

}
   8f690:	e037883a 	mov	sp,fp
   8f694:	dfc00117 	ldw	ra,4(sp)
   8f698:	df000017 	ldw	fp,0(sp)
   8f69c:	dec00204 	addi	sp,sp,8
   8f6a0:	f800283a 	ret

0008f6a4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   8f6a4:	defffe04 	addi	sp,sp,-8
   8f6a8:	df000115 	stw	fp,4(sp)
   8f6ac:	df000104 	addi	fp,sp,4
   8f6b0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   8f6b4:	e0bfff17 	ldw	r2,-4(fp)
   8f6b8:	10800317 	ldw	r2,12(r2)
   8f6bc:	10800504 	addi	r2,r2,20
   8f6c0:	10800037 	ldwio	r2,0(r2)
   8f6c4:	1080004c 	andi	r2,r2,1
   8f6c8:	10000226 	beq	r2,zero,8f6d4 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   8f6cc:	00800044 	movi	r2,1
   8f6d0:	00000106 	br	8f6d8 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   8f6d4:	0005883a 	mov	r2,zero
}
   8f6d8:	e037883a 	mov	sp,fp
   8f6dc:	df000017 	ldw	fp,0(sp)
   8f6e0:	dec00104 	addi	sp,sp,4
   8f6e4:	f800283a 	ret

0008f6e8 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   8f6e8:	defffb04 	addi	sp,sp,-20
   8f6ec:	df000415 	stw	fp,16(sp)
   8f6f0:	df000404 	addi	fp,sp,16
   8f6f4:	e13ffc15 	stw	r4,-16(fp)
   8f6f8:	e17ffd15 	stw	r5,-12(fp)
   8f6fc:	e1bffe15 	stw	r6,-8(fp)
   8f700:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   8f704:	e0bfff17 	ldw	r2,-4(fp)
   8f708:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   8f70c:	00001406 	br	8f760 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   8f710:	e0bfff17 	ldw	r2,-4(fp)
   8f714:	10800017 	ldw	r2,0(r2)
   8f718:	e0fffd17 	ldw	r3,-12(fp)
   8f71c:	1885883a 	add	r2,r3,r2
   8f720:	e0fffc17 	ldw	r3,-16(fp)
   8f724:	18c00317 	ldw	r3,12(r3)
   8f728:	18c00104 	addi	r3,r3,4
   8f72c:	18c00037 	ldwio	r3,0(r3)
   8f730:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   8f734:	e0bfff17 	ldw	r2,-4(fp)
   8f738:	10800017 	ldw	r2,0(r2)
   8f73c:	10c00044 	addi	r3,r2,1
   8f740:	e0bfff17 	ldw	r2,-4(fp)
   8f744:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   8f748:	e0bfff17 	ldw	r2,-4(fp)
   8f74c:	10c00017 	ldw	r3,0(r2)
   8f750:	e0bffe17 	ldw	r2,-8(fp)
   8f754:	1880021e 	bne	r3,r2,8f760 <alt_avalon_i2c_rx_read_available+0x78>
   8f758:	e0bffe17 	ldw	r2,-8(fp)
   8f75c:	1000061e 	bne	r2,zero,8f778 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   8f760:	e0bffc17 	ldw	r2,-16(fp)
   8f764:	10800317 	ldw	r2,12(r2)
   8f768:	10800704 	addi	r2,r2,28
   8f76c:	10800037 	ldwio	r2,0(r2)
   8f770:	103fe71e 	bne	r2,zero,8f710 <_gp+0xfff7db2c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   8f774:	00000106 	br	8f77c <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   8f778:	0001883a 	nop
    }
}
   8f77c:	0001883a 	nop
   8f780:	e037883a 	mov	sp,fp
   8f784:	df000017 	ldw	fp,0(sp)
   8f788:	dec00104 	addi	sp,sp,4
   8f78c:	f800283a 	ret

0008f790 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   8f790:	defffa04 	addi	sp,sp,-24
   8f794:	dfc00515 	stw	ra,20(sp)
   8f798:	df000415 	stw	fp,16(sp)
   8f79c:	df000404 	addi	fp,sp,16
   8f7a0:	e13ffe15 	stw	r4,-8(fp)
   8f7a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   8f7a8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   8f7ac:	008000b4 	movhi	r2,2
   8f7b0:	10a1a804 	addi	r2,r2,-31072
   8f7b4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   8f7b8:	00000d06 	br	8f7f0 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   8f7bc:	e0bffd17 	ldw	r2,-12(fp)
   8f7c0:	108002a8 	cmpgeui	r2,r2,10
   8f7c4:	1000021e 	bne	r2,zero,8f7d0 <alt_avalon_i2c_rx_read+0x40>
   8f7c8:	0109c404 	movi	r4,10000
   8f7cc:	00927180 	call	92718 <alt_busy_sleep>
      if (--timeout == 0)
   8f7d0:	e0bffd17 	ldw	r2,-12(fp)
   8f7d4:	10bfffc4 	addi	r2,r2,-1
   8f7d8:	e0bffd15 	stw	r2,-12(fp)
   8f7dc:	e0bffd17 	ldw	r2,-12(fp)
   8f7e0:	1000031e 	bne	r2,zero,8f7f0 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   8f7e4:	00bfff84 	movi	r2,-2
   8f7e8:	e0bffc15 	stw	r2,-16(fp)
        break;
   8f7ec:	00000506 	br	8f804 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   8f7f0:	e0bffe17 	ldw	r2,-8(fp)
   8f7f4:	10800317 	ldw	r2,12(r2)
   8f7f8:	10800704 	addi	r2,r2,28
   8f7fc:	10800037 	ldwio	r2,0(r2)
   8f800:	103fee26 	beq	r2,zero,8f7bc <_gp+0xfff7dbd8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   8f804:	e0bffe17 	ldw	r2,-8(fp)
   8f808:	10800317 	ldw	r2,12(r2)
   8f80c:	10800104 	addi	r2,r2,4
   8f810:	10800037 	ldwio	r2,0(r2)
   8f814:	1007883a 	mov	r3,r2
   8f818:	e0bfff17 	ldw	r2,-4(fp)
   8f81c:	10c00005 	stb	r3,0(r2)
        
    return status;
   8f820:	e0bffc17 	ldw	r2,-16(fp)
}
   8f824:	e037883a 	mov	sp,fp
   8f828:	dfc00117 	ldw	ra,4(sp)
   8f82c:	df000017 	ldw	fp,0(sp)
   8f830:	dec00204 	addi	sp,sp,8
   8f834:	f800283a 	ret

0008f838 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   8f838:	defff804 	addi	sp,sp,-32
   8f83c:	dfc00715 	stw	ra,28(sp)
   8f840:	df000615 	stw	fp,24(sp)
   8f844:	df000604 	addi	fp,sp,24
   8f848:	e13ffc15 	stw	r4,-16(fp)
   8f84c:	2809883a 	mov	r4,r5
   8f850:	3007883a 	mov	r3,r6
   8f854:	3805883a 	mov	r2,r7
   8f858:	e13ffd05 	stb	r4,-12(fp)
   8f85c:	e0fffe05 	stb	r3,-8(fp)
   8f860:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   8f864:	0089c404 	movi	r2,10000
   8f868:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   8f86c:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   8f870:	00000c06 	br	8f8a4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   8f874:	e0bffa17 	ldw	r2,-24(fp)
   8f878:	108002a8 	cmpgeui	r2,r2,10
   8f87c:	1000021e 	bne	r2,zero,8f888 <alt_avalon_i2c_cmd_write+0x50>
   8f880:	0109c404 	movi	r4,10000
   8f884:	00927180 	call	92718 <alt_busy_sleep>
      if (--timeout == 0)
   8f888:	e0bffa17 	ldw	r2,-24(fp)
   8f88c:	10bfffc4 	addi	r2,r2,-1
   8f890:	e0bffa15 	stw	r2,-24(fp)
   8f894:	e0bffa17 	ldw	r2,-24(fp)
   8f898:	1000021e 	bne	r2,zero,8f8a4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   8f89c:	00bfff84 	movi	r2,-2
   8f8a0:	00001906 	br	8f908 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   8f8a4:	e0bffc17 	ldw	r2,-16(fp)
   8f8a8:	10800317 	ldw	r2,12(r2)
   8f8ac:	10800404 	addi	r2,r2,16
   8f8b0:	10800037 	ldwio	r2,0(r2)
   8f8b4:	1080004c 	andi	r2,r2,1
   8f8b8:	103fee26 	beq	r2,zero,8f874 <_gp+0xfff7dc90>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   8f8bc:	e0bffc17 	ldw	r2,-16(fp)
   8f8c0:	10800317 	ldw	r2,12(r2)
   8f8c4:	e13ffd03 	ldbu	r4,-12(fp)
   8f8c8:	e0fffe03 	ldbu	r3,-8(fp)
   8f8cc:	1806927a 	slli	r3,r3,9
   8f8d0:	20c8b03a 	or	r4,r4,r3
   8f8d4:	e0ffff03 	ldbu	r3,-4(fp)
   8f8d8:	1806923a 	slli	r3,r3,8
   8f8dc:	20c6b03a 	or	r3,r4,r3
   8f8e0:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   8f8e4:	e0bffb04 	addi	r2,fp,-20
   8f8e8:	100b883a 	mov	r5,r2
   8f8ec:	e13ffc17 	ldw	r4,-16(fp)
   8f8f0:	008fa780 	call	8fa78 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   8f8f4:	e0bffb04 	addi	r2,fp,-20
   8f8f8:	100b883a 	mov	r5,r2
   8f8fc:	e13ffc17 	ldw	r4,-16(fp)
   8f900:	008fac40 	call	8fac4 <alt_avalon_i2c_check_arblost>
    
    return status;
   8f904:	e0bffb17 	ldw	r2,-20(fp)
}
   8f908:	e037883a 	mov	sp,fp
   8f90c:	dfc00117 	ldw	ra,4(sp)
   8f910:	df000017 	ldw	fp,0(sp)
   8f914:	dec00204 	addi	sp,sp,8
   8f918:	f800283a 	ret

0008f91c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   8f91c:	defffa04 	addi	sp,sp,-24
   8f920:	dfc00515 	stw	ra,20(sp)
   8f924:	df000415 	stw	fp,16(sp)
   8f928:	df000404 	addi	fp,sp,16
   8f92c:	e13ffd15 	stw	r4,-12(fp)
   8f930:	e17ffe15 	stw	r5,-8(fp)
   8f934:	3005883a 	mov	r2,r6
   8f938:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   8f93c:	e0bffd17 	ldw	r2,-12(fp)
   8f940:	10800d17 	ldw	r2,52(r2)
   8f944:	10800058 	cmpnei	r2,r2,1
   8f948:	10001c1e 	bne	r2,zero,8f9bc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   8f94c:	e0bffd17 	ldw	r2,-12(fp)
   8f950:	10800917 	ldw	r2,36(r2)
   8f954:	109e0014 	ori	r2,r2,30720
   8f958:	1004d1fa 	srli	r2,r2,7
   8f95c:	1007883a 	mov	r3,r2
   8f960:	00bfff84 	movi	r2,-2
   8f964:	1884703a 	and	r2,r3,r2
   8f968:	1007883a 	mov	r3,r2
   8f96c:	e0bffe17 	ldw	r2,-8(fp)
   8f970:	1884b03a 	or	r2,r3,r2
   8f974:	10803fcc 	andi	r2,r2,255
   8f978:	e0ffff03 	ldbu	r3,-4(fp)
   8f97c:	000f883a 	mov	r7,zero
   8f980:	180d883a 	mov	r6,r3
   8f984:	100b883a 	mov	r5,r2
   8f988:	e13ffd17 	ldw	r4,-12(fp)
   8f98c:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   8f990:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   8f994:	e0bffd17 	ldw	r2,-12(fp)
   8f998:	10800917 	ldw	r2,36(r2)
   8f99c:	10803fcc 	andi	r2,r2,255
   8f9a0:	000f883a 	mov	r7,zero
   8f9a4:	000d883a 	mov	r6,zero
   8f9a8:	100b883a 	mov	r5,r2
   8f9ac:	e13ffd17 	ldw	r4,-12(fp)
   8f9b0:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   8f9b4:	e0bffc15 	stw	r2,-16(fp)
   8f9b8:	00000e06 	br	8f9f4 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   8f9bc:	e0bffd17 	ldw	r2,-12(fp)
   8f9c0:	10800917 	ldw	r2,36(r2)
   8f9c4:	1085883a 	add	r2,r2,r2
   8f9c8:	1007883a 	mov	r3,r2
   8f9cc:	e0bffe17 	ldw	r2,-8(fp)
   8f9d0:	1884b03a 	or	r2,r3,r2
   8f9d4:	10803fcc 	andi	r2,r2,255
   8f9d8:	e0ffff03 	ldbu	r3,-4(fp)
   8f9dc:	000f883a 	mov	r7,zero
   8f9e0:	180d883a 	mov	r6,r3
   8f9e4:	100b883a 	mov	r5,r2
   8f9e8:	e13ffd17 	ldw	r4,-12(fp)
   8f9ec:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   8f9f0:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   8f9f4:	e0bffc17 	ldw	r2,-16(fp)
}
   8f9f8:	e037883a 	mov	sp,fp
   8f9fc:	dfc00117 	ldw	ra,4(sp)
   8fa00:	df000017 	ldw	fp,0(sp)
   8fa04:	dec00204 	addi	sp,sp,8
   8fa08:	f800283a 	ret

0008fa0c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   8fa0c:	defffd04 	addi	sp,sp,-12
   8fa10:	df000215 	stw	fp,8(sp)
   8fa14:	df000204 	addi	fp,sp,8
   8fa18:	e13ffe15 	stw	r4,-8(fp)
   8fa1c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   8fa20:	e0bffe17 	ldw	r2,-8(fp)
   8fa24:	10c00917 	ldw	r3,36(r2)
   8fa28:	e0bfff17 	ldw	r2,-4(fp)
   8fa2c:	10c00015 	stw	r3,0(r2)
}
   8fa30:	0001883a 	nop
   8fa34:	e037883a 	mov	sp,fp
   8fa38:	df000017 	ldw	fp,0(sp)
   8fa3c:	dec00104 	addi	sp,sp,4
   8fa40:	f800283a 	ret

0008fa44 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   8fa44:	defffd04 	addi	sp,sp,-12
   8fa48:	df000215 	stw	fp,8(sp)
   8fa4c:	df000204 	addi	fp,sp,8
   8fa50:	e13ffe15 	stw	r4,-8(fp)
   8fa54:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   8fa58:	e0bffe17 	ldw	r2,-8(fp)
   8fa5c:	e0ffff17 	ldw	r3,-4(fp)
   8fa60:	10c00915 	stw	r3,36(r2)
}
   8fa64:	0001883a 	nop
   8fa68:	e037883a 	mov	sp,fp
   8fa6c:	df000017 	ldw	fp,0(sp)
   8fa70:	dec00104 	addi	sp,sp,4
   8fa74:	f800283a 	ret

0008fa78 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   8fa78:	defffd04 	addi	sp,sp,-12
   8fa7c:	df000215 	stw	fp,8(sp)
   8fa80:	df000204 	addi	fp,sp,8
   8fa84:	e13ffe15 	stw	r4,-8(fp)
   8fa88:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   8fa8c:	e0bffe17 	ldw	r2,-8(fp)
   8fa90:	10800317 	ldw	r2,12(r2)
   8fa94:	10800404 	addi	r2,r2,16
   8fa98:	10800037 	ldwio	r2,0(r2)
   8fa9c:	1080010c 	andi	r2,r2,4
   8faa0:	10000326 	beq	r2,zero,8fab0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   8faa4:	e0bfff17 	ldw	r2,-4(fp)
   8faa8:	00fffec4 	movi	r3,-5
   8faac:	10c00015 	stw	r3,0(r2)
    }
}
   8fab0:	0001883a 	nop
   8fab4:	e037883a 	mov	sp,fp
   8fab8:	df000017 	ldw	fp,0(sp)
   8fabc:	dec00104 	addi	sp,sp,4
   8fac0:	f800283a 	ret

0008fac4 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   8fac4:	defffd04 	addi	sp,sp,-12
   8fac8:	df000215 	stw	fp,8(sp)
   8facc:	df000204 	addi	fp,sp,8
   8fad0:	e13ffe15 	stw	r4,-8(fp)
   8fad4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   8fad8:	e0bffe17 	ldw	r2,-8(fp)
   8fadc:	10800317 	ldw	r2,12(r2)
   8fae0:	10800404 	addi	r2,r2,16
   8fae4:	10800037 	ldwio	r2,0(r2)
   8fae8:	1080020c 	andi	r2,r2,8
   8faec:	10000326 	beq	r2,zero,8fafc <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   8faf0:	e0bfff17 	ldw	r2,-4(fp)
   8faf4:	00fffe84 	movi	r3,-6
   8faf8:	10c00015 	stw	r3,0(r2)
    }
}
   8fafc:	0001883a 	nop
   8fb00:	e037883a 	mov	sp,fp
   8fb04:	df000017 	ldw	fp,0(sp)
   8fb08:	dec00104 	addi	sp,sp,4
   8fb0c:	f800283a 	ret

0008fb10 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   8fb10:	defff804 	addi	sp,sp,-32
   8fb14:	dfc00715 	stw	ra,28(sp)
   8fb18:	df000615 	stw	fp,24(sp)
   8fb1c:	df000604 	addi	fp,sp,24
   8fb20:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   8fb24:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   8fb28:	e0bfff17 	ldw	r2,-4(fp)
   8fb2c:	10800717 	ldw	r2,28(r2)
   8fb30:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   8fb34:	e0bffb17 	ldw	r2,-20(fp)
   8fb38:	10800117 	ldw	r2,4(r2)
   8fb3c:	10800044 	addi	r2,r2,1
   8fb40:	0149c404 	movi	r5,10000
   8fb44:	1009883a 	mov	r4,r2
   8fb48:	00817900 	call	81790 <__mulsi3>
   8fb4c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   8fb50:	e0bffd04 	addi	r2,fp,-12
   8fb54:	100b883a 	mov	r5,r2
   8fb58:	e13fff17 	ldw	r4,-4(fp)
   8fb5c:	00909a80 	call	909a8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   8fb60:	e0bffd17 	ldw	r2,-12(fp)
   8fb64:	100b883a 	mov	r5,r2
   8fb68:	e13fff17 	ldw	r4,-4(fp)
   8fb6c:	00908dc0 	call	908dc <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   8fb70:	e0bffc04 	addi	r2,fp,-16
   8fb74:	100b883a 	mov	r5,r2
   8fb78:	e13fff17 	ldw	r4,-4(fp)
   8fb7c:	008fa780 	call	8fa78 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   8fb80:	e0bffc17 	ldw	r2,-16(fp)
   8fb84:	10002226 	beq	r2,zero,8fc10 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
   8fb88:	e0bffb17 	ldw	r2,-20(fp)
   8fb8c:	10800217 	ldw	r2,8(r2)
   8fb90:	10001d26 	beq	r2,zero,8fc08 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   8fb94:	00000d06 	br	8fbcc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
   8fb98:	e0bffa17 	ldw	r2,-24(fp)
   8fb9c:	108002a8 	cmpgeui	r2,r2,10
   8fba0:	1000021e 	bne	r2,zero,8fbac <alt_avalon_i2c_interrupt_transaction_status+0x9c>
   8fba4:	0109c404 	movi	r4,10000
   8fba8:	00927180 	call	92718 <alt_busy_sleep>
              if (--timeout == 0)
   8fbac:	e0bffa17 	ldw	r2,-24(fp)
   8fbb0:	10bfffc4 	addi	r2,r2,-1
   8fbb4:	e0bffa15 	stw	r2,-24(fp)
   8fbb8:	e0bffa17 	ldw	r2,-24(fp)
   8fbbc:	1000031e 	bne	r2,zero,8fbcc <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   8fbc0:	00bfff84 	movi	r2,-2
   8fbc4:	e0bffc15 	stw	r2,-16(fp)
                 break;
   8fbc8:	00000306 	br	8fbd8 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   8fbcc:	e13fff17 	ldw	r4,-4(fp)
   8fbd0:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   8fbd4:	103ff01e 	bne	r2,zero,8fb98 <_gp+0xfff7dfb4>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   8fbd8:	e0bffb17 	ldw	r2,-20(fp)
   8fbdc:	10800017 	ldw	r2,0(r2)
   8fbe0:	e0fffe04 	addi	r3,fp,-8
   8fbe4:	180f883a 	mov	r7,r3
   8fbe8:	000d883a 	mov	r6,zero
   8fbec:	100b883a 	mov	r5,r2
   8fbf0:	e13fff17 	ldw	r4,-4(fp)
   8fbf4:	008f6e80 	call	8f6e8 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   8fbf8:	e13fff17 	ldw	r4,-4(fp)
   8fbfc:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   8fc00:	e0bffb17 	ldw	r2,-20(fp)
   8fc04:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   8fc08:	e0bffc17 	ldw	r2,-16(fp)
   8fc0c:	00000a06 	br	8fc38 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
   8fc10:	e0bffb17 	ldw	r2,-20(fp)
   8fc14:	10800217 	ldw	r2,8(r2)
   8fc18:	10000626 	beq	r2,zero,8fc34 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   8fc1c:	e0bffd17 	ldw	r2,-12(fp)
   8fc20:	100b883a 	mov	r5,r2
   8fc24:	e13fff17 	ldw	r4,-4(fp)
   8fc28:	00909440 	call	90944 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   8fc2c:	00bffe44 	movi	r2,-7
   8fc30:	00000106 	br	8fc38 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   8fc34:	0005883a 	mov	r2,zero
}
   8fc38:	e037883a 	mov	sp,fp
   8fc3c:	dfc00117 	ldw	ra,4(sp)
   8fc40:	df000017 	ldw	fp,0(sp)
   8fc44:	dec00204 	addi	sp,sp,8
   8fc48:	f800283a 	ret

0008fc4c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   8fc4c:	defff704 	addi	sp,sp,-36
   8fc50:	dfc00815 	stw	ra,32(sp)
   8fc54:	df000715 	stw	fp,28(sp)
   8fc58:	df000704 	addi	fp,sp,28
   8fc5c:	e13ffc15 	stw	r4,-16(fp)
   8fc60:	e17ffd15 	stw	r5,-12(fp)
   8fc64:	e1bffe15 	stw	r6,-8(fp)
   8fc68:	3805883a 	mov	r2,r7
   8fc6c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   8fc70:	0089c404 	movi	r2,10000
   8fc74:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   8fc78:	00002206 	br	8fd04 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   8fc7c:	e0bffb17 	ldw	r2,-20(fp)
   8fc80:	108002a8 	cmpgeui	r2,r2,10
   8fc84:	1000021e 	bne	r2,zero,8fc90 <alt_avalon_i2c_master_tx+0x44>
   8fc88:	0109c404 	movi	r4,10000
   8fc8c:	00927180 	call	92718 <alt_busy_sleep>
      if (use_interrupts)
   8fc90:	e0bfff03 	ldbu	r2,-4(fp)
   8fc94:	10000926 	beq	r2,zero,8fcbc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   8fc98:	00800044 	movi	r2,1
   8fc9c:	d8800015 	stw	r2,0(sp)
   8fca0:	000f883a 	mov	r7,zero
   8fca4:	e1bffe17 	ldw	r6,-8(fp)
   8fca8:	e17ffd17 	ldw	r5,-12(fp)
   8fcac:	e13ffc17 	ldw	r4,-16(fp)
   8fcb0:	00901f80 	call	901f8 <alt_avalon_i2c_master_transmit_using_interrupts>
   8fcb4:	e0bffa15 	stw	r2,-24(fp)
   8fcb8:	00000806 	br	8fcdc <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   8fcbc:	00800044 	movi	r2,1
   8fcc0:	d8800015 	stw	r2,0(sp)
   8fcc4:	000f883a 	mov	r7,zero
   8fcc8:	e1bffe17 	ldw	r6,-8(fp)
   8fccc:	e17ffd17 	ldw	r5,-12(fp)
   8fcd0:	e13ffc17 	ldw	r4,-16(fp)
   8fcd4:	00900380 	call	90038 <alt_avalon_i2c_master_transmit>
   8fcd8:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8fcdc:	e0bffa17 	ldw	r2,-24(fp)
   8fce0:	10bffea0 	cmpeqi	r2,r2,-6
   8fce4:	1000061e 	bne	r2,zero,8fd00 <alt_avalon_i2c_master_tx+0xb4>
   8fce8:	e0bffa17 	ldw	r2,-24(fp)
   8fcec:	10bffee0 	cmpeqi	r2,r2,-5
   8fcf0:	1000031e 	bne	r2,zero,8fd00 <alt_avalon_i2c_master_tx+0xb4>
   8fcf4:	e0bffa17 	ldw	r2,-24(fp)
   8fcf8:	10bffe58 	cmpnei	r2,r2,-7
   8fcfc:	1000061e 	bne	r2,zero,8fd18 <alt_avalon_i2c_master_tx+0xcc>
   8fd00:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   8fd04:	e0bffb17 	ldw	r2,-20(fp)
   8fd08:	10ffffc4 	addi	r3,r2,-1
   8fd0c:	e0fffb15 	stw	r3,-20(fp)
   8fd10:	103fda1e 	bne	r2,zero,8fc7c <_gp+0xfff7e098>
   8fd14:	00000106 	br	8fd1c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   8fd18:	0001883a 	nop
    }

    return status;
   8fd1c:	e0bffa17 	ldw	r2,-24(fp)
}        
   8fd20:	e037883a 	mov	sp,fp
   8fd24:	dfc00117 	ldw	ra,4(sp)
   8fd28:	df000017 	ldw	fp,0(sp)
   8fd2c:	dec00204 	addi	sp,sp,8
   8fd30:	f800283a 	ret

0008fd34 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   8fd34:	defff704 	addi	sp,sp,-36
   8fd38:	dfc00815 	stw	ra,32(sp)
   8fd3c:	df000715 	stw	fp,28(sp)
   8fd40:	df000704 	addi	fp,sp,28
   8fd44:	e13ffc15 	stw	r4,-16(fp)
   8fd48:	e17ffd15 	stw	r5,-12(fp)
   8fd4c:	e1bffe15 	stw	r6,-8(fp)
   8fd50:	3805883a 	mov	r2,r7
   8fd54:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   8fd58:	0089c404 	movi	r2,10000
   8fd5c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   8fd60:	e0bfff03 	ldbu	r2,-4(fp)
   8fd64:	10003426 	beq	r2,zero,8fe38 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   8fd68:	00001706 	br	8fdc8 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   8fd6c:	e0bffb17 	ldw	r2,-20(fp)
   8fd70:	108002a8 	cmpgeui	r2,r2,10
   8fd74:	1000021e 	bne	r2,zero,8fd80 <alt_avalon_i2c_master_rx+0x4c>
   8fd78:	0109c404 	movi	r4,10000
   8fd7c:	00927180 	call	92718 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   8fd80:	00800044 	movi	r2,1
   8fd84:	d8800015 	stw	r2,0(sp)
   8fd88:	000f883a 	mov	r7,zero
   8fd8c:	e1bffe17 	ldw	r6,-8(fp)
   8fd90:	e17ffd17 	ldw	r5,-12(fp)
   8fd94:	e13ffc17 	ldw	r4,-16(fp)
   8fd98:	00906140 	call	90614 <alt_avalon_i2c_master_receive_using_interrupts>
   8fd9c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8fda0:	e0bffa17 	ldw	r2,-24(fp)
   8fda4:	10bffea0 	cmpeqi	r2,r2,-6
   8fda8:	1000061e 	bne	r2,zero,8fdc4 <alt_avalon_i2c_master_rx+0x90>
   8fdac:	e0bffa17 	ldw	r2,-24(fp)
   8fdb0:	10bffee0 	cmpeqi	r2,r2,-5
   8fdb4:	1000031e 	bne	r2,zero,8fdc4 <alt_avalon_i2c_master_rx+0x90>
   8fdb8:	e0bffa17 	ldw	r2,-24(fp)
   8fdbc:	10bffe58 	cmpnei	r2,r2,-7
   8fdc0:	1000221e 	bne	r2,zero,8fe4c <alt_avalon_i2c_master_rx+0x118>
   8fdc4:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   8fdc8:	e0bffb17 	ldw	r2,-20(fp)
   8fdcc:	10ffffc4 	addi	r3,r2,-1
   8fdd0:	e0fffb15 	stw	r3,-20(fp)
   8fdd4:	103fe51e 	bne	r2,zero,8fd6c <_gp+0xfff7e188>
   8fdd8:	00001f06 	br	8fe58 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   8fddc:	e0bffb17 	ldw	r2,-20(fp)
   8fde0:	108002a8 	cmpgeui	r2,r2,10
   8fde4:	1000021e 	bne	r2,zero,8fdf0 <alt_avalon_i2c_master_rx+0xbc>
   8fde8:	0109c404 	movi	r4,10000
   8fdec:	00927180 	call	92718 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   8fdf0:	00800044 	movi	r2,1
   8fdf4:	d8800015 	stw	r2,0(sp)
   8fdf8:	000f883a 	mov	r7,zero
   8fdfc:	e1bffe17 	ldw	r6,-8(fp)
   8fe00:	e17ffd17 	ldw	r5,-12(fp)
   8fe04:	e13ffc17 	ldw	r4,-16(fp)
   8fe08:	00904040 	call	90404 <alt_avalon_i2c_master_receive>
   8fe0c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8fe10:	e0bffa17 	ldw	r2,-24(fp)
   8fe14:	10bffea0 	cmpeqi	r2,r2,-6
   8fe18:	1000061e 	bne	r2,zero,8fe34 <alt_avalon_i2c_master_rx+0x100>
   8fe1c:	e0bffa17 	ldw	r2,-24(fp)
   8fe20:	10bffee0 	cmpeqi	r2,r2,-5
   8fe24:	1000031e 	bne	r2,zero,8fe34 <alt_avalon_i2c_master_rx+0x100>
   8fe28:	e0bffa17 	ldw	r2,-24(fp)
   8fe2c:	10bffe58 	cmpnei	r2,r2,-7
   8fe30:	1000081e 	bne	r2,zero,8fe54 <alt_avalon_i2c_master_rx+0x120>
   8fe34:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   8fe38:	e0bffb17 	ldw	r2,-20(fp)
   8fe3c:	10ffffc4 	addi	r3,r2,-1
   8fe40:	e0fffb15 	stw	r3,-20(fp)
   8fe44:	103fe51e 	bne	r2,zero,8fddc <_gp+0xfff7e1f8>
   8fe48:	00000306 	br	8fe58 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   8fe4c:	0001883a 	nop
   8fe50:	00000106 	br	8fe58 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   8fe54:	0001883a 	nop
      }
    }
    
    return status;
   8fe58:	e0bffa17 	ldw	r2,-24(fp)
}        
   8fe5c:	e037883a 	mov	sp,fp
   8fe60:	dfc00117 	ldw	ra,4(sp)
   8fe64:	df000017 	ldw	fp,0(sp)
   8fe68:	dec00204 	addi	sp,sp,8
   8fe6c:	f800283a 	ret

0008fe70 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   8fe70:	defff604 	addi	sp,sp,-40
   8fe74:	dfc00915 	stw	ra,36(sp)
   8fe78:	df000815 	stw	fp,32(sp)
   8fe7c:	df000804 	addi	fp,sp,32
   8fe80:	e13ffb15 	stw	r4,-20(fp)
   8fe84:	e17ffc15 	stw	r5,-16(fp)
   8fe88:	e1bffd15 	stw	r6,-12(fp)
   8fe8c:	e1fffe15 	stw	r7,-8(fp)
   8fe90:	e0800317 	ldw	r2,12(fp)
   8fe94:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   8fe98:	0089c404 	movi	r2,10000
   8fe9c:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   8fea0:	e0bfff03 	ldbu	r2,-4(fp)
   8fea4:	10005626 	beq	r2,zero,90000 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   8fea8:	00002806 	br	8ff4c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   8feac:	e0bffa17 	ldw	r2,-24(fp)
   8feb0:	108002a8 	cmpgeui	r2,r2,10
   8feb4:	1000021e 	bne	r2,zero,8fec0 <alt_avalon_i2c_master_tx_rx+0x50>
   8feb8:	0109c404 	movi	r4,10000
   8febc:	00927180 	call	92718 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   8fec0:	d8000015 	stw	zero,0(sp)
   8fec4:	000f883a 	mov	r7,zero
   8fec8:	e1bffd17 	ldw	r6,-12(fp)
   8fecc:	e17ffc17 	ldw	r5,-16(fp)
   8fed0:	e13ffb17 	ldw	r4,-20(fp)
   8fed4:	00901f80 	call	901f8 <alt_avalon_i2c_master_transmit_using_interrupts>
   8fed8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8fedc:	e0bff917 	ldw	r2,-28(fp)
   8fee0:	10bffea0 	cmpeqi	r2,r2,-6
   8fee4:	1000191e 	bne	r2,zero,8ff4c <alt_avalon_i2c_master_tx_rx+0xdc>
   8fee8:	e0bff917 	ldw	r2,-28(fp)
   8feec:	10bffee0 	cmpeqi	r2,r2,-5
   8fef0:	1000161e 	bne	r2,zero,8ff4c <alt_avalon_i2c_master_tx_rx+0xdc>
   8fef4:	e0bff917 	ldw	r2,-28(fp)
   8fef8:	10bffe58 	cmpnei	r2,r2,-7
   8fefc:	1000011e 	bne	r2,zero,8ff04 <alt_avalon_i2c_master_tx_rx+0x94>
   8ff00:	00001206 	br	8ff4c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   8ff04:	00800044 	movi	r2,1
   8ff08:	d8800015 	stw	r2,0(sp)
   8ff0c:	01c00044 	movi	r7,1
   8ff10:	e1800217 	ldw	r6,8(fp)
   8ff14:	e17ffe17 	ldw	r5,-8(fp)
   8ff18:	e13ffb17 	ldw	r4,-20(fp)
   8ff1c:	00906140 	call	90614 <alt_avalon_i2c_master_receive_using_interrupts>
   8ff20:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8ff24:	e0bff917 	ldw	r2,-28(fp)
   8ff28:	10bffea0 	cmpeqi	r2,r2,-6
   8ff2c:	1000061e 	bne	r2,zero,8ff48 <alt_avalon_i2c_master_tx_rx+0xd8>
   8ff30:	e0bff917 	ldw	r2,-28(fp)
   8ff34:	10bffee0 	cmpeqi	r2,r2,-5
   8ff38:	1000031e 	bne	r2,zero,8ff48 <alt_avalon_i2c_master_tx_rx+0xd8>
   8ff3c:	e0bff917 	ldw	r2,-28(fp)
   8ff40:	10bffe58 	cmpnei	r2,r2,-7
   8ff44:	1000331e 	bne	r2,zero,90014 <alt_avalon_i2c_master_tx_rx+0x1a4>
   8ff48:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   8ff4c:	e0bffa17 	ldw	r2,-24(fp)
   8ff50:	10ffffc4 	addi	r3,r2,-1
   8ff54:	e0fffa15 	stw	r3,-24(fp)
   8ff58:	103fd41e 	bne	r2,zero,8feac <_gp+0xfff7e2c8>
   8ff5c:	00003006 	br	90020 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   8ff60:	e0bffa17 	ldw	r2,-24(fp)
   8ff64:	108002a8 	cmpgeui	r2,r2,10
   8ff68:	1000021e 	bne	r2,zero,8ff74 <alt_avalon_i2c_master_tx_rx+0x104>
   8ff6c:	0109c404 	movi	r4,10000
   8ff70:	00927180 	call	92718 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   8ff74:	d8000015 	stw	zero,0(sp)
   8ff78:	000f883a 	mov	r7,zero
   8ff7c:	e1bffd17 	ldw	r6,-12(fp)
   8ff80:	e17ffc17 	ldw	r5,-16(fp)
   8ff84:	e13ffb17 	ldw	r4,-20(fp)
   8ff88:	00900380 	call	90038 <alt_avalon_i2c_master_transmit>
   8ff8c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8ff90:	e0bff917 	ldw	r2,-28(fp)
   8ff94:	10bffea0 	cmpeqi	r2,r2,-6
   8ff98:	1000191e 	bne	r2,zero,90000 <alt_avalon_i2c_master_tx_rx+0x190>
   8ff9c:	e0bff917 	ldw	r2,-28(fp)
   8ffa0:	10bffee0 	cmpeqi	r2,r2,-5
   8ffa4:	1000161e 	bne	r2,zero,90000 <alt_avalon_i2c_master_tx_rx+0x190>
   8ffa8:	e0bff917 	ldw	r2,-28(fp)
   8ffac:	10bffe58 	cmpnei	r2,r2,-7
   8ffb0:	1000011e 	bne	r2,zero,8ffb8 <alt_avalon_i2c_master_tx_rx+0x148>
   8ffb4:	00001206 	br	90000 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   8ffb8:	00800044 	movi	r2,1
   8ffbc:	d8800015 	stw	r2,0(sp)
   8ffc0:	01c00044 	movi	r7,1
   8ffc4:	e1800217 	ldw	r6,8(fp)
   8ffc8:	e17ffe17 	ldw	r5,-8(fp)
   8ffcc:	e13ffb17 	ldw	r4,-20(fp)
   8ffd0:	00904040 	call	90404 <alt_avalon_i2c_master_receive>
   8ffd4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   8ffd8:	e0bff917 	ldw	r2,-28(fp)
   8ffdc:	10bffea0 	cmpeqi	r2,r2,-6
   8ffe0:	1000061e 	bne	r2,zero,8fffc <alt_avalon_i2c_master_tx_rx+0x18c>
   8ffe4:	e0bff917 	ldw	r2,-28(fp)
   8ffe8:	10bffee0 	cmpeqi	r2,r2,-5
   8ffec:	1000031e 	bne	r2,zero,8fffc <alt_avalon_i2c_master_tx_rx+0x18c>
   8fff0:	e0bff917 	ldw	r2,-28(fp)
   8fff4:	10bffe58 	cmpnei	r2,r2,-7
   8fff8:	1000081e 	bne	r2,zero,9001c <alt_avalon_i2c_master_tx_rx+0x1ac>
   8fffc:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   90000:	e0bffa17 	ldw	r2,-24(fp)
   90004:	10ffffc4 	addi	r3,r2,-1
   90008:	e0fffa15 	stw	r3,-24(fp)
   9000c:	103fd41e 	bne	r2,zero,8ff60 <_gp+0xfff7e37c>
   90010:	00000306 	br	90020 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   90014:	0001883a 	nop
   90018:	00000106 	br	90020 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   9001c:	0001883a 	nop
      }
    }
    
    return status;
   90020:	e0bff917 	ldw	r2,-28(fp)
}                                       
   90024:	e037883a 	mov	sp,fp
   90028:	dfc00117 	ldw	ra,4(sp)
   9002c:	df000017 	ldw	fp,0(sp)
   90030:	dec00204 	addi	sp,sp,8
   90034:	f800283a 	ret

00090038 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   90038:	defff704 	addi	sp,sp,-36
   9003c:	dfc00815 	stw	ra,32(sp)
   90040:	df000715 	stw	fp,28(sp)
   90044:	df000704 	addi	fp,sp,28
   90048:	e13ffb15 	stw	r4,-20(fp)
   9004c:	e17ffc15 	stw	r5,-16(fp)
   90050:	e1bffd15 	stw	r6,-12(fp)
   90054:	3807883a 	mov	r3,r7
   90058:	e0800217 	ldw	r2,8(fp)
   9005c:	e0fffe05 	stb	r3,-8(fp)
   90060:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   90064:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   90068:	0149c404 	movi	r5,10000
   9006c:	e13ffd17 	ldw	r4,-12(fp)
   90070:	00817900 	call	81790 <__mulsi3>
   90074:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   90078:	e0bffd17 	ldw	r2,-12(fp)
   9007c:	1000021e 	bne	r2,zero,90088 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   90080:	0005883a 	mov	r2,zero
   90084:	00005706 	br	901e4 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   90088:	e0bffe03 	ldbu	r2,-8(fp)
   9008c:	10000a1e 	bne	r2,zero,900b8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   90090:	e13ffb17 	ldw	r4,-20(fp)
   90094:	008f2b40 	call	8f2b4 <alt_avalon_i2c_enable>
   90098:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   9009c:	e0bffa17 	ldw	r2,-24(fp)
   900a0:	10000226 	beq	r2,zero,900ac <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
   900a4:	e0bffa17 	ldw	r2,-24(fp)
   900a8:	00004e06 	br	901e4 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   900ac:	01400704 	movi	r5,28
   900b0:	e13ffb17 	ldw	r4,-20(fp)
   900b4:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   900b8:	e0bffe03 	ldbu	r2,-8(fp)
   900bc:	100d883a 	mov	r6,r2
   900c0:	000b883a 	mov	r5,zero
   900c4:	e13ffb17 	ldw	r4,-20(fp)
   900c8:	008f91c0 	call	8f91c <alt_avalon_i2c_send_address>
   900cc:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   900d0:	e0bffa17 	ldw	r2,-24(fp)
   900d4:	1000271e 	bne	r2,zero,90174 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   900d8:	00000f06 	br	90118 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   900dc:	e0bffc17 	ldw	r2,-16(fp)
   900e0:	10800003 	ldbu	r2,0(r2)
   900e4:	10803fcc 	andi	r2,r2,255
   900e8:	000f883a 	mov	r7,zero
   900ec:	000d883a 	mov	r6,zero
   900f0:	100b883a 	mov	r5,r2
   900f4:	e13ffb17 	ldw	r4,-20(fp)
   900f8:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   900fc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   90100:	e0bffc17 	ldw	r2,-16(fp)
   90104:	10800044 	addi	r2,r2,1
   90108:	e0bffc15 	stw	r2,-16(fp)
            --size;
   9010c:	e0bffd17 	ldw	r2,-12(fp)
   90110:	10bfffc4 	addi	r2,r2,-1
   90114:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   90118:	e0bffd17 	ldw	r2,-12(fp)
   9011c:	108000b0 	cmpltui	r2,r2,2
   90120:	1000021e 	bne	r2,zero,9012c <alt_avalon_i2c_master_transmit+0xf4>
   90124:	e0bffa17 	ldw	r2,-24(fp)
   90128:	103fec26 	beq	r2,zero,900dc <_gp+0xfff7e4f8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   9012c:	e0bffa17 	ldw	r2,-24(fp)
   90130:	1000101e 	bne	r2,zero,90174 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   90134:	e0bffc17 	ldw	r2,-16(fp)
   90138:	10800003 	ldbu	r2,0(r2)
   9013c:	10803fcc 	andi	r2,r2,255
   90140:	e0ffff03 	ldbu	r3,-4(fp)
   90144:	180f883a 	mov	r7,r3
   90148:	000d883a 	mov	r6,zero
   9014c:	100b883a 	mov	r5,r2
   90150:	e13ffb17 	ldw	r4,-20(fp)
   90154:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   90158:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   9015c:	e0bffc17 	ldw	r2,-16(fp)
   90160:	10800044 	addi	r2,r2,1
   90164:	e0bffc15 	stw	r2,-16(fp)
            --size;
   90168:	e0bffd17 	ldw	r2,-12(fp)
   9016c:	10bfffc4 	addi	r2,r2,-1
   90170:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   90174:	e0bfff03 	ldbu	r2,-4(fp)
   90178:	1000101e 	bne	r2,zero,901bc <alt_avalon_i2c_master_transmit+0x184>
   9017c:	e0bffa17 	ldw	r2,-24(fp)
   90180:	10001726 	beq	r2,zero,901e0 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   90184:	00000d06 	br	901bc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
   90188:	e0bff917 	ldw	r2,-28(fp)
   9018c:	108002a8 	cmpgeui	r2,r2,10
   90190:	1000021e 	bne	r2,zero,9019c <alt_avalon_i2c_master_transmit+0x164>
   90194:	0109c404 	movi	r4,10000
   90198:	00927180 	call	92718 <alt_busy_sleep>
            if (--timeout == 0)
   9019c:	e0bff917 	ldw	r2,-28(fp)
   901a0:	10bfffc4 	addi	r2,r2,-1
   901a4:	e0bff915 	stw	r2,-28(fp)
   901a8:	e0bff917 	ldw	r2,-28(fp)
   901ac:	1000031e 	bne	r2,zero,901bc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   901b0:	00bfff84 	movi	r2,-2
   901b4:	e0bffa15 	stw	r2,-24(fp)
               break;
   901b8:	00000306 	br	901c8 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   901bc:	e13ffb17 	ldw	r4,-20(fp)
   901c0:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   901c4:	103ff01e 	bne	r2,zero,90188 <_gp+0xfff7e5a4>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   901c8:	e0bffa04 	addi	r2,fp,-24
   901cc:	100b883a 	mov	r5,r2
   901d0:	e13ffb17 	ldw	r4,-20(fp)
   901d4:	008fa780 	call	8fa78 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   901d8:	e13ffb17 	ldw	r4,-20(fp)
   901dc:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>
    }


    return status;
   901e0:	e0bffa17 	ldw	r2,-24(fp)
}
   901e4:	e037883a 	mov	sp,fp
   901e8:	dfc00117 	ldw	ra,4(sp)
   901ec:	df000017 	ldw	fp,0(sp)
   901f0:	dec00204 	addi	sp,sp,8
   901f4:	f800283a 	ret

000901f8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   901f8:	defff604 	addi	sp,sp,-40
   901fc:	dfc00915 	stw	ra,36(sp)
   90200:	df000815 	stw	fp,32(sp)
   90204:	df000804 	addi	fp,sp,32
   90208:	e13ffb15 	stw	r4,-20(fp)
   9020c:	e17ffc15 	stw	r5,-16(fp)
   90210:	e1bffd15 	stw	r6,-12(fp)
   90214:	3807883a 	mov	r3,r7
   90218:	e0800217 	ldw	r2,8(fp)
   9021c:	e0fffe05 	stb	r3,-8(fp)
   90220:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   90224:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   90228:	0149c404 	movi	r5,10000
   9022c:	e13ffd17 	ldw	r4,-12(fp)
   90230:	00817900 	call	81790 <__mulsi3>
   90234:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   90238:	e0bffb17 	ldw	r2,-20(fp)
   9023c:	10800717 	ldw	r2,28(r2)
   90240:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   90244:	e0bffd17 	ldw	r2,-12(fp)
   90248:	1000021e 	bne	r2,zero,90254 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   9024c:	0005883a 	mov	r2,zero
   90250:	00006706 	br	903f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   90254:	e0bffb17 	ldw	r2,-20(fp)
   90258:	10c00617 	ldw	r3,24(r2)
   9025c:	00800274 	movhi	r2,9
   90260:	10bbce04 	addi	r2,r2,-4296
   90264:	18800226 	beq	r3,r2,90270 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   90268:	00bfff44 	movi	r2,-3
   9026c:	00006006 	br	903f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   90270:	e0bffe03 	ldbu	r2,-8(fp)
   90274:	10000a1e 	bne	r2,zero,902a0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   90278:	e13ffb17 	ldw	r4,-20(fp)
   9027c:	008f2b40 	call	8f2b4 <alt_avalon_i2c_enable>
   90280:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   90284:	e0bff817 	ldw	r2,-32(fp)
   90288:	10000226 	beq	r2,zero,90294 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
   9028c:	e0bff817 	ldw	r2,-32(fp)
   90290:	00005706 	br	903f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   90294:	01400704 	movi	r5,28
   90298:	e13ffb17 	ldw	r4,-20(fp)
   9029c:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   902a0:	e0bffe03 	ldbu	r2,-8(fp)
   902a4:	100d883a 	mov	r6,r2
   902a8:	000b883a 	mov	r5,zero
   902ac:	e13ffb17 	ldw	r4,-20(fp)
   902b0:	008f91c0 	call	8f91c <alt_avalon_i2c_send_address>
   902b4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   902b8:	e0bff817 	ldw	r2,-32(fp)
   902bc:	1000271e 	bne	r2,zero,9035c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   902c0:	00000f06 	br	90300 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   902c4:	e0bffc17 	ldw	r2,-16(fp)
   902c8:	10800003 	ldbu	r2,0(r2)
   902cc:	10803fcc 	andi	r2,r2,255
   902d0:	000f883a 	mov	r7,zero
   902d4:	000d883a 	mov	r6,zero
   902d8:	100b883a 	mov	r5,r2
   902dc:	e13ffb17 	ldw	r4,-20(fp)
   902e0:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   902e4:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   902e8:	e0bffc17 	ldw	r2,-16(fp)
   902ec:	10800044 	addi	r2,r2,1
   902f0:	e0bffc15 	stw	r2,-16(fp)
            --size;
   902f4:	e0bffd17 	ldw	r2,-12(fp)
   902f8:	10bfffc4 	addi	r2,r2,-1
   902fc:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   90300:	e0bffd17 	ldw	r2,-12(fp)
   90304:	108000b0 	cmpltui	r2,r2,2
   90308:	1000021e 	bne	r2,zero,90314 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
   9030c:	e0bff817 	ldw	r2,-32(fp)
   90310:	103fec26 	beq	r2,zero,902c4 <_gp+0xfff7e6e0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   90314:	e0bff817 	ldw	r2,-32(fp)
   90318:	1000101e 	bne	r2,zero,9035c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   9031c:	e0bffc17 	ldw	r2,-16(fp)
   90320:	10800003 	ldbu	r2,0(r2)
   90324:	10803fcc 	andi	r2,r2,255
   90328:	e0ffff03 	ldbu	r3,-4(fp)
   9032c:	180f883a 	mov	r7,r3
   90330:	000d883a 	mov	r6,zero
   90334:	100b883a 	mov	r5,r2
   90338:	e13ffb17 	ldw	r4,-20(fp)
   9033c:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   90340:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   90344:	e0bffc17 	ldw	r2,-16(fp)
   90348:	10800044 	addi	r2,r2,1
   9034c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   90350:	e0bffd17 	ldw	r2,-12(fp)
   90354:	10bfffc4 	addi	r2,r2,-1
   90358:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   9035c:	e0bff817 	ldw	r2,-32(fp)
   90360:	10001426 	beq	r2,zero,903b4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   90364:	00000d06 	br	9039c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   90368:	e0bff917 	ldw	r2,-28(fp)
   9036c:	108002a8 	cmpgeui	r2,r2,10
   90370:	1000021e 	bne	r2,zero,9037c <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
   90374:	0109c404 	movi	r4,10000
   90378:	00927180 	call	92718 <alt_busy_sleep>
            if (--timeout == 0)
   9037c:	e0bff917 	ldw	r2,-28(fp)
   90380:	10bfffc4 	addi	r2,r2,-1
   90384:	e0bff915 	stw	r2,-28(fp)
   90388:	e0bff917 	ldw	r2,-28(fp)
   9038c:	1000031e 	bne	r2,zero,9039c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   90390:	00bfff84 	movi	r2,-2
   90394:	e0bff815 	stw	r2,-32(fp)
               break;
   90398:	00000306 	br	903a8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   9039c:	e13ffb17 	ldw	r4,-20(fp)
   903a0:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   903a4:	103ff01e 	bne	r2,zero,90368 <_gp+0xfff7e784>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   903a8:	e13ffb17 	ldw	r4,-20(fp)
   903ac:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>
   903b0:	00000e06 	br	903ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
   903b4:	e0bfff03 	ldbu	r2,-4(fp)
   903b8:	10000c26 	beq	r2,zero,903ec <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   903bc:	01400704 	movi	r5,28
   903c0:	e13ffb17 	ldw	r4,-20(fp)
   903c4:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   903c8:	000b883a 	mov	r5,zero
   903cc:	e13ffb17 	ldw	r4,-20(fp)
   903d0:	0090ae80 	call	90ae8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   903d4:	e0bffa17 	ldw	r2,-24(fp)
   903d8:	00c00044 	movi	r3,1
   903dc:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   903e0:	01400044 	movi	r5,1
   903e4:	e13ffb17 	ldw	r4,-20(fp)
   903e8:	00909440 	call	90944 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   903ec:	e0bff817 	ldw	r2,-32(fp)
}
   903f0:	e037883a 	mov	sp,fp
   903f4:	dfc00117 	ldw	ra,4(sp)
   903f8:	df000017 	ldw	fp,0(sp)
   903fc:	dec00204 	addi	sp,sp,8
   90400:	f800283a 	ret

00090404 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   90404:	defff404 	addi	sp,sp,-48
   90408:	dfc00b15 	stw	ra,44(sp)
   9040c:	df000a15 	stw	fp,40(sp)
   90410:	df000a04 	addi	fp,sp,40
   90414:	e13ffb15 	stw	r4,-20(fp)
   90418:	e17ffc15 	stw	r5,-16(fp)
   9041c:	e1bffd15 	stw	r6,-12(fp)
   90420:	3807883a 	mov	r3,r7
   90424:	e0800217 	ldw	r2,8(fp)
   90428:	e0fffe05 	stb	r3,-8(fp)
   9042c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   90430:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   90434:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   90438:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   9043c:	e0bffd17 	ldw	r2,-12(fp)
   90440:	1000021e 	bne	r2,zero,9044c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   90444:	0005883a 	mov	r2,zero
   90448:	00006d06 	br	90600 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   9044c:	e0bffe03 	ldbu	r2,-8(fp)
   90450:	10000a1e 	bne	r2,zero,9047c <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   90454:	e13ffb17 	ldw	r4,-20(fp)
   90458:	008f2b40 	call	8f2b4 <alt_avalon_i2c_enable>
   9045c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   90460:	e0bff917 	ldw	r2,-28(fp)
   90464:	10000226 	beq	r2,zero,90470 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   90468:	e0bff917 	ldw	r2,-28(fp)
   9046c:	00006406 	br	90600 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   90470:	01400704 	movi	r5,28
   90474:	e13ffb17 	ldw	r4,-20(fp)
   90478:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   9047c:	e0bffe03 	ldbu	r2,-8(fp)
   90480:	100d883a 	mov	r6,r2
   90484:	01400044 	movi	r5,1
   90488:	e13ffb17 	ldw	r4,-20(fp)
   9048c:	008f91c0 	call	8f91c <alt_avalon_i2c_send_address>
   90490:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   90494:	e0bff917 	ldw	r2,-28(fp)
   90498:	1000341e 	bne	r2,zero,9056c <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   9049c:	00001906 	br	90504 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   904a0:	000f883a 	mov	r7,zero
   904a4:	000d883a 	mov	r6,zero
   904a8:	000b883a 	mov	r5,zero
   904ac:	e13ffb17 	ldw	r4,-20(fp)
   904b0:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   904b4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   904b8:	e0bff817 	ldw	r2,-32(fp)
   904bc:	10800044 	addi	r2,r2,1
   904c0:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   904c4:	e0bff917 	ldw	r2,-28(fp)
   904c8:	10000e1e 	bne	r2,zero,90504 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   904cc:	e0bffa04 	addi	r2,fp,-24
   904d0:	100f883a 	mov	r7,r2
   904d4:	000d883a 	mov	r6,zero
   904d8:	e17ffc17 	ldw	r5,-16(fp)
   904dc:	e13ffb17 	ldw	r4,-20(fp)
   904e0:	008f6e80 	call	8f6e8 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   904e4:	e0bffa17 	ldw	r2,-24(fp)
   904e8:	e0fffc17 	ldw	r3,-16(fp)
   904ec:	1885883a 	add	r2,r3,r2
   904f0:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   904f4:	e0bffa17 	ldw	r2,-24(fp)
   904f8:	e0fff717 	ldw	r3,-36(fp)
   904fc:	1885883a 	add	r2,r3,r2
   90500:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   90504:	e0bffd17 	ldw	r2,-12(fp)
   90508:	10bfffc4 	addi	r2,r2,-1
   9050c:	e0fff817 	ldw	r3,-32(fp)
   90510:	1880022e 	bgeu	r3,r2,9051c <alt_avalon_i2c_master_receive+0x118>
   90514:	e0bff917 	ldw	r2,-28(fp)
   90518:	103fe126 	beq	r2,zero,904a0 <_gp+0xfff7e8bc>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   9051c:	e0bff917 	ldw	r2,-28(fp)
   90520:	1000121e 	bne	r2,zero,9056c <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   90524:	e0bfff03 	ldbu	r2,-4(fp)
   90528:	100f883a 	mov	r7,r2
   9052c:	000d883a 	mov	r6,zero
   90530:	000b883a 	mov	r5,zero
   90534:	e13ffb17 	ldw	r4,-20(fp)
   90538:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   9053c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   90540:	00000a06 	br	9056c <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   90544:	e17ffc17 	ldw	r5,-16(fp)
   90548:	e13ffb17 	ldw	r4,-20(fp)
   9054c:	008f7900 	call	8f790 <alt_avalon_i2c_rx_read>
   90550:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   90554:	e0bffc17 	ldw	r2,-16(fp)
   90558:	10800044 	addi	r2,r2,1
   9055c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   90560:	e0bff717 	ldw	r2,-36(fp)
   90564:	10800044 	addi	r2,r2,1
   90568:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   9056c:	e0fff717 	ldw	r3,-36(fp)
   90570:	e0bffd17 	ldw	r2,-12(fp)
   90574:	1880022e 	bgeu	r3,r2,90580 <alt_avalon_i2c_master_receive+0x17c>
   90578:	e0bff917 	ldw	r2,-28(fp)
   9057c:	103ff126 	beq	r2,zero,90544 <_gp+0xfff7e960>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   90580:	e0bfff03 	ldbu	r2,-4(fp)
   90584:	1000021e 	bne	r2,zero,90590 <alt_avalon_i2c_master_receive+0x18c>
   90588:	e0bff917 	ldw	r2,-28(fp)
   9058c:	10001b26 	beq	r2,zero,905fc <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
   90590:	0149c404 	movi	r5,10000
   90594:	e13ffd17 	ldw	r4,-12(fp)
   90598:	00817900 	call	81790 <__mulsi3>
   9059c:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   905a0:	00000d06 	br	905d8 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
   905a4:	e0bff617 	ldw	r2,-40(fp)
   905a8:	108002a8 	cmpgeui	r2,r2,10
   905ac:	1000021e 	bne	r2,zero,905b8 <alt_avalon_i2c_master_receive+0x1b4>
   905b0:	0109c404 	movi	r4,10000
   905b4:	00927180 	call	92718 <alt_busy_sleep>
            if (--timeout == 0)
   905b8:	e0bff617 	ldw	r2,-40(fp)
   905bc:	10bfffc4 	addi	r2,r2,-1
   905c0:	e0bff615 	stw	r2,-40(fp)
   905c4:	e0bff617 	ldw	r2,-40(fp)
   905c8:	1000031e 	bne	r2,zero,905d8 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   905cc:	00bfff84 	movi	r2,-2
   905d0:	e0bff915 	stw	r2,-28(fp)
               break;
   905d4:	00000306 	br	905e4 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   905d8:	e13ffb17 	ldw	r4,-20(fp)
   905dc:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   905e0:	103ff01e 	bne	r2,zero,905a4 <_gp+0xfff7e9c0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   905e4:	e0bff904 	addi	r2,fp,-28
   905e8:	100b883a 	mov	r5,r2
   905ec:	e13ffb17 	ldw	r4,-20(fp)
   905f0:	008fa780 	call	8fa78 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   905f4:	e13ffb17 	ldw	r4,-20(fp)
   905f8:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>
    }

    return status;
   905fc:	e0bff917 	ldw	r2,-28(fp)
}
   90600:	e037883a 	mov	sp,fp
   90604:	dfc00117 	ldw	ra,4(sp)
   90608:	df000017 	ldw	fp,0(sp)
   9060c:	dec00204 	addi	sp,sp,8
   90610:	f800283a 	ret

00090614 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   90614:	defff504 	addi	sp,sp,-44
   90618:	dfc00a15 	stw	ra,40(sp)
   9061c:	df000915 	stw	fp,36(sp)
   90620:	df000904 	addi	fp,sp,36
   90624:	e13ffb15 	stw	r4,-20(fp)
   90628:	e17ffc15 	stw	r5,-16(fp)
   9062c:	e1bffd15 	stw	r6,-12(fp)
   90630:	3807883a 	mov	r3,r7
   90634:	e0800217 	ldw	r2,8(fp)
   90638:	e0fffe05 	stb	r3,-8(fp)
   9063c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   90640:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   90644:	e0bffb17 	ldw	r2,-20(fp)
   90648:	10800717 	ldw	r2,28(r2)
   9064c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   90650:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   90654:	e0bffd17 	ldw	r2,-12(fp)
   90658:	1000021e 	bne	r2,zero,90664 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   9065c:	0005883a 	mov	r2,zero
   90660:	00006306 	br	907f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   90664:	e0bffb17 	ldw	r2,-20(fp)
   90668:	10c00617 	ldw	r3,24(r2)
   9066c:	00800274 	movhi	r2,9
   90670:	10bbce04 	addi	r2,r2,-4296
   90674:	18800226 	beq	r3,r2,90680 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   90678:	00bfff44 	movi	r2,-3
   9067c:	00005c06 	br	907f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   90680:	e0bffe03 	ldbu	r2,-8(fp)
   90684:	10000a1e 	bne	r2,zero,906b0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   90688:	e13ffb17 	ldw	r4,-20(fp)
   9068c:	008f2b40 	call	8f2b4 <alt_avalon_i2c_enable>
   90690:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   90694:	e0bff717 	ldw	r2,-36(fp)
   90698:	10000226 	beq	r2,zero,906a4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   9069c:	e0bff717 	ldw	r2,-36(fp)
   906a0:	00005306 	br	907f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   906a4:	01400704 	movi	r5,28
   906a8:	e13ffb17 	ldw	r4,-20(fp)
   906ac:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   906b0:	e0bffe03 	ldbu	r2,-8(fp)
   906b4:	100d883a 	mov	r6,r2
   906b8:	01400044 	movi	r5,1
   906bc:	e13ffb17 	ldw	r4,-20(fp)
   906c0:	008f91c0 	call	8f91c <alt_avalon_i2c_send_address>
   906c4:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   906c8:	e0bff717 	ldw	r2,-36(fp)
   906cc:	1000191e 	bne	r2,zero,90734 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   906d0:	00000906 	br	906f8 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   906d4:	000f883a 	mov	r7,zero
   906d8:	000d883a 	mov	r6,zero
   906dc:	000b883a 	mov	r5,zero
   906e0:	e13ffb17 	ldw	r4,-20(fp)
   906e4:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   906e8:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   906ec:	e0bff917 	ldw	r2,-28(fp)
   906f0:	10800044 	addi	r2,r2,1
   906f4:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   906f8:	e0bffd17 	ldw	r2,-12(fp)
   906fc:	10bfffc4 	addi	r2,r2,-1
   90700:	e0fff917 	ldw	r3,-28(fp)
   90704:	1880022e 	bgeu	r3,r2,90710 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   90708:	e0bff717 	ldw	r2,-36(fp)
   9070c:	103ff126 	beq	r2,zero,906d4 <_gp+0xfff7eaf0>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   90710:	e0bff717 	ldw	r2,-36(fp)
   90714:	1000071e 	bne	r2,zero,90734 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   90718:	e0bfff03 	ldbu	r2,-4(fp)
   9071c:	100f883a 	mov	r7,r2
   90720:	000d883a 	mov	r6,zero
   90724:	000b883a 	mov	r5,zero
   90728:	e13ffb17 	ldw	r4,-20(fp)
   9072c:	008f8380 	call	8f838 <alt_avalon_i2c_cmd_write>
   90730:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   90734:	e0bff717 	ldw	r2,-36(fp)
   90738:	10001826 	beq	r2,zero,9079c <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
   9073c:	0149c404 	movi	r5,10000
   90740:	e13ffd17 	ldw	r4,-12(fp)
   90744:	00817900 	call	81790 <__mulsi3>
   90748:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   9074c:	00000d06 	br	90784 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
   90750:	e0bff817 	ldw	r2,-32(fp)
   90754:	108002a8 	cmpgeui	r2,r2,10
   90758:	1000021e 	bne	r2,zero,90764 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
   9075c:	0109c404 	movi	r4,10000
   90760:	00927180 	call	92718 <alt_busy_sleep>
            if (--timeout == 0)
   90764:	e0bff817 	ldw	r2,-32(fp)
   90768:	10bfffc4 	addi	r2,r2,-1
   9076c:	e0bff815 	stw	r2,-32(fp)
   90770:	e0bff817 	ldw	r2,-32(fp)
   90774:	1000031e 	bne	r2,zero,90784 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   90778:	00bfff84 	movi	r2,-2
   9077c:	e0bff715 	stw	r2,-36(fp)
               break;
   90780:	00000306 	br	90790 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   90784:	e13ffb17 	ldw	r4,-20(fp)
   90788:	008f6a40 	call	8f6a4 <alt_avalon_i2c_is_busy>
   9078c:	103ff01e 	bne	r2,zero,90750 <_gp+0xfff7eb6c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   90790:	e13ffb17 	ldw	r4,-20(fp)
   90794:	008f34c0 	call	8f34c <alt_avalon_i2c_disable>
   90798:	00001406 	br	907ec <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
   9079c:	e0bfff03 	ldbu	r2,-4(fp)
   907a0:	10001226 	beq	r2,zero,907ec <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   907a4:	01400704 	movi	r5,28
   907a8:	e13ffb17 	ldw	r4,-20(fp)
   907ac:	00908a00 	call	908a0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   907b0:	000b883a 	mov	r5,zero
   907b4:	e13ffb17 	ldw	r4,-20(fp)
   907b8:	0090a380 	call	90a38 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   907bc:	e0bffa17 	ldw	r2,-24(fp)
   907c0:	00c00084 	movi	r3,2
   907c4:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   907c8:	e0bffa17 	ldw	r2,-24(fp)
   907cc:	e0fffc17 	ldw	r3,-16(fp)
   907d0:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   907d4:	e0bffa17 	ldw	r2,-24(fp)
   907d8:	e0fffd17 	ldw	r3,-12(fp)
   907dc:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   907e0:	01400084 	movi	r5,2
   907e4:	e13ffb17 	ldw	r4,-20(fp)
   907e8:	00909440 	call	90944 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   907ec:	e0bff717 	ldw	r2,-36(fp)
}
   907f0:	e037883a 	mov	sp,fp
   907f4:	dfc00117 	ldw	ra,4(sp)
   907f8:	df000017 	ldw	fp,0(sp)
   907fc:	dec00204 	addi	sp,sp,8
   90800:	f800283a 	ret

00090804 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   90804:	defffd04 	addi	sp,sp,-12
   90808:	df000215 	stw	fp,8(sp)
   9080c:	df000204 	addi	fp,sp,8
   90810:	e13ffe15 	stw	r4,-8(fp)
   90814:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   90818:	e0bffe17 	ldw	r2,-8(fp)
   9081c:	10800317 	ldw	r2,12(r2)
   90820:	10800404 	addi	r2,r2,16
   90824:	10c00037 	ldwio	r3,0(r2)
   90828:	e0bffe17 	ldw	r2,-8(fp)
   9082c:	10800317 	ldw	r2,12(r2)
   90830:	10800304 	addi	r2,r2,12
   90834:	10800037 	ldwio	r2,0(r2)
   90838:	1884703a 	and	r2,r3,r2
   9083c:	1007883a 	mov	r3,r2
   90840:	e0bfff17 	ldw	r2,-4(fp)
   90844:	10c00015 	stw	r3,0(r2)
}
   90848:	0001883a 	nop
   9084c:	e037883a 	mov	sp,fp
   90850:	df000017 	ldw	fp,0(sp)
   90854:	dec00104 	addi	sp,sp,4
   90858:	f800283a 	ret

0009085c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   9085c:	defffd04 	addi	sp,sp,-12
   90860:	df000215 	stw	fp,8(sp)
   90864:	df000204 	addi	fp,sp,8
   90868:	e13ffe15 	stw	r4,-8(fp)
   9086c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   90870:	e0bffe17 	ldw	r2,-8(fp)
   90874:	10800317 	ldw	r2,12(r2)
   90878:	10800404 	addi	r2,r2,16
   9087c:	10800037 	ldwio	r2,0(r2)
   90880:	1007883a 	mov	r3,r2
   90884:	e0bfff17 	ldw	r2,-4(fp)
   90888:	10c00015 	stw	r3,0(r2)
}
   9088c:	0001883a 	nop
   90890:	e037883a 	mov	sp,fp
   90894:	df000017 	ldw	fp,0(sp)
   90898:	dec00104 	addi	sp,sp,4
   9089c:	f800283a 	ret

000908a0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   908a0:	defffd04 	addi	sp,sp,-12
   908a4:	df000215 	stw	fp,8(sp)
   908a8:	df000204 	addi	fp,sp,8
   908ac:	e13ffe15 	stw	r4,-8(fp)
   908b0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   908b4:	e0bffe17 	ldw	r2,-8(fp)
   908b8:	10800317 	ldw	r2,12(r2)
   908bc:	10800404 	addi	r2,r2,16
   908c0:	e0ffff17 	ldw	r3,-4(fp)
   908c4:	10c00035 	stwio	r3,0(r2)
}
   908c8:	0001883a 	nop
   908cc:	e037883a 	mov	sp,fp
   908d0:	df000017 	ldw	fp,0(sp)
   908d4:	dec00104 	addi	sp,sp,4
   908d8:	f800283a 	ret

000908dc <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   908dc:	defffb04 	addi	sp,sp,-20
   908e0:	dfc00415 	stw	ra,16(sp)
   908e4:	df000315 	stw	fp,12(sp)
   908e8:	df000304 	addi	fp,sp,12
   908ec:	e13ffe15 	stw	r4,-8(fp)
   908f0:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   908f4:	e17ffd04 	addi	r5,fp,-12
   908f8:	e13ffe17 	ldw	r4,-8(fp)
   908fc:	00909a80 	call	909a8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   90900:	e0bfff17 	ldw	r2,-4(fp)
   90904:	0086303a 	nor	r3,zero,r2
   90908:	e0bffd17 	ldw	r2,-12(fp)
   9090c:	1884703a 	and	r2,r3,r2
   90910:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   90914:	e0bffe17 	ldw	r2,-8(fp)
   90918:	10800317 	ldw	r2,12(r2)
   9091c:	10800304 	addi	r2,r2,12
   90920:	e0fffd17 	ldw	r3,-12(fp)
   90924:	18c007cc 	andi	r3,r3,31
   90928:	10c00035 	stwio	r3,0(r2)
}
   9092c:	0001883a 	nop
   90930:	e037883a 	mov	sp,fp
   90934:	dfc00117 	ldw	ra,4(sp)
   90938:	df000017 	ldw	fp,0(sp)
   9093c:	dec00204 	addi	sp,sp,8
   90940:	f800283a 	ret

00090944 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   90944:	defffb04 	addi	sp,sp,-20
   90948:	dfc00415 	stw	ra,16(sp)
   9094c:	df000315 	stw	fp,12(sp)
   90950:	df000304 	addi	fp,sp,12
   90954:	e13ffe15 	stw	r4,-8(fp)
   90958:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   9095c:	e17ffd04 	addi	r5,fp,-12
   90960:	e13ffe17 	ldw	r4,-8(fp)
   90964:	00909a80 	call	909a8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   90968:	e0fffd17 	ldw	r3,-12(fp)
   9096c:	e0bfff17 	ldw	r2,-4(fp)
   90970:	1884b03a 	or	r2,r3,r2
   90974:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   90978:	e0bffe17 	ldw	r2,-8(fp)
   9097c:	10800317 	ldw	r2,12(r2)
   90980:	10800304 	addi	r2,r2,12
   90984:	e0fffd17 	ldw	r3,-12(fp)
   90988:	18c007cc 	andi	r3,r3,31
   9098c:	10c00035 	stwio	r3,0(r2)
}
   90990:	0001883a 	nop
   90994:	e037883a 	mov	sp,fp
   90998:	dfc00117 	ldw	ra,4(sp)
   9099c:	df000017 	ldw	fp,0(sp)
   909a0:	dec00204 	addi	sp,sp,8
   909a4:	f800283a 	ret

000909a8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   909a8:	defffd04 	addi	sp,sp,-12
   909ac:	df000215 	stw	fp,8(sp)
   909b0:	df000204 	addi	fp,sp,8
   909b4:	e13ffe15 	stw	r4,-8(fp)
   909b8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   909bc:	e0bffe17 	ldw	r2,-8(fp)
   909c0:	10800317 	ldw	r2,12(r2)
   909c4:	10800304 	addi	r2,r2,12
   909c8:	10800037 	ldwio	r2,0(r2)
   909cc:	10c007cc 	andi	r3,r2,31
   909d0:	e0bfff17 	ldw	r2,-4(fp)
   909d4:	10c00015 	stw	r3,0(r2)
}
   909d8:	0001883a 	nop
   909dc:	e037883a 	mov	sp,fp
   909e0:	df000017 	ldw	fp,0(sp)
   909e4:	dec00104 	addi	sp,sp,4
   909e8:	f800283a 	ret

000909ec <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   909ec:	defffd04 	addi	sp,sp,-12
   909f0:	df000215 	stw	fp,8(sp)
   909f4:	df000204 	addi	fp,sp,8
   909f8:	e13ffe15 	stw	r4,-8(fp)
   909fc:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   90a00:	e0bffe17 	ldw	r2,-8(fp)
   90a04:	10800317 	ldw	r2,12(r2)
   90a08:	10800204 	addi	r2,r2,8
   90a0c:	10800037 	ldwio	r2,0(r2)
   90a10:	10800c0c 	andi	r2,r2,48
   90a14:	1005d13a 	srai	r2,r2,4
   90a18:	1007883a 	mov	r3,r2
   90a1c:	e0bfff17 	ldw	r2,-4(fp)
   90a20:	10c00015 	stw	r3,0(r2)
}
   90a24:	0001883a 	nop
   90a28:	e037883a 	mov	sp,fp
   90a2c:	df000017 	ldw	fp,0(sp)
   90a30:	dec00104 	addi	sp,sp,4
   90a34:	f800283a 	ret

00090a38 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   90a38:	defffd04 	addi	sp,sp,-12
   90a3c:	df000215 	stw	fp,8(sp)
   90a40:	df000204 	addi	fp,sp,8
   90a44:	e13ffe15 	stw	r4,-8(fp)
   90a48:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   90a4c:	e0bffe17 	ldw	r2,-8(fp)
   90a50:	10800317 	ldw	r2,12(r2)
   90a54:	10800204 	addi	r2,r2,8
   90a58:	e0fffe17 	ldw	r3,-8(fp)
   90a5c:	18c00317 	ldw	r3,12(r3)
   90a60:	18c00204 	addi	r3,r3,8
   90a64:	18c00037 	ldwio	r3,0(r3)
   90a68:	1809883a 	mov	r4,r3
   90a6c:	00fff3c4 	movi	r3,-49
   90a70:	20c8703a 	and	r4,r4,r3
   90a74:	e0ffff17 	ldw	r3,-4(fp)
   90a78:	1806913a 	slli	r3,r3,4
   90a7c:	18c00c0c 	andi	r3,r3,48
   90a80:	20c6b03a 	or	r3,r4,r3
   90a84:	10c00035 	stwio	r3,0(r2)
}
   90a88:	0001883a 	nop
   90a8c:	e037883a 	mov	sp,fp
   90a90:	df000017 	ldw	fp,0(sp)
   90a94:	dec00104 	addi	sp,sp,4
   90a98:	f800283a 	ret

00090a9c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   90a9c:	defffd04 	addi	sp,sp,-12
   90aa0:	df000215 	stw	fp,8(sp)
   90aa4:	df000204 	addi	fp,sp,8
   90aa8:	e13ffe15 	stw	r4,-8(fp)
   90aac:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   90ab0:	e0bffe17 	ldw	r2,-8(fp)
   90ab4:	10800317 	ldw	r2,12(r2)
   90ab8:	10800204 	addi	r2,r2,8
   90abc:	10800037 	ldwio	r2,0(r2)
   90ac0:	1080030c 	andi	r2,r2,12
   90ac4:	1005d0ba 	srai	r2,r2,2
   90ac8:	1007883a 	mov	r3,r2
   90acc:	e0bfff17 	ldw	r2,-4(fp)
   90ad0:	10c00015 	stw	r3,0(r2)
}
   90ad4:	0001883a 	nop
   90ad8:	e037883a 	mov	sp,fp
   90adc:	df000017 	ldw	fp,0(sp)
   90ae0:	dec00104 	addi	sp,sp,4
   90ae4:	f800283a 	ret

00090ae8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   90ae8:	defffd04 	addi	sp,sp,-12
   90aec:	df000215 	stw	fp,8(sp)
   90af0:	df000204 	addi	fp,sp,8
   90af4:	e13ffe15 	stw	r4,-8(fp)
   90af8:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   90afc:	e0bffe17 	ldw	r2,-8(fp)
   90b00:	10800317 	ldw	r2,12(r2)
   90b04:	10c00204 	addi	r3,r2,8
   90b08:	e0bffe17 	ldw	r2,-8(fp)
   90b0c:	10800317 	ldw	r2,12(r2)
   90b10:	10800204 	addi	r2,r2,8
   90b14:	10800037 	ldwio	r2,0(r2)
   90b18:	1009883a 	mov	r4,r2
   90b1c:	00bffcc4 	movi	r2,-13
   90b20:	2088703a 	and	r4,r4,r2
   90b24:	e0bfff17 	ldw	r2,-4(fp)
   90b28:	1085883a 	add	r2,r2,r2
   90b2c:	1085883a 	add	r2,r2,r2
   90b30:	1080030c 	andi	r2,r2,12
   90b34:	2084b03a 	or	r2,r4,r2
   90b38:	18800035 	stwio	r2,0(r3)
}
   90b3c:	0001883a 	nop
   90b40:	e037883a 	mov	sp,fp
   90b44:	df000017 	ldw	fp,0(sp)
   90b48:	dec00104 	addi	sp,sp,4
   90b4c:	f800283a 	ret

00090b50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   90b50:	defffa04 	addi	sp,sp,-24
   90b54:	dfc00515 	stw	ra,20(sp)
   90b58:	df000415 	stw	fp,16(sp)
   90b5c:	df000404 	addi	fp,sp,16
   90b60:	e13ffd15 	stw	r4,-12(fp)
   90b64:	e17ffe15 	stw	r5,-8(fp)
   90b68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   90b6c:	e0bffd17 	ldw	r2,-12(fp)
   90b70:	10800017 	ldw	r2,0(r2)
   90b74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   90b78:	e0bffc17 	ldw	r2,-16(fp)
   90b7c:	10c00a04 	addi	r3,r2,40
   90b80:	e0bffd17 	ldw	r2,-12(fp)
   90b84:	10800217 	ldw	r2,8(r2)
   90b88:	100f883a 	mov	r7,r2
   90b8c:	e1bfff17 	ldw	r6,-4(fp)
   90b90:	e17ffe17 	ldw	r5,-8(fp)
   90b94:	1809883a 	mov	r4,r3
   90b98:	00911780 	call	91178 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   90b9c:	e037883a 	mov	sp,fp
   90ba0:	dfc00117 	ldw	ra,4(sp)
   90ba4:	df000017 	ldw	fp,0(sp)
   90ba8:	dec00204 	addi	sp,sp,8
   90bac:	f800283a 	ret

00090bb0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   90bb0:	defffa04 	addi	sp,sp,-24
   90bb4:	dfc00515 	stw	ra,20(sp)
   90bb8:	df000415 	stw	fp,16(sp)
   90bbc:	df000404 	addi	fp,sp,16
   90bc0:	e13ffd15 	stw	r4,-12(fp)
   90bc4:	e17ffe15 	stw	r5,-8(fp)
   90bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   90bcc:	e0bffd17 	ldw	r2,-12(fp)
   90bd0:	10800017 	ldw	r2,0(r2)
   90bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   90bd8:	e0bffc17 	ldw	r2,-16(fp)
   90bdc:	10c00a04 	addi	r3,r2,40
   90be0:	e0bffd17 	ldw	r2,-12(fp)
   90be4:	10800217 	ldw	r2,8(r2)
   90be8:	100f883a 	mov	r7,r2
   90bec:	e1bfff17 	ldw	r6,-4(fp)
   90bf0:	e17ffe17 	ldw	r5,-8(fp)
   90bf4:	1809883a 	mov	r4,r3
   90bf8:	00913940 	call	91394 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   90bfc:	e037883a 	mov	sp,fp
   90c00:	dfc00117 	ldw	ra,4(sp)
   90c04:	df000017 	ldw	fp,0(sp)
   90c08:	dec00204 	addi	sp,sp,8
   90c0c:	f800283a 	ret

00090c10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   90c10:	defffc04 	addi	sp,sp,-16
   90c14:	dfc00315 	stw	ra,12(sp)
   90c18:	df000215 	stw	fp,8(sp)
   90c1c:	df000204 	addi	fp,sp,8
   90c20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   90c24:	e0bfff17 	ldw	r2,-4(fp)
   90c28:	10800017 	ldw	r2,0(r2)
   90c2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   90c30:	e0bffe17 	ldw	r2,-8(fp)
   90c34:	10c00a04 	addi	r3,r2,40
   90c38:	e0bfff17 	ldw	r2,-4(fp)
   90c3c:	10800217 	ldw	r2,8(r2)
   90c40:	100b883a 	mov	r5,r2
   90c44:	1809883a 	mov	r4,r3
   90c48:	00910200 	call	91020 <altera_avalon_jtag_uart_close>
}
   90c4c:	e037883a 	mov	sp,fp
   90c50:	dfc00117 	ldw	ra,4(sp)
   90c54:	df000017 	ldw	fp,0(sp)
   90c58:	dec00204 	addi	sp,sp,8
   90c5c:	f800283a 	ret

00090c60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   90c60:	defffa04 	addi	sp,sp,-24
   90c64:	dfc00515 	stw	ra,20(sp)
   90c68:	df000415 	stw	fp,16(sp)
   90c6c:	df000404 	addi	fp,sp,16
   90c70:	e13ffd15 	stw	r4,-12(fp)
   90c74:	e17ffe15 	stw	r5,-8(fp)
   90c78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   90c7c:	e0bffd17 	ldw	r2,-12(fp)
   90c80:	10800017 	ldw	r2,0(r2)
   90c84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   90c88:	e0bffc17 	ldw	r2,-16(fp)
   90c8c:	10800a04 	addi	r2,r2,40
   90c90:	e1bfff17 	ldw	r6,-4(fp)
   90c94:	e17ffe17 	ldw	r5,-8(fp)
   90c98:	1009883a 	mov	r4,r2
   90c9c:	00910880 	call	91088 <altera_avalon_jtag_uart_ioctl>
}
   90ca0:	e037883a 	mov	sp,fp
   90ca4:	dfc00117 	ldw	ra,4(sp)
   90ca8:	df000017 	ldw	fp,0(sp)
   90cac:	dec00204 	addi	sp,sp,8
   90cb0:	f800283a 	ret

00090cb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   90cb4:	defffa04 	addi	sp,sp,-24
   90cb8:	dfc00515 	stw	ra,20(sp)
   90cbc:	df000415 	stw	fp,16(sp)
   90cc0:	df000404 	addi	fp,sp,16
   90cc4:	e13ffd15 	stw	r4,-12(fp)
   90cc8:	e17ffe15 	stw	r5,-8(fp)
   90ccc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   90cd0:	e0bffd17 	ldw	r2,-12(fp)
   90cd4:	00c00044 	movi	r3,1
   90cd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   90cdc:	e0bffd17 	ldw	r2,-12(fp)
   90ce0:	10800017 	ldw	r2,0(r2)
   90ce4:	10800104 	addi	r2,r2,4
   90ce8:	1007883a 	mov	r3,r2
   90cec:	e0bffd17 	ldw	r2,-12(fp)
   90cf0:	10800817 	ldw	r2,32(r2)
   90cf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   90cf8:	e0bffe17 	ldw	r2,-8(fp)
   90cfc:	e0ffff17 	ldw	r3,-4(fp)
   90d00:	d8000015 	stw	zero,0(sp)
   90d04:	e1fffd17 	ldw	r7,-12(fp)
   90d08:	01800274 	movhi	r6,9
   90d0c:	31835d04 	addi	r6,r6,3444
   90d10:	180b883a 	mov	r5,r3
   90d14:	1009883a 	mov	r4,r2
   90d18:	0092bc40 	call	92bc4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   90d1c:	e0bffd17 	ldw	r2,-12(fp)
   90d20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   90d24:	e0bffd17 	ldw	r2,-12(fp)
   90d28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   90d2c:	d0e02117 	ldw	r3,-32636(gp)
   90d30:	e1fffd17 	ldw	r7,-12(fp)
   90d34:	01800274 	movhi	r6,9
   90d38:	3183e004 	addi	r6,r6,3968
   90d3c:	180b883a 	mov	r5,r3
   90d40:	1009883a 	mov	r4,r2
   90d44:	00925ec0 	call	925ec <alt_alarm_start>
   90d48:	1000040e 	bge	r2,zero,90d5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   90d4c:	e0fffd17 	ldw	r3,-12(fp)
   90d50:	00a00034 	movhi	r2,32768
   90d54:	10bfffc4 	addi	r2,r2,-1
   90d58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   90d5c:	0001883a 	nop
   90d60:	e037883a 	mov	sp,fp
   90d64:	dfc00117 	ldw	ra,4(sp)
   90d68:	df000017 	ldw	fp,0(sp)
   90d6c:	dec00204 	addi	sp,sp,8
   90d70:	f800283a 	ret

00090d74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   90d74:	defff804 	addi	sp,sp,-32
   90d78:	df000715 	stw	fp,28(sp)
   90d7c:	df000704 	addi	fp,sp,28
   90d80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   90d84:	e0bfff17 	ldw	r2,-4(fp)
   90d88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   90d8c:	e0bffb17 	ldw	r2,-20(fp)
   90d90:	10800017 	ldw	r2,0(r2)
   90d94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90d98:	e0bffc17 	ldw	r2,-16(fp)
   90d9c:	10800104 	addi	r2,r2,4
   90da0:	10800037 	ldwio	r2,0(r2)
   90da4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   90da8:	e0bffd17 	ldw	r2,-12(fp)
   90dac:	1080c00c 	andi	r2,r2,768
   90db0:	10006d26 	beq	r2,zero,90f68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   90db4:	e0bffd17 	ldw	r2,-12(fp)
   90db8:	1080400c 	andi	r2,r2,256
   90dbc:	10003526 	beq	r2,zero,90e94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   90dc0:	00800074 	movhi	r2,1
   90dc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90dc8:	e0bffb17 	ldw	r2,-20(fp)
   90dcc:	10800a17 	ldw	r2,40(r2)
   90dd0:	10800044 	addi	r2,r2,1
   90dd4:	1081ffcc 	andi	r2,r2,2047
   90dd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   90ddc:	e0bffb17 	ldw	r2,-20(fp)
   90de0:	10c00b17 	ldw	r3,44(r2)
   90de4:	e0bffe17 	ldw	r2,-8(fp)
   90de8:	18801526 	beq	r3,r2,90e40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   90dec:	e0bffc17 	ldw	r2,-16(fp)
   90df0:	10800037 	ldwio	r2,0(r2)
   90df4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   90df8:	e0bff917 	ldw	r2,-28(fp)
   90dfc:	10a0000c 	andi	r2,r2,32768
   90e00:	10001126 	beq	r2,zero,90e48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   90e04:	e0bffb17 	ldw	r2,-20(fp)
   90e08:	10800a17 	ldw	r2,40(r2)
   90e0c:	e0fff917 	ldw	r3,-28(fp)
   90e10:	1809883a 	mov	r4,r3
   90e14:	e0fffb17 	ldw	r3,-20(fp)
   90e18:	1885883a 	add	r2,r3,r2
   90e1c:	10800e04 	addi	r2,r2,56
   90e20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90e24:	e0bffb17 	ldw	r2,-20(fp)
   90e28:	10800a17 	ldw	r2,40(r2)
   90e2c:	10800044 	addi	r2,r2,1
   90e30:	10c1ffcc 	andi	r3,r2,2047
   90e34:	e0bffb17 	ldw	r2,-20(fp)
   90e38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   90e3c:	003fe206 	br	90dc8 <_gp+0xfff7f1e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   90e40:	0001883a 	nop
   90e44:	00000106 	br	90e4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   90e48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   90e4c:	e0bff917 	ldw	r2,-28(fp)
   90e50:	10bfffec 	andhi	r2,r2,65535
   90e54:	10000f26 	beq	r2,zero,90e94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   90e58:	e0bffb17 	ldw	r2,-20(fp)
   90e5c:	10c00817 	ldw	r3,32(r2)
   90e60:	00bfff84 	movi	r2,-2
   90e64:	1886703a 	and	r3,r3,r2
   90e68:	e0bffb17 	ldw	r2,-20(fp)
   90e6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   90e70:	e0bffc17 	ldw	r2,-16(fp)
   90e74:	10800104 	addi	r2,r2,4
   90e78:	1007883a 	mov	r3,r2
   90e7c:	e0bffb17 	ldw	r2,-20(fp)
   90e80:	10800817 	ldw	r2,32(r2)
   90e84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90e88:	e0bffc17 	ldw	r2,-16(fp)
   90e8c:	10800104 	addi	r2,r2,4
   90e90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   90e94:	e0bffd17 	ldw	r2,-12(fp)
   90e98:	1080800c 	andi	r2,r2,512
   90e9c:	103fbe26 	beq	r2,zero,90d98 <_gp+0xfff7f1b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   90ea0:	e0bffd17 	ldw	r2,-12(fp)
   90ea4:	1004d43a 	srli	r2,r2,16
   90ea8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   90eac:	00001406 	br	90f00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   90eb0:	e0bffc17 	ldw	r2,-16(fp)
   90eb4:	e0fffb17 	ldw	r3,-20(fp)
   90eb8:	18c00d17 	ldw	r3,52(r3)
   90ebc:	e13ffb17 	ldw	r4,-20(fp)
   90ec0:	20c7883a 	add	r3,r4,r3
   90ec4:	18c20e04 	addi	r3,r3,2104
   90ec8:	18c00003 	ldbu	r3,0(r3)
   90ecc:	18c03fcc 	andi	r3,r3,255
   90ed0:	18c0201c 	xori	r3,r3,128
   90ed4:	18ffe004 	addi	r3,r3,-128
   90ed8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90edc:	e0bffb17 	ldw	r2,-20(fp)
   90ee0:	10800d17 	ldw	r2,52(r2)
   90ee4:	10800044 	addi	r2,r2,1
   90ee8:	10c1ffcc 	andi	r3,r2,2047
   90eec:	e0bffb17 	ldw	r2,-20(fp)
   90ef0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   90ef4:	e0bffa17 	ldw	r2,-24(fp)
   90ef8:	10bfffc4 	addi	r2,r2,-1
   90efc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   90f00:	e0bffa17 	ldw	r2,-24(fp)
   90f04:	10000526 	beq	r2,zero,90f1c <altera_avalon_jtag_uart_irq+0x1a8>
   90f08:	e0bffb17 	ldw	r2,-20(fp)
   90f0c:	10c00d17 	ldw	r3,52(r2)
   90f10:	e0bffb17 	ldw	r2,-20(fp)
   90f14:	10800c17 	ldw	r2,48(r2)
   90f18:	18bfe51e 	bne	r3,r2,90eb0 <_gp+0xfff7f2cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   90f1c:	e0bffa17 	ldw	r2,-24(fp)
   90f20:	103f9d26 	beq	r2,zero,90d98 <_gp+0xfff7f1b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   90f24:	e0bffb17 	ldw	r2,-20(fp)
   90f28:	10c00817 	ldw	r3,32(r2)
   90f2c:	00bfff44 	movi	r2,-3
   90f30:	1886703a 	and	r3,r3,r2
   90f34:	e0bffb17 	ldw	r2,-20(fp)
   90f38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   90f3c:	e0bffb17 	ldw	r2,-20(fp)
   90f40:	10800017 	ldw	r2,0(r2)
   90f44:	10800104 	addi	r2,r2,4
   90f48:	1007883a 	mov	r3,r2
   90f4c:	e0bffb17 	ldw	r2,-20(fp)
   90f50:	10800817 	ldw	r2,32(r2)
   90f54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90f58:	e0bffc17 	ldw	r2,-16(fp)
   90f5c:	10800104 	addi	r2,r2,4
   90f60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   90f64:	003f8c06 	br	90d98 <_gp+0xfff7f1b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   90f68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   90f6c:	0001883a 	nop
   90f70:	e037883a 	mov	sp,fp
   90f74:	df000017 	ldw	fp,0(sp)
   90f78:	dec00104 	addi	sp,sp,4
   90f7c:	f800283a 	ret

00090f80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   90f80:	defff804 	addi	sp,sp,-32
   90f84:	df000715 	stw	fp,28(sp)
   90f88:	df000704 	addi	fp,sp,28
   90f8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   90f90:	e0bffb17 	ldw	r2,-20(fp)
   90f94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   90f98:	e0bff917 	ldw	r2,-28(fp)
   90f9c:	10800017 	ldw	r2,0(r2)
   90fa0:	10800104 	addi	r2,r2,4
   90fa4:	10800037 	ldwio	r2,0(r2)
   90fa8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   90fac:	e0bffa17 	ldw	r2,-24(fp)
   90fb0:	1081000c 	andi	r2,r2,1024
   90fb4:	10000b26 	beq	r2,zero,90fe4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   90fb8:	e0bff917 	ldw	r2,-28(fp)
   90fbc:	10800017 	ldw	r2,0(r2)
   90fc0:	10800104 	addi	r2,r2,4
   90fc4:	1007883a 	mov	r3,r2
   90fc8:	e0bff917 	ldw	r2,-28(fp)
   90fcc:	10800817 	ldw	r2,32(r2)
   90fd0:	10810014 	ori	r2,r2,1024
   90fd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   90fd8:	e0bff917 	ldw	r2,-28(fp)
   90fdc:	10000915 	stw	zero,36(r2)
   90fe0:	00000a06 	br	9100c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   90fe4:	e0bff917 	ldw	r2,-28(fp)
   90fe8:	10c00917 	ldw	r3,36(r2)
   90fec:	00a00034 	movhi	r2,32768
   90ff0:	10bfff04 	addi	r2,r2,-4
   90ff4:	10c00536 	bltu	r2,r3,9100c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   90ff8:	e0bff917 	ldw	r2,-28(fp)
   90ffc:	10800917 	ldw	r2,36(r2)
   91000:	10c00044 	addi	r3,r2,1
   91004:	e0bff917 	ldw	r2,-28(fp)
   91008:	10c00915 	stw	r3,36(r2)
   9100c:	d0a02117 	ldw	r2,-32636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   91010:	e037883a 	mov	sp,fp
   91014:	df000017 	ldw	fp,0(sp)
   91018:	dec00104 	addi	sp,sp,4
   9101c:	f800283a 	ret

00091020 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   91020:	defffd04 	addi	sp,sp,-12
   91024:	df000215 	stw	fp,8(sp)
   91028:	df000204 	addi	fp,sp,8
   9102c:	e13ffe15 	stw	r4,-8(fp)
   91030:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   91034:	00000506 	br	9104c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   91038:	e0bfff17 	ldw	r2,-4(fp)
   9103c:	1090000c 	andi	r2,r2,16384
   91040:	10000226 	beq	r2,zero,9104c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   91044:	00bffd44 	movi	r2,-11
   91048:	00000b06 	br	91078 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9104c:	e0bffe17 	ldw	r2,-8(fp)
   91050:	10c00d17 	ldw	r3,52(r2)
   91054:	e0bffe17 	ldw	r2,-8(fp)
   91058:	10800c17 	ldw	r2,48(r2)
   9105c:	18800526 	beq	r3,r2,91074 <altera_avalon_jtag_uart_close+0x54>
   91060:	e0bffe17 	ldw	r2,-8(fp)
   91064:	10c00917 	ldw	r3,36(r2)
   91068:	e0bffe17 	ldw	r2,-8(fp)
   9106c:	10800117 	ldw	r2,4(r2)
   91070:	18bff136 	bltu	r3,r2,91038 <_gp+0xfff7f454>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   91074:	0005883a 	mov	r2,zero
}
   91078:	e037883a 	mov	sp,fp
   9107c:	df000017 	ldw	fp,0(sp)
   91080:	dec00104 	addi	sp,sp,4
   91084:	f800283a 	ret

00091088 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   91088:	defffa04 	addi	sp,sp,-24
   9108c:	df000515 	stw	fp,20(sp)
   91090:	df000504 	addi	fp,sp,20
   91094:	e13ffd15 	stw	r4,-12(fp)
   91098:	e17ffe15 	stw	r5,-8(fp)
   9109c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   910a0:	00bff9c4 	movi	r2,-25
   910a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   910a8:	e0bffe17 	ldw	r2,-8(fp)
   910ac:	10da8060 	cmpeqi	r3,r2,27137
   910b0:	1800031e 	bne	r3,zero,910c0 <altera_avalon_jtag_uart_ioctl+0x38>
   910b4:	109a80a0 	cmpeqi	r2,r2,27138
   910b8:	1000181e 	bne	r2,zero,9111c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   910bc:	00002906 	br	91164 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   910c0:	e0bffd17 	ldw	r2,-12(fp)
   910c4:	10c00117 	ldw	r3,4(r2)
   910c8:	00a00034 	movhi	r2,32768
   910cc:	10bfffc4 	addi	r2,r2,-1
   910d0:	18802126 	beq	r3,r2,91158 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   910d4:	e0bfff17 	ldw	r2,-4(fp)
   910d8:	10800017 	ldw	r2,0(r2)
   910dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   910e0:	e0bffc17 	ldw	r2,-16(fp)
   910e4:	10800090 	cmplti	r2,r2,2
   910e8:	1000061e 	bne	r2,zero,91104 <altera_avalon_jtag_uart_ioctl+0x7c>
   910ec:	e0fffc17 	ldw	r3,-16(fp)
   910f0:	00a00034 	movhi	r2,32768
   910f4:	10bfffc4 	addi	r2,r2,-1
   910f8:	18800226 	beq	r3,r2,91104 <altera_avalon_jtag_uart_ioctl+0x7c>
   910fc:	e0bffc17 	ldw	r2,-16(fp)
   91100:	00000206 	br	9110c <altera_avalon_jtag_uart_ioctl+0x84>
   91104:	00a00034 	movhi	r2,32768
   91108:	10bfff84 	addi	r2,r2,-2
   9110c:	e0fffd17 	ldw	r3,-12(fp)
   91110:	18800115 	stw	r2,4(r3)
      rc = 0;
   91114:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   91118:	00000f06 	br	91158 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9111c:	e0bffd17 	ldw	r2,-12(fp)
   91120:	10c00117 	ldw	r3,4(r2)
   91124:	00a00034 	movhi	r2,32768
   91128:	10bfffc4 	addi	r2,r2,-1
   9112c:	18800c26 	beq	r3,r2,91160 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   91130:	e0bffd17 	ldw	r2,-12(fp)
   91134:	10c00917 	ldw	r3,36(r2)
   91138:	e0bffd17 	ldw	r2,-12(fp)
   9113c:	10800117 	ldw	r2,4(r2)
   91140:	1885803a 	cmpltu	r2,r3,r2
   91144:	10c03fcc 	andi	r3,r2,255
   91148:	e0bfff17 	ldw	r2,-4(fp)
   9114c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   91150:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   91154:	00000206 	br	91160 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   91158:	0001883a 	nop
   9115c:	00000106 	br	91164 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   91160:	0001883a 	nop

  default:
    break;
  }

  return rc;
   91164:	e0bffb17 	ldw	r2,-20(fp)
}
   91168:	e037883a 	mov	sp,fp
   9116c:	df000017 	ldw	fp,0(sp)
   91170:	dec00104 	addi	sp,sp,4
   91174:	f800283a 	ret

00091178 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   91178:	defff304 	addi	sp,sp,-52
   9117c:	dfc00c15 	stw	ra,48(sp)
   91180:	df000b15 	stw	fp,44(sp)
   91184:	df000b04 	addi	fp,sp,44
   91188:	e13ffc15 	stw	r4,-16(fp)
   9118c:	e17ffd15 	stw	r5,-12(fp)
   91190:	e1bffe15 	stw	r6,-8(fp)
   91194:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   91198:	e0bffd17 	ldw	r2,-12(fp)
   9119c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   911a0:	00004706 	br	912c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   911a4:	e0bffc17 	ldw	r2,-16(fp)
   911a8:	10800a17 	ldw	r2,40(r2)
   911ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   911b0:	e0bffc17 	ldw	r2,-16(fp)
   911b4:	10800b17 	ldw	r2,44(r2)
   911b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   911bc:	e0fff717 	ldw	r3,-36(fp)
   911c0:	e0bff817 	ldw	r2,-32(fp)
   911c4:	18800536 	bltu	r3,r2,911dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   911c8:	e0fff717 	ldw	r3,-36(fp)
   911cc:	e0bff817 	ldw	r2,-32(fp)
   911d0:	1885c83a 	sub	r2,r3,r2
   911d4:	e0bff615 	stw	r2,-40(fp)
   911d8:	00000406 	br	911ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   911dc:	00c20004 	movi	r3,2048
   911e0:	e0bff817 	ldw	r2,-32(fp)
   911e4:	1885c83a 	sub	r2,r3,r2
   911e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   911ec:	e0bff617 	ldw	r2,-40(fp)
   911f0:	10001e26 	beq	r2,zero,9126c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   911f4:	e0fffe17 	ldw	r3,-8(fp)
   911f8:	e0bff617 	ldw	r2,-40(fp)
   911fc:	1880022e 	bgeu	r3,r2,91208 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   91200:	e0bffe17 	ldw	r2,-8(fp)
   91204:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   91208:	e0bffc17 	ldw	r2,-16(fp)
   9120c:	10c00e04 	addi	r3,r2,56
   91210:	e0bff817 	ldw	r2,-32(fp)
   91214:	1885883a 	add	r2,r3,r2
   91218:	e1bff617 	ldw	r6,-40(fp)
   9121c:	100b883a 	mov	r5,r2
   91220:	e13ff517 	ldw	r4,-44(fp)
   91224:	00873ac0 	call	873ac <memcpy>
      ptr   += n;
   91228:	e0fff517 	ldw	r3,-44(fp)
   9122c:	e0bff617 	ldw	r2,-40(fp)
   91230:	1885883a 	add	r2,r3,r2
   91234:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   91238:	e0fffe17 	ldw	r3,-8(fp)
   9123c:	e0bff617 	ldw	r2,-40(fp)
   91240:	1885c83a 	sub	r2,r3,r2
   91244:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91248:	e0fff817 	ldw	r3,-32(fp)
   9124c:	e0bff617 	ldw	r2,-40(fp)
   91250:	1885883a 	add	r2,r3,r2
   91254:	10c1ffcc 	andi	r3,r2,2047
   91258:	e0bffc17 	ldw	r2,-16(fp)
   9125c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   91260:	e0bffe17 	ldw	r2,-8(fp)
   91264:	00bfcf16 	blt	zero,r2,911a4 <_gp+0xfff7f5c0>
   91268:	00000106 	br	91270 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   9126c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   91270:	e0fff517 	ldw	r3,-44(fp)
   91274:	e0bffd17 	ldw	r2,-12(fp)
   91278:	1880141e 	bne	r3,r2,912cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9127c:	e0bfff17 	ldw	r2,-4(fp)
   91280:	1090000c 	andi	r2,r2,16384
   91284:	1000131e 	bne	r2,zero,912d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   91288:	0001883a 	nop
   9128c:	e0bffc17 	ldw	r2,-16(fp)
   91290:	10c00a17 	ldw	r3,40(r2)
   91294:	e0bff717 	ldw	r2,-36(fp)
   91298:	1880051e 	bne	r3,r2,912b0 <altera_avalon_jtag_uart_read+0x138>
   9129c:	e0bffc17 	ldw	r2,-16(fp)
   912a0:	10c00917 	ldw	r3,36(r2)
   912a4:	e0bffc17 	ldw	r2,-16(fp)
   912a8:	10800117 	ldw	r2,4(r2)
   912ac:	18bff736 	bltu	r3,r2,9128c <_gp+0xfff7f6a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   912b0:	e0bffc17 	ldw	r2,-16(fp)
   912b4:	10c00a17 	ldw	r3,40(r2)
   912b8:	e0bff717 	ldw	r2,-36(fp)
   912bc:	18800726 	beq	r3,r2,912dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   912c0:	e0bffe17 	ldw	r2,-8(fp)
   912c4:	00bfb716 	blt	zero,r2,911a4 <_gp+0xfff7f5c0>
   912c8:	00000506 	br	912e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   912cc:	0001883a 	nop
   912d0:	00000306 	br	912e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   912d4:	0001883a 	nop
   912d8:	00000106 	br	912e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   912dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   912e0:	e0fff517 	ldw	r3,-44(fp)
   912e4:	e0bffd17 	ldw	r2,-12(fp)
   912e8:	18801826 	beq	r3,r2,9134c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   912ec:	0005303a 	rdctl	r2,status
   912f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   912f4:	e0fffb17 	ldw	r3,-20(fp)
   912f8:	00bfff84 	movi	r2,-2
   912fc:	1884703a 	and	r2,r3,r2
   91300:	1001703a 	wrctl	status,r2
  
  return context;
   91304:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   91308:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9130c:	e0bffc17 	ldw	r2,-16(fp)
   91310:	10800817 	ldw	r2,32(r2)
   91314:	10c00054 	ori	r3,r2,1
   91318:	e0bffc17 	ldw	r2,-16(fp)
   9131c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   91320:	e0bffc17 	ldw	r2,-16(fp)
   91324:	10800017 	ldw	r2,0(r2)
   91328:	10800104 	addi	r2,r2,4
   9132c:	1007883a 	mov	r3,r2
   91330:	e0bffc17 	ldw	r2,-16(fp)
   91334:	10800817 	ldw	r2,32(r2)
   91338:	18800035 	stwio	r2,0(r3)
   9133c:	e0bffa17 	ldw	r2,-24(fp)
   91340:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91344:	e0bff917 	ldw	r2,-28(fp)
   91348:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9134c:	e0fff517 	ldw	r3,-44(fp)
   91350:	e0bffd17 	ldw	r2,-12(fp)
   91354:	18800426 	beq	r3,r2,91368 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   91358:	e0fff517 	ldw	r3,-44(fp)
   9135c:	e0bffd17 	ldw	r2,-12(fp)
   91360:	1885c83a 	sub	r2,r3,r2
   91364:	00000606 	br	91380 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   91368:	e0bfff17 	ldw	r2,-4(fp)
   9136c:	1090000c 	andi	r2,r2,16384
   91370:	10000226 	beq	r2,zero,9137c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   91374:	00bffd44 	movi	r2,-11
   91378:	00000106 	br	91380 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   9137c:	00bffec4 	movi	r2,-5
}
   91380:	e037883a 	mov	sp,fp
   91384:	dfc00117 	ldw	ra,4(sp)
   91388:	df000017 	ldw	fp,0(sp)
   9138c:	dec00204 	addi	sp,sp,8
   91390:	f800283a 	ret

00091394 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   91394:	defff304 	addi	sp,sp,-52
   91398:	dfc00c15 	stw	ra,48(sp)
   9139c:	df000b15 	stw	fp,44(sp)
   913a0:	df000b04 	addi	fp,sp,44
   913a4:	e13ffc15 	stw	r4,-16(fp)
   913a8:	e17ffd15 	stw	r5,-12(fp)
   913ac:	e1bffe15 	stw	r6,-8(fp)
   913b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   913b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   913b8:	e0bffd17 	ldw	r2,-12(fp)
   913bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   913c0:	00003706 	br	914a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   913c4:	e0bffc17 	ldw	r2,-16(fp)
   913c8:	10800c17 	ldw	r2,48(r2)
   913cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   913d0:	e0bffc17 	ldw	r2,-16(fp)
   913d4:	10800d17 	ldw	r2,52(r2)
   913d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   913dc:	e0fff917 	ldw	r3,-28(fp)
   913e0:	e0bff517 	ldw	r2,-44(fp)
   913e4:	1880062e 	bgeu	r3,r2,91400 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   913e8:	e0fff517 	ldw	r3,-44(fp)
   913ec:	e0bff917 	ldw	r2,-28(fp)
   913f0:	1885c83a 	sub	r2,r3,r2
   913f4:	10bfffc4 	addi	r2,r2,-1
   913f8:	e0bff615 	stw	r2,-40(fp)
   913fc:	00000b06 	br	9142c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   91400:	e0bff517 	ldw	r2,-44(fp)
   91404:	10000526 	beq	r2,zero,9141c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   91408:	00c20004 	movi	r3,2048
   9140c:	e0bff917 	ldw	r2,-28(fp)
   91410:	1885c83a 	sub	r2,r3,r2
   91414:	e0bff615 	stw	r2,-40(fp)
   91418:	00000406 	br	9142c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9141c:	00c1ffc4 	movi	r3,2047
   91420:	e0bff917 	ldw	r2,-28(fp)
   91424:	1885c83a 	sub	r2,r3,r2
   91428:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   9142c:	e0bff617 	ldw	r2,-40(fp)
   91430:	10001e26 	beq	r2,zero,914ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   91434:	e0fffe17 	ldw	r3,-8(fp)
   91438:	e0bff617 	ldw	r2,-40(fp)
   9143c:	1880022e 	bgeu	r3,r2,91448 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   91440:	e0bffe17 	ldw	r2,-8(fp)
   91444:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   91448:	e0bffc17 	ldw	r2,-16(fp)
   9144c:	10c20e04 	addi	r3,r2,2104
   91450:	e0bff917 	ldw	r2,-28(fp)
   91454:	1885883a 	add	r2,r3,r2
   91458:	e1bff617 	ldw	r6,-40(fp)
   9145c:	e17ffd17 	ldw	r5,-12(fp)
   91460:	1009883a 	mov	r4,r2
   91464:	00873ac0 	call	873ac <memcpy>
      ptr   += n;
   91468:	e0fffd17 	ldw	r3,-12(fp)
   9146c:	e0bff617 	ldw	r2,-40(fp)
   91470:	1885883a 	add	r2,r3,r2
   91474:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   91478:	e0fffe17 	ldw	r3,-8(fp)
   9147c:	e0bff617 	ldw	r2,-40(fp)
   91480:	1885c83a 	sub	r2,r3,r2
   91484:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91488:	e0fff917 	ldw	r3,-28(fp)
   9148c:	e0bff617 	ldw	r2,-40(fp)
   91490:	1885883a 	add	r2,r3,r2
   91494:	10c1ffcc 	andi	r3,r2,2047
   91498:	e0bffc17 	ldw	r2,-16(fp)
   9149c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   914a0:	e0bffe17 	ldw	r2,-8(fp)
   914a4:	00bfc716 	blt	zero,r2,913c4 <_gp+0xfff7f7e0>
   914a8:	00000106 	br	914b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   914ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   914b0:	0005303a 	rdctl	r2,status
   914b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   914b8:	e0fffb17 	ldw	r3,-20(fp)
   914bc:	00bfff84 	movi	r2,-2
   914c0:	1884703a 	and	r2,r3,r2
   914c4:	1001703a 	wrctl	status,r2
  
  return context;
   914c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   914cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   914d0:	e0bffc17 	ldw	r2,-16(fp)
   914d4:	10800817 	ldw	r2,32(r2)
   914d8:	10c00094 	ori	r3,r2,2
   914dc:	e0bffc17 	ldw	r2,-16(fp)
   914e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   914e4:	e0bffc17 	ldw	r2,-16(fp)
   914e8:	10800017 	ldw	r2,0(r2)
   914ec:	10800104 	addi	r2,r2,4
   914f0:	1007883a 	mov	r3,r2
   914f4:	e0bffc17 	ldw	r2,-16(fp)
   914f8:	10800817 	ldw	r2,32(r2)
   914fc:	18800035 	stwio	r2,0(r3)
   91500:	e0bffa17 	ldw	r2,-24(fp)
   91504:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91508:	e0bff817 	ldw	r2,-32(fp)
   9150c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   91510:	e0bffe17 	ldw	r2,-8(fp)
   91514:	0080100e 	bge	zero,r2,91558 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   91518:	e0bfff17 	ldw	r2,-4(fp)
   9151c:	1090000c 	andi	r2,r2,16384
   91520:	1000101e 	bne	r2,zero,91564 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   91524:	0001883a 	nop
   91528:	e0bffc17 	ldw	r2,-16(fp)
   9152c:	10c00d17 	ldw	r3,52(r2)
   91530:	e0bff517 	ldw	r2,-44(fp)
   91534:	1880051e 	bne	r3,r2,9154c <altera_avalon_jtag_uart_write+0x1b8>
   91538:	e0bffc17 	ldw	r2,-16(fp)
   9153c:	10c00917 	ldw	r3,36(r2)
   91540:	e0bffc17 	ldw	r2,-16(fp)
   91544:	10800117 	ldw	r2,4(r2)
   91548:	18bff736 	bltu	r3,r2,91528 <_gp+0xfff7f944>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   9154c:	e0bffc17 	ldw	r2,-16(fp)
   91550:	10800917 	ldw	r2,36(r2)
   91554:	1000051e 	bne	r2,zero,9156c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   91558:	e0bffe17 	ldw	r2,-8(fp)
   9155c:	00bfd016 	blt	zero,r2,914a0 <_gp+0xfff7f8bc>
   91560:	00000306 	br	91570 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   91564:	0001883a 	nop
   91568:	00000106 	br	91570 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   9156c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   91570:	e0fffd17 	ldw	r3,-12(fp)
   91574:	e0bff717 	ldw	r2,-36(fp)
   91578:	18800426 	beq	r3,r2,9158c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   9157c:	e0fffd17 	ldw	r3,-12(fp)
   91580:	e0bff717 	ldw	r2,-36(fp)
   91584:	1885c83a 	sub	r2,r3,r2
   91588:	00000606 	br	915a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   9158c:	e0bfff17 	ldw	r2,-4(fp)
   91590:	1090000c 	andi	r2,r2,16384
   91594:	10000226 	beq	r2,zero,915a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   91598:	00bffd44 	movi	r2,-11
   9159c:	00000106 	br	915a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   915a0:	00bffec4 	movi	r2,-5
}
   915a4:	e037883a 	mov	sp,fp
   915a8:	dfc00117 	ldw	ra,4(sp)
   915ac:	df000017 	ldw	fp,0(sp)
   915b0:	dec00204 	addi	sp,sp,8
   915b4:	f800283a 	ret

000915b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   915b8:	defffa04 	addi	sp,sp,-24
   915bc:	dfc00515 	stw	ra,20(sp)
   915c0:	df000415 	stw	fp,16(sp)
   915c4:	df000404 	addi	fp,sp,16
   915c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   915cc:	0007883a 	mov	r3,zero
   915d0:	e0bfff17 	ldw	r2,-4(fp)
   915d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   915d8:	e0bfff17 	ldw	r2,-4(fp)
   915dc:	10800104 	addi	r2,r2,4
   915e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   915e4:	0005303a 	rdctl	r2,status
   915e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   915ec:	e0fffd17 	ldw	r3,-12(fp)
   915f0:	00bfff84 	movi	r2,-2
   915f4:	1884703a 	and	r2,r3,r2
   915f8:	1001703a 	wrctl	status,r2
  
  return context;
   915fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   91600:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   91604:	009354c0 	call	9354c <alt_tick>
   91608:	e0bffc17 	ldw	r2,-16(fp)
   9160c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91610:	e0bffe17 	ldw	r2,-8(fp)
   91614:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   91618:	0001883a 	nop
   9161c:	e037883a 	mov	sp,fp
   91620:	dfc00117 	ldw	ra,4(sp)
   91624:	df000017 	ldw	fp,0(sp)
   91628:	dec00204 	addi	sp,sp,8
   9162c:	f800283a 	ret

00091630 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   91630:	defff804 	addi	sp,sp,-32
   91634:	dfc00715 	stw	ra,28(sp)
   91638:	df000615 	stw	fp,24(sp)
   9163c:	df000604 	addi	fp,sp,24
   91640:	e13ffc15 	stw	r4,-16(fp)
   91644:	e17ffd15 	stw	r5,-12(fp)
   91648:	e1bffe15 	stw	r6,-8(fp)
   9164c:	e1ffff15 	stw	r7,-4(fp)
   91650:	e0bfff17 	ldw	r2,-4(fp)
   91654:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   91658:	d0a02117 	ldw	r2,-32636(gp)
   9165c:	1000021e 	bne	r2,zero,91668 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   91660:	e0bffb17 	ldw	r2,-20(fp)
   91664:	d0a02115 	stw	r2,-32636(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   91668:	e0bffc17 	ldw	r2,-16(fp)
   9166c:	10800104 	addi	r2,r2,4
   91670:	00c001c4 	movi	r3,7
   91674:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   91678:	d8000015 	stw	zero,0(sp)
   9167c:	e1fffc17 	ldw	r7,-16(fp)
   91680:	01800274 	movhi	r6,9
   91684:	31856e04 	addi	r6,r6,5560
   91688:	e17ffe17 	ldw	r5,-8(fp)
   9168c:	e13ffd17 	ldw	r4,-12(fp)
   91690:	0092bc40 	call	92bc4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   91694:	0001883a 	nop
   91698:	e037883a 	mov	sp,fp
   9169c:	dfc00117 	ldw	ra,4(sp)
   916a0:	df000017 	ldw	fp,0(sp)
   916a4:	dec00204 	addi	sp,sp,8
   916a8:	f800283a 	ret

000916ac <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   916ac:	defffd04 	addi	sp,sp,-12
   916b0:	dfc00215 	stw	ra,8(sp)
   916b4:	df000115 	stw	fp,4(sp)
   916b8:	df000104 	addi	fp,sp,4
   916bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   916c0:	d1601104 	addi	r5,gp,-32700
   916c4:	e13fff17 	ldw	r4,-4(fp)
   916c8:	00928f40 	call	928f4 <alt_dev_llist_insert>
}
   916cc:	e037883a 	mov	sp,fp
   916d0:	dfc00117 	ldw	ra,4(sp)
   916d4:	df000017 	ldw	fp,0(sp)
   916d8:	dec00204 	addi	sp,sp,8
   916dc:	f800283a 	ret

000916e0 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
   916e0:	defff704 	addi	sp,sp,-36
   916e4:	dfc00815 	stw	ra,32(sp)
   916e8:	df000715 	stw	fp,28(sp)
   916ec:	df000704 	addi	fp,sp,28
   916f0:	e13ffc15 	stw	r4,-16(fp)
   916f4:	e17ffd15 	stw	r5,-12(fp)
   916f8:	e1bffe15 	stw	r6,-8(fp)
   916fc:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
   91700:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
   91704:	e0bffc17 	ldw	r2,-16(fp)
   91708:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
   9170c:	e0bffa17 	ldw	r2,-24(fp)
   91710:	10800b17 	ldw	r2,44(r2)
   91714:	e0fffd17 	ldw	r3,-12(fp)
   91718:	1880060e 	bge	r3,r2,91734 <alt_onchip_flash_read+0x54>
   9171c:	e0fffd17 	ldw	r3,-12(fp)
   91720:	e0bfff17 	ldw	r2,-4(fp)
   91724:	1885883a 	add	r2,r3,r2
   91728:	e0fffa17 	ldw	r3,-24(fp)
   9172c:	18c00b17 	ldw	r3,44(r3)
   91730:	1880020e 	bge	r3,r2,9173c <alt_onchip_flash_read+0x5c>
        return -EFAULT;
   91734:	00bffc84 	movi	r2,-14
   91738:	00001706 	br	91798 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
   9173c:	e0bffa17 	ldw	r2,-24(fp)
   91740:	10c00a17 	ldw	r3,40(r2)
   91744:	e0bffd17 	ldw	r2,-12(fp)
   91748:	1885883a 	add	r2,r3,r2
   9174c:	e0ffff17 	ldw	r3,-4(fp)
   91750:	180d883a 	mov	r6,r3
   91754:	100b883a 	mov	r5,r2
   91758:	e13ffe17 	ldw	r4,-8(fp)
   9175c:	00873ac0 	call	873ac <memcpy>

    if (NULL != flash->csr_base) {
   91760:	e0bffa17 	ldw	r2,-24(fp)
   91764:	10802f17 	ldw	r2,188(r2)
   91768:	10000a26 	beq	r2,zero,91794 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
   9176c:	e0bffa17 	ldw	r2,-24(fp)
   91770:	10802f17 	ldw	r2,188(r2)
   91774:	10800037 	ldwio	r2,0(r2)
   91778:	1080010c 	andi	r2,r2,4
   9177c:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
   91780:	e0bffb17 	ldw	r2,-20(fp)
   91784:	10800120 	cmpeqi	r2,r2,4
   91788:	1000021e 	bne	r2,zero,91794 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
   9178c:	00bffec4 	movi	r2,-5
   91790:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
   91794:	e0bff917 	ldw	r2,-28(fp)
}
   91798:	e037883a 	mov	sp,fp
   9179c:	dfc00117 	ldw	ra,4(sp)
   917a0:	df000017 	ldw	fp,0(sp)
   917a4:	dec00204 	addi	sp,sp,8
   917a8:	f800283a 	ret

000917ac <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
   917ac:	defffa04 	addi	sp,sp,-24
   917b0:	df000515 	stw	fp,20(sp)
   917b4:	df000504 	addi	fp,sp,20
   917b8:	e13ffd15 	stw	r4,-12(fp)
   917bc:	e17ffe15 	stw	r5,-8(fp)
   917c0:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
   917c4:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
   917c8:	e0bffd17 	ldw	r2,-12(fp)
   917cc:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
   917d0:	e0bfff17 	ldw	r2,-4(fp)
   917d4:	10000426 	beq	r2,zero,917e8 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
   917d8:	e0bffc17 	ldw	r2,-16(fp)
   917dc:	10c00c17 	ldw	r3,48(r2)
   917e0:	e0bfff17 	ldw	r2,-4(fp)
   917e4:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
   917e8:	e0bffc17 	ldw	r2,-16(fp)
   917ec:	10800c17 	ldw	r2,48(r2)
   917f0:	1000031e 	bne	r2,zero,91800 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
   917f4:	00bffd04 	movi	r2,-12
   917f8:	e0bffb15 	stw	r2,-20(fp)
   917fc:	00000d06 	br	91834 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   91800:	e0bffc17 	ldw	r2,-16(fp)
   91804:	10800c17 	ldw	r2,48(r2)
   91808:	10800250 	cmplti	r2,r2,9
   9180c:	1000031e 	bne	r2,zero,9181c <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
   91810:	00bffc84 	movi	r2,-14
   91814:	e0bffb15 	stw	r2,-20(fp)
   91818:	00000606 	br	91834 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
   9181c:	e0bffe17 	ldw	r2,-8(fp)
   91820:	10000426 	beq	r2,zero,91834 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
   91824:	e0bffc17 	ldw	r2,-16(fp)
   91828:	10c00d04 	addi	r3,r2,52
   9182c:	e0bffe17 	ldw	r2,-8(fp)
   91830:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
   91834:	e0bffb17 	ldw	r2,-20(fp)
}
   91838:	e037883a 	mov	sp,fp
   9183c:	df000017 	ldw	fp,0(sp)
   91840:	dec00104 	addi	sp,sp,4
   91844:	f800283a 	ret

00091848 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
   91848:	defff904 	addi	sp,sp,-28
   9184c:	dfc00615 	stw	ra,24(sp)
   91850:	df000515 	stw	fp,20(sp)
   91854:	df000504 	addi	fp,sp,20
   91858:	e13ffe15 	stw	r4,-8(fp)
   9185c:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
   91860:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
   91864:	e0bffe17 	ldw	r2,-8(fp)
   91868:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
   9186c:	e0bffc17 	ldw	r2,-16(fp)
   91870:	10800b17 	ldw	r2,44(r2)
   91874:	e0ffff17 	ldw	r3,-4(fp)
   91878:	18800216 	blt	r3,r2,91884 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
   9187c:	00bffc84 	movi	r2,-14
   91880:	00004606 	br	9199c <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
   91884:	e0bffc17 	ldw	r2,-16(fp)
   91888:	10802f17 	ldw	r2,188(r2)
   9188c:	10000326 	beq	r2,zero,9189c <alt_onchip_flash_erase_block+0x54>
   91890:	e0bffc17 	ldw	r2,-16(fp)
   91894:	10802e17 	ldw	r2,184(r2)
   91898:	10000226 	beq	r2,zero,918a4 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
   9189c:	00bffb44 	movi	r2,-19
   918a0:	00003e06 	br	9199c <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
   918a4:	e0bffc17 	ldw	r2,-16(fp)
   918a8:	10803f17 	ldw	r2,252(r2)
   918ac:	10ffffc4 	addi	r3,r2,-1
   918b0:	e0bfff17 	ldw	r2,-4(fp)
   918b4:	1884703a 	and	r2,r3,r2
   918b8:	10000226 	beq	r2,zero,918c4 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
   918bc:	00bffa84 	movi	r2,-22
   918c0:	00003606 	br	9199c <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   918c4:	e13ffc17 	ldw	r4,-16(fp)
   918c8:	009243c0 	call	9243c <alt_onchip_flash_poll_for_status_to_go_idle>
   918cc:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
   918d0:	e0bffb17 	ldw	r2,-20(fp)
   918d4:	10000226 	beq	r2,zero,918e0 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
   918d8:	e0bffb17 	ldw	r2,-20(fp)
   918dc:	00002f06 	br	9199c <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   918e0:	e0bffc17 	ldw	r2,-16(fp)
   918e4:	10802f17 	ldw	r2,188(r2)
   918e8:	10c00104 	addi	r3,r2,4
   918ec:	e0bffc17 	ldw	r2,-16(fp)
   918f0:	10802f17 	ldw	r2,188(r2)
   918f4:	10800104 	addi	r2,r2,4
   918f8:	10800037 	ldwio	r2,0(r2)
   918fc:	113c002c 	andhi	r4,r2,61440
   91900:	00802034 	movhi	r2,128
   91904:	10bfffc4 	addi	r2,r2,-1
   91908:	2084b03a 	or	r2,r4,r2
   9190c:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
   91910:	e0bfff17 	ldw	r2,-4(fp)
   91914:	1000010e 	bge	r2,zero,9191c <alt_onchip_flash_erase_block+0xd4>
   91918:	108000c4 	addi	r2,r2,3
   9191c:	1005d0ba 	srai	r2,r2,2
   91920:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
   91924:	e0bffc17 	ldw	r2,-16(fp)
   91928:	10802f17 	ldw	r2,188(r2)
   9192c:	10800104 	addi	r2,r2,4
   91930:	e0fffc17 	ldw	r3,-16(fp)
   91934:	18c02f17 	ldw	r3,188(r3)
   91938:	18c00104 	addi	r3,r3,4
   9193c:	18c00037 	ldwio	r3,0(r3)
   91940:	193c002c 	andhi	r4,r3,61440
   91944:	e0fffd17 	ldw	r3,-12(fp)
   91948:	18c01c34 	orhi	r3,r3,112
   9194c:	20c6b03a 	or	r3,r4,r3
   91950:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   91954:	e13ffc17 	ldw	r4,-16(fp)
   91958:	009243c0 	call	9243c <alt_onchip_flash_poll_for_status_to_go_idle>
   9195c:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
   91960:	e13ffc17 	ldw	r4,-16(fp)
   91964:	00924cc0 	call	924cc <alt_onchip_flash_poll_for_status_erase_passed>
   91968:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   9196c:	e0bffc17 	ldw	r2,-16(fp)
   91970:	10802f17 	ldw	r2,188(r2)
   91974:	10c00104 	addi	r3,r2,4
   91978:	e0bffc17 	ldw	r2,-16(fp)
   9197c:	10802f17 	ldw	r2,188(r2)
   91980:	10800104 	addi	r2,r2,4
   91984:	11000037 	ldwio	r4,0(r2)
   91988:	00840034 	movhi	r2,4096
   9198c:	10bfffc4 	addi	r2,r2,-1
   91990:	2084b03a 	or	r2,r4,r2
   91994:	18800035 	stwio	r2,0(r3)

    return ret_code;
   91998:	e0bffb17 	ldw	r2,-20(fp)
}
   9199c:	e037883a 	mov	sp,fp
   919a0:	dfc00117 	ldw	ra,4(sp)
   919a4:	df000017 	ldw	fp,0(sp)
   919a8:	dec00204 	addi	sp,sp,8
   919ac:	f800283a 	ret

000919b0 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
   919b0:	defff204 	addi	sp,sp,-56
   919b4:	dfc00d15 	stw	ra,52(sp)
   919b8:	df000c15 	stw	fp,48(sp)
   919bc:	df000c04 	addi	fp,sp,48
   919c0:	e13ffc15 	stw	r4,-16(fp)
   919c4:	e17ffd15 	stw	r5,-12(fp)
   919c8:	e1bffe15 	stw	r6,-8(fp)
   919cc:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
   919d0:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
   919d4:	e0bffc17 	ldw	r2,-16(fp)
   919d8:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
   919dc:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
   919e0:	e0bffe17 	ldw	r2,-8(fp)
   919e4:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
   919e8:	e0bff817 	ldw	r2,-32(fp)
   919ec:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
   919f0:	e0fffd17 	ldw	r3,-12(fp)
   919f4:	18800a0e 	bge	r3,r2,91a20 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
   919f8:	e0bff817 	ldw	r2,-32(fp)
   919fc:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
   91a00:	e0fffe17 	ldw	r3,-8(fp)
   91a04:	1880060e 	bge	r3,r2,91a20 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
   91a08:	e0bff817 	ldw	r2,-32(fp)
   91a0c:	10c00b17 	ldw	r3,44(r2)
   91a10:	e0bffe17 	ldw	r2,-8(fp)
   91a14:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
   91a18:	e0800217 	ldw	r2,8(fp)
   91a1c:	1880020e 	bge	r3,r2,91a28 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
   91a20:	00bffc84 	movi	r2,-14
   91a24:	00009306 	br	91c74 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
   91a28:	e0bff817 	ldw	r2,-32(fp)
   91a2c:	10802f17 	ldw	r2,188(r2)
   91a30:	10000326 	beq	r2,zero,91a40 <alt_onchip_flash_write_block+0x90>
   91a34:	e0bff817 	ldw	r2,-32(fp)
   91a38:	10802e17 	ldw	r2,184(r2)
   91a3c:	10000226 	beq	r2,zero,91a48 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
   91a40:	00bffb44 	movi	r2,-19
   91a44:	00008b06 	br	91c74 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   91a48:	e13ff817 	ldw	r4,-32(fp)
   91a4c:	009243c0 	call	9243c <alt_onchip_flash_poll_for_status_to_go_idle>
   91a50:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
   91a54:	e0bff417 	ldw	r2,-48(fp)
   91a58:	10000226 	beq	r2,zero,91a64 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
   91a5c:	e0bff417 	ldw	r2,-48(fp)
   91a60:	00008406 	br	91c74 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   91a64:	e0bff817 	ldw	r2,-32(fp)
   91a68:	10802f17 	ldw	r2,188(r2)
   91a6c:	10c00104 	addi	r3,r2,4
   91a70:	e0bff817 	ldw	r2,-32(fp)
   91a74:	10802f17 	ldw	r2,188(r2)
   91a78:	10800104 	addi	r2,r2,4
   91a7c:	10800037 	ldwio	r2,0(r2)
   91a80:	113c002c 	andhi	r4,r2,61440
   91a84:	00802034 	movhi	r2,128
   91a88:	10bfffc4 	addi	r2,r2,-1
   91a8c:	2084b03a 	or	r2,r4,r2
   91a90:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
   91a94:	00006506 	br	91c2c <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
   91a98:	00bfffc4 	movi	r2,-1
   91a9c:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
   91aa0:	e0bff617 	ldw	r2,-40(fp)
   91aa4:	108000cc 	andi	r2,r2,3
   91aa8:	10001e1e 	bne	r2,zero,91b24 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   91aac:	e0bff617 	ldw	r2,-40(fp)
   91ab0:	10c00104 	addi	r3,r2,4
   91ab4:	00bfff04 	movi	r2,-4
   91ab8:	1884703a 	and	r2,r3,r2
   91abc:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
   91ac0:	e0fff717 	ldw	r3,-36(fp)
   91ac4:	e0bff617 	ldw	r2,-40(fp)
   91ac8:	1885c83a 	sub	r2,r3,r2
   91acc:	e0c00217 	ldw	r3,8(fp)
   91ad0:	1880010e 	bge	r3,r2,91ad8 <alt_onchip_flash_write_block+0x128>
   91ad4:	1805883a 	mov	r2,r3
   91ad8:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
   91adc:	e0bff517 	ldw	r2,-44(fp)
   91ae0:	e0ffff17 	ldw	r3,-4(fp)
   91ae4:	1887883a 	add	r3,r3,r2
   91ae8:	e13ff917 	ldw	r4,-28(fp)
   91aec:	e0bffb04 	addi	r2,fp,-20
   91af0:	200d883a 	mov	r6,r4
   91af4:	180b883a 	mov	r5,r3
   91af8:	1009883a 	mov	r4,r2
   91afc:	00873ac0 	call	873ac <memcpy>
            buffer_offset += length_of_current_write;
   91b00:	e0fff517 	ldw	r3,-44(fp)
   91b04:	e0bff917 	ldw	r2,-28(fp)
   91b08:	1885883a 	add	r2,r3,r2
   91b0c:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
   91b10:	e0c00217 	ldw	r3,8(fp)
   91b14:	e0bff917 	ldw	r2,-28(fp)
   91b18:	1885c83a 	sub	r2,r3,r2
   91b1c:	e0800215 	stw	r2,8(fp)
   91b20:	00003006 	br	91be4 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   91b24:	e0bff617 	ldw	r2,-40(fp)
   91b28:	108000cc 	andi	r2,r2,3
   91b2c:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
   91b30:	e0fff617 	ldw	r3,-40(fp)
   91b34:	e0bffa17 	ldw	r2,-24(fp)
   91b38:	1885c83a 	sub	r2,r3,r2
   91b3c:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
   91b40:	e0bff617 	ldw	r2,-40(fp)
   91b44:	10c00104 	addi	r3,r2,4
   91b48:	00bfff04 	movi	r2,-4
   91b4c:	1884703a 	and	r2,r3,r2
   91b50:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
   91b54:	e0fff717 	ldw	r3,-36(fp)
   91b58:	e0bff617 	ldw	r2,-40(fp)
   91b5c:	1889c83a 	sub	r4,r3,r2
   91b60:	e0c00217 	ldw	r3,8(fp)
   91b64:	e0bffa17 	ldw	r2,-24(fp)
   91b68:	1887883a 	add	r3,r3,r2
   91b6c:	2005883a 	mov	r2,r4
   91b70:	1880010e 	bge	r3,r2,91b78 <alt_onchip_flash_write_block+0x1c8>
   91b74:	1805883a 	mov	r2,r3
   91b78:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
   91b7c:	e0fffb04 	addi	r3,fp,-20
   91b80:	e0bffa17 	ldw	r2,-24(fp)
   91b84:	1885883a 	add	r2,r3,r2
   91b88:	100f883a 	mov	r7,r2
   91b8c:	e0bff517 	ldw	r2,-44(fp)
   91b90:	e0ffff17 	ldw	r3,-4(fp)
   91b94:	1889883a 	add	r4,r3,r2
   91b98:	e0fff917 	ldw	r3,-28(fp)
   91b9c:	e0bffa17 	ldw	r2,-24(fp)
   91ba0:	1885c83a 	sub	r2,r3,r2
   91ba4:	100d883a 	mov	r6,r2
   91ba8:	200b883a 	mov	r5,r4
   91bac:	3809883a 	mov	r4,r7
   91bb0:	00873ac0 	call	873ac <memcpy>
            buffer_offset += length_of_current_write - padding;
   91bb4:	e0fff917 	ldw	r3,-28(fp)
   91bb8:	e0bffa17 	ldw	r2,-24(fp)
   91bbc:	1885c83a 	sub	r2,r3,r2
   91bc0:	e0fff517 	ldw	r3,-44(fp)
   91bc4:	1885883a 	add	r2,r3,r2
   91bc8:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
   91bcc:	e0fff917 	ldw	r3,-28(fp)
   91bd0:	e0bffa17 	ldw	r2,-24(fp)
   91bd4:	1885c83a 	sub	r2,r3,r2
   91bd8:	e0c00217 	ldw	r3,8(fp)
   91bdc:	1885c83a 	sub	r2,r3,r2
   91be0:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
   91be4:	e0bff817 	ldw	r2,-32(fp)
   91be8:	10c00a17 	ldw	r3,40(r2)
   91bec:	e0bff617 	ldw	r2,-40(fp)
   91bf0:	1885883a 	add	r2,r3,r2
   91bf4:	e0fffb17 	ldw	r3,-20(fp)
   91bf8:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
   91bfc:	e13ff817 	ldw	r4,-32(fp)
   91c00:	009243c0 	call	9243c <alt_onchip_flash_poll_for_status_to_go_idle>
   91c04:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
   91c08:	e0bff417 	ldw	r2,-48(fp)
   91c0c:	10000a1e 	bne	r2,zero,91c38 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
   91c10:	e13ff817 	ldw	r4,-32(fp)
   91c14:	009255c0 	call	9255c <alt_onchip_flash_poll_for_status_write_passed>
   91c18:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
   91c1c:	e0bff417 	ldw	r2,-48(fp)
   91c20:	1000071e 	bne	r2,zero,91c40 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
   91c24:	e0bff717 	ldw	r2,-36(fp)
   91c28:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
   91c2c:	e0800217 	ldw	r2,8(fp)
   91c30:	103f991e 	bne	r2,zero,91a98 <_gp+0xfff7feb4>
   91c34:	00000306 	br	91c44 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
   91c38:	0001883a 	nop
   91c3c:	00000106 	br	91c44 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
   91c40:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
   91c44:	e0bff817 	ldw	r2,-32(fp)
   91c48:	10802f17 	ldw	r2,188(r2)
   91c4c:	10c00104 	addi	r3,r2,4
   91c50:	e0bff817 	ldw	r2,-32(fp)
   91c54:	10802f17 	ldw	r2,188(r2)
   91c58:	10800104 	addi	r2,r2,4
   91c5c:	11000037 	ldwio	r4,0(r2)
   91c60:	00840034 	movhi	r2,4096
   91c64:	10bfffc4 	addi	r2,r2,-1
   91c68:	2084b03a 	or	r2,r4,r2
   91c6c:	18800035 	stwio	r2,0(r3)

    return ret_code;
   91c70:	e0bff417 	ldw	r2,-48(fp)
}
   91c74:	e037883a 	mov	sp,fp
   91c78:	dfc00117 	ldw	ra,4(sp)
   91c7c:	df000017 	ldw	fp,0(sp)
   91c80:	dec00204 	addi	sp,sp,8
   91c84:	f800283a 	ret

00091c88 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
   91c88:	defff104 	addi	sp,sp,-60
   91c8c:	dfc00e15 	stw	ra,56(sp)
   91c90:	df000d15 	stw	fp,52(sp)
   91c94:	df000d04 	addi	fp,sp,52
   91c98:	e13ffc15 	stw	r4,-16(fp)
   91c9c:	e17ffd15 	stw	r5,-12(fp)
   91ca0:	e1bffe15 	stw	r6,-8(fp)
   91ca4:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
   91ca8:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
   91cac:	e0bfff17 	ldw	r2,-4(fp)
   91cb0:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
   91cb4:	e0bffd17 	ldw	r2,-12(fp)
   91cb8:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
   91cbc:	e0bffc17 	ldw	r2,-16(fp)
   91cc0:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
   91cc4:	e0bffa17 	ldw	r2,-24(fp)
   91cc8:	10800b17 	ldw	r2,44(r2)
   91ccc:	e0fffd17 	ldw	r3,-12(fp)
   91cd0:	1880060e 	bge	r3,r2,91cec <alt_onchip_flash_write+0x64>
   91cd4:	e0bffa17 	ldw	r2,-24(fp)
   91cd8:	10c00b17 	ldw	r3,44(r2)
   91cdc:	e0bffd17 	ldw	r2,-12(fp)
   91ce0:	1887c83a 	sub	r3,r3,r2
   91ce4:	e0bfff17 	ldw	r2,-4(fp)
   91ce8:	1880020e 	bge	r3,r2,91cf4 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
   91cec:	00bffc84 	movi	r2,-14
   91cf0:	00009606 	br	91f4c <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
   91cf4:	e03ff515 	stw	zero,-44(fp)
   91cf8:	00008706 	br	91f18 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
   91cfc:	e0fffa17 	ldw	r3,-24(fp)
   91d00:	e0bff517 	ldw	r2,-44(fp)
   91d04:	1004913a 	slli	r2,r2,4
   91d08:	1885883a 	add	r2,r3,r2
   91d0c:	10800d04 	addi	r2,r2,52
   91d10:	10800017 	ldw	r2,0(r2)
   91d14:	e0fffd17 	ldw	r3,-12(fp)
   91d18:	18807c16 	blt	r3,r2,91f0c <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
   91d1c:	e0fffa17 	ldw	r3,-24(fp)
   91d20:	e0bff517 	ldw	r2,-44(fp)
   91d24:	1004913a 	slli	r2,r2,4
   91d28:	1885883a 	add	r2,r3,r2
   91d2c:	10800d04 	addi	r2,r2,52
   91d30:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
   91d34:	e13ffa17 	ldw	r4,-24(fp)
   91d38:	e0bff517 	ldw	r2,-44(fp)
   91d3c:	1004913a 	slli	r2,r2,4
   91d40:	2085883a 	add	r2,r4,r2
   91d44:	10800e04 	addi	r2,r2,56
   91d48:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
   91d4c:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
   91d50:	e0fffd17 	ldw	r3,-12(fp)
   91d54:	18806d0e 	bge	r3,r2,91f0c <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
   91d58:	e0fffa17 	ldw	r3,-24(fp)
   91d5c:	e0bff517 	ldw	r2,-44(fp)
   91d60:	1004913a 	slli	r2,r2,4
   91d64:	1885883a 	add	r2,r3,r2
   91d68:	10800d04 	addi	r2,r2,52
   91d6c:	10800017 	ldw	r2,0(r2)
   91d70:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
   91d74:	e03ff615 	stw	zero,-40(fp)
   91d78:	00005c06 	br	91eec <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
   91d7c:	e0fffd17 	ldw	r3,-12(fp)
   91d80:	e0bff717 	ldw	r2,-36(fp)
   91d84:	18804d16 	blt	r3,r2,91ebc <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
   91d88:	e0fffa17 	ldw	r3,-24(fp)
   91d8c:	e0bff517 	ldw	r2,-44(fp)
   91d90:	10800104 	addi	r2,r2,4
   91d94:	1004913a 	slli	r2,r2,4
   91d98:	1885883a 	add	r2,r3,r2
   91d9c:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
   91da0:	e0bff717 	ldw	r2,-36(fp)
   91da4:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
   91da8:	e0fffd17 	ldw	r3,-12(fp)
   91dac:	1880430e 	bge	r3,r2,91ebc <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
   91db0:	e0fffa17 	ldw	r3,-24(fp)
   91db4:	e0bff517 	ldw	r2,-44(fp)
   91db8:	10800104 	addi	r2,r2,4
   91dbc:	1004913a 	slli	r2,r2,4
   91dc0:	1885883a 	add	r2,r3,r2
   91dc4:	10c00017 	ldw	r3,0(r2)
   91dc8:	e0bff717 	ldw	r2,-36(fp)
   91dcc:	1887883a 	add	r3,r3,r2
   91dd0:	e0bffd17 	ldw	r2,-12(fp)
   91dd4:	1885c83a 	sub	r2,r3,r2
   91dd8:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
   91ddc:	e0fffb17 	ldw	r3,-20(fp)
   91de0:	e0bfff17 	ldw	r2,-4(fp)
   91de4:	1880010e 	bge	r3,r2,91dec <alt_onchip_flash_write+0x164>
   91de8:	1805883a 	mov	r2,r3
   91dec:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
   91df0:	e0bffa17 	ldw	r2,-24(fp)
   91df4:	10c00a17 	ldw	r3,40(r2)
   91df8:	e0bffd17 	ldw	r2,-12(fp)
   91dfc:	1885883a 	add	r2,r3,r2
   91e00:	e0fffb17 	ldw	r3,-20(fp)
   91e04:	180d883a 	mov	r6,r3
   91e08:	100b883a 	mov	r5,r2
   91e0c:	e13ffe17 	ldw	r4,-8(fp)
   91e10:	009392c0 	call	9392c <memcmp>
   91e14:	10001326 	beq	r2,zero,91e64 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
   91e18:	e0bffa17 	ldw	r2,-24(fp)
   91e1c:	10800817 	ldw	r2,32(r2)
   91e20:	e0fffa17 	ldw	r3,-24(fp)
   91e24:	e17ff717 	ldw	r5,-36(fp)
   91e28:	1809883a 	mov	r4,r3
   91e2c:	103ee83a 	callr	r2
   91e30:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
   91e34:	e0bff417 	ldw	r2,-48(fp)
   91e38:	10000a1e 	bne	r2,zero,91e64 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
   91e3c:	e0bffa17 	ldw	r2,-24(fp)
   91e40:	10800917 	ldw	r2,36(r2)
   91e44:	e13ffa17 	ldw	r4,-24(fp)
   91e48:	e0fffb17 	ldw	r3,-20(fp)
   91e4c:	d8c00015 	stw	r3,0(sp)
   91e50:	e1fffe17 	ldw	r7,-8(fp)
   91e54:	e1bffd17 	ldw	r6,-12(fp)
   91e58:	e17ff717 	ldw	r5,-36(fp)
   91e5c:	103ee83a 	callr	r2
   91e60:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
   91e64:	e0ffff17 	ldw	r3,-4(fp)
   91e68:	e0bffb17 	ldw	r2,-20(fp)
   91e6c:	18802e26 	beq	r3,r2,91f28 <alt_onchip_flash_write+0x2a0>
   91e70:	e0bff417 	ldw	r2,-48(fp)
   91e74:	10002c1e 	bne	r2,zero,91f28 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
   91e78:	e0ffff17 	ldw	r3,-4(fp)
   91e7c:	e0bffb17 	ldw	r2,-20(fp)
   91e80:	1885c83a 	sub	r2,r3,r2
   91e84:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
   91e88:	e0fffa17 	ldw	r3,-24(fp)
   91e8c:	e0bff517 	ldw	r2,-44(fp)
   91e90:	10800104 	addi	r2,r2,4
   91e94:	1004913a 	slli	r2,r2,4
   91e98:	1885883a 	add	r2,r3,r2
   91e9c:	10c00017 	ldw	r3,0(r2)
   91ea0:	e0bff717 	ldw	r2,-36(fp)
   91ea4:	1885883a 	add	r2,r3,r2
   91ea8:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
   91eac:	e0bffb17 	ldw	r2,-20(fp)
   91eb0:	e0fffe17 	ldw	r3,-8(fp)
   91eb4:	1885883a 	add	r2,r3,r2
   91eb8:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
   91ebc:	e0fffa17 	ldw	r3,-24(fp)
   91ec0:	e0bff517 	ldw	r2,-44(fp)
   91ec4:	10800104 	addi	r2,r2,4
   91ec8:	1004913a 	slli	r2,r2,4
   91ecc:	1885883a 	add	r2,r3,r2
   91ed0:	10800017 	ldw	r2,0(r2)
   91ed4:	e0fff717 	ldw	r3,-36(fp)
   91ed8:	1885883a 	add	r2,r3,r2
   91edc:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
   91ee0:	e0bff617 	ldw	r2,-40(fp)
   91ee4:	10800044 	addi	r2,r2,1
   91ee8:	e0bff615 	stw	r2,-40(fp)
   91eec:	e0fffa17 	ldw	r3,-24(fp)
   91ef0:	e0bff517 	ldw	r2,-44(fp)
   91ef4:	1004913a 	slli	r2,r2,4
   91ef8:	1885883a 	add	r2,r3,r2
   91efc:	10800f04 	addi	r2,r2,60
   91f00:	10800017 	ldw	r2,0(r2)
   91f04:	e0fff617 	ldw	r3,-40(fp)
   91f08:	18bf9c16 	blt	r3,r2,91d7c <_gp+0xfff80198>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
   91f0c:	e0bff517 	ldw	r2,-44(fp)
   91f10:	10800044 	addi	r2,r2,1
   91f14:	e0bff515 	stw	r2,-44(fp)
   91f18:	e0bffa17 	ldw	r2,-24(fp)
   91f1c:	10800c17 	ldw	r2,48(r2)
   91f20:	e0fff517 	ldw	r3,-44(fp)
   91f24:	18bf7516 	blt	r3,r2,91cfc <_gp+0xfff80118>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
   91f28:	e0bffa17 	ldw	r2,-24(fp)
   91f2c:	10c00a17 	ldw	r3,40(r2)
   91f30:	e0bff917 	ldw	r2,-28(fp)
   91f34:	1885883a 	add	r2,r3,r2
   91f38:	e0fff817 	ldw	r3,-32(fp)
   91f3c:	180b883a 	mov	r5,r3
   91f40:	1009883a 	mov	r4,r2
   91f44:	00928700 	call	92870 <alt_dcache_flush>
    return ret_code;
   91f48:	e0bff417 	ldw	r2,-48(fp)
}
   91f4c:	e037883a 	mov	sp,fp
   91f50:	dfc00117 	ldw	ra,4(sp)
   91f54:	df000017 	ldw	fp,0(sp)
   91f58:	dec00204 	addi	sp,sp,8
   91f5c:	f800283a 	ret

00091f60 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
   91f60:	defff504 	addi	sp,sp,-44
   91f64:	dfc00a15 	stw	ra,40(sp)
   91f68:	df000915 	stw	fp,36(sp)
   91f6c:	dc000815 	stw	r16,32(sp)
   91f70:	df000904 	addi	fp,sp,36
   91f74:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
   91f78:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
   91f7c:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
   91f80:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
   91f84:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
   91f88:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
   91f8c:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
   91f90:	e0bffe17 	ldw	r2,-8(fp)
   91f94:	10800d04 	addi	r2,r2,52
   91f98:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
   91f9c:	e0bffe17 	ldw	r2,-8(fp)
   91fa0:	10802f17 	ldw	r2,188(r2)
   91fa4:	10001926 	beq	r2,zero,9200c <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
   91fa8:	e0bffe17 	ldw	r2,-8(fp)
   91fac:	10802f17 	ldw	r2,188(r2)
   91fb0:	10800037 	ldwio	r2,0(r2)
   91fb4:	1080080c 	andi	r2,r2,32
   91fb8:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
   91fbc:	e0bffe17 	ldw	r2,-8(fp)
   91fc0:	10802f17 	ldw	r2,188(r2)
   91fc4:	10800037 	ldwio	r2,0(r2)
   91fc8:	1080100c 	andi	r2,r2,64
   91fcc:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
   91fd0:	e0bffe17 	ldw	r2,-8(fp)
   91fd4:	10802f17 	ldw	r2,188(r2)
   91fd8:	10800037 	ldwio	r2,0(r2)
   91fdc:	1080200c 	andi	r2,r2,128
   91fe0:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
   91fe4:	e0bffe17 	ldw	r2,-8(fp)
   91fe8:	10802f17 	ldw	r2,188(r2)
   91fec:	10800037 	ldwio	r2,0(r2)
   91ff0:	1080400c 	andi	r2,r2,256
   91ff4:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
   91ff8:	e0bffe17 	ldw	r2,-8(fp)
   91ffc:	10802f17 	ldw	r2,188(r2)
   92000:	10800037 	ldwio	r2,0(r2)
   92004:	1080800c 	andi	r2,r2,512
   92008:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
   9200c:	e0bffe17 	ldw	r2,-8(fp)
   92010:	10803017 	ldw	r2,192(r2)
   92014:	10800058 	cmpnei	r2,r2,1
   92018:	10002f1e 	bne	r2,zero,920d8 <altera_onchip_flash_init+0x178>
   9201c:	e0bff817 	ldw	r2,-32(fp)
   92020:	10800820 	cmpeqi	r2,r2,32
   92024:	10002c1e 	bne	r2,zero,920d8 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
   92028:	e0bff717 	ldw	r2,-36(fp)
   9202c:	1004913a 	slli	r2,r2,4
   92030:	e0fffd17 	ldw	r3,-12(fp)
   92034:	1885883a 	add	r2,r3,r2
   92038:	e0fffe17 	ldw	r3,-8(fp)
   9203c:	18c03117 	ldw	r3,196(r3)
   92040:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
   92044:	e0bff717 	ldw	r2,-36(fp)
   92048:	1004913a 	slli	r2,r2,4
   9204c:	e0fffd17 	ldw	r3,-12(fp)
   92050:	1885883a 	add	r2,r3,r2
   92054:	e0fffe17 	ldw	r3,-8(fp)
   92058:	19003217 	ldw	r4,200(r3)
   9205c:	e0fffe17 	ldw	r3,-8(fp)
   92060:	18c03117 	ldw	r3,196(r3)
   92064:	20c7c83a 	sub	r3,r4,r3
   92068:	18c00044 	addi	r3,r3,1
   9206c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   92070:	e0bff717 	ldw	r2,-36(fp)
   92074:	1004913a 	slli	r2,r2,4
   92078:	e0fffd17 	ldw	r3,-12(fp)
   9207c:	18a1883a 	add	r16,r3,r2
   92080:	e0fffe17 	ldw	r3,-8(fp)
   92084:	e0bff717 	ldw	r2,-36(fp)
   92088:	1004913a 	slli	r2,r2,4
   9208c:	1885883a 	add	r2,r3,r2
   92090:	10800e04 	addi	r2,r2,56
   92094:	10c00017 	ldw	r3,0(r2)
   92098:	e0bffe17 	ldw	r2,-8(fp)
   9209c:	10803f17 	ldw	r2,252(r2)
   920a0:	100b883a 	mov	r5,r2
   920a4:	1809883a 	mov	r4,r3
   920a8:	0080a480 	call	80a48 <__divsi3>
   920ac:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   920b0:	e0bff717 	ldw	r2,-36(fp)
   920b4:	1004913a 	slli	r2,r2,4
   920b8:	e0fffd17 	ldw	r3,-12(fp)
   920bc:	1885883a 	add	r2,r3,r2
   920c0:	e0fffe17 	ldw	r3,-8(fp)
   920c4:	18c03f17 	ldw	r3,252(r3)
   920c8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   920cc:	e0bff717 	ldw	r2,-36(fp)
   920d0:	10800044 	addi	r2,r2,1
   920d4:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
   920d8:	e0bffe17 	ldw	r2,-8(fp)
   920dc:	10803317 	ldw	r2,204(r2)
   920e0:	10800058 	cmpnei	r2,r2,1
   920e4:	10002f1e 	bne	r2,zero,921a4 <altera_onchip_flash_init+0x244>
   920e8:	e0bff917 	ldw	r2,-28(fp)
   920ec:	10801020 	cmpeqi	r2,r2,64
   920f0:	10002c1e 	bne	r2,zero,921a4 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
   920f4:	e0bff717 	ldw	r2,-36(fp)
   920f8:	1004913a 	slli	r2,r2,4
   920fc:	e0fffd17 	ldw	r3,-12(fp)
   92100:	1885883a 	add	r2,r3,r2
   92104:	e0fffe17 	ldw	r3,-8(fp)
   92108:	18c03417 	ldw	r3,208(r3)
   9210c:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
   92110:	e0bff717 	ldw	r2,-36(fp)
   92114:	1004913a 	slli	r2,r2,4
   92118:	e0fffd17 	ldw	r3,-12(fp)
   9211c:	1885883a 	add	r2,r3,r2
   92120:	e0fffe17 	ldw	r3,-8(fp)
   92124:	19003517 	ldw	r4,212(r3)
   92128:	e0fffe17 	ldw	r3,-8(fp)
   9212c:	18c03417 	ldw	r3,208(r3)
   92130:	20c7c83a 	sub	r3,r4,r3
   92134:	18c00044 	addi	r3,r3,1
   92138:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   9213c:	e0bff717 	ldw	r2,-36(fp)
   92140:	1004913a 	slli	r2,r2,4
   92144:	e0fffd17 	ldw	r3,-12(fp)
   92148:	18a1883a 	add	r16,r3,r2
   9214c:	e0fffe17 	ldw	r3,-8(fp)
   92150:	e0bff717 	ldw	r2,-36(fp)
   92154:	1004913a 	slli	r2,r2,4
   92158:	1885883a 	add	r2,r3,r2
   9215c:	10800e04 	addi	r2,r2,56
   92160:	10c00017 	ldw	r3,0(r2)
   92164:	e0bffe17 	ldw	r2,-8(fp)
   92168:	10803f17 	ldw	r2,252(r2)
   9216c:	100b883a 	mov	r5,r2
   92170:	1809883a 	mov	r4,r3
   92174:	0080a480 	call	80a48 <__divsi3>
   92178:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   9217c:	e0bff717 	ldw	r2,-36(fp)
   92180:	1004913a 	slli	r2,r2,4
   92184:	e0fffd17 	ldw	r3,-12(fp)
   92188:	1885883a 	add	r2,r3,r2
   9218c:	e0fffe17 	ldw	r3,-8(fp)
   92190:	18c03f17 	ldw	r3,252(r3)
   92194:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   92198:	e0bff717 	ldw	r2,-36(fp)
   9219c:	10800044 	addi	r2,r2,1
   921a0:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
   921a4:	e0bffe17 	ldw	r2,-8(fp)
   921a8:	10803617 	ldw	r2,216(r2)
   921ac:	10800058 	cmpnei	r2,r2,1
   921b0:	10002f1e 	bne	r2,zero,92270 <altera_onchip_flash_init+0x310>
   921b4:	e0bffa17 	ldw	r2,-24(fp)
   921b8:	10802020 	cmpeqi	r2,r2,128
   921bc:	10002c1e 	bne	r2,zero,92270 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
   921c0:	e0bff717 	ldw	r2,-36(fp)
   921c4:	1004913a 	slli	r2,r2,4
   921c8:	e0fffd17 	ldw	r3,-12(fp)
   921cc:	1885883a 	add	r2,r3,r2
   921d0:	e0fffe17 	ldw	r3,-8(fp)
   921d4:	18c03717 	ldw	r3,220(r3)
   921d8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
   921dc:	e0bff717 	ldw	r2,-36(fp)
   921e0:	1004913a 	slli	r2,r2,4
   921e4:	e0fffd17 	ldw	r3,-12(fp)
   921e8:	1885883a 	add	r2,r3,r2
   921ec:	e0fffe17 	ldw	r3,-8(fp)
   921f0:	19003817 	ldw	r4,224(r3)
   921f4:	e0fffe17 	ldw	r3,-8(fp)
   921f8:	18c03717 	ldw	r3,220(r3)
   921fc:	20c7c83a 	sub	r3,r4,r3
   92200:	18c00044 	addi	r3,r3,1
   92204:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   92208:	e0bff717 	ldw	r2,-36(fp)
   9220c:	1004913a 	slli	r2,r2,4
   92210:	e0fffd17 	ldw	r3,-12(fp)
   92214:	18a1883a 	add	r16,r3,r2
   92218:	e0fffe17 	ldw	r3,-8(fp)
   9221c:	e0bff717 	ldw	r2,-36(fp)
   92220:	1004913a 	slli	r2,r2,4
   92224:	1885883a 	add	r2,r3,r2
   92228:	10800e04 	addi	r2,r2,56
   9222c:	10c00017 	ldw	r3,0(r2)
   92230:	e0bffe17 	ldw	r2,-8(fp)
   92234:	10803f17 	ldw	r2,252(r2)
   92238:	100b883a 	mov	r5,r2
   9223c:	1809883a 	mov	r4,r3
   92240:	0080a480 	call	80a48 <__divsi3>
   92244:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   92248:	e0bff717 	ldw	r2,-36(fp)
   9224c:	1004913a 	slli	r2,r2,4
   92250:	e0fffd17 	ldw	r3,-12(fp)
   92254:	1885883a 	add	r2,r3,r2
   92258:	e0fffe17 	ldw	r3,-8(fp)
   9225c:	18c03f17 	ldw	r3,252(r3)
   92260:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   92264:	e0bff717 	ldw	r2,-36(fp)
   92268:	10800044 	addi	r2,r2,1
   9226c:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
   92270:	e0bffe17 	ldw	r2,-8(fp)
   92274:	10803917 	ldw	r2,228(r2)
   92278:	10800058 	cmpnei	r2,r2,1
   9227c:	10002f1e 	bne	r2,zero,9233c <altera_onchip_flash_init+0x3dc>
   92280:	e0bffb17 	ldw	r2,-20(fp)
   92284:	10804020 	cmpeqi	r2,r2,256
   92288:	10002c1e 	bne	r2,zero,9233c <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
   9228c:	e0bff717 	ldw	r2,-36(fp)
   92290:	1004913a 	slli	r2,r2,4
   92294:	e0fffd17 	ldw	r3,-12(fp)
   92298:	1885883a 	add	r2,r3,r2
   9229c:	e0fffe17 	ldw	r3,-8(fp)
   922a0:	18c03a17 	ldw	r3,232(r3)
   922a4:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
   922a8:	e0bff717 	ldw	r2,-36(fp)
   922ac:	1004913a 	slli	r2,r2,4
   922b0:	e0fffd17 	ldw	r3,-12(fp)
   922b4:	1885883a 	add	r2,r3,r2
   922b8:	e0fffe17 	ldw	r3,-8(fp)
   922bc:	19003b17 	ldw	r4,236(r3)
   922c0:	e0fffe17 	ldw	r3,-8(fp)
   922c4:	18c03a17 	ldw	r3,232(r3)
   922c8:	20c7c83a 	sub	r3,r4,r3
   922cc:	18c00044 	addi	r3,r3,1
   922d0:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   922d4:	e0bff717 	ldw	r2,-36(fp)
   922d8:	1004913a 	slli	r2,r2,4
   922dc:	e0fffd17 	ldw	r3,-12(fp)
   922e0:	18a1883a 	add	r16,r3,r2
   922e4:	e0fffe17 	ldw	r3,-8(fp)
   922e8:	e0bff717 	ldw	r2,-36(fp)
   922ec:	1004913a 	slli	r2,r2,4
   922f0:	1885883a 	add	r2,r3,r2
   922f4:	10800e04 	addi	r2,r2,56
   922f8:	10c00017 	ldw	r3,0(r2)
   922fc:	e0bffe17 	ldw	r2,-8(fp)
   92300:	10803f17 	ldw	r2,252(r2)
   92304:	100b883a 	mov	r5,r2
   92308:	1809883a 	mov	r4,r3
   9230c:	0080a480 	call	80a48 <__divsi3>
   92310:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   92314:	e0bff717 	ldw	r2,-36(fp)
   92318:	1004913a 	slli	r2,r2,4
   9231c:	e0fffd17 	ldw	r3,-12(fp)
   92320:	1885883a 	add	r2,r3,r2
   92324:	e0fffe17 	ldw	r3,-8(fp)
   92328:	18c03f17 	ldw	r3,252(r3)
   9232c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   92330:	e0bff717 	ldw	r2,-36(fp)
   92334:	10800044 	addi	r2,r2,1
   92338:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
   9233c:	e0bffe17 	ldw	r2,-8(fp)
   92340:	10803c17 	ldw	r2,240(r2)
   92344:	10800058 	cmpnei	r2,r2,1
   92348:	10002f1e 	bne	r2,zero,92408 <altera_onchip_flash_init+0x4a8>
   9234c:	e0bffc17 	ldw	r2,-16(fp)
   92350:	10808020 	cmpeqi	r2,r2,512
   92354:	10002c1e 	bne	r2,zero,92408 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
   92358:	e0bff717 	ldw	r2,-36(fp)
   9235c:	1004913a 	slli	r2,r2,4
   92360:	e0fffd17 	ldw	r3,-12(fp)
   92364:	1885883a 	add	r2,r3,r2
   92368:	e0fffe17 	ldw	r3,-8(fp)
   9236c:	18c03d17 	ldw	r3,244(r3)
   92370:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
   92374:	e0bff717 	ldw	r2,-36(fp)
   92378:	1004913a 	slli	r2,r2,4
   9237c:	e0fffd17 	ldw	r3,-12(fp)
   92380:	1885883a 	add	r2,r3,r2
   92384:	e0fffe17 	ldw	r3,-8(fp)
   92388:	19003e17 	ldw	r4,248(r3)
   9238c:	e0fffe17 	ldw	r3,-8(fp)
   92390:	18c03d17 	ldw	r3,244(r3)
   92394:	20c7c83a 	sub	r3,r4,r3
   92398:	18c00044 	addi	r3,r3,1
   9239c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
   923a0:	e0bff717 	ldw	r2,-36(fp)
   923a4:	1004913a 	slli	r2,r2,4
   923a8:	e0fffd17 	ldw	r3,-12(fp)
   923ac:	18a1883a 	add	r16,r3,r2
   923b0:	e0fffe17 	ldw	r3,-8(fp)
   923b4:	e0bff717 	ldw	r2,-36(fp)
   923b8:	1004913a 	slli	r2,r2,4
   923bc:	1885883a 	add	r2,r3,r2
   923c0:	10800e04 	addi	r2,r2,56
   923c4:	10c00017 	ldw	r3,0(r2)
   923c8:	e0bffe17 	ldw	r2,-8(fp)
   923cc:	10803f17 	ldw	r2,252(r2)
   923d0:	100b883a 	mov	r5,r2
   923d4:	1809883a 	mov	r4,r3
   923d8:	0080a480 	call	80a48 <__divsi3>
   923dc:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
   923e0:	e0bff717 	ldw	r2,-36(fp)
   923e4:	1004913a 	slli	r2,r2,4
   923e8:	e0fffd17 	ldw	r3,-12(fp)
   923ec:	1885883a 	add	r2,r3,r2
   923f0:	e0fffe17 	ldw	r3,-8(fp)
   923f4:	18c03f17 	ldw	r3,252(r3)
   923f8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
   923fc:	e0bff717 	ldw	r2,-36(fp)
   92400:	10800044 	addi	r2,r2,1
   92404:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
   92408:	e0bffe17 	ldw	r2,-8(fp)
   9240c:	e0fff717 	ldw	r3,-36(fp)
   92410:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
   92414:	e0bffe17 	ldw	r2,-8(fp)
   92418:	1009883a 	mov	r4,r2
   9241c:	00916ac0 	call	916ac <alt_flash_device_register>
}
   92420:	0001883a 	nop
   92424:	e6ffff04 	addi	sp,fp,-4
   92428:	dfc00217 	ldw	ra,8(sp)
   9242c:	df000117 	ldw	fp,4(sp)
   92430:	dc000017 	ldw	r16,0(sp)
   92434:	dec00304 	addi	sp,sp,12
   92438:	f800283a 	ret

0009243c <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
   9243c:	defffa04 	addi	sp,sp,-24
   92440:	dfc00515 	stw	ra,20(sp)
   92444:	df000415 	stw	fp,16(sp)
   92448:	df000404 	addi	fp,sp,16
   9244c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   92450:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   92454:	008002f4 	movhi	r2,11
   92458:	10ab9804 	addi	r2,r2,-20896
   9245c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   92460:	008002f4 	movhi	r2,11
   92464:	10ab9804 	addi	r2,r2,-20896
   92468:	e0bffd15 	stw	r2,-12(fp)

    while (
   9246c:	00000c06 	br	924a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
   92470:	01000044 	movi	r4,1
   92474:	00927180 	call	92718 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   92478:	e0bffe17 	ldw	r2,-8(fp)
   9247c:	10000826 	beq	r2,zero,924a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
   92480:	e0bffd17 	ldw	r2,-12(fp)
   92484:	10bfffc4 	addi	r2,r2,-1
   92488:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   9248c:	e0bffd17 	ldw	r2,-12(fp)
   92490:	1000031e 	bne	r2,zero,924a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   92494:	00bfe304 	movi	r2,-116
   92498:	e0bffc15 	stw	r2,-16(fp)
                break;
   9249c:	00000506 	br	924b4 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   924a0:	e0bfff17 	ldw	r2,-4(fp)
   924a4:	10802f17 	ldw	r2,188(r2)
   924a8:	10800037 	ldwio	r2,0(r2)
   924ac:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   924b0:	103fef1e 	bne	r2,zero,92470 <_gp+0xfff8088c>
                break;
            }
        }
    }

    return ret_code;
   924b4:	e0bffc17 	ldw	r2,-16(fp)
}
   924b8:	e037883a 	mov	sp,fp
   924bc:	dfc00117 	ldw	ra,4(sp)
   924c0:	df000017 	ldw	fp,0(sp)
   924c4:	dec00204 	addi	sp,sp,8
   924c8:	f800283a 	ret

000924cc <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
   924cc:	defffa04 	addi	sp,sp,-24
   924d0:	dfc00515 	stw	ra,20(sp)
   924d4:	df000415 	stw	fp,16(sp)
   924d8:	df000404 	addi	fp,sp,16
   924dc:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   924e0:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   924e4:	008002f4 	movhi	r2,11
   924e8:	10ab9804 	addi	r2,r2,-20896
   924ec:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   924f0:	008002f4 	movhi	r2,11
   924f4:	10ab9804 	addi	r2,r2,-20896
   924f8:	e0bffd15 	stw	r2,-12(fp)

    while (
   924fc:	00000c06 	br	92530 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
   92500:	01000044 	movi	r4,1
   92504:	00927180 	call	92718 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   92508:	e0bffe17 	ldw	r2,-8(fp)
   9250c:	10000826 	beq	r2,zero,92530 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
   92510:	e0bffd17 	ldw	r2,-12(fp)
   92514:	10bfffc4 	addi	r2,r2,-1
   92518:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   9251c:	e0bffd17 	ldw	r2,-12(fp)
   92520:	1000031e 	bne	r2,zero,92530 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   92524:	00bfe304 	movi	r2,-116
   92528:	e0bffc15 	stw	r2,-16(fp)
                break;
   9252c:	00000506 	br	92544 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   92530:	e0bfff17 	ldw	r2,-4(fp)
   92534:	10802f17 	ldw	r2,188(r2)
   92538:	10800037 	ldwio	r2,0(r2)
   9253c:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   92540:	103fef26 	beq	r2,zero,92500 <_gp+0xfff8091c>
                break;
            }
        }
    }

    return ret_code;
   92544:	e0bffc17 	ldw	r2,-16(fp)
}
   92548:	e037883a 	mov	sp,fp
   9254c:	dfc00117 	ldw	ra,4(sp)
   92550:	df000017 	ldw	fp,0(sp)
   92554:	dec00204 	addi	sp,sp,8
   92558:	f800283a 	ret

0009255c <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
   9255c:	defffa04 	addi	sp,sp,-24
   92560:	dfc00515 	stw	ra,20(sp)
   92564:	df000415 	stw	fp,16(sp)
   92568:	df000404 	addi	fp,sp,16
   9256c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
   92570:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   92574:	008002f4 	movhi	r2,11
   92578:	10ab9804 	addi	r2,r2,-20896
   9257c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
   92580:	008002f4 	movhi	r2,11
   92584:	10ab9804 	addi	r2,r2,-20896
   92588:	e0bffd15 	stw	r2,-12(fp)

    while (
   9258c:	00000c06 	br	925c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
   92590:	01000044 	movi	r4,1
   92594:	00927180 	call	92718 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
   92598:	e0bffe17 	ldw	r2,-8(fp)
   9259c:	10000826 	beq	r2,zero,925c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
   925a0:	e0bffd17 	ldw	r2,-12(fp)
   925a4:	10bfffc4 	addi	r2,r2,-1
   925a8:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
   925ac:	e0bffd17 	ldw	r2,-12(fp)
   925b0:	1000031e 	bne	r2,zero,925c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
   925b4:	00bfe304 	movi	r2,-116
   925b8:	e0bffc15 	stw	r2,-16(fp)
                break;
   925bc:	00000506 	br	925d4 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
   925c0:	e0bfff17 	ldw	r2,-4(fp)
   925c4:	10802f17 	ldw	r2,188(r2)
   925c8:	10800037 	ldwio	r2,0(r2)
   925cc:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
   925d0:	103fef26 	beq	r2,zero,92590 <_gp+0xfff809ac>
                break;
            }
        }
    }

    return ret_code;
   925d4:	e0bffc17 	ldw	r2,-16(fp)
}
   925d8:	e037883a 	mov	sp,fp
   925dc:	dfc00117 	ldw	ra,4(sp)
   925e0:	df000017 	ldw	fp,0(sp)
   925e4:	dec00204 	addi	sp,sp,8
   925e8:	f800283a 	ret

000925ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   925ec:	defff504 	addi	sp,sp,-44
   925f0:	df000a15 	stw	fp,40(sp)
   925f4:	df000a04 	addi	fp,sp,40
   925f8:	e13ffc15 	stw	r4,-16(fp)
   925fc:	e17ffd15 	stw	r5,-12(fp)
   92600:	e1bffe15 	stw	r6,-8(fp)
   92604:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   92608:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9260c:	d0a02117 	ldw	r2,-32636(gp)
  
  if (alt_ticks_per_second ())
   92610:	10003c26 	beq	r2,zero,92704 <alt_alarm_start+0x118>
  {
    if (alarm)
   92614:	e0bffc17 	ldw	r2,-16(fp)
   92618:	10003826 	beq	r2,zero,926fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   9261c:	e0bffc17 	ldw	r2,-16(fp)
   92620:	e0fffe17 	ldw	r3,-8(fp)
   92624:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   92628:	e0bffc17 	ldw	r2,-16(fp)
   9262c:	e0ffff17 	ldw	r3,-4(fp)
   92630:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92634:	0005303a 	rdctl	r2,status
   92638:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9263c:	e0fff917 	ldw	r3,-28(fp)
   92640:	00bfff84 	movi	r2,-2
   92644:	1884703a 	and	r2,r3,r2
   92648:	1001703a 	wrctl	status,r2
  
  return context;
   9264c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   92650:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   92654:	d0a02217 	ldw	r2,-32632(gp)
      
      current_nticks = alt_nticks();
   92658:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9265c:	e0fffd17 	ldw	r3,-12(fp)
   92660:	e0bff617 	ldw	r2,-40(fp)
   92664:	1885883a 	add	r2,r3,r2
   92668:	10c00044 	addi	r3,r2,1
   9266c:	e0bffc17 	ldw	r2,-16(fp)
   92670:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   92674:	e0bffc17 	ldw	r2,-16(fp)
   92678:	10c00217 	ldw	r3,8(r2)
   9267c:	e0bff617 	ldw	r2,-40(fp)
   92680:	1880042e 	bgeu	r3,r2,92694 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   92684:	e0bffc17 	ldw	r2,-16(fp)
   92688:	00c00044 	movi	r3,1
   9268c:	10c00405 	stb	r3,16(r2)
   92690:	00000206 	br	9269c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   92694:	e0bffc17 	ldw	r2,-16(fp)
   92698:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9269c:	e0bffc17 	ldw	r2,-16(fp)
   926a0:	d0e01404 	addi	r3,gp,-32688
   926a4:	e0fffa15 	stw	r3,-24(fp)
   926a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   926ac:	e0bffb17 	ldw	r2,-20(fp)
   926b0:	e0fffa17 	ldw	r3,-24(fp)
   926b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   926b8:	e0bffa17 	ldw	r2,-24(fp)
   926bc:	10c00017 	ldw	r3,0(r2)
   926c0:	e0bffb17 	ldw	r2,-20(fp)
   926c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   926c8:	e0bffa17 	ldw	r2,-24(fp)
   926cc:	10800017 	ldw	r2,0(r2)
   926d0:	e0fffb17 	ldw	r3,-20(fp)
   926d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   926d8:	e0bffa17 	ldw	r2,-24(fp)
   926dc:	e0fffb17 	ldw	r3,-20(fp)
   926e0:	10c00015 	stw	r3,0(r2)
   926e4:	e0bff817 	ldw	r2,-32(fp)
   926e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   926ec:	e0bff717 	ldw	r2,-36(fp)
   926f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   926f4:	0005883a 	mov	r2,zero
   926f8:	00000306 	br	92708 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   926fc:	00bffa84 	movi	r2,-22
   92700:	00000106 	br	92708 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   92704:	00bfde84 	movi	r2,-134
  }
}
   92708:	e037883a 	mov	sp,fp
   9270c:	df000017 	ldw	fp,0(sp)
   92710:	dec00104 	addi	sp,sp,4
   92714:	f800283a 	ret

00092718 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   92718:	defffa04 	addi	sp,sp,-24
   9271c:	dfc00515 	stw	ra,20(sp)
   92720:	df000415 	stw	fp,16(sp)
   92724:	df000404 	addi	fp,sp,16
   92728:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   9272c:	00800244 	movi	r2,9
   92730:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   92734:	014003f4 	movhi	r5,15
   92738:	29509004 	addi	r5,r5,16960
   9273c:	e13ffd17 	ldw	r4,-12(fp)
   92740:	00817900 	call	81790 <__mulsi3>
   92744:	100b883a 	mov	r5,r2
   92748:	0100bef4 	movhi	r4,763
   9274c:	213c2004 	addi	r4,r4,-3968
   92750:	0080b400 	call	80b40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   92754:	100b883a 	mov	r5,r2
   92758:	01200034 	movhi	r4,32768
   9275c:	213fffc4 	addi	r4,r4,-1
   92760:	0080b400 	call	80b40 <__udivsi3>
   92764:	100b883a 	mov	r5,r2
   92768:	e13fff17 	ldw	r4,-4(fp)
   9276c:	0080b400 	call	80b40 <__udivsi3>
   92770:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   92774:	e0bffe17 	ldw	r2,-8(fp)
   92778:	10002a26 	beq	r2,zero,92824 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   9277c:	e03ffc15 	stw	zero,-16(fp)
   92780:	00001706 	br	927e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   92784:	00a00034 	movhi	r2,32768
   92788:	10bfffc4 	addi	r2,r2,-1
   9278c:	10bfffc4 	addi	r2,r2,-1
   92790:	103ffe1e 	bne	r2,zero,9278c <_gp+0xfff80ba8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   92794:	014003f4 	movhi	r5,15
   92798:	29509004 	addi	r5,r5,16960
   9279c:	e13ffd17 	ldw	r4,-12(fp)
   927a0:	00817900 	call	81790 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   927a4:	100b883a 	mov	r5,r2
   927a8:	0100bef4 	movhi	r4,763
   927ac:	213c2004 	addi	r4,r4,-3968
   927b0:	0080b400 	call	80b40 <__udivsi3>
   927b4:	100b883a 	mov	r5,r2
   927b8:	01200034 	movhi	r4,32768
   927bc:	213fffc4 	addi	r4,r4,-1
   927c0:	0080b400 	call	80b40 <__udivsi3>
   927c4:	1007883a 	mov	r3,r2
   927c8:	e0bfff17 	ldw	r2,-4(fp)
   927cc:	10c5c83a 	sub	r2,r2,r3
   927d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   927d4:	e0bffc17 	ldw	r2,-16(fp)
   927d8:	10800044 	addi	r2,r2,1
   927dc:	e0bffc15 	stw	r2,-16(fp)
   927e0:	e0fffc17 	ldw	r3,-16(fp)
   927e4:	e0bffe17 	ldw	r2,-8(fp)
   927e8:	18bfe616 	blt	r3,r2,92784 <_gp+0xfff80ba0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   927ec:	014003f4 	movhi	r5,15
   927f0:	29509004 	addi	r5,r5,16960
   927f4:	e13ffd17 	ldw	r4,-12(fp)
   927f8:	00817900 	call	81790 <__mulsi3>
   927fc:	100b883a 	mov	r5,r2
   92800:	0100bef4 	movhi	r4,763
   92804:	213c2004 	addi	r4,r4,-3968
   92808:	0080b400 	call	80b40 <__udivsi3>
   9280c:	e17fff17 	ldw	r5,-4(fp)
   92810:	1009883a 	mov	r4,r2
   92814:	00817900 	call	81790 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   92818:	10bfffc4 	addi	r2,r2,-1
   9281c:	103ffe1e 	bne	r2,zero,92818 <_gp+0xfff80c34>
   92820:	00000d06 	br	92858 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   92824:	014003f4 	movhi	r5,15
   92828:	29509004 	addi	r5,r5,16960
   9282c:	e13ffd17 	ldw	r4,-12(fp)
   92830:	00817900 	call	81790 <__mulsi3>
   92834:	100b883a 	mov	r5,r2
   92838:	0100bef4 	movhi	r4,763
   9283c:	213c2004 	addi	r4,r4,-3968
   92840:	0080b400 	call	80b40 <__udivsi3>
   92844:	e17fff17 	ldw	r5,-4(fp)
   92848:	1009883a 	mov	r4,r2
   9284c:	00817900 	call	81790 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   92850:	10bfffc4 	addi	r2,r2,-1
   92854:	00bffe16 	blt	zero,r2,92850 <_gp+0xfff80c6c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   92858:	0005883a 	mov	r2,zero
}
   9285c:	e037883a 	mov	sp,fp
   92860:	dfc00117 	ldw	ra,4(sp)
   92864:	df000017 	ldw	fp,0(sp)
   92868:	dec00204 	addi	sp,sp,8
   9286c:	f800283a 	ret

00092870 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   92870:	defffd04 	addi	sp,sp,-12
   92874:	df000215 	stw	fp,8(sp)
   92878:	df000204 	addi	fp,sp,8
   9287c:	e13ffe15 	stw	r4,-8(fp)
   92880:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   92884:	0001883a 	nop
   92888:	e037883a 	mov	sp,fp
   9288c:	df000017 	ldw	fp,0(sp)
   92890:	dec00104 	addi	sp,sp,4
   92894:	f800283a 	ret

00092898 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   92898:	deffff04 	addi	sp,sp,-4
   9289c:	df000015 	stw	fp,0(sp)
   928a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   928a4:	0001883a 	nop
   928a8:	e037883a 	mov	sp,fp
   928ac:	df000017 	ldw	fp,0(sp)
   928b0:	dec00104 	addi	sp,sp,4
   928b4:	f800283a 	ret

000928b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   928b8:	defffe04 	addi	sp,sp,-8
   928bc:	dfc00115 	stw	ra,4(sp)
   928c0:	df000015 	stw	fp,0(sp)
   928c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   928c8:	d0a00b17 	ldw	r2,-32724(gp)
   928cc:	10000326 	beq	r2,zero,928dc <alt_get_errno+0x24>
   928d0:	d0a00b17 	ldw	r2,-32724(gp)
   928d4:	103ee83a 	callr	r2
   928d8:	00000106 	br	928e0 <alt_get_errno+0x28>
   928dc:	d0a01c04 	addi	r2,gp,-32656
}
   928e0:	e037883a 	mov	sp,fp
   928e4:	dfc00117 	ldw	ra,4(sp)
   928e8:	df000017 	ldw	fp,0(sp)
   928ec:	dec00204 	addi	sp,sp,8
   928f0:	f800283a 	ret

000928f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   928f4:	defffa04 	addi	sp,sp,-24
   928f8:	dfc00515 	stw	ra,20(sp)
   928fc:	df000415 	stw	fp,16(sp)
   92900:	df000404 	addi	fp,sp,16
   92904:	e13ffe15 	stw	r4,-8(fp)
   92908:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9290c:	e0bffe17 	ldw	r2,-8(fp)
   92910:	10000326 	beq	r2,zero,92920 <alt_dev_llist_insert+0x2c>
   92914:	e0bffe17 	ldw	r2,-8(fp)
   92918:	10800217 	ldw	r2,8(r2)
   9291c:	1000061e 	bne	r2,zero,92938 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   92920:	00928b80 	call	928b8 <alt_get_errno>
   92924:	1007883a 	mov	r3,r2
   92928:	00800584 	movi	r2,22
   9292c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   92930:	00bffa84 	movi	r2,-22
   92934:	00001306 	br	92984 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   92938:	e0bffe17 	ldw	r2,-8(fp)
   9293c:	e0ffff17 	ldw	r3,-4(fp)
   92940:	e0fffc15 	stw	r3,-16(fp)
   92944:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   92948:	e0bffd17 	ldw	r2,-12(fp)
   9294c:	e0fffc17 	ldw	r3,-16(fp)
   92950:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   92954:	e0bffc17 	ldw	r2,-16(fp)
   92958:	10c00017 	ldw	r3,0(r2)
   9295c:	e0bffd17 	ldw	r2,-12(fp)
   92960:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   92964:	e0bffc17 	ldw	r2,-16(fp)
   92968:	10800017 	ldw	r2,0(r2)
   9296c:	e0fffd17 	ldw	r3,-12(fp)
   92970:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   92974:	e0bffc17 	ldw	r2,-16(fp)
   92978:	e0fffd17 	ldw	r3,-12(fp)
   9297c:	10c00015 	stw	r3,0(r2)

  return 0;  
   92980:	0005883a 	mov	r2,zero
}
   92984:	e037883a 	mov	sp,fp
   92988:	dfc00117 	ldw	ra,4(sp)
   9298c:	df000017 	ldw	fp,0(sp)
   92990:	dec00204 	addi	sp,sp,8
   92994:	f800283a 	ret

00092998 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   92998:	defffd04 	addi	sp,sp,-12
   9299c:	dfc00215 	stw	ra,8(sp)
   929a0:	df000115 	stw	fp,4(sp)
   929a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   929a8:	00800274 	movhi	r2,9
   929ac:	108f7604 	addi	r2,r2,15832
   929b0:	e0bfff15 	stw	r2,-4(fp)
   929b4:	00000606 	br	929d0 <_do_ctors+0x38>
        (*ctor) (); 
   929b8:	e0bfff17 	ldw	r2,-4(fp)
   929bc:	10800017 	ldw	r2,0(r2)
   929c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   929c4:	e0bfff17 	ldw	r2,-4(fp)
   929c8:	10bfff04 	addi	r2,r2,-4
   929cc:	e0bfff15 	stw	r2,-4(fp)
   929d0:	e0ffff17 	ldw	r3,-4(fp)
   929d4:	00800274 	movhi	r2,9
   929d8:	108f7704 	addi	r2,r2,15836
   929dc:	18bff62e 	bgeu	r3,r2,929b8 <_gp+0xfff80dd4>
        (*ctor) (); 
}
   929e0:	0001883a 	nop
   929e4:	e037883a 	mov	sp,fp
   929e8:	dfc00117 	ldw	ra,4(sp)
   929ec:	df000017 	ldw	fp,0(sp)
   929f0:	dec00204 	addi	sp,sp,8
   929f4:	f800283a 	ret

000929f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   929f8:	defffd04 	addi	sp,sp,-12
   929fc:	dfc00215 	stw	ra,8(sp)
   92a00:	df000115 	stw	fp,4(sp)
   92a04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92a08:	00800274 	movhi	r2,9
   92a0c:	108f7604 	addi	r2,r2,15832
   92a10:	e0bfff15 	stw	r2,-4(fp)
   92a14:	00000606 	br	92a30 <_do_dtors+0x38>
        (*dtor) (); 
   92a18:	e0bfff17 	ldw	r2,-4(fp)
   92a1c:	10800017 	ldw	r2,0(r2)
   92a20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92a24:	e0bfff17 	ldw	r2,-4(fp)
   92a28:	10bfff04 	addi	r2,r2,-4
   92a2c:	e0bfff15 	stw	r2,-4(fp)
   92a30:	e0ffff17 	ldw	r3,-4(fp)
   92a34:	00800274 	movhi	r2,9
   92a38:	108f7704 	addi	r2,r2,15836
   92a3c:	18bff62e 	bgeu	r3,r2,92a18 <_gp+0xfff80e34>
        (*dtor) (); 
}
   92a40:	0001883a 	nop
   92a44:	e037883a 	mov	sp,fp
   92a48:	dfc00117 	ldw	ra,4(sp)
   92a4c:	df000017 	ldw	fp,0(sp)
   92a50:	dec00204 	addi	sp,sp,8
   92a54:	f800283a 	ret

00092a58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   92a58:	defffa04 	addi	sp,sp,-24
   92a5c:	dfc00515 	stw	ra,20(sp)
   92a60:	df000415 	stw	fp,16(sp)
   92a64:	df000404 	addi	fp,sp,16
   92a68:	e13ffe15 	stw	r4,-8(fp)
   92a6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   92a70:	e0bfff17 	ldw	r2,-4(fp)
   92a74:	10800017 	ldw	r2,0(r2)
   92a78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   92a7c:	e13ffe17 	ldw	r4,-8(fp)
   92a80:	00818f80 	call	818f8 <strlen>
   92a84:	10800044 	addi	r2,r2,1
   92a88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   92a8c:	00000d06 	br	92ac4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   92a90:	e0bffc17 	ldw	r2,-16(fp)
   92a94:	10800217 	ldw	r2,8(r2)
   92a98:	e0fffd17 	ldw	r3,-12(fp)
   92a9c:	180d883a 	mov	r6,r3
   92aa0:	e17ffe17 	ldw	r5,-8(fp)
   92aa4:	1009883a 	mov	r4,r2
   92aa8:	009392c0 	call	9392c <memcmp>
   92aac:	1000021e 	bne	r2,zero,92ab8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   92ab0:	e0bffc17 	ldw	r2,-16(fp)
   92ab4:	00000706 	br	92ad4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   92ab8:	e0bffc17 	ldw	r2,-16(fp)
   92abc:	10800017 	ldw	r2,0(r2)
   92ac0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   92ac4:	e0fffc17 	ldw	r3,-16(fp)
   92ac8:	e0bfff17 	ldw	r2,-4(fp)
   92acc:	18bff01e 	bne	r3,r2,92a90 <_gp+0xfff80eac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   92ad0:	0005883a 	mov	r2,zero
}
   92ad4:	e037883a 	mov	sp,fp
   92ad8:	dfc00117 	ldw	ra,4(sp)
   92adc:	df000017 	ldw	fp,0(sp)
   92ae0:	dec00204 	addi	sp,sp,8
   92ae4:	f800283a 	ret

00092ae8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   92ae8:	defffc04 	addi	sp,sp,-16
   92aec:	dfc00315 	stw	ra,12(sp)
   92af0:	df000215 	stw	fp,8(sp)
   92af4:	df000204 	addi	fp,sp,8
   92af8:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   92afc:	d1601104 	addi	r5,gp,-32700
   92b00:	e13fff17 	ldw	r4,-4(fp)
   92b04:	0092a580 	call	92a58 <alt_find_dev>
   92b08:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   92b0c:	e0bffe17 	ldw	r2,-8(fp)
   92b10:	10000926 	beq	r2,zero,92b38 <alt_flash_open_dev+0x50>
   92b14:	e0bffe17 	ldw	r2,-8(fp)
   92b18:	10800317 	ldw	r2,12(r2)
   92b1c:	10000626 	beq	r2,zero,92b38 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   92b20:	e0bffe17 	ldw	r2,-8(fp)
   92b24:	10800317 	ldw	r2,12(r2)
   92b28:	e17fff17 	ldw	r5,-4(fp)
   92b2c:	e13ffe17 	ldw	r4,-8(fp)
   92b30:	103ee83a 	callr	r2
   92b34:	00000106 	br	92b3c <alt_flash_open_dev+0x54>
  }

  return dev;
   92b38:	e0bffe17 	ldw	r2,-8(fp)
}
   92b3c:	e037883a 	mov	sp,fp
   92b40:	dfc00117 	ldw	ra,4(sp)
   92b44:	df000017 	ldw	fp,0(sp)
   92b48:	dec00204 	addi	sp,sp,8
   92b4c:	f800283a 	ret

00092b50 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   92b50:	defffd04 	addi	sp,sp,-12
   92b54:	dfc00215 	stw	ra,8(sp)
   92b58:	df000115 	stw	fp,4(sp)
   92b5c:	df000104 	addi	fp,sp,4
   92b60:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   92b64:	e0bfff17 	ldw	r2,-4(fp)
   92b68:	10000826 	beq	r2,zero,92b8c <alt_flash_close_dev+0x3c>
   92b6c:	e0bfff17 	ldw	r2,-4(fp)
   92b70:	10800417 	ldw	r2,16(r2)
   92b74:	10000526 	beq	r2,zero,92b8c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   92b78:	e0bfff17 	ldw	r2,-4(fp)
   92b7c:	10800417 	ldw	r2,16(r2)
   92b80:	e13fff17 	ldw	r4,-4(fp)
   92b84:	103ee83a 	callr	r2
  }
  return;
   92b88:	0001883a 	nop
   92b8c:	0001883a 	nop
}
   92b90:	e037883a 	mov	sp,fp
   92b94:	dfc00117 	ldw	ra,4(sp)
   92b98:	df000017 	ldw	fp,0(sp)
   92b9c:	dec00204 	addi	sp,sp,8
   92ba0:	f800283a 	ret

00092ba4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   92ba4:	deffff04 	addi	sp,sp,-4
   92ba8:	df000015 	stw	fp,0(sp)
   92bac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   92bb0:	0001883a 	nop
   92bb4:	e037883a 	mov	sp,fp
   92bb8:	df000017 	ldw	fp,0(sp)
   92bbc:	dec00104 	addi	sp,sp,4
   92bc0:	f800283a 	ret

00092bc4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   92bc4:	defff904 	addi	sp,sp,-28
   92bc8:	dfc00615 	stw	ra,24(sp)
   92bcc:	df000515 	stw	fp,20(sp)
   92bd0:	df000504 	addi	fp,sp,20
   92bd4:	e13ffc15 	stw	r4,-16(fp)
   92bd8:	e17ffd15 	stw	r5,-12(fp)
   92bdc:	e1bffe15 	stw	r6,-8(fp)
   92be0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   92be4:	e0800217 	ldw	r2,8(fp)
   92be8:	d8800015 	stw	r2,0(sp)
   92bec:	e1ffff17 	ldw	r7,-4(fp)
   92bf0:	e1bffe17 	ldw	r6,-8(fp)
   92bf4:	e17ffd17 	ldw	r5,-12(fp)
   92bf8:	e13ffc17 	ldw	r4,-16(fp)
   92bfc:	0092d740 	call	92d74 <alt_iic_isr_register>
}  
   92c00:	e037883a 	mov	sp,fp
   92c04:	dfc00117 	ldw	ra,4(sp)
   92c08:	df000017 	ldw	fp,0(sp)
   92c0c:	dec00204 	addi	sp,sp,8
   92c10:	f800283a 	ret

00092c14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   92c14:	defff904 	addi	sp,sp,-28
   92c18:	df000615 	stw	fp,24(sp)
   92c1c:	df000604 	addi	fp,sp,24
   92c20:	e13ffe15 	stw	r4,-8(fp)
   92c24:	e17fff15 	stw	r5,-4(fp)
   92c28:	e0bfff17 	ldw	r2,-4(fp)
   92c2c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92c30:	0005303a 	rdctl	r2,status
   92c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92c38:	e0fffb17 	ldw	r3,-20(fp)
   92c3c:	00bfff84 	movi	r2,-2
   92c40:	1884703a 	and	r2,r3,r2
   92c44:	1001703a 	wrctl	status,r2
  
  return context;
   92c48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   92c4c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   92c50:	00c00044 	movi	r3,1
   92c54:	e0bffa17 	ldw	r2,-24(fp)
   92c58:	1884983a 	sll	r2,r3,r2
   92c5c:	1007883a 	mov	r3,r2
   92c60:	d0a02017 	ldw	r2,-32640(gp)
   92c64:	1884b03a 	or	r2,r3,r2
   92c68:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   92c6c:	d0a02017 	ldw	r2,-32640(gp)
   92c70:	100170fa 	wrctl	ienable,r2
   92c74:	e0bffc17 	ldw	r2,-16(fp)
   92c78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92c7c:	e0bffd17 	ldw	r2,-12(fp)
   92c80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   92c84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   92c88:	0001883a 	nop
}
   92c8c:	e037883a 	mov	sp,fp
   92c90:	df000017 	ldw	fp,0(sp)
   92c94:	dec00104 	addi	sp,sp,4
   92c98:	f800283a 	ret

00092c9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   92c9c:	defff904 	addi	sp,sp,-28
   92ca0:	df000615 	stw	fp,24(sp)
   92ca4:	df000604 	addi	fp,sp,24
   92ca8:	e13ffe15 	stw	r4,-8(fp)
   92cac:	e17fff15 	stw	r5,-4(fp)
   92cb0:	e0bfff17 	ldw	r2,-4(fp)
   92cb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92cb8:	0005303a 	rdctl	r2,status
   92cbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92cc0:	e0fffb17 	ldw	r3,-20(fp)
   92cc4:	00bfff84 	movi	r2,-2
   92cc8:	1884703a 	and	r2,r3,r2
   92ccc:	1001703a 	wrctl	status,r2
  
  return context;
   92cd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   92cd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   92cd8:	00c00044 	movi	r3,1
   92cdc:	e0bffa17 	ldw	r2,-24(fp)
   92ce0:	1884983a 	sll	r2,r3,r2
   92ce4:	0084303a 	nor	r2,zero,r2
   92ce8:	1007883a 	mov	r3,r2
   92cec:	d0a02017 	ldw	r2,-32640(gp)
   92cf0:	1884703a 	and	r2,r3,r2
   92cf4:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   92cf8:	d0a02017 	ldw	r2,-32640(gp)
   92cfc:	100170fa 	wrctl	ienable,r2
   92d00:	e0bffc17 	ldw	r2,-16(fp)
   92d04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92d08:	e0bffd17 	ldw	r2,-12(fp)
   92d0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   92d10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   92d14:	0001883a 	nop
}
   92d18:	e037883a 	mov	sp,fp
   92d1c:	df000017 	ldw	fp,0(sp)
   92d20:	dec00104 	addi	sp,sp,4
   92d24:	f800283a 	ret

00092d28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   92d28:	defffc04 	addi	sp,sp,-16
   92d2c:	df000315 	stw	fp,12(sp)
   92d30:	df000304 	addi	fp,sp,12
   92d34:	e13ffe15 	stw	r4,-8(fp)
   92d38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   92d3c:	000530fa 	rdctl	r2,ienable
   92d40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   92d44:	00c00044 	movi	r3,1
   92d48:	e0bfff17 	ldw	r2,-4(fp)
   92d4c:	1884983a 	sll	r2,r3,r2
   92d50:	1007883a 	mov	r3,r2
   92d54:	e0bffd17 	ldw	r2,-12(fp)
   92d58:	1884703a 	and	r2,r3,r2
   92d5c:	1004c03a 	cmpne	r2,r2,zero
   92d60:	10803fcc 	andi	r2,r2,255
}
   92d64:	e037883a 	mov	sp,fp
   92d68:	df000017 	ldw	fp,0(sp)
   92d6c:	dec00104 	addi	sp,sp,4
   92d70:	f800283a 	ret

00092d74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   92d74:	defff504 	addi	sp,sp,-44
   92d78:	dfc00a15 	stw	ra,40(sp)
   92d7c:	df000915 	stw	fp,36(sp)
   92d80:	df000904 	addi	fp,sp,36
   92d84:	e13ffc15 	stw	r4,-16(fp)
   92d88:	e17ffd15 	stw	r5,-12(fp)
   92d8c:	e1bffe15 	stw	r6,-8(fp)
   92d90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   92d94:	00bffa84 	movi	r2,-22
   92d98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   92d9c:	e0bffd17 	ldw	r2,-12(fp)
   92da0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   92da4:	e0bff817 	ldw	r2,-32(fp)
   92da8:	10800808 	cmpgei	r2,r2,32
   92dac:	1000271e 	bne	r2,zero,92e4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92db0:	0005303a 	rdctl	r2,status
   92db4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92db8:	e0fffb17 	ldw	r3,-20(fp)
   92dbc:	00bfff84 	movi	r2,-2
   92dc0:	1884703a 	and	r2,r3,r2
   92dc4:	1001703a 	wrctl	status,r2
  
  return context;
   92dc8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   92dcc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   92dd0:	00800474 	movhi	r2,17
   92dd4:	10a72704 	addi	r2,r2,-25444
   92dd8:	e0fff817 	ldw	r3,-32(fp)
   92ddc:	180690fa 	slli	r3,r3,3
   92de0:	10c5883a 	add	r2,r2,r3
   92de4:	e0fffe17 	ldw	r3,-8(fp)
   92de8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   92dec:	00800474 	movhi	r2,17
   92df0:	10a72704 	addi	r2,r2,-25444
   92df4:	e0fff817 	ldw	r3,-32(fp)
   92df8:	180690fa 	slli	r3,r3,3
   92dfc:	10c5883a 	add	r2,r2,r3
   92e00:	10800104 	addi	r2,r2,4
   92e04:	e0ffff17 	ldw	r3,-4(fp)
   92e08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   92e0c:	e0bffe17 	ldw	r2,-8(fp)
   92e10:	10000526 	beq	r2,zero,92e28 <alt_iic_isr_register+0xb4>
   92e14:	e0bff817 	ldw	r2,-32(fp)
   92e18:	100b883a 	mov	r5,r2
   92e1c:	e13ffc17 	ldw	r4,-16(fp)
   92e20:	0092c140 	call	92c14 <alt_ic_irq_enable>
   92e24:	00000406 	br	92e38 <alt_iic_isr_register+0xc4>
   92e28:	e0bff817 	ldw	r2,-32(fp)
   92e2c:	100b883a 	mov	r5,r2
   92e30:	e13ffc17 	ldw	r4,-16(fp)
   92e34:	0092c9c0 	call	92c9c <alt_ic_irq_disable>
   92e38:	e0bff715 	stw	r2,-36(fp)
   92e3c:	e0bffa17 	ldw	r2,-24(fp)
   92e40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92e44:	e0bff917 	ldw	r2,-28(fp)
   92e48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   92e4c:	e0bff717 	ldw	r2,-36(fp)
}
   92e50:	e037883a 	mov	sp,fp
   92e54:	dfc00117 	ldw	ra,4(sp)
   92e58:	df000017 	ldw	fp,0(sp)
   92e5c:	dec00204 	addi	sp,sp,8
   92e60:	f800283a 	ret

00092e64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   92e64:	defff804 	addi	sp,sp,-32
   92e68:	dfc00715 	stw	ra,28(sp)
   92e6c:	df000615 	stw	fp,24(sp)
   92e70:	dc000515 	stw	r16,20(sp)
   92e74:	df000604 	addi	fp,sp,24
   92e78:	e13ffb15 	stw	r4,-20(fp)
   92e7c:	e17ffc15 	stw	r5,-16(fp)
   92e80:	e1bffd15 	stw	r6,-12(fp)
   92e84:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   92e88:	e1bffe17 	ldw	r6,-8(fp)
   92e8c:	e17ffd17 	ldw	r5,-12(fp)
   92e90:	e13ffc17 	ldw	r4,-16(fp)
   92e94:	00930ec0 	call	930ec <open>
   92e98:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   92e9c:	e0bffa17 	ldw	r2,-24(fp)
   92ea0:	10002216 	blt	r2,zero,92f2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   92ea4:	04000474 	movhi	r16,17
   92ea8:	84223304 	addi	r16,r16,-30516
   92eac:	e0bffa17 	ldw	r2,-24(fp)
   92eb0:	01400304 	movi	r5,12
   92eb4:	1009883a 	mov	r4,r2
   92eb8:	00817900 	call	81790 <__mulsi3>
   92ebc:	8085883a 	add	r2,r16,r2
   92ec0:	10c00017 	ldw	r3,0(r2)
   92ec4:	e0bffb17 	ldw	r2,-20(fp)
   92ec8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   92ecc:	04000474 	movhi	r16,17
   92ed0:	84223304 	addi	r16,r16,-30516
   92ed4:	e0bffa17 	ldw	r2,-24(fp)
   92ed8:	01400304 	movi	r5,12
   92edc:	1009883a 	mov	r4,r2
   92ee0:	00817900 	call	81790 <__mulsi3>
   92ee4:	8085883a 	add	r2,r16,r2
   92ee8:	10800104 	addi	r2,r2,4
   92eec:	10c00017 	ldw	r3,0(r2)
   92ef0:	e0bffb17 	ldw	r2,-20(fp)
   92ef4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   92ef8:	04000474 	movhi	r16,17
   92efc:	84223304 	addi	r16,r16,-30516
   92f00:	e0bffa17 	ldw	r2,-24(fp)
   92f04:	01400304 	movi	r5,12
   92f08:	1009883a 	mov	r4,r2
   92f0c:	00817900 	call	81790 <__mulsi3>
   92f10:	8085883a 	add	r2,r16,r2
   92f14:	10800204 	addi	r2,r2,8
   92f18:	10c00017 	ldw	r3,0(r2)
   92f1c:	e0bffb17 	ldw	r2,-20(fp)
   92f20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   92f24:	e13ffa17 	ldw	r4,-24(fp)
   92f28:	008ebdc0 	call	8ebdc <alt_release_fd>
  }
} 
   92f2c:	0001883a 	nop
   92f30:	e6ffff04 	addi	sp,fp,-4
   92f34:	dfc00217 	ldw	ra,8(sp)
   92f38:	df000117 	ldw	fp,4(sp)
   92f3c:	dc000017 	ldw	r16,0(sp)
   92f40:	dec00304 	addi	sp,sp,12
   92f44:	f800283a 	ret

00092f48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   92f48:	defffb04 	addi	sp,sp,-20
   92f4c:	dfc00415 	stw	ra,16(sp)
   92f50:	df000315 	stw	fp,12(sp)
   92f54:	df000304 	addi	fp,sp,12
   92f58:	e13ffd15 	stw	r4,-12(fp)
   92f5c:	e17ffe15 	stw	r5,-8(fp)
   92f60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   92f64:	01c07fc4 	movi	r7,511
   92f68:	01800044 	movi	r6,1
   92f6c:	e17ffd17 	ldw	r5,-12(fp)
   92f70:	01000474 	movhi	r4,17
   92f74:	21223604 	addi	r4,r4,-30504
   92f78:	0092e640 	call	92e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   92f7c:	01c07fc4 	movi	r7,511
   92f80:	000d883a 	mov	r6,zero
   92f84:	e17ffe17 	ldw	r5,-8(fp)
   92f88:	01000474 	movhi	r4,17
   92f8c:	21223304 	addi	r4,r4,-30516
   92f90:	0092e640 	call	92e64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   92f94:	01c07fc4 	movi	r7,511
   92f98:	01800044 	movi	r6,1
   92f9c:	e17fff17 	ldw	r5,-4(fp)
   92fa0:	01000474 	movhi	r4,17
   92fa4:	21223904 	addi	r4,r4,-30492
   92fa8:	0092e640 	call	92e64 <alt_open_fd>
}  
   92fac:	0001883a 	nop
   92fb0:	e037883a 	mov	sp,fp
   92fb4:	dfc00117 	ldw	ra,4(sp)
   92fb8:	df000017 	ldw	fp,0(sp)
   92fbc:	dec00204 	addi	sp,sp,8
   92fc0:	f800283a 	ret

00092fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92fc4:	defffe04 	addi	sp,sp,-8
   92fc8:	dfc00115 	stw	ra,4(sp)
   92fcc:	df000015 	stw	fp,0(sp)
   92fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   92fd4:	d0a00b17 	ldw	r2,-32724(gp)
   92fd8:	10000326 	beq	r2,zero,92fe8 <alt_get_errno+0x24>
   92fdc:	d0a00b17 	ldw	r2,-32724(gp)
   92fe0:	103ee83a 	callr	r2
   92fe4:	00000106 	br	92fec <alt_get_errno+0x28>
   92fe8:	d0a01c04 	addi	r2,gp,-32656
}
   92fec:	e037883a 	mov	sp,fp
   92ff0:	dfc00117 	ldw	ra,4(sp)
   92ff4:	df000017 	ldw	fp,0(sp)
   92ff8:	dec00204 	addi	sp,sp,8
   92ffc:	f800283a 	ret

00093000 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   93000:	defffb04 	addi	sp,sp,-20
   93004:	dfc00415 	stw	ra,16(sp)
   93008:	df000315 	stw	fp,12(sp)
   9300c:	dc000215 	stw	r16,8(sp)
   93010:	df000304 	addi	fp,sp,12
   93014:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   93018:	e0bffe17 	ldw	r2,-8(fp)
   9301c:	10800217 	ldw	r2,8(r2)
   93020:	10d00034 	orhi	r3,r2,16384
   93024:	e0bffe17 	ldw	r2,-8(fp)
   93028:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9302c:	e03ffd15 	stw	zero,-12(fp)
   93030:	00002306 	br	930c0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   93034:	04000474 	movhi	r16,17
   93038:	84223304 	addi	r16,r16,-30516
   9303c:	e0bffd17 	ldw	r2,-12(fp)
   93040:	01400304 	movi	r5,12
   93044:	1009883a 	mov	r4,r2
   93048:	00817900 	call	81790 <__mulsi3>
   9304c:	8085883a 	add	r2,r16,r2
   93050:	10c00017 	ldw	r3,0(r2)
   93054:	e0bffe17 	ldw	r2,-8(fp)
   93058:	10800017 	ldw	r2,0(r2)
   9305c:	1880151e 	bne	r3,r2,930b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   93060:	04000474 	movhi	r16,17
   93064:	84223304 	addi	r16,r16,-30516
   93068:	e0bffd17 	ldw	r2,-12(fp)
   9306c:	01400304 	movi	r5,12
   93070:	1009883a 	mov	r4,r2
   93074:	00817900 	call	81790 <__mulsi3>
   93078:	8085883a 	add	r2,r16,r2
   9307c:	10800204 	addi	r2,r2,8
   93080:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   93084:	10000b0e 	bge	r2,zero,930b4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   93088:	01400304 	movi	r5,12
   9308c:	e13ffd17 	ldw	r4,-12(fp)
   93090:	00817900 	call	81790 <__mulsi3>
   93094:	1007883a 	mov	r3,r2
   93098:	00800474 	movhi	r2,17
   9309c:	10a23304 	addi	r2,r2,-30516
   930a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   930a4:	e0bffe17 	ldw	r2,-8(fp)
   930a8:	18800226 	beq	r3,r2,930b4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   930ac:	00bffcc4 	movi	r2,-13
   930b0:	00000806 	br	930d4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   930b4:	e0bffd17 	ldw	r2,-12(fp)
   930b8:	10800044 	addi	r2,r2,1
   930bc:	e0bffd15 	stw	r2,-12(fp)
   930c0:	d0a00a17 	ldw	r2,-32728(gp)
   930c4:	1007883a 	mov	r3,r2
   930c8:	e0bffd17 	ldw	r2,-12(fp)
   930cc:	18bfd92e 	bgeu	r3,r2,93034 <_gp+0xfff81450>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   930d0:	0005883a 	mov	r2,zero
}
   930d4:	e6ffff04 	addi	sp,fp,-4
   930d8:	dfc00217 	ldw	ra,8(sp)
   930dc:	df000117 	ldw	fp,4(sp)
   930e0:	dc000017 	ldw	r16,0(sp)
   930e4:	dec00304 	addi	sp,sp,12
   930e8:	f800283a 	ret

000930ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   930ec:	defff604 	addi	sp,sp,-40
   930f0:	dfc00915 	stw	ra,36(sp)
   930f4:	df000815 	stw	fp,32(sp)
   930f8:	df000804 	addi	fp,sp,32
   930fc:	e13ffd15 	stw	r4,-12(fp)
   93100:	e17ffe15 	stw	r5,-8(fp)
   93104:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   93108:	00bfffc4 	movi	r2,-1
   9310c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   93110:	00bffb44 	movi	r2,-19
   93114:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   93118:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9311c:	d1600804 	addi	r5,gp,-32736
   93120:	e13ffd17 	ldw	r4,-12(fp)
   93124:	0092a580 	call	92a58 <alt_find_dev>
   93128:	e0bff815 	stw	r2,-32(fp)
   9312c:	e0bff817 	ldw	r2,-32(fp)
   93130:	1000051e 	bne	r2,zero,93148 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   93134:	e13ffd17 	ldw	r4,-12(fp)
   93138:	00936780 	call	93678 <alt_find_file>
   9313c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   93140:	00800044 	movi	r2,1
   93144:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   93148:	e0bff817 	ldw	r2,-32(fp)
   9314c:	10002b26 	beq	r2,zero,931fc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   93150:	e13ff817 	ldw	r4,-32(fp)
   93154:	00937800 	call	93780 <alt_get_fd>
   93158:	e0bff915 	stw	r2,-28(fp)
   9315c:	e0bff917 	ldw	r2,-28(fp)
   93160:	1000030e 	bge	r2,zero,93170 <open+0x84>
    {
      status = index;
   93164:	e0bff917 	ldw	r2,-28(fp)
   93168:	e0bffa15 	stw	r2,-24(fp)
   9316c:	00002506 	br	93204 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   93170:	01400304 	movi	r5,12
   93174:	e13ff917 	ldw	r4,-28(fp)
   93178:	00817900 	call	81790 <__mulsi3>
   9317c:	1007883a 	mov	r3,r2
   93180:	00800474 	movhi	r2,17
   93184:	10a23304 	addi	r2,r2,-30516
   93188:	1885883a 	add	r2,r3,r2
   9318c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   93190:	e0fffe17 	ldw	r3,-8(fp)
   93194:	00900034 	movhi	r2,16384
   93198:	10bfffc4 	addi	r2,r2,-1
   9319c:	1886703a 	and	r3,r3,r2
   931a0:	e0bffc17 	ldw	r2,-16(fp)
   931a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   931a8:	e0bffb17 	ldw	r2,-20(fp)
   931ac:	1000051e 	bne	r2,zero,931c4 <open+0xd8>
   931b0:	e13ffc17 	ldw	r4,-16(fp)
   931b4:	00930000 	call	93000 <alt_file_locked>
   931b8:	e0bffa15 	stw	r2,-24(fp)
   931bc:	e0bffa17 	ldw	r2,-24(fp)
   931c0:	10001016 	blt	r2,zero,93204 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   931c4:	e0bff817 	ldw	r2,-32(fp)
   931c8:	10800317 	ldw	r2,12(r2)
   931cc:	10000826 	beq	r2,zero,931f0 <open+0x104>
   931d0:	e0bff817 	ldw	r2,-32(fp)
   931d4:	10800317 	ldw	r2,12(r2)
   931d8:	e1ffff17 	ldw	r7,-4(fp)
   931dc:	e1bffe17 	ldw	r6,-8(fp)
   931e0:	e17ffd17 	ldw	r5,-12(fp)
   931e4:	e13ffc17 	ldw	r4,-16(fp)
   931e8:	103ee83a 	callr	r2
   931ec:	00000106 	br	931f4 <open+0x108>
   931f0:	0005883a 	mov	r2,zero
   931f4:	e0bffa15 	stw	r2,-24(fp)
   931f8:	00000206 	br	93204 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   931fc:	00bffb44 	movi	r2,-19
   93200:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   93204:	e0bffa17 	ldw	r2,-24(fp)
   93208:	1000090e 	bge	r2,zero,93230 <open+0x144>
  {
    alt_release_fd (index);  
   9320c:	e13ff917 	ldw	r4,-28(fp)
   93210:	008ebdc0 	call	8ebdc <alt_release_fd>
    ALT_ERRNO = -status;
   93214:	0092fc40 	call	92fc4 <alt_get_errno>
   93218:	1007883a 	mov	r3,r2
   9321c:	e0bffa17 	ldw	r2,-24(fp)
   93220:	0085c83a 	sub	r2,zero,r2
   93224:	18800015 	stw	r2,0(r3)
    return -1;
   93228:	00bfffc4 	movi	r2,-1
   9322c:	00000106 	br	93234 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   93230:	e0bff917 	ldw	r2,-28(fp)
}
   93234:	e037883a 	mov	sp,fp
   93238:	dfc00117 	ldw	ra,4(sp)
   9323c:	df000017 	ldw	fp,0(sp)
   93240:	dec00204 	addi	sp,sp,8
   93244:	f800283a 	ret

00093248 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   93248:	defff204 	addi	sp,sp,-56
   9324c:	dfc00a15 	stw	ra,40(sp)
   93250:	df000915 	stw	fp,36(sp)
   93254:	df000904 	addi	fp,sp,36
   93258:	e13fff15 	stw	r4,-4(fp)
   9325c:	e1400215 	stw	r5,8(fp)
   93260:	e1800315 	stw	r6,12(fp)
   93264:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   93268:	e0800204 	addi	r2,fp,8
   9326c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   93270:	e0bfff17 	ldw	r2,-4(fp)
   93274:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   93278:	00006f06 	br	93438 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   9327c:	e0bff807 	ldb	r2,-32(fp)
   93280:	10800960 	cmpeqi	r2,r2,37
   93284:	1000041e 	bne	r2,zero,93298 <alt_printf+0x50>
        {
            alt_putchar(c);
   93288:	e0bff807 	ldb	r2,-32(fp)
   9328c:	1009883a 	mov	r4,r2
   93290:	00934740 	call	93474 <alt_putchar>
   93294:	00006806 	br	93438 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   93298:	e0bff717 	ldw	r2,-36(fp)
   9329c:	10c00044 	addi	r3,r2,1
   932a0:	e0fff715 	stw	r3,-36(fp)
   932a4:	10800003 	ldbu	r2,0(r2)
   932a8:	e0bff805 	stb	r2,-32(fp)
   932ac:	e0bff807 	ldb	r2,-32(fp)
   932b0:	10006926 	beq	r2,zero,93458 <alt_printf+0x210>
            {
                if (c == '%')
   932b4:	e0bff807 	ldb	r2,-32(fp)
   932b8:	10800958 	cmpnei	r2,r2,37
   932bc:	1000041e 	bne	r2,zero,932d0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   932c0:	e0bff807 	ldb	r2,-32(fp)
   932c4:	1009883a 	mov	r4,r2
   932c8:	00934740 	call	93474 <alt_putchar>
   932cc:	00005a06 	br	93438 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   932d0:	e0bff807 	ldb	r2,-32(fp)
   932d4:	108018d8 	cmpnei	r2,r2,99
   932d8:	1000081e 	bne	r2,zero,932fc <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   932dc:	e0bffe17 	ldw	r2,-8(fp)
   932e0:	10c00104 	addi	r3,r2,4
   932e4:	e0fffe15 	stw	r3,-8(fp)
   932e8:	10800017 	ldw	r2,0(r2)
   932ec:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   932f0:	e13ffd17 	ldw	r4,-12(fp)
   932f4:	00934740 	call	93474 <alt_putchar>
   932f8:	00004f06 	br	93438 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   932fc:	e0bff807 	ldb	r2,-32(fp)
   93300:	10801e18 	cmpnei	r2,r2,120
   93304:	1000341e 	bne	r2,zero,933d8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   93308:	e0bffe17 	ldw	r2,-8(fp)
   9330c:	10c00104 	addi	r3,r2,4
   93310:	e0fffe15 	stw	r3,-8(fp)
   93314:	10800017 	ldw	r2,0(r2)
   93318:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   9331c:	e0bffb17 	ldw	r2,-20(fp)
   93320:	1000031e 	bne	r2,zero,93330 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   93324:	01000c04 	movi	r4,48
   93328:	00934740 	call	93474 <alt_putchar>
                        continue;
   9332c:	00004206 	br	93438 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   93330:	00800704 	movi	r2,28
   93334:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   93338:	00000306 	br	93348 <alt_printf+0x100>
                        digit_shift -= 4;
   9333c:	e0bff917 	ldw	r2,-28(fp)
   93340:	10bfff04 	addi	r2,r2,-4
   93344:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   93348:	00c003c4 	movi	r3,15
   9334c:	e0bff917 	ldw	r2,-28(fp)
   93350:	1884983a 	sll	r2,r3,r2
   93354:	1007883a 	mov	r3,r2
   93358:	e0bffb17 	ldw	r2,-20(fp)
   9335c:	1884703a 	and	r2,r3,r2
   93360:	103ff626 	beq	r2,zero,9333c <_gp+0xfff81758>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   93364:	00001906 	br	933cc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   93368:	00c003c4 	movi	r3,15
   9336c:	e0bff917 	ldw	r2,-28(fp)
   93370:	1884983a 	sll	r2,r3,r2
   93374:	1007883a 	mov	r3,r2
   93378:	e0bffb17 	ldw	r2,-20(fp)
   9337c:	1886703a 	and	r3,r3,r2
   93380:	e0bff917 	ldw	r2,-28(fp)
   93384:	1884d83a 	srl	r2,r3,r2
   93388:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   9338c:	e0bffc17 	ldw	r2,-16(fp)
   93390:	108002a8 	cmpgeui	r2,r2,10
   93394:	1000041e 	bne	r2,zero,933a8 <alt_printf+0x160>
                            c = '0' + digit;
   93398:	e0bffc17 	ldw	r2,-16(fp)
   9339c:	10800c04 	addi	r2,r2,48
   933a0:	e0bff805 	stb	r2,-32(fp)
   933a4:	00000306 	br	933b4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   933a8:	e0bffc17 	ldw	r2,-16(fp)
   933ac:	108015c4 	addi	r2,r2,87
   933b0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   933b4:	e0bff807 	ldb	r2,-32(fp)
   933b8:	1009883a 	mov	r4,r2
   933bc:	00934740 	call	93474 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   933c0:	e0bff917 	ldw	r2,-28(fp)
   933c4:	10bfff04 	addi	r2,r2,-4
   933c8:	e0bff915 	stw	r2,-28(fp)
   933cc:	e0bff917 	ldw	r2,-28(fp)
   933d0:	103fe50e 	bge	r2,zero,93368 <_gp+0xfff81784>
   933d4:	00001806 	br	93438 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   933d8:	e0bff807 	ldb	r2,-32(fp)
   933dc:	10801cd8 	cmpnei	r2,r2,115
   933e0:	1000151e 	bne	r2,zero,93438 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   933e4:	e0bffe17 	ldw	r2,-8(fp)
   933e8:	10c00104 	addi	r3,r2,4
   933ec:	e0fffe15 	stw	r3,-8(fp)
   933f0:	10800017 	ldw	r2,0(r2)
   933f4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   933f8:	00000906 	br	93420 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   933fc:	e0bffa17 	ldw	r2,-24(fp)
   93400:	10c00044 	addi	r3,r2,1
   93404:	e0fffa15 	stw	r3,-24(fp)
   93408:	10800003 	ldbu	r2,0(r2)
   9340c:	10803fcc 	andi	r2,r2,255
   93410:	1080201c 	xori	r2,r2,128
   93414:	10bfe004 	addi	r2,r2,-128
   93418:	1009883a 	mov	r4,r2
   9341c:	00934740 	call	93474 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   93420:	e0bffa17 	ldw	r2,-24(fp)
   93424:	10800003 	ldbu	r2,0(r2)
   93428:	10803fcc 	andi	r2,r2,255
   9342c:	1080201c 	xori	r2,r2,128
   93430:	10bfe004 	addi	r2,r2,-128
   93434:	103ff11e 	bne	r2,zero,933fc <_gp+0xfff81818>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   93438:	e0bff717 	ldw	r2,-36(fp)
   9343c:	10c00044 	addi	r3,r2,1
   93440:	e0fff715 	stw	r3,-36(fp)
   93444:	10800003 	ldbu	r2,0(r2)
   93448:	e0bff805 	stb	r2,-32(fp)
   9344c:	e0bff807 	ldb	r2,-32(fp)
   93450:	103f8a1e 	bne	r2,zero,9327c <_gp+0xfff81698>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   93454:	00000106 	br	9345c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   93458:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   9345c:	0001883a 	nop
   93460:	e037883a 	mov	sp,fp
   93464:	dfc00117 	ldw	ra,4(sp)
   93468:	df000017 	ldw	fp,0(sp)
   9346c:	dec00504 	addi	sp,sp,20
   93470:	f800283a 	ret

00093474 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   93474:	defffd04 	addi	sp,sp,-12
   93478:	dfc00215 	stw	ra,8(sp)
   9347c:	df000115 	stw	fp,4(sp)
   93480:	df000104 	addi	fp,sp,4
   93484:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   93488:	d0a00117 	ldw	r2,-32764(gp)
   9348c:	10800217 	ldw	r2,8(r2)
   93490:	100b883a 	mov	r5,r2
   93494:	e13fff17 	ldw	r4,-4(fp)
   93498:	0093a480 	call	93a48 <putc>
#endif
#endif
}
   9349c:	e037883a 	mov	sp,fp
   934a0:	dfc00117 	ldw	ra,4(sp)
   934a4:	df000017 	ldw	fp,0(sp)
   934a8:	dec00204 	addi	sp,sp,8
   934ac:	f800283a 	ret

000934b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   934b0:	defffa04 	addi	sp,sp,-24
   934b4:	df000515 	stw	fp,20(sp)
   934b8:	df000504 	addi	fp,sp,20
   934bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   934c0:	0005303a 	rdctl	r2,status
   934c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   934c8:	e0fffc17 	ldw	r3,-16(fp)
   934cc:	00bfff84 	movi	r2,-2
   934d0:	1884703a 	and	r2,r3,r2
   934d4:	1001703a 	wrctl	status,r2
  
  return context;
   934d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   934dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   934e0:	e0bfff17 	ldw	r2,-4(fp)
   934e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   934e8:	e0bffd17 	ldw	r2,-12(fp)
   934ec:	10800017 	ldw	r2,0(r2)
   934f0:	e0fffd17 	ldw	r3,-12(fp)
   934f4:	18c00117 	ldw	r3,4(r3)
   934f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   934fc:	e0bffd17 	ldw	r2,-12(fp)
   93500:	10800117 	ldw	r2,4(r2)
   93504:	e0fffd17 	ldw	r3,-12(fp)
   93508:	18c00017 	ldw	r3,0(r3)
   9350c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   93510:	e0bffd17 	ldw	r2,-12(fp)
   93514:	e0fffd17 	ldw	r3,-12(fp)
   93518:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   9351c:	e0bffd17 	ldw	r2,-12(fp)
   93520:	e0fffd17 	ldw	r3,-12(fp)
   93524:	10c00015 	stw	r3,0(r2)
   93528:	e0bffb17 	ldw	r2,-20(fp)
   9352c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93530:	e0bffe17 	ldw	r2,-8(fp)
   93534:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   93538:	0001883a 	nop
   9353c:	e037883a 	mov	sp,fp
   93540:	df000017 	ldw	fp,0(sp)
   93544:	dec00104 	addi	sp,sp,4
   93548:	f800283a 	ret

0009354c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9354c:	defffb04 	addi	sp,sp,-20
   93550:	dfc00415 	stw	ra,16(sp)
   93554:	df000315 	stw	fp,12(sp)
   93558:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   9355c:	d0a01417 	ldw	r2,-32688(gp)
   93560:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   93564:	d0a02217 	ldw	r2,-32632(gp)
   93568:	10800044 	addi	r2,r2,1
   9356c:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   93570:	00002e06 	br	9362c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   93574:	e0bffd17 	ldw	r2,-12(fp)
   93578:	10800017 	ldw	r2,0(r2)
   9357c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   93580:	e0bffd17 	ldw	r2,-12(fp)
   93584:	10800403 	ldbu	r2,16(r2)
   93588:	10803fcc 	andi	r2,r2,255
   9358c:	10000426 	beq	r2,zero,935a0 <alt_tick+0x54>
   93590:	d0a02217 	ldw	r2,-32632(gp)
   93594:	1000021e 	bne	r2,zero,935a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   93598:	e0bffd17 	ldw	r2,-12(fp)
   9359c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   935a0:	e0bffd17 	ldw	r2,-12(fp)
   935a4:	10800217 	ldw	r2,8(r2)
   935a8:	d0e02217 	ldw	r3,-32632(gp)
   935ac:	18801d36 	bltu	r3,r2,93624 <alt_tick+0xd8>
   935b0:	e0bffd17 	ldw	r2,-12(fp)
   935b4:	10800403 	ldbu	r2,16(r2)
   935b8:	10803fcc 	andi	r2,r2,255
   935bc:	1000191e 	bne	r2,zero,93624 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   935c0:	e0bffd17 	ldw	r2,-12(fp)
   935c4:	10800317 	ldw	r2,12(r2)
   935c8:	e0fffd17 	ldw	r3,-12(fp)
   935cc:	18c00517 	ldw	r3,20(r3)
   935d0:	1809883a 	mov	r4,r3
   935d4:	103ee83a 	callr	r2
   935d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   935dc:	e0bfff17 	ldw	r2,-4(fp)
   935e0:	1000031e 	bne	r2,zero,935f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   935e4:	e13ffd17 	ldw	r4,-12(fp)
   935e8:	00934b00 	call	934b0 <alt_alarm_stop>
   935ec:	00000d06 	br	93624 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   935f0:	e0bffd17 	ldw	r2,-12(fp)
   935f4:	10c00217 	ldw	r3,8(r2)
   935f8:	e0bfff17 	ldw	r2,-4(fp)
   935fc:	1887883a 	add	r3,r3,r2
   93600:	e0bffd17 	ldw	r2,-12(fp)
   93604:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   93608:	e0bffd17 	ldw	r2,-12(fp)
   9360c:	10c00217 	ldw	r3,8(r2)
   93610:	d0a02217 	ldw	r2,-32632(gp)
   93614:	1880032e 	bgeu	r3,r2,93624 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   93618:	e0bffd17 	ldw	r2,-12(fp)
   9361c:	00c00044 	movi	r3,1
   93620:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   93624:	e0bffe17 	ldw	r2,-8(fp)
   93628:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9362c:	e0fffd17 	ldw	r3,-12(fp)
   93630:	d0a01404 	addi	r2,gp,-32688
   93634:	18bfcf1e 	bne	r3,r2,93574 <_gp+0xfff81990>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   93638:	0001883a 	nop
}
   9363c:	0001883a 	nop
   93640:	e037883a 	mov	sp,fp
   93644:	dfc00117 	ldw	ra,4(sp)
   93648:	df000017 	ldw	fp,0(sp)
   9364c:	dec00204 	addi	sp,sp,8
   93650:	f800283a 	ret

00093654 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   93654:	deffff04 	addi	sp,sp,-4
   93658:	df000015 	stw	fp,0(sp)
   9365c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   93660:	000170fa 	wrctl	ienable,zero
}
   93664:	0001883a 	nop
   93668:	e037883a 	mov	sp,fp
   9366c:	df000017 	ldw	fp,0(sp)
   93670:	dec00104 	addi	sp,sp,4
   93674:	f800283a 	ret

00093678 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   93678:	defffb04 	addi	sp,sp,-20
   9367c:	dfc00415 	stw	ra,16(sp)
   93680:	df000315 	stw	fp,12(sp)
   93684:	df000304 	addi	fp,sp,12
   93688:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9368c:	d0a00617 	ldw	r2,-32744(gp)
   93690:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   93694:	00003106 	br	9375c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   93698:	e0bffd17 	ldw	r2,-12(fp)
   9369c:	10800217 	ldw	r2,8(r2)
   936a0:	1009883a 	mov	r4,r2
   936a4:	00818f80 	call	818f8 <strlen>
   936a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   936ac:	e0bffd17 	ldw	r2,-12(fp)
   936b0:	10c00217 	ldw	r3,8(r2)
   936b4:	e0bffe17 	ldw	r2,-8(fp)
   936b8:	10bfffc4 	addi	r2,r2,-1
   936bc:	1885883a 	add	r2,r3,r2
   936c0:	10800003 	ldbu	r2,0(r2)
   936c4:	10803fcc 	andi	r2,r2,255
   936c8:	1080201c 	xori	r2,r2,128
   936cc:	10bfe004 	addi	r2,r2,-128
   936d0:	10800bd8 	cmpnei	r2,r2,47
   936d4:	1000031e 	bne	r2,zero,936e4 <alt_find_file+0x6c>
    {
      len -= 1;
   936d8:	e0bffe17 	ldw	r2,-8(fp)
   936dc:	10bfffc4 	addi	r2,r2,-1
   936e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   936e4:	e0bffe17 	ldw	r2,-8(fp)
   936e8:	e0ffff17 	ldw	r3,-4(fp)
   936ec:	1885883a 	add	r2,r3,r2
   936f0:	10800003 	ldbu	r2,0(r2)
   936f4:	10803fcc 	andi	r2,r2,255
   936f8:	1080201c 	xori	r2,r2,128
   936fc:	10bfe004 	addi	r2,r2,-128
   93700:	10800be0 	cmpeqi	r2,r2,47
   93704:	1000081e 	bne	r2,zero,93728 <alt_find_file+0xb0>
   93708:	e0bffe17 	ldw	r2,-8(fp)
   9370c:	e0ffff17 	ldw	r3,-4(fp)
   93710:	1885883a 	add	r2,r3,r2
   93714:	10800003 	ldbu	r2,0(r2)
   93718:	10803fcc 	andi	r2,r2,255
   9371c:	1080201c 	xori	r2,r2,128
   93720:	10bfe004 	addi	r2,r2,-128
   93724:	10000a1e 	bne	r2,zero,93750 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   93728:	e0bffd17 	ldw	r2,-12(fp)
   9372c:	10800217 	ldw	r2,8(r2)
   93730:	e0fffe17 	ldw	r3,-8(fp)
   93734:	180d883a 	mov	r6,r3
   93738:	e17fff17 	ldw	r5,-4(fp)
   9373c:	1009883a 	mov	r4,r2
   93740:	009392c0 	call	9392c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   93744:	1000021e 	bne	r2,zero,93750 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   93748:	e0bffd17 	ldw	r2,-12(fp)
   9374c:	00000706 	br	9376c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   93750:	e0bffd17 	ldw	r2,-12(fp)
   93754:	10800017 	ldw	r2,0(r2)
   93758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9375c:	e0fffd17 	ldw	r3,-12(fp)
   93760:	d0a00604 	addi	r2,gp,-32744
   93764:	18bfcc1e 	bne	r3,r2,93698 <_gp+0xfff81ab4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   93768:	0005883a 	mov	r2,zero
}
   9376c:	e037883a 	mov	sp,fp
   93770:	dfc00117 	ldw	ra,4(sp)
   93774:	df000017 	ldw	fp,0(sp)
   93778:	dec00204 	addi	sp,sp,8
   9377c:	f800283a 	ret

00093780 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   93780:	defffa04 	addi	sp,sp,-24
   93784:	dfc00515 	stw	ra,20(sp)
   93788:	df000415 	stw	fp,16(sp)
   9378c:	dc000315 	stw	r16,12(sp)
   93790:	df000404 	addi	fp,sp,16
   93794:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   93798:	00bffa04 	movi	r2,-24
   9379c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   937a0:	e03ffc15 	stw	zero,-16(fp)
   937a4:	00001d06 	br	9381c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   937a8:	04000474 	movhi	r16,17
   937ac:	84223304 	addi	r16,r16,-30516
   937b0:	e0bffc17 	ldw	r2,-16(fp)
   937b4:	01400304 	movi	r5,12
   937b8:	1009883a 	mov	r4,r2
   937bc:	00817900 	call	81790 <__mulsi3>
   937c0:	8085883a 	add	r2,r16,r2
   937c4:	10800017 	ldw	r2,0(r2)
   937c8:	1000111e 	bne	r2,zero,93810 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   937cc:	04000474 	movhi	r16,17
   937d0:	84223304 	addi	r16,r16,-30516
   937d4:	e0bffc17 	ldw	r2,-16(fp)
   937d8:	01400304 	movi	r5,12
   937dc:	1009883a 	mov	r4,r2
   937e0:	00817900 	call	81790 <__mulsi3>
   937e4:	8085883a 	add	r2,r16,r2
   937e8:	e0fffe17 	ldw	r3,-8(fp)
   937ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   937f0:	d0e00a17 	ldw	r3,-32728(gp)
   937f4:	e0bffc17 	ldw	r2,-16(fp)
   937f8:	1880020e 	bge	r3,r2,93804 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   937fc:	e0bffc17 	ldw	r2,-16(fp)
   93800:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   93804:	e0bffc17 	ldw	r2,-16(fp)
   93808:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   9380c:	00000606 	br	93828 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93810:	e0bffc17 	ldw	r2,-16(fp)
   93814:	10800044 	addi	r2,r2,1
   93818:	e0bffc15 	stw	r2,-16(fp)
   9381c:	e0bffc17 	ldw	r2,-16(fp)
   93820:	10800810 	cmplti	r2,r2,32
   93824:	103fe01e 	bne	r2,zero,937a8 <_gp+0xfff81bc4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   93828:	e0bffd17 	ldw	r2,-12(fp)
}
   9382c:	e6ffff04 	addi	sp,fp,-4
   93830:	dfc00217 	ldw	ra,8(sp)
   93834:	df000117 	ldw	fp,4(sp)
   93838:	dc000017 	ldw	r16,0(sp)
   9383c:	dec00304 	addi	sp,sp,12
   93840:	f800283a 	ret

00093844 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   93844:	defffe04 	addi	sp,sp,-8
   93848:	df000115 	stw	fp,4(sp)
   9384c:	df000104 	addi	fp,sp,4
   93850:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   93854:	e0bfff17 	ldw	r2,-4(fp)
   93858:	10bffe84 	addi	r2,r2,-6
   9385c:	10c00428 	cmpgeui	r3,r2,16
   93860:	18001a1e 	bne	r3,zero,938cc <alt_exception_cause_generated_bad_addr+0x88>
   93864:	100690ba 	slli	r3,r2,2
   93868:	00800274 	movhi	r2,9
   9386c:	108e1f04 	addi	r2,r2,14460
   93870:	1885883a 	add	r2,r3,r2
   93874:	10800017 	ldw	r2,0(r2)
   93878:	1000683a 	jmp	r2
   9387c:	000938bc 	xorhi	zero,zero,9442
   93880:	000938bc 	xorhi	zero,zero,9442
   93884:	000938cc 	andi	zero,zero,9443
   93888:	000938cc 	andi	zero,zero,9443
   9388c:	000938cc 	andi	zero,zero,9443
   93890:	000938bc 	xorhi	zero,zero,9442
   93894:	000938c4 	movi	zero,9443
   93898:	000938cc 	andi	zero,zero,9443
   9389c:	000938bc 	xorhi	zero,zero,9442
   938a0:	000938bc 	xorhi	zero,zero,9442
   938a4:	000938cc 	andi	zero,zero,9443
   938a8:	000938bc 	xorhi	zero,zero,9442
   938ac:	000938c4 	movi	zero,9443
   938b0:	000938cc 	andi	zero,zero,9443
   938b4:	000938cc 	andi	zero,zero,9443
   938b8:	000938bc 	xorhi	zero,zero,9442
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   938bc:	00800044 	movi	r2,1
   938c0:	00000306 	br	938d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   938c4:	0005883a 	mov	r2,zero
   938c8:	00000106 	br	938d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   938cc:	0005883a 	mov	r2,zero
  }
}
   938d0:	e037883a 	mov	sp,fp
   938d4:	df000017 	ldw	fp,0(sp)
   938d8:	dec00104 	addi	sp,sp,4
   938dc:	f800283a 	ret

000938e0 <atexit>:
   938e0:	200b883a 	mov	r5,r4
   938e4:	000f883a 	mov	r7,zero
   938e8:	000d883a 	mov	r6,zero
   938ec:	0009883a 	mov	r4,zero
   938f0:	0093b101 	jmpi	93b10 <__register_exitproc>

000938f4 <exit>:
   938f4:	defffe04 	addi	sp,sp,-8
   938f8:	000b883a 	mov	r5,zero
   938fc:	dc000015 	stw	r16,0(sp)
   93900:	dfc00115 	stw	ra,4(sp)
   93904:	2021883a 	mov	r16,r4
   93908:	0093c280 	call	93c28 <__call_exitprocs>
   9390c:	00800474 	movhi	r2,17
   93910:	10a6f904 	addi	r2,r2,-25628
   93914:	11000017 	ldw	r4,0(r2)
   93918:	20800f17 	ldw	r2,60(r4)
   9391c:	10000126 	beq	r2,zero,93924 <exit+0x30>
   93920:	103ee83a 	callr	r2
   93924:	8009883a 	mov	r4,r16
   93928:	0093da80 	call	93da8 <_exit>

0009392c <memcmp>:
   9392c:	01c000c4 	movi	r7,3
   93930:	3980192e 	bgeu	r7,r6,93998 <memcmp+0x6c>
   93934:	2144b03a 	or	r2,r4,r5
   93938:	11c4703a 	and	r2,r2,r7
   9393c:	10000f26 	beq	r2,zero,9397c <memcmp+0x50>
   93940:	20800003 	ldbu	r2,0(r4)
   93944:	28c00003 	ldbu	r3,0(r5)
   93948:	10c0151e 	bne	r2,r3,939a0 <memcmp+0x74>
   9394c:	31bfff84 	addi	r6,r6,-2
   93950:	01ffffc4 	movi	r7,-1
   93954:	00000406 	br	93968 <memcmp+0x3c>
   93958:	20800003 	ldbu	r2,0(r4)
   9395c:	28c00003 	ldbu	r3,0(r5)
   93960:	31bfffc4 	addi	r6,r6,-1
   93964:	10c00e1e 	bne	r2,r3,939a0 <memcmp+0x74>
   93968:	21000044 	addi	r4,r4,1
   9396c:	29400044 	addi	r5,r5,1
   93970:	31fff91e 	bne	r6,r7,93958 <_gp+0xfff81d74>
   93974:	0005883a 	mov	r2,zero
   93978:	f800283a 	ret
   9397c:	20c00017 	ldw	r3,0(r4)
   93980:	28800017 	ldw	r2,0(r5)
   93984:	18bfee1e 	bne	r3,r2,93940 <_gp+0xfff81d5c>
   93988:	31bfff04 	addi	r6,r6,-4
   9398c:	21000104 	addi	r4,r4,4
   93990:	29400104 	addi	r5,r5,4
   93994:	39bff936 	bltu	r7,r6,9397c <_gp+0xfff81d98>
   93998:	303fe91e 	bne	r6,zero,93940 <_gp+0xfff81d5c>
   9399c:	003ff506 	br	93974 <_gp+0xfff81d90>
   939a0:	10c5c83a 	sub	r2,r2,r3
   939a4:	f800283a 	ret

000939a8 <_putc_r>:
   939a8:	defffc04 	addi	sp,sp,-16
   939ac:	dc000215 	stw	r16,8(sp)
   939b0:	dfc00315 	stw	ra,12(sp)
   939b4:	2021883a 	mov	r16,r4
   939b8:	20000226 	beq	r4,zero,939c4 <_putc_r+0x1c>
   939bc:	20800e17 	ldw	r2,56(r4)
   939c0:	10001b26 	beq	r2,zero,93a30 <_putc_r+0x88>
   939c4:	30800217 	ldw	r2,8(r6)
   939c8:	10bfffc4 	addi	r2,r2,-1
   939cc:	30800215 	stw	r2,8(r6)
   939d0:	10000a16 	blt	r2,zero,939fc <_putc_r+0x54>
   939d4:	30800017 	ldw	r2,0(r6)
   939d8:	11400005 	stb	r5,0(r2)
   939dc:	30800017 	ldw	r2,0(r6)
   939e0:	10c00044 	addi	r3,r2,1
   939e4:	30c00015 	stw	r3,0(r6)
   939e8:	10800003 	ldbu	r2,0(r2)
   939ec:	dfc00317 	ldw	ra,12(sp)
   939f0:	dc000217 	ldw	r16,8(sp)
   939f4:	dec00404 	addi	sp,sp,16
   939f8:	f800283a 	ret
   939fc:	30c00617 	ldw	r3,24(r6)
   93a00:	10c00616 	blt	r2,r3,93a1c <_putc_r+0x74>
   93a04:	30800017 	ldw	r2,0(r6)
   93a08:	00c00284 	movi	r3,10
   93a0c:	11400005 	stb	r5,0(r2)
   93a10:	30800017 	ldw	r2,0(r6)
   93a14:	11400003 	ldbu	r5,0(r2)
   93a18:	28fff11e 	bne	r5,r3,939e0 <_gp+0xfff81dfc>
   93a1c:	8009883a 	mov	r4,r16
   93a20:	dfc00317 	ldw	ra,12(sp)
   93a24:	dc000217 	ldw	r16,8(sp)
   93a28:	dec00404 	addi	sp,sp,16
   93a2c:	008ad781 	jmpi	8ad78 <__swbuf_r>
   93a30:	d9400015 	stw	r5,0(sp)
   93a34:	d9800115 	stw	r6,4(sp)
   93a38:	0085d500 	call	85d50 <__sinit>
   93a3c:	d9800117 	ldw	r6,4(sp)
   93a40:	d9400017 	ldw	r5,0(sp)
   93a44:	003fdf06 	br	939c4 <_gp+0xfff81de0>

00093a48 <putc>:
   93a48:	00800474 	movhi	r2,17
   93a4c:	defffc04 	addi	sp,sp,-16
   93a50:	10a6fa04 	addi	r2,r2,-25624
   93a54:	dc000115 	stw	r16,4(sp)
   93a58:	14000017 	ldw	r16,0(r2)
   93a5c:	dc400215 	stw	r17,8(sp)
   93a60:	dfc00315 	stw	ra,12(sp)
   93a64:	2023883a 	mov	r17,r4
   93a68:	80000226 	beq	r16,zero,93a74 <putc+0x2c>
   93a6c:	80800e17 	ldw	r2,56(r16)
   93a70:	10001a26 	beq	r2,zero,93adc <putc+0x94>
   93a74:	28800217 	ldw	r2,8(r5)
   93a78:	10bfffc4 	addi	r2,r2,-1
   93a7c:	28800215 	stw	r2,8(r5)
   93a80:	10000b16 	blt	r2,zero,93ab0 <putc+0x68>
   93a84:	28800017 	ldw	r2,0(r5)
   93a88:	14400005 	stb	r17,0(r2)
   93a8c:	28800017 	ldw	r2,0(r5)
   93a90:	10c00044 	addi	r3,r2,1
   93a94:	28c00015 	stw	r3,0(r5)
   93a98:	10800003 	ldbu	r2,0(r2)
   93a9c:	dfc00317 	ldw	ra,12(sp)
   93aa0:	dc400217 	ldw	r17,8(sp)
   93aa4:	dc000117 	ldw	r16,4(sp)
   93aa8:	dec00404 	addi	sp,sp,16
   93aac:	f800283a 	ret
   93ab0:	28c00617 	ldw	r3,24(r5)
   93ab4:	10c00e16 	blt	r2,r3,93af0 <putc+0xa8>
   93ab8:	28800017 	ldw	r2,0(r5)
   93abc:	01000284 	movi	r4,10
   93ac0:	14400005 	stb	r17,0(r2)
   93ac4:	28800017 	ldw	r2,0(r5)
   93ac8:	10c00003 	ldbu	r3,0(r2)
   93acc:	193ff01e 	bne	r3,r4,93a90 <_gp+0xfff81eac>
   93ad0:	280d883a 	mov	r6,r5
   93ad4:	180b883a 	mov	r5,r3
   93ad8:	00000706 	br	93af8 <putc+0xb0>
   93adc:	8009883a 	mov	r4,r16
   93ae0:	d9400015 	stw	r5,0(sp)
   93ae4:	0085d500 	call	85d50 <__sinit>
   93ae8:	d9400017 	ldw	r5,0(sp)
   93aec:	003fe106 	br	93a74 <_gp+0xfff81e90>
   93af0:	280d883a 	mov	r6,r5
   93af4:	880b883a 	mov	r5,r17
   93af8:	8009883a 	mov	r4,r16
   93afc:	dfc00317 	ldw	ra,12(sp)
   93b00:	dc400217 	ldw	r17,8(sp)
   93b04:	dc000117 	ldw	r16,4(sp)
   93b08:	dec00404 	addi	sp,sp,16
   93b0c:	008ad781 	jmpi	8ad78 <__swbuf_r>

00093b10 <__register_exitproc>:
   93b10:	defffa04 	addi	sp,sp,-24
   93b14:	dc000315 	stw	r16,12(sp)
   93b18:	04000474 	movhi	r16,17
   93b1c:	8426f904 	addi	r16,r16,-25628
   93b20:	80c00017 	ldw	r3,0(r16)
   93b24:	dc400415 	stw	r17,16(sp)
   93b28:	dfc00515 	stw	ra,20(sp)
   93b2c:	18805217 	ldw	r2,328(r3)
   93b30:	2023883a 	mov	r17,r4
   93b34:	10003726 	beq	r2,zero,93c14 <__register_exitproc+0x104>
   93b38:	10c00117 	ldw	r3,4(r2)
   93b3c:	010007c4 	movi	r4,31
   93b40:	20c00e16 	blt	r4,r3,93b7c <__register_exitproc+0x6c>
   93b44:	1a000044 	addi	r8,r3,1
   93b48:	8800221e 	bne	r17,zero,93bd4 <__register_exitproc+0xc4>
   93b4c:	18c00084 	addi	r3,r3,2
   93b50:	18c7883a 	add	r3,r3,r3
   93b54:	18c7883a 	add	r3,r3,r3
   93b58:	12000115 	stw	r8,4(r2)
   93b5c:	10c7883a 	add	r3,r2,r3
   93b60:	19400015 	stw	r5,0(r3)
   93b64:	0005883a 	mov	r2,zero
   93b68:	dfc00517 	ldw	ra,20(sp)
   93b6c:	dc400417 	ldw	r17,16(sp)
   93b70:	dc000317 	ldw	r16,12(sp)
   93b74:	dec00604 	addi	sp,sp,24
   93b78:	f800283a 	ret
   93b7c:	00800034 	movhi	r2,0
   93b80:	10800004 	addi	r2,r2,0
   93b84:	10002626 	beq	r2,zero,93c20 <__register_exitproc+0x110>
   93b88:	01006404 	movi	r4,400
   93b8c:	d9400015 	stw	r5,0(sp)
   93b90:	d9800115 	stw	r6,4(sp)
   93b94:	d9c00215 	stw	r7,8(sp)
   93b98:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x80000>
   93b9c:	d9400017 	ldw	r5,0(sp)
   93ba0:	d9800117 	ldw	r6,4(sp)
   93ba4:	d9c00217 	ldw	r7,8(sp)
   93ba8:	10001d26 	beq	r2,zero,93c20 <__register_exitproc+0x110>
   93bac:	81000017 	ldw	r4,0(r16)
   93bb0:	10000115 	stw	zero,4(r2)
   93bb4:	02000044 	movi	r8,1
   93bb8:	22405217 	ldw	r9,328(r4)
   93bbc:	0007883a 	mov	r3,zero
   93bc0:	12400015 	stw	r9,0(r2)
   93bc4:	20805215 	stw	r2,328(r4)
   93bc8:	10006215 	stw	zero,392(r2)
   93bcc:	10006315 	stw	zero,396(r2)
   93bd0:	883fde26 	beq	r17,zero,93b4c <_gp+0xfff81f68>
   93bd4:	18c9883a 	add	r4,r3,r3
   93bd8:	2109883a 	add	r4,r4,r4
   93bdc:	1109883a 	add	r4,r2,r4
   93be0:	21802215 	stw	r6,136(r4)
   93be4:	01800044 	movi	r6,1
   93be8:	12406217 	ldw	r9,392(r2)
   93bec:	30cc983a 	sll	r6,r6,r3
   93bf0:	4992b03a 	or	r9,r9,r6
   93bf4:	12406215 	stw	r9,392(r2)
   93bf8:	21c04215 	stw	r7,264(r4)
   93bfc:	01000084 	movi	r4,2
   93c00:	893fd21e 	bne	r17,r4,93b4c <_gp+0xfff81f68>
   93c04:	11006317 	ldw	r4,396(r2)
   93c08:	218cb03a 	or	r6,r4,r6
   93c0c:	11806315 	stw	r6,396(r2)
   93c10:	003fce06 	br	93b4c <_gp+0xfff81f68>
   93c14:	18805304 	addi	r2,r3,332
   93c18:	18805215 	stw	r2,328(r3)
   93c1c:	003fc606 	br	93b38 <_gp+0xfff81f54>
   93c20:	00bfffc4 	movi	r2,-1
   93c24:	003fd006 	br	93b68 <_gp+0xfff81f84>

00093c28 <__call_exitprocs>:
   93c28:	defff504 	addi	sp,sp,-44
   93c2c:	df000915 	stw	fp,36(sp)
   93c30:	dd400615 	stw	r21,24(sp)
   93c34:	dc800315 	stw	r18,12(sp)
   93c38:	dfc00a15 	stw	ra,40(sp)
   93c3c:	ddc00815 	stw	r23,32(sp)
   93c40:	dd800715 	stw	r22,28(sp)
   93c44:	dd000515 	stw	r20,20(sp)
   93c48:	dcc00415 	stw	r19,16(sp)
   93c4c:	dc400215 	stw	r17,8(sp)
   93c50:	dc000115 	stw	r16,4(sp)
   93c54:	d9000015 	stw	r4,0(sp)
   93c58:	2839883a 	mov	fp,r5
   93c5c:	04800044 	movi	r18,1
   93c60:	057fffc4 	movi	r21,-1
   93c64:	00800474 	movhi	r2,17
   93c68:	10a6f904 	addi	r2,r2,-25628
   93c6c:	12000017 	ldw	r8,0(r2)
   93c70:	45005217 	ldw	r20,328(r8)
   93c74:	44c05204 	addi	r19,r8,328
   93c78:	a0001c26 	beq	r20,zero,93cec <__call_exitprocs+0xc4>
   93c7c:	a0800117 	ldw	r2,4(r20)
   93c80:	15ffffc4 	addi	r23,r2,-1
   93c84:	b8000d16 	blt	r23,zero,93cbc <__call_exitprocs+0x94>
   93c88:	14000044 	addi	r16,r2,1
   93c8c:	8421883a 	add	r16,r16,r16
   93c90:	8421883a 	add	r16,r16,r16
   93c94:	84402004 	addi	r17,r16,128
   93c98:	a463883a 	add	r17,r20,r17
   93c9c:	a421883a 	add	r16,r20,r16
   93ca0:	e0001e26 	beq	fp,zero,93d1c <__call_exitprocs+0xf4>
   93ca4:	80804017 	ldw	r2,256(r16)
   93ca8:	e0801c26 	beq	fp,r2,93d1c <__call_exitprocs+0xf4>
   93cac:	bdffffc4 	addi	r23,r23,-1
   93cb0:	843fff04 	addi	r16,r16,-4
   93cb4:	8c7fff04 	addi	r17,r17,-4
   93cb8:	bd7ff91e 	bne	r23,r21,93ca0 <_gp+0xfff820bc>
   93cbc:	00800034 	movhi	r2,0
   93cc0:	10800004 	addi	r2,r2,0
   93cc4:	10000926 	beq	r2,zero,93cec <__call_exitprocs+0xc4>
   93cc8:	a0800117 	ldw	r2,4(r20)
   93ccc:	1000301e 	bne	r2,zero,93d90 <__call_exitprocs+0x168>
   93cd0:	a0800017 	ldw	r2,0(r20)
   93cd4:	10003226 	beq	r2,zero,93da0 <__call_exitprocs+0x178>
   93cd8:	a009883a 	mov	r4,r20
   93cdc:	98800015 	stw	r2,0(r19)
   93ce0:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x80000>
   93ce4:	9d000017 	ldw	r20,0(r19)
   93ce8:	a03fe41e 	bne	r20,zero,93c7c <_gp+0xfff82098>
   93cec:	dfc00a17 	ldw	ra,40(sp)
   93cf0:	df000917 	ldw	fp,36(sp)
   93cf4:	ddc00817 	ldw	r23,32(sp)
   93cf8:	dd800717 	ldw	r22,28(sp)
   93cfc:	dd400617 	ldw	r21,24(sp)
   93d00:	dd000517 	ldw	r20,20(sp)
   93d04:	dcc00417 	ldw	r19,16(sp)
   93d08:	dc800317 	ldw	r18,12(sp)
   93d0c:	dc400217 	ldw	r17,8(sp)
   93d10:	dc000117 	ldw	r16,4(sp)
   93d14:	dec00b04 	addi	sp,sp,44
   93d18:	f800283a 	ret
   93d1c:	a0800117 	ldw	r2,4(r20)
   93d20:	80c00017 	ldw	r3,0(r16)
   93d24:	10bfffc4 	addi	r2,r2,-1
   93d28:	15c01426 	beq	r2,r23,93d7c <__call_exitprocs+0x154>
   93d2c:	80000015 	stw	zero,0(r16)
   93d30:	183fde26 	beq	r3,zero,93cac <_gp+0xfff820c8>
   93d34:	95c8983a 	sll	r4,r18,r23
   93d38:	a0806217 	ldw	r2,392(r20)
   93d3c:	a5800117 	ldw	r22,4(r20)
   93d40:	2084703a 	and	r2,r4,r2
   93d44:	10000b26 	beq	r2,zero,93d74 <__call_exitprocs+0x14c>
   93d48:	a0806317 	ldw	r2,396(r20)
   93d4c:	2088703a 	and	r4,r4,r2
   93d50:	20000c1e 	bne	r4,zero,93d84 <__call_exitprocs+0x15c>
   93d54:	89400017 	ldw	r5,0(r17)
   93d58:	d9000017 	ldw	r4,0(sp)
   93d5c:	183ee83a 	callr	r3
   93d60:	a0800117 	ldw	r2,4(r20)
   93d64:	15bfbf1e 	bne	r2,r22,93c64 <_gp+0xfff82080>
   93d68:	98800017 	ldw	r2,0(r19)
   93d6c:	153fcf26 	beq	r2,r20,93cac <_gp+0xfff820c8>
   93d70:	003fbc06 	br	93c64 <_gp+0xfff82080>
   93d74:	183ee83a 	callr	r3
   93d78:	003ff906 	br	93d60 <_gp+0xfff8217c>
   93d7c:	a5c00115 	stw	r23,4(r20)
   93d80:	003feb06 	br	93d30 <_gp+0xfff8214c>
   93d84:	89000017 	ldw	r4,0(r17)
   93d88:	183ee83a 	callr	r3
   93d8c:	003ff406 	br	93d60 <_gp+0xfff8217c>
   93d90:	a0800017 	ldw	r2,0(r20)
   93d94:	a027883a 	mov	r19,r20
   93d98:	1029883a 	mov	r20,r2
   93d9c:	003fb606 	br	93c78 <_gp+0xfff82094>
   93da0:	0005883a 	mov	r2,zero
   93da4:	003ffb06 	br	93d94 <_gp+0xfff821b0>

00093da8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   93da8:	defffd04 	addi	sp,sp,-12
   93dac:	df000215 	stw	fp,8(sp)
   93db0:	df000204 	addi	fp,sp,8
   93db4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   93db8:	0001883a 	nop
   93dbc:	e0bfff17 	ldw	r2,-4(fp)
   93dc0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   93dc4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   93dc8:	10000226 	beq	r2,zero,93dd4 <_exit+0x2c>
    ALT_SIM_FAIL();
   93dcc:	002af070 	cmpltui	zero,zero,43969
   93dd0:	00000106 	br	93dd8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   93dd4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   93dd8:	003fff06 	br	93dd8 <_gp+0xfff821f4>
