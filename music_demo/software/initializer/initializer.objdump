
initializer.elf:     file format elf32-littlenios2
initializer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200230

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00200020 align 2**12
         filesz 0x00014324 memsz 0x00014324 flags r-x
    LOAD off    0x00016000 vaddr 0x00408000 paddr 0x00214344 align 2**12
         filesz 0x00001c3c memsz 0x00001d9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00200020  00200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013be8  00200230  00200230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  00213e18  00213e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  00408000  00214344  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00409c3c  00215f80  00017c3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_0_data 00000000  00215f80  00215f80  00017c3c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00409d9c  00409d9c  00017c3c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017c3c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010e0  00000000  00000000  00017c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027e7c  00000000  00000000  00018d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a44d  00000000  00000000  00040bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cc74  00000000  00000000  0004b009  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002c74  00000000  00000000  00057c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004bc0  00000000  00000000  0005a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001908e  00000000  00000000  0005f4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00078544  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  00078588  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e0c6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007e0c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e0d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e0d6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e0d7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e0db  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e0df  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007e0e3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007e0ee  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007e0f9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0007e104  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  0007e10e  2**0
                  CONTENTS, READONLY
 30 .jdi          0000521c  00000000  00000000  0007e136  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00082202  00000000  00000000  00083352  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
00200230 l    d  .text	00000000 .text
00213e18 l    d  .rodata	00000000 .rodata
00408000 l    d  .rwdata	00000000 .rwdata
00409c3c l    d  .bss	00000000 .bss
00215f80 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00409d9c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../initializer_bsp//obj/HAL/src/crt0.o
00200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00214142 l     O .rodata	00000010 zeroes.4404
00203c94 l     F .text	000000bc __sbprintf
00214152 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00203ea4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
002059fc l     F .text	00000008 __fp_unlock
00205a10 l     F .text	0000019c __sinit.part.1
00205bac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00408000 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00408444 l     O .rwdata	00000020 lc_ctype_charset
00408424 l     O .rwdata	00000020 lc_message_charset
00408464 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00214184 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00209080 l     F .text	000000fc __sprint_r.part.0
002142a8 l     O .rodata	00000010 zeroes.4349
0020a6bc l     F .text	000000bc __sbprintf
002142b8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0020e4c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0020e5d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0020e604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0020e6f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0020e7e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0020e8cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0020eaa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00409c14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0020ed4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0020ee88 l     F .text	00000034 alt_dev_reg
00408a4c l     O .rwdata	00000038 i2c_0
00408a84 l     O .rwdata	00001060 jtag_uart_0
00409ae4 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0020ef74 l     F .text	00000110 optional_irq_callback
0020f0d4 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00210db0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00210fbc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
002115f4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
002116e8 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
002128f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00212ea0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00213000 l     F .text	0000003c alt_get_errno
0021303c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00409c70 g     O .bss	00000004 alt_instruction_exception_handler
002086c4 g     F .text	00000074 _mprec_log10
002087b0 g     F .text	0000008c __any_on
0020ac70 g     F .text	00000054 _isatty_r
00214190 g     O .rodata	00000028 __mprec_tinytens
0020e9e4 g     F .text	0000007c alt_main
00201830 g     F .text	000000c0 _puts_r
00409c9c g     O .bss	00000100 alt_irq
0020acc4 g     F .text	00000060 _lseek_r
00214344 g       *ABS*	00000000 __flash_rwdata_start
0020cf00 g     F .text	00000088 .hidden __eqdf2
00409d9c g       *ABS*	00000000 __alt_heap_start
002017f4 g     F .text	0000003c printf
0020aedc g     F .text	0000009c _wcrtomb_r
00208f40 g     F .text	0000005c __sseek
00205d5c g     F .text	00000010 __sinit
0020ad84 g     F .text	00000140 __swbuf_r
00206830 g     F .text	0000007c _setlocale_r
00205bb4 g     F .text	00000078 __sfmoreglue
0020f7cc g     F .text	000000a8 alt_avalon_i2c_rx_read
0020ea84 g     F .text	00000024 __malloc_unlock
002109e4 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0020f550 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00207500 g     F .text	0000015c memmove
00205d44 g     F .text	00000018 _cleanup
00210234 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00207784 g     F .text	000000a8 _Balloc
002015d8 g     F .text	00000070 .hidden __fixsfsi
0020cf88 g     F .text	000000dc .hidden __gtdf2
00213690 g     F .text	00000024 altera_nios2_gen2_irq_init
00200000 g     F .entry	0000000c __reset
00200020 g       *ABS*	00000000 __flash_exceptions_start
0020ac14 g     F .text	0000005c _fstat_r
00409c54 g     O .bss	00000004 errno
00208ebc g     F .text	00000008 __seofread
00409c5c g     O .bss	00000004 alt_argv
00411be4 g       *ABS*	00000000 _gp
0020ed1c g     F .text	00000030 usleep
00210a28 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
002010f4 g     F .text	000004e4 .hidden __subsf3
00212598 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0020f6e0 g     F .text	00000044 alt_avalon_i2c_is_busy
004088cc g     O .rwdata	00000180 alt_fd_list
0020f484 g     F .text	000000cc alt_avalon_i2c_master_config_set
00212a94 g     F .text	00000090 alt_find_dev
002073b8 g     F .text	00000148 memcpy
00200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
00205a04 g     F .text	0000000c _cleanup_r
0020e340 g     F .text	000000dc .hidden __floatsidf
00212f84 g     F .text	0000007c alt_io_redirect
0020d064 g     F .text	000000f4 .hidden __ltdf2
00213e18 g       *ABS*	00000000 __DTOR_END__
00210074 g     F .text	000001c0 alt_avalon_i2c_master_transmit
002018f0 g     F .text	00000014 puts
00213880 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00208da0 g     F .text	00000074 __fpclassifyd
00208620 g     F .text	000000a4 __ratio
0020a6a0 g     F .text	0000001c __vfiprintf_internal
002111b4 g     F .text	0000021c altera_avalon_jtag_uart_read
002017c4 g     F .text	00000030 _printf_r
00408000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00200b4c g     F .text	00000064 .hidden __udivsi3
0020e734 g     F .text	000000ac isatty
00212508 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
002141e0 g     O .rodata	000000c8 __mprec_tens
002068ac g     F .text	0000000c __locale_charset
0020f2f0 g     F .text	00000098 alt_avalon_i2c_enable
00409c50 g     O .bss	00000004 __malloc_top_pad
00409c20 g     O .rwdata	00000008 altera_onchip_flash_list
00210918 g     F .text	00000068 alt_avalon_i2c_int_disable
00409bec g     O .rwdata	00000004 __mb_cur_max
002068dc g     F .text	0000000c _localeconv_r
00207bb8 g     F .text	0000003c __i2b
002061e0 g     F .text	000004c8 __sfvwrite_r
00208e14 g     F .text	00000054 _sbrk_r
0020ad24 g     F .text	00000060 _read_r
002128ac g     F .text	00000028 alt_dcache_flush
00211884 g     F .text	00000168 alt_onchip_flash_erase_block
002002a4 g     F .text	000000b4 SGTL5000_Reg_Rd
00409c0c g     O .rwdata	00000004 alt_max_fd
0020a908 g     F .text	000000f0 _fclose_r
002059cc g     F .text	00000030 fflush
00409c4c g     O .bss	00000004 __malloc_max_sbrked_mem
00210440 g     F .text	00000210 alt_avalon_i2c_master_receive
0020bc84 g     F .text	000008ac .hidden __adddf3
002083c8 g     F .text	0000010c __b2d
0020b6c0 g     F .text	000005c4 .hidden __umoddi3
0020e908 g     F .text	000000dc lseek
00210980 g     F .text	00000064 alt_avalon_i2c_int_enable
00409be4 g     O .rwdata	00000004 _global_impure_ptr
0020883c g     F .text	00000564 _realloc_r
00409d9c g       *ABS*	00000000 __bss_end
00212db0 g     F .text	000000f0 alt_iic_isr_register
00213588 g     F .text	00000108 alt_tick
0020b0c4 g     F .text	000005fc .hidden __udivdi3
00210840 g     F .text	00000058 alt_avalon_i2c_int_status_get
0020ab70 g     F .text	00000024 _fputwc_r
002141b8 g     O .rodata	00000028 __mprec_bigtens
0020799c g     F .text	00000104 __s2b
0020e41c g     F .text	000000a8 .hidden __floatunsidf
00208108 g     F .text	00000060 __mcmp
00205d7c g     F .text	00000018 __fp_lock_all
00212d64 g     F .text	0000004c alt_ic_irq_enabled
002134ec g     F .text	0000009c alt_alarm_stop
0020f170 g     F .text	00000054 alt_avalon_i2c_register_callback
00409c64 g     O .bss	00000004 alt_irq_active
0020f1c4 g     F .text	000000ec alt_avalon_i2c_init
002000fc g     F .exceptions	000000d4 alt_irq_handler
004088a4 g     O .rwdata	00000028 alt_dev_null
002128d4 g     F .text	00000020 alt_dcache_flush_all
00207aa0 g     F .text	00000068 __hi0bits
0020e2c0 g     F .text	00000080 .hidden __fixdfsi
00409c3c g       *ABS*	00000000 __ram_rwdata_end
00409c04 g     O .rwdata	00000008 alt_dev_list
0020ed88 g     F .text	00000100 write
002139e4 g     F .text	000000a0 _putc_r
0020fb00 g     F .text	0000004c alt_avalon_i2c_check_arblost
00200c08 g     F .text	000000bc .hidden __gtsf2
002108dc g     F .text	0000003c alt_avalon_i2c_int_clear
00214344 g       *ABS*	00000000 __ram_rodata_end
0020e640 g     F .text	000000b8 fstat
0020d064 g     F .text	000000f4 .hidden __ledf2
00409c18 g     O .rwdata	00000008 alt_avalon_i2c_list
00207e80 g     F .text	00000140 __pow5mult
00209194 g     F .text	0000150c ___vfiprintf_internal_r
00409c44 g     O .bss	00000004 __nlocale_changed
00200bb0 g     F .text	00000058 .hidden __umodsi3
00409d9c g       *ABS*	00000000 end
00210cf0 g     F .text	000000c0 altera_avalon_jtag_uart_init
002001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0020f2b0 g     F .text	00000040 alt_avalon_i2c_open
00213e18 g       *ABS*	00000000 __CTOR_LIST__
00410000 g       *ABS*	00000000 __alt_stack_pointer
0020fc88 g     F .text	000000e8 alt_avalon_i2c_master_tx
0021166c g     F .text	0000007c alt_avalon_timer_sc_init
00201738 g     F .text	00000064 .hidden __clzsi2
002113d0 g     F .text	00000224 altera_avalon_jtag_uart_write
00205d6c g     F .text	00000004 __sfp_lock_acquire
002072d4 g     F .text	000000e4 memchr
0020199c g     F .text	000022dc ___vfprintf_internal_r
002117e8 g     F .text	0000009c alt_onchip_flash_get_info
00205ed0 g     F .text	00000310 _free_r
00213284 g     F .text	0000022c alt_printf
002068b8 g     F .text	00000010 __locale_mb_cur_max
00213c64 g     F .text	00000180 __call_exitprocs
00409c40 g     O .bss	00000004 __mlocale_changed
0020f084 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00409bf0 g     O .rwdata	00000004 __malloc_sbrk_base
00200230 g     F .text	0000003c _start
00409c68 g     O .bss	00000004 _alt_tick_rate
00210650 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00210a74 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00207fc0 g     F .text	00000148 __lshift
00409c6c g     O .bss	00000004 _alt_nticks
0020eae4 g     F .text	00000104 read
0020eef4 g     F .text	00000080 alt_sys_init
00213b4c g     F .text	00000118 __register_exitproc
0020feac g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00207bf4 g     F .text	0000028c __multiply
0021105c g     F .text	00000068 altera_avalon_jtag_uart_close
0020179c g     F .text	00000028 .hidden __mulsi3
00408000 g       *ABS*	00000000 __ram_rwdata_start
00213e18 g       *ABS*	00000000 __ram_rodata_start
00409c74 g     O .bss	00000028 __malloc_current_mallinfo
002084d4 g     F .text	0000014c __d2b
00200444 g     F .text	00000050 clearLED
00210b8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
002137bc g     F .text	000000c4 alt_get_fd
00212754 g     F .text	00000158 alt_busy_sleep
0020a7d8 g     F .text	00000054 _close_r
00213968 g     F .text	0000007c memcmp
0020f724 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00210c4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00409d9c g       *ABS*	00000000 __alt_stack_base
00210c9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00203d50 g     F .text	00000154 __swsetup_r
0020c530 g     F .text	000009d0 .hidden __divdf3
0021171c g     F .text	000000cc alt_onchip_flash_read
00205c2c g     F .text	00000118 __sfp
00208738 g     F .text	00000078 __copybits
0040849c g     O .rwdata	00000408 __malloc_av_
00205d78 g     F .text	00000004 __sinit_lock_release
0020d158 g     F .text	0000086c .hidden __muldf3
00208e68 g     F .text	00000054 __sread
002136b4 g     F .text	00000108 alt_find_file
00212930 g     F .text	000000a4 alt_dev_llist_insert
0020ea60 g     F .text	00000024 __malloc_lock
0020ec6c g     F .text	000000b0 sbrk
0020fb4c g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0020fab4 g     F .text	0000004c alt_avalon_i2c_check_nack
00205970 g     F .text	0000005c _fflush_r
0020a82c g     F .text	000000dc _calloc_r
00409c28 g     O .rwdata	00000008 alt_flash_dev_list
00409c3c g       *ABS*	00000000 __bss_start
0020765c g     F .text	00000128 memset
0020026c g     F .text	00000038 main
0020fa80 g     F .text	00000034 alt_avalon_i2c_master_target_set
00409c60 g     O .bss	00000004 alt_envp
00409c48 g     O .bss	00000004 __malloc_max_total_mem
00210bec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0020aec4 g     F .text	00000018 __swbuf
00210898 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00208f9c g     F .text	00000008 __sclose
00410000 g       *ABS*	00000000 __alt_heap_limit
0020a9f8 g     F .text	00000014 fclose
002040cc g     F .text	00001688 _dtoa_r
00206ac8 g     F .text	0000080c _malloc_r
0020b038 g     F .text	00000030 __ascii_wctomb
00409c10 g     O .rwdata	00000004 alt_errno
00212478 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
002066a8 g     F .text	000000c4 _fwalk
00213a84 g     F .text	000000c8 putc
00200a54 g     F .text	00000084 .hidden __divsi3
002005b4 g     F .text	00000140 printSignedHex1
00205dac g     F .text	00000124 _malloc_trim_r
00213e18 g       *ABS*	00000000 __CTOR_END__
00211f9c g     F .text	000004dc altera_onchip_flash_init
00200cc4 g     F .text	00000430 .hidden __mulsf3
00208fa4 g     F .text	000000dc strcmp
00213e18 g       *ABS*	00000000 __flash_rodata_start
00213e18 g       *ABS*	00000000 __DTOR_LIST__
00200358 g     F .text	000000a0 SGTL5000_Reg_Wr
0020cf00 g     F .text	00000088 .hidden __nedf2
0020eebc g     F .text	00000038 alt_irq_init
0020ebe8 g     F .text	00000084 alt_release_fd
00213ffc g     O .rodata	00000100 .hidden __clz_tab
00409c3c g     O .bss	00000004 _PathLocale
0021391c g     F .text	00000014 atexit
00200c08 g     F .text	000000bc .hidden __gesf2
0020a778 g     F .text	00000060 _write_r
002068e8 g     F .text	00000018 setlocale
00409be8 g     O .rwdata	00000004 _impure_ptr
00409c58 g     O .bss	00000004 alt_argc
00205754 g     F .text	0000021c __sflush_r
00212a34 g     F .text	00000060 _do_dtors
002068d4 g     F .text	00000008 __locale_cjk_lang
0020fa48 g     F .text	00000038 alt_avalon_i2c_master_target_get
0020f958 g     F .text	000000f0 alt_avalon_i2c_send_address
00200020 g       .exceptions	00000000 alt_irq_entry
00208364 g     F .text	00000064 __ulp
00205d94 g     F .text	00000018 __fp_unlock_all
00409bfc g     O .rwdata	00000008 alt_fs_list
002119ec g     F .text	000002d8 alt_onchip_flash_write_block
00200020 g       *ABS*	00000000 __ram_exceptions_start
00206900 g     F .text	0000000c localeconv
002003f8 g     F .text	0000004c setLED
00210b24 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00212c00 g     F .text	00000050 alt_ic_isr_register
0020f388 g     F .text	0000004c alt_avalon_i2c_disable
00409c3c g       *ABS*	00000000 _edata
00211cc4 g     F .text	000002d8 alt_onchip_flash_write
002006f4 g     F .text	00000300 setup_i2c
00409d9c g       *ABS*	00000000 _end
00212b24 g     F .text	00000068 alt_flash_open_dev
0020aa0c g     F .text	00000164 __fputwc
00200230 g       *ABS*	00000000 __ram_exceptions_end
002110c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0020f3d4 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00212cd8 g     F .text	0000008c alt_ic_irq_disable
00208ec4 g     F .text	0000007c __swrite
00409bf4 g     O .rwdata	00000004 __malloc_trim_threshold
002068c8 g     F .text	0000000c __locale_msgcharset
00213930 g     F .text	00000038 exit
0020676c g     F .text	000000c4 _fwalk_reent
00201648 g     F .text	000000f0 .hidden __floatunsisf
00208168 g     F .text	000001fc __mdiff
00212b8c g     F .text	00000054 alt_flash_close_dev
00200ad8 g     F .text	00000074 .hidden __modsi3
00410000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
00205d70 g     F .text	00000004 __sfp_lock_release
0020f5e4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0020f874 g     F .text	000000e4 alt_avalon_i2c_cmd_write
002009f4 g     F .text	00000060 .hidden __fixunssfsi
00213de4 g     F .text	00000034 _exit
00212628 g     F .text	0000012c alt_alarm_start
00200494 g     F .text	00000120 printSignedHex0
0020690c g     F .text	000001bc __smakebuf_r
00201904 g     F .text	00000098 strlen
00213128 g     F .text	0000015c open
0020cf88 g     F .text	000000dc .hidden __gedf2
002134b0 g     F .text	0000003c alt_putchar
00409bf8 g     O .rwdata	00000004 __wctomb
0020917c g     F .text	00000018 __sprint_r
00212be0 g     F .text	00000020 alt_icache_flush_all
00409c30 g     O .rwdata	00000004 alt_priority_mask
00212c50 g     F .text	00000088 alt_ic_irq_enable
00203c78 g     F .text	0000001c __vfprintf_internal
0020b068 g     F .text	0000005c _wctomb_r
0020d9c4 g     F .text	000008fc .hidden __subdf3
00207b08 g     F .text	000000b0 __lo0bits
00409c34 g     O .rwdata	00000008 alt_alarm_list
002129d4 g     F .text	00000060 _do_ctors
0020af78 g     F .text	000000c0 wcrtomb
0020e500 g     F .text	000000d8 close
00210ad8 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0020e848 g     F .text	00000084 alt_load
0020fd70 g     F .text	0000013c alt_avalon_i2c_master_rx
0020ab94 g     F .text	00000080 fputwc
00205d74 g     F .text	00000004 __sinit_lock_acquire
00207854 g     F .text	00000148 __multadd
0020782c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200000:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  200004:	08408c14 	ori	at,at,560
    jmp r1
  200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  20002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  20003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  20004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  20005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  20006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  20007c:	10000326 	beq	r2,zero,20008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  200080:	20000226 	beq	r4,zero,20008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200084:	02000fc0 	call	2000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  200088:	00000706 	br	2000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  20008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  200098:	02001d00 	call	2001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  20009c:	1000021e 	bne	r2,zero,2000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000f8:	ef80083a 	eret

002000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000fc:	defff904 	addi	sp,sp,-28
  200100:	dfc00615 	stw	ra,24(sp)
  200104:	df000515 	stw	fp,20(sp)
  200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  20010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  200110:	0005313a 	rdctl	r2,ipending
  200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  20011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  200124:	00800044 	movi	r2,1
  200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  20012c:	e0fffb17 	ldw	r3,-20(fp)
  200130:	e0bffc17 	ldw	r2,-16(fp)
  200134:	1884703a 	and	r2,r3,r2
  200138:	10001426 	beq	r2,zero,20018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  20013c:	00801074 	movhi	r2,65
  200140:	10a72704 	addi	r2,r2,-25444
  200144:	e0fffd17 	ldw	r3,-12(fp)
  200148:	180690fa 	slli	r3,r3,3
  20014c:	10c5883a 	add	r2,r2,r3
  200150:	10c00017 	ldw	r3,0(r2)
  200154:	00801074 	movhi	r2,65
  200158:	10a72704 	addi	r2,r2,-25444
  20015c:	e13ffd17 	ldw	r4,-12(fp)
  200160:	200890fa 	slli	r4,r4,3
  200164:	1105883a 	add	r2,r2,r4
  200168:	10800104 	addi	r2,r2,4
  20016c:	10800017 	ldw	r2,0(r2)
  200170:	1009883a 	mov	r4,r2
  200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  20017c:	0005313a 	rdctl	r2,ipending
  200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  200184:	e0bfff17 	ldw	r2,-4(fp)
  200188:	00000706 	br	2001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  20018c:	e0bffc17 	ldw	r2,-16(fp)
  200190:	1085883a 	add	r2,r2,r2
  200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  200198:	e0bffd17 	ldw	r2,-12(fp)
  20019c:	10800044 	addi	r2,r2,1
  2001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2001a4:	003fe106 	br	20012c <_gp+0xffdee548>

    active = alt_irq_pending ();
  2001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2001ac:	e0bffb17 	ldw	r2,-20(fp)
  2001b0:	103fdb1e 	bne	r2,zero,200120 <_gp+0xffdee53c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2001b4:	0001883a 	nop
}
  2001b8:	0001883a 	nop
  2001bc:	e037883a 	mov	sp,fp
  2001c0:	dfc00117 	ldw	ra,4(sp)
  2001c4:	df000017 	ldw	fp,0(sp)
  2001c8:	dec00204 	addi	sp,sp,8
  2001cc:	f800283a 	ret

002001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2001d0:	defffb04 	addi	sp,sp,-20
  2001d4:	dfc00415 	stw	ra,16(sp)
  2001d8:	df000315 	stw	fp,12(sp)
  2001dc:	df000304 	addi	fp,sp,12
  2001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  2001e4:	00bfffc4 	movi	r2,-1
  2001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  2001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  2001f0:	d0a02317 	ldw	r2,-32628(gp)
  2001f4:	10000726 	beq	r2,zero,200214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  2001f8:	d0a02317 	ldw	r2,-32628(gp)
  2001fc:	e0fffd17 	ldw	r3,-12(fp)
  200200:	e1bffe17 	ldw	r6,-8(fp)
  200204:	e17fff17 	ldw	r5,-4(fp)
  200208:	1809883a 	mov	r4,r3
  20020c:	103ee83a 	callr	r2
  200210:	00000206 	br	20021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  200214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  200218:	0005883a 	mov	r2,zero
}
  20021c:	e037883a 	mov	sp,fp
  200220:	dfc00117 	ldw	ra,4(sp)
  200224:	df000017 	ldw	fp,0(sp)
  200228:	dec00204 	addi	sp,sp,8
  20022c:	f800283a 	ret

Disassembly of section .text:

00200230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200230:	06c01074 	movhi	sp,65
    ori sp, sp, %lo(__alt_stack_pointer)
  200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  200238:	06801074 	movhi	gp,65
    ori gp, gp, %lo(_gp)
  20023c:	d686f914 	ori	gp,gp,7140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200240:	00801034 	movhi	r2,64
    ori r2, r2, %lo(__bss_start)
  200244:	10a70f14 	ori	r2,r2,39996

    movhi r3, %hi(__bss_end)
  200248:	00c01034 	movhi	r3,64
    ori r3, r3, %lo(__bss_end)
  20024c:	18e76714 	ori	r3,r3,40348

    beq r2, r3, 1f
  200250:	10c00326 	beq	r2,r3,200260 <_start+0x30>

0:
    stw zero, (r2)
  200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20025c:	10fffd36 	bltu	r2,r3,200254 <_gp+0xffdee670>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200260:	020e8480 	call	20e848 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200264:	020e9e40 	call	20e9e4 <alt_main>

00200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200268:	003fff06 	br	200268 <_gp+0xffdee684>

0020026c <main>:
#include "main.h"

int main(){
  20026c:	defffe04 	addi	sp,sp,-8
  200270:	dfc00115 	stw	ra,4(sp)
  200274:	df000015 	stw	fp,0(sp)
  200278:	d839883a 	mov	fp,sp
	usleep(5000000);
  20027c:	01001334 	movhi	r4,76
  200280:	2112d004 	addi	r4,r4,19264
  200284:	020ed1c0 	call	20ed1c <usleep>
	setup_i2c();
  200288:	02006f40 	call	2006f4 <setup_i2c>
return 0;
  20028c:	0005883a 	mov	r2,zero
}
  200290:	e037883a 	mov	sp,fp
  200294:	dfc00117 	ldw	ra,4(sp)
  200298:	df000017 	ldw	fp,0(sp)
  20029c:	dec00204 	addi	sp,sp,8
  2002a0:	f800283a 	ret

002002a4 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
  2002a4:	defff804 	addi	sp,sp,-32
  2002a8:	dfc00715 	stw	ra,28(sp)
  2002ac:	df000615 	stw	fp,24(sp)
  2002b0:	df000604 	addi	fp,sp,24
  2002b4:	e13ffe15 	stw	r4,-8(fp)
  2002b8:	2805883a 	mov	r2,r5
  2002bc:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
  2002c0:	e0bfff0b 	ldhu	r2,-4(fp)
  2002c4:	1004d23a 	srli	r2,r2,8
  2002c8:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
  2002cc:	e0bfff0b 	ldhu	r2,-4(fp)
  2002d0:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
  2002d4:	e13ffd84 	addi	r4,fp,-10
  2002d8:	e0fffd84 	addi	r3,fp,-10
  2002dc:	d8000115 	stw	zero,4(sp)
  2002e0:	00800084 	movi	r2,2
  2002e4:	d8800015 	stw	r2,0(sp)
  2002e8:	200f883a 	mov	r7,r4
  2002ec:	01800084 	movi	r6,2
  2002f0:	180b883a 	mov	r5,r3
  2002f4:	e13ffe17 	ldw	r4,-8(fp)
  2002f8:	020feac0 	call	20feac <alt_avalon_i2c_master_tx_rx>
  2002fc:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  200300:	e0bffc17 	ldw	r2,-16(fp)
  200304:	10000626 	beq	r2,zero,200320 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  200308:	e0bfff0b 	ldhu	r2,-4(fp)
  20030c:	100b883a 	mov	r5,r2
  200310:	01000874 	movhi	r4,33
  200314:	210f8604 	addi	r4,r4,15896
  200318:	02017f40 	call	2017f4 <printf>
		while (1)
		{
			//hang here
		}
  20031c:	003fff06 	br	20031c <_gp+0xffdee738>
	}
	value = (buffer[0] << 8) | buffer[1];
  200320:	e0bffd83 	ldbu	r2,-10(fp)
  200324:	10803fcc 	andi	r2,r2,255
  200328:	1004923a 	slli	r2,r2,8
  20032c:	1007883a 	mov	r3,r2
  200330:	e0bffdc3 	ldbu	r2,-9(fp)
  200334:	10803fcc 	andi	r2,r2,255
  200338:	1884b03a 	or	r2,r3,r2
  20033c:	e0bffd0d 	sth	r2,-12(fp)
	return value;
  200340:	e0bffd0b 	ldhu	r2,-12(fp)
}
  200344:	e037883a 	mov	sp,fp
  200348:	dfc00117 	ldw	ra,4(sp)
  20034c:	df000017 	ldw	fp,0(sp)
  200350:	dec00204 	addi	sp,sp,8
  200354:	f800283a 	ret

00200358 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
  200358:	defff904 	addi	sp,sp,-28
  20035c:	dfc00615 	stw	ra,24(sp)
  200360:	df000515 	stw	fp,20(sp)
  200364:	df000504 	addi	fp,sp,20
  200368:	e13ffd15 	stw	r4,-12(fp)
  20036c:	2807883a 	mov	r3,r5
  200370:	3005883a 	mov	r2,r6
  200374:	e0fffe0d 	sth	r3,-8(fp)
  200378:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
  20037c:	e0bffe0b 	ldhu	r2,-8(fp)
  200380:	1004d23a 	srli	r2,r2,8
  200384:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
  200388:	e0bffe0b 	ldhu	r2,-8(fp)
  20038c:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
  200390:	e0bfff0b 	ldhu	r2,-4(fp)
  200394:	1004d23a 	srli	r2,r2,8
  200398:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
  20039c:	e0bfff0b 	ldhu	r2,-4(fp)
  2003a0:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
  2003a4:	e0bffc04 	addi	r2,fp,-16
  2003a8:	000f883a 	mov	r7,zero
  2003ac:	01800104 	movi	r6,4
  2003b0:	100b883a 	mov	r5,r2
  2003b4:	e13ffd17 	ldw	r4,-12(fp)
  2003b8:	020fc880 	call	20fc88 <alt_avalon_i2c_master_tx>
  2003bc:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  2003c0:	e0bffb17 	ldw	r2,-20(fp)
  2003c4:	10000626 	beq	r2,zero,2003e0 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  2003c8:	e0bffe0b 	ldhu	r2,-8(fp)
  2003cc:	100b883a 	mov	r5,r2
  2003d0:	01000874 	movhi	r4,33
  2003d4:	210f8604 	addi	r4,r4,15896
  2003d8:	02017f40 	call	2017f4 <printf>
		while (1)
		{
			//hang here
		}
  2003dc:	003fff06 	br	2003dc <_gp+0xffdee7f8>
	}
	return DATA;
  2003e0:	e0bfff0b 	ldhu	r2,-4(fp)
}
  2003e4:	e037883a 	mov	sp,fp
  2003e8:	dfc00117 	ldw	ra,4(sp)
  2003ec:	df000017 	ldw	fp,0(sp)
  2003f0:	dec00204 	addi	sp,sp,8
  2003f4:	f800283a 	ret

002003f8 <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
  2003f8:	defffe04 	addi	sp,sp,-8
  2003fc:	df000115 	stw	fp,4(sp)
  200400:	df000104 	addi	fp,sp,4
  200404:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
  200408:	00801074 	movhi	r2,65
  20040c:	10843004 	addi	r2,r2,4288
  200410:	10c00037 	ldwio	r3,0(r2)
  200414:	01000044 	movi	r4,1
  200418:	e0bfff17 	ldw	r2,-4(fp)
  20041c:	2084983a 	sll	r2,r4,r2
  200420:	1886b03a 	or	r3,r3,r2
  200424:	00801074 	movhi	r2,65
  200428:	10843004 	addi	r2,r2,4288
  20042c:	10c00035 	stwio	r3,0(r2)
}
  200430:	0001883a 	nop
  200434:	e037883a 	mov	sp,fp
  200438:	df000017 	ldw	fp,0(sp)
  20043c:	dec00104 	addi	sp,sp,4
  200440:	f800283a 	ret

00200444 <clearLED>:

void clearLED(int LED)
{
  200444:	defffe04 	addi	sp,sp,-8
  200448:	df000115 	stw	fp,4(sp)
  20044c:	df000104 	addi	fp,sp,4
  200450:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
  200454:	00801074 	movhi	r2,65
  200458:	10843004 	addi	r2,r2,4288
  20045c:	10c00037 	ldwio	r3,0(r2)
  200460:	01000044 	movi	r4,1
  200464:	e0bfff17 	ldw	r2,-4(fp)
  200468:	2084983a 	sll	r2,r4,r2
  20046c:	0084303a 	nor	r2,zero,r2
  200470:	1886703a 	and	r3,r3,r2
  200474:	00801074 	movhi	r2,65
  200478:	10843004 	addi	r2,r2,4288
  20047c:	10c00035 	stwio	r3,0(r2)

}
  200480:	0001883a 	nop
  200484:	e037883a 	mov	sp,fp
  200488:	df000017 	ldw	fp,0(sp)
  20048c:	dec00104 	addi	sp,sp,4
  200490:	f800283a 	ret

00200494 <printSignedHex0>:

void printSignedHex0(signed char value)
{
  200494:	defffc04 	addi	sp,sp,-16
  200498:	dfc00315 	stw	ra,12(sp)
  20049c:	df000215 	stw	fp,8(sp)
  2004a0:	df000204 	addi	fp,sp,8
  2004a4:	2005883a 	mov	r2,r4
  2004a8:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  2004ac:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
  2004b0:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  2004b4:	00801074 	movhi	r2,65
  2004b8:	10843404 	addi	r2,r2,4304
  2004bc:	10800037 	ldwio	r2,0(r2)
  2004c0:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
  2004c4:	e0bfff07 	ldb	r2,-4(fp)
  2004c8:	1000060e 	bge	r2,zero,2004e4 <printSignedHex0+0x50>
	{
		setLED(11);
  2004cc:	010002c4 	movi	r4,11
  2004d0:	02003f80 	call	2003f8 <setLED>
		value = -value;
  2004d4:	e0bfff03 	ldbu	r2,-4(fp)
  2004d8:	0085c83a 	sub	r2,zero,r2
  2004dc:	e0bfff05 	stb	r2,-4(fp)
  2004e0:	00000206 	br	2004ec <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
  2004e4:	010002c4 	movi	r4,11
  2004e8:	02004440 	call	200444 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  2004ec:	e0bfff03 	ldbu	r2,-4(fp)
  2004f0:	108018c4 	addi	r2,r2,99
  2004f4:	10803fcc 	andi	r2,r2,255
  2004f8:	108031f0 	cmpltui	r2,r2,199
  2004fc:	1000031e 	bne	r2,zero,20050c <printSignedHex0+0x78>
		setLED(13);
  200500:	01000344 	movi	r4,13
  200504:	02003f80 	call	2003f8 <setLED>
  200508:	00000206 	br	200514 <printSignedHex0+0x80>
	else
		clearLED(13);
  20050c:	01000344 	movi	r4,13
  200510:	02004440 	call	200444 <clearLED>

	value = value % 100;
  200514:	e0bfff07 	ldb	r2,-4(fp)
  200518:	01401904 	movi	r5,100
  20051c:	1009883a 	mov	r4,r2
  200520:	0200ad80 	call	200ad8 <__modsi3>
  200524:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200528:	e0bfff07 	ldb	r2,-4(fp)
  20052c:	01400284 	movi	r5,10
  200530:	1009883a 	mov	r4,r2
  200534:	0200a540 	call	200a54 <__divsi3>
  200538:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
  20053c:	e0bfff07 	ldb	r2,-4(fp)
  200540:	01400284 	movi	r5,10
  200544:	1009883a 	mov	r4,r2
  200548:	0200ad80 	call	200ad8 <__modsi3>
  20054c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
  200550:	e0bffe8b 	ldhu	r2,-6(fp)
  200554:	10803fcc 	andi	r2,r2,255
  200558:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
  20055c:	e0bffe03 	ldbu	r2,-8(fp)
  200560:	1004933a 	slli	r2,r2,12
  200564:	1007883a 	mov	r3,r2
  200568:	e0bffe8b 	ldhu	r2,-6(fp)
  20056c:	1884b03a 	or	r2,r3,r2
  200570:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
  200574:	e0bffe43 	ldbu	r2,-7(fp)
  200578:	1004923a 	slli	r2,r2,8
  20057c:	1007883a 	mov	r3,r2
  200580:	e0bffe8b 	ldhu	r2,-6(fp)
  200584:	1884b03a 	or	r2,r3,r2
  200588:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  20058c:	e0fffe8b 	ldhu	r3,-6(fp)
  200590:	00801074 	movhi	r2,65
  200594:	10843404 	addi	r2,r2,4304
  200598:	10c00035 	stwio	r3,0(r2)
}
  20059c:	0001883a 	nop
  2005a0:	e037883a 	mov	sp,fp
  2005a4:	dfc00117 	ldw	ra,4(sp)
  2005a8:	df000017 	ldw	fp,0(sp)
  2005ac:	dec00204 	addi	sp,sp,8
  2005b0:	f800283a 	ret

002005b4 <printSignedHex1>:

void printSignedHex1(signed char value)
{
  2005b4:	defffb04 	addi	sp,sp,-20
  2005b8:	dfc00415 	stw	ra,16(sp)
  2005bc:	df000315 	stw	fp,12(sp)
  2005c0:	df000304 	addi	fp,sp,12
  2005c4:	2005883a 	mov	r2,r4
  2005c8:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  2005cc:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
  2005d0:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  2005d4:	00801074 	movhi	r2,65
  2005d8:	10843404 	addi	r2,r2,4304
  2005dc:	10800037 	ldwio	r2,0(r2)
  2005e0:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
  2005e4:	e0bfff07 	ldb	r2,-4(fp)
  2005e8:	1000060e 	bge	r2,zero,200604 <printSignedHex1+0x50>
	{
		setLED(10);
  2005ec:	01000284 	movi	r4,10
  2005f0:	02003f80 	call	2003f8 <setLED>
		value = -value;
  2005f4:	e0bfff03 	ldbu	r2,-4(fp)
  2005f8:	0085c83a 	sub	r2,zero,r2
  2005fc:	e0bfff05 	stb	r2,-4(fp)
  200600:	00000206 	br	20060c <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
  200604:	01000284 	movi	r4,10
  200608:	02004440 	call	200444 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  20060c:	e0bfff03 	ldbu	r2,-4(fp)
  200610:	108018c4 	addi	r2,r2,99
  200614:	10803fcc 	andi	r2,r2,255
  200618:	108031f0 	cmpltui	r2,r2,199
  20061c:	1000031e 	bne	r2,zero,20062c <printSignedHex1+0x78>
		setLED(12);
  200620:	01000304 	movi	r4,12
  200624:	02003f80 	call	2003f8 <setLED>
  200628:	00000206 	br	200634 <printSignedHex1+0x80>
	else
		clearLED(12);
  20062c:	01000304 	movi	r4,12
  200630:	02004440 	call	200444 <clearLED>

	value = value % 100;
  200634:	e0bfff07 	ldb	r2,-4(fp)
  200638:	01401904 	movi	r5,100
  20063c:	1009883a 	mov	r4,r2
  200640:	0200ad80 	call	200ad8 <__modsi3>
  200644:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200648:	e0bfff07 	ldb	r2,-4(fp)
  20064c:	01400284 	movi	r5,10
  200650:	1009883a 	mov	r4,r2
  200654:	0200a540 	call	200a54 <__divsi3>
  200658:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  20065c:	e0bfff07 	ldb	r2,-4(fp)
  200660:	01400284 	movi	r5,10
  200664:	1009883a 	mov	r4,r2
  200668:	0200ad80 	call	200ad8 <__modsi3>
  20066c:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
  200670:	e0bfff07 	ldb	r2,-4(fp)
  200674:	01400284 	movi	r5,10
  200678:	1009883a 	mov	r4,r2
  20067c:	0200a540 	call	200a54 <__divsi3>
  200680:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200684:	e0bfff07 	ldb	r2,-4(fp)
  200688:	01400284 	movi	r5,10
  20068c:	1009883a 	mov	r4,r2
  200690:	0200ad80 	call	200ad8 <__modsi3>
  200694:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
  200698:	e0bffe17 	ldw	r2,-8(fp)
  20069c:	10bfc00c 	andi	r2,r2,65280
  2006a0:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
  2006a4:	e0bffd03 	ldbu	r2,-12(fp)
  2006a8:	1004913a 	slli	r2,r2,4
  2006ac:	1007883a 	mov	r3,r2
  2006b0:	e0bffe17 	ldw	r2,-8(fp)
  2006b4:	10c4b03a 	or	r2,r2,r3
  2006b8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
  2006bc:	e0bffd43 	ldbu	r2,-11(fp)
  2006c0:	e0fffe17 	ldw	r3,-8(fp)
  2006c4:	1884b03a 	or	r2,r3,r2
  2006c8:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  2006cc:	e0fffe17 	ldw	r3,-8(fp)
  2006d0:	00801074 	movhi	r2,65
  2006d4:	10843404 	addi	r2,r2,4304
  2006d8:	10c00035 	stwio	r3,0(r2)
}
  2006dc:	0001883a 	nop
  2006e0:	e037883a 	mov	sp,fp
  2006e4:	dfc00117 	ldw	ra,4(sp)
  2006e8:	df000017 	ldw	fp,0(sp)
  2006ec:	dec00204 	addi	sp,sp,8
  2006f0:	f800283a 	ret

002006f4 <setup_i2c>:


int setup_i2c()
{
  2006f4:	defffc04 	addi	sp,sp,-16
  2006f8:	dfc00315 	stw	ra,12(sp)
  2006fc:	df000215 	stw	fp,8(sp)
  200700:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
  200704:	01000874 	movhi	r4,33
  200708:	210f8e04 	addi	r4,r4,15928
  20070c:	020f2b00 	call	20f2b0 <alt_avalon_i2c_open>
  200710:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
  200714:	e0bffe17 	ldw	r2,-8(fp)
  200718:	1000051e 	bne	r2,zero,200730 <setup_i2c+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
  20071c:	01000874 	movhi	r4,33
  200720:	210f9104 	addi	r4,r4,15940
  200724:	02018f00 	call	2018f0 <puts>
		return 1;
  200728:	00800044 	movi	r2,1
  20072c:	0000ac06 	br	2009e0 <setup_i2c+0x2ec>
	}
	printf ("I2C Test Program\n");
  200730:	01000874 	movhi	r4,33
  200734:	210f9904 	addi	r4,r4,15972
  200738:	02018f00 	call	2018f0 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
  20073c:	01400284 	movi	r5,10
  200740:	e13ffe17 	ldw	r4,-8(fp)
  200744:	020fa800 	call	20fa80 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
  200748:	000b883a 	mov	r5,zero
  20074c:	e13ffe17 	ldw	r4,-8(fp)
  200750:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200754:	10bfffcc 	andi	r2,r2,65535
  200758:	100b883a 	mov	r5,r2
  20075c:	01000874 	movhi	r4,33
  200760:	210f9e04 	addi	r4,r4,15992
  200764:	02017f40 	call	2017f4 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
  200768:	00800384 	movi	r2,14
  20076c:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
  200770:	e0bfff03 	ldbu	r2,-4(fp)
  200774:	1009883a 	mov	r4,r2
  200778:	02016480 	call	201648 <__floatunsisf>
  20077c:	1007883a 	mov	r3,r2
  200780:	180b883a 	mov	r5,r3
  200784:	01105f34 	movhi	r4,16764
  200788:	212a2084 	addi	r4,r4,-22398
  20078c:	02010f40 	call	2010f4 <__subsf3>
  200790:	1007883a 	mov	r3,r2
  200794:	1805883a 	mov	r2,r3
  200798:	01514034 	movhi	r5,17664
  20079c:	1009883a 	mov	r4,r2
  2007a0:	0200cc40 	call	200cc4 <__mulsf3>
  2007a4:	1007883a 	mov	r3,r2
  2007a8:	1805883a 	mov	r2,r3
  2007ac:	1009883a 	mov	r4,r2
  2007b0:	02009f40 	call	2009f4 <__fixunssfsi>
  2007b4:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
  2007b8:	e0bfff03 	ldbu	r2,-4(fp)
  2007bc:	e0ffff8b 	ldhu	r3,-2(fp)
  2007c0:	180d883a 	mov	r6,r3
  2007c4:	100b883a 	mov	r5,r2
  2007c8:	01000874 	movhi	r4,33
  2007cc:	210fa404 	addi	r4,r4,16016
  2007d0:	02017f40 	call	2017f4 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
  2007d4:	e0bfff03 	ldbu	r2,-4(fp)
  2007d8:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
  2007dc:	1007883a 	mov	r3,r2
  2007e0:	e0bfff8b 	ldhu	r2,-2(fp)
  2007e4:	1884b03a 	or	r2,r3,r2
  2007e8:	10bfffcc 	andi	r2,r2,65535
  2007ec:	100d883a 	mov	r6,r2
  2007f0:	01400c84 	movi	r5,50
  2007f4:	e13ffe17 	ldw	r4,-8(fp)
  2007f8:	02003580 	call	200358 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
  2007fc:	01400c84 	movi	r5,50
  200800:	e13ffe17 	ldw	r4,-8(fp)
  200804:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200808:	10bfffcc 	andi	r2,r2,65535
  20080c:	100b883a 	mov	r5,r2
  200810:	01000874 	movhi	r4,33
  200814:	210fb504 	addi	r4,r4,16084
  200818:	02017f40 	call	2017f4 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
  20081c:	01917f84 	movi	r6,17918
  200820:	01400c04 	movi	r5,48
  200824:	e13ffe17 	ldw	r4,-8(fp)
  200828:	02003580 	call	200358 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
  20082c:	01400c04 	movi	r5,48
  200830:	e13ffe17 	ldw	r4,-8(fp)
  200834:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200838:	10bfffcc 	andi	r2,r2,65535
  20083c:	100b883a 	mov	r5,r2
  200840:	01000874 	movhi	r4,33
  200844:	210fbc04 	addi	r4,r4,16112
  200848:	02017f40 	call	2017f4 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  20084c:	01801384 	movi	r6,78
  200850:	01400a04 	movi	r5,40
  200854:	e13ffe17 	ldw	r4,-8(fp)
  200858:	02003580 	call	200358 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
  20085c:	01400a04 	movi	r5,40
  200860:	e13ffe17 	ldw	r4,-8(fp)
  200864:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200868:	10bfffcc 	andi	r2,r2,65535
  20086c:	100b883a 	mov	r5,r2
  200870:	01000874 	movhi	r4,33
  200874:	210fc404 	addi	r4,r4,16144
  200878:	02017f40 	call	2017f4 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
  20087c:	018018c4 	movi	r6,99
  200880:	01400084 	movi	r5,2
  200884:	e13ffe17 	ldw	r4,-8(fp)
  200888:	02003580 	call	200358 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
  20088c:	01400084 	movi	r5,2
  200890:	e13ffe17 	ldw	r4,-8(fp)
  200894:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200898:	10bfffcc 	andi	r2,r2,65535
  20089c:	100b883a 	mov	r5,r2
  2008a0:	01000874 	movhi	r4,33
  2008a4:	210fcb04 	addi	r4,r4,16172
  2008a8:	02017f40 	call	2017f4 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
  2008ac:	018001c4 	movi	r6,7
  2008b0:	01400104 	movi	r5,4
  2008b4:	e13ffe17 	ldw	r4,-8(fp)
  2008b8:	02003580 	call	200358 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
  2008bc:	01400104 	movi	r5,4
  2008c0:	e13ffe17 	ldw	r4,-8(fp)
  2008c4:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  2008c8:	10bfffcc 	andi	r2,r2,65535
  2008cc:	100b883a 	mov	r5,r2
  2008d0:	01000874 	movhi	r4,33
  2008d4:	210fd304 	addi	r4,r4,16204
  2008d8:	02017f40 	call	2017f4 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
  2008dc:	01802004 	movi	r6,128
  2008e0:	01400184 	movi	r5,6
  2008e4:	e13ffe17 	ldw	r4,-8(fp)
  2008e8:	02003580 	call	200358 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
  2008ec:	01400184 	movi	r5,6
  2008f0:	e13ffe17 	ldw	r4,-8(fp)
  2008f4:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  2008f8:	10bfffcc 	andi	r2,r2,65535
  2008fc:	100b883a 	mov	r5,r2
  200900:	01000874 	movhi	r4,33
  200904:	210fda04 	addi	r4,r4,16232
  200908:	02017f40 	call	2017f4 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
  20090c:	01800104 	movi	r6,4
  200910:	01400904 	movi	r5,36
  200914:	e13ffe17 	ldw	r4,-8(fp)
  200918:	02003580 	call	200358 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  20091c:	01400904 	movi	r5,36
  200920:	e13ffe17 	ldw	r4,-8(fp)
  200924:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200928:	10bfffcc 	andi	r2,r2,65535
  20092c:	100b883a 	mov	r5,r2
  200930:	01000874 	movhi	r4,33
  200934:	210fe104 	addi	r4,r4,16260
  200938:	02017f40 	call	2017f4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
  20093c:	01800404 	movi	r6,16
  200940:	01400284 	movi	r5,10
  200944:	e13ffe17 	ldw	r4,-8(fp)
  200948:	02003580 	call	200358 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
  20094c:	01400284 	movi	r5,10
  200950:	e13ffe17 	ldw	r4,-8(fp)
  200954:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200958:	10bfffcc 	andi	r2,r2,65535
  20095c:	100b883a 	mov	r5,r2
  200960:	01000874 	movhi	r4,33
  200964:	210fe804 	addi	r4,r4,16288
  200968:	02017f40 	call	2017f4 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  20096c:	01400904 	movi	r5,36
  200970:	e13ffe17 	ldw	r4,-8(fp)
  200974:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  200978:	10bfffcc 	andi	r2,r2,65535
  20097c:	100b883a 	mov	r5,r2
  200980:	01000874 	movhi	r4,33
  200984:	210fe104 	addi	r4,r4,16260
  200988:	02017f40 	call	2017f4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  20098c:	000d883a 	mov	r6,zero
  200990:	01400384 	movi	r5,14
  200994:	e13ffe17 	ldw	r4,-8(fp)
  200998:	02003580 	call	200358 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  20099c:	01400384 	movi	r5,14
  2009a0:	e13ffe17 	ldw	r4,-8(fp)
  2009a4:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  2009a8:	10bfffcc 	andi	r2,r2,65535
  2009ac:	100b883a 	mov	r5,r2
  2009b0:	01000874 	movhi	r4,33
  2009b4:	210fef04 	addi	r4,r4,16316
  2009b8:	02017f40 	call	2017f4 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
  2009bc:	01400504 	movi	r5,20
  2009c0:	e13ffe17 	ldw	r4,-8(fp)
  2009c4:	02002a40 	call	2002a4 <SGTL5000_Reg_Rd>
  2009c8:	10bfffcc 	andi	r2,r2,65535
  2009cc:	100b883a 	mov	r5,r2
  2009d0:	01000874 	movhi	r4,33
  2009d4:	210ff704 	addi	r4,r4,16348
  2009d8:	02017f40 	call	2017f4 <printf>


	return 0;
  2009dc:	0005883a 	mov	r2,zero
}
  2009e0:	e037883a 	mov	sp,fp
  2009e4:	dfc00117 	ldw	ra,4(sp)
  2009e8:	df000017 	ldw	fp,0(sp)
  2009ec:	dec00204 	addi	sp,sp,8
  2009f0:	f800283a 	ret

002009f4 <__fixunssfsi>:
  2009f4:	defffd04 	addi	sp,sp,-12
  2009f8:	dc000015 	stw	r16,0(sp)
  2009fc:	0413c034 	movhi	r16,20224
  200a00:	800b883a 	mov	r5,r16
  200a04:	dc400115 	stw	r17,4(sp)
  200a08:	dfc00215 	stw	ra,8(sp)
  200a0c:	2023883a 	mov	r17,r4
  200a10:	0200c080 	call	200c08 <__gesf2>
  200a14:	1000070e 	bge	r2,zero,200a34 <__fixunssfsi+0x40>
  200a18:	8809883a 	mov	r4,r17
  200a1c:	02015d80 	call	2015d8 <__fixsfsi>
  200a20:	dfc00217 	ldw	ra,8(sp)
  200a24:	dc400117 	ldw	r17,4(sp)
  200a28:	dc000017 	ldw	r16,0(sp)
  200a2c:	dec00304 	addi	sp,sp,12
  200a30:	f800283a 	ret
  200a34:	800b883a 	mov	r5,r16
  200a38:	8809883a 	mov	r4,r17
  200a3c:	02010f40 	call	2010f4 <__subsf3>
  200a40:	1009883a 	mov	r4,r2
  200a44:	02015d80 	call	2015d8 <__fixsfsi>
  200a48:	00e00034 	movhi	r3,32768
  200a4c:	10c5883a 	add	r2,r2,r3
  200a50:	003ff306 	br	200a20 <_gp+0xffdeee3c>

00200a54 <__divsi3>:
  200a54:	20001b16 	blt	r4,zero,200ac4 <__divsi3+0x70>
  200a58:	000f883a 	mov	r7,zero
  200a5c:	28001616 	blt	r5,zero,200ab8 <__divsi3+0x64>
  200a60:	200d883a 	mov	r6,r4
  200a64:	29001a2e 	bgeu	r5,r4,200ad0 <__divsi3+0x7c>
  200a68:	00800804 	movi	r2,32
  200a6c:	00c00044 	movi	r3,1
  200a70:	00000106 	br	200a78 <__divsi3+0x24>
  200a74:	10000d26 	beq	r2,zero,200aac <__divsi3+0x58>
  200a78:	294b883a 	add	r5,r5,r5
  200a7c:	10bfffc4 	addi	r2,r2,-1
  200a80:	18c7883a 	add	r3,r3,r3
  200a84:	293ffb36 	bltu	r5,r4,200a74 <_gp+0xffdeee90>
  200a88:	0005883a 	mov	r2,zero
  200a8c:	18000726 	beq	r3,zero,200aac <__divsi3+0x58>
  200a90:	0005883a 	mov	r2,zero
  200a94:	31400236 	bltu	r6,r5,200aa0 <__divsi3+0x4c>
  200a98:	314dc83a 	sub	r6,r6,r5
  200a9c:	10c4b03a 	or	r2,r2,r3
  200aa0:	1806d07a 	srli	r3,r3,1
  200aa4:	280ad07a 	srli	r5,r5,1
  200aa8:	183ffa1e 	bne	r3,zero,200a94 <_gp+0xffdeeeb0>
  200aac:	38000126 	beq	r7,zero,200ab4 <__divsi3+0x60>
  200ab0:	0085c83a 	sub	r2,zero,r2
  200ab4:	f800283a 	ret
  200ab8:	014bc83a 	sub	r5,zero,r5
  200abc:	39c0005c 	xori	r7,r7,1
  200ac0:	003fe706 	br	200a60 <_gp+0xffdeee7c>
  200ac4:	0109c83a 	sub	r4,zero,r4
  200ac8:	01c00044 	movi	r7,1
  200acc:	003fe306 	br	200a5c <_gp+0xffdeee78>
  200ad0:	00c00044 	movi	r3,1
  200ad4:	003fee06 	br	200a90 <_gp+0xffdeeeac>

00200ad8 <__modsi3>:
  200ad8:	20001716 	blt	r4,zero,200b38 <__modsi3+0x60>
  200adc:	000f883a 	mov	r7,zero
  200ae0:	2005883a 	mov	r2,r4
  200ae4:	28001216 	blt	r5,zero,200b30 <__modsi3+0x58>
  200ae8:	2900162e 	bgeu	r5,r4,200b44 <__modsi3+0x6c>
  200aec:	01800804 	movi	r6,32
  200af0:	00c00044 	movi	r3,1
  200af4:	00000106 	br	200afc <__modsi3+0x24>
  200af8:	30000a26 	beq	r6,zero,200b24 <__modsi3+0x4c>
  200afc:	294b883a 	add	r5,r5,r5
  200b00:	31bfffc4 	addi	r6,r6,-1
  200b04:	18c7883a 	add	r3,r3,r3
  200b08:	293ffb36 	bltu	r5,r4,200af8 <_gp+0xffdeef14>
  200b0c:	18000526 	beq	r3,zero,200b24 <__modsi3+0x4c>
  200b10:	1806d07a 	srli	r3,r3,1
  200b14:	11400136 	bltu	r2,r5,200b1c <__modsi3+0x44>
  200b18:	1145c83a 	sub	r2,r2,r5
  200b1c:	280ad07a 	srli	r5,r5,1
  200b20:	183ffb1e 	bne	r3,zero,200b10 <_gp+0xffdeef2c>
  200b24:	38000126 	beq	r7,zero,200b2c <__modsi3+0x54>
  200b28:	0085c83a 	sub	r2,zero,r2
  200b2c:	f800283a 	ret
  200b30:	014bc83a 	sub	r5,zero,r5
  200b34:	003fec06 	br	200ae8 <_gp+0xffdeef04>
  200b38:	0109c83a 	sub	r4,zero,r4
  200b3c:	01c00044 	movi	r7,1
  200b40:	003fe706 	br	200ae0 <_gp+0xffdeeefc>
  200b44:	00c00044 	movi	r3,1
  200b48:	003ff106 	br	200b10 <_gp+0xffdeef2c>

00200b4c <__udivsi3>:
  200b4c:	200d883a 	mov	r6,r4
  200b50:	2900152e 	bgeu	r5,r4,200ba8 <__udivsi3+0x5c>
  200b54:	28001416 	blt	r5,zero,200ba8 <__udivsi3+0x5c>
  200b58:	00800804 	movi	r2,32
  200b5c:	00c00044 	movi	r3,1
  200b60:	00000206 	br	200b6c <__udivsi3+0x20>
  200b64:	10000e26 	beq	r2,zero,200ba0 <__udivsi3+0x54>
  200b68:	28000516 	blt	r5,zero,200b80 <__udivsi3+0x34>
  200b6c:	294b883a 	add	r5,r5,r5
  200b70:	10bfffc4 	addi	r2,r2,-1
  200b74:	18c7883a 	add	r3,r3,r3
  200b78:	293ffa36 	bltu	r5,r4,200b64 <_gp+0xffdeef80>
  200b7c:	18000826 	beq	r3,zero,200ba0 <__udivsi3+0x54>
  200b80:	0005883a 	mov	r2,zero
  200b84:	31400236 	bltu	r6,r5,200b90 <__udivsi3+0x44>
  200b88:	314dc83a 	sub	r6,r6,r5
  200b8c:	10c4b03a 	or	r2,r2,r3
  200b90:	1806d07a 	srli	r3,r3,1
  200b94:	280ad07a 	srli	r5,r5,1
  200b98:	183ffa1e 	bne	r3,zero,200b84 <_gp+0xffdeefa0>
  200b9c:	f800283a 	ret
  200ba0:	0005883a 	mov	r2,zero
  200ba4:	f800283a 	ret
  200ba8:	00c00044 	movi	r3,1
  200bac:	003ff406 	br	200b80 <_gp+0xffdeef9c>

00200bb0 <__umodsi3>:
  200bb0:	2005883a 	mov	r2,r4
  200bb4:	2900122e 	bgeu	r5,r4,200c00 <__umodsi3+0x50>
  200bb8:	28001116 	blt	r5,zero,200c00 <__umodsi3+0x50>
  200bbc:	01800804 	movi	r6,32
  200bc0:	00c00044 	movi	r3,1
  200bc4:	00000206 	br	200bd0 <__umodsi3+0x20>
  200bc8:	30000c26 	beq	r6,zero,200bfc <__umodsi3+0x4c>
  200bcc:	28000516 	blt	r5,zero,200be4 <__umodsi3+0x34>
  200bd0:	294b883a 	add	r5,r5,r5
  200bd4:	31bfffc4 	addi	r6,r6,-1
  200bd8:	18c7883a 	add	r3,r3,r3
  200bdc:	293ffa36 	bltu	r5,r4,200bc8 <_gp+0xffdeefe4>
  200be0:	18000626 	beq	r3,zero,200bfc <__umodsi3+0x4c>
  200be4:	1806d07a 	srli	r3,r3,1
  200be8:	11400136 	bltu	r2,r5,200bf0 <__umodsi3+0x40>
  200bec:	1145c83a 	sub	r2,r2,r5
  200bf0:	280ad07a 	srli	r5,r5,1
  200bf4:	183ffb1e 	bne	r3,zero,200be4 <_gp+0xffdef000>
  200bf8:	f800283a 	ret
  200bfc:	f800283a 	ret
  200c00:	00c00044 	movi	r3,1
  200c04:	003ff706 	br	200be4 <_gp+0xffdef000>

00200c08 <__gesf2>:
  200c08:	2004d5fa 	srli	r2,r4,23
  200c0c:	2806d5fa 	srli	r3,r5,23
  200c10:	01802034 	movhi	r6,128
  200c14:	31bfffc4 	addi	r6,r6,-1
  200c18:	10803fcc 	andi	r2,r2,255
  200c1c:	01c03fc4 	movi	r7,255
  200c20:	3110703a 	and	r8,r6,r4
  200c24:	18c03fcc 	andi	r3,r3,255
  200c28:	314c703a 	and	r6,r6,r5
  200c2c:	2008d7fa 	srli	r4,r4,31
  200c30:	280ad7fa 	srli	r5,r5,31
  200c34:	11c01926 	beq	r2,r7,200c9c <__gesf2+0x94>
  200c38:	01c03fc4 	movi	r7,255
  200c3c:	19c00f26 	beq	r3,r7,200c7c <__gesf2+0x74>
  200c40:	1000061e 	bne	r2,zero,200c5c <__gesf2+0x54>
  200c44:	400f003a 	cmpeq	r7,r8,zero
  200c48:	1800071e 	bne	r3,zero,200c68 <__gesf2+0x60>
  200c4c:	3000061e 	bne	r6,zero,200c68 <__gesf2+0x60>
  200c50:	0005883a 	mov	r2,zero
  200c54:	40000e1e 	bne	r8,zero,200c90 <__gesf2+0x88>
  200c58:	f800283a 	ret
  200c5c:	18000a1e 	bne	r3,zero,200c88 <__gesf2+0x80>
  200c60:	30000b26 	beq	r6,zero,200c90 <__gesf2+0x88>
  200c64:	000f883a 	mov	r7,zero
  200c68:	29403fcc 	andi	r5,r5,255
  200c6c:	38000726 	beq	r7,zero,200c8c <__gesf2+0x84>
  200c70:	28000826 	beq	r5,zero,200c94 <__gesf2+0x8c>
  200c74:	00800044 	movi	r2,1
  200c78:	f800283a 	ret
  200c7c:	303ff026 	beq	r6,zero,200c40 <_gp+0xffdef05c>
  200c80:	00bfff84 	movi	r2,-2
  200c84:	f800283a 	ret
  200c88:	29403fcc 	andi	r5,r5,255
  200c8c:	21400526 	beq	r4,r5,200ca4 <__gesf2+0x9c>
  200c90:	203ff826 	beq	r4,zero,200c74 <_gp+0xffdef090>
  200c94:	00bfffc4 	movi	r2,-1
  200c98:	f800283a 	ret
  200c9c:	403fe626 	beq	r8,zero,200c38 <_gp+0xffdef054>
  200ca0:	003ff706 	br	200c80 <_gp+0xffdef09c>
  200ca4:	18bffa16 	blt	r3,r2,200c90 <_gp+0xffdef0ac>
  200ca8:	10c00216 	blt	r2,r3,200cb4 <__gesf2+0xac>
  200cac:	323ff836 	bltu	r6,r8,200c90 <_gp+0xffdef0ac>
  200cb0:	4180022e 	bgeu	r8,r6,200cbc <__gesf2+0xb4>
  200cb4:	203fef1e 	bne	r4,zero,200c74 <_gp+0xffdef090>
  200cb8:	003ff606 	br	200c94 <_gp+0xffdef0b0>
  200cbc:	0005883a 	mov	r2,zero
  200cc0:	f800283a 	ret

00200cc4 <__mulsf3>:
  200cc4:	defff504 	addi	sp,sp,-44
  200cc8:	dc000115 	stw	r16,4(sp)
  200ccc:	2020d5fa 	srli	r16,r4,23
  200cd0:	dd400615 	stw	r21,24(sp)
  200cd4:	202ad7fa 	srli	r21,r4,31
  200cd8:	dc800315 	stw	r18,12(sp)
  200cdc:	04802034 	movhi	r18,128
  200ce0:	df000915 	stw	fp,36(sp)
  200ce4:	dd000515 	stw	r20,20(sp)
  200ce8:	94bfffc4 	addi	r18,r18,-1
  200cec:	dfc00a15 	stw	ra,40(sp)
  200cf0:	ddc00815 	stw	r23,32(sp)
  200cf4:	dd800715 	stw	r22,28(sp)
  200cf8:	dcc00415 	stw	r19,16(sp)
  200cfc:	dc400215 	stw	r17,8(sp)
  200d00:	84003fcc 	andi	r16,r16,255
  200d04:	9124703a 	and	r18,r18,r4
  200d08:	a829883a 	mov	r20,r21
  200d0c:	af003fcc 	andi	fp,r21,255
  200d10:	80005426 	beq	r16,zero,200e64 <__mulsf3+0x1a0>
  200d14:	00803fc4 	movi	r2,255
  200d18:	80802f26 	beq	r16,r2,200dd8 <__mulsf3+0x114>
  200d1c:	91002034 	orhi	r4,r18,128
  200d20:	202490fa 	slli	r18,r4,3
  200d24:	843fe044 	addi	r16,r16,-127
  200d28:	0023883a 	mov	r17,zero
  200d2c:	002f883a 	mov	r23,zero
  200d30:	2804d5fa 	srli	r2,r5,23
  200d34:	282cd7fa 	srli	r22,r5,31
  200d38:	01002034 	movhi	r4,128
  200d3c:	213fffc4 	addi	r4,r4,-1
  200d40:	10803fcc 	andi	r2,r2,255
  200d44:	2166703a 	and	r19,r4,r5
  200d48:	b1803fcc 	andi	r6,r22,255
  200d4c:	10004c26 	beq	r2,zero,200e80 <__mulsf3+0x1bc>
  200d50:	00c03fc4 	movi	r3,255
  200d54:	10c04726 	beq	r2,r3,200e74 <__mulsf3+0x1b0>
  200d58:	99002034 	orhi	r4,r19,128
  200d5c:	202690fa 	slli	r19,r4,3
  200d60:	10bfe044 	addi	r2,r2,-127
  200d64:	0007883a 	mov	r3,zero
  200d68:	80a1883a 	add	r16,r16,r2
  200d6c:	010003c4 	movi	r4,15
  200d70:	1c44b03a 	or	r2,r3,r17
  200d74:	b56af03a 	xor	r21,r22,r21
  200d78:	81c00044 	addi	r7,r16,1
  200d7c:	20806b36 	bltu	r4,r2,200f2c <__mulsf3+0x268>
  200d80:	100490ba 	slli	r2,r2,2
  200d84:	01000834 	movhi	r4,32
  200d88:	21036604 	addi	r4,r4,3480
  200d8c:	1105883a 	add	r2,r2,r4
  200d90:	10800017 	ldw	r2,0(r2)
  200d94:	1000683a 	jmp	r2
  200d98:	00200f2c 	andhi	zero,zero,32828
  200d9c:	00200dec 	andhi	zero,zero,32823
  200da0:	00200dec 	andhi	zero,zero,32823
  200da4:	00200de8 	cmpgeui	zero,zero,32823
  200da8:	00200f10 	cmplti	zero,zero,-32708
  200dac:	00200f10 	cmplti	zero,zero,-32708
  200db0:	00200efc 	xorhi	zero,zero,32827
  200db4:	00200de8 	cmpgeui	zero,zero,32823
  200db8:	00200f10 	cmplti	zero,zero,-32708
  200dbc:	00200efc 	xorhi	zero,zero,32827
  200dc0:	00200f10 	cmplti	zero,zero,-32708
  200dc4:	00200de8 	cmpgeui	zero,zero,32823
  200dc8:	00200f1c 	xori	zero,zero,32828
  200dcc:	00200f1c 	xori	zero,zero,32828
  200dd0:	00200f1c 	xori	zero,zero,32828
  200dd4:	0020102c 	andhi	zero,zero,32832
  200dd8:	90003b1e 	bne	r18,zero,200ec8 <__mulsf3+0x204>
  200ddc:	04400204 	movi	r17,8
  200de0:	05c00084 	movi	r23,2
  200de4:	003fd206 	br	200d30 <_gp+0xffdef14c>
  200de8:	302b883a 	mov	r21,r6
  200dec:	00800084 	movi	r2,2
  200df0:	18802626 	beq	r3,r2,200e8c <__mulsf3+0x1c8>
  200df4:	008000c4 	movi	r2,3
  200df8:	1880b826 	beq	r3,r2,2010dc <__mulsf3+0x418>
  200dfc:	00800044 	movi	r2,1
  200e00:	1880af1e 	bne	r3,r2,2010c0 <__mulsf3+0x3fc>
  200e04:	a829883a 	mov	r20,r21
  200e08:	0007883a 	mov	r3,zero
  200e0c:	0009883a 	mov	r4,zero
  200e10:	18803fcc 	andi	r2,r3,255
  200e14:	100695fa 	slli	r3,r2,23
  200e18:	a0803fcc 	andi	r2,r20,255
  200e1c:	100a97fa 	slli	r5,r2,31
  200e20:	00802034 	movhi	r2,128
  200e24:	10bfffc4 	addi	r2,r2,-1
  200e28:	2084703a 	and	r2,r4,r2
  200e2c:	10c4b03a 	or	r2,r2,r3
  200e30:	1144b03a 	or	r2,r2,r5
  200e34:	dfc00a17 	ldw	ra,40(sp)
  200e38:	df000917 	ldw	fp,36(sp)
  200e3c:	ddc00817 	ldw	r23,32(sp)
  200e40:	dd800717 	ldw	r22,28(sp)
  200e44:	dd400617 	ldw	r21,24(sp)
  200e48:	dd000517 	ldw	r20,20(sp)
  200e4c:	dcc00417 	ldw	r19,16(sp)
  200e50:	dc800317 	ldw	r18,12(sp)
  200e54:	dc400217 	ldw	r17,8(sp)
  200e58:	dc000117 	ldw	r16,4(sp)
  200e5c:	dec00b04 	addi	sp,sp,44
  200e60:	f800283a 	ret
  200e64:	90000d1e 	bne	r18,zero,200e9c <__mulsf3+0x1d8>
  200e68:	04400104 	movi	r17,4
  200e6c:	05c00044 	movi	r23,1
  200e70:	003faf06 	br	200d30 <_gp+0xffdef14c>
  200e74:	9806c03a 	cmpne	r3,r19,zero
  200e78:	18c00084 	addi	r3,r3,2
  200e7c:	003fba06 	br	200d68 <_gp+0xffdef184>
  200e80:	9800141e 	bne	r19,zero,200ed4 <__mulsf3+0x210>
  200e84:	00c00044 	movi	r3,1
  200e88:	003fb706 	br	200d68 <_gp+0xffdef184>
  200e8c:	a829883a 	mov	r20,r21
  200e90:	00ffffc4 	movi	r3,-1
  200e94:	0009883a 	mov	r4,zero
  200e98:	003fdd06 	br	200e10 <_gp+0xffdef22c>
  200e9c:	9009883a 	mov	r4,r18
  200ea0:	d9400015 	stw	r5,0(sp)
  200ea4:	02017380 	call	201738 <__clzsi2>
  200ea8:	10fffec4 	addi	r3,r2,-5
  200eac:	10801d84 	addi	r2,r2,118
  200eb0:	90e4983a 	sll	r18,r18,r3
  200eb4:	00a1c83a 	sub	r16,zero,r2
  200eb8:	0023883a 	mov	r17,zero
  200ebc:	002f883a 	mov	r23,zero
  200ec0:	d9400017 	ldw	r5,0(sp)
  200ec4:	003f9a06 	br	200d30 <_gp+0xffdef14c>
  200ec8:	04400304 	movi	r17,12
  200ecc:	05c000c4 	movi	r23,3
  200ed0:	003f9706 	br	200d30 <_gp+0xffdef14c>
  200ed4:	9809883a 	mov	r4,r19
  200ed8:	d9800015 	stw	r6,0(sp)
  200edc:	02017380 	call	201738 <__clzsi2>
  200ee0:	10fffec4 	addi	r3,r2,-5
  200ee4:	10801d84 	addi	r2,r2,118
  200ee8:	98e6983a 	sll	r19,r19,r3
  200eec:	0085c83a 	sub	r2,zero,r2
  200ef0:	0007883a 	mov	r3,zero
  200ef4:	d9800017 	ldw	r6,0(sp)
  200ef8:	003f9b06 	br	200d68 <_gp+0xffdef184>
  200efc:	01002034 	movhi	r4,128
  200f00:	0029883a 	mov	r20,zero
  200f04:	213fffc4 	addi	r4,r4,-1
  200f08:	00ffffc4 	movi	r3,-1
  200f0c:	003fc006 	br	200e10 <_gp+0xffdef22c>
  200f10:	9027883a 	mov	r19,r18
  200f14:	b807883a 	mov	r3,r23
  200f18:	003fb406 	br	200dec <_gp+0xffdef208>
  200f1c:	9027883a 	mov	r19,r18
  200f20:	e02b883a 	mov	r21,fp
  200f24:	b807883a 	mov	r3,r23
  200f28:	003fb006 	br	200dec <_gp+0xffdef208>
  200f2c:	9028d43a 	srli	r20,r18,16
  200f30:	982cd43a 	srli	r22,r19,16
  200f34:	94bfffcc 	andi	r18,r18,65535
  200f38:	9cffffcc 	andi	r19,r19,65535
  200f3c:	980b883a 	mov	r5,r19
  200f40:	9009883a 	mov	r4,r18
  200f44:	d9c00015 	stw	r7,0(sp)
  200f48:	020179c0 	call	20179c <__mulsi3>
  200f4c:	a00b883a 	mov	r5,r20
  200f50:	9809883a 	mov	r4,r19
  200f54:	1023883a 	mov	r17,r2
  200f58:	020179c0 	call	20179c <__mulsi3>
  200f5c:	a009883a 	mov	r4,r20
  200f60:	b00b883a 	mov	r5,r22
  200f64:	1027883a 	mov	r19,r2
  200f68:	020179c0 	call	20179c <__mulsi3>
  200f6c:	b00b883a 	mov	r5,r22
  200f70:	9009883a 	mov	r4,r18
  200f74:	1029883a 	mov	r20,r2
  200f78:	020179c0 	call	20179c <__mulsi3>
  200f7c:	8806d43a 	srli	r3,r17,16
  200f80:	14c5883a 	add	r2,r2,r19
  200f84:	d9c00017 	ldw	r7,0(sp)
  200f88:	1885883a 	add	r2,r3,r2
  200f8c:	14c0022e 	bgeu	r2,r19,200f98 <__mulsf3+0x2d4>
  200f90:	00c00074 	movhi	r3,1
  200f94:	a0e9883a 	add	r20,r20,r3
  200f98:	1026943a 	slli	r19,r2,16
  200f9c:	8c7fffcc 	andi	r17,r17,65535
  200fa0:	1004d43a 	srli	r2,r2,16
  200fa4:	9c63883a 	add	r17,r19,r17
  200fa8:	882691ba 	slli	r19,r17,6
  200fac:	1505883a 	add	r2,r2,r20
  200fb0:	8822d6ba 	srli	r17,r17,26
  200fb4:	100891ba 	slli	r4,r2,6
  200fb8:	9826c03a 	cmpne	r19,r19,zero
  200fbc:	9c62b03a 	or	r17,r19,r17
  200fc0:	8926b03a 	or	r19,r17,r4
  200fc4:	9882002c 	andhi	r2,r19,2048
  200fc8:	10000426 	beq	r2,zero,200fdc <__mulsf3+0x318>
  200fcc:	9804d07a 	srli	r2,r19,1
  200fd0:	9900004c 	andi	r4,r19,1
  200fd4:	3821883a 	mov	r16,r7
  200fd8:	1126b03a 	or	r19,r2,r4
  200fdc:	80c01fc4 	addi	r3,r16,127
  200fe0:	00c0210e 	bge	zero,r3,201068 <__mulsf3+0x3a4>
  200fe4:	988001cc 	andi	r2,r19,7
  200fe8:	10000426 	beq	r2,zero,200ffc <__mulsf3+0x338>
  200fec:	988003cc 	andi	r2,r19,15
  200ff0:	01000104 	movi	r4,4
  200ff4:	11000126 	beq	r2,r4,200ffc <__mulsf3+0x338>
  200ff8:	9927883a 	add	r19,r19,r4
  200ffc:	9882002c 	andhi	r2,r19,2048
  201000:	10000426 	beq	r2,zero,201014 <__mulsf3+0x350>
  201004:	00be0034 	movhi	r2,63488
  201008:	10bfffc4 	addi	r2,r2,-1
  20100c:	80c02004 	addi	r3,r16,128
  201010:	98a6703a 	and	r19,r19,r2
  201014:	00803f84 	movi	r2,254
  201018:	10ff9c16 	blt	r2,r3,200e8c <_gp+0xffdef2a8>
  20101c:	980891ba 	slli	r4,r19,6
  201020:	a829883a 	mov	r20,r21
  201024:	2008d27a 	srli	r4,r4,9
  201028:	003f7906 	br	200e10 <_gp+0xffdef22c>
  20102c:	9080102c 	andhi	r2,r18,64
  201030:	10000826 	beq	r2,zero,201054 <__mulsf3+0x390>
  201034:	9880102c 	andhi	r2,r19,64
  201038:	1000061e 	bne	r2,zero,201054 <__mulsf3+0x390>
  20103c:	00802034 	movhi	r2,128
  201040:	99001034 	orhi	r4,r19,64
  201044:	10bfffc4 	addi	r2,r2,-1
  201048:	b029883a 	mov	r20,r22
  20104c:	2088703a 	and	r4,r4,r2
  201050:	003fad06 	br	200f08 <_gp+0xffdef324>
  201054:	00802034 	movhi	r2,128
  201058:	91001034 	orhi	r4,r18,64
  20105c:	10bfffc4 	addi	r2,r2,-1
  201060:	2088703a 	and	r4,r4,r2
  201064:	003fa806 	br	200f08 <_gp+0xffdef324>
  201068:	00800044 	movi	r2,1
  20106c:	10c7c83a 	sub	r3,r2,r3
  201070:	008006c4 	movi	r2,27
  201074:	10ff6316 	blt	r2,r3,200e04 <_gp+0xffdef220>
  201078:	00800804 	movi	r2,32
  20107c:	10c5c83a 	sub	r2,r2,r3
  201080:	9884983a 	sll	r2,r19,r2
  201084:	98c6d83a 	srl	r3,r19,r3
  201088:	1004c03a 	cmpne	r2,r2,zero
  20108c:	1884b03a 	or	r2,r3,r2
  201090:	10c001cc 	andi	r3,r2,7
  201094:	18000426 	beq	r3,zero,2010a8 <__mulsf3+0x3e4>
  201098:	10c003cc 	andi	r3,r2,15
  20109c:	01000104 	movi	r4,4
  2010a0:	19000126 	beq	r3,r4,2010a8 <__mulsf3+0x3e4>
  2010a4:	1105883a 	add	r2,r2,r4
  2010a8:	10c1002c 	andhi	r3,r2,1024
  2010ac:	18000626 	beq	r3,zero,2010c8 <__mulsf3+0x404>
  2010b0:	a829883a 	mov	r20,r21
  2010b4:	00c00044 	movi	r3,1
  2010b8:	0009883a 	mov	r4,zero
  2010bc:	003f5406 	br	200e10 <_gp+0xffdef22c>
  2010c0:	3821883a 	mov	r16,r7
  2010c4:	003fc506 	br	200fdc <_gp+0xffdef3f8>
  2010c8:	100491ba 	slli	r2,r2,6
  2010cc:	a829883a 	mov	r20,r21
  2010d0:	0007883a 	mov	r3,zero
  2010d4:	1008d27a 	srli	r4,r2,9
  2010d8:	003f4d06 	br	200e10 <_gp+0xffdef22c>
  2010dc:	00802034 	movhi	r2,128
  2010e0:	99001034 	orhi	r4,r19,64
  2010e4:	10bfffc4 	addi	r2,r2,-1
  2010e8:	a829883a 	mov	r20,r21
  2010ec:	2088703a 	and	r4,r4,r2
  2010f0:	003f8506 	br	200f08 <_gp+0xffdef324>

002010f4 <__subsf3>:
  2010f4:	defffc04 	addi	sp,sp,-16
  2010f8:	280cd5fa 	srli	r6,r5,23
  2010fc:	dc000015 	stw	r16,0(sp)
  201100:	01c02034 	movhi	r7,128
  201104:	2020d5fa 	srli	r16,r4,23
  201108:	39ffffc4 	addi	r7,r7,-1
  20110c:	3906703a 	and	r3,r7,r4
  201110:	dc400115 	stw	r17,4(sp)
  201114:	394e703a 	and	r7,r7,r5
  201118:	2022d7fa 	srli	r17,r4,31
  20111c:	dfc00315 	stw	ra,12(sp)
  201120:	dc800215 	stw	r18,8(sp)
  201124:	31803fcc 	andi	r6,r6,255
  201128:	01003fc4 	movi	r4,255
  20112c:	84003fcc 	andi	r16,r16,255
  201130:	180690fa 	slli	r3,r3,3
  201134:	2804d7fa 	srli	r2,r5,31
  201138:	380e90fa 	slli	r7,r7,3
  20113c:	31006d26 	beq	r6,r4,2012f4 <__subsf3+0x200>
  201140:	1080005c 	xori	r2,r2,1
  201144:	8189c83a 	sub	r4,r16,r6
  201148:	14404f26 	beq	r2,r17,201288 <__subsf3+0x194>
  20114c:	0100770e 	bge	zero,r4,20132c <__subsf3+0x238>
  201150:	30001e1e 	bne	r6,zero,2011cc <__subsf3+0xd8>
  201154:	38006a1e 	bne	r7,zero,201300 <__subsf3+0x20c>
  201158:	188001cc 	andi	r2,r3,7
  20115c:	10000426 	beq	r2,zero,201170 <__subsf3+0x7c>
  201160:	188003cc 	andi	r2,r3,15
  201164:	01000104 	movi	r4,4
  201168:	11000126 	beq	r2,r4,201170 <__subsf3+0x7c>
  20116c:	1907883a 	add	r3,r3,r4
  201170:	1881002c 	andhi	r2,r3,1024
  201174:	10003926 	beq	r2,zero,20125c <__subsf3+0x168>
  201178:	84000044 	addi	r16,r16,1
  20117c:	00803fc4 	movi	r2,255
  201180:	80807526 	beq	r16,r2,201358 <__subsf3+0x264>
  201184:	180691ba 	slli	r3,r3,6
  201188:	8880004c 	andi	r2,r17,1
  20118c:	180ad27a 	srli	r5,r3,9
  201190:	84003fcc 	andi	r16,r16,255
  201194:	800695fa 	slli	r3,r16,23
  201198:	10803fcc 	andi	r2,r2,255
  20119c:	01002034 	movhi	r4,128
  2011a0:	213fffc4 	addi	r4,r4,-1
  2011a4:	100497fa 	slli	r2,r2,31
  2011a8:	2920703a 	and	r16,r5,r4
  2011ac:	80e0b03a 	or	r16,r16,r3
  2011b0:	8084b03a 	or	r2,r16,r2
  2011b4:	dfc00317 	ldw	ra,12(sp)
  2011b8:	dc800217 	ldw	r18,8(sp)
  2011bc:	dc400117 	ldw	r17,4(sp)
  2011c0:	dc000017 	ldw	r16,0(sp)
  2011c4:	dec00404 	addi	sp,sp,16
  2011c8:	f800283a 	ret
  2011cc:	00803fc4 	movi	r2,255
  2011d0:	80bfe126 	beq	r16,r2,201158 <_gp+0xffdef574>
  2011d4:	39c10034 	orhi	r7,r7,1024
  2011d8:	008006c4 	movi	r2,27
  2011dc:	11007416 	blt	r2,r4,2013b0 <__subsf3+0x2bc>
  2011e0:	00800804 	movi	r2,32
  2011e4:	1105c83a 	sub	r2,r2,r4
  2011e8:	3884983a 	sll	r2,r7,r2
  2011ec:	390ed83a 	srl	r7,r7,r4
  2011f0:	1008c03a 	cmpne	r4,r2,zero
  2011f4:	390eb03a 	or	r7,r7,r4
  2011f8:	19c7c83a 	sub	r3,r3,r7
  2011fc:	1881002c 	andhi	r2,r3,1024
  201200:	10001426 	beq	r2,zero,201254 <__subsf3+0x160>
  201204:	04810034 	movhi	r18,1024
  201208:	94bfffc4 	addi	r18,r18,-1
  20120c:	1ca4703a 	and	r18,r3,r18
  201210:	9009883a 	mov	r4,r18
  201214:	02017380 	call	201738 <__clzsi2>
  201218:	10bffec4 	addi	r2,r2,-5
  20121c:	90a4983a 	sll	r18,r18,r2
  201220:	14005116 	blt	r2,r16,201368 <__subsf3+0x274>
  201224:	1405c83a 	sub	r2,r2,r16
  201228:	10c00044 	addi	r3,r2,1
  20122c:	00800804 	movi	r2,32
  201230:	10c5c83a 	sub	r2,r2,r3
  201234:	9084983a 	sll	r2,r18,r2
  201238:	90e4d83a 	srl	r18,r18,r3
  20123c:	0021883a 	mov	r16,zero
  201240:	1006c03a 	cmpne	r3,r2,zero
  201244:	90c6b03a 	or	r3,r18,r3
  201248:	003fc306 	br	201158 <_gp+0xffdef574>
  20124c:	2000e026 	beq	r4,zero,2015d0 <__subsf3+0x4dc>
  201250:	2007883a 	mov	r3,r4
  201254:	188001cc 	andi	r2,r3,7
  201258:	103fc11e 	bne	r2,zero,201160 <_gp+0xffdef57c>
  20125c:	180ad0fa 	srli	r5,r3,3
  201260:	00c03fc4 	movi	r3,255
  201264:	8880004c 	andi	r2,r17,1
  201268:	80c0031e 	bne	r16,r3,201278 <__subsf3+0x184>
  20126c:	28006d26 	beq	r5,zero,201424 <__subsf3+0x330>
  201270:	29401034 	orhi	r5,r5,64
  201274:	043fffc4 	movi	r16,-1
  201278:	00c02034 	movhi	r3,128
  20127c:	18ffffc4 	addi	r3,r3,-1
  201280:	28ca703a 	and	r5,r5,r3
  201284:	003fc206 	br	201190 <_gp+0xffdef5ac>
  201288:	01003c0e 	bge	zero,r4,20137c <__subsf3+0x288>
  20128c:	30002126 	beq	r6,zero,201314 <__subsf3+0x220>
  201290:	01403fc4 	movi	r5,255
  201294:	817fb026 	beq	r16,r5,201158 <_gp+0xffdef574>
  201298:	39c10034 	orhi	r7,r7,1024
  20129c:	014006c4 	movi	r5,27
  2012a0:	29007416 	blt	r5,r4,201474 <__subsf3+0x380>
  2012a4:	01400804 	movi	r5,32
  2012a8:	290bc83a 	sub	r5,r5,r4
  2012ac:	394a983a 	sll	r5,r7,r5
  2012b0:	390ed83a 	srl	r7,r7,r4
  2012b4:	2808c03a 	cmpne	r4,r5,zero
  2012b8:	390eb03a 	or	r7,r7,r4
  2012bc:	19c7883a 	add	r3,r3,r7
  2012c0:	1901002c 	andhi	r4,r3,1024
  2012c4:	20003826 	beq	r4,zero,2013a8 <__subsf3+0x2b4>
  2012c8:	84000044 	addi	r16,r16,1
  2012cc:	01003fc4 	movi	r4,255
  2012d0:	81005426 	beq	r16,r4,201424 <__subsf3+0x330>
  2012d4:	1023883a 	mov	r17,r2
  2012d8:	00bf0034 	movhi	r2,64512
  2012dc:	10bfffc4 	addi	r2,r2,-1
  2012e0:	1900004c 	andi	r4,r3,1
  2012e4:	1886703a 	and	r3,r3,r2
  2012e8:	1806d07a 	srli	r3,r3,1
  2012ec:	1906b03a 	or	r3,r3,r4
  2012f0:	003f9906 	br	201158 <_gp+0xffdef574>
  2012f4:	383f9226 	beq	r7,zero,201140 <_gp+0xffdef55c>
  2012f8:	10803fcc 	andi	r2,r2,255
  2012fc:	003f9106 	br	201144 <_gp+0xffdef560>
  201300:	213fffc4 	addi	r4,r4,-1
  201304:	203fbc26 	beq	r4,zero,2011f8 <_gp+0xffdef614>
  201308:	00803fc4 	movi	r2,255
  20130c:	80bfb21e 	bne	r16,r2,2011d8 <_gp+0xffdef5f4>
  201310:	003f9106 	br	201158 <_gp+0xffdef574>
  201314:	383f9026 	beq	r7,zero,201158 <_gp+0xffdef574>
  201318:	213fffc4 	addi	r4,r4,-1
  20131c:	203fe726 	beq	r4,zero,2012bc <_gp+0xffdef6d8>
  201320:	01403fc4 	movi	r5,255
  201324:	817fdd1e 	bne	r16,r5,20129c <_gp+0xffdef6b8>
  201328:	003f8b06 	br	201158 <_gp+0xffdef574>
  20132c:	2000221e 	bne	r4,zero,2013b8 <__subsf3+0x2c4>
  201330:	81000044 	addi	r4,r16,1
  201334:	21003fcc 	andi	r4,r4,255
  201338:	01400044 	movi	r5,1
  20133c:	2900470e 	bge	r5,r4,20145c <__subsf3+0x368>
  201340:	19e5c83a 	sub	r18,r3,r7
  201344:	9141002c 	andhi	r5,r18,1024
  201348:	28002d26 	beq	r5,zero,201400 <__subsf3+0x30c>
  20134c:	38e5c83a 	sub	r18,r7,r3
  201350:	1023883a 	mov	r17,r2
  201354:	003fae06 	br	201210 <_gp+0xffdef62c>
  201358:	8880004c 	andi	r2,r17,1
  20135c:	043fffc4 	movi	r16,-1
  201360:	000b883a 	mov	r5,zero
  201364:	003f8a06 	br	201190 <_gp+0xffdef5ac>
  201368:	00ff0034 	movhi	r3,64512
  20136c:	18ffffc4 	addi	r3,r3,-1
  201370:	80a1c83a 	sub	r16,r16,r2
  201374:	90c6703a 	and	r3,r18,r3
  201378:	003f7706 	br	201158 <_gp+0xffdef574>
  20137c:	2000431e 	bne	r4,zero,20148c <__subsf3+0x398>
  201380:	81000044 	addi	r4,r16,1
  201384:	21803fcc 	andi	r6,r4,255
  201388:	01400044 	movi	r5,1
  20138c:	2980280e 	bge	r5,r6,201430 <__subsf3+0x33c>
  201390:	01403fc4 	movi	r5,255
  201394:	21402326 	beq	r4,r5,201424 <__subsf3+0x330>
  201398:	19c7883a 	add	r3,r3,r7
  20139c:	1806d07a 	srli	r3,r3,1
  2013a0:	2021883a 	mov	r16,r4
  2013a4:	003f6c06 	br	201158 <_gp+0xffdef574>
  2013a8:	1023883a 	mov	r17,r2
  2013ac:	003fa906 	br	201254 <_gp+0xffdef670>
  2013b0:	01c00044 	movi	r7,1
  2013b4:	003f9006 	br	2011f8 <_gp+0xffdef614>
  2013b8:	8000151e 	bne	r16,zero,201410 <__subsf3+0x31c>
  2013bc:	18002f26 	beq	r3,zero,20147c <__subsf3+0x388>
  2013c0:	0108303a 	nor	r4,zero,r4
  2013c4:	20000a26 	beq	r4,zero,2013f0 <__subsf3+0x2fc>
  2013c8:	01403fc4 	movi	r5,255
  2013cc:	31402b26 	beq	r6,r5,20147c <__subsf3+0x388>
  2013d0:	014006c4 	movi	r5,27
  2013d4:	29006e16 	blt	r5,r4,201590 <__subsf3+0x49c>
  2013d8:	01400804 	movi	r5,32
  2013dc:	290bc83a 	sub	r5,r5,r4
  2013e0:	194a983a 	sll	r5,r3,r5
  2013e4:	1908d83a 	srl	r4,r3,r4
  2013e8:	2806c03a 	cmpne	r3,r5,zero
  2013ec:	20c6b03a 	or	r3,r4,r3
  2013f0:	38c7c83a 	sub	r3,r7,r3
  2013f4:	3021883a 	mov	r16,r6
  2013f8:	1023883a 	mov	r17,r2
  2013fc:	003f7f06 	br	2011fc <_gp+0xffdef618>
  201400:	903f831e 	bne	r18,zero,201210 <_gp+0xffdef62c>
  201404:	0005883a 	mov	r2,zero
  201408:	0021883a 	mov	r16,zero
  20140c:	003f9a06 	br	201278 <_gp+0xffdef694>
  201410:	01403fc4 	movi	r5,255
  201414:	31401926 	beq	r6,r5,20147c <__subsf3+0x388>
  201418:	0109c83a 	sub	r4,zero,r4
  20141c:	18c10034 	orhi	r3,r3,1024
  201420:	003feb06 	br	2013d0 <_gp+0xffdef7ec>
  201424:	043fffc4 	movi	r16,-1
  201428:	000b883a 	mov	r5,zero
  20142c:	003f5806 	br	201190 <_gp+0xffdef5ac>
  201430:	8000481e 	bne	r16,zero,201554 <__subsf3+0x460>
  201434:	18006226 	beq	r3,zero,2015c0 <__subsf3+0x4cc>
  201438:	383f4726 	beq	r7,zero,201158 <_gp+0xffdef574>
  20143c:	19c7883a 	add	r3,r3,r7
  201440:	1881002c 	andhi	r2,r3,1024
  201444:	103f8326 	beq	r2,zero,201254 <_gp+0xffdef670>
  201448:	00bf0034 	movhi	r2,64512
  20144c:	10bfffc4 	addi	r2,r2,-1
  201450:	2821883a 	mov	r16,r5
  201454:	1886703a 	and	r3,r3,r2
  201458:	003f3f06 	br	201158 <_gp+0xffdef574>
  20145c:	80001c1e 	bne	r16,zero,2014d0 <__subsf3+0x3dc>
  201460:	1800261e 	bne	r3,zero,2014fc <__subsf3+0x408>
  201464:	38004c26 	beq	r7,zero,201598 <__subsf3+0x4a4>
  201468:	3807883a 	mov	r3,r7
  20146c:	1023883a 	mov	r17,r2
  201470:	003f3906 	br	201158 <_gp+0xffdef574>
  201474:	01c00044 	movi	r7,1
  201478:	003f9006 	br	2012bc <_gp+0xffdef6d8>
  20147c:	3807883a 	mov	r3,r7
  201480:	3021883a 	mov	r16,r6
  201484:	1023883a 	mov	r17,r2
  201488:	003f3306 	br	201158 <_gp+0xffdef574>
  20148c:	8000161e 	bne	r16,zero,2014e8 <__subsf3+0x3f4>
  201490:	18002d26 	beq	r3,zero,201548 <__subsf3+0x454>
  201494:	0108303a 	nor	r4,zero,r4
  201498:	20000a26 	beq	r4,zero,2014c4 <__subsf3+0x3d0>
  20149c:	01403fc4 	movi	r5,255
  2014a0:	31402926 	beq	r6,r5,201548 <__subsf3+0x454>
  2014a4:	014006c4 	movi	r5,27
  2014a8:	29004716 	blt	r5,r4,2015c8 <__subsf3+0x4d4>
  2014ac:	01400804 	movi	r5,32
  2014b0:	290bc83a 	sub	r5,r5,r4
  2014b4:	194a983a 	sll	r5,r3,r5
  2014b8:	1908d83a 	srl	r4,r3,r4
  2014bc:	2806c03a 	cmpne	r3,r5,zero
  2014c0:	20c6b03a 	or	r3,r4,r3
  2014c4:	19c7883a 	add	r3,r3,r7
  2014c8:	3021883a 	mov	r16,r6
  2014cc:	003f7c06 	br	2012c0 <_gp+0xffdef6dc>
  2014d0:	1800111e 	bne	r3,zero,201518 <__subsf3+0x424>
  2014d4:	38003326 	beq	r7,zero,2015a4 <__subsf3+0x4b0>
  2014d8:	3807883a 	mov	r3,r7
  2014dc:	1023883a 	mov	r17,r2
  2014e0:	04003fc4 	movi	r16,255
  2014e4:	003f1c06 	br	201158 <_gp+0xffdef574>
  2014e8:	01403fc4 	movi	r5,255
  2014ec:	31401626 	beq	r6,r5,201548 <__subsf3+0x454>
  2014f0:	0109c83a 	sub	r4,zero,r4
  2014f4:	18c10034 	orhi	r3,r3,1024
  2014f8:	003fea06 	br	2014a4 <_gp+0xffdef8c0>
  2014fc:	383f1626 	beq	r7,zero,201158 <_gp+0xffdef574>
  201500:	19c9c83a 	sub	r4,r3,r7
  201504:	2141002c 	andhi	r5,r4,1024
  201508:	283f5026 	beq	r5,zero,20124c <_gp+0xffdef668>
  20150c:	38c7c83a 	sub	r3,r7,r3
  201510:	1023883a 	mov	r17,r2
  201514:	003f1006 	br	201158 <_gp+0xffdef574>
  201518:	38001b26 	beq	r7,zero,201588 <__subsf3+0x494>
  20151c:	1806d0fa 	srli	r3,r3,3
  201520:	1900102c 	andhi	r4,r3,64
  201524:	20000526 	beq	r4,zero,20153c <__subsf3+0x448>
  201528:	380ed0fa 	srli	r7,r7,3
  20152c:	3900102c 	andhi	r4,r7,64
  201530:	2000021e 	bne	r4,zero,20153c <__subsf3+0x448>
  201534:	3807883a 	mov	r3,r7
  201538:	1023883a 	mov	r17,r2
  20153c:	180690fa 	slli	r3,r3,3
  201540:	04003fc4 	movi	r16,255
  201544:	003f0406 	br	201158 <_gp+0xffdef574>
  201548:	3807883a 	mov	r3,r7
  20154c:	3021883a 	mov	r16,r6
  201550:	003f0106 	br	201158 <_gp+0xffdef574>
  201554:	18001726 	beq	r3,zero,2015b4 <__subsf3+0x4c0>
  201558:	38000b26 	beq	r7,zero,201588 <__subsf3+0x494>
  20155c:	1806d0fa 	srli	r3,r3,3
  201560:	1900102c 	andhi	r4,r3,64
  201564:	20000426 	beq	r4,zero,201578 <__subsf3+0x484>
  201568:	380ed0fa 	srli	r7,r7,3
  20156c:	3900102c 	andhi	r4,r7,64
  201570:	2000011e 	bne	r4,zero,201578 <__subsf3+0x484>
  201574:	3807883a 	mov	r3,r7
  201578:	180690fa 	slli	r3,r3,3
  20157c:	1023883a 	mov	r17,r2
  201580:	04003fc4 	movi	r16,255
  201584:	003ef406 	br	201158 <_gp+0xffdef574>
  201588:	04003fc4 	movi	r16,255
  20158c:	003ef206 	br	201158 <_gp+0xffdef574>
  201590:	00c00044 	movi	r3,1
  201594:	003f9606 	br	2013f0 <_gp+0xffdef80c>
  201598:	000b883a 	mov	r5,zero
  20159c:	0005883a 	mov	r2,zero
  2015a0:	003f3506 	br	201278 <_gp+0xffdef694>
  2015a4:	01402034 	movhi	r5,128
  2015a8:	297fffc4 	addi	r5,r5,-1
  2015ac:	0005883a 	mov	r2,zero
  2015b0:	003f2f06 	br	201270 <_gp+0xffdef68c>
  2015b4:	3807883a 	mov	r3,r7
  2015b8:	04003fc4 	movi	r16,255
  2015bc:	003ee606 	br	201158 <_gp+0xffdef574>
  2015c0:	3807883a 	mov	r3,r7
  2015c4:	003ee406 	br	201158 <_gp+0xffdef574>
  2015c8:	00c00044 	movi	r3,1
  2015cc:	003fbd06 	br	2014c4 <_gp+0xffdef8e0>
  2015d0:	0005883a 	mov	r2,zero
  2015d4:	003f2806 	br	201278 <_gp+0xffdef694>

002015d8 <__fixsfsi>:
  2015d8:	200ad5fa 	srli	r5,r4,23
  2015dc:	00c02034 	movhi	r3,128
  2015e0:	18ffffc4 	addi	r3,r3,-1
  2015e4:	29403fcc 	andi	r5,r5,255
  2015e8:	00801f84 	movi	r2,126
  2015ec:	1906703a 	and	r3,r3,r4
  2015f0:	2008d7fa 	srli	r4,r4,31
  2015f4:	11400e0e 	bge	r2,r5,201630 <__fixsfsi+0x58>
  2015f8:	00802744 	movi	r2,157
  2015fc:	11400816 	blt	r2,r5,201620 <__fixsfsi+0x48>
  201600:	00802544 	movi	r2,149
  201604:	18c02034 	orhi	r3,r3,128
  201608:	11400b0e 	bge	r2,r5,201638 <__fixsfsi+0x60>
  20160c:	28bfda84 	addi	r2,r5,-150
  201610:	1884983a 	sll	r2,r3,r2
  201614:	20000726 	beq	r4,zero,201634 <__fixsfsi+0x5c>
  201618:	0085c83a 	sub	r2,zero,r2
  20161c:	f800283a 	ret
  201620:	00a00034 	movhi	r2,32768
  201624:	10bfffc4 	addi	r2,r2,-1
  201628:	2085883a 	add	r2,r4,r2
  20162c:	f800283a 	ret
  201630:	0005883a 	mov	r2,zero
  201634:	f800283a 	ret
  201638:	00802584 	movi	r2,150
  20163c:	1145c83a 	sub	r2,r2,r5
  201640:	1884d83a 	srl	r2,r3,r2
  201644:	003ff306 	br	201614 <_gp+0xffdefa30>

00201648 <__floatunsisf>:
  201648:	defffe04 	addi	sp,sp,-8
  20164c:	dfc00115 	stw	ra,4(sp)
  201650:	dc000015 	stw	r16,0(sp)
  201654:	20002c26 	beq	r4,zero,201708 <__floatunsisf+0xc0>
  201658:	2021883a 	mov	r16,r4
  20165c:	02017380 	call	201738 <__clzsi2>
  201660:	00c02784 	movi	r3,158
  201664:	1887c83a 	sub	r3,r3,r2
  201668:	01002584 	movi	r4,150
  20166c:	20c00f16 	blt	r4,r3,2016ac <__floatunsisf+0x64>
  201670:	20c9c83a 	sub	r4,r4,r3
  201674:	8108983a 	sll	r4,r16,r4
  201678:	00802034 	movhi	r2,128
  20167c:	10bfffc4 	addi	r2,r2,-1
  201680:	2088703a 	and	r4,r4,r2
  201684:	18803fcc 	andi	r2,r3,255
  201688:	100695fa 	slli	r3,r2,23
  20168c:	00802034 	movhi	r2,128
  201690:	10bfffc4 	addi	r2,r2,-1
  201694:	2084703a 	and	r2,r4,r2
  201698:	10c4b03a 	or	r2,r2,r3
  20169c:	dfc00117 	ldw	ra,4(sp)
  2016a0:	dc000017 	ldw	r16,0(sp)
  2016a4:	dec00204 	addi	sp,sp,8
  2016a8:	f800283a 	ret
  2016ac:	01002644 	movi	r4,153
  2016b0:	20c01816 	blt	r4,r3,201714 <__floatunsisf+0xcc>
  2016b4:	20c9c83a 	sub	r4,r4,r3
  2016b8:	8108983a 	sll	r4,r16,r4
  2016bc:	017f0034 	movhi	r5,64512
  2016c0:	297fffc4 	addi	r5,r5,-1
  2016c4:	218001cc 	andi	r6,r4,7
  2016c8:	214a703a 	and	r5,r4,r5
  2016cc:	30000426 	beq	r6,zero,2016e0 <__floatunsisf+0x98>
  2016d0:	210003cc 	andi	r4,r4,15
  2016d4:	01800104 	movi	r6,4
  2016d8:	21800126 	beq	r4,r6,2016e0 <__floatunsisf+0x98>
  2016dc:	298b883a 	add	r5,r5,r6
  2016e0:	2901002c 	andhi	r4,r5,1024
  2016e4:	20000526 	beq	r4,zero,2016fc <__floatunsisf+0xb4>
  2016e8:	00c027c4 	movi	r3,159
  2016ec:	1887c83a 	sub	r3,r3,r2
  2016f0:	00bf0034 	movhi	r2,64512
  2016f4:	10bfffc4 	addi	r2,r2,-1
  2016f8:	288a703a 	and	r5,r5,r2
  2016fc:	280891ba 	slli	r4,r5,6
  201700:	2008d27a 	srli	r4,r4,9
  201704:	003fdf06 	br	201684 <_gp+0xffdefaa0>
  201708:	0007883a 	mov	r3,zero
  20170c:	0009883a 	mov	r4,zero
  201710:	003fdc06 	br	201684 <_gp+0xffdefaa0>
  201714:	01402e44 	movi	r5,185
  201718:	28cbc83a 	sub	r5,r5,r3
  20171c:	01000144 	movi	r4,5
  201720:	2089c83a 	sub	r4,r4,r2
  201724:	814a983a 	sll	r5,r16,r5
  201728:	8108d83a 	srl	r4,r16,r4
  20172c:	2820c03a 	cmpne	r16,r5,zero
  201730:	2408b03a 	or	r4,r4,r16
  201734:	003fe106 	br	2016bc <_gp+0xffdefad8>

00201738 <__clzsi2>:
  201738:	00bfffd4 	movui	r2,65535
  20173c:	11000536 	bltu	r2,r4,201754 <__clzsi2+0x1c>
  201740:	00803fc4 	movi	r2,255
  201744:	11000f36 	bltu	r2,r4,201784 <__clzsi2+0x4c>
  201748:	00800804 	movi	r2,32
  20174c:	0007883a 	mov	r3,zero
  201750:	00000506 	br	201768 <__clzsi2+0x30>
  201754:	00804034 	movhi	r2,256
  201758:	10bfffc4 	addi	r2,r2,-1
  20175c:	11000c2e 	bgeu	r2,r4,201790 <__clzsi2+0x58>
  201760:	00800204 	movi	r2,8
  201764:	00c00604 	movi	r3,24
  201768:	20c8d83a 	srl	r4,r4,r3
  20176c:	00c00874 	movhi	r3,33
  201770:	18cfff04 	addi	r3,r3,16380
  201774:	1909883a 	add	r4,r3,r4
  201778:	20c00003 	ldbu	r3,0(r4)
  20177c:	10c5c83a 	sub	r2,r2,r3
  201780:	f800283a 	ret
  201784:	00800604 	movi	r2,24
  201788:	00c00204 	movi	r3,8
  20178c:	003ff606 	br	201768 <_gp+0xffdefb84>
  201790:	00800404 	movi	r2,16
  201794:	1007883a 	mov	r3,r2
  201798:	003ff306 	br	201768 <_gp+0xffdefb84>

0020179c <__mulsi3>:
  20179c:	0005883a 	mov	r2,zero
  2017a0:	20000726 	beq	r4,zero,2017c0 <__mulsi3+0x24>
  2017a4:	20c0004c 	andi	r3,r4,1
  2017a8:	2008d07a 	srli	r4,r4,1
  2017ac:	18000126 	beq	r3,zero,2017b4 <__mulsi3+0x18>
  2017b0:	1145883a 	add	r2,r2,r5
  2017b4:	294b883a 	add	r5,r5,r5
  2017b8:	203ffa1e 	bne	r4,zero,2017a4 <_gp+0xffdefbc0>
  2017bc:	f800283a 	ret
  2017c0:	f800283a 	ret

002017c4 <_printf_r>:
  2017c4:	defffd04 	addi	sp,sp,-12
  2017c8:	2805883a 	mov	r2,r5
  2017cc:	dfc00015 	stw	ra,0(sp)
  2017d0:	d9800115 	stw	r6,4(sp)
  2017d4:	d9c00215 	stw	r7,8(sp)
  2017d8:	21400217 	ldw	r5,8(r4)
  2017dc:	d9c00104 	addi	r7,sp,4
  2017e0:	100d883a 	mov	r6,r2
  2017e4:	020199c0 	call	20199c <___vfprintf_internal_r>
  2017e8:	dfc00017 	ldw	ra,0(sp)
  2017ec:	dec00304 	addi	sp,sp,12
  2017f0:	f800283a 	ret

002017f4 <printf>:
  2017f4:	defffc04 	addi	sp,sp,-16
  2017f8:	dfc00015 	stw	ra,0(sp)
  2017fc:	d9400115 	stw	r5,4(sp)
  201800:	d9800215 	stw	r6,8(sp)
  201804:	d9c00315 	stw	r7,12(sp)
  201808:	00801074 	movhi	r2,65
  20180c:	10a6fa04 	addi	r2,r2,-25624
  201810:	10800017 	ldw	r2,0(r2)
  201814:	200b883a 	mov	r5,r4
  201818:	d9800104 	addi	r6,sp,4
  20181c:	11000217 	ldw	r4,8(r2)
  201820:	0203c780 	call	203c78 <__vfprintf_internal>
  201824:	dfc00017 	ldw	ra,0(sp)
  201828:	dec00404 	addi	sp,sp,16
  20182c:	f800283a 	ret

00201830 <_puts_r>:
  201830:	defff604 	addi	sp,sp,-40
  201834:	dc000715 	stw	r16,28(sp)
  201838:	2021883a 	mov	r16,r4
  20183c:	2809883a 	mov	r4,r5
  201840:	dc400815 	stw	r17,32(sp)
  201844:	dfc00915 	stw	ra,36(sp)
  201848:	2823883a 	mov	r17,r5
  20184c:	02019040 	call	201904 <strlen>
  201850:	10c00044 	addi	r3,r2,1
  201854:	d8800115 	stw	r2,4(sp)
  201858:	00800874 	movhi	r2,33
  20185c:	10903f04 	addi	r2,r2,16636
  201860:	d8800215 	stw	r2,8(sp)
  201864:	00800044 	movi	r2,1
  201868:	d8800315 	stw	r2,12(sp)
  20186c:	00800084 	movi	r2,2
  201870:	dc400015 	stw	r17,0(sp)
  201874:	d8c00615 	stw	r3,24(sp)
  201878:	dec00415 	stw	sp,16(sp)
  20187c:	d8800515 	stw	r2,20(sp)
  201880:	80000226 	beq	r16,zero,20188c <_puts_r+0x5c>
  201884:	80800e17 	ldw	r2,56(r16)
  201888:	10001426 	beq	r2,zero,2018dc <_puts_r+0xac>
  20188c:	81400217 	ldw	r5,8(r16)
  201890:	2880030b 	ldhu	r2,12(r5)
  201894:	10c8000c 	andi	r3,r2,8192
  201898:	1800061e 	bne	r3,zero,2018b4 <_puts_r+0x84>
  20189c:	29001917 	ldw	r4,100(r5)
  2018a0:	00f7ffc4 	movi	r3,-8193
  2018a4:	10880014 	ori	r2,r2,8192
  2018a8:	20c6703a 	and	r3,r4,r3
  2018ac:	2880030d 	sth	r2,12(r5)
  2018b0:	28c01915 	stw	r3,100(r5)
  2018b4:	d9800404 	addi	r6,sp,16
  2018b8:	8009883a 	mov	r4,r16
  2018bc:	02061e00 	call	2061e0 <__sfvwrite_r>
  2018c0:	1000091e 	bne	r2,zero,2018e8 <_puts_r+0xb8>
  2018c4:	00800284 	movi	r2,10
  2018c8:	dfc00917 	ldw	ra,36(sp)
  2018cc:	dc400817 	ldw	r17,32(sp)
  2018d0:	dc000717 	ldw	r16,28(sp)
  2018d4:	dec00a04 	addi	sp,sp,40
  2018d8:	f800283a 	ret
  2018dc:	8009883a 	mov	r4,r16
  2018e0:	0205d5c0 	call	205d5c <__sinit>
  2018e4:	003fe906 	br	20188c <_gp+0xffdefca8>
  2018e8:	00bfffc4 	movi	r2,-1
  2018ec:	003ff606 	br	2018c8 <_gp+0xffdefce4>

002018f0 <puts>:
  2018f0:	00801074 	movhi	r2,65
  2018f4:	10a6fa04 	addi	r2,r2,-25624
  2018f8:	200b883a 	mov	r5,r4
  2018fc:	11000017 	ldw	r4,0(r2)
  201900:	02018301 	jmpi	201830 <_puts_r>

00201904 <strlen>:
  201904:	208000cc 	andi	r2,r4,3
  201908:	10002026 	beq	r2,zero,20198c <strlen+0x88>
  20190c:	20800007 	ldb	r2,0(r4)
  201910:	10002026 	beq	r2,zero,201994 <strlen+0x90>
  201914:	2005883a 	mov	r2,r4
  201918:	00000206 	br	201924 <strlen+0x20>
  20191c:	10c00007 	ldb	r3,0(r2)
  201920:	18001826 	beq	r3,zero,201984 <strlen+0x80>
  201924:	10800044 	addi	r2,r2,1
  201928:	10c000cc 	andi	r3,r2,3
  20192c:	183ffb1e 	bne	r3,zero,20191c <_gp+0xffdefd38>
  201930:	10c00017 	ldw	r3,0(r2)
  201934:	01ffbff4 	movhi	r7,65279
  201938:	39ffbfc4 	addi	r7,r7,-257
  20193c:	00ca303a 	nor	r5,zero,r3
  201940:	01a02074 	movhi	r6,32897
  201944:	19c7883a 	add	r3,r3,r7
  201948:	31a02004 	addi	r6,r6,-32640
  20194c:	1946703a 	and	r3,r3,r5
  201950:	1986703a 	and	r3,r3,r6
  201954:	1800091e 	bne	r3,zero,20197c <strlen+0x78>
  201958:	10800104 	addi	r2,r2,4
  20195c:	10c00017 	ldw	r3,0(r2)
  201960:	19cb883a 	add	r5,r3,r7
  201964:	00c6303a 	nor	r3,zero,r3
  201968:	28c6703a 	and	r3,r5,r3
  20196c:	1986703a 	and	r3,r3,r6
  201970:	183ff926 	beq	r3,zero,201958 <_gp+0xffdefd74>
  201974:	00000106 	br	20197c <strlen+0x78>
  201978:	10800044 	addi	r2,r2,1
  20197c:	10c00007 	ldb	r3,0(r2)
  201980:	183ffd1e 	bne	r3,zero,201978 <_gp+0xffdefd94>
  201984:	1105c83a 	sub	r2,r2,r4
  201988:	f800283a 	ret
  20198c:	2005883a 	mov	r2,r4
  201990:	003fe706 	br	201930 <_gp+0xffdefd4c>
  201994:	0005883a 	mov	r2,zero
  201998:	f800283a 	ret

0020199c <___vfprintf_internal_r>:
  20199c:	deffb804 	addi	sp,sp,-288
  2019a0:	dfc04715 	stw	ra,284(sp)
  2019a4:	ddc04515 	stw	r23,276(sp)
  2019a8:	dd404315 	stw	r21,268(sp)
  2019ac:	d9002d15 	stw	r4,180(sp)
  2019b0:	282f883a 	mov	r23,r5
  2019b4:	302b883a 	mov	r21,r6
  2019b8:	d9c02e15 	stw	r7,184(sp)
  2019bc:	df004615 	stw	fp,280(sp)
  2019c0:	dd804415 	stw	r22,272(sp)
  2019c4:	dd004215 	stw	r20,264(sp)
  2019c8:	dcc04115 	stw	r19,260(sp)
  2019cc:	dc804015 	stw	r18,256(sp)
  2019d0:	dc403f15 	stw	r17,252(sp)
  2019d4:	dc003e15 	stw	r16,248(sp)
  2019d8:	02068dc0 	call	2068dc <_localeconv_r>
  2019dc:	10800017 	ldw	r2,0(r2)
  2019e0:	1009883a 	mov	r4,r2
  2019e4:	d8803415 	stw	r2,208(sp)
  2019e8:	02019040 	call	201904 <strlen>
  2019ec:	d8803715 	stw	r2,220(sp)
  2019f0:	d8802d17 	ldw	r2,180(sp)
  2019f4:	10000226 	beq	r2,zero,201a00 <___vfprintf_internal_r+0x64>
  2019f8:	10800e17 	ldw	r2,56(r2)
  2019fc:	1000fb26 	beq	r2,zero,201dec <___vfprintf_internal_r+0x450>
  201a00:	b880030b 	ldhu	r2,12(r23)
  201a04:	10c8000c 	andi	r3,r2,8192
  201a08:	1800061e 	bne	r3,zero,201a24 <___vfprintf_internal_r+0x88>
  201a0c:	b9001917 	ldw	r4,100(r23)
  201a10:	00f7ffc4 	movi	r3,-8193
  201a14:	10880014 	ori	r2,r2,8192
  201a18:	20c6703a 	and	r3,r4,r3
  201a1c:	b880030d 	sth	r2,12(r23)
  201a20:	b8c01915 	stw	r3,100(r23)
  201a24:	10c0020c 	andi	r3,r2,8
  201a28:	1800c326 	beq	r3,zero,201d38 <___vfprintf_internal_r+0x39c>
  201a2c:	b8c00417 	ldw	r3,16(r23)
  201a30:	1800c126 	beq	r3,zero,201d38 <___vfprintf_internal_r+0x39c>
  201a34:	1080068c 	andi	r2,r2,26
  201a38:	00c00284 	movi	r3,10
  201a3c:	10c0c626 	beq	r2,r3,201d58 <___vfprintf_internal_r+0x3bc>
  201a40:	d8c00404 	addi	r3,sp,16
  201a44:	05000874 	movhi	r20,33
  201a48:	d9001e04 	addi	r4,sp,120
  201a4c:	a5105084 	addi	r20,r20,16706
  201a50:	d8c01e15 	stw	r3,120(sp)
  201a54:	d8002015 	stw	zero,128(sp)
  201a58:	d8001f15 	stw	zero,124(sp)
  201a5c:	d8003315 	stw	zero,204(sp)
  201a60:	d8003615 	stw	zero,216(sp)
  201a64:	d8003815 	stw	zero,224(sp)
  201a68:	1811883a 	mov	r8,r3
  201a6c:	d8003915 	stw	zero,228(sp)
  201a70:	d8003a15 	stw	zero,232(sp)
  201a74:	d8002f15 	stw	zero,188(sp)
  201a78:	d9002815 	stw	r4,160(sp)
  201a7c:	a8800007 	ldb	r2,0(r21)
  201a80:	10028b26 	beq	r2,zero,2024b0 <___vfprintf_internal_r+0xb14>
  201a84:	00c00944 	movi	r3,37
  201a88:	a823883a 	mov	r17,r21
  201a8c:	10c0021e 	bne	r2,r3,201a98 <___vfprintf_internal_r+0xfc>
  201a90:	00001406 	br	201ae4 <___vfprintf_internal_r+0x148>
  201a94:	10c00326 	beq	r2,r3,201aa4 <___vfprintf_internal_r+0x108>
  201a98:	8c400044 	addi	r17,r17,1
  201a9c:	88800007 	ldb	r2,0(r17)
  201aa0:	103ffc1e 	bne	r2,zero,201a94 <_gp+0xffdefeb0>
  201aa4:	8d61c83a 	sub	r16,r17,r21
  201aa8:	80000e26 	beq	r16,zero,201ae4 <___vfprintf_internal_r+0x148>
  201aac:	d8c02017 	ldw	r3,128(sp)
  201ab0:	d8801f17 	ldw	r2,124(sp)
  201ab4:	45400015 	stw	r21,0(r8)
  201ab8:	1c07883a 	add	r3,r3,r16
  201abc:	10800044 	addi	r2,r2,1
  201ac0:	d8c02015 	stw	r3,128(sp)
  201ac4:	44000115 	stw	r16,4(r8)
  201ac8:	d8801f15 	stw	r2,124(sp)
  201acc:	00c001c4 	movi	r3,7
  201ad0:	1880a916 	blt	r3,r2,201d78 <___vfprintf_internal_r+0x3dc>
  201ad4:	42000204 	addi	r8,r8,8
  201ad8:	d9402f17 	ldw	r5,188(sp)
  201adc:	2c0b883a 	add	r5,r5,r16
  201ae0:	d9402f15 	stw	r5,188(sp)
  201ae4:	88800007 	ldb	r2,0(r17)
  201ae8:	1000aa26 	beq	r2,zero,201d94 <___vfprintf_internal_r+0x3f8>
  201aec:	8d400044 	addi	r21,r17,1
  201af0:	8c400047 	ldb	r17,1(r17)
  201af4:	0021883a 	mov	r16,zero
  201af8:	00bfffc4 	movi	r2,-1
  201afc:	0025883a 	mov	r18,zero
  201b00:	dc002905 	stb	r16,164(sp)
  201b04:	d8002785 	stb	zero,158(sp)
  201b08:	d8002b05 	stb	zero,172(sp)
  201b0c:	d8802a15 	stw	r2,168(sp)
  201b10:	d8003115 	stw	zero,196(sp)
  201b14:	04c01604 	movi	r19,88
  201b18:	05800244 	movi	r22,9
  201b1c:	9021883a 	mov	r16,r18
  201b20:	4039883a 	mov	fp,r8
  201b24:	ad400044 	addi	r21,r21,1
  201b28:	88bff804 	addi	r2,r17,-32
  201b2c:	98833236 	bltu	r19,r2,2027f8 <___vfprintf_internal_r+0xe5c>
  201b30:	100490ba 	slli	r2,r2,2
  201b34:	00c00834 	movhi	r3,32
  201b38:	18c6d204 	addi	r3,r3,6984
  201b3c:	10c5883a 	add	r2,r2,r3
  201b40:	10800017 	ldw	r2,0(r2)
  201b44:	1000683a 	jmp	r2
  201b48:	002026f0 	cmpltui	zero,zero,32923
  201b4c:	002027f8 	rdprs	zero,zero,-32609
  201b50:	002027f8 	rdprs	zero,zero,-32609
  201b54:	00202710 	cmplti	zero,zero,-32612
  201b58:	002027f8 	rdprs	zero,zero,-32609
  201b5c:	002027f8 	rdprs	zero,zero,-32609
  201b60:	002027f8 	rdprs	zero,zero,-32609
  201b64:	002027f8 	rdprs	zero,zero,-32609
  201b68:	002027f8 	rdprs	zero,zero,-32609
  201b6c:	002027f8 	rdprs	zero,zero,-32609
  201b70:	00201df8 	rdprs	zero,zero,-32649
  201b74:	00202600 	call	20260 <__alt_mem_onchip_flash_0_data-0x1dfda0>
  201b78:	002027f8 	rdprs	zero,zero,-32609
  201b7c:	00201cbc 	xorhi	zero,zero,32882
  201b80:	00201e1c 	xori	zero,zero,32888
  201b84:	002027f8 	rdprs	zero,zero,-32609
  201b88:	00201e6c 	andhi	zero,zero,32889
  201b8c:	00201e78 	rdprs	zero,zero,-32647
  201b90:	00201e78 	rdprs	zero,zero,-32647
  201b94:	00201e78 	rdprs	zero,zero,-32647
  201b98:	00201e78 	rdprs	zero,zero,-32647
  201b9c:	00201e78 	rdprs	zero,zero,-32647
  201ba0:	00201e78 	rdprs	zero,zero,-32647
  201ba4:	00201e78 	rdprs	zero,zero,-32647
  201ba8:	00201e78 	rdprs	zero,zero,-32647
  201bac:	00201e78 	rdprs	zero,zero,-32647
  201bb0:	002027f8 	rdprs	zero,zero,-32609
  201bb4:	002027f8 	rdprs	zero,zero,-32609
  201bb8:	002027f8 	rdprs	zero,zero,-32609
  201bbc:	002027f8 	rdprs	zero,zero,-32609
  201bc0:	002027f8 	rdprs	zero,zero,-32609
  201bc4:	002027f8 	rdprs	zero,zero,-32609
  201bc8:	002027f8 	rdprs	zero,zero,-32609
  201bcc:	002027f8 	rdprs	zero,zero,-32609
  201bd0:	002027f8 	rdprs	zero,zero,-32609
  201bd4:	002027f8 	rdprs	zero,zero,-32609
  201bd8:	00201eb4 	movhi	zero,32890
  201bdc:	00201f7c 	xorhi	zero,zero,32893
  201be0:	002027f8 	rdprs	zero,zero,-32609
  201be4:	00201f7c 	xorhi	zero,zero,32893
  201be8:	002027f8 	rdprs	zero,zero,-32609
  201bec:	002027f8 	rdprs	zero,zero,-32609
  201bf0:	002027f8 	rdprs	zero,zero,-32609
  201bf4:	002027f8 	rdprs	zero,zero,-32609
  201bf8:	00202028 	cmpgeui	zero,zero,32896
  201bfc:	002027f8 	rdprs	zero,zero,-32609
  201c00:	002027f8 	rdprs	zero,zero,-32609
  201c04:	00202034 	movhi	zero,32896
  201c08:	002027f8 	rdprs	zero,zero,-32609
  201c0c:	002027f8 	rdprs	zero,zero,-32609
  201c10:	002027f8 	rdprs	zero,zero,-32609
  201c14:	002027f8 	rdprs	zero,zero,-32609
  201c18:	002027f8 	rdprs	zero,zero,-32609
  201c1c:	002024b8 	rdprs	zero,zero,-32622
  201c20:	002027f8 	rdprs	zero,zero,-32609
  201c24:	002027f8 	rdprs	zero,zero,-32609
  201c28:	00202524 	muli	zero,zero,-32620
  201c2c:	002027f8 	rdprs	zero,zero,-32609
  201c30:	002027f8 	rdprs	zero,zero,-32609
  201c34:	002027f8 	rdprs	zero,zero,-32609
  201c38:	002027f8 	rdprs	zero,zero,-32609
  201c3c:	002027f8 	rdprs	zero,zero,-32609
  201c40:	002027f8 	rdprs	zero,zero,-32609
  201c44:	002027f8 	rdprs	zero,zero,-32609
  201c48:	002027f8 	rdprs	zero,zero,-32609
  201c4c:	002027f8 	rdprs	zero,zero,-32609
  201c50:	002027f8 	rdprs	zero,zero,-32609
  201c54:	0020279c 	xori	zero,zero,32926
  201c58:	0020271c 	xori	zero,zero,32924
  201c5c:	00201f7c 	xorhi	zero,zero,32893
  201c60:	00201f7c 	xorhi	zero,zero,32893
  201c64:	00201f7c 	xorhi	zero,zero,32893
  201c68:	0020273c 	xorhi	zero,zero,32924
  201c6c:	0020271c 	xori	zero,zero,32924
  201c70:	002027f8 	rdprs	zero,zero,-32609
  201c74:	002027f8 	rdprs	zero,zero,-32609
  201c78:	00202748 	cmpgei	zero,zero,-32611
  201c7c:	002027f8 	rdprs	zero,zero,-32609
  201c80:	0020275c 	xori	zero,zero,32925
  201c84:	002025e0 	cmpeqi	zero,zero,-32617
  201c88:	00201cc8 	cmpgei	zero,zero,-32653
  201c8c:	00202618 	cmpnei	zero,zero,-32616
  201c90:	002027f8 	rdprs	zero,zero,-32609
  201c94:	00202624 	muli	zero,zero,-32616
  201c98:	002027f8 	rdprs	zero,zero,-32609
  201c9c:	00202688 	cmpgei	zero,zero,-32614
  201ca0:	002027f8 	rdprs	zero,zero,-32609
  201ca4:	002027f8 	rdprs	zero,zero,-32609
  201ca8:	002026a8 	cmpgeui	zero,zero,32922
  201cac:	d8c03117 	ldw	r3,196(sp)
  201cb0:	d8802e15 	stw	r2,184(sp)
  201cb4:	00c7c83a 	sub	r3,zero,r3
  201cb8:	d8c03115 	stw	r3,196(sp)
  201cbc:	84000114 	ori	r16,r16,4
  201cc0:	ac400007 	ldb	r17,0(r21)
  201cc4:	003f9706 	br	201b24 <_gp+0xffdeff40>
  201cc8:	00800c04 	movi	r2,48
  201ccc:	d8802705 	stb	r2,156(sp)
  201cd0:	00801e04 	movi	r2,120
  201cd4:	d8802745 	stb	r2,157(sp)
  201cd8:	d9002a17 	ldw	r4,168(sp)
  201cdc:	d8802e17 	ldw	r2,184(sp)
  201ce0:	d8002785 	stb	zero,158(sp)
  201ce4:	e011883a 	mov	r8,fp
  201ce8:	10c00104 	addi	r3,r2,4
  201cec:	14c00017 	ldw	r19,0(r2)
  201cf0:	002d883a 	mov	r22,zero
  201cf4:	80800094 	ori	r2,r16,2
  201cf8:	2002ca16 	blt	r4,zero,202824 <___vfprintf_internal_r+0xe88>
  201cfc:	00bfdfc4 	movi	r2,-129
  201d00:	80a4703a 	and	r18,r16,r2
  201d04:	d8c02e15 	stw	r3,184(sp)
  201d08:	94800094 	ori	r18,r18,2
  201d0c:	9802b41e 	bne	r19,zero,2027e0 <___vfprintf_internal_r+0xe44>
  201d10:	01400874 	movhi	r5,33
  201d14:	29504904 	addi	r5,r5,16676
  201d18:	d9403915 	stw	r5,228(sp)
  201d1c:	04401e04 	movi	r17,120
  201d20:	d8802a17 	ldw	r2,168(sp)
  201d24:	0039883a 	mov	fp,zero
  201d28:	1001fa26 	beq	r2,zero,202514 <___vfprintf_internal_r+0xb78>
  201d2c:	0027883a 	mov	r19,zero
  201d30:	002d883a 	mov	r22,zero
  201d34:	00021906 	br	20259c <___vfprintf_internal_r+0xc00>
  201d38:	d9002d17 	ldw	r4,180(sp)
  201d3c:	b80b883a 	mov	r5,r23
  201d40:	0203d500 	call	203d50 <__swsetup_r>
  201d44:	1005dc1e 	bne	r2,zero,2034b8 <___vfprintf_internal_r+0x1b1c>
  201d48:	b880030b 	ldhu	r2,12(r23)
  201d4c:	00c00284 	movi	r3,10
  201d50:	1080068c 	andi	r2,r2,26
  201d54:	10ff3a1e 	bne	r2,r3,201a40 <_gp+0xffdefe5c>
  201d58:	b880038f 	ldh	r2,14(r23)
  201d5c:	103f3816 	blt	r2,zero,201a40 <_gp+0xffdefe5c>
  201d60:	d9c02e17 	ldw	r7,184(sp)
  201d64:	d9002d17 	ldw	r4,180(sp)
  201d68:	a80d883a 	mov	r6,r21
  201d6c:	b80b883a 	mov	r5,r23
  201d70:	0203c940 	call	203c94 <__sbprintf>
  201d74:	00001106 	br	201dbc <___vfprintf_internal_r+0x420>
  201d78:	d9002d17 	ldw	r4,180(sp)
  201d7c:	d9801e04 	addi	r6,sp,120
  201d80:	b80b883a 	mov	r5,r23
  201d84:	020917c0 	call	20917c <__sprint_r>
  201d88:	1000081e 	bne	r2,zero,201dac <___vfprintf_internal_r+0x410>
  201d8c:	da000404 	addi	r8,sp,16
  201d90:	003f5106 	br	201ad8 <_gp+0xffdefef4>
  201d94:	d8802017 	ldw	r2,128(sp)
  201d98:	10000426 	beq	r2,zero,201dac <___vfprintf_internal_r+0x410>
  201d9c:	d9002d17 	ldw	r4,180(sp)
  201da0:	d9801e04 	addi	r6,sp,120
  201da4:	b80b883a 	mov	r5,r23
  201da8:	020917c0 	call	20917c <__sprint_r>
  201dac:	b880030b 	ldhu	r2,12(r23)
  201db0:	1080100c 	andi	r2,r2,64
  201db4:	1005c01e 	bne	r2,zero,2034b8 <___vfprintf_internal_r+0x1b1c>
  201db8:	d8802f17 	ldw	r2,188(sp)
  201dbc:	dfc04717 	ldw	ra,284(sp)
  201dc0:	df004617 	ldw	fp,280(sp)
  201dc4:	ddc04517 	ldw	r23,276(sp)
  201dc8:	dd804417 	ldw	r22,272(sp)
  201dcc:	dd404317 	ldw	r21,268(sp)
  201dd0:	dd004217 	ldw	r20,264(sp)
  201dd4:	dcc04117 	ldw	r19,260(sp)
  201dd8:	dc804017 	ldw	r18,256(sp)
  201ddc:	dc403f17 	ldw	r17,252(sp)
  201de0:	dc003e17 	ldw	r16,248(sp)
  201de4:	dec04804 	addi	sp,sp,288
  201de8:	f800283a 	ret
  201dec:	d9002d17 	ldw	r4,180(sp)
  201df0:	0205d5c0 	call	205d5c <__sinit>
  201df4:	003f0206 	br	201a00 <_gp+0xffdefe1c>
  201df8:	d9002e17 	ldw	r4,184(sp)
  201dfc:	d9402e17 	ldw	r5,184(sp)
  201e00:	21000017 	ldw	r4,0(r4)
  201e04:	28800104 	addi	r2,r5,4
  201e08:	d9003115 	stw	r4,196(sp)
  201e0c:	203fa716 	blt	r4,zero,201cac <_gp+0xffdf00c8>
  201e10:	d8802e15 	stw	r2,184(sp)
  201e14:	ac400007 	ldb	r17,0(r21)
  201e18:	003f4206 	br	201b24 <_gp+0xffdeff40>
  201e1c:	ac400007 	ldb	r17,0(r21)
  201e20:	01000a84 	movi	r4,42
  201e24:	a8c00044 	addi	r3,r21,1
  201e28:	89075826 	beq	r17,r4,203b8c <___vfprintf_internal_r+0x21f0>
  201e2c:	8cbff404 	addi	r18,r17,-48
  201e30:	b486ae36 	bltu	r22,r18,2038ec <___vfprintf_internal_r+0x1f50>
  201e34:	0009883a 	mov	r4,zero
  201e38:	1823883a 	mov	r17,r3
  201e3c:	01400284 	movi	r5,10
  201e40:	020179c0 	call	20179c <__mulsi3>
  201e44:	88c00007 	ldb	r3,0(r17)
  201e48:	1489883a 	add	r4,r2,r18
  201e4c:	8d400044 	addi	r21,r17,1
  201e50:	1cbff404 	addi	r18,r3,-48
  201e54:	a823883a 	mov	r17,r21
  201e58:	b4bff82e 	bgeu	r22,r18,201e3c <_gp+0xffdf0258>
  201e5c:	1823883a 	mov	r17,r3
  201e60:	2005f616 	blt	r4,zero,20363c <___vfprintf_internal_r+0x1ca0>
  201e64:	d9002a15 	stw	r4,168(sp)
  201e68:	003f2f06 	br	201b28 <_gp+0xffdeff44>
  201e6c:	84002014 	ori	r16,r16,128
  201e70:	ac400007 	ldb	r17,0(r21)
  201e74:	003f2b06 	br	201b24 <_gp+0xffdeff40>
  201e78:	8cbff404 	addi	r18,r17,-48
  201e7c:	d8003115 	stw	zero,196(sp)
  201e80:	0009883a 	mov	r4,zero
  201e84:	a823883a 	mov	r17,r21
  201e88:	01400284 	movi	r5,10
  201e8c:	020179c0 	call	20179c <__mulsi3>
  201e90:	88c00007 	ldb	r3,0(r17)
  201e94:	9089883a 	add	r4,r18,r2
  201e98:	ad400044 	addi	r21,r21,1
  201e9c:	1cbff404 	addi	r18,r3,-48
  201ea0:	a823883a 	mov	r17,r21
  201ea4:	b4bff82e 	bgeu	r22,r18,201e88 <_gp+0xffdf02a4>
  201ea8:	1823883a 	mov	r17,r3
  201eac:	d9003115 	stw	r4,196(sp)
  201eb0:	003f1d06 	br	201b28 <_gp+0xffdeff44>
  201eb4:	8025883a 	mov	r18,r16
  201eb8:	dc002903 	ldbu	r16,164(sp)
  201ebc:	e011883a 	mov	r8,fp
  201ec0:	84003fcc 	andi	r16,r16,255
  201ec4:	8007531e 	bne	r16,zero,203c14 <___vfprintf_internal_r+0x2278>
  201ec8:	94800414 	ori	r18,r18,16
  201ecc:	9080080c 	andi	r2,r18,32
  201ed0:	1003a326 	beq	r2,zero,202d60 <___vfprintf_internal_r+0x13c4>
  201ed4:	d9002e17 	ldw	r4,184(sp)
  201ed8:	20800117 	ldw	r2,4(r4)
  201edc:	24c00017 	ldw	r19,0(r4)
  201ee0:	21000204 	addi	r4,r4,8
  201ee4:	d9002e15 	stw	r4,184(sp)
  201ee8:	102d883a 	mov	r22,r2
  201eec:	10047316 	blt	r2,zero,2030bc <___vfprintf_internal_r+0x1720>
  201ef0:	d9002a17 	ldw	r4,168(sp)
  201ef4:	df002783 	ldbu	fp,158(sp)
  201ef8:	2003e416 	blt	r4,zero,202e8c <___vfprintf_internal_r+0x14f0>
  201efc:	00ffdfc4 	movi	r3,-129
  201f00:	9d84b03a 	or	r2,r19,r22
  201f04:	90e4703a 	and	r18,r18,r3
  201f08:	10018026 	beq	r2,zero,20250c <___vfprintf_internal_r+0xb70>
  201f0c:	b003ab26 	beq	r22,zero,202dbc <___vfprintf_internal_r+0x1420>
  201f10:	dc402915 	stw	r17,164(sp)
  201f14:	dc001e04 	addi	r16,sp,120
  201f18:	b023883a 	mov	r17,r22
  201f1c:	402d883a 	mov	r22,r8
  201f20:	9809883a 	mov	r4,r19
  201f24:	880b883a 	mov	r5,r17
  201f28:	01800284 	movi	r6,10
  201f2c:	000f883a 	mov	r7,zero
  201f30:	020b6c00 	call	20b6c0 <__umoddi3>
  201f34:	10800c04 	addi	r2,r2,48
  201f38:	843fffc4 	addi	r16,r16,-1
  201f3c:	9809883a 	mov	r4,r19
  201f40:	880b883a 	mov	r5,r17
  201f44:	80800005 	stb	r2,0(r16)
  201f48:	01800284 	movi	r6,10
  201f4c:	000f883a 	mov	r7,zero
  201f50:	020b0c40 	call	20b0c4 <__udivdi3>
  201f54:	1027883a 	mov	r19,r2
  201f58:	10c4b03a 	or	r2,r2,r3
  201f5c:	1823883a 	mov	r17,r3
  201f60:	103fef1e 	bne	r2,zero,201f20 <_gp+0xffdf033c>
  201f64:	d8c02817 	ldw	r3,160(sp)
  201f68:	dc402917 	ldw	r17,164(sp)
  201f6c:	b011883a 	mov	r8,r22
  201f70:	1c07c83a 	sub	r3,r3,r16
  201f74:	d8c02b15 	stw	r3,172(sp)
  201f78:	00005f06 	br	2020f8 <___vfprintf_internal_r+0x75c>
  201f7c:	8025883a 	mov	r18,r16
  201f80:	dc002903 	ldbu	r16,164(sp)
  201f84:	e011883a 	mov	r8,fp
  201f88:	84003fcc 	andi	r16,r16,255
  201f8c:	80071e1e 	bne	r16,zero,203c08 <___vfprintf_internal_r+0x226c>
  201f90:	9080020c 	andi	r2,r18,8
  201f94:	1004af26 	beq	r2,zero,203254 <___vfprintf_internal_r+0x18b8>
  201f98:	d9002e17 	ldw	r4,184(sp)
  201f9c:	d9402e17 	ldw	r5,184(sp)
  201fa0:	d8802e17 	ldw	r2,184(sp)
  201fa4:	21000017 	ldw	r4,0(r4)
  201fa8:	29400117 	ldw	r5,4(r5)
  201fac:	10800204 	addi	r2,r2,8
  201fb0:	d9003615 	stw	r4,216(sp)
  201fb4:	d9403815 	stw	r5,224(sp)
  201fb8:	d8802e15 	stw	r2,184(sp)
  201fbc:	d9003617 	ldw	r4,216(sp)
  201fc0:	d9403817 	ldw	r5,224(sp)
  201fc4:	da003d15 	stw	r8,244(sp)
  201fc8:	04000044 	movi	r16,1
  201fcc:	0208da00 	call	208da0 <__fpclassifyd>
  201fd0:	da003d17 	ldw	r8,244(sp)
  201fd4:	1404441e 	bne	r2,r16,2030e8 <___vfprintf_internal_r+0x174c>
  201fd8:	d9003617 	ldw	r4,216(sp)
  201fdc:	d9403817 	ldw	r5,224(sp)
  201fe0:	000d883a 	mov	r6,zero
  201fe4:	000f883a 	mov	r7,zero
  201fe8:	020d0640 	call	20d064 <__ledf2>
  201fec:	da003d17 	ldw	r8,244(sp)
  201ff0:	1005e316 	blt	r2,zero,203780 <___vfprintf_internal_r+0x1de4>
  201ff4:	df002783 	ldbu	fp,158(sp)
  201ff8:	008011c4 	movi	r2,71
  201ffc:	1445580e 	bge	r2,r17,203560 <___vfprintf_internal_r+0x1bc4>
  202000:	04000874 	movhi	r16,33
  202004:	84104104 	addi	r16,r16,16644
  202008:	00c000c4 	movi	r3,3
  20200c:	00bfdfc4 	movi	r2,-129
  202010:	d8c02915 	stw	r3,164(sp)
  202014:	90a4703a 	and	r18,r18,r2
  202018:	d8c02b15 	stw	r3,172(sp)
  20201c:	d8002a15 	stw	zero,168(sp)
  202020:	d8003215 	stw	zero,200(sp)
  202024:	00003a06 	br	202110 <___vfprintf_internal_r+0x774>
  202028:	84000214 	ori	r16,r16,8
  20202c:	ac400007 	ldb	r17,0(r21)
  202030:	003ebc06 	br	201b24 <_gp+0xffdeff40>
  202034:	8025883a 	mov	r18,r16
  202038:	dc002903 	ldbu	r16,164(sp)
  20203c:	e011883a 	mov	r8,fp
  202040:	84003fcc 	andi	r16,r16,255
  202044:	8007001e 	bne	r16,zero,203c48 <___vfprintf_internal_r+0x22ac>
  202048:	94800414 	ori	r18,r18,16
  20204c:	9080080c 	andi	r2,r18,32
  202050:	1002fa26 	beq	r2,zero,202c3c <___vfprintf_internal_r+0x12a0>
  202054:	d9002e17 	ldw	r4,184(sp)
  202058:	d9402a17 	ldw	r5,168(sp)
  20205c:	d8002785 	stb	zero,158(sp)
  202060:	20800204 	addi	r2,r4,8
  202064:	24c00017 	ldw	r19,0(r4)
  202068:	25800117 	ldw	r22,4(r4)
  20206c:	2804b116 	blt	r5,zero,203334 <___vfprintf_internal_r+0x1998>
  202070:	013fdfc4 	movi	r4,-129
  202074:	9d86b03a 	or	r3,r19,r22
  202078:	d8802e15 	stw	r2,184(sp)
  20207c:	9124703a 	and	r18,r18,r4
  202080:	1802fb1e 	bne	r3,zero,202c70 <___vfprintf_internal_r+0x12d4>
  202084:	d8c02a17 	ldw	r3,168(sp)
  202088:	0039883a 	mov	fp,zero
  20208c:	1805e526 	beq	r3,zero,203824 <___vfprintf_internal_r+0x1e88>
  202090:	0027883a 	mov	r19,zero
  202094:	002d883a 	mov	r22,zero
  202098:	dc001e04 	addi	r16,sp,120
  20209c:	9806d0fa 	srli	r3,r19,3
  2020a0:	b008977a 	slli	r4,r22,29
  2020a4:	b02cd0fa 	srli	r22,r22,3
  2020a8:	9cc001cc 	andi	r19,r19,7
  2020ac:	98800c04 	addi	r2,r19,48
  2020b0:	843fffc4 	addi	r16,r16,-1
  2020b4:	20e6b03a 	or	r19,r4,r3
  2020b8:	80800005 	stb	r2,0(r16)
  2020bc:	9d86b03a 	or	r3,r19,r22
  2020c0:	183ff61e 	bne	r3,zero,20209c <_gp+0xffdf04b8>
  2020c4:	90c0004c 	andi	r3,r18,1
  2020c8:	18014126 	beq	r3,zero,2025d0 <___vfprintf_internal_r+0xc34>
  2020cc:	10803fcc 	andi	r2,r2,255
  2020d0:	1080201c 	xori	r2,r2,128
  2020d4:	10bfe004 	addi	r2,r2,-128
  2020d8:	00c00c04 	movi	r3,48
  2020dc:	10c13c26 	beq	r2,r3,2025d0 <___vfprintf_internal_r+0xc34>
  2020e0:	80ffffc5 	stb	r3,-1(r16)
  2020e4:	d8c02817 	ldw	r3,160(sp)
  2020e8:	80bfffc4 	addi	r2,r16,-1
  2020ec:	1021883a 	mov	r16,r2
  2020f0:	1887c83a 	sub	r3,r3,r2
  2020f4:	d8c02b15 	stw	r3,172(sp)
  2020f8:	d8802b17 	ldw	r2,172(sp)
  2020fc:	d9002a17 	ldw	r4,168(sp)
  202100:	1100010e 	bge	r2,r4,202108 <___vfprintf_internal_r+0x76c>
  202104:	2005883a 	mov	r2,r4
  202108:	d8802915 	stw	r2,164(sp)
  20210c:	d8003215 	stw	zero,200(sp)
  202110:	e7003fcc 	andi	fp,fp,255
  202114:	e700201c 	xori	fp,fp,128
  202118:	e73fe004 	addi	fp,fp,-128
  20211c:	e0000326 	beq	fp,zero,20212c <___vfprintf_internal_r+0x790>
  202120:	d8c02917 	ldw	r3,164(sp)
  202124:	18c00044 	addi	r3,r3,1
  202128:	d8c02915 	stw	r3,164(sp)
  20212c:	90c0008c 	andi	r3,r18,2
  202130:	d8c02c15 	stw	r3,176(sp)
  202134:	18000326 	beq	r3,zero,202144 <___vfprintf_internal_r+0x7a8>
  202138:	d8c02917 	ldw	r3,164(sp)
  20213c:	18c00084 	addi	r3,r3,2
  202140:	d8c02915 	stw	r3,164(sp)
  202144:	90c0210c 	andi	r3,r18,132
  202148:	d8c03015 	stw	r3,192(sp)
  20214c:	1801c51e 	bne	r3,zero,202864 <___vfprintf_internal_r+0xec8>
  202150:	d9003117 	ldw	r4,196(sp)
  202154:	d8c02917 	ldw	r3,164(sp)
  202158:	20e7c83a 	sub	r19,r4,r3
  20215c:	04c1c10e 	bge	zero,r19,202864 <___vfprintf_internal_r+0xec8>
  202160:	02400404 	movi	r9,16
  202164:	d8c02017 	ldw	r3,128(sp)
  202168:	d8801f17 	ldw	r2,124(sp)
  20216c:	4cc52f0e 	bge	r9,r19,20362c <___vfprintf_internal_r+0x1c90>
  202170:	01400874 	movhi	r5,33
  202174:	29505484 	addi	r5,r5,16722
  202178:	dc403b15 	stw	r17,236(sp)
  20217c:	d9403515 	stw	r5,212(sp)
  202180:	9823883a 	mov	r17,r19
  202184:	482d883a 	mov	r22,r9
  202188:	9027883a 	mov	r19,r18
  20218c:	070001c4 	movi	fp,7
  202190:	8025883a 	mov	r18,r16
  202194:	dc002d17 	ldw	r16,180(sp)
  202198:	00000306 	br	2021a8 <___vfprintf_internal_r+0x80c>
  20219c:	8c7ffc04 	addi	r17,r17,-16
  2021a0:	42000204 	addi	r8,r8,8
  2021a4:	b440130e 	bge	r22,r17,2021f4 <___vfprintf_internal_r+0x858>
  2021a8:	01000874 	movhi	r4,33
  2021ac:	18c00404 	addi	r3,r3,16
  2021b0:	10800044 	addi	r2,r2,1
  2021b4:	21105484 	addi	r4,r4,16722
  2021b8:	41000015 	stw	r4,0(r8)
  2021bc:	45800115 	stw	r22,4(r8)
  2021c0:	d8c02015 	stw	r3,128(sp)
  2021c4:	d8801f15 	stw	r2,124(sp)
  2021c8:	e0bff40e 	bge	fp,r2,20219c <_gp+0xffdf05b8>
  2021cc:	d9801e04 	addi	r6,sp,120
  2021d0:	b80b883a 	mov	r5,r23
  2021d4:	8009883a 	mov	r4,r16
  2021d8:	020917c0 	call	20917c <__sprint_r>
  2021dc:	103ef31e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2021e0:	8c7ffc04 	addi	r17,r17,-16
  2021e4:	d8c02017 	ldw	r3,128(sp)
  2021e8:	d8801f17 	ldw	r2,124(sp)
  2021ec:	da000404 	addi	r8,sp,16
  2021f0:	b47fed16 	blt	r22,r17,2021a8 <_gp+0xffdf05c4>
  2021f4:	9021883a 	mov	r16,r18
  2021f8:	9825883a 	mov	r18,r19
  2021fc:	8827883a 	mov	r19,r17
  202200:	dc403b17 	ldw	r17,236(sp)
  202204:	d9403517 	ldw	r5,212(sp)
  202208:	98c7883a 	add	r3,r19,r3
  20220c:	10800044 	addi	r2,r2,1
  202210:	41400015 	stw	r5,0(r8)
  202214:	44c00115 	stw	r19,4(r8)
  202218:	d8c02015 	stw	r3,128(sp)
  20221c:	d8801f15 	stw	r2,124(sp)
  202220:	010001c4 	movi	r4,7
  202224:	2082c516 	blt	r4,r2,202d3c <___vfprintf_internal_r+0x13a0>
  202228:	df002787 	ldb	fp,158(sp)
  20222c:	42000204 	addi	r8,r8,8
  202230:	e0000c26 	beq	fp,zero,202264 <___vfprintf_internal_r+0x8c8>
  202234:	d8801f17 	ldw	r2,124(sp)
  202238:	d9002784 	addi	r4,sp,158
  20223c:	18c00044 	addi	r3,r3,1
  202240:	10800044 	addi	r2,r2,1
  202244:	41000015 	stw	r4,0(r8)
  202248:	01000044 	movi	r4,1
  20224c:	41000115 	stw	r4,4(r8)
  202250:	d8c02015 	stw	r3,128(sp)
  202254:	d8801f15 	stw	r2,124(sp)
  202258:	010001c4 	movi	r4,7
  20225c:	20825e16 	blt	r4,r2,202bd8 <___vfprintf_internal_r+0x123c>
  202260:	42000204 	addi	r8,r8,8
  202264:	d8802c17 	ldw	r2,176(sp)
  202268:	10000c26 	beq	r2,zero,20229c <___vfprintf_internal_r+0x900>
  20226c:	d8801f17 	ldw	r2,124(sp)
  202270:	d9002704 	addi	r4,sp,156
  202274:	18c00084 	addi	r3,r3,2
  202278:	10800044 	addi	r2,r2,1
  20227c:	41000015 	stw	r4,0(r8)
  202280:	01000084 	movi	r4,2
  202284:	41000115 	stw	r4,4(r8)
  202288:	d8c02015 	stw	r3,128(sp)
  20228c:	d8801f15 	stw	r2,124(sp)
  202290:	010001c4 	movi	r4,7
  202294:	20825816 	blt	r4,r2,202bf8 <___vfprintf_internal_r+0x125c>
  202298:	42000204 	addi	r8,r8,8
  20229c:	d9003017 	ldw	r4,192(sp)
  2022a0:	00802004 	movi	r2,128
  2022a4:	2081bb26 	beq	r4,r2,202994 <___vfprintf_internal_r+0xff8>
  2022a8:	d9402a17 	ldw	r5,168(sp)
  2022ac:	d8802b17 	ldw	r2,172(sp)
  2022b0:	28adc83a 	sub	r22,r5,r2
  2022b4:	0580310e 	bge	zero,r22,20237c <___vfprintf_internal_r+0x9e0>
  2022b8:	07000404 	movi	fp,16
  2022bc:	d8801f17 	ldw	r2,124(sp)
  2022c0:	e584360e 	bge	fp,r22,20339c <___vfprintf_internal_r+0x1a00>
  2022c4:	01400874 	movhi	r5,33
  2022c8:	29505084 	addi	r5,r5,16706
  2022cc:	dc402a15 	stw	r17,168(sp)
  2022d0:	d9402c15 	stw	r5,176(sp)
  2022d4:	b023883a 	mov	r17,r22
  2022d8:	04c001c4 	movi	r19,7
  2022dc:	a82d883a 	mov	r22,r21
  2022e0:	902b883a 	mov	r21,r18
  2022e4:	8025883a 	mov	r18,r16
  2022e8:	dc002d17 	ldw	r16,180(sp)
  2022ec:	00000306 	br	2022fc <___vfprintf_internal_r+0x960>
  2022f0:	8c7ffc04 	addi	r17,r17,-16
  2022f4:	42000204 	addi	r8,r8,8
  2022f8:	e440110e 	bge	fp,r17,202340 <___vfprintf_internal_r+0x9a4>
  2022fc:	18c00404 	addi	r3,r3,16
  202300:	10800044 	addi	r2,r2,1
  202304:	45000015 	stw	r20,0(r8)
  202308:	47000115 	stw	fp,4(r8)
  20230c:	d8c02015 	stw	r3,128(sp)
  202310:	d8801f15 	stw	r2,124(sp)
  202314:	98bff60e 	bge	r19,r2,2022f0 <_gp+0xffdf070c>
  202318:	d9801e04 	addi	r6,sp,120
  20231c:	b80b883a 	mov	r5,r23
  202320:	8009883a 	mov	r4,r16
  202324:	020917c0 	call	20917c <__sprint_r>
  202328:	103ea01e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  20232c:	8c7ffc04 	addi	r17,r17,-16
  202330:	d8c02017 	ldw	r3,128(sp)
  202334:	d8801f17 	ldw	r2,124(sp)
  202338:	da000404 	addi	r8,sp,16
  20233c:	e47fef16 	blt	fp,r17,2022fc <_gp+0xffdf0718>
  202340:	9021883a 	mov	r16,r18
  202344:	a825883a 	mov	r18,r21
  202348:	b02b883a 	mov	r21,r22
  20234c:	882d883a 	mov	r22,r17
  202350:	dc402a17 	ldw	r17,168(sp)
  202354:	d9002c17 	ldw	r4,176(sp)
  202358:	1d87883a 	add	r3,r3,r22
  20235c:	10800044 	addi	r2,r2,1
  202360:	41000015 	stw	r4,0(r8)
  202364:	45800115 	stw	r22,4(r8)
  202368:	d8c02015 	stw	r3,128(sp)
  20236c:	d8801f15 	stw	r2,124(sp)
  202370:	010001c4 	movi	r4,7
  202374:	20821016 	blt	r4,r2,202bb8 <___vfprintf_internal_r+0x121c>
  202378:	42000204 	addi	r8,r8,8
  20237c:	9080400c 	andi	r2,r18,256
  202380:	10013a1e 	bne	r2,zero,20286c <___vfprintf_internal_r+0xed0>
  202384:	d9402b17 	ldw	r5,172(sp)
  202388:	d8801f17 	ldw	r2,124(sp)
  20238c:	44000015 	stw	r16,0(r8)
  202390:	1947883a 	add	r3,r3,r5
  202394:	10800044 	addi	r2,r2,1
  202398:	41400115 	stw	r5,4(r8)
  20239c:	d8c02015 	stw	r3,128(sp)
  2023a0:	d8801f15 	stw	r2,124(sp)
  2023a4:	010001c4 	movi	r4,7
  2023a8:	2081f516 	blt	r4,r2,202b80 <___vfprintf_internal_r+0x11e4>
  2023ac:	42000204 	addi	r8,r8,8
  2023b0:	9480010c 	andi	r18,r18,4
  2023b4:	90003226 	beq	r18,zero,202480 <___vfprintf_internal_r+0xae4>
  2023b8:	d9403117 	ldw	r5,196(sp)
  2023bc:	d8802917 	ldw	r2,164(sp)
  2023c0:	28a1c83a 	sub	r16,r5,r2
  2023c4:	04002e0e 	bge	zero,r16,202480 <___vfprintf_internal_r+0xae4>
  2023c8:	04400404 	movi	r17,16
  2023cc:	d8801f17 	ldw	r2,124(sp)
  2023d0:	8c04c40e 	bge	r17,r16,2036e4 <___vfprintf_internal_r+0x1d48>
  2023d4:	01400874 	movhi	r5,33
  2023d8:	29505484 	addi	r5,r5,16722
  2023dc:	d9403515 	stw	r5,212(sp)
  2023e0:	048001c4 	movi	r18,7
  2023e4:	dcc02d17 	ldw	r19,180(sp)
  2023e8:	00000306 	br	2023f8 <___vfprintf_internal_r+0xa5c>
  2023ec:	843ffc04 	addi	r16,r16,-16
  2023f0:	42000204 	addi	r8,r8,8
  2023f4:	8c00130e 	bge	r17,r16,202444 <___vfprintf_internal_r+0xaa8>
  2023f8:	01000874 	movhi	r4,33
  2023fc:	18c00404 	addi	r3,r3,16
  202400:	10800044 	addi	r2,r2,1
  202404:	21105484 	addi	r4,r4,16722
  202408:	41000015 	stw	r4,0(r8)
  20240c:	44400115 	stw	r17,4(r8)
  202410:	d8c02015 	stw	r3,128(sp)
  202414:	d8801f15 	stw	r2,124(sp)
  202418:	90bff40e 	bge	r18,r2,2023ec <_gp+0xffdf0808>
  20241c:	d9801e04 	addi	r6,sp,120
  202420:	b80b883a 	mov	r5,r23
  202424:	9809883a 	mov	r4,r19
  202428:	020917c0 	call	20917c <__sprint_r>
  20242c:	103e5f1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202430:	843ffc04 	addi	r16,r16,-16
  202434:	d8c02017 	ldw	r3,128(sp)
  202438:	d8801f17 	ldw	r2,124(sp)
  20243c:	da000404 	addi	r8,sp,16
  202440:	8c3fed16 	blt	r17,r16,2023f8 <_gp+0xffdf0814>
  202444:	d9403517 	ldw	r5,212(sp)
  202448:	1c07883a 	add	r3,r3,r16
  20244c:	10800044 	addi	r2,r2,1
  202450:	41400015 	stw	r5,0(r8)
  202454:	44000115 	stw	r16,4(r8)
  202458:	d8c02015 	stw	r3,128(sp)
  20245c:	d8801f15 	stw	r2,124(sp)
  202460:	010001c4 	movi	r4,7
  202464:	2080060e 	bge	r4,r2,202480 <___vfprintf_internal_r+0xae4>
  202468:	d9002d17 	ldw	r4,180(sp)
  20246c:	d9801e04 	addi	r6,sp,120
  202470:	b80b883a 	mov	r5,r23
  202474:	020917c0 	call	20917c <__sprint_r>
  202478:	103e4c1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  20247c:	d8c02017 	ldw	r3,128(sp)
  202480:	d8803117 	ldw	r2,196(sp)
  202484:	d9002917 	ldw	r4,164(sp)
  202488:	1100010e 	bge	r2,r4,202490 <___vfprintf_internal_r+0xaf4>
  20248c:	2005883a 	mov	r2,r4
  202490:	d9402f17 	ldw	r5,188(sp)
  202494:	288b883a 	add	r5,r5,r2
  202498:	d9402f15 	stw	r5,188(sp)
  20249c:	1801c01e 	bne	r3,zero,202ba0 <___vfprintf_internal_r+0x1204>
  2024a0:	a8800007 	ldb	r2,0(r21)
  2024a4:	d8001f15 	stw	zero,124(sp)
  2024a8:	da000404 	addi	r8,sp,16
  2024ac:	103d751e 	bne	r2,zero,201a84 <_gp+0xffdefea0>
  2024b0:	a823883a 	mov	r17,r21
  2024b4:	003d8b06 	br	201ae4 <_gp+0xffdeff00>
  2024b8:	8025883a 	mov	r18,r16
  2024bc:	dc002903 	ldbu	r16,164(sp)
  2024c0:	e011883a 	mov	r8,fp
  2024c4:	84003fcc 	andi	r16,r16,255
  2024c8:	8005e51e 	bne	r16,zero,203c60 <___vfprintf_internal_r+0x22c4>
  2024cc:	94800414 	ori	r18,r18,16
  2024d0:	9080080c 	andi	r2,r18,32
  2024d4:	10022b26 	beq	r2,zero,202d84 <___vfprintf_internal_r+0x13e8>
  2024d8:	d9002e17 	ldw	r4,184(sp)
  2024dc:	d9402a17 	ldw	r5,168(sp)
  2024e0:	d8002785 	stb	zero,158(sp)
  2024e4:	20c00204 	addi	r3,r4,8
  2024e8:	24c00017 	ldw	r19,0(r4)
  2024ec:	25800117 	ldw	r22,4(r4)
  2024f0:	28042e16 	blt	r5,zero,2035ac <___vfprintf_internal_r+0x1c10>
  2024f4:	013fdfc4 	movi	r4,-129
  2024f8:	9d84b03a 	or	r2,r19,r22
  2024fc:	d8c02e15 	stw	r3,184(sp)
  202500:	9124703a 	and	r18,r18,r4
  202504:	0039883a 	mov	fp,zero
  202508:	103e801e 	bne	r2,zero,201f0c <_gp+0xffdf0328>
  20250c:	d9002a17 	ldw	r4,168(sp)
  202510:	2002e01e 	bne	r4,zero,203094 <___vfprintf_internal_r+0x16f8>
  202514:	d8002a15 	stw	zero,168(sp)
  202518:	d8002b15 	stw	zero,172(sp)
  20251c:	dc001e04 	addi	r16,sp,120
  202520:	003ef506 	br	2020f8 <_gp+0xffdf0514>
  202524:	8025883a 	mov	r18,r16
  202528:	dc002903 	ldbu	r16,164(sp)
  20252c:	e011883a 	mov	r8,fp
  202530:	84003fcc 	andi	r16,r16,255
  202534:	8005ba1e 	bne	r16,zero,203c20 <___vfprintf_internal_r+0x2284>
  202538:	01000874 	movhi	r4,33
  20253c:	21104404 	addi	r4,r4,16656
  202540:	d9003915 	stw	r4,228(sp)
  202544:	9080080c 	andi	r2,r18,32
  202548:	10006126 	beq	r2,zero,2026d0 <___vfprintf_internal_r+0xd34>
  20254c:	d9402e17 	ldw	r5,184(sp)
  202550:	2cc00017 	ldw	r19,0(r5)
  202554:	2d800117 	ldw	r22,4(r5)
  202558:	29400204 	addi	r5,r5,8
  20255c:	d9402e15 	stw	r5,184(sp)
  202560:	9080004c 	andi	r2,r18,1
  202564:	1001ac26 	beq	r2,zero,202c18 <___vfprintf_internal_r+0x127c>
  202568:	9d84b03a 	or	r2,r19,r22
  20256c:	10038526 	beq	r2,zero,203384 <___vfprintf_internal_r+0x19e8>
  202570:	d8c02a17 	ldw	r3,168(sp)
  202574:	00800c04 	movi	r2,48
  202578:	d8802705 	stb	r2,156(sp)
  20257c:	dc402745 	stb	r17,157(sp)
  202580:	d8002785 	stb	zero,158(sp)
  202584:	90800094 	ori	r2,r18,2
  202588:	18047916 	blt	r3,zero,203770 <___vfprintf_internal_r+0x1dd4>
  20258c:	00bfdfc4 	movi	r2,-129
  202590:	90a4703a 	and	r18,r18,r2
  202594:	94800094 	ori	r18,r18,2
  202598:	0039883a 	mov	fp,zero
  20259c:	d9003917 	ldw	r4,228(sp)
  2025a0:	dc001e04 	addi	r16,sp,120
  2025a4:	988003cc 	andi	r2,r19,15
  2025a8:	b006973a 	slli	r3,r22,28
  2025ac:	2085883a 	add	r2,r4,r2
  2025b0:	9826d13a 	srli	r19,r19,4
  2025b4:	10800003 	ldbu	r2,0(r2)
  2025b8:	b02cd13a 	srli	r22,r22,4
  2025bc:	843fffc4 	addi	r16,r16,-1
  2025c0:	1ce6b03a 	or	r19,r3,r19
  2025c4:	80800005 	stb	r2,0(r16)
  2025c8:	9d84b03a 	or	r2,r19,r22
  2025cc:	103ff51e 	bne	r2,zero,2025a4 <_gp+0xffdf09c0>
  2025d0:	d8c02817 	ldw	r3,160(sp)
  2025d4:	1c07c83a 	sub	r3,r3,r16
  2025d8:	d8c02b15 	stw	r3,172(sp)
  2025dc:	003ec606 	br	2020f8 <_gp+0xffdf0514>
  2025e0:	8025883a 	mov	r18,r16
  2025e4:	dc002903 	ldbu	r16,164(sp)
  2025e8:	e011883a 	mov	r8,fp
  2025ec:	84003fcc 	andi	r16,r16,255
  2025f0:	803e9626 	beq	r16,zero,20204c <_gp+0xffdf0468>
  2025f4:	d8c02b03 	ldbu	r3,172(sp)
  2025f8:	d8c02785 	stb	r3,158(sp)
  2025fc:	003e9306 	br	20204c <_gp+0xffdf0468>
  202600:	00c00044 	movi	r3,1
  202604:	d8c02905 	stb	r3,164(sp)
  202608:	00c00ac4 	movi	r3,43
  20260c:	d8c02b05 	stb	r3,172(sp)
  202610:	ac400007 	ldb	r17,0(r21)
  202614:	003d4306 	br	201b24 <_gp+0xffdeff40>
  202618:	84000814 	ori	r16,r16,32
  20261c:	ac400007 	ldb	r17,0(r21)
  202620:	003d4006 	br	201b24 <_gp+0xffdeff40>
  202624:	d8802e17 	ldw	r2,184(sp)
  202628:	8025883a 	mov	r18,r16
  20262c:	d8002785 	stb	zero,158(sp)
  202630:	14000017 	ldw	r16,0(r2)
  202634:	e011883a 	mov	r8,fp
  202638:	14c00104 	addi	r19,r2,4
  20263c:	80042d26 	beq	r16,zero,2036f4 <___vfprintf_internal_r+0x1d58>
  202640:	d8c02a17 	ldw	r3,168(sp)
  202644:	1803e416 	blt	r3,zero,2035d8 <___vfprintf_internal_r+0x1c3c>
  202648:	180d883a 	mov	r6,r3
  20264c:	000b883a 	mov	r5,zero
  202650:	8009883a 	mov	r4,r16
  202654:	df003d15 	stw	fp,244(sp)
  202658:	02072d40 	call	2072d4 <memchr>
  20265c:	da003d17 	ldw	r8,244(sp)
  202660:	10046826 	beq	r2,zero,203804 <___vfprintf_internal_r+0x1e68>
  202664:	1405c83a 	sub	r2,r2,r16
  202668:	d8802b15 	stw	r2,172(sp)
  20266c:	1003e016 	blt	r2,zero,2035f0 <___vfprintf_internal_r+0x1c54>
  202670:	df002783 	ldbu	fp,158(sp)
  202674:	d8802915 	stw	r2,164(sp)
  202678:	dcc02e15 	stw	r19,184(sp)
  20267c:	d8002a15 	stw	zero,168(sp)
  202680:	d8003215 	stw	zero,200(sp)
  202684:	003ea206 	br	202110 <_gp+0xffdf052c>
  202688:	8025883a 	mov	r18,r16
  20268c:	dc002903 	ldbu	r16,164(sp)
  202690:	e011883a 	mov	r8,fp
  202694:	84003fcc 	andi	r16,r16,255
  202698:	803f8d26 	beq	r16,zero,2024d0 <_gp+0xffdf08ec>
  20269c:	d8c02b03 	ldbu	r3,172(sp)
  2026a0:	d8c02785 	stb	r3,158(sp)
  2026a4:	003f8a06 	br	2024d0 <_gp+0xffdf08ec>
  2026a8:	8025883a 	mov	r18,r16
  2026ac:	dc002903 	ldbu	r16,164(sp)
  2026b0:	e011883a 	mov	r8,fp
  2026b4:	84003fcc 	andi	r16,r16,255
  2026b8:	8005661e 	bne	r16,zero,203c54 <___vfprintf_internal_r+0x22b8>
  2026bc:	01000874 	movhi	r4,33
  2026c0:	21104904 	addi	r4,r4,16676
  2026c4:	d9003915 	stw	r4,228(sp)
  2026c8:	9080080c 	andi	r2,r18,32
  2026cc:	103f9f1e 	bne	r2,zero,20254c <_gp+0xffdf0968>
  2026d0:	9080040c 	andi	r2,r18,16
  2026d4:	1002eb26 	beq	r2,zero,203284 <___vfprintf_internal_r+0x18e8>
  2026d8:	d8802e17 	ldw	r2,184(sp)
  2026dc:	002d883a 	mov	r22,zero
  2026e0:	14c00017 	ldw	r19,0(r2)
  2026e4:	10800104 	addi	r2,r2,4
  2026e8:	d8802e15 	stw	r2,184(sp)
  2026ec:	003f9c06 	br	202560 <_gp+0xffdf097c>
  2026f0:	d8802b07 	ldb	r2,172(sp)
  2026f4:	1002e11e 	bne	r2,zero,20327c <___vfprintf_internal_r+0x18e0>
  2026f8:	00c00044 	movi	r3,1
  2026fc:	d8c02905 	stb	r3,164(sp)
  202700:	00c00804 	movi	r3,32
  202704:	d8c02b05 	stb	r3,172(sp)
  202708:	ac400007 	ldb	r17,0(r21)
  20270c:	003d0506 	br	201b24 <_gp+0xffdeff40>
  202710:	84000054 	ori	r16,r16,1
  202714:	ac400007 	ldb	r17,0(r21)
  202718:	003d0206 	br	201b24 <_gp+0xffdeff40>
  20271c:	8025883a 	mov	r18,r16
  202720:	dc002903 	ldbu	r16,164(sp)
  202724:	e011883a 	mov	r8,fp
  202728:	84003fcc 	andi	r16,r16,255
  20272c:	803de726 	beq	r16,zero,201ecc <_gp+0xffdf02e8>
  202730:	d8c02b03 	ldbu	r3,172(sp)
  202734:	d8c02785 	stb	r3,158(sp)
  202738:	003de406 	br	201ecc <_gp+0xffdf02e8>
  20273c:	84001014 	ori	r16,r16,64
  202740:	ac400007 	ldb	r17,0(r21)
  202744:	003cf706 	br	201b24 <_gp+0xffdeff40>
  202748:	ac400007 	ldb	r17,0(r21)
  20274c:	00801b04 	movi	r2,108
  202750:	88838f26 	beq	r17,r2,203590 <___vfprintf_internal_r+0x1bf4>
  202754:	84000414 	ori	r16,r16,16
  202758:	003cf206 	br	201b24 <_gp+0xffdeff40>
  20275c:	8025883a 	mov	r18,r16
  202760:	dc002903 	ldbu	r16,164(sp)
  202764:	e011883a 	mov	r8,fp
  202768:	84003fcc 	andi	r16,r16,255
  20276c:	80053f1e 	bne	r16,zero,203c6c <___vfprintf_internal_r+0x22d0>
  202770:	9080080c 	andi	r2,r18,32
  202774:	1002d226 	beq	r2,zero,2032c0 <___vfprintf_internal_r+0x1924>
  202778:	d9002e17 	ldw	r4,184(sp)
  20277c:	d9402f17 	ldw	r5,188(sp)
  202780:	20800017 	ldw	r2,0(r4)
  202784:	2807d7fa 	srai	r3,r5,31
  202788:	21000104 	addi	r4,r4,4
  20278c:	d9002e15 	stw	r4,184(sp)
  202790:	11400015 	stw	r5,0(r2)
  202794:	10c00115 	stw	r3,4(r2)
  202798:	003cb806 	br	201a7c <_gp+0xffdefe98>
  20279c:	d8c02e17 	ldw	r3,184(sp)
  2027a0:	d9002e17 	ldw	r4,184(sp)
  2027a4:	8025883a 	mov	r18,r16
  2027a8:	18800017 	ldw	r2,0(r3)
  2027ac:	21000104 	addi	r4,r4,4
  2027b0:	00c00044 	movi	r3,1
  2027b4:	e011883a 	mov	r8,fp
  2027b8:	d8c02915 	stw	r3,164(sp)
  2027bc:	d8002785 	stb	zero,158(sp)
  2027c0:	d8801405 	stb	r2,80(sp)
  2027c4:	d9002e15 	stw	r4,184(sp)
  2027c8:	d8c02b15 	stw	r3,172(sp)
  2027cc:	d8002a15 	stw	zero,168(sp)
  2027d0:	d8003215 	stw	zero,200(sp)
  2027d4:	dc001404 	addi	r16,sp,80
  2027d8:	0039883a 	mov	fp,zero
  2027dc:	003e5306 	br	20212c <_gp+0xffdf0548>
  2027e0:	01000874 	movhi	r4,33
  2027e4:	21104904 	addi	r4,r4,16676
  2027e8:	0039883a 	mov	fp,zero
  2027ec:	d9003915 	stw	r4,228(sp)
  2027f0:	04401e04 	movi	r17,120
  2027f4:	003f6906 	br	20259c <_gp+0xffdf09b8>
  2027f8:	8025883a 	mov	r18,r16
  2027fc:	dc002903 	ldbu	r16,164(sp)
  202800:	e011883a 	mov	r8,fp
  202804:	84003fcc 	andi	r16,r16,255
  202808:	8005081e 	bne	r16,zero,203c2c <___vfprintf_internal_r+0x2290>
  20280c:	883d6126 	beq	r17,zero,201d94 <_gp+0xffdf01b0>
  202810:	00c00044 	movi	r3,1
  202814:	d8c02915 	stw	r3,164(sp)
  202818:	dc401405 	stb	r17,80(sp)
  20281c:	d8002785 	stb	zero,158(sp)
  202820:	003fe906 	br	2027c8 <_gp+0xffdf0be4>
  202824:	01400874 	movhi	r5,33
  202828:	29504904 	addi	r5,r5,16676
  20282c:	d9403915 	stw	r5,228(sp)
  202830:	d8c02e15 	stw	r3,184(sp)
  202834:	1025883a 	mov	r18,r2
  202838:	04401e04 	movi	r17,120
  20283c:	9d84b03a 	or	r2,r19,r22
  202840:	1000fc1e 	bne	r2,zero,202c34 <___vfprintf_internal_r+0x1298>
  202844:	0039883a 	mov	fp,zero
  202848:	00800084 	movi	r2,2
  20284c:	10803fcc 	andi	r2,r2,255
  202850:	00c00044 	movi	r3,1
  202854:	10c20f26 	beq	r2,r3,203094 <___vfprintf_internal_r+0x16f8>
  202858:	00c00084 	movi	r3,2
  20285c:	10fd3326 	beq	r2,r3,201d2c <_gp+0xffdf0148>
  202860:	003e0b06 	br	202090 <_gp+0xffdf04ac>
  202864:	d8c02017 	ldw	r3,128(sp)
  202868:	003e7106 	br	202230 <_gp+0xffdf064c>
  20286c:	00801944 	movi	r2,101
  202870:	14407e0e 	bge	r2,r17,202a6c <___vfprintf_internal_r+0x10d0>
  202874:	d9003617 	ldw	r4,216(sp)
  202878:	d9403817 	ldw	r5,224(sp)
  20287c:	000d883a 	mov	r6,zero
  202880:	000f883a 	mov	r7,zero
  202884:	d8c03c15 	stw	r3,240(sp)
  202888:	da003d15 	stw	r8,244(sp)
  20288c:	020cf000 	call	20cf00 <__eqdf2>
  202890:	d8c03c17 	ldw	r3,240(sp)
  202894:	da003d17 	ldw	r8,244(sp)
  202898:	1000f71e 	bne	r2,zero,202c78 <___vfprintf_internal_r+0x12dc>
  20289c:	d8801f17 	ldw	r2,124(sp)
  2028a0:	01000874 	movhi	r4,33
  2028a4:	21105004 	addi	r4,r4,16704
  2028a8:	18c00044 	addi	r3,r3,1
  2028ac:	10800044 	addi	r2,r2,1
  2028b0:	41000015 	stw	r4,0(r8)
  2028b4:	01000044 	movi	r4,1
  2028b8:	41000115 	stw	r4,4(r8)
  2028bc:	d8c02015 	stw	r3,128(sp)
  2028c0:	d8801f15 	stw	r2,124(sp)
  2028c4:	010001c4 	movi	r4,7
  2028c8:	2082b816 	blt	r4,r2,2033ac <___vfprintf_internal_r+0x1a10>
  2028cc:	42000204 	addi	r8,r8,8
  2028d0:	d8802617 	ldw	r2,152(sp)
  2028d4:	d9403317 	ldw	r5,204(sp)
  2028d8:	11400216 	blt	r2,r5,2028e4 <___vfprintf_internal_r+0xf48>
  2028dc:	9080004c 	andi	r2,r18,1
  2028e0:	103eb326 	beq	r2,zero,2023b0 <_gp+0xffdf07cc>
  2028e4:	d8803717 	ldw	r2,220(sp)
  2028e8:	d9003417 	ldw	r4,208(sp)
  2028ec:	d9403717 	ldw	r5,220(sp)
  2028f0:	1887883a 	add	r3,r3,r2
  2028f4:	d8801f17 	ldw	r2,124(sp)
  2028f8:	41000015 	stw	r4,0(r8)
  2028fc:	41400115 	stw	r5,4(r8)
  202900:	10800044 	addi	r2,r2,1
  202904:	d8c02015 	stw	r3,128(sp)
  202908:	d8801f15 	stw	r2,124(sp)
  20290c:	010001c4 	movi	r4,7
  202910:	20832916 	blt	r4,r2,2035b8 <___vfprintf_internal_r+0x1c1c>
  202914:	42000204 	addi	r8,r8,8
  202918:	d8803317 	ldw	r2,204(sp)
  20291c:	143fffc4 	addi	r16,r2,-1
  202920:	043ea30e 	bge	zero,r16,2023b0 <_gp+0xffdf07cc>
  202924:	04400404 	movi	r17,16
  202928:	d8801f17 	ldw	r2,124(sp)
  20292c:	8c00880e 	bge	r17,r16,202b50 <___vfprintf_internal_r+0x11b4>
  202930:	01400874 	movhi	r5,33
  202934:	29505084 	addi	r5,r5,16706
  202938:	d9402c15 	stw	r5,176(sp)
  20293c:	058001c4 	movi	r22,7
  202940:	dcc02d17 	ldw	r19,180(sp)
  202944:	00000306 	br	202954 <___vfprintf_internal_r+0xfb8>
  202948:	42000204 	addi	r8,r8,8
  20294c:	843ffc04 	addi	r16,r16,-16
  202950:	8c00820e 	bge	r17,r16,202b5c <___vfprintf_internal_r+0x11c0>
  202954:	18c00404 	addi	r3,r3,16
  202958:	10800044 	addi	r2,r2,1
  20295c:	45000015 	stw	r20,0(r8)
  202960:	44400115 	stw	r17,4(r8)
  202964:	d8c02015 	stw	r3,128(sp)
  202968:	d8801f15 	stw	r2,124(sp)
  20296c:	b0bff60e 	bge	r22,r2,202948 <_gp+0xffdf0d64>
  202970:	d9801e04 	addi	r6,sp,120
  202974:	b80b883a 	mov	r5,r23
  202978:	9809883a 	mov	r4,r19
  20297c:	020917c0 	call	20917c <__sprint_r>
  202980:	103d0a1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202984:	d8c02017 	ldw	r3,128(sp)
  202988:	d8801f17 	ldw	r2,124(sp)
  20298c:	da000404 	addi	r8,sp,16
  202990:	003fee06 	br	20294c <_gp+0xffdf0d68>
  202994:	d9403117 	ldw	r5,196(sp)
  202998:	d8802917 	ldw	r2,164(sp)
  20299c:	28adc83a 	sub	r22,r5,r2
  2029a0:	05be410e 	bge	zero,r22,2022a8 <_gp+0xffdf06c4>
  2029a4:	07000404 	movi	fp,16
  2029a8:	d8801f17 	ldw	r2,124(sp)
  2029ac:	e5838f0e 	bge	fp,r22,2037ec <___vfprintf_internal_r+0x1e50>
  2029b0:	01400874 	movhi	r5,33
  2029b4:	29505084 	addi	r5,r5,16706
  2029b8:	dc403015 	stw	r17,192(sp)
  2029bc:	d9402c15 	stw	r5,176(sp)
  2029c0:	b023883a 	mov	r17,r22
  2029c4:	04c001c4 	movi	r19,7
  2029c8:	a82d883a 	mov	r22,r21
  2029cc:	902b883a 	mov	r21,r18
  2029d0:	8025883a 	mov	r18,r16
  2029d4:	dc002d17 	ldw	r16,180(sp)
  2029d8:	00000306 	br	2029e8 <___vfprintf_internal_r+0x104c>
  2029dc:	8c7ffc04 	addi	r17,r17,-16
  2029e0:	42000204 	addi	r8,r8,8
  2029e4:	e440110e 	bge	fp,r17,202a2c <___vfprintf_internal_r+0x1090>
  2029e8:	18c00404 	addi	r3,r3,16
  2029ec:	10800044 	addi	r2,r2,1
  2029f0:	45000015 	stw	r20,0(r8)
  2029f4:	47000115 	stw	fp,4(r8)
  2029f8:	d8c02015 	stw	r3,128(sp)
  2029fc:	d8801f15 	stw	r2,124(sp)
  202a00:	98bff60e 	bge	r19,r2,2029dc <_gp+0xffdf0df8>
  202a04:	d9801e04 	addi	r6,sp,120
  202a08:	b80b883a 	mov	r5,r23
  202a0c:	8009883a 	mov	r4,r16
  202a10:	020917c0 	call	20917c <__sprint_r>
  202a14:	103ce51e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202a18:	8c7ffc04 	addi	r17,r17,-16
  202a1c:	d8c02017 	ldw	r3,128(sp)
  202a20:	d8801f17 	ldw	r2,124(sp)
  202a24:	da000404 	addi	r8,sp,16
  202a28:	e47fef16 	blt	fp,r17,2029e8 <_gp+0xffdf0e04>
  202a2c:	9021883a 	mov	r16,r18
  202a30:	a825883a 	mov	r18,r21
  202a34:	b02b883a 	mov	r21,r22
  202a38:	882d883a 	mov	r22,r17
  202a3c:	dc403017 	ldw	r17,192(sp)
  202a40:	d9002c17 	ldw	r4,176(sp)
  202a44:	1d87883a 	add	r3,r3,r22
  202a48:	10800044 	addi	r2,r2,1
  202a4c:	41000015 	stw	r4,0(r8)
  202a50:	45800115 	stw	r22,4(r8)
  202a54:	d8c02015 	stw	r3,128(sp)
  202a58:	d8801f15 	stw	r2,124(sp)
  202a5c:	010001c4 	movi	r4,7
  202a60:	20818e16 	blt	r4,r2,20309c <___vfprintf_internal_r+0x1700>
  202a64:	42000204 	addi	r8,r8,8
  202a68:	003e0f06 	br	2022a8 <_gp+0xffdf06c4>
  202a6c:	d9403317 	ldw	r5,204(sp)
  202a70:	00800044 	movi	r2,1
  202a74:	18c00044 	addi	r3,r3,1
  202a78:	1141530e 	bge	r2,r5,202fc8 <___vfprintf_internal_r+0x162c>
  202a7c:	dc401f17 	ldw	r17,124(sp)
  202a80:	00800044 	movi	r2,1
  202a84:	40800115 	stw	r2,4(r8)
  202a88:	8c400044 	addi	r17,r17,1
  202a8c:	44000015 	stw	r16,0(r8)
  202a90:	d8c02015 	stw	r3,128(sp)
  202a94:	dc401f15 	stw	r17,124(sp)
  202a98:	008001c4 	movi	r2,7
  202a9c:	14416b16 	blt	r2,r17,20304c <___vfprintf_internal_r+0x16b0>
  202aa0:	42000204 	addi	r8,r8,8
  202aa4:	d8803717 	ldw	r2,220(sp)
  202aa8:	d9003417 	ldw	r4,208(sp)
  202aac:	8c400044 	addi	r17,r17,1
  202ab0:	10c7883a 	add	r3,r2,r3
  202ab4:	40800115 	stw	r2,4(r8)
  202ab8:	41000015 	stw	r4,0(r8)
  202abc:	d8c02015 	stw	r3,128(sp)
  202ac0:	dc401f15 	stw	r17,124(sp)
  202ac4:	008001c4 	movi	r2,7
  202ac8:	14416916 	blt	r2,r17,203070 <___vfprintf_internal_r+0x16d4>
  202acc:	45800204 	addi	r22,r8,8
  202ad0:	d9003617 	ldw	r4,216(sp)
  202ad4:	d9403817 	ldw	r5,224(sp)
  202ad8:	000d883a 	mov	r6,zero
  202adc:	000f883a 	mov	r7,zero
  202ae0:	d8c03c15 	stw	r3,240(sp)
  202ae4:	020cf000 	call	20cf00 <__eqdf2>
  202ae8:	d8c03c17 	ldw	r3,240(sp)
  202aec:	1000bc26 	beq	r2,zero,202de0 <___vfprintf_internal_r+0x1444>
  202af0:	d9403317 	ldw	r5,204(sp)
  202af4:	84000044 	addi	r16,r16,1
  202af8:	8c400044 	addi	r17,r17,1
  202afc:	28bfffc4 	addi	r2,r5,-1
  202b00:	1887883a 	add	r3,r3,r2
  202b04:	b0800115 	stw	r2,4(r22)
  202b08:	b4000015 	stw	r16,0(r22)
  202b0c:	d8c02015 	stw	r3,128(sp)
  202b10:	dc401f15 	stw	r17,124(sp)
  202b14:	008001c4 	movi	r2,7
  202b18:	14414316 	blt	r2,r17,203028 <___vfprintf_internal_r+0x168c>
  202b1c:	b5800204 	addi	r22,r22,8
  202b20:	d9003a17 	ldw	r4,232(sp)
  202b24:	df0022c4 	addi	fp,sp,139
  202b28:	8c400044 	addi	r17,r17,1
  202b2c:	20c7883a 	add	r3,r4,r3
  202b30:	b7000015 	stw	fp,0(r22)
  202b34:	b1000115 	stw	r4,4(r22)
  202b38:	d8c02015 	stw	r3,128(sp)
  202b3c:	dc401f15 	stw	r17,124(sp)
  202b40:	008001c4 	movi	r2,7
  202b44:	14400e16 	blt	r2,r17,202b80 <___vfprintf_internal_r+0x11e4>
  202b48:	b2000204 	addi	r8,r22,8
  202b4c:	003e1806 	br	2023b0 <_gp+0xffdf07cc>
  202b50:	01000874 	movhi	r4,33
  202b54:	21105084 	addi	r4,r4,16706
  202b58:	d9002c15 	stw	r4,176(sp)
  202b5c:	d9002c17 	ldw	r4,176(sp)
  202b60:	1c07883a 	add	r3,r3,r16
  202b64:	44000115 	stw	r16,4(r8)
  202b68:	41000015 	stw	r4,0(r8)
  202b6c:	10800044 	addi	r2,r2,1
  202b70:	d8c02015 	stw	r3,128(sp)
  202b74:	d8801f15 	stw	r2,124(sp)
  202b78:	010001c4 	movi	r4,7
  202b7c:	20be0b0e 	bge	r4,r2,2023ac <_gp+0xffdf07c8>
  202b80:	d9002d17 	ldw	r4,180(sp)
  202b84:	d9801e04 	addi	r6,sp,120
  202b88:	b80b883a 	mov	r5,r23
  202b8c:	020917c0 	call	20917c <__sprint_r>
  202b90:	103c861e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202b94:	d8c02017 	ldw	r3,128(sp)
  202b98:	da000404 	addi	r8,sp,16
  202b9c:	003e0406 	br	2023b0 <_gp+0xffdf07cc>
  202ba0:	d9002d17 	ldw	r4,180(sp)
  202ba4:	d9801e04 	addi	r6,sp,120
  202ba8:	b80b883a 	mov	r5,r23
  202bac:	020917c0 	call	20917c <__sprint_r>
  202bb0:	103e3b26 	beq	r2,zero,2024a0 <_gp+0xffdf08bc>
  202bb4:	003c7d06 	br	201dac <_gp+0xffdf01c8>
  202bb8:	d9002d17 	ldw	r4,180(sp)
  202bbc:	d9801e04 	addi	r6,sp,120
  202bc0:	b80b883a 	mov	r5,r23
  202bc4:	020917c0 	call	20917c <__sprint_r>
  202bc8:	103c781e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202bcc:	d8c02017 	ldw	r3,128(sp)
  202bd0:	da000404 	addi	r8,sp,16
  202bd4:	003de906 	br	20237c <_gp+0xffdf0798>
  202bd8:	d9002d17 	ldw	r4,180(sp)
  202bdc:	d9801e04 	addi	r6,sp,120
  202be0:	b80b883a 	mov	r5,r23
  202be4:	020917c0 	call	20917c <__sprint_r>
  202be8:	103c701e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202bec:	d8c02017 	ldw	r3,128(sp)
  202bf0:	da000404 	addi	r8,sp,16
  202bf4:	003d9b06 	br	202264 <_gp+0xffdf0680>
  202bf8:	d9002d17 	ldw	r4,180(sp)
  202bfc:	d9801e04 	addi	r6,sp,120
  202c00:	b80b883a 	mov	r5,r23
  202c04:	020917c0 	call	20917c <__sprint_r>
  202c08:	103c681e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202c0c:	d8c02017 	ldw	r3,128(sp)
  202c10:	da000404 	addi	r8,sp,16
  202c14:	003da106 	br	20229c <_gp+0xffdf06b8>
  202c18:	d9402a17 	ldw	r5,168(sp)
  202c1c:	d8002785 	stb	zero,158(sp)
  202c20:	283f0616 	blt	r5,zero,20283c <_gp+0xffdf0c58>
  202c24:	00ffdfc4 	movi	r3,-129
  202c28:	9d84b03a 	or	r2,r19,r22
  202c2c:	90e4703a 	and	r18,r18,r3
  202c30:	103c3b26 	beq	r2,zero,201d20 <_gp+0xffdf013c>
  202c34:	0039883a 	mov	fp,zero
  202c38:	003e5806 	br	20259c <_gp+0xffdf09b8>
  202c3c:	9080040c 	andi	r2,r18,16
  202c40:	1001b326 	beq	r2,zero,203310 <___vfprintf_internal_r+0x1974>
  202c44:	d8c02e17 	ldw	r3,184(sp)
  202c48:	d9002a17 	ldw	r4,168(sp)
  202c4c:	d8002785 	stb	zero,158(sp)
  202c50:	18800104 	addi	r2,r3,4
  202c54:	1cc00017 	ldw	r19,0(r3)
  202c58:	002d883a 	mov	r22,zero
  202c5c:	2001b516 	blt	r4,zero,203334 <___vfprintf_internal_r+0x1998>
  202c60:	00ffdfc4 	movi	r3,-129
  202c64:	d8802e15 	stw	r2,184(sp)
  202c68:	90e4703a 	and	r18,r18,r3
  202c6c:	983d0526 	beq	r19,zero,202084 <_gp+0xffdf04a0>
  202c70:	0039883a 	mov	fp,zero
  202c74:	003d0806 	br	202098 <_gp+0xffdf04b4>
  202c78:	dc402617 	ldw	r17,152(sp)
  202c7c:	0441d30e 	bge	zero,r17,2033cc <___vfprintf_internal_r+0x1a30>
  202c80:	dc403217 	ldw	r17,200(sp)
  202c84:	d8803317 	ldw	r2,204(sp)
  202c88:	1440010e 	bge	r2,r17,202c90 <___vfprintf_internal_r+0x12f4>
  202c8c:	1023883a 	mov	r17,r2
  202c90:	04400a0e 	bge	zero,r17,202cbc <___vfprintf_internal_r+0x1320>
  202c94:	d8801f17 	ldw	r2,124(sp)
  202c98:	1c47883a 	add	r3,r3,r17
  202c9c:	44000015 	stw	r16,0(r8)
  202ca0:	10800044 	addi	r2,r2,1
  202ca4:	44400115 	stw	r17,4(r8)
  202ca8:	d8c02015 	stw	r3,128(sp)
  202cac:	d8801f15 	stw	r2,124(sp)
  202cb0:	010001c4 	movi	r4,7
  202cb4:	20826516 	blt	r4,r2,20364c <___vfprintf_internal_r+0x1cb0>
  202cb8:	42000204 	addi	r8,r8,8
  202cbc:	88026116 	blt	r17,zero,203644 <___vfprintf_internal_r+0x1ca8>
  202cc0:	d9003217 	ldw	r4,200(sp)
  202cc4:	2463c83a 	sub	r17,r4,r17
  202cc8:	04407b0e 	bge	zero,r17,202eb8 <___vfprintf_internal_r+0x151c>
  202ccc:	05800404 	movi	r22,16
  202cd0:	d8801f17 	ldw	r2,124(sp)
  202cd4:	b4419d0e 	bge	r22,r17,20334c <___vfprintf_internal_r+0x19b0>
  202cd8:	01000874 	movhi	r4,33
  202cdc:	21105084 	addi	r4,r4,16706
  202ce0:	d9002c15 	stw	r4,176(sp)
  202ce4:	070001c4 	movi	fp,7
  202ce8:	dcc02d17 	ldw	r19,180(sp)
  202cec:	00000306 	br	202cfc <___vfprintf_internal_r+0x1360>
  202cf0:	42000204 	addi	r8,r8,8
  202cf4:	8c7ffc04 	addi	r17,r17,-16
  202cf8:	b441970e 	bge	r22,r17,203358 <___vfprintf_internal_r+0x19bc>
  202cfc:	18c00404 	addi	r3,r3,16
  202d00:	10800044 	addi	r2,r2,1
  202d04:	45000015 	stw	r20,0(r8)
  202d08:	45800115 	stw	r22,4(r8)
  202d0c:	d8c02015 	stw	r3,128(sp)
  202d10:	d8801f15 	stw	r2,124(sp)
  202d14:	e0bff60e 	bge	fp,r2,202cf0 <_gp+0xffdf110c>
  202d18:	d9801e04 	addi	r6,sp,120
  202d1c:	b80b883a 	mov	r5,r23
  202d20:	9809883a 	mov	r4,r19
  202d24:	020917c0 	call	20917c <__sprint_r>
  202d28:	103c201e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202d2c:	d8c02017 	ldw	r3,128(sp)
  202d30:	d8801f17 	ldw	r2,124(sp)
  202d34:	da000404 	addi	r8,sp,16
  202d38:	003fee06 	br	202cf4 <_gp+0xffdf1110>
  202d3c:	d9002d17 	ldw	r4,180(sp)
  202d40:	d9801e04 	addi	r6,sp,120
  202d44:	b80b883a 	mov	r5,r23
  202d48:	020917c0 	call	20917c <__sprint_r>
  202d4c:	103c171e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202d50:	d8c02017 	ldw	r3,128(sp)
  202d54:	df002787 	ldb	fp,158(sp)
  202d58:	da000404 	addi	r8,sp,16
  202d5c:	003d3406 	br	202230 <_gp+0xffdf064c>
  202d60:	9080040c 	andi	r2,r18,16
  202d64:	10016126 	beq	r2,zero,2032ec <___vfprintf_internal_r+0x1950>
  202d68:	d9402e17 	ldw	r5,184(sp)
  202d6c:	2cc00017 	ldw	r19,0(r5)
  202d70:	29400104 	addi	r5,r5,4
  202d74:	d9402e15 	stw	r5,184(sp)
  202d78:	982dd7fa 	srai	r22,r19,31
  202d7c:	b005883a 	mov	r2,r22
  202d80:	003c5a06 	br	201eec <_gp+0xffdf0308>
  202d84:	9080040c 	andi	r2,r18,16
  202d88:	10003526 	beq	r2,zero,202e60 <___vfprintf_internal_r+0x14c4>
  202d8c:	d8c02e17 	ldw	r3,184(sp)
  202d90:	d9002a17 	ldw	r4,168(sp)
  202d94:	d8002785 	stb	zero,158(sp)
  202d98:	18800104 	addi	r2,r3,4
  202d9c:	1cc00017 	ldw	r19,0(r3)
  202da0:	002d883a 	mov	r22,zero
  202da4:	20003716 	blt	r4,zero,202e84 <___vfprintf_internal_r+0x14e8>
  202da8:	00ffdfc4 	movi	r3,-129
  202dac:	d8802e15 	stw	r2,184(sp)
  202db0:	90e4703a 	and	r18,r18,r3
  202db4:	0039883a 	mov	fp,zero
  202db8:	983dd426 	beq	r19,zero,20250c <_gp+0xffdf0928>
  202dbc:	00800244 	movi	r2,9
  202dc0:	14fc5336 	bltu	r2,r19,201f10 <_gp+0xffdf032c>
  202dc4:	d8c02817 	ldw	r3,160(sp)
  202dc8:	dc001dc4 	addi	r16,sp,119
  202dcc:	9cc00c04 	addi	r19,r19,48
  202dd0:	1c07c83a 	sub	r3,r3,r16
  202dd4:	dcc01dc5 	stb	r19,119(sp)
  202dd8:	d8c02b15 	stw	r3,172(sp)
  202ddc:	003cc606 	br	2020f8 <_gp+0xffdf0514>
  202de0:	d8803317 	ldw	r2,204(sp)
  202de4:	143fffc4 	addi	r16,r2,-1
  202de8:	043f4d0e 	bge	zero,r16,202b20 <_gp+0xffdf0f3c>
  202dec:	07000404 	movi	fp,16
  202df0:	e400810e 	bge	fp,r16,202ff8 <___vfprintf_internal_r+0x165c>
  202df4:	01400874 	movhi	r5,33
  202df8:	29505084 	addi	r5,r5,16706
  202dfc:	d9402c15 	stw	r5,176(sp)
  202e00:	01c001c4 	movi	r7,7
  202e04:	dcc02d17 	ldw	r19,180(sp)
  202e08:	00000306 	br	202e18 <___vfprintf_internal_r+0x147c>
  202e0c:	b5800204 	addi	r22,r22,8
  202e10:	843ffc04 	addi	r16,r16,-16
  202e14:	e4007b0e 	bge	fp,r16,203004 <___vfprintf_internal_r+0x1668>
  202e18:	18c00404 	addi	r3,r3,16
  202e1c:	8c400044 	addi	r17,r17,1
  202e20:	b5000015 	stw	r20,0(r22)
  202e24:	b7000115 	stw	fp,4(r22)
  202e28:	d8c02015 	stw	r3,128(sp)
  202e2c:	dc401f15 	stw	r17,124(sp)
  202e30:	3c7ff60e 	bge	r7,r17,202e0c <_gp+0xffdf1228>
  202e34:	d9801e04 	addi	r6,sp,120
  202e38:	b80b883a 	mov	r5,r23
  202e3c:	9809883a 	mov	r4,r19
  202e40:	d9c03c15 	stw	r7,240(sp)
  202e44:	020917c0 	call	20917c <__sprint_r>
  202e48:	d9c03c17 	ldw	r7,240(sp)
  202e4c:	103bd71e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202e50:	d8c02017 	ldw	r3,128(sp)
  202e54:	dc401f17 	ldw	r17,124(sp)
  202e58:	dd800404 	addi	r22,sp,16
  202e5c:	003fec06 	br	202e10 <_gp+0xffdf122c>
  202e60:	9080100c 	andi	r2,r18,64
  202e64:	d8002785 	stb	zero,158(sp)
  202e68:	10010e26 	beq	r2,zero,2032a4 <___vfprintf_internal_r+0x1908>
  202e6c:	d9402e17 	ldw	r5,184(sp)
  202e70:	d8c02a17 	ldw	r3,168(sp)
  202e74:	002d883a 	mov	r22,zero
  202e78:	28800104 	addi	r2,r5,4
  202e7c:	2cc0000b 	ldhu	r19,0(r5)
  202e80:	183fc90e 	bge	r3,zero,202da8 <_gp+0xffdf11c4>
  202e84:	d8802e15 	stw	r2,184(sp)
  202e88:	0039883a 	mov	fp,zero
  202e8c:	9d84b03a 	or	r2,r19,r22
  202e90:	103c1e1e 	bne	r2,zero,201f0c <_gp+0xffdf0328>
  202e94:	00800044 	movi	r2,1
  202e98:	003e6c06 	br	20284c <_gp+0xffdf0c68>
  202e9c:	d9002d17 	ldw	r4,180(sp)
  202ea0:	d9801e04 	addi	r6,sp,120
  202ea4:	b80b883a 	mov	r5,r23
  202ea8:	020917c0 	call	20917c <__sprint_r>
  202eac:	103bbf1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202eb0:	d8c02017 	ldw	r3,128(sp)
  202eb4:	da000404 	addi	r8,sp,16
  202eb8:	d9003217 	ldw	r4,200(sp)
  202ebc:	d8802617 	ldw	r2,152(sp)
  202ec0:	d9403317 	ldw	r5,204(sp)
  202ec4:	8123883a 	add	r17,r16,r4
  202ec8:	11400216 	blt	r2,r5,202ed4 <___vfprintf_internal_r+0x1538>
  202ecc:	9100004c 	andi	r4,r18,1
  202ed0:	20000d26 	beq	r4,zero,202f08 <___vfprintf_internal_r+0x156c>
  202ed4:	d9003717 	ldw	r4,220(sp)
  202ed8:	d9403417 	ldw	r5,208(sp)
  202edc:	1907883a 	add	r3,r3,r4
  202ee0:	d9001f17 	ldw	r4,124(sp)
  202ee4:	41400015 	stw	r5,0(r8)
  202ee8:	d9403717 	ldw	r5,220(sp)
  202eec:	21000044 	addi	r4,r4,1
  202ef0:	d8c02015 	stw	r3,128(sp)
  202ef4:	41400115 	stw	r5,4(r8)
  202ef8:	d9001f15 	stw	r4,124(sp)
  202efc:	014001c4 	movi	r5,7
  202f00:	2901e816 	blt	r5,r4,2036a4 <___vfprintf_internal_r+0x1d08>
  202f04:	42000204 	addi	r8,r8,8
  202f08:	d9003317 	ldw	r4,204(sp)
  202f0c:	8121883a 	add	r16,r16,r4
  202f10:	2085c83a 	sub	r2,r4,r2
  202f14:	8461c83a 	sub	r16,r16,r17
  202f18:	1400010e 	bge	r2,r16,202f20 <___vfprintf_internal_r+0x1584>
  202f1c:	1021883a 	mov	r16,r2
  202f20:	04000a0e 	bge	zero,r16,202f4c <___vfprintf_internal_r+0x15b0>
  202f24:	d9001f17 	ldw	r4,124(sp)
  202f28:	1c07883a 	add	r3,r3,r16
  202f2c:	44400015 	stw	r17,0(r8)
  202f30:	21000044 	addi	r4,r4,1
  202f34:	44000115 	stw	r16,4(r8)
  202f38:	d8c02015 	stw	r3,128(sp)
  202f3c:	d9001f15 	stw	r4,124(sp)
  202f40:	014001c4 	movi	r5,7
  202f44:	2901fb16 	blt	r5,r4,203734 <___vfprintf_internal_r+0x1d98>
  202f48:	42000204 	addi	r8,r8,8
  202f4c:	8001f716 	blt	r16,zero,20372c <___vfprintf_internal_r+0x1d90>
  202f50:	1421c83a 	sub	r16,r2,r16
  202f54:	043d160e 	bge	zero,r16,2023b0 <_gp+0xffdf07cc>
  202f58:	04400404 	movi	r17,16
  202f5c:	d8801f17 	ldw	r2,124(sp)
  202f60:	8c3efb0e 	bge	r17,r16,202b50 <_gp+0xffdf0f6c>
  202f64:	01400874 	movhi	r5,33
  202f68:	29505084 	addi	r5,r5,16706
  202f6c:	d9402c15 	stw	r5,176(sp)
  202f70:	058001c4 	movi	r22,7
  202f74:	dcc02d17 	ldw	r19,180(sp)
  202f78:	00000306 	br	202f88 <___vfprintf_internal_r+0x15ec>
  202f7c:	42000204 	addi	r8,r8,8
  202f80:	843ffc04 	addi	r16,r16,-16
  202f84:	8c3ef50e 	bge	r17,r16,202b5c <_gp+0xffdf0f78>
  202f88:	18c00404 	addi	r3,r3,16
  202f8c:	10800044 	addi	r2,r2,1
  202f90:	45000015 	stw	r20,0(r8)
  202f94:	44400115 	stw	r17,4(r8)
  202f98:	d8c02015 	stw	r3,128(sp)
  202f9c:	d8801f15 	stw	r2,124(sp)
  202fa0:	b0bff60e 	bge	r22,r2,202f7c <_gp+0xffdf1398>
  202fa4:	d9801e04 	addi	r6,sp,120
  202fa8:	b80b883a 	mov	r5,r23
  202fac:	9809883a 	mov	r4,r19
  202fb0:	020917c0 	call	20917c <__sprint_r>
  202fb4:	103b7d1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  202fb8:	d8c02017 	ldw	r3,128(sp)
  202fbc:	d8801f17 	ldw	r2,124(sp)
  202fc0:	da000404 	addi	r8,sp,16
  202fc4:	003fee06 	br	202f80 <_gp+0xffdf139c>
  202fc8:	9088703a 	and	r4,r18,r2
  202fcc:	203eab1e 	bne	r4,zero,202a7c <_gp+0xffdf0e98>
  202fd0:	dc401f17 	ldw	r17,124(sp)
  202fd4:	40800115 	stw	r2,4(r8)
  202fd8:	44000015 	stw	r16,0(r8)
  202fdc:	8c400044 	addi	r17,r17,1
  202fe0:	d8c02015 	stw	r3,128(sp)
  202fe4:	dc401f15 	stw	r17,124(sp)
  202fe8:	008001c4 	movi	r2,7
  202fec:	14400e16 	blt	r2,r17,203028 <___vfprintf_internal_r+0x168c>
  202ff0:	45800204 	addi	r22,r8,8
  202ff4:	003eca06 	br	202b20 <_gp+0xffdf0f3c>
  202ff8:	01000874 	movhi	r4,33
  202ffc:	21105084 	addi	r4,r4,16706
  203000:	d9002c15 	stw	r4,176(sp)
  203004:	d8802c17 	ldw	r2,176(sp)
  203008:	1c07883a 	add	r3,r3,r16
  20300c:	8c400044 	addi	r17,r17,1
  203010:	b0800015 	stw	r2,0(r22)
  203014:	b4000115 	stw	r16,4(r22)
  203018:	d8c02015 	stw	r3,128(sp)
  20301c:	dc401f15 	stw	r17,124(sp)
  203020:	008001c4 	movi	r2,7
  203024:	147ebd0e 	bge	r2,r17,202b1c <_gp+0xffdf0f38>
  203028:	d9002d17 	ldw	r4,180(sp)
  20302c:	d9801e04 	addi	r6,sp,120
  203030:	b80b883a 	mov	r5,r23
  203034:	020917c0 	call	20917c <__sprint_r>
  203038:	103b5c1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  20303c:	d8c02017 	ldw	r3,128(sp)
  203040:	dc401f17 	ldw	r17,124(sp)
  203044:	dd800404 	addi	r22,sp,16
  203048:	003eb506 	br	202b20 <_gp+0xffdf0f3c>
  20304c:	d9002d17 	ldw	r4,180(sp)
  203050:	d9801e04 	addi	r6,sp,120
  203054:	b80b883a 	mov	r5,r23
  203058:	020917c0 	call	20917c <__sprint_r>
  20305c:	103b531e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  203060:	d8c02017 	ldw	r3,128(sp)
  203064:	dc401f17 	ldw	r17,124(sp)
  203068:	da000404 	addi	r8,sp,16
  20306c:	003e8d06 	br	202aa4 <_gp+0xffdf0ec0>
  203070:	d9002d17 	ldw	r4,180(sp)
  203074:	d9801e04 	addi	r6,sp,120
  203078:	b80b883a 	mov	r5,r23
  20307c:	020917c0 	call	20917c <__sprint_r>
  203080:	103b4a1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  203084:	d8c02017 	ldw	r3,128(sp)
  203088:	dc401f17 	ldw	r17,124(sp)
  20308c:	dd800404 	addi	r22,sp,16
  203090:	003e8f06 	br	202ad0 <_gp+0xffdf0eec>
  203094:	0027883a 	mov	r19,zero
  203098:	003f4a06 	br	202dc4 <_gp+0xffdf11e0>
  20309c:	d9002d17 	ldw	r4,180(sp)
  2030a0:	d9801e04 	addi	r6,sp,120
  2030a4:	b80b883a 	mov	r5,r23
  2030a8:	020917c0 	call	20917c <__sprint_r>
  2030ac:	103b3f1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2030b0:	d8c02017 	ldw	r3,128(sp)
  2030b4:	da000404 	addi	r8,sp,16
  2030b8:	003c7b06 	br	2022a8 <_gp+0xffdf06c4>
  2030bc:	d9402a17 	ldw	r5,168(sp)
  2030c0:	04e7c83a 	sub	r19,zero,r19
  2030c4:	07000b44 	movi	fp,45
  2030c8:	9804c03a 	cmpne	r2,r19,zero
  2030cc:	05adc83a 	sub	r22,zero,r22
  2030d0:	df002785 	stb	fp,158(sp)
  2030d4:	b0adc83a 	sub	r22,r22,r2
  2030d8:	28017b16 	blt	r5,zero,2036c8 <___vfprintf_internal_r+0x1d2c>
  2030dc:	00bfdfc4 	movi	r2,-129
  2030e0:	90a4703a 	and	r18,r18,r2
  2030e4:	003b8906 	br	201f0c <_gp+0xffdf0328>
  2030e8:	d9003617 	ldw	r4,216(sp)
  2030ec:	d9403817 	ldw	r5,224(sp)
  2030f0:	da003d15 	stw	r8,244(sp)
  2030f4:	0208da00 	call	208da0 <__fpclassifyd>
  2030f8:	da003d17 	ldw	r8,244(sp)
  2030fc:	1000f026 	beq	r2,zero,2034c0 <___vfprintf_internal_r+0x1b24>
  203100:	d9002a17 	ldw	r4,168(sp)
  203104:	05bff7c4 	movi	r22,-33
  203108:	00bfffc4 	movi	r2,-1
  20310c:	8dac703a 	and	r22,r17,r22
  203110:	20820026 	beq	r4,r2,203914 <___vfprintf_internal_r+0x1f78>
  203114:	008011c4 	movi	r2,71
  203118:	b081f726 	beq	r22,r2,2038f8 <___vfprintf_internal_r+0x1f5c>
  20311c:	d9003817 	ldw	r4,224(sp)
  203120:	90c04014 	ori	r3,r18,256
  203124:	d8c02c15 	stw	r3,176(sp)
  203128:	20021516 	blt	r4,zero,203980 <___vfprintf_internal_r+0x1fe4>
  20312c:	dcc03817 	ldw	r19,224(sp)
  203130:	d8002905 	stb	zero,164(sp)
  203134:	00801984 	movi	r2,102
  203138:	8881f926 	beq	r17,r2,203920 <___vfprintf_internal_r+0x1f84>
  20313c:	00801184 	movi	r2,70
  203140:	88821c26 	beq	r17,r2,2039b4 <___vfprintf_internal_r+0x2018>
  203144:	00801144 	movi	r2,69
  203148:	b081ef26 	beq	r22,r2,203908 <___vfprintf_internal_r+0x1f6c>
  20314c:	d8c02a17 	ldw	r3,168(sp)
  203150:	d8802104 	addi	r2,sp,132
  203154:	d8800315 	stw	r2,12(sp)
  203158:	d9403617 	ldw	r5,216(sp)
  20315c:	d8802504 	addi	r2,sp,148
  203160:	d9002d17 	ldw	r4,180(sp)
  203164:	d8800215 	stw	r2,8(sp)
  203168:	d8802604 	addi	r2,sp,152
  20316c:	d8c00015 	stw	r3,0(sp)
  203170:	d8800115 	stw	r2,4(sp)
  203174:	01c00084 	movi	r7,2
  203178:	980d883a 	mov	r6,r19
  20317c:	d8c03c15 	stw	r3,240(sp)
  203180:	da003d15 	stw	r8,244(sp)
  203184:	02040cc0 	call	2040cc <_dtoa_r>
  203188:	1021883a 	mov	r16,r2
  20318c:	008019c4 	movi	r2,103
  203190:	d8c03c17 	ldw	r3,240(sp)
  203194:	da003d17 	ldw	r8,244(sp)
  203198:	88817126 	beq	r17,r2,203760 <___vfprintf_internal_r+0x1dc4>
  20319c:	008011c4 	movi	r2,71
  2031a0:	88829126 	beq	r17,r2,203be8 <___vfprintf_internal_r+0x224c>
  2031a4:	80f9883a 	add	fp,r16,r3
  2031a8:	d9003617 	ldw	r4,216(sp)
  2031ac:	000d883a 	mov	r6,zero
  2031b0:	000f883a 	mov	r7,zero
  2031b4:	980b883a 	mov	r5,r19
  2031b8:	da003d15 	stw	r8,244(sp)
  2031bc:	020cf000 	call	20cf00 <__eqdf2>
  2031c0:	da003d17 	ldw	r8,244(sp)
  2031c4:	10018d26 	beq	r2,zero,2037fc <___vfprintf_internal_r+0x1e60>
  2031c8:	d8802117 	ldw	r2,132(sp)
  2031cc:	1700062e 	bgeu	r2,fp,2031e8 <___vfprintf_internal_r+0x184c>
  2031d0:	01000c04 	movi	r4,48
  2031d4:	10c00044 	addi	r3,r2,1
  2031d8:	d8c02115 	stw	r3,132(sp)
  2031dc:	11000005 	stb	r4,0(r2)
  2031e0:	d8802117 	ldw	r2,132(sp)
  2031e4:	173ffb36 	bltu	r2,fp,2031d4 <_gp+0xffdf15f0>
  2031e8:	1405c83a 	sub	r2,r2,r16
  2031ec:	d8803315 	stw	r2,204(sp)
  2031f0:	008011c4 	movi	r2,71
  2031f4:	b0817626 	beq	r22,r2,2037d0 <___vfprintf_internal_r+0x1e34>
  2031f8:	00801944 	movi	r2,101
  2031fc:	1442800e 	bge	r2,r17,203c00 <___vfprintf_internal_r+0x2264>
  203200:	d8c02617 	ldw	r3,152(sp)
  203204:	00801984 	movi	r2,102
  203208:	d8c03215 	stw	r3,200(sp)
  20320c:	8881fe26 	beq	r17,r2,203a08 <___vfprintf_internal_r+0x206c>
  203210:	d8c03217 	ldw	r3,200(sp)
  203214:	d9003317 	ldw	r4,204(sp)
  203218:	1901dd16 	blt	r3,r4,203990 <___vfprintf_internal_r+0x1ff4>
  20321c:	9480004c 	andi	r18,r18,1
  203220:	90022b1e 	bne	r18,zero,203ad0 <___vfprintf_internal_r+0x2134>
  203224:	1805883a 	mov	r2,r3
  203228:	18028316 	blt	r3,zero,203c38 <___vfprintf_internal_r+0x229c>
  20322c:	d8c03217 	ldw	r3,200(sp)
  203230:	044019c4 	movi	r17,103
  203234:	d8c02b15 	stw	r3,172(sp)
  203238:	df002907 	ldb	fp,164(sp)
  20323c:	e001531e 	bne	fp,zero,20378c <___vfprintf_internal_r+0x1df0>
  203240:	df002783 	ldbu	fp,158(sp)
  203244:	d8802915 	stw	r2,164(sp)
  203248:	dc802c17 	ldw	r18,176(sp)
  20324c:	d8002a15 	stw	zero,168(sp)
  203250:	003baf06 	br	202110 <_gp+0xffdf052c>
  203254:	d8c02e17 	ldw	r3,184(sp)
  203258:	d9002e17 	ldw	r4,184(sp)
  20325c:	d9402e17 	ldw	r5,184(sp)
  203260:	18c00017 	ldw	r3,0(r3)
  203264:	21000117 	ldw	r4,4(r4)
  203268:	29400204 	addi	r5,r5,8
  20326c:	d8c03615 	stw	r3,216(sp)
  203270:	d9003815 	stw	r4,224(sp)
  203274:	d9402e15 	stw	r5,184(sp)
  203278:	003b5006 	br	201fbc <_gp+0xffdf03d8>
  20327c:	ac400007 	ldb	r17,0(r21)
  203280:	003a2806 	br	201b24 <_gp+0xffdeff40>
  203284:	9080100c 	andi	r2,r18,64
  203288:	1000a826 	beq	r2,zero,20352c <___vfprintf_internal_r+0x1b90>
  20328c:	d8c02e17 	ldw	r3,184(sp)
  203290:	002d883a 	mov	r22,zero
  203294:	1cc0000b 	ldhu	r19,0(r3)
  203298:	18c00104 	addi	r3,r3,4
  20329c:	d8c02e15 	stw	r3,184(sp)
  2032a0:	003caf06 	br	202560 <_gp+0xffdf097c>
  2032a4:	d9002e17 	ldw	r4,184(sp)
  2032a8:	d9402a17 	ldw	r5,168(sp)
  2032ac:	002d883a 	mov	r22,zero
  2032b0:	20800104 	addi	r2,r4,4
  2032b4:	24c00017 	ldw	r19,0(r4)
  2032b8:	283ebb0e 	bge	r5,zero,202da8 <_gp+0xffdf11c4>
  2032bc:	003ef106 	br	202e84 <_gp+0xffdf12a0>
  2032c0:	9080040c 	andi	r2,r18,16
  2032c4:	1000921e 	bne	r2,zero,203510 <___vfprintf_internal_r+0x1b74>
  2032c8:	9480100c 	andi	r18,r18,64
  2032cc:	90013926 	beq	r18,zero,2037b4 <___vfprintf_internal_r+0x1e18>
  2032d0:	d9402e17 	ldw	r5,184(sp)
  2032d4:	d8c02f17 	ldw	r3,188(sp)
  2032d8:	28800017 	ldw	r2,0(r5)
  2032dc:	29400104 	addi	r5,r5,4
  2032e0:	d9402e15 	stw	r5,184(sp)
  2032e4:	10c0000d 	sth	r3,0(r2)
  2032e8:	0039e406 	br	201a7c <_gp+0xffdefe98>
  2032ec:	9080100c 	andi	r2,r18,64
  2032f0:	10008026 	beq	r2,zero,2034f4 <___vfprintf_internal_r+0x1b58>
  2032f4:	d8802e17 	ldw	r2,184(sp)
  2032f8:	14c0000f 	ldh	r19,0(r2)
  2032fc:	10800104 	addi	r2,r2,4
  203300:	d8802e15 	stw	r2,184(sp)
  203304:	982dd7fa 	srai	r22,r19,31
  203308:	b005883a 	mov	r2,r22
  20330c:	003af706 	br	201eec <_gp+0xffdf0308>
  203310:	9080100c 	andi	r2,r18,64
  203314:	d8002785 	stb	zero,158(sp)
  203318:	10008a1e 	bne	r2,zero,203544 <___vfprintf_internal_r+0x1ba8>
  20331c:	d9002e17 	ldw	r4,184(sp)
  203320:	d9402a17 	ldw	r5,168(sp)
  203324:	002d883a 	mov	r22,zero
  203328:	20800104 	addi	r2,r4,4
  20332c:	24c00017 	ldw	r19,0(r4)
  203330:	283e4b0e 	bge	r5,zero,202c60 <_gp+0xffdf107c>
  203334:	9d86b03a 	or	r3,r19,r22
  203338:	d8802e15 	stw	r2,184(sp)
  20333c:	183e4c1e 	bne	r3,zero,202c70 <_gp+0xffdf108c>
  203340:	0039883a 	mov	fp,zero
  203344:	0005883a 	mov	r2,zero
  203348:	003d4006 	br	20284c <_gp+0xffdf0c68>
  20334c:	01400874 	movhi	r5,33
  203350:	29505084 	addi	r5,r5,16706
  203354:	d9402c15 	stw	r5,176(sp)
  203358:	d9402c17 	ldw	r5,176(sp)
  20335c:	1c47883a 	add	r3,r3,r17
  203360:	10800044 	addi	r2,r2,1
  203364:	41400015 	stw	r5,0(r8)
  203368:	44400115 	stw	r17,4(r8)
  20336c:	d8c02015 	stw	r3,128(sp)
  203370:	d8801f15 	stw	r2,124(sp)
  203374:	010001c4 	movi	r4,7
  203378:	20bec816 	blt	r4,r2,202e9c <_gp+0xffdf12b8>
  20337c:	42000204 	addi	r8,r8,8
  203380:	003ecd06 	br	202eb8 <_gp+0xffdf12d4>
  203384:	d9002a17 	ldw	r4,168(sp)
  203388:	d8002785 	stb	zero,158(sp)
  20338c:	203d2d16 	blt	r4,zero,202844 <_gp+0xffdf0c60>
  203390:	00bfdfc4 	movi	r2,-129
  203394:	90a4703a 	and	r18,r18,r2
  203398:	003a6106 	br	201d20 <_gp+0xffdf013c>
  20339c:	01000874 	movhi	r4,33
  2033a0:	21105084 	addi	r4,r4,16706
  2033a4:	d9002c15 	stw	r4,176(sp)
  2033a8:	003bea06 	br	202354 <_gp+0xffdf0770>
  2033ac:	d9002d17 	ldw	r4,180(sp)
  2033b0:	d9801e04 	addi	r6,sp,120
  2033b4:	b80b883a 	mov	r5,r23
  2033b8:	020917c0 	call	20917c <__sprint_r>
  2033bc:	103a7b1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2033c0:	d8c02017 	ldw	r3,128(sp)
  2033c4:	da000404 	addi	r8,sp,16
  2033c8:	003d4106 	br	2028d0 <_gp+0xffdf0cec>
  2033cc:	d8801f17 	ldw	r2,124(sp)
  2033d0:	01400874 	movhi	r5,33
  2033d4:	01000044 	movi	r4,1
  2033d8:	18c00044 	addi	r3,r3,1
  2033dc:	10800044 	addi	r2,r2,1
  2033e0:	29505004 	addi	r5,r5,16704
  2033e4:	41000115 	stw	r4,4(r8)
  2033e8:	41400015 	stw	r5,0(r8)
  2033ec:	d8c02015 	stw	r3,128(sp)
  2033f0:	d8801f15 	stw	r2,124(sp)
  2033f4:	010001c4 	movi	r4,7
  2033f8:	20805c16 	blt	r4,r2,20356c <___vfprintf_internal_r+0x1bd0>
  2033fc:	42000204 	addi	r8,r8,8
  203400:	8800041e 	bne	r17,zero,203414 <___vfprintf_internal_r+0x1a78>
  203404:	d8803317 	ldw	r2,204(sp)
  203408:	1000021e 	bne	r2,zero,203414 <___vfprintf_internal_r+0x1a78>
  20340c:	9080004c 	andi	r2,r18,1
  203410:	103be726 	beq	r2,zero,2023b0 <_gp+0xffdf07cc>
  203414:	d9003717 	ldw	r4,220(sp)
  203418:	d8801f17 	ldw	r2,124(sp)
  20341c:	d9403417 	ldw	r5,208(sp)
  203420:	20c7883a 	add	r3,r4,r3
  203424:	10800044 	addi	r2,r2,1
  203428:	41000115 	stw	r4,4(r8)
  20342c:	41400015 	stw	r5,0(r8)
  203430:	d8c02015 	stw	r3,128(sp)
  203434:	d8801f15 	stw	r2,124(sp)
  203438:	010001c4 	movi	r4,7
  20343c:	20812116 	blt	r4,r2,2038c4 <___vfprintf_internal_r+0x1f28>
  203440:	42000204 	addi	r8,r8,8
  203444:	0463c83a 	sub	r17,zero,r17
  203448:	0440730e 	bge	zero,r17,203618 <___vfprintf_internal_r+0x1c7c>
  20344c:	05800404 	movi	r22,16
  203450:	b440860e 	bge	r22,r17,20366c <___vfprintf_internal_r+0x1cd0>
  203454:	01400874 	movhi	r5,33
  203458:	29505084 	addi	r5,r5,16706
  20345c:	d9402c15 	stw	r5,176(sp)
  203460:	070001c4 	movi	fp,7
  203464:	dcc02d17 	ldw	r19,180(sp)
  203468:	00000306 	br	203478 <___vfprintf_internal_r+0x1adc>
  20346c:	42000204 	addi	r8,r8,8
  203470:	8c7ffc04 	addi	r17,r17,-16
  203474:	b440800e 	bge	r22,r17,203678 <___vfprintf_internal_r+0x1cdc>
  203478:	18c00404 	addi	r3,r3,16
  20347c:	10800044 	addi	r2,r2,1
  203480:	45000015 	stw	r20,0(r8)
  203484:	45800115 	stw	r22,4(r8)
  203488:	d8c02015 	stw	r3,128(sp)
  20348c:	d8801f15 	stw	r2,124(sp)
  203490:	e0bff60e 	bge	fp,r2,20346c <_gp+0xffdf1888>
  203494:	d9801e04 	addi	r6,sp,120
  203498:	b80b883a 	mov	r5,r23
  20349c:	9809883a 	mov	r4,r19
  2034a0:	020917c0 	call	20917c <__sprint_r>
  2034a4:	103a411e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2034a8:	d8c02017 	ldw	r3,128(sp)
  2034ac:	d8801f17 	ldw	r2,124(sp)
  2034b0:	da000404 	addi	r8,sp,16
  2034b4:	003fee06 	br	203470 <_gp+0xffdf188c>
  2034b8:	00bfffc4 	movi	r2,-1
  2034bc:	003a3f06 	br	201dbc <_gp+0xffdf01d8>
  2034c0:	008011c4 	movi	r2,71
  2034c4:	1440b816 	blt	r2,r17,2037a8 <___vfprintf_internal_r+0x1e0c>
  2034c8:	04000874 	movhi	r16,33
  2034cc:	84104204 	addi	r16,r16,16648
  2034d0:	00c000c4 	movi	r3,3
  2034d4:	00bfdfc4 	movi	r2,-129
  2034d8:	d8c02915 	stw	r3,164(sp)
  2034dc:	90a4703a 	and	r18,r18,r2
  2034e0:	df002783 	ldbu	fp,158(sp)
  2034e4:	d8c02b15 	stw	r3,172(sp)
  2034e8:	d8002a15 	stw	zero,168(sp)
  2034ec:	d8003215 	stw	zero,200(sp)
  2034f0:	003b0706 	br	202110 <_gp+0xffdf052c>
  2034f4:	d8c02e17 	ldw	r3,184(sp)
  2034f8:	1cc00017 	ldw	r19,0(r3)
  2034fc:	18c00104 	addi	r3,r3,4
  203500:	d8c02e15 	stw	r3,184(sp)
  203504:	982dd7fa 	srai	r22,r19,31
  203508:	b005883a 	mov	r2,r22
  20350c:	003a7706 	br	201eec <_gp+0xffdf0308>
  203510:	d8c02e17 	ldw	r3,184(sp)
  203514:	d9002f17 	ldw	r4,188(sp)
  203518:	18800017 	ldw	r2,0(r3)
  20351c:	18c00104 	addi	r3,r3,4
  203520:	d8c02e15 	stw	r3,184(sp)
  203524:	11000015 	stw	r4,0(r2)
  203528:	00395406 	br	201a7c <_gp+0xffdefe98>
  20352c:	d9002e17 	ldw	r4,184(sp)
  203530:	002d883a 	mov	r22,zero
  203534:	24c00017 	ldw	r19,0(r4)
  203538:	21000104 	addi	r4,r4,4
  20353c:	d9002e15 	stw	r4,184(sp)
  203540:	003c0706 	br	202560 <_gp+0xffdf097c>
  203544:	d9402e17 	ldw	r5,184(sp)
  203548:	d8c02a17 	ldw	r3,168(sp)
  20354c:	002d883a 	mov	r22,zero
  203550:	28800104 	addi	r2,r5,4
  203554:	2cc0000b 	ldhu	r19,0(r5)
  203558:	183dc10e 	bge	r3,zero,202c60 <_gp+0xffdf107c>
  20355c:	003f7506 	br	203334 <_gp+0xffdf1750>
  203560:	04000874 	movhi	r16,33
  203564:	84104004 	addi	r16,r16,16640
  203568:	003aa706 	br	202008 <_gp+0xffdf0424>
  20356c:	d9002d17 	ldw	r4,180(sp)
  203570:	d9801e04 	addi	r6,sp,120
  203574:	b80b883a 	mov	r5,r23
  203578:	020917c0 	call	20917c <__sprint_r>
  20357c:	103a0b1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  203580:	dc402617 	ldw	r17,152(sp)
  203584:	d8c02017 	ldw	r3,128(sp)
  203588:	da000404 	addi	r8,sp,16
  20358c:	003f9c06 	br	203400 <_gp+0xffdf181c>
  203590:	ac400043 	ldbu	r17,1(r21)
  203594:	84000814 	ori	r16,r16,32
  203598:	ad400044 	addi	r21,r21,1
  20359c:	8c403fcc 	andi	r17,r17,255
  2035a0:	8c40201c 	xori	r17,r17,128
  2035a4:	8c7fe004 	addi	r17,r17,-128
  2035a8:	00395e06 	br	201b24 <_gp+0xffdeff40>
  2035ac:	d8c02e15 	stw	r3,184(sp)
  2035b0:	0039883a 	mov	fp,zero
  2035b4:	003e3506 	br	202e8c <_gp+0xffdf12a8>
  2035b8:	d9002d17 	ldw	r4,180(sp)
  2035bc:	d9801e04 	addi	r6,sp,120
  2035c0:	b80b883a 	mov	r5,r23
  2035c4:	020917c0 	call	20917c <__sprint_r>
  2035c8:	1039f81e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2035cc:	d8c02017 	ldw	r3,128(sp)
  2035d0:	da000404 	addi	r8,sp,16
  2035d4:	003cd006 	br	202918 <_gp+0xffdf0d34>
  2035d8:	8009883a 	mov	r4,r16
  2035dc:	df003d15 	stw	fp,244(sp)
  2035e0:	02019040 	call	201904 <strlen>
  2035e4:	d8802b15 	stw	r2,172(sp)
  2035e8:	da003d17 	ldw	r8,244(sp)
  2035ec:	103c200e 	bge	r2,zero,202670 <_gp+0xffdf0a8c>
  2035f0:	0005883a 	mov	r2,zero
  2035f4:	003c1e06 	br	202670 <_gp+0xffdf0a8c>
  2035f8:	d9002d17 	ldw	r4,180(sp)
  2035fc:	d9801e04 	addi	r6,sp,120
  203600:	b80b883a 	mov	r5,r23
  203604:	020917c0 	call	20917c <__sprint_r>
  203608:	1039e81e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  20360c:	d8c02017 	ldw	r3,128(sp)
  203610:	d8801f17 	ldw	r2,124(sp)
  203614:	da000404 	addi	r8,sp,16
  203618:	d9403317 	ldw	r5,204(sp)
  20361c:	10800044 	addi	r2,r2,1
  203620:	44000015 	stw	r16,0(r8)
  203624:	28c7883a 	add	r3,r5,r3
  203628:	003b5b06 	br	202398 <_gp+0xffdf07b4>
  20362c:	01000874 	movhi	r4,33
  203630:	21105484 	addi	r4,r4,16722
  203634:	d9003515 	stw	r4,212(sp)
  203638:	003af206 	br	202204 <_gp+0xffdf0620>
  20363c:	013fffc4 	movi	r4,-1
  203640:	003a0806 	br	201e64 <_gp+0xffdf0280>
  203644:	0023883a 	mov	r17,zero
  203648:	003d9d06 	br	202cc0 <_gp+0xffdf10dc>
  20364c:	d9002d17 	ldw	r4,180(sp)
  203650:	d9801e04 	addi	r6,sp,120
  203654:	b80b883a 	mov	r5,r23
  203658:	020917c0 	call	20917c <__sprint_r>
  20365c:	1039d31e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  203660:	d8c02017 	ldw	r3,128(sp)
  203664:	da000404 	addi	r8,sp,16
  203668:	003d9406 	br	202cbc <_gp+0xffdf10d8>
  20366c:	01000874 	movhi	r4,33
  203670:	21105084 	addi	r4,r4,16706
  203674:	d9002c15 	stw	r4,176(sp)
  203678:	d9002c17 	ldw	r4,176(sp)
  20367c:	1c47883a 	add	r3,r3,r17
  203680:	10800044 	addi	r2,r2,1
  203684:	41000015 	stw	r4,0(r8)
  203688:	44400115 	stw	r17,4(r8)
  20368c:	d8c02015 	stw	r3,128(sp)
  203690:	d8801f15 	stw	r2,124(sp)
  203694:	010001c4 	movi	r4,7
  203698:	20bfd716 	blt	r4,r2,2035f8 <_gp+0xffdf1a14>
  20369c:	42000204 	addi	r8,r8,8
  2036a0:	003fdd06 	br	203618 <_gp+0xffdf1a34>
  2036a4:	d9002d17 	ldw	r4,180(sp)
  2036a8:	d9801e04 	addi	r6,sp,120
  2036ac:	b80b883a 	mov	r5,r23
  2036b0:	020917c0 	call	20917c <__sprint_r>
  2036b4:	1039bd1e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2036b8:	d8802617 	ldw	r2,152(sp)
  2036bc:	d8c02017 	ldw	r3,128(sp)
  2036c0:	da000404 	addi	r8,sp,16
  2036c4:	003e1006 	br	202f08 <_gp+0xffdf1324>
  2036c8:	00800044 	movi	r2,1
  2036cc:	10803fcc 	andi	r2,r2,255
  2036d0:	00c00044 	movi	r3,1
  2036d4:	10fa0d26 	beq	r2,r3,201f0c <_gp+0xffdf0328>
  2036d8:	00c00084 	movi	r3,2
  2036dc:	10fbaf26 	beq	r2,r3,20259c <_gp+0xffdf09b8>
  2036e0:	003a6d06 	br	202098 <_gp+0xffdf04b4>
  2036e4:	01000874 	movhi	r4,33
  2036e8:	21105484 	addi	r4,r4,16722
  2036ec:	d9003515 	stw	r4,212(sp)
  2036f0:	003b5406 	br	202444 <_gp+0xffdf0860>
  2036f4:	d8802a17 	ldw	r2,168(sp)
  2036f8:	00c00184 	movi	r3,6
  2036fc:	1880012e 	bgeu	r3,r2,203704 <___vfprintf_internal_r+0x1d68>
  203700:	1805883a 	mov	r2,r3
  203704:	d8802b15 	stw	r2,172(sp)
  203708:	1000ef16 	blt	r2,zero,203ac8 <___vfprintf_internal_r+0x212c>
  20370c:	04000874 	movhi	r16,33
  203710:	d8802915 	stw	r2,164(sp)
  203714:	dcc02e15 	stw	r19,184(sp)
  203718:	d8002a15 	stw	zero,168(sp)
  20371c:	d8003215 	stw	zero,200(sp)
  203720:	84104e04 	addi	r16,r16,16696
  203724:	0039883a 	mov	fp,zero
  203728:	003a8006 	br	20212c <_gp+0xffdf0548>
  20372c:	0021883a 	mov	r16,zero
  203730:	003e0706 	br	202f50 <_gp+0xffdf136c>
  203734:	d9002d17 	ldw	r4,180(sp)
  203738:	d9801e04 	addi	r6,sp,120
  20373c:	b80b883a 	mov	r5,r23
  203740:	020917c0 	call	20917c <__sprint_r>
  203744:	1039991e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  203748:	d8802617 	ldw	r2,152(sp)
  20374c:	d9403317 	ldw	r5,204(sp)
  203750:	d8c02017 	ldw	r3,128(sp)
  203754:	da000404 	addi	r8,sp,16
  203758:	2885c83a 	sub	r2,r5,r2
  20375c:	003dfb06 	br	202f4c <_gp+0xffdf1368>
  203760:	9080004c 	andi	r2,r18,1
  203764:	103e8f1e 	bne	r2,zero,2031a4 <_gp+0xffdf15c0>
  203768:	d8802117 	ldw	r2,132(sp)
  20376c:	003e9e06 	br	2031e8 <_gp+0xffdf1604>
  203770:	1025883a 	mov	r18,r2
  203774:	0039883a 	mov	fp,zero
  203778:	00800084 	movi	r2,2
  20377c:	003fd306 	br	2036cc <_gp+0xffdf1ae8>
  203780:	07000b44 	movi	fp,45
  203784:	df002785 	stb	fp,158(sp)
  203788:	003a1b06 	br	201ff8 <_gp+0xffdf0414>
  20378c:	00c00b44 	movi	r3,45
  203790:	d8c02785 	stb	r3,158(sp)
  203794:	d8802915 	stw	r2,164(sp)
  203798:	dc802c17 	ldw	r18,176(sp)
  20379c:	d8002a15 	stw	zero,168(sp)
  2037a0:	07000b44 	movi	fp,45
  2037a4:	003a5e06 	br	202120 <_gp+0xffdf053c>
  2037a8:	04000874 	movhi	r16,33
  2037ac:	84104304 	addi	r16,r16,16652
  2037b0:	003f4706 	br	2034d0 <_gp+0xffdf18ec>
  2037b4:	d9002e17 	ldw	r4,184(sp)
  2037b8:	d9402f17 	ldw	r5,188(sp)
  2037bc:	20800017 	ldw	r2,0(r4)
  2037c0:	21000104 	addi	r4,r4,4
  2037c4:	d9002e15 	stw	r4,184(sp)
  2037c8:	11400015 	stw	r5,0(r2)
  2037cc:	0038ab06 	br	201a7c <_gp+0xffdefe98>
  2037d0:	dd802617 	ldw	r22,152(sp)
  2037d4:	00bfff44 	movi	r2,-3
  2037d8:	b0801c16 	blt	r22,r2,20384c <___vfprintf_internal_r+0x1eb0>
  2037dc:	d9402a17 	ldw	r5,168(sp)
  2037e0:	2d801a16 	blt	r5,r22,20384c <___vfprintf_internal_r+0x1eb0>
  2037e4:	dd803215 	stw	r22,200(sp)
  2037e8:	003e8906 	br	203210 <_gp+0xffdf162c>
  2037ec:	01000874 	movhi	r4,33
  2037f0:	21105084 	addi	r4,r4,16706
  2037f4:	d9002c15 	stw	r4,176(sp)
  2037f8:	003c9106 	br	202a40 <_gp+0xffdf0e5c>
  2037fc:	e005883a 	mov	r2,fp
  203800:	003e7906 	br	2031e8 <_gp+0xffdf1604>
  203804:	d9002a17 	ldw	r4,168(sp)
  203808:	df002783 	ldbu	fp,158(sp)
  20380c:	dcc02e15 	stw	r19,184(sp)
  203810:	d9002915 	stw	r4,164(sp)
  203814:	d9002b15 	stw	r4,172(sp)
  203818:	d8002a15 	stw	zero,168(sp)
  20381c:	d8003215 	stw	zero,200(sp)
  203820:	003a3b06 	br	202110 <_gp+0xffdf052c>
  203824:	9080004c 	andi	r2,r18,1
  203828:	0039883a 	mov	fp,zero
  20382c:	10000426 	beq	r2,zero,203840 <___vfprintf_internal_r+0x1ea4>
  203830:	00800c04 	movi	r2,48
  203834:	dc001dc4 	addi	r16,sp,119
  203838:	d8801dc5 	stb	r2,119(sp)
  20383c:	003b6406 	br	2025d0 <_gp+0xffdf09ec>
  203840:	d8002b15 	stw	zero,172(sp)
  203844:	dc001e04 	addi	r16,sp,120
  203848:	003a2b06 	br	2020f8 <_gp+0xffdf0514>
  20384c:	8c7fff84 	addi	r17,r17,-2
  203850:	b5bfffc4 	addi	r22,r22,-1
  203854:	dd802615 	stw	r22,152(sp)
  203858:	dc4022c5 	stb	r17,139(sp)
  20385c:	b000bf16 	blt	r22,zero,203b5c <___vfprintf_internal_r+0x21c0>
  203860:	00800ac4 	movi	r2,43
  203864:	d8802305 	stb	r2,140(sp)
  203868:	00800244 	movi	r2,9
  20386c:	15807016 	blt	r2,r22,203a30 <___vfprintf_internal_r+0x2094>
  203870:	00800c04 	movi	r2,48
  203874:	b5800c04 	addi	r22,r22,48
  203878:	d8802345 	stb	r2,141(sp)
  20387c:	dd802385 	stb	r22,142(sp)
  203880:	d88023c4 	addi	r2,sp,143
  203884:	df0022c4 	addi	fp,sp,139
  203888:	d8c03317 	ldw	r3,204(sp)
  20388c:	1739c83a 	sub	fp,r2,fp
  203890:	d9003317 	ldw	r4,204(sp)
  203894:	e0c7883a 	add	r3,fp,r3
  203898:	df003a15 	stw	fp,232(sp)
  20389c:	d8c02b15 	stw	r3,172(sp)
  2038a0:	00800044 	movi	r2,1
  2038a4:	1100b30e 	bge	r2,r4,203b74 <___vfprintf_internal_r+0x21d8>
  2038a8:	d8c02b17 	ldw	r3,172(sp)
  2038ac:	18c00044 	addi	r3,r3,1
  2038b0:	d8c02b15 	stw	r3,172(sp)
  2038b4:	1805883a 	mov	r2,r3
  2038b8:	1800ac16 	blt	r3,zero,203b6c <___vfprintf_internal_r+0x21d0>
  2038bc:	d8003215 	stw	zero,200(sp)
  2038c0:	003e5d06 	br	203238 <_gp+0xffdf1654>
  2038c4:	d9002d17 	ldw	r4,180(sp)
  2038c8:	d9801e04 	addi	r6,sp,120
  2038cc:	b80b883a 	mov	r5,r23
  2038d0:	020917c0 	call	20917c <__sprint_r>
  2038d4:	1039351e 	bne	r2,zero,201dac <_gp+0xffdf01c8>
  2038d8:	dc402617 	ldw	r17,152(sp)
  2038dc:	d8c02017 	ldw	r3,128(sp)
  2038e0:	d8801f17 	ldw	r2,124(sp)
  2038e4:	da000404 	addi	r8,sp,16
  2038e8:	003ed606 	br	203444 <_gp+0xffdf1860>
  2038ec:	182b883a 	mov	r21,r3
  2038f0:	d8002a15 	stw	zero,168(sp)
  2038f4:	00388c06 	br	201b28 <_gp+0xffdeff44>
  2038f8:	d8802a17 	ldw	r2,168(sp)
  2038fc:	103e071e 	bne	r2,zero,20311c <_gp+0xffdf1538>
  203900:	dc002a15 	stw	r16,168(sp)
  203904:	003e0506 	br	20311c <_gp+0xffdf1538>
  203908:	d9002a17 	ldw	r4,168(sp)
  20390c:	20c00044 	addi	r3,r4,1
  203910:	003e0f06 	br	203150 <_gp+0xffdf156c>
  203914:	01400184 	movi	r5,6
  203918:	d9402a15 	stw	r5,168(sp)
  20391c:	003dff06 	br	20311c <_gp+0xffdf1538>
  203920:	d8802104 	addi	r2,sp,132
  203924:	d8800315 	stw	r2,12(sp)
  203928:	d8802504 	addi	r2,sp,148
  20392c:	d8800215 	stw	r2,8(sp)
  203930:	d8802604 	addi	r2,sp,152
  203934:	d8800115 	stw	r2,4(sp)
  203938:	d8802a17 	ldw	r2,168(sp)
  20393c:	d9403617 	ldw	r5,216(sp)
  203940:	d9002d17 	ldw	r4,180(sp)
  203944:	d8800015 	stw	r2,0(sp)
  203948:	01c000c4 	movi	r7,3
  20394c:	980d883a 	mov	r6,r19
  203950:	da003d15 	stw	r8,244(sp)
  203954:	02040cc0 	call	2040cc <_dtoa_r>
  203958:	d8c02a17 	ldw	r3,168(sp)
  20395c:	da003d17 	ldw	r8,244(sp)
  203960:	1021883a 	mov	r16,r2
  203964:	10f9883a 	add	fp,r2,r3
  203968:	81000007 	ldb	r4,0(r16)
  20396c:	00800c04 	movi	r2,48
  203970:	20805e26 	beq	r4,r2,203aec <___vfprintf_internal_r+0x2150>
  203974:	d8c02617 	ldw	r3,152(sp)
  203978:	e0f9883a 	add	fp,fp,r3
  20397c:	003e0a06 	br	2031a8 <_gp+0xffdf15c4>
  203980:	00c00b44 	movi	r3,45
  203984:	24e0003c 	xorhi	r19,r4,32768
  203988:	d8c02905 	stb	r3,164(sp)
  20398c:	003de906 	br	203134 <_gp+0xffdf1550>
  203990:	d8c03217 	ldw	r3,200(sp)
  203994:	00c07a0e 	bge	zero,r3,203b80 <___vfprintf_internal_r+0x21e4>
  203998:	00800044 	movi	r2,1
  20399c:	d9003317 	ldw	r4,204(sp)
  2039a0:	1105883a 	add	r2,r2,r4
  2039a4:	d8802b15 	stw	r2,172(sp)
  2039a8:	10004e16 	blt	r2,zero,203ae4 <___vfprintf_internal_r+0x2148>
  2039ac:	044019c4 	movi	r17,103
  2039b0:	003e2106 	br	203238 <_gp+0xffdf1654>
  2039b4:	d9002a17 	ldw	r4,168(sp)
  2039b8:	d8802104 	addi	r2,sp,132
  2039bc:	d8800315 	stw	r2,12(sp)
  2039c0:	d9000015 	stw	r4,0(sp)
  2039c4:	d8802504 	addi	r2,sp,148
  2039c8:	d9403617 	ldw	r5,216(sp)
  2039cc:	d9002d17 	ldw	r4,180(sp)
  2039d0:	d8800215 	stw	r2,8(sp)
  2039d4:	d8802604 	addi	r2,sp,152
  2039d8:	d8800115 	stw	r2,4(sp)
  2039dc:	01c000c4 	movi	r7,3
  2039e0:	980d883a 	mov	r6,r19
  2039e4:	da003d15 	stw	r8,244(sp)
  2039e8:	02040cc0 	call	2040cc <_dtoa_r>
  2039ec:	d8c02a17 	ldw	r3,168(sp)
  2039f0:	da003d17 	ldw	r8,244(sp)
  2039f4:	1021883a 	mov	r16,r2
  2039f8:	00801184 	movi	r2,70
  2039fc:	80f9883a 	add	fp,r16,r3
  203a00:	88bfd926 	beq	r17,r2,203968 <_gp+0xffdf1d84>
  203a04:	003de806 	br	2031a8 <_gp+0xffdf15c4>
  203a08:	d9002a17 	ldw	r4,168(sp)
  203a0c:	00c04d0e 	bge	zero,r3,203b44 <___vfprintf_internal_r+0x21a8>
  203a10:	2000441e 	bne	r4,zero,203b24 <___vfprintf_internal_r+0x2188>
  203a14:	9480004c 	andi	r18,r18,1
  203a18:	9000421e 	bne	r18,zero,203b24 <___vfprintf_internal_r+0x2188>
  203a1c:	1805883a 	mov	r2,r3
  203a20:	18006f16 	blt	r3,zero,203be0 <___vfprintf_internal_r+0x2244>
  203a24:	d8c03217 	ldw	r3,200(sp)
  203a28:	d8c02b15 	stw	r3,172(sp)
  203a2c:	003e0206 	br	203238 <_gp+0xffdf1654>
  203a30:	df0022c4 	addi	fp,sp,139
  203a34:	dc002a15 	stw	r16,168(sp)
  203a38:	4027883a 	mov	r19,r8
  203a3c:	e021883a 	mov	r16,fp
  203a40:	b009883a 	mov	r4,r22
  203a44:	01400284 	movi	r5,10
  203a48:	0200ad80 	call	200ad8 <__modsi3>
  203a4c:	10800c04 	addi	r2,r2,48
  203a50:	843fffc4 	addi	r16,r16,-1
  203a54:	b009883a 	mov	r4,r22
  203a58:	01400284 	movi	r5,10
  203a5c:	80800005 	stb	r2,0(r16)
  203a60:	0200a540 	call	200a54 <__divsi3>
  203a64:	102d883a 	mov	r22,r2
  203a68:	00800244 	movi	r2,9
  203a6c:	15bff416 	blt	r2,r22,203a40 <_gp+0xffdf1e5c>
  203a70:	9811883a 	mov	r8,r19
  203a74:	b0800c04 	addi	r2,r22,48
  203a78:	8027883a 	mov	r19,r16
  203a7c:	997fffc4 	addi	r5,r19,-1
  203a80:	98bfffc5 	stb	r2,-1(r19)
  203a84:	dc002a17 	ldw	r16,168(sp)
  203a88:	2f006d2e 	bgeu	r5,fp,203c40 <___vfprintf_internal_r+0x22a4>
  203a8c:	d9c02384 	addi	r7,sp,142
  203a90:	3ccfc83a 	sub	r7,r7,r19
  203a94:	d9002344 	addi	r4,sp,141
  203a98:	e1cf883a 	add	r7,fp,r7
  203a9c:	00000106 	br	203aa4 <___vfprintf_internal_r+0x2108>
  203aa0:	28800003 	ldbu	r2,0(r5)
  203aa4:	20800005 	stb	r2,0(r4)
  203aa8:	21000044 	addi	r4,r4,1
  203aac:	29400044 	addi	r5,r5,1
  203ab0:	393ffb1e 	bne	r7,r4,203aa0 <_gp+0xffdf1ebc>
  203ab4:	d8802304 	addi	r2,sp,140
  203ab8:	14c5c83a 	sub	r2,r2,r19
  203abc:	d8c02344 	addi	r3,sp,141
  203ac0:	1885883a 	add	r2,r3,r2
  203ac4:	003f7006 	br	203888 <_gp+0xffdf1ca4>
  203ac8:	0005883a 	mov	r2,zero
  203acc:	003f0f06 	br	20370c <_gp+0xffdf1b28>
  203ad0:	d8c03217 	ldw	r3,200(sp)
  203ad4:	18c00044 	addi	r3,r3,1
  203ad8:	d8c02b15 	stw	r3,172(sp)
  203adc:	1805883a 	mov	r2,r3
  203ae0:	183fb20e 	bge	r3,zero,2039ac <_gp+0xffdf1dc8>
  203ae4:	0005883a 	mov	r2,zero
  203ae8:	003fb006 	br	2039ac <_gp+0xffdf1dc8>
  203aec:	d9003617 	ldw	r4,216(sp)
  203af0:	000d883a 	mov	r6,zero
  203af4:	000f883a 	mov	r7,zero
  203af8:	980b883a 	mov	r5,r19
  203afc:	d8c03c15 	stw	r3,240(sp)
  203b00:	da003d15 	stw	r8,244(sp)
  203b04:	020cf000 	call	20cf00 <__eqdf2>
  203b08:	d8c03c17 	ldw	r3,240(sp)
  203b0c:	da003d17 	ldw	r8,244(sp)
  203b10:	103f9826 	beq	r2,zero,203974 <_gp+0xffdf1d90>
  203b14:	00800044 	movi	r2,1
  203b18:	10c7c83a 	sub	r3,r2,r3
  203b1c:	d8c02615 	stw	r3,152(sp)
  203b20:	003f9506 	br	203978 <_gp+0xffdf1d94>
  203b24:	d9002a17 	ldw	r4,168(sp)
  203b28:	d8c03217 	ldw	r3,200(sp)
  203b2c:	20800044 	addi	r2,r4,1
  203b30:	1885883a 	add	r2,r3,r2
  203b34:	d8802b15 	stw	r2,172(sp)
  203b38:	103dbf0e 	bge	r2,zero,203238 <_gp+0xffdf1654>
  203b3c:	0005883a 	mov	r2,zero
  203b40:	003dbd06 	br	203238 <_gp+0xffdf1654>
  203b44:	2000201e 	bne	r4,zero,203bc8 <___vfprintf_internal_r+0x222c>
  203b48:	9480004c 	andi	r18,r18,1
  203b4c:	90001e1e 	bne	r18,zero,203bc8 <___vfprintf_internal_r+0x222c>
  203b50:	00800044 	movi	r2,1
  203b54:	d8802b15 	stw	r2,172(sp)
  203b58:	003db706 	br	203238 <_gp+0xffdf1654>
  203b5c:	00800b44 	movi	r2,45
  203b60:	05adc83a 	sub	r22,zero,r22
  203b64:	d8802305 	stb	r2,140(sp)
  203b68:	003f3f06 	br	203868 <_gp+0xffdf1c84>
  203b6c:	0005883a 	mov	r2,zero
  203b70:	003f5206 	br	2038bc <_gp+0xffdf1cd8>
  203b74:	90a4703a 	and	r18,r18,r2
  203b78:	903f4e26 	beq	r18,zero,2038b4 <_gp+0xffdf1cd0>
  203b7c:	003f4a06 	br	2038a8 <_gp+0xffdf1cc4>
  203b80:	00800084 	movi	r2,2
  203b84:	10c5c83a 	sub	r2,r2,r3
  203b88:	003f8406 	br	20399c <_gp+0xffdf1db8>
  203b8c:	d9402e17 	ldw	r5,184(sp)
  203b90:	d9002e17 	ldw	r4,184(sp)
  203b94:	ac400043 	ldbu	r17,1(r21)
  203b98:	29400017 	ldw	r5,0(r5)
  203b9c:	20800104 	addi	r2,r4,4
  203ba0:	d8802e15 	stw	r2,184(sp)
  203ba4:	d9402a15 	stw	r5,168(sp)
  203ba8:	182b883a 	mov	r21,r3
  203bac:	283e7b0e 	bge	r5,zero,20359c <_gp+0xffdf19b8>
  203bb0:	8c403fcc 	andi	r17,r17,255
  203bb4:	017fffc4 	movi	r5,-1
  203bb8:	8c40201c 	xori	r17,r17,128
  203bbc:	d9402a15 	stw	r5,168(sp)
  203bc0:	8c7fe004 	addi	r17,r17,-128
  203bc4:	0037d706 	br	201b24 <_gp+0xffdeff40>
  203bc8:	d8c02a17 	ldw	r3,168(sp)
  203bcc:	18c00084 	addi	r3,r3,2
  203bd0:	d8c02b15 	stw	r3,172(sp)
  203bd4:	1805883a 	mov	r2,r3
  203bd8:	183d970e 	bge	r3,zero,203238 <_gp+0xffdf1654>
  203bdc:	003fd706 	br	203b3c <_gp+0xffdf1f58>
  203be0:	0005883a 	mov	r2,zero
  203be4:	003f8f06 	br	203a24 <_gp+0xffdf1e40>
  203be8:	9080004c 	andi	r2,r18,1
  203bec:	103f821e 	bne	r2,zero,2039f8 <_gp+0xffdf1e14>
  203bf0:	d8802117 	ldw	r2,132(sp)
  203bf4:	1405c83a 	sub	r2,r2,r16
  203bf8:	d8803315 	stw	r2,204(sp)
  203bfc:	b47ef426 	beq	r22,r17,2037d0 <_gp+0xffdf1bec>
  203c00:	dd802617 	ldw	r22,152(sp)
  203c04:	003f1206 	br	203850 <_gp+0xffdf1c6c>
  203c08:	d8c02b03 	ldbu	r3,172(sp)
  203c0c:	d8c02785 	stb	r3,158(sp)
  203c10:	0038df06 	br	201f90 <_gp+0xffdf03ac>
  203c14:	d8c02b03 	ldbu	r3,172(sp)
  203c18:	d8c02785 	stb	r3,158(sp)
  203c1c:	0038aa06 	br	201ec8 <_gp+0xffdf02e4>
  203c20:	d8c02b03 	ldbu	r3,172(sp)
  203c24:	d8c02785 	stb	r3,158(sp)
  203c28:	003a4306 	br	202538 <_gp+0xffdf0954>
  203c2c:	d8c02b03 	ldbu	r3,172(sp)
  203c30:	d8c02785 	stb	r3,158(sp)
  203c34:	003af506 	br	20280c <_gp+0xffdf0c28>
  203c38:	0005883a 	mov	r2,zero
  203c3c:	003d7b06 	br	20322c <_gp+0xffdf1648>
  203c40:	d8802344 	addi	r2,sp,141
  203c44:	003f1006 	br	203888 <_gp+0xffdf1ca4>
  203c48:	d8c02b03 	ldbu	r3,172(sp)
  203c4c:	d8c02785 	stb	r3,158(sp)
  203c50:	0038fd06 	br	202048 <_gp+0xffdf0464>
  203c54:	d8c02b03 	ldbu	r3,172(sp)
  203c58:	d8c02785 	stb	r3,158(sp)
  203c5c:	003a9706 	br	2026bc <_gp+0xffdf0ad8>
  203c60:	d8c02b03 	ldbu	r3,172(sp)
  203c64:	d8c02785 	stb	r3,158(sp)
  203c68:	003a1806 	br	2024cc <_gp+0xffdf08e8>
  203c6c:	d8c02b03 	ldbu	r3,172(sp)
  203c70:	d8c02785 	stb	r3,158(sp)
  203c74:	003abe06 	br	202770 <_gp+0xffdf0b8c>

00203c78 <__vfprintf_internal>:
  203c78:	00801074 	movhi	r2,65
  203c7c:	10a6fa04 	addi	r2,r2,-25624
  203c80:	300f883a 	mov	r7,r6
  203c84:	280d883a 	mov	r6,r5
  203c88:	200b883a 	mov	r5,r4
  203c8c:	11000017 	ldw	r4,0(r2)
  203c90:	020199c1 	jmpi	20199c <___vfprintf_internal_r>

00203c94 <__sbprintf>:
  203c94:	2880030b 	ldhu	r2,12(r5)
  203c98:	2ac01917 	ldw	r11,100(r5)
  203c9c:	2a80038b 	ldhu	r10,14(r5)
  203ca0:	2a400717 	ldw	r9,28(r5)
  203ca4:	2a000917 	ldw	r8,36(r5)
  203ca8:	defee204 	addi	sp,sp,-1144
  203cac:	00c10004 	movi	r3,1024
  203cb0:	dc011a15 	stw	r16,1128(sp)
  203cb4:	10bfff4c 	andi	r2,r2,65533
  203cb8:	2821883a 	mov	r16,r5
  203cbc:	d8cb883a 	add	r5,sp,r3
  203cc0:	dc811c15 	stw	r18,1136(sp)
  203cc4:	dc411b15 	stw	r17,1132(sp)
  203cc8:	dfc11d15 	stw	ra,1140(sp)
  203ccc:	2025883a 	mov	r18,r4
  203cd0:	d881030d 	sth	r2,1036(sp)
  203cd4:	dac11915 	stw	r11,1124(sp)
  203cd8:	da81038d 	sth	r10,1038(sp)
  203cdc:	da410715 	stw	r9,1052(sp)
  203ce0:	da010915 	stw	r8,1060(sp)
  203ce4:	dec10015 	stw	sp,1024(sp)
  203ce8:	dec10415 	stw	sp,1040(sp)
  203cec:	d8c10215 	stw	r3,1032(sp)
  203cf0:	d8c10515 	stw	r3,1044(sp)
  203cf4:	d8010615 	stw	zero,1048(sp)
  203cf8:	020199c0 	call	20199c <___vfprintf_internal_r>
  203cfc:	1023883a 	mov	r17,r2
  203d00:	10000416 	blt	r2,zero,203d14 <__sbprintf+0x80>
  203d04:	d9410004 	addi	r5,sp,1024
  203d08:	9009883a 	mov	r4,r18
  203d0c:	02059700 	call	205970 <_fflush_r>
  203d10:	10000d1e 	bne	r2,zero,203d48 <__sbprintf+0xb4>
  203d14:	d881030b 	ldhu	r2,1036(sp)
  203d18:	1080100c 	andi	r2,r2,64
  203d1c:	10000326 	beq	r2,zero,203d2c <__sbprintf+0x98>
  203d20:	8080030b 	ldhu	r2,12(r16)
  203d24:	10801014 	ori	r2,r2,64
  203d28:	8080030d 	sth	r2,12(r16)
  203d2c:	8805883a 	mov	r2,r17
  203d30:	dfc11d17 	ldw	ra,1140(sp)
  203d34:	dc811c17 	ldw	r18,1136(sp)
  203d38:	dc411b17 	ldw	r17,1132(sp)
  203d3c:	dc011a17 	ldw	r16,1128(sp)
  203d40:	dec11e04 	addi	sp,sp,1144
  203d44:	f800283a 	ret
  203d48:	047fffc4 	movi	r17,-1
  203d4c:	003ff106 	br	203d14 <_gp+0xffdf2130>

00203d50 <__swsetup_r>:
  203d50:	00801074 	movhi	r2,65
  203d54:	defffd04 	addi	sp,sp,-12
  203d58:	10a6fa04 	addi	r2,r2,-25624
  203d5c:	dc400115 	stw	r17,4(sp)
  203d60:	2023883a 	mov	r17,r4
  203d64:	11000017 	ldw	r4,0(r2)
  203d68:	dc000015 	stw	r16,0(sp)
  203d6c:	dfc00215 	stw	ra,8(sp)
  203d70:	2821883a 	mov	r16,r5
  203d74:	20000226 	beq	r4,zero,203d80 <__swsetup_r+0x30>
  203d78:	20800e17 	ldw	r2,56(r4)
  203d7c:	10003126 	beq	r2,zero,203e44 <__swsetup_r+0xf4>
  203d80:	8080030b 	ldhu	r2,12(r16)
  203d84:	10c0020c 	andi	r3,r2,8
  203d88:	1009883a 	mov	r4,r2
  203d8c:	18000f26 	beq	r3,zero,203dcc <__swsetup_r+0x7c>
  203d90:	80c00417 	ldw	r3,16(r16)
  203d94:	18001526 	beq	r3,zero,203dec <__swsetup_r+0x9c>
  203d98:	1100004c 	andi	r4,r2,1
  203d9c:	20001c1e 	bne	r4,zero,203e10 <__swsetup_r+0xc0>
  203da0:	1080008c 	andi	r2,r2,2
  203da4:	1000291e 	bne	r2,zero,203e4c <__swsetup_r+0xfc>
  203da8:	80800517 	ldw	r2,20(r16)
  203dac:	80800215 	stw	r2,8(r16)
  203db0:	18001c26 	beq	r3,zero,203e24 <__swsetup_r+0xd4>
  203db4:	0005883a 	mov	r2,zero
  203db8:	dfc00217 	ldw	ra,8(sp)
  203dbc:	dc400117 	ldw	r17,4(sp)
  203dc0:	dc000017 	ldw	r16,0(sp)
  203dc4:	dec00304 	addi	sp,sp,12
  203dc8:	f800283a 	ret
  203dcc:	2080040c 	andi	r2,r4,16
  203dd0:	10002e26 	beq	r2,zero,203e8c <__swsetup_r+0x13c>
  203dd4:	2080010c 	andi	r2,r4,4
  203dd8:	10001e1e 	bne	r2,zero,203e54 <__swsetup_r+0x104>
  203ddc:	80c00417 	ldw	r3,16(r16)
  203de0:	20800214 	ori	r2,r4,8
  203de4:	8080030d 	sth	r2,12(r16)
  203de8:	183feb1e 	bne	r3,zero,203d98 <_gp+0xffdf21b4>
  203dec:	1100a00c 	andi	r4,r2,640
  203df0:	01408004 	movi	r5,512
  203df4:	217fe826 	beq	r4,r5,203d98 <_gp+0xffdf21b4>
  203df8:	800b883a 	mov	r5,r16
  203dfc:	8809883a 	mov	r4,r17
  203e00:	020690c0 	call	20690c <__smakebuf_r>
  203e04:	8080030b 	ldhu	r2,12(r16)
  203e08:	80c00417 	ldw	r3,16(r16)
  203e0c:	003fe206 	br	203d98 <_gp+0xffdf21b4>
  203e10:	80800517 	ldw	r2,20(r16)
  203e14:	80000215 	stw	zero,8(r16)
  203e18:	0085c83a 	sub	r2,zero,r2
  203e1c:	80800615 	stw	r2,24(r16)
  203e20:	183fe41e 	bne	r3,zero,203db4 <_gp+0xffdf21d0>
  203e24:	80c0030b 	ldhu	r3,12(r16)
  203e28:	0005883a 	mov	r2,zero
  203e2c:	1900200c 	andi	r4,r3,128
  203e30:	203fe126 	beq	r4,zero,203db8 <_gp+0xffdf21d4>
  203e34:	18c01014 	ori	r3,r3,64
  203e38:	80c0030d 	sth	r3,12(r16)
  203e3c:	00bfffc4 	movi	r2,-1
  203e40:	003fdd06 	br	203db8 <_gp+0xffdf21d4>
  203e44:	0205d5c0 	call	205d5c <__sinit>
  203e48:	003fcd06 	br	203d80 <_gp+0xffdf219c>
  203e4c:	0005883a 	mov	r2,zero
  203e50:	003fd606 	br	203dac <_gp+0xffdf21c8>
  203e54:	81400c17 	ldw	r5,48(r16)
  203e58:	28000626 	beq	r5,zero,203e74 <__swsetup_r+0x124>
  203e5c:	80801004 	addi	r2,r16,64
  203e60:	28800326 	beq	r5,r2,203e70 <__swsetup_r+0x120>
  203e64:	8809883a 	mov	r4,r17
  203e68:	0205ed00 	call	205ed0 <_free_r>
  203e6c:	8100030b 	ldhu	r4,12(r16)
  203e70:	80000c15 	stw	zero,48(r16)
  203e74:	80c00417 	ldw	r3,16(r16)
  203e78:	00bff6c4 	movi	r2,-37
  203e7c:	1108703a 	and	r4,r2,r4
  203e80:	80000115 	stw	zero,4(r16)
  203e84:	80c00015 	stw	r3,0(r16)
  203e88:	003fd506 	br	203de0 <_gp+0xffdf21fc>
  203e8c:	00800244 	movi	r2,9
  203e90:	88800015 	stw	r2,0(r17)
  203e94:	20801014 	ori	r2,r4,64
  203e98:	8080030d 	sth	r2,12(r16)
  203e9c:	00bfffc4 	movi	r2,-1
  203ea0:	003fc506 	br	203db8 <_gp+0xffdf21d4>

00203ea4 <quorem>:
  203ea4:	defff204 	addi	sp,sp,-56
  203ea8:	ddc00b15 	stw	r23,44(sp)
  203eac:	20800417 	ldw	r2,16(r4)
  203eb0:	2dc00417 	ldw	r23,16(r5)
  203eb4:	dfc00d15 	stw	ra,52(sp)
  203eb8:	df000c15 	stw	fp,48(sp)
  203ebc:	dd800a15 	stw	r22,40(sp)
  203ec0:	dd400915 	stw	r21,36(sp)
  203ec4:	dd000815 	stw	r20,32(sp)
  203ec8:	dcc00715 	stw	r19,28(sp)
  203ecc:	dc800615 	stw	r18,24(sp)
  203ed0:	dc400515 	stw	r17,20(sp)
  203ed4:	dc000415 	stw	r16,16(sp)
  203ed8:	15c07a16 	blt	r2,r23,2040c4 <quorem+0x220>
  203edc:	bdffffc4 	addi	r23,r23,-1
  203ee0:	bde9883a 	add	r20,r23,r23
  203ee4:	28c00504 	addi	r3,r5,20
  203ee8:	a529883a 	add	r20,r20,r20
  203eec:	1d39883a 	add	fp,r3,r20
  203ef0:	24c00504 	addi	r19,r4,20
  203ef4:	d9400215 	stw	r5,8(sp)
  203ef8:	9d29883a 	add	r20,r19,r20
  203efc:	e1400017 	ldw	r5,0(fp)
  203f00:	d9000015 	stw	r4,0(sp)
  203f04:	a1000017 	ldw	r4,0(r20)
  203f08:	29400044 	addi	r5,r5,1
  203f0c:	d8c00115 	stw	r3,4(sp)
  203f10:	dd000315 	stw	r20,12(sp)
  203f14:	0200b4c0 	call	200b4c <__udivsi3>
  203f18:	1025883a 	mov	r18,r2
  203f1c:	10003026 	beq	r2,zero,203fe0 <quorem+0x13c>
  203f20:	dc400117 	ldw	r17,4(sp)
  203f24:	9829883a 	mov	r20,r19
  203f28:	002d883a 	mov	r22,zero
  203f2c:	0021883a 	mov	r16,zero
  203f30:	8d400017 	ldw	r21,0(r17)
  203f34:	900b883a 	mov	r5,r18
  203f38:	8c400104 	addi	r17,r17,4
  203f3c:	a93fffcc 	andi	r4,r21,65535
  203f40:	020179c0 	call	20179c <__mulsi3>
  203f44:	a808d43a 	srli	r4,r21,16
  203f48:	900b883a 	mov	r5,r18
  203f4c:	15ad883a 	add	r22,r2,r22
  203f50:	020179c0 	call	20179c <__mulsi3>
  203f54:	a1000017 	ldw	r4,0(r20)
  203f58:	b00cd43a 	srli	r6,r22,16
  203f5c:	b0ffffcc 	andi	r3,r22,65535
  203f60:	217fffcc 	andi	r5,r4,65535
  203f64:	2c21883a 	add	r16,r5,r16
  203f68:	80c7c83a 	sub	r3,r16,r3
  203f6c:	2008d43a 	srli	r4,r4,16
  203f70:	1185883a 	add	r2,r2,r6
  203f74:	1821d43a 	srai	r16,r3,16
  203f78:	117fffcc 	andi	r5,r2,65535
  203f7c:	2149c83a 	sub	r4,r4,r5
  203f80:	2421883a 	add	r16,r4,r16
  203f84:	8008943a 	slli	r4,r16,16
  203f88:	18ffffcc 	andi	r3,r3,65535
  203f8c:	102cd43a 	srli	r22,r2,16
  203f90:	20c8b03a 	or	r4,r4,r3
  203f94:	a1000015 	stw	r4,0(r20)
  203f98:	8021d43a 	srai	r16,r16,16
  203f9c:	a5000104 	addi	r20,r20,4
  203fa0:	e47fe32e 	bgeu	fp,r17,203f30 <_gp+0xffdf234c>
  203fa4:	d8c00317 	ldw	r3,12(sp)
  203fa8:	18800017 	ldw	r2,0(r3)
  203fac:	10000c1e 	bne	r2,zero,203fe0 <quorem+0x13c>
  203fb0:	18bfff04 	addi	r2,r3,-4
  203fb4:	9880082e 	bgeu	r19,r2,203fd8 <quorem+0x134>
  203fb8:	18ffff17 	ldw	r3,-4(r3)
  203fbc:	18000326 	beq	r3,zero,203fcc <quorem+0x128>
  203fc0:	00000506 	br	203fd8 <quorem+0x134>
  203fc4:	10c00017 	ldw	r3,0(r2)
  203fc8:	1800031e 	bne	r3,zero,203fd8 <quorem+0x134>
  203fcc:	10bfff04 	addi	r2,r2,-4
  203fd0:	bdffffc4 	addi	r23,r23,-1
  203fd4:	98bffb36 	bltu	r19,r2,203fc4 <_gp+0xffdf23e0>
  203fd8:	d8c00017 	ldw	r3,0(sp)
  203fdc:	1dc00415 	stw	r23,16(r3)
  203fe0:	d9400217 	ldw	r5,8(sp)
  203fe4:	d9000017 	ldw	r4,0(sp)
  203fe8:	02081080 	call	208108 <__mcmp>
  203fec:	10002816 	blt	r2,zero,204090 <quorem+0x1ec>
  203ff0:	dc400117 	ldw	r17,4(sp)
  203ff4:	94800044 	addi	r18,r18,1
  203ff8:	980d883a 	mov	r6,r19
  203ffc:	0007883a 	mov	r3,zero
  204000:	31000017 	ldw	r4,0(r6)
  204004:	89400017 	ldw	r5,0(r17)
  204008:	31800104 	addi	r6,r6,4
  20400c:	20bfffcc 	andi	r2,r4,65535
  204010:	10c7883a 	add	r3,r2,r3
  204014:	28bfffcc 	andi	r2,r5,65535
  204018:	1885c83a 	sub	r2,r3,r2
  20401c:	280ad43a 	srli	r5,r5,16
  204020:	2008d43a 	srli	r4,r4,16
  204024:	1007d43a 	srai	r3,r2,16
  204028:	10bfffcc 	andi	r2,r2,65535
  20402c:	2149c83a 	sub	r4,r4,r5
  204030:	20c9883a 	add	r4,r4,r3
  204034:	200a943a 	slli	r5,r4,16
  204038:	8c400104 	addi	r17,r17,4
  20403c:	2007d43a 	srai	r3,r4,16
  204040:	2884b03a 	or	r2,r5,r2
  204044:	30bfff15 	stw	r2,-4(r6)
  204048:	e47fed2e 	bgeu	fp,r17,204000 <_gp+0xffdf241c>
  20404c:	bdc5883a 	add	r2,r23,r23
  204050:	1085883a 	add	r2,r2,r2
  204054:	9887883a 	add	r3,r19,r2
  204058:	18800017 	ldw	r2,0(r3)
  20405c:	10000c1e 	bne	r2,zero,204090 <quorem+0x1ec>
  204060:	18bfff04 	addi	r2,r3,-4
  204064:	9880082e 	bgeu	r19,r2,204088 <quorem+0x1e4>
  204068:	18ffff17 	ldw	r3,-4(r3)
  20406c:	18000326 	beq	r3,zero,20407c <quorem+0x1d8>
  204070:	00000506 	br	204088 <quorem+0x1e4>
  204074:	10c00017 	ldw	r3,0(r2)
  204078:	1800031e 	bne	r3,zero,204088 <quorem+0x1e4>
  20407c:	10bfff04 	addi	r2,r2,-4
  204080:	bdffffc4 	addi	r23,r23,-1
  204084:	98bffb36 	bltu	r19,r2,204074 <_gp+0xffdf2490>
  204088:	d8c00017 	ldw	r3,0(sp)
  20408c:	1dc00415 	stw	r23,16(r3)
  204090:	9005883a 	mov	r2,r18
  204094:	dfc00d17 	ldw	ra,52(sp)
  204098:	df000c17 	ldw	fp,48(sp)
  20409c:	ddc00b17 	ldw	r23,44(sp)
  2040a0:	dd800a17 	ldw	r22,40(sp)
  2040a4:	dd400917 	ldw	r21,36(sp)
  2040a8:	dd000817 	ldw	r20,32(sp)
  2040ac:	dcc00717 	ldw	r19,28(sp)
  2040b0:	dc800617 	ldw	r18,24(sp)
  2040b4:	dc400517 	ldw	r17,20(sp)
  2040b8:	dc000417 	ldw	r16,16(sp)
  2040bc:	dec00e04 	addi	sp,sp,56
  2040c0:	f800283a 	ret
  2040c4:	0005883a 	mov	r2,zero
  2040c8:	003ff206 	br	204094 <_gp+0xffdf24b0>

002040cc <_dtoa_r>:
  2040cc:	20801017 	ldw	r2,64(r4)
  2040d0:	deffde04 	addi	sp,sp,-136
  2040d4:	df002015 	stw	fp,128(sp)
  2040d8:	dcc01b15 	stw	r19,108(sp)
  2040dc:	dc801a15 	stw	r18,104(sp)
  2040e0:	dc401915 	stw	r17,100(sp)
  2040e4:	dc001815 	stw	r16,96(sp)
  2040e8:	dfc02115 	stw	ra,132(sp)
  2040ec:	ddc01f15 	stw	r23,124(sp)
  2040f0:	dd801e15 	stw	r22,120(sp)
  2040f4:	dd401d15 	stw	r21,116(sp)
  2040f8:	dd001c15 	stw	r20,112(sp)
  2040fc:	d9c00315 	stw	r7,12(sp)
  204100:	2039883a 	mov	fp,r4
  204104:	3023883a 	mov	r17,r6
  204108:	2825883a 	mov	r18,r5
  20410c:	dc002417 	ldw	r16,144(sp)
  204110:	3027883a 	mov	r19,r6
  204114:	10000826 	beq	r2,zero,204138 <_dtoa_r+0x6c>
  204118:	21801117 	ldw	r6,68(r4)
  20411c:	00c00044 	movi	r3,1
  204120:	100b883a 	mov	r5,r2
  204124:	1986983a 	sll	r3,r3,r6
  204128:	11800115 	stw	r6,4(r2)
  20412c:	10c00215 	stw	r3,8(r2)
  204130:	020782c0 	call	20782c <_Bfree>
  204134:	e0001015 	stw	zero,64(fp)
  204138:	88002e16 	blt	r17,zero,2041f4 <_dtoa_r+0x128>
  20413c:	80000015 	stw	zero,0(r16)
  204140:	889ffc2c 	andhi	r2,r17,32752
  204144:	00dffc34 	movhi	r3,32752
  204148:	10c01c26 	beq	r2,r3,2041bc <_dtoa_r+0xf0>
  20414c:	000d883a 	mov	r6,zero
  204150:	000f883a 	mov	r7,zero
  204154:	9009883a 	mov	r4,r18
  204158:	980b883a 	mov	r5,r19
  20415c:	020cf000 	call	20cf00 <__eqdf2>
  204160:	10002b1e 	bne	r2,zero,204210 <_dtoa_r+0x144>
  204164:	d9c02317 	ldw	r7,140(sp)
  204168:	00800044 	movi	r2,1
  20416c:	38800015 	stw	r2,0(r7)
  204170:	d8802517 	ldw	r2,148(sp)
  204174:	10019e26 	beq	r2,zero,2047f0 <_dtoa_r+0x724>
  204178:	d8c02517 	ldw	r3,148(sp)
  20417c:	00800874 	movhi	r2,33
  204180:	10905044 	addi	r2,r2,16705
  204184:	18800015 	stw	r2,0(r3)
  204188:	10bfffc4 	addi	r2,r2,-1
  20418c:	dfc02117 	ldw	ra,132(sp)
  204190:	df002017 	ldw	fp,128(sp)
  204194:	ddc01f17 	ldw	r23,124(sp)
  204198:	dd801e17 	ldw	r22,120(sp)
  20419c:	dd401d17 	ldw	r21,116(sp)
  2041a0:	dd001c17 	ldw	r20,112(sp)
  2041a4:	dcc01b17 	ldw	r19,108(sp)
  2041a8:	dc801a17 	ldw	r18,104(sp)
  2041ac:	dc401917 	ldw	r17,100(sp)
  2041b0:	dc001817 	ldw	r16,96(sp)
  2041b4:	dec02204 	addi	sp,sp,136
  2041b8:	f800283a 	ret
  2041bc:	d8c02317 	ldw	r3,140(sp)
  2041c0:	0089c3c4 	movi	r2,9999
  2041c4:	18800015 	stw	r2,0(r3)
  2041c8:	90017726 	beq	r18,zero,2047a8 <_dtoa_r+0x6dc>
  2041cc:	00800874 	movhi	r2,33
  2041d0:	10905c04 	addi	r2,r2,16752
  2041d4:	d9002517 	ldw	r4,148(sp)
  2041d8:	203fec26 	beq	r4,zero,20418c <_gp+0xffdf25a8>
  2041dc:	10c000c7 	ldb	r3,3(r2)
  2041e0:	1801781e 	bne	r3,zero,2047c4 <_dtoa_r+0x6f8>
  2041e4:	10c000c4 	addi	r3,r2,3
  2041e8:	d9802517 	ldw	r6,148(sp)
  2041ec:	30c00015 	stw	r3,0(r6)
  2041f0:	003fe606 	br	20418c <_gp+0xffdf25a8>
  2041f4:	04e00034 	movhi	r19,32768
  2041f8:	9cffffc4 	addi	r19,r19,-1
  2041fc:	00800044 	movi	r2,1
  204200:	8ce6703a 	and	r19,r17,r19
  204204:	80800015 	stw	r2,0(r16)
  204208:	9823883a 	mov	r17,r19
  20420c:	003fcc06 	br	204140 <_gp+0xffdf255c>
  204210:	d8800204 	addi	r2,sp,8
  204214:	d8800015 	stw	r2,0(sp)
  204218:	d9c00104 	addi	r7,sp,4
  20421c:	900b883a 	mov	r5,r18
  204220:	980d883a 	mov	r6,r19
  204224:	e009883a 	mov	r4,fp
  204228:	8820d53a 	srli	r16,r17,20
  20422c:	02084d40 	call	2084d4 <__d2b>
  204230:	d8800915 	stw	r2,36(sp)
  204234:	8001651e 	bne	r16,zero,2047cc <_dtoa_r+0x700>
  204238:	dd800217 	ldw	r22,8(sp)
  20423c:	dc000117 	ldw	r16,4(sp)
  204240:	00800804 	movi	r2,32
  204244:	b421883a 	add	r16,r22,r16
  204248:	80c10c84 	addi	r3,r16,1074
  20424c:	10c2d10e 	bge	r2,r3,204d94 <_dtoa_r+0xcc8>
  204250:	00801004 	movi	r2,64
  204254:	81010484 	addi	r4,r16,1042
  204258:	10c7c83a 	sub	r3,r2,r3
  20425c:	9108d83a 	srl	r4,r18,r4
  204260:	88e2983a 	sll	r17,r17,r3
  204264:	2448b03a 	or	r4,r4,r17
  204268:	020e41c0 	call	20e41c <__floatunsidf>
  20426c:	017f8434 	movhi	r5,65040
  204270:	01800044 	movi	r6,1
  204274:	1009883a 	mov	r4,r2
  204278:	194b883a 	add	r5,r3,r5
  20427c:	843fffc4 	addi	r16,r16,-1
  204280:	d9801115 	stw	r6,68(sp)
  204284:	000d883a 	mov	r6,zero
  204288:	01cffe34 	movhi	r7,16376
  20428c:	020d9c40 	call	20d9c4 <__subdf3>
  204290:	0198dbf4 	movhi	r6,25455
  204294:	01cff4f4 	movhi	r7,16339
  204298:	3190d844 	addi	r6,r6,17249
  20429c:	39e1e9c4 	addi	r7,r7,-30809
  2042a0:	1009883a 	mov	r4,r2
  2042a4:	180b883a 	mov	r5,r3
  2042a8:	020d1580 	call	20d158 <__muldf3>
  2042ac:	01a2d874 	movhi	r6,35681
  2042b0:	01cff1f4 	movhi	r7,16327
  2042b4:	31b22cc4 	addi	r6,r6,-14157
  2042b8:	39e28a04 	addi	r7,r7,-30168
  2042bc:	180b883a 	mov	r5,r3
  2042c0:	1009883a 	mov	r4,r2
  2042c4:	020bc840 	call	20bc84 <__adddf3>
  2042c8:	8009883a 	mov	r4,r16
  2042cc:	1029883a 	mov	r20,r2
  2042d0:	1823883a 	mov	r17,r3
  2042d4:	020e3400 	call	20e340 <__floatsidf>
  2042d8:	019427f4 	movhi	r6,20639
  2042dc:	01cff4f4 	movhi	r7,16339
  2042e0:	319e7ec4 	addi	r6,r6,31227
  2042e4:	39d104c4 	addi	r7,r7,17427
  2042e8:	1009883a 	mov	r4,r2
  2042ec:	180b883a 	mov	r5,r3
  2042f0:	020d1580 	call	20d158 <__muldf3>
  2042f4:	100d883a 	mov	r6,r2
  2042f8:	180f883a 	mov	r7,r3
  2042fc:	a009883a 	mov	r4,r20
  204300:	880b883a 	mov	r5,r17
  204304:	020bc840 	call	20bc84 <__adddf3>
  204308:	1009883a 	mov	r4,r2
  20430c:	180b883a 	mov	r5,r3
  204310:	1029883a 	mov	r20,r2
  204314:	1823883a 	mov	r17,r3
  204318:	020e2c00 	call	20e2c0 <__fixdfsi>
  20431c:	000d883a 	mov	r6,zero
  204320:	000f883a 	mov	r7,zero
  204324:	a009883a 	mov	r4,r20
  204328:	880b883a 	mov	r5,r17
  20432c:	d8800515 	stw	r2,20(sp)
  204330:	020d0640 	call	20d064 <__ledf2>
  204334:	10028716 	blt	r2,zero,204d54 <_dtoa_r+0xc88>
  204338:	d8c00517 	ldw	r3,20(sp)
  20433c:	00800584 	movi	r2,22
  204340:	10c27536 	bltu	r2,r3,204d18 <_dtoa_r+0xc4c>
  204344:	180490fa 	slli	r2,r3,3
  204348:	00c00874 	movhi	r3,33
  20434c:	18d07804 	addi	r3,r3,16864
  204350:	1885883a 	add	r2,r3,r2
  204354:	11000017 	ldw	r4,0(r2)
  204358:	11400117 	ldw	r5,4(r2)
  20435c:	900d883a 	mov	r6,r18
  204360:	980f883a 	mov	r7,r19
  204364:	020cf880 	call	20cf88 <__gedf2>
  204368:	00828d0e 	bge	zero,r2,204da0 <_dtoa_r+0xcd4>
  20436c:	d9000517 	ldw	r4,20(sp)
  204370:	d8000e15 	stw	zero,56(sp)
  204374:	213fffc4 	addi	r4,r4,-1
  204378:	d9000515 	stw	r4,20(sp)
  20437c:	b42dc83a 	sub	r22,r22,r16
  204380:	b5bfffc4 	addi	r22,r22,-1
  204384:	b0026f16 	blt	r22,zero,204d44 <_dtoa_r+0xc78>
  204388:	d8000815 	stw	zero,32(sp)
  20438c:	d9c00517 	ldw	r7,20(sp)
  204390:	38026416 	blt	r7,zero,204d24 <_dtoa_r+0xc58>
  204394:	b1ed883a 	add	r22,r22,r7
  204398:	d9c00d15 	stw	r7,52(sp)
  20439c:	d8000a15 	stw	zero,40(sp)
  2043a0:	d9800317 	ldw	r6,12(sp)
  2043a4:	00800244 	movi	r2,9
  2043a8:	11811436 	bltu	r2,r6,2047fc <_dtoa_r+0x730>
  2043ac:	00800144 	movi	r2,5
  2043b0:	1184e10e 	bge	r2,r6,205738 <_dtoa_r+0x166c>
  2043b4:	31bfff04 	addi	r6,r6,-4
  2043b8:	d9800315 	stw	r6,12(sp)
  2043bc:	0023883a 	mov	r17,zero
  2043c0:	d9800317 	ldw	r6,12(sp)
  2043c4:	008000c4 	movi	r2,3
  2043c8:	30836726 	beq	r6,r2,205168 <_dtoa_r+0x109c>
  2043cc:	1183410e 	bge	r2,r6,2050d4 <_dtoa_r+0x1008>
  2043d0:	d9c00317 	ldw	r7,12(sp)
  2043d4:	00800104 	movi	r2,4
  2043d8:	38827c26 	beq	r7,r2,204dcc <_dtoa_r+0xd00>
  2043dc:	00800144 	movi	r2,5
  2043e0:	3884c41e 	bne	r7,r2,2056f4 <_dtoa_r+0x1628>
  2043e4:	00800044 	movi	r2,1
  2043e8:	d8800b15 	stw	r2,44(sp)
  2043ec:	d8c00517 	ldw	r3,20(sp)
  2043f0:	d9002217 	ldw	r4,136(sp)
  2043f4:	1907883a 	add	r3,r3,r4
  2043f8:	19800044 	addi	r6,r3,1
  2043fc:	d8c00c15 	stw	r3,48(sp)
  204400:	d9800615 	stw	r6,24(sp)
  204404:	0183a40e 	bge	zero,r6,205298 <_dtoa_r+0x11cc>
  204408:	d9800617 	ldw	r6,24(sp)
  20440c:	3021883a 	mov	r16,r6
  204410:	e0001115 	stw	zero,68(fp)
  204414:	008005c4 	movi	r2,23
  204418:	1184c92e 	bgeu	r2,r6,205740 <_dtoa_r+0x1674>
  20441c:	00c00044 	movi	r3,1
  204420:	00800104 	movi	r2,4
  204424:	1085883a 	add	r2,r2,r2
  204428:	11000504 	addi	r4,r2,20
  20442c:	180b883a 	mov	r5,r3
  204430:	18c00044 	addi	r3,r3,1
  204434:	313ffb2e 	bgeu	r6,r4,204424 <_gp+0xffdf2840>
  204438:	e1401115 	stw	r5,68(fp)
  20443c:	e009883a 	mov	r4,fp
  204440:	02077840 	call	207784 <_Balloc>
  204444:	d8800715 	stw	r2,28(sp)
  204448:	e0801015 	stw	r2,64(fp)
  20444c:	00800384 	movi	r2,14
  204450:	1400f736 	bltu	r2,r16,204830 <_dtoa_r+0x764>
  204454:	8800f626 	beq	r17,zero,204830 <_dtoa_r+0x764>
  204458:	d9c00517 	ldw	r7,20(sp)
  20445c:	01c39a0e 	bge	zero,r7,2052c8 <_dtoa_r+0x11fc>
  204460:	388003cc 	andi	r2,r7,15
  204464:	100490fa 	slli	r2,r2,3
  204468:	382bd13a 	srai	r21,r7,4
  20446c:	00c00874 	movhi	r3,33
  204470:	18d07804 	addi	r3,r3,16864
  204474:	1885883a 	add	r2,r3,r2
  204478:	a8c0040c 	andi	r3,r21,16
  20447c:	12400017 	ldw	r9,0(r2)
  204480:	12000117 	ldw	r8,4(r2)
  204484:	18037926 	beq	r3,zero,20526c <_dtoa_r+0x11a0>
  204488:	00800874 	movhi	r2,33
  20448c:	10906e04 	addi	r2,r2,16824
  204490:	11800817 	ldw	r6,32(r2)
  204494:	11c00917 	ldw	r7,36(r2)
  204498:	9009883a 	mov	r4,r18
  20449c:	980b883a 	mov	r5,r19
  2044a0:	da001715 	stw	r8,92(sp)
  2044a4:	da401615 	stw	r9,88(sp)
  2044a8:	020c5300 	call	20c530 <__divdf3>
  2044ac:	da001717 	ldw	r8,92(sp)
  2044b0:	da401617 	ldw	r9,88(sp)
  2044b4:	ad4003cc 	andi	r21,r21,15
  2044b8:	040000c4 	movi	r16,3
  2044bc:	1023883a 	mov	r17,r2
  2044c0:	1829883a 	mov	r20,r3
  2044c4:	a8001126 	beq	r21,zero,20450c <_dtoa_r+0x440>
  2044c8:	05c00874 	movhi	r23,33
  2044cc:	bdd06e04 	addi	r23,r23,16824
  2044d0:	4805883a 	mov	r2,r9
  2044d4:	4007883a 	mov	r3,r8
  2044d8:	a980004c 	andi	r6,r21,1
  2044dc:	1009883a 	mov	r4,r2
  2044e0:	a82bd07a 	srai	r21,r21,1
  2044e4:	180b883a 	mov	r5,r3
  2044e8:	30000426 	beq	r6,zero,2044fc <_dtoa_r+0x430>
  2044ec:	b9800017 	ldw	r6,0(r23)
  2044f0:	b9c00117 	ldw	r7,4(r23)
  2044f4:	84000044 	addi	r16,r16,1
  2044f8:	020d1580 	call	20d158 <__muldf3>
  2044fc:	bdc00204 	addi	r23,r23,8
  204500:	a83ff51e 	bne	r21,zero,2044d8 <_gp+0xffdf28f4>
  204504:	1013883a 	mov	r9,r2
  204508:	1811883a 	mov	r8,r3
  20450c:	480d883a 	mov	r6,r9
  204510:	400f883a 	mov	r7,r8
  204514:	8809883a 	mov	r4,r17
  204518:	a00b883a 	mov	r5,r20
  20451c:	020c5300 	call	20c530 <__divdf3>
  204520:	d8800f15 	stw	r2,60(sp)
  204524:	d8c01015 	stw	r3,64(sp)
  204528:	d8c00e17 	ldw	r3,56(sp)
  20452c:	18000626 	beq	r3,zero,204548 <_dtoa_r+0x47c>
  204530:	d9000f17 	ldw	r4,60(sp)
  204534:	d9401017 	ldw	r5,64(sp)
  204538:	000d883a 	mov	r6,zero
  20453c:	01cffc34 	movhi	r7,16368
  204540:	020d0640 	call	20d064 <__ledf2>
  204544:	10040b16 	blt	r2,zero,205574 <_dtoa_r+0x14a8>
  204548:	8009883a 	mov	r4,r16
  20454c:	020e3400 	call	20e340 <__floatsidf>
  204550:	d9800f17 	ldw	r6,60(sp)
  204554:	d9c01017 	ldw	r7,64(sp)
  204558:	1009883a 	mov	r4,r2
  20455c:	180b883a 	mov	r5,r3
  204560:	020d1580 	call	20d158 <__muldf3>
  204564:	000d883a 	mov	r6,zero
  204568:	01d00734 	movhi	r7,16412
  20456c:	1009883a 	mov	r4,r2
  204570:	180b883a 	mov	r5,r3
  204574:	020bc840 	call	20bc84 <__adddf3>
  204578:	1021883a 	mov	r16,r2
  20457c:	d8800617 	ldw	r2,24(sp)
  204580:	047f3034 	movhi	r17,64704
  204584:	1c63883a 	add	r17,r3,r17
  204588:	10031826 	beq	r2,zero,2051ec <_dtoa_r+0x1120>
  20458c:	d8c00517 	ldw	r3,20(sp)
  204590:	db000617 	ldw	r12,24(sp)
  204594:	d8c01315 	stw	r3,76(sp)
  204598:	d9000b17 	ldw	r4,44(sp)
  20459c:	20038f26 	beq	r4,zero,2053dc <_dtoa_r+0x1310>
  2045a0:	60bfffc4 	addi	r2,r12,-1
  2045a4:	100490fa 	slli	r2,r2,3
  2045a8:	00c00874 	movhi	r3,33
  2045ac:	18d07804 	addi	r3,r3,16864
  2045b0:	1885883a 	add	r2,r3,r2
  2045b4:	11800017 	ldw	r6,0(r2)
  2045b8:	11c00117 	ldw	r7,4(r2)
  2045bc:	d8800717 	ldw	r2,28(sp)
  2045c0:	0009883a 	mov	r4,zero
  2045c4:	014ff834 	movhi	r5,16352
  2045c8:	db001615 	stw	r12,88(sp)
  2045cc:	15c00044 	addi	r23,r2,1
  2045d0:	020c5300 	call	20c530 <__divdf3>
  2045d4:	800d883a 	mov	r6,r16
  2045d8:	880f883a 	mov	r7,r17
  2045dc:	1009883a 	mov	r4,r2
  2045e0:	180b883a 	mov	r5,r3
  2045e4:	020d9c40 	call	20d9c4 <__subdf3>
  2045e8:	d9401017 	ldw	r5,64(sp)
  2045ec:	d9000f17 	ldw	r4,60(sp)
  2045f0:	102b883a 	mov	r21,r2
  2045f4:	d8c01215 	stw	r3,72(sp)
  2045f8:	020e2c00 	call	20e2c0 <__fixdfsi>
  2045fc:	1009883a 	mov	r4,r2
  204600:	1029883a 	mov	r20,r2
  204604:	020e3400 	call	20e340 <__floatsidf>
  204608:	d9000f17 	ldw	r4,60(sp)
  20460c:	d9401017 	ldw	r5,64(sp)
  204610:	100d883a 	mov	r6,r2
  204614:	180f883a 	mov	r7,r3
  204618:	020d9c40 	call	20d9c4 <__subdf3>
  20461c:	1823883a 	mov	r17,r3
  204620:	d8c00717 	ldw	r3,28(sp)
  204624:	d9401217 	ldw	r5,72(sp)
  204628:	a2000c04 	addi	r8,r20,48
  20462c:	1021883a 	mov	r16,r2
  204630:	1a000005 	stb	r8,0(r3)
  204634:	800d883a 	mov	r6,r16
  204638:	880f883a 	mov	r7,r17
  20463c:	a809883a 	mov	r4,r21
  204640:	4029883a 	mov	r20,r8
  204644:	020cf880 	call	20cf88 <__gedf2>
  204648:	00841d16 	blt	zero,r2,2056c0 <_dtoa_r+0x15f4>
  20464c:	800d883a 	mov	r6,r16
  204650:	880f883a 	mov	r7,r17
  204654:	0009883a 	mov	r4,zero
  204658:	014ffc34 	movhi	r5,16368
  20465c:	020d9c40 	call	20d9c4 <__subdf3>
  204660:	d9401217 	ldw	r5,72(sp)
  204664:	100d883a 	mov	r6,r2
  204668:	180f883a 	mov	r7,r3
  20466c:	a809883a 	mov	r4,r21
  204670:	020cf880 	call	20cf88 <__gedf2>
  204674:	db001617 	ldw	r12,88(sp)
  204678:	00840e16 	blt	zero,r2,2056b4 <_dtoa_r+0x15e8>
  20467c:	00800044 	movi	r2,1
  204680:	13006b0e 	bge	r2,r12,204830 <_dtoa_r+0x764>
  204684:	d9000717 	ldw	r4,28(sp)
  204688:	dd800f15 	stw	r22,60(sp)
  20468c:	dcc01015 	stw	r19,64(sp)
  204690:	2319883a 	add	r12,r4,r12
  204694:	dcc01217 	ldw	r19,72(sp)
  204698:	602d883a 	mov	r22,r12
  20469c:	dc801215 	stw	r18,72(sp)
  2046a0:	b825883a 	mov	r18,r23
  2046a4:	00000906 	br	2046cc <_dtoa_r+0x600>
  2046a8:	020d9c40 	call	20d9c4 <__subdf3>
  2046ac:	a80d883a 	mov	r6,r21
  2046b0:	980f883a 	mov	r7,r19
  2046b4:	1009883a 	mov	r4,r2
  2046b8:	180b883a 	mov	r5,r3
  2046bc:	020d0640 	call	20d064 <__ledf2>
  2046c0:	1003e816 	blt	r2,zero,205664 <_dtoa_r+0x1598>
  2046c4:	b825883a 	mov	r18,r23
  2046c8:	bd83e926 	beq	r23,r22,205670 <_dtoa_r+0x15a4>
  2046cc:	a809883a 	mov	r4,r21
  2046d0:	980b883a 	mov	r5,r19
  2046d4:	000d883a 	mov	r6,zero
  2046d8:	01d00934 	movhi	r7,16420
  2046dc:	020d1580 	call	20d158 <__muldf3>
  2046e0:	000d883a 	mov	r6,zero
  2046e4:	01d00934 	movhi	r7,16420
  2046e8:	8009883a 	mov	r4,r16
  2046ec:	880b883a 	mov	r5,r17
  2046f0:	102b883a 	mov	r21,r2
  2046f4:	1827883a 	mov	r19,r3
  2046f8:	020d1580 	call	20d158 <__muldf3>
  2046fc:	180b883a 	mov	r5,r3
  204700:	1009883a 	mov	r4,r2
  204704:	1821883a 	mov	r16,r3
  204708:	1023883a 	mov	r17,r2
  20470c:	020e2c00 	call	20e2c0 <__fixdfsi>
  204710:	1009883a 	mov	r4,r2
  204714:	1029883a 	mov	r20,r2
  204718:	020e3400 	call	20e340 <__floatsidf>
  20471c:	8809883a 	mov	r4,r17
  204720:	800b883a 	mov	r5,r16
  204724:	100d883a 	mov	r6,r2
  204728:	180f883a 	mov	r7,r3
  20472c:	020d9c40 	call	20d9c4 <__subdf3>
  204730:	a5000c04 	addi	r20,r20,48
  204734:	a80d883a 	mov	r6,r21
  204738:	980f883a 	mov	r7,r19
  20473c:	1009883a 	mov	r4,r2
  204740:	180b883a 	mov	r5,r3
  204744:	95000005 	stb	r20,0(r18)
  204748:	1021883a 	mov	r16,r2
  20474c:	1823883a 	mov	r17,r3
  204750:	020d0640 	call	20d064 <__ledf2>
  204754:	bdc00044 	addi	r23,r23,1
  204758:	800d883a 	mov	r6,r16
  20475c:	880f883a 	mov	r7,r17
  204760:	0009883a 	mov	r4,zero
  204764:	014ffc34 	movhi	r5,16368
  204768:	103fcf0e 	bge	r2,zero,2046a8 <_gp+0xffdf2ac4>
  20476c:	d8c01317 	ldw	r3,76(sp)
  204770:	d8c00515 	stw	r3,20(sp)
  204774:	d9400917 	ldw	r5,36(sp)
  204778:	e009883a 	mov	r4,fp
  20477c:	020782c0 	call	20782c <_Bfree>
  204780:	d9000517 	ldw	r4,20(sp)
  204784:	d9802317 	ldw	r6,140(sp)
  204788:	d9c02517 	ldw	r7,148(sp)
  20478c:	b8000005 	stb	zero,0(r23)
  204790:	20800044 	addi	r2,r4,1
  204794:	30800015 	stw	r2,0(r6)
  204798:	3802aa26 	beq	r7,zero,205244 <_dtoa_r+0x1178>
  20479c:	3dc00015 	stw	r23,0(r7)
  2047a0:	d8800717 	ldw	r2,28(sp)
  2047a4:	003e7906 	br	20418c <_gp+0xffdf25a8>
  2047a8:	00800434 	movhi	r2,16
  2047ac:	10bfffc4 	addi	r2,r2,-1
  2047b0:	88a2703a 	and	r17,r17,r2
  2047b4:	883e851e 	bne	r17,zero,2041cc <_gp+0xffdf25e8>
  2047b8:	00800874 	movhi	r2,33
  2047bc:	10905904 	addi	r2,r2,16740
  2047c0:	003e8406 	br	2041d4 <_gp+0xffdf25f0>
  2047c4:	10c00204 	addi	r3,r2,8
  2047c8:	003e8706 	br	2041e8 <_gp+0xffdf2604>
  2047cc:	01400434 	movhi	r5,16
  2047d0:	297fffc4 	addi	r5,r5,-1
  2047d4:	994a703a 	and	r5,r19,r5
  2047d8:	9009883a 	mov	r4,r18
  2047dc:	843f0044 	addi	r16,r16,-1023
  2047e0:	294ffc34 	orhi	r5,r5,16368
  2047e4:	dd800217 	ldw	r22,8(sp)
  2047e8:	d8001115 	stw	zero,68(sp)
  2047ec:	003ea506 	br	204284 <_gp+0xffdf26a0>
  2047f0:	00800874 	movhi	r2,33
  2047f4:	10905004 	addi	r2,r2,16704
  2047f8:	003e6406 	br	20418c <_gp+0xffdf25a8>
  2047fc:	e0001115 	stw	zero,68(fp)
  204800:	000b883a 	mov	r5,zero
  204804:	e009883a 	mov	r4,fp
  204808:	02077840 	call	207784 <_Balloc>
  20480c:	01bfffc4 	movi	r6,-1
  204810:	01c00044 	movi	r7,1
  204814:	d8800715 	stw	r2,28(sp)
  204818:	d9800c15 	stw	r6,48(sp)
  20481c:	e0801015 	stw	r2,64(fp)
  204820:	d8000315 	stw	zero,12(sp)
  204824:	d9c00b15 	stw	r7,44(sp)
  204828:	d9800615 	stw	r6,24(sp)
  20482c:	d8002215 	stw	zero,136(sp)
  204830:	d8800117 	ldw	r2,4(sp)
  204834:	10008916 	blt	r2,zero,204a5c <_dtoa_r+0x990>
  204838:	d9000517 	ldw	r4,20(sp)
  20483c:	00c00384 	movi	r3,14
  204840:	19008616 	blt	r3,r4,204a5c <_dtoa_r+0x990>
  204844:	200490fa 	slli	r2,r4,3
  204848:	00c00874 	movhi	r3,33
  20484c:	d9802217 	ldw	r6,136(sp)
  204850:	18d07804 	addi	r3,r3,16864
  204854:	1885883a 	add	r2,r3,r2
  204858:	14000017 	ldw	r16,0(r2)
  20485c:	14400117 	ldw	r17,4(r2)
  204860:	30016316 	blt	r6,zero,204df0 <_dtoa_r+0xd24>
  204864:	800d883a 	mov	r6,r16
  204868:	880f883a 	mov	r7,r17
  20486c:	9009883a 	mov	r4,r18
  204870:	980b883a 	mov	r5,r19
  204874:	020c5300 	call	20c530 <__divdf3>
  204878:	180b883a 	mov	r5,r3
  20487c:	1009883a 	mov	r4,r2
  204880:	020e2c00 	call	20e2c0 <__fixdfsi>
  204884:	1009883a 	mov	r4,r2
  204888:	102b883a 	mov	r21,r2
  20488c:	020e3400 	call	20e340 <__floatsidf>
  204890:	800d883a 	mov	r6,r16
  204894:	880f883a 	mov	r7,r17
  204898:	1009883a 	mov	r4,r2
  20489c:	180b883a 	mov	r5,r3
  2048a0:	020d1580 	call	20d158 <__muldf3>
  2048a4:	100d883a 	mov	r6,r2
  2048a8:	180f883a 	mov	r7,r3
  2048ac:	9009883a 	mov	r4,r18
  2048b0:	980b883a 	mov	r5,r19
  2048b4:	020d9c40 	call	20d9c4 <__subdf3>
  2048b8:	d9c00717 	ldw	r7,28(sp)
  2048bc:	1009883a 	mov	r4,r2
  2048c0:	a8800c04 	addi	r2,r21,48
  2048c4:	38800005 	stb	r2,0(r7)
  2048c8:	3dc00044 	addi	r23,r7,1
  2048cc:	d9c00617 	ldw	r7,24(sp)
  2048d0:	01800044 	movi	r6,1
  2048d4:	180b883a 	mov	r5,r3
  2048d8:	2005883a 	mov	r2,r4
  2048dc:	39803826 	beq	r7,r6,2049c0 <_dtoa_r+0x8f4>
  2048e0:	000d883a 	mov	r6,zero
  2048e4:	01d00934 	movhi	r7,16420
  2048e8:	020d1580 	call	20d158 <__muldf3>
  2048ec:	000d883a 	mov	r6,zero
  2048f0:	000f883a 	mov	r7,zero
  2048f4:	1009883a 	mov	r4,r2
  2048f8:	180b883a 	mov	r5,r3
  2048fc:	1025883a 	mov	r18,r2
  204900:	1827883a 	mov	r19,r3
  204904:	020cf000 	call	20cf00 <__eqdf2>
  204908:	103f9a26 	beq	r2,zero,204774 <_gp+0xffdf2b90>
  20490c:	d9c00617 	ldw	r7,24(sp)
  204910:	d8c00717 	ldw	r3,28(sp)
  204914:	b829883a 	mov	r20,r23
  204918:	38bfffc4 	addi	r2,r7,-1
  20491c:	18ad883a 	add	r22,r3,r2
  204920:	00000a06 	br	20494c <_dtoa_r+0x880>
  204924:	020d1580 	call	20d158 <__muldf3>
  204928:	000d883a 	mov	r6,zero
  20492c:	000f883a 	mov	r7,zero
  204930:	1009883a 	mov	r4,r2
  204934:	180b883a 	mov	r5,r3
  204938:	1025883a 	mov	r18,r2
  20493c:	1827883a 	mov	r19,r3
  204940:	b829883a 	mov	r20,r23
  204944:	020cf000 	call	20cf00 <__eqdf2>
  204948:	103f8a26 	beq	r2,zero,204774 <_gp+0xffdf2b90>
  20494c:	800d883a 	mov	r6,r16
  204950:	880f883a 	mov	r7,r17
  204954:	9009883a 	mov	r4,r18
  204958:	980b883a 	mov	r5,r19
  20495c:	020c5300 	call	20c530 <__divdf3>
  204960:	180b883a 	mov	r5,r3
  204964:	1009883a 	mov	r4,r2
  204968:	020e2c00 	call	20e2c0 <__fixdfsi>
  20496c:	1009883a 	mov	r4,r2
  204970:	102b883a 	mov	r21,r2
  204974:	020e3400 	call	20e340 <__floatsidf>
  204978:	800d883a 	mov	r6,r16
  20497c:	880f883a 	mov	r7,r17
  204980:	1009883a 	mov	r4,r2
  204984:	180b883a 	mov	r5,r3
  204988:	020d1580 	call	20d158 <__muldf3>
  20498c:	100d883a 	mov	r6,r2
  204990:	180f883a 	mov	r7,r3
  204994:	9009883a 	mov	r4,r18
  204998:	980b883a 	mov	r5,r19
  20499c:	020d9c40 	call	20d9c4 <__subdf3>
  2049a0:	aa000c04 	addi	r8,r21,48
  2049a4:	a2000005 	stb	r8,0(r20)
  2049a8:	000d883a 	mov	r6,zero
  2049ac:	01d00934 	movhi	r7,16420
  2049b0:	1009883a 	mov	r4,r2
  2049b4:	180b883a 	mov	r5,r3
  2049b8:	a5c00044 	addi	r23,r20,1
  2049bc:	b53fd91e 	bne	r22,r20,204924 <_gp+0xffdf2d40>
  2049c0:	100d883a 	mov	r6,r2
  2049c4:	180f883a 	mov	r7,r3
  2049c8:	1009883a 	mov	r4,r2
  2049cc:	180b883a 	mov	r5,r3
  2049d0:	020bc840 	call	20bc84 <__adddf3>
  2049d4:	100d883a 	mov	r6,r2
  2049d8:	180f883a 	mov	r7,r3
  2049dc:	8009883a 	mov	r4,r16
  2049e0:	880b883a 	mov	r5,r17
  2049e4:	1027883a 	mov	r19,r2
  2049e8:	1825883a 	mov	r18,r3
  2049ec:	020d0640 	call	20d064 <__ledf2>
  2049f0:	10000816 	blt	r2,zero,204a14 <_dtoa_r+0x948>
  2049f4:	980d883a 	mov	r6,r19
  2049f8:	900f883a 	mov	r7,r18
  2049fc:	8009883a 	mov	r4,r16
  204a00:	880b883a 	mov	r5,r17
  204a04:	020cf000 	call	20cf00 <__eqdf2>
  204a08:	103f5a1e 	bne	r2,zero,204774 <_gp+0xffdf2b90>
  204a0c:	ad40004c 	andi	r21,r21,1
  204a10:	a83f5826 	beq	r21,zero,204774 <_gp+0xffdf2b90>
  204a14:	bd3fffc3 	ldbu	r20,-1(r23)
  204a18:	b8bfffc4 	addi	r2,r23,-1
  204a1c:	1007883a 	mov	r3,r2
  204a20:	01400e44 	movi	r5,57
  204a24:	d9800717 	ldw	r6,28(sp)
  204a28:	00000506 	br	204a40 <_dtoa_r+0x974>
  204a2c:	18ffffc4 	addi	r3,r3,-1
  204a30:	11824726 	beq	r2,r6,205350 <_dtoa_r+0x1284>
  204a34:	1d000003 	ldbu	r20,0(r3)
  204a38:	102f883a 	mov	r23,r2
  204a3c:	10bfffc4 	addi	r2,r2,-1
  204a40:	a1003fcc 	andi	r4,r20,255
  204a44:	2100201c 	xori	r4,r4,128
  204a48:	213fe004 	addi	r4,r4,-128
  204a4c:	217ff726 	beq	r4,r5,204a2c <_gp+0xffdf2e48>
  204a50:	a2000044 	addi	r8,r20,1
  204a54:	12000005 	stb	r8,0(r2)
  204a58:	003f4606 	br	204774 <_gp+0xffdf2b90>
  204a5c:	d9000b17 	ldw	r4,44(sp)
  204a60:	2000c826 	beq	r4,zero,204d84 <_dtoa_r+0xcb8>
  204a64:	d9800317 	ldw	r6,12(sp)
  204a68:	00c00044 	movi	r3,1
  204a6c:	1980f90e 	bge	r3,r6,204e54 <_dtoa_r+0xd88>
  204a70:	d8800617 	ldw	r2,24(sp)
  204a74:	d8c00a17 	ldw	r3,40(sp)
  204a78:	157fffc4 	addi	r21,r2,-1
  204a7c:	1d41f316 	blt	r3,r21,20524c <_dtoa_r+0x1180>
  204a80:	1d6bc83a 	sub	r21,r3,r21
  204a84:	d9c00617 	ldw	r7,24(sp)
  204a88:	3802aa16 	blt	r7,zero,205534 <_dtoa_r+0x1468>
  204a8c:	dd000817 	ldw	r20,32(sp)
  204a90:	d8800617 	ldw	r2,24(sp)
  204a94:	d8c00817 	ldw	r3,32(sp)
  204a98:	01400044 	movi	r5,1
  204a9c:	e009883a 	mov	r4,fp
  204aa0:	1887883a 	add	r3,r3,r2
  204aa4:	d8c00815 	stw	r3,32(sp)
  204aa8:	b0ad883a 	add	r22,r22,r2
  204aac:	0207bb80 	call	207bb8 <__i2b>
  204ab0:	1023883a 	mov	r17,r2
  204ab4:	a0000826 	beq	r20,zero,204ad8 <_dtoa_r+0xa0c>
  204ab8:	0580070e 	bge	zero,r22,204ad8 <_dtoa_r+0xa0c>
  204abc:	a005883a 	mov	r2,r20
  204ac0:	b500b916 	blt	r22,r20,204da8 <_dtoa_r+0xcdc>
  204ac4:	d9000817 	ldw	r4,32(sp)
  204ac8:	a0a9c83a 	sub	r20,r20,r2
  204acc:	b0adc83a 	sub	r22,r22,r2
  204ad0:	2089c83a 	sub	r4,r4,r2
  204ad4:	d9000815 	stw	r4,32(sp)
  204ad8:	d9800a17 	ldw	r6,40(sp)
  204adc:	0181810e 	bge	zero,r6,2050e4 <_dtoa_r+0x1018>
  204ae0:	d9c00b17 	ldw	r7,44(sp)
  204ae4:	3800b326 	beq	r7,zero,204db4 <_dtoa_r+0xce8>
  204ae8:	a800b226 	beq	r21,zero,204db4 <_dtoa_r+0xce8>
  204aec:	880b883a 	mov	r5,r17
  204af0:	a80d883a 	mov	r6,r21
  204af4:	e009883a 	mov	r4,fp
  204af8:	0207e800 	call	207e80 <__pow5mult>
  204afc:	d9800917 	ldw	r6,36(sp)
  204b00:	100b883a 	mov	r5,r2
  204b04:	e009883a 	mov	r4,fp
  204b08:	1023883a 	mov	r17,r2
  204b0c:	0207bf40 	call	207bf4 <__multiply>
  204b10:	1021883a 	mov	r16,r2
  204b14:	d8800a17 	ldw	r2,40(sp)
  204b18:	d9400917 	ldw	r5,36(sp)
  204b1c:	e009883a 	mov	r4,fp
  204b20:	1545c83a 	sub	r2,r2,r21
  204b24:	d8800a15 	stw	r2,40(sp)
  204b28:	020782c0 	call	20782c <_Bfree>
  204b2c:	d8c00a17 	ldw	r3,40(sp)
  204b30:	18009f1e 	bne	r3,zero,204db0 <_dtoa_r+0xce4>
  204b34:	05c00044 	movi	r23,1
  204b38:	e009883a 	mov	r4,fp
  204b3c:	b80b883a 	mov	r5,r23
  204b40:	0207bb80 	call	207bb8 <__i2b>
  204b44:	d9000d17 	ldw	r4,52(sp)
  204b48:	102b883a 	mov	r21,r2
  204b4c:	2000ce26 	beq	r4,zero,204e88 <_dtoa_r+0xdbc>
  204b50:	200d883a 	mov	r6,r4
  204b54:	100b883a 	mov	r5,r2
  204b58:	e009883a 	mov	r4,fp
  204b5c:	0207e800 	call	207e80 <__pow5mult>
  204b60:	d9800317 	ldw	r6,12(sp)
  204b64:	102b883a 	mov	r21,r2
  204b68:	b981810e 	bge	r23,r6,205170 <_dtoa_r+0x10a4>
  204b6c:	0027883a 	mov	r19,zero
  204b70:	a8800417 	ldw	r2,16(r21)
  204b74:	05c00804 	movi	r23,32
  204b78:	10800104 	addi	r2,r2,4
  204b7c:	1085883a 	add	r2,r2,r2
  204b80:	1085883a 	add	r2,r2,r2
  204b84:	a885883a 	add	r2,r21,r2
  204b88:	11000017 	ldw	r4,0(r2)
  204b8c:	0207aa00 	call	207aa0 <__hi0bits>
  204b90:	b885c83a 	sub	r2,r23,r2
  204b94:	1585883a 	add	r2,r2,r22
  204b98:	108007cc 	andi	r2,r2,31
  204b9c:	1000b326 	beq	r2,zero,204e6c <_dtoa_r+0xda0>
  204ba0:	00c00804 	movi	r3,32
  204ba4:	1887c83a 	sub	r3,r3,r2
  204ba8:	01000104 	movi	r4,4
  204bac:	20c2cd0e 	bge	r4,r3,2056e4 <_dtoa_r+0x1618>
  204bb0:	00c00704 	movi	r3,28
  204bb4:	1885c83a 	sub	r2,r3,r2
  204bb8:	d8c00817 	ldw	r3,32(sp)
  204bbc:	a0a9883a 	add	r20,r20,r2
  204bc0:	b0ad883a 	add	r22,r22,r2
  204bc4:	1887883a 	add	r3,r3,r2
  204bc8:	d8c00815 	stw	r3,32(sp)
  204bcc:	d9800817 	ldw	r6,32(sp)
  204bd0:	0180040e 	bge	zero,r6,204be4 <_dtoa_r+0xb18>
  204bd4:	800b883a 	mov	r5,r16
  204bd8:	e009883a 	mov	r4,fp
  204bdc:	0207fc00 	call	207fc0 <__lshift>
  204be0:	1021883a 	mov	r16,r2
  204be4:	0580050e 	bge	zero,r22,204bfc <_dtoa_r+0xb30>
  204be8:	a80b883a 	mov	r5,r21
  204bec:	b00d883a 	mov	r6,r22
  204bf0:	e009883a 	mov	r4,fp
  204bf4:	0207fc00 	call	207fc0 <__lshift>
  204bf8:	102b883a 	mov	r21,r2
  204bfc:	d9c00e17 	ldw	r7,56(sp)
  204c00:	3801211e 	bne	r7,zero,205088 <_dtoa_r+0xfbc>
  204c04:	d9800617 	ldw	r6,24(sp)
  204c08:	0181380e 	bge	zero,r6,2050ec <_dtoa_r+0x1020>
  204c0c:	d8c00b17 	ldw	r3,44(sp)
  204c10:	1800ab1e 	bne	r3,zero,204ec0 <_dtoa_r+0xdf4>
  204c14:	dc800717 	ldw	r18,28(sp)
  204c18:	dcc00617 	ldw	r19,24(sp)
  204c1c:	9029883a 	mov	r20,r18
  204c20:	00000206 	br	204c2c <_dtoa_r+0xb60>
  204c24:	02078540 	call	207854 <__multadd>
  204c28:	1021883a 	mov	r16,r2
  204c2c:	a80b883a 	mov	r5,r21
  204c30:	8009883a 	mov	r4,r16
  204c34:	0203ea40 	call	203ea4 <quorem>
  204c38:	10800c04 	addi	r2,r2,48
  204c3c:	90800005 	stb	r2,0(r18)
  204c40:	94800044 	addi	r18,r18,1
  204c44:	9507c83a 	sub	r3,r18,r20
  204c48:	000f883a 	mov	r7,zero
  204c4c:	01800284 	movi	r6,10
  204c50:	800b883a 	mov	r5,r16
  204c54:	e009883a 	mov	r4,fp
  204c58:	1cfff216 	blt	r3,r19,204c24 <_gp+0xffdf3040>
  204c5c:	1011883a 	mov	r8,r2
  204c60:	d8800617 	ldw	r2,24(sp)
  204c64:	0082370e 	bge	zero,r2,205544 <_dtoa_r+0x1478>
  204c68:	d9000717 	ldw	r4,28(sp)
  204c6c:	0025883a 	mov	r18,zero
  204c70:	20af883a 	add	r23,r4,r2
  204c74:	01800044 	movi	r6,1
  204c78:	800b883a 	mov	r5,r16
  204c7c:	e009883a 	mov	r4,fp
  204c80:	da001715 	stw	r8,92(sp)
  204c84:	0207fc00 	call	207fc0 <__lshift>
  204c88:	a80b883a 	mov	r5,r21
  204c8c:	1009883a 	mov	r4,r2
  204c90:	d8800915 	stw	r2,36(sp)
  204c94:	02081080 	call	208108 <__mcmp>
  204c98:	da001717 	ldw	r8,92(sp)
  204c9c:	0081800e 	bge	zero,r2,2052a0 <_dtoa_r+0x11d4>
  204ca0:	b93fffc3 	ldbu	r4,-1(r23)
  204ca4:	b8bfffc4 	addi	r2,r23,-1
  204ca8:	1007883a 	mov	r3,r2
  204cac:	01800e44 	movi	r6,57
  204cb0:	d9c00717 	ldw	r7,28(sp)
  204cb4:	00000506 	br	204ccc <_dtoa_r+0xc00>
  204cb8:	18ffffc4 	addi	r3,r3,-1
  204cbc:	11c12326 	beq	r2,r7,20514c <_dtoa_r+0x1080>
  204cc0:	19000003 	ldbu	r4,0(r3)
  204cc4:	102f883a 	mov	r23,r2
  204cc8:	10bfffc4 	addi	r2,r2,-1
  204ccc:	21403fcc 	andi	r5,r4,255
  204cd0:	2940201c 	xori	r5,r5,128
  204cd4:	297fe004 	addi	r5,r5,-128
  204cd8:	29bff726 	beq	r5,r6,204cb8 <_gp+0xffdf30d4>
  204cdc:	21000044 	addi	r4,r4,1
  204ce0:	11000005 	stb	r4,0(r2)
  204ce4:	a80b883a 	mov	r5,r21
  204ce8:	e009883a 	mov	r4,fp
  204cec:	020782c0 	call	20782c <_Bfree>
  204cf0:	883ea026 	beq	r17,zero,204774 <_gp+0xffdf2b90>
  204cf4:	90000426 	beq	r18,zero,204d08 <_dtoa_r+0xc3c>
  204cf8:	94400326 	beq	r18,r17,204d08 <_dtoa_r+0xc3c>
  204cfc:	900b883a 	mov	r5,r18
  204d00:	e009883a 	mov	r4,fp
  204d04:	020782c0 	call	20782c <_Bfree>
  204d08:	880b883a 	mov	r5,r17
  204d0c:	e009883a 	mov	r4,fp
  204d10:	020782c0 	call	20782c <_Bfree>
  204d14:	003e9706 	br	204774 <_gp+0xffdf2b90>
  204d18:	01800044 	movi	r6,1
  204d1c:	d9800e15 	stw	r6,56(sp)
  204d20:	003d9606 	br	20437c <_gp+0xffdf2798>
  204d24:	d8800817 	ldw	r2,32(sp)
  204d28:	d8c00517 	ldw	r3,20(sp)
  204d2c:	d8000d15 	stw	zero,52(sp)
  204d30:	10c5c83a 	sub	r2,r2,r3
  204d34:	00c9c83a 	sub	r4,zero,r3
  204d38:	d8800815 	stw	r2,32(sp)
  204d3c:	d9000a15 	stw	r4,40(sp)
  204d40:	003d9706 	br	2043a0 <_gp+0xffdf27bc>
  204d44:	05adc83a 	sub	r22,zero,r22
  204d48:	dd800815 	stw	r22,32(sp)
  204d4c:	002d883a 	mov	r22,zero
  204d50:	003d8e06 	br	20438c <_gp+0xffdf27a8>
  204d54:	d9000517 	ldw	r4,20(sp)
  204d58:	020e3400 	call	20e340 <__floatsidf>
  204d5c:	100d883a 	mov	r6,r2
  204d60:	180f883a 	mov	r7,r3
  204d64:	a009883a 	mov	r4,r20
  204d68:	880b883a 	mov	r5,r17
  204d6c:	020cf000 	call	20cf00 <__eqdf2>
  204d70:	103d7126 	beq	r2,zero,204338 <_gp+0xffdf2754>
  204d74:	d9c00517 	ldw	r7,20(sp)
  204d78:	39ffffc4 	addi	r7,r7,-1
  204d7c:	d9c00515 	stw	r7,20(sp)
  204d80:	003d6d06 	br	204338 <_gp+0xffdf2754>
  204d84:	dd400a17 	ldw	r21,40(sp)
  204d88:	dd000817 	ldw	r20,32(sp)
  204d8c:	0023883a 	mov	r17,zero
  204d90:	003f4806 	br	204ab4 <_gp+0xffdf2ed0>
  204d94:	10e3c83a 	sub	r17,r2,r3
  204d98:	9448983a 	sll	r4,r18,r17
  204d9c:	003d3206 	br	204268 <_gp+0xffdf2684>
  204da0:	d8000e15 	stw	zero,56(sp)
  204da4:	003d7506 	br	20437c <_gp+0xffdf2798>
  204da8:	b005883a 	mov	r2,r22
  204dac:	003f4506 	br	204ac4 <_gp+0xffdf2ee0>
  204db0:	dc000915 	stw	r16,36(sp)
  204db4:	d9800a17 	ldw	r6,40(sp)
  204db8:	d9400917 	ldw	r5,36(sp)
  204dbc:	e009883a 	mov	r4,fp
  204dc0:	0207e800 	call	207e80 <__pow5mult>
  204dc4:	1021883a 	mov	r16,r2
  204dc8:	003f5a06 	br	204b34 <_gp+0xffdf2f50>
  204dcc:	01c00044 	movi	r7,1
  204dd0:	d9c00b15 	stw	r7,44(sp)
  204dd4:	d8802217 	ldw	r2,136(sp)
  204dd8:	0081280e 	bge	zero,r2,20527c <_dtoa_r+0x11b0>
  204ddc:	100d883a 	mov	r6,r2
  204de0:	1021883a 	mov	r16,r2
  204de4:	d8800c15 	stw	r2,48(sp)
  204de8:	d8800615 	stw	r2,24(sp)
  204dec:	003d8806 	br	204410 <_gp+0xffdf282c>
  204df0:	d8800617 	ldw	r2,24(sp)
  204df4:	00be9b16 	blt	zero,r2,204864 <_gp+0xffdf2c80>
  204df8:	10010f1e 	bne	r2,zero,205238 <_dtoa_r+0x116c>
  204dfc:	880b883a 	mov	r5,r17
  204e00:	000d883a 	mov	r6,zero
  204e04:	01d00534 	movhi	r7,16404
  204e08:	8009883a 	mov	r4,r16
  204e0c:	020d1580 	call	20d158 <__muldf3>
  204e10:	900d883a 	mov	r6,r18
  204e14:	980f883a 	mov	r7,r19
  204e18:	1009883a 	mov	r4,r2
  204e1c:	180b883a 	mov	r5,r3
  204e20:	020cf880 	call	20cf88 <__gedf2>
  204e24:	002b883a 	mov	r21,zero
  204e28:	0023883a 	mov	r17,zero
  204e2c:	1000bf16 	blt	r2,zero,20512c <_dtoa_r+0x1060>
  204e30:	d9802217 	ldw	r6,136(sp)
  204e34:	ddc00717 	ldw	r23,28(sp)
  204e38:	018c303a 	nor	r6,zero,r6
  204e3c:	d9800515 	stw	r6,20(sp)
  204e40:	a80b883a 	mov	r5,r21
  204e44:	e009883a 	mov	r4,fp
  204e48:	020782c0 	call	20782c <_Bfree>
  204e4c:	883e4926 	beq	r17,zero,204774 <_gp+0xffdf2b90>
  204e50:	003fad06 	br	204d08 <_gp+0xffdf3124>
  204e54:	d9c01117 	ldw	r7,68(sp)
  204e58:	3801bc26 	beq	r7,zero,20554c <_dtoa_r+0x1480>
  204e5c:	10810cc4 	addi	r2,r2,1075
  204e60:	dd400a17 	ldw	r21,40(sp)
  204e64:	dd000817 	ldw	r20,32(sp)
  204e68:	003f0a06 	br	204a94 <_gp+0xffdf2eb0>
  204e6c:	00800704 	movi	r2,28
  204e70:	d9000817 	ldw	r4,32(sp)
  204e74:	a0a9883a 	add	r20,r20,r2
  204e78:	b0ad883a 	add	r22,r22,r2
  204e7c:	2089883a 	add	r4,r4,r2
  204e80:	d9000815 	stw	r4,32(sp)
  204e84:	003f5106 	br	204bcc <_gp+0xffdf2fe8>
  204e88:	d8c00317 	ldw	r3,12(sp)
  204e8c:	b8c1fc0e 	bge	r23,r3,205680 <_dtoa_r+0x15b4>
  204e90:	0027883a 	mov	r19,zero
  204e94:	b805883a 	mov	r2,r23
  204e98:	003f3e06 	br	204b94 <_gp+0xffdf2fb0>
  204e9c:	880b883a 	mov	r5,r17
  204ea0:	e009883a 	mov	r4,fp
  204ea4:	000f883a 	mov	r7,zero
  204ea8:	01800284 	movi	r6,10
  204eac:	02078540 	call	207854 <__multadd>
  204eb0:	d9000c17 	ldw	r4,48(sp)
  204eb4:	1023883a 	mov	r17,r2
  204eb8:	0102040e 	bge	zero,r4,2056cc <_dtoa_r+0x1600>
  204ebc:	d9000615 	stw	r4,24(sp)
  204ec0:	0500050e 	bge	zero,r20,204ed8 <_dtoa_r+0xe0c>
  204ec4:	880b883a 	mov	r5,r17
  204ec8:	a00d883a 	mov	r6,r20
  204ecc:	e009883a 	mov	r4,fp
  204ed0:	0207fc00 	call	207fc0 <__lshift>
  204ed4:	1023883a 	mov	r17,r2
  204ed8:	9801241e 	bne	r19,zero,20536c <_dtoa_r+0x12a0>
  204edc:	8829883a 	mov	r20,r17
  204ee0:	d9000617 	ldw	r4,24(sp)
  204ee4:	dcc00717 	ldw	r19,28(sp)
  204ee8:	9480004c 	andi	r18,r18,1
  204eec:	20bfffc4 	addi	r2,r4,-1
  204ef0:	9885883a 	add	r2,r19,r2
  204ef4:	d8800415 	stw	r2,16(sp)
  204ef8:	dc800615 	stw	r18,24(sp)
  204efc:	a80b883a 	mov	r5,r21
  204f00:	8009883a 	mov	r4,r16
  204f04:	0203ea40 	call	203ea4 <quorem>
  204f08:	880b883a 	mov	r5,r17
  204f0c:	8009883a 	mov	r4,r16
  204f10:	102f883a 	mov	r23,r2
  204f14:	02081080 	call	208108 <__mcmp>
  204f18:	a80b883a 	mov	r5,r21
  204f1c:	a00d883a 	mov	r6,r20
  204f20:	e009883a 	mov	r4,fp
  204f24:	102d883a 	mov	r22,r2
  204f28:	02081680 	call	208168 <__mdiff>
  204f2c:	1007883a 	mov	r3,r2
  204f30:	10800317 	ldw	r2,12(r2)
  204f34:	bc800c04 	addi	r18,r23,48
  204f38:	180b883a 	mov	r5,r3
  204f3c:	10004e1e 	bne	r2,zero,205078 <_dtoa_r+0xfac>
  204f40:	8009883a 	mov	r4,r16
  204f44:	d8c01615 	stw	r3,88(sp)
  204f48:	02081080 	call	208108 <__mcmp>
  204f4c:	d8c01617 	ldw	r3,88(sp)
  204f50:	e009883a 	mov	r4,fp
  204f54:	d8801615 	stw	r2,88(sp)
  204f58:	180b883a 	mov	r5,r3
  204f5c:	020782c0 	call	20782c <_Bfree>
  204f60:	d8801617 	ldw	r2,88(sp)
  204f64:	1000041e 	bne	r2,zero,204f78 <_dtoa_r+0xeac>
  204f68:	d9800317 	ldw	r6,12(sp)
  204f6c:	3000021e 	bne	r6,zero,204f78 <_dtoa_r+0xeac>
  204f70:	d8c00617 	ldw	r3,24(sp)
  204f74:	18003726 	beq	r3,zero,205054 <_dtoa_r+0xf88>
  204f78:	b0002016 	blt	r22,zero,204ffc <_dtoa_r+0xf30>
  204f7c:	b000041e 	bne	r22,zero,204f90 <_dtoa_r+0xec4>
  204f80:	d9000317 	ldw	r4,12(sp)
  204f84:	2000021e 	bne	r4,zero,204f90 <_dtoa_r+0xec4>
  204f88:	d8c00617 	ldw	r3,24(sp)
  204f8c:	18001b26 	beq	r3,zero,204ffc <_dtoa_r+0xf30>
  204f90:	00810716 	blt	zero,r2,2053b0 <_dtoa_r+0x12e4>
  204f94:	d8c00417 	ldw	r3,16(sp)
  204f98:	9d800044 	addi	r22,r19,1
  204f9c:	9c800005 	stb	r18,0(r19)
  204fa0:	b02f883a 	mov	r23,r22
  204fa4:	98c10626 	beq	r19,r3,2053c0 <_dtoa_r+0x12f4>
  204fa8:	800b883a 	mov	r5,r16
  204fac:	000f883a 	mov	r7,zero
  204fb0:	01800284 	movi	r6,10
  204fb4:	e009883a 	mov	r4,fp
  204fb8:	02078540 	call	207854 <__multadd>
  204fbc:	1021883a 	mov	r16,r2
  204fc0:	000f883a 	mov	r7,zero
  204fc4:	01800284 	movi	r6,10
  204fc8:	880b883a 	mov	r5,r17
  204fcc:	e009883a 	mov	r4,fp
  204fd0:	8d002526 	beq	r17,r20,205068 <_dtoa_r+0xf9c>
  204fd4:	02078540 	call	207854 <__multadd>
  204fd8:	a00b883a 	mov	r5,r20
  204fdc:	000f883a 	mov	r7,zero
  204fe0:	01800284 	movi	r6,10
  204fe4:	e009883a 	mov	r4,fp
  204fe8:	1023883a 	mov	r17,r2
  204fec:	02078540 	call	207854 <__multadd>
  204ff0:	1029883a 	mov	r20,r2
  204ff4:	b027883a 	mov	r19,r22
  204ff8:	003fc006 	br	204efc <_gp+0xffdf3318>
  204ffc:	9011883a 	mov	r8,r18
  205000:	00800e0e 	bge	zero,r2,20503c <_dtoa_r+0xf70>
  205004:	800b883a 	mov	r5,r16
  205008:	01800044 	movi	r6,1
  20500c:	e009883a 	mov	r4,fp
  205010:	da001715 	stw	r8,92(sp)
  205014:	0207fc00 	call	207fc0 <__lshift>
  205018:	a80b883a 	mov	r5,r21
  20501c:	1009883a 	mov	r4,r2
  205020:	1021883a 	mov	r16,r2
  205024:	02081080 	call	208108 <__mcmp>
  205028:	da001717 	ldw	r8,92(sp)
  20502c:	0081960e 	bge	zero,r2,205688 <_dtoa_r+0x15bc>
  205030:	00800e44 	movi	r2,57
  205034:	40817026 	beq	r8,r2,2055f8 <_dtoa_r+0x152c>
  205038:	ba000c44 	addi	r8,r23,49
  20503c:	8825883a 	mov	r18,r17
  205040:	9dc00044 	addi	r23,r19,1
  205044:	9a000005 	stb	r8,0(r19)
  205048:	a023883a 	mov	r17,r20
  20504c:	dc000915 	stw	r16,36(sp)
  205050:	003f2406 	br	204ce4 <_gp+0xffdf3100>
  205054:	00800e44 	movi	r2,57
  205058:	9011883a 	mov	r8,r18
  20505c:	90816626 	beq	r18,r2,2055f8 <_dtoa_r+0x152c>
  205060:	05bff516 	blt	zero,r22,205038 <_gp+0xffdf3454>
  205064:	003ff506 	br	20503c <_gp+0xffdf3458>
  205068:	02078540 	call	207854 <__multadd>
  20506c:	1023883a 	mov	r17,r2
  205070:	1029883a 	mov	r20,r2
  205074:	003fdf06 	br	204ff4 <_gp+0xffdf3410>
  205078:	e009883a 	mov	r4,fp
  20507c:	020782c0 	call	20782c <_Bfree>
  205080:	00800044 	movi	r2,1
  205084:	003fbc06 	br	204f78 <_gp+0xffdf3394>
  205088:	a80b883a 	mov	r5,r21
  20508c:	8009883a 	mov	r4,r16
  205090:	02081080 	call	208108 <__mcmp>
  205094:	103edb0e 	bge	r2,zero,204c04 <_gp+0xffdf3020>
  205098:	800b883a 	mov	r5,r16
  20509c:	000f883a 	mov	r7,zero
  2050a0:	01800284 	movi	r6,10
  2050a4:	e009883a 	mov	r4,fp
  2050a8:	02078540 	call	207854 <__multadd>
  2050ac:	1021883a 	mov	r16,r2
  2050b0:	d8800517 	ldw	r2,20(sp)
  2050b4:	d8c00b17 	ldw	r3,44(sp)
  2050b8:	10bfffc4 	addi	r2,r2,-1
  2050bc:	d8800515 	stw	r2,20(sp)
  2050c0:	183f761e 	bne	r3,zero,204e9c <_gp+0xffdf32b8>
  2050c4:	d9000c17 	ldw	r4,48(sp)
  2050c8:	0101730e 	bge	zero,r4,205698 <_dtoa_r+0x15cc>
  2050cc:	d9000615 	stw	r4,24(sp)
  2050d0:	003ed006 	br	204c14 <_gp+0xffdf3030>
  2050d4:	00800084 	movi	r2,2
  2050d8:	3081861e 	bne	r6,r2,2056f4 <_dtoa_r+0x1628>
  2050dc:	d8000b15 	stw	zero,44(sp)
  2050e0:	003f3c06 	br	204dd4 <_gp+0xffdf31f0>
  2050e4:	dc000917 	ldw	r16,36(sp)
  2050e8:	003e9206 	br	204b34 <_gp+0xffdf2f50>
  2050ec:	d9c00317 	ldw	r7,12(sp)
  2050f0:	00800084 	movi	r2,2
  2050f4:	11fec50e 	bge	r2,r7,204c0c <_gp+0xffdf3028>
  2050f8:	d9000617 	ldw	r4,24(sp)
  2050fc:	20013c1e 	bne	r4,zero,2055f0 <_dtoa_r+0x1524>
  205100:	a80b883a 	mov	r5,r21
  205104:	000f883a 	mov	r7,zero
  205108:	01800144 	movi	r6,5
  20510c:	e009883a 	mov	r4,fp
  205110:	02078540 	call	207854 <__multadd>
  205114:	100b883a 	mov	r5,r2
  205118:	8009883a 	mov	r4,r16
  20511c:	102b883a 	mov	r21,r2
  205120:	02081080 	call	208108 <__mcmp>
  205124:	dc000915 	stw	r16,36(sp)
  205128:	00bf410e 	bge	zero,r2,204e30 <_gp+0xffdf324c>
  20512c:	d9c00717 	ldw	r7,28(sp)
  205130:	00800c44 	movi	r2,49
  205134:	38800005 	stb	r2,0(r7)
  205138:	d8800517 	ldw	r2,20(sp)
  20513c:	3dc00044 	addi	r23,r7,1
  205140:	10800044 	addi	r2,r2,1
  205144:	d8800515 	stw	r2,20(sp)
  205148:	003f3d06 	br	204e40 <_gp+0xffdf325c>
  20514c:	d9800517 	ldw	r6,20(sp)
  205150:	d9c00717 	ldw	r7,28(sp)
  205154:	00800c44 	movi	r2,49
  205158:	31800044 	addi	r6,r6,1
  20515c:	d9800515 	stw	r6,20(sp)
  205160:	38800005 	stb	r2,0(r7)
  205164:	003edf06 	br	204ce4 <_gp+0xffdf3100>
  205168:	d8000b15 	stw	zero,44(sp)
  20516c:	003c9f06 	br	2043ec <_gp+0xffdf2808>
  205170:	903e7e1e 	bne	r18,zero,204b6c <_gp+0xffdf2f88>
  205174:	00800434 	movhi	r2,16
  205178:	10bfffc4 	addi	r2,r2,-1
  20517c:	9884703a 	and	r2,r19,r2
  205180:	1000ea1e 	bne	r2,zero,20552c <_dtoa_r+0x1460>
  205184:	9cdffc2c 	andhi	r19,r19,32752
  205188:	9800e826 	beq	r19,zero,20552c <_dtoa_r+0x1460>
  20518c:	d9c00817 	ldw	r7,32(sp)
  205190:	b5800044 	addi	r22,r22,1
  205194:	04c00044 	movi	r19,1
  205198:	39c00044 	addi	r7,r7,1
  20519c:	d9c00815 	stw	r7,32(sp)
  2051a0:	d8800d17 	ldw	r2,52(sp)
  2051a4:	103e721e 	bne	r2,zero,204b70 <_gp+0xffdf2f8c>
  2051a8:	00800044 	movi	r2,1
  2051ac:	003e7906 	br	204b94 <_gp+0xffdf2fb0>
  2051b0:	8009883a 	mov	r4,r16
  2051b4:	020e3400 	call	20e340 <__floatsidf>
  2051b8:	d9800f17 	ldw	r6,60(sp)
  2051bc:	d9c01017 	ldw	r7,64(sp)
  2051c0:	1009883a 	mov	r4,r2
  2051c4:	180b883a 	mov	r5,r3
  2051c8:	020d1580 	call	20d158 <__muldf3>
  2051cc:	000d883a 	mov	r6,zero
  2051d0:	01d00734 	movhi	r7,16412
  2051d4:	1009883a 	mov	r4,r2
  2051d8:	180b883a 	mov	r5,r3
  2051dc:	020bc840 	call	20bc84 <__adddf3>
  2051e0:	047f3034 	movhi	r17,64704
  2051e4:	1021883a 	mov	r16,r2
  2051e8:	1c63883a 	add	r17,r3,r17
  2051ec:	d9000f17 	ldw	r4,60(sp)
  2051f0:	d9401017 	ldw	r5,64(sp)
  2051f4:	000d883a 	mov	r6,zero
  2051f8:	01d00534 	movhi	r7,16404
  2051fc:	020d9c40 	call	20d9c4 <__subdf3>
  205200:	800d883a 	mov	r6,r16
  205204:	880f883a 	mov	r7,r17
  205208:	1009883a 	mov	r4,r2
  20520c:	180b883a 	mov	r5,r3
  205210:	102b883a 	mov	r21,r2
  205214:	1829883a 	mov	r20,r3
  205218:	020cf880 	call	20cf88 <__gedf2>
  20521c:	00806c16 	blt	zero,r2,2053d0 <_dtoa_r+0x1304>
  205220:	89e0003c 	xorhi	r7,r17,32768
  205224:	800d883a 	mov	r6,r16
  205228:	a809883a 	mov	r4,r21
  20522c:	a00b883a 	mov	r5,r20
  205230:	020d0640 	call	20d064 <__ledf2>
  205234:	103d7e0e 	bge	r2,zero,204830 <_gp+0xffdf2c4c>
  205238:	002b883a 	mov	r21,zero
  20523c:	0023883a 	mov	r17,zero
  205240:	003efb06 	br	204e30 <_gp+0xffdf324c>
  205244:	d8800717 	ldw	r2,28(sp)
  205248:	003bd006 	br	20418c <_gp+0xffdf25a8>
  20524c:	d9000a17 	ldw	r4,40(sp)
  205250:	d9800d17 	ldw	r6,52(sp)
  205254:	dd400a15 	stw	r21,40(sp)
  205258:	a905c83a 	sub	r2,r21,r4
  20525c:	308d883a 	add	r6,r6,r2
  205260:	d9800d15 	stw	r6,52(sp)
  205264:	002b883a 	mov	r21,zero
  205268:	003e0606 	br	204a84 <_gp+0xffdf2ea0>
  20526c:	9023883a 	mov	r17,r18
  205270:	9829883a 	mov	r20,r19
  205274:	04000084 	movi	r16,2
  205278:	003c9206 	br	2044c4 <_gp+0xffdf28e0>
  20527c:	04000044 	movi	r16,1
  205280:	dc000c15 	stw	r16,48(sp)
  205284:	dc000615 	stw	r16,24(sp)
  205288:	dc002215 	stw	r16,136(sp)
  20528c:	e0001115 	stw	zero,68(fp)
  205290:	000b883a 	mov	r5,zero
  205294:	003c6906 	br	20443c <_gp+0xffdf2858>
  205298:	3021883a 	mov	r16,r6
  20529c:	003ffb06 	br	20528c <_gp+0xffdf36a8>
  2052a0:	1000021e 	bne	r2,zero,2052ac <_dtoa_r+0x11e0>
  2052a4:	4200004c 	andi	r8,r8,1
  2052a8:	403e7d1e 	bne	r8,zero,204ca0 <_gp+0xffdf30bc>
  2052ac:	01000c04 	movi	r4,48
  2052b0:	00000106 	br	2052b8 <_dtoa_r+0x11ec>
  2052b4:	102f883a 	mov	r23,r2
  2052b8:	b8bfffc4 	addi	r2,r23,-1
  2052bc:	10c00007 	ldb	r3,0(r2)
  2052c0:	193ffc26 	beq	r3,r4,2052b4 <_gp+0xffdf36d0>
  2052c4:	003e8706 	br	204ce4 <_gp+0xffdf3100>
  2052c8:	d8800517 	ldw	r2,20(sp)
  2052cc:	00a3c83a 	sub	r17,zero,r2
  2052d0:	8800a426 	beq	r17,zero,205564 <_dtoa_r+0x1498>
  2052d4:	888003cc 	andi	r2,r17,15
  2052d8:	100490fa 	slli	r2,r2,3
  2052dc:	00c00874 	movhi	r3,33
  2052e0:	18d07804 	addi	r3,r3,16864
  2052e4:	1885883a 	add	r2,r3,r2
  2052e8:	11800017 	ldw	r6,0(r2)
  2052ec:	11c00117 	ldw	r7,4(r2)
  2052f0:	9009883a 	mov	r4,r18
  2052f4:	980b883a 	mov	r5,r19
  2052f8:	8823d13a 	srai	r17,r17,4
  2052fc:	020d1580 	call	20d158 <__muldf3>
  205300:	d8800f15 	stw	r2,60(sp)
  205304:	d8c01015 	stw	r3,64(sp)
  205308:	8800e826 	beq	r17,zero,2056ac <_dtoa_r+0x15e0>
  20530c:	05000874 	movhi	r20,33
  205310:	a5106e04 	addi	r20,r20,16824
  205314:	04000084 	movi	r16,2
  205318:	8980004c 	andi	r6,r17,1
  20531c:	1009883a 	mov	r4,r2
  205320:	8823d07a 	srai	r17,r17,1
  205324:	180b883a 	mov	r5,r3
  205328:	30000426 	beq	r6,zero,20533c <_dtoa_r+0x1270>
  20532c:	a1800017 	ldw	r6,0(r20)
  205330:	a1c00117 	ldw	r7,4(r20)
  205334:	84000044 	addi	r16,r16,1
  205338:	020d1580 	call	20d158 <__muldf3>
  20533c:	a5000204 	addi	r20,r20,8
  205340:	883ff51e 	bne	r17,zero,205318 <_gp+0xffdf3734>
  205344:	d8800f15 	stw	r2,60(sp)
  205348:	d8c01015 	stw	r3,64(sp)
  20534c:	003c7606 	br	204528 <_gp+0xffdf2944>
  205350:	00c00c04 	movi	r3,48
  205354:	10c00005 	stb	r3,0(r2)
  205358:	d8c00517 	ldw	r3,20(sp)
  20535c:	bd3fffc3 	ldbu	r20,-1(r23)
  205360:	18c00044 	addi	r3,r3,1
  205364:	d8c00515 	stw	r3,20(sp)
  205368:	003db906 	br	204a50 <_gp+0xffdf2e6c>
  20536c:	89400117 	ldw	r5,4(r17)
  205370:	e009883a 	mov	r4,fp
  205374:	02077840 	call	207784 <_Balloc>
  205378:	89800417 	ldw	r6,16(r17)
  20537c:	89400304 	addi	r5,r17,12
  205380:	11000304 	addi	r4,r2,12
  205384:	31800084 	addi	r6,r6,2
  205388:	318d883a 	add	r6,r6,r6
  20538c:	318d883a 	add	r6,r6,r6
  205390:	1027883a 	mov	r19,r2
  205394:	02073b80 	call	2073b8 <memcpy>
  205398:	01800044 	movi	r6,1
  20539c:	980b883a 	mov	r5,r19
  2053a0:	e009883a 	mov	r4,fp
  2053a4:	0207fc00 	call	207fc0 <__lshift>
  2053a8:	1029883a 	mov	r20,r2
  2053ac:	003ecc06 	br	204ee0 <_gp+0xffdf32fc>
  2053b0:	00800e44 	movi	r2,57
  2053b4:	90809026 	beq	r18,r2,2055f8 <_dtoa_r+0x152c>
  2053b8:	92000044 	addi	r8,r18,1
  2053bc:	003f1f06 	br	20503c <_gp+0xffdf3458>
  2053c0:	9011883a 	mov	r8,r18
  2053c4:	8825883a 	mov	r18,r17
  2053c8:	a023883a 	mov	r17,r20
  2053cc:	003e2906 	br	204c74 <_gp+0xffdf3090>
  2053d0:	002b883a 	mov	r21,zero
  2053d4:	0023883a 	mov	r17,zero
  2053d8:	003f5406 	br	20512c <_gp+0xffdf3548>
  2053dc:	61bfffc4 	addi	r6,r12,-1
  2053e0:	300490fa 	slli	r2,r6,3
  2053e4:	00c00874 	movhi	r3,33
  2053e8:	18d07804 	addi	r3,r3,16864
  2053ec:	1885883a 	add	r2,r3,r2
  2053f0:	11000017 	ldw	r4,0(r2)
  2053f4:	11400117 	ldw	r5,4(r2)
  2053f8:	d8800717 	ldw	r2,28(sp)
  2053fc:	880f883a 	mov	r7,r17
  205400:	d9801215 	stw	r6,72(sp)
  205404:	800d883a 	mov	r6,r16
  205408:	db001615 	stw	r12,88(sp)
  20540c:	15c00044 	addi	r23,r2,1
  205410:	020d1580 	call	20d158 <__muldf3>
  205414:	d9401017 	ldw	r5,64(sp)
  205418:	d9000f17 	ldw	r4,60(sp)
  20541c:	d8c01515 	stw	r3,84(sp)
  205420:	d8801415 	stw	r2,80(sp)
  205424:	020e2c00 	call	20e2c0 <__fixdfsi>
  205428:	1009883a 	mov	r4,r2
  20542c:	1021883a 	mov	r16,r2
  205430:	020e3400 	call	20e340 <__floatsidf>
  205434:	d9000f17 	ldw	r4,60(sp)
  205438:	d9401017 	ldw	r5,64(sp)
  20543c:	100d883a 	mov	r6,r2
  205440:	180f883a 	mov	r7,r3
  205444:	020d9c40 	call	20d9c4 <__subdf3>
  205448:	1829883a 	mov	r20,r3
  20544c:	d8c00717 	ldw	r3,28(sp)
  205450:	84000c04 	addi	r16,r16,48
  205454:	1023883a 	mov	r17,r2
  205458:	1c000005 	stb	r16,0(r3)
  20545c:	db001617 	ldw	r12,88(sp)
  205460:	00800044 	movi	r2,1
  205464:	60802226 	beq	r12,r2,2054f0 <_dtoa_r+0x1424>
  205468:	d9c00717 	ldw	r7,28(sp)
  20546c:	8805883a 	mov	r2,r17
  205470:	b82b883a 	mov	r21,r23
  205474:	3b19883a 	add	r12,r7,r12
  205478:	6023883a 	mov	r17,r12
  20547c:	a007883a 	mov	r3,r20
  205480:	dc800f15 	stw	r18,60(sp)
  205484:	000d883a 	mov	r6,zero
  205488:	01d00934 	movhi	r7,16420
  20548c:	1009883a 	mov	r4,r2
  205490:	180b883a 	mov	r5,r3
  205494:	020d1580 	call	20d158 <__muldf3>
  205498:	180b883a 	mov	r5,r3
  20549c:	1009883a 	mov	r4,r2
  2054a0:	1829883a 	mov	r20,r3
  2054a4:	1025883a 	mov	r18,r2
  2054a8:	020e2c00 	call	20e2c0 <__fixdfsi>
  2054ac:	1009883a 	mov	r4,r2
  2054b0:	1021883a 	mov	r16,r2
  2054b4:	020e3400 	call	20e340 <__floatsidf>
  2054b8:	100d883a 	mov	r6,r2
  2054bc:	180f883a 	mov	r7,r3
  2054c0:	9009883a 	mov	r4,r18
  2054c4:	a00b883a 	mov	r5,r20
  2054c8:	84000c04 	addi	r16,r16,48
  2054cc:	020d9c40 	call	20d9c4 <__subdf3>
  2054d0:	ad400044 	addi	r21,r21,1
  2054d4:	ac3fffc5 	stb	r16,-1(r21)
  2054d8:	ac7fea1e 	bne	r21,r17,205484 <_gp+0xffdf38a0>
  2054dc:	1023883a 	mov	r17,r2
  2054e0:	d8801217 	ldw	r2,72(sp)
  2054e4:	dc800f17 	ldw	r18,60(sp)
  2054e8:	1829883a 	mov	r20,r3
  2054ec:	b8af883a 	add	r23,r23,r2
  2054f0:	d9001417 	ldw	r4,80(sp)
  2054f4:	d9401517 	ldw	r5,84(sp)
  2054f8:	000d883a 	mov	r6,zero
  2054fc:	01cff834 	movhi	r7,16352
  205500:	020bc840 	call	20bc84 <__adddf3>
  205504:	880d883a 	mov	r6,r17
  205508:	a00f883a 	mov	r7,r20
  20550c:	1009883a 	mov	r4,r2
  205510:	180b883a 	mov	r5,r3
  205514:	020d0640 	call	20d064 <__ledf2>
  205518:	10003e0e 	bge	r2,zero,205614 <_dtoa_r+0x1548>
  20551c:	d9001317 	ldw	r4,76(sp)
  205520:	bd3fffc3 	ldbu	r20,-1(r23)
  205524:	d9000515 	stw	r4,20(sp)
  205528:	003d3b06 	br	204a18 <_gp+0xffdf2e34>
  20552c:	0027883a 	mov	r19,zero
  205530:	003f1b06 	br	2051a0 <_gp+0xffdf35bc>
  205534:	d8800817 	ldw	r2,32(sp)
  205538:	11e9c83a 	sub	r20,r2,r7
  20553c:	0005883a 	mov	r2,zero
  205540:	003d5406 	br	204a94 <_gp+0xffdf2eb0>
  205544:	00800044 	movi	r2,1
  205548:	003dc706 	br	204c68 <_gp+0xffdf3084>
  20554c:	d8c00217 	ldw	r3,8(sp)
  205550:	00800d84 	movi	r2,54
  205554:	dd400a17 	ldw	r21,40(sp)
  205558:	10c5c83a 	sub	r2,r2,r3
  20555c:	dd000817 	ldw	r20,32(sp)
  205560:	003d4c06 	br	204a94 <_gp+0xffdf2eb0>
  205564:	dc800f15 	stw	r18,60(sp)
  205568:	dcc01015 	stw	r19,64(sp)
  20556c:	04000084 	movi	r16,2
  205570:	003bed06 	br	204528 <_gp+0xffdf2944>
  205574:	d9000617 	ldw	r4,24(sp)
  205578:	203f0d26 	beq	r4,zero,2051b0 <_gp+0xffdf35cc>
  20557c:	d9800c17 	ldw	r6,48(sp)
  205580:	01bcab0e 	bge	zero,r6,204830 <_gp+0xffdf2c4c>
  205584:	d9401017 	ldw	r5,64(sp)
  205588:	d9000f17 	ldw	r4,60(sp)
  20558c:	000d883a 	mov	r6,zero
  205590:	01d00934 	movhi	r7,16420
  205594:	020d1580 	call	20d158 <__muldf3>
  205598:	81000044 	addi	r4,r16,1
  20559c:	d8800f15 	stw	r2,60(sp)
  2055a0:	d8c01015 	stw	r3,64(sp)
  2055a4:	020e3400 	call	20e340 <__floatsidf>
  2055a8:	d9800f17 	ldw	r6,60(sp)
  2055ac:	d9c01017 	ldw	r7,64(sp)
  2055b0:	1009883a 	mov	r4,r2
  2055b4:	180b883a 	mov	r5,r3
  2055b8:	020d1580 	call	20d158 <__muldf3>
  2055bc:	01d00734 	movhi	r7,16412
  2055c0:	000d883a 	mov	r6,zero
  2055c4:	1009883a 	mov	r4,r2
  2055c8:	180b883a 	mov	r5,r3
  2055cc:	020bc840 	call	20bc84 <__adddf3>
  2055d0:	d9c00517 	ldw	r7,20(sp)
  2055d4:	047f3034 	movhi	r17,64704
  2055d8:	1021883a 	mov	r16,r2
  2055dc:	39ffffc4 	addi	r7,r7,-1
  2055e0:	d9c01315 	stw	r7,76(sp)
  2055e4:	1c63883a 	add	r17,r3,r17
  2055e8:	db000c17 	ldw	r12,48(sp)
  2055ec:	003bea06 	br	204598 <_gp+0xffdf29b4>
  2055f0:	dc000915 	stw	r16,36(sp)
  2055f4:	003e0e06 	br	204e30 <_gp+0xffdf324c>
  2055f8:	01000e44 	movi	r4,57
  2055fc:	8825883a 	mov	r18,r17
  205600:	9dc00044 	addi	r23,r19,1
  205604:	99000005 	stb	r4,0(r19)
  205608:	a023883a 	mov	r17,r20
  20560c:	dc000915 	stw	r16,36(sp)
  205610:	003da406 	br	204ca4 <_gp+0xffdf30c0>
  205614:	d9801417 	ldw	r6,80(sp)
  205618:	d9c01517 	ldw	r7,84(sp)
  20561c:	0009883a 	mov	r4,zero
  205620:	014ff834 	movhi	r5,16352
  205624:	020d9c40 	call	20d9c4 <__subdf3>
  205628:	880d883a 	mov	r6,r17
  20562c:	a00f883a 	mov	r7,r20
  205630:	1009883a 	mov	r4,r2
  205634:	180b883a 	mov	r5,r3
  205638:	020cf880 	call	20cf88 <__gedf2>
  20563c:	00bc7c0e 	bge	zero,r2,204830 <_gp+0xffdf2c4c>
  205640:	01000c04 	movi	r4,48
  205644:	00000106 	br	20564c <_dtoa_r+0x1580>
  205648:	102f883a 	mov	r23,r2
  20564c:	b8bfffc4 	addi	r2,r23,-1
  205650:	10c00007 	ldb	r3,0(r2)
  205654:	193ffc26 	beq	r3,r4,205648 <_gp+0xffdf3a64>
  205658:	d9801317 	ldw	r6,76(sp)
  20565c:	d9800515 	stw	r6,20(sp)
  205660:	003c4406 	br	204774 <_gp+0xffdf2b90>
  205664:	d9801317 	ldw	r6,76(sp)
  205668:	d9800515 	stw	r6,20(sp)
  20566c:	003cea06 	br	204a18 <_gp+0xffdf2e34>
  205670:	dd800f17 	ldw	r22,60(sp)
  205674:	dcc01017 	ldw	r19,64(sp)
  205678:	dc801217 	ldw	r18,72(sp)
  20567c:	003c6c06 	br	204830 <_gp+0xffdf2c4c>
  205680:	903e031e 	bne	r18,zero,204e90 <_gp+0xffdf32ac>
  205684:	003ebb06 	br	205174 <_gp+0xffdf3590>
  205688:	103e6c1e 	bne	r2,zero,20503c <_gp+0xffdf3458>
  20568c:	4080004c 	andi	r2,r8,1
  205690:	103e6a26 	beq	r2,zero,20503c <_gp+0xffdf3458>
  205694:	003e6606 	br	205030 <_gp+0xffdf344c>
  205698:	d8c00317 	ldw	r3,12(sp)
  20569c:	00800084 	movi	r2,2
  2056a0:	10c02916 	blt	r2,r3,205748 <_dtoa_r+0x167c>
  2056a4:	d9000c17 	ldw	r4,48(sp)
  2056a8:	003e8806 	br	2050cc <_gp+0xffdf34e8>
  2056ac:	04000084 	movi	r16,2
  2056b0:	003b9d06 	br	204528 <_gp+0xffdf2944>
  2056b4:	d9001317 	ldw	r4,76(sp)
  2056b8:	d9000515 	stw	r4,20(sp)
  2056bc:	003cd606 	br	204a18 <_gp+0xffdf2e34>
  2056c0:	d8801317 	ldw	r2,76(sp)
  2056c4:	d8800515 	stw	r2,20(sp)
  2056c8:	003c2a06 	br	204774 <_gp+0xffdf2b90>
  2056cc:	d9800317 	ldw	r6,12(sp)
  2056d0:	00800084 	movi	r2,2
  2056d4:	11801516 	blt	r2,r6,20572c <_dtoa_r+0x1660>
  2056d8:	d9c00c17 	ldw	r7,48(sp)
  2056dc:	d9c00615 	stw	r7,24(sp)
  2056e0:	003df706 	br	204ec0 <_gp+0xffdf32dc>
  2056e4:	193d3926 	beq	r3,r4,204bcc <_gp+0xffdf2fe8>
  2056e8:	00c00f04 	movi	r3,60
  2056ec:	1885c83a 	sub	r2,r3,r2
  2056f0:	003ddf06 	br	204e70 <_gp+0xffdf328c>
  2056f4:	e009883a 	mov	r4,fp
  2056f8:	e0001115 	stw	zero,68(fp)
  2056fc:	000b883a 	mov	r5,zero
  205700:	02077840 	call	207784 <_Balloc>
  205704:	d8800715 	stw	r2,28(sp)
  205708:	d8c00717 	ldw	r3,28(sp)
  20570c:	00bfffc4 	movi	r2,-1
  205710:	01000044 	movi	r4,1
  205714:	d8800c15 	stw	r2,48(sp)
  205718:	e0c01015 	stw	r3,64(fp)
  20571c:	d9000b15 	stw	r4,44(sp)
  205720:	d8800615 	stw	r2,24(sp)
  205724:	d8002215 	stw	zero,136(sp)
  205728:	003c4106 	br	204830 <_gp+0xffdf2c4c>
  20572c:	d8c00c17 	ldw	r3,48(sp)
  205730:	d8c00615 	stw	r3,24(sp)
  205734:	003e7006 	br	2050f8 <_gp+0xffdf3514>
  205738:	04400044 	movi	r17,1
  20573c:	003b2006 	br	2043c0 <_gp+0xffdf27dc>
  205740:	000b883a 	mov	r5,zero
  205744:	003b3d06 	br	20443c <_gp+0xffdf2858>
  205748:	d8800c17 	ldw	r2,48(sp)
  20574c:	d8800615 	stw	r2,24(sp)
  205750:	003e6906 	br	2050f8 <_gp+0xffdf3514>

00205754 <__sflush_r>:
  205754:	2880030b 	ldhu	r2,12(r5)
  205758:	defffb04 	addi	sp,sp,-20
  20575c:	dcc00315 	stw	r19,12(sp)
  205760:	dc400115 	stw	r17,4(sp)
  205764:	dfc00415 	stw	ra,16(sp)
  205768:	dc800215 	stw	r18,8(sp)
  20576c:	dc000015 	stw	r16,0(sp)
  205770:	10c0020c 	andi	r3,r2,8
  205774:	2823883a 	mov	r17,r5
  205778:	2027883a 	mov	r19,r4
  20577c:	1800311e 	bne	r3,zero,205844 <__sflush_r+0xf0>
  205780:	28c00117 	ldw	r3,4(r5)
  205784:	10820014 	ori	r2,r2,2048
  205788:	2880030d 	sth	r2,12(r5)
  20578c:	00c04b0e 	bge	zero,r3,2058bc <__sflush_r+0x168>
  205790:	8a000a17 	ldw	r8,40(r17)
  205794:	40002326 	beq	r8,zero,205824 <__sflush_r+0xd0>
  205798:	9c000017 	ldw	r16,0(r19)
  20579c:	10c4000c 	andi	r3,r2,4096
  2057a0:	98000015 	stw	zero,0(r19)
  2057a4:	18004826 	beq	r3,zero,2058c8 <__sflush_r+0x174>
  2057a8:	89801417 	ldw	r6,80(r17)
  2057ac:	10c0010c 	andi	r3,r2,4
  2057b0:	18000626 	beq	r3,zero,2057cc <__sflush_r+0x78>
  2057b4:	88c00117 	ldw	r3,4(r17)
  2057b8:	88800c17 	ldw	r2,48(r17)
  2057bc:	30cdc83a 	sub	r6,r6,r3
  2057c0:	10000226 	beq	r2,zero,2057cc <__sflush_r+0x78>
  2057c4:	88800f17 	ldw	r2,60(r17)
  2057c8:	308dc83a 	sub	r6,r6,r2
  2057cc:	89400717 	ldw	r5,28(r17)
  2057d0:	000f883a 	mov	r7,zero
  2057d4:	9809883a 	mov	r4,r19
  2057d8:	403ee83a 	callr	r8
  2057dc:	00ffffc4 	movi	r3,-1
  2057e0:	10c04426 	beq	r2,r3,2058f4 <__sflush_r+0x1a0>
  2057e4:	88c0030b 	ldhu	r3,12(r17)
  2057e8:	89000417 	ldw	r4,16(r17)
  2057ec:	88000115 	stw	zero,4(r17)
  2057f0:	197dffcc 	andi	r5,r3,63487
  2057f4:	8940030d 	sth	r5,12(r17)
  2057f8:	89000015 	stw	r4,0(r17)
  2057fc:	18c4000c 	andi	r3,r3,4096
  205800:	18002c1e 	bne	r3,zero,2058b4 <__sflush_r+0x160>
  205804:	89400c17 	ldw	r5,48(r17)
  205808:	9c000015 	stw	r16,0(r19)
  20580c:	28000526 	beq	r5,zero,205824 <__sflush_r+0xd0>
  205810:	88801004 	addi	r2,r17,64
  205814:	28800226 	beq	r5,r2,205820 <__sflush_r+0xcc>
  205818:	9809883a 	mov	r4,r19
  20581c:	0205ed00 	call	205ed0 <_free_r>
  205820:	88000c15 	stw	zero,48(r17)
  205824:	0005883a 	mov	r2,zero
  205828:	dfc00417 	ldw	ra,16(sp)
  20582c:	dcc00317 	ldw	r19,12(sp)
  205830:	dc800217 	ldw	r18,8(sp)
  205834:	dc400117 	ldw	r17,4(sp)
  205838:	dc000017 	ldw	r16,0(sp)
  20583c:	dec00504 	addi	sp,sp,20
  205840:	f800283a 	ret
  205844:	2c800417 	ldw	r18,16(r5)
  205848:	903ff626 	beq	r18,zero,205824 <_gp+0xffdf3c40>
  20584c:	2c000017 	ldw	r16,0(r5)
  205850:	108000cc 	andi	r2,r2,3
  205854:	2c800015 	stw	r18,0(r5)
  205858:	84a1c83a 	sub	r16,r16,r18
  20585c:	1000131e 	bne	r2,zero,2058ac <__sflush_r+0x158>
  205860:	28800517 	ldw	r2,20(r5)
  205864:	88800215 	stw	r2,8(r17)
  205868:	04000316 	blt	zero,r16,205878 <__sflush_r+0x124>
  20586c:	003fed06 	br	205824 <_gp+0xffdf3c40>
  205870:	90a5883a 	add	r18,r18,r2
  205874:	043feb0e 	bge	zero,r16,205824 <_gp+0xffdf3c40>
  205878:	88800917 	ldw	r2,36(r17)
  20587c:	89400717 	ldw	r5,28(r17)
  205880:	800f883a 	mov	r7,r16
  205884:	900d883a 	mov	r6,r18
  205888:	9809883a 	mov	r4,r19
  20588c:	103ee83a 	callr	r2
  205890:	80a1c83a 	sub	r16,r16,r2
  205894:	00bff616 	blt	zero,r2,205870 <_gp+0xffdf3c8c>
  205898:	88c0030b 	ldhu	r3,12(r17)
  20589c:	00bfffc4 	movi	r2,-1
  2058a0:	18c01014 	ori	r3,r3,64
  2058a4:	88c0030d 	sth	r3,12(r17)
  2058a8:	003fdf06 	br	205828 <_gp+0xffdf3c44>
  2058ac:	0005883a 	mov	r2,zero
  2058b0:	003fec06 	br	205864 <_gp+0xffdf3c80>
  2058b4:	88801415 	stw	r2,80(r17)
  2058b8:	003fd206 	br	205804 <_gp+0xffdf3c20>
  2058bc:	28c00f17 	ldw	r3,60(r5)
  2058c0:	00ffb316 	blt	zero,r3,205790 <_gp+0xffdf3bac>
  2058c4:	003fd706 	br	205824 <_gp+0xffdf3c40>
  2058c8:	89400717 	ldw	r5,28(r17)
  2058cc:	000d883a 	mov	r6,zero
  2058d0:	01c00044 	movi	r7,1
  2058d4:	9809883a 	mov	r4,r19
  2058d8:	403ee83a 	callr	r8
  2058dc:	100d883a 	mov	r6,r2
  2058e0:	00bfffc4 	movi	r2,-1
  2058e4:	30801426 	beq	r6,r2,205938 <__sflush_r+0x1e4>
  2058e8:	8880030b 	ldhu	r2,12(r17)
  2058ec:	8a000a17 	ldw	r8,40(r17)
  2058f0:	003fae06 	br	2057ac <_gp+0xffdf3bc8>
  2058f4:	98c00017 	ldw	r3,0(r19)
  2058f8:	183fba26 	beq	r3,zero,2057e4 <_gp+0xffdf3c00>
  2058fc:	01000744 	movi	r4,29
  205900:	19000626 	beq	r3,r4,20591c <__sflush_r+0x1c8>
  205904:	01000584 	movi	r4,22
  205908:	19000426 	beq	r3,r4,20591c <__sflush_r+0x1c8>
  20590c:	88c0030b 	ldhu	r3,12(r17)
  205910:	18c01014 	ori	r3,r3,64
  205914:	88c0030d 	sth	r3,12(r17)
  205918:	003fc306 	br	205828 <_gp+0xffdf3c44>
  20591c:	8880030b 	ldhu	r2,12(r17)
  205920:	88c00417 	ldw	r3,16(r17)
  205924:	88000115 	stw	zero,4(r17)
  205928:	10bdffcc 	andi	r2,r2,63487
  20592c:	8880030d 	sth	r2,12(r17)
  205930:	88c00015 	stw	r3,0(r17)
  205934:	003fb306 	br	205804 <_gp+0xffdf3c20>
  205938:	98800017 	ldw	r2,0(r19)
  20593c:	103fea26 	beq	r2,zero,2058e8 <_gp+0xffdf3d04>
  205940:	00c00744 	movi	r3,29
  205944:	10c00226 	beq	r2,r3,205950 <__sflush_r+0x1fc>
  205948:	00c00584 	movi	r3,22
  20594c:	10c0031e 	bne	r2,r3,20595c <__sflush_r+0x208>
  205950:	9c000015 	stw	r16,0(r19)
  205954:	0005883a 	mov	r2,zero
  205958:	003fb306 	br	205828 <_gp+0xffdf3c44>
  20595c:	88c0030b 	ldhu	r3,12(r17)
  205960:	3005883a 	mov	r2,r6
  205964:	18c01014 	ori	r3,r3,64
  205968:	88c0030d 	sth	r3,12(r17)
  20596c:	003fae06 	br	205828 <_gp+0xffdf3c44>

00205970 <_fflush_r>:
  205970:	defffd04 	addi	sp,sp,-12
  205974:	dc000115 	stw	r16,4(sp)
  205978:	dfc00215 	stw	ra,8(sp)
  20597c:	2021883a 	mov	r16,r4
  205980:	20000226 	beq	r4,zero,20598c <_fflush_r+0x1c>
  205984:	20800e17 	ldw	r2,56(r4)
  205988:	10000c26 	beq	r2,zero,2059bc <_fflush_r+0x4c>
  20598c:	2880030f 	ldh	r2,12(r5)
  205990:	1000051e 	bne	r2,zero,2059a8 <_fflush_r+0x38>
  205994:	0005883a 	mov	r2,zero
  205998:	dfc00217 	ldw	ra,8(sp)
  20599c:	dc000117 	ldw	r16,4(sp)
  2059a0:	dec00304 	addi	sp,sp,12
  2059a4:	f800283a 	ret
  2059a8:	8009883a 	mov	r4,r16
  2059ac:	dfc00217 	ldw	ra,8(sp)
  2059b0:	dc000117 	ldw	r16,4(sp)
  2059b4:	dec00304 	addi	sp,sp,12
  2059b8:	02057541 	jmpi	205754 <__sflush_r>
  2059bc:	d9400015 	stw	r5,0(sp)
  2059c0:	0205d5c0 	call	205d5c <__sinit>
  2059c4:	d9400017 	ldw	r5,0(sp)
  2059c8:	003ff006 	br	20598c <_gp+0xffdf3da8>

002059cc <fflush>:
  2059cc:	20000526 	beq	r4,zero,2059e4 <fflush+0x18>
  2059d0:	00801074 	movhi	r2,65
  2059d4:	10a6fa04 	addi	r2,r2,-25624
  2059d8:	200b883a 	mov	r5,r4
  2059dc:	11000017 	ldw	r4,0(r2)
  2059e0:	02059701 	jmpi	205970 <_fflush_r>
  2059e4:	00801074 	movhi	r2,65
  2059e8:	10a6f904 	addi	r2,r2,-25628
  2059ec:	11000017 	ldw	r4,0(r2)
  2059f0:	01400834 	movhi	r5,32
  2059f4:	29565c04 	addi	r5,r5,22896
  2059f8:	020676c1 	jmpi	20676c <_fwalk_reent>

002059fc <__fp_unlock>:
  2059fc:	0005883a 	mov	r2,zero
  205a00:	f800283a 	ret

00205a04 <_cleanup_r>:
  205a04:	01400874 	movhi	r5,33
  205a08:	296a4204 	addi	r5,r5,-22264
  205a0c:	020676c1 	jmpi	20676c <_fwalk_reent>

00205a10 <__sinit.part.1>:
  205a10:	defff704 	addi	sp,sp,-36
  205a14:	00c00834 	movhi	r3,32
  205a18:	dfc00815 	stw	ra,32(sp)
  205a1c:	ddc00715 	stw	r23,28(sp)
  205a20:	dd800615 	stw	r22,24(sp)
  205a24:	dd400515 	stw	r21,20(sp)
  205a28:	dd000415 	stw	r20,16(sp)
  205a2c:	dcc00315 	stw	r19,12(sp)
  205a30:	dc800215 	stw	r18,8(sp)
  205a34:	dc400115 	stw	r17,4(sp)
  205a38:	dc000015 	stw	r16,0(sp)
  205a3c:	18d68104 	addi	r3,r3,23044
  205a40:	24000117 	ldw	r16,4(r4)
  205a44:	20c00f15 	stw	r3,60(r4)
  205a48:	2080bb04 	addi	r2,r4,748
  205a4c:	00c000c4 	movi	r3,3
  205a50:	20c0b915 	stw	r3,740(r4)
  205a54:	2080ba15 	stw	r2,744(r4)
  205a58:	2000b815 	stw	zero,736(r4)
  205a5c:	05c00204 	movi	r23,8
  205a60:	00800104 	movi	r2,4
  205a64:	2025883a 	mov	r18,r4
  205a68:	b80d883a 	mov	r6,r23
  205a6c:	81001704 	addi	r4,r16,92
  205a70:	000b883a 	mov	r5,zero
  205a74:	80000015 	stw	zero,0(r16)
  205a78:	80000115 	stw	zero,4(r16)
  205a7c:	80000215 	stw	zero,8(r16)
  205a80:	8080030d 	sth	r2,12(r16)
  205a84:	80001915 	stw	zero,100(r16)
  205a88:	8000038d 	sth	zero,14(r16)
  205a8c:	80000415 	stw	zero,16(r16)
  205a90:	80000515 	stw	zero,20(r16)
  205a94:	80000615 	stw	zero,24(r16)
  205a98:	020765c0 	call	20765c <memset>
  205a9c:	05800874 	movhi	r22,33
  205aa0:	94400217 	ldw	r17,8(r18)
  205aa4:	05400874 	movhi	r21,33
  205aa8:	05000874 	movhi	r20,33
  205aac:	04c00874 	movhi	r19,33
  205ab0:	b5a39a04 	addi	r22,r22,-29080
  205ab4:	ad63b104 	addi	r21,r21,-28988
  205ab8:	a523d004 	addi	r20,r20,-28864
  205abc:	9ce3e704 	addi	r19,r19,-28772
  205ac0:	85800815 	stw	r22,32(r16)
  205ac4:	85400915 	stw	r21,36(r16)
  205ac8:	85000a15 	stw	r20,40(r16)
  205acc:	84c00b15 	stw	r19,44(r16)
  205ad0:	84000715 	stw	r16,28(r16)
  205ad4:	00800284 	movi	r2,10
  205ad8:	8880030d 	sth	r2,12(r17)
  205adc:	00800044 	movi	r2,1
  205ae0:	b80d883a 	mov	r6,r23
  205ae4:	89001704 	addi	r4,r17,92
  205ae8:	000b883a 	mov	r5,zero
  205aec:	88000015 	stw	zero,0(r17)
  205af0:	88000115 	stw	zero,4(r17)
  205af4:	88000215 	stw	zero,8(r17)
  205af8:	88001915 	stw	zero,100(r17)
  205afc:	8880038d 	sth	r2,14(r17)
  205b00:	88000415 	stw	zero,16(r17)
  205b04:	88000515 	stw	zero,20(r17)
  205b08:	88000615 	stw	zero,24(r17)
  205b0c:	020765c0 	call	20765c <memset>
  205b10:	94000317 	ldw	r16,12(r18)
  205b14:	00800484 	movi	r2,18
  205b18:	8c400715 	stw	r17,28(r17)
  205b1c:	8d800815 	stw	r22,32(r17)
  205b20:	8d400915 	stw	r21,36(r17)
  205b24:	8d000a15 	stw	r20,40(r17)
  205b28:	8cc00b15 	stw	r19,44(r17)
  205b2c:	8080030d 	sth	r2,12(r16)
  205b30:	00800084 	movi	r2,2
  205b34:	80000015 	stw	zero,0(r16)
  205b38:	80000115 	stw	zero,4(r16)
  205b3c:	80000215 	stw	zero,8(r16)
  205b40:	80001915 	stw	zero,100(r16)
  205b44:	8080038d 	sth	r2,14(r16)
  205b48:	80000415 	stw	zero,16(r16)
  205b4c:	80000515 	stw	zero,20(r16)
  205b50:	80000615 	stw	zero,24(r16)
  205b54:	b80d883a 	mov	r6,r23
  205b58:	000b883a 	mov	r5,zero
  205b5c:	81001704 	addi	r4,r16,92
  205b60:	020765c0 	call	20765c <memset>
  205b64:	00800044 	movi	r2,1
  205b68:	84000715 	stw	r16,28(r16)
  205b6c:	85800815 	stw	r22,32(r16)
  205b70:	85400915 	stw	r21,36(r16)
  205b74:	85000a15 	stw	r20,40(r16)
  205b78:	84c00b15 	stw	r19,44(r16)
  205b7c:	90800e15 	stw	r2,56(r18)
  205b80:	dfc00817 	ldw	ra,32(sp)
  205b84:	ddc00717 	ldw	r23,28(sp)
  205b88:	dd800617 	ldw	r22,24(sp)
  205b8c:	dd400517 	ldw	r21,20(sp)
  205b90:	dd000417 	ldw	r20,16(sp)
  205b94:	dcc00317 	ldw	r19,12(sp)
  205b98:	dc800217 	ldw	r18,8(sp)
  205b9c:	dc400117 	ldw	r17,4(sp)
  205ba0:	dc000017 	ldw	r16,0(sp)
  205ba4:	dec00904 	addi	sp,sp,36
  205ba8:	f800283a 	ret

00205bac <__fp_lock>:
  205bac:	0005883a 	mov	r2,zero
  205bb0:	f800283a 	ret

00205bb4 <__sfmoreglue>:
  205bb4:	defffc04 	addi	sp,sp,-16
  205bb8:	dc800215 	stw	r18,8(sp)
  205bbc:	2825883a 	mov	r18,r5
  205bc0:	dc000015 	stw	r16,0(sp)
  205bc4:	01401a04 	movi	r5,104
  205bc8:	2021883a 	mov	r16,r4
  205bcc:	913fffc4 	addi	r4,r18,-1
  205bd0:	dfc00315 	stw	ra,12(sp)
  205bd4:	dc400115 	stw	r17,4(sp)
  205bd8:	020179c0 	call	20179c <__mulsi3>
  205bdc:	8009883a 	mov	r4,r16
  205be0:	11401d04 	addi	r5,r2,116
  205be4:	1023883a 	mov	r17,r2
  205be8:	0206ac80 	call	206ac8 <_malloc_r>
  205bec:	1021883a 	mov	r16,r2
  205bf0:	10000726 	beq	r2,zero,205c10 <__sfmoreglue+0x5c>
  205bf4:	11000304 	addi	r4,r2,12
  205bf8:	10000015 	stw	zero,0(r2)
  205bfc:	14800115 	stw	r18,4(r2)
  205c00:	11000215 	stw	r4,8(r2)
  205c04:	89801a04 	addi	r6,r17,104
  205c08:	000b883a 	mov	r5,zero
  205c0c:	020765c0 	call	20765c <memset>
  205c10:	8005883a 	mov	r2,r16
  205c14:	dfc00317 	ldw	ra,12(sp)
  205c18:	dc800217 	ldw	r18,8(sp)
  205c1c:	dc400117 	ldw	r17,4(sp)
  205c20:	dc000017 	ldw	r16,0(sp)
  205c24:	dec00404 	addi	sp,sp,16
  205c28:	f800283a 	ret

00205c2c <__sfp>:
  205c2c:	defffb04 	addi	sp,sp,-20
  205c30:	dc000015 	stw	r16,0(sp)
  205c34:	04001074 	movhi	r16,65
  205c38:	8426f904 	addi	r16,r16,-25628
  205c3c:	dcc00315 	stw	r19,12(sp)
  205c40:	2027883a 	mov	r19,r4
  205c44:	81000017 	ldw	r4,0(r16)
  205c48:	dfc00415 	stw	ra,16(sp)
  205c4c:	dc800215 	stw	r18,8(sp)
  205c50:	20800e17 	ldw	r2,56(r4)
  205c54:	dc400115 	stw	r17,4(sp)
  205c58:	1000021e 	bne	r2,zero,205c64 <__sfp+0x38>
  205c5c:	0205a100 	call	205a10 <__sinit.part.1>
  205c60:	81000017 	ldw	r4,0(r16)
  205c64:	2480b804 	addi	r18,r4,736
  205c68:	047fffc4 	movi	r17,-1
  205c6c:	91000117 	ldw	r4,4(r18)
  205c70:	94000217 	ldw	r16,8(r18)
  205c74:	213fffc4 	addi	r4,r4,-1
  205c78:	20000a16 	blt	r4,zero,205ca4 <__sfp+0x78>
  205c7c:	8080030f 	ldh	r2,12(r16)
  205c80:	10000c26 	beq	r2,zero,205cb4 <__sfp+0x88>
  205c84:	80c01d04 	addi	r3,r16,116
  205c88:	00000206 	br	205c94 <__sfp+0x68>
  205c8c:	18bfe60f 	ldh	r2,-104(r3)
  205c90:	10000826 	beq	r2,zero,205cb4 <__sfp+0x88>
  205c94:	213fffc4 	addi	r4,r4,-1
  205c98:	1c3ffd04 	addi	r16,r3,-12
  205c9c:	18c01a04 	addi	r3,r3,104
  205ca0:	247ffa1e 	bne	r4,r17,205c8c <_gp+0xffdf40a8>
  205ca4:	90800017 	ldw	r2,0(r18)
  205ca8:	10001d26 	beq	r2,zero,205d20 <__sfp+0xf4>
  205cac:	1025883a 	mov	r18,r2
  205cb0:	003fee06 	br	205c6c <_gp+0xffdf4088>
  205cb4:	00bfffc4 	movi	r2,-1
  205cb8:	8080038d 	sth	r2,14(r16)
  205cbc:	00800044 	movi	r2,1
  205cc0:	8080030d 	sth	r2,12(r16)
  205cc4:	80001915 	stw	zero,100(r16)
  205cc8:	80000015 	stw	zero,0(r16)
  205ccc:	80000215 	stw	zero,8(r16)
  205cd0:	80000115 	stw	zero,4(r16)
  205cd4:	80000415 	stw	zero,16(r16)
  205cd8:	80000515 	stw	zero,20(r16)
  205cdc:	80000615 	stw	zero,24(r16)
  205ce0:	01800204 	movi	r6,8
  205ce4:	000b883a 	mov	r5,zero
  205ce8:	81001704 	addi	r4,r16,92
  205cec:	020765c0 	call	20765c <memset>
  205cf0:	8005883a 	mov	r2,r16
  205cf4:	80000c15 	stw	zero,48(r16)
  205cf8:	80000d15 	stw	zero,52(r16)
  205cfc:	80001115 	stw	zero,68(r16)
  205d00:	80001215 	stw	zero,72(r16)
  205d04:	dfc00417 	ldw	ra,16(sp)
  205d08:	dcc00317 	ldw	r19,12(sp)
  205d0c:	dc800217 	ldw	r18,8(sp)
  205d10:	dc400117 	ldw	r17,4(sp)
  205d14:	dc000017 	ldw	r16,0(sp)
  205d18:	dec00504 	addi	sp,sp,20
  205d1c:	f800283a 	ret
  205d20:	01400104 	movi	r5,4
  205d24:	9809883a 	mov	r4,r19
  205d28:	0205bb40 	call	205bb4 <__sfmoreglue>
  205d2c:	90800015 	stw	r2,0(r18)
  205d30:	103fde1e 	bne	r2,zero,205cac <_gp+0xffdf40c8>
  205d34:	00800304 	movi	r2,12
  205d38:	98800015 	stw	r2,0(r19)
  205d3c:	0005883a 	mov	r2,zero
  205d40:	003ff006 	br	205d04 <_gp+0xffdf4120>

00205d44 <_cleanup>:
  205d44:	00801074 	movhi	r2,65
  205d48:	10a6f904 	addi	r2,r2,-25628
  205d4c:	11000017 	ldw	r4,0(r2)
  205d50:	01400874 	movhi	r5,33
  205d54:	296a4204 	addi	r5,r5,-22264
  205d58:	020676c1 	jmpi	20676c <_fwalk_reent>

00205d5c <__sinit>:
  205d5c:	20800e17 	ldw	r2,56(r4)
  205d60:	10000126 	beq	r2,zero,205d68 <__sinit+0xc>
  205d64:	f800283a 	ret
  205d68:	0205a101 	jmpi	205a10 <__sinit.part.1>

00205d6c <__sfp_lock_acquire>:
  205d6c:	f800283a 	ret

00205d70 <__sfp_lock_release>:
  205d70:	f800283a 	ret

00205d74 <__sinit_lock_acquire>:
  205d74:	f800283a 	ret

00205d78 <__sinit_lock_release>:
  205d78:	f800283a 	ret

00205d7c <__fp_lock_all>:
  205d7c:	00801074 	movhi	r2,65
  205d80:	10a6fa04 	addi	r2,r2,-25624
  205d84:	11000017 	ldw	r4,0(r2)
  205d88:	01400834 	movhi	r5,32
  205d8c:	2956eb04 	addi	r5,r5,23468
  205d90:	02066a81 	jmpi	2066a8 <_fwalk>

00205d94 <__fp_unlock_all>:
  205d94:	00801074 	movhi	r2,65
  205d98:	10a6fa04 	addi	r2,r2,-25624
  205d9c:	11000017 	ldw	r4,0(r2)
  205da0:	01400834 	movhi	r5,32
  205da4:	29567f04 	addi	r5,r5,23036
  205da8:	02066a81 	jmpi	2066a8 <_fwalk>

00205dac <_malloc_trim_r>:
  205dac:	defffb04 	addi	sp,sp,-20
  205db0:	dcc00315 	stw	r19,12(sp)
  205db4:	04c01074 	movhi	r19,65
  205db8:	dc800215 	stw	r18,8(sp)
  205dbc:	dc400115 	stw	r17,4(sp)
  205dc0:	dc000015 	stw	r16,0(sp)
  205dc4:	dfc00415 	stw	ra,16(sp)
  205dc8:	2821883a 	mov	r16,r5
  205dcc:	9ce12704 	addi	r19,r19,-31588
  205dd0:	2025883a 	mov	r18,r4
  205dd4:	020ea600 	call	20ea60 <__malloc_lock>
  205dd8:	98800217 	ldw	r2,8(r19)
  205ddc:	14400117 	ldw	r17,4(r2)
  205de0:	00bfff04 	movi	r2,-4
  205de4:	88a2703a 	and	r17,r17,r2
  205de8:	8c21c83a 	sub	r16,r17,r16
  205dec:	8403fbc4 	addi	r16,r16,4079
  205df0:	8020d33a 	srli	r16,r16,12
  205df4:	0083ffc4 	movi	r2,4095
  205df8:	843fffc4 	addi	r16,r16,-1
  205dfc:	8020933a 	slli	r16,r16,12
  205e00:	1400060e 	bge	r2,r16,205e1c <_malloc_trim_r+0x70>
  205e04:	000b883a 	mov	r5,zero
  205e08:	9009883a 	mov	r4,r18
  205e0c:	0208e140 	call	208e14 <_sbrk_r>
  205e10:	98c00217 	ldw	r3,8(r19)
  205e14:	1c47883a 	add	r3,r3,r17
  205e18:	10c00a26 	beq	r2,r3,205e44 <_malloc_trim_r+0x98>
  205e1c:	9009883a 	mov	r4,r18
  205e20:	020ea840 	call	20ea84 <__malloc_unlock>
  205e24:	0005883a 	mov	r2,zero
  205e28:	dfc00417 	ldw	ra,16(sp)
  205e2c:	dcc00317 	ldw	r19,12(sp)
  205e30:	dc800217 	ldw	r18,8(sp)
  205e34:	dc400117 	ldw	r17,4(sp)
  205e38:	dc000017 	ldw	r16,0(sp)
  205e3c:	dec00504 	addi	sp,sp,20
  205e40:	f800283a 	ret
  205e44:	040bc83a 	sub	r5,zero,r16
  205e48:	9009883a 	mov	r4,r18
  205e4c:	0208e140 	call	208e14 <_sbrk_r>
  205e50:	00ffffc4 	movi	r3,-1
  205e54:	10c00d26 	beq	r2,r3,205e8c <_malloc_trim_r+0xe0>
  205e58:	00c01074 	movhi	r3,65
  205e5c:	18e71d04 	addi	r3,r3,-25484
  205e60:	18800017 	ldw	r2,0(r3)
  205e64:	99000217 	ldw	r4,8(r19)
  205e68:	8c23c83a 	sub	r17,r17,r16
  205e6c:	8c400054 	ori	r17,r17,1
  205e70:	1421c83a 	sub	r16,r2,r16
  205e74:	24400115 	stw	r17,4(r4)
  205e78:	9009883a 	mov	r4,r18
  205e7c:	1c000015 	stw	r16,0(r3)
  205e80:	020ea840 	call	20ea84 <__malloc_unlock>
  205e84:	00800044 	movi	r2,1
  205e88:	003fe706 	br	205e28 <_gp+0xffdf4244>
  205e8c:	000b883a 	mov	r5,zero
  205e90:	9009883a 	mov	r4,r18
  205e94:	0208e140 	call	208e14 <_sbrk_r>
  205e98:	99000217 	ldw	r4,8(r19)
  205e9c:	014003c4 	movi	r5,15
  205ea0:	1107c83a 	sub	r3,r2,r4
  205ea4:	28ffdd0e 	bge	r5,r3,205e1c <_gp+0xffdf4238>
  205ea8:	01401074 	movhi	r5,65
  205eac:	2966fc04 	addi	r5,r5,-25616
  205eb0:	29400017 	ldw	r5,0(r5)
  205eb4:	18c00054 	ori	r3,r3,1
  205eb8:	20c00115 	stw	r3,4(r4)
  205ebc:	00c01074 	movhi	r3,65
  205ec0:	1145c83a 	sub	r2,r2,r5
  205ec4:	18e71d04 	addi	r3,r3,-25484
  205ec8:	18800015 	stw	r2,0(r3)
  205ecc:	003fd306 	br	205e1c <_gp+0xffdf4238>

00205ed0 <_free_r>:
  205ed0:	28004126 	beq	r5,zero,205fd8 <_free_r+0x108>
  205ed4:	defffd04 	addi	sp,sp,-12
  205ed8:	dc400115 	stw	r17,4(sp)
  205edc:	dc000015 	stw	r16,0(sp)
  205ee0:	2023883a 	mov	r17,r4
  205ee4:	2821883a 	mov	r16,r5
  205ee8:	dfc00215 	stw	ra,8(sp)
  205eec:	020ea600 	call	20ea60 <__malloc_lock>
  205ef0:	81ffff17 	ldw	r7,-4(r16)
  205ef4:	00bfff84 	movi	r2,-2
  205ef8:	01001074 	movhi	r4,65
  205efc:	81bffe04 	addi	r6,r16,-8
  205f00:	3884703a 	and	r2,r7,r2
  205f04:	21212704 	addi	r4,r4,-31588
  205f08:	308b883a 	add	r5,r6,r2
  205f0c:	2a400117 	ldw	r9,4(r5)
  205f10:	22000217 	ldw	r8,8(r4)
  205f14:	00ffff04 	movi	r3,-4
  205f18:	48c6703a 	and	r3,r9,r3
  205f1c:	2a005726 	beq	r5,r8,20607c <_free_r+0x1ac>
  205f20:	28c00115 	stw	r3,4(r5)
  205f24:	39c0004c 	andi	r7,r7,1
  205f28:	3800091e 	bne	r7,zero,205f50 <_free_r+0x80>
  205f2c:	823ffe17 	ldw	r8,-8(r16)
  205f30:	22400204 	addi	r9,r4,8
  205f34:	320dc83a 	sub	r6,r6,r8
  205f38:	31c00217 	ldw	r7,8(r6)
  205f3c:	1205883a 	add	r2,r2,r8
  205f40:	3a406526 	beq	r7,r9,2060d8 <_free_r+0x208>
  205f44:	32000317 	ldw	r8,12(r6)
  205f48:	3a000315 	stw	r8,12(r7)
  205f4c:	41c00215 	stw	r7,8(r8)
  205f50:	28cf883a 	add	r7,r5,r3
  205f54:	39c00117 	ldw	r7,4(r7)
  205f58:	39c0004c 	andi	r7,r7,1
  205f5c:	38003a26 	beq	r7,zero,206048 <_free_r+0x178>
  205f60:	10c00054 	ori	r3,r2,1
  205f64:	30c00115 	stw	r3,4(r6)
  205f68:	3087883a 	add	r3,r6,r2
  205f6c:	18800015 	stw	r2,0(r3)
  205f70:	00c07fc4 	movi	r3,511
  205f74:	18801936 	bltu	r3,r2,205fdc <_free_r+0x10c>
  205f78:	1004d0fa 	srli	r2,r2,3
  205f7c:	01c00044 	movi	r7,1
  205f80:	21400117 	ldw	r5,4(r4)
  205f84:	10c00044 	addi	r3,r2,1
  205f88:	18c7883a 	add	r3,r3,r3
  205f8c:	1005d0ba 	srai	r2,r2,2
  205f90:	18c7883a 	add	r3,r3,r3
  205f94:	18c7883a 	add	r3,r3,r3
  205f98:	1907883a 	add	r3,r3,r4
  205f9c:	3884983a 	sll	r2,r7,r2
  205fa0:	19c00017 	ldw	r7,0(r3)
  205fa4:	1a3ffe04 	addi	r8,r3,-8
  205fa8:	1144b03a 	or	r2,r2,r5
  205fac:	32000315 	stw	r8,12(r6)
  205fb0:	31c00215 	stw	r7,8(r6)
  205fb4:	20800115 	stw	r2,4(r4)
  205fb8:	19800015 	stw	r6,0(r3)
  205fbc:	39800315 	stw	r6,12(r7)
  205fc0:	8809883a 	mov	r4,r17
  205fc4:	dfc00217 	ldw	ra,8(sp)
  205fc8:	dc400117 	ldw	r17,4(sp)
  205fcc:	dc000017 	ldw	r16,0(sp)
  205fd0:	dec00304 	addi	sp,sp,12
  205fd4:	020ea841 	jmpi	20ea84 <__malloc_unlock>
  205fd8:	f800283a 	ret
  205fdc:	100ad27a 	srli	r5,r2,9
  205fe0:	00c00104 	movi	r3,4
  205fe4:	19404a36 	bltu	r3,r5,206110 <_free_r+0x240>
  205fe8:	100ad1ba 	srli	r5,r2,6
  205fec:	28c00e44 	addi	r3,r5,57
  205ff0:	18c7883a 	add	r3,r3,r3
  205ff4:	29400e04 	addi	r5,r5,56
  205ff8:	18c7883a 	add	r3,r3,r3
  205ffc:	18c7883a 	add	r3,r3,r3
  206000:	1909883a 	add	r4,r3,r4
  206004:	20c00017 	ldw	r3,0(r4)
  206008:	01c01074 	movhi	r7,65
  20600c:	213ffe04 	addi	r4,r4,-8
  206010:	39e12704 	addi	r7,r7,-31588
  206014:	20c04426 	beq	r4,r3,206128 <_free_r+0x258>
  206018:	01ffff04 	movi	r7,-4
  20601c:	19400117 	ldw	r5,4(r3)
  206020:	29ca703a 	and	r5,r5,r7
  206024:	1140022e 	bgeu	r2,r5,206030 <_free_r+0x160>
  206028:	18c00217 	ldw	r3,8(r3)
  20602c:	20fffb1e 	bne	r4,r3,20601c <_gp+0xffdf4438>
  206030:	19000317 	ldw	r4,12(r3)
  206034:	31000315 	stw	r4,12(r6)
  206038:	30c00215 	stw	r3,8(r6)
  20603c:	21800215 	stw	r6,8(r4)
  206040:	19800315 	stw	r6,12(r3)
  206044:	003fde06 	br	205fc0 <_gp+0xffdf43dc>
  206048:	29c00217 	ldw	r7,8(r5)
  20604c:	10c5883a 	add	r2,r2,r3
  206050:	00c01074 	movhi	r3,65
  206054:	18e12904 	addi	r3,r3,-31580
  206058:	38c03b26 	beq	r7,r3,206148 <_free_r+0x278>
  20605c:	2a000317 	ldw	r8,12(r5)
  206060:	11400054 	ori	r5,r2,1
  206064:	3087883a 	add	r3,r6,r2
  206068:	3a000315 	stw	r8,12(r7)
  20606c:	41c00215 	stw	r7,8(r8)
  206070:	31400115 	stw	r5,4(r6)
  206074:	18800015 	stw	r2,0(r3)
  206078:	003fbd06 	br	205f70 <_gp+0xffdf438c>
  20607c:	39c0004c 	andi	r7,r7,1
  206080:	10c5883a 	add	r2,r2,r3
  206084:	3800071e 	bne	r7,zero,2060a4 <_free_r+0x1d4>
  206088:	81fffe17 	ldw	r7,-8(r16)
  20608c:	31cdc83a 	sub	r6,r6,r7
  206090:	30c00317 	ldw	r3,12(r6)
  206094:	31400217 	ldw	r5,8(r6)
  206098:	11c5883a 	add	r2,r2,r7
  20609c:	28c00315 	stw	r3,12(r5)
  2060a0:	19400215 	stw	r5,8(r3)
  2060a4:	10c00054 	ori	r3,r2,1
  2060a8:	30c00115 	stw	r3,4(r6)
  2060ac:	00c01074 	movhi	r3,65
  2060b0:	18e6fd04 	addi	r3,r3,-25612
  2060b4:	18c00017 	ldw	r3,0(r3)
  2060b8:	21800215 	stw	r6,8(r4)
  2060bc:	10ffc036 	bltu	r2,r3,205fc0 <_gp+0xffdf43dc>
  2060c0:	00801074 	movhi	r2,65
  2060c4:	10a71404 	addi	r2,r2,-25520
  2060c8:	11400017 	ldw	r5,0(r2)
  2060cc:	8809883a 	mov	r4,r17
  2060d0:	0205dac0 	call	205dac <_malloc_trim_r>
  2060d4:	003fba06 	br	205fc0 <_gp+0xffdf43dc>
  2060d8:	28c9883a 	add	r4,r5,r3
  2060dc:	21000117 	ldw	r4,4(r4)
  2060e0:	2100004c 	andi	r4,r4,1
  2060e4:	2000391e 	bne	r4,zero,2061cc <_free_r+0x2fc>
  2060e8:	29c00217 	ldw	r7,8(r5)
  2060ec:	29000317 	ldw	r4,12(r5)
  2060f0:	1885883a 	add	r2,r3,r2
  2060f4:	10c00054 	ori	r3,r2,1
  2060f8:	39000315 	stw	r4,12(r7)
  2060fc:	21c00215 	stw	r7,8(r4)
  206100:	30c00115 	stw	r3,4(r6)
  206104:	308d883a 	add	r6,r6,r2
  206108:	30800015 	stw	r2,0(r6)
  20610c:	003fac06 	br	205fc0 <_gp+0xffdf43dc>
  206110:	00c00504 	movi	r3,20
  206114:	19401536 	bltu	r3,r5,20616c <_free_r+0x29c>
  206118:	28c01704 	addi	r3,r5,92
  20611c:	18c7883a 	add	r3,r3,r3
  206120:	294016c4 	addi	r5,r5,91
  206124:	003fb406 	br	205ff8 <_gp+0xffdf4414>
  206128:	280bd0ba 	srai	r5,r5,2
  20612c:	00c00044 	movi	r3,1
  206130:	38800117 	ldw	r2,4(r7)
  206134:	194a983a 	sll	r5,r3,r5
  206138:	2007883a 	mov	r3,r4
  20613c:	2884b03a 	or	r2,r5,r2
  206140:	38800115 	stw	r2,4(r7)
  206144:	003fbb06 	br	206034 <_gp+0xffdf4450>
  206148:	21800515 	stw	r6,20(r4)
  20614c:	21800415 	stw	r6,16(r4)
  206150:	10c00054 	ori	r3,r2,1
  206154:	31c00315 	stw	r7,12(r6)
  206158:	31c00215 	stw	r7,8(r6)
  20615c:	30c00115 	stw	r3,4(r6)
  206160:	308d883a 	add	r6,r6,r2
  206164:	30800015 	stw	r2,0(r6)
  206168:	003f9506 	br	205fc0 <_gp+0xffdf43dc>
  20616c:	00c01504 	movi	r3,84
  206170:	19400536 	bltu	r3,r5,206188 <_free_r+0x2b8>
  206174:	100ad33a 	srli	r5,r2,12
  206178:	28c01bc4 	addi	r3,r5,111
  20617c:	18c7883a 	add	r3,r3,r3
  206180:	29401b84 	addi	r5,r5,110
  206184:	003f9c06 	br	205ff8 <_gp+0xffdf4414>
  206188:	00c05504 	movi	r3,340
  20618c:	19400536 	bltu	r3,r5,2061a4 <_free_r+0x2d4>
  206190:	100ad3fa 	srli	r5,r2,15
  206194:	28c01e04 	addi	r3,r5,120
  206198:	18c7883a 	add	r3,r3,r3
  20619c:	29401dc4 	addi	r5,r5,119
  2061a0:	003f9506 	br	205ff8 <_gp+0xffdf4414>
  2061a4:	00c15504 	movi	r3,1364
  2061a8:	19400536 	bltu	r3,r5,2061c0 <_free_r+0x2f0>
  2061ac:	100ad4ba 	srli	r5,r2,18
  2061b0:	28c01f44 	addi	r3,r5,125
  2061b4:	18c7883a 	add	r3,r3,r3
  2061b8:	29401f04 	addi	r5,r5,124
  2061bc:	003f8e06 	br	205ff8 <_gp+0xffdf4414>
  2061c0:	00c03f84 	movi	r3,254
  2061c4:	01401f84 	movi	r5,126
  2061c8:	003f8b06 	br	205ff8 <_gp+0xffdf4414>
  2061cc:	10c00054 	ori	r3,r2,1
  2061d0:	30c00115 	stw	r3,4(r6)
  2061d4:	308d883a 	add	r6,r6,r2
  2061d8:	30800015 	stw	r2,0(r6)
  2061dc:	003f7806 	br	205fc0 <_gp+0xffdf43dc>

002061e0 <__sfvwrite_r>:
  2061e0:	30800217 	ldw	r2,8(r6)
  2061e4:	10006726 	beq	r2,zero,206384 <__sfvwrite_r+0x1a4>
  2061e8:	28c0030b 	ldhu	r3,12(r5)
  2061ec:	defff404 	addi	sp,sp,-48
  2061f0:	dd400715 	stw	r21,28(sp)
  2061f4:	dd000615 	stw	r20,24(sp)
  2061f8:	dc000215 	stw	r16,8(sp)
  2061fc:	dfc00b15 	stw	ra,44(sp)
  206200:	df000a15 	stw	fp,40(sp)
  206204:	ddc00915 	stw	r23,36(sp)
  206208:	dd800815 	stw	r22,32(sp)
  20620c:	dcc00515 	stw	r19,20(sp)
  206210:	dc800415 	stw	r18,16(sp)
  206214:	dc400315 	stw	r17,12(sp)
  206218:	1880020c 	andi	r2,r3,8
  20621c:	2821883a 	mov	r16,r5
  206220:	202b883a 	mov	r21,r4
  206224:	3029883a 	mov	r20,r6
  206228:	10002726 	beq	r2,zero,2062c8 <__sfvwrite_r+0xe8>
  20622c:	28800417 	ldw	r2,16(r5)
  206230:	10002526 	beq	r2,zero,2062c8 <__sfvwrite_r+0xe8>
  206234:	1880008c 	andi	r2,r3,2
  206238:	a4400017 	ldw	r17,0(r20)
  20623c:	10002a26 	beq	r2,zero,2062e8 <__sfvwrite_r+0x108>
  206240:	05a00034 	movhi	r22,32768
  206244:	0027883a 	mov	r19,zero
  206248:	0025883a 	mov	r18,zero
  20624c:	b5bf0004 	addi	r22,r22,-1024
  206250:	980d883a 	mov	r6,r19
  206254:	a809883a 	mov	r4,r21
  206258:	90004626 	beq	r18,zero,206374 <__sfvwrite_r+0x194>
  20625c:	900f883a 	mov	r7,r18
  206260:	b480022e 	bgeu	r22,r18,20626c <__sfvwrite_r+0x8c>
  206264:	01e00034 	movhi	r7,32768
  206268:	39ff0004 	addi	r7,r7,-1024
  20626c:	80800917 	ldw	r2,36(r16)
  206270:	81400717 	ldw	r5,28(r16)
  206274:	103ee83a 	callr	r2
  206278:	00805a0e 	bge	zero,r2,2063e4 <__sfvwrite_r+0x204>
  20627c:	a0c00217 	ldw	r3,8(r20)
  206280:	98a7883a 	add	r19,r19,r2
  206284:	90a5c83a 	sub	r18,r18,r2
  206288:	1885c83a 	sub	r2,r3,r2
  20628c:	a0800215 	stw	r2,8(r20)
  206290:	103fef1e 	bne	r2,zero,206250 <_gp+0xffdf466c>
  206294:	0005883a 	mov	r2,zero
  206298:	dfc00b17 	ldw	ra,44(sp)
  20629c:	df000a17 	ldw	fp,40(sp)
  2062a0:	ddc00917 	ldw	r23,36(sp)
  2062a4:	dd800817 	ldw	r22,32(sp)
  2062a8:	dd400717 	ldw	r21,28(sp)
  2062ac:	dd000617 	ldw	r20,24(sp)
  2062b0:	dcc00517 	ldw	r19,20(sp)
  2062b4:	dc800417 	ldw	r18,16(sp)
  2062b8:	dc400317 	ldw	r17,12(sp)
  2062bc:	dc000217 	ldw	r16,8(sp)
  2062c0:	dec00c04 	addi	sp,sp,48
  2062c4:	f800283a 	ret
  2062c8:	800b883a 	mov	r5,r16
  2062cc:	a809883a 	mov	r4,r21
  2062d0:	0203d500 	call	203d50 <__swsetup_r>
  2062d4:	1000ee1e 	bne	r2,zero,206690 <__sfvwrite_r+0x4b0>
  2062d8:	80c0030b 	ldhu	r3,12(r16)
  2062dc:	a4400017 	ldw	r17,0(r20)
  2062e0:	1880008c 	andi	r2,r3,2
  2062e4:	103fd61e 	bne	r2,zero,206240 <_gp+0xffdf465c>
  2062e8:	1880004c 	andi	r2,r3,1
  2062ec:	1000421e 	bne	r2,zero,2063f8 <__sfvwrite_r+0x218>
  2062f0:	0039883a 	mov	fp,zero
  2062f4:	0025883a 	mov	r18,zero
  2062f8:	90001a26 	beq	r18,zero,206364 <__sfvwrite_r+0x184>
  2062fc:	1880800c 	andi	r2,r3,512
  206300:	84c00217 	ldw	r19,8(r16)
  206304:	10002126 	beq	r2,zero,20638c <__sfvwrite_r+0x1ac>
  206308:	982f883a 	mov	r23,r19
  20630c:	94c09636 	bltu	r18,r19,206568 <__sfvwrite_r+0x388>
  206310:	1881200c 	andi	r2,r3,1152
  206314:	1000a11e 	bne	r2,zero,20659c <__sfvwrite_r+0x3bc>
  206318:	81000017 	ldw	r4,0(r16)
  20631c:	b80d883a 	mov	r6,r23
  206320:	e00b883a 	mov	r5,fp
  206324:	02075000 	call	207500 <memmove>
  206328:	80c00217 	ldw	r3,8(r16)
  20632c:	81000017 	ldw	r4,0(r16)
  206330:	9005883a 	mov	r2,r18
  206334:	1ce7c83a 	sub	r19,r3,r19
  206338:	25cf883a 	add	r7,r4,r23
  20633c:	84c00215 	stw	r19,8(r16)
  206340:	81c00015 	stw	r7,0(r16)
  206344:	a0c00217 	ldw	r3,8(r20)
  206348:	e0b9883a 	add	fp,fp,r2
  20634c:	90a5c83a 	sub	r18,r18,r2
  206350:	18a7c83a 	sub	r19,r3,r2
  206354:	a4c00215 	stw	r19,8(r20)
  206358:	983fce26 	beq	r19,zero,206294 <_gp+0xffdf46b0>
  20635c:	80c0030b 	ldhu	r3,12(r16)
  206360:	903fe61e 	bne	r18,zero,2062fc <_gp+0xffdf4718>
  206364:	8f000017 	ldw	fp,0(r17)
  206368:	8c800117 	ldw	r18,4(r17)
  20636c:	8c400204 	addi	r17,r17,8
  206370:	003fe106 	br	2062f8 <_gp+0xffdf4714>
  206374:	8cc00017 	ldw	r19,0(r17)
  206378:	8c800117 	ldw	r18,4(r17)
  20637c:	8c400204 	addi	r17,r17,8
  206380:	003fb306 	br	206250 <_gp+0xffdf466c>
  206384:	0005883a 	mov	r2,zero
  206388:	f800283a 	ret
  20638c:	81000017 	ldw	r4,0(r16)
  206390:	80800417 	ldw	r2,16(r16)
  206394:	11005a36 	bltu	r2,r4,206500 <__sfvwrite_r+0x320>
  206398:	85c00517 	ldw	r23,20(r16)
  20639c:	95c05836 	bltu	r18,r23,206500 <__sfvwrite_r+0x320>
  2063a0:	00a00034 	movhi	r2,32768
  2063a4:	10bfffc4 	addi	r2,r2,-1
  2063a8:	9009883a 	mov	r4,r18
  2063ac:	1480012e 	bgeu	r2,r18,2063b4 <__sfvwrite_r+0x1d4>
  2063b0:	1009883a 	mov	r4,r2
  2063b4:	b80b883a 	mov	r5,r23
  2063b8:	0200a540 	call	200a54 <__divsi3>
  2063bc:	b80b883a 	mov	r5,r23
  2063c0:	1009883a 	mov	r4,r2
  2063c4:	020179c0 	call	20179c <__mulsi3>
  2063c8:	81400717 	ldw	r5,28(r16)
  2063cc:	80c00917 	ldw	r3,36(r16)
  2063d0:	100f883a 	mov	r7,r2
  2063d4:	e00d883a 	mov	r6,fp
  2063d8:	a809883a 	mov	r4,r21
  2063dc:	183ee83a 	callr	r3
  2063e0:	00bfd816 	blt	zero,r2,206344 <_gp+0xffdf4760>
  2063e4:	8080030b 	ldhu	r2,12(r16)
  2063e8:	10801014 	ori	r2,r2,64
  2063ec:	8080030d 	sth	r2,12(r16)
  2063f0:	00bfffc4 	movi	r2,-1
  2063f4:	003fa806 	br	206298 <_gp+0xffdf46b4>
  2063f8:	0027883a 	mov	r19,zero
  2063fc:	0011883a 	mov	r8,zero
  206400:	0039883a 	mov	fp,zero
  206404:	0025883a 	mov	r18,zero
  206408:	90001f26 	beq	r18,zero,206488 <__sfvwrite_r+0x2a8>
  20640c:	40005a26 	beq	r8,zero,206578 <__sfvwrite_r+0x398>
  206410:	982d883a 	mov	r22,r19
  206414:	94c0012e 	bgeu	r18,r19,20641c <__sfvwrite_r+0x23c>
  206418:	902d883a 	mov	r22,r18
  20641c:	81000017 	ldw	r4,0(r16)
  206420:	80800417 	ldw	r2,16(r16)
  206424:	b02f883a 	mov	r23,r22
  206428:	81c00517 	ldw	r7,20(r16)
  20642c:	1100032e 	bgeu	r2,r4,20643c <__sfvwrite_r+0x25c>
  206430:	80c00217 	ldw	r3,8(r16)
  206434:	38c7883a 	add	r3,r7,r3
  206438:	1d801816 	blt	r3,r22,20649c <__sfvwrite_r+0x2bc>
  20643c:	b1c03e16 	blt	r22,r7,206538 <__sfvwrite_r+0x358>
  206440:	80800917 	ldw	r2,36(r16)
  206444:	81400717 	ldw	r5,28(r16)
  206448:	e00d883a 	mov	r6,fp
  20644c:	da000115 	stw	r8,4(sp)
  206450:	a809883a 	mov	r4,r21
  206454:	103ee83a 	callr	r2
  206458:	102f883a 	mov	r23,r2
  20645c:	da000117 	ldw	r8,4(sp)
  206460:	00bfe00e 	bge	zero,r2,2063e4 <_gp+0xffdf4800>
  206464:	9de7c83a 	sub	r19,r19,r23
  206468:	98001f26 	beq	r19,zero,2064e8 <__sfvwrite_r+0x308>
  20646c:	a0800217 	ldw	r2,8(r20)
  206470:	e5f9883a 	add	fp,fp,r23
  206474:	95e5c83a 	sub	r18,r18,r23
  206478:	15efc83a 	sub	r23,r2,r23
  20647c:	a5c00215 	stw	r23,8(r20)
  206480:	b83f8426 	beq	r23,zero,206294 <_gp+0xffdf46b0>
  206484:	903fe11e 	bne	r18,zero,20640c <_gp+0xffdf4828>
  206488:	8f000017 	ldw	fp,0(r17)
  20648c:	8c800117 	ldw	r18,4(r17)
  206490:	0011883a 	mov	r8,zero
  206494:	8c400204 	addi	r17,r17,8
  206498:	003fdb06 	br	206408 <_gp+0xffdf4824>
  20649c:	180d883a 	mov	r6,r3
  2064a0:	e00b883a 	mov	r5,fp
  2064a4:	da000115 	stw	r8,4(sp)
  2064a8:	d8c00015 	stw	r3,0(sp)
  2064ac:	02075000 	call	207500 <memmove>
  2064b0:	d8c00017 	ldw	r3,0(sp)
  2064b4:	80800017 	ldw	r2,0(r16)
  2064b8:	800b883a 	mov	r5,r16
  2064bc:	a809883a 	mov	r4,r21
  2064c0:	10c5883a 	add	r2,r2,r3
  2064c4:	80800015 	stw	r2,0(r16)
  2064c8:	d8c00015 	stw	r3,0(sp)
  2064cc:	02059700 	call	205970 <_fflush_r>
  2064d0:	d8c00017 	ldw	r3,0(sp)
  2064d4:	da000117 	ldw	r8,4(sp)
  2064d8:	103fc21e 	bne	r2,zero,2063e4 <_gp+0xffdf4800>
  2064dc:	182f883a 	mov	r23,r3
  2064e0:	9de7c83a 	sub	r19,r19,r23
  2064e4:	983fe11e 	bne	r19,zero,20646c <_gp+0xffdf4888>
  2064e8:	800b883a 	mov	r5,r16
  2064ec:	a809883a 	mov	r4,r21
  2064f0:	02059700 	call	205970 <_fflush_r>
  2064f4:	103fbb1e 	bne	r2,zero,2063e4 <_gp+0xffdf4800>
  2064f8:	0011883a 	mov	r8,zero
  2064fc:	003fdb06 	br	20646c <_gp+0xffdf4888>
  206500:	94c0012e 	bgeu	r18,r19,206508 <__sfvwrite_r+0x328>
  206504:	9027883a 	mov	r19,r18
  206508:	980d883a 	mov	r6,r19
  20650c:	e00b883a 	mov	r5,fp
  206510:	02075000 	call	207500 <memmove>
  206514:	80800217 	ldw	r2,8(r16)
  206518:	80c00017 	ldw	r3,0(r16)
  20651c:	14c5c83a 	sub	r2,r2,r19
  206520:	1cc7883a 	add	r3,r3,r19
  206524:	80800215 	stw	r2,8(r16)
  206528:	80c00015 	stw	r3,0(r16)
  20652c:	10004326 	beq	r2,zero,20663c <__sfvwrite_r+0x45c>
  206530:	9805883a 	mov	r2,r19
  206534:	003f8306 	br	206344 <_gp+0xffdf4760>
  206538:	b00d883a 	mov	r6,r22
  20653c:	e00b883a 	mov	r5,fp
  206540:	da000115 	stw	r8,4(sp)
  206544:	02075000 	call	207500 <memmove>
  206548:	80800217 	ldw	r2,8(r16)
  20654c:	80c00017 	ldw	r3,0(r16)
  206550:	da000117 	ldw	r8,4(sp)
  206554:	1585c83a 	sub	r2,r2,r22
  206558:	1dad883a 	add	r22,r3,r22
  20655c:	80800215 	stw	r2,8(r16)
  206560:	85800015 	stw	r22,0(r16)
  206564:	003fbf06 	br	206464 <_gp+0xffdf4880>
  206568:	81000017 	ldw	r4,0(r16)
  20656c:	9027883a 	mov	r19,r18
  206570:	902f883a 	mov	r23,r18
  206574:	003f6906 	br	20631c <_gp+0xffdf4738>
  206578:	900d883a 	mov	r6,r18
  20657c:	01400284 	movi	r5,10
  206580:	e009883a 	mov	r4,fp
  206584:	02072d40 	call	2072d4 <memchr>
  206588:	10003e26 	beq	r2,zero,206684 <__sfvwrite_r+0x4a4>
  20658c:	10800044 	addi	r2,r2,1
  206590:	1727c83a 	sub	r19,r2,fp
  206594:	02000044 	movi	r8,1
  206598:	003f9d06 	br	206410 <_gp+0xffdf482c>
  20659c:	80800517 	ldw	r2,20(r16)
  2065a0:	81400417 	ldw	r5,16(r16)
  2065a4:	81c00017 	ldw	r7,0(r16)
  2065a8:	10a7883a 	add	r19,r2,r2
  2065ac:	9885883a 	add	r2,r19,r2
  2065b0:	1026d7fa 	srli	r19,r2,31
  2065b4:	396dc83a 	sub	r22,r7,r5
  2065b8:	b1000044 	addi	r4,r22,1
  2065bc:	9885883a 	add	r2,r19,r2
  2065c0:	1027d07a 	srai	r19,r2,1
  2065c4:	2485883a 	add	r2,r4,r18
  2065c8:	980d883a 	mov	r6,r19
  2065cc:	9880022e 	bgeu	r19,r2,2065d8 <__sfvwrite_r+0x3f8>
  2065d0:	1027883a 	mov	r19,r2
  2065d4:	100d883a 	mov	r6,r2
  2065d8:	18c1000c 	andi	r3,r3,1024
  2065dc:	18001c26 	beq	r3,zero,206650 <__sfvwrite_r+0x470>
  2065e0:	300b883a 	mov	r5,r6
  2065e4:	a809883a 	mov	r4,r21
  2065e8:	0206ac80 	call	206ac8 <_malloc_r>
  2065ec:	102f883a 	mov	r23,r2
  2065f0:	10002926 	beq	r2,zero,206698 <__sfvwrite_r+0x4b8>
  2065f4:	81400417 	ldw	r5,16(r16)
  2065f8:	b00d883a 	mov	r6,r22
  2065fc:	1009883a 	mov	r4,r2
  206600:	02073b80 	call	2073b8 <memcpy>
  206604:	8080030b 	ldhu	r2,12(r16)
  206608:	00fedfc4 	movi	r3,-1153
  20660c:	10c4703a 	and	r2,r2,r3
  206610:	10802014 	ori	r2,r2,128
  206614:	8080030d 	sth	r2,12(r16)
  206618:	bd89883a 	add	r4,r23,r22
  20661c:	9d8fc83a 	sub	r7,r19,r22
  206620:	85c00415 	stw	r23,16(r16)
  206624:	84c00515 	stw	r19,20(r16)
  206628:	81000015 	stw	r4,0(r16)
  20662c:	9027883a 	mov	r19,r18
  206630:	81c00215 	stw	r7,8(r16)
  206634:	902f883a 	mov	r23,r18
  206638:	003f3806 	br	20631c <_gp+0xffdf4738>
  20663c:	800b883a 	mov	r5,r16
  206640:	a809883a 	mov	r4,r21
  206644:	02059700 	call	205970 <_fflush_r>
  206648:	103fb926 	beq	r2,zero,206530 <_gp+0xffdf494c>
  20664c:	003f6506 	br	2063e4 <_gp+0xffdf4800>
  206650:	a809883a 	mov	r4,r21
  206654:	020883c0 	call	20883c <_realloc_r>
  206658:	102f883a 	mov	r23,r2
  20665c:	103fee1e 	bne	r2,zero,206618 <_gp+0xffdf4a34>
  206660:	81400417 	ldw	r5,16(r16)
  206664:	a809883a 	mov	r4,r21
  206668:	0205ed00 	call	205ed0 <_free_r>
  20666c:	8080030b 	ldhu	r2,12(r16)
  206670:	00ffdfc4 	movi	r3,-129
  206674:	1884703a 	and	r2,r3,r2
  206678:	00c00304 	movi	r3,12
  20667c:	a8c00015 	stw	r3,0(r21)
  206680:	003f5906 	br	2063e8 <_gp+0xffdf4804>
  206684:	94c00044 	addi	r19,r18,1
  206688:	02000044 	movi	r8,1
  20668c:	003f6006 	br	206410 <_gp+0xffdf482c>
  206690:	00bfffc4 	movi	r2,-1
  206694:	003f0006 	br	206298 <_gp+0xffdf46b4>
  206698:	00800304 	movi	r2,12
  20669c:	a8800015 	stw	r2,0(r21)
  2066a0:	8080030b 	ldhu	r2,12(r16)
  2066a4:	003f5006 	br	2063e8 <_gp+0xffdf4804>

002066a8 <_fwalk>:
  2066a8:	defff704 	addi	sp,sp,-36
  2066ac:	dd000415 	stw	r20,16(sp)
  2066b0:	dfc00815 	stw	ra,32(sp)
  2066b4:	ddc00715 	stw	r23,28(sp)
  2066b8:	dd800615 	stw	r22,24(sp)
  2066bc:	dd400515 	stw	r21,20(sp)
  2066c0:	dcc00315 	stw	r19,12(sp)
  2066c4:	dc800215 	stw	r18,8(sp)
  2066c8:	dc400115 	stw	r17,4(sp)
  2066cc:	dc000015 	stw	r16,0(sp)
  2066d0:	2500b804 	addi	r20,r4,736
  2066d4:	a0002326 	beq	r20,zero,206764 <_fwalk+0xbc>
  2066d8:	282b883a 	mov	r21,r5
  2066dc:	002f883a 	mov	r23,zero
  2066e0:	05800044 	movi	r22,1
  2066e4:	04ffffc4 	movi	r19,-1
  2066e8:	a4400117 	ldw	r17,4(r20)
  2066ec:	a4800217 	ldw	r18,8(r20)
  2066f0:	8c7fffc4 	addi	r17,r17,-1
  2066f4:	88000d16 	blt	r17,zero,20672c <_fwalk+0x84>
  2066f8:	94000304 	addi	r16,r18,12
  2066fc:	94800384 	addi	r18,r18,14
  206700:	8080000b 	ldhu	r2,0(r16)
  206704:	8c7fffc4 	addi	r17,r17,-1
  206708:	813ffd04 	addi	r4,r16,-12
  20670c:	b080042e 	bgeu	r22,r2,206720 <_fwalk+0x78>
  206710:	9080000f 	ldh	r2,0(r18)
  206714:	14c00226 	beq	r2,r19,206720 <_fwalk+0x78>
  206718:	a83ee83a 	callr	r21
  20671c:	b8aeb03a 	or	r23,r23,r2
  206720:	84001a04 	addi	r16,r16,104
  206724:	94801a04 	addi	r18,r18,104
  206728:	8cfff51e 	bne	r17,r19,206700 <_gp+0xffdf4b1c>
  20672c:	a5000017 	ldw	r20,0(r20)
  206730:	a03fed1e 	bne	r20,zero,2066e8 <_gp+0xffdf4b04>
  206734:	b805883a 	mov	r2,r23
  206738:	dfc00817 	ldw	ra,32(sp)
  20673c:	ddc00717 	ldw	r23,28(sp)
  206740:	dd800617 	ldw	r22,24(sp)
  206744:	dd400517 	ldw	r21,20(sp)
  206748:	dd000417 	ldw	r20,16(sp)
  20674c:	dcc00317 	ldw	r19,12(sp)
  206750:	dc800217 	ldw	r18,8(sp)
  206754:	dc400117 	ldw	r17,4(sp)
  206758:	dc000017 	ldw	r16,0(sp)
  20675c:	dec00904 	addi	sp,sp,36
  206760:	f800283a 	ret
  206764:	002f883a 	mov	r23,zero
  206768:	003ff206 	br	206734 <_gp+0xffdf4b50>

0020676c <_fwalk_reent>:
  20676c:	defff704 	addi	sp,sp,-36
  206770:	dd000415 	stw	r20,16(sp)
  206774:	dfc00815 	stw	ra,32(sp)
  206778:	ddc00715 	stw	r23,28(sp)
  20677c:	dd800615 	stw	r22,24(sp)
  206780:	dd400515 	stw	r21,20(sp)
  206784:	dcc00315 	stw	r19,12(sp)
  206788:	dc800215 	stw	r18,8(sp)
  20678c:	dc400115 	stw	r17,4(sp)
  206790:	dc000015 	stw	r16,0(sp)
  206794:	2500b804 	addi	r20,r4,736
  206798:	a0002326 	beq	r20,zero,206828 <_fwalk_reent+0xbc>
  20679c:	282b883a 	mov	r21,r5
  2067a0:	2027883a 	mov	r19,r4
  2067a4:	002f883a 	mov	r23,zero
  2067a8:	05800044 	movi	r22,1
  2067ac:	04bfffc4 	movi	r18,-1
  2067b0:	a4400117 	ldw	r17,4(r20)
  2067b4:	a4000217 	ldw	r16,8(r20)
  2067b8:	8c7fffc4 	addi	r17,r17,-1
  2067bc:	88000c16 	blt	r17,zero,2067f0 <_fwalk_reent+0x84>
  2067c0:	84000304 	addi	r16,r16,12
  2067c4:	8080000b 	ldhu	r2,0(r16)
  2067c8:	8c7fffc4 	addi	r17,r17,-1
  2067cc:	817ffd04 	addi	r5,r16,-12
  2067d0:	b080052e 	bgeu	r22,r2,2067e8 <_fwalk_reent+0x7c>
  2067d4:	8080008f 	ldh	r2,2(r16)
  2067d8:	9809883a 	mov	r4,r19
  2067dc:	14800226 	beq	r2,r18,2067e8 <_fwalk_reent+0x7c>
  2067e0:	a83ee83a 	callr	r21
  2067e4:	b8aeb03a 	or	r23,r23,r2
  2067e8:	84001a04 	addi	r16,r16,104
  2067ec:	8cbff51e 	bne	r17,r18,2067c4 <_gp+0xffdf4be0>
  2067f0:	a5000017 	ldw	r20,0(r20)
  2067f4:	a03fee1e 	bne	r20,zero,2067b0 <_gp+0xffdf4bcc>
  2067f8:	b805883a 	mov	r2,r23
  2067fc:	dfc00817 	ldw	ra,32(sp)
  206800:	ddc00717 	ldw	r23,28(sp)
  206804:	dd800617 	ldw	r22,24(sp)
  206808:	dd400517 	ldw	r21,20(sp)
  20680c:	dd000417 	ldw	r20,16(sp)
  206810:	dcc00317 	ldw	r19,12(sp)
  206814:	dc800217 	ldw	r18,8(sp)
  206818:	dc400117 	ldw	r17,4(sp)
  20681c:	dc000017 	ldw	r16,0(sp)
  206820:	dec00904 	addi	sp,sp,36
  206824:	f800283a 	ret
  206828:	002f883a 	mov	r23,zero
  20682c:	003ff206 	br	2067f8 <_gp+0xffdf4c14>

00206830 <_setlocale_r>:
  206830:	30001b26 	beq	r6,zero,2068a0 <_setlocale_r+0x70>
  206834:	01400874 	movhi	r5,33
  206838:	defffe04 	addi	sp,sp,-8
  20683c:	29505e04 	addi	r5,r5,16760
  206840:	3009883a 	mov	r4,r6
  206844:	dc000015 	stw	r16,0(sp)
  206848:	dfc00115 	stw	ra,4(sp)
  20684c:	3021883a 	mov	r16,r6
  206850:	0208fa40 	call	208fa4 <strcmp>
  206854:	1000061e 	bne	r2,zero,206870 <_setlocale_r+0x40>
  206858:	00800874 	movhi	r2,33
  20685c:	10905d04 	addi	r2,r2,16756
  206860:	dfc00117 	ldw	ra,4(sp)
  206864:	dc000017 	ldw	r16,0(sp)
  206868:	dec00204 	addi	sp,sp,8
  20686c:	f800283a 	ret
  206870:	01400874 	movhi	r5,33
  206874:	29505d04 	addi	r5,r5,16756
  206878:	8009883a 	mov	r4,r16
  20687c:	0208fa40 	call	208fa4 <strcmp>
  206880:	103ff526 	beq	r2,zero,206858 <_gp+0xffdf4c74>
  206884:	01400874 	movhi	r5,33
  206888:	29504804 	addi	r5,r5,16672
  20688c:	8009883a 	mov	r4,r16
  206890:	0208fa40 	call	208fa4 <strcmp>
  206894:	103ff026 	beq	r2,zero,206858 <_gp+0xffdf4c74>
  206898:	0005883a 	mov	r2,zero
  20689c:	003ff006 	br	206860 <_gp+0xffdf4c7c>
  2068a0:	00800874 	movhi	r2,33
  2068a4:	10905d04 	addi	r2,r2,16756
  2068a8:	f800283a 	ret

002068ac <__locale_charset>:
  2068ac:	00801074 	movhi	r2,65
  2068b0:	10a11104 	addi	r2,r2,-31676
  2068b4:	f800283a 	ret

002068b8 <__locale_mb_cur_max>:
  2068b8:	00801074 	movhi	r2,65
  2068bc:	10a6fb04 	addi	r2,r2,-25620
  2068c0:	10800017 	ldw	r2,0(r2)
  2068c4:	f800283a 	ret

002068c8 <__locale_msgcharset>:
  2068c8:	00801074 	movhi	r2,65
  2068cc:	10a10904 	addi	r2,r2,-31708
  2068d0:	f800283a 	ret

002068d4 <__locale_cjk_lang>:
  2068d4:	0005883a 	mov	r2,zero
  2068d8:	f800283a 	ret

002068dc <_localeconv_r>:
  2068dc:	00801074 	movhi	r2,65
  2068e0:	10a11904 	addi	r2,r2,-31644
  2068e4:	f800283a 	ret

002068e8 <setlocale>:
  2068e8:	00801074 	movhi	r2,65
  2068ec:	10a6fa04 	addi	r2,r2,-25624
  2068f0:	280d883a 	mov	r6,r5
  2068f4:	200b883a 	mov	r5,r4
  2068f8:	11000017 	ldw	r4,0(r2)
  2068fc:	02068301 	jmpi	206830 <_setlocale_r>

00206900 <localeconv>:
  206900:	00801074 	movhi	r2,65
  206904:	10a11904 	addi	r2,r2,-31644
  206908:	f800283a 	ret

0020690c <__smakebuf_r>:
  20690c:	2880030b 	ldhu	r2,12(r5)
  206910:	10c0008c 	andi	r3,r2,2
  206914:	1800411e 	bne	r3,zero,206a1c <__smakebuf_r+0x110>
  206918:	deffec04 	addi	sp,sp,-80
  20691c:	dc000f15 	stw	r16,60(sp)
  206920:	2821883a 	mov	r16,r5
  206924:	2940038f 	ldh	r5,14(r5)
  206928:	dc401015 	stw	r17,64(sp)
  20692c:	dfc01315 	stw	ra,76(sp)
  206930:	dcc01215 	stw	r19,72(sp)
  206934:	dc801115 	stw	r18,68(sp)
  206938:	2023883a 	mov	r17,r4
  20693c:	28001c16 	blt	r5,zero,2069b0 <__smakebuf_r+0xa4>
  206940:	d80d883a 	mov	r6,sp
  206944:	020ac140 	call	20ac14 <_fstat_r>
  206948:	10001816 	blt	r2,zero,2069ac <__smakebuf_r+0xa0>
  20694c:	d8800117 	ldw	r2,4(sp)
  206950:	00e00014 	movui	r3,32768
  206954:	10bc000c 	andi	r2,r2,61440
  206958:	14c80020 	cmpeqi	r19,r2,8192
  20695c:	10c03726 	beq	r2,r3,206a3c <__smakebuf_r+0x130>
  206960:	80c0030b 	ldhu	r3,12(r16)
  206964:	18c20014 	ori	r3,r3,2048
  206968:	80c0030d 	sth	r3,12(r16)
  20696c:	00c80004 	movi	r3,8192
  206970:	10c0521e 	bne	r2,r3,206abc <__smakebuf_r+0x1b0>
  206974:	8140038f 	ldh	r5,14(r16)
  206978:	8809883a 	mov	r4,r17
  20697c:	020ac700 	call	20ac70 <_isatty_r>
  206980:	10004c26 	beq	r2,zero,206ab4 <__smakebuf_r+0x1a8>
  206984:	8080030b 	ldhu	r2,12(r16)
  206988:	80c010c4 	addi	r3,r16,67
  20698c:	80c00015 	stw	r3,0(r16)
  206990:	10800054 	ori	r2,r2,1
  206994:	8080030d 	sth	r2,12(r16)
  206998:	00800044 	movi	r2,1
  20699c:	80c00415 	stw	r3,16(r16)
  2069a0:	80800515 	stw	r2,20(r16)
  2069a4:	04810004 	movi	r18,1024
  2069a8:	00000706 	br	2069c8 <__smakebuf_r+0xbc>
  2069ac:	8080030b 	ldhu	r2,12(r16)
  2069b0:	10c0200c 	andi	r3,r2,128
  2069b4:	18001f1e 	bne	r3,zero,206a34 <__smakebuf_r+0x128>
  2069b8:	04810004 	movi	r18,1024
  2069bc:	10820014 	ori	r2,r2,2048
  2069c0:	8080030d 	sth	r2,12(r16)
  2069c4:	0027883a 	mov	r19,zero
  2069c8:	900b883a 	mov	r5,r18
  2069cc:	8809883a 	mov	r4,r17
  2069d0:	0206ac80 	call	206ac8 <_malloc_r>
  2069d4:	10002c26 	beq	r2,zero,206a88 <__smakebuf_r+0x17c>
  2069d8:	80c0030b 	ldhu	r3,12(r16)
  2069dc:	01000834 	movhi	r4,32
  2069e0:	21168104 	addi	r4,r4,23044
  2069e4:	89000f15 	stw	r4,60(r17)
  2069e8:	18c02014 	ori	r3,r3,128
  2069ec:	80c0030d 	sth	r3,12(r16)
  2069f0:	80800015 	stw	r2,0(r16)
  2069f4:	80800415 	stw	r2,16(r16)
  2069f8:	84800515 	stw	r18,20(r16)
  2069fc:	98001a1e 	bne	r19,zero,206a68 <__smakebuf_r+0x15c>
  206a00:	dfc01317 	ldw	ra,76(sp)
  206a04:	dcc01217 	ldw	r19,72(sp)
  206a08:	dc801117 	ldw	r18,68(sp)
  206a0c:	dc401017 	ldw	r17,64(sp)
  206a10:	dc000f17 	ldw	r16,60(sp)
  206a14:	dec01404 	addi	sp,sp,80
  206a18:	f800283a 	ret
  206a1c:	288010c4 	addi	r2,r5,67
  206a20:	28800015 	stw	r2,0(r5)
  206a24:	28800415 	stw	r2,16(r5)
  206a28:	00800044 	movi	r2,1
  206a2c:	28800515 	stw	r2,20(r5)
  206a30:	f800283a 	ret
  206a34:	04801004 	movi	r18,64
  206a38:	003fe006 	br	2069bc <_gp+0xffdf4dd8>
  206a3c:	81000a17 	ldw	r4,40(r16)
  206a40:	00c00874 	movhi	r3,33
  206a44:	18e3d004 	addi	r3,r3,-28864
  206a48:	20ffc51e 	bne	r4,r3,206960 <_gp+0xffdf4d7c>
  206a4c:	8080030b 	ldhu	r2,12(r16)
  206a50:	04810004 	movi	r18,1024
  206a54:	84801315 	stw	r18,76(r16)
  206a58:	1484b03a 	or	r2,r2,r18
  206a5c:	8080030d 	sth	r2,12(r16)
  206a60:	0027883a 	mov	r19,zero
  206a64:	003fd806 	br	2069c8 <_gp+0xffdf4de4>
  206a68:	8140038f 	ldh	r5,14(r16)
  206a6c:	8809883a 	mov	r4,r17
  206a70:	020ac700 	call	20ac70 <_isatty_r>
  206a74:	103fe226 	beq	r2,zero,206a00 <_gp+0xffdf4e1c>
  206a78:	8080030b 	ldhu	r2,12(r16)
  206a7c:	10800054 	ori	r2,r2,1
  206a80:	8080030d 	sth	r2,12(r16)
  206a84:	003fde06 	br	206a00 <_gp+0xffdf4e1c>
  206a88:	8080030b 	ldhu	r2,12(r16)
  206a8c:	10c0800c 	andi	r3,r2,512
  206a90:	183fdb1e 	bne	r3,zero,206a00 <_gp+0xffdf4e1c>
  206a94:	10800094 	ori	r2,r2,2
  206a98:	80c010c4 	addi	r3,r16,67
  206a9c:	8080030d 	sth	r2,12(r16)
  206aa0:	00800044 	movi	r2,1
  206aa4:	80c00015 	stw	r3,0(r16)
  206aa8:	80c00415 	stw	r3,16(r16)
  206aac:	80800515 	stw	r2,20(r16)
  206ab0:	003fd306 	br	206a00 <_gp+0xffdf4e1c>
  206ab4:	04810004 	movi	r18,1024
  206ab8:	003fc306 	br	2069c8 <_gp+0xffdf4de4>
  206abc:	0027883a 	mov	r19,zero
  206ac0:	04810004 	movi	r18,1024
  206ac4:	003fc006 	br	2069c8 <_gp+0xffdf4de4>

00206ac8 <_malloc_r>:
  206ac8:	defff504 	addi	sp,sp,-44
  206acc:	dc800315 	stw	r18,12(sp)
  206ad0:	dfc00a15 	stw	ra,40(sp)
  206ad4:	df000915 	stw	fp,36(sp)
  206ad8:	ddc00815 	stw	r23,32(sp)
  206adc:	dd800715 	stw	r22,28(sp)
  206ae0:	dd400615 	stw	r21,24(sp)
  206ae4:	dd000515 	stw	r20,20(sp)
  206ae8:	dcc00415 	stw	r19,16(sp)
  206aec:	dc400215 	stw	r17,8(sp)
  206af0:	dc000115 	stw	r16,4(sp)
  206af4:	288002c4 	addi	r2,r5,11
  206af8:	00c00584 	movi	r3,22
  206afc:	2025883a 	mov	r18,r4
  206b00:	18807f2e 	bgeu	r3,r2,206d00 <_malloc_r+0x238>
  206b04:	047ffe04 	movi	r17,-8
  206b08:	1462703a 	and	r17,r2,r17
  206b0c:	8800a316 	blt	r17,zero,206d9c <_malloc_r+0x2d4>
  206b10:	8940a236 	bltu	r17,r5,206d9c <_malloc_r+0x2d4>
  206b14:	020ea600 	call	20ea60 <__malloc_lock>
  206b18:	00807dc4 	movi	r2,503
  206b1c:	1441e92e 	bgeu	r2,r17,2072c4 <_malloc_r+0x7fc>
  206b20:	8804d27a 	srli	r2,r17,9
  206b24:	1000a126 	beq	r2,zero,206dac <_malloc_r+0x2e4>
  206b28:	00c00104 	movi	r3,4
  206b2c:	18811e36 	bltu	r3,r2,206fa8 <_malloc_r+0x4e0>
  206b30:	8804d1ba 	srli	r2,r17,6
  206b34:	12000e44 	addi	r8,r2,57
  206b38:	11c00e04 	addi	r7,r2,56
  206b3c:	4209883a 	add	r4,r8,r8
  206b40:	04c01074 	movhi	r19,65
  206b44:	2109883a 	add	r4,r4,r4
  206b48:	9ce12704 	addi	r19,r19,-31588
  206b4c:	2109883a 	add	r4,r4,r4
  206b50:	9909883a 	add	r4,r19,r4
  206b54:	24000117 	ldw	r16,4(r4)
  206b58:	213ffe04 	addi	r4,r4,-8
  206b5c:	24009726 	beq	r4,r16,206dbc <_malloc_r+0x2f4>
  206b60:	80800117 	ldw	r2,4(r16)
  206b64:	01bfff04 	movi	r6,-4
  206b68:	014003c4 	movi	r5,15
  206b6c:	1184703a 	and	r2,r2,r6
  206b70:	1447c83a 	sub	r3,r2,r17
  206b74:	28c00716 	blt	r5,r3,206b94 <_malloc_r+0xcc>
  206b78:	1800920e 	bge	r3,zero,206dc4 <_malloc_r+0x2fc>
  206b7c:	84000317 	ldw	r16,12(r16)
  206b80:	24008e26 	beq	r4,r16,206dbc <_malloc_r+0x2f4>
  206b84:	80800117 	ldw	r2,4(r16)
  206b88:	1184703a 	and	r2,r2,r6
  206b8c:	1447c83a 	sub	r3,r2,r17
  206b90:	28fff90e 	bge	r5,r3,206b78 <_gp+0xffdf4f94>
  206b94:	3809883a 	mov	r4,r7
  206b98:	01801074 	movhi	r6,65
  206b9c:	9c000417 	ldw	r16,16(r19)
  206ba0:	31a12704 	addi	r6,r6,-31588
  206ba4:	32000204 	addi	r8,r6,8
  206ba8:	82013426 	beq	r16,r8,20707c <_malloc_r+0x5b4>
  206bac:	80c00117 	ldw	r3,4(r16)
  206bb0:	00bfff04 	movi	r2,-4
  206bb4:	188e703a 	and	r7,r3,r2
  206bb8:	3c45c83a 	sub	r2,r7,r17
  206bbc:	00c003c4 	movi	r3,15
  206bc0:	18811f16 	blt	r3,r2,207040 <_malloc_r+0x578>
  206bc4:	32000515 	stw	r8,20(r6)
  206bc8:	32000415 	stw	r8,16(r6)
  206bcc:	10007f0e 	bge	r2,zero,206dcc <_malloc_r+0x304>
  206bd0:	00807fc4 	movi	r2,511
  206bd4:	11c0fd36 	bltu	r2,r7,206fcc <_malloc_r+0x504>
  206bd8:	3806d0fa 	srli	r3,r7,3
  206bdc:	01c00044 	movi	r7,1
  206be0:	30800117 	ldw	r2,4(r6)
  206be4:	19400044 	addi	r5,r3,1
  206be8:	294b883a 	add	r5,r5,r5
  206bec:	1807d0ba 	srai	r3,r3,2
  206bf0:	294b883a 	add	r5,r5,r5
  206bf4:	294b883a 	add	r5,r5,r5
  206bf8:	298b883a 	add	r5,r5,r6
  206bfc:	38c6983a 	sll	r3,r7,r3
  206c00:	29c00017 	ldw	r7,0(r5)
  206c04:	2a7ffe04 	addi	r9,r5,-8
  206c08:	1886b03a 	or	r3,r3,r2
  206c0c:	82400315 	stw	r9,12(r16)
  206c10:	81c00215 	stw	r7,8(r16)
  206c14:	30c00115 	stw	r3,4(r6)
  206c18:	2c000015 	stw	r16,0(r5)
  206c1c:	3c000315 	stw	r16,12(r7)
  206c20:	2005d0ba 	srai	r2,r4,2
  206c24:	01400044 	movi	r5,1
  206c28:	288a983a 	sll	r5,r5,r2
  206c2c:	19406f36 	bltu	r3,r5,206dec <_malloc_r+0x324>
  206c30:	28c4703a 	and	r2,r5,r3
  206c34:	10000a1e 	bne	r2,zero,206c60 <_malloc_r+0x198>
  206c38:	00bfff04 	movi	r2,-4
  206c3c:	294b883a 	add	r5,r5,r5
  206c40:	2088703a 	and	r4,r4,r2
  206c44:	28c4703a 	and	r2,r5,r3
  206c48:	21000104 	addi	r4,r4,4
  206c4c:	1000041e 	bne	r2,zero,206c60 <_malloc_r+0x198>
  206c50:	294b883a 	add	r5,r5,r5
  206c54:	28c4703a 	and	r2,r5,r3
  206c58:	21000104 	addi	r4,r4,4
  206c5c:	103ffc26 	beq	r2,zero,206c50 <_gp+0xffdf506c>
  206c60:	02bfff04 	movi	r10,-4
  206c64:	024003c4 	movi	r9,15
  206c68:	21800044 	addi	r6,r4,1
  206c6c:	318d883a 	add	r6,r6,r6
  206c70:	318d883a 	add	r6,r6,r6
  206c74:	318d883a 	add	r6,r6,r6
  206c78:	998d883a 	add	r6,r19,r6
  206c7c:	333ffe04 	addi	r12,r6,-8
  206c80:	2017883a 	mov	r11,r4
  206c84:	31800104 	addi	r6,r6,4
  206c88:	34000017 	ldw	r16,0(r6)
  206c8c:	31fffd04 	addi	r7,r6,-12
  206c90:	81c0041e 	bne	r16,r7,206ca4 <_malloc_r+0x1dc>
  206c94:	0000fb06 	br	207084 <_malloc_r+0x5bc>
  206c98:	1801030e 	bge	r3,zero,2070a8 <_malloc_r+0x5e0>
  206c9c:	84000317 	ldw	r16,12(r16)
  206ca0:	81c0f826 	beq	r16,r7,207084 <_malloc_r+0x5bc>
  206ca4:	80800117 	ldw	r2,4(r16)
  206ca8:	1284703a 	and	r2,r2,r10
  206cac:	1447c83a 	sub	r3,r2,r17
  206cb0:	48fff90e 	bge	r9,r3,206c98 <_gp+0xffdf50b4>
  206cb4:	80800317 	ldw	r2,12(r16)
  206cb8:	81000217 	ldw	r4,8(r16)
  206cbc:	89400054 	ori	r5,r17,1
  206cc0:	81400115 	stw	r5,4(r16)
  206cc4:	20800315 	stw	r2,12(r4)
  206cc8:	11000215 	stw	r4,8(r2)
  206ccc:	8463883a 	add	r17,r16,r17
  206cd0:	9c400515 	stw	r17,20(r19)
  206cd4:	9c400415 	stw	r17,16(r19)
  206cd8:	18800054 	ori	r2,r3,1
  206cdc:	88800115 	stw	r2,4(r17)
  206ce0:	8a000315 	stw	r8,12(r17)
  206ce4:	8a000215 	stw	r8,8(r17)
  206ce8:	88e3883a 	add	r17,r17,r3
  206cec:	88c00015 	stw	r3,0(r17)
  206cf0:	9009883a 	mov	r4,r18
  206cf4:	020ea840 	call	20ea84 <__malloc_unlock>
  206cf8:	80800204 	addi	r2,r16,8
  206cfc:	00001b06 	br	206d6c <_malloc_r+0x2a4>
  206d00:	04400404 	movi	r17,16
  206d04:	89402536 	bltu	r17,r5,206d9c <_malloc_r+0x2d4>
  206d08:	020ea600 	call	20ea60 <__malloc_lock>
  206d0c:	00800184 	movi	r2,6
  206d10:	01000084 	movi	r4,2
  206d14:	04c01074 	movhi	r19,65
  206d18:	1085883a 	add	r2,r2,r2
  206d1c:	9ce12704 	addi	r19,r19,-31588
  206d20:	1085883a 	add	r2,r2,r2
  206d24:	9885883a 	add	r2,r19,r2
  206d28:	14000117 	ldw	r16,4(r2)
  206d2c:	10fffe04 	addi	r3,r2,-8
  206d30:	80c0d926 	beq	r16,r3,207098 <_malloc_r+0x5d0>
  206d34:	80c00117 	ldw	r3,4(r16)
  206d38:	81000317 	ldw	r4,12(r16)
  206d3c:	00bfff04 	movi	r2,-4
  206d40:	1884703a 	and	r2,r3,r2
  206d44:	81400217 	ldw	r5,8(r16)
  206d48:	8085883a 	add	r2,r16,r2
  206d4c:	10c00117 	ldw	r3,4(r2)
  206d50:	29000315 	stw	r4,12(r5)
  206d54:	21400215 	stw	r5,8(r4)
  206d58:	18c00054 	ori	r3,r3,1
  206d5c:	10c00115 	stw	r3,4(r2)
  206d60:	9009883a 	mov	r4,r18
  206d64:	020ea840 	call	20ea84 <__malloc_unlock>
  206d68:	80800204 	addi	r2,r16,8
  206d6c:	dfc00a17 	ldw	ra,40(sp)
  206d70:	df000917 	ldw	fp,36(sp)
  206d74:	ddc00817 	ldw	r23,32(sp)
  206d78:	dd800717 	ldw	r22,28(sp)
  206d7c:	dd400617 	ldw	r21,24(sp)
  206d80:	dd000517 	ldw	r20,20(sp)
  206d84:	dcc00417 	ldw	r19,16(sp)
  206d88:	dc800317 	ldw	r18,12(sp)
  206d8c:	dc400217 	ldw	r17,8(sp)
  206d90:	dc000117 	ldw	r16,4(sp)
  206d94:	dec00b04 	addi	sp,sp,44
  206d98:	f800283a 	ret
  206d9c:	00800304 	movi	r2,12
  206da0:	90800015 	stw	r2,0(r18)
  206da4:	0005883a 	mov	r2,zero
  206da8:	003ff006 	br	206d6c <_gp+0xffdf5188>
  206dac:	01002004 	movi	r4,128
  206db0:	02001004 	movi	r8,64
  206db4:	01c00fc4 	movi	r7,63
  206db8:	003f6106 	br	206b40 <_gp+0xffdf4f5c>
  206dbc:	4009883a 	mov	r4,r8
  206dc0:	003f7506 	br	206b98 <_gp+0xffdf4fb4>
  206dc4:	81000317 	ldw	r4,12(r16)
  206dc8:	003fde06 	br	206d44 <_gp+0xffdf5160>
  206dcc:	81c5883a 	add	r2,r16,r7
  206dd0:	11400117 	ldw	r5,4(r2)
  206dd4:	9009883a 	mov	r4,r18
  206dd8:	29400054 	ori	r5,r5,1
  206ddc:	11400115 	stw	r5,4(r2)
  206de0:	020ea840 	call	20ea84 <__malloc_unlock>
  206de4:	80800204 	addi	r2,r16,8
  206de8:	003fe006 	br	206d6c <_gp+0xffdf5188>
  206dec:	9c000217 	ldw	r16,8(r19)
  206df0:	00bfff04 	movi	r2,-4
  206df4:	85800117 	ldw	r22,4(r16)
  206df8:	b0ac703a 	and	r22,r22,r2
  206dfc:	b4400336 	bltu	r22,r17,206e0c <_malloc_r+0x344>
  206e00:	b445c83a 	sub	r2,r22,r17
  206e04:	00c003c4 	movi	r3,15
  206e08:	18805d16 	blt	r3,r2,206f80 <_malloc_r+0x4b8>
  206e0c:	05c01074 	movhi	r23,65
  206e10:	00801074 	movhi	r2,65
  206e14:	10a71404 	addi	r2,r2,-25520
  206e18:	bde6fc04 	addi	r23,r23,-25616
  206e1c:	15400017 	ldw	r21,0(r2)
  206e20:	b8c00017 	ldw	r3,0(r23)
  206e24:	00bfffc4 	movi	r2,-1
  206e28:	858d883a 	add	r6,r16,r22
  206e2c:	8d6b883a 	add	r21,r17,r21
  206e30:	1880ea26 	beq	r3,r2,2071dc <_malloc_r+0x714>
  206e34:	ad4403c4 	addi	r21,r21,4111
  206e38:	00bc0004 	movi	r2,-4096
  206e3c:	a8aa703a 	and	r21,r21,r2
  206e40:	a80b883a 	mov	r5,r21
  206e44:	9009883a 	mov	r4,r18
  206e48:	d9800015 	stw	r6,0(sp)
  206e4c:	0208e140 	call	208e14 <_sbrk_r>
  206e50:	1029883a 	mov	r20,r2
  206e54:	00bfffc4 	movi	r2,-1
  206e58:	d9800017 	ldw	r6,0(sp)
  206e5c:	a080e826 	beq	r20,r2,207200 <_malloc_r+0x738>
  206e60:	a180a636 	bltu	r20,r6,2070fc <_malloc_r+0x634>
  206e64:	07001074 	movhi	fp,65
  206e68:	e7271d04 	addi	fp,fp,-25484
  206e6c:	e0800017 	ldw	r2,0(fp)
  206e70:	a887883a 	add	r3,r21,r2
  206e74:	e0c00015 	stw	r3,0(fp)
  206e78:	3500e626 	beq	r6,r20,207214 <_malloc_r+0x74c>
  206e7c:	b9000017 	ldw	r4,0(r23)
  206e80:	00bfffc4 	movi	r2,-1
  206e84:	2080ee26 	beq	r4,r2,207240 <_malloc_r+0x778>
  206e88:	a185c83a 	sub	r2,r20,r6
  206e8c:	10c5883a 	add	r2,r2,r3
  206e90:	e0800015 	stw	r2,0(fp)
  206e94:	a0c001cc 	andi	r3,r20,7
  206e98:	1800bc26 	beq	r3,zero,20718c <_malloc_r+0x6c4>
  206e9c:	a0e9c83a 	sub	r20,r20,r3
  206ea0:	00840204 	movi	r2,4104
  206ea4:	a5000204 	addi	r20,r20,8
  206ea8:	10c7c83a 	sub	r3,r2,r3
  206eac:	a545883a 	add	r2,r20,r21
  206eb0:	1083ffcc 	andi	r2,r2,4095
  206eb4:	18abc83a 	sub	r21,r3,r2
  206eb8:	a80b883a 	mov	r5,r21
  206ebc:	9009883a 	mov	r4,r18
  206ec0:	0208e140 	call	208e14 <_sbrk_r>
  206ec4:	00ffffc4 	movi	r3,-1
  206ec8:	10c0e126 	beq	r2,r3,207250 <_malloc_r+0x788>
  206ecc:	1505c83a 	sub	r2,r2,r20
  206ed0:	1545883a 	add	r2,r2,r21
  206ed4:	10800054 	ori	r2,r2,1
  206ed8:	e0c00017 	ldw	r3,0(fp)
  206edc:	9d000215 	stw	r20,8(r19)
  206ee0:	a0800115 	stw	r2,4(r20)
  206ee4:	a8c7883a 	add	r3,r21,r3
  206ee8:	e0c00015 	stw	r3,0(fp)
  206eec:	84c00e26 	beq	r16,r19,206f28 <_malloc_r+0x460>
  206ef0:	018003c4 	movi	r6,15
  206ef4:	3580a72e 	bgeu	r6,r22,207194 <_malloc_r+0x6cc>
  206ef8:	81400117 	ldw	r5,4(r16)
  206efc:	013ffe04 	movi	r4,-8
  206f00:	b0bffd04 	addi	r2,r22,-12
  206f04:	1104703a 	and	r2,r2,r4
  206f08:	2900004c 	andi	r4,r5,1
  206f0c:	2088b03a 	or	r4,r4,r2
  206f10:	81000115 	stw	r4,4(r16)
  206f14:	01400144 	movi	r5,5
  206f18:	8089883a 	add	r4,r16,r2
  206f1c:	21400115 	stw	r5,4(r4)
  206f20:	21400215 	stw	r5,8(r4)
  206f24:	3080cd36 	bltu	r6,r2,20725c <_malloc_r+0x794>
  206f28:	00801074 	movhi	r2,65
  206f2c:	10a71304 	addi	r2,r2,-25524
  206f30:	11000017 	ldw	r4,0(r2)
  206f34:	20c0012e 	bgeu	r4,r3,206f3c <_malloc_r+0x474>
  206f38:	10c00015 	stw	r3,0(r2)
  206f3c:	00801074 	movhi	r2,65
  206f40:	10a71204 	addi	r2,r2,-25528
  206f44:	11000017 	ldw	r4,0(r2)
  206f48:	9c000217 	ldw	r16,8(r19)
  206f4c:	20c0012e 	bgeu	r4,r3,206f54 <_malloc_r+0x48c>
  206f50:	10c00015 	stw	r3,0(r2)
  206f54:	80c00117 	ldw	r3,4(r16)
  206f58:	00bfff04 	movi	r2,-4
  206f5c:	1886703a 	and	r3,r3,r2
  206f60:	1c45c83a 	sub	r2,r3,r17
  206f64:	1c400236 	bltu	r3,r17,206f70 <_malloc_r+0x4a8>
  206f68:	00c003c4 	movi	r3,15
  206f6c:	18800416 	blt	r3,r2,206f80 <_malloc_r+0x4b8>
  206f70:	9009883a 	mov	r4,r18
  206f74:	020ea840 	call	20ea84 <__malloc_unlock>
  206f78:	0005883a 	mov	r2,zero
  206f7c:	003f7b06 	br	206d6c <_gp+0xffdf5188>
  206f80:	88c00054 	ori	r3,r17,1
  206f84:	80c00115 	stw	r3,4(r16)
  206f88:	8463883a 	add	r17,r16,r17
  206f8c:	10800054 	ori	r2,r2,1
  206f90:	9c400215 	stw	r17,8(r19)
  206f94:	88800115 	stw	r2,4(r17)
  206f98:	9009883a 	mov	r4,r18
  206f9c:	020ea840 	call	20ea84 <__malloc_unlock>
  206fa0:	80800204 	addi	r2,r16,8
  206fa4:	003f7106 	br	206d6c <_gp+0xffdf5188>
  206fa8:	00c00504 	movi	r3,20
  206fac:	18804a2e 	bgeu	r3,r2,2070d8 <_malloc_r+0x610>
  206fb0:	00c01504 	movi	r3,84
  206fb4:	18806e36 	bltu	r3,r2,207170 <_malloc_r+0x6a8>
  206fb8:	8804d33a 	srli	r2,r17,12
  206fbc:	12001bc4 	addi	r8,r2,111
  206fc0:	11c01b84 	addi	r7,r2,110
  206fc4:	4209883a 	add	r4,r8,r8
  206fc8:	003edd06 	br	206b40 <_gp+0xffdf4f5c>
  206fcc:	3804d27a 	srli	r2,r7,9
  206fd0:	00c00104 	movi	r3,4
  206fd4:	1880442e 	bgeu	r3,r2,2070e8 <_malloc_r+0x620>
  206fd8:	00c00504 	movi	r3,20
  206fdc:	18808136 	bltu	r3,r2,2071e4 <_malloc_r+0x71c>
  206fe0:	11401704 	addi	r5,r2,92
  206fe4:	10c016c4 	addi	r3,r2,91
  206fe8:	294b883a 	add	r5,r5,r5
  206fec:	294b883a 	add	r5,r5,r5
  206ff0:	294b883a 	add	r5,r5,r5
  206ff4:	994b883a 	add	r5,r19,r5
  206ff8:	28800017 	ldw	r2,0(r5)
  206ffc:	01801074 	movhi	r6,65
  207000:	297ffe04 	addi	r5,r5,-8
  207004:	31a12704 	addi	r6,r6,-31588
  207008:	28806526 	beq	r5,r2,2071a0 <_malloc_r+0x6d8>
  20700c:	01bfff04 	movi	r6,-4
  207010:	10c00117 	ldw	r3,4(r2)
  207014:	1986703a 	and	r3,r3,r6
  207018:	38c0022e 	bgeu	r7,r3,207024 <_malloc_r+0x55c>
  20701c:	10800217 	ldw	r2,8(r2)
  207020:	28bffb1e 	bne	r5,r2,207010 <_gp+0xffdf542c>
  207024:	11400317 	ldw	r5,12(r2)
  207028:	98c00117 	ldw	r3,4(r19)
  20702c:	81400315 	stw	r5,12(r16)
  207030:	80800215 	stw	r2,8(r16)
  207034:	2c000215 	stw	r16,8(r5)
  207038:	14000315 	stw	r16,12(r2)
  20703c:	003ef806 	br	206c20 <_gp+0xffdf503c>
  207040:	88c00054 	ori	r3,r17,1
  207044:	80c00115 	stw	r3,4(r16)
  207048:	8463883a 	add	r17,r16,r17
  20704c:	34400515 	stw	r17,20(r6)
  207050:	34400415 	stw	r17,16(r6)
  207054:	10c00054 	ori	r3,r2,1
  207058:	8a000315 	stw	r8,12(r17)
  20705c:	8a000215 	stw	r8,8(r17)
  207060:	88c00115 	stw	r3,4(r17)
  207064:	88a3883a 	add	r17,r17,r2
  207068:	88800015 	stw	r2,0(r17)
  20706c:	9009883a 	mov	r4,r18
  207070:	020ea840 	call	20ea84 <__malloc_unlock>
  207074:	80800204 	addi	r2,r16,8
  207078:	003f3c06 	br	206d6c <_gp+0xffdf5188>
  20707c:	30c00117 	ldw	r3,4(r6)
  207080:	003ee706 	br	206c20 <_gp+0xffdf503c>
  207084:	5ac00044 	addi	r11,r11,1
  207088:	588000cc 	andi	r2,r11,3
  20708c:	31800204 	addi	r6,r6,8
  207090:	103efd1e 	bne	r2,zero,206c88 <_gp+0xffdf50a4>
  207094:	00002406 	br	207128 <_malloc_r+0x660>
  207098:	14000317 	ldw	r16,12(r2)
  20709c:	143f251e 	bne	r2,r16,206d34 <_gp+0xffdf5150>
  2070a0:	21000084 	addi	r4,r4,2
  2070a4:	003ebc06 	br	206b98 <_gp+0xffdf4fb4>
  2070a8:	8085883a 	add	r2,r16,r2
  2070ac:	10c00117 	ldw	r3,4(r2)
  2070b0:	81000317 	ldw	r4,12(r16)
  2070b4:	81400217 	ldw	r5,8(r16)
  2070b8:	18c00054 	ori	r3,r3,1
  2070bc:	10c00115 	stw	r3,4(r2)
  2070c0:	29000315 	stw	r4,12(r5)
  2070c4:	21400215 	stw	r5,8(r4)
  2070c8:	9009883a 	mov	r4,r18
  2070cc:	020ea840 	call	20ea84 <__malloc_unlock>
  2070d0:	80800204 	addi	r2,r16,8
  2070d4:	003f2506 	br	206d6c <_gp+0xffdf5188>
  2070d8:	12001704 	addi	r8,r2,92
  2070dc:	11c016c4 	addi	r7,r2,91
  2070e0:	4209883a 	add	r4,r8,r8
  2070e4:	003e9606 	br	206b40 <_gp+0xffdf4f5c>
  2070e8:	3804d1ba 	srli	r2,r7,6
  2070ec:	11400e44 	addi	r5,r2,57
  2070f0:	10c00e04 	addi	r3,r2,56
  2070f4:	294b883a 	add	r5,r5,r5
  2070f8:	003fbc06 	br	206fec <_gp+0xffdf5408>
  2070fc:	84ff5926 	beq	r16,r19,206e64 <_gp+0xffdf5280>
  207100:	00801074 	movhi	r2,65
  207104:	10a12704 	addi	r2,r2,-31588
  207108:	14000217 	ldw	r16,8(r2)
  20710c:	00bfff04 	movi	r2,-4
  207110:	80c00117 	ldw	r3,4(r16)
  207114:	1886703a 	and	r3,r3,r2
  207118:	003f9106 	br	206f60 <_gp+0xffdf537c>
  20711c:	60800217 	ldw	r2,8(r12)
  207120:	213fffc4 	addi	r4,r4,-1
  207124:	1300651e 	bne	r2,r12,2072bc <_malloc_r+0x7f4>
  207128:	208000cc 	andi	r2,r4,3
  20712c:	633ffe04 	addi	r12,r12,-8
  207130:	103ffa1e 	bne	r2,zero,20711c <_gp+0xffdf5538>
  207134:	98800117 	ldw	r2,4(r19)
  207138:	0146303a 	nor	r3,zero,r5
  20713c:	1884703a 	and	r2,r3,r2
  207140:	98800115 	stw	r2,4(r19)
  207144:	294b883a 	add	r5,r5,r5
  207148:	117f2836 	bltu	r2,r5,206dec <_gp+0xffdf5208>
  20714c:	283f2726 	beq	r5,zero,206dec <_gp+0xffdf5208>
  207150:	2886703a 	and	r3,r5,r2
  207154:	5809883a 	mov	r4,r11
  207158:	183ec31e 	bne	r3,zero,206c68 <_gp+0xffdf5084>
  20715c:	294b883a 	add	r5,r5,r5
  207160:	2886703a 	and	r3,r5,r2
  207164:	21000104 	addi	r4,r4,4
  207168:	183ffc26 	beq	r3,zero,20715c <_gp+0xffdf5578>
  20716c:	003ebe06 	br	206c68 <_gp+0xffdf5084>
  207170:	00c05504 	movi	r3,340
  207174:	18801236 	bltu	r3,r2,2071c0 <_malloc_r+0x6f8>
  207178:	8804d3fa 	srli	r2,r17,15
  20717c:	12001e04 	addi	r8,r2,120
  207180:	11c01dc4 	addi	r7,r2,119
  207184:	4209883a 	add	r4,r8,r8
  207188:	003e6d06 	br	206b40 <_gp+0xffdf4f5c>
  20718c:	00c40004 	movi	r3,4096
  207190:	003f4606 	br	206eac <_gp+0xffdf52c8>
  207194:	00800044 	movi	r2,1
  207198:	a0800115 	stw	r2,4(r20)
  20719c:	003f7406 	br	206f70 <_gp+0xffdf538c>
  2071a0:	1805d0ba 	srai	r2,r3,2
  2071a4:	01c00044 	movi	r7,1
  2071a8:	30c00117 	ldw	r3,4(r6)
  2071ac:	388e983a 	sll	r7,r7,r2
  2071b0:	2805883a 	mov	r2,r5
  2071b4:	38c6b03a 	or	r3,r7,r3
  2071b8:	30c00115 	stw	r3,4(r6)
  2071bc:	003f9b06 	br	20702c <_gp+0xffdf5448>
  2071c0:	00c15504 	movi	r3,1364
  2071c4:	18801a36 	bltu	r3,r2,207230 <_malloc_r+0x768>
  2071c8:	8804d4ba 	srli	r2,r17,18
  2071cc:	12001f44 	addi	r8,r2,125
  2071d0:	11c01f04 	addi	r7,r2,124
  2071d4:	4209883a 	add	r4,r8,r8
  2071d8:	003e5906 	br	206b40 <_gp+0xffdf4f5c>
  2071dc:	ad400404 	addi	r21,r21,16
  2071e0:	003f1706 	br	206e40 <_gp+0xffdf525c>
  2071e4:	00c01504 	movi	r3,84
  2071e8:	18802336 	bltu	r3,r2,207278 <_malloc_r+0x7b0>
  2071ec:	3804d33a 	srli	r2,r7,12
  2071f0:	11401bc4 	addi	r5,r2,111
  2071f4:	10c01b84 	addi	r3,r2,110
  2071f8:	294b883a 	add	r5,r5,r5
  2071fc:	003f7b06 	br	206fec <_gp+0xffdf5408>
  207200:	9c000217 	ldw	r16,8(r19)
  207204:	00bfff04 	movi	r2,-4
  207208:	80c00117 	ldw	r3,4(r16)
  20720c:	1886703a 	and	r3,r3,r2
  207210:	003f5306 	br	206f60 <_gp+0xffdf537c>
  207214:	3083ffcc 	andi	r2,r6,4095
  207218:	103f181e 	bne	r2,zero,206e7c <_gp+0xffdf5298>
  20721c:	99000217 	ldw	r4,8(r19)
  207220:	b545883a 	add	r2,r22,r21
  207224:	10800054 	ori	r2,r2,1
  207228:	20800115 	stw	r2,4(r4)
  20722c:	003f3e06 	br	206f28 <_gp+0xffdf5344>
  207230:	01003f84 	movi	r4,254
  207234:	02001fc4 	movi	r8,127
  207238:	01c01f84 	movi	r7,126
  20723c:	003e4006 	br	206b40 <_gp+0xffdf4f5c>
  207240:	00801074 	movhi	r2,65
  207244:	10a6fc04 	addi	r2,r2,-25616
  207248:	15000015 	stw	r20,0(r2)
  20724c:	003f1106 	br	206e94 <_gp+0xffdf52b0>
  207250:	00800044 	movi	r2,1
  207254:	002b883a 	mov	r21,zero
  207258:	003f1f06 	br	206ed8 <_gp+0xffdf52f4>
  20725c:	81400204 	addi	r5,r16,8
  207260:	9009883a 	mov	r4,r18
  207264:	0205ed00 	call	205ed0 <_free_r>
  207268:	00801074 	movhi	r2,65
  20726c:	10a71d04 	addi	r2,r2,-25484
  207270:	10c00017 	ldw	r3,0(r2)
  207274:	003f2c06 	br	206f28 <_gp+0xffdf5344>
  207278:	00c05504 	movi	r3,340
  20727c:	18800536 	bltu	r3,r2,207294 <_malloc_r+0x7cc>
  207280:	3804d3fa 	srli	r2,r7,15
  207284:	11401e04 	addi	r5,r2,120
  207288:	10c01dc4 	addi	r3,r2,119
  20728c:	294b883a 	add	r5,r5,r5
  207290:	003f5606 	br	206fec <_gp+0xffdf5408>
  207294:	00c15504 	movi	r3,1364
  207298:	18800536 	bltu	r3,r2,2072b0 <_malloc_r+0x7e8>
  20729c:	3804d4ba 	srli	r2,r7,18
  2072a0:	11401f44 	addi	r5,r2,125
  2072a4:	10c01f04 	addi	r3,r2,124
  2072a8:	294b883a 	add	r5,r5,r5
  2072ac:	003f4f06 	br	206fec <_gp+0xffdf5408>
  2072b0:	01403f84 	movi	r5,254
  2072b4:	00c01f84 	movi	r3,126
  2072b8:	003f4c06 	br	206fec <_gp+0xffdf5408>
  2072bc:	98800117 	ldw	r2,4(r19)
  2072c0:	003fa006 	br	207144 <_gp+0xffdf5560>
  2072c4:	8808d0fa 	srli	r4,r17,3
  2072c8:	20800044 	addi	r2,r4,1
  2072cc:	1085883a 	add	r2,r2,r2
  2072d0:	003e9006 	br	206d14 <_gp+0xffdf5130>

002072d4 <memchr>:
  2072d4:	208000cc 	andi	r2,r4,3
  2072d8:	280f883a 	mov	r7,r5
  2072dc:	10003426 	beq	r2,zero,2073b0 <memchr+0xdc>
  2072e0:	30bfffc4 	addi	r2,r6,-1
  2072e4:	30001a26 	beq	r6,zero,207350 <memchr+0x7c>
  2072e8:	20c00003 	ldbu	r3,0(r4)
  2072ec:	29803fcc 	andi	r6,r5,255
  2072f0:	30c0051e 	bne	r6,r3,207308 <memchr+0x34>
  2072f4:	00001806 	br	207358 <memchr+0x84>
  2072f8:	10001526 	beq	r2,zero,207350 <memchr+0x7c>
  2072fc:	20c00003 	ldbu	r3,0(r4)
  207300:	10bfffc4 	addi	r2,r2,-1
  207304:	30c01426 	beq	r6,r3,207358 <memchr+0x84>
  207308:	21000044 	addi	r4,r4,1
  20730c:	20c000cc 	andi	r3,r4,3
  207310:	183ff91e 	bne	r3,zero,2072f8 <_gp+0xffdf5714>
  207314:	020000c4 	movi	r8,3
  207318:	40801136 	bltu	r8,r2,207360 <memchr+0x8c>
  20731c:	10000c26 	beq	r2,zero,207350 <memchr+0x7c>
  207320:	20c00003 	ldbu	r3,0(r4)
  207324:	29403fcc 	andi	r5,r5,255
  207328:	28c00b26 	beq	r5,r3,207358 <memchr+0x84>
  20732c:	20c00044 	addi	r3,r4,1
  207330:	39803fcc 	andi	r6,r7,255
  207334:	2089883a 	add	r4,r4,r2
  207338:	00000306 	br	207348 <memchr+0x74>
  20733c:	18c00044 	addi	r3,r3,1
  207340:	197fffc3 	ldbu	r5,-1(r3)
  207344:	31400526 	beq	r6,r5,20735c <memchr+0x88>
  207348:	1805883a 	mov	r2,r3
  20734c:	20fffb1e 	bne	r4,r3,20733c <_gp+0xffdf5758>
  207350:	0005883a 	mov	r2,zero
  207354:	f800283a 	ret
  207358:	2005883a 	mov	r2,r4
  20735c:	f800283a 	ret
  207360:	28c03fcc 	andi	r3,r5,255
  207364:	1812923a 	slli	r9,r3,8
  207368:	02ffbff4 	movhi	r11,65279
  20736c:	02a02074 	movhi	r10,32897
  207370:	48d2b03a 	or	r9,r9,r3
  207374:	4806943a 	slli	r3,r9,16
  207378:	5affbfc4 	addi	r11,r11,-257
  20737c:	52a02004 	addi	r10,r10,-32640
  207380:	48d2b03a 	or	r9,r9,r3
  207384:	20c00017 	ldw	r3,0(r4)
  207388:	48c6f03a 	xor	r3,r9,r3
  20738c:	1acd883a 	add	r6,r3,r11
  207390:	00c6303a 	nor	r3,zero,r3
  207394:	30c6703a 	and	r3,r6,r3
  207398:	1a86703a 	and	r3,r3,r10
  20739c:	183fe01e 	bne	r3,zero,207320 <_gp+0xffdf573c>
  2073a0:	10bfff04 	addi	r2,r2,-4
  2073a4:	21000104 	addi	r4,r4,4
  2073a8:	40bff636 	bltu	r8,r2,207384 <_gp+0xffdf57a0>
  2073ac:	003fdb06 	br	20731c <_gp+0xffdf5738>
  2073b0:	3005883a 	mov	r2,r6
  2073b4:	003fd706 	br	207314 <_gp+0xffdf5730>

002073b8 <memcpy>:
  2073b8:	defffd04 	addi	sp,sp,-12
  2073bc:	dfc00215 	stw	ra,8(sp)
  2073c0:	dc400115 	stw	r17,4(sp)
  2073c4:	dc000015 	stw	r16,0(sp)
  2073c8:	00c003c4 	movi	r3,15
  2073cc:	2005883a 	mov	r2,r4
  2073d0:	1980452e 	bgeu	r3,r6,2074e8 <memcpy+0x130>
  2073d4:	2906b03a 	or	r3,r5,r4
  2073d8:	18c000cc 	andi	r3,r3,3
  2073dc:	1800441e 	bne	r3,zero,2074f0 <memcpy+0x138>
  2073e0:	347ffc04 	addi	r17,r6,-16
  2073e4:	8822d13a 	srli	r17,r17,4
  2073e8:	28c00104 	addi	r3,r5,4
  2073ec:	23400104 	addi	r13,r4,4
  2073f0:	8820913a 	slli	r16,r17,4
  2073f4:	2b000204 	addi	r12,r5,8
  2073f8:	22c00204 	addi	r11,r4,8
  2073fc:	84000504 	addi	r16,r16,20
  207400:	2a800304 	addi	r10,r5,12
  207404:	22400304 	addi	r9,r4,12
  207408:	2c21883a 	add	r16,r5,r16
  20740c:	2811883a 	mov	r8,r5
  207410:	200f883a 	mov	r7,r4
  207414:	41000017 	ldw	r4,0(r8)
  207418:	1fc00017 	ldw	ra,0(r3)
  20741c:	63c00017 	ldw	r15,0(r12)
  207420:	39000015 	stw	r4,0(r7)
  207424:	53800017 	ldw	r14,0(r10)
  207428:	6fc00015 	stw	ra,0(r13)
  20742c:	5bc00015 	stw	r15,0(r11)
  207430:	4b800015 	stw	r14,0(r9)
  207434:	18c00404 	addi	r3,r3,16
  207438:	39c00404 	addi	r7,r7,16
  20743c:	42000404 	addi	r8,r8,16
  207440:	6b400404 	addi	r13,r13,16
  207444:	63000404 	addi	r12,r12,16
  207448:	5ac00404 	addi	r11,r11,16
  20744c:	52800404 	addi	r10,r10,16
  207450:	4a400404 	addi	r9,r9,16
  207454:	1c3fef1e 	bne	r3,r16,207414 <_gp+0xffdf5830>
  207458:	89c00044 	addi	r7,r17,1
  20745c:	380e913a 	slli	r7,r7,4
  207460:	310003cc 	andi	r4,r6,15
  207464:	02c000c4 	movi	r11,3
  207468:	11c7883a 	add	r3,r2,r7
  20746c:	29cb883a 	add	r5,r5,r7
  207470:	5900212e 	bgeu	r11,r4,2074f8 <memcpy+0x140>
  207474:	1813883a 	mov	r9,r3
  207478:	2811883a 	mov	r8,r5
  20747c:	200f883a 	mov	r7,r4
  207480:	42800017 	ldw	r10,0(r8)
  207484:	4a400104 	addi	r9,r9,4
  207488:	39ffff04 	addi	r7,r7,-4
  20748c:	4abfff15 	stw	r10,-4(r9)
  207490:	42000104 	addi	r8,r8,4
  207494:	59fffa36 	bltu	r11,r7,207480 <_gp+0xffdf589c>
  207498:	213fff04 	addi	r4,r4,-4
  20749c:	2008d0ba 	srli	r4,r4,2
  2074a0:	318000cc 	andi	r6,r6,3
  2074a4:	21000044 	addi	r4,r4,1
  2074a8:	2109883a 	add	r4,r4,r4
  2074ac:	2109883a 	add	r4,r4,r4
  2074b0:	1907883a 	add	r3,r3,r4
  2074b4:	290b883a 	add	r5,r5,r4
  2074b8:	30000626 	beq	r6,zero,2074d4 <memcpy+0x11c>
  2074bc:	198d883a 	add	r6,r3,r6
  2074c0:	29c00003 	ldbu	r7,0(r5)
  2074c4:	18c00044 	addi	r3,r3,1
  2074c8:	29400044 	addi	r5,r5,1
  2074cc:	19ffffc5 	stb	r7,-1(r3)
  2074d0:	19bffb1e 	bne	r3,r6,2074c0 <_gp+0xffdf58dc>
  2074d4:	dfc00217 	ldw	ra,8(sp)
  2074d8:	dc400117 	ldw	r17,4(sp)
  2074dc:	dc000017 	ldw	r16,0(sp)
  2074e0:	dec00304 	addi	sp,sp,12
  2074e4:	f800283a 	ret
  2074e8:	2007883a 	mov	r3,r4
  2074ec:	003ff206 	br	2074b8 <_gp+0xffdf58d4>
  2074f0:	2007883a 	mov	r3,r4
  2074f4:	003ff106 	br	2074bc <_gp+0xffdf58d8>
  2074f8:	200d883a 	mov	r6,r4
  2074fc:	003fee06 	br	2074b8 <_gp+0xffdf58d4>

00207500 <memmove>:
  207500:	2005883a 	mov	r2,r4
  207504:	29000b2e 	bgeu	r5,r4,207534 <memmove+0x34>
  207508:	298f883a 	add	r7,r5,r6
  20750c:	21c0092e 	bgeu	r4,r7,207534 <memmove+0x34>
  207510:	2187883a 	add	r3,r4,r6
  207514:	198bc83a 	sub	r5,r3,r6
  207518:	30004826 	beq	r6,zero,20763c <memmove+0x13c>
  20751c:	39ffffc4 	addi	r7,r7,-1
  207520:	39000003 	ldbu	r4,0(r7)
  207524:	18ffffc4 	addi	r3,r3,-1
  207528:	19000005 	stb	r4,0(r3)
  20752c:	28fffb1e 	bne	r5,r3,20751c <_gp+0xffdf5938>
  207530:	f800283a 	ret
  207534:	00c003c4 	movi	r3,15
  207538:	1980412e 	bgeu	r3,r6,207640 <memmove+0x140>
  20753c:	2886b03a 	or	r3,r5,r2
  207540:	18c000cc 	andi	r3,r3,3
  207544:	1800401e 	bne	r3,zero,207648 <memmove+0x148>
  207548:	33fffc04 	addi	r15,r6,-16
  20754c:	781ed13a 	srli	r15,r15,4
  207550:	28c00104 	addi	r3,r5,4
  207554:	13400104 	addi	r13,r2,4
  207558:	781c913a 	slli	r14,r15,4
  20755c:	2b000204 	addi	r12,r5,8
  207560:	12c00204 	addi	r11,r2,8
  207564:	73800504 	addi	r14,r14,20
  207568:	2a800304 	addi	r10,r5,12
  20756c:	12400304 	addi	r9,r2,12
  207570:	2b9d883a 	add	r14,r5,r14
  207574:	2811883a 	mov	r8,r5
  207578:	100f883a 	mov	r7,r2
  20757c:	41000017 	ldw	r4,0(r8)
  207580:	39c00404 	addi	r7,r7,16
  207584:	18c00404 	addi	r3,r3,16
  207588:	393ffc15 	stw	r4,-16(r7)
  20758c:	193ffc17 	ldw	r4,-16(r3)
  207590:	6b400404 	addi	r13,r13,16
  207594:	5ac00404 	addi	r11,r11,16
  207598:	693ffc15 	stw	r4,-16(r13)
  20759c:	61000017 	ldw	r4,0(r12)
  2075a0:	4a400404 	addi	r9,r9,16
  2075a4:	42000404 	addi	r8,r8,16
  2075a8:	593ffc15 	stw	r4,-16(r11)
  2075ac:	51000017 	ldw	r4,0(r10)
  2075b0:	63000404 	addi	r12,r12,16
  2075b4:	52800404 	addi	r10,r10,16
  2075b8:	493ffc15 	stw	r4,-16(r9)
  2075bc:	1bbfef1e 	bne	r3,r14,20757c <_gp+0xffdf5998>
  2075c0:	79000044 	addi	r4,r15,1
  2075c4:	2008913a 	slli	r4,r4,4
  2075c8:	328003cc 	andi	r10,r6,15
  2075cc:	02c000c4 	movi	r11,3
  2075d0:	1107883a 	add	r3,r2,r4
  2075d4:	290b883a 	add	r5,r5,r4
  2075d8:	5a801e2e 	bgeu	r11,r10,207654 <memmove+0x154>
  2075dc:	1813883a 	mov	r9,r3
  2075e0:	2811883a 	mov	r8,r5
  2075e4:	500f883a 	mov	r7,r10
  2075e8:	41000017 	ldw	r4,0(r8)
  2075ec:	4a400104 	addi	r9,r9,4
  2075f0:	39ffff04 	addi	r7,r7,-4
  2075f4:	493fff15 	stw	r4,-4(r9)
  2075f8:	42000104 	addi	r8,r8,4
  2075fc:	59fffa36 	bltu	r11,r7,2075e8 <_gp+0xffdf5a04>
  207600:	513fff04 	addi	r4,r10,-4
  207604:	2008d0ba 	srli	r4,r4,2
  207608:	318000cc 	andi	r6,r6,3
  20760c:	21000044 	addi	r4,r4,1
  207610:	2109883a 	add	r4,r4,r4
  207614:	2109883a 	add	r4,r4,r4
  207618:	1907883a 	add	r3,r3,r4
  20761c:	290b883a 	add	r5,r5,r4
  207620:	30000b26 	beq	r6,zero,207650 <memmove+0x150>
  207624:	198d883a 	add	r6,r3,r6
  207628:	29c00003 	ldbu	r7,0(r5)
  20762c:	18c00044 	addi	r3,r3,1
  207630:	29400044 	addi	r5,r5,1
  207634:	19ffffc5 	stb	r7,-1(r3)
  207638:	19bffb1e 	bne	r3,r6,207628 <_gp+0xffdf5a44>
  20763c:	f800283a 	ret
  207640:	1007883a 	mov	r3,r2
  207644:	003ff606 	br	207620 <_gp+0xffdf5a3c>
  207648:	1007883a 	mov	r3,r2
  20764c:	003ff506 	br	207624 <_gp+0xffdf5a40>
  207650:	f800283a 	ret
  207654:	500d883a 	mov	r6,r10
  207658:	003ff106 	br	207620 <_gp+0xffdf5a3c>

0020765c <memset>:
  20765c:	20c000cc 	andi	r3,r4,3
  207660:	2005883a 	mov	r2,r4
  207664:	18004426 	beq	r3,zero,207778 <memset+0x11c>
  207668:	31ffffc4 	addi	r7,r6,-1
  20766c:	30004026 	beq	r6,zero,207770 <memset+0x114>
  207670:	2813883a 	mov	r9,r5
  207674:	200d883a 	mov	r6,r4
  207678:	2007883a 	mov	r3,r4
  20767c:	00000406 	br	207690 <memset+0x34>
  207680:	3a3fffc4 	addi	r8,r7,-1
  207684:	31800044 	addi	r6,r6,1
  207688:	38003926 	beq	r7,zero,207770 <memset+0x114>
  20768c:	400f883a 	mov	r7,r8
  207690:	18c00044 	addi	r3,r3,1
  207694:	32400005 	stb	r9,0(r6)
  207698:	1a0000cc 	andi	r8,r3,3
  20769c:	403ff81e 	bne	r8,zero,207680 <_gp+0xffdf5a9c>
  2076a0:	010000c4 	movi	r4,3
  2076a4:	21c02d2e 	bgeu	r4,r7,20775c <memset+0x100>
  2076a8:	29003fcc 	andi	r4,r5,255
  2076ac:	200c923a 	slli	r6,r4,8
  2076b0:	3108b03a 	or	r4,r6,r4
  2076b4:	200c943a 	slli	r6,r4,16
  2076b8:	218cb03a 	or	r6,r4,r6
  2076bc:	010003c4 	movi	r4,15
  2076c0:	21c0182e 	bgeu	r4,r7,207724 <memset+0xc8>
  2076c4:	3b3ffc04 	addi	r12,r7,-16
  2076c8:	6018d13a 	srli	r12,r12,4
  2076cc:	1a000104 	addi	r8,r3,4
  2076d0:	1ac00204 	addi	r11,r3,8
  2076d4:	6008913a 	slli	r4,r12,4
  2076d8:	1a800304 	addi	r10,r3,12
  2076dc:	1813883a 	mov	r9,r3
  2076e0:	21000504 	addi	r4,r4,20
  2076e4:	1909883a 	add	r4,r3,r4
  2076e8:	49800015 	stw	r6,0(r9)
  2076ec:	41800015 	stw	r6,0(r8)
  2076f0:	59800015 	stw	r6,0(r11)
  2076f4:	51800015 	stw	r6,0(r10)
  2076f8:	42000404 	addi	r8,r8,16
  2076fc:	4a400404 	addi	r9,r9,16
  207700:	5ac00404 	addi	r11,r11,16
  207704:	52800404 	addi	r10,r10,16
  207708:	413ff71e 	bne	r8,r4,2076e8 <_gp+0xffdf5b04>
  20770c:	63000044 	addi	r12,r12,1
  207710:	6018913a 	slli	r12,r12,4
  207714:	39c003cc 	andi	r7,r7,15
  207718:	010000c4 	movi	r4,3
  20771c:	1b07883a 	add	r3,r3,r12
  207720:	21c00e2e 	bgeu	r4,r7,20775c <memset+0x100>
  207724:	1813883a 	mov	r9,r3
  207728:	3811883a 	mov	r8,r7
  20772c:	010000c4 	movi	r4,3
  207730:	49800015 	stw	r6,0(r9)
  207734:	423fff04 	addi	r8,r8,-4
  207738:	4a400104 	addi	r9,r9,4
  20773c:	223ffc36 	bltu	r4,r8,207730 <_gp+0xffdf5b4c>
  207740:	393fff04 	addi	r4,r7,-4
  207744:	2008d0ba 	srli	r4,r4,2
  207748:	39c000cc 	andi	r7,r7,3
  20774c:	21000044 	addi	r4,r4,1
  207750:	2109883a 	add	r4,r4,r4
  207754:	2109883a 	add	r4,r4,r4
  207758:	1907883a 	add	r3,r3,r4
  20775c:	38000526 	beq	r7,zero,207774 <memset+0x118>
  207760:	19cf883a 	add	r7,r3,r7
  207764:	19400005 	stb	r5,0(r3)
  207768:	18c00044 	addi	r3,r3,1
  20776c:	38fffd1e 	bne	r7,r3,207764 <_gp+0xffdf5b80>
  207770:	f800283a 	ret
  207774:	f800283a 	ret
  207778:	2007883a 	mov	r3,r4
  20777c:	300f883a 	mov	r7,r6
  207780:	003fc706 	br	2076a0 <_gp+0xffdf5abc>

00207784 <_Balloc>:
  207784:	20801317 	ldw	r2,76(r4)
  207788:	defffc04 	addi	sp,sp,-16
  20778c:	dc400115 	stw	r17,4(sp)
  207790:	dc000015 	stw	r16,0(sp)
  207794:	dfc00315 	stw	ra,12(sp)
  207798:	dc800215 	stw	r18,8(sp)
  20779c:	2023883a 	mov	r17,r4
  2077a0:	2821883a 	mov	r16,r5
  2077a4:	10000f26 	beq	r2,zero,2077e4 <_Balloc+0x60>
  2077a8:	8407883a 	add	r3,r16,r16
  2077ac:	18c7883a 	add	r3,r3,r3
  2077b0:	10c7883a 	add	r3,r2,r3
  2077b4:	18800017 	ldw	r2,0(r3)
  2077b8:	10001126 	beq	r2,zero,207800 <_Balloc+0x7c>
  2077bc:	11000017 	ldw	r4,0(r2)
  2077c0:	19000015 	stw	r4,0(r3)
  2077c4:	10000415 	stw	zero,16(r2)
  2077c8:	10000315 	stw	zero,12(r2)
  2077cc:	dfc00317 	ldw	ra,12(sp)
  2077d0:	dc800217 	ldw	r18,8(sp)
  2077d4:	dc400117 	ldw	r17,4(sp)
  2077d8:	dc000017 	ldw	r16,0(sp)
  2077dc:	dec00404 	addi	sp,sp,16
  2077e0:	f800283a 	ret
  2077e4:	01800844 	movi	r6,33
  2077e8:	01400104 	movi	r5,4
  2077ec:	020a82c0 	call	20a82c <_calloc_r>
  2077f0:	88801315 	stw	r2,76(r17)
  2077f4:	103fec1e 	bne	r2,zero,2077a8 <_gp+0xffdf5bc4>
  2077f8:	0005883a 	mov	r2,zero
  2077fc:	003ff306 	br	2077cc <_gp+0xffdf5be8>
  207800:	01400044 	movi	r5,1
  207804:	2c24983a 	sll	r18,r5,r16
  207808:	8809883a 	mov	r4,r17
  20780c:	91800144 	addi	r6,r18,5
  207810:	318d883a 	add	r6,r6,r6
  207814:	318d883a 	add	r6,r6,r6
  207818:	020a82c0 	call	20a82c <_calloc_r>
  20781c:	103ff626 	beq	r2,zero,2077f8 <_gp+0xffdf5c14>
  207820:	14000115 	stw	r16,4(r2)
  207824:	14800215 	stw	r18,8(r2)
  207828:	003fe606 	br	2077c4 <_gp+0xffdf5be0>

0020782c <_Bfree>:
  20782c:	28000826 	beq	r5,zero,207850 <_Bfree+0x24>
  207830:	28c00117 	ldw	r3,4(r5)
  207834:	20801317 	ldw	r2,76(r4)
  207838:	18c7883a 	add	r3,r3,r3
  20783c:	18c7883a 	add	r3,r3,r3
  207840:	10c5883a 	add	r2,r2,r3
  207844:	10c00017 	ldw	r3,0(r2)
  207848:	28c00015 	stw	r3,0(r5)
  20784c:	11400015 	stw	r5,0(r2)
  207850:	f800283a 	ret

00207854 <__multadd>:
  207854:	defff704 	addi	sp,sp,-36
  207858:	dc800215 	stw	r18,8(sp)
  20785c:	2c800417 	ldw	r18,16(r5)
  207860:	dd800615 	stw	r22,24(sp)
  207864:	dd400515 	stw	r21,20(sp)
  207868:	dd000415 	stw	r20,16(sp)
  20786c:	dcc00315 	stw	r19,12(sp)
  207870:	dc400115 	stw	r17,4(sp)
  207874:	dc000015 	stw	r16,0(sp)
  207878:	dfc00815 	stw	ra,32(sp)
  20787c:	ddc00715 	stw	r23,28(sp)
  207880:	2827883a 	mov	r19,r5
  207884:	2029883a 	mov	r20,r4
  207888:	3023883a 	mov	r17,r6
  20788c:	3821883a 	mov	r16,r7
  207890:	2d400504 	addi	r21,r5,20
  207894:	002d883a 	mov	r22,zero
  207898:	adc00017 	ldw	r23,0(r21)
  20789c:	880b883a 	mov	r5,r17
  2078a0:	ad400104 	addi	r21,r21,4
  2078a4:	b93fffcc 	andi	r4,r23,65535
  2078a8:	020179c0 	call	20179c <__mulsi3>
  2078ac:	b808d43a 	srli	r4,r23,16
  2078b0:	880b883a 	mov	r5,r17
  2078b4:	1421883a 	add	r16,r2,r16
  2078b8:	020179c0 	call	20179c <__mulsi3>
  2078bc:	800ed43a 	srli	r7,r16,16
  2078c0:	80ffffcc 	andi	r3,r16,65535
  2078c4:	b5800044 	addi	r22,r22,1
  2078c8:	11c5883a 	add	r2,r2,r7
  2078cc:	100e943a 	slli	r7,r2,16
  2078d0:	1020d43a 	srli	r16,r2,16
  2078d4:	38c7883a 	add	r3,r7,r3
  2078d8:	a8ffff15 	stw	r3,-4(r21)
  2078dc:	b4bfee16 	blt	r22,r18,207898 <_gp+0xffdf5cb4>
  2078e0:	80000926 	beq	r16,zero,207908 <__multadd+0xb4>
  2078e4:	98800217 	ldw	r2,8(r19)
  2078e8:	9080130e 	bge	r18,r2,207938 <__multadd+0xe4>
  2078ec:	90800144 	addi	r2,r18,5
  2078f0:	1085883a 	add	r2,r2,r2
  2078f4:	1085883a 	add	r2,r2,r2
  2078f8:	9885883a 	add	r2,r19,r2
  2078fc:	14000015 	stw	r16,0(r2)
  207900:	94800044 	addi	r18,r18,1
  207904:	9c800415 	stw	r18,16(r19)
  207908:	9805883a 	mov	r2,r19
  20790c:	dfc00817 	ldw	ra,32(sp)
  207910:	ddc00717 	ldw	r23,28(sp)
  207914:	dd800617 	ldw	r22,24(sp)
  207918:	dd400517 	ldw	r21,20(sp)
  20791c:	dd000417 	ldw	r20,16(sp)
  207920:	dcc00317 	ldw	r19,12(sp)
  207924:	dc800217 	ldw	r18,8(sp)
  207928:	dc400117 	ldw	r17,4(sp)
  20792c:	dc000017 	ldw	r16,0(sp)
  207930:	dec00904 	addi	sp,sp,36
  207934:	f800283a 	ret
  207938:	99400117 	ldw	r5,4(r19)
  20793c:	a009883a 	mov	r4,r20
  207940:	29400044 	addi	r5,r5,1
  207944:	02077840 	call	207784 <_Balloc>
  207948:	99800417 	ldw	r6,16(r19)
  20794c:	99400304 	addi	r5,r19,12
  207950:	11000304 	addi	r4,r2,12
  207954:	31800084 	addi	r6,r6,2
  207958:	318d883a 	add	r6,r6,r6
  20795c:	318d883a 	add	r6,r6,r6
  207960:	1023883a 	mov	r17,r2
  207964:	02073b80 	call	2073b8 <memcpy>
  207968:	98000a26 	beq	r19,zero,207994 <__multadd+0x140>
  20796c:	98c00117 	ldw	r3,4(r19)
  207970:	a0801317 	ldw	r2,76(r20)
  207974:	18c7883a 	add	r3,r3,r3
  207978:	18c7883a 	add	r3,r3,r3
  20797c:	10c5883a 	add	r2,r2,r3
  207980:	10c00017 	ldw	r3,0(r2)
  207984:	98c00015 	stw	r3,0(r19)
  207988:	14c00015 	stw	r19,0(r2)
  20798c:	8827883a 	mov	r19,r17
  207990:	003fd606 	br	2078ec <_gp+0xffdf5d08>
  207994:	8827883a 	mov	r19,r17
  207998:	003fd406 	br	2078ec <_gp+0xffdf5d08>

0020799c <__s2b>:
  20799c:	defff904 	addi	sp,sp,-28
  2079a0:	dc400115 	stw	r17,4(sp)
  2079a4:	dc000015 	stw	r16,0(sp)
  2079a8:	2023883a 	mov	r17,r4
  2079ac:	2821883a 	mov	r16,r5
  2079b0:	39000204 	addi	r4,r7,8
  2079b4:	01400244 	movi	r5,9
  2079b8:	dcc00315 	stw	r19,12(sp)
  2079bc:	dc800215 	stw	r18,8(sp)
  2079c0:	dfc00615 	stw	ra,24(sp)
  2079c4:	dd400515 	stw	r21,20(sp)
  2079c8:	dd000415 	stw	r20,16(sp)
  2079cc:	3825883a 	mov	r18,r7
  2079d0:	3027883a 	mov	r19,r6
  2079d4:	0200a540 	call	200a54 <__divsi3>
  2079d8:	00c00044 	movi	r3,1
  2079dc:	000b883a 	mov	r5,zero
  2079e0:	1880030e 	bge	r3,r2,2079f0 <__s2b+0x54>
  2079e4:	18c7883a 	add	r3,r3,r3
  2079e8:	29400044 	addi	r5,r5,1
  2079ec:	18bffd16 	blt	r3,r2,2079e4 <_gp+0xffdf5e00>
  2079f0:	8809883a 	mov	r4,r17
  2079f4:	02077840 	call	207784 <_Balloc>
  2079f8:	d8c00717 	ldw	r3,28(sp)
  2079fc:	10c00515 	stw	r3,20(r2)
  207a00:	00c00044 	movi	r3,1
  207a04:	10c00415 	stw	r3,16(r2)
  207a08:	00c00244 	movi	r3,9
  207a0c:	1cc0210e 	bge	r3,r19,207a94 <__s2b+0xf8>
  207a10:	80eb883a 	add	r21,r16,r3
  207a14:	a829883a 	mov	r20,r21
  207a18:	84e1883a 	add	r16,r16,r19
  207a1c:	a1c00007 	ldb	r7,0(r20)
  207a20:	01800284 	movi	r6,10
  207a24:	a5000044 	addi	r20,r20,1
  207a28:	100b883a 	mov	r5,r2
  207a2c:	39fff404 	addi	r7,r7,-48
  207a30:	8809883a 	mov	r4,r17
  207a34:	02078540 	call	207854 <__multadd>
  207a38:	a43ff81e 	bne	r20,r16,207a1c <_gp+0xffdf5e38>
  207a3c:	ace1883a 	add	r16,r21,r19
  207a40:	843ffe04 	addi	r16,r16,-8
  207a44:	9c800a0e 	bge	r19,r18,207a70 <__s2b+0xd4>
  207a48:	94e5c83a 	sub	r18,r18,r19
  207a4c:	84a5883a 	add	r18,r16,r18
  207a50:	81c00007 	ldb	r7,0(r16)
  207a54:	01800284 	movi	r6,10
  207a58:	84000044 	addi	r16,r16,1
  207a5c:	100b883a 	mov	r5,r2
  207a60:	39fff404 	addi	r7,r7,-48
  207a64:	8809883a 	mov	r4,r17
  207a68:	02078540 	call	207854 <__multadd>
  207a6c:	84bff81e 	bne	r16,r18,207a50 <_gp+0xffdf5e6c>
  207a70:	dfc00617 	ldw	ra,24(sp)
  207a74:	dd400517 	ldw	r21,20(sp)
  207a78:	dd000417 	ldw	r20,16(sp)
  207a7c:	dcc00317 	ldw	r19,12(sp)
  207a80:	dc800217 	ldw	r18,8(sp)
  207a84:	dc400117 	ldw	r17,4(sp)
  207a88:	dc000017 	ldw	r16,0(sp)
  207a8c:	dec00704 	addi	sp,sp,28
  207a90:	f800283a 	ret
  207a94:	84000284 	addi	r16,r16,10
  207a98:	1827883a 	mov	r19,r3
  207a9c:	003fe906 	br	207a44 <_gp+0xffdf5e60>

00207aa0 <__hi0bits>:
  207aa0:	20bfffec 	andhi	r2,r4,65535
  207aa4:	1000141e 	bne	r2,zero,207af8 <__hi0bits+0x58>
  207aa8:	2008943a 	slli	r4,r4,16
  207aac:	00800404 	movi	r2,16
  207ab0:	20ffc02c 	andhi	r3,r4,65280
  207ab4:	1800021e 	bne	r3,zero,207ac0 <__hi0bits+0x20>
  207ab8:	2008923a 	slli	r4,r4,8
  207abc:	10800204 	addi	r2,r2,8
  207ac0:	20fc002c 	andhi	r3,r4,61440
  207ac4:	1800021e 	bne	r3,zero,207ad0 <__hi0bits+0x30>
  207ac8:	2008913a 	slli	r4,r4,4
  207acc:	10800104 	addi	r2,r2,4
  207ad0:	20f0002c 	andhi	r3,r4,49152
  207ad4:	1800031e 	bne	r3,zero,207ae4 <__hi0bits+0x44>
  207ad8:	2109883a 	add	r4,r4,r4
  207adc:	10800084 	addi	r2,r2,2
  207ae0:	2109883a 	add	r4,r4,r4
  207ae4:	20000316 	blt	r4,zero,207af4 <__hi0bits+0x54>
  207ae8:	2110002c 	andhi	r4,r4,16384
  207aec:	2000041e 	bne	r4,zero,207b00 <__hi0bits+0x60>
  207af0:	00800804 	movi	r2,32
  207af4:	f800283a 	ret
  207af8:	0005883a 	mov	r2,zero
  207afc:	003fec06 	br	207ab0 <_gp+0xffdf5ecc>
  207b00:	10800044 	addi	r2,r2,1
  207b04:	f800283a 	ret

00207b08 <__lo0bits>:
  207b08:	20c00017 	ldw	r3,0(r4)
  207b0c:	188001cc 	andi	r2,r3,7
  207b10:	10000826 	beq	r2,zero,207b34 <__lo0bits+0x2c>
  207b14:	1880004c 	andi	r2,r3,1
  207b18:	1000211e 	bne	r2,zero,207ba0 <__lo0bits+0x98>
  207b1c:	1880008c 	andi	r2,r3,2
  207b20:	1000211e 	bne	r2,zero,207ba8 <__lo0bits+0xa0>
  207b24:	1806d0ba 	srli	r3,r3,2
  207b28:	00800084 	movi	r2,2
  207b2c:	20c00015 	stw	r3,0(r4)
  207b30:	f800283a 	ret
  207b34:	18bfffcc 	andi	r2,r3,65535
  207b38:	10001326 	beq	r2,zero,207b88 <__lo0bits+0x80>
  207b3c:	0005883a 	mov	r2,zero
  207b40:	19403fcc 	andi	r5,r3,255
  207b44:	2800021e 	bne	r5,zero,207b50 <__lo0bits+0x48>
  207b48:	1806d23a 	srli	r3,r3,8
  207b4c:	10800204 	addi	r2,r2,8
  207b50:	194003cc 	andi	r5,r3,15
  207b54:	2800021e 	bne	r5,zero,207b60 <__lo0bits+0x58>
  207b58:	1806d13a 	srli	r3,r3,4
  207b5c:	10800104 	addi	r2,r2,4
  207b60:	194000cc 	andi	r5,r3,3
  207b64:	2800021e 	bne	r5,zero,207b70 <__lo0bits+0x68>
  207b68:	1806d0ba 	srli	r3,r3,2
  207b6c:	10800084 	addi	r2,r2,2
  207b70:	1940004c 	andi	r5,r3,1
  207b74:	2800081e 	bne	r5,zero,207b98 <__lo0bits+0x90>
  207b78:	1806d07a 	srli	r3,r3,1
  207b7c:	1800051e 	bne	r3,zero,207b94 <__lo0bits+0x8c>
  207b80:	00800804 	movi	r2,32
  207b84:	f800283a 	ret
  207b88:	1806d43a 	srli	r3,r3,16
  207b8c:	00800404 	movi	r2,16
  207b90:	003feb06 	br	207b40 <_gp+0xffdf5f5c>
  207b94:	10800044 	addi	r2,r2,1
  207b98:	20c00015 	stw	r3,0(r4)
  207b9c:	f800283a 	ret
  207ba0:	0005883a 	mov	r2,zero
  207ba4:	f800283a 	ret
  207ba8:	1806d07a 	srli	r3,r3,1
  207bac:	00800044 	movi	r2,1
  207bb0:	20c00015 	stw	r3,0(r4)
  207bb4:	f800283a 	ret

00207bb8 <__i2b>:
  207bb8:	defffd04 	addi	sp,sp,-12
  207bbc:	dc000015 	stw	r16,0(sp)
  207bc0:	04000044 	movi	r16,1
  207bc4:	dc400115 	stw	r17,4(sp)
  207bc8:	2823883a 	mov	r17,r5
  207bcc:	800b883a 	mov	r5,r16
  207bd0:	dfc00215 	stw	ra,8(sp)
  207bd4:	02077840 	call	207784 <_Balloc>
  207bd8:	14400515 	stw	r17,20(r2)
  207bdc:	14000415 	stw	r16,16(r2)
  207be0:	dfc00217 	ldw	ra,8(sp)
  207be4:	dc400117 	ldw	r17,4(sp)
  207be8:	dc000017 	ldw	r16,0(sp)
  207bec:	dec00304 	addi	sp,sp,12
  207bf0:	f800283a 	ret

00207bf4 <__multiply>:
  207bf4:	deffef04 	addi	sp,sp,-68
  207bf8:	dc400815 	stw	r17,32(sp)
  207bfc:	dc000715 	stw	r16,28(sp)
  207c00:	34400417 	ldw	r17,16(r6)
  207c04:	2c000417 	ldw	r16,16(r5)
  207c08:	dd800d15 	stw	r22,52(sp)
  207c0c:	dc800915 	stw	r18,36(sp)
  207c10:	dfc01015 	stw	ra,64(sp)
  207c14:	df000f15 	stw	fp,60(sp)
  207c18:	ddc00e15 	stw	r23,56(sp)
  207c1c:	dd400c15 	stw	r21,48(sp)
  207c20:	dd000b15 	stw	r20,44(sp)
  207c24:	dcc00a15 	stw	r19,40(sp)
  207c28:	2825883a 	mov	r18,r5
  207c2c:	302d883a 	mov	r22,r6
  207c30:	8440050e 	bge	r16,r17,207c48 <__multiply+0x54>
  207c34:	8007883a 	mov	r3,r16
  207c38:	3025883a 	mov	r18,r6
  207c3c:	8821883a 	mov	r16,r17
  207c40:	282d883a 	mov	r22,r5
  207c44:	1823883a 	mov	r17,r3
  207c48:	90800217 	ldw	r2,8(r18)
  207c4c:	8447883a 	add	r3,r16,r17
  207c50:	d8c00215 	stw	r3,8(sp)
  207c54:	91400117 	ldw	r5,4(r18)
  207c58:	10c0010e 	bge	r2,r3,207c60 <__multiply+0x6c>
  207c5c:	29400044 	addi	r5,r5,1
  207c60:	02077840 	call	207784 <_Balloc>
  207c64:	d8c00217 	ldw	r3,8(sp)
  207c68:	d8800615 	stw	r2,24(sp)
  207c6c:	18eb883a 	add	r21,r3,r3
  207c70:	ad6b883a 	add	r21,r21,r21
  207c74:	10c00504 	addi	r3,r2,20
  207c78:	1d6b883a 	add	r21,r3,r21
  207c7c:	d8c00115 	stw	r3,4(sp)
  207c80:	dd400315 	stw	r21,12(sp)
  207c84:	1805883a 	mov	r2,r3
  207c88:	1d40042e 	bgeu	r3,r21,207c9c <__multiply+0xa8>
  207c8c:	d8c00317 	ldw	r3,12(sp)
  207c90:	10000015 	stw	zero,0(r2)
  207c94:	10800104 	addi	r2,r2,4
  207c98:	10fffc36 	bltu	r2,r3,207c8c <_gp+0xffdf60a8>
  207c9c:	8c63883a 	add	r17,r17,r17
  207ca0:	b5800504 	addi	r22,r22,20
  207ca4:	8c63883a 	add	r17,r17,r17
  207ca8:	94800504 	addi	r18,r18,20
  207cac:	8421883a 	add	r16,r16,r16
  207cb0:	b463883a 	add	r17,r22,r17
  207cb4:	8421883a 	add	r16,r16,r16
  207cb8:	dd800015 	stw	r22,0(sp)
  207cbc:	dc800415 	stw	r18,16(sp)
  207cc0:	dc400515 	stw	r17,20(sp)
  207cc4:	9429883a 	add	r20,r18,r16
  207cc8:	b4404f2e 	bgeu	r22,r17,207e08 <__multiply+0x214>
  207ccc:	d8c00017 	ldw	r3,0(sp)
  207cd0:	1c800017 	ldw	r18,0(r3)
  207cd4:	947fffcc 	andi	r17,r18,65535
  207cd8:	88001e26 	beq	r17,zero,207d54 <__multiply+0x160>
  207cdc:	dd800117 	ldw	r22,4(sp)
  207ce0:	dd400417 	ldw	r21,16(sp)
  207ce4:	0027883a 	mov	r19,zero
  207ce8:	ac800017 	ldw	r18,0(r21)
  207cec:	b4000017 	ldw	r16,0(r22)
  207cf0:	880b883a 	mov	r5,r17
  207cf4:	913fffcc 	andi	r4,r18,65535
  207cf8:	020179c0 	call	20179c <__mulsi3>
  207cfc:	9008d43a 	srli	r4,r18,16
  207d00:	84bfffcc 	andi	r18,r16,65535
  207d04:	1485883a 	add	r2,r2,r18
  207d08:	14e5883a 	add	r18,r2,r19
  207d0c:	8020d43a 	srli	r16,r16,16
  207d10:	9026d43a 	srli	r19,r18,16
  207d14:	880b883a 	mov	r5,r17
  207d18:	020179c0 	call	20179c <__mulsi3>
  207d1c:	1405883a 	add	r2,r2,r16
  207d20:	14e1883a 	add	r16,r2,r19
  207d24:	90ffffcc 	andi	r3,r18,65535
  207d28:	8024943a 	slli	r18,r16,16
  207d2c:	ad400104 	addi	r21,r21,4
  207d30:	b005883a 	mov	r2,r22
  207d34:	90c6b03a 	or	r3,r18,r3
  207d38:	b0c00015 	stw	r3,0(r22)
  207d3c:	8026d43a 	srli	r19,r16,16
  207d40:	b5800104 	addi	r22,r22,4
  207d44:	ad3fe836 	bltu	r21,r20,207ce8 <_gp+0xffdf6104>
  207d48:	d8c00017 	ldw	r3,0(sp)
  207d4c:	14c00115 	stw	r19,4(r2)
  207d50:	1c800017 	ldw	r18,0(r3)
  207d54:	9024d43a 	srli	r18,r18,16
  207d58:	90002226 	beq	r18,zero,207de4 <__multiply+0x1f0>
  207d5c:	d8c00117 	ldw	r3,4(sp)
  207d60:	dd800417 	ldw	r22,16(sp)
  207d64:	002f883a 	mov	r23,zero
  207d68:	1f000017 	ldw	fp,0(r3)
  207d6c:	1823883a 	mov	r17,r3
  207d70:	182b883a 	mov	r21,r3
  207d74:	e021883a 	mov	r16,fp
  207d78:	00000106 	br	207d80 <__multiply+0x18c>
  207d7c:	982b883a 	mov	r21,r19
  207d80:	b100000b 	ldhu	r4,0(r22)
  207d84:	8020d43a 	srli	r16,r16,16
  207d88:	900b883a 	mov	r5,r18
  207d8c:	020179c0 	call	20179c <__mulsi3>
  207d90:	1405883a 	add	r2,r2,r16
  207d94:	15ef883a 	add	r23,r2,r23
  207d98:	b804943a 	slli	r2,r23,16
  207d9c:	e0ffffcc 	andi	r3,fp,65535
  207da0:	8c400104 	addi	r17,r17,4
  207da4:	10c6b03a 	or	r3,r2,r3
  207da8:	88ffff15 	stw	r3,-4(r17)
  207dac:	b5800104 	addi	r22,r22,4
  207db0:	b13fff17 	ldw	r4,-4(r22)
  207db4:	acc00104 	addi	r19,r21,4
  207db8:	900b883a 	mov	r5,r18
  207dbc:	2008d43a 	srli	r4,r4,16
  207dc0:	9c000017 	ldw	r16,0(r19)
  207dc4:	020179c0 	call	20179c <__mulsi3>
  207dc8:	b806d43a 	srli	r3,r23,16
  207dcc:	813fffcc 	andi	r4,r16,65535
  207dd0:	1105883a 	add	r2,r2,r4
  207dd4:	10f9883a 	add	fp,r2,r3
  207dd8:	e02ed43a 	srli	r23,fp,16
  207ddc:	b53fe736 	bltu	r22,r20,207d7c <_gp+0xffdf6198>
  207de0:	af000115 	stw	fp,4(r21)
  207de4:	d8c00017 	ldw	r3,0(sp)
  207de8:	d9000517 	ldw	r4,20(sp)
  207dec:	18c00104 	addi	r3,r3,4
  207df0:	d8c00015 	stw	r3,0(sp)
  207df4:	d8c00117 	ldw	r3,4(sp)
  207df8:	18c00104 	addi	r3,r3,4
  207dfc:	d8c00115 	stw	r3,4(sp)
  207e00:	d8c00017 	ldw	r3,0(sp)
  207e04:	193fb136 	bltu	r3,r4,207ccc <_gp+0xffdf60e8>
  207e08:	d8c00217 	ldw	r3,8(sp)
  207e0c:	00c00c0e 	bge	zero,r3,207e40 <__multiply+0x24c>
  207e10:	d8c00317 	ldw	r3,12(sp)
  207e14:	18bfff17 	ldw	r2,-4(r3)
  207e18:	1d7fff04 	addi	r21,r3,-4
  207e1c:	10000326 	beq	r2,zero,207e2c <__multiply+0x238>
  207e20:	00000706 	br	207e40 <__multiply+0x24c>
  207e24:	a8800017 	ldw	r2,0(r21)
  207e28:	1000051e 	bne	r2,zero,207e40 <__multiply+0x24c>
  207e2c:	d8c00217 	ldw	r3,8(sp)
  207e30:	ad7fff04 	addi	r21,r21,-4
  207e34:	18ffffc4 	addi	r3,r3,-1
  207e38:	d8c00215 	stw	r3,8(sp)
  207e3c:	183ff91e 	bne	r3,zero,207e24 <_gp+0xffdf6240>
  207e40:	d8c00617 	ldw	r3,24(sp)
  207e44:	d9000217 	ldw	r4,8(sp)
  207e48:	1805883a 	mov	r2,r3
  207e4c:	19000415 	stw	r4,16(r3)
  207e50:	dfc01017 	ldw	ra,64(sp)
  207e54:	df000f17 	ldw	fp,60(sp)
  207e58:	ddc00e17 	ldw	r23,56(sp)
  207e5c:	dd800d17 	ldw	r22,52(sp)
  207e60:	dd400c17 	ldw	r21,48(sp)
  207e64:	dd000b17 	ldw	r20,44(sp)
  207e68:	dcc00a17 	ldw	r19,40(sp)
  207e6c:	dc800917 	ldw	r18,36(sp)
  207e70:	dc400817 	ldw	r17,32(sp)
  207e74:	dc000717 	ldw	r16,28(sp)
  207e78:	dec01104 	addi	sp,sp,68
  207e7c:	f800283a 	ret

00207e80 <__pow5mult>:
  207e80:	defffa04 	addi	sp,sp,-24
  207e84:	dcc00315 	stw	r19,12(sp)
  207e88:	dc000015 	stw	r16,0(sp)
  207e8c:	dfc00515 	stw	ra,20(sp)
  207e90:	dd000415 	stw	r20,16(sp)
  207e94:	dc800215 	stw	r18,8(sp)
  207e98:	dc400115 	stw	r17,4(sp)
  207e9c:	308000cc 	andi	r2,r6,3
  207ea0:	3021883a 	mov	r16,r6
  207ea4:	2027883a 	mov	r19,r4
  207ea8:	10002f1e 	bne	r2,zero,207f68 <__pow5mult+0xe8>
  207eac:	2825883a 	mov	r18,r5
  207eb0:	8021d0ba 	srai	r16,r16,2
  207eb4:	80001a26 	beq	r16,zero,207f20 <__pow5mult+0xa0>
  207eb8:	9c401217 	ldw	r17,72(r19)
  207ebc:	8800061e 	bne	r17,zero,207ed8 <__pow5mult+0x58>
  207ec0:	00003406 	br	207f94 <__pow5mult+0x114>
  207ec4:	8021d07a 	srai	r16,r16,1
  207ec8:	80001526 	beq	r16,zero,207f20 <__pow5mult+0xa0>
  207ecc:	88800017 	ldw	r2,0(r17)
  207ed0:	10001c26 	beq	r2,zero,207f44 <__pow5mult+0xc4>
  207ed4:	1023883a 	mov	r17,r2
  207ed8:	8080004c 	andi	r2,r16,1
  207edc:	103ff926 	beq	r2,zero,207ec4 <_gp+0xffdf62e0>
  207ee0:	880d883a 	mov	r6,r17
  207ee4:	900b883a 	mov	r5,r18
  207ee8:	9809883a 	mov	r4,r19
  207eec:	0207bf40 	call	207bf4 <__multiply>
  207ef0:	90001b26 	beq	r18,zero,207f60 <__pow5mult+0xe0>
  207ef4:	91000117 	ldw	r4,4(r18)
  207ef8:	98c01317 	ldw	r3,76(r19)
  207efc:	8021d07a 	srai	r16,r16,1
  207f00:	2109883a 	add	r4,r4,r4
  207f04:	2109883a 	add	r4,r4,r4
  207f08:	1907883a 	add	r3,r3,r4
  207f0c:	19000017 	ldw	r4,0(r3)
  207f10:	91000015 	stw	r4,0(r18)
  207f14:	1c800015 	stw	r18,0(r3)
  207f18:	1025883a 	mov	r18,r2
  207f1c:	803feb1e 	bne	r16,zero,207ecc <_gp+0xffdf62e8>
  207f20:	9005883a 	mov	r2,r18
  207f24:	dfc00517 	ldw	ra,20(sp)
  207f28:	dd000417 	ldw	r20,16(sp)
  207f2c:	dcc00317 	ldw	r19,12(sp)
  207f30:	dc800217 	ldw	r18,8(sp)
  207f34:	dc400117 	ldw	r17,4(sp)
  207f38:	dc000017 	ldw	r16,0(sp)
  207f3c:	dec00604 	addi	sp,sp,24
  207f40:	f800283a 	ret
  207f44:	880d883a 	mov	r6,r17
  207f48:	880b883a 	mov	r5,r17
  207f4c:	9809883a 	mov	r4,r19
  207f50:	0207bf40 	call	207bf4 <__multiply>
  207f54:	88800015 	stw	r2,0(r17)
  207f58:	10000015 	stw	zero,0(r2)
  207f5c:	003fdd06 	br	207ed4 <_gp+0xffdf62f0>
  207f60:	1025883a 	mov	r18,r2
  207f64:	003fd706 	br	207ec4 <_gp+0xffdf62e0>
  207f68:	10bfffc4 	addi	r2,r2,-1
  207f6c:	1085883a 	add	r2,r2,r2
  207f70:	00c00874 	movhi	r3,33
  207f74:	18d06104 	addi	r3,r3,16772
  207f78:	1085883a 	add	r2,r2,r2
  207f7c:	1885883a 	add	r2,r3,r2
  207f80:	11800017 	ldw	r6,0(r2)
  207f84:	000f883a 	mov	r7,zero
  207f88:	02078540 	call	207854 <__multadd>
  207f8c:	1025883a 	mov	r18,r2
  207f90:	003fc706 	br	207eb0 <_gp+0xffdf62cc>
  207f94:	05000044 	movi	r20,1
  207f98:	a00b883a 	mov	r5,r20
  207f9c:	9809883a 	mov	r4,r19
  207fa0:	02077840 	call	207784 <_Balloc>
  207fa4:	1023883a 	mov	r17,r2
  207fa8:	00809c44 	movi	r2,625
  207fac:	88800515 	stw	r2,20(r17)
  207fb0:	8d000415 	stw	r20,16(r17)
  207fb4:	9c401215 	stw	r17,72(r19)
  207fb8:	88000015 	stw	zero,0(r17)
  207fbc:	003fc606 	br	207ed8 <_gp+0xffdf62f4>

00207fc0 <__lshift>:
  207fc0:	defff904 	addi	sp,sp,-28
  207fc4:	dd400515 	stw	r21,20(sp)
  207fc8:	dcc00315 	stw	r19,12(sp)
  207fcc:	302bd17a 	srai	r21,r6,5
  207fd0:	2cc00417 	ldw	r19,16(r5)
  207fd4:	28800217 	ldw	r2,8(r5)
  207fd8:	dd000415 	stw	r20,16(sp)
  207fdc:	ace7883a 	add	r19,r21,r19
  207fe0:	dc800215 	stw	r18,8(sp)
  207fe4:	dc400115 	stw	r17,4(sp)
  207fe8:	dc000015 	stw	r16,0(sp)
  207fec:	dfc00615 	stw	ra,24(sp)
  207ff0:	9c000044 	addi	r16,r19,1
  207ff4:	2823883a 	mov	r17,r5
  207ff8:	3029883a 	mov	r20,r6
  207ffc:	2025883a 	mov	r18,r4
  208000:	29400117 	ldw	r5,4(r5)
  208004:	1400030e 	bge	r2,r16,208014 <__lshift+0x54>
  208008:	1085883a 	add	r2,r2,r2
  20800c:	29400044 	addi	r5,r5,1
  208010:	143ffd16 	blt	r2,r16,208008 <_gp+0xffdf6424>
  208014:	9009883a 	mov	r4,r18
  208018:	02077840 	call	207784 <_Balloc>
  20801c:	10c00504 	addi	r3,r2,20
  208020:	0540070e 	bge	zero,r21,208040 <__lshift+0x80>
  208024:	ad6b883a 	add	r21,r21,r21
  208028:	ad6b883a 	add	r21,r21,r21
  20802c:	1809883a 	mov	r4,r3
  208030:	1d47883a 	add	r3,r3,r21
  208034:	20000015 	stw	zero,0(r4)
  208038:	21000104 	addi	r4,r4,4
  20803c:	193ffd1e 	bne	r3,r4,208034 <_gp+0xffdf6450>
  208040:	8a000417 	ldw	r8,16(r17)
  208044:	89000504 	addi	r4,r17,20
  208048:	a18007cc 	andi	r6,r20,31
  20804c:	4211883a 	add	r8,r8,r8
  208050:	4211883a 	add	r8,r8,r8
  208054:	2211883a 	add	r8,r4,r8
  208058:	30002326 	beq	r6,zero,2080e8 <__lshift+0x128>
  20805c:	02400804 	movi	r9,32
  208060:	4993c83a 	sub	r9,r9,r6
  208064:	000b883a 	mov	r5,zero
  208068:	21c00017 	ldw	r7,0(r4)
  20806c:	1815883a 	mov	r10,r3
  208070:	18c00104 	addi	r3,r3,4
  208074:	398e983a 	sll	r7,r7,r6
  208078:	21000104 	addi	r4,r4,4
  20807c:	394ab03a 	or	r5,r7,r5
  208080:	197fff15 	stw	r5,-4(r3)
  208084:	217fff17 	ldw	r5,-4(r4)
  208088:	2a4ad83a 	srl	r5,r5,r9
  20808c:	223ff636 	bltu	r4,r8,208068 <_gp+0xffdf6484>
  208090:	51400115 	stw	r5,4(r10)
  208094:	28001a1e 	bne	r5,zero,208100 <__lshift+0x140>
  208098:	843fffc4 	addi	r16,r16,-1
  20809c:	14000415 	stw	r16,16(r2)
  2080a0:	88000826 	beq	r17,zero,2080c4 <__lshift+0x104>
  2080a4:	89000117 	ldw	r4,4(r17)
  2080a8:	90c01317 	ldw	r3,76(r18)
  2080ac:	2109883a 	add	r4,r4,r4
  2080b0:	2109883a 	add	r4,r4,r4
  2080b4:	1907883a 	add	r3,r3,r4
  2080b8:	19000017 	ldw	r4,0(r3)
  2080bc:	89000015 	stw	r4,0(r17)
  2080c0:	1c400015 	stw	r17,0(r3)
  2080c4:	dfc00617 	ldw	ra,24(sp)
  2080c8:	dd400517 	ldw	r21,20(sp)
  2080cc:	dd000417 	ldw	r20,16(sp)
  2080d0:	dcc00317 	ldw	r19,12(sp)
  2080d4:	dc800217 	ldw	r18,8(sp)
  2080d8:	dc400117 	ldw	r17,4(sp)
  2080dc:	dc000017 	ldw	r16,0(sp)
  2080e0:	dec00704 	addi	sp,sp,28
  2080e4:	f800283a 	ret
  2080e8:	21400017 	ldw	r5,0(r4)
  2080ec:	18c00104 	addi	r3,r3,4
  2080f0:	21000104 	addi	r4,r4,4
  2080f4:	197fff15 	stw	r5,-4(r3)
  2080f8:	223ffb36 	bltu	r4,r8,2080e8 <_gp+0xffdf6504>
  2080fc:	003fe606 	br	208098 <_gp+0xffdf64b4>
  208100:	9c000084 	addi	r16,r19,2
  208104:	003fe406 	br	208098 <_gp+0xffdf64b4>

00208108 <__mcmp>:
  208108:	20800417 	ldw	r2,16(r4)
  20810c:	28c00417 	ldw	r3,16(r5)
  208110:	10c5c83a 	sub	r2,r2,r3
  208114:	1000111e 	bne	r2,zero,20815c <__mcmp+0x54>
  208118:	18c7883a 	add	r3,r3,r3
  20811c:	18c7883a 	add	r3,r3,r3
  208120:	21000504 	addi	r4,r4,20
  208124:	29400504 	addi	r5,r5,20
  208128:	20c5883a 	add	r2,r4,r3
  20812c:	28cb883a 	add	r5,r5,r3
  208130:	00000106 	br	208138 <__mcmp+0x30>
  208134:	20800a2e 	bgeu	r4,r2,208160 <__mcmp+0x58>
  208138:	10bfff04 	addi	r2,r2,-4
  20813c:	297fff04 	addi	r5,r5,-4
  208140:	11800017 	ldw	r6,0(r2)
  208144:	28c00017 	ldw	r3,0(r5)
  208148:	30fffa26 	beq	r6,r3,208134 <_gp+0xffdf6550>
  20814c:	30c00236 	bltu	r6,r3,208158 <__mcmp+0x50>
  208150:	00800044 	movi	r2,1
  208154:	f800283a 	ret
  208158:	00bfffc4 	movi	r2,-1
  20815c:	f800283a 	ret
  208160:	0005883a 	mov	r2,zero
  208164:	f800283a 	ret

00208168 <__mdiff>:
  208168:	28c00417 	ldw	r3,16(r5)
  20816c:	30800417 	ldw	r2,16(r6)
  208170:	defffa04 	addi	sp,sp,-24
  208174:	dcc00315 	stw	r19,12(sp)
  208178:	dc800215 	stw	r18,8(sp)
  20817c:	dfc00515 	stw	ra,20(sp)
  208180:	dd000415 	stw	r20,16(sp)
  208184:	dc400115 	stw	r17,4(sp)
  208188:	dc000015 	stw	r16,0(sp)
  20818c:	1887c83a 	sub	r3,r3,r2
  208190:	2825883a 	mov	r18,r5
  208194:	3027883a 	mov	r19,r6
  208198:	1800141e 	bne	r3,zero,2081ec <__mdiff+0x84>
  20819c:	1085883a 	add	r2,r2,r2
  2081a0:	1085883a 	add	r2,r2,r2
  2081a4:	2a000504 	addi	r8,r5,20
  2081a8:	34000504 	addi	r16,r6,20
  2081ac:	4087883a 	add	r3,r8,r2
  2081b0:	8085883a 	add	r2,r16,r2
  2081b4:	00000106 	br	2081bc <__mdiff+0x54>
  2081b8:	40c0592e 	bgeu	r8,r3,208320 <__mdiff+0x1b8>
  2081bc:	18ffff04 	addi	r3,r3,-4
  2081c0:	10bfff04 	addi	r2,r2,-4
  2081c4:	19c00017 	ldw	r7,0(r3)
  2081c8:	11400017 	ldw	r5,0(r2)
  2081cc:	397ffa26 	beq	r7,r5,2081b8 <_gp+0xffdf65d4>
  2081d0:	3940592e 	bgeu	r7,r5,208338 <__mdiff+0x1d0>
  2081d4:	9005883a 	mov	r2,r18
  2081d8:	4023883a 	mov	r17,r8
  2081dc:	9825883a 	mov	r18,r19
  2081e0:	05000044 	movi	r20,1
  2081e4:	1027883a 	mov	r19,r2
  2081e8:	00000406 	br	2081fc <__mdiff+0x94>
  2081ec:	18005616 	blt	r3,zero,208348 <__mdiff+0x1e0>
  2081f0:	34400504 	addi	r17,r6,20
  2081f4:	2c000504 	addi	r16,r5,20
  2081f8:	0029883a 	mov	r20,zero
  2081fc:	91400117 	ldw	r5,4(r18)
  208200:	02077840 	call	207784 <_Balloc>
  208204:	92400417 	ldw	r9,16(r18)
  208208:	9b000417 	ldw	r12,16(r19)
  20820c:	12c00504 	addi	r11,r2,20
  208210:	4a51883a 	add	r8,r9,r9
  208214:	6319883a 	add	r12,r12,r12
  208218:	4211883a 	add	r8,r8,r8
  20821c:	6319883a 	add	r12,r12,r12
  208220:	15000315 	stw	r20,12(r2)
  208224:	8211883a 	add	r8,r16,r8
  208228:	8b19883a 	add	r12,r17,r12
  20822c:	0007883a 	mov	r3,zero
  208230:	81400017 	ldw	r5,0(r16)
  208234:	89c00017 	ldw	r7,0(r17)
  208238:	59800104 	addi	r6,r11,4
  20823c:	293fffcc 	andi	r4,r5,65535
  208240:	20c7883a 	add	r3,r4,r3
  208244:	393fffcc 	andi	r4,r7,65535
  208248:	1909c83a 	sub	r4,r3,r4
  20824c:	280ad43a 	srli	r5,r5,16
  208250:	380ed43a 	srli	r7,r7,16
  208254:	2007d43a 	srai	r3,r4,16
  208258:	213fffcc 	andi	r4,r4,65535
  20825c:	29cbc83a 	sub	r5,r5,r7
  208260:	28c7883a 	add	r3,r5,r3
  208264:	180a943a 	slli	r5,r3,16
  208268:	8c400104 	addi	r17,r17,4
  20826c:	84000104 	addi	r16,r16,4
  208270:	2908b03a 	or	r4,r5,r4
  208274:	59000015 	stw	r4,0(r11)
  208278:	1807d43a 	srai	r3,r3,16
  20827c:	3015883a 	mov	r10,r6
  208280:	3017883a 	mov	r11,r6
  208284:	8b3fea36 	bltu	r17,r12,208230 <_gp+0xffdf664c>
  208288:	8200162e 	bgeu	r16,r8,2082e4 <__mdiff+0x17c>
  20828c:	8017883a 	mov	r11,r16
  208290:	59400017 	ldw	r5,0(r11)
  208294:	31800104 	addi	r6,r6,4
  208298:	5ac00104 	addi	r11,r11,4
  20829c:	293fffcc 	andi	r4,r5,65535
  2082a0:	20c7883a 	add	r3,r4,r3
  2082a4:	280ed43a 	srli	r7,r5,16
  2082a8:	180bd43a 	srai	r5,r3,16
  2082ac:	193fffcc 	andi	r4,r3,65535
  2082b0:	3947883a 	add	r3,r7,r5
  2082b4:	180a943a 	slli	r5,r3,16
  2082b8:	1807d43a 	srai	r3,r3,16
  2082bc:	2908b03a 	or	r4,r5,r4
  2082c0:	313fff15 	stw	r4,-4(r6)
  2082c4:	5a3ff236 	bltu	r11,r8,208290 <_gp+0xffdf66ac>
  2082c8:	0406303a 	nor	r3,zero,r16
  2082cc:	1a07883a 	add	r3,r3,r8
  2082d0:	1806d0ba 	srli	r3,r3,2
  2082d4:	18c00044 	addi	r3,r3,1
  2082d8:	18c7883a 	add	r3,r3,r3
  2082dc:	18c7883a 	add	r3,r3,r3
  2082e0:	50d5883a 	add	r10,r10,r3
  2082e4:	50ffff04 	addi	r3,r10,-4
  2082e8:	2000041e 	bne	r4,zero,2082fc <__mdiff+0x194>
  2082ec:	18ffff04 	addi	r3,r3,-4
  2082f0:	19000017 	ldw	r4,0(r3)
  2082f4:	4a7fffc4 	addi	r9,r9,-1
  2082f8:	203ffc26 	beq	r4,zero,2082ec <_gp+0xffdf6708>
  2082fc:	12400415 	stw	r9,16(r2)
  208300:	dfc00517 	ldw	ra,20(sp)
  208304:	dd000417 	ldw	r20,16(sp)
  208308:	dcc00317 	ldw	r19,12(sp)
  20830c:	dc800217 	ldw	r18,8(sp)
  208310:	dc400117 	ldw	r17,4(sp)
  208314:	dc000017 	ldw	r16,0(sp)
  208318:	dec00604 	addi	sp,sp,24
  20831c:	f800283a 	ret
  208320:	000b883a 	mov	r5,zero
  208324:	02077840 	call	207784 <_Balloc>
  208328:	00c00044 	movi	r3,1
  20832c:	10c00415 	stw	r3,16(r2)
  208330:	10000515 	stw	zero,20(r2)
  208334:	003ff206 	br	208300 <_gp+0xffdf671c>
  208338:	8023883a 	mov	r17,r16
  20833c:	0029883a 	mov	r20,zero
  208340:	4021883a 	mov	r16,r8
  208344:	003fad06 	br	2081fc <_gp+0xffdf6618>
  208348:	9005883a 	mov	r2,r18
  20834c:	94400504 	addi	r17,r18,20
  208350:	9c000504 	addi	r16,r19,20
  208354:	9825883a 	mov	r18,r19
  208358:	05000044 	movi	r20,1
  20835c:	1027883a 	mov	r19,r2
  208360:	003fa606 	br	2081fc <_gp+0xffdf6618>

00208364 <__ulp>:
  208364:	295ffc2c 	andhi	r5,r5,32752
  208368:	00bf3034 	movhi	r2,64704
  20836c:	2887883a 	add	r3,r5,r2
  208370:	00c0020e 	bge	zero,r3,20837c <__ulp+0x18>
  208374:	0005883a 	mov	r2,zero
  208378:	f800283a 	ret
  20837c:	00c7c83a 	sub	r3,zero,r3
  208380:	1807d53a 	srai	r3,r3,20
  208384:	008004c4 	movi	r2,19
  208388:	10c00b0e 	bge	r2,r3,2083b8 <__ulp+0x54>
  20838c:	18bffb04 	addi	r2,r3,-20
  208390:	01000784 	movi	r4,30
  208394:	0007883a 	mov	r3,zero
  208398:	20800516 	blt	r4,r2,2083b0 <__ulp+0x4c>
  20839c:	010007c4 	movi	r4,31
  2083a0:	2089c83a 	sub	r4,r4,r2
  2083a4:	00800044 	movi	r2,1
  2083a8:	1104983a 	sll	r2,r2,r4
  2083ac:	f800283a 	ret
  2083b0:	00800044 	movi	r2,1
  2083b4:	f800283a 	ret
  2083b8:	01400234 	movhi	r5,8
  2083bc:	28c7d83a 	sra	r3,r5,r3
  2083c0:	0005883a 	mov	r2,zero
  2083c4:	f800283a 	ret

002083c8 <__b2d>:
  2083c8:	defffa04 	addi	sp,sp,-24
  2083cc:	dc000015 	stw	r16,0(sp)
  2083d0:	24000417 	ldw	r16,16(r4)
  2083d4:	dc400115 	stw	r17,4(sp)
  2083d8:	24400504 	addi	r17,r4,20
  2083dc:	8421883a 	add	r16,r16,r16
  2083e0:	8421883a 	add	r16,r16,r16
  2083e4:	8c21883a 	add	r16,r17,r16
  2083e8:	dc800215 	stw	r18,8(sp)
  2083ec:	84bfff17 	ldw	r18,-4(r16)
  2083f0:	dd000415 	stw	r20,16(sp)
  2083f4:	dcc00315 	stw	r19,12(sp)
  2083f8:	9009883a 	mov	r4,r18
  2083fc:	2829883a 	mov	r20,r5
  208400:	dfc00515 	stw	ra,20(sp)
  208404:	0207aa00 	call	207aa0 <__hi0bits>
  208408:	00c00804 	movi	r3,32
  20840c:	1889c83a 	sub	r4,r3,r2
  208410:	a1000015 	stw	r4,0(r20)
  208414:	01000284 	movi	r4,10
  208418:	84ffff04 	addi	r19,r16,-4
  20841c:	20801216 	blt	r4,r2,208468 <__b2d+0xa0>
  208420:	018002c4 	movi	r6,11
  208424:	308dc83a 	sub	r6,r6,r2
  208428:	9186d83a 	srl	r3,r18,r6
  20842c:	18cffc34 	orhi	r3,r3,16368
  208430:	8cc0212e 	bgeu	r17,r19,2084b8 <__b2d+0xf0>
  208434:	813ffe17 	ldw	r4,-8(r16)
  208438:	218cd83a 	srl	r6,r4,r6
  20843c:	10800544 	addi	r2,r2,21
  208440:	9084983a 	sll	r2,r18,r2
  208444:	1184b03a 	or	r2,r2,r6
  208448:	dfc00517 	ldw	ra,20(sp)
  20844c:	dd000417 	ldw	r20,16(sp)
  208450:	dcc00317 	ldw	r19,12(sp)
  208454:	dc800217 	ldw	r18,8(sp)
  208458:	dc400117 	ldw	r17,4(sp)
  20845c:	dc000017 	ldw	r16,0(sp)
  208460:	dec00604 	addi	sp,sp,24
  208464:	f800283a 	ret
  208468:	8cc00f2e 	bgeu	r17,r19,2084a8 <__b2d+0xe0>
  20846c:	117ffd44 	addi	r5,r2,-11
  208470:	80bffe17 	ldw	r2,-8(r16)
  208474:	28000e26 	beq	r5,zero,2084b0 <__b2d+0xe8>
  208478:	1949c83a 	sub	r4,r3,r5
  20847c:	9164983a 	sll	r18,r18,r5
  208480:	1106d83a 	srl	r3,r2,r4
  208484:	81bffe04 	addi	r6,r16,-8
  208488:	948ffc34 	orhi	r18,r18,16368
  20848c:	90c6b03a 	or	r3,r18,r3
  208490:	89800e2e 	bgeu	r17,r6,2084cc <__b2d+0x104>
  208494:	81bffd17 	ldw	r6,-12(r16)
  208498:	1144983a 	sll	r2,r2,r5
  20849c:	310ad83a 	srl	r5,r6,r4
  2084a0:	2884b03a 	or	r2,r5,r2
  2084a4:	003fe806 	br	208448 <_gp+0xffdf6864>
  2084a8:	10bffd44 	addi	r2,r2,-11
  2084ac:	1000041e 	bne	r2,zero,2084c0 <__b2d+0xf8>
  2084b0:	90cffc34 	orhi	r3,r18,16368
  2084b4:	003fe406 	br	208448 <_gp+0xffdf6864>
  2084b8:	000d883a 	mov	r6,zero
  2084bc:	003fdf06 	br	20843c <_gp+0xffdf6858>
  2084c0:	90a4983a 	sll	r18,r18,r2
  2084c4:	0005883a 	mov	r2,zero
  2084c8:	003ff906 	br	2084b0 <_gp+0xffdf68cc>
  2084cc:	1144983a 	sll	r2,r2,r5
  2084d0:	003fdd06 	br	208448 <_gp+0xffdf6864>

002084d4 <__d2b>:
  2084d4:	defff804 	addi	sp,sp,-32
  2084d8:	dc000215 	stw	r16,8(sp)
  2084dc:	3021883a 	mov	r16,r6
  2084e0:	dc400315 	stw	r17,12(sp)
  2084e4:	8022907a 	slli	r17,r16,1
  2084e8:	dd000615 	stw	r20,24(sp)
  2084ec:	2829883a 	mov	r20,r5
  2084f0:	01400044 	movi	r5,1
  2084f4:	dcc00515 	stw	r19,20(sp)
  2084f8:	dc800415 	stw	r18,16(sp)
  2084fc:	dfc00715 	stw	ra,28(sp)
  208500:	3825883a 	mov	r18,r7
  208504:	8822d57a 	srli	r17,r17,21
  208508:	02077840 	call	207784 <_Balloc>
  20850c:	1027883a 	mov	r19,r2
  208510:	00800434 	movhi	r2,16
  208514:	10bfffc4 	addi	r2,r2,-1
  208518:	808c703a 	and	r6,r16,r2
  20851c:	88000126 	beq	r17,zero,208524 <__d2b+0x50>
  208520:	31800434 	orhi	r6,r6,16
  208524:	d9800015 	stw	r6,0(sp)
  208528:	a0002426 	beq	r20,zero,2085bc <__d2b+0xe8>
  20852c:	d9000104 	addi	r4,sp,4
  208530:	dd000115 	stw	r20,4(sp)
  208534:	0207b080 	call	207b08 <__lo0bits>
  208538:	d8c00017 	ldw	r3,0(sp)
  20853c:	10002f1e 	bne	r2,zero,2085fc <__d2b+0x128>
  208540:	d9000117 	ldw	r4,4(sp)
  208544:	99000515 	stw	r4,20(r19)
  208548:	1821003a 	cmpeq	r16,r3,zero
  20854c:	01000084 	movi	r4,2
  208550:	2421c83a 	sub	r16,r4,r16
  208554:	98c00615 	stw	r3,24(r19)
  208558:	9c000415 	stw	r16,16(r19)
  20855c:	88001f1e 	bne	r17,zero,2085dc <__d2b+0x108>
  208560:	10bef384 	addi	r2,r2,-1074
  208564:	90800015 	stw	r2,0(r18)
  208568:	00900034 	movhi	r2,16384
  20856c:	10bfffc4 	addi	r2,r2,-1
  208570:	8085883a 	add	r2,r16,r2
  208574:	1085883a 	add	r2,r2,r2
  208578:	1085883a 	add	r2,r2,r2
  20857c:	9885883a 	add	r2,r19,r2
  208580:	11000517 	ldw	r4,20(r2)
  208584:	8020917a 	slli	r16,r16,5
  208588:	0207aa00 	call	207aa0 <__hi0bits>
  20858c:	d8c00817 	ldw	r3,32(sp)
  208590:	8085c83a 	sub	r2,r16,r2
  208594:	18800015 	stw	r2,0(r3)
  208598:	9805883a 	mov	r2,r19
  20859c:	dfc00717 	ldw	ra,28(sp)
  2085a0:	dd000617 	ldw	r20,24(sp)
  2085a4:	dcc00517 	ldw	r19,20(sp)
  2085a8:	dc800417 	ldw	r18,16(sp)
  2085ac:	dc400317 	ldw	r17,12(sp)
  2085b0:	dc000217 	ldw	r16,8(sp)
  2085b4:	dec00804 	addi	sp,sp,32
  2085b8:	f800283a 	ret
  2085bc:	d809883a 	mov	r4,sp
  2085c0:	0207b080 	call	207b08 <__lo0bits>
  2085c4:	d8c00017 	ldw	r3,0(sp)
  2085c8:	04000044 	movi	r16,1
  2085cc:	9c000415 	stw	r16,16(r19)
  2085d0:	98c00515 	stw	r3,20(r19)
  2085d4:	10800804 	addi	r2,r2,32
  2085d8:	883fe126 	beq	r17,zero,208560 <_gp+0xffdf697c>
  2085dc:	00c00d44 	movi	r3,53
  2085e0:	8c7ef344 	addi	r17,r17,-1075
  2085e4:	88a3883a 	add	r17,r17,r2
  2085e8:	1885c83a 	sub	r2,r3,r2
  2085ec:	d8c00817 	ldw	r3,32(sp)
  2085f0:	94400015 	stw	r17,0(r18)
  2085f4:	18800015 	stw	r2,0(r3)
  2085f8:	003fe706 	br	208598 <_gp+0xffdf69b4>
  2085fc:	01000804 	movi	r4,32
  208600:	2089c83a 	sub	r4,r4,r2
  208604:	1908983a 	sll	r4,r3,r4
  208608:	d9400117 	ldw	r5,4(sp)
  20860c:	1886d83a 	srl	r3,r3,r2
  208610:	2148b03a 	or	r4,r4,r5
  208614:	99000515 	stw	r4,20(r19)
  208618:	d8c00015 	stw	r3,0(sp)
  20861c:	003fca06 	br	208548 <_gp+0xffdf6964>

00208620 <__ratio>:
  208620:	defff904 	addi	sp,sp,-28
  208624:	dc400315 	stw	r17,12(sp)
  208628:	2823883a 	mov	r17,r5
  20862c:	d9400104 	addi	r5,sp,4
  208630:	dfc00615 	stw	ra,24(sp)
  208634:	dcc00515 	stw	r19,20(sp)
  208638:	dc800415 	stw	r18,16(sp)
  20863c:	2027883a 	mov	r19,r4
  208640:	dc000215 	stw	r16,8(sp)
  208644:	02083c80 	call	2083c8 <__b2d>
  208648:	d80b883a 	mov	r5,sp
  20864c:	8809883a 	mov	r4,r17
  208650:	1025883a 	mov	r18,r2
  208654:	1821883a 	mov	r16,r3
  208658:	02083c80 	call	2083c8 <__b2d>
  20865c:	8a000417 	ldw	r8,16(r17)
  208660:	99000417 	ldw	r4,16(r19)
  208664:	d9400117 	ldw	r5,4(sp)
  208668:	2209c83a 	sub	r4,r4,r8
  20866c:	2010917a 	slli	r8,r4,5
  208670:	d9000017 	ldw	r4,0(sp)
  208674:	2909c83a 	sub	r4,r5,r4
  208678:	4109883a 	add	r4,r8,r4
  20867c:	01000e0e 	bge	zero,r4,2086b8 <__ratio+0x98>
  208680:	2008953a 	slli	r4,r4,20
  208684:	2421883a 	add	r16,r4,r16
  208688:	100d883a 	mov	r6,r2
  20868c:	180f883a 	mov	r7,r3
  208690:	9009883a 	mov	r4,r18
  208694:	800b883a 	mov	r5,r16
  208698:	020c5300 	call	20c530 <__divdf3>
  20869c:	dfc00617 	ldw	ra,24(sp)
  2086a0:	dcc00517 	ldw	r19,20(sp)
  2086a4:	dc800417 	ldw	r18,16(sp)
  2086a8:	dc400317 	ldw	r17,12(sp)
  2086ac:	dc000217 	ldw	r16,8(sp)
  2086b0:	dec00704 	addi	sp,sp,28
  2086b4:	f800283a 	ret
  2086b8:	2008953a 	slli	r4,r4,20
  2086bc:	1907c83a 	sub	r3,r3,r4
  2086c0:	003ff106 	br	208688 <_gp+0xffdf6aa4>

002086c4 <_mprec_log10>:
  2086c4:	defffe04 	addi	sp,sp,-8
  2086c8:	dc000015 	stw	r16,0(sp)
  2086cc:	dfc00115 	stw	ra,4(sp)
  2086d0:	008005c4 	movi	r2,23
  2086d4:	2021883a 	mov	r16,r4
  2086d8:	11000d0e 	bge	r2,r4,208710 <_mprec_log10+0x4c>
  2086dc:	0005883a 	mov	r2,zero
  2086e0:	00cffc34 	movhi	r3,16368
  2086e4:	843fffc4 	addi	r16,r16,-1
  2086e8:	000d883a 	mov	r6,zero
  2086ec:	01d00934 	movhi	r7,16420
  2086f0:	1009883a 	mov	r4,r2
  2086f4:	180b883a 	mov	r5,r3
  2086f8:	020d1580 	call	20d158 <__muldf3>
  2086fc:	803ff91e 	bne	r16,zero,2086e4 <_gp+0xffdf6b00>
  208700:	dfc00117 	ldw	ra,4(sp)
  208704:	dc000017 	ldw	r16,0(sp)
  208708:	dec00204 	addi	sp,sp,8
  20870c:	f800283a 	ret
  208710:	202090fa 	slli	r16,r4,3
  208714:	00800874 	movhi	r2,33
  208718:	10907804 	addi	r2,r2,16864
  20871c:	1421883a 	add	r16,r2,r16
  208720:	80800017 	ldw	r2,0(r16)
  208724:	80c00117 	ldw	r3,4(r16)
  208728:	dfc00117 	ldw	ra,4(sp)
  20872c:	dc000017 	ldw	r16,0(sp)
  208730:	dec00204 	addi	sp,sp,8
  208734:	f800283a 	ret

00208738 <__copybits>:
  208738:	297fffc4 	addi	r5,r5,-1
  20873c:	280fd17a 	srai	r7,r5,5
  208740:	30c00417 	ldw	r3,16(r6)
  208744:	30800504 	addi	r2,r6,20
  208748:	39c00044 	addi	r7,r7,1
  20874c:	18c7883a 	add	r3,r3,r3
  208750:	39cf883a 	add	r7,r7,r7
  208754:	18c7883a 	add	r3,r3,r3
  208758:	39cf883a 	add	r7,r7,r7
  20875c:	10c7883a 	add	r3,r2,r3
  208760:	21cf883a 	add	r7,r4,r7
  208764:	10c00d2e 	bgeu	r2,r3,20879c <__copybits+0x64>
  208768:	200b883a 	mov	r5,r4
  20876c:	12000017 	ldw	r8,0(r2)
  208770:	29400104 	addi	r5,r5,4
  208774:	10800104 	addi	r2,r2,4
  208778:	2a3fff15 	stw	r8,-4(r5)
  20877c:	10fffb36 	bltu	r2,r3,20876c <_gp+0xffdf6b88>
  208780:	1985c83a 	sub	r2,r3,r6
  208784:	10bffac4 	addi	r2,r2,-21
  208788:	1004d0ba 	srli	r2,r2,2
  20878c:	10800044 	addi	r2,r2,1
  208790:	1085883a 	add	r2,r2,r2
  208794:	1085883a 	add	r2,r2,r2
  208798:	2089883a 	add	r4,r4,r2
  20879c:	21c0032e 	bgeu	r4,r7,2087ac <__copybits+0x74>
  2087a0:	20000015 	stw	zero,0(r4)
  2087a4:	21000104 	addi	r4,r4,4
  2087a8:	21fffd36 	bltu	r4,r7,2087a0 <_gp+0xffdf6bbc>
  2087ac:	f800283a 	ret

002087b0 <__any_on>:
  2087b0:	20c00417 	ldw	r3,16(r4)
  2087b4:	2805d17a 	srai	r2,r5,5
  2087b8:	21000504 	addi	r4,r4,20
  2087bc:	18800d0e 	bge	r3,r2,2087f4 <__any_on+0x44>
  2087c0:	18c7883a 	add	r3,r3,r3
  2087c4:	18c7883a 	add	r3,r3,r3
  2087c8:	20c7883a 	add	r3,r4,r3
  2087cc:	20c0192e 	bgeu	r4,r3,208834 <__any_on+0x84>
  2087d0:	18bfff17 	ldw	r2,-4(r3)
  2087d4:	18ffff04 	addi	r3,r3,-4
  2087d8:	1000041e 	bne	r2,zero,2087ec <__any_on+0x3c>
  2087dc:	20c0142e 	bgeu	r4,r3,208830 <__any_on+0x80>
  2087e0:	18ffff04 	addi	r3,r3,-4
  2087e4:	19400017 	ldw	r5,0(r3)
  2087e8:	283ffc26 	beq	r5,zero,2087dc <_gp+0xffdf6bf8>
  2087ec:	00800044 	movi	r2,1
  2087f0:	f800283a 	ret
  2087f4:	10c00a0e 	bge	r2,r3,208820 <__any_on+0x70>
  2087f8:	1085883a 	add	r2,r2,r2
  2087fc:	1085883a 	add	r2,r2,r2
  208800:	294007cc 	andi	r5,r5,31
  208804:	2087883a 	add	r3,r4,r2
  208808:	283ff026 	beq	r5,zero,2087cc <_gp+0xffdf6be8>
  20880c:	19800017 	ldw	r6,0(r3)
  208810:	3144d83a 	srl	r2,r6,r5
  208814:	114a983a 	sll	r5,r2,r5
  208818:	317ff41e 	bne	r6,r5,2087ec <_gp+0xffdf6c08>
  20881c:	003feb06 	br	2087cc <_gp+0xffdf6be8>
  208820:	1085883a 	add	r2,r2,r2
  208824:	1085883a 	add	r2,r2,r2
  208828:	2087883a 	add	r3,r4,r2
  20882c:	003fe706 	br	2087cc <_gp+0xffdf6be8>
  208830:	f800283a 	ret
  208834:	0005883a 	mov	r2,zero
  208838:	f800283a 	ret

0020883c <_realloc_r>:
  20883c:	defff604 	addi	sp,sp,-40
  208840:	dc800215 	stw	r18,8(sp)
  208844:	dfc00915 	stw	ra,36(sp)
  208848:	df000815 	stw	fp,32(sp)
  20884c:	ddc00715 	stw	r23,28(sp)
  208850:	dd800615 	stw	r22,24(sp)
  208854:	dd400515 	stw	r21,20(sp)
  208858:	dd000415 	stw	r20,16(sp)
  20885c:	dcc00315 	stw	r19,12(sp)
  208860:	dc400115 	stw	r17,4(sp)
  208864:	dc000015 	stw	r16,0(sp)
  208868:	3025883a 	mov	r18,r6
  20886c:	2800b726 	beq	r5,zero,208b4c <_realloc_r+0x310>
  208870:	282b883a 	mov	r21,r5
  208874:	2029883a 	mov	r20,r4
  208878:	020ea600 	call	20ea60 <__malloc_lock>
  20887c:	a8bfff17 	ldw	r2,-4(r21)
  208880:	043fff04 	movi	r16,-4
  208884:	90c002c4 	addi	r3,r18,11
  208888:	01000584 	movi	r4,22
  20888c:	acfffe04 	addi	r19,r21,-8
  208890:	1420703a 	and	r16,r2,r16
  208894:	20c0332e 	bgeu	r4,r3,208964 <_realloc_r+0x128>
  208898:	047ffe04 	movi	r17,-8
  20889c:	1c62703a 	and	r17,r3,r17
  2088a0:	8807883a 	mov	r3,r17
  2088a4:	88005816 	blt	r17,zero,208a08 <_realloc_r+0x1cc>
  2088a8:	8c805736 	bltu	r17,r18,208a08 <_realloc_r+0x1cc>
  2088ac:	80c0300e 	bge	r16,r3,208970 <_realloc_r+0x134>
  2088b0:	07001074 	movhi	fp,65
  2088b4:	e7212704 	addi	fp,fp,-31588
  2088b8:	e1c00217 	ldw	r7,8(fp)
  2088bc:	9c09883a 	add	r4,r19,r16
  2088c0:	22000117 	ldw	r8,4(r4)
  2088c4:	21c06326 	beq	r4,r7,208a54 <_realloc_r+0x218>
  2088c8:	017fff84 	movi	r5,-2
  2088cc:	414a703a 	and	r5,r8,r5
  2088d0:	214b883a 	add	r5,r4,r5
  2088d4:	29800117 	ldw	r6,4(r5)
  2088d8:	3180004c 	andi	r6,r6,1
  2088dc:	30003f26 	beq	r6,zero,2089dc <_realloc_r+0x1a0>
  2088e0:	1080004c 	andi	r2,r2,1
  2088e4:	10008326 	beq	r2,zero,208af4 <_realloc_r+0x2b8>
  2088e8:	900b883a 	mov	r5,r18
  2088ec:	a009883a 	mov	r4,r20
  2088f0:	0206ac80 	call	206ac8 <_malloc_r>
  2088f4:	1025883a 	mov	r18,r2
  2088f8:	10011e26 	beq	r2,zero,208d74 <_realloc_r+0x538>
  2088fc:	a93fff17 	ldw	r4,-4(r21)
  208900:	10fffe04 	addi	r3,r2,-8
  208904:	00bfff84 	movi	r2,-2
  208908:	2084703a 	and	r2,r4,r2
  20890c:	9885883a 	add	r2,r19,r2
  208910:	1880ee26 	beq	r3,r2,208ccc <_realloc_r+0x490>
  208914:	81bfff04 	addi	r6,r16,-4
  208918:	00800904 	movi	r2,36
  20891c:	1180b836 	bltu	r2,r6,208c00 <_realloc_r+0x3c4>
  208920:	00c004c4 	movi	r3,19
  208924:	19809636 	bltu	r3,r6,208b80 <_realloc_r+0x344>
  208928:	9005883a 	mov	r2,r18
  20892c:	a807883a 	mov	r3,r21
  208930:	19000017 	ldw	r4,0(r3)
  208934:	11000015 	stw	r4,0(r2)
  208938:	19000117 	ldw	r4,4(r3)
  20893c:	11000115 	stw	r4,4(r2)
  208940:	18c00217 	ldw	r3,8(r3)
  208944:	10c00215 	stw	r3,8(r2)
  208948:	a80b883a 	mov	r5,r21
  20894c:	a009883a 	mov	r4,r20
  208950:	0205ed00 	call	205ed0 <_free_r>
  208954:	a009883a 	mov	r4,r20
  208958:	020ea840 	call	20ea84 <__malloc_unlock>
  20895c:	9005883a 	mov	r2,r18
  208960:	00001206 	br	2089ac <_realloc_r+0x170>
  208964:	00c00404 	movi	r3,16
  208968:	1823883a 	mov	r17,r3
  20896c:	003fce06 	br	2088a8 <_gp+0xffdf6cc4>
  208970:	a825883a 	mov	r18,r21
  208974:	8445c83a 	sub	r2,r16,r17
  208978:	00c003c4 	movi	r3,15
  20897c:	18802636 	bltu	r3,r2,208a18 <_realloc_r+0x1dc>
  208980:	99800117 	ldw	r6,4(r19)
  208984:	9c07883a 	add	r3,r19,r16
  208988:	3180004c 	andi	r6,r6,1
  20898c:	3420b03a 	or	r16,r6,r16
  208990:	9c000115 	stw	r16,4(r19)
  208994:	18800117 	ldw	r2,4(r3)
  208998:	10800054 	ori	r2,r2,1
  20899c:	18800115 	stw	r2,4(r3)
  2089a0:	a009883a 	mov	r4,r20
  2089a4:	020ea840 	call	20ea84 <__malloc_unlock>
  2089a8:	9005883a 	mov	r2,r18
  2089ac:	dfc00917 	ldw	ra,36(sp)
  2089b0:	df000817 	ldw	fp,32(sp)
  2089b4:	ddc00717 	ldw	r23,28(sp)
  2089b8:	dd800617 	ldw	r22,24(sp)
  2089bc:	dd400517 	ldw	r21,20(sp)
  2089c0:	dd000417 	ldw	r20,16(sp)
  2089c4:	dcc00317 	ldw	r19,12(sp)
  2089c8:	dc800217 	ldw	r18,8(sp)
  2089cc:	dc400117 	ldw	r17,4(sp)
  2089d0:	dc000017 	ldw	r16,0(sp)
  2089d4:	dec00a04 	addi	sp,sp,40
  2089d8:	f800283a 	ret
  2089dc:	017fff04 	movi	r5,-4
  2089e0:	414a703a 	and	r5,r8,r5
  2089e4:	814d883a 	add	r6,r16,r5
  2089e8:	30c01f16 	blt	r6,r3,208a68 <_realloc_r+0x22c>
  2089ec:	20800317 	ldw	r2,12(r4)
  2089f0:	20c00217 	ldw	r3,8(r4)
  2089f4:	a825883a 	mov	r18,r21
  2089f8:	3021883a 	mov	r16,r6
  2089fc:	18800315 	stw	r2,12(r3)
  208a00:	10c00215 	stw	r3,8(r2)
  208a04:	003fdb06 	br	208974 <_gp+0xffdf6d90>
  208a08:	00800304 	movi	r2,12
  208a0c:	a0800015 	stw	r2,0(r20)
  208a10:	0005883a 	mov	r2,zero
  208a14:	003fe506 	br	2089ac <_gp+0xffdf6dc8>
  208a18:	98c00117 	ldw	r3,4(r19)
  208a1c:	9c4b883a 	add	r5,r19,r17
  208a20:	11000054 	ori	r4,r2,1
  208a24:	18c0004c 	andi	r3,r3,1
  208a28:	1c62b03a 	or	r17,r3,r17
  208a2c:	9c400115 	stw	r17,4(r19)
  208a30:	29000115 	stw	r4,4(r5)
  208a34:	2885883a 	add	r2,r5,r2
  208a38:	10c00117 	ldw	r3,4(r2)
  208a3c:	29400204 	addi	r5,r5,8
  208a40:	a009883a 	mov	r4,r20
  208a44:	18c00054 	ori	r3,r3,1
  208a48:	10c00115 	stw	r3,4(r2)
  208a4c:	0205ed00 	call	205ed0 <_free_r>
  208a50:	003fd306 	br	2089a0 <_gp+0xffdf6dbc>
  208a54:	017fff04 	movi	r5,-4
  208a58:	414a703a 	and	r5,r8,r5
  208a5c:	89800404 	addi	r6,r17,16
  208a60:	8151883a 	add	r8,r16,r5
  208a64:	4180590e 	bge	r8,r6,208bcc <_realloc_r+0x390>
  208a68:	1080004c 	andi	r2,r2,1
  208a6c:	103f9e1e 	bne	r2,zero,2088e8 <_gp+0xffdf6d04>
  208a70:	adbffe17 	ldw	r22,-8(r21)
  208a74:	00bfff04 	movi	r2,-4
  208a78:	9dadc83a 	sub	r22,r19,r22
  208a7c:	b1800117 	ldw	r6,4(r22)
  208a80:	3084703a 	and	r2,r6,r2
  208a84:	20002026 	beq	r4,zero,208b08 <_realloc_r+0x2cc>
  208a88:	80af883a 	add	r23,r16,r2
  208a8c:	b96f883a 	add	r23,r23,r5
  208a90:	21c05f26 	beq	r4,r7,208c10 <_realloc_r+0x3d4>
  208a94:	b8c01c16 	blt	r23,r3,208b08 <_realloc_r+0x2cc>
  208a98:	20800317 	ldw	r2,12(r4)
  208a9c:	20c00217 	ldw	r3,8(r4)
  208aa0:	81bfff04 	addi	r6,r16,-4
  208aa4:	01000904 	movi	r4,36
  208aa8:	18800315 	stw	r2,12(r3)
  208aac:	10c00215 	stw	r3,8(r2)
  208ab0:	b0c00217 	ldw	r3,8(r22)
  208ab4:	b0800317 	ldw	r2,12(r22)
  208ab8:	b4800204 	addi	r18,r22,8
  208abc:	18800315 	stw	r2,12(r3)
  208ac0:	10c00215 	stw	r3,8(r2)
  208ac4:	21801b36 	bltu	r4,r6,208b34 <_realloc_r+0x2f8>
  208ac8:	008004c4 	movi	r2,19
  208acc:	1180352e 	bgeu	r2,r6,208ba4 <_realloc_r+0x368>
  208ad0:	a8800017 	ldw	r2,0(r21)
  208ad4:	b0800215 	stw	r2,8(r22)
  208ad8:	a8800117 	ldw	r2,4(r21)
  208adc:	b0800315 	stw	r2,12(r22)
  208ae0:	008006c4 	movi	r2,27
  208ae4:	11807f36 	bltu	r2,r6,208ce4 <_realloc_r+0x4a8>
  208ae8:	b0800404 	addi	r2,r22,16
  208aec:	ad400204 	addi	r21,r21,8
  208af0:	00002d06 	br	208ba8 <_realloc_r+0x36c>
  208af4:	adbffe17 	ldw	r22,-8(r21)
  208af8:	00bfff04 	movi	r2,-4
  208afc:	9dadc83a 	sub	r22,r19,r22
  208b00:	b1000117 	ldw	r4,4(r22)
  208b04:	2084703a 	and	r2,r4,r2
  208b08:	b03f7726 	beq	r22,zero,2088e8 <_gp+0xffdf6d04>
  208b0c:	80af883a 	add	r23,r16,r2
  208b10:	b8ff7516 	blt	r23,r3,2088e8 <_gp+0xffdf6d04>
  208b14:	b0800317 	ldw	r2,12(r22)
  208b18:	b0c00217 	ldw	r3,8(r22)
  208b1c:	81bfff04 	addi	r6,r16,-4
  208b20:	01000904 	movi	r4,36
  208b24:	18800315 	stw	r2,12(r3)
  208b28:	10c00215 	stw	r3,8(r2)
  208b2c:	b4800204 	addi	r18,r22,8
  208b30:	21bfe52e 	bgeu	r4,r6,208ac8 <_gp+0xffdf6ee4>
  208b34:	a80b883a 	mov	r5,r21
  208b38:	9009883a 	mov	r4,r18
  208b3c:	02075000 	call	207500 <memmove>
  208b40:	b821883a 	mov	r16,r23
  208b44:	b027883a 	mov	r19,r22
  208b48:	003f8a06 	br	208974 <_gp+0xffdf6d90>
  208b4c:	300b883a 	mov	r5,r6
  208b50:	dfc00917 	ldw	ra,36(sp)
  208b54:	df000817 	ldw	fp,32(sp)
  208b58:	ddc00717 	ldw	r23,28(sp)
  208b5c:	dd800617 	ldw	r22,24(sp)
  208b60:	dd400517 	ldw	r21,20(sp)
  208b64:	dd000417 	ldw	r20,16(sp)
  208b68:	dcc00317 	ldw	r19,12(sp)
  208b6c:	dc800217 	ldw	r18,8(sp)
  208b70:	dc400117 	ldw	r17,4(sp)
  208b74:	dc000017 	ldw	r16,0(sp)
  208b78:	dec00a04 	addi	sp,sp,40
  208b7c:	0206ac81 	jmpi	206ac8 <_malloc_r>
  208b80:	a8c00017 	ldw	r3,0(r21)
  208b84:	90c00015 	stw	r3,0(r18)
  208b88:	a8c00117 	ldw	r3,4(r21)
  208b8c:	90c00115 	stw	r3,4(r18)
  208b90:	00c006c4 	movi	r3,27
  208b94:	19804536 	bltu	r3,r6,208cac <_realloc_r+0x470>
  208b98:	90800204 	addi	r2,r18,8
  208b9c:	a8c00204 	addi	r3,r21,8
  208ba0:	003f6306 	br	208930 <_gp+0xffdf6d4c>
  208ba4:	9005883a 	mov	r2,r18
  208ba8:	a8c00017 	ldw	r3,0(r21)
  208bac:	b821883a 	mov	r16,r23
  208bb0:	b027883a 	mov	r19,r22
  208bb4:	10c00015 	stw	r3,0(r2)
  208bb8:	a8c00117 	ldw	r3,4(r21)
  208bbc:	10c00115 	stw	r3,4(r2)
  208bc0:	a8c00217 	ldw	r3,8(r21)
  208bc4:	10c00215 	stw	r3,8(r2)
  208bc8:	003f6a06 	br	208974 <_gp+0xffdf6d90>
  208bcc:	9c67883a 	add	r19,r19,r17
  208bd0:	4445c83a 	sub	r2,r8,r17
  208bd4:	e4c00215 	stw	r19,8(fp)
  208bd8:	10800054 	ori	r2,r2,1
  208bdc:	98800115 	stw	r2,4(r19)
  208be0:	a8bfff17 	ldw	r2,-4(r21)
  208be4:	a009883a 	mov	r4,r20
  208be8:	1080004c 	andi	r2,r2,1
  208bec:	1462b03a 	or	r17,r2,r17
  208bf0:	ac7fff15 	stw	r17,-4(r21)
  208bf4:	020ea840 	call	20ea84 <__malloc_unlock>
  208bf8:	a805883a 	mov	r2,r21
  208bfc:	003f6b06 	br	2089ac <_gp+0xffdf6dc8>
  208c00:	a80b883a 	mov	r5,r21
  208c04:	9009883a 	mov	r4,r18
  208c08:	02075000 	call	207500 <memmove>
  208c0c:	003f4e06 	br	208948 <_gp+0xffdf6d64>
  208c10:	89000404 	addi	r4,r17,16
  208c14:	b93fbc16 	blt	r23,r4,208b08 <_gp+0xffdf6f24>
  208c18:	b0800317 	ldw	r2,12(r22)
  208c1c:	b0c00217 	ldw	r3,8(r22)
  208c20:	81bfff04 	addi	r6,r16,-4
  208c24:	01000904 	movi	r4,36
  208c28:	18800315 	stw	r2,12(r3)
  208c2c:	10c00215 	stw	r3,8(r2)
  208c30:	b4800204 	addi	r18,r22,8
  208c34:	21804336 	bltu	r4,r6,208d44 <_realloc_r+0x508>
  208c38:	008004c4 	movi	r2,19
  208c3c:	11803f2e 	bgeu	r2,r6,208d3c <_realloc_r+0x500>
  208c40:	a8800017 	ldw	r2,0(r21)
  208c44:	b0800215 	stw	r2,8(r22)
  208c48:	a8800117 	ldw	r2,4(r21)
  208c4c:	b0800315 	stw	r2,12(r22)
  208c50:	008006c4 	movi	r2,27
  208c54:	11803f36 	bltu	r2,r6,208d54 <_realloc_r+0x518>
  208c58:	b0800404 	addi	r2,r22,16
  208c5c:	ad400204 	addi	r21,r21,8
  208c60:	a8c00017 	ldw	r3,0(r21)
  208c64:	10c00015 	stw	r3,0(r2)
  208c68:	a8c00117 	ldw	r3,4(r21)
  208c6c:	10c00115 	stw	r3,4(r2)
  208c70:	a8c00217 	ldw	r3,8(r21)
  208c74:	10c00215 	stw	r3,8(r2)
  208c78:	b447883a 	add	r3,r22,r17
  208c7c:	bc45c83a 	sub	r2,r23,r17
  208c80:	e0c00215 	stw	r3,8(fp)
  208c84:	10800054 	ori	r2,r2,1
  208c88:	18800115 	stw	r2,4(r3)
  208c8c:	b0800117 	ldw	r2,4(r22)
  208c90:	a009883a 	mov	r4,r20
  208c94:	1080004c 	andi	r2,r2,1
  208c98:	1462b03a 	or	r17,r2,r17
  208c9c:	b4400115 	stw	r17,4(r22)
  208ca0:	020ea840 	call	20ea84 <__malloc_unlock>
  208ca4:	9005883a 	mov	r2,r18
  208ca8:	003f4006 	br	2089ac <_gp+0xffdf6dc8>
  208cac:	a8c00217 	ldw	r3,8(r21)
  208cb0:	90c00215 	stw	r3,8(r18)
  208cb4:	a8c00317 	ldw	r3,12(r21)
  208cb8:	90c00315 	stw	r3,12(r18)
  208cbc:	30801126 	beq	r6,r2,208d04 <_realloc_r+0x4c8>
  208cc0:	90800404 	addi	r2,r18,16
  208cc4:	a8c00404 	addi	r3,r21,16
  208cc8:	003f1906 	br	208930 <_gp+0xffdf6d4c>
  208ccc:	90ffff17 	ldw	r3,-4(r18)
  208cd0:	00bfff04 	movi	r2,-4
  208cd4:	a825883a 	mov	r18,r21
  208cd8:	1884703a 	and	r2,r3,r2
  208cdc:	80a1883a 	add	r16,r16,r2
  208ce0:	003f2406 	br	208974 <_gp+0xffdf6d90>
  208ce4:	a8800217 	ldw	r2,8(r21)
  208ce8:	b0800415 	stw	r2,16(r22)
  208cec:	a8800317 	ldw	r2,12(r21)
  208cf0:	b0800515 	stw	r2,20(r22)
  208cf4:	31000a26 	beq	r6,r4,208d20 <_realloc_r+0x4e4>
  208cf8:	b0800604 	addi	r2,r22,24
  208cfc:	ad400404 	addi	r21,r21,16
  208d00:	003fa906 	br	208ba8 <_gp+0xffdf6fc4>
  208d04:	a9000417 	ldw	r4,16(r21)
  208d08:	90800604 	addi	r2,r18,24
  208d0c:	a8c00604 	addi	r3,r21,24
  208d10:	91000415 	stw	r4,16(r18)
  208d14:	a9000517 	ldw	r4,20(r21)
  208d18:	91000515 	stw	r4,20(r18)
  208d1c:	003f0406 	br	208930 <_gp+0xffdf6d4c>
  208d20:	a8c00417 	ldw	r3,16(r21)
  208d24:	ad400604 	addi	r21,r21,24
  208d28:	b0800804 	addi	r2,r22,32
  208d2c:	b0c00615 	stw	r3,24(r22)
  208d30:	a8ffff17 	ldw	r3,-4(r21)
  208d34:	b0c00715 	stw	r3,28(r22)
  208d38:	003f9b06 	br	208ba8 <_gp+0xffdf6fc4>
  208d3c:	9005883a 	mov	r2,r18
  208d40:	003fc706 	br	208c60 <_gp+0xffdf707c>
  208d44:	a80b883a 	mov	r5,r21
  208d48:	9009883a 	mov	r4,r18
  208d4c:	02075000 	call	207500 <memmove>
  208d50:	003fc906 	br	208c78 <_gp+0xffdf7094>
  208d54:	a8800217 	ldw	r2,8(r21)
  208d58:	b0800415 	stw	r2,16(r22)
  208d5c:	a8800317 	ldw	r2,12(r21)
  208d60:	b0800515 	stw	r2,20(r22)
  208d64:	31000726 	beq	r6,r4,208d84 <_realloc_r+0x548>
  208d68:	b0800604 	addi	r2,r22,24
  208d6c:	ad400404 	addi	r21,r21,16
  208d70:	003fbb06 	br	208c60 <_gp+0xffdf707c>
  208d74:	a009883a 	mov	r4,r20
  208d78:	020ea840 	call	20ea84 <__malloc_unlock>
  208d7c:	0005883a 	mov	r2,zero
  208d80:	003f0a06 	br	2089ac <_gp+0xffdf6dc8>
  208d84:	a8c00417 	ldw	r3,16(r21)
  208d88:	ad400604 	addi	r21,r21,24
  208d8c:	b0800804 	addi	r2,r22,32
  208d90:	b0c00615 	stw	r3,24(r22)
  208d94:	a8ffff17 	ldw	r3,-4(r21)
  208d98:	b0c00715 	stw	r3,28(r22)
  208d9c:	003fb006 	br	208c60 <_gp+0xffdf707c>

00208da0 <__fpclassifyd>:
  208da0:	00a00034 	movhi	r2,32768
  208da4:	10bfffc4 	addi	r2,r2,-1
  208da8:	2884703a 	and	r2,r5,r2
  208dac:	10000726 	beq	r2,zero,208dcc <__fpclassifyd+0x2c>
  208db0:	00fffc34 	movhi	r3,65520
  208db4:	019ff834 	movhi	r6,32736
  208db8:	28c7883a 	add	r3,r5,r3
  208dbc:	31bfffc4 	addi	r6,r6,-1
  208dc0:	30c00536 	bltu	r6,r3,208dd8 <__fpclassifyd+0x38>
  208dc4:	00800104 	movi	r2,4
  208dc8:	f800283a 	ret
  208dcc:	2000021e 	bne	r4,zero,208dd8 <__fpclassifyd+0x38>
  208dd0:	00800084 	movi	r2,2
  208dd4:	f800283a 	ret
  208dd8:	00dffc34 	movhi	r3,32752
  208ddc:	019ff834 	movhi	r6,32736
  208de0:	28cb883a 	add	r5,r5,r3
  208de4:	31bfffc4 	addi	r6,r6,-1
  208de8:	317ff62e 	bgeu	r6,r5,208dc4 <_gp+0xffdf71e0>
  208dec:	01400434 	movhi	r5,16
  208df0:	297fffc4 	addi	r5,r5,-1
  208df4:	28800236 	bltu	r5,r2,208e00 <__fpclassifyd+0x60>
  208df8:	008000c4 	movi	r2,3
  208dfc:	f800283a 	ret
  208e00:	10c00226 	beq	r2,r3,208e0c <__fpclassifyd+0x6c>
  208e04:	0005883a 	mov	r2,zero
  208e08:	f800283a 	ret
  208e0c:	2005003a 	cmpeq	r2,r4,zero
  208e10:	f800283a 	ret

00208e14 <_sbrk_r>:
  208e14:	defffd04 	addi	sp,sp,-12
  208e18:	dc000015 	stw	r16,0(sp)
  208e1c:	04001074 	movhi	r16,65
  208e20:	dc400115 	stw	r17,4(sp)
  208e24:	84271504 	addi	r16,r16,-25516
  208e28:	2023883a 	mov	r17,r4
  208e2c:	2809883a 	mov	r4,r5
  208e30:	dfc00215 	stw	ra,8(sp)
  208e34:	80000015 	stw	zero,0(r16)
  208e38:	020ec6c0 	call	20ec6c <sbrk>
  208e3c:	00ffffc4 	movi	r3,-1
  208e40:	10c00526 	beq	r2,r3,208e58 <_sbrk_r+0x44>
  208e44:	dfc00217 	ldw	ra,8(sp)
  208e48:	dc400117 	ldw	r17,4(sp)
  208e4c:	dc000017 	ldw	r16,0(sp)
  208e50:	dec00304 	addi	sp,sp,12
  208e54:	f800283a 	ret
  208e58:	80c00017 	ldw	r3,0(r16)
  208e5c:	183ff926 	beq	r3,zero,208e44 <_gp+0xffdf7260>
  208e60:	88c00015 	stw	r3,0(r17)
  208e64:	003ff706 	br	208e44 <_gp+0xffdf7260>

00208e68 <__sread>:
  208e68:	defffe04 	addi	sp,sp,-8
  208e6c:	dc000015 	stw	r16,0(sp)
  208e70:	2821883a 	mov	r16,r5
  208e74:	2940038f 	ldh	r5,14(r5)
  208e78:	dfc00115 	stw	ra,4(sp)
  208e7c:	020ad240 	call	20ad24 <_read_r>
  208e80:	10000716 	blt	r2,zero,208ea0 <__sread+0x38>
  208e84:	80c01417 	ldw	r3,80(r16)
  208e88:	1887883a 	add	r3,r3,r2
  208e8c:	80c01415 	stw	r3,80(r16)
  208e90:	dfc00117 	ldw	ra,4(sp)
  208e94:	dc000017 	ldw	r16,0(sp)
  208e98:	dec00204 	addi	sp,sp,8
  208e9c:	f800283a 	ret
  208ea0:	80c0030b 	ldhu	r3,12(r16)
  208ea4:	18fbffcc 	andi	r3,r3,61439
  208ea8:	80c0030d 	sth	r3,12(r16)
  208eac:	dfc00117 	ldw	ra,4(sp)
  208eb0:	dc000017 	ldw	r16,0(sp)
  208eb4:	dec00204 	addi	sp,sp,8
  208eb8:	f800283a 	ret

00208ebc <__seofread>:
  208ebc:	0005883a 	mov	r2,zero
  208ec0:	f800283a 	ret

00208ec4 <__swrite>:
  208ec4:	2880030b 	ldhu	r2,12(r5)
  208ec8:	defffb04 	addi	sp,sp,-20
  208ecc:	dcc00315 	stw	r19,12(sp)
  208ed0:	dc800215 	stw	r18,8(sp)
  208ed4:	dc400115 	stw	r17,4(sp)
  208ed8:	dc000015 	stw	r16,0(sp)
  208edc:	dfc00415 	stw	ra,16(sp)
  208ee0:	10c0400c 	andi	r3,r2,256
  208ee4:	2821883a 	mov	r16,r5
  208ee8:	2023883a 	mov	r17,r4
  208eec:	3025883a 	mov	r18,r6
  208ef0:	3827883a 	mov	r19,r7
  208ef4:	18000526 	beq	r3,zero,208f0c <__swrite+0x48>
  208ef8:	2940038f 	ldh	r5,14(r5)
  208efc:	01c00084 	movi	r7,2
  208f00:	000d883a 	mov	r6,zero
  208f04:	020acc40 	call	20acc4 <_lseek_r>
  208f08:	8080030b 	ldhu	r2,12(r16)
  208f0c:	8140038f 	ldh	r5,14(r16)
  208f10:	10bbffcc 	andi	r2,r2,61439
  208f14:	980f883a 	mov	r7,r19
  208f18:	900d883a 	mov	r6,r18
  208f1c:	8809883a 	mov	r4,r17
  208f20:	8080030d 	sth	r2,12(r16)
  208f24:	dfc00417 	ldw	ra,16(sp)
  208f28:	dcc00317 	ldw	r19,12(sp)
  208f2c:	dc800217 	ldw	r18,8(sp)
  208f30:	dc400117 	ldw	r17,4(sp)
  208f34:	dc000017 	ldw	r16,0(sp)
  208f38:	dec00504 	addi	sp,sp,20
  208f3c:	020a7781 	jmpi	20a778 <_write_r>

00208f40 <__sseek>:
  208f40:	defffe04 	addi	sp,sp,-8
  208f44:	dc000015 	stw	r16,0(sp)
  208f48:	2821883a 	mov	r16,r5
  208f4c:	2940038f 	ldh	r5,14(r5)
  208f50:	dfc00115 	stw	ra,4(sp)
  208f54:	020acc40 	call	20acc4 <_lseek_r>
  208f58:	00ffffc4 	movi	r3,-1
  208f5c:	10c00826 	beq	r2,r3,208f80 <__sseek+0x40>
  208f60:	80c0030b 	ldhu	r3,12(r16)
  208f64:	80801415 	stw	r2,80(r16)
  208f68:	18c40014 	ori	r3,r3,4096
  208f6c:	80c0030d 	sth	r3,12(r16)
  208f70:	dfc00117 	ldw	ra,4(sp)
  208f74:	dc000017 	ldw	r16,0(sp)
  208f78:	dec00204 	addi	sp,sp,8
  208f7c:	f800283a 	ret
  208f80:	80c0030b 	ldhu	r3,12(r16)
  208f84:	18fbffcc 	andi	r3,r3,61439
  208f88:	80c0030d 	sth	r3,12(r16)
  208f8c:	dfc00117 	ldw	ra,4(sp)
  208f90:	dc000017 	ldw	r16,0(sp)
  208f94:	dec00204 	addi	sp,sp,8
  208f98:	f800283a 	ret

00208f9c <__sclose>:
  208f9c:	2940038f 	ldh	r5,14(r5)
  208fa0:	020a7d81 	jmpi	20a7d8 <_close_r>

00208fa4 <strcmp>:
  208fa4:	2144b03a 	or	r2,r4,r5
  208fa8:	108000cc 	andi	r2,r2,3
  208fac:	1000171e 	bne	r2,zero,20900c <strcmp+0x68>
  208fb0:	20800017 	ldw	r2,0(r4)
  208fb4:	28c00017 	ldw	r3,0(r5)
  208fb8:	10c0141e 	bne	r2,r3,20900c <strcmp+0x68>
  208fbc:	027fbff4 	movhi	r9,65279
  208fc0:	4a7fbfc4 	addi	r9,r9,-257
  208fc4:	0086303a 	nor	r3,zero,r2
  208fc8:	02202074 	movhi	r8,32897
  208fcc:	1245883a 	add	r2,r2,r9
  208fd0:	42202004 	addi	r8,r8,-32640
  208fd4:	10c4703a 	and	r2,r2,r3
  208fd8:	1204703a 	and	r2,r2,r8
  208fdc:	10000226 	beq	r2,zero,208fe8 <strcmp+0x44>
  208fe0:	00002306 	br	209070 <strcmp+0xcc>
  208fe4:	1000221e 	bne	r2,zero,209070 <strcmp+0xcc>
  208fe8:	21000104 	addi	r4,r4,4
  208fec:	20c00017 	ldw	r3,0(r4)
  208ff0:	29400104 	addi	r5,r5,4
  208ff4:	29800017 	ldw	r6,0(r5)
  208ff8:	1a4f883a 	add	r7,r3,r9
  208ffc:	00c4303a 	nor	r2,zero,r3
  209000:	3884703a 	and	r2,r7,r2
  209004:	1204703a 	and	r2,r2,r8
  209008:	19bff626 	beq	r3,r6,208fe4 <_gp+0xffdf7400>
  20900c:	20800003 	ldbu	r2,0(r4)
  209010:	10c03fcc 	andi	r3,r2,255
  209014:	18c0201c 	xori	r3,r3,128
  209018:	18ffe004 	addi	r3,r3,-128
  20901c:	18000c26 	beq	r3,zero,209050 <strcmp+0xac>
  209020:	29800007 	ldb	r6,0(r5)
  209024:	19800326 	beq	r3,r6,209034 <strcmp+0x90>
  209028:	00001306 	br	209078 <strcmp+0xd4>
  20902c:	29800007 	ldb	r6,0(r5)
  209030:	11800b1e 	bne	r2,r6,209060 <strcmp+0xbc>
  209034:	21000044 	addi	r4,r4,1
  209038:	20c00003 	ldbu	r3,0(r4)
  20903c:	29400044 	addi	r5,r5,1
  209040:	18803fcc 	andi	r2,r3,255
  209044:	1080201c 	xori	r2,r2,128
  209048:	10bfe004 	addi	r2,r2,-128
  20904c:	103ff71e 	bne	r2,zero,20902c <_gp+0xffdf7448>
  209050:	0007883a 	mov	r3,zero
  209054:	28800003 	ldbu	r2,0(r5)
  209058:	1885c83a 	sub	r2,r3,r2
  20905c:	f800283a 	ret
  209060:	28800003 	ldbu	r2,0(r5)
  209064:	18c03fcc 	andi	r3,r3,255
  209068:	1885c83a 	sub	r2,r3,r2
  20906c:	f800283a 	ret
  209070:	0005883a 	mov	r2,zero
  209074:	f800283a 	ret
  209078:	10c03fcc 	andi	r3,r2,255
  20907c:	003ff506 	br	209054 <_gp+0xffdf7470>

00209080 <__sprint_r.part.0>:
  209080:	28801917 	ldw	r2,100(r5)
  209084:	defff604 	addi	sp,sp,-40
  209088:	dd400515 	stw	r21,20(sp)
  20908c:	dfc00915 	stw	ra,36(sp)
  209090:	df000815 	stw	fp,32(sp)
  209094:	ddc00715 	stw	r23,28(sp)
  209098:	dd800615 	stw	r22,24(sp)
  20909c:	dd000415 	stw	r20,16(sp)
  2090a0:	dcc00315 	stw	r19,12(sp)
  2090a4:	dc800215 	stw	r18,8(sp)
  2090a8:	dc400115 	stw	r17,4(sp)
  2090ac:	dc000015 	stw	r16,0(sp)
  2090b0:	1088000c 	andi	r2,r2,8192
  2090b4:	302b883a 	mov	r21,r6
  2090b8:	10002e26 	beq	r2,zero,209174 <__sprint_r.part.0+0xf4>
  2090bc:	30800217 	ldw	r2,8(r6)
  2090c0:	35800017 	ldw	r22,0(r6)
  2090c4:	10002926 	beq	r2,zero,20916c <__sprint_r.part.0+0xec>
  2090c8:	2827883a 	mov	r19,r5
  2090cc:	2029883a 	mov	r20,r4
  2090d0:	b5c00104 	addi	r23,r22,4
  2090d4:	04bfffc4 	movi	r18,-1
  2090d8:	bc400017 	ldw	r17,0(r23)
  2090dc:	b4000017 	ldw	r16,0(r22)
  2090e0:	0039883a 	mov	fp,zero
  2090e4:	8822d0ba 	srli	r17,r17,2
  2090e8:	8800031e 	bne	r17,zero,2090f8 <__sprint_r.part.0+0x78>
  2090ec:	00001806 	br	209150 <__sprint_r.part.0+0xd0>
  2090f0:	84000104 	addi	r16,r16,4
  2090f4:	8f001526 	beq	r17,fp,20914c <__sprint_r.part.0+0xcc>
  2090f8:	81400017 	ldw	r5,0(r16)
  2090fc:	980d883a 	mov	r6,r19
  209100:	a009883a 	mov	r4,r20
  209104:	020ab700 	call	20ab70 <_fputwc_r>
  209108:	e7000044 	addi	fp,fp,1
  20910c:	14bff81e 	bne	r2,r18,2090f0 <_gp+0xffdf750c>
  209110:	9005883a 	mov	r2,r18
  209114:	a8000215 	stw	zero,8(r21)
  209118:	a8000115 	stw	zero,4(r21)
  20911c:	dfc00917 	ldw	ra,36(sp)
  209120:	df000817 	ldw	fp,32(sp)
  209124:	ddc00717 	ldw	r23,28(sp)
  209128:	dd800617 	ldw	r22,24(sp)
  20912c:	dd400517 	ldw	r21,20(sp)
  209130:	dd000417 	ldw	r20,16(sp)
  209134:	dcc00317 	ldw	r19,12(sp)
  209138:	dc800217 	ldw	r18,8(sp)
  20913c:	dc400117 	ldw	r17,4(sp)
  209140:	dc000017 	ldw	r16,0(sp)
  209144:	dec00a04 	addi	sp,sp,40
  209148:	f800283a 	ret
  20914c:	a8800217 	ldw	r2,8(r21)
  209150:	8c63883a 	add	r17,r17,r17
  209154:	8c63883a 	add	r17,r17,r17
  209158:	1445c83a 	sub	r2,r2,r17
  20915c:	a8800215 	stw	r2,8(r21)
  209160:	b5800204 	addi	r22,r22,8
  209164:	bdc00204 	addi	r23,r23,8
  209168:	103fdb1e 	bne	r2,zero,2090d8 <_gp+0xffdf74f4>
  20916c:	0005883a 	mov	r2,zero
  209170:	003fe806 	br	209114 <_gp+0xffdf7530>
  209174:	02061e00 	call	2061e0 <__sfvwrite_r>
  209178:	003fe606 	br	209114 <_gp+0xffdf7530>

0020917c <__sprint_r>:
  20917c:	30c00217 	ldw	r3,8(r6)
  209180:	18000126 	beq	r3,zero,209188 <__sprint_r+0xc>
  209184:	02090801 	jmpi	209080 <__sprint_r.part.0>
  209188:	30000115 	stw	zero,4(r6)
  20918c:	0005883a 	mov	r2,zero
  209190:	f800283a 	ret

00209194 <___vfiprintf_internal_r>:
  209194:	deffca04 	addi	sp,sp,-216
  209198:	dd403115 	stw	r21,196(sp)
  20919c:	dfc03515 	stw	ra,212(sp)
  2091a0:	df003415 	stw	fp,208(sp)
  2091a4:	ddc03315 	stw	r23,204(sp)
  2091a8:	dd803215 	stw	r22,200(sp)
  2091ac:	dd003015 	stw	r20,192(sp)
  2091b0:	dcc02f15 	stw	r19,188(sp)
  2091b4:	dc802e15 	stw	r18,184(sp)
  2091b8:	dc402d15 	stw	r17,180(sp)
  2091bc:	dc002c15 	stw	r16,176(sp)
  2091c0:	d9002115 	stw	r4,132(sp)
  2091c4:	d9402015 	stw	r5,128(sp)
  2091c8:	d9c02215 	stw	r7,136(sp)
  2091cc:	302b883a 	mov	r21,r6
  2091d0:	20000226 	beq	r4,zero,2091dc <___vfiprintf_internal_r+0x48>
  2091d4:	20800e17 	ldw	r2,56(r4)
  2091d8:	1000cf26 	beq	r2,zero,209518 <___vfiprintf_internal_r+0x384>
  2091dc:	d8c02017 	ldw	r3,128(sp)
  2091e0:	1880030b 	ldhu	r2,12(r3)
  2091e4:	10c8000c 	andi	r3,r2,8192
  2091e8:	1800071e 	bne	r3,zero,209208 <___vfiprintf_internal_r+0x74>
  2091ec:	d9402017 	ldw	r5,128(sp)
  2091f0:	00f7ffc4 	movi	r3,-8193
  2091f4:	10880014 	ori	r2,r2,8192
  2091f8:	29001917 	ldw	r4,100(r5)
  2091fc:	2880030d 	sth	r2,12(r5)
  209200:	20c6703a 	and	r3,r4,r3
  209204:	28c01915 	stw	r3,100(r5)
  209208:	10c0020c 	andi	r3,r2,8
  20920c:	1800a526 	beq	r3,zero,2094a4 <___vfiprintf_internal_r+0x310>
  209210:	d9002017 	ldw	r4,128(sp)
  209214:	20c00417 	ldw	r3,16(r4)
  209218:	1800a226 	beq	r3,zero,2094a4 <___vfiprintf_internal_r+0x310>
  20921c:	1080068c 	andi	r2,r2,26
  209220:	00c00284 	movi	r3,10
  209224:	10c0a826 	beq	r2,r3,2094c8 <___vfiprintf_internal_r+0x334>
  209228:	d9001a04 	addi	r4,sp,104
  20922c:	d94019c4 	addi	r5,sp,103
  209230:	04800874 	movhi	r18,33
  209234:	2145c83a 	sub	r2,r4,r5
  209238:	9490aa04 	addi	r18,r18,17064
  20923c:	d9001e15 	stw	r4,120(sp)
  209240:	d9401f15 	stw	r5,124(sp)
  209244:	dec01a15 	stw	sp,104(sp)
  209248:	d8001c15 	stw	zero,112(sp)
  20924c:	d8001b15 	stw	zero,108(sp)
  209250:	d811883a 	mov	r8,sp
  209254:	d8002615 	stw	zero,152(sp)
  209258:	d8002415 	stw	zero,144(sp)
  20925c:	d8802815 	stw	r2,160(sp)
  209260:	a82d883a 	mov	r22,r21
  209264:	b0800007 	ldb	r2,0(r22)
  209268:	10040d26 	beq	r2,zero,20a2a0 <___vfiprintf_internal_r+0x110c>
  20926c:	00c00944 	movi	r3,37
  209270:	b029883a 	mov	r20,r22
  209274:	10c0021e 	bne	r2,r3,209280 <___vfiprintf_internal_r+0xec>
  209278:	00001606 	br	2092d4 <___vfiprintf_internal_r+0x140>
  20927c:	10c00326 	beq	r2,r3,20928c <___vfiprintf_internal_r+0xf8>
  209280:	a5000044 	addi	r20,r20,1
  209284:	a0800007 	ldb	r2,0(r20)
  209288:	103ffc1e 	bne	r2,zero,20927c <_gp+0xffdf7698>
  20928c:	a5a1c83a 	sub	r16,r20,r22
  209290:	80001026 	beq	r16,zero,2092d4 <___vfiprintf_internal_r+0x140>
  209294:	d8c01c17 	ldw	r3,112(sp)
  209298:	d8801b17 	ldw	r2,108(sp)
  20929c:	45800015 	stw	r22,0(r8)
  2092a0:	80c7883a 	add	r3,r16,r3
  2092a4:	10800044 	addi	r2,r2,1
  2092a8:	44000115 	stw	r16,4(r8)
  2092ac:	d8c01c15 	stw	r3,112(sp)
  2092b0:	d8801b15 	stw	r2,108(sp)
  2092b4:	010001c4 	movi	r4,7
  2092b8:	2080750e 	bge	r4,r2,209490 <___vfiprintf_internal_r+0x2fc>
  2092bc:	1803951e 	bne	r3,zero,20a114 <___vfiprintf_internal_r+0xf80>
  2092c0:	d8c02417 	ldw	r3,144(sp)
  2092c4:	d8001b15 	stw	zero,108(sp)
  2092c8:	d811883a 	mov	r8,sp
  2092cc:	1c07883a 	add	r3,r3,r16
  2092d0:	d8c02415 	stw	r3,144(sp)
  2092d4:	a0800007 	ldb	r2,0(r20)
  2092d8:	1002e026 	beq	r2,zero,209e5c <___vfiprintf_internal_r+0xcc8>
  2092dc:	a5800044 	addi	r22,r20,1
  2092e0:	a0c00047 	ldb	r3,1(r20)
  2092e4:	d8001d85 	stb	zero,118(sp)
  2092e8:	0027883a 	mov	r19,zero
  2092ec:	d8002305 	stb	zero,140(sp)
  2092f0:	043fffc4 	movi	r16,-1
  2092f4:	d8002515 	stw	zero,148(sp)
  2092f8:	0023883a 	mov	r17,zero
  2092fc:	05001604 	movi	r20,88
  209300:	05400244 	movi	r21,9
  209304:	402f883a 	mov	r23,r8
  209308:	b5800044 	addi	r22,r22,1
  20930c:	18bff804 	addi	r2,r3,-32
  209310:	a0827736 	bltu	r20,r2,209cf0 <___vfiprintf_internal_r+0xb5c>
  209314:	100490ba 	slli	r2,r2,2
  209318:	01000874 	movhi	r4,33
  20931c:	2124cb04 	addi	r4,r4,-27860
  209320:	1105883a 	add	r2,r2,r4
  209324:	10800017 	ldw	r2,0(r2)
  209328:	1000683a 	jmp	r2
  20932c:	002099f0 	cmpltui	zero,zero,33383
  209330:	00209cf0 	cmpltui	zero,zero,33395
  209334:	00209cf0 	cmpltui	zero,zero,33395
  209338:	00209a0c 	andi	zero,zero,33384
  20933c:	00209cf0 	cmpltui	zero,zero,33395
  209340:	00209cf0 	cmpltui	zero,zero,33395
  209344:	00209cf0 	cmpltui	zero,zero,33395
  209348:	00209cf0 	cmpltui	zero,zero,33395
  20934c:	00209cf0 	cmpltui	zero,zero,33395
  209350:	00209cf0 	cmpltui	zero,zero,33395
  209354:	00209c14 	movui	zero,33392
  209358:	00209c38 	rdprs	zero,zero,-32144
  20935c:	00209cf0 	cmpltui	zero,zero,33395
  209360:	00209530 	cmpltui	zero,zero,33364
  209364:	00209c4c 	andi	zero,zero,33393
  209368:	00209cf0 	cmpltui	zero,zero,33395
  20936c:	00209a18 	cmpnei	zero,zero,-32152
  209370:	00209a24 	muli	zero,zero,-32152
  209374:	00209a24 	muli	zero,zero,-32152
  209378:	00209a24 	muli	zero,zero,-32152
  20937c:	00209a24 	muli	zero,zero,-32152
  209380:	00209a24 	muli	zero,zero,-32152
  209384:	00209a24 	muli	zero,zero,-32152
  209388:	00209a24 	muli	zero,zero,-32152
  20938c:	00209a24 	muli	zero,zero,-32152
  209390:	00209a24 	muli	zero,zero,-32152
  209394:	00209cf0 	cmpltui	zero,zero,33395
  209398:	00209cf0 	cmpltui	zero,zero,33395
  20939c:	00209cf0 	cmpltui	zero,zero,33395
  2093a0:	00209cf0 	cmpltui	zero,zero,33395
  2093a4:	00209cf0 	cmpltui	zero,zero,33395
  2093a8:	00209cf0 	cmpltui	zero,zero,33395
  2093ac:	00209cf0 	cmpltui	zero,zero,33395
  2093b0:	00209cf0 	cmpltui	zero,zero,33395
  2093b4:	00209cf0 	cmpltui	zero,zero,33395
  2093b8:	00209cf0 	cmpltui	zero,zero,33395
  2093bc:	00209a64 	muli	zero,zero,-32151
  2093c0:	00209cf0 	cmpltui	zero,zero,33395
  2093c4:	00209cf0 	cmpltui	zero,zero,33395
  2093c8:	00209cf0 	cmpltui	zero,zero,33395
  2093cc:	00209cf0 	cmpltui	zero,zero,33395
  2093d0:	00209cf0 	cmpltui	zero,zero,33395
  2093d4:	00209cf0 	cmpltui	zero,zero,33395
  2093d8:	00209cf0 	cmpltui	zero,zero,33395
  2093dc:	00209cf0 	cmpltui	zero,zero,33395
  2093e0:	00209cf0 	cmpltui	zero,zero,33395
  2093e4:	00209cf0 	cmpltui	zero,zero,33395
  2093e8:	00209aa0 	cmpeqi	zero,zero,-32150
  2093ec:	00209cf0 	cmpltui	zero,zero,33395
  2093f0:	00209cf0 	cmpltui	zero,zero,33395
  2093f4:	00209cf0 	cmpltui	zero,zero,33395
  2093f8:	00209cf0 	cmpltui	zero,zero,33395
  2093fc:	00209cf0 	cmpltui	zero,zero,33395
  209400:	00209afc 	xorhi	zero,zero,33387
  209404:	00209cf0 	cmpltui	zero,zero,33395
  209408:	00209cf0 	cmpltui	zero,zero,33395
  20940c:	00209b70 	cmpltui	zero,zero,33389
  209410:	00209cf0 	cmpltui	zero,zero,33395
  209414:	00209cf0 	cmpltui	zero,zero,33395
  209418:	00209cf0 	cmpltui	zero,zero,33395
  20941c:	00209cf0 	cmpltui	zero,zero,33395
  209420:	00209cf0 	cmpltui	zero,zero,33395
  209424:	00209cf0 	cmpltui	zero,zero,33395
  209428:	00209cf0 	cmpltui	zero,zero,33395
  20942c:	00209cf0 	cmpltui	zero,zero,33395
  209430:	00209cf0 	cmpltui	zero,zero,33395
  209434:	00209cf0 	cmpltui	zero,zero,33395
  209438:	00209918 	cmpnei	zero,zero,-32156
  20943c:	00209948 	cmpgei	zero,zero,-32155
  209440:	00209cf0 	cmpltui	zero,zero,33395
  209444:	00209cf0 	cmpltui	zero,zero,33395
  209448:	00209cf0 	cmpltui	zero,zero,33395
  20944c:	00209c98 	cmpnei	zero,zero,-32142
  209450:	00209948 	cmpgei	zero,zero,-32155
  209454:	00209cf0 	cmpltui	zero,zero,33395
  209458:	00209cf0 	cmpltui	zero,zero,33395
  20945c:	002097f0 	cmpltui	zero,zero,33375
  209460:	00209cf0 	cmpltui	zero,zero,33395
  209464:	00209804 	movi	zero,-32160
  209468:	0020983c 	xorhi	zero,zero,33376
  20946c:	0020953c 	xorhi	zero,zero,33364
  209470:	002097e4 	muli	zero,zero,-32161
  209474:	00209cf0 	cmpltui	zero,zero,33395
  209478:	00209bb0 	cmpltui	zero,zero,33390
  20947c:	00209cf0 	cmpltui	zero,zero,33395
  209480:	00209bfc 	xorhi	zero,zero,33391
  209484:	00209cf0 	cmpltui	zero,zero,33395
  209488:	00209cf0 	cmpltui	zero,zero,33395
  20948c:	002098c0 	call	2098c <__alt_mem_onchip_flash_0_data-0x1df674>
  209490:	42000204 	addi	r8,r8,8
  209494:	d8c02417 	ldw	r3,144(sp)
  209498:	1c07883a 	add	r3,r3,r16
  20949c:	d8c02415 	stw	r3,144(sp)
  2094a0:	003f8c06 	br	2092d4 <_gp+0xffdf76f0>
  2094a4:	d9402017 	ldw	r5,128(sp)
  2094a8:	d9002117 	ldw	r4,132(sp)
  2094ac:	0203d500 	call	203d50 <__swsetup_r>
  2094b0:	1003c11e 	bne	r2,zero,20a3b8 <___vfiprintf_internal_r+0x1224>
  2094b4:	d9402017 	ldw	r5,128(sp)
  2094b8:	00c00284 	movi	r3,10
  2094bc:	2880030b 	ldhu	r2,12(r5)
  2094c0:	1080068c 	andi	r2,r2,26
  2094c4:	10ff581e 	bne	r2,r3,209228 <_gp+0xffdf7644>
  2094c8:	d8c02017 	ldw	r3,128(sp)
  2094cc:	1880038f 	ldh	r2,14(r3)
  2094d0:	103f5516 	blt	r2,zero,209228 <_gp+0xffdf7644>
  2094d4:	d9c02217 	ldw	r7,136(sp)
  2094d8:	d9002117 	ldw	r4,132(sp)
  2094dc:	a80d883a 	mov	r6,r21
  2094e0:	180b883a 	mov	r5,r3
  2094e4:	020a6bc0 	call	20a6bc <__sbprintf>
  2094e8:	dfc03517 	ldw	ra,212(sp)
  2094ec:	df003417 	ldw	fp,208(sp)
  2094f0:	ddc03317 	ldw	r23,204(sp)
  2094f4:	dd803217 	ldw	r22,200(sp)
  2094f8:	dd403117 	ldw	r21,196(sp)
  2094fc:	dd003017 	ldw	r20,192(sp)
  209500:	dcc02f17 	ldw	r19,188(sp)
  209504:	dc802e17 	ldw	r18,184(sp)
  209508:	dc402d17 	ldw	r17,180(sp)
  20950c:	dc002c17 	ldw	r16,176(sp)
  209510:	dec03604 	addi	sp,sp,216
  209514:	f800283a 	ret
  209518:	0205d5c0 	call	205d5c <__sinit>
  20951c:	003f2f06 	br	2091dc <_gp+0xffdf75f8>
  209520:	d8c02517 	ldw	r3,148(sp)
  209524:	d8802215 	stw	r2,136(sp)
  209528:	00c7c83a 	sub	r3,zero,r3
  20952c:	d8c02515 	stw	r3,148(sp)
  209530:	8c400114 	ori	r17,r17,4
  209534:	b0c00007 	ldb	r3,0(r22)
  209538:	003f7306 	br	209308 <_gp+0xffdf7724>
  20953c:	00800c04 	movi	r2,48
  209540:	d9402217 	ldw	r5,136(sp)
  209544:	d8801d05 	stb	r2,116(sp)
  209548:	00801e04 	movi	r2,120
  20954c:	d8801d45 	stb	r2,117(sp)
  209550:	d8001d85 	stb	zero,118(sp)
  209554:	b811883a 	mov	r8,r23
  209558:	28c00104 	addi	r3,r5,4
  20955c:	2cc00017 	ldw	r19,0(r5)
  209560:	0029883a 	mov	r20,zero
  209564:	88800094 	ori	r2,r17,2
  209568:	80032516 	blt	r16,zero,20a200 <___vfiprintf_internal_r+0x106c>
  20956c:	00bfdfc4 	movi	r2,-129
  209570:	88a2703a 	and	r17,r17,r2
  209574:	d8c02215 	stw	r3,136(sp)
  209578:	8c400094 	ori	r17,r17,2
  20957c:	98032a1e 	bne	r19,zero,20a228 <___vfiprintf_internal_r+0x1094>
  209580:	00800874 	movhi	r2,33
  209584:	10904904 	addi	r2,r2,16676
  209588:	d8802615 	stw	r2,152(sp)
  20958c:	002b883a 	mov	r21,zero
  209590:	8001741e 	bne	r16,zero,209b64 <___vfiprintf_internal_r+0x9d0>
  209594:	0021883a 	mov	r16,zero
  209598:	0029883a 	mov	r20,zero
  20959c:	ddc01a04 	addi	r23,sp,104
  2095a0:	8027883a 	mov	r19,r16
  2095a4:	8500010e 	bge	r16,r20,2095ac <___vfiprintf_internal_r+0x418>
  2095a8:	a027883a 	mov	r19,r20
  2095ac:	ad403fcc 	andi	r21,r21,255
  2095b0:	ad40201c 	xori	r21,r21,128
  2095b4:	ad7fe004 	addi	r21,r21,-128
  2095b8:	a8000126 	beq	r21,zero,2095c0 <___vfiprintf_internal_r+0x42c>
  2095bc:	9cc00044 	addi	r19,r19,1
  2095c0:	89c0008c 	andi	r7,r17,2
  2095c4:	38000126 	beq	r7,zero,2095cc <___vfiprintf_internal_r+0x438>
  2095c8:	9cc00084 	addi	r19,r19,2
  2095cc:	88c0210c 	andi	r3,r17,132
  2095d0:	1801dd1e 	bne	r3,zero,209d48 <___vfiprintf_internal_r+0xbb4>
  2095d4:	d9402517 	ldw	r5,148(sp)
  2095d8:	2cebc83a 	sub	r21,r5,r19
  2095dc:	0541da0e 	bge	zero,r21,209d48 <___vfiprintf_internal_r+0xbb4>
  2095e0:	07000404 	movi	fp,16
  2095e4:	d8801c17 	ldw	r2,112(sp)
  2095e8:	e543be0e 	bge	fp,r21,20a4e4 <___vfiprintf_internal_r+0x1350>
  2095ec:	01400874 	movhi	r5,33
  2095f0:	2950ae04 	addi	r5,r5,17080
  2095f4:	dc002715 	stw	r16,156(sp)
  2095f8:	d9801b17 	ldw	r6,108(sp)
  2095fc:	a821883a 	mov	r16,r21
  209600:	d9402315 	stw	r5,140(sp)
  209604:	028001c4 	movi	r10,7
  209608:	d9c02915 	stw	r7,164(sp)
  20960c:	182b883a 	mov	r21,r3
  209610:	00000506 	br	209628 <___vfiprintf_internal_r+0x494>
  209614:	31000084 	addi	r4,r6,2
  209618:	42000204 	addi	r8,r8,8
  20961c:	180d883a 	mov	r6,r3
  209620:	843ffc04 	addi	r16,r16,-16
  209624:	e4000f0e 	bge	fp,r16,209664 <___vfiprintf_internal_r+0x4d0>
  209628:	01000874 	movhi	r4,33
  20962c:	10800404 	addi	r2,r2,16
  209630:	30c00044 	addi	r3,r6,1
  209634:	2110ae04 	addi	r4,r4,17080
  209638:	41000015 	stw	r4,0(r8)
  20963c:	47000115 	stw	fp,4(r8)
  209640:	d8801c15 	stw	r2,112(sp)
  209644:	d8c01b15 	stw	r3,108(sp)
  209648:	50fff20e 	bge	r10,r3,209614 <_gp+0xffdf7a30>
  20964c:	1001b21e 	bne	r2,zero,209d18 <___vfiprintf_internal_r+0xb84>
  209650:	843ffc04 	addi	r16,r16,-16
  209654:	000d883a 	mov	r6,zero
  209658:	01000044 	movi	r4,1
  20965c:	d811883a 	mov	r8,sp
  209660:	e43ff116 	blt	fp,r16,209628 <_gp+0xffdf7a44>
  209664:	a807883a 	mov	r3,r21
  209668:	d9c02917 	ldw	r7,164(sp)
  20966c:	802b883a 	mov	r21,r16
  209670:	dc002717 	ldw	r16,156(sp)
  209674:	d9402317 	ldw	r5,140(sp)
  209678:	a885883a 	add	r2,r21,r2
  20967c:	45400115 	stw	r21,4(r8)
  209680:	41400015 	stw	r5,0(r8)
  209684:	d8801c15 	stw	r2,112(sp)
  209688:	d9001b15 	stw	r4,108(sp)
  20968c:	014001c4 	movi	r5,7
  209690:	29026216 	blt	r5,r4,20a01c <___vfiprintf_internal_r+0xe88>
  209694:	d9801d87 	ldb	r6,118(sp)
  209698:	42000204 	addi	r8,r8,8
  20969c:	21400044 	addi	r5,r4,1
  2096a0:	3001ae1e 	bne	r6,zero,209d5c <___vfiprintf_internal_r+0xbc8>
  2096a4:	3801bb26 	beq	r7,zero,209d94 <___vfiprintf_internal_r+0xc00>
  2096a8:	d9001d04 	addi	r4,sp,116
  2096ac:	10800084 	addi	r2,r2,2
  2096b0:	41000015 	stw	r4,0(r8)
  2096b4:	01000084 	movi	r4,2
  2096b8:	41000115 	stw	r4,4(r8)
  2096bc:	d8801c15 	stw	r2,112(sp)
  2096c0:	d9401b15 	stw	r5,108(sp)
  2096c4:	010001c4 	movi	r4,7
  2096c8:	2142680e 	bge	r4,r5,20a06c <___vfiprintf_internal_r+0xed8>
  2096cc:	1002b11e 	bne	r2,zero,20a194 <___vfiprintf_internal_r+0x1000>
  2096d0:	01802004 	movi	r6,128
  2096d4:	01400044 	movi	r5,1
  2096d8:	0009883a 	mov	r4,zero
  2096dc:	d811883a 	mov	r8,sp
  2096e0:	1981ae1e 	bne	r3,r6,209d9c <___vfiprintf_internal_r+0xc08>
  2096e4:	d8c02517 	ldw	r3,148(sp)
  2096e8:	1cf9c83a 	sub	fp,r3,r19
  2096ec:	0701ab0e 	bge	zero,fp,209d9c <___vfiprintf_internal_r+0xc08>
  2096f0:	05400404 	movi	r21,16
  2096f4:	af03a90e 	bge	r21,fp,20a59c <___vfiprintf_internal_r+0x1408>
  2096f8:	01400874 	movhi	r5,33
  2096fc:	2950aa04 	addi	r5,r5,17064
  209700:	d9402315 	stw	r5,140(sp)
  209704:	01c001c4 	movi	r7,7
  209708:	00000506 	br	209720 <___vfiprintf_internal_r+0x58c>
  20970c:	21800084 	addi	r6,r4,2
  209710:	42000204 	addi	r8,r8,8
  209714:	1809883a 	mov	r4,r3
  209718:	e73ffc04 	addi	fp,fp,-16
  20971c:	af000d0e 	bge	r21,fp,209754 <___vfiprintf_internal_r+0x5c0>
  209720:	10800404 	addi	r2,r2,16
  209724:	20c00044 	addi	r3,r4,1
  209728:	44800015 	stw	r18,0(r8)
  20972c:	45400115 	stw	r21,4(r8)
  209730:	d8801c15 	stw	r2,112(sp)
  209734:	d8c01b15 	stw	r3,108(sp)
  209738:	38fff40e 	bge	r7,r3,20970c <_gp+0xffdf7b28>
  20973c:	10022b1e 	bne	r2,zero,209fec <___vfiprintf_internal_r+0xe58>
  209740:	e73ffc04 	addi	fp,fp,-16
  209744:	01800044 	movi	r6,1
  209748:	0009883a 	mov	r4,zero
  20974c:	d811883a 	mov	r8,sp
  209750:	af3ff316 	blt	r21,fp,209720 <_gp+0xffdf7b3c>
  209754:	d8c02317 	ldw	r3,140(sp)
  209758:	1705883a 	add	r2,r2,fp
  20975c:	47000115 	stw	fp,4(r8)
  209760:	40c00015 	stw	r3,0(r8)
  209764:	d8801c15 	stw	r2,112(sp)
  209768:	d9801b15 	stw	r6,108(sp)
  20976c:	00c001c4 	movi	r3,7
  209770:	19829416 	blt	r3,r6,20a1c4 <___vfiprintf_internal_r+0x1030>
  209774:	8521c83a 	sub	r16,r16,r20
  209778:	42000204 	addi	r8,r8,8
  20977c:	31400044 	addi	r5,r6,1
  209780:	3009883a 	mov	r4,r6
  209784:	04018716 	blt	zero,r16,209da4 <___vfiprintf_internal_r+0xc10>
  209788:	a085883a 	add	r2,r20,r2
  20978c:	45c00015 	stw	r23,0(r8)
  209790:	45000115 	stw	r20,4(r8)
  209794:	d8801c15 	stw	r2,112(sp)
  209798:	d9401b15 	stw	r5,108(sp)
  20979c:	00c001c4 	movi	r3,7
  2097a0:	1941c20e 	bge	r3,r5,209eac <___vfiprintf_internal_r+0xd18>
  2097a4:	1002531e 	bne	r2,zero,20a0f4 <___vfiprintf_internal_r+0xf60>
  2097a8:	d8001b15 	stw	zero,108(sp)
  2097ac:	8c40010c 	andi	r17,r17,4
  2097b0:	88023226 	beq	r17,zero,20a07c <___vfiprintf_internal_r+0xee8>
  2097b4:	d9002517 	ldw	r4,148(sp)
  2097b8:	24e3c83a 	sub	r17,r4,r19
  2097bc:	04432916 	blt	zero,r17,20a464 <___vfiprintf_internal_r+0x12d0>
  2097c0:	d8802517 	ldw	r2,148(sp)
  2097c4:	14c0010e 	bge	r2,r19,2097cc <___vfiprintf_internal_r+0x638>
  2097c8:	9805883a 	mov	r2,r19
  2097cc:	d8c02417 	ldw	r3,144(sp)
  2097d0:	1887883a 	add	r3,r3,r2
  2097d4:	d8c02415 	stw	r3,144(sp)
  2097d8:	d8001b15 	stw	zero,108(sp)
  2097dc:	d811883a 	mov	r8,sp
  2097e0:	003ea006 	br	209264 <_gp+0xffdf7680>
  2097e4:	8c400814 	ori	r17,r17,32
  2097e8:	b0c00007 	ldb	r3,0(r22)
  2097ec:	003ec606 	br	209308 <_gp+0xffdf7724>
  2097f0:	b0c00007 	ldb	r3,0(r22)
  2097f4:	00801b04 	movi	r2,108
  2097f8:	18832026 	beq	r3,r2,20a47c <___vfiprintf_internal_r+0x12e8>
  2097fc:	8c400414 	ori	r17,r17,16
  209800:	003ec106 	br	209308 <_gp+0xffdf7724>
  209804:	9cc03fcc 	andi	r19,r19,255
  209808:	b811883a 	mov	r8,r23
  20980c:	9803981e 	bne	r19,zero,20a670 <___vfiprintf_internal_r+0x14dc>
  209810:	8880080c 	andi	r2,r17,32
  209814:	1002be26 	beq	r2,zero,20a310 <___vfiprintf_internal_r+0x117c>
  209818:	d9002217 	ldw	r4,136(sp)
  20981c:	d9402417 	ldw	r5,144(sp)
  209820:	20800017 	ldw	r2,0(r4)
  209824:	2807d7fa 	srai	r3,r5,31
  209828:	21000104 	addi	r4,r4,4
  20982c:	d9002215 	stw	r4,136(sp)
  209830:	11400015 	stw	r5,0(r2)
  209834:	10c00115 	stw	r3,4(r2)
  209838:	003e8a06 	br	209264 <_gp+0xffdf7680>
  20983c:	9cc03fcc 	andi	r19,r19,255
  209840:	b811883a 	mov	r8,r23
  209844:	9803871e 	bne	r19,zero,20a664 <___vfiprintf_internal_r+0x14d0>
  209848:	8880080c 	andi	r2,r17,32
  20984c:	10009a26 	beq	r2,zero,209ab8 <___vfiprintf_internal_r+0x924>
  209850:	d9002217 	ldw	r4,136(sp)
  209854:	d8001d85 	stb	zero,118(sp)
  209858:	20800204 	addi	r2,r4,8
  20985c:	24c00017 	ldw	r19,0(r4)
  209860:	25000117 	ldw	r20,4(r4)
  209864:	8002a416 	blt	r16,zero,20a2f8 <___vfiprintf_internal_r+0x1164>
  209868:	013fdfc4 	movi	r4,-129
  20986c:	9d06b03a 	or	r3,r19,r20
  209870:	d8802215 	stw	r2,136(sp)
  209874:	8922703a 	and	r17,r17,r4
  209878:	18009b26 	beq	r3,zero,209ae8 <___vfiprintf_internal_r+0x954>
  20987c:	002b883a 	mov	r21,zero
  209880:	ddc01a04 	addi	r23,sp,104
  209884:	9806d0fa 	srli	r3,r19,3
  209888:	a008977a 	slli	r4,r20,29
  20988c:	a028d0fa 	srli	r20,r20,3
  209890:	9cc001cc 	andi	r19,r19,7
  209894:	98800c04 	addi	r2,r19,48
  209898:	bdffffc4 	addi	r23,r23,-1
  20989c:	20e6b03a 	or	r19,r4,r3
  2098a0:	b8800005 	stb	r2,0(r23)
  2098a4:	9d06b03a 	or	r3,r19,r20
  2098a8:	183ff61e 	bne	r3,zero,209884 <_gp+0xffdf7ca0>
  2098ac:	88c0004c 	andi	r3,r17,1
  2098b0:	18021f1e 	bne	r3,zero,20a130 <___vfiprintf_internal_r+0xf9c>
  2098b4:	d9401e17 	ldw	r5,120(sp)
  2098b8:	2de9c83a 	sub	r20,r5,r23
  2098bc:	003f3806 	br	2095a0 <_gp+0xffdf79bc>
  2098c0:	9cc03fcc 	andi	r19,r19,255
  2098c4:	b811883a 	mov	r8,r23
  2098c8:	98034f1e 	bne	r19,zero,20a608 <___vfiprintf_internal_r+0x1474>
  2098cc:	00800874 	movhi	r2,33
  2098d0:	10904904 	addi	r2,r2,16676
  2098d4:	d8802615 	stw	r2,152(sp)
  2098d8:	8880080c 	andi	r2,r17,32
  2098dc:	1000ac26 	beq	r2,zero,209b90 <___vfiprintf_internal_r+0x9fc>
  2098e0:	d9002217 	ldw	r4,136(sp)
  2098e4:	24c00017 	ldw	r19,0(r4)
  2098e8:	25000117 	ldw	r20,4(r4)
  2098ec:	21000204 	addi	r4,r4,8
  2098f0:	d9002215 	stw	r4,136(sp)
  2098f4:	8880004c 	andi	r2,r17,1
  2098f8:	1001e726 	beq	r2,zero,20a098 <___vfiprintf_internal_r+0xf04>
  2098fc:	9d04b03a 	or	r2,r19,r20
  209900:	10025c1e 	bne	r2,zero,20a274 <___vfiprintf_internal_r+0x10e0>
  209904:	d8001d85 	stb	zero,118(sp)
  209908:	80024416 	blt	r16,zero,20a21c <___vfiprintf_internal_r+0x1088>
  20990c:	00bfdfc4 	movi	r2,-129
  209910:	88a2703a 	and	r17,r17,r2
  209914:	003f1d06 	br	20958c <_gp+0xffdf79a8>
  209918:	d8c02217 	ldw	r3,136(sp)
  20991c:	04c00044 	movi	r19,1
  209920:	b811883a 	mov	r8,r23
  209924:	18800017 	ldw	r2,0(r3)
  209928:	18c00104 	addi	r3,r3,4
  20992c:	d8001d85 	stb	zero,118(sp)
  209930:	d8801005 	stb	r2,64(sp)
  209934:	d8c02215 	stw	r3,136(sp)
  209938:	9829883a 	mov	r20,r19
  20993c:	ddc01004 	addi	r23,sp,64
  209940:	0021883a 	mov	r16,zero
  209944:	003f1e06 	br	2095c0 <_gp+0xffdf79dc>
  209948:	9cc03fcc 	andi	r19,r19,255
  20994c:	b811883a 	mov	r8,r23
  209950:	9803331e 	bne	r19,zero,20a620 <___vfiprintf_internal_r+0x148c>
  209954:	8880080c 	andi	r2,r17,32
  209958:	10004826 	beq	r2,zero,209a7c <___vfiprintf_internal_r+0x8e8>
  20995c:	d9002217 	ldw	r4,136(sp)
  209960:	20800117 	ldw	r2,4(r4)
  209964:	24c00017 	ldw	r19,0(r4)
  209968:	21000204 	addi	r4,r4,8
  20996c:	d9002215 	stw	r4,136(sp)
  209970:	1029883a 	mov	r20,r2
  209974:	10024c16 	blt	r2,zero,20a2a8 <___vfiprintf_internal_r+0x1114>
  209978:	dd401d83 	ldbu	r21,118(sp)
  20997c:	80007116 	blt	r16,zero,209b44 <___vfiprintf_internal_r+0x9b0>
  209980:	00ffdfc4 	movi	r3,-129
  209984:	9d04b03a 	or	r2,r19,r20
  209988:	88e2703a 	and	r17,r17,r3
  20998c:	1000d126 	beq	r2,zero,209cd4 <___vfiprintf_internal_r+0xb40>
  209990:	a0023526 	beq	r20,zero,20a268 <___vfiprintf_internal_r+0x10d4>
  209994:	ddc01a04 	addi	r23,sp,104
  209998:	4039883a 	mov	fp,r8
  20999c:	9809883a 	mov	r4,r19
  2099a0:	a00b883a 	mov	r5,r20
  2099a4:	01800284 	movi	r6,10
  2099a8:	000f883a 	mov	r7,zero
  2099ac:	020b6c00 	call	20b6c0 <__umoddi3>
  2099b0:	10800c04 	addi	r2,r2,48
  2099b4:	bdffffc4 	addi	r23,r23,-1
  2099b8:	9809883a 	mov	r4,r19
  2099bc:	a00b883a 	mov	r5,r20
  2099c0:	b8800005 	stb	r2,0(r23)
  2099c4:	01800284 	movi	r6,10
  2099c8:	000f883a 	mov	r7,zero
  2099cc:	020b0c40 	call	20b0c4 <__udivdi3>
  2099d0:	1027883a 	mov	r19,r2
  2099d4:	10c4b03a 	or	r2,r2,r3
  2099d8:	1829883a 	mov	r20,r3
  2099dc:	103fef1e 	bne	r2,zero,20999c <_gp+0xffdf7db8>
  2099e0:	d9001e17 	ldw	r4,120(sp)
  2099e4:	e011883a 	mov	r8,fp
  2099e8:	25e9c83a 	sub	r20,r4,r23
  2099ec:	003eec06 	br	2095a0 <_gp+0xffdf79bc>
  2099f0:	d8802307 	ldb	r2,140(sp)
  2099f4:	1002361e 	bne	r2,zero,20a2d0 <___vfiprintf_internal_r+0x113c>
  2099f8:	00c00804 	movi	r3,32
  2099fc:	d8c02305 	stb	r3,140(sp)
  209a00:	04c00044 	movi	r19,1
  209a04:	b0c00007 	ldb	r3,0(r22)
  209a08:	003e3f06 	br	209308 <_gp+0xffdf7724>
  209a0c:	8c400054 	ori	r17,r17,1
  209a10:	b0c00007 	ldb	r3,0(r22)
  209a14:	003e3c06 	br	209308 <_gp+0xffdf7724>
  209a18:	8c402014 	ori	r17,r17,128
  209a1c:	b0c00007 	ldb	r3,0(r22)
  209a20:	003e3906 	br	209308 <_gp+0xffdf7724>
  209a24:	dc002715 	stw	r16,156(sp)
  209a28:	d8002515 	stw	zero,148(sp)
  209a2c:	1f3ff404 	addi	fp,r3,-48
  209a30:	0009883a 	mov	r4,zero
  209a34:	b021883a 	mov	r16,r22
  209a38:	01400284 	movi	r5,10
  209a3c:	020179c0 	call	20179c <__mulsi3>
  209a40:	80c00007 	ldb	r3,0(r16)
  209a44:	e089883a 	add	r4,fp,r2
  209a48:	b5800044 	addi	r22,r22,1
  209a4c:	1f3ff404 	addi	fp,r3,-48
  209a50:	b021883a 	mov	r16,r22
  209a54:	af3ff82e 	bgeu	r21,fp,209a38 <_gp+0xffdf7e54>
  209a58:	d9002515 	stw	r4,148(sp)
  209a5c:	dc002717 	ldw	r16,156(sp)
  209a60:	003e2a06 	br	20930c <_gp+0xffdf7728>
  209a64:	9cc03fcc 	andi	r19,r19,255
  209a68:	b811883a 	mov	r8,r23
  209a6c:	9802e91e 	bne	r19,zero,20a614 <___vfiprintf_internal_r+0x1480>
  209a70:	8c400414 	ori	r17,r17,16
  209a74:	8880080c 	andi	r2,r17,32
  209a78:	103fb81e 	bne	r2,zero,20995c <_gp+0xffdf7d78>
  209a7c:	8880040c 	andi	r2,r17,16
  209a80:	10022e26 	beq	r2,zero,20a33c <___vfiprintf_internal_r+0x11a8>
  209a84:	d9402217 	ldw	r5,136(sp)
  209a88:	2cc00017 	ldw	r19,0(r5)
  209a8c:	29400104 	addi	r5,r5,4
  209a90:	d9402215 	stw	r5,136(sp)
  209a94:	9829d7fa 	srai	r20,r19,31
  209a98:	a005883a 	mov	r2,r20
  209a9c:	003fb506 	br	209974 <_gp+0xffdf7d90>
  209aa0:	9cc03fcc 	andi	r19,r19,255
  209aa4:	b811883a 	mov	r8,r23
  209aa8:	9802fa1e 	bne	r19,zero,20a694 <___vfiprintf_internal_r+0x1500>
  209aac:	8c400414 	ori	r17,r17,16
  209ab0:	8880080c 	andi	r2,r17,32
  209ab4:	103f661e 	bne	r2,zero,209850 <_gp+0xffdf7c6c>
  209ab8:	8880040c 	andi	r2,r17,16
  209abc:	10020626 	beq	r2,zero,20a2d8 <___vfiprintf_internal_r+0x1144>
  209ac0:	d9402217 	ldw	r5,136(sp)
  209ac4:	d8001d85 	stb	zero,118(sp)
  209ac8:	0029883a 	mov	r20,zero
  209acc:	28800104 	addi	r2,r5,4
  209ad0:	2cc00017 	ldw	r19,0(r5)
  209ad4:	80020816 	blt	r16,zero,20a2f8 <___vfiprintf_internal_r+0x1164>
  209ad8:	00ffdfc4 	movi	r3,-129
  209adc:	d8802215 	stw	r2,136(sp)
  209ae0:	88e2703a 	and	r17,r17,r3
  209ae4:	983f651e 	bne	r19,zero,20987c <_gp+0xffdf7c98>
  209ae8:	002b883a 	mov	r21,zero
  209aec:	8002cf26 	beq	r16,zero,20a62c <___vfiprintf_internal_r+0x1498>
  209af0:	0027883a 	mov	r19,zero
  209af4:	0029883a 	mov	r20,zero
  209af8:	003f6106 	br	209880 <_gp+0xffdf7c9c>
  209afc:	9cc03fcc 	andi	r19,r19,255
  209b00:	b811883a 	mov	r8,r23
  209b04:	9802e01e 	bne	r19,zero,20a688 <___vfiprintf_internal_r+0x14f4>
  209b08:	8c400414 	ori	r17,r17,16
  209b0c:	8880080c 	andi	r2,r17,32
  209b10:	1000641e 	bne	r2,zero,209ca4 <___vfiprintf_internal_r+0xb10>
  209b14:	8880040c 	andi	r2,r17,16
  209b18:	1001c81e 	bne	r2,zero,20a23c <___vfiprintf_internal_r+0x10a8>
  209b1c:	8880100c 	andi	r2,r17,64
  209b20:	d8001d85 	stb	zero,118(sp)
  209b24:	1002281e 	bne	r2,zero,20a3c8 <___vfiprintf_internal_r+0x1234>
  209b28:	d9002217 	ldw	r4,136(sp)
  209b2c:	0029883a 	mov	r20,zero
  209b30:	20800104 	addi	r2,r4,4
  209b34:	24c00017 	ldw	r19,0(r4)
  209b38:	8001c60e 	bge	r16,zero,20a254 <___vfiprintf_internal_r+0x10c0>
  209b3c:	d8802215 	stw	r2,136(sp)
  209b40:	002b883a 	mov	r21,zero
  209b44:	9d04b03a 	or	r2,r19,r20
  209b48:	103f911e 	bne	r2,zero,209990 <_gp+0xffdf7dac>
  209b4c:	00800044 	movi	r2,1
  209b50:	10803fcc 	andi	r2,r2,255
  209b54:	00c00044 	movi	r3,1
  209b58:	10c05f26 	beq	r2,r3,209cd8 <___vfiprintf_internal_r+0xb44>
  209b5c:	00c00084 	movi	r3,2
  209b60:	10ffe31e 	bne	r2,r3,209af0 <_gp+0xffdf7f0c>
  209b64:	0027883a 	mov	r19,zero
  209b68:	0029883a 	mov	r20,zero
  209b6c:	00015106 	br	20a0b4 <___vfiprintf_internal_r+0xf20>
  209b70:	9cc03fcc 	andi	r19,r19,255
  209b74:	b811883a 	mov	r8,r23
  209b78:	9802c01e 	bne	r19,zero,20a67c <___vfiprintf_internal_r+0x14e8>
  209b7c:	01400874 	movhi	r5,33
  209b80:	29504404 	addi	r5,r5,16656
  209b84:	d9402615 	stw	r5,152(sp)
  209b88:	8880080c 	andi	r2,r17,32
  209b8c:	103f541e 	bne	r2,zero,2098e0 <_gp+0xffdf7cfc>
  209b90:	8880040c 	andi	r2,r17,16
  209b94:	1001f226 	beq	r2,zero,20a360 <___vfiprintf_internal_r+0x11cc>
  209b98:	d9402217 	ldw	r5,136(sp)
  209b9c:	0029883a 	mov	r20,zero
  209ba0:	2cc00017 	ldw	r19,0(r5)
  209ba4:	29400104 	addi	r5,r5,4
  209ba8:	d9402215 	stw	r5,136(sp)
  209bac:	003f5106 	br	2098f4 <_gp+0xffdf7d10>
  209bb0:	d8c02217 	ldw	r3,136(sp)
  209bb4:	b811883a 	mov	r8,r23
  209bb8:	d8001d85 	stb	zero,118(sp)
  209bbc:	1dc00017 	ldw	r23,0(r3)
  209bc0:	1f000104 	addi	fp,r3,4
  209bc4:	b8025926 	beq	r23,zero,20a52c <___vfiprintf_internal_r+0x1398>
  209bc8:	80023316 	blt	r16,zero,20a498 <___vfiprintf_internal_r+0x1304>
  209bcc:	800d883a 	mov	r6,r16
  209bd0:	000b883a 	mov	r5,zero
  209bd4:	b809883a 	mov	r4,r23
  209bd8:	da002a15 	stw	r8,168(sp)
  209bdc:	02072d40 	call	2072d4 <memchr>
  209be0:	da002a17 	ldw	r8,168(sp)
  209be4:	10026826 	beq	r2,zero,20a588 <___vfiprintf_internal_r+0x13f4>
  209be8:	15e9c83a 	sub	r20,r2,r23
  209bec:	dd401d83 	ldbu	r21,118(sp)
  209bf0:	df002215 	stw	fp,136(sp)
  209bf4:	0021883a 	mov	r16,zero
  209bf8:	003e6906 	br	2095a0 <_gp+0xffdf79bc>
  209bfc:	9cc03fcc 	andi	r19,r19,255
  209c00:	b811883a 	mov	r8,r23
  209c04:	983fc126 	beq	r19,zero,209b0c <_gp+0xffdf7f28>
  209c08:	d8c02303 	ldbu	r3,140(sp)
  209c0c:	d8c01d85 	stb	r3,118(sp)
  209c10:	003fbe06 	br	209b0c <_gp+0xffdf7f28>
  209c14:	d9002217 	ldw	r4,136(sp)
  209c18:	d9402217 	ldw	r5,136(sp)
  209c1c:	21000017 	ldw	r4,0(r4)
  209c20:	28800104 	addi	r2,r5,4
  209c24:	d9002515 	stw	r4,148(sp)
  209c28:	203e3d16 	blt	r4,zero,209520 <_gp+0xffdf793c>
  209c2c:	d8802215 	stw	r2,136(sp)
  209c30:	b0c00007 	ldb	r3,0(r22)
  209c34:	003db406 	br	209308 <_gp+0xffdf7724>
  209c38:	00c00ac4 	movi	r3,43
  209c3c:	d8c02305 	stb	r3,140(sp)
  209c40:	04c00044 	movi	r19,1
  209c44:	b0c00007 	ldb	r3,0(r22)
  209c48:	003daf06 	br	209308 <_gp+0xffdf7724>
  209c4c:	b0c00007 	ldb	r3,0(r22)
  209c50:	01000a84 	movi	r4,42
  209c54:	b4000044 	addi	r16,r22,1
  209c58:	19025e26 	beq	r3,r4,20a5d4 <___vfiprintf_internal_r+0x1440>
  209c5c:	1f3ff404 	addi	fp,r3,-48
  209c60:	0009883a 	mov	r4,zero
  209c64:	af025236 	bltu	r21,fp,20a5b0 <___vfiprintf_internal_r+0x141c>
  209c68:	01400284 	movi	r5,10
  209c6c:	020179c0 	call	20179c <__mulsi3>
  209c70:	80c00007 	ldb	r3,0(r16)
  209c74:	1709883a 	add	r4,r2,fp
  209c78:	85800044 	addi	r22,r16,1
  209c7c:	1f3ff404 	addi	fp,r3,-48
  209c80:	b021883a 	mov	r16,r22
  209c84:	af3ff82e 	bgeu	r21,fp,209c68 <_gp+0xffdf8084>
  209c88:	2021883a 	mov	r16,r4
  209c8c:	203d9f0e 	bge	r4,zero,20930c <_gp+0xffdf7728>
  209c90:	043fffc4 	movi	r16,-1
  209c94:	003d9d06 	br	20930c <_gp+0xffdf7728>
  209c98:	8c401014 	ori	r17,r17,64
  209c9c:	b0c00007 	ldb	r3,0(r22)
  209ca0:	003d9906 	br	209308 <_gp+0xffdf7724>
  209ca4:	d9002217 	ldw	r4,136(sp)
  209ca8:	d8001d85 	stb	zero,118(sp)
  209cac:	20c00204 	addi	r3,r4,8
  209cb0:	24c00017 	ldw	r19,0(r4)
  209cb4:	25000117 	ldw	r20,4(r4)
  209cb8:	8001e716 	blt	r16,zero,20a458 <___vfiprintf_internal_r+0x12c4>
  209cbc:	013fdfc4 	movi	r4,-129
  209cc0:	9d04b03a 	or	r2,r19,r20
  209cc4:	d8c02215 	stw	r3,136(sp)
  209cc8:	8922703a 	and	r17,r17,r4
  209ccc:	002b883a 	mov	r21,zero
  209cd0:	103f2f1e 	bne	r2,zero,209990 <_gp+0xffdf7dac>
  209cd4:	803e2f26 	beq	r16,zero,209594 <_gp+0xffdf79b0>
  209cd8:	0027883a 	mov	r19,zero
  209cdc:	9cc00c04 	addi	r19,r19,48
  209ce0:	dcc019c5 	stb	r19,103(sp)
  209ce4:	dd002817 	ldw	r20,160(sp)
  209ce8:	ddc019c4 	addi	r23,sp,103
  209cec:	003e2c06 	br	2095a0 <_gp+0xffdf79bc>
  209cf0:	9cc03fcc 	andi	r19,r19,255
  209cf4:	b811883a 	mov	r8,r23
  209cf8:	9802571e 	bne	r19,zero,20a658 <___vfiprintf_internal_r+0x14c4>
  209cfc:	18005726 	beq	r3,zero,209e5c <___vfiprintf_internal_r+0xcc8>
  209d00:	04c00044 	movi	r19,1
  209d04:	d8c01005 	stb	r3,64(sp)
  209d08:	d8001d85 	stb	zero,118(sp)
  209d0c:	9829883a 	mov	r20,r19
  209d10:	ddc01004 	addi	r23,sp,64
  209d14:	003f0a06 	br	209940 <_gp+0xffdf7d5c>
  209d18:	d9402017 	ldw	r5,128(sp)
  209d1c:	d9002117 	ldw	r4,132(sp)
  209d20:	d9801a04 	addi	r6,sp,104
  209d24:	da802a15 	stw	r10,168(sp)
  209d28:	02090800 	call	209080 <__sprint_r.part.0>
  209d2c:	da802a17 	ldw	r10,168(sp)
  209d30:	1000501e 	bne	r2,zero,209e74 <___vfiprintf_internal_r+0xce0>
  209d34:	d9801b17 	ldw	r6,108(sp)
  209d38:	d8801c17 	ldw	r2,112(sp)
  209d3c:	d811883a 	mov	r8,sp
  209d40:	31000044 	addi	r4,r6,1
  209d44:	003e3606 	br	209620 <_gp+0xffdf7a3c>
  209d48:	d9001b17 	ldw	r4,108(sp)
  209d4c:	d8801c17 	ldw	r2,112(sp)
  209d50:	21400044 	addi	r5,r4,1
  209d54:	d9801d87 	ldb	r6,118(sp)
  209d58:	303e5226 	beq	r6,zero,2096a4 <_gp+0xffdf7ac0>
  209d5c:	01800044 	movi	r6,1
  209d60:	d9001d84 	addi	r4,sp,118
  209d64:	1185883a 	add	r2,r2,r6
  209d68:	41000015 	stw	r4,0(r8)
  209d6c:	41800115 	stw	r6,4(r8)
  209d70:	d8801c15 	stw	r2,112(sp)
  209d74:	d9401b15 	stw	r5,108(sp)
  209d78:	010001c4 	movi	r4,7
  209d7c:	2140b00e 	bge	r4,r5,20a040 <___vfiprintf_internal_r+0xeac>
  209d80:	1000f61e 	bne	r2,zero,20a15c <___vfiprintf_internal_r+0xfc8>
  209d84:	3800b31e 	bne	r7,zero,20a054 <___vfiprintf_internal_r+0xec0>
  209d88:	0009883a 	mov	r4,zero
  209d8c:	300b883a 	mov	r5,r6
  209d90:	d811883a 	mov	r8,sp
  209d94:	01802004 	movi	r6,128
  209d98:	19be5226 	beq	r3,r6,2096e4 <_gp+0xffdf7b00>
  209d9c:	8521c83a 	sub	r16,r16,r20
  209da0:	043e790e 	bge	zero,r16,209788 <_gp+0xffdf7ba4>
  209da4:	05400404 	movi	r21,16
  209da8:	ac01b00e 	bge	r21,r16,20a46c <___vfiprintf_internal_r+0x12d8>
  209dac:	01400874 	movhi	r5,33
  209db0:	2950aa04 	addi	r5,r5,17064
  209db4:	d9402315 	stw	r5,140(sp)
  209db8:	070001c4 	movi	fp,7
  209dbc:	00000506 	br	209dd4 <___vfiprintf_internal_r+0xc40>
  209dc0:	21400084 	addi	r5,r4,2
  209dc4:	42000204 	addi	r8,r8,8
  209dc8:	1809883a 	mov	r4,r3
  209dcc:	843ffc04 	addi	r16,r16,-16
  209dd0:	ac000d0e 	bge	r21,r16,209e08 <___vfiprintf_internal_r+0xc74>
  209dd4:	10800404 	addi	r2,r2,16
  209dd8:	20c00044 	addi	r3,r4,1
  209ddc:	44800015 	stw	r18,0(r8)
  209de0:	45400115 	stw	r21,4(r8)
  209de4:	d8801c15 	stw	r2,112(sp)
  209de8:	d8c01b15 	stw	r3,108(sp)
  209dec:	e0fff40e 	bge	fp,r3,209dc0 <_gp+0xffdf81dc>
  209df0:	1000101e 	bne	r2,zero,209e34 <___vfiprintf_internal_r+0xca0>
  209df4:	843ffc04 	addi	r16,r16,-16
  209df8:	01400044 	movi	r5,1
  209dfc:	0009883a 	mov	r4,zero
  209e00:	d811883a 	mov	r8,sp
  209e04:	ac3ff316 	blt	r21,r16,209dd4 <_gp+0xffdf81f0>
  209e08:	d8c02317 	ldw	r3,140(sp)
  209e0c:	1405883a 	add	r2,r2,r16
  209e10:	44000115 	stw	r16,4(r8)
  209e14:	40c00015 	stw	r3,0(r8)
  209e18:	d8801c15 	stw	r2,112(sp)
  209e1c:	d9401b15 	stw	r5,108(sp)
  209e20:	00c001c4 	movi	r3,7
  209e24:	19401916 	blt	r3,r5,209e8c <___vfiprintf_internal_r+0xcf8>
  209e28:	42000204 	addi	r8,r8,8
  209e2c:	29400044 	addi	r5,r5,1
  209e30:	003e5506 	br	209788 <_gp+0xffdf7ba4>
  209e34:	d9402017 	ldw	r5,128(sp)
  209e38:	d9002117 	ldw	r4,132(sp)
  209e3c:	d9801a04 	addi	r6,sp,104
  209e40:	02090800 	call	209080 <__sprint_r.part.0>
  209e44:	10000b1e 	bne	r2,zero,209e74 <___vfiprintf_internal_r+0xce0>
  209e48:	d9001b17 	ldw	r4,108(sp)
  209e4c:	d8801c17 	ldw	r2,112(sp)
  209e50:	d811883a 	mov	r8,sp
  209e54:	21400044 	addi	r5,r4,1
  209e58:	003fdc06 	br	209dcc <_gp+0xffdf81e8>
  209e5c:	d8801c17 	ldw	r2,112(sp)
  209e60:	10000426 	beq	r2,zero,209e74 <___vfiprintf_internal_r+0xce0>
  209e64:	d9402017 	ldw	r5,128(sp)
  209e68:	d9002117 	ldw	r4,132(sp)
  209e6c:	d9801a04 	addi	r6,sp,104
  209e70:	02090800 	call	209080 <__sprint_r.part.0>
  209e74:	d9402017 	ldw	r5,128(sp)
  209e78:	2880030b 	ldhu	r2,12(r5)
  209e7c:	1080100c 	andi	r2,r2,64
  209e80:	10014d1e 	bne	r2,zero,20a3b8 <___vfiprintf_internal_r+0x1224>
  209e84:	d8802417 	ldw	r2,144(sp)
  209e88:	003d9706 	br	2094e8 <_gp+0xffdf7904>
  209e8c:	1000d21e 	bne	r2,zero,20a1d8 <___vfiprintf_internal_r+0x1044>
  209e90:	00c00044 	movi	r3,1
  209e94:	a005883a 	mov	r2,r20
  209e98:	ddc00015 	stw	r23,0(sp)
  209e9c:	dd000115 	stw	r20,4(sp)
  209ea0:	dd001c15 	stw	r20,112(sp)
  209ea4:	d8c01b15 	stw	r3,108(sp)
  209ea8:	d811883a 	mov	r8,sp
  209eac:	42000204 	addi	r8,r8,8
  209eb0:	8c40010c 	andi	r17,r17,4
  209eb4:	88004026 	beq	r17,zero,209fb8 <___vfiprintf_internal_r+0xe24>
  209eb8:	d9002517 	ldw	r4,148(sp)
  209ebc:	24e3c83a 	sub	r17,r4,r19
  209ec0:	04403d0e 	bge	zero,r17,209fb8 <___vfiprintf_internal_r+0xe24>
  209ec4:	04000404 	movi	r16,16
  209ec8:	8441a90e 	bge	r16,r17,20a570 <___vfiprintf_internal_r+0x13dc>
  209ecc:	00c00874 	movhi	r3,33
  209ed0:	18d0ae04 	addi	r3,r3,17080
  209ed4:	d9001b17 	ldw	r4,108(sp)
  209ed8:	d8c02315 	stw	r3,140(sp)
  209edc:	050001c4 	movi	r20,7
  209ee0:	dd402117 	ldw	r21,132(sp)
  209ee4:	ddc02017 	ldw	r23,128(sp)
  209ee8:	00000506 	br	209f00 <___vfiprintf_internal_r+0xd6c>
  209eec:	21400084 	addi	r5,r4,2
  209ef0:	42000204 	addi	r8,r8,8
  209ef4:	1809883a 	mov	r4,r3
  209ef8:	8c7ffc04 	addi	r17,r17,-16
  209efc:	84400f0e 	bge	r16,r17,209f3c <___vfiprintf_internal_r+0xda8>
  209f00:	01400874 	movhi	r5,33
  209f04:	10800404 	addi	r2,r2,16
  209f08:	20c00044 	addi	r3,r4,1
  209f0c:	2950ae04 	addi	r5,r5,17080
  209f10:	41400015 	stw	r5,0(r8)
  209f14:	44000115 	stw	r16,4(r8)
  209f18:	d8801c15 	stw	r2,112(sp)
  209f1c:	d8c01b15 	stw	r3,108(sp)
  209f20:	a0fff20e 	bge	r20,r3,209eec <_gp+0xffdf8308>
  209f24:	1000141e 	bne	r2,zero,209f78 <___vfiprintf_internal_r+0xde4>
  209f28:	8c7ffc04 	addi	r17,r17,-16
  209f2c:	01400044 	movi	r5,1
  209f30:	0009883a 	mov	r4,zero
  209f34:	d811883a 	mov	r8,sp
  209f38:	847ff116 	blt	r16,r17,209f00 <_gp+0xffdf831c>
  209f3c:	d8c02317 	ldw	r3,140(sp)
  209f40:	1445883a 	add	r2,r2,r17
  209f44:	44400115 	stw	r17,4(r8)
  209f48:	40c00015 	stw	r3,0(r8)
  209f4c:	d8801c15 	stw	r2,112(sp)
  209f50:	d9401b15 	stw	r5,108(sp)
  209f54:	00c001c4 	movi	r3,7
  209f58:	1940170e 	bge	r3,r5,209fb8 <___vfiprintf_internal_r+0xe24>
  209f5c:	1000101e 	bne	r2,zero,209fa0 <___vfiprintf_internal_r+0xe0c>
  209f60:	d8802517 	ldw	r2,148(sp)
  209f64:	14c11616 	blt	r2,r19,20a3c0 <___vfiprintf_internal_r+0x122c>
  209f68:	d9002417 	ldw	r4,144(sp)
  209f6c:	2089883a 	add	r4,r4,r2
  209f70:	d9002415 	stw	r4,144(sp)
  209f74:	003e1806 	br	2097d8 <_gp+0xffdf7bf4>
  209f78:	d9801a04 	addi	r6,sp,104
  209f7c:	b80b883a 	mov	r5,r23
  209f80:	a809883a 	mov	r4,r21
  209f84:	02090800 	call	209080 <__sprint_r.part.0>
  209f88:	103fba1e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  209f8c:	d9001b17 	ldw	r4,108(sp)
  209f90:	d8801c17 	ldw	r2,112(sp)
  209f94:	d811883a 	mov	r8,sp
  209f98:	21400044 	addi	r5,r4,1
  209f9c:	003fd606 	br	209ef8 <_gp+0xffdf8314>
  209fa0:	d9402017 	ldw	r5,128(sp)
  209fa4:	d9002117 	ldw	r4,132(sp)
  209fa8:	d9801a04 	addi	r6,sp,104
  209fac:	02090800 	call	209080 <__sprint_r.part.0>
  209fb0:	103fb01e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  209fb4:	d8801c17 	ldw	r2,112(sp)
  209fb8:	d8c02517 	ldw	r3,148(sp)
  209fbc:	1cc0010e 	bge	r3,r19,209fc4 <___vfiprintf_internal_r+0xe30>
  209fc0:	9807883a 	mov	r3,r19
  209fc4:	d9002417 	ldw	r4,144(sp)
  209fc8:	20c9883a 	add	r4,r4,r3
  209fcc:	d9002415 	stw	r4,144(sp)
  209fd0:	103e0126 	beq	r2,zero,2097d8 <_gp+0xffdf7bf4>
  209fd4:	d9402017 	ldw	r5,128(sp)
  209fd8:	d9002117 	ldw	r4,132(sp)
  209fdc:	d9801a04 	addi	r6,sp,104
  209fe0:	02090800 	call	209080 <__sprint_r.part.0>
  209fe4:	103dfc26 	beq	r2,zero,2097d8 <_gp+0xffdf7bf4>
  209fe8:	003fa206 	br	209e74 <_gp+0xffdf8290>
  209fec:	d9402017 	ldw	r5,128(sp)
  209ff0:	d9002117 	ldw	r4,132(sp)
  209ff4:	d9801a04 	addi	r6,sp,104
  209ff8:	d9c02b15 	stw	r7,172(sp)
  209ffc:	02090800 	call	209080 <__sprint_r.part.0>
  20a000:	d9c02b17 	ldw	r7,172(sp)
  20a004:	103f9b1e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a008:	d9001b17 	ldw	r4,108(sp)
  20a00c:	d8801c17 	ldw	r2,112(sp)
  20a010:	d811883a 	mov	r8,sp
  20a014:	21800044 	addi	r6,r4,1
  20a018:	003dbf06 	br	209718 <_gp+0xffdf7b34>
  20a01c:	1000d81e 	bne	r2,zero,20a380 <___vfiprintf_internal_r+0x11ec>
  20a020:	d9001d87 	ldb	r4,118(sp)
  20a024:	20000a26 	beq	r4,zero,20a050 <___vfiprintf_internal_r+0xebc>
  20a028:	00800044 	movi	r2,1
  20a02c:	d9001d84 	addi	r4,sp,118
  20a030:	100b883a 	mov	r5,r2
  20a034:	d9000015 	stw	r4,0(sp)
  20a038:	d8800115 	stw	r2,4(sp)
  20a03c:	d811883a 	mov	r8,sp
  20a040:	2809883a 	mov	r4,r5
  20a044:	42000204 	addi	r8,r8,8
  20a048:	29400044 	addi	r5,r5,1
  20a04c:	003d9506 	br	2096a4 <_gp+0xffdf7ac0>
  20a050:	3800fd26 	beq	r7,zero,20a448 <___vfiprintf_internal_r+0x12b4>
  20a054:	00800084 	movi	r2,2
  20a058:	d9001d04 	addi	r4,sp,116
  20a05c:	d9000015 	stw	r4,0(sp)
  20a060:	d8800115 	stw	r2,4(sp)
  20a064:	01400044 	movi	r5,1
  20a068:	d811883a 	mov	r8,sp
  20a06c:	2809883a 	mov	r4,r5
  20a070:	42000204 	addi	r8,r8,8
  20a074:	29400044 	addi	r5,r5,1
  20a078:	003f4606 	br	209d94 <_gp+0xffdf81b0>
  20a07c:	d8802517 	ldw	r2,148(sp)
  20a080:	14c0010e 	bge	r2,r19,20a088 <___vfiprintf_internal_r+0xef4>
  20a084:	9805883a 	mov	r2,r19
  20a088:	d9402417 	ldw	r5,144(sp)
  20a08c:	288b883a 	add	r5,r5,r2
  20a090:	d9402415 	stw	r5,144(sp)
  20a094:	003dd006 	br	2097d8 <_gp+0xffdf7bf4>
  20a098:	d8001d85 	stb	zero,118(sp)
  20a09c:	80005d16 	blt	r16,zero,20a214 <___vfiprintf_internal_r+0x1080>
  20a0a0:	00ffdfc4 	movi	r3,-129
  20a0a4:	9d04b03a 	or	r2,r19,r20
  20a0a8:	88e2703a 	and	r17,r17,r3
  20a0ac:	103d3726 	beq	r2,zero,20958c <_gp+0xffdf79a8>
  20a0b0:	002b883a 	mov	r21,zero
  20a0b4:	d9002617 	ldw	r4,152(sp)
  20a0b8:	ddc01a04 	addi	r23,sp,104
  20a0bc:	988003cc 	andi	r2,r19,15
  20a0c0:	a006973a 	slli	r3,r20,28
  20a0c4:	2085883a 	add	r2,r4,r2
  20a0c8:	9826d13a 	srli	r19,r19,4
  20a0cc:	10800003 	ldbu	r2,0(r2)
  20a0d0:	a028d13a 	srli	r20,r20,4
  20a0d4:	bdffffc4 	addi	r23,r23,-1
  20a0d8:	1ce6b03a 	or	r19,r3,r19
  20a0dc:	b8800005 	stb	r2,0(r23)
  20a0e0:	9d04b03a 	or	r2,r19,r20
  20a0e4:	103ff51e 	bne	r2,zero,20a0bc <_gp+0xffdf84d8>
  20a0e8:	d8801e17 	ldw	r2,120(sp)
  20a0ec:	15e9c83a 	sub	r20,r2,r23
  20a0f0:	003d2b06 	br	2095a0 <_gp+0xffdf79bc>
  20a0f4:	d9402017 	ldw	r5,128(sp)
  20a0f8:	d9002117 	ldw	r4,132(sp)
  20a0fc:	d9801a04 	addi	r6,sp,104
  20a100:	02090800 	call	209080 <__sprint_r.part.0>
  20a104:	103f5b1e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a108:	d8801c17 	ldw	r2,112(sp)
  20a10c:	d811883a 	mov	r8,sp
  20a110:	003f6706 	br	209eb0 <_gp+0xffdf82cc>
  20a114:	d9402017 	ldw	r5,128(sp)
  20a118:	d9002117 	ldw	r4,132(sp)
  20a11c:	d9801a04 	addi	r6,sp,104
  20a120:	02090800 	call	209080 <__sprint_r.part.0>
  20a124:	103f531e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a128:	d811883a 	mov	r8,sp
  20a12c:	003cd906 	br	209494 <_gp+0xffdf78b0>
  20a130:	10803fcc 	andi	r2,r2,255
  20a134:	1080201c 	xori	r2,r2,128
  20a138:	10bfe004 	addi	r2,r2,-128
  20a13c:	00c00c04 	movi	r3,48
  20a140:	10ffe926 	beq	r2,r3,20a0e8 <_gp+0xffdf8504>
  20a144:	b8ffffc5 	stb	r3,-1(r23)
  20a148:	d8c01e17 	ldw	r3,120(sp)
  20a14c:	b8bfffc4 	addi	r2,r23,-1
  20a150:	102f883a 	mov	r23,r2
  20a154:	18a9c83a 	sub	r20,r3,r2
  20a158:	003d1106 	br	2095a0 <_gp+0xffdf79bc>
  20a15c:	d9402017 	ldw	r5,128(sp)
  20a160:	d9002117 	ldw	r4,132(sp)
  20a164:	d9801a04 	addi	r6,sp,104
  20a168:	d8c02a15 	stw	r3,168(sp)
  20a16c:	d9c02b15 	stw	r7,172(sp)
  20a170:	02090800 	call	209080 <__sprint_r.part.0>
  20a174:	d8c02a17 	ldw	r3,168(sp)
  20a178:	d9c02b17 	ldw	r7,172(sp)
  20a17c:	103f3d1e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a180:	d9001b17 	ldw	r4,108(sp)
  20a184:	d8801c17 	ldw	r2,112(sp)
  20a188:	d811883a 	mov	r8,sp
  20a18c:	21400044 	addi	r5,r4,1
  20a190:	003d4406 	br	2096a4 <_gp+0xffdf7ac0>
  20a194:	d9402017 	ldw	r5,128(sp)
  20a198:	d9002117 	ldw	r4,132(sp)
  20a19c:	d9801a04 	addi	r6,sp,104
  20a1a0:	d8c02a15 	stw	r3,168(sp)
  20a1a4:	02090800 	call	209080 <__sprint_r.part.0>
  20a1a8:	d8c02a17 	ldw	r3,168(sp)
  20a1ac:	103f311e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a1b0:	d9001b17 	ldw	r4,108(sp)
  20a1b4:	d8801c17 	ldw	r2,112(sp)
  20a1b8:	d811883a 	mov	r8,sp
  20a1bc:	21400044 	addi	r5,r4,1
  20a1c0:	003ef406 	br	209d94 <_gp+0xffdf81b0>
  20a1c4:	1000bd1e 	bne	r2,zero,20a4bc <___vfiprintf_internal_r+0x1328>
  20a1c8:	01400044 	movi	r5,1
  20a1cc:	0009883a 	mov	r4,zero
  20a1d0:	d811883a 	mov	r8,sp
  20a1d4:	003ef106 	br	209d9c <_gp+0xffdf81b8>
  20a1d8:	d9402017 	ldw	r5,128(sp)
  20a1dc:	d9002117 	ldw	r4,132(sp)
  20a1e0:	d9801a04 	addi	r6,sp,104
  20a1e4:	02090800 	call	209080 <__sprint_r.part.0>
  20a1e8:	103f221e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a1ec:	d9401b17 	ldw	r5,108(sp)
  20a1f0:	d8801c17 	ldw	r2,112(sp)
  20a1f4:	d811883a 	mov	r8,sp
  20a1f8:	29400044 	addi	r5,r5,1
  20a1fc:	003d6206 	br	209788 <_gp+0xffdf7ba4>
  20a200:	01400874 	movhi	r5,33
  20a204:	29504904 	addi	r5,r5,16676
  20a208:	d9402615 	stw	r5,152(sp)
  20a20c:	d8c02215 	stw	r3,136(sp)
  20a210:	1023883a 	mov	r17,r2
  20a214:	9d04b03a 	or	r2,r19,r20
  20a218:	103fa51e 	bne	r2,zero,20a0b0 <_gp+0xffdf84cc>
  20a21c:	002b883a 	mov	r21,zero
  20a220:	00800084 	movi	r2,2
  20a224:	003e4a06 	br	209b50 <_gp+0xffdf7f6c>
  20a228:	01400874 	movhi	r5,33
  20a22c:	29504904 	addi	r5,r5,16676
  20a230:	002b883a 	mov	r21,zero
  20a234:	d9402615 	stw	r5,152(sp)
  20a238:	003f9e06 	br	20a0b4 <_gp+0xffdf84d0>
  20a23c:	d9402217 	ldw	r5,136(sp)
  20a240:	d8001d85 	stb	zero,118(sp)
  20a244:	0029883a 	mov	r20,zero
  20a248:	28800104 	addi	r2,r5,4
  20a24c:	2cc00017 	ldw	r19,0(r5)
  20a250:	803e3a16 	blt	r16,zero,209b3c <_gp+0xffdf7f58>
  20a254:	00ffdfc4 	movi	r3,-129
  20a258:	d8802215 	stw	r2,136(sp)
  20a25c:	88e2703a 	and	r17,r17,r3
  20a260:	002b883a 	mov	r21,zero
  20a264:	983e9b26 	beq	r19,zero,209cd4 <_gp+0xffdf80f0>
  20a268:	00800244 	movi	r2,9
  20a26c:	14fdc936 	bltu	r2,r19,209994 <_gp+0xffdf7db0>
  20a270:	003e9a06 	br	209cdc <_gp+0xffdf80f8>
  20a274:	00800c04 	movi	r2,48
  20a278:	d8c01d45 	stb	r3,117(sp)
  20a27c:	d8801d05 	stb	r2,116(sp)
  20a280:	d8001d85 	stb	zero,118(sp)
  20a284:	88c00094 	ori	r3,r17,2
  20a288:	80009c16 	blt	r16,zero,20a4fc <___vfiprintf_internal_r+0x1368>
  20a28c:	00bfdfc4 	movi	r2,-129
  20a290:	88a2703a 	and	r17,r17,r2
  20a294:	8c400094 	ori	r17,r17,2
  20a298:	002b883a 	mov	r21,zero
  20a29c:	003f8506 	br	20a0b4 <_gp+0xffdf84d0>
  20a2a0:	b029883a 	mov	r20,r22
  20a2a4:	003c0b06 	br	2092d4 <_gp+0xffdf76f0>
  20a2a8:	04e7c83a 	sub	r19,zero,r19
  20a2ac:	05400b44 	movi	r21,45
  20a2b0:	9804c03a 	cmpne	r2,r19,zero
  20a2b4:	0529c83a 	sub	r20,zero,r20
  20a2b8:	dd401d85 	stb	r21,118(sp)
  20a2bc:	a0a9c83a 	sub	r20,r20,r2
  20a2c0:	80009716 	blt	r16,zero,20a520 <___vfiprintf_internal_r+0x138c>
  20a2c4:	00bfdfc4 	movi	r2,-129
  20a2c8:	88a2703a 	and	r17,r17,r2
  20a2cc:	003db006 	br	209990 <_gp+0xffdf7dac>
  20a2d0:	b0c00007 	ldb	r3,0(r22)
  20a2d4:	003c0c06 	br	209308 <_gp+0xffdf7724>
  20a2d8:	8880100c 	andi	r2,r17,64
  20a2dc:	d8001d85 	stb	zero,118(sp)
  20a2e0:	1000461e 	bne	r2,zero,20a3fc <___vfiprintf_internal_r+0x1268>
  20a2e4:	d9002217 	ldw	r4,136(sp)
  20a2e8:	0029883a 	mov	r20,zero
  20a2ec:	20800104 	addi	r2,r4,4
  20a2f0:	24c00017 	ldw	r19,0(r4)
  20a2f4:	803df80e 	bge	r16,zero,209ad8 <_gp+0xffdf7ef4>
  20a2f8:	9d06b03a 	or	r3,r19,r20
  20a2fc:	d8802215 	stw	r2,136(sp)
  20a300:	183d5e1e 	bne	r3,zero,20987c <_gp+0xffdf7c98>
  20a304:	002b883a 	mov	r21,zero
  20a308:	0005883a 	mov	r2,zero
  20a30c:	003e1006 	br	209b50 <_gp+0xffdf7f6c>
  20a310:	8880040c 	andi	r2,r17,16
  20a314:	1000321e 	bne	r2,zero,20a3e0 <___vfiprintf_internal_r+0x124c>
  20a318:	8c40100c 	andi	r17,r17,64
  20a31c:	88008d26 	beq	r17,zero,20a554 <___vfiprintf_internal_r+0x13c0>
  20a320:	d9402217 	ldw	r5,136(sp)
  20a324:	d8c02417 	ldw	r3,144(sp)
  20a328:	28800017 	ldw	r2,0(r5)
  20a32c:	29400104 	addi	r5,r5,4
  20a330:	d9402215 	stw	r5,136(sp)
  20a334:	10c0000d 	sth	r3,0(r2)
  20a338:	003bca06 	br	209264 <_gp+0xffdf7680>
  20a33c:	8880100c 	andi	r2,r17,64
  20a340:	10003a26 	beq	r2,zero,20a42c <___vfiprintf_internal_r+0x1298>
  20a344:	d8802217 	ldw	r2,136(sp)
  20a348:	14c0000f 	ldh	r19,0(r2)
  20a34c:	10800104 	addi	r2,r2,4
  20a350:	d8802215 	stw	r2,136(sp)
  20a354:	9829d7fa 	srai	r20,r19,31
  20a358:	a005883a 	mov	r2,r20
  20a35c:	003d8506 	br	209974 <_gp+0xffdf7d90>
  20a360:	8880100c 	andi	r2,r17,64
  20a364:	10002b26 	beq	r2,zero,20a414 <___vfiprintf_internal_r+0x1280>
  20a368:	d8802217 	ldw	r2,136(sp)
  20a36c:	0029883a 	mov	r20,zero
  20a370:	14c0000b 	ldhu	r19,0(r2)
  20a374:	10800104 	addi	r2,r2,4
  20a378:	d8802215 	stw	r2,136(sp)
  20a37c:	003d5d06 	br	2098f4 <_gp+0xffdf7d10>
  20a380:	d9402017 	ldw	r5,128(sp)
  20a384:	d9002117 	ldw	r4,132(sp)
  20a388:	d9801a04 	addi	r6,sp,104
  20a38c:	d8c02a15 	stw	r3,168(sp)
  20a390:	d9c02b15 	stw	r7,172(sp)
  20a394:	02090800 	call	209080 <__sprint_r.part.0>
  20a398:	d8c02a17 	ldw	r3,168(sp)
  20a39c:	d9c02b17 	ldw	r7,172(sp)
  20a3a0:	103eb41e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a3a4:	d9001b17 	ldw	r4,108(sp)
  20a3a8:	d8801c17 	ldw	r2,112(sp)
  20a3ac:	d811883a 	mov	r8,sp
  20a3b0:	21400044 	addi	r5,r4,1
  20a3b4:	003e6706 	br	209d54 <_gp+0xffdf8170>
  20a3b8:	00bfffc4 	movi	r2,-1
  20a3bc:	003c4a06 	br	2094e8 <_gp+0xffdf7904>
  20a3c0:	9805883a 	mov	r2,r19
  20a3c4:	003ee806 	br	209f68 <_gp+0xffdf8384>
  20a3c8:	d8c02217 	ldw	r3,136(sp)
  20a3cc:	0029883a 	mov	r20,zero
  20a3d0:	18800104 	addi	r2,r3,4
  20a3d4:	1cc0000b 	ldhu	r19,0(r3)
  20a3d8:	803f9e0e 	bge	r16,zero,20a254 <_gp+0xffdf8670>
  20a3dc:	003dd706 	br	209b3c <_gp+0xffdf7f58>
  20a3e0:	d8c02217 	ldw	r3,136(sp)
  20a3e4:	d9002417 	ldw	r4,144(sp)
  20a3e8:	18800017 	ldw	r2,0(r3)
  20a3ec:	18c00104 	addi	r3,r3,4
  20a3f0:	d8c02215 	stw	r3,136(sp)
  20a3f4:	11000015 	stw	r4,0(r2)
  20a3f8:	003b9a06 	br	209264 <_gp+0xffdf7680>
  20a3fc:	d8c02217 	ldw	r3,136(sp)
  20a400:	0029883a 	mov	r20,zero
  20a404:	18800104 	addi	r2,r3,4
  20a408:	1cc0000b 	ldhu	r19,0(r3)
  20a40c:	803db20e 	bge	r16,zero,209ad8 <_gp+0xffdf7ef4>
  20a410:	003fb906 	br	20a2f8 <_gp+0xffdf8714>
  20a414:	d9002217 	ldw	r4,136(sp)
  20a418:	0029883a 	mov	r20,zero
  20a41c:	24c00017 	ldw	r19,0(r4)
  20a420:	21000104 	addi	r4,r4,4
  20a424:	d9002215 	stw	r4,136(sp)
  20a428:	003d3206 	br	2098f4 <_gp+0xffdf7d10>
  20a42c:	d8c02217 	ldw	r3,136(sp)
  20a430:	1cc00017 	ldw	r19,0(r3)
  20a434:	18c00104 	addi	r3,r3,4
  20a438:	d8c02215 	stw	r3,136(sp)
  20a43c:	9829d7fa 	srai	r20,r19,31
  20a440:	a005883a 	mov	r2,r20
  20a444:	003d4b06 	br	209974 <_gp+0xffdf7d90>
  20a448:	0009883a 	mov	r4,zero
  20a44c:	01400044 	movi	r5,1
  20a450:	d811883a 	mov	r8,sp
  20a454:	003e4f06 	br	209d94 <_gp+0xffdf81b0>
  20a458:	d8c02215 	stw	r3,136(sp)
  20a45c:	002b883a 	mov	r21,zero
  20a460:	003db806 	br	209b44 <_gp+0xffdf7f60>
  20a464:	d811883a 	mov	r8,sp
  20a468:	003e9606 	br	209ec4 <_gp+0xffdf82e0>
  20a46c:	01000874 	movhi	r4,33
  20a470:	2110aa04 	addi	r4,r4,17064
  20a474:	d9002315 	stw	r4,140(sp)
  20a478:	003e6306 	br	209e08 <_gp+0xffdf8224>
  20a47c:	b0c00043 	ldbu	r3,1(r22)
  20a480:	8c400814 	ori	r17,r17,32
  20a484:	b5800044 	addi	r22,r22,1
  20a488:	18c03fcc 	andi	r3,r3,255
  20a48c:	18c0201c 	xori	r3,r3,128
  20a490:	18ffe004 	addi	r3,r3,-128
  20a494:	003b9c06 	br	209308 <_gp+0xffdf7724>
  20a498:	b809883a 	mov	r4,r23
  20a49c:	da002a15 	stw	r8,168(sp)
  20a4a0:	02019040 	call	201904 <strlen>
  20a4a4:	1029883a 	mov	r20,r2
  20a4a8:	dd401d83 	ldbu	r21,118(sp)
  20a4ac:	df002215 	stw	fp,136(sp)
  20a4b0:	0021883a 	mov	r16,zero
  20a4b4:	da002a17 	ldw	r8,168(sp)
  20a4b8:	003c3906 	br	2095a0 <_gp+0xffdf79bc>
  20a4bc:	d9402017 	ldw	r5,128(sp)
  20a4c0:	d9002117 	ldw	r4,132(sp)
  20a4c4:	d9801a04 	addi	r6,sp,104
  20a4c8:	02090800 	call	209080 <__sprint_r.part.0>
  20a4cc:	103e691e 	bne	r2,zero,209e74 <_gp+0xffdf8290>
  20a4d0:	d9001b17 	ldw	r4,108(sp)
  20a4d4:	d8801c17 	ldw	r2,112(sp)
  20a4d8:	d811883a 	mov	r8,sp
  20a4dc:	21400044 	addi	r5,r4,1
  20a4e0:	003e2e06 	br	209d9c <_gp+0xffdf81b8>
  20a4e4:	01000874 	movhi	r4,33
  20a4e8:	2110ae04 	addi	r4,r4,17080
  20a4ec:	d9002315 	stw	r4,140(sp)
  20a4f0:	d9001b17 	ldw	r4,108(sp)
  20a4f4:	21000044 	addi	r4,r4,1
  20a4f8:	003c5e06 	br	209674 <_gp+0xffdf7a90>
  20a4fc:	002b883a 	mov	r21,zero
  20a500:	00800084 	movi	r2,2
  20a504:	10803fcc 	andi	r2,r2,255
  20a508:	01000044 	movi	r4,1
  20a50c:	11002b26 	beq	r2,r4,20a5bc <___vfiprintf_internal_r+0x1428>
  20a510:	01000084 	movi	r4,2
  20a514:	11002b1e 	bne	r2,r4,20a5c4 <___vfiprintf_internal_r+0x1430>
  20a518:	1823883a 	mov	r17,r3
  20a51c:	003ee506 	br	20a0b4 <_gp+0xffdf84d0>
  20a520:	8807883a 	mov	r3,r17
  20a524:	00800044 	movi	r2,1
  20a528:	003ff606 	br	20a504 <_gp+0xffdf8920>
  20a52c:	00800184 	movi	r2,6
  20a530:	1400012e 	bgeu	r2,r16,20a538 <___vfiprintf_internal_r+0x13a4>
  20a534:	1021883a 	mov	r16,r2
  20a538:	8029883a 	mov	r20,r16
  20a53c:	8027883a 	mov	r19,r16
  20a540:	80002216 	blt	r16,zero,20a5cc <___vfiprintf_internal_r+0x1438>
  20a544:	05c00874 	movhi	r23,33
  20a548:	df002215 	stw	fp,136(sp)
  20a54c:	bdd04e04 	addi	r23,r23,16696
  20a550:	003cfb06 	br	209940 <_gp+0xffdf7d5c>
  20a554:	d9002217 	ldw	r4,136(sp)
  20a558:	d9402417 	ldw	r5,144(sp)
  20a55c:	20800017 	ldw	r2,0(r4)
  20a560:	21000104 	addi	r4,r4,4
  20a564:	d9002215 	stw	r4,136(sp)
  20a568:	11400015 	stw	r5,0(r2)
  20a56c:	003b3d06 	br	209264 <_gp+0xffdf7680>
  20a570:	01400874 	movhi	r5,33
  20a574:	2950ae04 	addi	r5,r5,17080
  20a578:	d9402315 	stw	r5,140(sp)
  20a57c:	d9401b17 	ldw	r5,108(sp)
  20a580:	29400044 	addi	r5,r5,1
  20a584:	003e6d06 	br	209f3c <_gp+0xffdf8358>
  20a588:	8029883a 	mov	r20,r16
  20a58c:	dd401d83 	ldbu	r21,118(sp)
  20a590:	df002215 	stw	fp,136(sp)
  20a594:	0021883a 	mov	r16,zero
  20a598:	003c0106 	br	2095a0 <_gp+0xffdf79bc>
  20a59c:	00c00874 	movhi	r3,33
  20a5a0:	18d0aa04 	addi	r3,r3,17064
  20a5a4:	d8c02315 	stw	r3,140(sp)
  20a5a8:	280d883a 	mov	r6,r5
  20a5ac:	003c6906 	br	209754 <_gp+0xffdf7b70>
  20a5b0:	802d883a 	mov	r22,r16
  20a5b4:	0021883a 	mov	r16,zero
  20a5b8:	003b5406 	br	20930c <_gp+0xffdf7728>
  20a5bc:	1823883a 	mov	r17,r3
  20a5c0:	003cf306 	br	209990 <_gp+0xffdf7dac>
  20a5c4:	1823883a 	mov	r17,r3
  20a5c8:	003cad06 	br	209880 <_gp+0xffdf7c9c>
  20a5cc:	0027883a 	mov	r19,zero
  20a5d0:	003fdc06 	br	20a544 <_gp+0xffdf8960>
  20a5d4:	d9402217 	ldw	r5,136(sp)
  20a5d8:	8005883a 	mov	r2,r16
  20a5dc:	b0c00043 	ldbu	r3,1(r22)
  20a5e0:	2c000017 	ldw	r16,0(r5)
  20a5e4:	29000104 	addi	r4,r5,4
  20a5e8:	d9002215 	stw	r4,136(sp)
  20a5ec:	102d883a 	mov	r22,r2
  20a5f0:	803fa50e 	bge	r16,zero,20a488 <_gp+0xffdf88a4>
  20a5f4:	18c03fcc 	andi	r3,r3,255
  20a5f8:	18c0201c 	xori	r3,r3,128
  20a5fc:	043fffc4 	movi	r16,-1
  20a600:	18ffe004 	addi	r3,r3,-128
  20a604:	003b4006 	br	209308 <_gp+0xffdf7724>
  20a608:	d9402303 	ldbu	r5,140(sp)
  20a60c:	d9401d85 	stb	r5,118(sp)
  20a610:	003cae06 	br	2098cc <_gp+0xffdf7ce8>
  20a614:	d8c02303 	ldbu	r3,140(sp)
  20a618:	d8c01d85 	stb	r3,118(sp)
  20a61c:	003d1406 	br	209a70 <_gp+0xffdf7e8c>
  20a620:	d8c02303 	ldbu	r3,140(sp)
  20a624:	d8c01d85 	stb	r3,118(sp)
  20a628:	003cca06 	br	209954 <_gp+0xffdf7d70>
  20a62c:	8880004c 	andi	r2,r17,1
  20a630:	002b883a 	mov	r21,zero
  20a634:	10000526 	beq	r2,zero,20a64c <___vfiprintf_internal_r+0x14b8>
  20a638:	00800c04 	movi	r2,48
  20a63c:	d88019c5 	stb	r2,103(sp)
  20a640:	dd002817 	ldw	r20,160(sp)
  20a644:	ddc019c4 	addi	r23,sp,103
  20a648:	003bd506 	br	2095a0 <_gp+0xffdf79bc>
  20a64c:	0029883a 	mov	r20,zero
  20a650:	ddc01a04 	addi	r23,sp,104
  20a654:	003bd206 	br	2095a0 <_gp+0xffdf79bc>
  20a658:	d9002303 	ldbu	r4,140(sp)
  20a65c:	d9001d85 	stb	r4,118(sp)
  20a660:	003da606 	br	209cfc <_gp+0xffdf8118>
  20a664:	d8c02303 	ldbu	r3,140(sp)
  20a668:	d8c01d85 	stb	r3,118(sp)
  20a66c:	003c7606 	br	209848 <_gp+0xffdf7c64>
  20a670:	d8c02303 	ldbu	r3,140(sp)
  20a674:	d8c01d85 	stb	r3,118(sp)
  20a678:	003c6506 	br	209810 <_gp+0xffdf7c2c>
  20a67c:	d9002303 	ldbu	r4,140(sp)
  20a680:	d9001d85 	stb	r4,118(sp)
  20a684:	003d3d06 	br	209b7c <_gp+0xffdf7f98>
  20a688:	d8c02303 	ldbu	r3,140(sp)
  20a68c:	d8c01d85 	stb	r3,118(sp)
  20a690:	003d1d06 	br	209b08 <_gp+0xffdf7f24>
  20a694:	d8c02303 	ldbu	r3,140(sp)
  20a698:	d8c01d85 	stb	r3,118(sp)
  20a69c:	003d0306 	br	209aac <_gp+0xffdf7ec8>

0020a6a0 <__vfiprintf_internal>:
  20a6a0:	00801074 	movhi	r2,65
  20a6a4:	10a6fa04 	addi	r2,r2,-25624
  20a6a8:	300f883a 	mov	r7,r6
  20a6ac:	280d883a 	mov	r6,r5
  20a6b0:	200b883a 	mov	r5,r4
  20a6b4:	11000017 	ldw	r4,0(r2)
  20a6b8:	02091941 	jmpi	209194 <___vfiprintf_internal_r>

0020a6bc <__sbprintf>:
  20a6bc:	2880030b 	ldhu	r2,12(r5)
  20a6c0:	2ac01917 	ldw	r11,100(r5)
  20a6c4:	2a80038b 	ldhu	r10,14(r5)
  20a6c8:	2a400717 	ldw	r9,28(r5)
  20a6cc:	2a000917 	ldw	r8,36(r5)
  20a6d0:	defee204 	addi	sp,sp,-1144
  20a6d4:	00c10004 	movi	r3,1024
  20a6d8:	dc011a15 	stw	r16,1128(sp)
  20a6dc:	10bfff4c 	andi	r2,r2,65533
  20a6e0:	2821883a 	mov	r16,r5
  20a6e4:	d8cb883a 	add	r5,sp,r3
  20a6e8:	dc811c15 	stw	r18,1136(sp)
  20a6ec:	dc411b15 	stw	r17,1132(sp)
  20a6f0:	dfc11d15 	stw	ra,1140(sp)
  20a6f4:	2025883a 	mov	r18,r4
  20a6f8:	d881030d 	sth	r2,1036(sp)
  20a6fc:	dac11915 	stw	r11,1124(sp)
  20a700:	da81038d 	sth	r10,1038(sp)
  20a704:	da410715 	stw	r9,1052(sp)
  20a708:	da010915 	stw	r8,1060(sp)
  20a70c:	dec10015 	stw	sp,1024(sp)
  20a710:	dec10415 	stw	sp,1040(sp)
  20a714:	d8c10215 	stw	r3,1032(sp)
  20a718:	d8c10515 	stw	r3,1044(sp)
  20a71c:	d8010615 	stw	zero,1048(sp)
  20a720:	02091940 	call	209194 <___vfiprintf_internal_r>
  20a724:	1023883a 	mov	r17,r2
  20a728:	10000416 	blt	r2,zero,20a73c <__sbprintf+0x80>
  20a72c:	d9410004 	addi	r5,sp,1024
  20a730:	9009883a 	mov	r4,r18
  20a734:	02059700 	call	205970 <_fflush_r>
  20a738:	10000d1e 	bne	r2,zero,20a770 <__sbprintf+0xb4>
  20a73c:	d881030b 	ldhu	r2,1036(sp)
  20a740:	1080100c 	andi	r2,r2,64
  20a744:	10000326 	beq	r2,zero,20a754 <__sbprintf+0x98>
  20a748:	8080030b 	ldhu	r2,12(r16)
  20a74c:	10801014 	ori	r2,r2,64
  20a750:	8080030d 	sth	r2,12(r16)
  20a754:	8805883a 	mov	r2,r17
  20a758:	dfc11d17 	ldw	ra,1140(sp)
  20a75c:	dc811c17 	ldw	r18,1136(sp)
  20a760:	dc411b17 	ldw	r17,1132(sp)
  20a764:	dc011a17 	ldw	r16,1128(sp)
  20a768:	dec11e04 	addi	sp,sp,1144
  20a76c:	f800283a 	ret
  20a770:	047fffc4 	movi	r17,-1
  20a774:	003ff106 	br	20a73c <_gp+0xffdf8b58>

0020a778 <_write_r>:
  20a778:	defffd04 	addi	sp,sp,-12
  20a77c:	2805883a 	mov	r2,r5
  20a780:	dc000015 	stw	r16,0(sp)
  20a784:	04001074 	movhi	r16,65
  20a788:	dc400115 	stw	r17,4(sp)
  20a78c:	300b883a 	mov	r5,r6
  20a790:	84271504 	addi	r16,r16,-25516
  20a794:	2023883a 	mov	r17,r4
  20a798:	380d883a 	mov	r6,r7
  20a79c:	1009883a 	mov	r4,r2
  20a7a0:	dfc00215 	stw	ra,8(sp)
  20a7a4:	80000015 	stw	zero,0(r16)
  20a7a8:	020ed880 	call	20ed88 <write>
  20a7ac:	00ffffc4 	movi	r3,-1
  20a7b0:	10c00526 	beq	r2,r3,20a7c8 <_write_r+0x50>
  20a7b4:	dfc00217 	ldw	ra,8(sp)
  20a7b8:	dc400117 	ldw	r17,4(sp)
  20a7bc:	dc000017 	ldw	r16,0(sp)
  20a7c0:	dec00304 	addi	sp,sp,12
  20a7c4:	f800283a 	ret
  20a7c8:	80c00017 	ldw	r3,0(r16)
  20a7cc:	183ff926 	beq	r3,zero,20a7b4 <_gp+0xffdf8bd0>
  20a7d0:	88c00015 	stw	r3,0(r17)
  20a7d4:	003ff706 	br	20a7b4 <_gp+0xffdf8bd0>

0020a7d8 <_close_r>:
  20a7d8:	defffd04 	addi	sp,sp,-12
  20a7dc:	dc000015 	stw	r16,0(sp)
  20a7e0:	04001074 	movhi	r16,65
  20a7e4:	dc400115 	stw	r17,4(sp)
  20a7e8:	84271504 	addi	r16,r16,-25516
  20a7ec:	2023883a 	mov	r17,r4
  20a7f0:	2809883a 	mov	r4,r5
  20a7f4:	dfc00215 	stw	ra,8(sp)
  20a7f8:	80000015 	stw	zero,0(r16)
  20a7fc:	020e5000 	call	20e500 <close>
  20a800:	00ffffc4 	movi	r3,-1
  20a804:	10c00526 	beq	r2,r3,20a81c <_close_r+0x44>
  20a808:	dfc00217 	ldw	ra,8(sp)
  20a80c:	dc400117 	ldw	r17,4(sp)
  20a810:	dc000017 	ldw	r16,0(sp)
  20a814:	dec00304 	addi	sp,sp,12
  20a818:	f800283a 	ret
  20a81c:	80c00017 	ldw	r3,0(r16)
  20a820:	183ff926 	beq	r3,zero,20a808 <_gp+0xffdf8c24>
  20a824:	88c00015 	stw	r3,0(r17)
  20a828:	003ff706 	br	20a808 <_gp+0xffdf8c24>

0020a82c <_calloc_r>:
  20a82c:	defffe04 	addi	sp,sp,-8
  20a830:	2805883a 	mov	r2,r5
  20a834:	dc000015 	stw	r16,0(sp)
  20a838:	300b883a 	mov	r5,r6
  20a83c:	2021883a 	mov	r16,r4
  20a840:	1009883a 	mov	r4,r2
  20a844:	dfc00115 	stw	ra,4(sp)
  20a848:	020179c0 	call	20179c <__mulsi3>
  20a84c:	100b883a 	mov	r5,r2
  20a850:	8009883a 	mov	r4,r16
  20a854:	0206ac80 	call	206ac8 <_malloc_r>
  20a858:	10002926 	beq	r2,zero,20a900 <_calloc_r+0xd4>
  20a85c:	11bfff17 	ldw	r6,-4(r2)
  20a860:	1021883a 	mov	r16,r2
  20a864:	00bfff04 	movi	r2,-4
  20a868:	308c703a 	and	r6,r6,r2
  20a86c:	00c00904 	movi	r3,36
  20a870:	308d883a 	add	r6,r6,r2
  20a874:	19801636 	bltu	r3,r6,20a8d0 <_calloc_r+0xa4>
  20a878:	008004c4 	movi	r2,19
  20a87c:	11800b2e 	bgeu	r2,r6,20a8ac <_calloc_r+0x80>
  20a880:	80000015 	stw	zero,0(r16)
  20a884:	80000115 	stw	zero,4(r16)
  20a888:	008006c4 	movi	r2,27
  20a88c:	11801a2e 	bgeu	r2,r6,20a8f8 <_calloc_r+0xcc>
  20a890:	80000215 	stw	zero,8(r16)
  20a894:	80000315 	stw	zero,12(r16)
  20a898:	30c0151e 	bne	r6,r3,20a8f0 <_calloc_r+0xc4>
  20a89c:	80000415 	stw	zero,16(r16)
  20a8a0:	80800604 	addi	r2,r16,24
  20a8a4:	80000515 	stw	zero,20(r16)
  20a8a8:	00000106 	br	20a8b0 <_calloc_r+0x84>
  20a8ac:	8005883a 	mov	r2,r16
  20a8b0:	10000015 	stw	zero,0(r2)
  20a8b4:	10000115 	stw	zero,4(r2)
  20a8b8:	10000215 	stw	zero,8(r2)
  20a8bc:	8005883a 	mov	r2,r16
  20a8c0:	dfc00117 	ldw	ra,4(sp)
  20a8c4:	dc000017 	ldw	r16,0(sp)
  20a8c8:	dec00204 	addi	sp,sp,8
  20a8cc:	f800283a 	ret
  20a8d0:	000b883a 	mov	r5,zero
  20a8d4:	8009883a 	mov	r4,r16
  20a8d8:	020765c0 	call	20765c <memset>
  20a8dc:	8005883a 	mov	r2,r16
  20a8e0:	dfc00117 	ldw	ra,4(sp)
  20a8e4:	dc000017 	ldw	r16,0(sp)
  20a8e8:	dec00204 	addi	sp,sp,8
  20a8ec:	f800283a 	ret
  20a8f0:	80800404 	addi	r2,r16,16
  20a8f4:	003fee06 	br	20a8b0 <_gp+0xffdf8ccc>
  20a8f8:	80800204 	addi	r2,r16,8
  20a8fc:	003fec06 	br	20a8b0 <_gp+0xffdf8ccc>
  20a900:	0005883a 	mov	r2,zero
  20a904:	003fee06 	br	20a8c0 <_gp+0xffdf8cdc>

0020a908 <_fclose_r>:
  20a908:	28003926 	beq	r5,zero,20a9f0 <_fclose_r+0xe8>
  20a90c:	defffc04 	addi	sp,sp,-16
  20a910:	dc400115 	stw	r17,4(sp)
  20a914:	dc000015 	stw	r16,0(sp)
  20a918:	dfc00315 	stw	ra,12(sp)
  20a91c:	dc800215 	stw	r18,8(sp)
  20a920:	2023883a 	mov	r17,r4
  20a924:	2821883a 	mov	r16,r5
  20a928:	20000226 	beq	r4,zero,20a934 <_fclose_r+0x2c>
  20a92c:	20800e17 	ldw	r2,56(r4)
  20a930:	10002726 	beq	r2,zero,20a9d0 <_fclose_r+0xc8>
  20a934:	8080030f 	ldh	r2,12(r16)
  20a938:	1000071e 	bne	r2,zero,20a958 <_fclose_r+0x50>
  20a93c:	0005883a 	mov	r2,zero
  20a940:	dfc00317 	ldw	ra,12(sp)
  20a944:	dc800217 	ldw	r18,8(sp)
  20a948:	dc400117 	ldw	r17,4(sp)
  20a94c:	dc000017 	ldw	r16,0(sp)
  20a950:	dec00404 	addi	sp,sp,16
  20a954:	f800283a 	ret
  20a958:	800b883a 	mov	r5,r16
  20a95c:	8809883a 	mov	r4,r17
  20a960:	02057540 	call	205754 <__sflush_r>
  20a964:	1025883a 	mov	r18,r2
  20a968:	80800b17 	ldw	r2,44(r16)
  20a96c:	10000426 	beq	r2,zero,20a980 <_fclose_r+0x78>
  20a970:	81400717 	ldw	r5,28(r16)
  20a974:	8809883a 	mov	r4,r17
  20a978:	103ee83a 	callr	r2
  20a97c:	10001616 	blt	r2,zero,20a9d8 <_fclose_r+0xd0>
  20a980:	8080030b 	ldhu	r2,12(r16)
  20a984:	1080200c 	andi	r2,r2,128
  20a988:	1000151e 	bne	r2,zero,20a9e0 <_fclose_r+0xd8>
  20a98c:	81400c17 	ldw	r5,48(r16)
  20a990:	28000526 	beq	r5,zero,20a9a8 <_fclose_r+0xa0>
  20a994:	80801004 	addi	r2,r16,64
  20a998:	28800226 	beq	r5,r2,20a9a4 <_fclose_r+0x9c>
  20a99c:	8809883a 	mov	r4,r17
  20a9a0:	0205ed00 	call	205ed0 <_free_r>
  20a9a4:	80000c15 	stw	zero,48(r16)
  20a9a8:	81401117 	ldw	r5,68(r16)
  20a9ac:	28000326 	beq	r5,zero,20a9bc <_fclose_r+0xb4>
  20a9b0:	8809883a 	mov	r4,r17
  20a9b4:	0205ed00 	call	205ed0 <_free_r>
  20a9b8:	80001115 	stw	zero,68(r16)
  20a9bc:	0205d6c0 	call	205d6c <__sfp_lock_acquire>
  20a9c0:	8000030d 	sth	zero,12(r16)
  20a9c4:	0205d700 	call	205d70 <__sfp_lock_release>
  20a9c8:	9005883a 	mov	r2,r18
  20a9cc:	003fdc06 	br	20a940 <_gp+0xffdf8d5c>
  20a9d0:	0205d5c0 	call	205d5c <__sinit>
  20a9d4:	003fd706 	br	20a934 <_gp+0xffdf8d50>
  20a9d8:	04bfffc4 	movi	r18,-1
  20a9dc:	003fe806 	br	20a980 <_gp+0xffdf8d9c>
  20a9e0:	81400417 	ldw	r5,16(r16)
  20a9e4:	8809883a 	mov	r4,r17
  20a9e8:	0205ed00 	call	205ed0 <_free_r>
  20a9ec:	003fe706 	br	20a98c <_gp+0xffdf8da8>
  20a9f0:	0005883a 	mov	r2,zero
  20a9f4:	f800283a 	ret

0020a9f8 <fclose>:
  20a9f8:	00801074 	movhi	r2,65
  20a9fc:	10a6fa04 	addi	r2,r2,-25624
  20aa00:	200b883a 	mov	r5,r4
  20aa04:	11000017 	ldw	r4,0(r2)
  20aa08:	020a9081 	jmpi	20a908 <_fclose_r>

0020aa0c <__fputwc>:
  20aa0c:	defff804 	addi	sp,sp,-32
  20aa10:	dcc00415 	stw	r19,16(sp)
  20aa14:	dc800315 	stw	r18,12(sp)
  20aa18:	dc000115 	stw	r16,4(sp)
  20aa1c:	dfc00715 	stw	ra,28(sp)
  20aa20:	dd400615 	stw	r21,24(sp)
  20aa24:	dd000515 	stw	r20,20(sp)
  20aa28:	dc400215 	stw	r17,8(sp)
  20aa2c:	2027883a 	mov	r19,r4
  20aa30:	2825883a 	mov	r18,r5
  20aa34:	3021883a 	mov	r16,r6
  20aa38:	02068b80 	call	2068b8 <__locale_mb_cur_max>
  20aa3c:	00c00044 	movi	r3,1
  20aa40:	10c03e26 	beq	r2,r3,20ab3c <__fputwc+0x130>
  20aa44:	81c01704 	addi	r7,r16,92
  20aa48:	900d883a 	mov	r6,r18
  20aa4c:	d80b883a 	mov	r5,sp
  20aa50:	9809883a 	mov	r4,r19
  20aa54:	020aedc0 	call	20aedc <_wcrtomb_r>
  20aa58:	1029883a 	mov	r20,r2
  20aa5c:	00bfffc4 	movi	r2,-1
  20aa60:	a0802026 	beq	r20,r2,20aae4 <__fputwc+0xd8>
  20aa64:	d9400003 	ldbu	r5,0(sp)
  20aa68:	a0001c26 	beq	r20,zero,20aadc <__fputwc+0xd0>
  20aa6c:	0023883a 	mov	r17,zero
  20aa70:	05400284 	movi	r21,10
  20aa74:	00000906 	br	20aa9c <__fputwc+0x90>
  20aa78:	80800017 	ldw	r2,0(r16)
  20aa7c:	11400005 	stb	r5,0(r2)
  20aa80:	80c00017 	ldw	r3,0(r16)
  20aa84:	18c00044 	addi	r3,r3,1
  20aa88:	80c00015 	stw	r3,0(r16)
  20aa8c:	8c400044 	addi	r17,r17,1
  20aa90:	dc45883a 	add	r2,sp,r17
  20aa94:	8d00112e 	bgeu	r17,r20,20aadc <__fputwc+0xd0>
  20aa98:	11400003 	ldbu	r5,0(r2)
  20aa9c:	80c00217 	ldw	r3,8(r16)
  20aaa0:	18ffffc4 	addi	r3,r3,-1
  20aaa4:	80c00215 	stw	r3,8(r16)
  20aaa8:	183ff30e 	bge	r3,zero,20aa78 <_gp+0xffdf8e94>
  20aaac:	80800617 	ldw	r2,24(r16)
  20aab0:	18801916 	blt	r3,r2,20ab18 <__fputwc+0x10c>
  20aab4:	80800017 	ldw	r2,0(r16)
  20aab8:	11400005 	stb	r5,0(r2)
  20aabc:	80800017 	ldw	r2,0(r16)
  20aac0:	10c00003 	ldbu	r3,0(r2)
  20aac4:	10800044 	addi	r2,r2,1
  20aac8:	1d402326 	beq	r3,r21,20ab58 <__fputwc+0x14c>
  20aacc:	80800015 	stw	r2,0(r16)
  20aad0:	8c400044 	addi	r17,r17,1
  20aad4:	dc45883a 	add	r2,sp,r17
  20aad8:	8d3fef36 	bltu	r17,r20,20aa98 <_gp+0xffdf8eb4>
  20aadc:	9005883a 	mov	r2,r18
  20aae0:	00000406 	br	20aaf4 <__fputwc+0xe8>
  20aae4:	80c0030b 	ldhu	r3,12(r16)
  20aae8:	a005883a 	mov	r2,r20
  20aaec:	18c01014 	ori	r3,r3,64
  20aaf0:	80c0030d 	sth	r3,12(r16)
  20aaf4:	dfc00717 	ldw	ra,28(sp)
  20aaf8:	dd400617 	ldw	r21,24(sp)
  20aafc:	dd000517 	ldw	r20,20(sp)
  20ab00:	dcc00417 	ldw	r19,16(sp)
  20ab04:	dc800317 	ldw	r18,12(sp)
  20ab08:	dc400217 	ldw	r17,8(sp)
  20ab0c:	dc000117 	ldw	r16,4(sp)
  20ab10:	dec00804 	addi	sp,sp,32
  20ab14:	f800283a 	ret
  20ab18:	800d883a 	mov	r6,r16
  20ab1c:	29403fcc 	andi	r5,r5,255
  20ab20:	9809883a 	mov	r4,r19
  20ab24:	020ad840 	call	20ad84 <__swbuf_r>
  20ab28:	10bfffe0 	cmpeqi	r2,r2,-1
  20ab2c:	10803fcc 	andi	r2,r2,255
  20ab30:	103fd626 	beq	r2,zero,20aa8c <_gp+0xffdf8ea8>
  20ab34:	00bfffc4 	movi	r2,-1
  20ab38:	003fee06 	br	20aaf4 <_gp+0xffdf8f10>
  20ab3c:	90ffffc4 	addi	r3,r18,-1
  20ab40:	01003f84 	movi	r4,254
  20ab44:	20ffbf36 	bltu	r4,r3,20aa44 <_gp+0xffdf8e60>
  20ab48:	900b883a 	mov	r5,r18
  20ab4c:	dc800005 	stb	r18,0(sp)
  20ab50:	1029883a 	mov	r20,r2
  20ab54:	003fc506 	br	20aa6c <_gp+0xffdf8e88>
  20ab58:	800d883a 	mov	r6,r16
  20ab5c:	a80b883a 	mov	r5,r21
  20ab60:	9809883a 	mov	r4,r19
  20ab64:	020ad840 	call	20ad84 <__swbuf_r>
  20ab68:	10bfffe0 	cmpeqi	r2,r2,-1
  20ab6c:	003fef06 	br	20ab2c <_gp+0xffdf8f48>

0020ab70 <_fputwc_r>:
  20ab70:	3080030b 	ldhu	r2,12(r6)
  20ab74:	10c8000c 	andi	r3,r2,8192
  20ab78:	1800051e 	bne	r3,zero,20ab90 <_fputwc_r+0x20>
  20ab7c:	30c01917 	ldw	r3,100(r6)
  20ab80:	10880014 	ori	r2,r2,8192
  20ab84:	3080030d 	sth	r2,12(r6)
  20ab88:	18880014 	ori	r2,r3,8192
  20ab8c:	30801915 	stw	r2,100(r6)
  20ab90:	020aa0c1 	jmpi	20aa0c <__fputwc>

0020ab94 <fputwc>:
  20ab94:	00801074 	movhi	r2,65
  20ab98:	defffc04 	addi	sp,sp,-16
  20ab9c:	10a6fa04 	addi	r2,r2,-25624
  20aba0:	dc000115 	stw	r16,4(sp)
  20aba4:	14000017 	ldw	r16,0(r2)
  20aba8:	dc400215 	stw	r17,8(sp)
  20abac:	dfc00315 	stw	ra,12(sp)
  20abb0:	2023883a 	mov	r17,r4
  20abb4:	80000226 	beq	r16,zero,20abc0 <fputwc+0x2c>
  20abb8:	80800e17 	ldw	r2,56(r16)
  20abbc:	10001026 	beq	r2,zero,20ac00 <fputwc+0x6c>
  20abc0:	2880030b 	ldhu	r2,12(r5)
  20abc4:	10c8000c 	andi	r3,r2,8192
  20abc8:	1800051e 	bne	r3,zero,20abe0 <fputwc+0x4c>
  20abcc:	28c01917 	ldw	r3,100(r5)
  20abd0:	10880014 	ori	r2,r2,8192
  20abd4:	2880030d 	sth	r2,12(r5)
  20abd8:	18880014 	ori	r2,r3,8192
  20abdc:	28801915 	stw	r2,100(r5)
  20abe0:	280d883a 	mov	r6,r5
  20abe4:	8009883a 	mov	r4,r16
  20abe8:	880b883a 	mov	r5,r17
  20abec:	dfc00317 	ldw	ra,12(sp)
  20abf0:	dc400217 	ldw	r17,8(sp)
  20abf4:	dc000117 	ldw	r16,4(sp)
  20abf8:	dec00404 	addi	sp,sp,16
  20abfc:	020aa0c1 	jmpi	20aa0c <__fputwc>
  20ac00:	8009883a 	mov	r4,r16
  20ac04:	d9400015 	stw	r5,0(sp)
  20ac08:	0205d5c0 	call	205d5c <__sinit>
  20ac0c:	d9400017 	ldw	r5,0(sp)
  20ac10:	003feb06 	br	20abc0 <_gp+0xffdf8fdc>

0020ac14 <_fstat_r>:
  20ac14:	defffd04 	addi	sp,sp,-12
  20ac18:	2805883a 	mov	r2,r5
  20ac1c:	dc000015 	stw	r16,0(sp)
  20ac20:	04001074 	movhi	r16,65
  20ac24:	dc400115 	stw	r17,4(sp)
  20ac28:	84271504 	addi	r16,r16,-25516
  20ac2c:	2023883a 	mov	r17,r4
  20ac30:	300b883a 	mov	r5,r6
  20ac34:	1009883a 	mov	r4,r2
  20ac38:	dfc00215 	stw	ra,8(sp)
  20ac3c:	80000015 	stw	zero,0(r16)
  20ac40:	020e6400 	call	20e640 <fstat>
  20ac44:	00ffffc4 	movi	r3,-1
  20ac48:	10c00526 	beq	r2,r3,20ac60 <_fstat_r+0x4c>
  20ac4c:	dfc00217 	ldw	ra,8(sp)
  20ac50:	dc400117 	ldw	r17,4(sp)
  20ac54:	dc000017 	ldw	r16,0(sp)
  20ac58:	dec00304 	addi	sp,sp,12
  20ac5c:	f800283a 	ret
  20ac60:	80c00017 	ldw	r3,0(r16)
  20ac64:	183ff926 	beq	r3,zero,20ac4c <_gp+0xffdf9068>
  20ac68:	88c00015 	stw	r3,0(r17)
  20ac6c:	003ff706 	br	20ac4c <_gp+0xffdf9068>

0020ac70 <_isatty_r>:
  20ac70:	defffd04 	addi	sp,sp,-12
  20ac74:	dc000015 	stw	r16,0(sp)
  20ac78:	04001074 	movhi	r16,65
  20ac7c:	dc400115 	stw	r17,4(sp)
  20ac80:	84271504 	addi	r16,r16,-25516
  20ac84:	2023883a 	mov	r17,r4
  20ac88:	2809883a 	mov	r4,r5
  20ac8c:	dfc00215 	stw	ra,8(sp)
  20ac90:	80000015 	stw	zero,0(r16)
  20ac94:	020e7340 	call	20e734 <isatty>
  20ac98:	00ffffc4 	movi	r3,-1
  20ac9c:	10c00526 	beq	r2,r3,20acb4 <_isatty_r+0x44>
  20aca0:	dfc00217 	ldw	ra,8(sp)
  20aca4:	dc400117 	ldw	r17,4(sp)
  20aca8:	dc000017 	ldw	r16,0(sp)
  20acac:	dec00304 	addi	sp,sp,12
  20acb0:	f800283a 	ret
  20acb4:	80c00017 	ldw	r3,0(r16)
  20acb8:	183ff926 	beq	r3,zero,20aca0 <_gp+0xffdf90bc>
  20acbc:	88c00015 	stw	r3,0(r17)
  20acc0:	003ff706 	br	20aca0 <_gp+0xffdf90bc>

0020acc4 <_lseek_r>:
  20acc4:	defffd04 	addi	sp,sp,-12
  20acc8:	2805883a 	mov	r2,r5
  20accc:	dc000015 	stw	r16,0(sp)
  20acd0:	04001074 	movhi	r16,65
  20acd4:	dc400115 	stw	r17,4(sp)
  20acd8:	300b883a 	mov	r5,r6
  20acdc:	84271504 	addi	r16,r16,-25516
  20ace0:	2023883a 	mov	r17,r4
  20ace4:	380d883a 	mov	r6,r7
  20ace8:	1009883a 	mov	r4,r2
  20acec:	dfc00215 	stw	ra,8(sp)
  20acf0:	80000015 	stw	zero,0(r16)
  20acf4:	020e9080 	call	20e908 <lseek>
  20acf8:	00ffffc4 	movi	r3,-1
  20acfc:	10c00526 	beq	r2,r3,20ad14 <_lseek_r+0x50>
  20ad00:	dfc00217 	ldw	ra,8(sp)
  20ad04:	dc400117 	ldw	r17,4(sp)
  20ad08:	dc000017 	ldw	r16,0(sp)
  20ad0c:	dec00304 	addi	sp,sp,12
  20ad10:	f800283a 	ret
  20ad14:	80c00017 	ldw	r3,0(r16)
  20ad18:	183ff926 	beq	r3,zero,20ad00 <_gp+0xffdf911c>
  20ad1c:	88c00015 	stw	r3,0(r17)
  20ad20:	003ff706 	br	20ad00 <_gp+0xffdf911c>

0020ad24 <_read_r>:
  20ad24:	defffd04 	addi	sp,sp,-12
  20ad28:	2805883a 	mov	r2,r5
  20ad2c:	dc000015 	stw	r16,0(sp)
  20ad30:	04001074 	movhi	r16,65
  20ad34:	dc400115 	stw	r17,4(sp)
  20ad38:	300b883a 	mov	r5,r6
  20ad3c:	84271504 	addi	r16,r16,-25516
  20ad40:	2023883a 	mov	r17,r4
  20ad44:	380d883a 	mov	r6,r7
  20ad48:	1009883a 	mov	r4,r2
  20ad4c:	dfc00215 	stw	ra,8(sp)
  20ad50:	80000015 	stw	zero,0(r16)
  20ad54:	020eae40 	call	20eae4 <read>
  20ad58:	00ffffc4 	movi	r3,-1
  20ad5c:	10c00526 	beq	r2,r3,20ad74 <_read_r+0x50>
  20ad60:	dfc00217 	ldw	ra,8(sp)
  20ad64:	dc400117 	ldw	r17,4(sp)
  20ad68:	dc000017 	ldw	r16,0(sp)
  20ad6c:	dec00304 	addi	sp,sp,12
  20ad70:	f800283a 	ret
  20ad74:	80c00017 	ldw	r3,0(r16)
  20ad78:	183ff926 	beq	r3,zero,20ad60 <_gp+0xffdf917c>
  20ad7c:	88c00015 	stw	r3,0(r17)
  20ad80:	003ff706 	br	20ad60 <_gp+0xffdf917c>

0020ad84 <__swbuf_r>:
  20ad84:	defffb04 	addi	sp,sp,-20
  20ad88:	dcc00315 	stw	r19,12(sp)
  20ad8c:	dc800215 	stw	r18,8(sp)
  20ad90:	dc000015 	stw	r16,0(sp)
  20ad94:	dfc00415 	stw	ra,16(sp)
  20ad98:	dc400115 	stw	r17,4(sp)
  20ad9c:	2025883a 	mov	r18,r4
  20ada0:	2827883a 	mov	r19,r5
  20ada4:	3021883a 	mov	r16,r6
  20ada8:	20000226 	beq	r4,zero,20adb4 <__swbuf_r+0x30>
  20adac:	20800e17 	ldw	r2,56(r4)
  20adb0:	10004226 	beq	r2,zero,20aebc <__swbuf_r+0x138>
  20adb4:	80800617 	ldw	r2,24(r16)
  20adb8:	8100030b 	ldhu	r4,12(r16)
  20adbc:	80800215 	stw	r2,8(r16)
  20adc0:	2080020c 	andi	r2,r4,8
  20adc4:	10003626 	beq	r2,zero,20aea0 <__swbuf_r+0x11c>
  20adc8:	80c00417 	ldw	r3,16(r16)
  20adcc:	18003426 	beq	r3,zero,20aea0 <__swbuf_r+0x11c>
  20add0:	2088000c 	andi	r2,r4,8192
  20add4:	9c403fcc 	andi	r17,r19,255
  20add8:	10001a26 	beq	r2,zero,20ae44 <__swbuf_r+0xc0>
  20addc:	80800017 	ldw	r2,0(r16)
  20ade0:	81000517 	ldw	r4,20(r16)
  20ade4:	10c7c83a 	sub	r3,r2,r3
  20ade8:	1900200e 	bge	r3,r4,20ae6c <__swbuf_r+0xe8>
  20adec:	18c00044 	addi	r3,r3,1
  20adf0:	81000217 	ldw	r4,8(r16)
  20adf4:	11400044 	addi	r5,r2,1
  20adf8:	81400015 	stw	r5,0(r16)
  20adfc:	213fffc4 	addi	r4,r4,-1
  20ae00:	81000215 	stw	r4,8(r16)
  20ae04:	14c00005 	stb	r19,0(r2)
  20ae08:	80800517 	ldw	r2,20(r16)
  20ae0c:	10c01e26 	beq	r2,r3,20ae88 <__swbuf_r+0x104>
  20ae10:	8080030b 	ldhu	r2,12(r16)
  20ae14:	1080004c 	andi	r2,r2,1
  20ae18:	10000226 	beq	r2,zero,20ae24 <__swbuf_r+0xa0>
  20ae1c:	00800284 	movi	r2,10
  20ae20:	88801926 	beq	r17,r2,20ae88 <__swbuf_r+0x104>
  20ae24:	8805883a 	mov	r2,r17
  20ae28:	dfc00417 	ldw	ra,16(sp)
  20ae2c:	dcc00317 	ldw	r19,12(sp)
  20ae30:	dc800217 	ldw	r18,8(sp)
  20ae34:	dc400117 	ldw	r17,4(sp)
  20ae38:	dc000017 	ldw	r16,0(sp)
  20ae3c:	dec00504 	addi	sp,sp,20
  20ae40:	f800283a 	ret
  20ae44:	81401917 	ldw	r5,100(r16)
  20ae48:	00b7ffc4 	movi	r2,-8193
  20ae4c:	21080014 	ori	r4,r4,8192
  20ae50:	2884703a 	and	r2,r5,r2
  20ae54:	80801915 	stw	r2,100(r16)
  20ae58:	80800017 	ldw	r2,0(r16)
  20ae5c:	8100030d 	sth	r4,12(r16)
  20ae60:	81000517 	ldw	r4,20(r16)
  20ae64:	10c7c83a 	sub	r3,r2,r3
  20ae68:	193fe016 	blt	r3,r4,20adec <_gp+0xffdf9208>
  20ae6c:	800b883a 	mov	r5,r16
  20ae70:	9009883a 	mov	r4,r18
  20ae74:	02059700 	call	205970 <_fflush_r>
  20ae78:	1000071e 	bne	r2,zero,20ae98 <__swbuf_r+0x114>
  20ae7c:	80800017 	ldw	r2,0(r16)
  20ae80:	00c00044 	movi	r3,1
  20ae84:	003fda06 	br	20adf0 <_gp+0xffdf920c>
  20ae88:	800b883a 	mov	r5,r16
  20ae8c:	9009883a 	mov	r4,r18
  20ae90:	02059700 	call	205970 <_fflush_r>
  20ae94:	103fe326 	beq	r2,zero,20ae24 <_gp+0xffdf9240>
  20ae98:	00bfffc4 	movi	r2,-1
  20ae9c:	003fe206 	br	20ae28 <_gp+0xffdf9244>
  20aea0:	800b883a 	mov	r5,r16
  20aea4:	9009883a 	mov	r4,r18
  20aea8:	0203d500 	call	203d50 <__swsetup_r>
  20aeac:	103ffa1e 	bne	r2,zero,20ae98 <_gp+0xffdf92b4>
  20aeb0:	8100030b 	ldhu	r4,12(r16)
  20aeb4:	80c00417 	ldw	r3,16(r16)
  20aeb8:	003fc506 	br	20add0 <_gp+0xffdf91ec>
  20aebc:	0205d5c0 	call	205d5c <__sinit>
  20aec0:	003fbc06 	br	20adb4 <_gp+0xffdf91d0>

0020aec4 <__swbuf>:
  20aec4:	00801074 	movhi	r2,65
  20aec8:	10a6fa04 	addi	r2,r2,-25624
  20aecc:	280d883a 	mov	r6,r5
  20aed0:	200b883a 	mov	r5,r4
  20aed4:	11000017 	ldw	r4,0(r2)
  20aed8:	020ad841 	jmpi	20ad84 <__swbuf_r>

0020aedc <_wcrtomb_r>:
  20aedc:	defff604 	addi	sp,sp,-40
  20aee0:	00801074 	movhi	r2,65
  20aee4:	dc800815 	stw	r18,32(sp)
  20aee8:	dc400715 	stw	r17,28(sp)
  20aeec:	dc000615 	stw	r16,24(sp)
  20aef0:	10a6fe04 	addi	r2,r2,-25608
  20aef4:	dfc00915 	stw	ra,36(sp)
  20aef8:	2021883a 	mov	r16,r4
  20aefc:	3823883a 	mov	r17,r7
  20af00:	14800017 	ldw	r18,0(r2)
  20af04:	28001426 	beq	r5,zero,20af58 <_wcrtomb_r+0x7c>
  20af08:	d9400415 	stw	r5,16(sp)
  20af0c:	d9800515 	stw	r6,20(sp)
  20af10:	02068ac0 	call	2068ac <__locale_charset>
  20af14:	d9800517 	ldw	r6,20(sp)
  20af18:	d9400417 	ldw	r5,16(sp)
  20af1c:	100f883a 	mov	r7,r2
  20af20:	dc400015 	stw	r17,0(sp)
  20af24:	8009883a 	mov	r4,r16
  20af28:	903ee83a 	callr	r18
  20af2c:	00ffffc4 	movi	r3,-1
  20af30:	10c0031e 	bne	r2,r3,20af40 <_wcrtomb_r+0x64>
  20af34:	88000015 	stw	zero,0(r17)
  20af38:	00c02284 	movi	r3,138
  20af3c:	80c00015 	stw	r3,0(r16)
  20af40:	dfc00917 	ldw	ra,36(sp)
  20af44:	dc800817 	ldw	r18,32(sp)
  20af48:	dc400717 	ldw	r17,28(sp)
  20af4c:	dc000617 	ldw	r16,24(sp)
  20af50:	dec00a04 	addi	sp,sp,40
  20af54:	f800283a 	ret
  20af58:	02068ac0 	call	2068ac <__locale_charset>
  20af5c:	100f883a 	mov	r7,r2
  20af60:	dc400015 	stw	r17,0(sp)
  20af64:	000d883a 	mov	r6,zero
  20af68:	d9400104 	addi	r5,sp,4
  20af6c:	8009883a 	mov	r4,r16
  20af70:	903ee83a 	callr	r18
  20af74:	003fed06 	br	20af2c <_gp+0xffdf9348>

0020af78 <wcrtomb>:
  20af78:	defff604 	addi	sp,sp,-40
  20af7c:	00801074 	movhi	r2,65
  20af80:	dc800615 	stw	r18,24(sp)
  20af84:	dc400515 	stw	r17,20(sp)
  20af88:	10a6fa04 	addi	r2,r2,-25624
  20af8c:	dfc00915 	stw	ra,36(sp)
  20af90:	dd000815 	stw	r20,32(sp)
  20af94:	dcc00715 	stw	r19,28(sp)
  20af98:	dc000415 	stw	r16,16(sp)
  20af9c:	3025883a 	mov	r18,r6
  20afa0:	14400017 	ldw	r17,0(r2)
  20afa4:	20001926 	beq	r4,zero,20b00c <wcrtomb+0x94>
  20afa8:	00801074 	movhi	r2,65
  20afac:	10a6fe04 	addi	r2,r2,-25608
  20afb0:	15000017 	ldw	r20,0(r2)
  20afb4:	2021883a 	mov	r16,r4
  20afb8:	2827883a 	mov	r19,r5
  20afbc:	02068ac0 	call	2068ac <__locale_charset>
  20afc0:	100f883a 	mov	r7,r2
  20afc4:	dc800015 	stw	r18,0(sp)
  20afc8:	980d883a 	mov	r6,r19
  20afcc:	800b883a 	mov	r5,r16
  20afd0:	8809883a 	mov	r4,r17
  20afd4:	a03ee83a 	callr	r20
  20afd8:	00ffffc4 	movi	r3,-1
  20afdc:	10c0031e 	bne	r2,r3,20afec <wcrtomb+0x74>
  20afe0:	90000015 	stw	zero,0(r18)
  20afe4:	00c02284 	movi	r3,138
  20afe8:	88c00015 	stw	r3,0(r17)
  20afec:	dfc00917 	ldw	ra,36(sp)
  20aff0:	dd000817 	ldw	r20,32(sp)
  20aff4:	dcc00717 	ldw	r19,28(sp)
  20aff8:	dc800617 	ldw	r18,24(sp)
  20affc:	dc400517 	ldw	r17,20(sp)
  20b000:	dc000417 	ldw	r16,16(sp)
  20b004:	dec00a04 	addi	sp,sp,40
  20b008:	f800283a 	ret
  20b00c:	00801074 	movhi	r2,65
  20b010:	10a6fe04 	addi	r2,r2,-25608
  20b014:	14000017 	ldw	r16,0(r2)
  20b018:	02068ac0 	call	2068ac <__locale_charset>
  20b01c:	100f883a 	mov	r7,r2
  20b020:	dc800015 	stw	r18,0(sp)
  20b024:	000d883a 	mov	r6,zero
  20b028:	d9400104 	addi	r5,sp,4
  20b02c:	8809883a 	mov	r4,r17
  20b030:	803ee83a 	callr	r16
  20b034:	003fe806 	br	20afd8 <_gp+0xffdf93f4>

0020b038 <__ascii_wctomb>:
  20b038:	28000526 	beq	r5,zero,20b050 <__ascii_wctomb+0x18>
  20b03c:	00803fc4 	movi	r2,255
  20b040:	11800536 	bltu	r2,r6,20b058 <__ascii_wctomb+0x20>
  20b044:	29800005 	stb	r6,0(r5)
  20b048:	00800044 	movi	r2,1
  20b04c:	f800283a 	ret
  20b050:	0005883a 	mov	r2,zero
  20b054:	f800283a 	ret
  20b058:	00802284 	movi	r2,138
  20b05c:	20800015 	stw	r2,0(r4)
  20b060:	00bfffc4 	movi	r2,-1
  20b064:	f800283a 	ret

0020b068 <_wctomb_r>:
  20b068:	00801074 	movhi	r2,65
  20b06c:	defff904 	addi	sp,sp,-28
  20b070:	10a6fe04 	addi	r2,r2,-25608
  20b074:	dfc00615 	stw	ra,24(sp)
  20b078:	dc400515 	stw	r17,20(sp)
  20b07c:	dc000415 	stw	r16,16(sp)
  20b080:	3823883a 	mov	r17,r7
  20b084:	14000017 	ldw	r16,0(r2)
  20b088:	d9000115 	stw	r4,4(sp)
  20b08c:	d9400215 	stw	r5,8(sp)
  20b090:	d9800315 	stw	r6,12(sp)
  20b094:	02068ac0 	call	2068ac <__locale_charset>
  20b098:	d9800317 	ldw	r6,12(sp)
  20b09c:	d9400217 	ldw	r5,8(sp)
  20b0a0:	d9000117 	ldw	r4,4(sp)
  20b0a4:	100f883a 	mov	r7,r2
  20b0a8:	dc400015 	stw	r17,0(sp)
  20b0ac:	803ee83a 	callr	r16
  20b0b0:	dfc00617 	ldw	ra,24(sp)
  20b0b4:	dc400517 	ldw	r17,20(sp)
  20b0b8:	dc000417 	ldw	r16,16(sp)
  20b0bc:	dec00704 	addi	sp,sp,28
  20b0c0:	f800283a 	ret

0020b0c4 <__udivdi3>:
  20b0c4:	defff404 	addi	sp,sp,-48
  20b0c8:	dcc00515 	stw	r19,20(sp)
  20b0cc:	dc000215 	stw	r16,8(sp)
  20b0d0:	dfc00b15 	stw	ra,44(sp)
  20b0d4:	df000a15 	stw	fp,40(sp)
  20b0d8:	ddc00915 	stw	r23,36(sp)
  20b0dc:	dd800815 	stw	r22,32(sp)
  20b0e0:	dd400715 	stw	r21,28(sp)
  20b0e4:	dd000615 	stw	r20,24(sp)
  20b0e8:	dc800415 	stw	r18,16(sp)
  20b0ec:	dc400315 	stw	r17,12(sp)
  20b0f0:	2027883a 	mov	r19,r4
  20b0f4:	2821883a 	mov	r16,r5
  20b0f8:	3800461e 	bne	r7,zero,20b214 <__udivdi3+0x150>
  20b0fc:	3023883a 	mov	r17,r6
  20b100:	2025883a 	mov	r18,r4
  20b104:	2980572e 	bgeu	r5,r6,20b264 <__udivdi3+0x1a0>
  20b108:	00bfffd4 	movui	r2,65535
  20b10c:	282d883a 	mov	r22,r5
  20b110:	1180b236 	bltu	r2,r6,20b3dc <__udivdi3+0x318>
  20b114:	00803fc4 	movi	r2,255
  20b118:	1185803a 	cmpltu	r2,r2,r6
  20b11c:	100490fa 	slli	r2,r2,3
  20b120:	3086d83a 	srl	r3,r6,r2
  20b124:	01000874 	movhi	r4,33
  20b128:	210fff04 	addi	r4,r4,16380
  20b12c:	20c7883a 	add	r3,r4,r3
  20b130:	18c00003 	ldbu	r3,0(r3)
  20b134:	1885883a 	add	r2,r3,r2
  20b138:	00c00804 	movi	r3,32
  20b13c:	1887c83a 	sub	r3,r3,r2
  20b140:	18000526 	beq	r3,zero,20b158 <__udivdi3+0x94>
  20b144:	80e0983a 	sll	r16,r16,r3
  20b148:	9884d83a 	srl	r2,r19,r2
  20b14c:	30e2983a 	sll	r17,r6,r3
  20b150:	98e4983a 	sll	r18,r19,r3
  20b154:	142cb03a 	or	r22,r2,r16
  20b158:	882ad43a 	srli	r21,r17,16
  20b15c:	b009883a 	mov	r4,r22
  20b160:	8d3fffcc 	andi	r20,r17,65535
  20b164:	a80b883a 	mov	r5,r21
  20b168:	0200bb00 	call	200bb0 <__umodsi3>
  20b16c:	b009883a 	mov	r4,r22
  20b170:	a80b883a 	mov	r5,r21
  20b174:	1027883a 	mov	r19,r2
  20b178:	0200b4c0 	call	200b4c <__udivsi3>
  20b17c:	100b883a 	mov	r5,r2
  20b180:	a009883a 	mov	r4,r20
  20b184:	102d883a 	mov	r22,r2
  20b188:	020179c0 	call	20179c <__mulsi3>
  20b18c:	9826943a 	slli	r19,r19,16
  20b190:	9006d43a 	srli	r3,r18,16
  20b194:	1cc6b03a 	or	r3,r3,r19
  20b198:	1880052e 	bgeu	r3,r2,20b1b0 <__udivdi3+0xec>
  20b19c:	1c47883a 	add	r3,r3,r17
  20b1a0:	b13fffc4 	addi	r4,r22,-1
  20b1a4:	1c400136 	bltu	r3,r17,20b1ac <__udivdi3+0xe8>
  20b1a8:	18814236 	bltu	r3,r2,20b6b4 <__udivdi3+0x5f0>
  20b1ac:	202d883a 	mov	r22,r4
  20b1b0:	18a1c83a 	sub	r16,r3,r2
  20b1b4:	8009883a 	mov	r4,r16
  20b1b8:	a80b883a 	mov	r5,r21
  20b1bc:	0200bb00 	call	200bb0 <__umodsi3>
  20b1c0:	1027883a 	mov	r19,r2
  20b1c4:	8009883a 	mov	r4,r16
  20b1c8:	a80b883a 	mov	r5,r21
  20b1cc:	9826943a 	slli	r19,r19,16
  20b1d0:	0200b4c0 	call	200b4c <__udivsi3>
  20b1d4:	100b883a 	mov	r5,r2
  20b1d8:	a009883a 	mov	r4,r20
  20b1dc:	94bfffcc 	andi	r18,r18,65535
  20b1e0:	1021883a 	mov	r16,r2
  20b1e4:	94e4b03a 	or	r18,r18,r19
  20b1e8:	020179c0 	call	20179c <__mulsi3>
  20b1ec:	9080052e 	bgeu	r18,r2,20b204 <__udivdi3+0x140>
  20b1f0:	8ca5883a 	add	r18,r17,r18
  20b1f4:	80ffffc4 	addi	r3,r16,-1
  20b1f8:	94410c36 	bltu	r18,r17,20b62c <__udivdi3+0x568>
  20b1fc:	90810b2e 	bgeu	r18,r2,20b62c <__udivdi3+0x568>
  20b200:	843fff84 	addi	r16,r16,-2
  20b204:	b004943a 	slli	r2,r22,16
  20b208:	0007883a 	mov	r3,zero
  20b20c:	1404b03a 	or	r2,r2,r16
  20b210:	00005e06 	br	20b38c <__udivdi3+0x2c8>
  20b214:	29c05b36 	bltu	r5,r7,20b384 <__udivdi3+0x2c0>
  20b218:	00bfffd4 	movui	r2,65535
  20b21c:	11c0672e 	bgeu	r2,r7,20b3bc <__udivdi3+0x2f8>
  20b220:	00804034 	movhi	r2,256
  20b224:	10bfffc4 	addi	r2,r2,-1
  20b228:	11c10a36 	bltu	r2,r7,20b654 <__udivdi3+0x590>
  20b22c:	00800404 	movi	r2,16
  20b230:	3886d83a 	srl	r3,r7,r2
  20b234:	01000874 	movhi	r4,33
  20b238:	210fff04 	addi	r4,r4,16380
  20b23c:	20c7883a 	add	r3,r4,r3
  20b240:	18c00003 	ldbu	r3,0(r3)
  20b244:	05c00804 	movi	r23,32
  20b248:	1885883a 	add	r2,r3,r2
  20b24c:	b8afc83a 	sub	r23,r23,r2
  20b250:	b800671e 	bne	r23,zero,20b3f0 <__udivdi3+0x32c>
  20b254:	3c010536 	bltu	r7,r16,20b66c <__udivdi3+0x5a8>
  20b258:	9985403a 	cmpgeu	r2,r19,r6
  20b25c:	0007883a 	mov	r3,zero
  20b260:	00004a06 	br	20b38c <__udivdi3+0x2c8>
  20b264:	3000041e 	bne	r6,zero,20b278 <__udivdi3+0x1b4>
  20b268:	000b883a 	mov	r5,zero
  20b26c:	01000044 	movi	r4,1
  20b270:	0200b4c0 	call	200b4c <__udivsi3>
  20b274:	1023883a 	mov	r17,r2
  20b278:	00bfffd4 	movui	r2,65535
  20b27c:	1440532e 	bgeu	r2,r17,20b3cc <__udivdi3+0x308>
  20b280:	00804034 	movhi	r2,256
  20b284:	10bfffc4 	addi	r2,r2,-1
  20b288:	1440f436 	bltu	r2,r17,20b65c <__udivdi3+0x598>
  20b28c:	00800404 	movi	r2,16
  20b290:	8886d83a 	srl	r3,r17,r2
  20b294:	01000874 	movhi	r4,33
  20b298:	210fff04 	addi	r4,r4,16380
  20b29c:	20c7883a 	add	r3,r4,r3
  20b2a0:	18c00003 	ldbu	r3,0(r3)
  20b2a4:	1885883a 	add	r2,r3,r2
  20b2a8:	00c00804 	movi	r3,32
  20b2ac:	1887c83a 	sub	r3,r3,r2
  20b2b0:	1800a51e 	bne	r3,zero,20b548 <__udivdi3+0x484>
  20b2b4:	882ad43a 	srli	r21,r17,16
  20b2b8:	8461c83a 	sub	r16,r16,r17
  20b2bc:	8d3fffcc 	andi	r20,r17,65535
  20b2c0:	00c00044 	movi	r3,1
  20b2c4:	a80b883a 	mov	r5,r21
  20b2c8:	8009883a 	mov	r4,r16
  20b2cc:	d8c00115 	stw	r3,4(sp)
  20b2d0:	0200bb00 	call	200bb0 <__umodsi3>
  20b2d4:	a80b883a 	mov	r5,r21
  20b2d8:	8009883a 	mov	r4,r16
  20b2dc:	1027883a 	mov	r19,r2
  20b2e0:	0200b4c0 	call	200b4c <__udivsi3>
  20b2e4:	a00b883a 	mov	r5,r20
  20b2e8:	1009883a 	mov	r4,r2
  20b2ec:	102d883a 	mov	r22,r2
  20b2f0:	020179c0 	call	20179c <__mulsi3>
  20b2f4:	9826943a 	slli	r19,r19,16
  20b2f8:	900ed43a 	srli	r7,r18,16
  20b2fc:	d8c00117 	ldw	r3,4(sp)
  20b300:	3cceb03a 	or	r7,r7,r19
  20b304:	3880052e 	bgeu	r7,r2,20b31c <__udivdi3+0x258>
  20b308:	3c4f883a 	add	r7,r7,r17
  20b30c:	b13fffc4 	addi	r4,r22,-1
  20b310:	3c400136 	bltu	r7,r17,20b318 <__udivdi3+0x254>
  20b314:	3880e436 	bltu	r7,r2,20b6a8 <__udivdi3+0x5e4>
  20b318:	202d883a 	mov	r22,r4
  20b31c:	38a1c83a 	sub	r16,r7,r2
  20b320:	8009883a 	mov	r4,r16
  20b324:	a80b883a 	mov	r5,r21
  20b328:	d8c00115 	stw	r3,4(sp)
  20b32c:	0200bb00 	call	200bb0 <__umodsi3>
  20b330:	1027883a 	mov	r19,r2
  20b334:	8009883a 	mov	r4,r16
  20b338:	a80b883a 	mov	r5,r21
  20b33c:	9826943a 	slli	r19,r19,16
  20b340:	0200b4c0 	call	200b4c <__udivsi3>
  20b344:	a00b883a 	mov	r5,r20
  20b348:	1009883a 	mov	r4,r2
  20b34c:	94bfffcc 	andi	r18,r18,65535
  20b350:	1021883a 	mov	r16,r2
  20b354:	94e4b03a 	or	r18,r18,r19
  20b358:	020179c0 	call	20179c <__mulsi3>
  20b35c:	d8c00117 	ldw	r3,4(sp)
  20b360:	9080052e 	bgeu	r18,r2,20b378 <__udivdi3+0x2b4>
  20b364:	8ca5883a 	add	r18,r17,r18
  20b368:	813fffc4 	addi	r4,r16,-1
  20b36c:	9440ad36 	bltu	r18,r17,20b624 <__udivdi3+0x560>
  20b370:	9080ac2e 	bgeu	r18,r2,20b624 <__udivdi3+0x560>
  20b374:	843fff84 	addi	r16,r16,-2
  20b378:	b004943a 	slli	r2,r22,16
  20b37c:	1404b03a 	or	r2,r2,r16
  20b380:	00000206 	br	20b38c <__udivdi3+0x2c8>
  20b384:	0007883a 	mov	r3,zero
  20b388:	0005883a 	mov	r2,zero
  20b38c:	dfc00b17 	ldw	ra,44(sp)
  20b390:	df000a17 	ldw	fp,40(sp)
  20b394:	ddc00917 	ldw	r23,36(sp)
  20b398:	dd800817 	ldw	r22,32(sp)
  20b39c:	dd400717 	ldw	r21,28(sp)
  20b3a0:	dd000617 	ldw	r20,24(sp)
  20b3a4:	dcc00517 	ldw	r19,20(sp)
  20b3a8:	dc800417 	ldw	r18,16(sp)
  20b3ac:	dc400317 	ldw	r17,12(sp)
  20b3b0:	dc000217 	ldw	r16,8(sp)
  20b3b4:	dec00c04 	addi	sp,sp,48
  20b3b8:	f800283a 	ret
  20b3bc:	00803fc4 	movi	r2,255
  20b3c0:	11c5803a 	cmpltu	r2,r2,r7
  20b3c4:	100490fa 	slli	r2,r2,3
  20b3c8:	003f9906 	br	20b230 <_gp+0xffdf964c>
  20b3cc:	00803fc4 	movi	r2,255
  20b3d0:	1445803a 	cmpltu	r2,r2,r17
  20b3d4:	100490fa 	slli	r2,r2,3
  20b3d8:	003fad06 	br	20b290 <_gp+0xffdf96ac>
  20b3dc:	00804034 	movhi	r2,256
  20b3e0:	10bfffc4 	addi	r2,r2,-1
  20b3e4:	11809f36 	bltu	r2,r6,20b664 <__udivdi3+0x5a0>
  20b3e8:	00800404 	movi	r2,16
  20b3ec:	003f4c06 	br	20b120 <_gp+0xffdf953c>
  20b3f0:	3dce983a 	sll	r7,r7,r23
  20b3f4:	30b8d83a 	srl	fp,r6,r2
  20b3f8:	80a2d83a 	srl	r17,r16,r2
  20b3fc:	35cc983a 	sll	r6,r6,r23
  20b400:	3f38b03a 	or	fp,r7,fp
  20b404:	e024d43a 	srli	r18,fp,16
  20b408:	9884d83a 	srl	r2,r19,r2
  20b40c:	85e0983a 	sll	r16,r16,r23
  20b410:	8809883a 	mov	r4,r17
  20b414:	900b883a 	mov	r5,r18
  20b418:	d9800015 	stw	r6,0(sp)
  20b41c:	1420b03a 	or	r16,r2,r16
  20b420:	0200bb00 	call	200bb0 <__umodsi3>
  20b424:	900b883a 	mov	r5,r18
  20b428:	8809883a 	mov	r4,r17
  20b42c:	1029883a 	mov	r20,r2
  20b430:	e5bfffcc 	andi	r22,fp,65535
  20b434:	0200b4c0 	call	200b4c <__udivsi3>
  20b438:	100b883a 	mov	r5,r2
  20b43c:	b009883a 	mov	r4,r22
  20b440:	102b883a 	mov	r21,r2
  20b444:	020179c0 	call	20179c <__mulsi3>
  20b448:	a028943a 	slli	r20,r20,16
  20b44c:	8006d43a 	srli	r3,r16,16
  20b450:	1d06b03a 	or	r3,r3,r20
  20b454:	1880042e 	bgeu	r3,r2,20b468 <__udivdi3+0x3a4>
  20b458:	1f07883a 	add	r3,r3,fp
  20b45c:	a93fffc4 	addi	r4,r21,-1
  20b460:	1f00892e 	bgeu	r3,fp,20b688 <__udivdi3+0x5c4>
  20b464:	202b883a 	mov	r21,r4
  20b468:	18a3c83a 	sub	r17,r3,r2
  20b46c:	8809883a 	mov	r4,r17
  20b470:	900b883a 	mov	r5,r18
  20b474:	0200bb00 	call	200bb0 <__umodsi3>
  20b478:	1029883a 	mov	r20,r2
  20b47c:	8809883a 	mov	r4,r17
  20b480:	900b883a 	mov	r5,r18
  20b484:	a028943a 	slli	r20,r20,16
  20b488:	0200b4c0 	call	200b4c <__udivsi3>
  20b48c:	100b883a 	mov	r5,r2
  20b490:	b009883a 	mov	r4,r22
  20b494:	843fffcc 	andi	r16,r16,65535
  20b498:	1023883a 	mov	r17,r2
  20b49c:	8520b03a 	or	r16,r16,r20
  20b4a0:	020179c0 	call	20179c <__mulsi3>
  20b4a4:	8080042e 	bgeu	r16,r2,20b4b8 <__udivdi3+0x3f4>
  20b4a8:	8721883a 	add	r16,r16,fp
  20b4ac:	88ffffc4 	addi	r3,r17,-1
  20b4b0:	8700712e 	bgeu	r16,fp,20b678 <__udivdi3+0x5b4>
  20b4b4:	1823883a 	mov	r17,r3
  20b4b8:	a80e943a 	slli	r7,r21,16
  20b4bc:	d8c00017 	ldw	r3,0(sp)
  20b4c0:	80a1c83a 	sub	r16,r16,r2
  20b4c4:	3c64b03a 	or	r18,r7,r17
  20b4c8:	1d3fffcc 	andi	r20,r3,65535
  20b4cc:	9022d43a 	srli	r17,r18,16
  20b4d0:	95bfffcc 	andi	r22,r18,65535
  20b4d4:	a00b883a 	mov	r5,r20
  20b4d8:	b009883a 	mov	r4,r22
  20b4dc:	182ad43a 	srli	r21,r3,16
  20b4e0:	020179c0 	call	20179c <__mulsi3>
  20b4e4:	a00b883a 	mov	r5,r20
  20b4e8:	8809883a 	mov	r4,r17
  20b4ec:	1039883a 	mov	fp,r2
  20b4f0:	020179c0 	call	20179c <__mulsi3>
  20b4f4:	8809883a 	mov	r4,r17
  20b4f8:	a80b883a 	mov	r5,r21
  20b4fc:	1029883a 	mov	r20,r2
  20b500:	020179c0 	call	20179c <__mulsi3>
  20b504:	a80b883a 	mov	r5,r21
  20b508:	b009883a 	mov	r4,r22
  20b50c:	1023883a 	mov	r17,r2
  20b510:	020179c0 	call	20179c <__mulsi3>
  20b514:	e006d43a 	srli	r3,fp,16
  20b518:	1505883a 	add	r2,r2,r20
  20b51c:	1887883a 	add	r3,r3,r2
  20b520:	1d00022e 	bgeu	r3,r20,20b52c <__udivdi3+0x468>
  20b524:	00800074 	movhi	r2,1
  20b528:	88a3883a 	add	r17,r17,r2
  20b52c:	1804d43a 	srli	r2,r3,16
  20b530:	1463883a 	add	r17,r2,r17
  20b534:	84404436 	bltu	r16,r17,20b648 <__udivdi3+0x584>
  20b538:	84403e26 	beq	r16,r17,20b634 <__udivdi3+0x570>
  20b53c:	9005883a 	mov	r2,r18
  20b540:	0007883a 	mov	r3,zero
  20b544:	003f9106 	br	20b38c <_gp+0xffdf97a8>
  20b548:	88e2983a 	sll	r17,r17,r3
  20b54c:	80aed83a 	srl	r23,r16,r2
  20b550:	80e0983a 	sll	r16,r16,r3
  20b554:	882ad43a 	srli	r21,r17,16
  20b558:	9884d83a 	srl	r2,r19,r2
  20b55c:	b809883a 	mov	r4,r23
  20b560:	a80b883a 	mov	r5,r21
  20b564:	98e4983a 	sll	r18,r19,r3
  20b568:	142cb03a 	or	r22,r2,r16
  20b56c:	0200bb00 	call	200bb0 <__umodsi3>
  20b570:	b809883a 	mov	r4,r23
  20b574:	a80b883a 	mov	r5,r21
  20b578:	1027883a 	mov	r19,r2
  20b57c:	8d3fffcc 	andi	r20,r17,65535
  20b580:	0200b4c0 	call	200b4c <__udivsi3>
  20b584:	a009883a 	mov	r4,r20
  20b588:	100b883a 	mov	r5,r2
  20b58c:	102f883a 	mov	r23,r2
  20b590:	020179c0 	call	20179c <__mulsi3>
  20b594:	9826943a 	slli	r19,r19,16
  20b598:	b008d43a 	srli	r4,r22,16
  20b59c:	24c8b03a 	or	r4,r4,r19
  20b5a0:	2080062e 	bgeu	r4,r2,20b5bc <__udivdi3+0x4f8>
  20b5a4:	2449883a 	add	r4,r4,r17
  20b5a8:	b8ffffc4 	addi	r3,r23,-1
  20b5ac:	24403c36 	bltu	r4,r17,20b6a0 <__udivdi3+0x5dc>
  20b5b0:	20803b2e 	bgeu	r4,r2,20b6a0 <__udivdi3+0x5dc>
  20b5b4:	bdffff84 	addi	r23,r23,-2
  20b5b8:	2449883a 	add	r4,r4,r17
  20b5bc:	20a1c83a 	sub	r16,r4,r2
  20b5c0:	a80b883a 	mov	r5,r21
  20b5c4:	8009883a 	mov	r4,r16
  20b5c8:	0200bb00 	call	200bb0 <__umodsi3>
  20b5cc:	a80b883a 	mov	r5,r21
  20b5d0:	8009883a 	mov	r4,r16
  20b5d4:	1027883a 	mov	r19,r2
  20b5d8:	0200b4c0 	call	200b4c <__udivsi3>
  20b5dc:	a009883a 	mov	r4,r20
  20b5e0:	100b883a 	mov	r5,r2
  20b5e4:	9826943a 	slli	r19,r19,16
  20b5e8:	1039883a 	mov	fp,r2
  20b5ec:	020179c0 	call	20179c <__mulsi3>
  20b5f0:	b13fffcc 	andi	r4,r22,65535
  20b5f4:	24c8b03a 	or	r4,r4,r19
  20b5f8:	2080062e 	bgeu	r4,r2,20b614 <__udivdi3+0x550>
  20b5fc:	2449883a 	add	r4,r4,r17
  20b600:	e0ffffc4 	addi	r3,fp,-1
  20b604:	24402436 	bltu	r4,r17,20b698 <__udivdi3+0x5d4>
  20b608:	2080232e 	bgeu	r4,r2,20b698 <__udivdi3+0x5d4>
  20b60c:	e73fff84 	addi	fp,fp,-2
  20b610:	2449883a 	add	r4,r4,r17
  20b614:	b82e943a 	slli	r23,r23,16
  20b618:	20a1c83a 	sub	r16,r4,r2
  20b61c:	bf06b03a 	or	r3,r23,fp
  20b620:	003f2806 	br	20b2c4 <_gp+0xffdf96e0>
  20b624:	2021883a 	mov	r16,r4
  20b628:	003f5306 	br	20b378 <_gp+0xffdf9794>
  20b62c:	1821883a 	mov	r16,r3
  20b630:	003ef406 	br	20b204 <_gp+0xffdf9620>
  20b634:	1806943a 	slli	r3,r3,16
  20b638:	9de6983a 	sll	r19,r19,r23
  20b63c:	e73fffcc 	andi	fp,fp,65535
  20b640:	1f07883a 	add	r3,r3,fp
  20b644:	98ffbd2e 	bgeu	r19,r3,20b53c <_gp+0xffdf9958>
  20b648:	90bfffc4 	addi	r2,r18,-1
  20b64c:	0007883a 	mov	r3,zero
  20b650:	003f4e06 	br	20b38c <_gp+0xffdf97a8>
  20b654:	00800604 	movi	r2,24
  20b658:	003ef506 	br	20b230 <_gp+0xffdf964c>
  20b65c:	00800604 	movi	r2,24
  20b660:	003f0b06 	br	20b290 <_gp+0xffdf96ac>
  20b664:	00800604 	movi	r2,24
  20b668:	003ead06 	br	20b120 <_gp+0xffdf953c>
  20b66c:	0007883a 	mov	r3,zero
  20b670:	00800044 	movi	r2,1
  20b674:	003f4506 	br	20b38c <_gp+0xffdf97a8>
  20b678:	80bf8e2e 	bgeu	r16,r2,20b4b4 <_gp+0xffdf98d0>
  20b67c:	8c7fff84 	addi	r17,r17,-2
  20b680:	8721883a 	add	r16,r16,fp
  20b684:	003f8c06 	br	20b4b8 <_gp+0xffdf98d4>
  20b688:	18bf762e 	bgeu	r3,r2,20b464 <_gp+0xffdf9880>
  20b68c:	ad7fff84 	addi	r21,r21,-2
  20b690:	1f07883a 	add	r3,r3,fp
  20b694:	003f7406 	br	20b468 <_gp+0xffdf9884>
  20b698:	1839883a 	mov	fp,r3
  20b69c:	003fdd06 	br	20b614 <_gp+0xffdf9a30>
  20b6a0:	182f883a 	mov	r23,r3
  20b6a4:	003fc506 	br	20b5bc <_gp+0xffdf99d8>
  20b6a8:	b5bfff84 	addi	r22,r22,-2
  20b6ac:	3c4f883a 	add	r7,r7,r17
  20b6b0:	003f1a06 	br	20b31c <_gp+0xffdf9738>
  20b6b4:	b5bfff84 	addi	r22,r22,-2
  20b6b8:	1c47883a 	add	r3,r3,r17
  20b6bc:	003ebc06 	br	20b1b0 <_gp+0xffdf95cc>

0020b6c0 <__umoddi3>:
  20b6c0:	defff304 	addi	sp,sp,-52
  20b6c4:	df000b15 	stw	fp,44(sp)
  20b6c8:	dc400415 	stw	r17,16(sp)
  20b6cc:	dc000315 	stw	r16,12(sp)
  20b6d0:	dfc00c15 	stw	ra,48(sp)
  20b6d4:	ddc00a15 	stw	r23,40(sp)
  20b6d8:	dd800915 	stw	r22,36(sp)
  20b6dc:	dd400815 	stw	r21,32(sp)
  20b6e0:	dd000715 	stw	r20,28(sp)
  20b6e4:	dcc00615 	stw	r19,24(sp)
  20b6e8:	dc800515 	stw	r18,20(sp)
  20b6ec:	2021883a 	mov	r16,r4
  20b6f0:	2823883a 	mov	r17,r5
  20b6f4:	2839883a 	mov	fp,r5
  20b6f8:	3800401e 	bne	r7,zero,20b7fc <__umoddi3+0x13c>
  20b6fc:	3027883a 	mov	r19,r6
  20b700:	2029883a 	mov	r20,r4
  20b704:	2980552e 	bgeu	r5,r6,20b85c <__umoddi3+0x19c>
  20b708:	00bfffd4 	movui	r2,65535
  20b70c:	1180a236 	bltu	r2,r6,20b998 <__umoddi3+0x2d8>
  20b710:	01003fc4 	movi	r4,255
  20b714:	2189803a 	cmpltu	r4,r4,r6
  20b718:	200890fa 	slli	r4,r4,3
  20b71c:	3104d83a 	srl	r2,r6,r4
  20b720:	00c00874 	movhi	r3,33
  20b724:	18cfff04 	addi	r3,r3,16380
  20b728:	1885883a 	add	r2,r3,r2
  20b72c:	10c00003 	ldbu	r3,0(r2)
  20b730:	00800804 	movi	r2,32
  20b734:	1909883a 	add	r4,r3,r4
  20b738:	1125c83a 	sub	r18,r2,r4
  20b73c:	90000526 	beq	r18,zero,20b754 <__umoddi3+0x94>
  20b740:	8ca2983a 	sll	r17,r17,r18
  20b744:	8108d83a 	srl	r4,r16,r4
  20b748:	34a6983a 	sll	r19,r6,r18
  20b74c:	84a8983a 	sll	r20,r16,r18
  20b750:	2478b03a 	or	fp,r4,r17
  20b754:	982cd43a 	srli	r22,r19,16
  20b758:	e009883a 	mov	r4,fp
  20b75c:	9dffffcc 	andi	r23,r19,65535
  20b760:	b00b883a 	mov	r5,r22
  20b764:	0200bb00 	call	200bb0 <__umodsi3>
  20b768:	b00b883a 	mov	r5,r22
  20b76c:	e009883a 	mov	r4,fp
  20b770:	102b883a 	mov	r21,r2
  20b774:	0200b4c0 	call	200b4c <__udivsi3>
  20b778:	100b883a 	mov	r5,r2
  20b77c:	b809883a 	mov	r4,r23
  20b780:	020179c0 	call	20179c <__mulsi3>
  20b784:	a82a943a 	slli	r21,r21,16
  20b788:	a006d43a 	srli	r3,r20,16
  20b78c:	1d46b03a 	or	r3,r3,r21
  20b790:	1880032e 	bgeu	r3,r2,20b7a0 <__umoddi3+0xe0>
  20b794:	1cc7883a 	add	r3,r3,r19
  20b798:	1cc00136 	bltu	r3,r19,20b7a0 <__umoddi3+0xe0>
  20b79c:	18813136 	bltu	r3,r2,20bc64 <__umoddi3+0x5a4>
  20b7a0:	18a1c83a 	sub	r16,r3,r2
  20b7a4:	b00b883a 	mov	r5,r22
  20b7a8:	8009883a 	mov	r4,r16
  20b7ac:	0200bb00 	call	200bb0 <__umodsi3>
  20b7b0:	b00b883a 	mov	r5,r22
  20b7b4:	8009883a 	mov	r4,r16
  20b7b8:	1023883a 	mov	r17,r2
  20b7bc:	0200b4c0 	call	200b4c <__udivsi3>
  20b7c0:	100b883a 	mov	r5,r2
  20b7c4:	b809883a 	mov	r4,r23
  20b7c8:	8822943a 	slli	r17,r17,16
  20b7cc:	020179c0 	call	20179c <__mulsi3>
  20b7d0:	a0ffffcc 	andi	r3,r20,65535
  20b7d4:	1c46b03a 	or	r3,r3,r17
  20b7d8:	1880042e 	bgeu	r3,r2,20b7ec <__umoddi3+0x12c>
  20b7dc:	1cc7883a 	add	r3,r3,r19
  20b7e0:	1cc00236 	bltu	r3,r19,20b7ec <__umoddi3+0x12c>
  20b7e4:	1880012e 	bgeu	r3,r2,20b7ec <__umoddi3+0x12c>
  20b7e8:	1cc7883a 	add	r3,r3,r19
  20b7ec:	1885c83a 	sub	r2,r3,r2
  20b7f0:	1484d83a 	srl	r2,r2,r18
  20b7f4:	0007883a 	mov	r3,zero
  20b7f8:	00005306 	br	20b948 <__umoddi3+0x288>
  20b7fc:	29c05036 	bltu	r5,r7,20b940 <__umoddi3+0x280>
  20b800:	00bfffd4 	movui	r2,65535
  20b804:	11c05c2e 	bgeu	r2,r7,20b978 <__umoddi3+0x2b8>
  20b808:	00804034 	movhi	r2,256
  20b80c:	10bfffc4 	addi	r2,r2,-1
  20b810:	11c10636 	bltu	r2,r7,20bc2c <__umoddi3+0x56c>
  20b814:	01000404 	movi	r4,16
  20b818:	3904d83a 	srl	r2,r7,r4
  20b81c:	00c00874 	movhi	r3,33
  20b820:	18cfff04 	addi	r3,r3,16380
  20b824:	1885883a 	add	r2,r3,r2
  20b828:	14c00003 	ldbu	r19,0(r2)
  20b82c:	00c00804 	movi	r3,32
  20b830:	9927883a 	add	r19,r19,r4
  20b834:	1ce9c83a 	sub	r20,r3,r19
  20b838:	a0005c1e 	bne	r20,zero,20b9ac <__umoddi3+0x2ec>
  20b83c:	3c400136 	bltu	r7,r17,20b844 <__umoddi3+0x184>
  20b840:	81810a36 	bltu	r16,r6,20bc6c <__umoddi3+0x5ac>
  20b844:	8185c83a 	sub	r2,r16,r6
  20b848:	89e3c83a 	sub	r17,r17,r7
  20b84c:	8089803a 	cmpltu	r4,r16,r2
  20b850:	8939c83a 	sub	fp,r17,r4
  20b854:	e007883a 	mov	r3,fp
  20b858:	00003b06 	br	20b948 <__umoddi3+0x288>
  20b85c:	3000041e 	bne	r6,zero,20b870 <__umoddi3+0x1b0>
  20b860:	000b883a 	mov	r5,zero
  20b864:	01000044 	movi	r4,1
  20b868:	0200b4c0 	call	200b4c <__udivsi3>
  20b86c:	1027883a 	mov	r19,r2
  20b870:	00bfffd4 	movui	r2,65535
  20b874:	14c0442e 	bgeu	r2,r19,20b988 <__umoddi3+0x2c8>
  20b878:	00804034 	movhi	r2,256
  20b87c:	10bfffc4 	addi	r2,r2,-1
  20b880:	14c0ec36 	bltu	r2,r19,20bc34 <__umoddi3+0x574>
  20b884:	00800404 	movi	r2,16
  20b888:	9886d83a 	srl	r3,r19,r2
  20b88c:	01000874 	movhi	r4,33
  20b890:	210fff04 	addi	r4,r4,16380
  20b894:	20c7883a 	add	r3,r4,r3
  20b898:	18c00003 	ldbu	r3,0(r3)
  20b89c:	1887883a 	add	r3,r3,r2
  20b8a0:	00800804 	movi	r2,32
  20b8a4:	10e5c83a 	sub	r18,r2,r3
  20b8a8:	9000ab1e 	bne	r18,zero,20bb58 <__umoddi3+0x498>
  20b8ac:	982cd43a 	srli	r22,r19,16
  20b8b0:	8ce3c83a 	sub	r17,r17,r19
  20b8b4:	9dffffcc 	andi	r23,r19,65535
  20b8b8:	b00b883a 	mov	r5,r22
  20b8bc:	8809883a 	mov	r4,r17
  20b8c0:	0200bb00 	call	200bb0 <__umodsi3>
  20b8c4:	b00b883a 	mov	r5,r22
  20b8c8:	8809883a 	mov	r4,r17
  20b8cc:	102b883a 	mov	r21,r2
  20b8d0:	0200b4c0 	call	200b4c <__udivsi3>
  20b8d4:	b80b883a 	mov	r5,r23
  20b8d8:	1009883a 	mov	r4,r2
  20b8dc:	020179c0 	call	20179c <__mulsi3>
  20b8e0:	a82a943a 	slli	r21,r21,16
  20b8e4:	a006d43a 	srli	r3,r20,16
  20b8e8:	1d46b03a 	or	r3,r3,r21
  20b8ec:	1880042e 	bgeu	r3,r2,20b900 <__umoddi3+0x240>
  20b8f0:	1cc7883a 	add	r3,r3,r19
  20b8f4:	1cc00236 	bltu	r3,r19,20b900 <__umoddi3+0x240>
  20b8f8:	1880012e 	bgeu	r3,r2,20b900 <__umoddi3+0x240>
  20b8fc:	1cc7883a 	add	r3,r3,r19
  20b900:	18a1c83a 	sub	r16,r3,r2
  20b904:	b00b883a 	mov	r5,r22
  20b908:	8009883a 	mov	r4,r16
  20b90c:	0200bb00 	call	200bb0 <__umodsi3>
  20b910:	1023883a 	mov	r17,r2
  20b914:	b00b883a 	mov	r5,r22
  20b918:	8009883a 	mov	r4,r16
  20b91c:	0200b4c0 	call	200b4c <__udivsi3>
  20b920:	8822943a 	slli	r17,r17,16
  20b924:	b80b883a 	mov	r5,r23
  20b928:	1009883a 	mov	r4,r2
  20b92c:	020179c0 	call	20179c <__mulsi3>
  20b930:	a53fffcc 	andi	r20,r20,65535
  20b934:	a446b03a 	or	r3,r20,r17
  20b938:	18bfac2e 	bgeu	r3,r2,20b7ec <_gp+0xffdf9c08>
  20b93c:	003fa706 	br	20b7dc <_gp+0xffdf9bf8>
  20b940:	2005883a 	mov	r2,r4
  20b944:	2807883a 	mov	r3,r5
  20b948:	dfc00c17 	ldw	ra,48(sp)
  20b94c:	df000b17 	ldw	fp,44(sp)
  20b950:	ddc00a17 	ldw	r23,40(sp)
  20b954:	dd800917 	ldw	r22,36(sp)
  20b958:	dd400817 	ldw	r21,32(sp)
  20b95c:	dd000717 	ldw	r20,28(sp)
  20b960:	dcc00617 	ldw	r19,24(sp)
  20b964:	dc800517 	ldw	r18,20(sp)
  20b968:	dc400417 	ldw	r17,16(sp)
  20b96c:	dc000317 	ldw	r16,12(sp)
  20b970:	dec00d04 	addi	sp,sp,52
  20b974:	f800283a 	ret
  20b978:	04c03fc4 	movi	r19,255
  20b97c:	99c9803a 	cmpltu	r4,r19,r7
  20b980:	200890fa 	slli	r4,r4,3
  20b984:	003fa406 	br	20b818 <_gp+0xffdf9c34>
  20b988:	00803fc4 	movi	r2,255
  20b98c:	14c5803a 	cmpltu	r2,r2,r19
  20b990:	100490fa 	slli	r2,r2,3
  20b994:	003fbc06 	br	20b888 <_gp+0xffdf9ca4>
  20b998:	00804034 	movhi	r2,256
  20b99c:	10bfffc4 	addi	r2,r2,-1
  20b9a0:	1180a636 	bltu	r2,r6,20bc3c <__umoddi3+0x57c>
  20b9a4:	01000404 	movi	r4,16
  20b9a8:	003f5c06 	br	20b71c <_gp+0xffdf9b38>
  20b9ac:	3d0e983a 	sll	r7,r7,r20
  20b9b0:	34ead83a 	srl	r21,r6,r19
  20b9b4:	8cc6d83a 	srl	r3,r17,r19
  20b9b8:	8d10983a 	sll	r8,r17,r20
  20b9bc:	3d6ab03a 	or	r21,r7,r21
  20b9c0:	a82cd43a 	srli	r22,r21,16
  20b9c4:	84e2d83a 	srl	r17,r16,r19
  20b9c8:	1809883a 	mov	r4,r3
  20b9cc:	b00b883a 	mov	r5,r22
  20b9d0:	8a22b03a 	or	r17,r17,r8
  20b9d4:	3524983a 	sll	r18,r6,r20
  20b9d8:	dc400015 	stw	r17,0(sp)
  20b9dc:	d8c00115 	stw	r3,4(sp)
  20b9e0:	0200bb00 	call	200bb0 <__umodsi3>
  20b9e4:	d8c00117 	ldw	r3,4(sp)
  20b9e8:	b00b883a 	mov	r5,r22
  20b9ec:	1039883a 	mov	fp,r2
  20b9f0:	1809883a 	mov	r4,r3
  20b9f4:	0200b4c0 	call	200b4c <__udivsi3>
  20b9f8:	adffffcc 	andi	r23,r21,65535
  20b9fc:	100b883a 	mov	r5,r2
  20ba00:	b809883a 	mov	r4,r23
  20ba04:	1023883a 	mov	r17,r2
  20ba08:	020179c0 	call	20179c <__mulsi3>
  20ba0c:	d9400017 	ldw	r5,0(sp)
  20ba10:	e008943a 	slli	r4,fp,16
  20ba14:	8520983a 	sll	r16,r16,r20
  20ba18:	2806d43a 	srli	r3,r5,16
  20ba1c:	1906b03a 	or	r3,r3,r4
  20ba20:	1880042e 	bgeu	r3,r2,20ba34 <__umoddi3+0x374>
  20ba24:	1d47883a 	add	r3,r3,r21
  20ba28:	893fffc4 	addi	r4,r17,-1
  20ba2c:	1d40892e 	bgeu	r3,r21,20bc54 <__umoddi3+0x594>
  20ba30:	2023883a 	mov	r17,r4
  20ba34:	18b9c83a 	sub	fp,r3,r2
  20ba38:	b00b883a 	mov	r5,r22
  20ba3c:	e009883a 	mov	r4,fp
  20ba40:	0200bb00 	call	200bb0 <__umodsi3>
  20ba44:	b00b883a 	mov	r5,r22
  20ba48:	e009883a 	mov	r4,fp
  20ba4c:	d8800215 	stw	r2,8(sp)
  20ba50:	0200b4c0 	call	200b4c <__udivsi3>
  20ba54:	100b883a 	mov	r5,r2
  20ba58:	b809883a 	mov	r4,r23
  20ba5c:	102d883a 	mov	r22,r2
  20ba60:	020179c0 	call	20179c <__mulsi3>
  20ba64:	d9800217 	ldw	r6,8(sp)
  20ba68:	d8c00017 	ldw	r3,0(sp)
  20ba6c:	300c943a 	slli	r6,r6,16
  20ba70:	1a3fffcc 	andi	r8,r3,65535
  20ba74:	4190b03a 	or	r8,r8,r6
  20ba78:	4080042e 	bgeu	r8,r2,20ba8c <__umoddi3+0x3cc>
  20ba7c:	4551883a 	add	r8,r8,r21
  20ba80:	b0ffffc4 	addi	r3,r22,-1
  20ba84:	45406f2e 	bgeu	r8,r21,20bc44 <__umoddi3+0x584>
  20ba88:	182d883a 	mov	r22,r3
  20ba8c:	880e943a 	slli	r7,r17,16
  20ba90:	9006d43a 	srli	r3,r18,16
  20ba94:	91bfffcc 	andi	r6,r18,65535
  20ba98:	3dacb03a 	or	r22,r7,r22
  20ba9c:	b02ed43a 	srli	r23,r22,16
  20baa0:	b5bfffcc 	andi	r22,r22,65535
  20baa4:	300b883a 	mov	r5,r6
  20baa8:	b009883a 	mov	r4,r22
  20baac:	40a3c83a 	sub	r17,r8,r2
  20bab0:	d8c00115 	stw	r3,4(sp)
  20bab4:	d9800215 	stw	r6,8(sp)
  20bab8:	020179c0 	call	20179c <__mulsi3>
  20babc:	d9800217 	ldw	r6,8(sp)
  20bac0:	b809883a 	mov	r4,r23
  20bac4:	1039883a 	mov	fp,r2
  20bac8:	300b883a 	mov	r5,r6
  20bacc:	020179c0 	call	20179c <__mulsi3>
  20bad0:	d8c00117 	ldw	r3,4(sp)
  20bad4:	b809883a 	mov	r4,r23
  20bad8:	d8800215 	stw	r2,8(sp)
  20badc:	180b883a 	mov	r5,r3
  20bae0:	020179c0 	call	20179c <__mulsi3>
  20bae4:	d8c00117 	ldw	r3,4(sp)
  20bae8:	b009883a 	mov	r4,r22
  20baec:	102f883a 	mov	r23,r2
  20baf0:	180b883a 	mov	r5,r3
  20baf4:	020179c0 	call	20179c <__mulsi3>
  20baf8:	d9800217 	ldw	r6,8(sp)
  20bafc:	e006d43a 	srli	r3,fp,16
  20bb00:	1185883a 	add	r2,r2,r6
  20bb04:	1885883a 	add	r2,r3,r2
  20bb08:	1180022e 	bgeu	r2,r6,20bb14 <__umoddi3+0x454>
  20bb0c:	00c00074 	movhi	r3,1
  20bb10:	b8ef883a 	add	r23,r23,r3
  20bb14:	1006d43a 	srli	r3,r2,16
  20bb18:	1004943a 	slli	r2,r2,16
  20bb1c:	e73fffcc 	andi	fp,fp,65535
  20bb20:	1dc7883a 	add	r3,r3,r23
  20bb24:	1739883a 	add	fp,r2,fp
  20bb28:	88c03a36 	bltu	r17,r3,20bc14 <__umoddi3+0x554>
  20bb2c:	88c05126 	beq	r17,r3,20bc74 <__umoddi3+0x5b4>
  20bb30:	88c9c83a 	sub	r4,r17,r3
  20bb34:	e00f883a 	mov	r7,fp
  20bb38:	81cfc83a 	sub	r7,r16,r7
  20bb3c:	81c7803a 	cmpltu	r3,r16,r7
  20bb40:	20c7c83a 	sub	r3,r4,r3
  20bb44:	1cc4983a 	sll	r2,r3,r19
  20bb48:	3d0ed83a 	srl	r7,r7,r20
  20bb4c:	1d06d83a 	srl	r3,r3,r20
  20bb50:	11c4b03a 	or	r2,r2,r7
  20bb54:	003f7c06 	br	20b948 <_gp+0xffdf9d64>
  20bb58:	9ca6983a 	sll	r19,r19,r18
  20bb5c:	88f8d83a 	srl	fp,r17,r3
  20bb60:	80c4d83a 	srl	r2,r16,r3
  20bb64:	982cd43a 	srli	r22,r19,16
  20bb68:	8ca2983a 	sll	r17,r17,r18
  20bb6c:	e009883a 	mov	r4,fp
  20bb70:	b00b883a 	mov	r5,r22
  20bb74:	146ab03a 	or	r21,r2,r17
  20bb78:	0200bb00 	call	200bb0 <__umodsi3>
  20bb7c:	b00b883a 	mov	r5,r22
  20bb80:	e009883a 	mov	r4,fp
  20bb84:	1029883a 	mov	r20,r2
  20bb88:	9dffffcc 	andi	r23,r19,65535
  20bb8c:	0200b4c0 	call	200b4c <__udivsi3>
  20bb90:	b809883a 	mov	r4,r23
  20bb94:	100b883a 	mov	r5,r2
  20bb98:	020179c0 	call	20179c <__mulsi3>
  20bb9c:	a008943a 	slli	r4,r20,16
  20bba0:	a806d43a 	srli	r3,r21,16
  20bba4:	84a8983a 	sll	r20,r16,r18
  20bba8:	1906b03a 	or	r3,r3,r4
  20bbac:	1880042e 	bgeu	r3,r2,20bbc0 <__umoddi3+0x500>
  20bbb0:	1cc7883a 	add	r3,r3,r19
  20bbb4:	1cc00236 	bltu	r3,r19,20bbc0 <__umoddi3+0x500>
  20bbb8:	1880012e 	bgeu	r3,r2,20bbc0 <__umoddi3+0x500>
  20bbbc:	1cc7883a 	add	r3,r3,r19
  20bbc0:	18a3c83a 	sub	r17,r3,r2
  20bbc4:	b00b883a 	mov	r5,r22
  20bbc8:	8809883a 	mov	r4,r17
  20bbcc:	0200bb00 	call	200bb0 <__umodsi3>
  20bbd0:	b00b883a 	mov	r5,r22
  20bbd4:	8809883a 	mov	r4,r17
  20bbd8:	1021883a 	mov	r16,r2
  20bbdc:	0200b4c0 	call	200b4c <__udivsi3>
  20bbe0:	100b883a 	mov	r5,r2
  20bbe4:	b809883a 	mov	r4,r23
  20bbe8:	8020943a 	slli	r16,r16,16
  20bbec:	020179c0 	call	20179c <__mulsi3>
  20bbf0:	a8ffffcc 	andi	r3,r21,65535
  20bbf4:	1c06b03a 	or	r3,r3,r16
  20bbf8:	1880042e 	bgeu	r3,r2,20bc0c <__umoddi3+0x54c>
  20bbfc:	1cc7883a 	add	r3,r3,r19
  20bc00:	1cc00236 	bltu	r3,r19,20bc0c <__umoddi3+0x54c>
  20bc04:	1880012e 	bgeu	r3,r2,20bc0c <__umoddi3+0x54c>
  20bc08:	1cc7883a 	add	r3,r3,r19
  20bc0c:	18a3c83a 	sub	r17,r3,r2
  20bc10:	003f2906 	br	20b8b8 <_gp+0xffdf9cd4>
  20bc14:	e48fc83a 	sub	r7,fp,r18
  20bc18:	1d49c83a 	sub	r4,r3,r21
  20bc1c:	e1f9803a 	cmpltu	fp,fp,r7
  20bc20:	2739c83a 	sub	fp,r4,fp
  20bc24:	8f09c83a 	sub	r4,r17,fp
  20bc28:	003fc306 	br	20bb38 <_gp+0xffdf9f54>
  20bc2c:	01000604 	movi	r4,24
  20bc30:	003ef906 	br	20b818 <_gp+0xffdf9c34>
  20bc34:	00800604 	movi	r2,24
  20bc38:	003f1306 	br	20b888 <_gp+0xffdf9ca4>
  20bc3c:	01000604 	movi	r4,24
  20bc40:	003eb606 	br	20b71c <_gp+0xffdf9b38>
  20bc44:	40bf902e 	bgeu	r8,r2,20ba88 <_gp+0xffdf9ea4>
  20bc48:	b5bfff84 	addi	r22,r22,-2
  20bc4c:	4551883a 	add	r8,r8,r21
  20bc50:	003f8e06 	br	20ba8c <_gp+0xffdf9ea8>
  20bc54:	18bf762e 	bgeu	r3,r2,20ba30 <_gp+0xffdf9e4c>
  20bc58:	8c7fff84 	addi	r17,r17,-2
  20bc5c:	1d47883a 	add	r3,r3,r21
  20bc60:	003f7406 	br	20ba34 <_gp+0xffdf9e50>
  20bc64:	1cc7883a 	add	r3,r3,r19
  20bc68:	003ecd06 	br	20b7a0 <_gp+0xffdf9bbc>
  20bc6c:	8005883a 	mov	r2,r16
  20bc70:	003ef806 	br	20b854 <_gp+0xffdf9c70>
  20bc74:	873fe736 	bltu	r16,fp,20bc14 <_gp+0xffdfa030>
  20bc78:	e00f883a 	mov	r7,fp
  20bc7c:	0009883a 	mov	r4,zero
  20bc80:	003fad06 	br	20bb38 <_gp+0xffdf9f54>

0020bc84 <__adddf3>:
  20bc84:	02c00434 	movhi	r11,16
  20bc88:	5affffc4 	addi	r11,r11,-1
  20bc8c:	2806d7fa 	srli	r3,r5,31
  20bc90:	2ad4703a 	and	r10,r5,r11
  20bc94:	3ad2703a 	and	r9,r7,r11
  20bc98:	3804d53a 	srli	r2,r7,20
  20bc9c:	3018d77a 	srli	r12,r6,29
  20bca0:	280ad53a 	srli	r5,r5,20
  20bca4:	501490fa 	slli	r10,r10,3
  20bca8:	2010d77a 	srli	r8,r4,29
  20bcac:	481290fa 	slli	r9,r9,3
  20bcb0:	380ed7fa 	srli	r7,r7,31
  20bcb4:	defffb04 	addi	sp,sp,-20
  20bcb8:	dc800215 	stw	r18,8(sp)
  20bcbc:	dc400115 	stw	r17,4(sp)
  20bcc0:	dc000015 	stw	r16,0(sp)
  20bcc4:	dfc00415 	stw	ra,16(sp)
  20bcc8:	dcc00315 	stw	r19,12(sp)
  20bccc:	1c803fcc 	andi	r18,r3,255
  20bcd0:	2c01ffcc 	andi	r16,r5,2047
  20bcd4:	5210b03a 	or	r8,r10,r8
  20bcd8:	202290fa 	slli	r17,r4,3
  20bcdc:	1081ffcc 	andi	r2,r2,2047
  20bce0:	4b12b03a 	or	r9,r9,r12
  20bce4:	300c90fa 	slli	r6,r6,3
  20bce8:	91c07526 	beq	r18,r7,20bec0 <__adddf3+0x23c>
  20bcec:	8087c83a 	sub	r3,r16,r2
  20bcf0:	00c0ab0e 	bge	zero,r3,20bfa0 <__adddf3+0x31c>
  20bcf4:	10002a1e 	bne	r2,zero,20bda0 <__adddf3+0x11c>
  20bcf8:	4984b03a 	or	r2,r9,r6
  20bcfc:	1000961e 	bne	r2,zero,20bf58 <__adddf3+0x2d4>
  20bd00:	888001cc 	andi	r2,r17,7
  20bd04:	10000726 	beq	r2,zero,20bd24 <__adddf3+0xa0>
  20bd08:	888003cc 	andi	r2,r17,15
  20bd0c:	00c00104 	movi	r3,4
  20bd10:	10c00426 	beq	r2,r3,20bd24 <__adddf3+0xa0>
  20bd14:	88c7883a 	add	r3,r17,r3
  20bd18:	1c63803a 	cmpltu	r17,r3,r17
  20bd1c:	4451883a 	add	r8,r8,r17
  20bd20:	1823883a 	mov	r17,r3
  20bd24:	4080202c 	andhi	r2,r8,128
  20bd28:	10005926 	beq	r2,zero,20be90 <__adddf3+0x20c>
  20bd2c:	84000044 	addi	r16,r16,1
  20bd30:	0081ffc4 	movi	r2,2047
  20bd34:	8080ba26 	beq	r16,r2,20c020 <__adddf3+0x39c>
  20bd38:	00bfe034 	movhi	r2,65408
  20bd3c:	10bfffc4 	addi	r2,r2,-1
  20bd40:	4090703a 	and	r8,r8,r2
  20bd44:	4004977a 	slli	r2,r8,29
  20bd48:	4010927a 	slli	r8,r8,9
  20bd4c:	8822d0fa 	srli	r17,r17,3
  20bd50:	8401ffcc 	andi	r16,r16,2047
  20bd54:	4010d33a 	srli	r8,r8,12
  20bd58:	9007883a 	mov	r3,r18
  20bd5c:	1444b03a 	or	r2,r2,r17
  20bd60:	8401ffcc 	andi	r16,r16,2047
  20bd64:	8020953a 	slli	r16,r16,20
  20bd68:	18c03fcc 	andi	r3,r3,255
  20bd6c:	01000434 	movhi	r4,16
  20bd70:	213fffc4 	addi	r4,r4,-1
  20bd74:	180697fa 	slli	r3,r3,31
  20bd78:	4110703a 	and	r8,r8,r4
  20bd7c:	4410b03a 	or	r8,r8,r16
  20bd80:	40c6b03a 	or	r3,r8,r3
  20bd84:	dfc00417 	ldw	ra,16(sp)
  20bd88:	dcc00317 	ldw	r19,12(sp)
  20bd8c:	dc800217 	ldw	r18,8(sp)
  20bd90:	dc400117 	ldw	r17,4(sp)
  20bd94:	dc000017 	ldw	r16,0(sp)
  20bd98:	dec00504 	addi	sp,sp,20
  20bd9c:	f800283a 	ret
  20bda0:	0081ffc4 	movi	r2,2047
  20bda4:	80bfd626 	beq	r16,r2,20bd00 <_gp+0xffdfa11c>
  20bda8:	4a402034 	orhi	r9,r9,128
  20bdac:	00800e04 	movi	r2,56
  20bdb0:	10c09f16 	blt	r2,r3,20c030 <__adddf3+0x3ac>
  20bdb4:	008007c4 	movi	r2,31
  20bdb8:	10c0c216 	blt	r2,r3,20c0c4 <__adddf3+0x440>
  20bdbc:	00800804 	movi	r2,32
  20bdc0:	10c5c83a 	sub	r2,r2,r3
  20bdc4:	488a983a 	sll	r5,r9,r2
  20bdc8:	30c8d83a 	srl	r4,r6,r3
  20bdcc:	3084983a 	sll	r2,r6,r2
  20bdd0:	48c6d83a 	srl	r3,r9,r3
  20bdd4:	290cb03a 	or	r6,r5,r4
  20bdd8:	1004c03a 	cmpne	r2,r2,zero
  20bddc:	308cb03a 	or	r6,r6,r2
  20bde0:	898dc83a 	sub	r6,r17,r6
  20bde4:	89a3803a 	cmpltu	r17,r17,r6
  20bde8:	40d1c83a 	sub	r8,r8,r3
  20bdec:	4451c83a 	sub	r8,r8,r17
  20bdf0:	3023883a 	mov	r17,r6
  20bdf4:	4080202c 	andhi	r2,r8,128
  20bdf8:	10002326 	beq	r2,zero,20be88 <__adddf3+0x204>
  20bdfc:	04c02034 	movhi	r19,128
  20be00:	9cffffc4 	addi	r19,r19,-1
  20be04:	44e6703a 	and	r19,r8,r19
  20be08:	98007626 	beq	r19,zero,20bfe4 <__adddf3+0x360>
  20be0c:	9809883a 	mov	r4,r19
  20be10:	02017380 	call	201738 <__clzsi2>
  20be14:	10fffe04 	addi	r3,r2,-8
  20be18:	010007c4 	movi	r4,31
  20be1c:	20c07716 	blt	r4,r3,20bffc <__adddf3+0x378>
  20be20:	00800804 	movi	r2,32
  20be24:	10c5c83a 	sub	r2,r2,r3
  20be28:	8884d83a 	srl	r2,r17,r2
  20be2c:	98d0983a 	sll	r8,r19,r3
  20be30:	88e2983a 	sll	r17,r17,r3
  20be34:	1204b03a 	or	r2,r2,r8
  20be38:	1c007416 	blt	r3,r16,20c00c <__adddf3+0x388>
  20be3c:	1c21c83a 	sub	r16,r3,r16
  20be40:	82000044 	addi	r8,r16,1
  20be44:	00c007c4 	movi	r3,31
  20be48:	1a009116 	blt	r3,r8,20c090 <__adddf3+0x40c>
  20be4c:	00c00804 	movi	r3,32
  20be50:	1a07c83a 	sub	r3,r3,r8
  20be54:	8a08d83a 	srl	r4,r17,r8
  20be58:	88e2983a 	sll	r17,r17,r3
  20be5c:	10c6983a 	sll	r3,r2,r3
  20be60:	1210d83a 	srl	r8,r2,r8
  20be64:	8804c03a 	cmpne	r2,r17,zero
  20be68:	1906b03a 	or	r3,r3,r4
  20be6c:	18a2b03a 	or	r17,r3,r2
  20be70:	0021883a 	mov	r16,zero
  20be74:	003fa206 	br	20bd00 <_gp+0xffdfa11c>
  20be78:	1890b03a 	or	r8,r3,r2
  20be7c:	40017d26 	beq	r8,zero,20c474 <__adddf3+0x7f0>
  20be80:	1011883a 	mov	r8,r2
  20be84:	1823883a 	mov	r17,r3
  20be88:	888001cc 	andi	r2,r17,7
  20be8c:	103f9e1e 	bne	r2,zero,20bd08 <_gp+0xffdfa124>
  20be90:	4004977a 	slli	r2,r8,29
  20be94:	8822d0fa 	srli	r17,r17,3
  20be98:	4010d0fa 	srli	r8,r8,3
  20be9c:	9007883a 	mov	r3,r18
  20bea0:	1444b03a 	or	r2,r2,r17
  20bea4:	0101ffc4 	movi	r4,2047
  20bea8:	81002426 	beq	r16,r4,20bf3c <__adddf3+0x2b8>
  20beac:	8120703a 	and	r16,r16,r4
  20beb0:	01000434 	movhi	r4,16
  20beb4:	213fffc4 	addi	r4,r4,-1
  20beb8:	4110703a 	and	r8,r8,r4
  20bebc:	003fa806 	br	20bd60 <_gp+0xffdfa17c>
  20bec0:	8089c83a 	sub	r4,r16,r2
  20bec4:	01005e0e 	bge	zero,r4,20c040 <__adddf3+0x3bc>
  20bec8:	10002b26 	beq	r2,zero,20bf78 <__adddf3+0x2f4>
  20becc:	0081ffc4 	movi	r2,2047
  20bed0:	80bf8b26 	beq	r16,r2,20bd00 <_gp+0xffdfa11c>
  20bed4:	4a402034 	orhi	r9,r9,128
  20bed8:	00800e04 	movi	r2,56
  20bedc:	1100a40e 	bge	r2,r4,20c170 <__adddf3+0x4ec>
  20bee0:	498cb03a 	or	r6,r9,r6
  20bee4:	300ac03a 	cmpne	r5,r6,zero
  20bee8:	0013883a 	mov	r9,zero
  20beec:	2c4b883a 	add	r5,r5,r17
  20bef0:	2c63803a 	cmpltu	r17,r5,r17
  20bef4:	4a11883a 	add	r8,r9,r8
  20bef8:	8a11883a 	add	r8,r17,r8
  20befc:	2823883a 	mov	r17,r5
  20bf00:	4080202c 	andhi	r2,r8,128
  20bf04:	103fe026 	beq	r2,zero,20be88 <_gp+0xffdfa2a4>
  20bf08:	84000044 	addi	r16,r16,1
  20bf0c:	0081ffc4 	movi	r2,2047
  20bf10:	8080d226 	beq	r16,r2,20c25c <__adddf3+0x5d8>
  20bf14:	00bfe034 	movhi	r2,65408
  20bf18:	10bfffc4 	addi	r2,r2,-1
  20bf1c:	4090703a 	and	r8,r8,r2
  20bf20:	880ad07a 	srli	r5,r17,1
  20bf24:	400897fa 	slli	r4,r8,31
  20bf28:	88c0004c 	andi	r3,r17,1
  20bf2c:	28e2b03a 	or	r17,r5,r3
  20bf30:	4010d07a 	srli	r8,r8,1
  20bf34:	2462b03a 	or	r17,r4,r17
  20bf38:	003f7106 	br	20bd00 <_gp+0xffdfa11c>
  20bf3c:	4088b03a 	or	r4,r8,r2
  20bf40:	20014526 	beq	r4,zero,20c458 <__adddf3+0x7d4>
  20bf44:	01000434 	movhi	r4,16
  20bf48:	42000234 	orhi	r8,r8,8
  20bf4c:	213fffc4 	addi	r4,r4,-1
  20bf50:	4110703a 	and	r8,r8,r4
  20bf54:	003f8206 	br	20bd60 <_gp+0xffdfa17c>
  20bf58:	18ffffc4 	addi	r3,r3,-1
  20bf5c:	1800491e 	bne	r3,zero,20c084 <__adddf3+0x400>
  20bf60:	898bc83a 	sub	r5,r17,r6
  20bf64:	8963803a 	cmpltu	r17,r17,r5
  20bf68:	4251c83a 	sub	r8,r8,r9
  20bf6c:	4451c83a 	sub	r8,r8,r17
  20bf70:	2823883a 	mov	r17,r5
  20bf74:	003f9f06 	br	20bdf4 <_gp+0xffdfa210>
  20bf78:	4984b03a 	or	r2,r9,r6
  20bf7c:	103f6026 	beq	r2,zero,20bd00 <_gp+0xffdfa11c>
  20bf80:	213fffc4 	addi	r4,r4,-1
  20bf84:	2000931e 	bne	r4,zero,20c1d4 <__adddf3+0x550>
  20bf88:	898d883a 	add	r6,r17,r6
  20bf8c:	3463803a 	cmpltu	r17,r6,r17
  20bf90:	4251883a 	add	r8,r8,r9
  20bf94:	8a11883a 	add	r8,r17,r8
  20bf98:	3023883a 	mov	r17,r6
  20bf9c:	003fd806 	br	20bf00 <_gp+0xffdfa31c>
  20bfa0:	1800541e 	bne	r3,zero,20c0f4 <__adddf3+0x470>
  20bfa4:	80800044 	addi	r2,r16,1
  20bfa8:	1081ffcc 	andi	r2,r2,2047
  20bfac:	00c00044 	movi	r3,1
  20bfb0:	1880a00e 	bge	r3,r2,20c234 <__adddf3+0x5b0>
  20bfb4:	8989c83a 	sub	r4,r17,r6
  20bfb8:	8905803a 	cmpltu	r2,r17,r4
  20bfbc:	4267c83a 	sub	r19,r8,r9
  20bfc0:	98a7c83a 	sub	r19,r19,r2
  20bfc4:	9880202c 	andhi	r2,r19,128
  20bfc8:	10006326 	beq	r2,zero,20c158 <__adddf3+0x4d4>
  20bfcc:	3463c83a 	sub	r17,r6,r17
  20bfd0:	4a07c83a 	sub	r3,r9,r8
  20bfd4:	344d803a 	cmpltu	r6,r6,r17
  20bfd8:	19a7c83a 	sub	r19,r3,r6
  20bfdc:	3825883a 	mov	r18,r7
  20bfe0:	983f8a1e 	bne	r19,zero,20be0c <_gp+0xffdfa228>
  20bfe4:	8809883a 	mov	r4,r17
  20bfe8:	02017380 	call	201738 <__clzsi2>
  20bfec:	10800804 	addi	r2,r2,32
  20bff0:	10fffe04 	addi	r3,r2,-8
  20bff4:	010007c4 	movi	r4,31
  20bff8:	20ff890e 	bge	r4,r3,20be20 <_gp+0xffdfa23c>
  20bffc:	10bff604 	addi	r2,r2,-40
  20c000:	8884983a 	sll	r2,r17,r2
  20c004:	0023883a 	mov	r17,zero
  20c008:	1c3f8c0e 	bge	r3,r16,20be3c <_gp+0xffdfa258>
  20c00c:	023fe034 	movhi	r8,65408
  20c010:	423fffc4 	addi	r8,r8,-1
  20c014:	80e1c83a 	sub	r16,r16,r3
  20c018:	1210703a 	and	r8,r2,r8
  20c01c:	003f3806 	br	20bd00 <_gp+0xffdfa11c>
  20c020:	9007883a 	mov	r3,r18
  20c024:	0011883a 	mov	r8,zero
  20c028:	0005883a 	mov	r2,zero
  20c02c:	003f4c06 	br	20bd60 <_gp+0xffdfa17c>
  20c030:	498cb03a 	or	r6,r9,r6
  20c034:	300cc03a 	cmpne	r6,r6,zero
  20c038:	0007883a 	mov	r3,zero
  20c03c:	003f6806 	br	20bde0 <_gp+0xffdfa1fc>
  20c040:	20009c1e 	bne	r4,zero,20c2b4 <__adddf3+0x630>
  20c044:	80800044 	addi	r2,r16,1
  20c048:	1141ffcc 	andi	r5,r2,2047
  20c04c:	01000044 	movi	r4,1
  20c050:	2140670e 	bge	r4,r5,20c1f0 <__adddf3+0x56c>
  20c054:	0101ffc4 	movi	r4,2047
  20c058:	11007f26 	beq	r2,r4,20c258 <__adddf3+0x5d4>
  20c05c:	898d883a 	add	r6,r17,r6
  20c060:	4247883a 	add	r3,r8,r9
  20c064:	3451803a 	cmpltu	r8,r6,r17
  20c068:	40d1883a 	add	r8,r8,r3
  20c06c:	402297fa 	slli	r17,r8,31
  20c070:	300cd07a 	srli	r6,r6,1
  20c074:	4010d07a 	srli	r8,r8,1
  20c078:	1021883a 	mov	r16,r2
  20c07c:	89a2b03a 	or	r17,r17,r6
  20c080:	003f1f06 	br	20bd00 <_gp+0xffdfa11c>
  20c084:	0081ffc4 	movi	r2,2047
  20c088:	80bf481e 	bne	r16,r2,20bdac <_gp+0xffdfa1c8>
  20c08c:	003f1c06 	br	20bd00 <_gp+0xffdfa11c>
  20c090:	843ff844 	addi	r16,r16,-31
  20c094:	01000804 	movi	r4,32
  20c098:	1406d83a 	srl	r3,r2,r16
  20c09c:	41005026 	beq	r8,r4,20c1e0 <__adddf3+0x55c>
  20c0a0:	01001004 	movi	r4,64
  20c0a4:	2211c83a 	sub	r8,r4,r8
  20c0a8:	1204983a 	sll	r2,r2,r8
  20c0ac:	88a2b03a 	or	r17,r17,r2
  20c0b0:	8822c03a 	cmpne	r17,r17,zero
  20c0b4:	1c62b03a 	or	r17,r3,r17
  20c0b8:	0011883a 	mov	r8,zero
  20c0bc:	0021883a 	mov	r16,zero
  20c0c0:	003f7106 	br	20be88 <_gp+0xffdfa2a4>
  20c0c4:	193ff804 	addi	r4,r3,-32
  20c0c8:	00800804 	movi	r2,32
  20c0cc:	4908d83a 	srl	r4,r9,r4
  20c0d0:	18804526 	beq	r3,r2,20c1e8 <__adddf3+0x564>
  20c0d4:	00801004 	movi	r2,64
  20c0d8:	10c5c83a 	sub	r2,r2,r3
  20c0dc:	4886983a 	sll	r3,r9,r2
  20c0e0:	198cb03a 	or	r6,r3,r6
  20c0e4:	300cc03a 	cmpne	r6,r6,zero
  20c0e8:	218cb03a 	or	r6,r4,r6
  20c0ec:	0007883a 	mov	r3,zero
  20c0f0:	003f3b06 	br	20bde0 <_gp+0xffdfa1fc>
  20c0f4:	80002a26 	beq	r16,zero,20c1a0 <__adddf3+0x51c>
  20c0f8:	0101ffc4 	movi	r4,2047
  20c0fc:	11006826 	beq	r2,r4,20c2a0 <__adddf3+0x61c>
  20c100:	00c7c83a 	sub	r3,zero,r3
  20c104:	42002034 	orhi	r8,r8,128
  20c108:	01000e04 	movi	r4,56
  20c10c:	20c07c16 	blt	r4,r3,20c300 <__adddf3+0x67c>
  20c110:	010007c4 	movi	r4,31
  20c114:	20c0da16 	blt	r4,r3,20c480 <__adddf3+0x7fc>
  20c118:	01000804 	movi	r4,32
  20c11c:	20c9c83a 	sub	r4,r4,r3
  20c120:	4114983a 	sll	r10,r8,r4
  20c124:	88cad83a 	srl	r5,r17,r3
  20c128:	8908983a 	sll	r4,r17,r4
  20c12c:	40c6d83a 	srl	r3,r8,r3
  20c130:	5162b03a 	or	r17,r10,r5
  20c134:	2008c03a 	cmpne	r4,r4,zero
  20c138:	8922b03a 	or	r17,r17,r4
  20c13c:	3463c83a 	sub	r17,r6,r17
  20c140:	48c7c83a 	sub	r3,r9,r3
  20c144:	344d803a 	cmpltu	r6,r6,r17
  20c148:	1991c83a 	sub	r8,r3,r6
  20c14c:	1021883a 	mov	r16,r2
  20c150:	3825883a 	mov	r18,r7
  20c154:	003f2706 	br	20bdf4 <_gp+0xffdfa210>
  20c158:	24d0b03a 	or	r8,r4,r19
  20c15c:	40001b1e 	bne	r8,zero,20c1cc <__adddf3+0x548>
  20c160:	0005883a 	mov	r2,zero
  20c164:	0007883a 	mov	r3,zero
  20c168:	0021883a 	mov	r16,zero
  20c16c:	003f4d06 	br	20bea4 <_gp+0xffdfa2c0>
  20c170:	008007c4 	movi	r2,31
  20c174:	11003c16 	blt	r2,r4,20c268 <__adddf3+0x5e4>
  20c178:	00800804 	movi	r2,32
  20c17c:	1105c83a 	sub	r2,r2,r4
  20c180:	488e983a 	sll	r7,r9,r2
  20c184:	310ad83a 	srl	r5,r6,r4
  20c188:	3084983a 	sll	r2,r6,r2
  20c18c:	4912d83a 	srl	r9,r9,r4
  20c190:	394ab03a 	or	r5,r7,r5
  20c194:	1004c03a 	cmpne	r2,r2,zero
  20c198:	288ab03a 	or	r5,r5,r2
  20c19c:	003f5306 	br	20beec <_gp+0xffdfa308>
  20c1a0:	4448b03a 	or	r4,r8,r17
  20c1a4:	20003e26 	beq	r4,zero,20c2a0 <__adddf3+0x61c>
  20c1a8:	00c6303a 	nor	r3,zero,r3
  20c1ac:	18003a1e 	bne	r3,zero,20c298 <__adddf3+0x614>
  20c1b0:	3463c83a 	sub	r17,r6,r17
  20c1b4:	4a07c83a 	sub	r3,r9,r8
  20c1b8:	344d803a 	cmpltu	r6,r6,r17
  20c1bc:	1991c83a 	sub	r8,r3,r6
  20c1c0:	1021883a 	mov	r16,r2
  20c1c4:	3825883a 	mov	r18,r7
  20c1c8:	003f0a06 	br	20bdf4 <_gp+0xffdfa210>
  20c1cc:	2023883a 	mov	r17,r4
  20c1d0:	003f0d06 	br	20be08 <_gp+0xffdfa224>
  20c1d4:	0081ffc4 	movi	r2,2047
  20c1d8:	80bf3f1e 	bne	r16,r2,20bed8 <_gp+0xffdfa2f4>
  20c1dc:	003ec806 	br	20bd00 <_gp+0xffdfa11c>
  20c1e0:	0005883a 	mov	r2,zero
  20c1e4:	003fb106 	br	20c0ac <_gp+0xffdfa4c8>
  20c1e8:	0007883a 	mov	r3,zero
  20c1ec:	003fbc06 	br	20c0e0 <_gp+0xffdfa4fc>
  20c1f0:	4444b03a 	or	r2,r8,r17
  20c1f4:	8000871e 	bne	r16,zero,20c414 <__adddf3+0x790>
  20c1f8:	1000ba26 	beq	r2,zero,20c4e4 <__adddf3+0x860>
  20c1fc:	4984b03a 	or	r2,r9,r6
  20c200:	103ebf26 	beq	r2,zero,20bd00 <_gp+0xffdfa11c>
  20c204:	8985883a 	add	r2,r17,r6
  20c208:	4247883a 	add	r3,r8,r9
  20c20c:	1451803a 	cmpltu	r8,r2,r17
  20c210:	40d1883a 	add	r8,r8,r3
  20c214:	40c0202c 	andhi	r3,r8,128
  20c218:	1023883a 	mov	r17,r2
  20c21c:	183f1a26 	beq	r3,zero,20be88 <_gp+0xffdfa2a4>
  20c220:	00bfe034 	movhi	r2,65408
  20c224:	10bfffc4 	addi	r2,r2,-1
  20c228:	2021883a 	mov	r16,r4
  20c22c:	4090703a 	and	r8,r8,r2
  20c230:	003eb306 	br	20bd00 <_gp+0xffdfa11c>
  20c234:	4444b03a 	or	r2,r8,r17
  20c238:	8000291e 	bne	r16,zero,20c2e0 <__adddf3+0x65c>
  20c23c:	10004b1e 	bne	r2,zero,20c36c <__adddf3+0x6e8>
  20c240:	4990b03a 	or	r8,r9,r6
  20c244:	40008b26 	beq	r8,zero,20c474 <__adddf3+0x7f0>
  20c248:	4811883a 	mov	r8,r9
  20c24c:	3023883a 	mov	r17,r6
  20c250:	3825883a 	mov	r18,r7
  20c254:	003eaa06 	br	20bd00 <_gp+0xffdfa11c>
  20c258:	1021883a 	mov	r16,r2
  20c25c:	0011883a 	mov	r8,zero
  20c260:	0005883a 	mov	r2,zero
  20c264:	003f0f06 	br	20bea4 <_gp+0xffdfa2c0>
  20c268:	217ff804 	addi	r5,r4,-32
  20c26c:	00800804 	movi	r2,32
  20c270:	494ad83a 	srl	r5,r9,r5
  20c274:	20807d26 	beq	r4,r2,20c46c <__adddf3+0x7e8>
  20c278:	00801004 	movi	r2,64
  20c27c:	1109c83a 	sub	r4,r2,r4
  20c280:	4912983a 	sll	r9,r9,r4
  20c284:	498cb03a 	or	r6,r9,r6
  20c288:	300cc03a 	cmpne	r6,r6,zero
  20c28c:	298ab03a 	or	r5,r5,r6
  20c290:	0013883a 	mov	r9,zero
  20c294:	003f1506 	br	20beec <_gp+0xffdfa308>
  20c298:	0101ffc4 	movi	r4,2047
  20c29c:	113f9a1e 	bne	r2,r4,20c108 <_gp+0xffdfa524>
  20c2a0:	4811883a 	mov	r8,r9
  20c2a4:	3023883a 	mov	r17,r6
  20c2a8:	1021883a 	mov	r16,r2
  20c2ac:	3825883a 	mov	r18,r7
  20c2b0:	003e9306 	br	20bd00 <_gp+0xffdfa11c>
  20c2b4:	8000161e 	bne	r16,zero,20c310 <__adddf3+0x68c>
  20c2b8:	444ab03a 	or	r5,r8,r17
  20c2bc:	28005126 	beq	r5,zero,20c404 <__adddf3+0x780>
  20c2c0:	0108303a 	nor	r4,zero,r4
  20c2c4:	20004d1e 	bne	r4,zero,20c3fc <__adddf3+0x778>
  20c2c8:	89a3883a 	add	r17,r17,r6
  20c2cc:	4253883a 	add	r9,r8,r9
  20c2d0:	898d803a 	cmpltu	r6,r17,r6
  20c2d4:	3251883a 	add	r8,r6,r9
  20c2d8:	1021883a 	mov	r16,r2
  20c2dc:	003f0806 	br	20bf00 <_gp+0xffdfa31c>
  20c2e0:	1000301e 	bne	r2,zero,20c3a4 <__adddf3+0x720>
  20c2e4:	4984b03a 	or	r2,r9,r6
  20c2e8:	10007126 	beq	r2,zero,20c4b0 <__adddf3+0x82c>
  20c2ec:	4811883a 	mov	r8,r9
  20c2f0:	3023883a 	mov	r17,r6
  20c2f4:	3825883a 	mov	r18,r7
  20c2f8:	0401ffc4 	movi	r16,2047
  20c2fc:	003e8006 	br	20bd00 <_gp+0xffdfa11c>
  20c300:	4462b03a 	or	r17,r8,r17
  20c304:	8822c03a 	cmpne	r17,r17,zero
  20c308:	0007883a 	mov	r3,zero
  20c30c:	003f8b06 	br	20c13c <_gp+0xffdfa558>
  20c310:	0141ffc4 	movi	r5,2047
  20c314:	11403b26 	beq	r2,r5,20c404 <__adddf3+0x780>
  20c318:	0109c83a 	sub	r4,zero,r4
  20c31c:	42002034 	orhi	r8,r8,128
  20c320:	01400e04 	movi	r5,56
  20c324:	29006716 	blt	r5,r4,20c4c4 <__adddf3+0x840>
  20c328:	014007c4 	movi	r5,31
  20c32c:	29007016 	blt	r5,r4,20c4f0 <__adddf3+0x86c>
  20c330:	01400804 	movi	r5,32
  20c334:	290bc83a 	sub	r5,r5,r4
  20c338:	4154983a 	sll	r10,r8,r5
  20c33c:	890ed83a 	srl	r7,r17,r4
  20c340:	894a983a 	sll	r5,r17,r5
  20c344:	4108d83a 	srl	r4,r8,r4
  20c348:	51e2b03a 	or	r17,r10,r7
  20c34c:	280ac03a 	cmpne	r5,r5,zero
  20c350:	8962b03a 	or	r17,r17,r5
  20c354:	89a3883a 	add	r17,r17,r6
  20c358:	2253883a 	add	r9,r4,r9
  20c35c:	898d803a 	cmpltu	r6,r17,r6
  20c360:	3251883a 	add	r8,r6,r9
  20c364:	1021883a 	mov	r16,r2
  20c368:	003ee506 	br	20bf00 <_gp+0xffdfa31c>
  20c36c:	4984b03a 	or	r2,r9,r6
  20c370:	103e6326 	beq	r2,zero,20bd00 <_gp+0xffdfa11c>
  20c374:	8987c83a 	sub	r3,r17,r6
  20c378:	88c9803a 	cmpltu	r4,r17,r3
  20c37c:	4245c83a 	sub	r2,r8,r9
  20c380:	1105c83a 	sub	r2,r2,r4
  20c384:	1100202c 	andhi	r4,r2,128
  20c388:	203ebb26 	beq	r4,zero,20be78 <_gp+0xffdfa294>
  20c38c:	3463c83a 	sub	r17,r6,r17
  20c390:	4a07c83a 	sub	r3,r9,r8
  20c394:	344d803a 	cmpltu	r6,r6,r17
  20c398:	1991c83a 	sub	r8,r3,r6
  20c39c:	3825883a 	mov	r18,r7
  20c3a0:	003e5706 	br	20bd00 <_gp+0xffdfa11c>
  20c3a4:	4984b03a 	or	r2,r9,r6
  20c3a8:	10002e26 	beq	r2,zero,20c464 <__adddf3+0x7e0>
  20c3ac:	4004d0fa 	srli	r2,r8,3
  20c3b0:	8822d0fa 	srli	r17,r17,3
  20c3b4:	4010977a 	slli	r8,r8,29
  20c3b8:	10c0022c 	andhi	r3,r2,8
  20c3bc:	4462b03a 	or	r17,r8,r17
  20c3c0:	18000826 	beq	r3,zero,20c3e4 <__adddf3+0x760>
  20c3c4:	4808d0fa 	srli	r4,r9,3
  20c3c8:	20c0022c 	andhi	r3,r4,8
  20c3cc:	1800051e 	bne	r3,zero,20c3e4 <__adddf3+0x760>
  20c3d0:	300cd0fa 	srli	r6,r6,3
  20c3d4:	4806977a 	slli	r3,r9,29
  20c3d8:	2005883a 	mov	r2,r4
  20c3dc:	3825883a 	mov	r18,r7
  20c3e0:	19a2b03a 	or	r17,r3,r6
  20c3e4:	8810d77a 	srli	r8,r17,29
  20c3e8:	100490fa 	slli	r2,r2,3
  20c3ec:	882290fa 	slli	r17,r17,3
  20c3f0:	0401ffc4 	movi	r16,2047
  20c3f4:	4090b03a 	or	r8,r8,r2
  20c3f8:	003e4106 	br	20bd00 <_gp+0xffdfa11c>
  20c3fc:	0141ffc4 	movi	r5,2047
  20c400:	117fc71e 	bne	r2,r5,20c320 <_gp+0xffdfa73c>
  20c404:	4811883a 	mov	r8,r9
  20c408:	3023883a 	mov	r17,r6
  20c40c:	1021883a 	mov	r16,r2
  20c410:	003e3b06 	br	20bd00 <_gp+0xffdfa11c>
  20c414:	10002f26 	beq	r2,zero,20c4d4 <__adddf3+0x850>
  20c418:	4984b03a 	or	r2,r9,r6
  20c41c:	10001126 	beq	r2,zero,20c464 <__adddf3+0x7e0>
  20c420:	4004d0fa 	srli	r2,r8,3
  20c424:	8822d0fa 	srli	r17,r17,3
  20c428:	4010977a 	slli	r8,r8,29
  20c42c:	10c0022c 	andhi	r3,r2,8
  20c430:	4462b03a 	or	r17,r8,r17
  20c434:	183feb26 	beq	r3,zero,20c3e4 <_gp+0xffdfa800>
  20c438:	4808d0fa 	srli	r4,r9,3
  20c43c:	20c0022c 	andhi	r3,r4,8
  20c440:	183fe81e 	bne	r3,zero,20c3e4 <_gp+0xffdfa800>
  20c444:	300cd0fa 	srli	r6,r6,3
  20c448:	4806977a 	slli	r3,r9,29
  20c44c:	2005883a 	mov	r2,r4
  20c450:	19a2b03a 	or	r17,r3,r6
  20c454:	003fe306 	br	20c3e4 <_gp+0xffdfa800>
  20c458:	0011883a 	mov	r8,zero
  20c45c:	0005883a 	mov	r2,zero
  20c460:	003e3f06 	br	20bd60 <_gp+0xffdfa17c>
  20c464:	0401ffc4 	movi	r16,2047
  20c468:	003e2506 	br	20bd00 <_gp+0xffdfa11c>
  20c46c:	0013883a 	mov	r9,zero
  20c470:	003f8406 	br	20c284 <_gp+0xffdfa6a0>
  20c474:	0005883a 	mov	r2,zero
  20c478:	0007883a 	mov	r3,zero
  20c47c:	003e8906 	br	20bea4 <_gp+0xffdfa2c0>
  20c480:	197ff804 	addi	r5,r3,-32
  20c484:	01000804 	movi	r4,32
  20c488:	414ad83a 	srl	r5,r8,r5
  20c48c:	19002426 	beq	r3,r4,20c520 <__adddf3+0x89c>
  20c490:	01001004 	movi	r4,64
  20c494:	20c7c83a 	sub	r3,r4,r3
  20c498:	40c6983a 	sll	r3,r8,r3
  20c49c:	1c46b03a 	or	r3,r3,r17
  20c4a0:	1806c03a 	cmpne	r3,r3,zero
  20c4a4:	28e2b03a 	or	r17,r5,r3
  20c4a8:	0007883a 	mov	r3,zero
  20c4ac:	003f2306 	br	20c13c <_gp+0xffdfa558>
  20c4b0:	0007883a 	mov	r3,zero
  20c4b4:	5811883a 	mov	r8,r11
  20c4b8:	00bfffc4 	movi	r2,-1
  20c4bc:	0401ffc4 	movi	r16,2047
  20c4c0:	003e7806 	br	20bea4 <_gp+0xffdfa2c0>
  20c4c4:	4462b03a 	or	r17,r8,r17
  20c4c8:	8822c03a 	cmpne	r17,r17,zero
  20c4cc:	0009883a 	mov	r4,zero
  20c4d0:	003fa006 	br	20c354 <_gp+0xffdfa770>
  20c4d4:	4811883a 	mov	r8,r9
  20c4d8:	3023883a 	mov	r17,r6
  20c4dc:	0401ffc4 	movi	r16,2047
  20c4e0:	003e0706 	br	20bd00 <_gp+0xffdfa11c>
  20c4e4:	4811883a 	mov	r8,r9
  20c4e8:	3023883a 	mov	r17,r6
  20c4ec:	003e0406 	br	20bd00 <_gp+0xffdfa11c>
  20c4f0:	21fff804 	addi	r7,r4,-32
  20c4f4:	01400804 	movi	r5,32
  20c4f8:	41ced83a 	srl	r7,r8,r7
  20c4fc:	21400a26 	beq	r4,r5,20c528 <__adddf3+0x8a4>
  20c500:	01401004 	movi	r5,64
  20c504:	2909c83a 	sub	r4,r5,r4
  20c508:	4108983a 	sll	r4,r8,r4
  20c50c:	2448b03a 	or	r4,r4,r17
  20c510:	2008c03a 	cmpne	r4,r4,zero
  20c514:	3922b03a 	or	r17,r7,r4
  20c518:	0009883a 	mov	r4,zero
  20c51c:	003f8d06 	br	20c354 <_gp+0xffdfa770>
  20c520:	0007883a 	mov	r3,zero
  20c524:	003fdd06 	br	20c49c <_gp+0xffdfa8b8>
  20c528:	0009883a 	mov	r4,zero
  20c52c:	003ff706 	br	20c50c <_gp+0xffdfa928>

0020c530 <__divdf3>:
  20c530:	defff004 	addi	sp,sp,-64
  20c534:	dc800815 	stw	r18,32(sp)
  20c538:	2824d53a 	srli	r18,r5,20
  20c53c:	dd800c15 	stw	r22,48(sp)
  20c540:	282cd7fa 	srli	r22,r5,31
  20c544:	dc000615 	stw	r16,24(sp)
  20c548:	04000434 	movhi	r16,16
  20c54c:	843fffc4 	addi	r16,r16,-1
  20c550:	dfc00f15 	stw	ra,60(sp)
  20c554:	df000e15 	stw	fp,56(sp)
  20c558:	ddc00d15 	stw	r23,52(sp)
  20c55c:	dd400b15 	stw	r21,44(sp)
  20c560:	dd000a15 	stw	r20,40(sp)
  20c564:	dcc00915 	stw	r19,36(sp)
  20c568:	dc400715 	stw	r17,28(sp)
  20c56c:	9481ffcc 	andi	r18,r18,2047
  20c570:	2c20703a 	and	r16,r5,r16
  20c574:	b2003fcc 	andi	r8,r22,255
  20c578:	90006126 	beq	r18,zero,20c700 <__divdf3+0x1d0>
  20c57c:	0081ffc4 	movi	r2,2047
  20c580:	202b883a 	mov	r21,r4
  20c584:	90803726 	beq	r18,r2,20c664 <__divdf3+0x134>
  20c588:	80800434 	orhi	r2,r16,16
  20c58c:	100490fa 	slli	r2,r2,3
  20c590:	2020d77a 	srli	r16,r4,29
  20c594:	202a90fa 	slli	r21,r4,3
  20c598:	94bf0044 	addi	r18,r18,-1023
  20c59c:	80a0b03a 	or	r16,r16,r2
  20c5a0:	0013883a 	mov	r9,zero
  20c5a4:	000b883a 	mov	r5,zero
  20c5a8:	3806d53a 	srli	r3,r7,20
  20c5ac:	382ed7fa 	srli	r23,r7,31
  20c5b0:	04400434 	movhi	r17,16
  20c5b4:	8c7fffc4 	addi	r17,r17,-1
  20c5b8:	18c1ffcc 	andi	r3,r3,2047
  20c5bc:	3029883a 	mov	r20,r6
  20c5c0:	3c62703a 	and	r17,r7,r17
  20c5c4:	bf003fcc 	andi	fp,r23,255
  20c5c8:	18006e26 	beq	r3,zero,20c784 <__divdf3+0x254>
  20c5cc:	0081ffc4 	movi	r2,2047
  20c5d0:	18806626 	beq	r3,r2,20c76c <__divdf3+0x23c>
  20c5d4:	88800434 	orhi	r2,r17,16
  20c5d8:	100490fa 	slli	r2,r2,3
  20c5dc:	3022d77a 	srli	r17,r6,29
  20c5e0:	302890fa 	slli	r20,r6,3
  20c5e4:	18ff0044 	addi	r3,r3,-1023
  20c5e8:	88a2b03a 	or	r17,r17,r2
  20c5ec:	000f883a 	mov	r7,zero
  20c5f0:	b5e6f03a 	xor	r19,r22,r23
  20c5f4:	3a4cb03a 	or	r6,r7,r9
  20c5f8:	008003c4 	movi	r2,15
  20c5fc:	9809883a 	mov	r4,r19
  20c600:	90c7c83a 	sub	r3,r18,r3
  20c604:	9cc03fcc 	andi	r19,r19,255
  20c608:	11809636 	bltu	r2,r6,20c864 <__divdf3+0x334>
  20c60c:	300c90ba 	slli	r6,r6,2
  20c610:	00800874 	movhi	r2,33
  20c614:	10b18904 	addi	r2,r2,-14812
  20c618:	308d883a 	add	r6,r6,r2
  20c61c:	30800017 	ldw	r2,0(r6)
  20c620:	1000683a 	jmp	r2
  20c624:	0020c864 	muli	zero,zero,-31967
  20c628:	0020c69c 	xori	zero,zero,33562
  20c62c:	0020c854 	movui	zero,33569
  20c630:	0020c690 	cmplti	zero,zero,-31974
  20c634:	0020c854 	movui	zero,33569
  20c638:	0020c828 	cmpgeui	zero,zero,33568
  20c63c:	0020c854 	movui	zero,33569
  20c640:	0020c690 	cmplti	zero,zero,-31974
  20c644:	0020c69c 	xori	zero,zero,33562
  20c648:	0020c69c 	xori	zero,zero,33562
  20c64c:	0020c828 	cmpgeui	zero,zero,33568
  20c650:	0020c690 	cmplti	zero,zero,-31974
  20c654:	0020c680 	call	20c68 <__alt_mem_onchip_flash_0_data-0x1df398>
  20c658:	0020c680 	call	20c68 <__alt_mem_onchip_flash_0_data-0x1df398>
  20c65c:	0020c680 	call	20c68 <__alt_mem_onchip_flash_0_data-0x1df398>
  20c660:	0020cbec 	andhi	zero,zero,33583
  20c664:	2404b03a 	or	r2,r4,r16
  20c668:	10006c1e 	bne	r2,zero,20c81c <__divdf3+0x2ec>
  20c66c:	02400204 	movi	r9,8
  20c670:	0021883a 	mov	r16,zero
  20c674:	002b883a 	mov	r21,zero
  20c678:	01400084 	movi	r5,2
  20c67c:	003fca06 	br	20c5a8 <_gp+0xffdfa9c4>
  20c680:	8023883a 	mov	r17,r16
  20c684:	a829883a 	mov	r20,r21
  20c688:	4039883a 	mov	fp,r8
  20c68c:	280f883a 	mov	r7,r5
  20c690:	00800084 	movi	r2,2
  20c694:	3881601e 	bne	r7,r2,20cc18 <__divdf3+0x6e8>
  20c698:	e027883a 	mov	r19,fp
  20c69c:	9900004c 	andi	r4,r19,1
  20c6a0:	0081ffc4 	movi	r2,2047
  20c6a4:	0021883a 	mov	r16,zero
  20c6a8:	002b883a 	mov	r21,zero
  20c6ac:	1004953a 	slli	r2,r2,20
  20c6b0:	20c03fcc 	andi	r3,r4,255
  20c6b4:	01400434 	movhi	r5,16
  20c6b8:	297fffc4 	addi	r5,r5,-1
  20c6bc:	180697fa 	slli	r3,r3,31
  20c6c0:	8160703a 	and	r16,r16,r5
  20c6c4:	80a0b03a 	or	r16,r16,r2
  20c6c8:	80c6b03a 	or	r3,r16,r3
  20c6cc:	a805883a 	mov	r2,r21
  20c6d0:	dfc00f17 	ldw	ra,60(sp)
  20c6d4:	df000e17 	ldw	fp,56(sp)
  20c6d8:	ddc00d17 	ldw	r23,52(sp)
  20c6dc:	dd800c17 	ldw	r22,48(sp)
  20c6e0:	dd400b17 	ldw	r21,44(sp)
  20c6e4:	dd000a17 	ldw	r20,40(sp)
  20c6e8:	dcc00917 	ldw	r19,36(sp)
  20c6ec:	dc800817 	ldw	r18,32(sp)
  20c6f0:	dc400717 	ldw	r17,28(sp)
  20c6f4:	dc000617 	ldw	r16,24(sp)
  20c6f8:	dec01004 	addi	sp,sp,64
  20c6fc:	f800283a 	ret
  20c700:	2404b03a 	or	r2,r4,r16
  20c704:	2023883a 	mov	r17,r4
  20c708:	10003f26 	beq	r2,zero,20c808 <__divdf3+0x2d8>
  20c70c:	80015e26 	beq	r16,zero,20cc88 <__divdf3+0x758>
  20c710:	8009883a 	mov	r4,r16
  20c714:	d9800215 	stw	r6,8(sp)
  20c718:	d9c00515 	stw	r7,20(sp)
  20c71c:	da000415 	stw	r8,16(sp)
  20c720:	02017380 	call	201738 <__clzsi2>
  20c724:	d9800217 	ldw	r6,8(sp)
  20c728:	d9c00517 	ldw	r7,20(sp)
  20c72c:	da000417 	ldw	r8,16(sp)
  20c730:	113ffd44 	addi	r4,r2,-11
  20c734:	00c00704 	movi	r3,28
  20c738:	19014f16 	blt	r3,r4,20cc78 <__divdf3+0x748>
  20c73c:	00c00744 	movi	r3,29
  20c740:	157ffe04 	addi	r21,r2,-8
  20c744:	1907c83a 	sub	r3,r3,r4
  20c748:	8560983a 	sll	r16,r16,r21
  20c74c:	88c6d83a 	srl	r3,r17,r3
  20c750:	8d6a983a 	sll	r21,r17,r21
  20c754:	1c20b03a 	or	r16,r3,r16
  20c758:	1080fcc4 	addi	r2,r2,1011
  20c75c:	00a5c83a 	sub	r18,zero,r2
  20c760:	0013883a 	mov	r9,zero
  20c764:	000b883a 	mov	r5,zero
  20c768:	003f8f06 	br	20c5a8 <_gp+0xffdfa9c4>
  20c76c:	3444b03a 	or	r2,r6,r17
  20c770:	1000231e 	bne	r2,zero,20c800 <__divdf3+0x2d0>
  20c774:	0023883a 	mov	r17,zero
  20c778:	0029883a 	mov	r20,zero
  20c77c:	01c00084 	movi	r7,2
  20c780:	003f9b06 	br	20c5f0 <_gp+0xffdfaa0c>
  20c784:	3444b03a 	or	r2,r6,r17
  20c788:	10001926 	beq	r2,zero,20c7f0 <__divdf3+0x2c0>
  20c78c:	88014b26 	beq	r17,zero,20ccbc <__divdf3+0x78c>
  20c790:	8809883a 	mov	r4,r17
  20c794:	d9400115 	stw	r5,4(sp)
  20c798:	d9800215 	stw	r6,8(sp)
  20c79c:	da000415 	stw	r8,16(sp)
  20c7a0:	da400315 	stw	r9,12(sp)
  20c7a4:	02017380 	call	201738 <__clzsi2>
  20c7a8:	d9400117 	ldw	r5,4(sp)
  20c7ac:	d9800217 	ldw	r6,8(sp)
  20c7b0:	da000417 	ldw	r8,16(sp)
  20c7b4:	da400317 	ldw	r9,12(sp)
  20c7b8:	113ffd44 	addi	r4,r2,-11
  20c7bc:	00c00704 	movi	r3,28
  20c7c0:	19013a16 	blt	r3,r4,20ccac <__divdf3+0x77c>
  20c7c4:	00c00744 	movi	r3,29
  20c7c8:	153ffe04 	addi	r20,r2,-8
  20c7cc:	1907c83a 	sub	r3,r3,r4
  20c7d0:	8d22983a 	sll	r17,r17,r20
  20c7d4:	30c6d83a 	srl	r3,r6,r3
  20c7d8:	3528983a 	sll	r20,r6,r20
  20c7dc:	1c62b03a 	or	r17,r3,r17
  20c7e0:	1080fcc4 	addi	r2,r2,1011
  20c7e4:	0087c83a 	sub	r3,zero,r2
  20c7e8:	000f883a 	mov	r7,zero
  20c7ec:	003f8006 	br	20c5f0 <_gp+0xffdfaa0c>
  20c7f0:	0023883a 	mov	r17,zero
  20c7f4:	0029883a 	mov	r20,zero
  20c7f8:	01c00044 	movi	r7,1
  20c7fc:	003f7c06 	br	20c5f0 <_gp+0xffdfaa0c>
  20c800:	01c000c4 	movi	r7,3
  20c804:	003f7a06 	br	20c5f0 <_gp+0xffdfaa0c>
  20c808:	02400104 	movi	r9,4
  20c80c:	0021883a 	mov	r16,zero
  20c810:	002b883a 	mov	r21,zero
  20c814:	01400044 	movi	r5,1
  20c818:	003f6306 	br	20c5a8 <_gp+0xffdfa9c4>
  20c81c:	02400304 	movi	r9,12
  20c820:	014000c4 	movi	r5,3
  20c824:	003f6006 	br	20c5a8 <_gp+0xffdfa9c4>
  20c828:	04000434 	movhi	r16,16
  20c82c:	0009883a 	mov	r4,zero
  20c830:	843fffc4 	addi	r16,r16,-1
  20c834:	057fffc4 	movi	r21,-1
  20c838:	0081ffc4 	movi	r2,2047
  20c83c:	003f9b06 	br	20c6ac <_gp+0xffdfaac8>
  20c840:	00c00044 	movi	r3,1
  20c844:	1887c83a 	sub	r3,r3,r2
  20c848:	01000e04 	movi	r4,56
  20c84c:	20c1530e 	bge	r4,r3,20cd9c <__divdf3+0x86c>
  20c850:	9900004c 	andi	r4,r19,1
  20c854:	0005883a 	mov	r2,zero
  20c858:	0021883a 	mov	r16,zero
  20c85c:	002b883a 	mov	r21,zero
  20c860:	003f9206 	br	20c6ac <_gp+0xffdfaac8>
  20c864:	8c012e36 	bltu	r17,r16,20cd20 <__divdf3+0x7f0>
  20c868:	84412c26 	beq	r16,r17,20cd1c <__divdf3+0x7ec>
  20c86c:	a82f883a 	mov	r23,r21
  20c870:	18ffffc4 	addi	r3,r3,-1
  20c874:	002b883a 	mov	r21,zero
  20c878:	a004d63a 	srli	r2,r20,24
  20c87c:	8822923a 	slli	r17,r17,8
  20c880:	a028923a 	slli	r20,r20,8
  20c884:	8009883a 	mov	r4,r16
  20c888:	88acb03a 	or	r22,r17,r2
  20c88c:	dd000015 	stw	r20,0(sp)
  20c890:	b028d43a 	srli	r20,r22,16
  20c894:	d8c00215 	stw	r3,8(sp)
  20c898:	b4bfffcc 	andi	r18,r22,65535
  20c89c:	a00b883a 	mov	r5,r20
  20c8a0:	0200b4c0 	call	200b4c <__udivsi3>
  20c8a4:	100b883a 	mov	r5,r2
  20c8a8:	9009883a 	mov	r4,r18
  20c8ac:	1023883a 	mov	r17,r2
  20c8b0:	020179c0 	call	20179c <__mulsi3>
  20c8b4:	8009883a 	mov	r4,r16
  20c8b8:	a00b883a 	mov	r5,r20
  20c8bc:	1039883a 	mov	fp,r2
  20c8c0:	0200bb00 	call	200bb0 <__umodsi3>
  20c8c4:	1004943a 	slli	r2,r2,16
  20c8c8:	b808d43a 	srli	r4,r23,16
  20c8cc:	d8c00217 	ldw	r3,8(sp)
  20c8d0:	2084b03a 	or	r2,r4,r2
  20c8d4:	1700062e 	bgeu	r2,fp,20c8f0 <__divdf3+0x3c0>
  20c8d8:	1585883a 	add	r2,r2,r22
  20c8dc:	893fffc4 	addi	r4,r17,-1
  20c8e0:	15811d36 	bltu	r2,r22,20cd58 <__divdf3+0x828>
  20c8e4:	17011c2e 	bgeu	r2,fp,20cd58 <__divdf3+0x828>
  20c8e8:	8c7fff84 	addi	r17,r17,-2
  20c8ec:	1585883a 	add	r2,r2,r22
  20c8f0:	1739c83a 	sub	fp,r2,fp
  20c8f4:	a00b883a 	mov	r5,r20
  20c8f8:	e009883a 	mov	r4,fp
  20c8fc:	d8c00215 	stw	r3,8(sp)
  20c900:	0200b4c0 	call	200b4c <__udivsi3>
  20c904:	100b883a 	mov	r5,r2
  20c908:	9009883a 	mov	r4,r18
  20c90c:	1021883a 	mov	r16,r2
  20c910:	020179c0 	call	20179c <__mulsi3>
  20c914:	a00b883a 	mov	r5,r20
  20c918:	e009883a 	mov	r4,fp
  20c91c:	d8800415 	stw	r2,16(sp)
  20c920:	0200bb00 	call	200bb0 <__umodsi3>
  20c924:	1004943a 	slli	r2,r2,16
  20c928:	da000417 	ldw	r8,16(sp)
  20c92c:	bdffffcc 	andi	r23,r23,65535
  20c930:	b884b03a 	or	r2,r23,r2
  20c934:	d8c00217 	ldw	r3,8(sp)
  20c938:	1200062e 	bgeu	r2,r8,20c954 <__divdf3+0x424>
  20c93c:	1585883a 	add	r2,r2,r22
  20c940:	813fffc4 	addi	r4,r16,-1
  20c944:	15810236 	bltu	r2,r22,20cd50 <__divdf3+0x820>
  20c948:	1201012e 	bgeu	r2,r8,20cd50 <__divdf3+0x820>
  20c94c:	843fff84 	addi	r16,r16,-2
  20c950:	1585883a 	add	r2,r2,r22
  20c954:	8822943a 	slli	r17,r17,16
  20c958:	d9800017 	ldw	r6,0(sp)
  20c95c:	1211c83a 	sub	r8,r2,r8
  20c960:	8c22b03a 	or	r17,r17,r16
  20c964:	373fffcc 	andi	fp,r6,65535
  20c968:	8abfffcc 	andi	r10,r17,65535
  20c96c:	8820d43a 	srli	r16,r17,16
  20c970:	5009883a 	mov	r4,r10
  20c974:	e00b883a 	mov	r5,fp
  20c978:	302ed43a 	srli	r23,r6,16
  20c97c:	d8c00215 	stw	r3,8(sp)
  20c980:	da000415 	stw	r8,16(sp)
  20c984:	da800115 	stw	r10,4(sp)
  20c988:	020179c0 	call	20179c <__mulsi3>
  20c98c:	800b883a 	mov	r5,r16
  20c990:	e009883a 	mov	r4,fp
  20c994:	d8800515 	stw	r2,20(sp)
  20c998:	020179c0 	call	20179c <__mulsi3>
  20c99c:	8009883a 	mov	r4,r16
  20c9a0:	b80b883a 	mov	r5,r23
  20c9a4:	d8800315 	stw	r2,12(sp)
  20c9a8:	020179c0 	call	20179c <__mulsi3>
  20c9ac:	da800117 	ldw	r10,4(sp)
  20c9b0:	b80b883a 	mov	r5,r23
  20c9b4:	1021883a 	mov	r16,r2
  20c9b8:	5009883a 	mov	r4,r10
  20c9bc:	020179c0 	call	20179c <__mulsi3>
  20c9c0:	d9c00517 	ldw	r7,20(sp)
  20c9c4:	da400317 	ldw	r9,12(sp)
  20c9c8:	d8c00217 	ldw	r3,8(sp)
  20c9cc:	3808d43a 	srli	r4,r7,16
  20c9d0:	1245883a 	add	r2,r2,r9
  20c9d4:	da000417 	ldw	r8,16(sp)
  20c9d8:	2085883a 	add	r2,r4,r2
  20c9dc:	1240022e 	bgeu	r2,r9,20c9e8 <__divdf3+0x4b8>
  20c9e0:	01000074 	movhi	r4,1
  20c9e4:	8121883a 	add	r16,r16,r4
  20c9e8:	1008d43a 	srli	r4,r2,16
  20c9ec:	1004943a 	slli	r2,r2,16
  20c9f0:	39ffffcc 	andi	r7,r7,65535
  20c9f4:	2409883a 	add	r4,r4,r16
  20c9f8:	11c5883a 	add	r2,r2,r7
  20c9fc:	4100bb36 	bltu	r8,r4,20ccec <__divdf3+0x7bc>
  20ca00:	4100d726 	beq	r8,r4,20cd60 <__divdf3+0x830>
  20ca04:	4109c83a 	sub	r4,r8,r4
  20ca08:	a8a1c83a 	sub	r16,r21,r2
  20ca0c:	ac2b803a 	cmpltu	r21,r21,r16
  20ca10:	256bc83a 	sub	r21,r4,r21
  20ca14:	b540d926 	beq	r22,r21,20cd7c <__divdf3+0x84c>
  20ca18:	a00b883a 	mov	r5,r20
  20ca1c:	a809883a 	mov	r4,r21
  20ca20:	d8c00215 	stw	r3,8(sp)
  20ca24:	0200b4c0 	call	200b4c <__udivsi3>
  20ca28:	100b883a 	mov	r5,r2
  20ca2c:	9009883a 	mov	r4,r18
  20ca30:	d8800515 	stw	r2,20(sp)
  20ca34:	020179c0 	call	20179c <__mulsi3>
  20ca38:	a809883a 	mov	r4,r21
  20ca3c:	a00b883a 	mov	r5,r20
  20ca40:	d8800415 	stw	r2,16(sp)
  20ca44:	0200bb00 	call	200bb0 <__umodsi3>
  20ca48:	1004943a 	slli	r2,r2,16
  20ca4c:	8008d43a 	srli	r4,r16,16
  20ca50:	da000417 	ldw	r8,16(sp)
  20ca54:	d8c00217 	ldw	r3,8(sp)
  20ca58:	2084b03a 	or	r2,r4,r2
  20ca5c:	d9c00517 	ldw	r7,20(sp)
  20ca60:	1200062e 	bgeu	r2,r8,20ca7c <__divdf3+0x54c>
  20ca64:	1585883a 	add	r2,r2,r22
  20ca68:	393fffc4 	addi	r4,r7,-1
  20ca6c:	1580c536 	bltu	r2,r22,20cd84 <__divdf3+0x854>
  20ca70:	1200c42e 	bgeu	r2,r8,20cd84 <__divdf3+0x854>
  20ca74:	39ffff84 	addi	r7,r7,-2
  20ca78:	1585883a 	add	r2,r2,r22
  20ca7c:	122bc83a 	sub	r21,r2,r8
  20ca80:	a00b883a 	mov	r5,r20
  20ca84:	a809883a 	mov	r4,r21
  20ca88:	d8c00215 	stw	r3,8(sp)
  20ca8c:	d9c00515 	stw	r7,20(sp)
  20ca90:	0200b4c0 	call	200b4c <__udivsi3>
  20ca94:	9009883a 	mov	r4,r18
  20ca98:	100b883a 	mov	r5,r2
  20ca9c:	d8800415 	stw	r2,16(sp)
  20caa0:	020179c0 	call	20179c <__mulsi3>
  20caa4:	a809883a 	mov	r4,r21
  20caa8:	a00b883a 	mov	r5,r20
  20caac:	1025883a 	mov	r18,r2
  20cab0:	0200bb00 	call	200bb0 <__umodsi3>
  20cab4:	1004943a 	slli	r2,r2,16
  20cab8:	813fffcc 	andi	r4,r16,65535
  20cabc:	d8c00217 	ldw	r3,8(sp)
  20cac0:	20a0b03a 	or	r16,r4,r2
  20cac4:	d9c00517 	ldw	r7,20(sp)
  20cac8:	da000417 	ldw	r8,16(sp)
  20cacc:	8480062e 	bgeu	r16,r18,20cae8 <__divdf3+0x5b8>
  20cad0:	85a1883a 	add	r16,r16,r22
  20cad4:	40bfffc4 	addi	r2,r8,-1
  20cad8:	8580ac36 	bltu	r16,r22,20cd8c <__divdf3+0x85c>
  20cadc:	8480ab2e 	bgeu	r16,r18,20cd8c <__divdf3+0x85c>
  20cae0:	423fff84 	addi	r8,r8,-2
  20cae4:	85a1883a 	add	r16,r16,r22
  20cae8:	3804943a 	slli	r2,r7,16
  20caec:	84a1c83a 	sub	r16,r16,r18
  20caf0:	e009883a 	mov	r4,fp
  20caf4:	1228b03a 	or	r20,r2,r8
  20caf8:	a1ffffcc 	andi	r7,r20,65535
  20cafc:	a024d43a 	srli	r18,r20,16
  20cb00:	380b883a 	mov	r5,r7
  20cb04:	d8c00215 	stw	r3,8(sp)
  20cb08:	d9c00515 	stw	r7,20(sp)
  20cb0c:	020179c0 	call	20179c <__mulsi3>
  20cb10:	900b883a 	mov	r5,r18
  20cb14:	e009883a 	mov	r4,fp
  20cb18:	102b883a 	mov	r21,r2
  20cb1c:	020179c0 	call	20179c <__mulsi3>
  20cb20:	900b883a 	mov	r5,r18
  20cb24:	b809883a 	mov	r4,r23
  20cb28:	1039883a 	mov	fp,r2
  20cb2c:	020179c0 	call	20179c <__mulsi3>
  20cb30:	d9c00517 	ldw	r7,20(sp)
  20cb34:	b80b883a 	mov	r5,r23
  20cb38:	1025883a 	mov	r18,r2
  20cb3c:	3809883a 	mov	r4,r7
  20cb40:	020179c0 	call	20179c <__mulsi3>
  20cb44:	a808d43a 	srli	r4,r21,16
  20cb48:	1705883a 	add	r2,r2,fp
  20cb4c:	d8c00217 	ldw	r3,8(sp)
  20cb50:	2085883a 	add	r2,r4,r2
  20cb54:	1700022e 	bgeu	r2,fp,20cb60 <__divdf3+0x630>
  20cb58:	01000074 	movhi	r4,1
  20cb5c:	9125883a 	add	r18,r18,r4
  20cb60:	1008d43a 	srli	r4,r2,16
  20cb64:	1004943a 	slli	r2,r2,16
  20cb68:	ad7fffcc 	andi	r21,r21,65535
  20cb6c:	2489883a 	add	r4,r4,r18
  20cb70:	1545883a 	add	r2,r2,r21
  20cb74:	81003836 	bltu	r16,r4,20cc58 <__divdf3+0x728>
  20cb78:	81003626 	beq	r16,r4,20cc54 <__divdf3+0x724>
  20cb7c:	a5000054 	ori	r20,r20,1
  20cb80:	1880ffc4 	addi	r2,r3,1023
  20cb84:	00bf2e0e 	bge	zero,r2,20c840 <_gp+0xffdfac5c>
  20cb88:	a10001cc 	andi	r4,r20,7
  20cb8c:	20000726 	beq	r4,zero,20cbac <__divdf3+0x67c>
  20cb90:	a10003cc 	andi	r4,r20,15
  20cb94:	01400104 	movi	r5,4
  20cb98:	21400426 	beq	r4,r5,20cbac <__divdf3+0x67c>
  20cb9c:	a149883a 	add	r4,r20,r5
  20cba0:	2529803a 	cmpltu	r20,r4,r20
  20cba4:	8d23883a 	add	r17,r17,r20
  20cba8:	2029883a 	mov	r20,r4
  20cbac:	8900402c 	andhi	r4,r17,256
  20cbb0:	20000426 	beq	r4,zero,20cbc4 <__divdf3+0x694>
  20cbb4:	18810004 	addi	r2,r3,1024
  20cbb8:	00ffc034 	movhi	r3,65280
  20cbbc:	18ffffc4 	addi	r3,r3,-1
  20cbc0:	88e2703a 	and	r17,r17,r3
  20cbc4:	00c1ff84 	movi	r3,2046
  20cbc8:	18beb416 	blt	r3,r2,20c69c <_gp+0xffdfaab8>
  20cbcc:	a028d0fa 	srli	r20,r20,3
  20cbd0:	882a977a 	slli	r21,r17,29
  20cbd4:	8820927a 	slli	r16,r17,9
  20cbd8:	1081ffcc 	andi	r2,r2,2047
  20cbdc:	ad2ab03a 	or	r21,r21,r20
  20cbe0:	8020d33a 	srli	r16,r16,12
  20cbe4:	9900004c 	andi	r4,r19,1
  20cbe8:	003eb006 	br	20c6ac <_gp+0xffdfaac8>
  20cbec:	8080022c 	andhi	r2,r16,8
  20cbf0:	10001226 	beq	r2,zero,20cc3c <__divdf3+0x70c>
  20cbf4:	8880022c 	andhi	r2,r17,8
  20cbf8:	1000101e 	bne	r2,zero,20cc3c <__divdf3+0x70c>
  20cbfc:	00800434 	movhi	r2,16
  20cc00:	8c000234 	orhi	r16,r17,8
  20cc04:	10bfffc4 	addi	r2,r2,-1
  20cc08:	b809883a 	mov	r4,r23
  20cc0c:	80a0703a 	and	r16,r16,r2
  20cc10:	a02b883a 	mov	r21,r20
  20cc14:	003f0806 	br	20c838 <_gp+0xffdfac54>
  20cc18:	008000c4 	movi	r2,3
  20cc1c:	3880b126 	beq	r7,r2,20cee4 <__divdf3+0x9b4>
  20cc20:	00800044 	movi	r2,1
  20cc24:	38805b1e 	bne	r7,r2,20cd94 <__divdf3+0x864>
  20cc28:	e009883a 	mov	r4,fp
  20cc2c:	0005883a 	mov	r2,zero
  20cc30:	0021883a 	mov	r16,zero
  20cc34:	002b883a 	mov	r21,zero
  20cc38:	003e9c06 	br	20c6ac <_gp+0xffdfaac8>
  20cc3c:	00800434 	movhi	r2,16
  20cc40:	84000234 	orhi	r16,r16,8
  20cc44:	10bfffc4 	addi	r2,r2,-1
  20cc48:	b009883a 	mov	r4,r22
  20cc4c:	80a0703a 	and	r16,r16,r2
  20cc50:	003ef906 	br	20c838 <_gp+0xffdfac54>
  20cc54:	103fca26 	beq	r2,zero,20cb80 <_gp+0xffdfaf9c>
  20cc58:	b421883a 	add	r16,r22,r16
  20cc5c:	a17fffc4 	addi	r5,r20,-1
  20cc60:	8580422e 	bgeu	r16,r22,20cd6c <__divdf3+0x83c>
  20cc64:	2829883a 	mov	r20,r5
  20cc68:	813fc41e 	bne	r16,r4,20cb7c <_gp+0xffdfaf98>
  20cc6c:	d9800017 	ldw	r6,0(sp)
  20cc70:	30bfc21e 	bne	r6,r2,20cb7c <_gp+0xffdfaf98>
  20cc74:	003fc206 	br	20cb80 <_gp+0xffdfaf9c>
  20cc78:	143ff604 	addi	r16,r2,-40
  20cc7c:	8c20983a 	sll	r16,r17,r16
  20cc80:	002b883a 	mov	r21,zero
  20cc84:	003eb406 	br	20c758 <_gp+0xffdfab74>
  20cc88:	d9800215 	stw	r6,8(sp)
  20cc8c:	d9c00515 	stw	r7,20(sp)
  20cc90:	da000415 	stw	r8,16(sp)
  20cc94:	02017380 	call	201738 <__clzsi2>
  20cc98:	10800804 	addi	r2,r2,32
  20cc9c:	da000417 	ldw	r8,16(sp)
  20cca0:	d9c00517 	ldw	r7,20(sp)
  20cca4:	d9800217 	ldw	r6,8(sp)
  20cca8:	003ea106 	br	20c730 <_gp+0xffdfab4c>
  20ccac:	147ff604 	addi	r17,r2,-40
  20ccb0:	3462983a 	sll	r17,r6,r17
  20ccb4:	0029883a 	mov	r20,zero
  20ccb8:	003ec906 	br	20c7e0 <_gp+0xffdfabfc>
  20ccbc:	3009883a 	mov	r4,r6
  20ccc0:	d9400115 	stw	r5,4(sp)
  20ccc4:	d9800215 	stw	r6,8(sp)
  20ccc8:	da000415 	stw	r8,16(sp)
  20cccc:	da400315 	stw	r9,12(sp)
  20ccd0:	02017380 	call	201738 <__clzsi2>
  20ccd4:	10800804 	addi	r2,r2,32
  20ccd8:	da400317 	ldw	r9,12(sp)
  20ccdc:	da000417 	ldw	r8,16(sp)
  20cce0:	d9800217 	ldw	r6,8(sp)
  20cce4:	d9400117 	ldw	r5,4(sp)
  20cce8:	003eb306 	br	20c7b8 <_gp+0xffdfabd4>
  20ccec:	d9800017 	ldw	r6,0(sp)
  20ccf0:	a9ab883a 	add	r21,r21,r6
  20ccf4:	a98b803a 	cmpltu	r5,r21,r6
  20ccf8:	2d8b883a 	add	r5,r5,r22
  20ccfc:	2a11883a 	add	r8,r5,r8
  20cd00:	897fffc4 	addi	r5,r17,-1
  20cd04:	b2000c2e 	bgeu	r22,r8,20cd38 <__divdf3+0x808>
  20cd08:	41003f36 	bltu	r8,r4,20ce08 <__divdf3+0x8d8>
  20cd0c:	22006c26 	beq	r4,r8,20cec0 <__divdf3+0x990>
  20cd10:	4109c83a 	sub	r4,r8,r4
  20cd14:	2823883a 	mov	r17,r5
  20cd18:	003f3b06 	br	20ca08 <_gp+0xffdfae24>
  20cd1c:	ad3ed336 	bltu	r21,r20,20c86c <_gp+0xffdfac88>
  20cd20:	a804d07a 	srli	r2,r21,1
  20cd24:	802e97fa 	slli	r23,r16,31
  20cd28:	a82a97fa 	slli	r21,r21,31
  20cd2c:	8020d07a 	srli	r16,r16,1
  20cd30:	b8aeb03a 	or	r23,r23,r2
  20cd34:	003ed006 	br	20c878 <_gp+0xffdfac94>
  20cd38:	b23ff51e 	bne	r22,r8,20cd10 <_gp+0xffdfb12c>
  20cd3c:	d9800017 	ldw	r6,0(sp)
  20cd40:	a9bff12e 	bgeu	r21,r6,20cd08 <_gp+0xffdfb124>
  20cd44:	b109c83a 	sub	r4,r22,r4
  20cd48:	2823883a 	mov	r17,r5
  20cd4c:	003f2e06 	br	20ca08 <_gp+0xffdfae24>
  20cd50:	2021883a 	mov	r16,r4
  20cd54:	003eff06 	br	20c954 <_gp+0xffdfad70>
  20cd58:	2023883a 	mov	r17,r4
  20cd5c:	003ee406 	br	20c8f0 <_gp+0xffdfad0c>
  20cd60:	a8bfe236 	bltu	r21,r2,20ccec <_gp+0xffdfb108>
  20cd64:	0009883a 	mov	r4,zero
  20cd68:	003f2706 	br	20ca08 <_gp+0xffdfae24>
  20cd6c:	81002d36 	bltu	r16,r4,20ce24 <__divdf3+0x8f4>
  20cd70:	24005626 	beq	r4,r16,20cecc <__divdf3+0x99c>
  20cd74:	2829883a 	mov	r20,r5
  20cd78:	003f8006 	br	20cb7c <_gp+0xffdfaf98>
  20cd7c:	053fffc4 	movi	r20,-1
  20cd80:	003f7f06 	br	20cb80 <_gp+0xffdfaf9c>
  20cd84:	200f883a 	mov	r7,r4
  20cd88:	003f3c06 	br	20ca7c <_gp+0xffdfae98>
  20cd8c:	1011883a 	mov	r8,r2
  20cd90:	003f5506 	br	20cae8 <_gp+0xffdfaf04>
  20cd94:	e027883a 	mov	r19,fp
  20cd98:	003f7906 	br	20cb80 <_gp+0xffdfaf9c>
  20cd9c:	010007c4 	movi	r4,31
  20cda0:	20c02816 	blt	r4,r3,20ce44 <__divdf3+0x914>
  20cda4:	00800804 	movi	r2,32
  20cda8:	10c5c83a 	sub	r2,r2,r3
  20cdac:	888a983a 	sll	r5,r17,r2
  20cdb0:	a0c8d83a 	srl	r4,r20,r3
  20cdb4:	a084983a 	sll	r2,r20,r2
  20cdb8:	88e2d83a 	srl	r17,r17,r3
  20cdbc:	2906b03a 	or	r3,r5,r4
  20cdc0:	1004c03a 	cmpne	r2,r2,zero
  20cdc4:	1886b03a 	or	r3,r3,r2
  20cdc8:	188001cc 	andi	r2,r3,7
  20cdcc:	10000726 	beq	r2,zero,20cdec <__divdf3+0x8bc>
  20cdd0:	188003cc 	andi	r2,r3,15
  20cdd4:	01000104 	movi	r4,4
  20cdd8:	11000426 	beq	r2,r4,20cdec <__divdf3+0x8bc>
  20cddc:	1805883a 	mov	r2,r3
  20cde0:	10c00104 	addi	r3,r2,4
  20cde4:	1885803a 	cmpltu	r2,r3,r2
  20cde8:	88a3883a 	add	r17,r17,r2
  20cdec:	8880202c 	andhi	r2,r17,128
  20cdf0:	10002926 	beq	r2,zero,20ce98 <__divdf3+0x968>
  20cdf4:	9900004c 	andi	r4,r19,1
  20cdf8:	00800044 	movi	r2,1
  20cdfc:	0021883a 	mov	r16,zero
  20ce00:	002b883a 	mov	r21,zero
  20ce04:	003e2906 	br	20c6ac <_gp+0xffdfaac8>
  20ce08:	d9800017 	ldw	r6,0(sp)
  20ce0c:	8c7fff84 	addi	r17,r17,-2
  20ce10:	a9ab883a 	add	r21,r21,r6
  20ce14:	a98b803a 	cmpltu	r5,r21,r6
  20ce18:	2d8b883a 	add	r5,r5,r22
  20ce1c:	2a11883a 	add	r8,r5,r8
  20ce20:	003ef806 	br	20ca04 <_gp+0xffdfae20>
  20ce24:	d9800017 	ldw	r6,0(sp)
  20ce28:	318f883a 	add	r7,r6,r6
  20ce2c:	398b803a 	cmpltu	r5,r7,r6
  20ce30:	2d8d883a 	add	r6,r5,r22
  20ce34:	81a1883a 	add	r16,r16,r6
  20ce38:	a17fff84 	addi	r5,r20,-2
  20ce3c:	d9c00015 	stw	r7,0(sp)
  20ce40:	003f8806 	br	20cc64 <_gp+0xffdfb080>
  20ce44:	013ff844 	movi	r4,-31
  20ce48:	2085c83a 	sub	r2,r4,r2
  20ce4c:	8888d83a 	srl	r4,r17,r2
  20ce50:	00800804 	movi	r2,32
  20ce54:	18802126 	beq	r3,r2,20cedc <__divdf3+0x9ac>
  20ce58:	04001004 	movi	r16,64
  20ce5c:	80c7c83a 	sub	r3,r16,r3
  20ce60:	88e0983a 	sll	r16,r17,r3
  20ce64:	8504b03a 	or	r2,r16,r20
  20ce68:	1004c03a 	cmpne	r2,r2,zero
  20ce6c:	2084b03a 	or	r2,r4,r2
  20ce70:	144001cc 	andi	r17,r2,7
  20ce74:	88000d1e 	bne	r17,zero,20ceac <__divdf3+0x97c>
  20ce78:	0021883a 	mov	r16,zero
  20ce7c:	102ad0fa 	srli	r21,r2,3
  20ce80:	9900004c 	andi	r4,r19,1
  20ce84:	0005883a 	mov	r2,zero
  20ce88:	ac6ab03a 	or	r21,r21,r17
  20ce8c:	003e0706 	br	20c6ac <_gp+0xffdfaac8>
  20ce90:	1007883a 	mov	r3,r2
  20ce94:	0023883a 	mov	r17,zero
  20ce98:	8820927a 	slli	r16,r17,9
  20ce9c:	1805883a 	mov	r2,r3
  20cea0:	8822977a 	slli	r17,r17,29
  20cea4:	8020d33a 	srli	r16,r16,12
  20cea8:	003ff406 	br	20ce7c <_gp+0xffdfb298>
  20ceac:	10c003cc 	andi	r3,r2,15
  20ceb0:	01000104 	movi	r4,4
  20ceb4:	193ff626 	beq	r3,r4,20ce90 <_gp+0xffdfb2ac>
  20ceb8:	0023883a 	mov	r17,zero
  20cebc:	003fc806 	br	20cde0 <_gp+0xffdfb1fc>
  20cec0:	a8bfd136 	bltu	r21,r2,20ce08 <_gp+0xffdfb224>
  20cec4:	2823883a 	mov	r17,r5
  20cec8:	003fa606 	br	20cd64 <_gp+0xffdfb180>
  20cecc:	d9800017 	ldw	r6,0(sp)
  20ced0:	30bfd436 	bltu	r6,r2,20ce24 <_gp+0xffdfb240>
  20ced4:	2829883a 	mov	r20,r5
  20ced8:	003f6406 	br	20cc6c <_gp+0xffdfb088>
  20cedc:	0021883a 	mov	r16,zero
  20cee0:	003fe006 	br	20ce64 <_gp+0xffdfb280>
  20cee4:	00800434 	movhi	r2,16
  20cee8:	8c000234 	orhi	r16,r17,8
  20ceec:	10bfffc4 	addi	r2,r2,-1
  20cef0:	e009883a 	mov	r4,fp
  20cef4:	80a0703a 	and	r16,r16,r2
  20cef8:	a02b883a 	mov	r21,r20
  20cefc:	003e4e06 	br	20c838 <_gp+0xffdfac54>

0020cf00 <__eqdf2>:
  20cf00:	2804d53a 	srli	r2,r5,20
  20cf04:	3806d53a 	srli	r3,r7,20
  20cf08:	02000434 	movhi	r8,16
  20cf0c:	423fffc4 	addi	r8,r8,-1
  20cf10:	1081ffcc 	andi	r2,r2,2047
  20cf14:	0281ffc4 	movi	r10,2047
  20cf18:	2a12703a 	and	r9,r5,r8
  20cf1c:	18c1ffcc 	andi	r3,r3,2047
  20cf20:	3a10703a 	and	r8,r7,r8
  20cf24:	280ad7fa 	srli	r5,r5,31
  20cf28:	380ed7fa 	srli	r7,r7,31
  20cf2c:	12801026 	beq	r2,r10,20cf70 <__eqdf2+0x70>
  20cf30:	0281ffc4 	movi	r10,2047
  20cf34:	1a800a26 	beq	r3,r10,20cf60 <__eqdf2+0x60>
  20cf38:	10c00226 	beq	r2,r3,20cf44 <__eqdf2+0x44>
  20cf3c:	00800044 	movi	r2,1
  20cf40:	f800283a 	ret
  20cf44:	4a3ffd1e 	bne	r9,r8,20cf3c <_gp+0xffdfb358>
  20cf48:	21bffc1e 	bne	r4,r6,20cf3c <_gp+0xffdfb358>
  20cf4c:	29c00c26 	beq	r5,r7,20cf80 <__eqdf2+0x80>
  20cf50:	103ffa1e 	bne	r2,zero,20cf3c <_gp+0xffdfb358>
  20cf54:	2244b03a 	or	r2,r4,r9
  20cf58:	1004c03a 	cmpne	r2,r2,zero
  20cf5c:	f800283a 	ret
  20cf60:	3214b03a 	or	r10,r6,r8
  20cf64:	503ff426 	beq	r10,zero,20cf38 <_gp+0xffdfb354>
  20cf68:	00800044 	movi	r2,1
  20cf6c:	f800283a 	ret
  20cf70:	2254b03a 	or	r10,r4,r9
  20cf74:	503fee26 	beq	r10,zero,20cf30 <_gp+0xffdfb34c>
  20cf78:	00800044 	movi	r2,1
  20cf7c:	f800283a 	ret
  20cf80:	0005883a 	mov	r2,zero
  20cf84:	f800283a 	ret

0020cf88 <__gedf2>:
  20cf88:	2804d53a 	srli	r2,r5,20
  20cf8c:	3806d53a 	srli	r3,r7,20
  20cf90:	02000434 	movhi	r8,16
  20cf94:	423fffc4 	addi	r8,r8,-1
  20cf98:	1081ffcc 	andi	r2,r2,2047
  20cf9c:	0241ffc4 	movi	r9,2047
  20cfa0:	2a14703a 	and	r10,r5,r8
  20cfa4:	18c1ffcc 	andi	r3,r3,2047
  20cfa8:	3a10703a 	and	r8,r7,r8
  20cfac:	280ad7fa 	srli	r5,r5,31
  20cfb0:	380ed7fa 	srli	r7,r7,31
  20cfb4:	12401d26 	beq	r2,r9,20d02c <__gedf2+0xa4>
  20cfb8:	0241ffc4 	movi	r9,2047
  20cfbc:	1a401226 	beq	r3,r9,20d008 <__gedf2+0x80>
  20cfc0:	1000081e 	bne	r2,zero,20cfe4 <__gedf2+0x5c>
  20cfc4:	2296b03a 	or	r11,r4,r10
  20cfc8:	5813003a 	cmpeq	r9,r11,zero
  20cfcc:	1800091e 	bne	r3,zero,20cff4 <__gedf2+0x6c>
  20cfd0:	3218b03a 	or	r12,r6,r8
  20cfd4:	6000071e 	bne	r12,zero,20cff4 <__gedf2+0x6c>
  20cfd8:	0005883a 	mov	r2,zero
  20cfdc:	5800101e 	bne	r11,zero,20d020 <__gedf2+0x98>
  20cfe0:	f800283a 	ret
  20cfe4:	18000c1e 	bne	r3,zero,20d018 <__gedf2+0x90>
  20cfe8:	3212b03a 	or	r9,r6,r8
  20cfec:	48000c26 	beq	r9,zero,20d020 <__gedf2+0x98>
  20cff0:	0013883a 	mov	r9,zero
  20cff4:	39c03fcc 	andi	r7,r7,255
  20cff8:	48000826 	beq	r9,zero,20d01c <__gedf2+0x94>
  20cffc:	38000926 	beq	r7,zero,20d024 <__gedf2+0x9c>
  20d000:	00800044 	movi	r2,1
  20d004:	f800283a 	ret
  20d008:	3212b03a 	or	r9,r6,r8
  20d00c:	483fec26 	beq	r9,zero,20cfc0 <_gp+0xffdfb3dc>
  20d010:	00bfff84 	movi	r2,-2
  20d014:	f800283a 	ret
  20d018:	39c03fcc 	andi	r7,r7,255
  20d01c:	29c00626 	beq	r5,r7,20d038 <__gedf2+0xb0>
  20d020:	283ff726 	beq	r5,zero,20d000 <_gp+0xffdfb41c>
  20d024:	00bfffc4 	movi	r2,-1
  20d028:	f800283a 	ret
  20d02c:	2292b03a 	or	r9,r4,r10
  20d030:	483fe126 	beq	r9,zero,20cfb8 <_gp+0xffdfb3d4>
  20d034:	003ff606 	br	20d010 <_gp+0xffdfb42c>
  20d038:	18bff916 	blt	r3,r2,20d020 <_gp+0xffdfb43c>
  20d03c:	10c00316 	blt	r2,r3,20d04c <__gedf2+0xc4>
  20d040:	42bff736 	bltu	r8,r10,20d020 <_gp+0xffdfb43c>
  20d044:	52000326 	beq	r10,r8,20d054 <__gedf2+0xcc>
  20d048:	5200042e 	bgeu	r10,r8,20d05c <__gedf2+0xd4>
  20d04c:	283fec1e 	bne	r5,zero,20d000 <_gp+0xffdfb41c>
  20d050:	003ff406 	br	20d024 <_gp+0xffdfb440>
  20d054:	313ff236 	bltu	r6,r4,20d020 <_gp+0xffdfb43c>
  20d058:	21bffc36 	bltu	r4,r6,20d04c <_gp+0xffdfb468>
  20d05c:	0005883a 	mov	r2,zero
  20d060:	f800283a 	ret

0020d064 <__ledf2>:
  20d064:	2804d53a 	srli	r2,r5,20
  20d068:	3810d53a 	srli	r8,r7,20
  20d06c:	00c00434 	movhi	r3,16
  20d070:	18ffffc4 	addi	r3,r3,-1
  20d074:	1081ffcc 	andi	r2,r2,2047
  20d078:	0241ffc4 	movi	r9,2047
  20d07c:	28d4703a 	and	r10,r5,r3
  20d080:	4201ffcc 	andi	r8,r8,2047
  20d084:	38c6703a 	and	r3,r7,r3
  20d088:	280ad7fa 	srli	r5,r5,31
  20d08c:	380ed7fa 	srli	r7,r7,31
  20d090:	12401f26 	beq	r2,r9,20d110 <__ledf2+0xac>
  20d094:	0241ffc4 	movi	r9,2047
  20d098:	42401426 	beq	r8,r9,20d0ec <__ledf2+0x88>
  20d09c:	1000091e 	bne	r2,zero,20d0c4 <__ledf2+0x60>
  20d0a0:	2296b03a 	or	r11,r4,r10
  20d0a4:	5813003a 	cmpeq	r9,r11,zero
  20d0a8:	29403fcc 	andi	r5,r5,255
  20d0ac:	40000a1e 	bne	r8,zero,20d0d8 <__ledf2+0x74>
  20d0b0:	30d8b03a 	or	r12,r6,r3
  20d0b4:	6000081e 	bne	r12,zero,20d0d8 <__ledf2+0x74>
  20d0b8:	0005883a 	mov	r2,zero
  20d0bc:	5800111e 	bne	r11,zero,20d104 <__ledf2+0xa0>
  20d0c0:	f800283a 	ret
  20d0c4:	29403fcc 	andi	r5,r5,255
  20d0c8:	40000c1e 	bne	r8,zero,20d0fc <__ledf2+0x98>
  20d0cc:	30d2b03a 	or	r9,r6,r3
  20d0d0:	48000c26 	beq	r9,zero,20d104 <__ledf2+0xa0>
  20d0d4:	0013883a 	mov	r9,zero
  20d0d8:	39c03fcc 	andi	r7,r7,255
  20d0dc:	48000826 	beq	r9,zero,20d100 <__ledf2+0x9c>
  20d0e0:	38001126 	beq	r7,zero,20d128 <__ledf2+0xc4>
  20d0e4:	00800044 	movi	r2,1
  20d0e8:	f800283a 	ret
  20d0ec:	30d2b03a 	or	r9,r6,r3
  20d0f0:	483fea26 	beq	r9,zero,20d09c <_gp+0xffdfb4b8>
  20d0f4:	00800084 	movi	r2,2
  20d0f8:	f800283a 	ret
  20d0fc:	39c03fcc 	andi	r7,r7,255
  20d100:	39400726 	beq	r7,r5,20d120 <__ledf2+0xbc>
  20d104:	2800081e 	bne	r5,zero,20d128 <__ledf2+0xc4>
  20d108:	00800044 	movi	r2,1
  20d10c:	f800283a 	ret
  20d110:	2292b03a 	or	r9,r4,r10
  20d114:	483fdf26 	beq	r9,zero,20d094 <_gp+0xffdfb4b0>
  20d118:	00800084 	movi	r2,2
  20d11c:	f800283a 	ret
  20d120:	4080030e 	bge	r8,r2,20d130 <__ledf2+0xcc>
  20d124:	383fef26 	beq	r7,zero,20d0e4 <_gp+0xffdfb500>
  20d128:	00bfffc4 	movi	r2,-1
  20d12c:	f800283a 	ret
  20d130:	123feb16 	blt	r2,r8,20d0e0 <_gp+0xffdfb4fc>
  20d134:	1abff336 	bltu	r3,r10,20d104 <_gp+0xffdfb520>
  20d138:	50c00326 	beq	r10,r3,20d148 <__ledf2+0xe4>
  20d13c:	50c0042e 	bgeu	r10,r3,20d150 <__ledf2+0xec>
  20d140:	283fe81e 	bne	r5,zero,20d0e4 <_gp+0xffdfb500>
  20d144:	003ff806 	br	20d128 <_gp+0xffdfb544>
  20d148:	313fee36 	bltu	r6,r4,20d104 <_gp+0xffdfb520>
  20d14c:	21bffc36 	bltu	r4,r6,20d140 <_gp+0xffdfb55c>
  20d150:	0005883a 	mov	r2,zero
  20d154:	f800283a 	ret

0020d158 <__muldf3>:
  20d158:	deffee04 	addi	sp,sp,-72
  20d15c:	dd000c15 	stw	r20,48(sp)
  20d160:	2828d53a 	srli	r20,r5,20
  20d164:	ddc00f15 	stw	r23,60(sp)
  20d168:	282ed7fa 	srli	r23,r5,31
  20d16c:	dc000815 	stw	r16,32(sp)
  20d170:	04000434 	movhi	r16,16
  20d174:	dcc00b15 	stw	r19,44(sp)
  20d178:	843fffc4 	addi	r16,r16,-1
  20d17c:	dfc01115 	stw	ra,68(sp)
  20d180:	df001015 	stw	fp,64(sp)
  20d184:	dd800e15 	stw	r22,56(sp)
  20d188:	dd400d15 	stw	r21,52(sp)
  20d18c:	dc800a15 	stw	r18,40(sp)
  20d190:	dc400915 	stw	r17,36(sp)
  20d194:	a501ffcc 	andi	r20,r20,2047
  20d198:	2c20703a 	and	r16,r5,r16
  20d19c:	b827883a 	mov	r19,r23
  20d1a0:	ba403fcc 	andi	r9,r23,255
  20d1a4:	a0006026 	beq	r20,zero,20d328 <__muldf3+0x1d0>
  20d1a8:	0081ffc4 	movi	r2,2047
  20d1ac:	202d883a 	mov	r22,r4
  20d1b0:	a0803626 	beq	r20,r2,20d28c <__muldf3+0x134>
  20d1b4:	84000434 	orhi	r16,r16,16
  20d1b8:	200ad77a 	srli	r5,r4,29
  20d1bc:	800490fa 	slli	r2,r16,3
  20d1c0:	202c90fa 	slli	r22,r4,3
  20d1c4:	a53f0044 	addi	r20,r20,-1023
  20d1c8:	28a0b03a 	or	r16,r5,r2
  20d1cc:	002b883a 	mov	r21,zero
  20d1d0:	000b883a 	mov	r5,zero
  20d1d4:	3804d53a 	srli	r2,r7,20
  20d1d8:	3838d7fa 	srli	fp,r7,31
  20d1dc:	04400434 	movhi	r17,16
  20d1e0:	8c7fffc4 	addi	r17,r17,-1
  20d1e4:	1081ffcc 	andi	r2,r2,2047
  20d1e8:	3025883a 	mov	r18,r6
  20d1ec:	3c62703a 	and	r17,r7,r17
  20d1f0:	e2803fcc 	andi	r10,fp,255
  20d1f4:	10006d26 	beq	r2,zero,20d3ac <__muldf3+0x254>
  20d1f8:	00c1ffc4 	movi	r3,2047
  20d1fc:	10c06526 	beq	r2,r3,20d394 <__muldf3+0x23c>
  20d200:	8c400434 	orhi	r17,r17,16
  20d204:	300ed77a 	srli	r7,r6,29
  20d208:	880690fa 	slli	r3,r17,3
  20d20c:	302490fa 	slli	r18,r6,3
  20d210:	10bf0044 	addi	r2,r2,-1023
  20d214:	38e2b03a 	or	r17,r7,r3
  20d218:	000f883a 	mov	r7,zero
  20d21c:	a087883a 	add	r3,r20,r2
  20d220:	010003c4 	movi	r4,15
  20d224:	3d44b03a 	or	r2,r7,r21
  20d228:	e5ccf03a 	xor	r6,fp,r23
  20d22c:	1a000044 	addi	r8,r3,1
  20d230:	20809b36 	bltu	r4,r2,20d4a0 <__muldf3+0x348>
  20d234:	100490ba 	slli	r2,r2,2
  20d238:	01000874 	movhi	r4,33
  20d23c:	21349304 	addi	r4,r4,-11700
  20d240:	1105883a 	add	r2,r2,r4
  20d244:	10800017 	ldw	r2,0(r2)
  20d248:	1000683a 	jmp	r2
  20d24c:	0020d4a0 	cmpeqi	zero,zero,-31918
  20d250:	0020d2ac 	andhi	zero,zero,33610
  20d254:	0020d2ac 	andhi	zero,zero,33610
  20d258:	0020d2a8 	cmpgeui	zero,zero,33610
  20d25c:	0020d47c 	xorhi	zero,zero,33617
  20d260:	0020d47c 	xorhi	zero,zero,33617
  20d264:	0020d464 	muli	zero,zero,-31919
  20d268:	0020d2a8 	cmpgeui	zero,zero,33610
  20d26c:	0020d47c 	xorhi	zero,zero,33617
  20d270:	0020d464 	muli	zero,zero,-31919
  20d274:	0020d47c 	xorhi	zero,zero,33617
  20d278:	0020d2a8 	cmpgeui	zero,zero,33610
  20d27c:	0020d48c 	andi	zero,zero,33618
  20d280:	0020d48c 	andi	zero,zero,33618
  20d284:	0020d48c 	andi	zero,zero,33618
  20d288:	0020d7ec 	andhi	zero,zero,33631
  20d28c:	2404b03a 	or	r2,r4,r16
  20d290:	1000711e 	bne	r2,zero,20d458 <__muldf3+0x300>
  20d294:	05400204 	movi	r21,8
  20d298:	0021883a 	mov	r16,zero
  20d29c:	002d883a 	mov	r22,zero
  20d2a0:	01400084 	movi	r5,2
  20d2a4:	003fcb06 	br	20d1d4 <_gp+0xffdfb5f0>
  20d2a8:	500d883a 	mov	r6,r10
  20d2ac:	00800084 	movi	r2,2
  20d2b0:	38805926 	beq	r7,r2,20d418 <__muldf3+0x2c0>
  20d2b4:	008000c4 	movi	r2,3
  20d2b8:	3881bb26 	beq	r7,r2,20d9a8 <__muldf3+0x850>
  20d2bc:	00800044 	movi	r2,1
  20d2c0:	3881961e 	bne	r7,r2,20d91c <__muldf3+0x7c4>
  20d2c4:	3027883a 	mov	r19,r6
  20d2c8:	0005883a 	mov	r2,zero
  20d2cc:	0021883a 	mov	r16,zero
  20d2d0:	002d883a 	mov	r22,zero
  20d2d4:	1004953a 	slli	r2,r2,20
  20d2d8:	98c03fcc 	andi	r3,r19,255
  20d2dc:	04400434 	movhi	r17,16
  20d2e0:	8c7fffc4 	addi	r17,r17,-1
  20d2e4:	180697fa 	slli	r3,r3,31
  20d2e8:	8460703a 	and	r16,r16,r17
  20d2ec:	80a0b03a 	or	r16,r16,r2
  20d2f0:	80c6b03a 	or	r3,r16,r3
  20d2f4:	b005883a 	mov	r2,r22
  20d2f8:	dfc01117 	ldw	ra,68(sp)
  20d2fc:	df001017 	ldw	fp,64(sp)
  20d300:	ddc00f17 	ldw	r23,60(sp)
  20d304:	dd800e17 	ldw	r22,56(sp)
  20d308:	dd400d17 	ldw	r21,52(sp)
  20d30c:	dd000c17 	ldw	r20,48(sp)
  20d310:	dcc00b17 	ldw	r19,44(sp)
  20d314:	dc800a17 	ldw	r18,40(sp)
  20d318:	dc400917 	ldw	r17,36(sp)
  20d31c:	dc000817 	ldw	r16,32(sp)
  20d320:	dec01204 	addi	sp,sp,72
  20d324:	f800283a 	ret
  20d328:	2404b03a 	or	r2,r4,r16
  20d32c:	202b883a 	mov	r21,r4
  20d330:	10004426 	beq	r2,zero,20d444 <__muldf3+0x2ec>
  20d334:	80015126 	beq	r16,zero,20d87c <__muldf3+0x724>
  20d338:	8009883a 	mov	r4,r16
  20d33c:	d9800715 	stw	r6,28(sp)
  20d340:	d9c00215 	stw	r7,8(sp)
  20d344:	da400415 	stw	r9,16(sp)
  20d348:	02017380 	call	201738 <__clzsi2>
  20d34c:	d9800717 	ldw	r6,28(sp)
  20d350:	d9c00217 	ldw	r7,8(sp)
  20d354:	da400417 	ldw	r9,16(sp)
  20d358:	113ffd44 	addi	r4,r2,-11
  20d35c:	00c00704 	movi	r3,28
  20d360:	19014216 	blt	r3,r4,20d86c <__muldf3+0x714>
  20d364:	00c00744 	movi	r3,29
  20d368:	15bffe04 	addi	r22,r2,-8
  20d36c:	1907c83a 	sub	r3,r3,r4
  20d370:	85a0983a 	sll	r16,r16,r22
  20d374:	a8c6d83a 	srl	r3,r21,r3
  20d378:	adac983a 	sll	r22,r21,r22
  20d37c:	1c20b03a 	or	r16,r3,r16
  20d380:	1080fcc4 	addi	r2,r2,1011
  20d384:	00a9c83a 	sub	r20,zero,r2
  20d388:	002b883a 	mov	r21,zero
  20d38c:	000b883a 	mov	r5,zero
  20d390:	003f9006 	br	20d1d4 <_gp+0xffdfb5f0>
  20d394:	3446b03a 	or	r3,r6,r17
  20d398:	1800281e 	bne	r3,zero,20d43c <__muldf3+0x2e4>
  20d39c:	0023883a 	mov	r17,zero
  20d3a0:	0025883a 	mov	r18,zero
  20d3a4:	01c00084 	movi	r7,2
  20d3a8:	003f9c06 	br	20d21c <_gp+0xffdfb638>
  20d3ac:	3446b03a 	or	r3,r6,r17
  20d3b0:	18001e26 	beq	r3,zero,20d42c <__muldf3+0x2d4>
  20d3b4:	88012126 	beq	r17,zero,20d83c <__muldf3+0x6e4>
  20d3b8:	8809883a 	mov	r4,r17
  20d3bc:	d9400215 	stw	r5,8(sp)
  20d3c0:	d9800715 	stw	r6,28(sp)
  20d3c4:	da400415 	stw	r9,16(sp)
  20d3c8:	da800315 	stw	r10,12(sp)
  20d3cc:	02017380 	call	201738 <__clzsi2>
  20d3d0:	d9400217 	ldw	r5,8(sp)
  20d3d4:	d9800717 	ldw	r6,28(sp)
  20d3d8:	da400417 	ldw	r9,16(sp)
  20d3dc:	da800317 	ldw	r10,12(sp)
  20d3e0:	113ffd44 	addi	r4,r2,-11
  20d3e4:	00c00704 	movi	r3,28
  20d3e8:	19011016 	blt	r3,r4,20d82c <__muldf3+0x6d4>
  20d3ec:	00c00744 	movi	r3,29
  20d3f0:	14bffe04 	addi	r18,r2,-8
  20d3f4:	1907c83a 	sub	r3,r3,r4
  20d3f8:	8ca2983a 	sll	r17,r17,r18
  20d3fc:	30c6d83a 	srl	r3,r6,r3
  20d400:	34a4983a 	sll	r18,r6,r18
  20d404:	1c62b03a 	or	r17,r3,r17
  20d408:	1080fcc4 	addi	r2,r2,1011
  20d40c:	0085c83a 	sub	r2,zero,r2
  20d410:	000f883a 	mov	r7,zero
  20d414:	003f8106 	br	20d21c <_gp+0xffdfb638>
  20d418:	3027883a 	mov	r19,r6
  20d41c:	0081ffc4 	movi	r2,2047
  20d420:	0021883a 	mov	r16,zero
  20d424:	002d883a 	mov	r22,zero
  20d428:	003faa06 	br	20d2d4 <_gp+0xffdfb6f0>
  20d42c:	0023883a 	mov	r17,zero
  20d430:	0025883a 	mov	r18,zero
  20d434:	01c00044 	movi	r7,1
  20d438:	003f7806 	br	20d21c <_gp+0xffdfb638>
  20d43c:	01c000c4 	movi	r7,3
  20d440:	003f7606 	br	20d21c <_gp+0xffdfb638>
  20d444:	05400104 	movi	r21,4
  20d448:	0021883a 	mov	r16,zero
  20d44c:	002d883a 	mov	r22,zero
  20d450:	01400044 	movi	r5,1
  20d454:	003f5f06 	br	20d1d4 <_gp+0xffdfb5f0>
  20d458:	05400304 	movi	r21,12
  20d45c:	014000c4 	movi	r5,3
  20d460:	003f5c06 	br	20d1d4 <_gp+0xffdfb5f0>
  20d464:	04000434 	movhi	r16,16
  20d468:	0027883a 	mov	r19,zero
  20d46c:	843fffc4 	addi	r16,r16,-1
  20d470:	05bfffc4 	movi	r22,-1
  20d474:	0081ffc4 	movi	r2,2047
  20d478:	003f9606 	br	20d2d4 <_gp+0xffdfb6f0>
  20d47c:	8023883a 	mov	r17,r16
  20d480:	b025883a 	mov	r18,r22
  20d484:	280f883a 	mov	r7,r5
  20d488:	003f8806 	br	20d2ac <_gp+0xffdfb6c8>
  20d48c:	8023883a 	mov	r17,r16
  20d490:	b025883a 	mov	r18,r22
  20d494:	480d883a 	mov	r6,r9
  20d498:	280f883a 	mov	r7,r5
  20d49c:	003f8306 	br	20d2ac <_gp+0xffdfb6c8>
  20d4a0:	b026d43a 	srli	r19,r22,16
  20d4a4:	902ed43a 	srli	r23,r18,16
  20d4a8:	b5bfffcc 	andi	r22,r22,65535
  20d4ac:	94bfffcc 	andi	r18,r18,65535
  20d4b0:	b00b883a 	mov	r5,r22
  20d4b4:	9009883a 	mov	r4,r18
  20d4b8:	d8c00515 	stw	r3,20(sp)
  20d4bc:	d9800715 	stw	r6,28(sp)
  20d4c0:	da000615 	stw	r8,24(sp)
  20d4c4:	020179c0 	call	20179c <__mulsi3>
  20d4c8:	980b883a 	mov	r5,r19
  20d4cc:	9009883a 	mov	r4,r18
  20d4d0:	1029883a 	mov	r20,r2
  20d4d4:	020179c0 	call	20179c <__mulsi3>
  20d4d8:	b80b883a 	mov	r5,r23
  20d4dc:	9809883a 	mov	r4,r19
  20d4e0:	102b883a 	mov	r21,r2
  20d4e4:	020179c0 	call	20179c <__mulsi3>
  20d4e8:	b809883a 	mov	r4,r23
  20d4ec:	b00b883a 	mov	r5,r22
  20d4f0:	1039883a 	mov	fp,r2
  20d4f4:	020179c0 	call	20179c <__mulsi3>
  20d4f8:	a008d43a 	srli	r4,r20,16
  20d4fc:	1545883a 	add	r2,r2,r21
  20d500:	d8c00517 	ldw	r3,20(sp)
  20d504:	2085883a 	add	r2,r4,r2
  20d508:	d9800717 	ldw	r6,28(sp)
  20d50c:	da000617 	ldw	r8,24(sp)
  20d510:	1540022e 	bgeu	r2,r21,20d51c <__muldf3+0x3c4>
  20d514:	01000074 	movhi	r4,1
  20d518:	e139883a 	add	fp,fp,r4
  20d51c:	100e943a 	slli	r7,r2,16
  20d520:	1004d43a 	srli	r2,r2,16
  20d524:	882ad43a 	srli	r21,r17,16
  20d528:	a53fffcc 	andi	r20,r20,65535
  20d52c:	8c7fffcc 	andi	r17,r17,65535
  20d530:	3d29883a 	add	r20,r7,r20
  20d534:	b00b883a 	mov	r5,r22
  20d538:	8809883a 	mov	r4,r17
  20d53c:	d8c00515 	stw	r3,20(sp)
  20d540:	d9800715 	stw	r6,28(sp)
  20d544:	da000615 	stw	r8,24(sp)
  20d548:	dd000115 	stw	r20,4(sp)
  20d54c:	d8800015 	stw	r2,0(sp)
  20d550:	020179c0 	call	20179c <__mulsi3>
  20d554:	980b883a 	mov	r5,r19
  20d558:	8809883a 	mov	r4,r17
  20d55c:	d8800215 	stw	r2,8(sp)
  20d560:	020179c0 	call	20179c <__mulsi3>
  20d564:	9809883a 	mov	r4,r19
  20d568:	a80b883a 	mov	r5,r21
  20d56c:	1029883a 	mov	r20,r2
  20d570:	020179c0 	call	20179c <__mulsi3>
  20d574:	b00b883a 	mov	r5,r22
  20d578:	a809883a 	mov	r4,r21
  20d57c:	d8800415 	stw	r2,16(sp)
  20d580:	020179c0 	call	20179c <__mulsi3>
  20d584:	d9c00217 	ldw	r7,8(sp)
  20d588:	1505883a 	add	r2,r2,r20
  20d58c:	d8c00517 	ldw	r3,20(sp)
  20d590:	3826d43a 	srli	r19,r7,16
  20d594:	d9800717 	ldw	r6,28(sp)
  20d598:	da000617 	ldw	r8,24(sp)
  20d59c:	9885883a 	add	r2,r19,r2
  20d5a0:	da400417 	ldw	r9,16(sp)
  20d5a4:	1500022e 	bgeu	r2,r20,20d5b0 <__muldf3+0x458>
  20d5a8:	01000074 	movhi	r4,1
  20d5ac:	4913883a 	add	r9,r9,r4
  20d5b0:	1028d43a 	srli	r20,r2,16
  20d5b4:	1004943a 	slli	r2,r2,16
  20d5b8:	802cd43a 	srli	r22,r16,16
  20d5bc:	843fffcc 	andi	r16,r16,65535
  20d5c0:	3cffffcc 	andi	r19,r7,65535
  20d5c4:	9009883a 	mov	r4,r18
  20d5c8:	800b883a 	mov	r5,r16
  20d5cc:	a269883a 	add	r20,r20,r9
  20d5d0:	d8c00515 	stw	r3,20(sp)
  20d5d4:	d9800715 	stw	r6,28(sp)
  20d5d8:	da000615 	stw	r8,24(sp)
  20d5dc:	14e7883a 	add	r19,r2,r19
  20d5e0:	020179c0 	call	20179c <__mulsi3>
  20d5e4:	9009883a 	mov	r4,r18
  20d5e8:	b00b883a 	mov	r5,r22
  20d5ec:	d8800315 	stw	r2,12(sp)
  20d5f0:	020179c0 	call	20179c <__mulsi3>
  20d5f4:	b809883a 	mov	r4,r23
  20d5f8:	b00b883a 	mov	r5,r22
  20d5fc:	d8800215 	stw	r2,8(sp)
  20d600:	020179c0 	call	20179c <__mulsi3>
  20d604:	b80b883a 	mov	r5,r23
  20d608:	8009883a 	mov	r4,r16
  20d60c:	d8800415 	stw	r2,16(sp)
  20d610:	020179c0 	call	20179c <__mulsi3>
  20d614:	da800317 	ldw	r10,12(sp)
  20d618:	d9c00217 	ldw	r7,8(sp)
  20d61c:	d9000017 	ldw	r4,0(sp)
  20d620:	502ed43a 	srli	r23,r10,16
  20d624:	11c5883a 	add	r2,r2,r7
  20d628:	24e5883a 	add	r18,r4,r19
  20d62c:	b885883a 	add	r2,r23,r2
  20d630:	d8c00517 	ldw	r3,20(sp)
  20d634:	d9800717 	ldw	r6,28(sp)
  20d638:	da000617 	ldw	r8,24(sp)
  20d63c:	da400417 	ldw	r9,16(sp)
  20d640:	11c0022e 	bgeu	r2,r7,20d64c <__muldf3+0x4f4>
  20d644:	01000074 	movhi	r4,1
  20d648:	4913883a 	add	r9,r9,r4
  20d64c:	100ed43a 	srli	r7,r2,16
  20d650:	1004943a 	slli	r2,r2,16
  20d654:	55ffffcc 	andi	r23,r10,65535
  20d658:	3a53883a 	add	r9,r7,r9
  20d65c:	8809883a 	mov	r4,r17
  20d660:	800b883a 	mov	r5,r16
  20d664:	d8c00515 	stw	r3,20(sp)
  20d668:	d9800715 	stw	r6,28(sp)
  20d66c:	da000615 	stw	r8,24(sp)
  20d670:	da400415 	stw	r9,16(sp)
  20d674:	15ef883a 	add	r23,r2,r23
  20d678:	020179c0 	call	20179c <__mulsi3>
  20d67c:	8809883a 	mov	r4,r17
  20d680:	b00b883a 	mov	r5,r22
  20d684:	d8800215 	stw	r2,8(sp)
  20d688:	020179c0 	call	20179c <__mulsi3>
  20d68c:	b00b883a 	mov	r5,r22
  20d690:	a809883a 	mov	r4,r21
  20d694:	d8800315 	stw	r2,12(sp)
  20d698:	020179c0 	call	20179c <__mulsi3>
  20d69c:	8009883a 	mov	r4,r16
  20d6a0:	a80b883a 	mov	r5,r21
  20d6a4:	1023883a 	mov	r17,r2
  20d6a8:	020179c0 	call	20179c <__mulsi3>
  20d6ac:	d9c00217 	ldw	r7,8(sp)
  20d6b0:	da800317 	ldw	r10,12(sp)
  20d6b4:	d8c00517 	ldw	r3,20(sp)
  20d6b8:	3808d43a 	srli	r4,r7,16
  20d6bc:	1285883a 	add	r2,r2,r10
  20d6c0:	d9800717 	ldw	r6,28(sp)
  20d6c4:	2085883a 	add	r2,r4,r2
  20d6c8:	da000617 	ldw	r8,24(sp)
  20d6cc:	da400417 	ldw	r9,16(sp)
  20d6d0:	1280022e 	bgeu	r2,r10,20d6dc <__muldf3+0x584>
  20d6d4:	01000074 	movhi	r4,1
  20d6d8:	8923883a 	add	r17,r17,r4
  20d6dc:	1008943a 	slli	r4,r2,16
  20d6e0:	39ffffcc 	andi	r7,r7,65535
  20d6e4:	e4b9883a 	add	fp,fp,r18
  20d6e8:	21cf883a 	add	r7,r4,r7
  20d6ec:	e4e7803a 	cmpltu	r19,fp,r19
  20d6f0:	3d0f883a 	add	r7,r7,r20
  20d6f4:	bf39883a 	add	fp,r23,fp
  20d6f8:	99c9883a 	add	r4,r19,r7
  20d6fc:	e5ef803a 	cmpltu	r23,fp,r23
  20d700:	490b883a 	add	r5,r9,r4
  20d704:	1004d43a 	srli	r2,r2,16
  20d708:	b965883a 	add	r18,r23,r5
  20d70c:	24c9803a 	cmpltu	r4,r4,r19
  20d710:	3d29803a 	cmpltu	r20,r7,r20
  20d714:	a128b03a 	or	r20,r20,r4
  20d718:	95ef803a 	cmpltu	r23,r18,r23
  20d71c:	2a53803a 	cmpltu	r9,r5,r9
  20d720:	a0a9883a 	add	r20,r20,r2
  20d724:	4deeb03a 	or	r23,r9,r23
  20d728:	a5ef883a 	add	r23,r20,r23
  20d72c:	bc63883a 	add	r17,r23,r17
  20d730:	e004927a 	slli	r2,fp,9
  20d734:	d9000117 	ldw	r4,4(sp)
  20d738:	882e927a 	slli	r23,r17,9
  20d73c:	9022d5fa 	srli	r17,r18,23
  20d740:	e038d5fa 	srli	fp,fp,23
  20d744:	1104b03a 	or	r2,r2,r4
  20d748:	9024927a 	slli	r18,r18,9
  20d74c:	1004c03a 	cmpne	r2,r2,zero
  20d750:	bc62b03a 	or	r17,r23,r17
  20d754:	1738b03a 	or	fp,r2,fp
  20d758:	8880402c 	andhi	r2,r17,256
  20d75c:	e4a4b03a 	or	r18,fp,r18
  20d760:	10000726 	beq	r2,zero,20d780 <__muldf3+0x628>
  20d764:	9006d07a 	srli	r3,r18,1
  20d768:	880497fa 	slli	r2,r17,31
  20d76c:	9480004c 	andi	r18,r18,1
  20d770:	8822d07a 	srli	r17,r17,1
  20d774:	1ca4b03a 	or	r18,r3,r18
  20d778:	14a4b03a 	or	r18,r2,r18
  20d77c:	4007883a 	mov	r3,r8
  20d780:	1880ffc4 	addi	r2,r3,1023
  20d784:	0080460e 	bge	zero,r2,20d8a0 <__muldf3+0x748>
  20d788:	910001cc 	andi	r4,r18,7
  20d78c:	20000726 	beq	r4,zero,20d7ac <__muldf3+0x654>
  20d790:	910003cc 	andi	r4,r18,15
  20d794:	01400104 	movi	r5,4
  20d798:	21400426 	beq	r4,r5,20d7ac <__muldf3+0x654>
  20d79c:	9149883a 	add	r4,r18,r5
  20d7a0:	24a5803a 	cmpltu	r18,r4,r18
  20d7a4:	8ca3883a 	add	r17,r17,r18
  20d7a8:	2025883a 	mov	r18,r4
  20d7ac:	8900402c 	andhi	r4,r17,256
  20d7b0:	20000426 	beq	r4,zero,20d7c4 <__muldf3+0x66c>
  20d7b4:	18810004 	addi	r2,r3,1024
  20d7b8:	00ffc034 	movhi	r3,65280
  20d7bc:	18ffffc4 	addi	r3,r3,-1
  20d7c0:	88e2703a 	and	r17,r17,r3
  20d7c4:	00c1ff84 	movi	r3,2046
  20d7c8:	18bf1316 	blt	r3,r2,20d418 <_gp+0xffdfb834>
  20d7cc:	882c977a 	slli	r22,r17,29
  20d7d0:	9024d0fa 	srli	r18,r18,3
  20d7d4:	8822927a 	slli	r17,r17,9
  20d7d8:	1081ffcc 	andi	r2,r2,2047
  20d7dc:	b4acb03a 	or	r22,r22,r18
  20d7e0:	8820d33a 	srli	r16,r17,12
  20d7e4:	3027883a 	mov	r19,r6
  20d7e8:	003eba06 	br	20d2d4 <_gp+0xffdfb6f0>
  20d7ec:	8080022c 	andhi	r2,r16,8
  20d7f0:	10000926 	beq	r2,zero,20d818 <__muldf3+0x6c0>
  20d7f4:	8880022c 	andhi	r2,r17,8
  20d7f8:	1000071e 	bne	r2,zero,20d818 <__muldf3+0x6c0>
  20d7fc:	00800434 	movhi	r2,16
  20d800:	8c000234 	orhi	r16,r17,8
  20d804:	10bfffc4 	addi	r2,r2,-1
  20d808:	e027883a 	mov	r19,fp
  20d80c:	80a0703a 	and	r16,r16,r2
  20d810:	902d883a 	mov	r22,r18
  20d814:	003f1706 	br	20d474 <_gp+0xffdfb890>
  20d818:	00800434 	movhi	r2,16
  20d81c:	84000234 	orhi	r16,r16,8
  20d820:	10bfffc4 	addi	r2,r2,-1
  20d824:	80a0703a 	and	r16,r16,r2
  20d828:	003f1206 	br	20d474 <_gp+0xffdfb890>
  20d82c:	147ff604 	addi	r17,r2,-40
  20d830:	3462983a 	sll	r17,r6,r17
  20d834:	0025883a 	mov	r18,zero
  20d838:	003ef306 	br	20d408 <_gp+0xffdfb824>
  20d83c:	3009883a 	mov	r4,r6
  20d840:	d9400215 	stw	r5,8(sp)
  20d844:	d9800715 	stw	r6,28(sp)
  20d848:	da400415 	stw	r9,16(sp)
  20d84c:	da800315 	stw	r10,12(sp)
  20d850:	02017380 	call	201738 <__clzsi2>
  20d854:	10800804 	addi	r2,r2,32
  20d858:	da800317 	ldw	r10,12(sp)
  20d85c:	da400417 	ldw	r9,16(sp)
  20d860:	d9800717 	ldw	r6,28(sp)
  20d864:	d9400217 	ldw	r5,8(sp)
  20d868:	003edd06 	br	20d3e0 <_gp+0xffdfb7fc>
  20d86c:	143ff604 	addi	r16,r2,-40
  20d870:	ac20983a 	sll	r16,r21,r16
  20d874:	002d883a 	mov	r22,zero
  20d878:	003ec106 	br	20d380 <_gp+0xffdfb79c>
  20d87c:	d9800715 	stw	r6,28(sp)
  20d880:	d9c00215 	stw	r7,8(sp)
  20d884:	da400415 	stw	r9,16(sp)
  20d888:	02017380 	call	201738 <__clzsi2>
  20d88c:	10800804 	addi	r2,r2,32
  20d890:	da400417 	ldw	r9,16(sp)
  20d894:	d9c00217 	ldw	r7,8(sp)
  20d898:	d9800717 	ldw	r6,28(sp)
  20d89c:	003eae06 	br	20d358 <_gp+0xffdfb774>
  20d8a0:	00c00044 	movi	r3,1
  20d8a4:	1887c83a 	sub	r3,r3,r2
  20d8a8:	01000e04 	movi	r4,56
  20d8ac:	20fe8516 	blt	r4,r3,20d2c4 <_gp+0xffdfb6e0>
  20d8b0:	010007c4 	movi	r4,31
  20d8b4:	20c01b16 	blt	r4,r3,20d924 <__muldf3+0x7cc>
  20d8b8:	00800804 	movi	r2,32
  20d8bc:	10c5c83a 	sub	r2,r2,r3
  20d8c0:	888a983a 	sll	r5,r17,r2
  20d8c4:	90c8d83a 	srl	r4,r18,r3
  20d8c8:	9084983a 	sll	r2,r18,r2
  20d8cc:	88e2d83a 	srl	r17,r17,r3
  20d8d0:	2906b03a 	or	r3,r5,r4
  20d8d4:	1004c03a 	cmpne	r2,r2,zero
  20d8d8:	1886b03a 	or	r3,r3,r2
  20d8dc:	188001cc 	andi	r2,r3,7
  20d8e0:	10000726 	beq	r2,zero,20d900 <__muldf3+0x7a8>
  20d8e4:	188003cc 	andi	r2,r3,15
  20d8e8:	01000104 	movi	r4,4
  20d8ec:	11000426 	beq	r2,r4,20d900 <__muldf3+0x7a8>
  20d8f0:	1805883a 	mov	r2,r3
  20d8f4:	10c00104 	addi	r3,r2,4
  20d8f8:	1885803a 	cmpltu	r2,r3,r2
  20d8fc:	88a3883a 	add	r17,r17,r2
  20d900:	8880202c 	andhi	r2,r17,128
  20d904:	10001c26 	beq	r2,zero,20d978 <__muldf3+0x820>
  20d908:	3027883a 	mov	r19,r6
  20d90c:	00800044 	movi	r2,1
  20d910:	0021883a 	mov	r16,zero
  20d914:	002d883a 	mov	r22,zero
  20d918:	003e6e06 	br	20d2d4 <_gp+0xffdfb6f0>
  20d91c:	4007883a 	mov	r3,r8
  20d920:	003f9706 	br	20d780 <_gp+0xffdfbb9c>
  20d924:	017ff844 	movi	r5,-31
  20d928:	2885c83a 	sub	r2,r5,r2
  20d92c:	888ad83a 	srl	r5,r17,r2
  20d930:	00800804 	movi	r2,32
  20d934:	18801a26 	beq	r3,r2,20d9a0 <__muldf3+0x848>
  20d938:	01001004 	movi	r4,64
  20d93c:	20c7c83a 	sub	r3,r4,r3
  20d940:	88e2983a 	sll	r17,r17,r3
  20d944:	8ca4b03a 	or	r18,r17,r18
  20d948:	9004c03a 	cmpne	r2,r18,zero
  20d94c:	2884b03a 	or	r2,r5,r2
  20d950:	144001cc 	andi	r17,r2,7
  20d954:	88000d1e 	bne	r17,zero,20d98c <__muldf3+0x834>
  20d958:	0021883a 	mov	r16,zero
  20d95c:	102cd0fa 	srli	r22,r2,3
  20d960:	3027883a 	mov	r19,r6
  20d964:	0005883a 	mov	r2,zero
  20d968:	b46cb03a 	or	r22,r22,r17
  20d96c:	003e5906 	br	20d2d4 <_gp+0xffdfb6f0>
  20d970:	1007883a 	mov	r3,r2
  20d974:	0023883a 	mov	r17,zero
  20d978:	8820927a 	slli	r16,r17,9
  20d97c:	1805883a 	mov	r2,r3
  20d980:	8822977a 	slli	r17,r17,29
  20d984:	8020d33a 	srli	r16,r16,12
  20d988:	003ff406 	br	20d95c <_gp+0xffdfbd78>
  20d98c:	10c003cc 	andi	r3,r2,15
  20d990:	01000104 	movi	r4,4
  20d994:	193ff626 	beq	r3,r4,20d970 <_gp+0xffdfbd8c>
  20d998:	0023883a 	mov	r17,zero
  20d99c:	003fd506 	br	20d8f4 <_gp+0xffdfbd10>
  20d9a0:	0023883a 	mov	r17,zero
  20d9a4:	003fe706 	br	20d944 <_gp+0xffdfbd60>
  20d9a8:	00800434 	movhi	r2,16
  20d9ac:	8c000234 	orhi	r16,r17,8
  20d9b0:	10bfffc4 	addi	r2,r2,-1
  20d9b4:	3027883a 	mov	r19,r6
  20d9b8:	80a0703a 	and	r16,r16,r2
  20d9bc:	902d883a 	mov	r22,r18
  20d9c0:	003eac06 	br	20d474 <_gp+0xffdfb890>

0020d9c4 <__subdf3>:
  20d9c4:	02000434 	movhi	r8,16
  20d9c8:	423fffc4 	addi	r8,r8,-1
  20d9cc:	defffb04 	addi	sp,sp,-20
  20d9d0:	2a14703a 	and	r10,r5,r8
  20d9d4:	3812d53a 	srli	r9,r7,20
  20d9d8:	3a10703a 	and	r8,r7,r8
  20d9dc:	2006d77a 	srli	r3,r4,29
  20d9e0:	3004d77a 	srli	r2,r6,29
  20d9e4:	dc000015 	stw	r16,0(sp)
  20d9e8:	501490fa 	slli	r10,r10,3
  20d9ec:	2820d53a 	srli	r16,r5,20
  20d9f0:	401090fa 	slli	r8,r8,3
  20d9f4:	dc800215 	stw	r18,8(sp)
  20d9f8:	dc400115 	stw	r17,4(sp)
  20d9fc:	dfc00415 	stw	ra,16(sp)
  20da00:	202290fa 	slli	r17,r4,3
  20da04:	dcc00315 	stw	r19,12(sp)
  20da08:	4a41ffcc 	andi	r9,r9,2047
  20da0c:	0101ffc4 	movi	r4,2047
  20da10:	2824d7fa 	srli	r18,r5,31
  20da14:	8401ffcc 	andi	r16,r16,2047
  20da18:	50c6b03a 	or	r3,r10,r3
  20da1c:	380ed7fa 	srli	r7,r7,31
  20da20:	408ab03a 	or	r5,r8,r2
  20da24:	300c90fa 	slli	r6,r6,3
  20da28:	49009626 	beq	r9,r4,20dc84 <__subdf3+0x2c0>
  20da2c:	39c0005c 	xori	r7,r7,1
  20da30:	8245c83a 	sub	r2,r16,r9
  20da34:	3c807426 	beq	r7,r18,20dc08 <__subdf3+0x244>
  20da38:	0080af0e 	bge	zero,r2,20dcf8 <__subdf3+0x334>
  20da3c:	48002a1e 	bne	r9,zero,20dae8 <__subdf3+0x124>
  20da40:	2988b03a 	or	r4,r5,r6
  20da44:	20009a1e 	bne	r4,zero,20dcb0 <__subdf3+0x2ec>
  20da48:	888001cc 	andi	r2,r17,7
  20da4c:	10000726 	beq	r2,zero,20da6c <__subdf3+0xa8>
  20da50:	888003cc 	andi	r2,r17,15
  20da54:	01000104 	movi	r4,4
  20da58:	11000426 	beq	r2,r4,20da6c <__subdf3+0xa8>
  20da5c:	890b883a 	add	r5,r17,r4
  20da60:	2c63803a 	cmpltu	r17,r5,r17
  20da64:	1c47883a 	add	r3,r3,r17
  20da68:	2823883a 	mov	r17,r5
  20da6c:	1880202c 	andhi	r2,r3,128
  20da70:	10005926 	beq	r2,zero,20dbd8 <__subdf3+0x214>
  20da74:	84000044 	addi	r16,r16,1
  20da78:	0081ffc4 	movi	r2,2047
  20da7c:	8080be26 	beq	r16,r2,20dd78 <__subdf3+0x3b4>
  20da80:	017fe034 	movhi	r5,65408
  20da84:	297fffc4 	addi	r5,r5,-1
  20da88:	1946703a 	and	r3,r3,r5
  20da8c:	1804977a 	slli	r2,r3,29
  20da90:	1806927a 	slli	r3,r3,9
  20da94:	8822d0fa 	srli	r17,r17,3
  20da98:	8401ffcc 	andi	r16,r16,2047
  20da9c:	180ad33a 	srli	r5,r3,12
  20daa0:	9100004c 	andi	r4,r18,1
  20daa4:	1444b03a 	or	r2,r2,r17
  20daa8:	80c1ffcc 	andi	r3,r16,2047
  20daac:	1820953a 	slli	r16,r3,20
  20dab0:	20c03fcc 	andi	r3,r4,255
  20dab4:	180897fa 	slli	r4,r3,31
  20dab8:	00c00434 	movhi	r3,16
  20dabc:	18ffffc4 	addi	r3,r3,-1
  20dac0:	28c6703a 	and	r3,r5,r3
  20dac4:	1c06b03a 	or	r3,r3,r16
  20dac8:	1906b03a 	or	r3,r3,r4
  20dacc:	dfc00417 	ldw	ra,16(sp)
  20dad0:	dcc00317 	ldw	r19,12(sp)
  20dad4:	dc800217 	ldw	r18,8(sp)
  20dad8:	dc400117 	ldw	r17,4(sp)
  20dadc:	dc000017 	ldw	r16,0(sp)
  20dae0:	dec00504 	addi	sp,sp,20
  20dae4:	f800283a 	ret
  20dae8:	0101ffc4 	movi	r4,2047
  20daec:	813fd626 	beq	r16,r4,20da48 <_gp+0xffdfbe64>
  20daf0:	29402034 	orhi	r5,r5,128
  20daf4:	01000e04 	movi	r4,56
  20daf8:	2080a316 	blt	r4,r2,20dd88 <__subdf3+0x3c4>
  20dafc:	010007c4 	movi	r4,31
  20db00:	2080c616 	blt	r4,r2,20de1c <__subdf3+0x458>
  20db04:	01000804 	movi	r4,32
  20db08:	2089c83a 	sub	r4,r4,r2
  20db0c:	2910983a 	sll	r8,r5,r4
  20db10:	308ed83a 	srl	r7,r6,r2
  20db14:	3108983a 	sll	r4,r6,r4
  20db18:	2884d83a 	srl	r2,r5,r2
  20db1c:	41ccb03a 	or	r6,r8,r7
  20db20:	2008c03a 	cmpne	r4,r4,zero
  20db24:	310cb03a 	or	r6,r6,r4
  20db28:	898dc83a 	sub	r6,r17,r6
  20db2c:	89a3803a 	cmpltu	r17,r17,r6
  20db30:	1887c83a 	sub	r3,r3,r2
  20db34:	1c47c83a 	sub	r3,r3,r17
  20db38:	3023883a 	mov	r17,r6
  20db3c:	1880202c 	andhi	r2,r3,128
  20db40:	10002326 	beq	r2,zero,20dbd0 <__subdf3+0x20c>
  20db44:	04c02034 	movhi	r19,128
  20db48:	9cffffc4 	addi	r19,r19,-1
  20db4c:	1ce6703a 	and	r19,r3,r19
  20db50:	98007a26 	beq	r19,zero,20dd3c <__subdf3+0x378>
  20db54:	9809883a 	mov	r4,r19
  20db58:	02017380 	call	201738 <__clzsi2>
  20db5c:	113ffe04 	addi	r4,r2,-8
  20db60:	00c007c4 	movi	r3,31
  20db64:	19007b16 	blt	r3,r4,20dd54 <__subdf3+0x390>
  20db68:	00800804 	movi	r2,32
  20db6c:	1105c83a 	sub	r2,r2,r4
  20db70:	8884d83a 	srl	r2,r17,r2
  20db74:	9906983a 	sll	r3,r19,r4
  20db78:	8922983a 	sll	r17,r17,r4
  20db7c:	10c4b03a 	or	r2,r2,r3
  20db80:	24007816 	blt	r4,r16,20dd64 <__subdf3+0x3a0>
  20db84:	2421c83a 	sub	r16,r4,r16
  20db88:	80c00044 	addi	r3,r16,1
  20db8c:	010007c4 	movi	r4,31
  20db90:	20c09516 	blt	r4,r3,20dde8 <__subdf3+0x424>
  20db94:	01400804 	movi	r5,32
  20db98:	28cbc83a 	sub	r5,r5,r3
  20db9c:	88c8d83a 	srl	r4,r17,r3
  20dba0:	8962983a 	sll	r17,r17,r5
  20dba4:	114a983a 	sll	r5,r2,r5
  20dba8:	10c6d83a 	srl	r3,r2,r3
  20dbac:	8804c03a 	cmpne	r2,r17,zero
  20dbb0:	290ab03a 	or	r5,r5,r4
  20dbb4:	28a2b03a 	or	r17,r5,r2
  20dbb8:	0021883a 	mov	r16,zero
  20dbbc:	003fa206 	br	20da48 <_gp+0xffdfbe64>
  20dbc0:	2090b03a 	or	r8,r4,r2
  20dbc4:	40018e26 	beq	r8,zero,20e200 <__subdf3+0x83c>
  20dbc8:	1007883a 	mov	r3,r2
  20dbcc:	2023883a 	mov	r17,r4
  20dbd0:	888001cc 	andi	r2,r17,7
  20dbd4:	103f9e1e 	bne	r2,zero,20da50 <_gp+0xffdfbe6c>
  20dbd8:	1804977a 	slli	r2,r3,29
  20dbdc:	8822d0fa 	srli	r17,r17,3
  20dbe0:	1810d0fa 	srli	r8,r3,3
  20dbe4:	9100004c 	andi	r4,r18,1
  20dbe8:	1444b03a 	or	r2,r2,r17
  20dbec:	00c1ffc4 	movi	r3,2047
  20dbf0:	80c02826 	beq	r16,r3,20dc94 <__subdf3+0x2d0>
  20dbf4:	01400434 	movhi	r5,16
  20dbf8:	297fffc4 	addi	r5,r5,-1
  20dbfc:	80e0703a 	and	r16,r16,r3
  20dc00:	414a703a 	and	r5,r8,r5
  20dc04:	003fa806 	br	20daa8 <_gp+0xffdfbec4>
  20dc08:	0080630e 	bge	zero,r2,20dd98 <__subdf3+0x3d4>
  20dc0c:	48003026 	beq	r9,zero,20dcd0 <__subdf3+0x30c>
  20dc10:	0101ffc4 	movi	r4,2047
  20dc14:	813f8c26 	beq	r16,r4,20da48 <_gp+0xffdfbe64>
  20dc18:	29402034 	orhi	r5,r5,128
  20dc1c:	01000e04 	movi	r4,56
  20dc20:	2080a90e 	bge	r4,r2,20dec8 <__subdf3+0x504>
  20dc24:	298cb03a 	or	r6,r5,r6
  20dc28:	3012c03a 	cmpne	r9,r6,zero
  20dc2c:	0005883a 	mov	r2,zero
  20dc30:	4c53883a 	add	r9,r9,r17
  20dc34:	4c63803a 	cmpltu	r17,r9,r17
  20dc38:	10c7883a 	add	r3,r2,r3
  20dc3c:	88c7883a 	add	r3,r17,r3
  20dc40:	4823883a 	mov	r17,r9
  20dc44:	1880202c 	andhi	r2,r3,128
  20dc48:	1000d026 	beq	r2,zero,20df8c <__subdf3+0x5c8>
  20dc4c:	84000044 	addi	r16,r16,1
  20dc50:	0081ffc4 	movi	r2,2047
  20dc54:	8080fe26 	beq	r16,r2,20e050 <__subdf3+0x68c>
  20dc58:	00bfe034 	movhi	r2,65408
  20dc5c:	10bfffc4 	addi	r2,r2,-1
  20dc60:	1886703a 	and	r3,r3,r2
  20dc64:	880ad07a 	srli	r5,r17,1
  20dc68:	180497fa 	slli	r2,r3,31
  20dc6c:	8900004c 	andi	r4,r17,1
  20dc70:	2922b03a 	or	r17,r5,r4
  20dc74:	1806d07a 	srli	r3,r3,1
  20dc78:	1462b03a 	or	r17,r2,r17
  20dc7c:	3825883a 	mov	r18,r7
  20dc80:	003f7106 	br	20da48 <_gp+0xffdfbe64>
  20dc84:	2984b03a 	or	r2,r5,r6
  20dc88:	103f6826 	beq	r2,zero,20da2c <_gp+0xffdfbe48>
  20dc8c:	39c03fcc 	andi	r7,r7,255
  20dc90:	003f6706 	br	20da30 <_gp+0xffdfbe4c>
  20dc94:	4086b03a 	or	r3,r8,r2
  20dc98:	18015226 	beq	r3,zero,20e1e4 <__subdf3+0x820>
  20dc9c:	00c00434 	movhi	r3,16
  20dca0:	41400234 	orhi	r5,r8,8
  20dca4:	18ffffc4 	addi	r3,r3,-1
  20dca8:	28ca703a 	and	r5,r5,r3
  20dcac:	003f7e06 	br	20daa8 <_gp+0xffdfbec4>
  20dcb0:	10bfffc4 	addi	r2,r2,-1
  20dcb4:	1000491e 	bne	r2,zero,20dddc <__subdf3+0x418>
  20dcb8:	898fc83a 	sub	r7,r17,r6
  20dcbc:	89e3803a 	cmpltu	r17,r17,r7
  20dcc0:	1947c83a 	sub	r3,r3,r5
  20dcc4:	1c47c83a 	sub	r3,r3,r17
  20dcc8:	3823883a 	mov	r17,r7
  20dccc:	003f9b06 	br	20db3c <_gp+0xffdfbf58>
  20dcd0:	2988b03a 	or	r4,r5,r6
  20dcd4:	203f5c26 	beq	r4,zero,20da48 <_gp+0xffdfbe64>
  20dcd8:	10bfffc4 	addi	r2,r2,-1
  20dcdc:	1000931e 	bne	r2,zero,20df2c <__subdf3+0x568>
  20dce0:	898d883a 	add	r6,r17,r6
  20dce4:	3463803a 	cmpltu	r17,r6,r17
  20dce8:	1947883a 	add	r3,r3,r5
  20dcec:	88c7883a 	add	r3,r17,r3
  20dcf0:	3023883a 	mov	r17,r6
  20dcf4:	003fd306 	br	20dc44 <_gp+0xffdfc060>
  20dcf8:	1000541e 	bne	r2,zero,20de4c <__subdf3+0x488>
  20dcfc:	80800044 	addi	r2,r16,1
  20dd00:	1081ffcc 	andi	r2,r2,2047
  20dd04:	01000044 	movi	r4,1
  20dd08:	2080a20e 	bge	r4,r2,20df94 <__subdf3+0x5d0>
  20dd0c:	8989c83a 	sub	r4,r17,r6
  20dd10:	8905803a 	cmpltu	r2,r17,r4
  20dd14:	1967c83a 	sub	r19,r3,r5
  20dd18:	98a7c83a 	sub	r19,r19,r2
  20dd1c:	9880202c 	andhi	r2,r19,128
  20dd20:	10006326 	beq	r2,zero,20deb0 <__subdf3+0x4ec>
  20dd24:	3463c83a 	sub	r17,r6,r17
  20dd28:	28c7c83a 	sub	r3,r5,r3
  20dd2c:	344d803a 	cmpltu	r6,r6,r17
  20dd30:	19a7c83a 	sub	r19,r3,r6
  20dd34:	3825883a 	mov	r18,r7
  20dd38:	983f861e 	bne	r19,zero,20db54 <_gp+0xffdfbf70>
  20dd3c:	8809883a 	mov	r4,r17
  20dd40:	02017380 	call	201738 <__clzsi2>
  20dd44:	10800804 	addi	r2,r2,32
  20dd48:	113ffe04 	addi	r4,r2,-8
  20dd4c:	00c007c4 	movi	r3,31
  20dd50:	193f850e 	bge	r3,r4,20db68 <_gp+0xffdfbf84>
  20dd54:	10bff604 	addi	r2,r2,-40
  20dd58:	8884983a 	sll	r2,r17,r2
  20dd5c:	0023883a 	mov	r17,zero
  20dd60:	243f880e 	bge	r4,r16,20db84 <_gp+0xffdfbfa0>
  20dd64:	00ffe034 	movhi	r3,65408
  20dd68:	18ffffc4 	addi	r3,r3,-1
  20dd6c:	8121c83a 	sub	r16,r16,r4
  20dd70:	10c6703a 	and	r3,r2,r3
  20dd74:	003f3406 	br	20da48 <_gp+0xffdfbe64>
  20dd78:	9100004c 	andi	r4,r18,1
  20dd7c:	000b883a 	mov	r5,zero
  20dd80:	0005883a 	mov	r2,zero
  20dd84:	003f4806 	br	20daa8 <_gp+0xffdfbec4>
  20dd88:	298cb03a 	or	r6,r5,r6
  20dd8c:	300cc03a 	cmpne	r6,r6,zero
  20dd90:	0005883a 	mov	r2,zero
  20dd94:	003f6406 	br	20db28 <_gp+0xffdfbf44>
  20dd98:	10009a1e 	bne	r2,zero,20e004 <__subdf3+0x640>
  20dd9c:	82400044 	addi	r9,r16,1
  20dda0:	4881ffcc 	andi	r2,r9,2047
  20dda4:	02800044 	movi	r10,1
  20dda8:	5080670e 	bge	r10,r2,20df48 <__subdf3+0x584>
  20ddac:	0081ffc4 	movi	r2,2047
  20ddb0:	4880af26 	beq	r9,r2,20e070 <__subdf3+0x6ac>
  20ddb4:	898d883a 	add	r6,r17,r6
  20ddb8:	1945883a 	add	r2,r3,r5
  20ddbc:	3447803a 	cmpltu	r3,r6,r17
  20ddc0:	1887883a 	add	r3,r3,r2
  20ddc4:	182297fa 	slli	r17,r3,31
  20ddc8:	300cd07a 	srli	r6,r6,1
  20ddcc:	1806d07a 	srli	r3,r3,1
  20ddd0:	4821883a 	mov	r16,r9
  20ddd4:	89a2b03a 	or	r17,r17,r6
  20ddd8:	003f1b06 	br	20da48 <_gp+0xffdfbe64>
  20dddc:	0101ffc4 	movi	r4,2047
  20dde0:	813f441e 	bne	r16,r4,20daf4 <_gp+0xffdfbf10>
  20dde4:	003f1806 	br	20da48 <_gp+0xffdfbe64>
  20dde8:	843ff844 	addi	r16,r16,-31
  20ddec:	01400804 	movi	r5,32
  20ddf0:	1408d83a 	srl	r4,r2,r16
  20ddf4:	19405026 	beq	r3,r5,20df38 <__subdf3+0x574>
  20ddf8:	01401004 	movi	r5,64
  20ddfc:	28c7c83a 	sub	r3,r5,r3
  20de00:	10c4983a 	sll	r2,r2,r3
  20de04:	88a2b03a 	or	r17,r17,r2
  20de08:	8822c03a 	cmpne	r17,r17,zero
  20de0c:	2462b03a 	or	r17,r4,r17
  20de10:	0007883a 	mov	r3,zero
  20de14:	0021883a 	mov	r16,zero
  20de18:	003f6d06 	br	20dbd0 <_gp+0xffdfbfec>
  20de1c:	11fff804 	addi	r7,r2,-32
  20de20:	01000804 	movi	r4,32
  20de24:	29ced83a 	srl	r7,r5,r7
  20de28:	11004526 	beq	r2,r4,20df40 <__subdf3+0x57c>
  20de2c:	01001004 	movi	r4,64
  20de30:	2089c83a 	sub	r4,r4,r2
  20de34:	2904983a 	sll	r2,r5,r4
  20de38:	118cb03a 	or	r6,r2,r6
  20de3c:	300cc03a 	cmpne	r6,r6,zero
  20de40:	398cb03a 	or	r6,r7,r6
  20de44:	0005883a 	mov	r2,zero
  20de48:	003f3706 	br	20db28 <_gp+0xffdfbf44>
  20de4c:	80002a26 	beq	r16,zero,20def8 <__subdf3+0x534>
  20de50:	0101ffc4 	movi	r4,2047
  20de54:	49006626 	beq	r9,r4,20dff0 <__subdf3+0x62c>
  20de58:	0085c83a 	sub	r2,zero,r2
  20de5c:	18c02034 	orhi	r3,r3,128
  20de60:	01000e04 	movi	r4,56
  20de64:	20807e16 	blt	r4,r2,20e060 <__subdf3+0x69c>
  20de68:	010007c4 	movi	r4,31
  20de6c:	2080e716 	blt	r4,r2,20e20c <__subdf3+0x848>
  20de70:	01000804 	movi	r4,32
  20de74:	2089c83a 	sub	r4,r4,r2
  20de78:	1914983a 	sll	r10,r3,r4
  20de7c:	8890d83a 	srl	r8,r17,r2
  20de80:	8908983a 	sll	r4,r17,r4
  20de84:	1884d83a 	srl	r2,r3,r2
  20de88:	5222b03a 	or	r17,r10,r8
  20de8c:	2006c03a 	cmpne	r3,r4,zero
  20de90:	88e2b03a 	or	r17,r17,r3
  20de94:	3463c83a 	sub	r17,r6,r17
  20de98:	2885c83a 	sub	r2,r5,r2
  20de9c:	344d803a 	cmpltu	r6,r6,r17
  20dea0:	1187c83a 	sub	r3,r2,r6
  20dea4:	4821883a 	mov	r16,r9
  20dea8:	3825883a 	mov	r18,r7
  20deac:	003f2306 	br	20db3c <_gp+0xffdfbf58>
  20deb0:	24d0b03a 	or	r8,r4,r19
  20deb4:	40001b1e 	bne	r8,zero,20df24 <__subdf3+0x560>
  20deb8:	0005883a 	mov	r2,zero
  20debc:	0009883a 	mov	r4,zero
  20dec0:	0021883a 	mov	r16,zero
  20dec4:	003f4906 	br	20dbec <_gp+0xffdfc008>
  20dec8:	010007c4 	movi	r4,31
  20decc:	20803a16 	blt	r4,r2,20dfb8 <__subdf3+0x5f4>
  20ded0:	01000804 	movi	r4,32
  20ded4:	2089c83a 	sub	r4,r4,r2
  20ded8:	2912983a 	sll	r9,r5,r4
  20dedc:	3090d83a 	srl	r8,r6,r2
  20dee0:	3108983a 	sll	r4,r6,r4
  20dee4:	2884d83a 	srl	r2,r5,r2
  20dee8:	4a12b03a 	or	r9,r9,r8
  20deec:	2008c03a 	cmpne	r4,r4,zero
  20def0:	4912b03a 	or	r9,r9,r4
  20def4:	003f4e06 	br	20dc30 <_gp+0xffdfc04c>
  20def8:	1c48b03a 	or	r4,r3,r17
  20defc:	20003c26 	beq	r4,zero,20dff0 <__subdf3+0x62c>
  20df00:	0084303a 	nor	r2,zero,r2
  20df04:	1000381e 	bne	r2,zero,20dfe8 <__subdf3+0x624>
  20df08:	3463c83a 	sub	r17,r6,r17
  20df0c:	28c5c83a 	sub	r2,r5,r3
  20df10:	344d803a 	cmpltu	r6,r6,r17
  20df14:	1187c83a 	sub	r3,r2,r6
  20df18:	4821883a 	mov	r16,r9
  20df1c:	3825883a 	mov	r18,r7
  20df20:	003f0606 	br	20db3c <_gp+0xffdfbf58>
  20df24:	2023883a 	mov	r17,r4
  20df28:	003f0906 	br	20db50 <_gp+0xffdfbf6c>
  20df2c:	0101ffc4 	movi	r4,2047
  20df30:	813f3a1e 	bne	r16,r4,20dc1c <_gp+0xffdfc038>
  20df34:	003ec406 	br	20da48 <_gp+0xffdfbe64>
  20df38:	0005883a 	mov	r2,zero
  20df3c:	003fb106 	br	20de04 <_gp+0xffdfc220>
  20df40:	0005883a 	mov	r2,zero
  20df44:	003fbc06 	br	20de38 <_gp+0xffdfc254>
  20df48:	1c44b03a 	or	r2,r3,r17
  20df4c:	80008e1e 	bne	r16,zero,20e188 <__subdf3+0x7c4>
  20df50:	1000c826 	beq	r2,zero,20e274 <__subdf3+0x8b0>
  20df54:	2984b03a 	or	r2,r5,r6
  20df58:	103ebb26 	beq	r2,zero,20da48 <_gp+0xffdfbe64>
  20df5c:	8989883a 	add	r4,r17,r6
  20df60:	1945883a 	add	r2,r3,r5
  20df64:	2447803a 	cmpltu	r3,r4,r17
  20df68:	1887883a 	add	r3,r3,r2
  20df6c:	1880202c 	andhi	r2,r3,128
  20df70:	2023883a 	mov	r17,r4
  20df74:	103f1626 	beq	r2,zero,20dbd0 <_gp+0xffdfbfec>
  20df78:	00bfe034 	movhi	r2,65408
  20df7c:	10bfffc4 	addi	r2,r2,-1
  20df80:	5021883a 	mov	r16,r10
  20df84:	1886703a 	and	r3,r3,r2
  20df88:	003eaf06 	br	20da48 <_gp+0xffdfbe64>
  20df8c:	3825883a 	mov	r18,r7
  20df90:	003f0f06 	br	20dbd0 <_gp+0xffdfbfec>
  20df94:	1c44b03a 	or	r2,r3,r17
  20df98:	8000251e 	bne	r16,zero,20e030 <__subdf3+0x66c>
  20df9c:	1000661e 	bne	r2,zero,20e138 <__subdf3+0x774>
  20dfa0:	2990b03a 	or	r8,r5,r6
  20dfa4:	40009626 	beq	r8,zero,20e200 <__subdf3+0x83c>
  20dfa8:	2807883a 	mov	r3,r5
  20dfac:	3023883a 	mov	r17,r6
  20dfb0:	3825883a 	mov	r18,r7
  20dfb4:	003ea406 	br	20da48 <_gp+0xffdfbe64>
  20dfb8:	127ff804 	addi	r9,r2,-32
  20dfbc:	01000804 	movi	r4,32
  20dfc0:	2a52d83a 	srl	r9,r5,r9
  20dfc4:	11008c26 	beq	r2,r4,20e1f8 <__subdf3+0x834>
  20dfc8:	01001004 	movi	r4,64
  20dfcc:	2085c83a 	sub	r2,r4,r2
  20dfd0:	2884983a 	sll	r2,r5,r2
  20dfd4:	118cb03a 	or	r6,r2,r6
  20dfd8:	300cc03a 	cmpne	r6,r6,zero
  20dfdc:	4992b03a 	or	r9,r9,r6
  20dfe0:	0005883a 	mov	r2,zero
  20dfe4:	003f1206 	br	20dc30 <_gp+0xffdfc04c>
  20dfe8:	0101ffc4 	movi	r4,2047
  20dfec:	493f9c1e 	bne	r9,r4,20de60 <_gp+0xffdfc27c>
  20dff0:	2807883a 	mov	r3,r5
  20dff4:	3023883a 	mov	r17,r6
  20dff8:	4821883a 	mov	r16,r9
  20dffc:	3825883a 	mov	r18,r7
  20e000:	003e9106 	br	20da48 <_gp+0xffdfbe64>
  20e004:	80001f1e 	bne	r16,zero,20e084 <__subdf3+0x6c0>
  20e008:	1c48b03a 	or	r4,r3,r17
  20e00c:	20005a26 	beq	r4,zero,20e178 <__subdf3+0x7b4>
  20e010:	0084303a 	nor	r2,zero,r2
  20e014:	1000561e 	bne	r2,zero,20e170 <__subdf3+0x7ac>
  20e018:	89a3883a 	add	r17,r17,r6
  20e01c:	1945883a 	add	r2,r3,r5
  20e020:	898d803a 	cmpltu	r6,r17,r6
  20e024:	3087883a 	add	r3,r6,r2
  20e028:	4821883a 	mov	r16,r9
  20e02c:	003f0506 	br	20dc44 <_gp+0xffdfc060>
  20e030:	10002b1e 	bne	r2,zero,20e0e0 <__subdf3+0x71c>
  20e034:	2984b03a 	or	r2,r5,r6
  20e038:	10008026 	beq	r2,zero,20e23c <__subdf3+0x878>
  20e03c:	2807883a 	mov	r3,r5
  20e040:	3023883a 	mov	r17,r6
  20e044:	3825883a 	mov	r18,r7
  20e048:	0401ffc4 	movi	r16,2047
  20e04c:	003e7e06 	br	20da48 <_gp+0xffdfbe64>
  20e050:	3809883a 	mov	r4,r7
  20e054:	0011883a 	mov	r8,zero
  20e058:	0005883a 	mov	r2,zero
  20e05c:	003ee306 	br	20dbec <_gp+0xffdfc008>
  20e060:	1c62b03a 	or	r17,r3,r17
  20e064:	8822c03a 	cmpne	r17,r17,zero
  20e068:	0005883a 	mov	r2,zero
  20e06c:	003f8906 	br	20de94 <_gp+0xffdfc2b0>
  20e070:	3809883a 	mov	r4,r7
  20e074:	4821883a 	mov	r16,r9
  20e078:	0011883a 	mov	r8,zero
  20e07c:	0005883a 	mov	r2,zero
  20e080:	003eda06 	br	20dbec <_gp+0xffdfc008>
  20e084:	0101ffc4 	movi	r4,2047
  20e088:	49003b26 	beq	r9,r4,20e178 <__subdf3+0x7b4>
  20e08c:	0085c83a 	sub	r2,zero,r2
  20e090:	18c02034 	orhi	r3,r3,128
  20e094:	01000e04 	movi	r4,56
  20e098:	20806e16 	blt	r4,r2,20e254 <__subdf3+0x890>
  20e09c:	010007c4 	movi	r4,31
  20e0a0:	20807716 	blt	r4,r2,20e280 <__subdf3+0x8bc>
  20e0a4:	01000804 	movi	r4,32
  20e0a8:	2089c83a 	sub	r4,r4,r2
  20e0ac:	1914983a 	sll	r10,r3,r4
  20e0b0:	8890d83a 	srl	r8,r17,r2
  20e0b4:	8908983a 	sll	r4,r17,r4
  20e0b8:	1884d83a 	srl	r2,r3,r2
  20e0bc:	5222b03a 	or	r17,r10,r8
  20e0c0:	2006c03a 	cmpne	r3,r4,zero
  20e0c4:	88e2b03a 	or	r17,r17,r3
  20e0c8:	89a3883a 	add	r17,r17,r6
  20e0cc:	1145883a 	add	r2,r2,r5
  20e0d0:	898d803a 	cmpltu	r6,r17,r6
  20e0d4:	3087883a 	add	r3,r6,r2
  20e0d8:	4821883a 	mov	r16,r9
  20e0dc:	003ed906 	br	20dc44 <_gp+0xffdfc060>
  20e0e0:	2984b03a 	or	r2,r5,r6
  20e0e4:	10004226 	beq	r2,zero,20e1f0 <__subdf3+0x82c>
  20e0e8:	1808d0fa 	srli	r4,r3,3
  20e0ec:	8822d0fa 	srli	r17,r17,3
  20e0f0:	1806977a 	slli	r3,r3,29
  20e0f4:	2080022c 	andhi	r2,r4,8
  20e0f8:	1c62b03a 	or	r17,r3,r17
  20e0fc:	10000826 	beq	r2,zero,20e120 <__subdf3+0x75c>
  20e100:	2812d0fa 	srli	r9,r5,3
  20e104:	4880022c 	andhi	r2,r9,8
  20e108:	1000051e 	bne	r2,zero,20e120 <__subdf3+0x75c>
  20e10c:	300cd0fa 	srli	r6,r6,3
  20e110:	2804977a 	slli	r2,r5,29
  20e114:	4809883a 	mov	r4,r9
  20e118:	3825883a 	mov	r18,r7
  20e11c:	11a2b03a 	or	r17,r2,r6
  20e120:	8806d77a 	srli	r3,r17,29
  20e124:	200890fa 	slli	r4,r4,3
  20e128:	882290fa 	slli	r17,r17,3
  20e12c:	0401ffc4 	movi	r16,2047
  20e130:	1906b03a 	or	r3,r3,r4
  20e134:	003e4406 	br	20da48 <_gp+0xffdfbe64>
  20e138:	2984b03a 	or	r2,r5,r6
  20e13c:	103e4226 	beq	r2,zero,20da48 <_gp+0xffdfbe64>
  20e140:	8989c83a 	sub	r4,r17,r6
  20e144:	8911803a 	cmpltu	r8,r17,r4
  20e148:	1945c83a 	sub	r2,r3,r5
  20e14c:	1205c83a 	sub	r2,r2,r8
  20e150:	1200202c 	andhi	r8,r2,128
  20e154:	403e9a26 	beq	r8,zero,20dbc0 <_gp+0xffdfbfdc>
  20e158:	3463c83a 	sub	r17,r6,r17
  20e15c:	28c5c83a 	sub	r2,r5,r3
  20e160:	344d803a 	cmpltu	r6,r6,r17
  20e164:	1187c83a 	sub	r3,r2,r6
  20e168:	3825883a 	mov	r18,r7
  20e16c:	003e3606 	br	20da48 <_gp+0xffdfbe64>
  20e170:	0101ffc4 	movi	r4,2047
  20e174:	493fc71e 	bne	r9,r4,20e094 <_gp+0xffdfc4b0>
  20e178:	2807883a 	mov	r3,r5
  20e17c:	3023883a 	mov	r17,r6
  20e180:	4821883a 	mov	r16,r9
  20e184:	003e3006 	br	20da48 <_gp+0xffdfbe64>
  20e188:	10003626 	beq	r2,zero,20e264 <__subdf3+0x8a0>
  20e18c:	2984b03a 	or	r2,r5,r6
  20e190:	10001726 	beq	r2,zero,20e1f0 <__subdf3+0x82c>
  20e194:	1808d0fa 	srli	r4,r3,3
  20e198:	8822d0fa 	srli	r17,r17,3
  20e19c:	1806977a 	slli	r3,r3,29
  20e1a0:	2080022c 	andhi	r2,r4,8
  20e1a4:	1c62b03a 	or	r17,r3,r17
  20e1a8:	10000726 	beq	r2,zero,20e1c8 <__subdf3+0x804>
  20e1ac:	2812d0fa 	srli	r9,r5,3
  20e1b0:	4880022c 	andhi	r2,r9,8
  20e1b4:	1000041e 	bne	r2,zero,20e1c8 <__subdf3+0x804>
  20e1b8:	300cd0fa 	srli	r6,r6,3
  20e1bc:	2804977a 	slli	r2,r5,29
  20e1c0:	4809883a 	mov	r4,r9
  20e1c4:	11a2b03a 	or	r17,r2,r6
  20e1c8:	8806d77a 	srli	r3,r17,29
  20e1cc:	200890fa 	slli	r4,r4,3
  20e1d0:	882290fa 	slli	r17,r17,3
  20e1d4:	3825883a 	mov	r18,r7
  20e1d8:	1906b03a 	or	r3,r3,r4
  20e1dc:	0401ffc4 	movi	r16,2047
  20e1e0:	003e1906 	br	20da48 <_gp+0xffdfbe64>
  20e1e4:	000b883a 	mov	r5,zero
  20e1e8:	0005883a 	mov	r2,zero
  20e1ec:	003e2e06 	br	20daa8 <_gp+0xffdfbec4>
  20e1f0:	0401ffc4 	movi	r16,2047
  20e1f4:	003e1406 	br	20da48 <_gp+0xffdfbe64>
  20e1f8:	0005883a 	mov	r2,zero
  20e1fc:	003f7506 	br	20dfd4 <_gp+0xffdfc3f0>
  20e200:	0005883a 	mov	r2,zero
  20e204:	0009883a 	mov	r4,zero
  20e208:	003e7806 	br	20dbec <_gp+0xffdfc008>
  20e20c:	123ff804 	addi	r8,r2,-32
  20e210:	01000804 	movi	r4,32
  20e214:	1a10d83a 	srl	r8,r3,r8
  20e218:	11002526 	beq	r2,r4,20e2b0 <__subdf3+0x8ec>
  20e21c:	01001004 	movi	r4,64
  20e220:	2085c83a 	sub	r2,r4,r2
  20e224:	1884983a 	sll	r2,r3,r2
  20e228:	1444b03a 	or	r2,r2,r17
  20e22c:	1004c03a 	cmpne	r2,r2,zero
  20e230:	40a2b03a 	or	r17,r8,r2
  20e234:	0005883a 	mov	r2,zero
  20e238:	003f1606 	br	20de94 <_gp+0xffdfc2b0>
  20e23c:	02000434 	movhi	r8,16
  20e240:	0009883a 	mov	r4,zero
  20e244:	423fffc4 	addi	r8,r8,-1
  20e248:	00bfffc4 	movi	r2,-1
  20e24c:	0401ffc4 	movi	r16,2047
  20e250:	003e6606 	br	20dbec <_gp+0xffdfc008>
  20e254:	1c62b03a 	or	r17,r3,r17
  20e258:	8822c03a 	cmpne	r17,r17,zero
  20e25c:	0005883a 	mov	r2,zero
  20e260:	003f9906 	br	20e0c8 <_gp+0xffdfc4e4>
  20e264:	2807883a 	mov	r3,r5
  20e268:	3023883a 	mov	r17,r6
  20e26c:	0401ffc4 	movi	r16,2047
  20e270:	003df506 	br	20da48 <_gp+0xffdfbe64>
  20e274:	2807883a 	mov	r3,r5
  20e278:	3023883a 	mov	r17,r6
  20e27c:	003df206 	br	20da48 <_gp+0xffdfbe64>
  20e280:	123ff804 	addi	r8,r2,-32
  20e284:	01000804 	movi	r4,32
  20e288:	1a10d83a 	srl	r8,r3,r8
  20e28c:	11000a26 	beq	r2,r4,20e2b8 <__subdf3+0x8f4>
  20e290:	01001004 	movi	r4,64
  20e294:	2085c83a 	sub	r2,r4,r2
  20e298:	1884983a 	sll	r2,r3,r2
  20e29c:	1444b03a 	or	r2,r2,r17
  20e2a0:	1004c03a 	cmpne	r2,r2,zero
  20e2a4:	40a2b03a 	or	r17,r8,r2
  20e2a8:	0005883a 	mov	r2,zero
  20e2ac:	003f8606 	br	20e0c8 <_gp+0xffdfc4e4>
  20e2b0:	0005883a 	mov	r2,zero
  20e2b4:	003fdc06 	br	20e228 <_gp+0xffdfc644>
  20e2b8:	0005883a 	mov	r2,zero
  20e2bc:	003ff706 	br	20e29c <_gp+0xffdfc6b8>

0020e2c0 <__fixdfsi>:
  20e2c0:	280cd53a 	srli	r6,r5,20
  20e2c4:	00c00434 	movhi	r3,16
  20e2c8:	18ffffc4 	addi	r3,r3,-1
  20e2cc:	3181ffcc 	andi	r6,r6,2047
  20e2d0:	01c0ff84 	movi	r7,1022
  20e2d4:	28c6703a 	and	r3,r5,r3
  20e2d8:	280ad7fa 	srli	r5,r5,31
  20e2dc:	3980120e 	bge	r7,r6,20e328 <__fixdfsi+0x68>
  20e2e0:	00810744 	movi	r2,1053
  20e2e4:	11800c16 	blt	r2,r6,20e318 <__fixdfsi+0x58>
  20e2e8:	00810cc4 	movi	r2,1075
  20e2ec:	1185c83a 	sub	r2,r2,r6
  20e2f0:	01c007c4 	movi	r7,31
  20e2f4:	18c00434 	orhi	r3,r3,16
  20e2f8:	38800d16 	blt	r7,r2,20e330 <__fixdfsi+0x70>
  20e2fc:	31befb44 	addi	r6,r6,-1043
  20e300:	2084d83a 	srl	r2,r4,r2
  20e304:	1986983a 	sll	r3,r3,r6
  20e308:	1884b03a 	or	r2,r3,r2
  20e30c:	28000726 	beq	r5,zero,20e32c <__fixdfsi+0x6c>
  20e310:	0085c83a 	sub	r2,zero,r2
  20e314:	f800283a 	ret
  20e318:	00a00034 	movhi	r2,32768
  20e31c:	10bfffc4 	addi	r2,r2,-1
  20e320:	2885883a 	add	r2,r5,r2
  20e324:	f800283a 	ret
  20e328:	0005883a 	mov	r2,zero
  20e32c:	f800283a 	ret
  20e330:	008104c4 	movi	r2,1043
  20e334:	1185c83a 	sub	r2,r2,r6
  20e338:	1884d83a 	srl	r2,r3,r2
  20e33c:	003ff306 	br	20e30c <_gp+0xffdfc728>

0020e340 <__floatsidf>:
  20e340:	defffd04 	addi	sp,sp,-12
  20e344:	dfc00215 	stw	ra,8(sp)
  20e348:	dc400115 	stw	r17,4(sp)
  20e34c:	dc000015 	stw	r16,0(sp)
  20e350:	20002b26 	beq	r4,zero,20e400 <__floatsidf+0xc0>
  20e354:	2023883a 	mov	r17,r4
  20e358:	2020d7fa 	srli	r16,r4,31
  20e35c:	20002d16 	blt	r4,zero,20e414 <__floatsidf+0xd4>
  20e360:	8809883a 	mov	r4,r17
  20e364:	02017380 	call	201738 <__clzsi2>
  20e368:	01410784 	movi	r5,1054
  20e36c:	288bc83a 	sub	r5,r5,r2
  20e370:	01010cc4 	movi	r4,1075
  20e374:	2149c83a 	sub	r4,r4,r5
  20e378:	00c007c4 	movi	r3,31
  20e37c:	1900160e 	bge	r3,r4,20e3d8 <__floatsidf+0x98>
  20e380:	00c104c4 	movi	r3,1043
  20e384:	1947c83a 	sub	r3,r3,r5
  20e388:	88c6983a 	sll	r3,r17,r3
  20e38c:	00800434 	movhi	r2,16
  20e390:	10bfffc4 	addi	r2,r2,-1
  20e394:	1886703a 	and	r3,r3,r2
  20e398:	2941ffcc 	andi	r5,r5,2047
  20e39c:	800d883a 	mov	r6,r16
  20e3a0:	0005883a 	mov	r2,zero
  20e3a4:	280a953a 	slli	r5,r5,20
  20e3a8:	31803fcc 	andi	r6,r6,255
  20e3ac:	01000434 	movhi	r4,16
  20e3b0:	300c97fa 	slli	r6,r6,31
  20e3b4:	213fffc4 	addi	r4,r4,-1
  20e3b8:	1906703a 	and	r3,r3,r4
  20e3bc:	1946b03a 	or	r3,r3,r5
  20e3c0:	1986b03a 	or	r3,r3,r6
  20e3c4:	dfc00217 	ldw	ra,8(sp)
  20e3c8:	dc400117 	ldw	r17,4(sp)
  20e3cc:	dc000017 	ldw	r16,0(sp)
  20e3d0:	dec00304 	addi	sp,sp,12
  20e3d4:	f800283a 	ret
  20e3d8:	00c002c4 	movi	r3,11
  20e3dc:	1887c83a 	sub	r3,r3,r2
  20e3e0:	88c6d83a 	srl	r3,r17,r3
  20e3e4:	8904983a 	sll	r2,r17,r4
  20e3e8:	01000434 	movhi	r4,16
  20e3ec:	213fffc4 	addi	r4,r4,-1
  20e3f0:	2941ffcc 	andi	r5,r5,2047
  20e3f4:	1906703a 	and	r3,r3,r4
  20e3f8:	800d883a 	mov	r6,r16
  20e3fc:	003fe906 	br	20e3a4 <_gp+0xffdfc7c0>
  20e400:	000d883a 	mov	r6,zero
  20e404:	000b883a 	mov	r5,zero
  20e408:	0007883a 	mov	r3,zero
  20e40c:	0005883a 	mov	r2,zero
  20e410:	003fe406 	br	20e3a4 <_gp+0xffdfc7c0>
  20e414:	0123c83a 	sub	r17,zero,r4
  20e418:	003fd106 	br	20e360 <_gp+0xffdfc77c>

0020e41c <__floatunsidf>:
  20e41c:	defffe04 	addi	sp,sp,-8
  20e420:	dc000015 	stw	r16,0(sp)
  20e424:	dfc00115 	stw	ra,4(sp)
  20e428:	2021883a 	mov	r16,r4
  20e42c:	20002226 	beq	r4,zero,20e4b8 <__floatunsidf+0x9c>
  20e430:	02017380 	call	201738 <__clzsi2>
  20e434:	01010784 	movi	r4,1054
  20e438:	2089c83a 	sub	r4,r4,r2
  20e43c:	01810cc4 	movi	r6,1075
  20e440:	310dc83a 	sub	r6,r6,r4
  20e444:	00c007c4 	movi	r3,31
  20e448:	1980120e 	bge	r3,r6,20e494 <__floatunsidf+0x78>
  20e44c:	00c104c4 	movi	r3,1043
  20e450:	1907c83a 	sub	r3,r3,r4
  20e454:	80ca983a 	sll	r5,r16,r3
  20e458:	00800434 	movhi	r2,16
  20e45c:	10bfffc4 	addi	r2,r2,-1
  20e460:	2101ffcc 	andi	r4,r4,2047
  20e464:	0021883a 	mov	r16,zero
  20e468:	288a703a 	and	r5,r5,r2
  20e46c:	2008953a 	slli	r4,r4,20
  20e470:	00c00434 	movhi	r3,16
  20e474:	18ffffc4 	addi	r3,r3,-1
  20e478:	28c6703a 	and	r3,r5,r3
  20e47c:	8005883a 	mov	r2,r16
  20e480:	1906b03a 	or	r3,r3,r4
  20e484:	dfc00117 	ldw	ra,4(sp)
  20e488:	dc000017 	ldw	r16,0(sp)
  20e48c:	dec00204 	addi	sp,sp,8
  20e490:	f800283a 	ret
  20e494:	00c002c4 	movi	r3,11
  20e498:	188bc83a 	sub	r5,r3,r2
  20e49c:	814ad83a 	srl	r5,r16,r5
  20e4a0:	00c00434 	movhi	r3,16
  20e4a4:	18ffffc4 	addi	r3,r3,-1
  20e4a8:	81a0983a 	sll	r16,r16,r6
  20e4ac:	2101ffcc 	andi	r4,r4,2047
  20e4b0:	28ca703a 	and	r5,r5,r3
  20e4b4:	003fed06 	br	20e46c <_gp+0xffdfc888>
  20e4b8:	0009883a 	mov	r4,zero
  20e4bc:	000b883a 	mov	r5,zero
  20e4c0:	003fea06 	br	20e46c <_gp+0xffdfc888>

0020e4c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e4c4:	defffe04 	addi	sp,sp,-8
  20e4c8:	dfc00115 	stw	ra,4(sp)
  20e4cc:	df000015 	stw	fp,0(sp)
  20e4d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e4d4:	d0a00b17 	ldw	r2,-32724(gp)
  20e4d8:	10000326 	beq	r2,zero,20e4e8 <alt_get_errno+0x24>
  20e4dc:	d0a00b17 	ldw	r2,-32724(gp)
  20e4e0:	103ee83a 	callr	r2
  20e4e4:	00000106 	br	20e4ec <alt_get_errno+0x28>
  20e4e8:	d0a01c04 	addi	r2,gp,-32656
}
  20e4ec:	e037883a 	mov	sp,fp
  20e4f0:	dfc00117 	ldw	ra,4(sp)
  20e4f4:	df000017 	ldw	fp,0(sp)
  20e4f8:	dec00204 	addi	sp,sp,8
  20e4fc:	f800283a 	ret

0020e500 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  20e500:	defffb04 	addi	sp,sp,-20
  20e504:	dfc00415 	stw	ra,16(sp)
  20e508:	df000315 	stw	fp,12(sp)
  20e50c:	df000304 	addi	fp,sp,12
  20e510:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  20e514:	e0bfff17 	ldw	r2,-4(fp)
  20e518:	10000816 	blt	r2,zero,20e53c <close+0x3c>
  20e51c:	01400304 	movi	r5,12
  20e520:	e13fff17 	ldw	r4,-4(fp)
  20e524:	020179c0 	call	20179c <__mulsi3>
  20e528:	1007883a 	mov	r3,r2
  20e52c:	00801074 	movhi	r2,65
  20e530:	10a23304 	addi	r2,r2,-30516
  20e534:	1885883a 	add	r2,r3,r2
  20e538:	00000106 	br	20e540 <close+0x40>
  20e53c:	0005883a 	mov	r2,zero
  20e540:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  20e544:	e0bffd17 	ldw	r2,-12(fp)
  20e548:	10001926 	beq	r2,zero,20e5b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  20e54c:	e0bffd17 	ldw	r2,-12(fp)
  20e550:	10800017 	ldw	r2,0(r2)
  20e554:	10800417 	ldw	r2,16(r2)
  20e558:	10000626 	beq	r2,zero,20e574 <close+0x74>
  20e55c:	e0bffd17 	ldw	r2,-12(fp)
  20e560:	10800017 	ldw	r2,0(r2)
  20e564:	10800417 	ldw	r2,16(r2)
  20e568:	e13ffd17 	ldw	r4,-12(fp)
  20e56c:	103ee83a 	callr	r2
  20e570:	00000106 	br	20e578 <close+0x78>
  20e574:	0005883a 	mov	r2,zero
  20e578:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  20e57c:	e13fff17 	ldw	r4,-4(fp)
  20e580:	020ebe80 	call	20ebe8 <alt_release_fd>
    if (rval < 0)
  20e584:	e0bffe17 	ldw	r2,-8(fp)
  20e588:	1000070e 	bge	r2,zero,20e5a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  20e58c:	020e4c40 	call	20e4c4 <alt_get_errno>
  20e590:	1007883a 	mov	r3,r2
  20e594:	e0bffe17 	ldw	r2,-8(fp)
  20e598:	0085c83a 	sub	r2,zero,r2
  20e59c:	18800015 	stw	r2,0(r3)
      return -1;
  20e5a0:	00bfffc4 	movi	r2,-1
  20e5a4:	00000706 	br	20e5c4 <close+0xc4>
    }
    return 0;
  20e5a8:	0005883a 	mov	r2,zero
  20e5ac:	00000506 	br	20e5c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e5b0:	020e4c40 	call	20e4c4 <alt_get_errno>
  20e5b4:	1007883a 	mov	r3,r2
  20e5b8:	00801444 	movi	r2,81
  20e5bc:	18800015 	stw	r2,0(r3)
    return -1;
  20e5c0:	00bfffc4 	movi	r2,-1
  }
}
  20e5c4:	e037883a 	mov	sp,fp
  20e5c8:	dfc00117 	ldw	ra,4(sp)
  20e5cc:	df000017 	ldw	fp,0(sp)
  20e5d0:	dec00204 	addi	sp,sp,8
  20e5d4:	f800283a 	ret

0020e5d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  20e5d8:	defffc04 	addi	sp,sp,-16
  20e5dc:	df000315 	stw	fp,12(sp)
  20e5e0:	df000304 	addi	fp,sp,12
  20e5e4:	e13ffd15 	stw	r4,-12(fp)
  20e5e8:	e17ffe15 	stw	r5,-8(fp)
  20e5ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
  20e5f0:	e0bfff17 	ldw	r2,-4(fp)
}
  20e5f4:	e037883a 	mov	sp,fp
  20e5f8:	df000017 	ldw	fp,0(sp)
  20e5fc:	dec00104 	addi	sp,sp,4
  20e600:	f800283a 	ret

0020e604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e604:	defffe04 	addi	sp,sp,-8
  20e608:	dfc00115 	stw	ra,4(sp)
  20e60c:	df000015 	stw	fp,0(sp)
  20e610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e614:	d0a00b17 	ldw	r2,-32724(gp)
  20e618:	10000326 	beq	r2,zero,20e628 <alt_get_errno+0x24>
  20e61c:	d0a00b17 	ldw	r2,-32724(gp)
  20e620:	103ee83a 	callr	r2
  20e624:	00000106 	br	20e62c <alt_get_errno+0x28>
  20e628:	d0a01c04 	addi	r2,gp,-32656
}
  20e62c:	e037883a 	mov	sp,fp
  20e630:	dfc00117 	ldw	ra,4(sp)
  20e634:	df000017 	ldw	fp,0(sp)
  20e638:	dec00204 	addi	sp,sp,8
  20e63c:	f800283a 	ret

0020e640 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  20e640:	defffb04 	addi	sp,sp,-20
  20e644:	dfc00415 	stw	ra,16(sp)
  20e648:	df000315 	stw	fp,12(sp)
  20e64c:	df000304 	addi	fp,sp,12
  20e650:	e13ffe15 	stw	r4,-8(fp)
  20e654:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e658:	e0bffe17 	ldw	r2,-8(fp)
  20e65c:	10000816 	blt	r2,zero,20e680 <fstat+0x40>
  20e660:	01400304 	movi	r5,12
  20e664:	e13ffe17 	ldw	r4,-8(fp)
  20e668:	020179c0 	call	20179c <__mulsi3>
  20e66c:	1007883a 	mov	r3,r2
  20e670:	00801074 	movhi	r2,65
  20e674:	10a23304 	addi	r2,r2,-30516
  20e678:	1885883a 	add	r2,r3,r2
  20e67c:	00000106 	br	20e684 <fstat+0x44>
  20e680:	0005883a 	mov	r2,zero
  20e684:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  20e688:	e0bffd17 	ldw	r2,-12(fp)
  20e68c:	10001026 	beq	r2,zero,20e6d0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  20e690:	e0bffd17 	ldw	r2,-12(fp)
  20e694:	10800017 	ldw	r2,0(r2)
  20e698:	10800817 	ldw	r2,32(r2)
  20e69c:	10000726 	beq	r2,zero,20e6bc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  20e6a0:	e0bffd17 	ldw	r2,-12(fp)
  20e6a4:	10800017 	ldw	r2,0(r2)
  20e6a8:	10800817 	ldw	r2,32(r2)
  20e6ac:	e17fff17 	ldw	r5,-4(fp)
  20e6b0:	e13ffd17 	ldw	r4,-12(fp)
  20e6b4:	103ee83a 	callr	r2
  20e6b8:	00000a06 	br	20e6e4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  20e6bc:	e0bfff17 	ldw	r2,-4(fp)
  20e6c0:	00c80004 	movi	r3,8192
  20e6c4:	10c00115 	stw	r3,4(r2)
      return 0;
  20e6c8:	0005883a 	mov	r2,zero
  20e6cc:	00000506 	br	20e6e4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e6d0:	020e6040 	call	20e604 <alt_get_errno>
  20e6d4:	1007883a 	mov	r3,r2
  20e6d8:	00801444 	movi	r2,81
  20e6dc:	18800015 	stw	r2,0(r3)
    return -1;
  20e6e0:	00bfffc4 	movi	r2,-1
  }
}
  20e6e4:	e037883a 	mov	sp,fp
  20e6e8:	dfc00117 	ldw	ra,4(sp)
  20e6ec:	df000017 	ldw	fp,0(sp)
  20e6f0:	dec00204 	addi	sp,sp,8
  20e6f4:	f800283a 	ret

0020e6f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e6f8:	defffe04 	addi	sp,sp,-8
  20e6fc:	dfc00115 	stw	ra,4(sp)
  20e700:	df000015 	stw	fp,0(sp)
  20e704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e708:	d0a00b17 	ldw	r2,-32724(gp)
  20e70c:	10000326 	beq	r2,zero,20e71c <alt_get_errno+0x24>
  20e710:	d0a00b17 	ldw	r2,-32724(gp)
  20e714:	103ee83a 	callr	r2
  20e718:	00000106 	br	20e720 <alt_get_errno+0x28>
  20e71c:	d0a01c04 	addi	r2,gp,-32656
}
  20e720:	e037883a 	mov	sp,fp
  20e724:	dfc00117 	ldw	ra,4(sp)
  20e728:	df000017 	ldw	fp,0(sp)
  20e72c:	dec00204 	addi	sp,sp,8
  20e730:	f800283a 	ret

0020e734 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  20e734:	deffed04 	addi	sp,sp,-76
  20e738:	dfc01215 	stw	ra,72(sp)
  20e73c:	df001115 	stw	fp,68(sp)
  20e740:	df001104 	addi	fp,sp,68
  20e744:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e748:	e0bfff17 	ldw	r2,-4(fp)
  20e74c:	10000816 	blt	r2,zero,20e770 <isatty+0x3c>
  20e750:	01400304 	movi	r5,12
  20e754:	e13fff17 	ldw	r4,-4(fp)
  20e758:	020179c0 	call	20179c <__mulsi3>
  20e75c:	1007883a 	mov	r3,r2
  20e760:	00801074 	movhi	r2,65
  20e764:	10a23304 	addi	r2,r2,-30516
  20e768:	1885883a 	add	r2,r3,r2
  20e76c:	00000106 	br	20e774 <isatty+0x40>
  20e770:	0005883a 	mov	r2,zero
  20e774:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  20e778:	e0bfef17 	ldw	r2,-68(fp)
  20e77c:	10000e26 	beq	r2,zero,20e7b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  20e780:	e0bfef17 	ldw	r2,-68(fp)
  20e784:	10800017 	ldw	r2,0(r2)
  20e788:	10800817 	ldw	r2,32(r2)
  20e78c:	1000021e 	bne	r2,zero,20e798 <isatty+0x64>
    {
      return 1;
  20e790:	00800044 	movi	r2,1
  20e794:	00000d06 	br	20e7cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  20e798:	e0bff004 	addi	r2,fp,-64
  20e79c:	100b883a 	mov	r5,r2
  20e7a0:	e13fff17 	ldw	r4,-4(fp)
  20e7a4:	020e6400 	call	20e640 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  20e7a8:	e0bff117 	ldw	r2,-60(fp)
  20e7ac:	10880020 	cmpeqi	r2,r2,8192
  20e7b0:	10803fcc 	andi	r2,r2,255
  20e7b4:	00000506 	br	20e7cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20e7b8:	020e6f80 	call	20e6f8 <alt_get_errno>
  20e7bc:	1007883a 	mov	r3,r2
  20e7c0:	00801444 	movi	r2,81
  20e7c4:	18800015 	stw	r2,0(r3)
    return 0;
  20e7c8:	0005883a 	mov	r2,zero
  }
}
  20e7cc:	e037883a 	mov	sp,fp
  20e7d0:	dfc00117 	ldw	ra,4(sp)
  20e7d4:	df000017 	ldw	fp,0(sp)
  20e7d8:	dec00204 	addi	sp,sp,8
  20e7dc:	f800283a 	ret

0020e7e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  20e7e0:	defffc04 	addi	sp,sp,-16
  20e7e4:	df000315 	stw	fp,12(sp)
  20e7e8:	df000304 	addi	fp,sp,12
  20e7ec:	e13ffd15 	stw	r4,-12(fp)
  20e7f0:	e17ffe15 	stw	r5,-8(fp)
  20e7f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  20e7f8:	e0fffe17 	ldw	r3,-8(fp)
  20e7fc:	e0bffd17 	ldw	r2,-12(fp)
  20e800:	18800c26 	beq	r3,r2,20e834 <alt_load_section+0x54>
  {
    while( to != end )
  20e804:	00000806 	br	20e828 <alt_load_section+0x48>
    {
      *to++ = *from++;
  20e808:	e0bffe17 	ldw	r2,-8(fp)
  20e80c:	10c00104 	addi	r3,r2,4
  20e810:	e0fffe15 	stw	r3,-8(fp)
  20e814:	e0fffd17 	ldw	r3,-12(fp)
  20e818:	19000104 	addi	r4,r3,4
  20e81c:	e13ffd15 	stw	r4,-12(fp)
  20e820:	18c00017 	ldw	r3,0(r3)
  20e824:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  20e828:	e0fffe17 	ldw	r3,-8(fp)
  20e82c:	e0bfff17 	ldw	r2,-4(fp)
  20e830:	18bff51e 	bne	r3,r2,20e808 <_gp+0xffdfcc24>
    {
      *to++ = *from++;
    }
  }
}
  20e834:	0001883a 	nop
  20e838:	e037883a 	mov	sp,fp
  20e83c:	df000017 	ldw	fp,0(sp)
  20e840:	dec00104 	addi	sp,sp,4
  20e844:	f800283a 	ret

0020e848 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  20e848:	defffe04 	addi	sp,sp,-8
  20e84c:	dfc00115 	stw	ra,4(sp)
  20e850:	df000015 	stw	fp,0(sp)
  20e854:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  20e858:	01801074 	movhi	r6,65
  20e85c:	31a70f04 	addi	r6,r6,-25540
  20e860:	01401074 	movhi	r5,65
  20e864:	29600004 	addi	r5,r5,-32768
  20e868:	01000874 	movhi	r4,33
  20e86c:	2110d104 	addi	r4,r4,17220
  20e870:	020e7e00 	call	20e7e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  20e874:	01800834 	movhi	r6,32
  20e878:	31808c04 	addi	r6,r6,560
  20e87c:	01400834 	movhi	r5,32
  20e880:	29400804 	addi	r5,r5,32
  20e884:	01000834 	movhi	r4,32
  20e888:	21000804 	addi	r4,r4,32
  20e88c:	020e7e00 	call	20e7e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  20e890:	01800874 	movhi	r6,33
  20e894:	3190d104 	addi	r6,r6,17220
  20e898:	01400874 	movhi	r5,33
  20e89c:	294f8604 	addi	r5,r5,15896
  20e8a0:	01000874 	movhi	r4,33
  20e8a4:	210f8604 	addi	r4,r4,15896
  20e8a8:	020e7e00 	call	20e7e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  20e8ac:	02128d40 	call	2128d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  20e8b0:	0212be00 	call	212be0 <alt_icache_flush_all>
}
  20e8b4:	0001883a 	nop
  20e8b8:	e037883a 	mov	sp,fp
  20e8bc:	dfc00117 	ldw	ra,4(sp)
  20e8c0:	df000017 	ldw	fp,0(sp)
  20e8c4:	dec00204 	addi	sp,sp,8
  20e8c8:	f800283a 	ret

0020e8cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20e8cc:	defffe04 	addi	sp,sp,-8
  20e8d0:	dfc00115 	stw	ra,4(sp)
  20e8d4:	df000015 	stw	fp,0(sp)
  20e8d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20e8dc:	d0a00b17 	ldw	r2,-32724(gp)
  20e8e0:	10000326 	beq	r2,zero,20e8f0 <alt_get_errno+0x24>
  20e8e4:	d0a00b17 	ldw	r2,-32724(gp)
  20e8e8:	103ee83a 	callr	r2
  20e8ec:	00000106 	br	20e8f4 <alt_get_errno+0x28>
  20e8f0:	d0a01c04 	addi	r2,gp,-32656
}
  20e8f4:	e037883a 	mov	sp,fp
  20e8f8:	dfc00117 	ldw	ra,4(sp)
  20e8fc:	df000017 	ldw	fp,0(sp)
  20e900:	dec00204 	addi	sp,sp,8
  20e904:	f800283a 	ret

0020e908 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  20e908:	defff904 	addi	sp,sp,-28
  20e90c:	dfc00615 	stw	ra,24(sp)
  20e910:	df000515 	stw	fp,20(sp)
  20e914:	df000504 	addi	fp,sp,20
  20e918:	e13ffd15 	stw	r4,-12(fp)
  20e91c:	e17ffe15 	stw	r5,-8(fp)
  20e920:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  20e924:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20e928:	e0bffd17 	ldw	r2,-12(fp)
  20e92c:	10000816 	blt	r2,zero,20e950 <lseek+0x48>
  20e930:	01400304 	movi	r5,12
  20e934:	e13ffd17 	ldw	r4,-12(fp)
  20e938:	020179c0 	call	20179c <__mulsi3>
  20e93c:	1007883a 	mov	r3,r2
  20e940:	00801074 	movhi	r2,65
  20e944:	10a23304 	addi	r2,r2,-30516
  20e948:	1885883a 	add	r2,r3,r2
  20e94c:	00000106 	br	20e954 <lseek+0x4c>
  20e950:	0005883a 	mov	r2,zero
  20e954:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  20e958:	e0bffc17 	ldw	r2,-16(fp)
  20e95c:	10001026 	beq	r2,zero,20e9a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  20e960:	e0bffc17 	ldw	r2,-16(fp)
  20e964:	10800017 	ldw	r2,0(r2)
  20e968:	10800717 	ldw	r2,28(r2)
  20e96c:	10000926 	beq	r2,zero,20e994 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  20e970:	e0bffc17 	ldw	r2,-16(fp)
  20e974:	10800017 	ldw	r2,0(r2)
  20e978:	10800717 	ldw	r2,28(r2)
  20e97c:	e1bfff17 	ldw	r6,-4(fp)
  20e980:	e17ffe17 	ldw	r5,-8(fp)
  20e984:	e13ffc17 	ldw	r4,-16(fp)
  20e988:	103ee83a 	callr	r2
  20e98c:	e0bffb15 	stw	r2,-20(fp)
  20e990:	00000506 	br	20e9a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  20e994:	00bfde84 	movi	r2,-134
  20e998:	e0bffb15 	stw	r2,-20(fp)
  20e99c:	00000206 	br	20e9a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  20e9a0:	00bfebc4 	movi	r2,-81
  20e9a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  20e9a8:	e0bffb17 	ldw	r2,-20(fp)
  20e9ac:	1000070e 	bge	r2,zero,20e9cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  20e9b0:	020e8cc0 	call	20e8cc <alt_get_errno>
  20e9b4:	1007883a 	mov	r3,r2
  20e9b8:	e0bffb17 	ldw	r2,-20(fp)
  20e9bc:	0085c83a 	sub	r2,zero,r2
  20e9c0:	18800015 	stw	r2,0(r3)
    rc = -1;
  20e9c4:	00bfffc4 	movi	r2,-1
  20e9c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  20e9cc:	e0bffb17 	ldw	r2,-20(fp)
}
  20e9d0:	e037883a 	mov	sp,fp
  20e9d4:	dfc00117 	ldw	ra,4(sp)
  20e9d8:	df000017 	ldw	fp,0(sp)
  20e9dc:	dec00204 	addi	sp,sp,8
  20e9e0:	f800283a 	ret

0020e9e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  20e9e4:	defffd04 	addi	sp,sp,-12
  20e9e8:	dfc00215 	stw	ra,8(sp)
  20e9ec:	df000115 	stw	fp,4(sp)
  20e9f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  20e9f4:	0009883a 	mov	r4,zero
  20e9f8:	020eebc0 	call	20eebc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  20e9fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  20ea00:	020eef40 	call	20eef4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  20ea04:	01800874 	movhi	r6,33
  20ea08:	3190b504 	addi	r6,r6,17108
  20ea0c:	01400874 	movhi	r5,33
  20ea10:	2950b504 	addi	r5,r5,17108
  20ea14:	01000874 	movhi	r4,33
  20ea18:	2110b504 	addi	r4,r4,17108
  20ea1c:	0212f840 	call	212f84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  20ea20:	02129d40 	call	2129d4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  20ea24:	01000874 	movhi	r4,33
  20ea28:	210a8d04 	addi	r4,r4,10804
  20ea2c:	021391c0 	call	21391c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  20ea30:	d0a01d17 	ldw	r2,-32652(gp)
  20ea34:	d0e01e17 	ldw	r3,-32648(gp)
  20ea38:	d1201f17 	ldw	r4,-32644(gp)
  20ea3c:	200d883a 	mov	r6,r4
  20ea40:	180b883a 	mov	r5,r3
  20ea44:	1009883a 	mov	r4,r2
  20ea48:	020026c0 	call	20026c <main>
  20ea4c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  20ea50:	01000044 	movi	r4,1
  20ea54:	020e5000 	call	20e500 <close>
  exit (result);
  20ea58:	e13fff17 	ldw	r4,-4(fp)
  20ea5c:	02139300 	call	213930 <exit>

0020ea60 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  20ea60:	defffe04 	addi	sp,sp,-8
  20ea64:	df000115 	stw	fp,4(sp)
  20ea68:	df000104 	addi	fp,sp,4
  20ea6c:	e13fff15 	stw	r4,-4(fp)
}
  20ea70:	0001883a 	nop
  20ea74:	e037883a 	mov	sp,fp
  20ea78:	df000017 	ldw	fp,0(sp)
  20ea7c:	dec00104 	addi	sp,sp,4
  20ea80:	f800283a 	ret

0020ea84 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  20ea84:	defffe04 	addi	sp,sp,-8
  20ea88:	df000115 	stw	fp,4(sp)
  20ea8c:	df000104 	addi	fp,sp,4
  20ea90:	e13fff15 	stw	r4,-4(fp)
}
  20ea94:	0001883a 	nop
  20ea98:	e037883a 	mov	sp,fp
  20ea9c:	df000017 	ldw	fp,0(sp)
  20eaa0:	dec00104 	addi	sp,sp,4
  20eaa4:	f800283a 	ret

0020eaa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20eaa8:	defffe04 	addi	sp,sp,-8
  20eaac:	dfc00115 	stw	ra,4(sp)
  20eab0:	df000015 	stw	fp,0(sp)
  20eab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20eab8:	d0a00b17 	ldw	r2,-32724(gp)
  20eabc:	10000326 	beq	r2,zero,20eacc <alt_get_errno+0x24>
  20eac0:	d0a00b17 	ldw	r2,-32724(gp)
  20eac4:	103ee83a 	callr	r2
  20eac8:	00000106 	br	20ead0 <alt_get_errno+0x28>
  20eacc:	d0a01c04 	addi	r2,gp,-32656
}
  20ead0:	e037883a 	mov	sp,fp
  20ead4:	dfc00117 	ldw	ra,4(sp)
  20ead8:	df000017 	ldw	fp,0(sp)
  20eadc:	dec00204 	addi	sp,sp,8
  20eae0:	f800283a 	ret

0020eae4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  20eae4:	defff904 	addi	sp,sp,-28
  20eae8:	dfc00615 	stw	ra,24(sp)
  20eaec:	df000515 	stw	fp,20(sp)
  20eaf0:	df000504 	addi	fp,sp,20
  20eaf4:	e13ffd15 	stw	r4,-12(fp)
  20eaf8:	e17ffe15 	stw	r5,-8(fp)
  20eafc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20eb00:	e0bffd17 	ldw	r2,-12(fp)
  20eb04:	10000816 	blt	r2,zero,20eb28 <read+0x44>
  20eb08:	01400304 	movi	r5,12
  20eb0c:	e13ffd17 	ldw	r4,-12(fp)
  20eb10:	020179c0 	call	20179c <__mulsi3>
  20eb14:	1007883a 	mov	r3,r2
  20eb18:	00801074 	movhi	r2,65
  20eb1c:	10a23304 	addi	r2,r2,-30516
  20eb20:	1885883a 	add	r2,r3,r2
  20eb24:	00000106 	br	20eb2c <read+0x48>
  20eb28:	0005883a 	mov	r2,zero
  20eb2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  20eb30:	e0bffb17 	ldw	r2,-20(fp)
  20eb34:	10002226 	beq	r2,zero,20ebc0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  20eb38:	e0bffb17 	ldw	r2,-20(fp)
  20eb3c:	10800217 	ldw	r2,8(r2)
  20eb40:	108000cc 	andi	r2,r2,3
  20eb44:	10800060 	cmpeqi	r2,r2,1
  20eb48:	1000181e 	bne	r2,zero,20ebac <read+0xc8>
        (fd->dev->read))
  20eb4c:	e0bffb17 	ldw	r2,-20(fp)
  20eb50:	10800017 	ldw	r2,0(r2)
  20eb54:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  20eb58:	10001426 	beq	r2,zero,20ebac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  20eb5c:	e0bffb17 	ldw	r2,-20(fp)
  20eb60:	10800017 	ldw	r2,0(r2)
  20eb64:	10800517 	ldw	r2,20(r2)
  20eb68:	e0ffff17 	ldw	r3,-4(fp)
  20eb6c:	180d883a 	mov	r6,r3
  20eb70:	e17ffe17 	ldw	r5,-8(fp)
  20eb74:	e13ffb17 	ldw	r4,-20(fp)
  20eb78:	103ee83a 	callr	r2
  20eb7c:	e0bffc15 	stw	r2,-16(fp)
  20eb80:	e0bffc17 	ldw	r2,-16(fp)
  20eb84:	1000070e 	bge	r2,zero,20eba4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  20eb88:	020eaa80 	call	20eaa8 <alt_get_errno>
  20eb8c:	1007883a 	mov	r3,r2
  20eb90:	e0bffc17 	ldw	r2,-16(fp)
  20eb94:	0085c83a 	sub	r2,zero,r2
  20eb98:	18800015 	stw	r2,0(r3)
          return -1;
  20eb9c:	00bfffc4 	movi	r2,-1
  20eba0:	00000c06 	br	20ebd4 <read+0xf0>
        }
        return rval;
  20eba4:	e0bffc17 	ldw	r2,-16(fp)
  20eba8:	00000a06 	br	20ebd4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  20ebac:	020eaa80 	call	20eaa8 <alt_get_errno>
  20ebb0:	1007883a 	mov	r3,r2
  20ebb4:	00800344 	movi	r2,13
  20ebb8:	18800015 	stw	r2,0(r3)
  20ebbc:	00000406 	br	20ebd0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  20ebc0:	020eaa80 	call	20eaa8 <alt_get_errno>
  20ebc4:	1007883a 	mov	r3,r2
  20ebc8:	00801444 	movi	r2,81
  20ebcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  20ebd0:	00bfffc4 	movi	r2,-1
}
  20ebd4:	e037883a 	mov	sp,fp
  20ebd8:	dfc00117 	ldw	ra,4(sp)
  20ebdc:	df000017 	ldw	fp,0(sp)
  20ebe0:	dec00204 	addi	sp,sp,8
  20ebe4:	f800283a 	ret

0020ebe8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  20ebe8:	defffc04 	addi	sp,sp,-16
  20ebec:	dfc00315 	stw	ra,12(sp)
  20ebf0:	df000215 	stw	fp,8(sp)
  20ebf4:	dc000115 	stw	r16,4(sp)
  20ebf8:	df000204 	addi	fp,sp,8
  20ebfc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  20ec00:	e0bffe17 	ldw	r2,-8(fp)
  20ec04:	108000d0 	cmplti	r2,r2,3
  20ec08:	1000111e 	bne	r2,zero,20ec50 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  20ec0c:	04001074 	movhi	r16,65
  20ec10:	84223304 	addi	r16,r16,-30516
  20ec14:	e0bffe17 	ldw	r2,-8(fp)
  20ec18:	01400304 	movi	r5,12
  20ec1c:	1009883a 	mov	r4,r2
  20ec20:	020179c0 	call	20179c <__mulsi3>
  20ec24:	8085883a 	add	r2,r16,r2
  20ec28:	10800204 	addi	r2,r2,8
  20ec2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  20ec30:	04001074 	movhi	r16,65
  20ec34:	84223304 	addi	r16,r16,-30516
  20ec38:	e0bffe17 	ldw	r2,-8(fp)
  20ec3c:	01400304 	movi	r5,12
  20ec40:	1009883a 	mov	r4,r2
  20ec44:	020179c0 	call	20179c <__mulsi3>
  20ec48:	8085883a 	add	r2,r16,r2
  20ec4c:	10000015 	stw	zero,0(r2)
  }
}
  20ec50:	0001883a 	nop
  20ec54:	e6ffff04 	addi	sp,fp,-4
  20ec58:	dfc00217 	ldw	ra,8(sp)
  20ec5c:	df000117 	ldw	fp,4(sp)
  20ec60:	dc000017 	ldw	r16,0(sp)
  20ec64:	dec00304 	addi	sp,sp,12
  20ec68:	f800283a 	ret

0020ec6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  20ec6c:	defff904 	addi	sp,sp,-28
  20ec70:	df000615 	stw	fp,24(sp)
  20ec74:	df000604 	addi	fp,sp,24
  20ec78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  20ec7c:	0005303a 	rdctl	r2,status
  20ec80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  20ec84:	e0fffe17 	ldw	r3,-8(fp)
  20ec88:	00bfff84 	movi	r2,-2
  20ec8c:	1884703a 	and	r2,r3,r2
  20ec90:	1001703a 	wrctl	status,r2
  
  return context;
  20ec94:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  20ec98:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  20ec9c:	d0a00c17 	ldw	r2,-32720(gp)
  20eca0:	10c000c4 	addi	r3,r2,3
  20eca4:	00bfff04 	movi	r2,-4
  20eca8:	1884703a 	and	r2,r3,r2
  20ecac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  20ecb0:	d0e00c17 	ldw	r3,-32720(gp)
  20ecb4:	e0bfff17 	ldw	r2,-4(fp)
  20ecb8:	1887883a 	add	r3,r3,r2
  20ecbc:	00801074 	movhi	r2,65
  20ecc0:	10800004 	addi	r2,r2,0
  20ecc4:	10c0062e 	bgeu	r2,r3,20ece0 <sbrk+0x74>
  20ecc8:	e0bffb17 	ldw	r2,-20(fp)
  20eccc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  20ecd0:	e0bffa17 	ldw	r2,-24(fp)
  20ecd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  20ecd8:	00bfffc4 	movi	r2,-1
  20ecdc:	00000b06 	br	20ed0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  20ece0:	d0a00c17 	ldw	r2,-32720(gp)
  20ece4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  20ece8:	d0e00c17 	ldw	r3,-32720(gp)
  20ecec:	e0bfff17 	ldw	r2,-4(fp)
  20ecf0:	1885883a 	add	r2,r3,r2
  20ecf4:	d0a00c15 	stw	r2,-32720(gp)
  20ecf8:	e0bffb17 	ldw	r2,-20(fp)
  20ecfc:	e0bffc15 	stw	r2,-16(fp)
  20ed00:	e0bffc17 	ldw	r2,-16(fp)
  20ed04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  20ed08:	e0bffd17 	ldw	r2,-12(fp)
} 
  20ed0c:	e037883a 	mov	sp,fp
  20ed10:	df000017 	ldw	fp,0(sp)
  20ed14:	dec00104 	addi	sp,sp,4
  20ed18:	f800283a 	ret

0020ed1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  20ed1c:	defffd04 	addi	sp,sp,-12
  20ed20:	dfc00215 	stw	ra,8(sp)
  20ed24:	df000115 	stw	fp,4(sp)
  20ed28:	df000104 	addi	fp,sp,4
  20ed2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  20ed30:	e13fff17 	ldw	r4,-4(fp)
  20ed34:	02127540 	call	212754 <alt_busy_sleep>
}
  20ed38:	e037883a 	mov	sp,fp
  20ed3c:	dfc00117 	ldw	ra,4(sp)
  20ed40:	df000017 	ldw	fp,0(sp)
  20ed44:	dec00204 	addi	sp,sp,8
  20ed48:	f800283a 	ret

0020ed4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20ed4c:	defffe04 	addi	sp,sp,-8
  20ed50:	dfc00115 	stw	ra,4(sp)
  20ed54:	df000015 	stw	fp,0(sp)
  20ed58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20ed5c:	d0a00b17 	ldw	r2,-32724(gp)
  20ed60:	10000326 	beq	r2,zero,20ed70 <alt_get_errno+0x24>
  20ed64:	d0a00b17 	ldw	r2,-32724(gp)
  20ed68:	103ee83a 	callr	r2
  20ed6c:	00000106 	br	20ed74 <alt_get_errno+0x28>
  20ed70:	d0a01c04 	addi	r2,gp,-32656
}
  20ed74:	e037883a 	mov	sp,fp
  20ed78:	dfc00117 	ldw	ra,4(sp)
  20ed7c:	df000017 	ldw	fp,0(sp)
  20ed80:	dec00204 	addi	sp,sp,8
  20ed84:	f800283a 	ret

0020ed88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  20ed88:	defff904 	addi	sp,sp,-28
  20ed8c:	dfc00615 	stw	ra,24(sp)
  20ed90:	df000515 	stw	fp,20(sp)
  20ed94:	df000504 	addi	fp,sp,20
  20ed98:	e13ffd15 	stw	r4,-12(fp)
  20ed9c:	e17ffe15 	stw	r5,-8(fp)
  20eda0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  20eda4:	e0bffd17 	ldw	r2,-12(fp)
  20eda8:	10000816 	blt	r2,zero,20edcc <write+0x44>
  20edac:	01400304 	movi	r5,12
  20edb0:	e13ffd17 	ldw	r4,-12(fp)
  20edb4:	020179c0 	call	20179c <__mulsi3>
  20edb8:	1007883a 	mov	r3,r2
  20edbc:	00801074 	movhi	r2,65
  20edc0:	10a23304 	addi	r2,r2,-30516
  20edc4:	1885883a 	add	r2,r3,r2
  20edc8:	00000106 	br	20edd0 <write+0x48>
  20edcc:	0005883a 	mov	r2,zero
  20edd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  20edd4:	e0bffb17 	ldw	r2,-20(fp)
  20edd8:	10002126 	beq	r2,zero,20ee60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  20eddc:	e0bffb17 	ldw	r2,-20(fp)
  20ede0:	10800217 	ldw	r2,8(r2)
  20ede4:	108000cc 	andi	r2,r2,3
  20ede8:	10001826 	beq	r2,zero,20ee4c <write+0xc4>
  20edec:	e0bffb17 	ldw	r2,-20(fp)
  20edf0:	10800017 	ldw	r2,0(r2)
  20edf4:	10800617 	ldw	r2,24(r2)
  20edf8:	10001426 	beq	r2,zero,20ee4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  20edfc:	e0bffb17 	ldw	r2,-20(fp)
  20ee00:	10800017 	ldw	r2,0(r2)
  20ee04:	10800617 	ldw	r2,24(r2)
  20ee08:	e0ffff17 	ldw	r3,-4(fp)
  20ee0c:	180d883a 	mov	r6,r3
  20ee10:	e17ffe17 	ldw	r5,-8(fp)
  20ee14:	e13ffb17 	ldw	r4,-20(fp)
  20ee18:	103ee83a 	callr	r2
  20ee1c:	e0bffc15 	stw	r2,-16(fp)
  20ee20:	e0bffc17 	ldw	r2,-16(fp)
  20ee24:	1000070e 	bge	r2,zero,20ee44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  20ee28:	020ed4c0 	call	20ed4c <alt_get_errno>
  20ee2c:	1007883a 	mov	r3,r2
  20ee30:	e0bffc17 	ldw	r2,-16(fp)
  20ee34:	0085c83a 	sub	r2,zero,r2
  20ee38:	18800015 	stw	r2,0(r3)
        return -1;
  20ee3c:	00bfffc4 	movi	r2,-1
  20ee40:	00000c06 	br	20ee74 <write+0xec>
      }
      return rval;
  20ee44:	e0bffc17 	ldw	r2,-16(fp)
  20ee48:	00000a06 	br	20ee74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  20ee4c:	020ed4c0 	call	20ed4c <alt_get_errno>
  20ee50:	1007883a 	mov	r3,r2
  20ee54:	00800344 	movi	r2,13
  20ee58:	18800015 	stw	r2,0(r3)
  20ee5c:	00000406 	br	20ee70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  20ee60:	020ed4c0 	call	20ed4c <alt_get_errno>
  20ee64:	1007883a 	mov	r3,r2
  20ee68:	00801444 	movi	r2,81
  20ee6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  20ee70:	00bfffc4 	movi	r2,-1
}
  20ee74:	e037883a 	mov	sp,fp
  20ee78:	dfc00117 	ldw	ra,4(sp)
  20ee7c:	df000017 	ldw	fp,0(sp)
  20ee80:	dec00204 	addi	sp,sp,8
  20ee84:	f800283a 	ret

0020ee88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  20ee88:	defffd04 	addi	sp,sp,-12
  20ee8c:	dfc00215 	stw	ra,8(sp)
  20ee90:	df000115 	stw	fp,4(sp)
  20ee94:	df000104 	addi	fp,sp,4
  20ee98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  20ee9c:	d1600804 	addi	r5,gp,-32736
  20eea0:	e13fff17 	ldw	r4,-4(fp)
  20eea4:	02129300 	call	212930 <alt_dev_llist_insert>
}
  20eea8:	e037883a 	mov	sp,fp
  20eeac:	dfc00117 	ldw	ra,4(sp)
  20eeb0:	df000017 	ldw	fp,0(sp)
  20eeb4:	dec00204 	addi	sp,sp,8
  20eeb8:	f800283a 	ret

0020eebc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  20eebc:	defffd04 	addi	sp,sp,-12
  20eec0:	dfc00215 	stw	ra,8(sp)
  20eec4:	df000115 	stw	fp,4(sp)
  20eec8:	df000104 	addi	fp,sp,4
  20eecc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  20eed0:	02136900 	call	213690 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  20eed4:	00800044 	movi	r2,1
  20eed8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  20eedc:	0001883a 	nop
  20eee0:	e037883a 	mov	sp,fp
  20eee4:	dfc00117 	ldw	ra,4(sp)
  20eee8:	df000017 	ldw	fp,0(sp)
  20eeec:	dec00204 	addi	sp,sp,8
  20eef0:	f800283a 	ret

0020eef4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  20eef4:	defffe04 	addi	sp,sp,-8
  20eef8:	dfc00115 	stw	ra,4(sp)
  20eefc:	df000015 	stw	fp,0(sp)
  20ef00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  20ef04:	01c0fa04 	movi	r7,1000
  20ef08:	01800044 	movi	r6,1
  20ef0c:	000b883a 	mov	r5,zero
  20ef10:	01001074 	movhi	r4,65
  20ef14:	21040004 	addi	r4,r4,4096
  20ef18:	021166c0 	call	21166c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
  20ef1c:	01001074 	movhi	r4,65
  20ef20:	21229304 	addi	r4,r4,-30132
  20ef24:	020f1c40 	call	20f1c4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  20ef28:	000d883a 	mov	r6,zero
  20ef2c:	000b883a 	mov	r5,zero
  20ef30:	01001074 	movhi	r4,65
  20ef34:	2122ab04 	addi	r4,r4,-30036
  20ef38:	0210cf00 	call	210cf0 <altera_avalon_jtag_uart_init>
  20ef3c:	01001074 	movhi	r4,65
  20ef40:	2122a104 	addi	r4,r4,-30076
  20ef44:	020ee880 	call	20ee88 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
  20ef48:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  20ef4c:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  20ef50:	01001074 	movhi	r4,65
  20ef54:	2126b904 	addi	r4,r4,-25884
  20ef58:	0211f9c0 	call	211f9c <altera_onchip_flash_init>
}
  20ef5c:	0001883a 	nop
  20ef60:	e037883a 	mov	sp,fp
  20ef64:	dfc00117 	ldw	ra,4(sp)
  20ef68:	df000017 	ldw	fp,0(sp)
  20ef6c:	dec00204 	addi	sp,sp,8
  20ef70:	f800283a 	ret

0020ef74 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
  20ef74:	defff904 	addi	sp,sp,-28
  20ef78:	dfc00615 	stw	ra,24(sp)
  20ef7c:	df000515 	stw	fp,20(sp)
  20ef80:	df000504 	addi	fp,sp,20
  20ef84:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
  20ef88:	008000b4 	movhi	r2,2
  20ef8c:	10a1a804 	addi	r2,r2,-31072
  20ef90:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
  20ef94:	e0bfff17 	ldw	r2,-4(fp)
  20ef98:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
  20ef9c:	e0bffc17 	ldw	r2,-16(fp)
  20efa0:	10800717 	ldw	r2,28(r2)
  20efa4:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
  20efa8:	e0bffd17 	ldw	r2,-12(fp)
  20efac:	10800217 	ldw	r2,8(r2)
  20efb0:	10800098 	cmpnei	r2,r2,2
  20efb4:	1000251e 	bne	r2,zero,20f04c <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
  20efb8:	e0bffd17 	ldw	r2,-12(fp)
  20efbc:	10c00017 	ldw	r3,0(r2)
  20efc0:	e0bffd17 	ldw	r2,-12(fp)
  20efc4:	10800117 	ldw	r2,4(r2)
  20efc8:	e13ffe04 	addi	r4,fp,-8
  20efcc:	200f883a 	mov	r7,r4
  20efd0:	100d883a 	mov	r6,r2
  20efd4:	180b883a 	mov	r5,r3
  20efd8:	e13ffc17 	ldw	r4,-16(fp)
  20efdc:	020f7240 	call	20f724 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
  20efe0:	e0bffd17 	ldw	r2,-12(fp)
  20efe4:	10c00117 	ldw	r3,4(r2)
  20efe8:	e0bffe17 	ldw	r2,-8(fp)
  20efec:	1887c83a 	sub	r3,r3,r2
  20eff0:	e0bffd17 	ldw	r2,-12(fp)
  20eff4:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
  20eff8:	e0bffd17 	ldw	r2,-12(fp)
  20effc:	10c00017 	ldw	r3,0(r2)
  20f000:	e0bffe17 	ldw	r2,-8(fp)
  20f004:	1887883a 	add	r3,r3,r2
  20f008:	e0bffd17 	ldw	r2,-12(fp)
  20f00c:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
  20f010:	e0bffd17 	ldw	r2,-12(fp)
  20f014:	10800117 	ldw	r2,4(r2)
  20f018:	10000c26 	beq	r2,zero,20f04c <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f01c:	01400704 	movi	r5,28
  20f020:	e13ffc17 	ldw	r4,-16(fp)
  20f024:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  20f028:	01400084 	movi	r5,2
  20f02c:	e13ffc17 	ldw	r4,-16(fp)
  20f030:	02109800 	call	210980 <alt_avalon_i2c_int_enable>
  20f034:	00000e06 	br	20f070 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
  20f038:	e0bffb17 	ldw	r2,-20(fp)
  20f03c:	10bfffc4 	addi	r2,r2,-1
  20f040:	e0bffb15 	stw	r2,-20(fp)
  20f044:	e0bffb17 	ldw	r2,-20(fp)
  20f048:	10000426 	beq	r2,zero,20f05c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
  20f04c:	e13ffc17 	ldw	r4,-16(fp)
  20f050:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  20f054:	103ff81e 	bne	r2,zero,20f038 <_gp+0xffdfd454>
  20f058:	00000106 	br	20f060 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
  20f05c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
  20f060:	e13ffc17 	ldw	r4,-16(fp)
  20f064:	020f3880 	call	20f388 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
  20f068:	e0bffd17 	ldw	r2,-12(fp)
  20f06c:	10000215 	stw	zero,8(r2)
}
  20f070:	e037883a 	mov	sp,fp
  20f074:	dfc00117 	ldw	ra,4(sp)
  20f078:	df000017 	ldw	fp,0(sp)
  20f07c:	dec00204 	addi	sp,sp,8
  20f080:	f800283a 	ret

0020f084 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
  20f084:	defffc04 	addi	sp,sp,-16
  20f088:	dfc00315 	stw	ra,12(sp)
  20f08c:	df000215 	stw	fp,8(sp)
  20f090:	df000204 	addi	fp,sp,8
  20f094:	e13ffe15 	stw	r4,-8(fp)
  20f098:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
  20f09c:	e0bfff17 	ldw	r2,-4(fp)
  20f0a0:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
  20f0a4:	e1ffff17 	ldw	r7,-4(fp)
  20f0a8:	000d883a 	mov	r6,zero
  20f0ac:	01400874 	movhi	r5,33
  20f0b0:	297bdd04 	addi	r5,r5,-4236
  20f0b4:	e13ffe17 	ldw	r4,-8(fp)
  20f0b8:	020f1700 	call	20f170 <alt_avalon_i2c_register_callback>
}
  20f0bc:	0001883a 	nop
  20f0c0:	e037883a 	mov	sp,fp
  20f0c4:	dfc00117 	ldw	ra,4(sp)
  20f0c8:	df000017 	ldw	fp,0(sp)
  20f0cc:	dec00204 	addi	sp,sp,8
  20f0d0:	f800283a 	ret

0020f0d4 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
  20f0d4:	defff904 	addi	sp,sp,-28
  20f0d8:	dfc00615 	stw	ra,24(sp)
  20f0dc:	df000515 	stw	fp,20(sp)
  20f0e0:	df000504 	addi	fp,sp,20
  20f0e4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
  20f0e8:	e0bfff17 	ldw	r2,-4(fp)
  20f0ec:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  20f0f0:	014007c4 	movi	r5,31
  20f0f4:	e13ffb17 	ldw	r4,-20(fp)
  20f0f8:	02109180 	call	210918 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f0fc:	01400704 	movi	r5,28
  20f100:	e13ffb17 	ldw	r4,-20(fp)
  20f104:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
  20f108:	e0bffb17 	ldw	r2,-20(fp)
  20f10c:	10800617 	ldw	r2,24(r2)
  20f110:	10001126 	beq	r2,zero,20f158 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  20f114:	0005303a 	rdctl	r2,status
  20f118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  20f11c:	e0fffd17 	ldw	r3,-12(fp)
  20f120:	00bfff84 	movi	r2,-2
  20f124:	1884703a 	and	r2,r3,r2
  20f128:	1001703a 	wrctl	status,r2
  
  return context;
  20f12c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
  20f130:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
  20f134:	e0bffb17 	ldw	r2,-20(fp)
  20f138:	10800617 	ldw	r2,24(r2)
  20f13c:	e13ffb17 	ldw	r4,-20(fp)
  20f140:	103ee83a 	callr	r2
  20f144:	e0bffc17 	ldw	r2,-16(fp)
  20f148:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  20f14c:	e0bffe17 	ldw	r2,-8(fp)
  20f150:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
  20f154:	0001883a 	nop
  20f158:	0001883a 	nop
}
  20f15c:	e037883a 	mov	sp,fp
  20f160:	dfc00117 	ldw	ra,4(sp)
  20f164:	df000017 	ldw	fp,0(sp)
  20f168:	dec00204 	addi	sp,sp,8
  20f16c:	f800283a 	ret

0020f170 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
  20f170:	defffb04 	addi	sp,sp,-20
  20f174:	df000415 	stw	fp,16(sp)
  20f178:	df000404 	addi	fp,sp,16
  20f17c:	e13ffc15 	stw	r4,-16(fp)
  20f180:	e17ffd15 	stw	r5,-12(fp)
  20f184:	e1bffe15 	stw	r6,-8(fp)
  20f188:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  20f18c:	e0bffc17 	ldw	r2,-16(fp)
  20f190:	e0fffd17 	ldw	r3,-12(fp)
  20f194:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
  20f198:	e0bffc17 	ldw	r2,-16(fp)
  20f19c:	e0ffff17 	ldw	r3,-4(fp)
  20f1a0:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
  20f1a4:	e0bffc17 	ldw	r2,-16(fp)
  20f1a8:	e0fffe17 	ldw	r3,-8(fp)
  20f1ac:	10c00815 	stw	r3,32(r2)

    return ;
  20f1b0:	0001883a 	nop
}
  20f1b4:	e037883a 	mov	sp,fp
  20f1b8:	df000017 	ldw	fp,0(sp)
  20f1bc:	dec00104 	addi	sp,sp,4
  20f1c0:	f800283a 	ret

0020f1c4 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
  20f1c4:	defff704 	addi	sp,sp,-36
  20f1c8:	dfc00815 	stw	ra,32(sp)
  20f1cc:	df000715 	stw	fp,28(sp)
  20f1d0:	df000704 	addi	fp,sp,28
  20f1d4:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
  20f1d8:	e13fff17 	ldw	r4,-4(fp)
  20f1dc:	020f3880 	call	20f388 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  20f1e0:	014007c4 	movi	r5,31
  20f1e4:	e13fff17 	ldw	r4,-4(fp)
  20f1e8:	02109180 	call	210918 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  20f1ec:	01400704 	movi	r5,28
  20f1f0:	e13fff17 	ldw	r4,-4(fp)
  20f1f4:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
  20f1f8:	014000c4 	movi	r5,3
  20f1fc:	e13fff17 	ldw	r4,-4(fp)
  20f200:	0210b240 	call	210b24 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
  20f204:	014000c4 	movi	r5,3
  20f208:	e13fff17 	ldw	r4,-4(fp)
  20f20c:	0210a740 	call	210a74 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
  20f210:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
  20f214:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
  20f218:	e0bffb04 	addi	r2,fp,-20
  20f21c:	018000b4 	movhi	r6,2
  20f220:	31a1a804 	addi	r6,r6,-31072
  20f224:	100b883a 	mov	r5,r2
  20f228:	e13fff17 	ldw	r4,-4(fp)
  20f22c:	020f5e40 	call	20f5e4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
  20f230:	e0bffb04 	addi	r2,fp,-20
  20f234:	100b883a 	mov	r5,r2
  20f238:	e13fff17 	ldw	r4,-4(fp)
  20f23c:	020f4840 	call	20f484 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
  20f240:	d1600d04 	addi	r5,gp,-32716
  20f244:	e13fff17 	ldw	r4,-4(fp)
  20f248:	02129300 	call	212930 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  20f24c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
  20f250:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
  20f254:	e0bffa17 	ldw	r2,-24(fp)
  20f258:	10000c1e 	bne	r2,zero,20f28c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
  20f25c:	e0bfff17 	ldw	r2,-4(fp)
  20f260:	10c00417 	ldw	r3,16(r2)
  20f264:	e0bfff17 	ldw	r2,-4(fp)
  20f268:	10800517 	ldw	r2,20(r2)
  20f26c:	d8000015 	stw	zero,0(sp)
  20f270:	e1ffff17 	ldw	r7,-4(fp)
  20f274:	01800874 	movhi	r6,33
  20f278:	31bc3504 	addi	r6,r6,-3884
  20f27c:	100b883a 	mov	r5,r2
  20f280:	1809883a 	mov	r4,r3
  20f284:	0212c000 	call	212c00 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
  20f288:	00000406 	br	20f29c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
  20f28c:	01000874 	movhi	r4,33
  20f290:	2110c904 	addi	r4,r4,17188
  20f294:	02132840 	call	213284 <alt_printf>
    }

    return;
  20f298:	0001883a 	nop

}
  20f29c:	e037883a 	mov	sp,fp
  20f2a0:	dfc00117 	ldw	ra,4(sp)
  20f2a4:	df000017 	ldw	fp,0(sp)
  20f2a8:	dec00204 	addi	sp,sp,8
  20f2ac:	f800283a 	ret

0020f2b0 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
  20f2b0:	defffc04 	addi	sp,sp,-16
  20f2b4:	dfc00315 	stw	ra,12(sp)
  20f2b8:	df000215 	stw	fp,8(sp)
  20f2bc:	df000204 	addi	fp,sp,8
  20f2c0:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
  20f2c4:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
  20f2c8:	d1600d04 	addi	r5,gp,-32716
  20f2cc:	e13fff17 	ldw	r4,-4(fp)
  20f2d0:	0212a940 	call	212a94 <alt_find_dev>
  20f2d4:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  20f2d8:	e0bffe17 	ldw	r2,-8(fp)
}
  20f2dc:	e037883a 	mov	sp,fp
  20f2e0:	dfc00117 	ldw	ra,4(sp)
  20f2e4:	df000017 	ldw	fp,0(sp)
  20f2e8:	dec00204 	addi	sp,sp,8
  20f2ec:	f800283a 	ret

0020f2f0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f2f0:	defffc04 	addi	sp,sp,-16
  20f2f4:	df000315 	stw	fp,12(sp)
  20f2f8:	df000304 	addi	fp,sp,12
  20f2fc:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  20f300:	e0bfff17 	ldw	r2,-4(fp)
  20f304:	10800717 	ldw	r2,28(r2)
  20f308:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
  20f30c:	e0bfff17 	ldw	r2,-4(fp)
  20f310:	10800317 	ldw	r2,12(r2)
  20f314:	10800204 	addi	r2,r2,8
  20f318:	10800037 	ldwio	r2,0(r2)
  20f31c:	1080004c 	andi	r2,r2,1
  20f320:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
  20f324:	e0bffe17 	ldw	r2,-8(fp)
  20f328:	10000226 	beq	r2,zero,20f334 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
  20f32c:	00bffe44 	movi	r2,-7
  20f330:	00001106 	br	20f378 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
  20f334:	e0bfff17 	ldw	r2,-4(fp)
  20f338:	10c00617 	ldw	r3,24(r2)
  20f33c:	00800874 	movhi	r2,33
  20f340:	10bbdd04 	addi	r2,r2,-4236
  20f344:	1880021e 	bne	r3,r2,20f350 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
  20f348:	e0bffd17 	ldw	r2,-12(fp)
  20f34c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
  20f350:	e0bfff17 	ldw	r2,-4(fp)
  20f354:	10800317 	ldw	r2,12(r2)
  20f358:	10800204 	addi	r2,r2,8
  20f35c:	e0ffff17 	ldw	r3,-4(fp)
  20f360:	18c00317 	ldw	r3,12(r3)
  20f364:	18c00204 	addi	r3,r3,8
  20f368:	18c00037 	ldwio	r3,0(r3)
  20f36c:	18c00054 	ori	r3,r3,1
  20f370:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  20f374:	0005883a 	mov	r2,zero
}
  20f378:	e037883a 	mov	sp,fp
  20f37c:	df000017 	ldw	fp,0(sp)
  20f380:	dec00104 	addi	sp,sp,4
  20f384:	f800283a 	ret

0020f388 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f388:	defffe04 	addi	sp,sp,-8
  20f38c:	df000115 	stw	fp,4(sp)
  20f390:	df000104 	addi	fp,sp,4
  20f394:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
  20f398:	e0bfff17 	ldw	r2,-4(fp)
  20f39c:	10800317 	ldw	r2,12(r2)
  20f3a0:	10800204 	addi	r2,r2,8
  20f3a4:	e0ffff17 	ldw	r3,-4(fp)
  20f3a8:	18c00317 	ldw	r3,12(r3)
  20f3ac:	18c00204 	addi	r3,r3,8
  20f3b0:	19000037 	ldwio	r4,0(r3)
  20f3b4:	00ffff84 	movi	r3,-2
  20f3b8:	20c6703a 	and	r3,r4,r3
  20f3bc:	10c00035 	stwio	r3,0(r2)

}
  20f3c0:	0001883a 	nop
  20f3c4:	e037883a 	mov	sp,fp
  20f3c8:	df000017 	ldw	fp,0(sp)
  20f3cc:	dec00104 	addi	sp,sp,4
  20f3d0:	f800283a 	ret

0020f3d4 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  20f3d4:	defffd04 	addi	sp,sp,-12
  20f3d8:	df000215 	stw	fp,8(sp)
  20f3dc:	df000204 	addi	fp,sp,8
  20f3e0:	e13ffe15 	stw	r4,-8(fp)
  20f3e4:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
  20f3e8:	e0bffe17 	ldw	r2,-8(fp)
  20f3ec:	10c00d17 	ldw	r3,52(r2)
  20f3f0:	e0bfff17 	ldw	r2,-4(fp)
  20f3f4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
  20f3f8:	e0bffe17 	ldw	r2,-8(fp)
  20f3fc:	10800317 	ldw	r2,12(r2)
  20f400:	10800204 	addi	r2,r2,8
  20f404:	10800037 	ldwio	r2,0(r2)
  20f408:	1080008c 	andi	r2,r2,2
  20f40c:	1005d07a 	srai	r2,r2,1
  20f410:	1007883a 	mov	r3,r2
  20f414:	e0bfff17 	ldw	r2,-4(fp)
  20f418:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
  20f41c:	e0bffe17 	ldw	r2,-8(fp)
  20f420:	10800317 	ldw	r2,12(r2)
  20f424:	10800904 	addi	r2,r2,36
  20f428:	10800037 	ldwio	r2,0(r2)
  20f42c:	1007883a 	mov	r3,r2
  20f430:	e0bfff17 	ldw	r2,-4(fp)
  20f434:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
  20f438:	e0bffe17 	ldw	r2,-8(fp)
  20f43c:	10800317 	ldw	r2,12(r2)
  20f440:	10800804 	addi	r2,r2,32
  20f444:	10800037 	ldwio	r2,0(r2)
  20f448:	1007883a 	mov	r3,r2
  20f44c:	e0bfff17 	ldw	r2,-4(fp)
  20f450:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
  20f454:	e0bffe17 	ldw	r2,-8(fp)
  20f458:	10800317 	ldw	r2,12(r2)
  20f45c:	10800a04 	addi	r2,r2,40
  20f460:	10800037 	ldwio	r2,0(r2)
  20f464:	1007883a 	mov	r3,r2
  20f468:	e0bfff17 	ldw	r2,-4(fp)
  20f46c:	10c0030d 	sth	r3,12(r2)
}
  20f470:	0001883a 	nop
  20f474:	e037883a 	mov	sp,fp
  20f478:	df000017 	ldw	fp,0(sp)
  20f47c:	dec00104 	addi	sp,sp,4
  20f480:	f800283a 	ret

0020f484 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  20f484:	defffd04 	addi	sp,sp,-12
  20f488:	df000215 	stw	fp,8(sp)
  20f48c:	df000204 	addi	fp,sp,8
  20f490:	e13ffe15 	stw	r4,-8(fp)
  20f494:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
  20f498:	e0bfff17 	ldw	r2,-4(fp)
  20f49c:	10c00017 	ldw	r3,0(r2)
  20f4a0:	e0bffe17 	ldw	r2,-8(fp)
  20f4a4:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
  20f4a8:	e0bffe17 	ldw	r2,-8(fp)
  20f4ac:	10800317 	ldw	r2,12(r2)
  20f4b0:	10c00204 	addi	r3,r2,8
  20f4b4:	e0bffe17 	ldw	r2,-8(fp)
  20f4b8:	10800317 	ldw	r2,12(r2)
  20f4bc:	10800204 	addi	r2,r2,8
  20f4c0:	10800037 	ldwio	r2,0(r2)
  20f4c4:	1009883a 	mov	r4,r2
  20f4c8:	00bfff44 	movi	r2,-3
  20f4cc:	2088703a 	and	r4,r4,r2
  20f4d0:	e0bfff17 	ldw	r2,-4(fp)
  20f4d4:	10800117 	ldw	r2,4(r2)
  20f4d8:	1085883a 	add	r2,r2,r2
  20f4dc:	1080008c 	andi	r2,r2,2
  20f4e0:	2084b03a 	or	r2,r4,r2
  20f4e4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
  20f4e8:	e0bffe17 	ldw	r2,-8(fp)
  20f4ec:	10800317 	ldw	r2,12(r2)
  20f4f0:	10800904 	addi	r2,r2,36
  20f4f4:	e0ffff17 	ldw	r3,-4(fp)
  20f4f8:	18c0020b 	ldhu	r3,8(r3)
  20f4fc:	18ffffcc 	andi	r3,r3,65535
  20f500:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
  20f504:	e0bffe17 	ldw	r2,-8(fp)
  20f508:	10800317 	ldw	r2,12(r2)
  20f50c:	10800804 	addi	r2,r2,32
  20f510:	e0ffff17 	ldw	r3,-4(fp)
  20f514:	18c0028b 	ldhu	r3,10(r3)
  20f518:	18ffffcc 	andi	r3,r3,65535
  20f51c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
  20f520:	e0bffe17 	ldw	r2,-8(fp)
  20f524:	10800317 	ldw	r2,12(r2)
  20f528:	10800a04 	addi	r2,r2,40
  20f52c:	e0ffff17 	ldw	r3,-4(fp)
  20f530:	18c0030b 	ldhu	r3,12(r3)
  20f534:	18ffffcc 	andi	r3,r3,65535
  20f538:	10c00035 	stwio	r3,0(r2)
}
  20f53c:	0001883a 	nop
  20f540:	e037883a 	mov	sp,fp
  20f544:	df000017 	ldw	fp,0(sp)
  20f548:	dec00104 	addi	sp,sp,4
  20f54c:	f800283a 	ret

0020f550 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
  20f550:	defffb04 	addi	sp,sp,-20
  20f554:	dfc00415 	stw	ra,16(sp)
  20f558:	df000315 	stw	fp,12(sp)
  20f55c:	df000304 	addi	fp,sp,12
  20f560:	e13ffd15 	stw	r4,-12(fp)
  20f564:	e17ffe15 	stw	r5,-8(fp)
  20f568:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
  20f56c:	e0bffe17 	ldw	r2,-8(fp)
  20f570:	1080028b 	ldhu	r2,10(r2)
  20f574:	10bfffcc 	andi	r2,r2,65535
  20f578:	10000426 	beq	r2,zero,20f58c <alt_avalon_i2c_master_config_speed_get+0x3c>
  20f57c:	e0bffe17 	ldw	r2,-8(fp)
  20f580:	1080020b 	ldhu	r2,8(r2)
  20f584:	10bfffcc 	andi	r2,r2,65535
  20f588:	1000021e 	bne	r2,zero,20f594 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
  20f58c:	00bfff44 	movi	r2,-3
  20f590:	00000f06 	br	20f5d0 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
  20f594:	e0bffd17 	ldw	r2,-12(fp)
  20f598:	11000c17 	ldw	r4,48(r2)
  20f59c:	e0bffe17 	ldw	r2,-8(fp)
  20f5a0:	1080028b 	ldhu	r2,10(r2)
  20f5a4:	10ffffcc 	andi	r3,r2,65535
  20f5a8:	e0bffe17 	ldw	r2,-8(fp)
  20f5ac:	1080020b 	ldhu	r2,8(r2)
  20f5b0:	10bfffcc 	andi	r2,r2,65535
  20f5b4:	1885883a 	add	r2,r3,r2
  20f5b8:	100b883a 	mov	r5,r2
  20f5bc:	0200b4c0 	call	200b4c <__udivsi3>
  20f5c0:	1007883a 	mov	r3,r2
  20f5c4:	e0bfff17 	ldw	r2,-4(fp)
  20f5c8:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  20f5cc:	0005883a 	mov	r2,zero
}
  20f5d0:	e037883a 	mov	sp,fp
  20f5d4:	dfc00117 	ldw	ra,4(sp)
  20f5d8:	df000017 	ldw	fp,0(sp)
  20f5dc:	dec00204 	addi	sp,sp,8
  20f5e0:	f800283a 	ret

0020f5e4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
  20f5e4:	defff904 	addi	sp,sp,-28
  20f5e8:	dfc00615 	stw	ra,24(sp)
  20f5ec:	df000515 	stw	fp,20(sp)
  20f5f0:	df000504 	addi	fp,sp,20
  20f5f4:	e13ffd15 	stw	r4,-12(fp)
  20f5f8:	e17ffe15 	stw	r5,-8(fp)
  20f5fc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
  20f600:	e0ffff17 	ldw	r3,-4(fp)
  20f604:	008001b4 	movhi	r2,6
  20f608:	1086a004 	addi	r2,r2,6784
  20f60c:	10c00436 	bltu	r2,r3,20f620 <alt_avalon_i2c_master_config_speed_set+0x3c>
  20f610:	e0bfff17 	ldw	r2,-4(fp)
  20f614:	10000226 	beq	r2,zero,20f620 <alt_avalon_i2c_master_config_speed_set+0x3c>
  20f618:	e0bfff17 	ldw	r2,-4(fp)
  20f61c:	1000021e 	bne	r2,zero,20f628 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
  20f620:	00bfff04 	movi	r2,-4
  20f624:	00002906 	br	20f6cc <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
  20f628:	e0bffd17 	ldw	r2,-12(fp)
  20f62c:	10c00c17 	ldw	r3,48(r2)
  20f630:	e0bfff17 	ldw	r2,-4(fp)
  20f634:	1085883a 	add	r2,r2,r2
  20f638:	100b883a 	mov	r5,r2
  20f63c:	1809883a 	mov	r4,r3
  20f640:	0200b4c0 	call	200b4c <__udivsi3>
  20f644:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  20f648:	e0bffb17 	ldw	r2,-20(fp)
  20f64c:	10800f04 	addi	r2,r2,60
  20f650:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  20f654:	e0bffb17 	ldw	r2,-20(fp)
  20f658:	10bff104 	addi	r2,r2,-60
  20f65c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
  20f660:	e0ffff17 	ldw	r3,-4(fp)
  20f664:	008000b4 	movhi	r2,2
  20f668:	10a1a804 	addi	r2,r2,-31072
  20f66c:	10c0042e 	bgeu	r2,r3,20f680 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
  20f670:	e0bffe17 	ldw	r2,-8(fp)
  20f674:	00c00044 	movi	r3,1
  20f678:	10c00115 	stw	r3,4(r2)
  20f67c:	00000206 	br	20f688 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
  20f680:	e0bffe17 	ldw	r2,-8(fp)
  20f684:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
  20f688:	e0bffb17 	ldw	r2,-20(fp)
  20f68c:	1007883a 	mov	r3,r2
  20f690:	e0bffe17 	ldw	r2,-8(fp)
  20f694:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
  20f698:	e0bffc17 	ldw	r2,-16(fp)
  20f69c:	1007883a 	mov	r3,r2
  20f6a0:	e0bffe17 	ldw	r2,-8(fp)
  20f6a4:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
  20f6a8:	e0bffb17 	ldw	r2,-20(fp)
  20f6ac:	1007883a 	mov	r3,r2
  20f6b0:	e0bffb17 	ldw	r2,-20(fp)
  20f6b4:	1004d07a 	srli	r2,r2,1
  20f6b8:	1885c83a 	sub	r2,r3,r2
  20f6bc:	1007883a 	mov	r3,r2
  20f6c0:	e0bffe17 	ldw	r2,-8(fp)
  20f6c4:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
  20f6c8:	0005883a 	mov	r2,zero

}
  20f6cc:	e037883a 	mov	sp,fp
  20f6d0:	dfc00117 	ldw	ra,4(sp)
  20f6d4:	df000017 	ldw	fp,0(sp)
  20f6d8:	dec00204 	addi	sp,sp,8
  20f6dc:	f800283a 	ret

0020f6e0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20f6e0:	defffe04 	addi	sp,sp,-8
  20f6e4:	df000115 	stw	fp,4(sp)
  20f6e8:	df000104 	addi	fp,sp,4
  20f6ec:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
  20f6f0:	e0bfff17 	ldw	r2,-4(fp)
  20f6f4:	10800317 	ldw	r2,12(r2)
  20f6f8:	10800504 	addi	r2,r2,20
  20f6fc:	10800037 	ldwio	r2,0(r2)
  20f700:	1080004c 	andi	r2,r2,1
  20f704:	10000226 	beq	r2,zero,20f710 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
  20f708:	00800044 	movi	r2,1
  20f70c:	00000106 	br	20f714 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
  20f710:	0005883a 	mov	r2,zero
}
  20f714:	e037883a 	mov	sp,fp
  20f718:	df000017 	ldw	fp,0(sp)
  20f71c:	dec00104 	addi	sp,sp,4
  20f720:	f800283a 	ret

0020f724 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
  20f724:	defffb04 	addi	sp,sp,-20
  20f728:	df000415 	stw	fp,16(sp)
  20f72c:	df000404 	addi	fp,sp,16
  20f730:	e13ffc15 	stw	r4,-16(fp)
  20f734:	e17ffd15 	stw	r5,-12(fp)
  20f738:	e1bffe15 	stw	r6,-8(fp)
  20f73c:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
  20f740:	e0bfff17 	ldw	r2,-4(fp)
  20f744:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  20f748:	00001406 	br	20f79c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  20f74c:	e0bfff17 	ldw	r2,-4(fp)
  20f750:	10800017 	ldw	r2,0(r2)
  20f754:	e0fffd17 	ldw	r3,-12(fp)
  20f758:	1885883a 	add	r2,r3,r2
  20f75c:	e0fffc17 	ldw	r3,-16(fp)
  20f760:	18c00317 	ldw	r3,12(r3)
  20f764:	18c00104 	addi	r3,r3,4
  20f768:	18c00037 	ldwio	r3,0(r3)
  20f76c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
  20f770:	e0bfff17 	ldw	r2,-4(fp)
  20f774:	10800017 	ldw	r2,0(r2)
  20f778:	10c00044 	addi	r3,r2,1
  20f77c:	e0bfff17 	ldw	r2,-4(fp)
  20f780:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  20f784:	e0bfff17 	ldw	r2,-4(fp)
  20f788:	10c00017 	ldw	r3,0(r2)
  20f78c:	e0bffe17 	ldw	r2,-8(fp)
  20f790:	1880021e 	bne	r3,r2,20f79c <alt_avalon_i2c_rx_read_available+0x78>
  20f794:	e0bffe17 	ldw	r2,-8(fp)
  20f798:	1000061e 	bne	r2,zero,20f7b4 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  20f79c:	e0bffc17 	ldw	r2,-16(fp)
  20f7a0:	10800317 	ldw	r2,12(r2)
  20f7a4:	10800704 	addi	r2,r2,28
  20f7a8:	10800037 	ldwio	r2,0(r2)
  20f7ac:	103fe71e 	bne	r2,zero,20f74c <_gp+0xffdfdb68>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
  20f7b0:	00000106 	br	20f7b8 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  20f7b4:	0001883a 	nop
    }
}
  20f7b8:	0001883a 	nop
  20f7bc:	e037883a 	mov	sp,fp
  20f7c0:	df000017 	ldw	fp,0(sp)
  20f7c4:	dec00104 	addi	sp,sp,4
  20f7c8:	f800283a 	ret

0020f7cc <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
  20f7cc:	defffa04 	addi	sp,sp,-24
  20f7d0:	dfc00515 	stw	ra,20(sp)
  20f7d4:	df000415 	stw	fp,16(sp)
  20f7d8:	df000404 	addi	fp,sp,16
  20f7dc:	e13ffe15 	stw	r4,-8(fp)
  20f7e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
  20f7e4:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
  20f7e8:	008000b4 	movhi	r2,2
  20f7ec:	10a1a804 	addi	r2,r2,-31072
  20f7f0:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  20f7f4:	00000d06 	br	20f82c <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
  20f7f8:	e0bffd17 	ldw	r2,-12(fp)
  20f7fc:	108002a8 	cmpgeui	r2,r2,10
  20f800:	1000021e 	bne	r2,zero,20f80c <alt_avalon_i2c_rx_read+0x40>
  20f804:	0109c404 	movi	r4,10000
  20f808:	02127540 	call	212754 <alt_busy_sleep>
      if (--timeout == 0)
  20f80c:	e0bffd17 	ldw	r2,-12(fp)
  20f810:	10bfffc4 	addi	r2,r2,-1
  20f814:	e0bffd15 	stw	r2,-12(fp)
  20f818:	e0bffd17 	ldw	r2,-12(fp)
  20f81c:	1000031e 	bne	r2,zero,20f82c <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
  20f820:	00bfff84 	movi	r2,-2
  20f824:	e0bffc15 	stw	r2,-16(fp)
        break;
  20f828:	00000506 	br	20f840 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  20f82c:	e0bffe17 	ldw	r2,-8(fp)
  20f830:	10800317 	ldw	r2,12(r2)
  20f834:	10800704 	addi	r2,r2,28
  20f838:	10800037 	ldwio	r2,0(r2)
  20f83c:	103fee26 	beq	r2,zero,20f7f8 <_gp+0xffdfdc14>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  20f840:	e0bffe17 	ldw	r2,-8(fp)
  20f844:	10800317 	ldw	r2,12(r2)
  20f848:	10800104 	addi	r2,r2,4
  20f84c:	10800037 	ldwio	r2,0(r2)
  20f850:	1007883a 	mov	r3,r2
  20f854:	e0bfff17 	ldw	r2,-4(fp)
  20f858:	10c00005 	stb	r3,0(r2)
        
    return status;
  20f85c:	e0bffc17 	ldw	r2,-16(fp)
}
  20f860:	e037883a 	mov	sp,fp
  20f864:	dfc00117 	ldw	ra,4(sp)
  20f868:	df000017 	ldw	fp,0(sp)
  20f86c:	dec00204 	addi	sp,sp,8
  20f870:	f800283a 	ret

0020f874 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
  20f874:	defff804 	addi	sp,sp,-32
  20f878:	dfc00715 	stw	ra,28(sp)
  20f87c:	df000615 	stw	fp,24(sp)
  20f880:	df000604 	addi	fp,sp,24
  20f884:	e13ffc15 	stw	r4,-16(fp)
  20f888:	2809883a 	mov	r4,r5
  20f88c:	3007883a 	mov	r3,r6
  20f890:	3805883a 	mov	r2,r7
  20f894:	e13ffd05 	stb	r4,-12(fp)
  20f898:	e0fffe05 	stb	r3,-8(fp)
  20f89c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
  20f8a0:	0089c404 	movi	r2,10000
  20f8a4:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  20f8a8:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  20f8ac:	00000c06 	br	20f8e0 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
  20f8b0:	e0bffa17 	ldw	r2,-24(fp)
  20f8b4:	108002a8 	cmpgeui	r2,r2,10
  20f8b8:	1000021e 	bne	r2,zero,20f8c4 <alt_avalon_i2c_cmd_write+0x50>
  20f8bc:	0109c404 	movi	r4,10000
  20f8c0:	02127540 	call	212754 <alt_busy_sleep>
      if (--timeout == 0)
  20f8c4:	e0bffa17 	ldw	r2,-24(fp)
  20f8c8:	10bfffc4 	addi	r2,r2,-1
  20f8cc:	e0bffa15 	stw	r2,-24(fp)
  20f8d0:	e0bffa17 	ldw	r2,-24(fp)
  20f8d4:	1000021e 	bne	r2,zero,20f8e0 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
  20f8d8:	00bfff84 	movi	r2,-2
  20f8dc:	00001906 	br	20f944 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  20f8e0:	e0bffc17 	ldw	r2,-16(fp)
  20f8e4:	10800317 	ldw	r2,12(r2)
  20f8e8:	10800404 	addi	r2,r2,16
  20f8ec:	10800037 	ldwio	r2,0(r2)
  20f8f0:	1080004c 	andi	r2,r2,1
  20f8f4:	103fee26 	beq	r2,zero,20f8b0 <_gp+0xffdfdccc>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
  20f8f8:	e0bffc17 	ldw	r2,-16(fp)
  20f8fc:	10800317 	ldw	r2,12(r2)
  20f900:	e13ffd03 	ldbu	r4,-12(fp)
  20f904:	e0fffe03 	ldbu	r3,-8(fp)
  20f908:	1806927a 	slli	r3,r3,9
  20f90c:	20c8b03a 	or	r4,r4,r3
  20f910:	e0ffff03 	ldbu	r3,-4(fp)
  20f914:	1806923a 	slli	r3,r3,8
  20f918:	20c6b03a 	or	r3,r4,r3
  20f91c:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  20f920:	e0bffb04 	addi	r2,fp,-20
  20f924:	100b883a 	mov	r5,r2
  20f928:	e13ffc17 	ldw	r4,-16(fp)
  20f92c:	020fab40 	call	20fab4 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
  20f930:	e0bffb04 	addi	r2,fp,-20
  20f934:	100b883a 	mov	r5,r2
  20f938:	e13ffc17 	ldw	r4,-16(fp)
  20f93c:	020fb000 	call	20fb00 <alt_avalon_i2c_check_arblost>
    
    return status;
  20f940:	e0bffb17 	ldw	r2,-20(fp)
}
  20f944:	e037883a 	mov	sp,fp
  20f948:	dfc00117 	ldw	ra,4(sp)
  20f94c:	df000017 	ldw	fp,0(sp)
  20f950:	dec00204 	addi	sp,sp,8
  20f954:	f800283a 	ret

0020f958 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
  20f958:	defffa04 	addi	sp,sp,-24
  20f95c:	dfc00515 	stw	ra,20(sp)
  20f960:	df000415 	stw	fp,16(sp)
  20f964:	df000404 	addi	fp,sp,16
  20f968:	e13ffd15 	stw	r4,-12(fp)
  20f96c:	e17ffe15 	stw	r5,-8(fp)
  20f970:	3005883a 	mov	r2,r6
  20f974:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
  20f978:	e0bffd17 	ldw	r2,-12(fp)
  20f97c:	10800d17 	ldw	r2,52(r2)
  20f980:	10800058 	cmpnei	r2,r2,1
  20f984:	10001c1e 	bne	r2,zero,20f9f8 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  20f988:	e0bffd17 	ldw	r2,-12(fp)
  20f98c:	10800917 	ldw	r2,36(r2)
  20f990:	109e0014 	ori	r2,r2,30720
  20f994:	1004d1fa 	srli	r2,r2,7
  20f998:	1007883a 	mov	r3,r2
  20f99c:	00bfff84 	movi	r2,-2
  20f9a0:	1884703a 	and	r2,r3,r2
  20f9a4:	1007883a 	mov	r3,r2
  20f9a8:	e0bffe17 	ldw	r2,-8(fp)
  20f9ac:	1884b03a 	or	r2,r3,r2
  20f9b0:	10803fcc 	andi	r2,r2,255
  20f9b4:	e0ffff03 	ldbu	r3,-4(fp)
  20f9b8:	000f883a 	mov	r7,zero
  20f9bc:	180d883a 	mov	r6,r3
  20f9c0:	100b883a 	mov	r5,r2
  20f9c4:	e13ffd17 	ldw	r4,-12(fp)
  20f9c8:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  20f9cc:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
  20f9d0:	e0bffd17 	ldw	r2,-12(fp)
  20f9d4:	10800917 	ldw	r2,36(r2)
  20f9d8:	10803fcc 	andi	r2,r2,255
  20f9dc:	000f883a 	mov	r7,zero
  20f9e0:	000d883a 	mov	r6,zero
  20f9e4:	100b883a 	mov	r5,r2
  20f9e8:	e13ffd17 	ldw	r4,-12(fp)
  20f9ec:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  20f9f0:	e0bffc15 	stw	r2,-16(fp)
  20f9f4:	00000e06 	br	20fa30 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  20f9f8:	e0bffd17 	ldw	r2,-12(fp)
  20f9fc:	10800917 	ldw	r2,36(r2)
  20fa00:	1085883a 	add	r2,r2,r2
  20fa04:	1007883a 	mov	r3,r2
  20fa08:	e0bffe17 	ldw	r2,-8(fp)
  20fa0c:	1884b03a 	or	r2,r3,r2
  20fa10:	10803fcc 	andi	r2,r2,255
  20fa14:	e0ffff03 	ldbu	r3,-4(fp)
  20fa18:	000f883a 	mov	r7,zero
  20fa1c:	180d883a 	mov	r6,r3
  20fa20:	100b883a 	mov	r5,r2
  20fa24:	e13ffd17 	ldw	r4,-12(fp)
  20fa28:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  20fa2c:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
  20fa30:	e0bffc17 	ldw	r2,-16(fp)
}
  20fa34:	e037883a 	mov	sp,fp
  20fa38:	dfc00117 	ldw	ra,4(sp)
  20fa3c:	df000017 	ldw	fp,0(sp)
  20fa40:	dec00204 	addi	sp,sp,8
  20fa44:	f800283a 	ret

0020fa48 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
  20fa48:	defffd04 	addi	sp,sp,-12
  20fa4c:	df000215 	stw	fp,8(sp)
  20fa50:	df000204 	addi	fp,sp,8
  20fa54:	e13ffe15 	stw	r4,-8(fp)
  20fa58:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
  20fa5c:	e0bffe17 	ldw	r2,-8(fp)
  20fa60:	10c00917 	ldw	r3,36(r2)
  20fa64:	e0bfff17 	ldw	r2,-4(fp)
  20fa68:	10c00015 	stw	r3,0(r2)
}
  20fa6c:	0001883a 	nop
  20fa70:	e037883a 	mov	sp,fp
  20fa74:	df000017 	ldw	fp,0(sp)
  20fa78:	dec00104 	addi	sp,sp,4
  20fa7c:	f800283a 	ret

0020fa80 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
  20fa80:	defffd04 	addi	sp,sp,-12
  20fa84:	df000215 	stw	fp,8(sp)
  20fa88:	df000204 	addi	fp,sp,8
  20fa8c:	e13ffe15 	stw	r4,-8(fp)
  20fa90:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
  20fa94:	e0bffe17 	ldw	r2,-8(fp)
  20fa98:	e0ffff17 	ldw	r3,-4(fp)
  20fa9c:	10c00915 	stw	r3,36(r2)
}
  20faa0:	0001883a 	nop
  20faa4:	e037883a 	mov	sp,fp
  20faa8:	df000017 	ldw	fp,0(sp)
  20faac:	dec00104 	addi	sp,sp,4
  20fab0:	f800283a 	ret

0020fab4 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
  20fab4:	defffd04 	addi	sp,sp,-12
  20fab8:	df000215 	stw	fp,8(sp)
  20fabc:	df000204 	addi	fp,sp,8
  20fac0:	e13ffe15 	stw	r4,-8(fp)
  20fac4:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
  20fac8:	e0bffe17 	ldw	r2,-8(fp)
  20facc:	10800317 	ldw	r2,12(r2)
  20fad0:	10800404 	addi	r2,r2,16
  20fad4:	10800037 	ldwio	r2,0(r2)
  20fad8:	1080010c 	andi	r2,r2,4
  20fadc:	10000326 	beq	r2,zero,20faec <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
  20fae0:	e0bfff17 	ldw	r2,-4(fp)
  20fae4:	00fffec4 	movi	r3,-5
  20fae8:	10c00015 	stw	r3,0(r2)
    }
}
  20faec:	0001883a 	nop
  20faf0:	e037883a 	mov	sp,fp
  20faf4:	df000017 	ldw	fp,0(sp)
  20faf8:	dec00104 	addi	sp,sp,4
  20fafc:	f800283a 	ret

0020fb00 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
  20fb00:	defffd04 	addi	sp,sp,-12
  20fb04:	df000215 	stw	fp,8(sp)
  20fb08:	df000204 	addi	fp,sp,8
  20fb0c:	e13ffe15 	stw	r4,-8(fp)
  20fb10:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
  20fb14:	e0bffe17 	ldw	r2,-8(fp)
  20fb18:	10800317 	ldw	r2,12(r2)
  20fb1c:	10800404 	addi	r2,r2,16
  20fb20:	10800037 	ldwio	r2,0(r2)
  20fb24:	1080020c 	andi	r2,r2,8
  20fb28:	10000326 	beq	r2,zero,20fb38 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
  20fb2c:	e0bfff17 	ldw	r2,-4(fp)
  20fb30:	00fffe84 	movi	r3,-6
  20fb34:	10c00015 	stw	r3,0(r2)
    }
}
  20fb38:	0001883a 	nop
  20fb3c:	e037883a 	mov	sp,fp
  20fb40:	df000017 	ldw	fp,0(sp)
  20fb44:	dec00104 	addi	sp,sp,4
  20fb48:	f800283a 	ret

0020fb4c <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  20fb4c:	defff804 	addi	sp,sp,-32
  20fb50:	dfc00715 	stw	ra,28(sp)
  20fb54:	df000615 	stw	fp,24(sp)
  20fb58:	df000604 	addi	fp,sp,24
  20fb5c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  20fb60:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  20fb64:	e0bfff17 	ldw	r2,-4(fp)
  20fb68:	10800717 	ldw	r2,28(r2)
  20fb6c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
  20fb70:	e0bffb17 	ldw	r2,-20(fp)
  20fb74:	10800117 	ldw	r2,4(r2)
  20fb78:	10800044 	addi	r2,r2,1
  20fb7c:	0149c404 	movi	r5,10000
  20fb80:	1009883a 	mov	r4,r2
  20fb84:	020179c0 	call	20179c <__mulsi3>
  20fb88:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
  20fb8c:	e0bffd04 	addi	r2,fp,-12
  20fb90:	100b883a 	mov	r5,r2
  20fb94:	e13fff17 	ldw	r4,-4(fp)
  20fb98:	02109e40 	call	2109e4 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
  20fb9c:	e0bffd17 	ldw	r2,-12(fp)
  20fba0:	100b883a 	mov	r5,r2
  20fba4:	e13fff17 	ldw	r4,-4(fp)
  20fba8:	02109180 	call	210918 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  20fbac:	e0bffc04 	addi	r2,fp,-16
  20fbb0:	100b883a 	mov	r5,r2
  20fbb4:	e13fff17 	ldw	r4,-4(fp)
  20fbb8:	020fab40 	call	20fab4 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
  20fbbc:	e0bffc17 	ldw	r2,-16(fp)
  20fbc0:	10002226 	beq	r2,zero,20fc4c <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
  20fbc4:	e0bffb17 	ldw	r2,-20(fp)
  20fbc8:	10800217 	ldw	r2,8(r2)
  20fbcc:	10001d26 	beq	r2,zero,20fc44 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  20fbd0:	00000d06 	br	20fc08 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
  20fbd4:	e0bffa17 	ldw	r2,-24(fp)
  20fbd8:	108002a8 	cmpgeui	r2,r2,10
  20fbdc:	1000021e 	bne	r2,zero,20fbe8 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
  20fbe0:	0109c404 	movi	r4,10000
  20fbe4:	02127540 	call	212754 <alt_busy_sleep>
              if (--timeout == 0)
  20fbe8:	e0bffa17 	ldw	r2,-24(fp)
  20fbec:	10bfffc4 	addi	r2,r2,-1
  20fbf0:	e0bffa15 	stw	r2,-24(fp)
  20fbf4:	e0bffa17 	ldw	r2,-24(fp)
  20fbf8:	1000031e 	bne	r2,zero,20fc08 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
  20fbfc:	00bfff84 	movi	r2,-2
  20fc00:	e0bffc15 	stw	r2,-16(fp)
                 break;
  20fc04:	00000306 	br	20fc14 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  20fc08:	e13fff17 	ldw	r4,-4(fp)
  20fc0c:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  20fc10:	103ff01e 	bne	r2,zero,20fbd4 <_gp+0xffdfdff0>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
  20fc14:	e0bffb17 	ldw	r2,-20(fp)
  20fc18:	10800017 	ldw	r2,0(r2)
  20fc1c:	e0fffe04 	addi	r3,fp,-8
  20fc20:	180f883a 	mov	r7,r3
  20fc24:	000d883a 	mov	r6,zero
  20fc28:	100b883a 	mov	r5,r2
  20fc2c:	e13fff17 	ldw	r4,-4(fp)
  20fc30:	020f7240 	call	20f724 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
  20fc34:	e13fff17 	ldw	r4,-4(fp)
  20fc38:	020f3880 	call	20f388 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
  20fc3c:	e0bffb17 	ldw	r2,-20(fp)
  20fc40:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
  20fc44:	e0bffc17 	ldw	r2,-16(fp)
  20fc48:	00000a06 	br	20fc74 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
  20fc4c:	e0bffb17 	ldw	r2,-20(fp)
  20fc50:	10800217 	ldw	r2,8(r2)
  20fc54:	10000626 	beq	r2,zero,20fc70 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
  20fc58:	e0bffd17 	ldw	r2,-12(fp)
  20fc5c:	100b883a 	mov	r5,r2
  20fc60:	e13fff17 	ldw	r4,-4(fp)
  20fc64:	02109800 	call	210980 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
  20fc68:	00bffe44 	movi	r2,-7
  20fc6c:	00000106 	br	20fc74 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
  20fc70:	0005883a 	mov	r2,zero
}
  20fc74:	e037883a 	mov	sp,fp
  20fc78:	dfc00117 	ldw	ra,4(sp)
  20fc7c:	df000017 	ldw	fp,0(sp)
  20fc80:	dec00204 	addi	sp,sp,8
  20fc84:	f800283a 	ret

0020fc88 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  20fc88:	defff704 	addi	sp,sp,-36
  20fc8c:	dfc00815 	stw	ra,32(sp)
  20fc90:	df000715 	stw	fp,28(sp)
  20fc94:	df000704 	addi	fp,sp,28
  20fc98:	e13ffc15 	stw	r4,-16(fp)
  20fc9c:	e17ffd15 	stw	r5,-12(fp)
  20fca0:	e1bffe15 	stw	r6,-8(fp)
  20fca4:	3805883a 	mov	r2,r7
  20fca8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fcac:	0089c404 	movi	r2,10000
  20fcb0:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
  20fcb4:	00002206 	br	20fd40 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
  20fcb8:	e0bffb17 	ldw	r2,-20(fp)
  20fcbc:	108002a8 	cmpgeui	r2,r2,10
  20fcc0:	1000021e 	bne	r2,zero,20fccc <alt_avalon_i2c_master_tx+0x44>
  20fcc4:	0109c404 	movi	r4,10000
  20fcc8:	02127540 	call	212754 <alt_busy_sleep>
      if (use_interrupts)
  20fccc:	e0bfff03 	ldbu	r2,-4(fp)
  20fcd0:	10000926 	beq	r2,zero,20fcf8 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
  20fcd4:	00800044 	movi	r2,1
  20fcd8:	d8800015 	stw	r2,0(sp)
  20fcdc:	000f883a 	mov	r7,zero
  20fce0:	e1bffe17 	ldw	r6,-8(fp)
  20fce4:	e17ffd17 	ldw	r5,-12(fp)
  20fce8:	e13ffc17 	ldw	r4,-16(fp)
  20fcec:	02102340 	call	210234 <alt_avalon_i2c_master_transmit_using_interrupts>
  20fcf0:	e0bffa15 	stw	r2,-24(fp)
  20fcf4:	00000806 	br	20fd18 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
  20fcf8:	00800044 	movi	r2,1
  20fcfc:	d8800015 	stw	r2,0(sp)
  20fd00:	000f883a 	mov	r7,zero
  20fd04:	e1bffe17 	ldw	r6,-8(fp)
  20fd08:	e17ffd17 	ldw	r5,-12(fp)
  20fd0c:	e13ffc17 	ldw	r4,-16(fp)
  20fd10:	02100740 	call	210074 <alt_avalon_i2c_master_transmit>
  20fd14:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fd18:	e0bffa17 	ldw	r2,-24(fp)
  20fd1c:	10bffea0 	cmpeqi	r2,r2,-6
  20fd20:	1000061e 	bne	r2,zero,20fd3c <alt_avalon_i2c_master_tx+0xb4>
  20fd24:	e0bffa17 	ldw	r2,-24(fp)
  20fd28:	10bffee0 	cmpeqi	r2,r2,-5
  20fd2c:	1000031e 	bne	r2,zero,20fd3c <alt_avalon_i2c_master_tx+0xb4>
  20fd30:	e0bffa17 	ldw	r2,-24(fp)
  20fd34:	10bffe58 	cmpnei	r2,r2,-7
  20fd38:	1000061e 	bne	r2,zero,20fd54 <alt_avalon_i2c_master_tx+0xcc>
  20fd3c:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
  20fd40:	e0bffb17 	ldw	r2,-20(fp)
  20fd44:	10ffffc4 	addi	r3,r2,-1
  20fd48:	e0fffb15 	stw	r3,-20(fp)
  20fd4c:	103fda1e 	bne	r2,zero,20fcb8 <_gp+0xffdfe0d4>
  20fd50:	00000106 	br	20fd58 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
  20fd54:	0001883a 	nop
    }

    return status;
  20fd58:	e0bffa17 	ldw	r2,-24(fp)
}        
  20fd5c:	e037883a 	mov	sp,fp
  20fd60:	dfc00117 	ldw	ra,4(sp)
  20fd64:	df000017 	ldw	fp,0(sp)
  20fd68:	dec00204 	addi	sp,sp,8
  20fd6c:	f800283a 	ret

0020fd70 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  20fd70:	defff704 	addi	sp,sp,-36
  20fd74:	dfc00815 	stw	ra,32(sp)
  20fd78:	df000715 	stw	fp,28(sp)
  20fd7c:	df000704 	addi	fp,sp,28
  20fd80:	e13ffc15 	stw	r4,-16(fp)
  20fd84:	e17ffd15 	stw	r5,-12(fp)
  20fd88:	e1bffe15 	stw	r6,-8(fp)
  20fd8c:	3805883a 	mov	r2,r7
  20fd90:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fd94:	0089c404 	movi	r2,10000
  20fd98:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
  20fd9c:	e0bfff03 	ldbu	r2,-4(fp)
  20fda0:	10003426 	beq	r2,zero,20fe74 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
  20fda4:	00001706 	br	20fe04 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fda8:	e0bffb17 	ldw	r2,-20(fp)
  20fdac:	108002a8 	cmpgeui	r2,r2,10
  20fdb0:	1000021e 	bne	r2,zero,20fdbc <alt_avalon_i2c_master_rx+0x4c>
  20fdb4:	0109c404 	movi	r4,10000
  20fdb8:	02127540 	call	212754 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  20fdbc:	00800044 	movi	r2,1
  20fdc0:	d8800015 	stw	r2,0(sp)
  20fdc4:	000f883a 	mov	r7,zero
  20fdc8:	e1bffe17 	ldw	r6,-8(fp)
  20fdcc:	e17ffd17 	ldw	r5,-12(fp)
  20fdd0:	e13ffc17 	ldw	r4,-16(fp)
  20fdd4:	02106500 	call	210650 <alt_avalon_i2c_master_receive_using_interrupts>
  20fdd8:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fddc:	e0bffa17 	ldw	r2,-24(fp)
  20fde0:	10bffea0 	cmpeqi	r2,r2,-6
  20fde4:	1000061e 	bne	r2,zero,20fe00 <alt_avalon_i2c_master_rx+0x90>
  20fde8:	e0bffa17 	ldw	r2,-24(fp)
  20fdec:	10bffee0 	cmpeqi	r2,r2,-5
  20fdf0:	1000031e 	bne	r2,zero,20fe00 <alt_avalon_i2c_master_rx+0x90>
  20fdf4:	e0bffa17 	ldw	r2,-24(fp)
  20fdf8:	10bffe58 	cmpnei	r2,r2,-7
  20fdfc:	1000221e 	bne	r2,zero,20fe88 <alt_avalon_i2c_master_rx+0x118>
  20fe00:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
  20fe04:	e0bffb17 	ldw	r2,-20(fp)
  20fe08:	10ffffc4 	addi	r3,r2,-1
  20fe0c:	e0fffb15 	stw	r3,-20(fp)
  20fe10:	103fe51e 	bne	r2,zero,20fda8 <_gp+0xffdfe1c4>
  20fe14:	00001f06 	br	20fe94 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fe18:	e0bffb17 	ldw	r2,-20(fp)
  20fe1c:	108002a8 	cmpgeui	r2,r2,10
  20fe20:	1000021e 	bne	r2,zero,20fe2c <alt_avalon_i2c_master_rx+0xbc>
  20fe24:	0109c404 	movi	r4,10000
  20fe28:	02127540 	call	212754 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  20fe2c:	00800044 	movi	r2,1
  20fe30:	d8800015 	stw	r2,0(sp)
  20fe34:	000f883a 	mov	r7,zero
  20fe38:	e1bffe17 	ldw	r6,-8(fp)
  20fe3c:	e17ffd17 	ldw	r5,-12(fp)
  20fe40:	e13ffc17 	ldw	r4,-16(fp)
  20fe44:	02104400 	call	210440 <alt_avalon_i2c_master_receive>
  20fe48:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20fe4c:	e0bffa17 	ldw	r2,-24(fp)
  20fe50:	10bffea0 	cmpeqi	r2,r2,-6
  20fe54:	1000061e 	bne	r2,zero,20fe70 <alt_avalon_i2c_master_rx+0x100>
  20fe58:	e0bffa17 	ldw	r2,-24(fp)
  20fe5c:	10bffee0 	cmpeqi	r2,r2,-5
  20fe60:	1000031e 	bne	r2,zero,20fe70 <alt_avalon_i2c_master_rx+0x100>
  20fe64:	e0bffa17 	ldw	r2,-24(fp)
  20fe68:	10bffe58 	cmpnei	r2,r2,-7
  20fe6c:	1000081e 	bne	r2,zero,20fe90 <alt_avalon_i2c_master_rx+0x120>
  20fe70:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
  20fe74:	e0bffb17 	ldw	r2,-20(fp)
  20fe78:	10ffffc4 	addi	r3,r2,-1
  20fe7c:	e0fffb15 	stw	r3,-20(fp)
  20fe80:	103fe51e 	bne	r2,zero,20fe18 <_gp+0xffdfe234>
  20fe84:	00000306 	br	20fe94 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  20fe88:	0001883a 	nop
  20fe8c:	00000106 	br	20fe94 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  20fe90:	0001883a 	nop
      }
    }
    
    return status;
  20fe94:	e0bffa17 	ldw	r2,-24(fp)
}        
  20fe98:	e037883a 	mov	sp,fp
  20fe9c:	dfc00117 	ldw	ra,4(sp)
  20fea0:	df000017 	ldw	fp,0(sp)
  20fea4:	dec00204 	addi	sp,sp,8
  20fea8:	f800283a 	ret

0020feac <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
  20feac:	defff604 	addi	sp,sp,-40
  20feb0:	dfc00915 	stw	ra,36(sp)
  20feb4:	df000815 	stw	fp,32(sp)
  20feb8:	df000804 	addi	fp,sp,32
  20febc:	e13ffb15 	stw	r4,-20(fp)
  20fec0:	e17ffc15 	stw	r5,-16(fp)
  20fec4:	e1bffd15 	stw	r6,-12(fp)
  20fec8:	e1fffe15 	stw	r7,-8(fp)
  20fecc:	e0800317 	ldw	r2,12(fp)
  20fed0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  20fed4:	0089c404 	movi	r2,10000
  20fed8:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
  20fedc:	e0bfff03 	ldbu	r2,-4(fp)
  20fee0:	10005626 	beq	r2,zero,21003c <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
  20fee4:	00002806 	br	20ff88 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
  20fee8:	e0bffa17 	ldw	r2,-24(fp)
  20feec:	108002a8 	cmpgeui	r2,r2,10
  20fef0:	1000021e 	bne	r2,zero,20fefc <alt_avalon_i2c_master_tx_rx+0x50>
  20fef4:	0109c404 	movi	r4,10000
  20fef8:	02127540 	call	212754 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  20fefc:	d8000015 	stw	zero,0(sp)
  20ff00:	000f883a 	mov	r7,zero
  20ff04:	e1bffd17 	ldw	r6,-12(fp)
  20ff08:	e17ffc17 	ldw	r5,-16(fp)
  20ff0c:	e13ffb17 	ldw	r4,-20(fp)
  20ff10:	02102340 	call	210234 <alt_avalon_i2c_master_transmit_using_interrupts>
  20ff14:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ff18:	e0bff917 	ldw	r2,-28(fp)
  20ff1c:	10bffea0 	cmpeqi	r2,r2,-6
  20ff20:	1000191e 	bne	r2,zero,20ff88 <alt_avalon_i2c_master_tx_rx+0xdc>
  20ff24:	e0bff917 	ldw	r2,-28(fp)
  20ff28:	10bffee0 	cmpeqi	r2,r2,-5
  20ff2c:	1000161e 	bne	r2,zero,20ff88 <alt_avalon_i2c_master_tx_rx+0xdc>
  20ff30:	e0bff917 	ldw	r2,-28(fp)
  20ff34:	10bffe58 	cmpnei	r2,r2,-7
  20ff38:	1000011e 	bne	r2,zero,20ff40 <alt_avalon_i2c_master_tx_rx+0x94>
  20ff3c:	00001206 	br	20ff88 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  20ff40:	00800044 	movi	r2,1
  20ff44:	d8800015 	stw	r2,0(sp)
  20ff48:	01c00044 	movi	r7,1
  20ff4c:	e1800217 	ldw	r6,8(fp)
  20ff50:	e17ffe17 	ldw	r5,-8(fp)
  20ff54:	e13ffb17 	ldw	r4,-20(fp)
  20ff58:	02106500 	call	210650 <alt_avalon_i2c_master_receive_using_interrupts>
  20ff5c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ff60:	e0bff917 	ldw	r2,-28(fp)
  20ff64:	10bffea0 	cmpeqi	r2,r2,-6
  20ff68:	1000061e 	bne	r2,zero,20ff84 <alt_avalon_i2c_master_tx_rx+0xd8>
  20ff6c:	e0bff917 	ldw	r2,-28(fp)
  20ff70:	10bffee0 	cmpeqi	r2,r2,-5
  20ff74:	1000031e 	bne	r2,zero,20ff84 <alt_avalon_i2c_master_tx_rx+0xd8>
  20ff78:	e0bff917 	ldw	r2,-28(fp)
  20ff7c:	10bffe58 	cmpnei	r2,r2,-7
  20ff80:	1000331e 	bne	r2,zero,210050 <alt_avalon_i2c_master_tx_rx+0x1a4>
  20ff84:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
  20ff88:	e0bffa17 	ldw	r2,-24(fp)
  20ff8c:	10ffffc4 	addi	r3,r2,-1
  20ff90:	e0fffa15 	stw	r3,-24(fp)
  20ff94:	103fd41e 	bne	r2,zero,20fee8 <_gp+0xffdfe304>
  20ff98:	00003006 	br	21005c <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  20ff9c:	e0bffa17 	ldw	r2,-24(fp)
  20ffa0:	108002a8 	cmpgeui	r2,r2,10
  20ffa4:	1000021e 	bne	r2,zero,20ffb0 <alt_avalon_i2c_master_tx_rx+0x104>
  20ffa8:	0109c404 	movi	r4,10000
  20ffac:	02127540 	call	212754 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  20ffb0:	d8000015 	stw	zero,0(sp)
  20ffb4:	000f883a 	mov	r7,zero
  20ffb8:	e1bffd17 	ldw	r6,-12(fp)
  20ffbc:	e17ffc17 	ldw	r5,-16(fp)
  20ffc0:	e13ffb17 	ldw	r4,-20(fp)
  20ffc4:	02100740 	call	210074 <alt_avalon_i2c_master_transmit>
  20ffc8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  20ffcc:	e0bff917 	ldw	r2,-28(fp)
  20ffd0:	10bffea0 	cmpeqi	r2,r2,-6
  20ffd4:	1000191e 	bne	r2,zero,21003c <alt_avalon_i2c_master_tx_rx+0x190>
  20ffd8:	e0bff917 	ldw	r2,-28(fp)
  20ffdc:	10bffee0 	cmpeqi	r2,r2,-5
  20ffe0:	1000161e 	bne	r2,zero,21003c <alt_avalon_i2c_master_tx_rx+0x190>
  20ffe4:	e0bff917 	ldw	r2,-28(fp)
  20ffe8:	10bffe58 	cmpnei	r2,r2,-7
  20ffec:	1000011e 	bne	r2,zero,20fff4 <alt_avalon_i2c_master_tx_rx+0x148>
  20fff0:	00001206 	br	21003c <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  20fff4:	00800044 	movi	r2,1
  20fff8:	d8800015 	stw	r2,0(sp)
  20fffc:	01c00044 	movi	r7,1
  210000:	e1800217 	ldw	r6,8(fp)
  210004:	e17ffe17 	ldw	r5,-8(fp)
  210008:	e13ffb17 	ldw	r4,-20(fp)
  21000c:	02104400 	call	210440 <alt_avalon_i2c_master_receive>
  210010:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  210014:	e0bff917 	ldw	r2,-28(fp)
  210018:	10bffea0 	cmpeqi	r2,r2,-6
  21001c:	1000061e 	bne	r2,zero,210038 <alt_avalon_i2c_master_tx_rx+0x18c>
  210020:	e0bff917 	ldw	r2,-28(fp)
  210024:	10bffee0 	cmpeqi	r2,r2,-5
  210028:	1000031e 	bne	r2,zero,210038 <alt_avalon_i2c_master_tx_rx+0x18c>
  21002c:	e0bff917 	ldw	r2,-28(fp)
  210030:	10bffe58 	cmpnei	r2,r2,-7
  210034:	1000081e 	bne	r2,zero,210058 <alt_avalon_i2c_master_tx_rx+0x1ac>
  210038:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
  21003c:	e0bffa17 	ldw	r2,-24(fp)
  210040:	10ffffc4 	addi	r3,r2,-1
  210044:	e0fffa15 	stw	r3,-24(fp)
  210048:	103fd41e 	bne	r2,zero,20ff9c <_gp+0xffdfe3b8>
  21004c:	00000306 	br	21005c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  210050:	0001883a 	nop
  210054:	00000106 	br	21005c <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  210058:	0001883a 	nop
      }
    }
    
    return status;
  21005c:	e0bff917 	ldw	r2,-28(fp)
}                                       
  210060:	e037883a 	mov	sp,fp
  210064:	dfc00117 	ldw	ra,4(sp)
  210068:	df000017 	ldw	fp,0(sp)
  21006c:	dec00204 	addi	sp,sp,8
  210070:	f800283a 	ret

00210074 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  210074:	defff704 	addi	sp,sp,-36
  210078:	dfc00815 	stw	ra,32(sp)
  21007c:	df000715 	stw	fp,28(sp)
  210080:	df000704 	addi	fp,sp,28
  210084:	e13ffb15 	stw	r4,-20(fp)
  210088:	e17ffc15 	stw	r5,-16(fp)
  21008c:	e1bffd15 	stw	r6,-12(fp)
  210090:	3807883a 	mov	r3,r7
  210094:	e0800217 	ldw	r2,8(fp)
  210098:	e0fffe05 	stb	r3,-8(fp)
  21009c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  2100a0:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
  2100a4:	0149c404 	movi	r5,10000
  2100a8:	e13ffd17 	ldw	r4,-12(fp)
  2100ac:	020179c0 	call	20179c <__mulsi3>
  2100b0:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
  2100b4:	e0bffd17 	ldw	r2,-12(fp)
  2100b8:	1000021e 	bne	r2,zero,2100c4 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  2100bc:	0005883a 	mov	r2,zero
  2100c0:	00005706 	br	210220 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2100c4:	e0bffe03 	ldbu	r2,-8(fp)
  2100c8:	10000a1e 	bne	r2,zero,2100f4 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2100cc:	e13ffb17 	ldw	r4,-20(fp)
  2100d0:	020f2f00 	call	20f2f0 <alt_avalon_i2c_enable>
  2100d4:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2100d8:	e0bffa17 	ldw	r2,-24(fp)
  2100dc:	10000226 	beq	r2,zero,2100e8 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
  2100e0:	e0bffa17 	ldw	r2,-24(fp)
  2100e4:	00004e06 	br	210220 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2100e8:	01400704 	movi	r5,28
  2100ec:	e13ffb17 	ldw	r4,-20(fp)
  2100f0:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  2100f4:	e0bffe03 	ldbu	r2,-8(fp)
  2100f8:	100d883a 	mov	r6,r2
  2100fc:	000b883a 	mov	r5,zero
  210100:	e13ffb17 	ldw	r4,-20(fp)
  210104:	020f9580 	call	20f958 <alt_avalon_i2c_send_address>
  210108:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
  21010c:	e0bffa17 	ldw	r2,-24(fp)
  210110:	1000271e 	bne	r2,zero,2101b0 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210114:	00000f06 	br	210154 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  210118:	e0bffc17 	ldw	r2,-16(fp)
  21011c:	10800003 	ldbu	r2,0(r2)
  210120:	10803fcc 	andi	r2,r2,255
  210124:	000f883a 	mov	r7,zero
  210128:	000d883a 	mov	r6,zero
  21012c:	100b883a 	mov	r5,r2
  210130:	e13ffb17 	ldw	r4,-20(fp)
  210134:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  210138:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
  21013c:	e0bffc17 	ldw	r2,-16(fp)
  210140:	10800044 	addi	r2,r2,1
  210144:	e0bffc15 	stw	r2,-16(fp)
            --size;
  210148:	e0bffd17 	ldw	r2,-12(fp)
  21014c:	10bfffc4 	addi	r2,r2,-1
  210150:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  210154:	e0bffd17 	ldw	r2,-12(fp)
  210158:	108000b0 	cmpltui	r2,r2,2
  21015c:	1000021e 	bne	r2,zero,210168 <alt_avalon_i2c_master_transmit+0xf4>
  210160:	e0bffa17 	ldw	r2,-24(fp)
  210164:	103fec26 	beq	r2,zero,210118 <_gp+0xffdfe534>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210168:	e0bffa17 	ldw	r2,-24(fp)
  21016c:	1000101e 	bne	r2,zero,2101b0 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210170:	e0bffc17 	ldw	r2,-16(fp)
  210174:	10800003 	ldbu	r2,0(r2)
  210178:	10803fcc 	andi	r2,r2,255
  21017c:	e0ffff03 	ldbu	r3,-4(fp)
  210180:	180f883a 	mov	r7,r3
  210184:	000d883a 	mov	r6,zero
  210188:	100b883a 	mov	r5,r2
  21018c:	e13ffb17 	ldw	r4,-20(fp)
  210190:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  210194:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
  210198:	e0bffc17 	ldw	r2,-16(fp)
  21019c:	10800044 	addi	r2,r2,1
  2101a0:	e0bffc15 	stw	r2,-16(fp)
            --size;
  2101a4:	e0bffd17 	ldw	r2,-12(fp)
  2101a8:	10bfffc4 	addi	r2,r2,-1
  2101ac:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  2101b0:	e0bfff03 	ldbu	r2,-4(fp)
  2101b4:	1000101e 	bne	r2,zero,2101f8 <alt_avalon_i2c_master_transmit+0x184>
  2101b8:	e0bffa17 	ldw	r2,-24(fp)
  2101bc:	10001726 	beq	r2,zero,21021c <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2101c0:	00000d06 	br	2101f8 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
  2101c4:	e0bff917 	ldw	r2,-28(fp)
  2101c8:	108002a8 	cmpgeui	r2,r2,10
  2101cc:	1000021e 	bne	r2,zero,2101d8 <alt_avalon_i2c_master_transmit+0x164>
  2101d0:	0109c404 	movi	r4,10000
  2101d4:	02127540 	call	212754 <alt_busy_sleep>
            if (--timeout == 0)
  2101d8:	e0bff917 	ldw	r2,-28(fp)
  2101dc:	10bfffc4 	addi	r2,r2,-1
  2101e0:	e0bff915 	stw	r2,-28(fp)
  2101e4:	e0bff917 	ldw	r2,-28(fp)
  2101e8:	1000031e 	bne	r2,zero,2101f8 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2101ec:	00bfff84 	movi	r2,-2
  2101f0:	e0bffa15 	stw	r2,-24(fp)
               break;
  2101f4:	00000306 	br	210204 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2101f8:	e13ffb17 	ldw	r4,-20(fp)
  2101fc:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  210200:	103ff01e 	bne	r2,zero,2101c4 <_gp+0xffdfe5e0>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
  210204:	e0bffa04 	addi	r2,fp,-24
  210208:	100b883a 	mov	r5,r2
  21020c:	e13ffb17 	ldw	r4,-20(fp)
  210210:	020fab40 	call	20fab4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  210214:	e13ffb17 	ldw	r4,-20(fp)
  210218:	020f3880 	call	20f388 <alt_avalon_i2c_disable>
    }


    return status;
  21021c:	e0bffa17 	ldw	r2,-24(fp)
}
  210220:	e037883a 	mov	sp,fp
  210224:	dfc00117 	ldw	ra,4(sp)
  210228:	df000017 	ldw	fp,0(sp)
  21022c:	dec00204 	addi	sp,sp,8
  210230:	f800283a 	ret

00210234 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  210234:	defff604 	addi	sp,sp,-40
  210238:	dfc00915 	stw	ra,36(sp)
  21023c:	df000815 	stw	fp,32(sp)
  210240:	df000804 	addi	fp,sp,32
  210244:	e13ffb15 	stw	r4,-20(fp)
  210248:	e17ffc15 	stw	r5,-16(fp)
  21024c:	e1bffd15 	stw	r6,-12(fp)
  210250:	3807883a 	mov	r3,r7
  210254:	e0800217 	ldw	r2,8(fp)
  210258:	e0fffe05 	stb	r3,-8(fp)
  21025c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  210260:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
  210264:	0149c404 	movi	r5,10000
  210268:	e13ffd17 	ldw	r4,-12(fp)
  21026c:	020179c0 	call	20179c <__mulsi3>
  210270:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  210274:	e0bffb17 	ldw	r2,-20(fp)
  210278:	10800717 	ldw	r2,28(r2)
  21027c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
  210280:	e0bffd17 	ldw	r2,-12(fp)
  210284:	1000021e 	bne	r2,zero,210290 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
  210288:	0005883a 	mov	r2,zero
  21028c:	00006706 	br	21042c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  210290:	e0bffb17 	ldw	r2,-20(fp)
  210294:	10c00617 	ldw	r3,24(r2)
  210298:	00800874 	movhi	r2,33
  21029c:	10bbdd04 	addi	r2,r2,-4236
  2102a0:	18800226 	beq	r3,r2,2102ac <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  2102a4:	00bfff44 	movi	r2,-3
  2102a8:	00006006 	br	21042c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2102ac:	e0bffe03 	ldbu	r2,-8(fp)
  2102b0:	10000a1e 	bne	r2,zero,2102dc <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2102b4:	e13ffb17 	ldw	r4,-20(fp)
  2102b8:	020f2f00 	call	20f2f0 <alt_avalon_i2c_enable>
  2102bc:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2102c0:	e0bff817 	ldw	r2,-32(fp)
  2102c4:	10000226 	beq	r2,zero,2102d0 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
  2102c8:	e0bff817 	ldw	r2,-32(fp)
  2102cc:	00005706 	br	21042c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2102d0:	01400704 	movi	r5,28
  2102d4:	e13ffb17 	ldw	r4,-20(fp)
  2102d8:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  2102dc:	e0bffe03 	ldbu	r2,-8(fp)
  2102e0:	100d883a 	mov	r6,r2
  2102e4:	000b883a 	mov	r5,zero
  2102e8:	e13ffb17 	ldw	r4,-20(fp)
  2102ec:	020f9580 	call	20f958 <alt_avalon_i2c_send_address>
  2102f0:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
  2102f4:	e0bff817 	ldw	r2,-32(fp)
  2102f8:	1000271e 	bne	r2,zero,210398 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  2102fc:	00000f06 	br	21033c <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  210300:	e0bffc17 	ldw	r2,-16(fp)
  210304:	10800003 	ldbu	r2,0(r2)
  210308:	10803fcc 	andi	r2,r2,255
  21030c:	000f883a 	mov	r7,zero
  210310:	000d883a 	mov	r6,zero
  210314:	100b883a 	mov	r5,r2
  210318:	e13ffb17 	ldw	r4,-20(fp)
  21031c:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  210320:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
  210324:	e0bffc17 	ldw	r2,-16(fp)
  210328:	10800044 	addi	r2,r2,1
  21032c:	e0bffc15 	stw	r2,-16(fp)
            --size;
  210330:	e0bffd17 	ldw	r2,-12(fp)
  210334:	10bfffc4 	addi	r2,r2,-1
  210338:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  21033c:	e0bffd17 	ldw	r2,-12(fp)
  210340:	108000b0 	cmpltui	r2,r2,2
  210344:	1000021e 	bne	r2,zero,210350 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
  210348:	e0bff817 	ldw	r2,-32(fp)
  21034c:	103fec26 	beq	r2,zero,210300 <_gp+0xffdfe71c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210350:	e0bff817 	ldw	r2,-32(fp)
  210354:	1000101e 	bne	r2,zero,210398 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210358:	e0bffc17 	ldw	r2,-16(fp)
  21035c:	10800003 	ldbu	r2,0(r2)
  210360:	10803fcc 	andi	r2,r2,255
  210364:	e0ffff03 	ldbu	r3,-4(fp)
  210368:	180f883a 	mov	r7,r3
  21036c:	000d883a 	mov	r6,zero
  210370:	100b883a 	mov	r5,r2
  210374:	e13ffb17 	ldw	r4,-20(fp)
  210378:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  21037c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
  210380:	e0bffc17 	ldw	r2,-16(fp)
  210384:	10800044 	addi	r2,r2,1
  210388:	e0bffc15 	stw	r2,-16(fp)
            --size;
  21038c:	e0bffd17 	ldw	r2,-12(fp)
  210390:	10bfffc4 	addi	r2,r2,-1
  210394:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  210398:	e0bff817 	ldw	r2,-32(fp)
  21039c:	10001426 	beq	r2,zero,2103f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2103a0:	00000d06 	br	2103d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
  2103a4:	e0bff917 	ldw	r2,-28(fp)
  2103a8:	108002a8 	cmpgeui	r2,r2,10
  2103ac:	1000021e 	bne	r2,zero,2103b8 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
  2103b0:	0109c404 	movi	r4,10000
  2103b4:	02127540 	call	212754 <alt_busy_sleep>
            if (--timeout == 0)
  2103b8:	e0bff917 	ldw	r2,-28(fp)
  2103bc:	10bfffc4 	addi	r2,r2,-1
  2103c0:	e0bff915 	stw	r2,-28(fp)
  2103c4:	e0bff917 	ldw	r2,-28(fp)
  2103c8:	1000031e 	bne	r2,zero,2103d8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2103cc:	00bfff84 	movi	r2,-2
  2103d0:	e0bff815 	stw	r2,-32(fp)
               break;
  2103d4:	00000306 	br	2103e4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  2103d8:	e13ffb17 	ldw	r4,-20(fp)
  2103dc:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  2103e0:	103ff01e 	bne	r2,zero,2103a4 <_gp+0xffdfe7c0>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  2103e4:	e13ffb17 	ldw	r4,-20(fp)
  2103e8:	020f3880 	call	20f388 <alt_avalon_i2c_disable>
  2103ec:	00000e06 	br	210428 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
  2103f0:	e0bfff03 	ldbu	r2,-4(fp)
  2103f4:	10000c26 	beq	r2,zero,210428 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2103f8:	01400704 	movi	r5,28
  2103fc:	e13ffb17 	ldw	r4,-20(fp)
  210400:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
  210404:	000b883a 	mov	r5,zero
  210408:	e13ffb17 	ldw	r4,-20(fp)
  21040c:	0210b240 	call	210b24 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
  210410:	e0bffa17 	ldw	r2,-24(fp)
  210414:	00c00044 	movi	r3,1
  210418:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
  21041c:	01400044 	movi	r5,1
  210420:	e13ffb17 	ldw	r4,-20(fp)
  210424:	02109800 	call	210980 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
  210428:	e0bff817 	ldw	r2,-32(fp)
}
  21042c:	e037883a 	mov	sp,fp
  210430:	dfc00117 	ldw	ra,4(sp)
  210434:	df000017 	ldw	fp,0(sp)
  210438:	dec00204 	addi	sp,sp,8
  21043c:	f800283a 	ret

00210440 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  210440:	defff404 	addi	sp,sp,-48
  210444:	dfc00b15 	stw	ra,44(sp)
  210448:	df000a15 	stw	fp,40(sp)
  21044c:	df000a04 	addi	fp,sp,40
  210450:	e13ffb15 	stw	r4,-20(fp)
  210454:	e17ffc15 	stw	r5,-16(fp)
  210458:	e1bffd15 	stw	r6,-12(fp)
  21045c:	3807883a 	mov	r3,r7
  210460:	e0800217 	ldw	r2,8(fp)
  210464:	e0fffe05 	stb	r3,-8(fp)
  210468:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  21046c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
  210470:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
  210474:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
  210478:	e0bffd17 	ldw	r2,-12(fp)
  21047c:	1000021e 	bne	r2,zero,210488 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
  210480:	0005883a 	mov	r2,zero
  210484:	00006d06 	br	21063c <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  210488:	e0bffe03 	ldbu	r2,-8(fp)
  21048c:	10000a1e 	bne	r2,zero,2104b8 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  210490:	e13ffb17 	ldw	r4,-20(fp)
  210494:	020f2f00 	call	20f2f0 <alt_avalon_i2c_enable>
  210498:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  21049c:	e0bff917 	ldw	r2,-28(fp)
  2104a0:	10000226 	beq	r2,zero,2104ac <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
  2104a4:	e0bff917 	ldw	r2,-28(fp)
  2104a8:	00006406 	br	21063c <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2104ac:	01400704 	movi	r5,28
  2104b0:	e13ffb17 	ldw	r4,-20(fp)
  2104b4:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  2104b8:	e0bffe03 	ldbu	r2,-8(fp)
  2104bc:	100d883a 	mov	r6,r2
  2104c0:	01400044 	movi	r5,1
  2104c4:	e13ffb17 	ldw	r4,-20(fp)
  2104c8:	020f9580 	call	20f958 <alt_avalon_i2c_send_address>
  2104cc:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  2104d0:	e0bff917 	ldw	r2,-28(fp)
  2104d4:	1000341e 	bne	r2,zero,2105a8 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2104d8:	00001906 	br	210540 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  2104dc:	000f883a 	mov	r7,zero
  2104e0:	000d883a 	mov	r6,zero
  2104e4:	000b883a 	mov	r5,zero
  2104e8:	e13ffb17 	ldw	r4,-20(fp)
  2104ec:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  2104f0:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
  2104f4:	e0bff817 	ldw	r2,-32(fp)
  2104f8:	10800044 	addi	r2,r2,1
  2104fc:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
  210500:	e0bff917 	ldw	r2,-28(fp)
  210504:	10000e1e 	bne	r2,zero,210540 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
  210508:	e0bffa04 	addi	r2,fp,-24
  21050c:	100f883a 	mov	r7,r2
  210510:	000d883a 	mov	r6,zero
  210514:	e17ffc17 	ldw	r5,-16(fp)
  210518:	e13ffb17 	ldw	r4,-20(fp)
  21051c:	020f7240 	call	20f724 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
  210520:	e0bffa17 	ldw	r2,-24(fp)
  210524:	e0fffc17 	ldw	r3,-16(fp)
  210528:	1885883a 	add	r2,r3,r2
  21052c:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
  210530:	e0bffa17 	ldw	r2,-24(fp)
  210534:	e0fff717 	ldw	r3,-36(fp)
  210538:	1885883a 	add	r2,r3,r2
  21053c:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  210540:	e0bffd17 	ldw	r2,-12(fp)
  210544:	10bfffc4 	addi	r2,r2,-1
  210548:	e0fff817 	ldw	r3,-32(fp)
  21054c:	1880022e 	bgeu	r3,r2,210558 <alt_avalon_i2c_master_receive+0x118>
  210550:	e0bff917 	ldw	r2,-28(fp)
  210554:	103fe126 	beq	r2,zero,2104dc <_gp+0xffdfe8f8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  210558:	e0bff917 	ldw	r2,-28(fp)
  21055c:	1000121e 	bne	r2,zero,2105a8 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210560:	e0bfff03 	ldbu	r2,-4(fp)
  210564:	100f883a 	mov	r7,r2
  210568:	000d883a 	mov	r6,zero
  21056c:	000b883a 	mov	r5,zero
  210570:	e13ffb17 	ldw	r4,-20(fp)
  210574:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  210578:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  21057c:	00000a06 	br	2105a8 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
  210580:	e17ffc17 	ldw	r5,-16(fp)
  210584:	e13ffb17 	ldw	r4,-20(fp)
  210588:	020f7cc0 	call	20f7cc <alt_avalon_i2c_rx_read>
  21058c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
  210590:	e0bffc17 	ldw	r2,-16(fp)
  210594:	10800044 	addi	r2,r2,1
  210598:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
  21059c:	e0bff717 	ldw	r2,-36(fp)
  2105a0:	10800044 	addi	r2,r2,1
  2105a4:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  2105a8:	e0fff717 	ldw	r3,-36(fp)
  2105ac:	e0bffd17 	ldw	r2,-12(fp)
  2105b0:	1880022e 	bgeu	r3,r2,2105bc <alt_avalon_i2c_master_receive+0x17c>
  2105b4:	e0bff917 	ldw	r2,-28(fp)
  2105b8:	103ff126 	beq	r2,zero,210580 <_gp+0xffdfe99c>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  2105bc:	e0bfff03 	ldbu	r2,-4(fp)
  2105c0:	1000021e 	bne	r2,zero,2105cc <alt_avalon_i2c_master_receive+0x18c>
  2105c4:	e0bff917 	ldw	r2,-28(fp)
  2105c8:	10001b26 	beq	r2,zero,210638 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
  2105cc:	0149c404 	movi	r5,10000
  2105d0:	e13ffd17 	ldw	r4,-12(fp)
  2105d4:	020179c0 	call	20179c <__mulsi3>
  2105d8:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2105dc:	00000d06 	br	210614 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
  2105e0:	e0bff617 	ldw	r2,-40(fp)
  2105e4:	108002a8 	cmpgeui	r2,r2,10
  2105e8:	1000021e 	bne	r2,zero,2105f4 <alt_avalon_i2c_master_receive+0x1b4>
  2105ec:	0109c404 	movi	r4,10000
  2105f0:	02127540 	call	212754 <alt_busy_sleep>
            if (--timeout == 0)
  2105f4:	e0bff617 	ldw	r2,-40(fp)
  2105f8:	10bfffc4 	addi	r2,r2,-1
  2105fc:	e0bff615 	stw	r2,-40(fp)
  210600:	e0bff617 	ldw	r2,-40(fp)
  210604:	1000031e 	bne	r2,zero,210614 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  210608:	00bfff84 	movi	r2,-2
  21060c:	e0bff915 	stw	r2,-28(fp)
               break;
  210610:	00000306 	br	210620 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  210614:	e13ffb17 	ldw	r4,-20(fp)
  210618:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  21061c:	103ff01e 	bne	r2,zero,2105e0 <_gp+0xffdfe9fc>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
  210620:	e0bff904 	addi	r2,fp,-28
  210624:	100b883a 	mov	r5,r2
  210628:	e13ffb17 	ldw	r4,-20(fp)
  21062c:	020fab40 	call	20fab4 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  210630:	e13ffb17 	ldw	r4,-20(fp)
  210634:	020f3880 	call	20f388 <alt_avalon_i2c_disable>
    }

    return status;
  210638:	e0bff917 	ldw	r2,-28(fp)
}
  21063c:	e037883a 	mov	sp,fp
  210640:	dfc00117 	ldw	ra,4(sp)
  210644:	df000017 	ldw	fp,0(sp)
  210648:	dec00204 	addi	sp,sp,8
  21064c:	f800283a 	ret

00210650 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  210650:	defff504 	addi	sp,sp,-44
  210654:	dfc00a15 	stw	ra,40(sp)
  210658:	df000915 	stw	fp,36(sp)
  21065c:	df000904 	addi	fp,sp,36
  210660:	e13ffb15 	stw	r4,-20(fp)
  210664:	e17ffc15 	stw	r5,-16(fp)
  210668:	e1bffd15 	stw	r6,-12(fp)
  21066c:	3807883a 	mov	r3,r7
  210670:	e0800217 	ldw	r2,8(fp)
  210674:	e0fffe05 	stb	r3,-8(fp)
  210678:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  21067c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  210680:	e0bffb17 	ldw	r2,-20(fp)
  210684:	10800717 	ldw	r2,28(r2)
  210688:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
  21068c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
  210690:	e0bffd17 	ldw	r2,-12(fp)
  210694:	1000021e 	bne	r2,zero,2106a0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  210698:	0005883a 	mov	r2,zero
  21069c:	00006306 	br	21082c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  2106a0:	e0bffb17 	ldw	r2,-20(fp)
  2106a4:	10c00617 	ldw	r3,24(r2)
  2106a8:	00800874 	movhi	r2,33
  2106ac:	10bbdd04 	addi	r2,r2,-4236
  2106b0:	18800226 	beq	r3,r2,2106bc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  2106b4:	00bfff44 	movi	r2,-3
  2106b8:	00005c06 	br	21082c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  2106bc:	e0bffe03 	ldbu	r2,-8(fp)
  2106c0:	10000a1e 	bne	r2,zero,2106ec <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  2106c4:	e13ffb17 	ldw	r4,-20(fp)
  2106c8:	020f2f00 	call	20f2f0 <alt_avalon_i2c_enable>
  2106cc:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  2106d0:	e0bff717 	ldw	r2,-36(fp)
  2106d4:	10000226 	beq	r2,zero,2106e0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
  2106d8:	e0bff717 	ldw	r2,-36(fp)
  2106dc:	00005306 	br	21082c <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2106e0:	01400704 	movi	r5,28
  2106e4:	e13ffb17 	ldw	r4,-20(fp)
  2106e8:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  2106ec:	e0bffe03 	ldbu	r2,-8(fp)
  2106f0:	100d883a 	mov	r6,r2
  2106f4:	01400044 	movi	r5,1
  2106f8:	e13ffb17 	ldw	r4,-20(fp)
  2106fc:	020f9580 	call	20f958 <alt_avalon_i2c_send_address>
  210700:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  210704:	e0bff717 	ldw	r2,-36(fp)
  210708:	1000191e 	bne	r2,zero,210770 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  21070c:	00000906 	br	210734 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  210710:	000f883a 	mov	r7,zero
  210714:	000d883a 	mov	r6,zero
  210718:	000b883a 	mov	r5,zero
  21071c:	e13ffb17 	ldw	r4,-20(fp)
  210720:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  210724:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
  210728:	e0bff917 	ldw	r2,-28(fp)
  21072c:	10800044 	addi	r2,r2,1
  210730:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  210734:	e0bffd17 	ldw	r2,-12(fp)
  210738:	10bfffc4 	addi	r2,r2,-1
  21073c:	e0fff917 	ldw	r3,-28(fp)
  210740:	1880022e 	bgeu	r3,r2,21074c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
  210744:	e0bff717 	ldw	r2,-36(fp)
  210748:	103ff126 	beq	r2,zero,210710 <_gp+0xffdfeb2c>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  21074c:	e0bff717 	ldw	r2,-36(fp)
  210750:	1000071e 	bne	r2,zero,210770 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  210754:	e0bfff03 	ldbu	r2,-4(fp)
  210758:	100f883a 	mov	r7,r2
  21075c:	000d883a 	mov	r6,zero
  210760:	000b883a 	mov	r5,zero
  210764:	e13ffb17 	ldw	r4,-20(fp)
  210768:	020f8740 	call	20f874 <alt_avalon_i2c_cmd_write>
  21076c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  210770:	e0bff717 	ldw	r2,-36(fp)
  210774:	10001826 	beq	r2,zero,2107d8 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
  210778:	0149c404 	movi	r5,10000
  21077c:	e13ffd17 	ldw	r4,-12(fp)
  210780:	020179c0 	call	20179c <__mulsi3>
  210784:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  210788:	00000d06 	br	2107c0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
  21078c:	e0bff817 	ldw	r2,-32(fp)
  210790:	108002a8 	cmpgeui	r2,r2,10
  210794:	1000021e 	bne	r2,zero,2107a0 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
  210798:	0109c404 	movi	r4,10000
  21079c:	02127540 	call	212754 <alt_busy_sleep>
            if (--timeout == 0)
  2107a0:	e0bff817 	ldw	r2,-32(fp)
  2107a4:	10bfffc4 	addi	r2,r2,-1
  2107a8:	e0bff815 	stw	r2,-32(fp)
  2107ac:	e0bff817 	ldw	r2,-32(fp)
  2107b0:	1000031e 	bne	r2,zero,2107c0 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  2107b4:	00bfff84 	movi	r2,-2
  2107b8:	e0bff715 	stw	r2,-36(fp)
               break;
  2107bc:	00000306 	br	2107cc <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2107c0:	e13ffb17 	ldw	r4,-20(fp)
  2107c4:	020f6e00 	call	20f6e0 <alt_avalon_i2c_is_busy>
  2107c8:	103ff01e 	bne	r2,zero,21078c <_gp+0xffdfeba8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  2107cc:	e13ffb17 	ldw	r4,-20(fp)
  2107d0:	020f3880 	call	20f388 <alt_avalon_i2c_disable>
  2107d4:	00001406 	br	210828 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
  2107d8:	e0bfff03 	ldbu	r2,-4(fp)
  2107dc:	10001226 	beq	r2,zero,210828 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2107e0:	01400704 	movi	r5,28
  2107e4:	e13ffb17 	ldw	r4,-20(fp)
  2107e8:	02108dc0 	call	2108dc <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
  2107ec:	000b883a 	mov	r5,zero
  2107f0:	e13ffb17 	ldw	r4,-20(fp)
  2107f4:	0210a740 	call	210a74 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
  2107f8:	e0bffa17 	ldw	r2,-24(fp)
  2107fc:	00c00084 	movi	r3,2
  210800:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
  210804:	e0bffa17 	ldw	r2,-24(fp)
  210808:	e0fffc17 	ldw	r3,-16(fp)
  21080c:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
  210810:	e0bffa17 	ldw	r2,-24(fp)
  210814:	e0fffd17 	ldw	r3,-12(fp)
  210818:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  21081c:	01400084 	movi	r5,2
  210820:	e13ffb17 	ldw	r4,-20(fp)
  210824:	02109800 	call	210980 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
  210828:	e0bff717 	ldw	r2,-36(fp)
}
  21082c:	e037883a 	mov	sp,fp
  210830:	dfc00117 	ldw	ra,4(sp)
  210834:	df000017 	ldw	fp,0(sp)
  210838:	dec00204 	addi	sp,sp,8
  21083c:	f800283a 	ret

00210840 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
  210840:	defffd04 	addi	sp,sp,-12
  210844:	df000215 	stw	fp,8(sp)
  210848:	df000204 	addi	fp,sp,8
  21084c:	e13ffe15 	stw	r4,-8(fp)
  210850:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
  210854:	e0bffe17 	ldw	r2,-8(fp)
  210858:	10800317 	ldw	r2,12(r2)
  21085c:	10800404 	addi	r2,r2,16
  210860:	10c00037 	ldwio	r3,0(r2)
  210864:	e0bffe17 	ldw	r2,-8(fp)
  210868:	10800317 	ldw	r2,12(r2)
  21086c:	10800304 	addi	r2,r2,12
  210870:	10800037 	ldwio	r2,0(r2)
  210874:	1884703a 	and	r2,r3,r2
  210878:	1007883a 	mov	r3,r2
  21087c:	e0bfff17 	ldw	r2,-4(fp)
  210880:	10c00015 	stw	r3,0(r2)
}
  210884:	0001883a 	nop
  210888:	e037883a 	mov	sp,fp
  21088c:	df000017 	ldw	fp,0(sp)
  210890:	dec00104 	addi	sp,sp,4
  210894:	f800283a 	ret

00210898 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
  210898:	defffd04 	addi	sp,sp,-12
  21089c:	df000215 	stw	fp,8(sp)
  2108a0:	df000204 	addi	fp,sp,8
  2108a4:	e13ffe15 	stw	r4,-8(fp)
  2108a8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
  2108ac:	e0bffe17 	ldw	r2,-8(fp)
  2108b0:	10800317 	ldw	r2,12(r2)
  2108b4:	10800404 	addi	r2,r2,16
  2108b8:	10800037 	ldwio	r2,0(r2)
  2108bc:	1007883a 	mov	r3,r2
  2108c0:	e0bfff17 	ldw	r2,-4(fp)
  2108c4:	10c00015 	stw	r3,0(r2)
}
  2108c8:	0001883a 	nop
  2108cc:	e037883a 	mov	sp,fp
  2108d0:	df000017 	ldw	fp,0(sp)
  2108d4:	dec00104 	addi	sp,sp,4
  2108d8:	f800283a 	ret

002108dc <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  2108dc:	defffd04 	addi	sp,sp,-12
  2108e0:	df000215 	stw	fp,8(sp)
  2108e4:	df000204 	addi	fp,sp,8
  2108e8:	e13ffe15 	stw	r4,-8(fp)
  2108ec:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
  2108f0:	e0bffe17 	ldw	r2,-8(fp)
  2108f4:	10800317 	ldw	r2,12(r2)
  2108f8:	10800404 	addi	r2,r2,16
  2108fc:	e0ffff17 	ldw	r3,-4(fp)
  210900:	10c00035 	stwio	r3,0(r2)
}
  210904:	0001883a 	nop
  210908:	e037883a 	mov	sp,fp
  21090c:	df000017 	ldw	fp,0(sp)
  210910:	dec00104 	addi	sp,sp,4
  210914:	f800283a 	ret

00210918 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  210918:	defffb04 	addi	sp,sp,-20
  21091c:	dfc00415 	stw	ra,16(sp)
  210920:	df000315 	stw	fp,12(sp)
  210924:	df000304 	addi	fp,sp,12
  210928:	e13ffe15 	stw	r4,-8(fp)
  21092c:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  210930:	e17ffd04 	addi	r5,fp,-12
  210934:	e13ffe17 	ldw	r4,-8(fp)
  210938:	02109e40 	call	2109e4 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
  21093c:	e0bfff17 	ldw	r2,-4(fp)
  210940:	0086303a 	nor	r3,zero,r2
  210944:	e0bffd17 	ldw	r2,-12(fp)
  210948:	1884703a 	and	r2,r3,r2
  21094c:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  210950:	e0bffe17 	ldw	r2,-8(fp)
  210954:	10800317 	ldw	r2,12(r2)
  210958:	10800304 	addi	r2,r2,12
  21095c:	e0fffd17 	ldw	r3,-12(fp)
  210960:	18c007cc 	andi	r3,r3,31
  210964:	10c00035 	stwio	r3,0(r2)
}
  210968:	0001883a 	nop
  21096c:	e037883a 	mov	sp,fp
  210970:	dfc00117 	ldw	ra,4(sp)
  210974:	df000017 	ldw	fp,0(sp)
  210978:	dec00204 	addi	sp,sp,8
  21097c:	f800283a 	ret

00210980 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  210980:	defffb04 	addi	sp,sp,-20
  210984:	dfc00415 	stw	ra,16(sp)
  210988:	df000315 	stw	fp,12(sp)
  21098c:	df000304 	addi	fp,sp,12
  210990:	e13ffe15 	stw	r4,-8(fp)
  210994:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  210998:	e17ffd04 	addi	r5,fp,-12
  21099c:	e13ffe17 	ldw	r4,-8(fp)
  2109a0:	02109e40 	call	2109e4 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
  2109a4:	e0fffd17 	ldw	r3,-12(fp)
  2109a8:	e0bfff17 	ldw	r2,-4(fp)
  2109ac:	1884b03a 	or	r2,r3,r2
  2109b0:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  2109b4:	e0bffe17 	ldw	r2,-8(fp)
  2109b8:	10800317 	ldw	r2,12(r2)
  2109bc:	10800304 	addi	r2,r2,12
  2109c0:	e0fffd17 	ldw	r3,-12(fp)
  2109c4:	18c007cc 	andi	r3,r3,31
  2109c8:	10c00035 	stwio	r3,0(r2)
}
  2109cc:	0001883a 	nop
  2109d0:	e037883a 	mov	sp,fp
  2109d4:	dfc00117 	ldw	ra,4(sp)
  2109d8:	df000017 	ldw	fp,0(sp)
  2109dc:	dec00204 	addi	sp,sp,8
  2109e0:	f800283a 	ret

002109e4 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
  2109e4:	defffd04 	addi	sp,sp,-12
  2109e8:	df000215 	stw	fp,8(sp)
  2109ec:	df000204 	addi	fp,sp,8
  2109f0:	e13ffe15 	stw	r4,-8(fp)
  2109f4:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
  2109f8:	e0bffe17 	ldw	r2,-8(fp)
  2109fc:	10800317 	ldw	r2,12(r2)
  210a00:	10800304 	addi	r2,r2,12
  210a04:	10800037 	ldwio	r2,0(r2)
  210a08:	10c007cc 	andi	r3,r2,31
  210a0c:	e0bfff17 	ldw	r2,-4(fp)
  210a10:	10c00015 	stw	r3,0(r2)
}
  210a14:	0001883a 	nop
  210a18:	e037883a 	mov	sp,fp
  210a1c:	df000017 	ldw	fp,0(sp)
  210a20:	dec00104 	addi	sp,sp,4
  210a24:	f800283a 	ret

00210a28 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
  210a28:	defffd04 	addi	sp,sp,-12
  210a2c:	df000215 	stw	fp,8(sp)
  210a30:	df000204 	addi	fp,sp,8
  210a34:	e13ffe15 	stw	r4,-8(fp)
  210a38:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
  210a3c:	e0bffe17 	ldw	r2,-8(fp)
  210a40:	10800317 	ldw	r2,12(r2)
  210a44:	10800204 	addi	r2,r2,8
  210a48:	10800037 	ldwio	r2,0(r2)
  210a4c:	10800c0c 	andi	r2,r2,48
  210a50:	1005d13a 	srai	r2,r2,4
  210a54:	1007883a 	mov	r3,r2
  210a58:	e0bfff17 	ldw	r2,-4(fp)
  210a5c:	10c00015 	stw	r3,0(r2)
}
  210a60:	0001883a 	nop
  210a64:	e037883a 	mov	sp,fp
  210a68:	df000017 	ldw	fp,0(sp)
  210a6c:	dec00104 	addi	sp,sp,4
  210a70:	f800283a 	ret

00210a74 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
  210a74:	defffd04 	addi	sp,sp,-12
  210a78:	df000215 	stw	fp,8(sp)
  210a7c:	df000204 	addi	fp,sp,8
  210a80:	e13ffe15 	stw	r4,-8(fp)
  210a84:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
  210a88:	e0bffe17 	ldw	r2,-8(fp)
  210a8c:	10800317 	ldw	r2,12(r2)
  210a90:	10800204 	addi	r2,r2,8
  210a94:	e0fffe17 	ldw	r3,-8(fp)
  210a98:	18c00317 	ldw	r3,12(r3)
  210a9c:	18c00204 	addi	r3,r3,8
  210aa0:	18c00037 	ldwio	r3,0(r3)
  210aa4:	1809883a 	mov	r4,r3
  210aa8:	00fff3c4 	movi	r3,-49
  210aac:	20c8703a 	and	r4,r4,r3
  210ab0:	e0ffff17 	ldw	r3,-4(fp)
  210ab4:	1806913a 	slli	r3,r3,4
  210ab8:	18c00c0c 	andi	r3,r3,48
  210abc:	20c6b03a 	or	r3,r4,r3
  210ac0:	10c00035 	stwio	r3,0(r2)
}
  210ac4:	0001883a 	nop
  210ac8:	e037883a 	mov	sp,fp
  210acc:	df000017 	ldw	fp,0(sp)
  210ad0:	dec00104 	addi	sp,sp,4
  210ad4:	f800283a 	ret

00210ad8 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
  210ad8:	defffd04 	addi	sp,sp,-12
  210adc:	df000215 	stw	fp,8(sp)
  210ae0:	df000204 	addi	fp,sp,8
  210ae4:	e13ffe15 	stw	r4,-8(fp)
  210ae8:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
  210aec:	e0bffe17 	ldw	r2,-8(fp)
  210af0:	10800317 	ldw	r2,12(r2)
  210af4:	10800204 	addi	r2,r2,8
  210af8:	10800037 	ldwio	r2,0(r2)
  210afc:	1080030c 	andi	r2,r2,12
  210b00:	1005d0ba 	srai	r2,r2,2
  210b04:	1007883a 	mov	r3,r2
  210b08:	e0bfff17 	ldw	r2,-4(fp)
  210b0c:	10c00015 	stw	r3,0(r2)
}
  210b10:	0001883a 	nop
  210b14:	e037883a 	mov	sp,fp
  210b18:	df000017 	ldw	fp,0(sp)
  210b1c:	dec00104 	addi	sp,sp,4
  210b20:	f800283a 	ret

00210b24 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  210b24:	defffd04 	addi	sp,sp,-12
  210b28:	df000215 	stw	fp,8(sp)
  210b2c:	df000204 	addi	fp,sp,8
  210b30:	e13ffe15 	stw	r4,-8(fp)
  210b34:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
  210b38:	e0bffe17 	ldw	r2,-8(fp)
  210b3c:	10800317 	ldw	r2,12(r2)
  210b40:	10c00204 	addi	r3,r2,8
  210b44:	e0bffe17 	ldw	r2,-8(fp)
  210b48:	10800317 	ldw	r2,12(r2)
  210b4c:	10800204 	addi	r2,r2,8
  210b50:	10800037 	ldwio	r2,0(r2)
  210b54:	1009883a 	mov	r4,r2
  210b58:	00bffcc4 	movi	r2,-13
  210b5c:	2088703a 	and	r4,r4,r2
  210b60:	e0bfff17 	ldw	r2,-4(fp)
  210b64:	1085883a 	add	r2,r2,r2
  210b68:	1085883a 	add	r2,r2,r2
  210b6c:	1080030c 	andi	r2,r2,12
  210b70:	2084b03a 	or	r2,r4,r2
  210b74:	18800035 	stwio	r2,0(r3)
}
  210b78:	0001883a 	nop
  210b7c:	e037883a 	mov	sp,fp
  210b80:	df000017 	ldw	fp,0(sp)
  210b84:	dec00104 	addi	sp,sp,4
  210b88:	f800283a 	ret

00210b8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  210b8c:	defffa04 	addi	sp,sp,-24
  210b90:	dfc00515 	stw	ra,20(sp)
  210b94:	df000415 	stw	fp,16(sp)
  210b98:	df000404 	addi	fp,sp,16
  210b9c:	e13ffd15 	stw	r4,-12(fp)
  210ba0:	e17ffe15 	stw	r5,-8(fp)
  210ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210ba8:	e0bffd17 	ldw	r2,-12(fp)
  210bac:	10800017 	ldw	r2,0(r2)
  210bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  210bb4:	e0bffc17 	ldw	r2,-16(fp)
  210bb8:	10c00a04 	addi	r3,r2,40
  210bbc:	e0bffd17 	ldw	r2,-12(fp)
  210bc0:	10800217 	ldw	r2,8(r2)
  210bc4:	100f883a 	mov	r7,r2
  210bc8:	e1bfff17 	ldw	r6,-4(fp)
  210bcc:	e17ffe17 	ldw	r5,-8(fp)
  210bd0:	1809883a 	mov	r4,r3
  210bd4:	02111b40 	call	2111b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  210bd8:	e037883a 	mov	sp,fp
  210bdc:	dfc00117 	ldw	ra,4(sp)
  210be0:	df000017 	ldw	fp,0(sp)
  210be4:	dec00204 	addi	sp,sp,8
  210be8:	f800283a 	ret

00210bec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  210bec:	defffa04 	addi	sp,sp,-24
  210bf0:	dfc00515 	stw	ra,20(sp)
  210bf4:	df000415 	stw	fp,16(sp)
  210bf8:	df000404 	addi	fp,sp,16
  210bfc:	e13ffd15 	stw	r4,-12(fp)
  210c00:	e17ffe15 	stw	r5,-8(fp)
  210c04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210c08:	e0bffd17 	ldw	r2,-12(fp)
  210c0c:	10800017 	ldw	r2,0(r2)
  210c10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  210c14:	e0bffc17 	ldw	r2,-16(fp)
  210c18:	10c00a04 	addi	r3,r2,40
  210c1c:	e0bffd17 	ldw	r2,-12(fp)
  210c20:	10800217 	ldw	r2,8(r2)
  210c24:	100f883a 	mov	r7,r2
  210c28:	e1bfff17 	ldw	r6,-4(fp)
  210c2c:	e17ffe17 	ldw	r5,-8(fp)
  210c30:	1809883a 	mov	r4,r3
  210c34:	02113d00 	call	2113d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  210c38:	e037883a 	mov	sp,fp
  210c3c:	dfc00117 	ldw	ra,4(sp)
  210c40:	df000017 	ldw	fp,0(sp)
  210c44:	dec00204 	addi	sp,sp,8
  210c48:	f800283a 	ret

00210c4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  210c4c:	defffc04 	addi	sp,sp,-16
  210c50:	dfc00315 	stw	ra,12(sp)
  210c54:	df000215 	stw	fp,8(sp)
  210c58:	df000204 	addi	fp,sp,8
  210c5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  210c60:	e0bfff17 	ldw	r2,-4(fp)
  210c64:	10800017 	ldw	r2,0(r2)
  210c68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  210c6c:	e0bffe17 	ldw	r2,-8(fp)
  210c70:	10c00a04 	addi	r3,r2,40
  210c74:	e0bfff17 	ldw	r2,-4(fp)
  210c78:	10800217 	ldw	r2,8(r2)
  210c7c:	100b883a 	mov	r5,r2
  210c80:	1809883a 	mov	r4,r3
  210c84:	021105c0 	call	21105c <altera_avalon_jtag_uart_close>
}
  210c88:	e037883a 	mov	sp,fp
  210c8c:	dfc00117 	ldw	ra,4(sp)
  210c90:	df000017 	ldw	fp,0(sp)
  210c94:	dec00204 	addi	sp,sp,8
  210c98:	f800283a 	ret

00210c9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  210c9c:	defffa04 	addi	sp,sp,-24
  210ca0:	dfc00515 	stw	ra,20(sp)
  210ca4:	df000415 	stw	fp,16(sp)
  210ca8:	df000404 	addi	fp,sp,16
  210cac:	e13ffd15 	stw	r4,-12(fp)
  210cb0:	e17ffe15 	stw	r5,-8(fp)
  210cb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  210cb8:	e0bffd17 	ldw	r2,-12(fp)
  210cbc:	10800017 	ldw	r2,0(r2)
  210cc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  210cc4:	e0bffc17 	ldw	r2,-16(fp)
  210cc8:	10800a04 	addi	r2,r2,40
  210ccc:	e1bfff17 	ldw	r6,-4(fp)
  210cd0:	e17ffe17 	ldw	r5,-8(fp)
  210cd4:	1009883a 	mov	r4,r2
  210cd8:	02110c40 	call	2110c4 <altera_avalon_jtag_uart_ioctl>
}
  210cdc:	e037883a 	mov	sp,fp
  210ce0:	dfc00117 	ldw	ra,4(sp)
  210ce4:	df000017 	ldw	fp,0(sp)
  210ce8:	dec00204 	addi	sp,sp,8
  210cec:	f800283a 	ret

00210cf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  210cf0:	defffa04 	addi	sp,sp,-24
  210cf4:	dfc00515 	stw	ra,20(sp)
  210cf8:	df000415 	stw	fp,16(sp)
  210cfc:	df000404 	addi	fp,sp,16
  210d00:	e13ffd15 	stw	r4,-12(fp)
  210d04:	e17ffe15 	stw	r5,-8(fp)
  210d08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  210d0c:	e0bffd17 	ldw	r2,-12(fp)
  210d10:	00c00044 	movi	r3,1
  210d14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  210d18:	e0bffd17 	ldw	r2,-12(fp)
  210d1c:	10800017 	ldw	r2,0(r2)
  210d20:	10800104 	addi	r2,r2,4
  210d24:	1007883a 	mov	r3,r2
  210d28:	e0bffd17 	ldw	r2,-12(fp)
  210d2c:	10800817 	ldw	r2,32(r2)
  210d30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  210d34:	e0bffe17 	ldw	r2,-8(fp)
  210d38:	e0ffff17 	ldw	r3,-4(fp)
  210d3c:	d8000015 	stw	zero,0(sp)
  210d40:	e1fffd17 	ldw	r7,-12(fp)
  210d44:	01800874 	movhi	r6,33
  210d48:	31836c04 	addi	r6,r6,3504
  210d4c:	180b883a 	mov	r5,r3
  210d50:	1009883a 	mov	r4,r2
  210d54:	0212c000 	call	212c00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  210d58:	e0bffd17 	ldw	r2,-12(fp)
  210d5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  210d60:	e0bffd17 	ldw	r2,-12(fp)
  210d64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  210d68:	d0e02117 	ldw	r3,-32636(gp)
  210d6c:	e1fffd17 	ldw	r7,-12(fp)
  210d70:	01800874 	movhi	r6,33
  210d74:	3183ef04 	addi	r6,r6,4028
  210d78:	180b883a 	mov	r5,r3
  210d7c:	1009883a 	mov	r4,r2
  210d80:	02126280 	call	212628 <alt_alarm_start>
  210d84:	1000040e 	bge	r2,zero,210d98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  210d88:	e0fffd17 	ldw	r3,-12(fp)
  210d8c:	00a00034 	movhi	r2,32768
  210d90:	10bfffc4 	addi	r2,r2,-1
  210d94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  210d98:	0001883a 	nop
  210d9c:	e037883a 	mov	sp,fp
  210da0:	dfc00117 	ldw	ra,4(sp)
  210da4:	df000017 	ldw	fp,0(sp)
  210da8:	dec00204 	addi	sp,sp,8
  210dac:	f800283a 	ret

00210db0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  210db0:	defff804 	addi	sp,sp,-32
  210db4:	df000715 	stw	fp,28(sp)
  210db8:	df000704 	addi	fp,sp,28
  210dbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  210dc0:	e0bfff17 	ldw	r2,-4(fp)
  210dc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  210dc8:	e0bffb17 	ldw	r2,-20(fp)
  210dcc:	10800017 	ldw	r2,0(r2)
  210dd0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210dd4:	e0bffc17 	ldw	r2,-16(fp)
  210dd8:	10800104 	addi	r2,r2,4
  210ddc:	10800037 	ldwio	r2,0(r2)
  210de0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  210de4:	e0bffd17 	ldw	r2,-12(fp)
  210de8:	1080c00c 	andi	r2,r2,768
  210dec:	10006d26 	beq	r2,zero,210fa4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  210df0:	e0bffd17 	ldw	r2,-12(fp)
  210df4:	1080400c 	andi	r2,r2,256
  210df8:	10003526 	beq	r2,zero,210ed0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  210dfc:	00800074 	movhi	r2,1
  210e00:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210e04:	e0bffb17 	ldw	r2,-20(fp)
  210e08:	10800a17 	ldw	r2,40(r2)
  210e0c:	10800044 	addi	r2,r2,1
  210e10:	1081ffcc 	andi	r2,r2,2047
  210e14:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  210e18:	e0bffb17 	ldw	r2,-20(fp)
  210e1c:	10c00b17 	ldw	r3,44(r2)
  210e20:	e0bffe17 	ldw	r2,-8(fp)
  210e24:	18801526 	beq	r3,r2,210e7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  210e28:	e0bffc17 	ldw	r2,-16(fp)
  210e2c:	10800037 	ldwio	r2,0(r2)
  210e30:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  210e34:	e0bff917 	ldw	r2,-28(fp)
  210e38:	10a0000c 	andi	r2,r2,32768
  210e3c:	10001126 	beq	r2,zero,210e84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  210e40:	e0bffb17 	ldw	r2,-20(fp)
  210e44:	10800a17 	ldw	r2,40(r2)
  210e48:	e0fff917 	ldw	r3,-28(fp)
  210e4c:	1809883a 	mov	r4,r3
  210e50:	e0fffb17 	ldw	r3,-20(fp)
  210e54:	1885883a 	add	r2,r3,r2
  210e58:	10800e04 	addi	r2,r2,56
  210e5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210e60:	e0bffb17 	ldw	r2,-20(fp)
  210e64:	10800a17 	ldw	r2,40(r2)
  210e68:	10800044 	addi	r2,r2,1
  210e6c:	10c1ffcc 	andi	r3,r2,2047
  210e70:	e0bffb17 	ldw	r2,-20(fp)
  210e74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  210e78:	003fe206 	br	210e04 <_gp+0xffdff220>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  210e7c:	0001883a 	nop
  210e80:	00000106 	br	210e88 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  210e84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  210e88:	e0bff917 	ldw	r2,-28(fp)
  210e8c:	10bfffec 	andhi	r2,r2,65535
  210e90:	10000f26 	beq	r2,zero,210ed0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  210e94:	e0bffb17 	ldw	r2,-20(fp)
  210e98:	10c00817 	ldw	r3,32(r2)
  210e9c:	00bfff84 	movi	r2,-2
  210ea0:	1886703a 	and	r3,r3,r2
  210ea4:	e0bffb17 	ldw	r2,-20(fp)
  210ea8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  210eac:	e0bffc17 	ldw	r2,-16(fp)
  210eb0:	10800104 	addi	r2,r2,4
  210eb4:	1007883a 	mov	r3,r2
  210eb8:	e0bffb17 	ldw	r2,-20(fp)
  210ebc:	10800817 	ldw	r2,32(r2)
  210ec0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210ec4:	e0bffc17 	ldw	r2,-16(fp)
  210ec8:	10800104 	addi	r2,r2,4
  210ecc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  210ed0:	e0bffd17 	ldw	r2,-12(fp)
  210ed4:	1080800c 	andi	r2,r2,512
  210ed8:	103fbe26 	beq	r2,zero,210dd4 <_gp+0xffdff1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  210edc:	e0bffd17 	ldw	r2,-12(fp)
  210ee0:	1004d43a 	srli	r2,r2,16
  210ee4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  210ee8:	00001406 	br	210f3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  210eec:	e0bffc17 	ldw	r2,-16(fp)
  210ef0:	e0fffb17 	ldw	r3,-20(fp)
  210ef4:	18c00d17 	ldw	r3,52(r3)
  210ef8:	e13ffb17 	ldw	r4,-20(fp)
  210efc:	20c7883a 	add	r3,r4,r3
  210f00:	18c20e04 	addi	r3,r3,2104
  210f04:	18c00003 	ldbu	r3,0(r3)
  210f08:	18c03fcc 	andi	r3,r3,255
  210f0c:	18c0201c 	xori	r3,r3,128
  210f10:	18ffe004 	addi	r3,r3,-128
  210f14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  210f18:	e0bffb17 	ldw	r2,-20(fp)
  210f1c:	10800d17 	ldw	r2,52(r2)
  210f20:	10800044 	addi	r2,r2,1
  210f24:	10c1ffcc 	andi	r3,r2,2047
  210f28:	e0bffb17 	ldw	r2,-20(fp)
  210f2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  210f30:	e0bffa17 	ldw	r2,-24(fp)
  210f34:	10bfffc4 	addi	r2,r2,-1
  210f38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  210f3c:	e0bffa17 	ldw	r2,-24(fp)
  210f40:	10000526 	beq	r2,zero,210f58 <altera_avalon_jtag_uart_irq+0x1a8>
  210f44:	e0bffb17 	ldw	r2,-20(fp)
  210f48:	10c00d17 	ldw	r3,52(r2)
  210f4c:	e0bffb17 	ldw	r2,-20(fp)
  210f50:	10800c17 	ldw	r2,48(r2)
  210f54:	18bfe51e 	bne	r3,r2,210eec <_gp+0xffdff308>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  210f58:	e0bffa17 	ldw	r2,-24(fp)
  210f5c:	103f9d26 	beq	r2,zero,210dd4 <_gp+0xffdff1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  210f60:	e0bffb17 	ldw	r2,-20(fp)
  210f64:	10c00817 	ldw	r3,32(r2)
  210f68:	00bfff44 	movi	r2,-3
  210f6c:	1886703a 	and	r3,r3,r2
  210f70:	e0bffb17 	ldw	r2,-20(fp)
  210f74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  210f78:	e0bffb17 	ldw	r2,-20(fp)
  210f7c:	10800017 	ldw	r2,0(r2)
  210f80:	10800104 	addi	r2,r2,4
  210f84:	1007883a 	mov	r3,r2
  210f88:	e0bffb17 	ldw	r2,-20(fp)
  210f8c:	10800817 	ldw	r2,32(r2)
  210f90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  210f94:	e0bffc17 	ldw	r2,-16(fp)
  210f98:	10800104 	addi	r2,r2,4
  210f9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  210fa0:	003f8c06 	br	210dd4 <_gp+0xffdff1f0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  210fa4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  210fa8:	0001883a 	nop
  210fac:	e037883a 	mov	sp,fp
  210fb0:	df000017 	ldw	fp,0(sp)
  210fb4:	dec00104 	addi	sp,sp,4
  210fb8:	f800283a 	ret

00210fbc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  210fbc:	defff804 	addi	sp,sp,-32
  210fc0:	df000715 	stw	fp,28(sp)
  210fc4:	df000704 	addi	fp,sp,28
  210fc8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  210fcc:	e0bffb17 	ldw	r2,-20(fp)
  210fd0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  210fd4:	e0bff917 	ldw	r2,-28(fp)
  210fd8:	10800017 	ldw	r2,0(r2)
  210fdc:	10800104 	addi	r2,r2,4
  210fe0:	10800037 	ldwio	r2,0(r2)
  210fe4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  210fe8:	e0bffa17 	ldw	r2,-24(fp)
  210fec:	1081000c 	andi	r2,r2,1024
  210ff0:	10000b26 	beq	r2,zero,211020 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  210ff4:	e0bff917 	ldw	r2,-28(fp)
  210ff8:	10800017 	ldw	r2,0(r2)
  210ffc:	10800104 	addi	r2,r2,4
  211000:	1007883a 	mov	r3,r2
  211004:	e0bff917 	ldw	r2,-28(fp)
  211008:	10800817 	ldw	r2,32(r2)
  21100c:	10810014 	ori	r2,r2,1024
  211010:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  211014:	e0bff917 	ldw	r2,-28(fp)
  211018:	10000915 	stw	zero,36(r2)
  21101c:	00000a06 	br	211048 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  211020:	e0bff917 	ldw	r2,-28(fp)
  211024:	10c00917 	ldw	r3,36(r2)
  211028:	00a00034 	movhi	r2,32768
  21102c:	10bfff04 	addi	r2,r2,-4
  211030:	10c00536 	bltu	r2,r3,211048 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  211034:	e0bff917 	ldw	r2,-28(fp)
  211038:	10800917 	ldw	r2,36(r2)
  21103c:	10c00044 	addi	r3,r2,1
  211040:	e0bff917 	ldw	r2,-28(fp)
  211044:	10c00915 	stw	r3,36(r2)
  211048:	d0a02117 	ldw	r2,-32636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  21104c:	e037883a 	mov	sp,fp
  211050:	df000017 	ldw	fp,0(sp)
  211054:	dec00104 	addi	sp,sp,4
  211058:	f800283a 	ret

0021105c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  21105c:	defffd04 	addi	sp,sp,-12
  211060:	df000215 	stw	fp,8(sp)
  211064:	df000204 	addi	fp,sp,8
  211068:	e13ffe15 	stw	r4,-8(fp)
  21106c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  211070:	00000506 	br	211088 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  211074:	e0bfff17 	ldw	r2,-4(fp)
  211078:	1090000c 	andi	r2,r2,16384
  21107c:	10000226 	beq	r2,zero,211088 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  211080:	00bffd44 	movi	r2,-11
  211084:	00000b06 	br	2110b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  211088:	e0bffe17 	ldw	r2,-8(fp)
  21108c:	10c00d17 	ldw	r3,52(r2)
  211090:	e0bffe17 	ldw	r2,-8(fp)
  211094:	10800c17 	ldw	r2,48(r2)
  211098:	18800526 	beq	r3,r2,2110b0 <altera_avalon_jtag_uart_close+0x54>
  21109c:	e0bffe17 	ldw	r2,-8(fp)
  2110a0:	10c00917 	ldw	r3,36(r2)
  2110a4:	e0bffe17 	ldw	r2,-8(fp)
  2110a8:	10800117 	ldw	r2,4(r2)
  2110ac:	18bff136 	bltu	r3,r2,211074 <_gp+0xffdff490>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  2110b0:	0005883a 	mov	r2,zero
}
  2110b4:	e037883a 	mov	sp,fp
  2110b8:	df000017 	ldw	fp,0(sp)
  2110bc:	dec00104 	addi	sp,sp,4
  2110c0:	f800283a 	ret

002110c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  2110c4:	defffa04 	addi	sp,sp,-24
  2110c8:	df000515 	stw	fp,20(sp)
  2110cc:	df000504 	addi	fp,sp,20
  2110d0:	e13ffd15 	stw	r4,-12(fp)
  2110d4:	e17ffe15 	stw	r5,-8(fp)
  2110d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  2110dc:	00bff9c4 	movi	r2,-25
  2110e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  2110e4:	e0bffe17 	ldw	r2,-8(fp)
  2110e8:	10da8060 	cmpeqi	r3,r2,27137
  2110ec:	1800031e 	bne	r3,zero,2110fc <altera_avalon_jtag_uart_ioctl+0x38>
  2110f0:	109a80a0 	cmpeqi	r2,r2,27138
  2110f4:	1000181e 	bne	r2,zero,211158 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  2110f8:	00002906 	br	2111a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  2110fc:	e0bffd17 	ldw	r2,-12(fp)
  211100:	10c00117 	ldw	r3,4(r2)
  211104:	00a00034 	movhi	r2,32768
  211108:	10bfffc4 	addi	r2,r2,-1
  21110c:	18802126 	beq	r3,r2,211194 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  211110:	e0bfff17 	ldw	r2,-4(fp)
  211114:	10800017 	ldw	r2,0(r2)
  211118:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  21111c:	e0bffc17 	ldw	r2,-16(fp)
  211120:	10800090 	cmplti	r2,r2,2
  211124:	1000061e 	bne	r2,zero,211140 <altera_avalon_jtag_uart_ioctl+0x7c>
  211128:	e0fffc17 	ldw	r3,-16(fp)
  21112c:	00a00034 	movhi	r2,32768
  211130:	10bfffc4 	addi	r2,r2,-1
  211134:	18800226 	beq	r3,r2,211140 <altera_avalon_jtag_uart_ioctl+0x7c>
  211138:	e0bffc17 	ldw	r2,-16(fp)
  21113c:	00000206 	br	211148 <altera_avalon_jtag_uart_ioctl+0x84>
  211140:	00a00034 	movhi	r2,32768
  211144:	10bfff84 	addi	r2,r2,-2
  211148:	e0fffd17 	ldw	r3,-12(fp)
  21114c:	18800115 	stw	r2,4(r3)
      rc = 0;
  211150:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  211154:	00000f06 	br	211194 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  211158:	e0bffd17 	ldw	r2,-12(fp)
  21115c:	10c00117 	ldw	r3,4(r2)
  211160:	00a00034 	movhi	r2,32768
  211164:	10bfffc4 	addi	r2,r2,-1
  211168:	18800c26 	beq	r3,r2,21119c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  21116c:	e0bffd17 	ldw	r2,-12(fp)
  211170:	10c00917 	ldw	r3,36(r2)
  211174:	e0bffd17 	ldw	r2,-12(fp)
  211178:	10800117 	ldw	r2,4(r2)
  21117c:	1885803a 	cmpltu	r2,r3,r2
  211180:	10c03fcc 	andi	r3,r2,255
  211184:	e0bfff17 	ldw	r2,-4(fp)
  211188:	10c00015 	stw	r3,0(r2)
      rc = 0;
  21118c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  211190:	00000206 	br	21119c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  211194:	0001883a 	nop
  211198:	00000106 	br	2111a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  21119c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  2111a0:	e0bffb17 	ldw	r2,-20(fp)
}
  2111a4:	e037883a 	mov	sp,fp
  2111a8:	df000017 	ldw	fp,0(sp)
  2111ac:	dec00104 	addi	sp,sp,4
  2111b0:	f800283a 	ret

002111b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  2111b4:	defff304 	addi	sp,sp,-52
  2111b8:	dfc00c15 	stw	ra,48(sp)
  2111bc:	df000b15 	stw	fp,44(sp)
  2111c0:	df000b04 	addi	fp,sp,44
  2111c4:	e13ffc15 	stw	r4,-16(fp)
  2111c8:	e17ffd15 	stw	r5,-12(fp)
  2111cc:	e1bffe15 	stw	r6,-8(fp)
  2111d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  2111d4:	e0bffd17 	ldw	r2,-12(fp)
  2111d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  2111dc:	00004706 	br	2112fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  2111e0:	e0bffc17 	ldw	r2,-16(fp)
  2111e4:	10800a17 	ldw	r2,40(r2)
  2111e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  2111ec:	e0bffc17 	ldw	r2,-16(fp)
  2111f0:	10800b17 	ldw	r2,44(r2)
  2111f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  2111f8:	e0fff717 	ldw	r3,-36(fp)
  2111fc:	e0bff817 	ldw	r2,-32(fp)
  211200:	18800536 	bltu	r3,r2,211218 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  211204:	e0fff717 	ldw	r3,-36(fp)
  211208:	e0bff817 	ldw	r2,-32(fp)
  21120c:	1885c83a 	sub	r2,r3,r2
  211210:	e0bff615 	stw	r2,-40(fp)
  211214:	00000406 	br	211228 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  211218:	00c20004 	movi	r3,2048
  21121c:	e0bff817 	ldw	r2,-32(fp)
  211220:	1885c83a 	sub	r2,r3,r2
  211224:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  211228:	e0bff617 	ldw	r2,-40(fp)
  21122c:	10001e26 	beq	r2,zero,2112a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  211230:	e0fffe17 	ldw	r3,-8(fp)
  211234:	e0bff617 	ldw	r2,-40(fp)
  211238:	1880022e 	bgeu	r3,r2,211244 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  21123c:	e0bffe17 	ldw	r2,-8(fp)
  211240:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  211244:	e0bffc17 	ldw	r2,-16(fp)
  211248:	10c00e04 	addi	r3,r2,56
  21124c:	e0bff817 	ldw	r2,-32(fp)
  211250:	1885883a 	add	r2,r3,r2
  211254:	e1bff617 	ldw	r6,-40(fp)
  211258:	100b883a 	mov	r5,r2
  21125c:	e13ff517 	ldw	r4,-44(fp)
  211260:	02073b80 	call	2073b8 <memcpy>
      ptr   += n;
  211264:	e0fff517 	ldw	r3,-44(fp)
  211268:	e0bff617 	ldw	r2,-40(fp)
  21126c:	1885883a 	add	r2,r3,r2
  211270:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  211274:	e0fffe17 	ldw	r3,-8(fp)
  211278:	e0bff617 	ldw	r2,-40(fp)
  21127c:	1885c83a 	sub	r2,r3,r2
  211280:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  211284:	e0fff817 	ldw	r3,-32(fp)
  211288:	e0bff617 	ldw	r2,-40(fp)
  21128c:	1885883a 	add	r2,r3,r2
  211290:	10c1ffcc 	andi	r3,r2,2047
  211294:	e0bffc17 	ldw	r2,-16(fp)
  211298:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  21129c:	e0bffe17 	ldw	r2,-8(fp)
  2112a0:	00bfcf16 	blt	zero,r2,2111e0 <_gp+0xffdff5fc>
  2112a4:	00000106 	br	2112ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  2112a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  2112ac:	e0fff517 	ldw	r3,-44(fp)
  2112b0:	e0bffd17 	ldw	r2,-12(fp)
  2112b4:	1880141e 	bne	r3,r2,211308 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  2112b8:	e0bfff17 	ldw	r2,-4(fp)
  2112bc:	1090000c 	andi	r2,r2,16384
  2112c0:	1000131e 	bne	r2,zero,211310 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  2112c4:	0001883a 	nop
  2112c8:	e0bffc17 	ldw	r2,-16(fp)
  2112cc:	10c00a17 	ldw	r3,40(r2)
  2112d0:	e0bff717 	ldw	r2,-36(fp)
  2112d4:	1880051e 	bne	r3,r2,2112ec <altera_avalon_jtag_uart_read+0x138>
  2112d8:	e0bffc17 	ldw	r2,-16(fp)
  2112dc:	10c00917 	ldw	r3,36(r2)
  2112e0:	e0bffc17 	ldw	r2,-16(fp)
  2112e4:	10800117 	ldw	r2,4(r2)
  2112e8:	18bff736 	bltu	r3,r2,2112c8 <_gp+0xffdff6e4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  2112ec:	e0bffc17 	ldw	r2,-16(fp)
  2112f0:	10c00a17 	ldw	r3,40(r2)
  2112f4:	e0bff717 	ldw	r2,-36(fp)
  2112f8:	18800726 	beq	r3,r2,211318 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  2112fc:	e0bffe17 	ldw	r2,-8(fp)
  211300:	00bfb716 	blt	zero,r2,2111e0 <_gp+0xffdff5fc>
  211304:	00000506 	br	21131c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  211308:	0001883a 	nop
  21130c:	00000306 	br	21131c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  211310:	0001883a 	nop
  211314:	00000106 	br	21131c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  211318:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  21131c:	e0fff517 	ldw	r3,-44(fp)
  211320:	e0bffd17 	ldw	r2,-12(fp)
  211324:	18801826 	beq	r3,r2,211388 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211328:	0005303a 	rdctl	r2,status
  21132c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211330:	e0fffb17 	ldw	r3,-20(fp)
  211334:	00bfff84 	movi	r2,-2
  211338:	1884703a 	and	r2,r3,r2
  21133c:	1001703a 	wrctl	status,r2
  
  return context;
  211340:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  211344:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  211348:	e0bffc17 	ldw	r2,-16(fp)
  21134c:	10800817 	ldw	r2,32(r2)
  211350:	10c00054 	ori	r3,r2,1
  211354:	e0bffc17 	ldw	r2,-16(fp)
  211358:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  21135c:	e0bffc17 	ldw	r2,-16(fp)
  211360:	10800017 	ldw	r2,0(r2)
  211364:	10800104 	addi	r2,r2,4
  211368:	1007883a 	mov	r3,r2
  21136c:	e0bffc17 	ldw	r2,-16(fp)
  211370:	10800817 	ldw	r2,32(r2)
  211374:	18800035 	stwio	r2,0(r3)
  211378:	e0bffa17 	ldw	r2,-24(fp)
  21137c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211380:	e0bff917 	ldw	r2,-28(fp)
  211384:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  211388:	e0fff517 	ldw	r3,-44(fp)
  21138c:	e0bffd17 	ldw	r2,-12(fp)
  211390:	18800426 	beq	r3,r2,2113a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  211394:	e0fff517 	ldw	r3,-44(fp)
  211398:	e0bffd17 	ldw	r2,-12(fp)
  21139c:	1885c83a 	sub	r2,r3,r2
  2113a0:	00000606 	br	2113bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  2113a4:	e0bfff17 	ldw	r2,-4(fp)
  2113a8:	1090000c 	andi	r2,r2,16384
  2113ac:	10000226 	beq	r2,zero,2113b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  2113b0:	00bffd44 	movi	r2,-11
  2113b4:	00000106 	br	2113bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  2113b8:	00bffec4 	movi	r2,-5
}
  2113bc:	e037883a 	mov	sp,fp
  2113c0:	dfc00117 	ldw	ra,4(sp)
  2113c4:	df000017 	ldw	fp,0(sp)
  2113c8:	dec00204 	addi	sp,sp,8
  2113cc:	f800283a 	ret

002113d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  2113d0:	defff304 	addi	sp,sp,-52
  2113d4:	dfc00c15 	stw	ra,48(sp)
  2113d8:	df000b15 	stw	fp,44(sp)
  2113dc:	df000b04 	addi	fp,sp,44
  2113e0:	e13ffc15 	stw	r4,-16(fp)
  2113e4:	e17ffd15 	stw	r5,-12(fp)
  2113e8:	e1bffe15 	stw	r6,-8(fp)
  2113ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  2113f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  2113f4:	e0bffd17 	ldw	r2,-12(fp)
  2113f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2113fc:	00003706 	br	2114dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  211400:	e0bffc17 	ldw	r2,-16(fp)
  211404:	10800c17 	ldw	r2,48(r2)
  211408:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  21140c:	e0bffc17 	ldw	r2,-16(fp)
  211410:	10800d17 	ldw	r2,52(r2)
  211414:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  211418:	e0fff917 	ldw	r3,-28(fp)
  21141c:	e0bff517 	ldw	r2,-44(fp)
  211420:	1880062e 	bgeu	r3,r2,21143c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  211424:	e0fff517 	ldw	r3,-44(fp)
  211428:	e0bff917 	ldw	r2,-28(fp)
  21142c:	1885c83a 	sub	r2,r3,r2
  211430:	10bfffc4 	addi	r2,r2,-1
  211434:	e0bff615 	stw	r2,-40(fp)
  211438:	00000b06 	br	211468 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  21143c:	e0bff517 	ldw	r2,-44(fp)
  211440:	10000526 	beq	r2,zero,211458 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  211444:	00c20004 	movi	r3,2048
  211448:	e0bff917 	ldw	r2,-28(fp)
  21144c:	1885c83a 	sub	r2,r3,r2
  211450:	e0bff615 	stw	r2,-40(fp)
  211454:	00000406 	br	211468 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  211458:	00c1ffc4 	movi	r3,2047
  21145c:	e0bff917 	ldw	r2,-28(fp)
  211460:	1885c83a 	sub	r2,r3,r2
  211464:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  211468:	e0bff617 	ldw	r2,-40(fp)
  21146c:	10001e26 	beq	r2,zero,2114e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  211470:	e0fffe17 	ldw	r3,-8(fp)
  211474:	e0bff617 	ldw	r2,-40(fp)
  211478:	1880022e 	bgeu	r3,r2,211484 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  21147c:	e0bffe17 	ldw	r2,-8(fp)
  211480:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  211484:	e0bffc17 	ldw	r2,-16(fp)
  211488:	10c20e04 	addi	r3,r2,2104
  21148c:	e0bff917 	ldw	r2,-28(fp)
  211490:	1885883a 	add	r2,r3,r2
  211494:	e1bff617 	ldw	r6,-40(fp)
  211498:	e17ffd17 	ldw	r5,-12(fp)
  21149c:	1009883a 	mov	r4,r2
  2114a0:	02073b80 	call	2073b8 <memcpy>
      ptr   += n;
  2114a4:	e0fffd17 	ldw	r3,-12(fp)
  2114a8:	e0bff617 	ldw	r2,-40(fp)
  2114ac:	1885883a 	add	r2,r3,r2
  2114b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  2114b4:	e0fffe17 	ldw	r3,-8(fp)
  2114b8:	e0bff617 	ldw	r2,-40(fp)
  2114bc:	1885c83a 	sub	r2,r3,r2
  2114c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2114c4:	e0fff917 	ldw	r3,-28(fp)
  2114c8:	e0bff617 	ldw	r2,-40(fp)
  2114cc:	1885883a 	add	r2,r3,r2
  2114d0:	10c1ffcc 	andi	r3,r2,2047
  2114d4:	e0bffc17 	ldw	r2,-16(fp)
  2114d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2114dc:	e0bffe17 	ldw	r2,-8(fp)
  2114e0:	00bfc716 	blt	zero,r2,211400 <_gp+0xffdff81c>
  2114e4:	00000106 	br	2114ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  2114e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2114ec:	0005303a 	rdctl	r2,status
  2114f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2114f4:	e0fffb17 	ldw	r3,-20(fp)
  2114f8:	00bfff84 	movi	r2,-2
  2114fc:	1884703a 	and	r2,r3,r2
  211500:	1001703a 	wrctl	status,r2
  
  return context;
  211504:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  211508:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  21150c:	e0bffc17 	ldw	r2,-16(fp)
  211510:	10800817 	ldw	r2,32(r2)
  211514:	10c00094 	ori	r3,r2,2
  211518:	e0bffc17 	ldw	r2,-16(fp)
  21151c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  211520:	e0bffc17 	ldw	r2,-16(fp)
  211524:	10800017 	ldw	r2,0(r2)
  211528:	10800104 	addi	r2,r2,4
  21152c:	1007883a 	mov	r3,r2
  211530:	e0bffc17 	ldw	r2,-16(fp)
  211534:	10800817 	ldw	r2,32(r2)
  211538:	18800035 	stwio	r2,0(r3)
  21153c:	e0bffa17 	ldw	r2,-24(fp)
  211540:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211544:	e0bff817 	ldw	r2,-32(fp)
  211548:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  21154c:	e0bffe17 	ldw	r2,-8(fp)
  211550:	0080100e 	bge	zero,r2,211594 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  211554:	e0bfff17 	ldw	r2,-4(fp)
  211558:	1090000c 	andi	r2,r2,16384
  21155c:	1000101e 	bne	r2,zero,2115a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  211560:	0001883a 	nop
  211564:	e0bffc17 	ldw	r2,-16(fp)
  211568:	10c00d17 	ldw	r3,52(r2)
  21156c:	e0bff517 	ldw	r2,-44(fp)
  211570:	1880051e 	bne	r3,r2,211588 <altera_avalon_jtag_uart_write+0x1b8>
  211574:	e0bffc17 	ldw	r2,-16(fp)
  211578:	10c00917 	ldw	r3,36(r2)
  21157c:	e0bffc17 	ldw	r2,-16(fp)
  211580:	10800117 	ldw	r2,4(r2)
  211584:	18bff736 	bltu	r3,r2,211564 <_gp+0xffdff980>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  211588:	e0bffc17 	ldw	r2,-16(fp)
  21158c:	10800917 	ldw	r2,36(r2)
  211590:	1000051e 	bne	r2,zero,2115a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  211594:	e0bffe17 	ldw	r2,-8(fp)
  211598:	00bfd016 	blt	zero,r2,2114dc <_gp+0xffdff8f8>
  21159c:	00000306 	br	2115ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  2115a0:	0001883a 	nop
  2115a4:	00000106 	br	2115ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  2115a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  2115ac:	e0fffd17 	ldw	r3,-12(fp)
  2115b0:	e0bff717 	ldw	r2,-36(fp)
  2115b4:	18800426 	beq	r3,r2,2115c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  2115b8:	e0fffd17 	ldw	r3,-12(fp)
  2115bc:	e0bff717 	ldw	r2,-36(fp)
  2115c0:	1885c83a 	sub	r2,r3,r2
  2115c4:	00000606 	br	2115e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  2115c8:	e0bfff17 	ldw	r2,-4(fp)
  2115cc:	1090000c 	andi	r2,r2,16384
  2115d0:	10000226 	beq	r2,zero,2115dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  2115d4:	00bffd44 	movi	r2,-11
  2115d8:	00000106 	br	2115e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  2115dc:	00bffec4 	movi	r2,-5
}
  2115e0:	e037883a 	mov	sp,fp
  2115e4:	dfc00117 	ldw	ra,4(sp)
  2115e8:	df000017 	ldw	fp,0(sp)
  2115ec:	dec00204 	addi	sp,sp,8
  2115f0:	f800283a 	ret

002115f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  2115f4:	defffa04 	addi	sp,sp,-24
  2115f8:	dfc00515 	stw	ra,20(sp)
  2115fc:	df000415 	stw	fp,16(sp)
  211600:	df000404 	addi	fp,sp,16
  211604:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  211608:	0007883a 	mov	r3,zero
  21160c:	e0bfff17 	ldw	r2,-4(fp)
  211610:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  211614:	e0bfff17 	ldw	r2,-4(fp)
  211618:	10800104 	addi	r2,r2,4
  21161c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211620:	0005303a 	rdctl	r2,status
  211624:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211628:	e0fffd17 	ldw	r3,-12(fp)
  21162c:	00bfff84 	movi	r2,-2
  211630:	1884703a 	and	r2,r3,r2
  211634:	1001703a 	wrctl	status,r2
  
  return context;
  211638:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  21163c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  211640:	02135880 	call	213588 <alt_tick>
  211644:	e0bffc17 	ldw	r2,-16(fp)
  211648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  21164c:	e0bffe17 	ldw	r2,-8(fp)
  211650:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  211654:	0001883a 	nop
  211658:	e037883a 	mov	sp,fp
  21165c:	dfc00117 	ldw	ra,4(sp)
  211660:	df000017 	ldw	fp,0(sp)
  211664:	dec00204 	addi	sp,sp,8
  211668:	f800283a 	ret

0021166c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  21166c:	defff804 	addi	sp,sp,-32
  211670:	dfc00715 	stw	ra,28(sp)
  211674:	df000615 	stw	fp,24(sp)
  211678:	df000604 	addi	fp,sp,24
  21167c:	e13ffc15 	stw	r4,-16(fp)
  211680:	e17ffd15 	stw	r5,-12(fp)
  211684:	e1bffe15 	stw	r6,-8(fp)
  211688:	e1ffff15 	stw	r7,-4(fp)
  21168c:	e0bfff17 	ldw	r2,-4(fp)
  211690:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  211694:	d0a02117 	ldw	r2,-32636(gp)
  211698:	1000021e 	bne	r2,zero,2116a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  21169c:	e0bffb17 	ldw	r2,-20(fp)
  2116a0:	d0a02115 	stw	r2,-32636(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  2116a4:	e0bffc17 	ldw	r2,-16(fp)
  2116a8:	10800104 	addi	r2,r2,4
  2116ac:	00c001c4 	movi	r3,7
  2116b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  2116b4:	d8000015 	stw	zero,0(sp)
  2116b8:	e1fffc17 	ldw	r7,-16(fp)
  2116bc:	01800874 	movhi	r6,33
  2116c0:	31857d04 	addi	r6,r6,5620
  2116c4:	e17ffe17 	ldw	r5,-8(fp)
  2116c8:	e13ffd17 	ldw	r4,-12(fp)
  2116cc:	0212c000 	call	212c00 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  2116d0:	0001883a 	nop
  2116d4:	e037883a 	mov	sp,fp
  2116d8:	dfc00117 	ldw	ra,4(sp)
  2116dc:	df000017 	ldw	fp,0(sp)
  2116e0:	dec00204 	addi	sp,sp,8
  2116e4:	f800283a 	ret

002116e8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  2116e8:	defffd04 	addi	sp,sp,-12
  2116ec:	dfc00215 	stw	ra,8(sp)
  2116f0:	df000115 	stw	fp,4(sp)
  2116f4:	df000104 	addi	fp,sp,4
  2116f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  2116fc:	d1601104 	addi	r5,gp,-32700
  211700:	e13fff17 	ldw	r4,-4(fp)
  211704:	02129300 	call	212930 <alt_dev_llist_insert>
}
  211708:	e037883a 	mov	sp,fp
  21170c:	dfc00117 	ldw	ra,4(sp)
  211710:	df000017 	ldw	fp,0(sp)
  211714:	dec00204 	addi	sp,sp,8
  211718:	f800283a 	ret

0021171c <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  21171c:	defff704 	addi	sp,sp,-36
  211720:	dfc00815 	stw	ra,32(sp)
  211724:	df000715 	stw	fp,28(sp)
  211728:	df000704 	addi	fp,sp,28
  21172c:	e13ffc15 	stw	r4,-16(fp)
  211730:	e17ffd15 	stw	r5,-12(fp)
  211734:	e1bffe15 	stw	r6,-8(fp)
  211738:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  21173c:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  211740:	e0bffc17 	ldw	r2,-16(fp)
  211744:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  211748:	e0bffa17 	ldw	r2,-24(fp)
  21174c:	10800b17 	ldw	r2,44(r2)
  211750:	e0fffd17 	ldw	r3,-12(fp)
  211754:	1880060e 	bge	r3,r2,211770 <alt_onchip_flash_read+0x54>
  211758:	e0fffd17 	ldw	r3,-12(fp)
  21175c:	e0bfff17 	ldw	r2,-4(fp)
  211760:	1885883a 	add	r2,r3,r2
  211764:	e0fffa17 	ldw	r3,-24(fp)
  211768:	18c00b17 	ldw	r3,44(r3)
  21176c:	1880020e 	bge	r3,r2,211778 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  211770:	00bffc84 	movi	r2,-14
  211774:	00001706 	br	2117d4 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  211778:	e0bffa17 	ldw	r2,-24(fp)
  21177c:	10c00a17 	ldw	r3,40(r2)
  211780:	e0bffd17 	ldw	r2,-12(fp)
  211784:	1885883a 	add	r2,r3,r2
  211788:	e0ffff17 	ldw	r3,-4(fp)
  21178c:	180d883a 	mov	r6,r3
  211790:	100b883a 	mov	r5,r2
  211794:	e13ffe17 	ldw	r4,-8(fp)
  211798:	02073b80 	call	2073b8 <memcpy>

    if (NULL != flash->csr_base) {
  21179c:	e0bffa17 	ldw	r2,-24(fp)
  2117a0:	10802f17 	ldw	r2,188(r2)
  2117a4:	10000a26 	beq	r2,zero,2117d0 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  2117a8:	e0bffa17 	ldw	r2,-24(fp)
  2117ac:	10802f17 	ldw	r2,188(r2)
  2117b0:	10800037 	ldwio	r2,0(r2)
  2117b4:	1080010c 	andi	r2,r2,4
  2117b8:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  2117bc:	e0bffb17 	ldw	r2,-20(fp)
  2117c0:	10800120 	cmpeqi	r2,r2,4
  2117c4:	1000021e 	bne	r2,zero,2117d0 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  2117c8:	00bffec4 	movi	r2,-5
  2117cc:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  2117d0:	e0bff917 	ldw	r2,-28(fp)
}
  2117d4:	e037883a 	mov	sp,fp
  2117d8:	dfc00117 	ldw	ra,4(sp)
  2117dc:	df000017 	ldw	fp,0(sp)
  2117e0:	dec00204 	addi	sp,sp,8
  2117e4:	f800283a 	ret

002117e8 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  2117e8:	defffa04 	addi	sp,sp,-24
  2117ec:	df000515 	stw	fp,20(sp)
  2117f0:	df000504 	addi	fp,sp,20
  2117f4:	e13ffd15 	stw	r4,-12(fp)
  2117f8:	e17ffe15 	stw	r5,-8(fp)
  2117fc:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  211800:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  211804:	e0bffd17 	ldw	r2,-12(fp)
  211808:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  21180c:	e0bfff17 	ldw	r2,-4(fp)
  211810:	10000426 	beq	r2,zero,211824 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  211814:	e0bffc17 	ldw	r2,-16(fp)
  211818:	10c00c17 	ldw	r3,48(r2)
  21181c:	e0bfff17 	ldw	r2,-4(fp)
  211820:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  211824:	e0bffc17 	ldw	r2,-16(fp)
  211828:	10800c17 	ldw	r2,48(r2)
  21182c:	1000031e 	bne	r2,zero,21183c <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  211830:	00bffd04 	movi	r2,-12
  211834:	e0bffb15 	stw	r2,-20(fp)
  211838:	00000d06 	br	211870 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  21183c:	e0bffc17 	ldw	r2,-16(fp)
  211840:	10800c17 	ldw	r2,48(r2)
  211844:	10800250 	cmplti	r2,r2,9
  211848:	1000031e 	bne	r2,zero,211858 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  21184c:	00bffc84 	movi	r2,-14
  211850:	e0bffb15 	stw	r2,-20(fp)
  211854:	00000606 	br	211870 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  211858:	e0bffe17 	ldw	r2,-8(fp)
  21185c:	10000426 	beq	r2,zero,211870 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  211860:	e0bffc17 	ldw	r2,-16(fp)
  211864:	10c00d04 	addi	r3,r2,52
  211868:	e0bffe17 	ldw	r2,-8(fp)
  21186c:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  211870:	e0bffb17 	ldw	r2,-20(fp)
}
  211874:	e037883a 	mov	sp,fp
  211878:	df000017 	ldw	fp,0(sp)
  21187c:	dec00104 	addi	sp,sp,4
  211880:	f800283a 	ret

00211884 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  211884:	defff904 	addi	sp,sp,-28
  211888:	dfc00615 	stw	ra,24(sp)
  21188c:	df000515 	stw	fp,20(sp)
  211890:	df000504 	addi	fp,sp,20
  211894:	e13ffe15 	stw	r4,-8(fp)
  211898:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  21189c:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  2118a0:	e0bffe17 	ldw	r2,-8(fp)
  2118a4:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  2118a8:	e0bffc17 	ldw	r2,-16(fp)
  2118ac:	10800b17 	ldw	r2,44(r2)
  2118b0:	e0ffff17 	ldw	r3,-4(fp)
  2118b4:	18800216 	blt	r3,r2,2118c0 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  2118b8:	00bffc84 	movi	r2,-14
  2118bc:	00004606 	br	2119d8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  2118c0:	e0bffc17 	ldw	r2,-16(fp)
  2118c4:	10802f17 	ldw	r2,188(r2)
  2118c8:	10000326 	beq	r2,zero,2118d8 <alt_onchip_flash_erase_block+0x54>
  2118cc:	e0bffc17 	ldw	r2,-16(fp)
  2118d0:	10802e17 	ldw	r2,184(r2)
  2118d4:	10000226 	beq	r2,zero,2118e0 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  2118d8:	00bffb44 	movi	r2,-19
  2118dc:	00003e06 	br	2119d8 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  2118e0:	e0bffc17 	ldw	r2,-16(fp)
  2118e4:	10803f17 	ldw	r2,252(r2)
  2118e8:	10ffffc4 	addi	r3,r2,-1
  2118ec:	e0bfff17 	ldw	r2,-4(fp)
  2118f0:	1884703a 	and	r2,r3,r2
  2118f4:	10000226 	beq	r2,zero,211900 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  2118f8:	00bffa84 	movi	r2,-22
  2118fc:	00003606 	br	2119d8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211900:	e13ffc17 	ldw	r4,-16(fp)
  211904:	02124780 	call	212478 <alt_onchip_flash_poll_for_status_to_go_idle>
  211908:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  21190c:	e0bffb17 	ldw	r2,-20(fp)
  211910:	10000226 	beq	r2,zero,21191c <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  211914:	e0bffb17 	ldw	r2,-20(fp)
  211918:	00002f06 	br	2119d8 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  21191c:	e0bffc17 	ldw	r2,-16(fp)
  211920:	10802f17 	ldw	r2,188(r2)
  211924:	10c00104 	addi	r3,r2,4
  211928:	e0bffc17 	ldw	r2,-16(fp)
  21192c:	10802f17 	ldw	r2,188(r2)
  211930:	10800104 	addi	r2,r2,4
  211934:	10800037 	ldwio	r2,0(r2)
  211938:	113c002c 	andhi	r4,r2,61440
  21193c:	00802034 	movhi	r2,128
  211940:	10bfffc4 	addi	r2,r2,-1
  211944:	2084b03a 	or	r2,r4,r2
  211948:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  21194c:	e0bfff17 	ldw	r2,-4(fp)
  211950:	1000010e 	bge	r2,zero,211958 <alt_onchip_flash_erase_block+0xd4>
  211954:	108000c4 	addi	r2,r2,3
  211958:	1005d0ba 	srai	r2,r2,2
  21195c:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  211960:	e0bffc17 	ldw	r2,-16(fp)
  211964:	10802f17 	ldw	r2,188(r2)
  211968:	10800104 	addi	r2,r2,4
  21196c:	e0fffc17 	ldw	r3,-16(fp)
  211970:	18c02f17 	ldw	r3,188(r3)
  211974:	18c00104 	addi	r3,r3,4
  211978:	18c00037 	ldwio	r3,0(r3)
  21197c:	193c002c 	andhi	r4,r3,61440
  211980:	e0fffd17 	ldw	r3,-12(fp)
  211984:	18c01c34 	orhi	r3,r3,112
  211988:	20c6b03a 	or	r3,r4,r3
  21198c:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211990:	e13ffc17 	ldw	r4,-16(fp)
  211994:	02124780 	call	212478 <alt_onchip_flash_poll_for_status_to_go_idle>
  211998:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  21199c:	e13ffc17 	ldw	r4,-16(fp)
  2119a0:	02125080 	call	212508 <alt_onchip_flash_poll_for_status_erase_passed>
  2119a4:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  2119a8:	e0bffc17 	ldw	r2,-16(fp)
  2119ac:	10802f17 	ldw	r2,188(r2)
  2119b0:	10c00104 	addi	r3,r2,4
  2119b4:	e0bffc17 	ldw	r2,-16(fp)
  2119b8:	10802f17 	ldw	r2,188(r2)
  2119bc:	10800104 	addi	r2,r2,4
  2119c0:	11000037 	ldwio	r4,0(r2)
  2119c4:	00840034 	movhi	r2,4096
  2119c8:	10bfffc4 	addi	r2,r2,-1
  2119cc:	2084b03a 	or	r2,r4,r2
  2119d0:	18800035 	stwio	r2,0(r3)

    return ret_code;
  2119d4:	e0bffb17 	ldw	r2,-20(fp)
}
  2119d8:	e037883a 	mov	sp,fp
  2119dc:	dfc00117 	ldw	ra,4(sp)
  2119e0:	df000017 	ldw	fp,0(sp)
  2119e4:	dec00204 	addi	sp,sp,8
  2119e8:	f800283a 	ret

002119ec <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  2119ec:	defff204 	addi	sp,sp,-56
  2119f0:	dfc00d15 	stw	ra,52(sp)
  2119f4:	df000c15 	stw	fp,48(sp)
  2119f8:	df000c04 	addi	fp,sp,48
  2119fc:	e13ffc15 	stw	r4,-16(fp)
  211a00:	e17ffd15 	stw	r5,-12(fp)
  211a04:	e1bffe15 	stw	r6,-8(fp)
  211a08:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  211a0c:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  211a10:	e0bffc17 	ldw	r2,-16(fp)
  211a14:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  211a18:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  211a1c:	e0bffe17 	ldw	r2,-8(fp)
  211a20:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  211a24:	e0bff817 	ldw	r2,-32(fp)
  211a28:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  211a2c:	e0fffd17 	ldw	r3,-12(fp)
  211a30:	18800a0e 	bge	r3,r2,211a5c <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  211a34:	e0bff817 	ldw	r2,-32(fp)
  211a38:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  211a3c:	e0fffe17 	ldw	r3,-8(fp)
  211a40:	1880060e 	bge	r3,r2,211a5c <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  211a44:	e0bff817 	ldw	r2,-32(fp)
  211a48:	10c00b17 	ldw	r3,44(r2)
  211a4c:	e0bffe17 	ldw	r2,-8(fp)
  211a50:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  211a54:	e0800217 	ldw	r2,8(fp)
  211a58:	1880020e 	bge	r3,r2,211a64 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  211a5c:	00bffc84 	movi	r2,-14
  211a60:	00009306 	br	211cb0 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  211a64:	e0bff817 	ldw	r2,-32(fp)
  211a68:	10802f17 	ldw	r2,188(r2)
  211a6c:	10000326 	beq	r2,zero,211a7c <alt_onchip_flash_write_block+0x90>
  211a70:	e0bff817 	ldw	r2,-32(fp)
  211a74:	10802e17 	ldw	r2,184(r2)
  211a78:	10000226 	beq	r2,zero,211a84 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  211a7c:	00bffb44 	movi	r2,-19
  211a80:	00008b06 	br	211cb0 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211a84:	e13ff817 	ldw	r4,-32(fp)
  211a88:	02124780 	call	212478 <alt_onchip_flash_poll_for_status_to_go_idle>
  211a8c:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  211a90:	e0bff417 	ldw	r2,-48(fp)
  211a94:	10000226 	beq	r2,zero,211aa0 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  211a98:	e0bff417 	ldw	r2,-48(fp)
  211a9c:	00008406 	br	211cb0 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  211aa0:	e0bff817 	ldw	r2,-32(fp)
  211aa4:	10802f17 	ldw	r2,188(r2)
  211aa8:	10c00104 	addi	r3,r2,4
  211aac:	e0bff817 	ldw	r2,-32(fp)
  211ab0:	10802f17 	ldw	r2,188(r2)
  211ab4:	10800104 	addi	r2,r2,4
  211ab8:	10800037 	ldwio	r2,0(r2)
  211abc:	113c002c 	andhi	r4,r2,61440
  211ac0:	00802034 	movhi	r2,128
  211ac4:	10bfffc4 	addi	r2,r2,-1
  211ac8:	2084b03a 	or	r2,r4,r2
  211acc:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  211ad0:	00006506 	br	211c68 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  211ad4:	00bfffc4 	movi	r2,-1
  211ad8:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  211adc:	e0bff617 	ldw	r2,-40(fp)
  211ae0:	108000cc 	andi	r2,r2,3
  211ae4:	10001e1e 	bne	r2,zero,211b60 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211ae8:	e0bff617 	ldw	r2,-40(fp)
  211aec:	10c00104 	addi	r3,r2,4
  211af0:	00bfff04 	movi	r2,-4
  211af4:	1884703a 	and	r2,r3,r2
  211af8:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  211afc:	e0fff717 	ldw	r3,-36(fp)
  211b00:	e0bff617 	ldw	r2,-40(fp)
  211b04:	1885c83a 	sub	r2,r3,r2
  211b08:	e0c00217 	ldw	r3,8(fp)
  211b0c:	1880010e 	bge	r3,r2,211b14 <alt_onchip_flash_write_block+0x128>
  211b10:	1805883a 	mov	r2,r3
  211b14:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  211b18:	e0bff517 	ldw	r2,-44(fp)
  211b1c:	e0ffff17 	ldw	r3,-4(fp)
  211b20:	1887883a 	add	r3,r3,r2
  211b24:	e13ff917 	ldw	r4,-28(fp)
  211b28:	e0bffb04 	addi	r2,fp,-20
  211b2c:	200d883a 	mov	r6,r4
  211b30:	180b883a 	mov	r5,r3
  211b34:	1009883a 	mov	r4,r2
  211b38:	02073b80 	call	2073b8 <memcpy>
            buffer_offset += length_of_current_write;
  211b3c:	e0fff517 	ldw	r3,-44(fp)
  211b40:	e0bff917 	ldw	r2,-28(fp)
  211b44:	1885883a 	add	r2,r3,r2
  211b48:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  211b4c:	e0c00217 	ldw	r3,8(fp)
  211b50:	e0bff917 	ldw	r2,-28(fp)
  211b54:	1885c83a 	sub	r2,r3,r2
  211b58:	e0800215 	stw	r2,8(fp)
  211b5c:	00003006 	br	211c20 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211b60:	e0bff617 	ldw	r2,-40(fp)
  211b64:	108000cc 	andi	r2,r2,3
  211b68:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  211b6c:	e0fff617 	ldw	r3,-40(fp)
  211b70:	e0bffa17 	ldw	r2,-24(fp)
  211b74:	1885c83a 	sub	r2,r3,r2
  211b78:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  211b7c:	e0bff617 	ldw	r2,-40(fp)
  211b80:	10c00104 	addi	r3,r2,4
  211b84:	00bfff04 	movi	r2,-4
  211b88:	1884703a 	and	r2,r3,r2
  211b8c:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  211b90:	e0fff717 	ldw	r3,-36(fp)
  211b94:	e0bff617 	ldw	r2,-40(fp)
  211b98:	1889c83a 	sub	r4,r3,r2
  211b9c:	e0c00217 	ldw	r3,8(fp)
  211ba0:	e0bffa17 	ldw	r2,-24(fp)
  211ba4:	1887883a 	add	r3,r3,r2
  211ba8:	2005883a 	mov	r2,r4
  211bac:	1880010e 	bge	r3,r2,211bb4 <alt_onchip_flash_write_block+0x1c8>
  211bb0:	1805883a 	mov	r2,r3
  211bb4:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  211bb8:	e0fffb04 	addi	r3,fp,-20
  211bbc:	e0bffa17 	ldw	r2,-24(fp)
  211bc0:	1885883a 	add	r2,r3,r2
  211bc4:	100f883a 	mov	r7,r2
  211bc8:	e0bff517 	ldw	r2,-44(fp)
  211bcc:	e0ffff17 	ldw	r3,-4(fp)
  211bd0:	1889883a 	add	r4,r3,r2
  211bd4:	e0fff917 	ldw	r3,-28(fp)
  211bd8:	e0bffa17 	ldw	r2,-24(fp)
  211bdc:	1885c83a 	sub	r2,r3,r2
  211be0:	100d883a 	mov	r6,r2
  211be4:	200b883a 	mov	r5,r4
  211be8:	3809883a 	mov	r4,r7
  211bec:	02073b80 	call	2073b8 <memcpy>
            buffer_offset += length_of_current_write - padding;
  211bf0:	e0fff917 	ldw	r3,-28(fp)
  211bf4:	e0bffa17 	ldw	r2,-24(fp)
  211bf8:	1885c83a 	sub	r2,r3,r2
  211bfc:	e0fff517 	ldw	r3,-44(fp)
  211c00:	1885883a 	add	r2,r3,r2
  211c04:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  211c08:	e0fff917 	ldw	r3,-28(fp)
  211c0c:	e0bffa17 	ldw	r2,-24(fp)
  211c10:	1885c83a 	sub	r2,r3,r2
  211c14:	e0c00217 	ldw	r3,8(fp)
  211c18:	1885c83a 	sub	r2,r3,r2
  211c1c:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  211c20:	e0bff817 	ldw	r2,-32(fp)
  211c24:	10c00a17 	ldw	r3,40(r2)
  211c28:	e0bff617 	ldw	r2,-40(fp)
  211c2c:	1885883a 	add	r2,r3,r2
  211c30:	e0fffb17 	ldw	r3,-20(fp)
  211c34:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  211c38:	e13ff817 	ldw	r4,-32(fp)
  211c3c:	02124780 	call	212478 <alt_onchip_flash_poll_for_status_to_go_idle>
  211c40:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  211c44:	e0bff417 	ldw	r2,-48(fp)
  211c48:	10000a1e 	bne	r2,zero,211c74 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  211c4c:	e13ff817 	ldw	r4,-32(fp)
  211c50:	02125980 	call	212598 <alt_onchip_flash_poll_for_status_write_passed>
  211c54:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  211c58:	e0bff417 	ldw	r2,-48(fp)
  211c5c:	1000071e 	bne	r2,zero,211c7c <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  211c60:	e0bff717 	ldw	r2,-36(fp)
  211c64:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  211c68:	e0800217 	ldw	r2,8(fp)
  211c6c:	103f991e 	bne	r2,zero,211ad4 <_gp+0xffdffef0>
  211c70:	00000306 	br	211c80 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  211c74:	0001883a 	nop
  211c78:	00000106 	br	211c80 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  211c7c:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  211c80:	e0bff817 	ldw	r2,-32(fp)
  211c84:	10802f17 	ldw	r2,188(r2)
  211c88:	10c00104 	addi	r3,r2,4
  211c8c:	e0bff817 	ldw	r2,-32(fp)
  211c90:	10802f17 	ldw	r2,188(r2)
  211c94:	10800104 	addi	r2,r2,4
  211c98:	11000037 	ldwio	r4,0(r2)
  211c9c:	00840034 	movhi	r2,4096
  211ca0:	10bfffc4 	addi	r2,r2,-1
  211ca4:	2084b03a 	or	r2,r4,r2
  211ca8:	18800035 	stwio	r2,0(r3)

    return ret_code;
  211cac:	e0bff417 	ldw	r2,-48(fp)
}
  211cb0:	e037883a 	mov	sp,fp
  211cb4:	dfc00117 	ldw	ra,4(sp)
  211cb8:	df000017 	ldw	fp,0(sp)
  211cbc:	dec00204 	addi	sp,sp,8
  211cc0:	f800283a 	ret

00211cc4 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  211cc4:	defff104 	addi	sp,sp,-60
  211cc8:	dfc00e15 	stw	ra,56(sp)
  211ccc:	df000d15 	stw	fp,52(sp)
  211cd0:	df000d04 	addi	fp,sp,52
  211cd4:	e13ffc15 	stw	r4,-16(fp)
  211cd8:	e17ffd15 	stw	r5,-12(fp)
  211cdc:	e1bffe15 	stw	r6,-8(fp)
  211ce0:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  211ce4:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  211ce8:	e0bfff17 	ldw	r2,-4(fp)
  211cec:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  211cf0:	e0bffd17 	ldw	r2,-12(fp)
  211cf4:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  211cf8:	e0bffc17 	ldw	r2,-16(fp)
  211cfc:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  211d00:	e0bffa17 	ldw	r2,-24(fp)
  211d04:	10800b17 	ldw	r2,44(r2)
  211d08:	e0fffd17 	ldw	r3,-12(fp)
  211d0c:	1880060e 	bge	r3,r2,211d28 <alt_onchip_flash_write+0x64>
  211d10:	e0bffa17 	ldw	r2,-24(fp)
  211d14:	10c00b17 	ldw	r3,44(r2)
  211d18:	e0bffd17 	ldw	r2,-12(fp)
  211d1c:	1887c83a 	sub	r3,r3,r2
  211d20:	e0bfff17 	ldw	r2,-4(fp)
  211d24:	1880020e 	bge	r3,r2,211d30 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  211d28:	00bffc84 	movi	r2,-14
  211d2c:	00009606 	br	211f88 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  211d30:	e03ff515 	stw	zero,-44(fp)
  211d34:	00008706 	br	211f54 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  211d38:	e0fffa17 	ldw	r3,-24(fp)
  211d3c:	e0bff517 	ldw	r2,-44(fp)
  211d40:	1004913a 	slli	r2,r2,4
  211d44:	1885883a 	add	r2,r3,r2
  211d48:	10800d04 	addi	r2,r2,52
  211d4c:	10800017 	ldw	r2,0(r2)
  211d50:	e0fffd17 	ldw	r3,-12(fp)
  211d54:	18807c16 	blt	r3,r2,211f48 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  211d58:	e0fffa17 	ldw	r3,-24(fp)
  211d5c:	e0bff517 	ldw	r2,-44(fp)
  211d60:	1004913a 	slli	r2,r2,4
  211d64:	1885883a 	add	r2,r3,r2
  211d68:	10800d04 	addi	r2,r2,52
  211d6c:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  211d70:	e13ffa17 	ldw	r4,-24(fp)
  211d74:	e0bff517 	ldw	r2,-44(fp)
  211d78:	1004913a 	slli	r2,r2,4
  211d7c:	2085883a 	add	r2,r4,r2
  211d80:	10800e04 	addi	r2,r2,56
  211d84:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  211d88:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  211d8c:	e0fffd17 	ldw	r3,-12(fp)
  211d90:	18806d0e 	bge	r3,r2,211f48 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  211d94:	e0fffa17 	ldw	r3,-24(fp)
  211d98:	e0bff517 	ldw	r2,-44(fp)
  211d9c:	1004913a 	slli	r2,r2,4
  211da0:	1885883a 	add	r2,r3,r2
  211da4:	10800d04 	addi	r2,r2,52
  211da8:	10800017 	ldw	r2,0(r2)
  211dac:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  211db0:	e03ff615 	stw	zero,-40(fp)
  211db4:	00005c06 	br	211f28 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  211db8:	e0fffd17 	ldw	r3,-12(fp)
  211dbc:	e0bff717 	ldw	r2,-36(fp)
  211dc0:	18804d16 	blt	r3,r2,211ef8 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  211dc4:	e0fffa17 	ldw	r3,-24(fp)
  211dc8:	e0bff517 	ldw	r2,-44(fp)
  211dcc:	10800104 	addi	r2,r2,4
  211dd0:	1004913a 	slli	r2,r2,4
  211dd4:	1885883a 	add	r2,r3,r2
  211dd8:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  211ddc:	e0bff717 	ldw	r2,-36(fp)
  211de0:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  211de4:	e0fffd17 	ldw	r3,-12(fp)
  211de8:	1880430e 	bge	r3,r2,211ef8 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  211dec:	e0fffa17 	ldw	r3,-24(fp)
  211df0:	e0bff517 	ldw	r2,-44(fp)
  211df4:	10800104 	addi	r2,r2,4
  211df8:	1004913a 	slli	r2,r2,4
  211dfc:	1885883a 	add	r2,r3,r2
  211e00:	10c00017 	ldw	r3,0(r2)
  211e04:	e0bff717 	ldw	r2,-36(fp)
  211e08:	1887883a 	add	r3,r3,r2
  211e0c:	e0bffd17 	ldw	r2,-12(fp)
  211e10:	1885c83a 	sub	r2,r3,r2
  211e14:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  211e18:	e0fffb17 	ldw	r3,-20(fp)
  211e1c:	e0bfff17 	ldw	r2,-4(fp)
  211e20:	1880010e 	bge	r3,r2,211e28 <alt_onchip_flash_write+0x164>
  211e24:	1805883a 	mov	r2,r3
  211e28:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  211e2c:	e0bffa17 	ldw	r2,-24(fp)
  211e30:	10c00a17 	ldw	r3,40(r2)
  211e34:	e0bffd17 	ldw	r2,-12(fp)
  211e38:	1885883a 	add	r2,r3,r2
  211e3c:	e0fffb17 	ldw	r3,-20(fp)
  211e40:	180d883a 	mov	r6,r3
  211e44:	100b883a 	mov	r5,r2
  211e48:	e13ffe17 	ldw	r4,-8(fp)
  211e4c:	02139680 	call	213968 <memcmp>
  211e50:	10001326 	beq	r2,zero,211ea0 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  211e54:	e0bffa17 	ldw	r2,-24(fp)
  211e58:	10800817 	ldw	r2,32(r2)
  211e5c:	e0fffa17 	ldw	r3,-24(fp)
  211e60:	e17ff717 	ldw	r5,-36(fp)
  211e64:	1809883a 	mov	r4,r3
  211e68:	103ee83a 	callr	r2
  211e6c:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  211e70:	e0bff417 	ldw	r2,-48(fp)
  211e74:	10000a1e 	bne	r2,zero,211ea0 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  211e78:	e0bffa17 	ldw	r2,-24(fp)
  211e7c:	10800917 	ldw	r2,36(r2)
  211e80:	e13ffa17 	ldw	r4,-24(fp)
  211e84:	e0fffb17 	ldw	r3,-20(fp)
  211e88:	d8c00015 	stw	r3,0(sp)
  211e8c:	e1fffe17 	ldw	r7,-8(fp)
  211e90:	e1bffd17 	ldw	r6,-12(fp)
  211e94:	e17ff717 	ldw	r5,-36(fp)
  211e98:	103ee83a 	callr	r2
  211e9c:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  211ea0:	e0ffff17 	ldw	r3,-4(fp)
  211ea4:	e0bffb17 	ldw	r2,-20(fp)
  211ea8:	18802e26 	beq	r3,r2,211f64 <alt_onchip_flash_write+0x2a0>
  211eac:	e0bff417 	ldw	r2,-48(fp)
  211eb0:	10002c1e 	bne	r2,zero,211f64 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  211eb4:	e0ffff17 	ldw	r3,-4(fp)
  211eb8:	e0bffb17 	ldw	r2,-20(fp)
  211ebc:	1885c83a 	sub	r2,r3,r2
  211ec0:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  211ec4:	e0fffa17 	ldw	r3,-24(fp)
  211ec8:	e0bff517 	ldw	r2,-44(fp)
  211ecc:	10800104 	addi	r2,r2,4
  211ed0:	1004913a 	slli	r2,r2,4
  211ed4:	1885883a 	add	r2,r3,r2
  211ed8:	10c00017 	ldw	r3,0(r2)
  211edc:	e0bff717 	ldw	r2,-36(fp)
  211ee0:	1885883a 	add	r2,r3,r2
  211ee4:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  211ee8:	e0bffb17 	ldw	r2,-20(fp)
  211eec:	e0fffe17 	ldw	r3,-8(fp)
  211ef0:	1885883a 	add	r2,r3,r2
  211ef4:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  211ef8:	e0fffa17 	ldw	r3,-24(fp)
  211efc:	e0bff517 	ldw	r2,-44(fp)
  211f00:	10800104 	addi	r2,r2,4
  211f04:	1004913a 	slli	r2,r2,4
  211f08:	1885883a 	add	r2,r3,r2
  211f0c:	10800017 	ldw	r2,0(r2)
  211f10:	e0fff717 	ldw	r3,-36(fp)
  211f14:	1885883a 	add	r2,r3,r2
  211f18:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  211f1c:	e0bff617 	ldw	r2,-40(fp)
  211f20:	10800044 	addi	r2,r2,1
  211f24:	e0bff615 	stw	r2,-40(fp)
  211f28:	e0fffa17 	ldw	r3,-24(fp)
  211f2c:	e0bff517 	ldw	r2,-44(fp)
  211f30:	1004913a 	slli	r2,r2,4
  211f34:	1885883a 	add	r2,r3,r2
  211f38:	10800f04 	addi	r2,r2,60
  211f3c:	10800017 	ldw	r2,0(r2)
  211f40:	e0fff617 	ldw	r3,-40(fp)
  211f44:	18bf9c16 	blt	r3,r2,211db8 <_gp+0xffe001d4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  211f48:	e0bff517 	ldw	r2,-44(fp)
  211f4c:	10800044 	addi	r2,r2,1
  211f50:	e0bff515 	stw	r2,-44(fp)
  211f54:	e0bffa17 	ldw	r2,-24(fp)
  211f58:	10800c17 	ldw	r2,48(r2)
  211f5c:	e0fff517 	ldw	r3,-44(fp)
  211f60:	18bf7516 	blt	r3,r2,211d38 <_gp+0xffe00154>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  211f64:	e0bffa17 	ldw	r2,-24(fp)
  211f68:	10c00a17 	ldw	r3,40(r2)
  211f6c:	e0bff917 	ldw	r2,-28(fp)
  211f70:	1885883a 	add	r2,r3,r2
  211f74:	e0fff817 	ldw	r3,-32(fp)
  211f78:	180b883a 	mov	r5,r3
  211f7c:	1009883a 	mov	r4,r2
  211f80:	02128ac0 	call	2128ac <alt_dcache_flush>
    return ret_code;
  211f84:	e0bff417 	ldw	r2,-48(fp)
}
  211f88:	e037883a 	mov	sp,fp
  211f8c:	dfc00117 	ldw	ra,4(sp)
  211f90:	df000017 	ldw	fp,0(sp)
  211f94:	dec00204 	addi	sp,sp,8
  211f98:	f800283a 	ret

00211f9c <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  211f9c:	defff504 	addi	sp,sp,-44
  211fa0:	dfc00a15 	stw	ra,40(sp)
  211fa4:	df000915 	stw	fp,36(sp)
  211fa8:	dc000815 	stw	r16,32(sp)
  211fac:	df000904 	addi	fp,sp,36
  211fb0:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  211fb4:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  211fb8:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  211fbc:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  211fc0:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  211fc4:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  211fc8:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  211fcc:	e0bffe17 	ldw	r2,-8(fp)
  211fd0:	10800d04 	addi	r2,r2,52
  211fd4:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  211fd8:	e0bffe17 	ldw	r2,-8(fp)
  211fdc:	10802f17 	ldw	r2,188(r2)
  211fe0:	10001926 	beq	r2,zero,212048 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  211fe4:	e0bffe17 	ldw	r2,-8(fp)
  211fe8:	10802f17 	ldw	r2,188(r2)
  211fec:	10800037 	ldwio	r2,0(r2)
  211ff0:	1080080c 	andi	r2,r2,32
  211ff4:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  211ff8:	e0bffe17 	ldw	r2,-8(fp)
  211ffc:	10802f17 	ldw	r2,188(r2)
  212000:	10800037 	ldwio	r2,0(r2)
  212004:	1080100c 	andi	r2,r2,64
  212008:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  21200c:	e0bffe17 	ldw	r2,-8(fp)
  212010:	10802f17 	ldw	r2,188(r2)
  212014:	10800037 	ldwio	r2,0(r2)
  212018:	1080200c 	andi	r2,r2,128
  21201c:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  212020:	e0bffe17 	ldw	r2,-8(fp)
  212024:	10802f17 	ldw	r2,188(r2)
  212028:	10800037 	ldwio	r2,0(r2)
  21202c:	1080400c 	andi	r2,r2,256
  212030:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  212034:	e0bffe17 	ldw	r2,-8(fp)
  212038:	10802f17 	ldw	r2,188(r2)
  21203c:	10800037 	ldwio	r2,0(r2)
  212040:	1080800c 	andi	r2,r2,512
  212044:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  212048:	e0bffe17 	ldw	r2,-8(fp)
  21204c:	10803017 	ldw	r2,192(r2)
  212050:	10800058 	cmpnei	r2,r2,1
  212054:	10002f1e 	bne	r2,zero,212114 <altera_onchip_flash_init+0x178>
  212058:	e0bff817 	ldw	r2,-32(fp)
  21205c:	10800820 	cmpeqi	r2,r2,32
  212060:	10002c1e 	bne	r2,zero,212114 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  212064:	e0bff717 	ldw	r2,-36(fp)
  212068:	1004913a 	slli	r2,r2,4
  21206c:	e0fffd17 	ldw	r3,-12(fp)
  212070:	1885883a 	add	r2,r3,r2
  212074:	e0fffe17 	ldw	r3,-8(fp)
  212078:	18c03117 	ldw	r3,196(r3)
  21207c:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  212080:	e0bff717 	ldw	r2,-36(fp)
  212084:	1004913a 	slli	r2,r2,4
  212088:	e0fffd17 	ldw	r3,-12(fp)
  21208c:	1885883a 	add	r2,r3,r2
  212090:	e0fffe17 	ldw	r3,-8(fp)
  212094:	19003217 	ldw	r4,200(r3)
  212098:	e0fffe17 	ldw	r3,-8(fp)
  21209c:	18c03117 	ldw	r3,196(r3)
  2120a0:	20c7c83a 	sub	r3,r4,r3
  2120a4:	18c00044 	addi	r3,r3,1
  2120a8:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  2120ac:	e0bff717 	ldw	r2,-36(fp)
  2120b0:	1004913a 	slli	r2,r2,4
  2120b4:	e0fffd17 	ldw	r3,-12(fp)
  2120b8:	18a1883a 	add	r16,r3,r2
  2120bc:	e0fffe17 	ldw	r3,-8(fp)
  2120c0:	e0bff717 	ldw	r2,-36(fp)
  2120c4:	1004913a 	slli	r2,r2,4
  2120c8:	1885883a 	add	r2,r3,r2
  2120cc:	10800e04 	addi	r2,r2,56
  2120d0:	10c00017 	ldw	r3,0(r2)
  2120d4:	e0bffe17 	ldw	r2,-8(fp)
  2120d8:	10803f17 	ldw	r2,252(r2)
  2120dc:	100b883a 	mov	r5,r2
  2120e0:	1809883a 	mov	r4,r3
  2120e4:	0200a540 	call	200a54 <__divsi3>
  2120e8:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  2120ec:	e0bff717 	ldw	r2,-36(fp)
  2120f0:	1004913a 	slli	r2,r2,4
  2120f4:	e0fffd17 	ldw	r3,-12(fp)
  2120f8:	1885883a 	add	r2,r3,r2
  2120fc:	e0fffe17 	ldw	r3,-8(fp)
  212100:	18c03f17 	ldw	r3,252(r3)
  212104:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  212108:	e0bff717 	ldw	r2,-36(fp)
  21210c:	10800044 	addi	r2,r2,1
  212110:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  212114:	e0bffe17 	ldw	r2,-8(fp)
  212118:	10803317 	ldw	r2,204(r2)
  21211c:	10800058 	cmpnei	r2,r2,1
  212120:	10002f1e 	bne	r2,zero,2121e0 <altera_onchip_flash_init+0x244>
  212124:	e0bff917 	ldw	r2,-28(fp)
  212128:	10801020 	cmpeqi	r2,r2,64
  21212c:	10002c1e 	bne	r2,zero,2121e0 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  212130:	e0bff717 	ldw	r2,-36(fp)
  212134:	1004913a 	slli	r2,r2,4
  212138:	e0fffd17 	ldw	r3,-12(fp)
  21213c:	1885883a 	add	r2,r3,r2
  212140:	e0fffe17 	ldw	r3,-8(fp)
  212144:	18c03417 	ldw	r3,208(r3)
  212148:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  21214c:	e0bff717 	ldw	r2,-36(fp)
  212150:	1004913a 	slli	r2,r2,4
  212154:	e0fffd17 	ldw	r3,-12(fp)
  212158:	1885883a 	add	r2,r3,r2
  21215c:	e0fffe17 	ldw	r3,-8(fp)
  212160:	19003517 	ldw	r4,212(r3)
  212164:	e0fffe17 	ldw	r3,-8(fp)
  212168:	18c03417 	ldw	r3,208(r3)
  21216c:	20c7c83a 	sub	r3,r4,r3
  212170:	18c00044 	addi	r3,r3,1
  212174:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  212178:	e0bff717 	ldw	r2,-36(fp)
  21217c:	1004913a 	slli	r2,r2,4
  212180:	e0fffd17 	ldw	r3,-12(fp)
  212184:	18a1883a 	add	r16,r3,r2
  212188:	e0fffe17 	ldw	r3,-8(fp)
  21218c:	e0bff717 	ldw	r2,-36(fp)
  212190:	1004913a 	slli	r2,r2,4
  212194:	1885883a 	add	r2,r3,r2
  212198:	10800e04 	addi	r2,r2,56
  21219c:	10c00017 	ldw	r3,0(r2)
  2121a0:	e0bffe17 	ldw	r2,-8(fp)
  2121a4:	10803f17 	ldw	r2,252(r2)
  2121a8:	100b883a 	mov	r5,r2
  2121ac:	1809883a 	mov	r4,r3
  2121b0:	0200a540 	call	200a54 <__divsi3>
  2121b4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  2121b8:	e0bff717 	ldw	r2,-36(fp)
  2121bc:	1004913a 	slli	r2,r2,4
  2121c0:	e0fffd17 	ldw	r3,-12(fp)
  2121c4:	1885883a 	add	r2,r3,r2
  2121c8:	e0fffe17 	ldw	r3,-8(fp)
  2121cc:	18c03f17 	ldw	r3,252(r3)
  2121d0:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  2121d4:	e0bff717 	ldw	r2,-36(fp)
  2121d8:	10800044 	addi	r2,r2,1
  2121dc:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  2121e0:	e0bffe17 	ldw	r2,-8(fp)
  2121e4:	10803617 	ldw	r2,216(r2)
  2121e8:	10800058 	cmpnei	r2,r2,1
  2121ec:	10002f1e 	bne	r2,zero,2122ac <altera_onchip_flash_init+0x310>
  2121f0:	e0bffa17 	ldw	r2,-24(fp)
  2121f4:	10802020 	cmpeqi	r2,r2,128
  2121f8:	10002c1e 	bne	r2,zero,2122ac <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  2121fc:	e0bff717 	ldw	r2,-36(fp)
  212200:	1004913a 	slli	r2,r2,4
  212204:	e0fffd17 	ldw	r3,-12(fp)
  212208:	1885883a 	add	r2,r3,r2
  21220c:	e0fffe17 	ldw	r3,-8(fp)
  212210:	18c03717 	ldw	r3,220(r3)
  212214:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  212218:	e0bff717 	ldw	r2,-36(fp)
  21221c:	1004913a 	slli	r2,r2,4
  212220:	e0fffd17 	ldw	r3,-12(fp)
  212224:	1885883a 	add	r2,r3,r2
  212228:	e0fffe17 	ldw	r3,-8(fp)
  21222c:	19003817 	ldw	r4,224(r3)
  212230:	e0fffe17 	ldw	r3,-8(fp)
  212234:	18c03717 	ldw	r3,220(r3)
  212238:	20c7c83a 	sub	r3,r4,r3
  21223c:	18c00044 	addi	r3,r3,1
  212240:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  212244:	e0bff717 	ldw	r2,-36(fp)
  212248:	1004913a 	slli	r2,r2,4
  21224c:	e0fffd17 	ldw	r3,-12(fp)
  212250:	18a1883a 	add	r16,r3,r2
  212254:	e0fffe17 	ldw	r3,-8(fp)
  212258:	e0bff717 	ldw	r2,-36(fp)
  21225c:	1004913a 	slli	r2,r2,4
  212260:	1885883a 	add	r2,r3,r2
  212264:	10800e04 	addi	r2,r2,56
  212268:	10c00017 	ldw	r3,0(r2)
  21226c:	e0bffe17 	ldw	r2,-8(fp)
  212270:	10803f17 	ldw	r2,252(r2)
  212274:	100b883a 	mov	r5,r2
  212278:	1809883a 	mov	r4,r3
  21227c:	0200a540 	call	200a54 <__divsi3>
  212280:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  212284:	e0bff717 	ldw	r2,-36(fp)
  212288:	1004913a 	slli	r2,r2,4
  21228c:	e0fffd17 	ldw	r3,-12(fp)
  212290:	1885883a 	add	r2,r3,r2
  212294:	e0fffe17 	ldw	r3,-8(fp)
  212298:	18c03f17 	ldw	r3,252(r3)
  21229c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  2122a0:	e0bff717 	ldw	r2,-36(fp)
  2122a4:	10800044 	addi	r2,r2,1
  2122a8:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  2122ac:	e0bffe17 	ldw	r2,-8(fp)
  2122b0:	10803917 	ldw	r2,228(r2)
  2122b4:	10800058 	cmpnei	r2,r2,1
  2122b8:	10002f1e 	bne	r2,zero,212378 <altera_onchip_flash_init+0x3dc>
  2122bc:	e0bffb17 	ldw	r2,-20(fp)
  2122c0:	10804020 	cmpeqi	r2,r2,256
  2122c4:	10002c1e 	bne	r2,zero,212378 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  2122c8:	e0bff717 	ldw	r2,-36(fp)
  2122cc:	1004913a 	slli	r2,r2,4
  2122d0:	e0fffd17 	ldw	r3,-12(fp)
  2122d4:	1885883a 	add	r2,r3,r2
  2122d8:	e0fffe17 	ldw	r3,-8(fp)
  2122dc:	18c03a17 	ldw	r3,232(r3)
  2122e0:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  2122e4:	e0bff717 	ldw	r2,-36(fp)
  2122e8:	1004913a 	slli	r2,r2,4
  2122ec:	e0fffd17 	ldw	r3,-12(fp)
  2122f0:	1885883a 	add	r2,r3,r2
  2122f4:	e0fffe17 	ldw	r3,-8(fp)
  2122f8:	19003b17 	ldw	r4,236(r3)
  2122fc:	e0fffe17 	ldw	r3,-8(fp)
  212300:	18c03a17 	ldw	r3,232(r3)
  212304:	20c7c83a 	sub	r3,r4,r3
  212308:	18c00044 	addi	r3,r3,1
  21230c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  212310:	e0bff717 	ldw	r2,-36(fp)
  212314:	1004913a 	slli	r2,r2,4
  212318:	e0fffd17 	ldw	r3,-12(fp)
  21231c:	18a1883a 	add	r16,r3,r2
  212320:	e0fffe17 	ldw	r3,-8(fp)
  212324:	e0bff717 	ldw	r2,-36(fp)
  212328:	1004913a 	slli	r2,r2,4
  21232c:	1885883a 	add	r2,r3,r2
  212330:	10800e04 	addi	r2,r2,56
  212334:	10c00017 	ldw	r3,0(r2)
  212338:	e0bffe17 	ldw	r2,-8(fp)
  21233c:	10803f17 	ldw	r2,252(r2)
  212340:	100b883a 	mov	r5,r2
  212344:	1809883a 	mov	r4,r3
  212348:	0200a540 	call	200a54 <__divsi3>
  21234c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  212350:	e0bff717 	ldw	r2,-36(fp)
  212354:	1004913a 	slli	r2,r2,4
  212358:	e0fffd17 	ldw	r3,-12(fp)
  21235c:	1885883a 	add	r2,r3,r2
  212360:	e0fffe17 	ldw	r3,-8(fp)
  212364:	18c03f17 	ldw	r3,252(r3)
  212368:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  21236c:	e0bff717 	ldw	r2,-36(fp)
  212370:	10800044 	addi	r2,r2,1
  212374:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  212378:	e0bffe17 	ldw	r2,-8(fp)
  21237c:	10803c17 	ldw	r2,240(r2)
  212380:	10800058 	cmpnei	r2,r2,1
  212384:	10002f1e 	bne	r2,zero,212444 <altera_onchip_flash_init+0x4a8>
  212388:	e0bffc17 	ldw	r2,-16(fp)
  21238c:	10808020 	cmpeqi	r2,r2,512
  212390:	10002c1e 	bne	r2,zero,212444 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  212394:	e0bff717 	ldw	r2,-36(fp)
  212398:	1004913a 	slli	r2,r2,4
  21239c:	e0fffd17 	ldw	r3,-12(fp)
  2123a0:	1885883a 	add	r2,r3,r2
  2123a4:	e0fffe17 	ldw	r3,-8(fp)
  2123a8:	18c03d17 	ldw	r3,244(r3)
  2123ac:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  2123b0:	e0bff717 	ldw	r2,-36(fp)
  2123b4:	1004913a 	slli	r2,r2,4
  2123b8:	e0fffd17 	ldw	r3,-12(fp)
  2123bc:	1885883a 	add	r2,r3,r2
  2123c0:	e0fffe17 	ldw	r3,-8(fp)
  2123c4:	19003e17 	ldw	r4,248(r3)
  2123c8:	e0fffe17 	ldw	r3,-8(fp)
  2123cc:	18c03d17 	ldw	r3,244(r3)
  2123d0:	20c7c83a 	sub	r3,r4,r3
  2123d4:	18c00044 	addi	r3,r3,1
  2123d8:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  2123dc:	e0bff717 	ldw	r2,-36(fp)
  2123e0:	1004913a 	slli	r2,r2,4
  2123e4:	e0fffd17 	ldw	r3,-12(fp)
  2123e8:	18a1883a 	add	r16,r3,r2
  2123ec:	e0fffe17 	ldw	r3,-8(fp)
  2123f0:	e0bff717 	ldw	r2,-36(fp)
  2123f4:	1004913a 	slli	r2,r2,4
  2123f8:	1885883a 	add	r2,r3,r2
  2123fc:	10800e04 	addi	r2,r2,56
  212400:	10c00017 	ldw	r3,0(r2)
  212404:	e0bffe17 	ldw	r2,-8(fp)
  212408:	10803f17 	ldw	r2,252(r2)
  21240c:	100b883a 	mov	r5,r2
  212410:	1809883a 	mov	r4,r3
  212414:	0200a540 	call	200a54 <__divsi3>
  212418:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  21241c:	e0bff717 	ldw	r2,-36(fp)
  212420:	1004913a 	slli	r2,r2,4
  212424:	e0fffd17 	ldw	r3,-12(fp)
  212428:	1885883a 	add	r2,r3,r2
  21242c:	e0fffe17 	ldw	r3,-8(fp)
  212430:	18c03f17 	ldw	r3,252(r3)
  212434:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  212438:	e0bff717 	ldw	r2,-36(fp)
  21243c:	10800044 	addi	r2,r2,1
  212440:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  212444:	e0bffe17 	ldw	r2,-8(fp)
  212448:	e0fff717 	ldw	r3,-36(fp)
  21244c:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  212450:	e0bffe17 	ldw	r2,-8(fp)
  212454:	1009883a 	mov	r4,r2
  212458:	02116e80 	call	2116e8 <alt_flash_device_register>
}
  21245c:	0001883a 	nop
  212460:	e6ffff04 	addi	sp,fp,-4
  212464:	dfc00217 	ldw	ra,8(sp)
  212468:	df000117 	ldw	fp,4(sp)
  21246c:	dc000017 	ldw	r16,0(sp)
  212470:	dec00304 	addi	sp,sp,12
  212474:	f800283a 	ret

00212478 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  212478:	defffa04 	addi	sp,sp,-24
  21247c:	dfc00515 	stw	ra,20(sp)
  212480:	df000415 	stw	fp,16(sp)
  212484:	df000404 	addi	fp,sp,16
  212488:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  21248c:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  212490:	008002f4 	movhi	r2,11
  212494:	10ab9804 	addi	r2,r2,-20896
  212498:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  21249c:	008002f4 	movhi	r2,11
  2124a0:	10ab9804 	addi	r2,r2,-20896
  2124a4:	e0bffd15 	stw	r2,-12(fp)

    while (
  2124a8:	00000c06 	br	2124dc <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  2124ac:	01000044 	movi	r4,1
  2124b0:	02127540 	call	212754 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  2124b4:	e0bffe17 	ldw	r2,-8(fp)
  2124b8:	10000826 	beq	r2,zero,2124dc <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  2124bc:	e0bffd17 	ldw	r2,-12(fp)
  2124c0:	10bfffc4 	addi	r2,r2,-1
  2124c4:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2124c8:	e0bffd17 	ldw	r2,-12(fp)
  2124cc:	1000031e 	bne	r2,zero,2124dc <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2124d0:	00bfe304 	movi	r2,-116
  2124d4:	e0bffc15 	stw	r2,-16(fp)
                break;
  2124d8:	00000506 	br	2124f0 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  2124dc:	e0bfff17 	ldw	r2,-4(fp)
  2124e0:	10802f17 	ldw	r2,188(r2)
  2124e4:	10800037 	ldwio	r2,0(r2)
  2124e8:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  2124ec:	103fef1e 	bne	r2,zero,2124ac <_gp+0xffe008c8>
                break;
            }
        }
    }

    return ret_code;
  2124f0:	e0bffc17 	ldw	r2,-16(fp)
}
  2124f4:	e037883a 	mov	sp,fp
  2124f8:	dfc00117 	ldw	ra,4(sp)
  2124fc:	df000017 	ldw	fp,0(sp)
  212500:	dec00204 	addi	sp,sp,8
  212504:	f800283a 	ret

00212508 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  212508:	defffa04 	addi	sp,sp,-24
  21250c:	dfc00515 	stw	ra,20(sp)
  212510:	df000415 	stw	fp,16(sp)
  212514:	df000404 	addi	fp,sp,16
  212518:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  21251c:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  212520:	008002f4 	movhi	r2,11
  212524:	10ab9804 	addi	r2,r2,-20896
  212528:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  21252c:	008002f4 	movhi	r2,11
  212530:	10ab9804 	addi	r2,r2,-20896
  212534:	e0bffd15 	stw	r2,-12(fp)

    while (
  212538:	00000c06 	br	21256c <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  21253c:	01000044 	movi	r4,1
  212540:	02127540 	call	212754 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  212544:	e0bffe17 	ldw	r2,-8(fp)
  212548:	10000826 	beq	r2,zero,21256c <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  21254c:	e0bffd17 	ldw	r2,-12(fp)
  212550:	10bfffc4 	addi	r2,r2,-1
  212554:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  212558:	e0bffd17 	ldw	r2,-12(fp)
  21255c:	1000031e 	bne	r2,zero,21256c <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  212560:	00bfe304 	movi	r2,-116
  212564:	e0bffc15 	stw	r2,-16(fp)
                break;
  212568:	00000506 	br	212580 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  21256c:	e0bfff17 	ldw	r2,-4(fp)
  212570:	10802f17 	ldw	r2,188(r2)
  212574:	10800037 	ldwio	r2,0(r2)
  212578:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  21257c:	103fef26 	beq	r2,zero,21253c <_gp+0xffe00958>
                break;
            }
        }
    }

    return ret_code;
  212580:	e0bffc17 	ldw	r2,-16(fp)
}
  212584:	e037883a 	mov	sp,fp
  212588:	dfc00117 	ldw	ra,4(sp)
  21258c:	df000017 	ldw	fp,0(sp)
  212590:	dec00204 	addi	sp,sp,8
  212594:	f800283a 	ret

00212598 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  212598:	defffa04 	addi	sp,sp,-24
  21259c:	dfc00515 	stw	ra,20(sp)
  2125a0:	df000415 	stw	fp,16(sp)
  2125a4:	df000404 	addi	fp,sp,16
  2125a8:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  2125ac:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2125b0:	008002f4 	movhi	r2,11
  2125b4:	10ab9804 	addi	r2,r2,-20896
  2125b8:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2125bc:	008002f4 	movhi	r2,11
  2125c0:	10ab9804 	addi	r2,r2,-20896
  2125c4:	e0bffd15 	stw	r2,-12(fp)

    while (
  2125c8:	00000c06 	br	2125fc <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  2125cc:	01000044 	movi	r4,1
  2125d0:	02127540 	call	212754 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  2125d4:	e0bffe17 	ldw	r2,-8(fp)
  2125d8:	10000826 	beq	r2,zero,2125fc <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  2125dc:	e0bffd17 	ldw	r2,-12(fp)
  2125e0:	10bfffc4 	addi	r2,r2,-1
  2125e4:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2125e8:	e0bffd17 	ldw	r2,-12(fp)
  2125ec:	1000031e 	bne	r2,zero,2125fc <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2125f0:	00bfe304 	movi	r2,-116
  2125f4:	e0bffc15 	stw	r2,-16(fp)
                break;
  2125f8:	00000506 	br	212610 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  2125fc:	e0bfff17 	ldw	r2,-4(fp)
  212600:	10802f17 	ldw	r2,188(r2)
  212604:	10800037 	ldwio	r2,0(r2)
  212608:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  21260c:	103fef26 	beq	r2,zero,2125cc <_gp+0xffe009e8>
                break;
            }
        }
    }

    return ret_code;
  212610:	e0bffc17 	ldw	r2,-16(fp)
}
  212614:	e037883a 	mov	sp,fp
  212618:	dfc00117 	ldw	ra,4(sp)
  21261c:	df000017 	ldw	fp,0(sp)
  212620:	dec00204 	addi	sp,sp,8
  212624:	f800283a 	ret

00212628 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  212628:	defff504 	addi	sp,sp,-44
  21262c:	df000a15 	stw	fp,40(sp)
  212630:	df000a04 	addi	fp,sp,40
  212634:	e13ffc15 	stw	r4,-16(fp)
  212638:	e17ffd15 	stw	r5,-12(fp)
  21263c:	e1bffe15 	stw	r6,-8(fp)
  212640:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  212644:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  212648:	d0a02117 	ldw	r2,-32636(gp)
  
  if (alt_ticks_per_second ())
  21264c:	10003c26 	beq	r2,zero,212740 <alt_alarm_start+0x118>
  {
    if (alarm)
  212650:	e0bffc17 	ldw	r2,-16(fp)
  212654:	10003826 	beq	r2,zero,212738 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  212658:	e0bffc17 	ldw	r2,-16(fp)
  21265c:	e0fffe17 	ldw	r3,-8(fp)
  212660:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  212664:	e0bffc17 	ldw	r2,-16(fp)
  212668:	e0ffff17 	ldw	r3,-4(fp)
  21266c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212670:	0005303a 	rdctl	r2,status
  212674:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212678:	e0fff917 	ldw	r3,-28(fp)
  21267c:	00bfff84 	movi	r2,-2
  212680:	1884703a 	and	r2,r3,r2
  212684:	1001703a 	wrctl	status,r2
  
  return context;
  212688:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  21268c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  212690:	d0a02217 	ldw	r2,-32632(gp)
      
      current_nticks = alt_nticks();
  212694:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  212698:	e0fffd17 	ldw	r3,-12(fp)
  21269c:	e0bff617 	ldw	r2,-40(fp)
  2126a0:	1885883a 	add	r2,r3,r2
  2126a4:	10c00044 	addi	r3,r2,1
  2126a8:	e0bffc17 	ldw	r2,-16(fp)
  2126ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  2126b0:	e0bffc17 	ldw	r2,-16(fp)
  2126b4:	10c00217 	ldw	r3,8(r2)
  2126b8:	e0bff617 	ldw	r2,-40(fp)
  2126bc:	1880042e 	bgeu	r3,r2,2126d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  2126c0:	e0bffc17 	ldw	r2,-16(fp)
  2126c4:	00c00044 	movi	r3,1
  2126c8:	10c00405 	stb	r3,16(r2)
  2126cc:	00000206 	br	2126d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  2126d0:	e0bffc17 	ldw	r2,-16(fp)
  2126d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  2126d8:	e0bffc17 	ldw	r2,-16(fp)
  2126dc:	d0e01404 	addi	r3,gp,-32688
  2126e0:	e0fffa15 	stw	r3,-24(fp)
  2126e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2126e8:	e0bffb17 	ldw	r2,-20(fp)
  2126ec:	e0fffa17 	ldw	r3,-24(fp)
  2126f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2126f4:	e0bffa17 	ldw	r2,-24(fp)
  2126f8:	10c00017 	ldw	r3,0(r2)
  2126fc:	e0bffb17 	ldw	r2,-20(fp)
  212700:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  212704:	e0bffa17 	ldw	r2,-24(fp)
  212708:	10800017 	ldw	r2,0(r2)
  21270c:	e0fffb17 	ldw	r3,-20(fp)
  212710:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  212714:	e0bffa17 	ldw	r2,-24(fp)
  212718:	e0fffb17 	ldw	r3,-20(fp)
  21271c:	10c00015 	stw	r3,0(r2)
  212720:	e0bff817 	ldw	r2,-32(fp)
  212724:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212728:	e0bff717 	ldw	r2,-36(fp)
  21272c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  212730:	0005883a 	mov	r2,zero
  212734:	00000306 	br	212744 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  212738:	00bffa84 	movi	r2,-22
  21273c:	00000106 	br	212744 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  212740:	00bfde84 	movi	r2,-134
  }
}
  212744:	e037883a 	mov	sp,fp
  212748:	df000017 	ldw	fp,0(sp)
  21274c:	dec00104 	addi	sp,sp,4
  212750:	f800283a 	ret

00212754 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  212754:	defffa04 	addi	sp,sp,-24
  212758:	dfc00515 	stw	ra,20(sp)
  21275c:	df000415 	stw	fp,16(sp)
  212760:	df000404 	addi	fp,sp,16
  212764:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  212768:	00800244 	movi	r2,9
  21276c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  212770:	014003f4 	movhi	r5,15
  212774:	29509004 	addi	r5,r5,16960
  212778:	e13ffd17 	ldw	r4,-12(fp)
  21277c:	020179c0 	call	20179c <__mulsi3>
  212780:	100b883a 	mov	r5,r2
  212784:	0100bef4 	movhi	r4,763
  212788:	213c2004 	addi	r4,r4,-3968
  21278c:	0200b4c0 	call	200b4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  212790:	100b883a 	mov	r5,r2
  212794:	01200034 	movhi	r4,32768
  212798:	213fffc4 	addi	r4,r4,-1
  21279c:	0200b4c0 	call	200b4c <__udivsi3>
  2127a0:	100b883a 	mov	r5,r2
  2127a4:	e13fff17 	ldw	r4,-4(fp)
  2127a8:	0200b4c0 	call	200b4c <__udivsi3>
  2127ac:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  2127b0:	e0bffe17 	ldw	r2,-8(fp)
  2127b4:	10002a26 	beq	r2,zero,212860 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  2127b8:	e03ffc15 	stw	zero,-16(fp)
  2127bc:	00001706 	br	21281c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  2127c0:	00a00034 	movhi	r2,32768
  2127c4:	10bfffc4 	addi	r2,r2,-1
  2127c8:	10bfffc4 	addi	r2,r2,-1
  2127cc:	103ffe1e 	bne	r2,zero,2127c8 <_gp+0xffe00be4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  2127d0:	014003f4 	movhi	r5,15
  2127d4:	29509004 	addi	r5,r5,16960
  2127d8:	e13ffd17 	ldw	r4,-12(fp)
  2127dc:	020179c0 	call	20179c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  2127e0:	100b883a 	mov	r5,r2
  2127e4:	0100bef4 	movhi	r4,763
  2127e8:	213c2004 	addi	r4,r4,-3968
  2127ec:	0200b4c0 	call	200b4c <__udivsi3>
  2127f0:	100b883a 	mov	r5,r2
  2127f4:	01200034 	movhi	r4,32768
  2127f8:	213fffc4 	addi	r4,r4,-1
  2127fc:	0200b4c0 	call	200b4c <__udivsi3>
  212800:	1007883a 	mov	r3,r2
  212804:	e0bfff17 	ldw	r2,-4(fp)
  212808:	10c5c83a 	sub	r2,r2,r3
  21280c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  212810:	e0bffc17 	ldw	r2,-16(fp)
  212814:	10800044 	addi	r2,r2,1
  212818:	e0bffc15 	stw	r2,-16(fp)
  21281c:	e0fffc17 	ldw	r3,-16(fp)
  212820:	e0bffe17 	ldw	r2,-8(fp)
  212824:	18bfe616 	blt	r3,r2,2127c0 <_gp+0xffe00bdc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  212828:	014003f4 	movhi	r5,15
  21282c:	29509004 	addi	r5,r5,16960
  212830:	e13ffd17 	ldw	r4,-12(fp)
  212834:	020179c0 	call	20179c <__mulsi3>
  212838:	100b883a 	mov	r5,r2
  21283c:	0100bef4 	movhi	r4,763
  212840:	213c2004 	addi	r4,r4,-3968
  212844:	0200b4c0 	call	200b4c <__udivsi3>
  212848:	e17fff17 	ldw	r5,-4(fp)
  21284c:	1009883a 	mov	r4,r2
  212850:	020179c0 	call	20179c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  212854:	10bfffc4 	addi	r2,r2,-1
  212858:	103ffe1e 	bne	r2,zero,212854 <_gp+0xffe00c70>
  21285c:	00000d06 	br	212894 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  212860:	014003f4 	movhi	r5,15
  212864:	29509004 	addi	r5,r5,16960
  212868:	e13ffd17 	ldw	r4,-12(fp)
  21286c:	020179c0 	call	20179c <__mulsi3>
  212870:	100b883a 	mov	r5,r2
  212874:	0100bef4 	movhi	r4,763
  212878:	213c2004 	addi	r4,r4,-3968
  21287c:	0200b4c0 	call	200b4c <__udivsi3>
  212880:	e17fff17 	ldw	r5,-4(fp)
  212884:	1009883a 	mov	r4,r2
  212888:	020179c0 	call	20179c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  21288c:	10bfffc4 	addi	r2,r2,-1
  212890:	00bffe16 	blt	zero,r2,21288c <_gp+0xffe00ca8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  212894:	0005883a 	mov	r2,zero
}
  212898:	e037883a 	mov	sp,fp
  21289c:	dfc00117 	ldw	ra,4(sp)
  2128a0:	df000017 	ldw	fp,0(sp)
  2128a4:	dec00204 	addi	sp,sp,8
  2128a8:	f800283a 	ret

002128ac <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  2128ac:	defffd04 	addi	sp,sp,-12
  2128b0:	df000215 	stw	fp,8(sp)
  2128b4:	df000204 	addi	fp,sp,8
  2128b8:	e13ffe15 	stw	r4,-8(fp)
  2128bc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2128c0:	0001883a 	nop
  2128c4:	e037883a 	mov	sp,fp
  2128c8:	df000017 	ldw	fp,0(sp)
  2128cc:	dec00104 	addi	sp,sp,4
  2128d0:	f800283a 	ret

002128d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  2128d4:	deffff04 	addi	sp,sp,-4
  2128d8:	df000015 	stw	fp,0(sp)
  2128dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2128e0:	0001883a 	nop
  2128e4:	e037883a 	mov	sp,fp
  2128e8:	df000017 	ldw	fp,0(sp)
  2128ec:	dec00104 	addi	sp,sp,4
  2128f0:	f800283a 	ret

002128f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2128f4:	defffe04 	addi	sp,sp,-8
  2128f8:	dfc00115 	stw	ra,4(sp)
  2128fc:	df000015 	stw	fp,0(sp)
  212900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  212904:	d0a00b17 	ldw	r2,-32724(gp)
  212908:	10000326 	beq	r2,zero,212918 <alt_get_errno+0x24>
  21290c:	d0a00b17 	ldw	r2,-32724(gp)
  212910:	103ee83a 	callr	r2
  212914:	00000106 	br	21291c <alt_get_errno+0x28>
  212918:	d0a01c04 	addi	r2,gp,-32656
}
  21291c:	e037883a 	mov	sp,fp
  212920:	dfc00117 	ldw	ra,4(sp)
  212924:	df000017 	ldw	fp,0(sp)
  212928:	dec00204 	addi	sp,sp,8
  21292c:	f800283a 	ret

00212930 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  212930:	defffa04 	addi	sp,sp,-24
  212934:	dfc00515 	stw	ra,20(sp)
  212938:	df000415 	stw	fp,16(sp)
  21293c:	df000404 	addi	fp,sp,16
  212940:	e13ffe15 	stw	r4,-8(fp)
  212944:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  212948:	e0bffe17 	ldw	r2,-8(fp)
  21294c:	10000326 	beq	r2,zero,21295c <alt_dev_llist_insert+0x2c>
  212950:	e0bffe17 	ldw	r2,-8(fp)
  212954:	10800217 	ldw	r2,8(r2)
  212958:	1000061e 	bne	r2,zero,212974 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  21295c:	02128f40 	call	2128f4 <alt_get_errno>
  212960:	1007883a 	mov	r3,r2
  212964:	00800584 	movi	r2,22
  212968:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  21296c:	00bffa84 	movi	r2,-22
  212970:	00001306 	br	2129c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  212974:	e0bffe17 	ldw	r2,-8(fp)
  212978:	e0ffff17 	ldw	r3,-4(fp)
  21297c:	e0fffc15 	stw	r3,-16(fp)
  212980:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  212984:	e0bffd17 	ldw	r2,-12(fp)
  212988:	e0fffc17 	ldw	r3,-16(fp)
  21298c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  212990:	e0bffc17 	ldw	r2,-16(fp)
  212994:	10c00017 	ldw	r3,0(r2)
  212998:	e0bffd17 	ldw	r2,-12(fp)
  21299c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2129a0:	e0bffc17 	ldw	r2,-16(fp)
  2129a4:	10800017 	ldw	r2,0(r2)
  2129a8:	e0fffd17 	ldw	r3,-12(fp)
  2129ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  2129b0:	e0bffc17 	ldw	r2,-16(fp)
  2129b4:	e0fffd17 	ldw	r3,-12(fp)
  2129b8:	10c00015 	stw	r3,0(r2)

  return 0;  
  2129bc:	0005883a 	mov	r2,zero
}
  2129c0:	e037883a 	mov	sp,fp
  2129c4:	dfc00117 	ldw	ra,4(sp)
  2129c8:	df000017 	ldw	fp,0(sp)
  2129cc:	dec00204 	addi	sp,sp,8
  2129d0:	f800283a 	ret

002129d4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  2129d4:	defffd04 	addi	sp,sp,-12
  2129d8:	dfc00215 	stw	ra,8(sp)
  2129dc:	df000115 	stw	fp,4(sp)
  2129e0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  2129e4:	00800874 	movhi	r2,33
  2129e8:	108f8504 	addi	r2,r2,15892
  2129ec:	e0bfff15 	stw	r2,-4(fp)
  2129f0:	00000606 	br	212a0c <_do_ctors+0x38>
        (*ctor) (); 
  2129f4:	e0bfff17 	ldw	r2,-4(fp)
  2129f8:	10800017 	ldw	r2,0(r2)
  2129fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  212a00:	e0bfff17 	ldw	r2,-4(fp)
  212a04:	10bfff04 	addi	r2,r2,-4
  212a08:	e0bfff15 	stw	r2,-4(fp)
  212a0c:	e0ffff17 	ldw	r3,-4(fp)
  212a10:	00800874 	movhi	r2,33
  212a14:	108f8604 	addi	r2,r2,15896
  212a18:	18bff62e 	bgeu	r3,r2,2129f4 <_gp+0xffe00e10>
        (*ctor) (); 
}
  212a1c:	0001883a 	nop
  212a20:	e037883a 	mov	sp,fp
  212a24:	dfc00117 	ldw	ra,4(sp)
  212a28:	df000017 	ldw	fp,0(sp)
  212a2c:	dec00204 	addi	sp,sp,8
  212a30:	f800283a 	ret

00212a34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  212a34:	defffd04 	addi	sp,sp,-12
  212a38:	dfc00215 	stw	ra,8(sp)
  212a3c:	df000115 	stw	fp,4(sp)
  212a40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  212a44:	00800874 	movhi	r2,33
  212a48:	108f8504 	addi	r2,r2,15892
  212a4c:	e0bfff15 	stw	r2,-4(fp)
  212a50:	00000606 	br	212a6c <_do_dtors+0x38>
        (*dtor) (); 
  212a54:	e0bfff17 	ldw	r2,-4(fp)
  212a58:	10800017 	ldw	r2,0(r2)
  212a5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  212a60:	e0bfff17 	ldw	r2,-4(fp)
  212a64:	10bfff04 	addi	r2,r2,-4
  212a68:	e0bfff15 	stw	r2,-4(fp)
  212a6c:	e0ffff17 	ldw	r3,-4(fp)
  212a70:	00800874 	movhi	r2,33
  212a74:	108f8604 	addi	r2,r2,15896
  212a78:	18bff62e 	bgeu	r3,r2,212a54 <_gp+0xffe00e70>
        (*dtor) (); 
}
  212a7c:	0001883a 	nop
  212a80:	e037883a 	mov	sp,fp
  212a84:	dfc00117 	ldw	ra,4(sp)
  212a88:	df000017 	ldw	fp,0(sp)
  212a8c:	dec00204 	addi	sp,sp,8
  212a90:	f800283a 	ret

00212a94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  212a94:	defffa04 	addi	sp,sp,-24
  212a98:	dfc00515 	stw	ra,20(sp)
  212a9c:	df000415 	stw	fp,16(sp)
  212aa0:	df000404 	addi	fp,sp,16
  212aa4:	e13ffe15 	stw	r4,-8(fp)
  212aa8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  212aac:	e0bfff17 	ldw	r2,-4(fp)
  212ab0:	10800017 	ldw	r2,0(r2)
  212ab4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  212ab8:	e13ffe17 	ldw	r4,-8(fp)
  212abc:	02019040 	call	201904 <strlen>
  212ac0:	10800044 	addi	r2,r2,1
  212ac4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  212ac8:	00000d06 	br	212b00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  212acc:	e0bffc17 	ldw	r2,-16(fp)
  212ad0:	10800217 	ldw	r2,8(r2)
  212ad4:	e0fffd17 	ldw	r3,-12(fp)
  212ad8:	180d883a 	mov	r6,r3
  212adc:	e17ffe17 	ldw	r5,-8(fp)
  212ae0:	1009883a 	mov	r4,r2
  212ae4:	02139680 	call	213968 <memcmp>
  212ae8:	1000021e 	bne	r2,zero,212af4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  212aec:	e0bffc17 	ldw	r2,-16(fp)
  212af0:	00000706 	br	212b10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  212af4:	e0bffc17 	ldw	r2,-16(fp)
  212af8:	10800017 	ldw	r2,0(r2)
  212afc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  212b00:	e0fffc17 	ldw	r3,-16(fp)
  212b04:	e0bfff17 	ldw	r2,-4(fp)
  212b08:	18bff01e 	bne	r3,r2,212acc <_gp+0xffe00ee8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  212b0c:	0005883a 	mov	r2,zero
}
  212b10:	e037883a 	mov	sp,fp
  212b14:	dfc00117 	ldw	ra,4(sp)
  212b18:	df000017 	ldw	fp,0(sp)
  212b1c:	dec00204 	addi	sp,sp,8
  212b20:	f800283a 	ret

00212b24 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  212b24:	defffc04 	addi	sp,sp,-16
  212b28:	dfc00315 	stw	ra,12(sp)
  212b2c:	df000215 	stw	fp,8(sp)
  212b30:	df000204 	addi	fp,sp,8
  212b34:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  212b38:	d1601104 	addi	r5,gp,-32700
  212b3c:	e13fff17 	ldw	r4,-4(fp)
  212b40:	0212a940 	call	212a94 <alt_find_dev>
  212b44:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  212b48:	e0bffe17 	ldw	r2,-8(fp)
  212b4c:	10000926 	beq	r2,zero,212b74 <alt_flash_open_dev+0x50>
  212b50:	e0bffe17 	ldw	r2,-8(fp)
  212b54:	10800317 	ldw	r2,12(r2)
  212b58:	10000626 	beq	r2,zero,212b74 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  212b5c:	e0bffe17 	ldw	r2,-8(fp)
  212b60:	10800317 	ldw	r2,12(r2)
  212b64:	e17fff17 	ldw	r5,-4(fp)
  212b68:	e13ffe17 	ldw	r4,-8(fp)
  212b6c:	103ee83a 	callr	r2
  212b70:	00000106 	br	212b78 <alt_flash_open_dev+0x54>
  }

  return dev;
  212b74:	e0bffe17 	ldw	r2,-8(fp)
}
  212b78:	e037883a 	mov	sp,fp
  212b7c:	dfc00117 	ldw	ra,4(sp)
  212b80:	df000017 	ldw	fp,0(sp)
  212b84:	dec00204 	addi	sp,sp,8
  212b88:	f800283a 	ret

00212b8c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  212b8c:	defffd04 	addi	sp,sp,-12
  212b90:	dfc00215 	stw	ra,8(sp)
  212b94:	df000115 	stw	fp,4(sp)
  212b98:	df000104 	addi	fp,sp,4
  212b9c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  212ba0:	e0bfff17 	ldw	r2,-4(fp)
  212ba4:	10000826 	beq	r2,zero,212bc8 <alt_flash_close_dev+0x3c>
  212ba8:	e0bfff17 	ldw	r2,-4(fp)
  212bac:	10800417 	ldw	r2,16(r2)
  212bb0:	10000526 	beq	r2,zero,212bc8 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  212bb4:	e0bfff17 	ldw	r2,-4(fp)
  212bb8:	10800417 	ldw	r2,16(r2)
  212bbc:	e13fff17 	ldw	r4,-4(fp)
  212bc0:	103ee83a 	callr	r2
  }
  return;
  212bc4:	0001883a 	nop
  212bc8:	0001883a 	nop
}
  212bcc:	e037883a 	mov	sp,fp
  212bd0:	dfc00117 	ldw	ra,4(sp)
  212bd4:	df000017 	ldw	fp,0(sp)
  212bd8:	dec00204 	addi	sp,sp,8
  212bdc:	f800283a 	ret

00212be0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  212be0:	deffff04 	addi	sp,sp,-4
  212be4:	df000015 	stw	fp,0(sp)
  212be8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  212bec:	0001883a 	nop
  212bf0:	e037883a 	mov	sp,fp
  212bf4:	df000017 	ldw	fp,0(sp)
  212bf8:	dec00104 	addi	sp,sp,4
  212bfc:	f800283a 	ret

00212c00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  212c00:	defff904 	addi	sp,sp,-28
  212c04:	dfc00615 	stw	ra,24(sp)
  212c08:	df000515 	stw	fp,20(sp)
  212c0c:	df000504 	addi	fp,sp,20
  212c10:	e13ffc15 	stw	r4,-16(fp)
  212c14:	e17ffd15 	stw	r5,-12(fp)
  212c18:	e1bffe15 	stw	r6,-8(fp)
  212c1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  212c20:	e0800217 	ldw	r2,8(fp)
  212c24:	d8800015 	stw	r2,0(sp)
  212c28:	e1ffff17 	ldw	r7,-4(fp)
  212c2c:	e1bffe17 	ldw	r6,-8(fp)
  212c30:	e17ffd17 	ldw	r5,-12(fp)
  212c34:	e13ffc17 	ldw	r4,-16(fp)
  212c38:	0212db00 	call	212db0 <alt_iic_isr_register>
}  
  212c3c:	e037883a 	mov	sp,fp
  212c40:	dfc00117 	ldw	ra,4(sp)
  212c44:	df000017 	ldw	fp,0(sp)
  212c48:	dec00204 	addi	sp,sp,8
  212c4c:	f800283a 	ret

00212c50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  212c50:	defff904 	addi	sp,sp,-28
  212c54:	df000615 	stw	fp,24(sp)
  212c58:	df000604 	addi	fp,sp,24
  212c5c:	e13ffe15 	stw	r4,-8(fp)
  212c60:	e17fff15 	stw	r5,-4(fp)
  212c64:	e0bfff17 	ldw	r2,-4(fp)
  212c68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212c6c:	0005303a 	rdctl	r2,status
  212c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212c74:	e0fffb17 	ldw	r3,-20(fp)
  212c78:	00bfff84 	movi	r2,-2
  212c7c:	1884703a 	and	r2,r3,r2
  212c80:	1001703a 	wrctl	status,r2
  
  return context;
  212c84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  212c88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  212c8c:	00c00044 	movi	r3,1
  212c90:	e0bffa17 	ldw	r2,-24(fp)
  212c94:	1884983a 	sll	r2,r3,r2
  212c98:	1007883a 	mov	r3,r2
  212c9c:	d0a02017 	ldw	r2,-32640(gp)
  212ca0:	1884b03a 	or	r2,r3,r2
  212ca4:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  212ca8:	d0a02017 	ldw	r2,-32640(gp)
  212cac:	100170fa 	wrctl	ienable,r2
  212cb0:	e0bffc17 	ldw	r2,-16(fp)
  212cb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212cb8:	e0bffd17 	ldw	r2,-12(fp)
  212cbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  212cc0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  212cc4:	0001883a 	nop
}
  212cc8:	e037883a 	mov	sp,fp
  212ccc:	df000017 	ldw	fp,0(sp)
  212cd0:	dec00104 	addi	sp,sp,4
  212cd4:	f800283a 	ret

00212cd8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  212cd8:	defff904 	addi	sp,sp,-28
  212cdc:	df000615 	stw	fp,24(sp)
  212ce0:	df000604 	addi	fp,sp,24
  212ce4:	e13ffe15 	stw	r4,-8(fp)
  212ce8:	e17fff15 	stw	r5,-4(fp)
  212cec:	e0bfff17 	ldw	r2,-4(fp)
  212cf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212cf4:	0005303a 	rdctl	r2,status
  212cf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212cfc:	e0fffb17 	ldw	r3,-20(fp)
  212d00:	00bfff84 	movi	r2,-2
  212d04:	1884703a 	and	r2,r3,r2
  212d08:	1001703a 	wrctl	status,r2
  
  return context;
  212d0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  212d10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  212d14:	00c00044 	movi	r3,1
  212d18:	e0bffa17 	ldw	r2,-24(fp)
  212d1c:	1884983a 	sll	r2,r3,r2
  212d20:	0084303a 	nor	r2,zero,r2
  212d24:	1007883a 	mov	r3,r2
  212d28:	d0a02017 	ldw	r2,-32640(gp)
  212d2c:	1884703a 	and	r2,r3,r2
  212d30:	d0a02015 	stw	r2,-32640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  212d34:	d0a02017 	ldw	r2,-32640(gp)
  212d38:	100170fa 	wrctl	ienable,r2
  212d3c:	e0bffc17 	ldw	r2,-16(fp)
  212d40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212d44:	e0bffd17 	ldw	r2,-12(fp)
  212d48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  212d4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  212d50:	0001883a 	nop
}
  212d54:	e037883a 	mov	sp,fp
  212d58:	df000017 	ldw	fp,0(sp)
  212d5c:	dec00104 	addi	sp,sp,4
  212d60:	f800283a 	ret

00212d64 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  212d64:	defffc04 	addi	sp,sp,-16
  212d68:	df000315 	stw	fp,12(sp)
  212d6c:	df000304 	addi	fp,sp,12
  212d70:	e13ffe15 	stw	r4,-8(fp)
  212d74:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  212d78:	000530fa 	rdctl	r2,ienable
  212d7c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  212d80:	00c00044 	movi	r3,1
  212d84:	e0bfff17 	ldw	r2,-4(fp)
  212d88:	1884983a 	sll	r2,r3,r2
  212d8c:	1007883a 	mov	r3,r2
  212d90:	e0bffd17 	ldw	r2,-12(fp)
  212d94:	1884703a 	and	r2,r3,r2
  212d98:	1004c03a 	cmpne	r2,r2,zero
  212d9c:	10803fcc 	andi	r2,r2,255
}
  212da0:	e037883a 	mov	sp,fp
  212da4:	df000017 	ldw	fp,0(sp)
  212da8:	dec00104 	addi	sp,sp,4
  212dac:	f800283a 	ret

00212db0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  212db0:	defff504 	addi	sp,sp,-44
  212db4:	dfc00a15 	stw	ra,40(sp)
  212db8:	df000915 	stw	fp,36(sp)
  212dbc:	df000904 	addi	fp,sp,36
  212dc0:	e13ffc15 	stw	r4,-16(fp)
  212dc4:	e17ffd15 	stw	r5,-12(fp)
  212dc8:	e1bffe15 	stw	r6,-8(fp)
  212dcc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  212dd0:	00bffa84 	movi	r2,-22
  212dd4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  212dd8:	e0bffd17 	ldw	r2,-12(fp)
  212ddc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  212de0:	e0bff817 	ldw	r2,-32(fp)
  212de4:	10800808 	cmpgei	r2,r2,32
  212de8:	1000271e 	bne	r2,zero,212e88 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  212dec:	0005303a 	rdctl	r2,status
  212df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  212df4:	e0fffb17 	ldw	r3,-20(fp)
  212df8:	00bfff84 	movi	r2,-2
  212dfc:	1884703a 	and	r2,r3,r2
  212e00:	1001703a 	wrctl	status,r2
  
  return context;
  212e04:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  212e08:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  212e0c:	00801074 	movhi	r2,65
  212e10:	10a72704 	addi	r2,r2,-25444
  212e14:	e0fff817 	ldw	r3,-32(fp)
  212e18:	180690fa 	slli	r3,r3,3
  212e1c:	10c5883a 	add	r2,r2,r3
  212e20:	e0fffe17 	ldw	r3,-8(fp)
  212e24:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  212e28:	00801074 	movhi	r2,65
  212e2c:	10a72704 	addi	r2,r2,-25444
  212e30:	e0fff817 	ldw	r3,-32(fp)
  212e34:	180690fa 	slli	r3,r3,3
  212e38:	10c5883a 	add	r2,r2,r3
  212e3c:	10800104 	addi	r2,r2,4
  212e40:	e0ffff17 	ldw	r3,-4(fp)
  212e44:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  212e48:	e0bffe17 	ldw	r2,-8(fp)
  212e4c:	10000526 	beq	r2,zero,212e64 <alt_iic_isr_register+0xb4>
  212e50:	e0bff817 	ldw	r2,-32(fp)
  212e54:	100b883a 	mov	r5,r2
  212e58:	e13ffc17 	ldw	r4,-16(fp)
  212e5c:	0212c500 	call	212c50 <alt_ic_irq_enable>
  212e60:	00000406 	br	212e74 <alt_iic_isr_register+0xc4>
  212e64:	e0bff817 	ldw	r2,-32(fp)
  212e68:	100b883a 	mov	r5,r2
  212e6c:	e13ffc17 	ldw	r4,-16(fp)
  212e70:	0212cd80 	call	212cd8 <alt_ic_irq_disable>
  212e74:	e0bff715 	stw	r2,-36(fp)
  212e78:	e0bffa17 	ldw	r2,-24(fp)
  212e7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  212e80:	e0bff917 	ldw	r2,-28(fp)
  212e84:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  212e88:	e0bff717 	ldw	r2,-36(fp)
}
  212e8c:	e037883a 	mov	sp,fp
  212e90:	dfc00117 	ldw	ra,4(sp)
  212e94:	df000017 	ldw	fp,0(sp)
  212e98:	dec00204 	addi	sp,sp,8
  212e9c:	f800283a 	ret

00212ea0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  212ea0:	defff804 	addi	sp,sp,-32
  212ea4:	dfc00715 	stw	ra,28(sp)
  212ea8:	df000615 	stw	fp,24(sp)
  212eac:	dc000515 	stw	r16,20(sp)
  212eb0:	df000604 	addi	fp,sp,24
  212eb4:	e13ffb15 	stw	r4,-20(fp)
  212eb8:	e17ffc15 	stw	r5,-16(fp)
  212ebc:	e1bffd15 	stw	r6,-12(fp)
  212ec0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  212ec4:	e1bffe17 	ldw	r6,-8(fp)
  212ec8:	e17ffd17 	ldw	r5,-12(fp)
  212ecc:	e13ffc17 	ldw	r4,-16(fp)
  212ed0:	02131280 	call	213128 <open>
  212ed4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  212ed8:	e0bffa17 	ldw	r2,-24(fp)
  212edc:	10002216 	blt	r2,zero,212f68 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  212ee0:	04001074 	movhi	r16,65
  212ee4:	84223304 	addi	r16,r16,-30516
  212ee8:	e0bffa17 	ldw	r2,-24(fp)
  212eec:	01400304 	movi	r5,12
  212ef0:	1009883a 	mov	r4,r2
  212ef4:	020179c0 	call	20179c <__mulsi3>
  212ef8:	8085883a 	add	r2,r16,r2
  212efc:	10c00017 	ldw	r3,0(r2)
  212f00:	e0bffb17 	ldw	r2,-20(fp)
  212f04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  212f08:	04001074 	movhi	r16,65
  212f0c:	84223304 	addi	r16,r16,-30516
  212f10:	e0bffa17 	ldw	r2,-24(fp)
  212f14:	01400304 	movi	r5,12
  212f18:	1009883a 	mov	r4,r2
  212f1c:	020179c0 	call	20179c <__mulsi3>
  212f20:	8085883a 	add	r2,r16,r2
  212f24:	10800104 	addi	r2,r2,4
  212f28:	10c00017 	ldw	r3,0(r2)
  212f2c:	e0bffb17 	ldw	r2,-20(fp)
  212f30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  212f34:	04001074 	movhi	r16,65
  212f38:	84223304 	addi	r16,r16,-30516
  212f3c:	e0bffa17 	ldw	r2,-24(fp)
  212f40:	01400304 	movi	r5,12
  212f44:	1009883a 	mov	r4,r2
  212f48:	020179c0 	call	20179c <__mulsi3>
  212f4c:	8085883a 	add	r2,r16,r2
  212f50:	10800204 	addi	r2,r2,8
  212f54:	10c00017 	ldw	r3,0(r2)
  212f58:	e0bffb17 	ldw	r2,-20(fp)
  212f5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  212f60:	e13ffa17 	ldw	r4,-24(fp)
  212f64:	020ebe80 	call	20ebe8 <alt_release_fd>
  }
} 
  212f68:	0001883a 	nop
  212f6c:	e6ffff04 	addi	sp,fp,-4
  212f70:	dfc00217 	ldw	ra,8(sp)
  212f74:	df000117 	ldw	fp,4(sp)
  212f78:	dc000017 	ldw	r16,0(sp)
  212f7c:	dec00304 	addi	sp,sp,12
  212f80:	f800283a 	ret

00212f84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  212f84:	defffb04 	addi	sp,sp,-20
  212f88:	dfc00415 	stw	ra,16(sp)
  212f8c:	df000315 	stw	fp,12(sp)
  212f90:	df000304 	addi	fp,sp,12
  212f94:	e13ffd15 	stw	r4,-12(fp)
  212f98:	e17ffe15 	stw	r5,-8(fp)
  212f9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  212fa0:	01c07fc4 	movi	r7,511
  212fa4:	01800044 	movi	r6,1
  212fa8:	e17ffd17 	ldw	r5,-12(fp)
  212fac:	01001074 	movhi	r4,65
  212fb0:	21223604 	addi	r4,r4,-30504
  212fb4:	0212ea00 	call	212ea0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  212fb8:	01c07fc4 	movi	r7,511
  212fbc:	000d883a 	mov	r6,zero
  212fc0:	e17ffe17 	ldw	r5,-8(fp)
  212fc4:	01001074 	movhi	r4,65
  212fc8:	21223304 	addi	r4,r4,-30516
  212fcc:	0212ea00 	call	212ea0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  212fd0:	01c07fc4 	movi	r7,511
  212fd4:	01800044 	movi	r6,1
  212fd8:	e17fff17 	ldw	r5,-4(fp)
  212fdc:	01001074 	movhi	r4,65
  212fe0:	21223904 	addi	r4,r4,-30492
  212fe4:	0212ea00 	call	212ea0 <alt_open_fd>
}  
  212fe8:	0001883a 	nop
  212fec:	e037883a 	mov	sp,fp
  212ff0:	dfc00117 	ldw	ra,4(sp)
  212ff4:	df000017 	ldw	fp,0(sp)
  212ff8:	dec00204 	addi	sp,sp,8
  212ffc:	f800283a 	ret

00213000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  213000:	defffe04 	addi	sp,sp,-8
  213004:	dfc00115 	stw	ra,4(sp)
  213008:	df000015 	stw	fp,0(sp)
  21300c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  213010:	d0a00b17 	ldw	r2,-32724(gp)
  213014:	10000326 	beq	r2,zero,213024 <alt_get_errno+0x24>
  213018:	d0a00b17 	ldw	r2,-32724(gp)
  21301c:	103ee83a 	callr	r2
  213020:	00000106 	br	213028 <alt_get_errno+0x28>
  213024:	d0a01c04 	addi	r2,gp,-32656
}
  213028:	e037883a 	mov	sp,fp
  21302c:	dfc00117 	ldw	ra,4(sp)
  213030:	df000017 	ldw	fp,0(sp)
  213034:	dec00204 	addi	sp,sp,8
  213038:	f800283a 	ret

0021303c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  21303c:	defffb04 	addi	sp,sp,-20
  213040:	dfc00415 	stw	ra,16(sp)
  213044:	df000315 	stw	fp,12(sp)
  213048:	dc000215 	stw	r16,8(sp)
  21304c:	df000304 	addi	fp,sp,12
  213050:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  213054:	e0bffe17 	ldw	r2,-8(fp)
  213058:	10800217 	ldw	r2,8(r2)
  21305c:	10d00034 	orhi	r3,r2,16384
  213060:	e0bffe17 	ldw	r2,-8(fp)
  213064:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  213068:	e03ffd15 	stw	zero,-12(fp)
  21306c:	00002306 	br	2130fc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  213070:	04001074 	movhi	r16,65
  213074:	84223304 	addi	r16,r16,-30516
  213078:	e0bffd17 	ldw	r2,-12(fp)
  21307c:	01400304 	movi	r5,12
  213080:	1009883a 	mov	r4,r2
  213084:	020179c0 	call	20179c <__mulsi3>
  213088:	8085883a 	add	r2,r16,r2
  21308c:	10c00017 	ldw	r3,0(r2)
  213090:	e0bffe17 	ldw	r2,-8(fp)
  213094:	10800017 	ldw	r2,0(r2)
  213098:	1880151e 	bne	r3,r2,2130f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  21309c:	04001074 	movhi	r16,65
  2130a0:	84223304 	addi	r16,r16,-30516
  2130a4:	e0bffd17 	ldw	r2,-12(fp)
  2130a8:	01400304 	movi	r5,12
  2130ac:	1009883a 	mov	r4,r2
  2130b0:	020179c0 	call	20179c <__mulsi3>
  2130b4:	8085883a 	add	r2,r16,r2
  2130b8:	10800204 	addi	r2,r2,8
  2130bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  2130c0:	10000b0e 	bge	r2,zero,2130f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  2130c4:	01400304 	movi	r5,12
  2130c8:	e13ffd17 	ldw	r4,-12(fp)
  2130cc:	020179c0 	call	20179c <__mulsi3>
  2130d0:	1007883a 	mov	r3,r2
  2130d4:	00801074 	movhi	r2,65
  2130d8:	10a23304 	addi	r2,r2,-30516
  2130dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  2130e0:	e0bffe17 	ldw	r2,-8(fp)
  2130e4:	18800226 	beq	r3,r2,2130f0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  2130e8:	00bffcc4 	movi	r2,-13
  2130ec:	00000806 	br	213110 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  2130f0:	e0bffd17 	ldw	r2,-12(fp)
  2130f4:	10800044 	addi	r2,r2,1
  2130f8:	e0bffd15 	stw	r2,-12(fp)
  2130fc:	d0a00a17 	ldw	r2,-32728(gp)
  213100:	1007883a 	mov	r3,r2
  213104:	e0bffd17 	ldw	r2,-12(fp)
  213108:	18bfd92e 	bgeu	r3,r2,213070 <_gp+0xffe0148c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  21310c:	0005883a 	mov	r2,zero
}
  213110:	e6ffff04 	addi	sp,fp,-4
  213114:	dfc00217 	ldw	ra,8(sp)
  213118:	df000117 	ldw	fp,4(sp)
  21311c:	dc000017 	ldw	r16,0(sp)
  213120:	dec00304 	addi	sp,sp,12
  213124:	f800283a 	ret

00213128 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  213128:	defff604 	addi	sp,sp,-40
  21312c:	dfc00915 	stw	ra,36(sp)
  213130:	df000815 	stw	fp,32(sp)
  213134:	df000804 	addi	fp,sp,32
  213138:	e13ffd15 	stw	r4,-12(fp)
  21313c:	e17ffe15 	stw	r5,-8(fp)
  213140:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  213144:	00bfffc4 	movi	r2,-1
  213148:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  21314c:	00bffb44 	movi	r2,-19
  213150:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  213154:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  213158:	d1600804 	addi	r5,gp,-32736
  21315c:	e13ffd17 	ldw	r4,-12(fp)
  213160:	0212a940 	call	212a94 <alt_find_dev>
  213164:	e0bff815 	stw	r2,-32(fp)
  213168:	e0bff817 	ldw	r2,-32(fp)
  21316c:	1000051e 	bne	r2,zero,213184 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  213170:	e13ffd17 	ldw	r4,-12(fp)
  213174:	02136b40 	call	2136b4 <alt_find_file>
  213178:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  21317c:	00800044 	movi	r2,1
  213180:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  213184:	e0bff817 	ldw	r2,-32(fp)
  213188:	10002b26 	beq	r2,zero,213238 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  21318c:	e13ff817 	ldw	r4,-32(fp)
  213190:	02137bc0 	call	2137bc <alt_get_fd>
  213194:	e0bff915 	stw	r2,-28(fp)
  213198:	e0bff917 	ldw	r2,-28(fp)
  21319c:	1000030e 	bge	r2,zero,2131ac <open+0x84>
    {
      status = index;
  2131a0:	e0bff917 	ldw	r2,-28(fp)
  2131a4:	e0bffa15 	stw	r2,-24(fp)
  2131a8:	00002506 	br	213240 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  2131ac:	01400304 	movi	r5,12
  2131b0:	e13ff917 	ldw	r4,-28(fp)
  2131b4:	020179c0 	call	20179c <__mulsi3>
  2131b8:	1007883a 	mov	r3,r2
  2131bc:	00801074 	movhi	r2,65
  2131c0:	10a23304 	addi	r2,r2,-30516
  2131c4:	1885883a 	add	r2,r3,r2
  2131c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  2131cc:	e0fffe17 	ldw	r3,-8(fp)
  2131d0:	00900034 	movhi	r2,16384
  2131d4:	10bfffc4 	addi	r2,r2,-1
  2131d8:	1886703a 	and	r3,r3,r2
  2131dc:	e0bffc17 	ldw	r2,-16(fp)
  2131e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  2131e4:	e0bffb17 	ldw	r2,-20(fp)
  2131e8:	1000051e 	bne	r2,zero,213200 <open+0xd8>
  2131ec:	e13ffc17 	ldw	r4,-16(fp)
  2131f0:	021303c0 	call	21303c <alt_file_locked>
  2131f4:	e0bffa15 	stw	r2,-24(fp)
  2131f8:	e0bffa17 	ldw	r2,-24(fp)
  2131fc:	10001016 	blt	r2,zero,213240 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  213200:	e0bff817 	ldw	r2,-32(fp)
  213204:	10800317 	ldw	r2,12(r2)
  213208:	10000826 	beq	r2,zero,21322c <open+0x104>
  21320c:	e0bff817 	ldw	r2,-32(fp)
  213210:	10800317 	ldw	r2,12(r2)
  213214:	e1ffff17 	ldw	r7,-4(fp)
  213218:	e1bffe17 	ldw	r6,-8(fp)
  21321c:	e17ffd17 	ldw	r5,-12(fp)
  213220:	e13ffc17 	ldw	r4,-16(fp)
  213224:	103ee83a 	callr	r2
  213228:	00000106 	br	213230 <open+0x108>
  21322c:	0005883a 	mov	r2,zero
  213230:	e0bffa15 	stw	r2,-24(fp)
  213234:	00000206 	br	213240 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  213238:	00bffb44 	movi	r2,-19
  21323c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  213240:	e0bffa17 	ldw	r2,-24(fp)
  213244:	1000090e 	bge	r2,zero,21326c <open+0x144>
  {
    alt_release_fd (index);  
  213248:	e13ff917 	ldw	r4,-28(fp)
  21324c:	020ebe80 	call	20ebe8 <alt_release_fd>
    ALT_ERRNO = -status;
  213250:	02130000 	call	213000 <alt_get_errno>
  213254:	1007883a 	mov	r3,r2
  213258:	e0bffa17 	ldw	r2,-24(fp)
  21325c:	0085c83a 	sub	r2,zero,r2
  213260:	18800015 	stw	r2,0(r3)
    return -1;
  213264:	00bfffc4 	movi	r2,-1
  213268:	00000106 	br	213270 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  21326c:	e0bff917 	ldw	r2,-28(fp)
}
  213270:	e037883a 	mov	sp,fp
  213274:	dfc00117 	ldw	ra,4(sp)
  213278:	df000017 	ldw	fp,0(sp)
  21327c:	dec00204 	addi	sp,sp,8
  213280:	f800283a 	ret

00213284 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  213284:	defff204 	addi	sp,sp,-56
  213288:	dfc00a15 	stw	ra,40(sp)
  21328c:	df000915 	stw	fp,36(sp)
  213290:	df000904 	addi	fp,sp,36
  213294:	e13fff15 	stw	r4,-4(fp)
  213298:	e1400215 	stw	r5,8(fp)
  21329c:	e1800315 	stw	r6,12(fp)
  2132a0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  2132a4:	e0800204 	addi	r2,fp,8
  2132a8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  2132ac:	e0bfff17 	ldw	r2,-4(fp)
  2132b0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  2132b4:	00006f06 	br	213474 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  2132b8:	e0bff807 	ldb	r2,-32(fp)
  2132bc:	10800960 	cmpeqi	r2,r2,37
  2132c0:	1000041e 	bne	r2,zero,2132d4 <alt_printf+0x50>
        {
            alt_putchar(c);
  2132c4:	e0bff807 	ldb	r2,-32(fp)
  2132c8:	1009883a 	mov	r4,r2
  2132cc:	02134b00 	call	2134b0 <alt_putchar>
  2132d0:	00006806 	br	213474 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  2132d4:	e0bff717 	ldw	r2,-36(fp)
  2132d8:	10c00044 	addi	r3,r2,1
  2132dc:	e0fff715 	stw	r3,-36(fp)
  2132e0:	10800003 	ldbu	r2,0(r2)
  2132e4:	e0bff805 	stb	r2,-32(fp)
  2132e8:	e0bff807 	ldb	r2,-32(fp)
  2132ec:	10006926 	beq	r2,zero,213494 <alt_printf+0x210>
            {
                if (c == '%')
  2132f0:	e0bff807 	ldb	r2,-32(fp)
  2132f4:	10800958 	cmpnei	r2,r2,37
  2132f8:	1000041e 	bne	r2,zero,21330c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  2132fc:	e0bff807 	ldb	r2,-32(fp)
  213300:	1009883a 	mov	r4,r2
  213304:	02134b00 	call	2134b0 <alt_putchar>
  213308:	00005a06 	br	213474 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  21330c:	e0bff807 	ldb	r2,-32(fp)
  213310:	108018d8 	cmpnei	r2,r2,99
  213314:	1000081e 	bne	r2,zero,213338 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  213318:	e0bffe17 	ldw	r2,-8(fp)
  21331c:	10c00104 	addi	r3,r2,4
  213320:	e0fffe15 	stw	r3,-8(fp)
  213324:	10800017 	ldw	r2,0(r2)
  213328:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  21332c:	e13ffd17 	ldw	r4,-12(fp)
  213330:	02134b00 	call	2134b0 <alt_putchar>
  213334:	00004f06 	br	213474 <alt_printf+0x1f0>
                }
                else if (c == 'x')
  213338:	e0bff807 	ldb	r2,-32(fp)
  21333c:	10801e18 	cmpnei	r2,r2,120
  213340:	1000341e 	bne	r2,zero,213414 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  213344:	e0bffe17 	ldw	r2,-8(fp)
  213348:	10c00104 	addi	r3,r2,4
  21334c:	e0fffe15 	stw	r3,-8(fp)
  213350:	10800017 	ldw	r2,0(r2)
  213354:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  213358:	e0bffb17 	ldw	r2,-20(fp)
  21335c:	1000031e 	bne	r2,zero,21336c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  213360:	01000c04 	movi	r4,48
  213364:	02134b00 	call	2134b0 <alt_putchar>
                        continue;
  213368:	00004206 	br	213474 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  21336c:	00800704 	movi	r2,28
  213370:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  213374:	00000306 	br	213384 <alt_printf+0x100>
                        digit_shift -= 4;
  213378:	e0bff917 	ldw	r2,-28(fp)
  21337c:	10bfff04 	addi	r2,r2,-4
  213380:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  213384:	00c003c4 	movi	r3,15
  213388:	e0bff917 	ldw	r2,-28(fp)
  21338c:	1884983a 	sll	r2,r3,r2
  213390:	1007883a 	mov	r3,r2
  213394:	e0bffb17 	ldw	r2,-20(fp)
  213398:	1884703a 	and	r2,r3,r2
  21339c:	103ff626 	beq	r2,zero,213378 <_gp+0xffe01794>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  2133a0:	00001906 	br	213408 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  2133a4:	00c003c4 	movi	r3,15
  2133a8:	e0bff917 	ldw	r2,-28(fp)
  2133ac:	1884983a 	sll	r2,r3,r2
  2133b0:	1007883a 	mov	r3,r2
  2133b4:	e0bffb17 	ldw	r2,-20(fp)
  2133b8:	1886703a 	and	r3,r3,r2
  2133bc:	e0bff917 	ldw	r2,-28(fp)
  2133c0:	1884d83a 	srl	r2,r3,r2
  2133c4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  2133c8:	e0bffc17 	ldw	r2,-16(fp)
  2133cc:	108002a8 	cmpgeui	r2,r2,10
  2133d0:	1000041e 	bne	r2,zero,2133e4 <alt_printf+0x160>
                            c = '0' + digit;
  2133d4:	e0bffc17 	ldw	r2,-16(fp)
  2133d8:	10800c04 	addi	r2,r2,48
  2133dc:	e0bff805 	stb	r2,-32(fp)
  2133e0:	00000306 	br	2133f0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  2133e4:	e0bffc17 	ldw	r2,-16(fp)
  2133e8:	108015c4 	addi	r2,r2,87
  2133ec:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  2133f0:	e0bff807 	ldb	r2,-32(fp)
  2133f4:	1009883a 	mov	r4,r2
  2133f8:	02134b00 	call	2134b0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  2133fc:	e0bff917 	ldw	r2,-28(fp)
  213400:	10bfff04 	addi	r2,r2,-4
  213404:	e0bff915 	stw	r2,-28(fp)
  213408:	e0bff917 	ldw	r2,-28(fp)
  21340c:	103fe50e 	bge	r2,zero,2133a4 <_gp+0xffe017c0>
  213410:	00001806 	br	213474 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  213414:	e0bff807 	ldb	r2,-32(fp)
  213418:	10801cd8 	cmpnei	r2,r2,115
  21341c:	1000151e 	bne	r2,zero,213474 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  213420:	e0bffe17 	ldw	r2,-8(fp)
  213424:	10c00104 	addi	r3,r2,4
  213428:	e0fffe15 	stw	r3,-8(fp)
  21342c:	10800017 	ldw	r2,0(r2)
  213430:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  213434:	00000906 	br	21345c <alt_printf+0x1d8>
                      alt_putchar(*s++);
  213438:	e0bffa17 	ldw	r2,-24(fp)
  21343c:	10c00044 	addi	r3,r2,1
  213440:	e0fffa15 	stw	r3,-24(fp)
  213444:	10800003 	ldbu	r2,0(r2)
  213448:	10803fcc 	andi	r2,r2,255
  21344c:	1080201c 	xori	r2,r2,128
  213450:	10bfe004 	addi	r2,r2,-128
  213454:	1009883a 	mov	r4,r2
  213458:	02134b00 	call	2134b0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  21345c:	e0bffa17 	ldw	r2,-24(fp)
  213460:	10800003 	ldbu	r2,0(r2)
  213464:	10803fcc 	andi	r2,r2,255
  213468:	1080201c 	xori	r2,r2,128
  21346c:	10bfe004 	addi	r2,r2,-128
  213470:	103ff11e 	bne	r2,zero,213438 <_gp+0xffe01854>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  213474:	e0bff717 	ldw	r2,-36(fp)
  213478:	10c00044 	addi	r3,r2,1
  21347c:	e0fff715 	stw	r3,-36(fp)
  213480:	10800003 	ldbu	r2,0(r2)
  213484:	e0bff805 	stb	r2,-32(fp)
  213488:	e0bff807 	ldb	r2,-32(fp)
  21348c:	103f8a1e 	bne	r2,zero,2132b8 <_gp+0xffe016d4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  213490:	00000106 	br	213498 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  213494:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  213498:	0001883a 	nop
  21349c:	e037883a 	mov	sp,fp
  2134a0:	dfc00117 	ldw	ra,4(sp)
  2134a4:	df000017 	ldw	fp,0(sp)
  2134a8:	dec00504 	addi	sp,sp,20
  2134ac:	f800283a 	ret

002134b0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  2134b0:	defffd04 	addi	sp,sp,-12
  2134b4:	dfc00215 	stw	ra,8(sp)
  2134b8:	df000115 	stw	fp,4(sp)
  2134bc:	df000104 	addi	fp,sp,4
  2134c0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  2134c4:	d0a00117 	ldw	r2,-32764(gp)
  2134c8:	10800217 	ldw	r2,8(r2)
  2134cc:	100b883a 	mov	r5,r2
  2134d0:	e13fff17 	ldw	r4,-4(fp)
  2134d4:	0213a840 	call	213a84 <putc>
#endif
#endif
}
  2134d8:	e037883a 	mov	sp,fp
  2134dc:	dfc00117 	ldw	ra,4(sp)
  2134e0:	df000017 	ldw	fp,0(sp)
  2134e4:	dec00204 	addi	sp,sp,8
  2134e8:	f800283a 	ret

002134ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  2134ec:	defffa04 	addi	sp,sp,-24
  2134f0:	df000515 	stw	fp,20(sp)
  2134f4:	df000504 	addi	fp,sp,20
  2134f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2134fc:	0005303a 	rdctl	r2,status
  213500:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213504:	e0fffc17 	ldw	r3,-16(fp)
  213508:	00bfff84 	movi	r2,-2
  21350c:	1884703a 	and	r2,r3,r2
  213510:	1001703a 	wrctl	status,r2
  
  return context;
  213514:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  213518:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  21351c:	e0bfff17 	ldw	r2,-4(fp)
  213520:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  213524:	e0bffd17 	ldw	r2,-12(fp)
  213528:	10800017 	ldw	r2,0(r2)
  21352c:	e0fffd17 	ldw	r3,-12(fp)
  213530:	18c00117 	ldw	r3,4(r3)
  213534:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  213538:	e0bffd17 	ldw	r2,-12(fp)
  21353c:	10800117 	ldw	r2,4(r2)
  213540:	e0fffd17 	ldw	r3,-12(fp)
  213544:	18c00017 	ldw	r3,0(r3)
  213548:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  21354c:	e0bffd17 	ldw	r2,-12(fp)
  213550:	e0fffd17 	ldw	r3,-12(fp)
  213554:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  213558:	e0bffd17 	ldw	r2,-12(fp)
  21355c:	e0fffd17 	ldw	r3,-12(fp)
  213560:	10c00015 	stw	r3,0(r2)
  213564:	e0bffb17 	ldw	r2,-20(fp)
  213568:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  21356c:	e0bffe17 	ldw	r2,-8(fp)
  213570:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  213574:	0001883a 	nop
  213578:	e037883a 	mov	sp,fp
  21357c:	df000017 	ldw	fp,0(sp)
  213580:	dec00104 	addi	sp,sp,4
  213584:	f800283a 	ret

00213588 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  213588:	defffb04 	addi	sp,sp,-20
  21358c:	dfc00415 	stw	ra,16(sp)
  213590:	df000315 	stw	fp,12(sp)
  213594:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  213598:	d0a01417 	ldw	r2,-32688(gp)
  21359c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  2135a0:	d0a02217 	ldw	r2,-32632(gp)
  2135a4:	10800044 	addi	r2,r2,1
  2135a8:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  2135ac:	00002e06 	br	213668 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  2135b0:	e0bffd17 	ldw	r2,-12(fp)
  2135b4:	10800017 	ldw	r2,0(r2)
  2135b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  2135bc:	e0bffd17 	ldw	r2,-12(fp)
  2135c0:	10800403 	ldbu	r2,16(r2)
  2135c4:	10803fcc 	andi	r2,r2,255
  2135c8:	10000426 	beq	r2,zero,2135dc <alt_tick+0x54>
  2135cc:	d0a02217 	ldw	r2,-32632(gp)
  2135d0:	1000021e 	bne	r2,zero,2135dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  2135d4:	e0bffd17 	ldw	r2,-12(fp)
  2135d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  2135dc:	e0bffd17 	ldw	r2,-12(fp)
  2135e0:	10800217 	ldw	r2,8(r2)
  2135e4:	d0e02217 	ldw	r3,-32632(gp)
  2135e8:	18801d36 	bltu	r3,r2,213660 <alt_tick+0xd8>
  2135ec:	e0bffd17 	ldw	r2,-12(fp)
  2135f0:	10800403 	ldbu	r2,16(r2)
  2135f4:	10803fcc 	andi	r2,r2,255
  2135f8:	1000191e 	bne	r2,zero,213660 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  2135fc:	e0bffd17 	ldw	r2,-12(fp)
  213600:	10800317 	ldw	r2,12(r2)
  213604:	e0fffd17 	ldw	r3,-12(fp)
  213608:	18c00517 	ldw	r3,20(r3)
  21360c:	1809883a 	mov	r4,r3
  213610:	103ee83a 	callr	r2
  213614:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  213618:	e0bfff17 	ldw	r2,-4(fp)
  21361c:	1000031e 	bne	r2,zero,21362c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  213620:	e13ffd17 	ldw	r4,-12(fp)
  213624:	02134ec0 	call	2134ec <alt_alarm_stop>
  213628:	00000d06 	br	213660 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  21362c:	e0bffd17 	ldw	r2,-12(fp)
  213630:	10c00217 	ldw	r3,8(r2)
  213634:	e0bfff17 	ldw	r2,-4(fp)
  213638:	1887883a 	add	r3,r3,r2
  21363c:	e0bffd17 	ldw	r2,-12(fp)
  213640:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  213644:	e0bffd17 	ldw	r2,-12(fp)
  213648:	10c00217 	ldw	r3,8(r2)
  21364c:	d0a02217 	ldw	r2,-32632(gp)
  213650:	1880032e 	bgeu	r3,r2,213660 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  213654:	e0bffd17 	ldw	r2,-12(fp)
  213658:	00c00044 	movi	r3,1
  21365c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  213660:	e0bffe17 	ldw	r2,-8(fp)
  213664:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  213668:	e0fffd17 	ldw	r3,-12(fp)
  21366c:	d0a01404 	addi	r2,gp,-32688
  213670:	18bfcf1e 	bne	r3,r2,2135b0 <_gp+0xffe019cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  213674:	0001883a 	nop
}
  213678:	0001883a 	nop
  21367c:	e037883a 	mov	sp,fp
  213680:	dfc00117 	ldw	ra,4(sp)
  213684:	df000017 	ldw	fp,0(sp)
  213688:	dec00204 	addi	sp,sp,8
  21368c:	f800283a 	ret

00213690 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  213690:	deffff04 	addi	sp,sp,-4
  213694:	df000015 	stw	fp,0(sp)
  213698:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  21369c:	000170fa 	wrctl	ienable,zero
}
  2136a0:	0001883a 	nop
  2136a4:	e037883a 	mov	sp,fp
  2136a8:	df000017 	ldw	fp,0(sp)
  2136ac:	dec00104 	addi	sp,sp,4
  2136b0:	f800283a 	ret

002136b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  2136b4:	defffb04 	addi	sp,sp,-20
  2136b8:	dfc00415 	stw	ra,16(sp)
  2136bc:	df000315 	stw	fp,12(sp)
  2136c0:	df000304 	addi	fp,sp,12
  2136c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2136c8:	d0a00617 	ldw	r2,-32744(gp)
  2136cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2136d0:	00003106 	br	213798 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2136d4:	e0bffd17 	ldw	r2,-12(fp)
  2136d8:	10800217 	ldw	r2,8(r2)
  2136dc:	1009883a 	mov	r4,r2
  2136e0:	02019040 	call	201904 <strlen>
  2136e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  2136e8:	e0bffd17 	ldw	r2,-12(fp)
  2136ec:	10c00217 	ldw	r3,8(r2)
  2136f0:	e0bffe17 	ldw	r2,-8(fp)
  2136f4:	10bfffc4 	addi	r2,r2,-1
  2136f8:	1885883a 	add	r2,r3,r2
  2136fc:	10800003 	ldbu	r2,0(r2)
  213700:	10803fcc 	andi	r2,r2,255
  213704:	1080201c 	xori	r2,r2,128
  213708:	10bfe004 	addi	r2,r2,-128
  21370c:	10800bd8 	cmpnei	r2,r2,47
  213710:	1000031e 	bne	r2,zero,213720 <alt_find_file+0x6c>
    {
      len -= 1;
  213714:	e0bffe17 	ldw	r2,-8(fp)
  213718:	10bfffc4 	addi	r2,r2,-1
  21371c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  213720:	e0bffe17 	ldw	r2,-8(fp)
  213724:	e0ffff17 	ldw	r3,-4(fp)
  213728:	1885883a 	add	r2,r3,r2
  21372c:	10800003 	ldbu	r2,0(r2)
  213730:	10803fcc 	andi	r2,r2,255
  213734:	1080201c 	xori	r2,r2,128
  213738:	10bfe004 	addi	r2,r2,-128
  21373c:	10800be0 	cmpeqi	r2,r2,47
  213740:	1000081e 	bne	r2,zero,213764 <alt_find_file+0xb0>
  213744:	e0bffe17 	ldw	r2,-8(fp)
  213748:	e0ffff17 	ldw	r3,-4(fp)
  21374c:	1885883a 	add	r2,r3,r2
  213750:	10800003 	ldbu	r2,0(r2)
  213754:	10803fcc 	andi	r2,r2,255
  213758:	1080201c 	xori	r2,r2,128
  21375c:	10bfe004 	addi	r2,r2,-128
  213760:	10000a1e 	bne	r2,zero,21378c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  213764:	e0bffd17 	ldw	r2,-12(fp)
  213768:	10800217 	ldw	r2,8(r2)
  21376c:	e0fffe17 	ldw	r3,-8(fp)
  213770:	180d883a 	mov	r6,r3
  213774:	e17fff17 	ldw	r5,-4(fp)
  213778:	1009883a 	mov	r4,r2
  21377c:	02139680 	call	213968 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  213780:	1000021e 	bne	r2,zero,21378c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  213784:	e0bffd17 	ldw	r2,-12(fp)
  213788:	00000706 	br	2137a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  21378c:	e0bffd17 	ldw	r2,-12(fp)
  213790:	10800017 	ldw	r2,0(r2)
  213794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  213798:	e0fffd17 	ldw	r3,-12(fp)
  21379c:	d0a00604 	addi	r2,gp,-32744
  2137a0:	18bfcc1e 	bne	r3,r2,2136d4 <_gp+0xffe01af0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  2137a4:	0005883a 	mov	r2,zero
}
  2137a8:	e037883a 	mov	sp,fp
  2137ac:	dfc00117 	ldw	ra,4(sp)
  2137b0:	df000017 	ldw	fp,0(sp)
  2137b4:	dec00204 	addi	sp,sp,8
  2137b8:	f800283a 	ret

002137bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2137bc:	defffa04 	addi	sp,sp,-24
  2137c0:	dfc00515 	stw	ra,20(sp)
  2137c4:	df000415 	stw	fp,16(sp)
  2137c8:	dc000315 	stw	r16,12(sp)
  2137cc:	df000404 	addi	fp,sp,16
  2137d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  2137d4:	00bffa04 	movi	r2,-24
  2137d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2137dc:	e03ffc15 	stw	zero,-16(fp)
  2137e0:	00001d06 	br	213858 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  2137e4:	04001074 	movhi	r16,65
  2137e8:	84223304 	addi	r16,r16,-30516
  2137ec:	e0bffc17 	ldw	r2,-16(fp)
  2137f0:	01400304 	movi	r5,12
  2137f4:	1009883a 	mov	r4,r2
  2137f8:	020179c0 	call	20179c <__mulsi3>
  2137fc:	8085883a 	add	r2,r16,r2
  213800:	10800017 	ldw	r2,0(r2)
  213804:	1000111e 	bne	r2,zero,21384c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  213808:	04001074 	movhi	r16,65
  21380c:	84223304 	addi	r16,r16,-30516
  213810:	e0bffc17 	ldw	r2,-16(fp)
  213814:	01400304 	movi	r5,12
  213818:	1009883a 	mov	r4,r2
  21381c:	020179c0 	call	20179c <__mulsi3>
  213820:	8085883a 	add	r2,r16,r2
  213824:	e0fffe17 	ldw	r3,-8(fp)
  213828:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  21382c:	d0e00a17 	ldw	r3,-32728(gp)
  213830:	e0bffc17 	ldw	r2,-16(fp)
  213834:	1880020e 	bge	r3,r2,213840 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  213838:	e0bffc17 	ldw	r2,-16(fp)
  21383c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  213840:	e0bffc17 	ldw	r2,-16(fp)
  213844:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  213848:	00000606 	br	213864 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  21384c:	e0bffc17 	ldw	r2,-16(fp)
  213850:	10800044 	addi	r2,r2,1
  213854:	e0bffc15 	stw	r2,-16(fp)
  213858:	e0bffc17 	ldw	r2,-16(fp)
  21385c:	10800810 	cmplti	r2,r2,32
  213860:	103fe01e 	bne	r2,zero,2137e4 <_gp+0xffe01c00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  213864:	e0bffd17 	ldw	r2,-12(fp)
}
  213868:	e6ffff04 	addi	sp,fp,-4
  21386c:	dfc00217 	ldw	ra,8(sp)
  213870:	df000117 	ldw	fp,4(sp)
  213874:	dc000017 	ldw	r16,0(sp)
  213878:	dec00304 	addi	sp,sp,12
  21387c:	f800283a 	ret

00213880 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  213880:	defffe04 	addi	sp,sp,-8
  213884:	df000115 	stw	fp,4(sp)
  213888:	df000104 	addi	fp,sp,4
  21388c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  213890:	e0bfff17 	ldw	r2,-4(fp)
  213894:	10bffe84 	addi	r2,r2,-6
  213898:	10c00428 	cmpgeui	r3,r2,16
  21389c:	18001a1e 	bne	r3,zero,213908 <alt_exception_cause_generated_bad_addr+0x88>
  2138a0:	100690ba 	slli	r3,r2,2
  2138a4:	00800874 	movhi	r2,33
  2138a8:	108e2e04 	addi	r2,r2,14520
  2138ac:	1885883a 	add	r2,r3,r2
  2138b0:	10800017 	ldw	r2,0(r2)
  2138b4:	1000683a 	jmp	r2
  2138b8:	002138f8 	rdprs	zero,zero,-31517
  2138bc:	002138f8 	rdprs	zero,zero,-31517
  2138c0:	00213908 	cmpgei	zero,zero,-31516
  2138c4:	00213908 	cmpgei	zero,zero,-31516
  2138c8:	00213908 	cmpgei	zero,zero,-31516
  2138cc:	002138f8 	rdprs	zero,zero,-31517
  2138d0:	00213900 	call	21390 <__alt_mem_onchip_flash_0_data-0x1dec70>
  2138d4:	00213908 	cmpgei	zero,zero,-31516
  2138d8:	002138f8 	rdprs	zero,zero,-31517
  2138dc:	002138f8 	rdprs	zero,zero,-31517
  2138e0:	00213908 	cmpgei	zero,zero,-31516
  2138e4:	002138f8 	rdprs	zero,zero,-31517
  2138e8:	00213900 	call	21390 <__alt_mem_onchip_flash_0_data-0x1dec70>
  2138ec:	00213908 	cmpgei	zero,zero,-31516
  2138f0:	00213908 	cmpgei	zero,zero,-31516
  2138f4:	002138f8 	rdprs	zero,zero,-31517
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  2138f8:	00800044 	movi	r2,1
  2138fc:	00000306 	br	21390c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  213900:	0005883a 	mov	r2,zero
  213904:	00000106 	br	21390c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  213908:	0005883a 	mov	r2,zero
  }
}
  21390c:	e037883a 	mov	sp,fp
  213910:	df000017 	ldw	fp,0(sp)
  213914:	dec00104 	addi	sp,sp,4
  213918:	f800283a 	ret

0021391c <atexit>:
  21391c:	200b883a 	mov	r5,r4
  213920:	000f883a 	mov	r7,zero
  213924:	000d883a 	mov	r6,zero
  213928:	0009883a 	mov	r4,zero
  21392c:	0213b4c1 	jmpi	213b4c <__register_exitproc>

00213930 <exit>:
  213930:	defffe04 	addi	sp,sp,-8
  213934:	000b883a 	mov	r5,zero
  213938:	dc000015 	stw	r16,0(sp)
  21393c:	dfc00115 	stw	ra,4(sp)
  213940:	2021883a 	mov	r16,r4
  213944:	0213c640 	call	213c64 <__call_exitprocs>
  213948:	00801074 	movhi	r2,65
  21394c:	10a6f904 	addi	r2,r2,-25628
  213950:	11000017 	ldw	r4,0(r2)
  213954:	20800f17 	ldw	r2,60(r4)
  213958:	10000126 	beq	r2,zero,213960 <exit+0x30>
  21395c:	103ee83a 	callr	r2
  213960:	8009883a 	mov	r4,r16
  213964:	0213de40 	call	213de4 <_exit>

00213968 <memcmp>:
  213968:	01c000c4 	movi	r7,3
  21396c:	3980192e 	bgeu	r7,r6,2139d4 <memcmp+0x6c>
  213970:	2144b03a 	or	r2,r4,r5
  213974:	11c4703a 	and	r2,r2,r7
  213978:	10000f26 	beq	r2,zero,2139b8 <memcmp+0x50>
  21397c:	20800003 	ldbu	r2,0(r4)
  213980:	28c00003 	ldbu	r3,0(r5)
  213984:	10c0151e 	bne	r2,r3,2139dc <memcmp+0x74>
  213988:	31bfff84 	addi	r6,r6,-2
  21398c:	01ffffc4 	movi	r7,-1
  213990:	00000406 	br	2139a4 <memcmp+0x3c>
  213994:	20800003 	ldbu	r2,0(r4)
  213998:	28c00003 	ldbu	r3,0(r5)
  21399c:	31bfffc4 	addi	r6,r6,-1
  2139a0:	10c00e1e 	bne	r2,r3,2139dc <memcmp+0x74>
  2139a4:	21000044 	addi	r4,r4,1
  2139a8:	29400044 	addi	r5,r5,1
  2139ac:	31fff91e 	bne	r6,r7,213994 <_gp+0xffe01db0>
  2139b0:	0005883a 	mov	r2,zero
  2139b4:	f800283a 	ret
  2139b8:	20c00017 	ldw	r3,0(r4)
  2139bc:	28800017 	ldw	r2,0(r5)
  2139c0:	18bfee1e 	bne	r3,r2,21397c <_gp+0xffe01d98>
  2139c4:	31bfff04 	addi	r6,r6,-4
  2139c8:	21000104 	addi	r4,r4,4
  2139cc:	29400104 	addi	r5,r5,4
  2139d0:	39bff936 	bltu	r7,r6,2139b8 <_gp+0xffe01dd4>
  2139d4:	303fe91e 	bne	r6,zero,21397c <_gp+0xffe01d98>
  2139d8:	003ff506 	br	2139b0 <_gp+0xffe01dcc>
  2139dc:	10c5c83a 	sub	r2,r2,r3
  2139e0:	f800283a 	ret

002139e4 <_putc_r>:
  2139e4:	defffc04 	addi	sp,sp,-16
  2139e8:	dc000215 	stw	r16,8(sp)
  2139ec:	dfc00315 	stw	ra,12(sp)
  2139f0:	2021883a 	mov	r16,r4
  2139f4:	20000226 	beq	r4,zero,213a00 <_putc_r+0x1c>
  2139f8:	20800e17 	ldw	r2,56(r4)
  2139fc:	10001b26 	beq	r2,zero,213a6c <_putc_r+0x88>
  213a00:	30800217 	ldw	r2,8(r6)
  213a04:	10bfffc4 	addi	r2,r2,-1
  213a08:	30800215 	stw	r2,8(r6)
  213a0c:	10000a16 	blt	r2,zero,213a38 <_putc_r+0x54>
  213a10:	30800017 	ldw	r2,0(r6)
  213a14:	11400005 	stb	r5,0(r2)
  213a18:	30800017 	ldw	r2,0(r6)
  213a1c:	10c00044 	addi	r3,r2,1
  213a20:	30c00015 	stw	r3,0(r6)
  213a24:	10800003 	ldbu	r2,0(r2)
  213a28:	dfc00317 	ldw	ra,12(sp)
  213a2c:	dc000217 	ldw	r16,8(sp)
  213a30:	dec00404 	addi	sp,sp,16
  213a34:	f800283a 	ret
  213a38:	30c00617 	ldw	r3,24(r6)
  213a3c:	10c00616 	blt	r2,r3,213a58 <_putc_r+0x74>
  213a40:	30800017 	ldw	r2,0(r6)
  213a44:	00c00284 	movi	r3,10
  213a48:	11400005 	stb	r5,0(r2)
  213a4c:	30800017 	ldw	r2,0(r6)
  213a50:	11400003 	ldbu	r5,0(r2)
  213a54:	28fff11e 	bne	r5,r3,213a1c <_gp+0xffe01e38>
  213a58:	8009883a 	mov	r4,r16
  213a5c:	dfc00317 	ldw	ra,12(sp)
  213a60:	dc000217 	ldw	r16,8(sp)
  213a64:	dec00404 	addi	sp,sp,16
  213a68:	020ad841 	jmpi	20ad84 <__swbuf_r>
  213a6c:	d9400015 	stw	r5,0(sp)
  213a70:	d9800115 	stw	r6,4(sp)
  213a74:	0205d5c0 	call	205d5c <__sinit>
  213a78:	d9800117 	ldw	r6,4(sp)
  213a7c:	d9400017 	ldw	r5,0(sp)
  213a80:	003fdf06 	br	213a00 <_gp+0xffe01e1c>

00213a84 <putc>:
  213a84:	00801074 	movhi	r2,65
  213a88:	defffc04 	addi	sp,sp,-16
  213a8c:	10a6fa04 	addi	r2,r2,-25624
  213a90:	dc000115 	stw	r16,4(sp)
  213a94:	14000017 	ldw	r16,0(r2)
  213a98:	dc400215 	stw	r17,8(sp)
  213a9c:	dfc00315 	stw	ra,12(sp)
  213aa0:	2023883a 	mov	r17,r4
  213aa4:	80000226 	beq	r16,zero,213ab0 <putc+0x2c>
  213aa8:	80800e17 	ldw	r2,56(r16)
  213aac:	10001a26 	beq	r2,zero,213b18 <putc+0x94>
  213ab0:	28800217 	ldw	r2,8(r5)
  213ab4:	10bfffc4 	addi	r2,r2,-1
  213ab8:	28800215 	stw	r2,8(r5)
  213abc:	10000b16 	blt	r2,zero,213aec <putc+0x68>
  213ac0:	28800017 	ldw	r2,0(r5)
  213ac4:	14400005 	stb	r17,0(r2)
  213ac8:	28800017 	ldw	r2,0(r5)
  213acc:	10c00044 	addi	r3,r2,1
  213ad0:	28c00015 	stw	r3,0(r5)
  213ad4:	10800003 	ldbu	r2,0(r2)
  213ad8:	dfc00317 	ldw	ra,12(sp)
  213adc:	dc400217 	ldw	r17,8(sp)
  213ae0:	dc000117 	ldw	r16,4(sp)
  213ae4:	dec00404 	addi	sp,sp,16
  213ae8:	f800283a 	ret
  213aec:	28c00617 	ldw	r3,24(r5)
  213af0:	10c00e16 	blt	r2,r3,213b2c <putc+0xa8>
  213af4:	28800017 	ldw	r2,0(r5)
  213af8:	01000284 	movi	r4,10
  213afc:	14400005 	stb	r17,0(r2)
  213b00:	28800017 	ldw	r2,0(r5)
  213b04:	10c00003 	ldbu	r3,0(r2)
  213b08:	193ff01e 	bne	r3,r4,213acc <_gp+0xffe01ee8>
  213b0c:	280d883a 	mov	r6,r5
  213b10:	180b883a 	mov	r5,r3
  213b14:	00000706 	br	213b34 <putc+0xb0>
  213b18:	8009883a 	mov	r4,r16
  213b1c:	d9400015 	stw	r5,0(sp)
  213b20:	0205d5c0 	call	205d5c <__sinit>
  213b24:	d9400017 	ldw	r5,0(sp)
  213b28:	003fe106 	br	213ab0 <_gp+0xffe01ecc>
  213b2c:	280d883a 	mov	r6,r5
  213b30:	880b883a 	mov	r5,r17
  213b34:	8009883a 	mov	r4,r16
  213b38:	dfc00317 	ldw	ra,12(sp)
  213b3c:	dc400217 	ldw	r17,8(sp)
  213b40:	dc000117 	ldw	r16,4(sp)
  213b44:	dec00404 	addi	sp,sp,16
  213b48:	020ad841 	jmpi	20ad84 <__swbuf_r>

00213b4c <__register_exitproc>:
  213b4c:	defffa04 	addi	sp,sp,-24
  213b50:	dc000315 	stw	r16,12(sp)
  213b54:	04001074 	movhi	r16,65
  213b58:	8426f904 	addi	r16,r16,-25628
  213b5c:	80c00017 	ldw	r3,0(r16)
  213b60:	dc400415 	stw	r17,16(sp)
  213b64:	dfc00515 	stw	ra,20(sp)
  213b68:	18805217 	ldw	r2,328(r3)
  213b6c:	2023883a 	mov	r17,r4
  213b70:	10003726 	beq	r2,zero,213c50 <__register_exitproc+0x104>
  213b74:	10c00117 	ldw	r3,4(r2)
  213b78:	010007c4 	movi	r4,31
  213b7c:	20c00e16 	blt	r4,r3,213bb8 <__register_exitproc+0x6c>
  213b80:	1a000044 	addi	r8,r3,1
  213b84:	8800221e 	bne	r17,zero,213c10 <__register_exitproc+0xc4>
  213b88:	18c00084 	addi	r3,r3,2
  213b8c:	18c7883a 	add	r3,r3,r3
  213b90:	18c7883a 	add	r3,r3,r3
  213b94:	12000115 	stw	r8,4(r2)
  213b98:	10c7883a 	add	r3,r2,r3
  213b9c:	19400015 	stw	r5,0(r3)
  213ba0:	0005883a 	mov	r2,zero
  213ba4:	dfc00517 	ldw	ra,20(sp)
  213ba8:	dc400417 	ldw	r17,16(sp)
  213bac:	dc000317 	ldw	r16,12(sp)
  213bb0:	dec00604 	addi	sp,sp,24
  213bb4:	f800283a 	ret
  213bb8:	00800034 	movhi	r2,0
  213bbc:	10800004 	addi	r2,r2,0
  213bc0:	10002626 	beq	r2,zero,213c5c <__register_exitproc+0x110>
  213bc4:	01006404 	movi	r4,400
  213bc8:	d9400015 	stw	r5,0(sp)
  213bcc:	d9800115 	stw	r6,4(sp)
  213bd0:	d9c00215 	stw	r7,8(sp)
  213bd4:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  213bd8:	d9400017 	ldw	r5,0(sp)
  213bdc:	d9800117 	ldw	r6,4(sp)
  213be0:	d9c00217 	ldw	r7,8(sp)
  213be4:	10001d26 	beq	r2,zero,213c5c <__register_exitproc+0x110>
  213be8:	81000017 	ldw	r4,0(r16)
  213bec:	10000115 	stw	zero,4(r2)
  213bf0:	02000044 	movi	r8,1
  213bf4:	22405217 	ldw	r9,328(r4)
  213bf8:	0007883a 	mov	r3,zero
  213bfc:	12400015 	stw	r9,0(r2)
  213c00:	20805215 	stw	r2,328(r4)
  213c04:	10006215 	stw	zero,392(r2)
  213c08:	10006315 	stw	zero,396(r2)
  213c0c:	883fde26 	beq	r17,zero,213b88 <_gp+0xffe01fa4>
  213c10:	18c9883a 	add	r4,r3,r3
  213c14:	2109883a 	add	r4,r4,r4
  213c18:	1109883a 	add	r4,r2,r4
  213c1c:	21802215 	stw	r6,136(r4)
  213c20:	01800044 	movi	r6,1
  213c24:	12406217 	ldw	r9,392(r2)
  213c28:	30cc983a 	sll	r6,r6,r3
  213c2c:	4992b03a 	or	r9,r9,r6
  213c30:	12406215 	stw	r9,392(r2)
  213c34:	21c04215 	stw	r7,264(r4)
  213c38:	01000084 	movi	r4,2
  213c3c:	893fd21e 	bne	r17,r4,213b88 <_gp+0xffe01fa4>
  213c40:	11006317 	ldw	r4,396(r2)
  213c44:	218cb03a 	or	r6,r4,r6
  213c48:	11806315 	stw	r6,396(r2)
  213c4c:	003fce06 	br	213b88 <_gp+0xffe01fa4>
  213c50:	18805304 	addi	r2,r3,332
  213c54:	18805215 	stw	r2,328(r3)
  213c58:	003fc606 	br	213b74 <_gp+0xffe01f90>
  213c5c:	00bfffc4 	movi	r2,-1
  213c60:	003fd006 	br	213ba4 <_gp+0xffe01fc0>

00213c64 <__call_exitprocs>:
  213c64:	defff504 	addi	sp,sp,-44
  213c68:	df000915 	stw	fp,36(sp)
  213c6c:	dd400615 	stw	r21,24(sp)
  213c70:	dc800315 	stw	r18,12(sp)
  213c74:	dfc00a15 	stw	ra,40(sp)
  213c78:	ddc00815 	stw	r23,32(sp)
  213c7c:	dd800715 	stw	r22,28(sp)
  213c80:	dd000515 	stw	r20,20(sp)
  213c84:	dcc00415 	stw	r19,16(sp)
  213c88:	dc400215 	stw	r17,8(sp)
  213c8c:	dc000115 	stw	r16,4(sp)
  213c90:	d9000015 	stw	r4,0(sp)
  213c94:	2839883a 	mov	fp,r5
  213c98:	04800044 	movi	r18,1
  213c9c:	057fffc4 	movi	r21,-1
  213ca0:	00801074 	movhi	r2,65
  213ca4:	10a6f904 	addi	r2,r2,-25628
  213ca8:	12000017 	ldw	r8,0(r2)
  213cac:	45005217 	ldw	r20,328(r8)
  213cb0:	44c05204 	addi	r19,r8,328
  213cb4:	a0001c26 	beq	r20,zero,213d28 <__call_exitprocs+0xc4>
  213cb8:	a0800117 	ldw	r2,4(r20)
  213cbc:	15ffffc4 	addi	r23,r2,-1
  213cc0:	b8000d16 	blt	r23,zero,213cf8 <__call_exitprocs+0x94>
  213cc4:	14000044 	addi	r16,r2,1
  213cc8:	8421883a 	add	r16,r16,r16
  213ccc:	8421883a 	add	r16,r16,r16
  213cd0:	84402004 	addi	r17,r16,128
  213cd4:	a463883a 	add	r17,r20,r17
  213cd8:	a421883a 	add	r16,r20,r16
  213cdc:	e0001e26 	beq	fp,zero,213d58 <__call_exitprocs+0xf4>
  213ce0:	80804017 	ldw	r2,256(r16)
  213ce4:	e0801c26 	beq	fp,r2,213d58 <__call_exitprocs+0xf4>
  213ce8:	bdffffc4 	addi	r23,r23,-1
  213cec:	843fff04 	addi	r16,r16,-4
  213cf0:	8c7fff04 	addi	r17,r17,-4
  213cf4:	bd7ff91e 	bne	r23,r21,213cdc <_gp+0xffe020f8>
  213cf8:	00800034 	movhi	r2,0
  213cfc:	10800004 	addi	r2,r2,0
  213d00:	10000926 	beq	r2,zero,213d28 <__call_exitprocs+0xc4>
  213d04:	a0800117 	ldw	r2,4(r20)
  213d08:	1000301e 	bne	r2,zero,213dcc <__call_exitprocs+0x168>
  213d0c:	a0800017 	ldw	r2,0(r20)
  213d10:	10003226 	beq	r2,zero,213ddc <__call_exitprocs+0x178>
  213d14:	a009883a 	mov	r4,r20
  213d18:	98800015 	stw	r2,0(r19)
  213d1c:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  213d20:	9d000017 	ldw	r20,0(r19)
  213d24:	a03fe41e 	bne	r20,zero,213cb8 <_gp+0xffe020d4>
  213d28:	dfc00a17 	ldw	ra,40(sp)
  213d2c:	df000917 	ldw	fp,36(sp)
  213d30:	ddc00817 	ldw	r23,32(sp)
  213d34:	dd800717 	ldw	r22,28(sp)
  213d38:	dd400617 	ldw	r21,24(sp)
  213d3c:	dd000517 	ldw	r20,20(sp)
  213d40:	dcc00417 	ldw	r19,16(sp)
  213d44:	dc800317 	ldw	r18,12(sp)
  213d48:	dc400217 	ldw	r17,8(sp)
  213d4c:	dc000117 	ldw	r16,4(sp)
  213d50:	dec00b04 	addi	sp,sp,44
  213d54:	f800283a 	ret
  213d58:	a0800117 	ldw	r2,4(r20)
  213d5c:	80c00017 	ldw	r3,0(r16)
  213d60:	10bfffc4 	addi	r2,r2,-1
  213d64:	15c01426 	beq	r2,r23,213db8 <__call_exitprocs+0x154>
  213d68:	80000015 	stw	zero,0(r16)
  213d6c:	183fde26 	beq	r3,zero,213ce8 <_gp+0xffe02104>
  213d70:	95c8983a 	sll	r4,r18,r23
  213d74:	a0806217 	ldw	r2,392(r20)
  213d78:	a5800117 	ldw	r22,4(r20)
  213d7c:	2084703a 	and	r2,r4,r2
  213d80:	10000b26 	beq	r2,zero,213db0 <__call_exitprocs+0x14c>
  213d84:	a0806317 	ldw	r2,396(r20)
  213d88:	2088703a 	and	r4,r4,r2
  213d8c:	20000c1e 	bne	r4,zero,213dc0 <__call_exitprocs+0x15c>
  213d90:	89400017 	ldw	r5,0(r17)
  213d94:	d9000017 	ldw	r4,0(sp)
  213d98:	183ee83a 	callr	r3
  213d9c:	a0800117 	ldw	r2,4(r20)
  213da0:	15bfbf1e 	bne	r2,r22,213ca0 <_gp+0xffe020bc>
  213da4:	98800017 	ldw	r2,0(r19)
  213da8:	153fcf26 	beq	r2,r20,213ce8 <_gp+0xffe02104>
  213dac:	003fbc06 	br	213ca0 <_gp+0xffe020bc>
  213db0:	183ee83a 	callr	r3
  213db4:	003ff906 	br	213d9c <_gp+0xffe021b8>
  213db8:	a5c00115 	stw	r23,4(r20)
  213dbc:	003feb06 	br	213d6c <_gp+0xffe02188>
  213dc0:	89000017 	ldw	r4,0(r17)
  213dc4:	183ee83a 	callr	r3
  213dc8:	003ff406 	br	213d9c <_gp+0xffe021b8>
  213dcc:	a0800017 	ldw	r2,0(r20)
  213dd0:	a027883a 	mov	r19,r20
  213dd4:	1029883a 	mov	r20,r2
  213dd8:	003fb606 	br	213cb4 <_gp+0xffe020d0>
  213ddc:	0005883a 	mov	r2,zero
  213de0:	003ffb06 	br	213dd0 <_gp+0xffe021ec>

00213de4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  213de4:	defffd04 	addi	sp,sp,-12
  213de8:	df000215 	stw	fp,8(sp)
  213dec:	df000204 	addi	fp,sp,8
  213df0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  213df4:	0001883a 	nop
  213df8:	e0bfff17 	ldw	r2,-4(fp)
  213dfc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  213e00:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  213e04:	10000226 	beq	r2,zero,213e10 <_exit+0x2c>
    ALT_SIM_FAIL();
  213e08:	002af070 	cmpltui	zero,zero,43969
  213e0c:	00000106 	br	213e14 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  213e10:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  213e14:	003fff06 	br	213e14 <_gp+0xffe02230>
