
initializer.elf:     file format elf32-littlenios2
initializer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200230

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00200020 align 2**12
         filesz 0x00016e38 memsz 0x00016e38 flags r-x
    LOAD off    0x00018000 vaddr 0x00408000 paddr 0x00216e58 align 2**12
         filesz 0x00001c7c memsz 0x00001f64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00200020  00200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000164a0  00200230  00200230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  002166d0  002166d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c7c  00408000  00216e58  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  00409c7c  00218ad4  00019c7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_0_data 00000000  00218ad4  00218ad4  00019c7c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00409f64  00409f64  00019c7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019c7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011a8  00000000  00000000  00019ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a459  00000000  00000000  0001ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ad1c  00000000  00000000  000452a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d689  00000000  00000000  0004ffbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000330c  00000000  00000000  0005d648  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000054b8  00000000  00000000  00060954  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001910f  00000000  00000000  00065e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007ef1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c00  00000000  00000000  0007ef60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008518a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008518d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00085199  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008519a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008519b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008519f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000851a3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000851a7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000851b2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000851bd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000851c8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  000851d2  2**0
                  CONTENTS, READONLY
 30 .jdi          000065ee  00000000  00000000  000851fa  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008206a  00000000  00000000  0008b7e8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
00200230 l    d  .text	00000000 .text
002166d0 l    d  .rodata	00000000 .rodata
00408000 l    d  .rwdata	00000000 .rwdata
00409c7c l    d  .bss	00000000 .bss
00218ad4 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00409f64 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../initializer_bsp//obj/HAL/src/crt0.o
00200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 main1.c
00409c14 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
00409c8c l     O .bss	00000004 usb_delay.2608
00409c90 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00216c56 l     O .rodata	00000010 zeroes.4404
00206350 l     F .text	000000bc __sbprintf
00216c66 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00206560 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
002080b8 l     F .text	00000008 __fp_unlock
002080cc l     F .text	0000019c __sinit.part.1
00208268 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00408030 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00408474 l     O .rwdata	00000020 lc_ctype_charset
00408454 l     O .rwdata	00000020 lc_message_charset
00408494 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00216c98 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0020b8a4 l     F .text	000000fc __sprint_r.part.0
00216dbc l     O .rodata	00000010 zeroes.4349
0020cee0 l     F .text	000000bc __sbprintf
00216dcc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00210ce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00210dfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00210e28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00210f1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00211004 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
002110f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
002112cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00409c54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00211714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00211850 l     F .text	00000034 alt_dev_reg
00408a7c l     O .rwdata	00000038 i2c_0
00408ab4 l     O .rwdata	00001060 jtag_uart_0
00409b14 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0021193c l     F .text	00000110 optional_irq_callback
00211a9c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00213778 l     F .text	0000020c altera_avalon_jtag_uart_irq
00213984 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
002141b8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
002142ac l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
002154b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00215a64 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00215bc4 l     F .text	0000003c alt_get_errno
00215c00 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00409cc8 g     O .bss	00000004 alt_instruction_exception_handler
00203ed4 g     F .text	00000018 putchar
0020ad80 g     F .text	00000074 _mprec_log10
0020ae6c g     F .text	0000008c __any_on
0020d5ec g     F .text	00000054 _isatty_r
00216ca4 g     O .rodata	00000028 __mprec_tinytens
00211208 g     F .text	0000007c alt_main
00409c18 g     O .rwdata	00000008 ctrl_xfers
00203eec g     F .text	000000c0 _puts_r
00409e64 g     O .bss	00000100 alt_irq
0020d640 g     F .text	00000060 _lseek_r
00202844 g     F .text	00000644 USB_Task
00216e58 g       *ABS*	00000000 __flash_rwdata_start
0020f724 g     F .text	00000088 .hidden __eqdf2
00409f64 g       *ABS*	00000000 __alt_heap_start
00203e90 g     F .text	0000003c printf
0020d700 g     F .text	0000009c _wcrtomb_r
002019bc g     F .text	00000088 kbdPoll
0020b764 g     F .text	0000005c __sseek
00208418 g     F .text	00000010 __sinit
0020cf9c g     F .text	00000140 __swbuf_r
00208eec g     F .text	0000007c _setlocale_r
00208270 g     F .text	00000078 __sfmoreglue
00212194 g     F .text	000000a8 alt_avalon_i2c_rx_read
002112a8 g     F .text	00000024 __malloc_unlock
002002c8 g     F .text	000001f0 GetDriverandReport
002133ac g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00211f18 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00209bbc g     F .text	0000015c memmove
00208400 g     F .text	00000018 _cleanup
00212bfc g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00209e40 g     F .text	000000a8 _Balloc
00203c9c g     F .text	00000070 .hidden __fixsfsi
00201b10 g     F .text	00000080 MAXreg_wr
00408000 g     O .rwdata	00000030 ClientDriverTable
0020f7ac g     F .text	000000dc .hidden __gtdf2
002160b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00202e88 g     F .text	0000002c MSDProbe
00200000 g     F .entry	0000000c __reset
00202344 g     F .text	000000e8 XferCtrlData
00200020 g       *ABS*	00000000 __flash_exceptions_start
00409ccc g     O .bss	00000010 hid_ep
0020d590 g     F .text	0000005c _fstat_r
00409cac g     O .bss	00000004 errno
0020b6e0 g     F .text	00000008 __seofread
00409cb4 g     O .bss	00000004 alt_argv
00411c14 g       *ABS*	00000000 _gp
002116e4 g     F .text	00000030 usleep
002133f0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00201c50 g     F .text	000000ac MAXreg_rd
002037b8 g     F .text	000004e4 .hidden __subsf3
0021515c g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
002120a8 g     F .text	00000044 alt_avalon_i2c_is_busy
004088fc g     O .rwdata	00000180 alt_fd_list
002018f4 g     F .text	00000040 HID_init
00203ecc g     F .text	00000008 _putchar_r
00211e4c g     F .text	000000cc alt_avalon_i2c_master_config_set
00215658 g     F .text	00000090 alt_find_dev
00209a74 g     F .text	00000148 memcpy
00200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
002080c0 g     F .text	0000000c _cleanup_r
00210b64 g     F .text	000000dc .hidden __floatsidf
00215b48 g     F .text	0000007c alt_io_redirect
0020f888 g     F .text	000000f4 .hidden __ltdf2
002166d0 g       *ABS*	00000000 __DTOR_END__
00212a3c g     F .text	000001c0 alt_avalon_i2c_master_transmit
00203fac g     F .text	00000014 puts
002162a0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0020b5c4 g     F .text	00000074 __fpclassifyd
0020acdc g     F .text	000000a4 __ratio
0020cec4 g     F .text	0000001c __vfiprintf_internal
00213b7c g     F .text	0000021c altera_avalon_jtag_uart_read
00203e60 g     F .text	00000030 _printf_r
00408000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
002031e8 g     F .text	00000064 .hidden __udivsi3
00210f58 g     F .text	000000ac isatty
002150cc g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
00216cf4 g     O .rodata	000000c8 __mprec_tens
00200824 g     F .text	0000045c usb_init
00208f68 g     F .text	0000000c __locale_charset
00211cb8 g     F .text	00000098 alt_avalon_i2c_enable
00409ca8 g     O .bss	00000004 __malloc_top_pad
00409c68 g     O .rwdata	00000008 altera_onchip_flash_list
002132e0 g     F .text	00000068 alt_avalon_i2c_int_disable
00409c20 g     O .rwdata	00000001 usb_task_state
00409c2c g     O .rwdata	00000004 __mb_cur_max
00208f98 g     F .text	0000000c _localeconv_r
0020a274 g     F .text	0000003c __i2b
0020889c g     F .text	000004c8 __sfvwrite_r
0020b638 g     F .text	00000054 _sbrk_r
0020d6a0 g     F .text	00000060 _read_r
00201fd0 g     F .text	000000bc MAX3421E_init
002007b4 g     F .text	00000038 setKeycode
00215470 g     F .text	00000028 alt_dcache_flush
00214448 g     F .text	00000168 alt_onchip_flash_erase_block
00200c80 g     F .text	000000b4 SGTL5000_Reg_Rd
00409c4c g     O .rwdata	00000004 alt_max_fd
0020d284 g     F .text	000000f0 _fclose_r
00208088 g     F .text	00000030 fflush
00409ca4 g     O .bss	00000004 __malloc_max_sbrked_mem
00212e08 g     F .text	00000210 alt_avalon_i2c_master_receive
0020e4a8 g     F .text	000008ac .hidden __adddf3
0020aa84 g     F .text	0000010c __b2d
0020dee4 g     F .text	000005c4 .hidden __umoddi3
0021112c g     F .text	000000dc lseek
00213348 g     F .text	00000064 alt_avalon_i2c_int_enable
00409c24 g     O .rwdata	00000004 _global_impure_ptr
0020b060 g     F .text	00000564 _realloc_r
00409f64 g       *ABS*	00000000 __bss_end
00215974 g     F .text	000000f0 alt_iic_isr_register
002115dc g     F .text	00000108 alt_tick
0020d8e8 g     F .text	000005fc .hidden __udivdi3
00213208 g     F .text	00000058 alt_avalon_i2c_int_status_get
0020d4ec g     F .text	00000024 _fputwc_r
00216ccc g     O .rodata	00000028 __mprec_bigtens
0020a058 g     F .text	00000104 __s2b
00210c40 g     F .text	000000a8 .hidden __floatunsidf
0020a7c4 g     F .text	00000060 __mcmp
00208438 g     F .text	00000018 __fp_lock_all
00215928 g     F .text	0000004c alt_ic_irq_enabled
00211540 g     F .text	0000009c alt_alarm_stop
00211b38 g     F .text	00000054 alt_avalon_i2c_register_callback
00409cc4 g     O .bss	00000004 alt_irq_active
00211b8c g     F .text	000000ec alt_avalon_i2c_init
00202f50 g     F .text	0000002c DummyProbe
002000fc g     F .exceptions	000000d4 alt_irq_handler
004088d4 g     O .rwdata	00000028 alt_dev_null
00201934 g     F .text	00000088 mousePoll
00201e24 g     F .text	00000024 Vbus_power
00215498 g     F .text	00000020 alt_dcache_flush_all
0020a15c g     F .text	00000068 __hi0bits
00210ae4 g     F .text	00000080 .hidden __fixdfsi
00409c7c g       *ABS*	00000000 __ram_rwdata_end
00409c44 g     O .rwdata	00000008 alt_dev_list
00211750 g     F .text	00000100 write
0020aef8 g     F .text	000000a0 _putc_r
002124c8 g     F .text	0000004c alt_avalon_i2c_check_arblost
002032cc g     F .text	000000bc .hidden __gtsf2
002132a4 g     F .text	0000003c alt_avalon_i2c_int_clear
00216e58 g       *ABS*	00000000 __ram_rodata_end
00409c91 g     O .bss	00000001 usb_error
00210e64 g     F .text	000000b8 fstat
0020f888 g     F .text	000000f4 .hidden __ledf2
00409c60 g     O .rwdata	00000008 alt_avalon_i2c_list
0020a53c g     F .text	00000140 __pow5mult
0020b9b8 g     F .text	0000150c ___vfiprintf_internal_r
00409c9c g     O .bss	00000004 __nlocale_changed
0020324c g     F .text	00000058 .hidden __umodsi3
00409f64 g       *ABS*	00000000 end
002136b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
002001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00211c78 g     F .text	00000040 alt_avalon_i2c_open
002024a0 g     F .text	0000017c XferDispatchPkt
002166d0 g       *ABS*	00000000 __CTOR_LIST__
00410000 g       *ABS*	00000000 __alt_stack_pointer
00212650 g     F .text	000000e8 alt_avalon_i2c_master_tx
00214230 g     F .text	0000007c alt_avalon_timer_sc_init
00203dfc g     F .text	00000064 .hidden __clzsi2
00213d98 g     F .text	00000224 altera_avalon_jtag_uart_write
00208428 g     F .text	00000004 __sfp_lock_acquire
00209990 g     F .text	000000e4 memchr
00204058 g     F .text	000022dc ___vfprintf_internal_r
002021c4 g     F .text	00000034 MaxGpxHandler
002143ac g     F .text	0000009c alt_onchip_flash_get_info
0020858c g     F .text	00000310 _free_r
00215e48 g     F .text	0000022c alt_printf
00208f74 g     F .text	00000010 __locale_mb_cur_max
0021651c g     F .text	00000180 __call_exitprocs
00409c98 g     O .bss	00000004 __mlocale_changed
00211a4c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00409c30 g     O .rwdata	00000004 __malloc_sbrk_base
00200230 g     F .text	0000003c _start
00409cbc g     O .bss	00000004 _alt_tick_rate
00201cfc g     F .text	00000080 MAXbytes_rd
00213018 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0021343c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0020a67c g     F .text	00000148 __lshift
00213fbc g     F .text	000001fc alt_avalon_spi_command
00409cc0 g     O .bss	00000004 _alt_nticks
00211308 g     F .text	00000104 read
002118bc g     F .text	00000080 alt_sys_init
00409e1c g     O .bss	00000048 devtable
00216404 g     F .text	00000118 __register_exitproc
002014ec g     F .text	00000408 HIDKProbe
00409cdc g     O .bss	00000018 msd_ep
00212874 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0020a2b0 g     F .text	0000028c __multiply
00213a24 g     F .text	00000068 altera_avalon_jtag_uart_close
002027ac g     F .text	00000098 USB_init
002032a4 g     F .text	00000028 .hidden __mulsi3
00409d1c g     O .bss	00000100 bigbuf
00408000 g       *ABS*	00000000 __ram_rwdata_start
002166d0 g       *ABS*	00000000 __ram_rodata_start
00409cf4 g     O .bss	00000028 __malloc_current_mallinfo
00409c88 g     O .bss	00000001 last_usb_task_state
0020ab90 g     F .text	0000014c __d2b
00409c80 g     O .bss	00000008 dev0ep
00200504 g     F .text	00000050 clearLED
00213554 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
002161dc g     F .text	000000c4 alt_get_fd
00215318 g     F .text	00000158 alt_busy_sleep
00202eb4 g     F .text	00000038 MSDEventHandler
0020d154 g     F .text	00000054 _close_r
00216388 g     F .text	0000007c memcmp
002120ec g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00213614 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00409f64 g       *ABS*	00000000 __alt_stack_base
00213664 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0020640c g     F .text	00000154 __swsetup_r
0020ed54 g     F .text	000009d0 .hidden __divdf3
002142e0 g     F .text	000000cc alt_onchip_flash_read
002082e8 g     F .text	00000118 __sfp
0020adf4 g     F .text	00000078 __copybits
004084cc g     O .rwdata	00000408 __malloc_av_
00208434 g     F .text	00000004 __sinit_lock_release
00202f18 g     F .text	00000038 CDCEventHandler
0020f97c g     F .text	0000086c .hidden __muldf3
00202f7c g     F .text	00000038 DummyEventHandler
0020b68c g     F .text	00000054 __sread
002160d4 g     F .text	00000108 alt_find_file
002154f4 g     F .text	000000a4 alt_dev_llist_insert
00211284 g     F .text	00000024 __malloc_lock
00211490 g     F .text	000000b0 sbrk
00212514 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0021247c g     F .text	0000004c alt_avalon_i2c_check_nack
0020802c g     F .text	0000005c _fflush_r
0020d1a8 g     F .text	000000dc _calloc_r
00409c70 g     O .rwdata	00000008 alt_flash_dev_list
00409c7c g       *ABS*	00000000 __bss_start
00201e48 g     F .text	00000188 MAX_busprobe
00409c7c g     O .bss	00000002 hid_device
00209d18 g     F .text	00000128 memset
0020026c g     F .text	0000005c main
0020208c g     F .text	0000006c MAX3421E_Task
00212448 g     F .text	00000034 alt_avalon_i2c_master_target_set
00409cb8 g     O .bss	00000004 alt_envp
00409ca0 g     O .bss	00000004 __malloc_max_total_mem
002135b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0020d0dc g     F .text	00000018 __swbuf
0020300c g     F .text	00000084 ConvUTF8ToStr
00213260 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0020b7c0 g     F .text	00000008 __sclose
00410000 g       *ABS*	00000000 __alt_heap_limit
0020d374 g     F .text	00000014 fclose
00206788 g     F .text	00001688 _dtoa_r
00209184 g     F .text	0000080c _malloc_r
0020d85c g     F .text	00000030 __ascii_wctomb
00409c50 g     O .rwdata	00000004 alt_errno
0021503c g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
00208d64 g     F .text	000000c4 _fwalk
0020af98 g     F .text	000000c8 putc
002030f0 g     F .text	00000084 .hidden __divsi3
0020261c g     F .text	00000190 XferInTransfer
00200674 g     F .text	00000140 printSignedHex1
00208468 g     F .text	00000124 _malloc_trim_r
002166d0 g       *ABS*	00000000 __CTOR_END__
00214b60 g     F .text	000004dc altera_onchip_flash_init
00203388 g     F .text	00000430 .hidden __mulsf3
00202fd4 g     F .text	00000038 GetDevtable
0020b7c8 g     F .text	000000dc strcmp
002166d0 g       *ABS*	00000000 __flash_rodata_start
002166d0 g       *ABS*	00000000 __DTOR_LIST__
0020242c g     F .text	00000074 XferCtrlND
00200d34 g     F .text	000000a0 SGTL5000_Reg_Wr
0020f724 g     F .text	00000088 .hidden __nedf2
00201d7c g     F .text	000000a8 MAX3421E_reset
00211884 g     F .text	00000038 alt_irq_init
0021140c g     F .text	00000084 alt_release_fd
00216b10 g     O .rodata	00000100 .hidden __clz_tab
00409c94 g     O .bss	00000004 _PathLocale
002007ec g     F .text	00000038 setdfjk
0021633c g     F .text	00000014 atexit
002032cc g     F .text	000000bc .hidden __gesf2
0020d0f4 g     F .text	00000060 _write_r
00208fa4 g     F .text	00000018 setlocale
00409c28 g     O .rwdata	00000004 _impure_ptr
00409cb0 g     O .bss	00000004 alt_argc
00207e10 g     F .text	0000021c __sflush_r
002155f8 g     F .text	00000060 _do_dtors
00208f90 g     F .text	00000008 __locale_cjk_lang
00212410 g     F .text	00000038 alt_avalon_i2c_master_target_get
00212320 g     F .text	000000f0 alt_avalon_i2c_send_address
00201b90 g     F .text	000000c0 MAXbytes_wr
00200020 g       .exceptions	00000000 alt_irq_entry
0020aa20 g     F .text	00000064 __ulp
00208450 g     F .text	00000018 __fp_unlock_all
00409c3c g     O .rwdata	00000008 alt_fs_list
002145b0 g     F .text	000002d8 alt_onchip_flash_write_block
00202eec g     F .text	0000002c CDCProbe
00200020 g       *ABS*	00000000 __ram_exceptions_start
00208fbc g     F .text	0000000c localeconv
002004b8 g     F .text	0000004c setLED
00202fb4 g     F .text	00000020 GetUsbTaskState
002134ec g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
002157c4 g     F .text	00000050 alt_ic_isr_register
00211d50 g     F .text	0000004c alt_avalon_i2c_disable
0021670c g     O .rodata	00000010 devclasses
00409c7c g       *ABS*	00000000 _edata
00201a7c g     F .text	00000038 HIDKEventHandler
00214888 g     F .text	000002d8 alt_onchip_flash_write
00200dd4 g     F .text	00000310 setup_i2c
00409f64 g       *ABS*	00000000 _end
002156e8 g     F .text	00000068 alt_flash_open_dev
002020f8 g     F .text	000000cc MaxIntHandler
0020d388 g     F .text	00000164 __fputwc
00200230 g       *ABS*	00000000 __ram_exceptions_end
00213a8c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00211d9c g     F .text	000000b0 alt_avalon_i2c_master_config_get
00201ab4 g     F .text	00000034 SPI_init
0021589c g     F .text	0000008c alt_ic_irq_disable
0020b6e8 g     F .text	0000007c __swrite
00409c34 g     O .rwdata	00000004 __malloc_trim_threshold
00208f84 g     F .text	0000000c __locale_msgcharset
00216350 g     F .text	00000038 exit
00208e28 g     F .text	000000c4 _fwalk_reent
00203d0c g     F .text	000000f0 .hidden __floatunsisf
0020a824 g     F .text	000001fc __mdiff
00215750 g     F .text	00000054 alt_flash_close_dev
00203174 g     F .text	00000074 .hidden __modsi3
00410000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
0020842c g     F .text	00000004 __sfp_lock_release
00211fac g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0021223c g     F .text	000000e4 alt_avalon_i2c_cmd_write
00203090 g     F .text	00000060 .hidden __fixunssfsi
00201a44 g     F .text	00000038 HIDMEventHandler
0021669c g     F .text	00000034 _exit
002151ec g     F .text	0000012c alt_alarm_start
00200554 g     F .text	00000120 printSignedHex0
00208fc8 g     F .text	000001bc __smakebuf_r
00203fc0 g     F .text	00000098 strlen
00215cec g     F .text	0000015c open
0020f7ac g     F .text	000000dc .hidden __gedf2
00216074 g     F .text	0000003c alt_putchar
00409c38 g     O .rwdata	00000004 __wctomb
0020b9a0 g     F .text	00000018 __sprint_r
002157a4 g     F .text	00000020 alt_icache_flush_all
00409c78 g     O .rwdata	00000004 alt_priority_mask
00215814 g     F .text	00000088 alt_ic_irq_enable
00206334 g     F .text	0000001c __vfprintf_internal
002010e4 g     F .text	00000408 HIDMProbe
0020d88c g     F .text	0000005c _wctomb_r
00201ae8 g     F .text	00000028 SPI_wr
002101e8 g     F .text	000008fc .hidden __subdf3
0020a1c4 g     F .text	000000b0 __lo0bits
00409c58 g     O .rwdata	00000008 alt_alarm_list
00215598 g     F .text	00000060 _do_ctors
0020d79c g     F .text	000000c0 wcrtomb
00210d24 g     F .text	000000d8 close
002134a0 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0021106c g     F .text	00000084 alt_load
00212738 g     F .text	0000013c alt_avalon_i2c_master_rx
0020d510 g     F .text	00000080 fputwc
00208430 g     F .text	00000004 __sinit_lock_acquire
002021f8 g     F .text	0000014c XferCtrlReq
00209f10 g     F .text	00000148 __multadd
00209ee8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200000:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  200004:	08408c14 	ori	at,at,560
    jmp r1
  200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  20002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  20003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  20004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  20005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  20006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  20007c:	10000326 	beq	r2,zero,20008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  200080:	20000226 	beq	r4,zero,20008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200084:	02000fc0 	call	2000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  200088:	00000706 	br	2000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  20008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  200098:	02001d00 	call	2001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  20009c:	1000021e 	bne	r2,zero,2000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000f8:	ef80083a 	eret

002000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000fc:	defff904 	addi	sp,sp,-28
  200100:	dfc00615 	stw	ra,24(sp)
  200104:	df000515 	stw	fp,20(sp)
  200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  20010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  200110:	0005313a 	rdctl	r2,ipending
  200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  20011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  200124:	00800044 	movi	r2,1
  200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  20012c:	e0fffb17 	ldw	r3,-20(fp)
  200130:	e0bffc17 	ldw	r2,-16(fp)
  200134:	1884703a 	and	r2,r3,r2
  200138:	10001426 	beq	r2,zero,20018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  20013c:	00801074 	movhi	r2,65
  200140:	10a79904 	addi	r2,r2,-24988
  200144:	e0fffd17 	ldw	r3,-12(fp)
  200148:	180690fa 	slli	r3,r3,3
  20014c:	10c5883a 	add	r2,r2,r3
  200150:	10c00017 	ldw	r3,0(r2)
  200154:	00801074 	movhi	r2,65
  200158:	10a79904 	addi	r2,r2,-24988
  20015c:	e13ffd17 	ldw	r4,-12(fp)
  200160:	200890fa 	slli	r4,r4,3
  200164:	1105883a 	add	r2,r2,r4
  200168:	10800104 	addi	r2,r2,4
  20016c:	10800017 	ldw	r2,0(r2)
  200170:	1009883a 	mov	r4,r2
  200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  20017c:	0005313a 	rdctl	r2,ipending
  200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  200184:	e0bfff17 	ldw	r2,-4(fp)
  200188:	00000706 	br	2001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  20018c:	e0bffc17 	ldw	r2,-16(fp)
  200190:	1085883a 	add	r2,r2,r2
  200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  200198:	e0bffd17 	ldw	r2,-12(fp)
  20019c:	10800044 	addi	r2,r2,1
  2001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2001a4:	003fe106 	br	20012c <_gp+0xffdee518>

    active = alt_irq_pending ();
  2001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2001ac:	e0bffb17 	ldw	r2,-20(fp)
  2001b0:	103fdb1e 	bne	r2,zero,200120 <_gp+0xffdee50c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2001b4:	0001883a 	nop
}
  2001b8:	0001883a 	nop
  2001bc:	e037883a 	mov	sp,fp
  2001c0:	dfc00117 	ldw	ra,4(sp)
  2001c4:	df000017 	ldw	fp,0(sp)
  2001c8:	dec00204 	addi	sp,sp,8
  2001cc:	f800283a 	ret

002001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2001d0:	defffb04 	addi	sp,sp,-20
  2001d4:	dfc00415 	stw	ra,16(sp)
  2001d8:	df000315 	stw	fp,12(sp)
  2001dc:	df000304 	addi	fp,sp,12
  2001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  2001e4:	00bfffc4 	movi	r2,-1
  2001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  2001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  2001f0:	d0a02d17 	ldw	r2,-32588(gp)
  2001f4:	10000726 	beq	r2,zero,200214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  2001f8:	d0a02d17 	ldw	r2,-32588(gp)
  2001fc:	e0fffd17 	ldw	r3,-12(fp)
  200200:	e1bffe17 	ldw	r6,-8(fp)
  200204:	e17fff17 	ldw	r5,-4(fp)
  200208:	1809883a 	mov	r4,r3
  20020c:	103ee83a 	callr	r2
  200210:	00000206 	br	20021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  200214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  200218:	0005883a 	mov	r2,zero
}
  20021c:	e037883a 	mov	sp,fp
  200220:	dfc00117 	ldw	ra,4(sp)
  200224:	df000017 	ldw	fp,0(sp)
  200228:	dec00204 	addi	sp,sp,8
  20022c:	f800283a 	ret

Disassembly of section .text:

00200230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200230:	06c01074 	movhi	sp,65
    ori sp, sp, %lo(__alt_stack_pointer)
  200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  200238:	06801074 	movhi	gp,65
    ori gp, gp, %lo(_gp)
  20023c:	d6870514 	ori	gp,gp,7188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200240:	00801034 	movhi	r2,64
    ori r2, r2, %lo(__bss_start)
  200244:	10a71f14 	ori	r2,r2,40060

    movhi r3, %hi(__bss_end)
  200248:	00c01034 	movhi	r3,64
    ori r3, r3, %lo(__bss_end)
  20024c:	18e7d914 	ori	r3,r3,40804

    beq r2, r3, 1f
  200250:	10c00326 	beq	r2,r3,200260 <_start+0x30>

0:
    stw zero, (r2)
  200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20025c:	10fffd36 	bltu	r2,r3,200254 <_gp+0xffdee640>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200260:	021106c0 	call	21106c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200264:	02112080 	call	211208 <alt_main>

00200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200268:	003fff06 	br	200268 <_gp+0xffdee654>

0020026c <main>:
#include "main.h"

int main(){
  20026c:	defffe04 	addi	sp,sp,-8
  200270:	dfc00115 	stw	ra,4(sp)
  200274:	df000015 	stw	fp,0(sp)
  200278:	d839883a 	mov	fp,sp
	setup_i2c();
  20027c:	0200dd40 	call	200dd4 <setup_i2c>
	setLED(9);
  200280:	01000244 	movi	r4,9
  200284:	02004b80 	call	2004b8 <setLED>
	setLED(8);
  200288:	01000204 	movi	r4,8
  20028c:	02004b80 	call	2004b8 <setLED>

	usleep(10000000);
  200290:	01002674 	movhi	r4,153
  200294:	2125a004 	addi	r4,r4,-27008
  200298:	02116e40 	call	2116e4 <usleep>
	setLED(7);
  20029c:	010001c4 	movi	r4,7
  2002a0:	02004b80 	call	2004b8 <setLED>
	setLED(6);
  2002a4:	01000184 	movi	r4,6
  2002a8:	02004b80 	call	2004b8 <setLED>
	usb_init();
  2002ac:	02008240 	call	200824 <usb_init>

return 0;
  2002b0:	0005883a 	mov	r2,zero
}
  2002b4:	e037883a 	mov	sp,fp
  2002b8:	dfc00117 	ldw	ra,4(sp)
  2002bc:	df000017 	ldw	fp,0(sp)
  2002c0:	dec00204 	addi	sp,sp,8
  2002c4:	f800283a 	ret

002002c8 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
  2002c8:	defff604 	addi	sp,sp,-40
  2002cc:	dfc00915 	stw	ra,36(sp)
  2002d0:	df000815 	stw	fp,32(sp)
  2002d4:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
  2002d8:	00bfffc4 	movi	r2,-1
  2002dc:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
  2002e0:	01000874 	movhi	r4,33
  2002e4:	2119c704 	addi	r4,r4,26396
  2002e8:	0203fac0 	call	203fac <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
  2002ec:	00800044 	movi	r2,1
  2002f0:	e0bffd05 	stb	r2,-12(fp)
  2002f4:	00001f06 	br	200374 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
  2002f8:	e0bffd03 	ldbu	r2,-12(fp)
  2002fc:	1009883a 	mov	r4,r2
  200300:	0202fd40 	call	202fd4 <GetDevtable>
  200304:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
  200308:	e0bffe17 	ldw	r2,-8(fp)
  20030c:	10800017 	ldw	r2,0(r2)
  200310:	10001526 	beq	r2,zero,200368 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
  200314:	e0bffd03 	ldbu	r2,-12(fp)
  200318:	100b883a 	mov	r5,r2
  20031c:	01000874 	movhi	r4,33
  200320:	2119d004 	addi	r4,r4,26432
  200324:	0203e900 	call	203e90 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
  200328:	e0bffe17 	ldw	r2,-8(fp)
  20032c:	10800103 	ldbu	r2,4(r2)
  200330:	10c03fcc 	andi	r3,r2,255
  200334:	00800874 	movhi	r2,33
  200338:	1099c304 	addi	r2,r2,26380
  20033c:	18c7883a 	add	r3,r3,r3
  200340:	18c7883a 	add	r3,r3,r3
  200344:	10c5883a 	add	r2,r2,r3
  200348:	10800017 	ldw	r2,0(r2)
  20034c:	100b883a 	mov	r5,r2
  200350:	01000874 	movhi	r4,33
  200354:	2119d304 	addi	r4,r4,26444
  200358:	0203e900 	call	203e90 <printf>
			device = tpl_ptr->devclass;
  20035c:	e0bffe17 	ldw	r2,-8(fp)
  200360:	10800103 	ldbu	r2,4(r2)
  200364:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
  200368:	e0bffd03 	ldbu	r2,-12(fp)
  20036c:	10800044 	addi	r2,r2,1
  200370:	e0bffd05 	stb	r2,-12(fp)
  200374:	e0bffd03 	ldbu	r2,-12(fp)
  200378:	10800230 	cmpltui	r2,r2,8
  20037c:	103fde1e 	bne	r2,zero,2002f8 <_gp+0xffdee6e4>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
  200380:	d0a00003 	ldbu	r2,-32768(gp)
  200384:	11003fcc 	andi	r4,r2,255
  200388:	d0a01a43 	ldbu	r2,-32663(gp)
  20038c:	10803fcc 	andi	r2,r2,255
  200390:	e0ffff44 	addi	r3,fp,-3
  200394:	d8c00415 	stw	r3,16(sp)
  200398:	00c00044 	movi	r3,1
  20039c:	d8c00315 	stw	r3,12(sp)
  2003a0:	d8800215 	stw	r2,8(sp)
  2003a4:	d8000115 	stw	zero,4(sp)
  2003a8:	d8000015 	stw	zero,0(sp)
  2003ac:	01c00084 	movi	r7,2
  2003b0:	01802844 	movi	r6,161
  2003b4:	000b883a 	mov	r5,zero
  2003b8:	02021f80 	call	2021f8 <XferCtrlReq>
  2003bc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
  2003c0:	e0bfff03 	ldbu	r2,-4(fp)
  2003c4:	10000926 	beq	r2,zero,2003ec <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
  2003c8:	01000874 	movhi	r4,33
  2003cc:	2119d504 	addi	r4,r4,26452
  2003d0:	0203e900 	call	203e90 <printf>
		printf("%x \n", rcode);
  2003d4:	e0bfff03 	ldbu	r2,-4(fp)
  2003d8:	100b883a 	mov	r5,r2
  2003dc:	01000874 	movhi	r4,33
  2003e0:	2119dc04 	addi	r4,r4,26480
  2003e4:	0203e900 	call	203e90 <printf>
  2003e8:	00000906 	br	200410 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
  2003ec:	01000874 	movhi	r4,33
  2003f0:	2119de04 	addi	r4,r4,26488
  2003f4:	0203e900 	call	203e90 <printf>
		printf("%x \n", tmpbyte);
  2003f8:	e0bfff43 	ldbu	r2,-3(fp)
  2003fc:	10803fcc 	andi	r2,r2,255
  200400:	100b883a 	mov	r5,r2
  200404:	01000874 	movhi	r4,33
  200408:	2119dc04 	addi	r4,r4,26480
  20040c:	0203e900 	call	203e90 <printf>
	}
	printf("Protocol: ");
  200410:	01000874 	movhi	r4,33
  200414:	2119e204 	addi	r4,r4,26504
  200418:	0203e900 	call	203e90 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
  20041c:	d0a00003 	ldbu	r2,-32768(gp)
  200420:	11003fcc 	andi	r4,r2,255
  200424:	d0a01a43 	ldbu	r2,-32663(gp)
  200428:	10803fcc 	andi	r2,r2,255
  20042c:	e0ffff44 	addi	r3,fp,-3
  200430:	d8c00415 	stw	r3,16(sp)
  200434:	00c00044 	movi	r3,1
  200438:	d8c00315 	stw	r3,12(sp)
  20043c:	d8800215 	stw	r2,8(sp)
  200440:	d8000115 	stw	zero,4(sp)
  200444:	d8000015 	stw	zero,0(sp)
  200448:	01c000c4 	movi	r7,3
  20044c:	01802844 	movi	r6,161
  200450:	000b883a 	mov	r5,zero
  200454:	02021f80 	call	2021f8 <XferCtrlReq>
  200458:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
  20045c:	e0bfff03 	ldbu	r2,-4(fp)
  200460:	10000926 	beq	r2,zero,200488 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
  200464:	01000874 	movhi	r4,33
  200468:	2119e504 	addi	r4,r4,26516
  20046c:	0203e900 	call	203e90 <printf>
		printf("%x \n", rcode);
  200470:	e0bfff03 	ldbu	r2,-4(fp)
  200474:	100b883a 	mov	r5,r2
  200478:	01000874 	movhi	r4,33
  20047c:	2119dc04 	addi	r4,r4,26480
  200480:	0203e900 	call	203e90 <printf>
  200484:	00000606 	br	2004a0 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
  200488:	e0bfff43 	ldbu	r2,-3(fp)
  20048c:	10803fcc 	andi	r2,r2,255
  200490:	100b883a 	mov	r5,r2
  200494:	01000874 	movhi	r4,33
  200498:	2119ec04 	addi	r4,r4,26544
  20049c:	0203e900 	call	203e90 <printf>
	}
	return device;
  2004a0:	e0bffd43 	ldbu	r2,-11(fp)
}
  2004a4:	e037883a 	mov	sp,fp
  2004a8:	dfc00117 	ldw	ra,4(sp)
  2004ac:	df000017 	ldw	fp,0(sp)
  2004b0:	dec00204 	addi	sp,sp,8
  2004b4:	f800283a 	ret

002004b8 <setLED>:

void setLED(int LED) {
  2004b8:	defffe04 	addi	sp,sp,-8
  2004bc:	df000115 	stw	fp,4(sp)
  2004c0:	df000104 	addi	fp,sp,4
  2004c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
  2004c8:	00801074 	movhi	r2,65
  2004cc:	10843004 	addi	r2,r2,4288
  2004d0:	10c00037 	ldwio	r3,0(r2)
  2004d4:	01000044 	movi	r4,1
  2004d8:	e0bfff17 	ldw	r2,-4(fp)
  2004dc:	2084983a 	sll	r2,r4,r2
  2004e0:	1886b03a 	or	r3,r3,r2
  2004e4:	00801074 	movhi	r2,65
  2004e8:	10843004 	addi	r2,r2,4288
  2004ec:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
  2004f0:	0001883a 	nop
  2004f4:	e037883a 	mov	sp,fp
  2004f8:	df000017 	ldw	fp,0(sp)
  2004fc:	dec00104 	addi	sp,sp,4
  200500:	f800283a 	ret

00200504 <clearLED>:

void clearLED(int LED) {
  200504:	defffe04 	addi	sp,sp,-8
  200508:	df000115 	stw	fp,4(sp)
  20050c:	df000104 	addi	fp,sp,4
  200510:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
  200514:	00801074 	movhi	r2,65
  200518:	10843004 	addi	r2,r2,4288
  20051c:	10c00037 	ldwio	r3,0(r2)
  200520:	01000044 	movi	r4,1
  200524:	e0bfff17 	ldw	r2,-4(fp)
  200528:	2084983a 	sll	r2,r4,r2
  20052c:	0084303a 	nor	r2,zero,r2
  200530:	1886703a 	and	r3,r3,r2
  200534:	00801074 	movhi	r2,65
  200538:	10843004 	addi	r2,r2,4288
  20053c:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
  200540:	0001883a 	nop
  200544:	e037883a 	mov	sp,fp
  200548:	df000017 	ldw	fp,0(sp)
  20054c:	dec00104 	addi	sp,sp,4
  200550:	f800283a 	ret

00200554 <printSignedHex0>:

void printSignedHex0(signed char value) {
  200554:	defffc04 	addi	sp,sp,-16
  200558:	dfc00315 	stw	ra,12(sp)
  20055c:	df000215 	stw	fp,8(sp)
  200560:	df000204 	addi	fp,sp,8
  200564:	2005883a 	mov	r2,r4
  200568:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  20056c:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
  200570:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  200574:	00801074 	movhi	r2,65
  200578:	10843404 	addi	r2,r2,4304
  20057c:	10800037 	ldwio	r2,0(r2)
  200580:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
  200584:	e0bfff07 	ldb	r2,-4(fp)
  200588:	1000060e 	bge	r2,zero,2005a4 <printSignedHex0+0x50>
		setLED(11);
  20058c:	010002c4 	movi	r4,11
  200590:	02004b80 	call	2004b8 <setLED>
		value = -value;
  200594:	e0bfff03 	ldbu	r2,-4(fp)
  200598:	0085c83a 	sub	r2,zero,r2
  20059c:	e0bfff05 	stb	r2,-4(fp)
  2005a0:	00000206 	br	2005ac <printSignedHex0+0x58>
	} else {
		clearLED(11);
  2005a4:	010002c4 	movi	r4,11
  2005a8:	02005040 	call	200504 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  2005ac:	e0bfff03 	ldbu	r2,-4(fp)
  2005b0:	108018c4 	addi	r2,r2,99
  2005b4:	10803fcc 	andi	r2,r2,255
  2005b8:	108031f0 	cmpltui	r2,r2,199
  2005bc:	1000031e 	bne	r2,zero,2005cc <printSignedHex0+0x78>
		setLED(13);
  2005c0:	01000344 	movi	r4,13
  2005c4:	02004b80 	call	2004b8 <setLED>
  2005c8:	00000206 	br	2005d4 <printSignedHex0+0x80>
	else
		clearLED(13);
  2005cc:	01000344 	movi	r4,13
  2005d0:	02005040 	call	200504 <clearLED>

	value = value % 100;
  2005d4:	e0bfff07 	ldb	r2,-4(fp)
  2005d8:	01401904 	movi	r5,100
  2005dc:	1009883a 	mov	r4,r2
  2005e0:	02031740 	call	203174 <__modsi3>
  2005e4:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  2005e8:	e0bfff07 	ldb	r2,-4(fp)
  2005ec:	01400284 	movi	r5,10
  2005f0:	1009883a 	mov	r4,r2
  2005f4:	02030f00 	call	2030f0 <__divsi3>
  2005f8:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
  2005fc:	e0bfff07 	ldb	r2,-4(fp)
  200600:	01400284 	movi	r5,10
  200604:	1009883a 	mov	r4,r2
  200608:	02031740 	call	203174 <__modsi3>
  20060c:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
  200610:	e0bffe8b 	ldhu	r2,-6(fp)
  200614:	10803fcc 	andi	r2,r2,255
  200618:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
  20061c:	e0bffe03 	ldbu	r2,-8(fp)
  200620:	1004933a 	slli	r2,r2,12
  200624:	1007883a 	mov	r3,r2
  200628:	e0bffe8b 	ldhu	r2,-6(fp)
  20062c:	1884b03a 	or	r2,r3,r2
  200630:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
  200634:	e0bffe43 	ldbu	r2,-7(fp)
  200638:	1004923a 	slli	r2,r2,8
  20063c:	1007883a 	mov	r3,r2
  200640:	e0bffe8b 	ldhu	r2,-6(fp)
  200644:	1884b03a 	or	r2,r3,r2
  200648:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  20064c:	e0fffe8b 	ldhu	r3,-6(fp)
  200650:	00801074 	movhi	r2,65
  200654:	10843404 	addi	r2,r2,4304
  200658:	10c00035 	stwio	r3,0(r2)
}
  20065c:	0001883a 	nop
  200660:	e037883a 	mov	sp,fp
  200664:	dfc00117 	ldw	ra,4(sp)
  200668:	df000017 	ldw	fp,0(sp)
  20066c:	dec00204 	addi	sp,sp,8
  200670:	f800283a 	ret

00200674 <printSignedHex1>:

void printSignedHex1(signed char value) {
  200674:	defffb04 	addi	sp,sp,-20
  200678:	dfc00415 	stw	ra,16(sp)
  20067c:	df000315 	stw	fp,12(sp)
  200680:	df000304 	addi	fp,sp,12
  200684:	2005883a 	mov	r2,r4
  200688:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  20068c:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
  200690:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  200694:	00801074 	movhi	r2,65
  200698:	10843404 	addi	r2,r2,4304
  20069c:	10800037 	ldwio	r2,0(r2)
  2006a0:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
  2006a4:	e0bfff07 	ldb	r2,-4(fp)
  2006a8:	1000060e 	bge	r2,zero,2006c4 <printSignedHex1+0x50>
		setLED(10);
  2006ac:	01000284 	movi	r4,10
  2006b0:	02004b80 	call	2004b8 <setLED>
		value = -value;
  2006b4:	e0bfff03 	ldbu	r2,-4(fp)
  2006b8:	0085c83a 	sub	r2,zero,r2
  2006bc:	e0bfff05 	stb	r2,-4(fp)
  2006c0:	00000206 	br	2006cc <printSignedHex1+0x58>
	} else {
		clearLED(10);
  2006c4:	01000284 	movi	r4,10
  2006c8:	02005040 	call	200504 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  2006cc:	e0bfff03 	ldbu	r2,-4(fp)
  2006d0:	108018c4 	addi	r2,r2,99
  2006d4:	10803fcc 	andi	r2,r2,255
  2006d8:	108031f0 	cmpltui	r2,r2,199
  2006dc:	1000031e 	bne	r2,zero,2006ec <printSignedHex1+0x78>
		setLED(12);
  2006e0:	01000304 	movi	r4,12
  2006e4:	02004b80 	call	2004b8 <setLED>
  2006e8:	00000206 	br	2006f4 <printSignedHex1+0x80>
	else
		clearLED(12);
  2006ec:	01000304 	movi	r4,12
  2006f0:	02005040 	call	200504 <clearLED>

	value = value % 100;
  2006f4:	e0bfff07 	ldb	r2,-4(fp)
  2006f8:	01401904 	movi	r5,100
  2006fc:	1009883a 	mov	r4,r2
  200700:	02031740 	call	203174 <__modsi3>
  200704:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200708:	e0bfff07 	ldb	r2,-4(fp)
  20070c:	01400284 	movi	r5,10
  200710:	1009883a 	mov	r4,r2
  200714:	02030f00 	call	2030f0 <__divsi3>
  200718:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  20071c:	e0bfff07 	ldb	r2,-4(fp)
  200720:	01400284 	movi	r5,10
  200724:	1009883a 	mov	r4,r2
  200728:	02031740 	call	203174 <__modsi3>
  20072c:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
  200730:	e0bfff07 	ldb	r2,-4(fp)
  200734:	01400284 	movi	r5,10
  200738:	1009883a 	mov	r4,r2
  20073c:	02030f00 	call	2030f0 <__divsi3>
  200740:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200744:	e0bfff07 	ldb	r2,-4(fp)
  200748:	01400284 	movi	r5,10
  20074c:	1009883a 	mov	r4,r2
  200750:	02031740 	call	203174 <__modsi3>
  200754:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
  200758:	e0bffe17 	ldw	r2,-8(fp)
  20075c:	10bfc00c 	andi	r2,r2,65280
  200760:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
  200764:	e0bffd03 	ldbu	r2,-12(fp)
  200768:	1004913a 	slli	r2,r2,4
  20076c:	1007883a 	mov	r3,r2
  200770:	e0bffe17 	ldw	r2,-8(fp)
  200774:	10c4b03a 	or	r2,r2,r3
  200778:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
  20077c:	e0bffd43 	ldbu	r2,-11(fp)
  200780:	e0fffe17 	ldw	r3,-8(fp)
  200784:	1884b03a 	or	r2,r3,r2
  200788:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  20078c:	e0fffe17 	ldw	r3,-8(fp)
  200790:	00801074 	movhi	r2,65
  200794:	10843404 	addi	r2,r2,4304
  200798:	10c00035 	stwio	r3,0(r2)
}
  20079c:	0001883a 	nop
  2007a0:	e037883a 	mov	sp,fp
  2007a4:	dfc00117 	ldw	ra,4(sp)
  2007a8:	df000017 	ldw	fp,0(sp)
  2007ac:	dec00204 	addi	sp,sp,8
  2007b0:	f800283a 	ret

002007b4 <setKeycode>:

void setKeycode(WORD keycode)
{
  2007b4:	defffe04 	addi	sp,sp,-8
  2007b8:	df000115 	stw	fp,4(sp)
  2007bc:	df000104 	addi	fp,sp,4
  2007c0:	2005883a 	mov	r2,r4
  2007c4:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
  2007c8:	e0ffff0b 	ldhu	r3,-4(fp)
  2007cc:	00801074 	movhi	r2,65
  2007d0:	10843804 	addi	r2,r2,4320
  2007d4:	10c00035 	stwio	r3,0(r2)
}
  2007d8:	0001883a 	nop
  2007dc:	e037883a 	mov	sp,fp
  2007e0:	df000017 	ldw	fp,0(sp)
  2007e4:	dec00104 	addi	sp,sp,4
  2007e8:	f800283a 	ret

002007ec <setdfjk>:
void setdfjk(BYTE keycode)
{
  2007ec:	defffe04 	addi	sp,sp,-8
  2007f0:	df000115 	stw	fp,4(sp)
  2007f4:	df000104 	addi	fp,sp,4
  2007f8:	2005883a 	mov	r2,r4
  2007fc:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DFJK_BASE, keycode);
  200800:	e0ffff03 	ldbu	r3,-4(fp)
  200804:	00801074 	movhi	r2,65
  200808:	10842804 	addi	r2,r2,4256
  20080c:	10c00035 	stwio	r3,0(r2)
}
  200810:	0001883a 	nop
  200814:	e037883a 	mov	sp,fp
  200818:	df000017 	ldw	fp,0(sp)
  20081c:	dec00104 	addi	sp,sp,4
  200820:	f800283a 	ret

00200824 <usb_init>:
int usb_init() {
  200824:	defff604 	addi	sp,sp,-40
  200828:	dfc00915 	stw	ra,36(sp)
  20082c:	df000815 	stw	fp,32(sp)
  200830:	df000804 	addi	fp,sp,32
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
  200834:	e03ff805 	stb	zero,-32(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
  200838:	e03ff845 	stb	zero,-31(fp)
	BYTE device;
	BYTE dfjk = 0;
  20083c:	e03ff8c5 	stb	zero,-29(fp)
	WORD temp_keycode=0;
  200840:	e03ff90d 	sth	zero,-28(fp)
	printf("initializing MAX3421E...\n");
  200844:	01000874 	movhi	r4,33
  200848:	2119ee04 	addi	r4,r4,26552
  20084c:	0203fac0 	call	203fac <puts>
	MAX3421E_init();
  200850:	0201fd00 	call	201fd0 <MAX3421E_init>
	printf("initializing USB...\n");
  200854:	01000874 	movhi	r4,33
  200858:	2119f504 	addi	r4,r4,26580
  20085c:	0203fac0 	call	203fac <puts>
	USB_init();
  200860:	02027ac0 	call	2027ac <USB_init>
	while (1) {
		MAX3421E_Task();
  200864:	020208c0 	call	20208c <MAX3421E_Task>
		USB_Task();
  200868:	02028440 	call	202844 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
  20086c:	0202fb40 	call	202fb4 <GetUsbTaskState>
  200870:	10803fcc 	andi	r2,r2,255
  200874:	10801018 	cmpnei	r2,r2,64
  200878:	1000dd1e 	bne	r2,zero,200bf0 <usb_init+0x3cc>
			if (!runningdebugflag) {
  20087c:	e0bff803 	ldbu	r2,-32(fp)
  200880:	1000071e 	bne	r2,zero,2008a0 <usb_init+0x7c>
				runningdebugflag = 1;
  200884:	00800044 	movi	r2,1
  200888:	e0bff805 	stb	r2,-32(fp)
				setLED(9);
  20088c:	01000244 	movi	r4,9
  200890:	02004b80 	call	2004b8 <setLED>
				device = GetDriverandReport();
  200894:	02002c80 	call	2002c8 <GetDriverandReport>
  200898:	e0bff885 	stb	r2,-30(fp)
  20089c:	003ff106 	br	200864 <_gp+0xffdeec50>
			} else if (device == 1) {
  2008a0:	e0bff883 	ldbu	r2,-30(fp)
  2008a4:	10800058 	cmpnei	r2,r2,1
  2008a8:	1000751e 	bne	r2,zero,200a80 <usb_init+0x25c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
  2008ac:	e0bffd44 	addi	r2,fp,-11
  2008b0:	1009883a 	mov	r4,r2
  2008b4:	02019bc0 	call	2019bc <kbdPoll>
  2008b8:	e0bffb05 	stb	r2,-20(fp)
		printf(".");
  2008bc:	01000b84 	movi	r4,46
  2008c0:	0203ed40 	call	203ed4 <putchar>
				if (rcode == hrNAK) {
  2008c4:	e0bffb03 	ldbu	r2,-20(fp)
  2008c8:	10800118 	cmpnei	r2,r2,4
  2008cc:	1000e826 	beq	r2,zero,200c70 <usb_init+0x44c>
					continue; //NAK means no new data
				} else if (rcode) {
  2008d0:	e0bffb03 	ldbu	r2,-20(fp)
  2008d4:	10000926 	beq	r2,zero,2008fc <usb_init+0xd8>
					printf("Rcode: ");
  2008d8:	01000874 	movhi	r4,33
  2008dc:	2119fa04 	addi	r4,r4,26600
  2008e0:	0203e900 	call	203e90 <printf>
					printf("%x \n", rcode);
  2008e4:	e0bffb03 	ldbu	r2,-20(fp)
  2008e8:	100b883a 	mov	r5,r2
  2008ec:	01000874 	movhi	r4,33
  2008f0:	2119dc04 	addi	r4,r4,26480
  2008f4:	0203e900 	call	203e90 <printf>
					continue;
  2008f8:	0000e006 	br	200c7c <usb_init+0x458>
				}
				printf("dfjk: ");
  2008fc:	01000874 	movhi	r4,33
  200900:	2119fc04 	addi	r4,r4,26608
  200904:	0203e900 	call	203e90 <printf>
				for (int i = 0; i < 6; i++) {
  200908:	e03ffa15 	stw	zero,-24(fp)
  20090c:	00003c06 	br	200a00 <usb_init+0x1dc>
					if (kbdbuf.keycode[i] == 0x7 )
  200910:	e0fffdc4 	addi	r3,fp,-9
  200914:	e0bffa17 	ldw	r2,-24(fp)
  200918:	1885883a 	add	r2,r3,r2
  20091c:	10800003 	ldbu	r2,0(r2)
  200920:	10803fcc 	andi	r2,r2,255
  200924:	108001d8 	cmpnei	r2,r2,7
  200928:	1000051e 	bne	r2,zero,200940 <usb_init+0x11c>
					{
						dfjk |= 1<<7;
  20092c:	e0fff8c3 	ldbu	r3,-29(fp)
  200930:	00bfe004 	movi	r2,-128
  200934:	1884b03a 	or	r2,r3,r2
  200938:	e0bff8c5 	stb	r2,-29(fp)
  20093c:	00002d06 	br	2009f4 <usb_init+0x1d0>
					}
					else if (kbdbuf.keycode[i] == 0x9)
  200940:	e0fffdc4 	addi	r3,fp,-9
  200944:	e0bffa17 	ldw	r2,-24(fp)
  200948:	1885883a 	add	r2,r3,r2
  20094c:	10800003 	ldbu	r2,0(r2)
  200950:	10803fcc 	andi	r2,r2,255
  200954:	10800258 	cmpnei	r2,r2,9
  200958:	1000041e 	bne	r2,zero,20096c <usb_init+0x148>
					{
						dfjk |= 1<<6;
  20095c:	e0bff8c3 	ldbu	r2,-29(fp)
  200960:	10801014 	ori	r2,r2,64
  200964:	e0bff8c5 	stb	r2,-29(fp)
  200968:	00002206 	br	2009f4 <usb_init+0x1d0>

					}
					else if(kbdbuf.keycode[i] == 0x19)
  20096c:	e0fffdc4 	addi	r3,fp,-9
  200970:	e0bffa17 	ldw	r2,-24(fp)
  200974:	1885883a 	add	r2,r3,r2
  200978:	10800003 	ldbu	r2,0(r2)
  20097c:	10803fcc 	andi	r2,r2,255
  200980:	10800658 	cmpnei	r2,r2,25
  200984:	1000041e 	bne	r2,zero,200998 <usb_init+0x174>
					{
						dfjk |= 1<<5;
  200988:	e0bff8c3 	ldbu	r2,-29(fp)
  20098c:	10800814 	ori	r2,r2,32
  200990:	e0bff8c5 	stb	r2,-29(fp)
  200994:	00001706 	br	2009f4 <usb_init+0x1d0>
						
					}
					else if(kbdbuf.keycode[i] == 0x1A)
  200998:	e0fffdc4 	addi	r3,fp,-9
  20099c:	e0bffa17 	ldw	r2,-24(fp)
  2009a0:	1885883a 	add	r2,r3,r2
  2009a4:	10800003 	ldbu	r2,0(r2)
  2009a8:	10803fcc 	andi	r2,r2,255
  2009ac:	10800698 	cmpnei	r2,r2,26
  2009b0:	1000041e 	bne	r2,zero,2009c4 <usb_init+0x1a0>
					{
						dfjk |= 1<<4;
  2009b4:	e0bff8c3 	ldbu	r2,-29(fp)
  2009b8:	10800414 	ori	r2,r2,16
  2009bc:	e0bff8c5 	stb	r2,-29(fp)
  2009c0:	00000c06 	br	2009f4 <usb_init+0x1d0>
					}
					else if(kbdbuf.keycode[i]!=0)
  2009c4:	e0fffdc4 	addi	r3,fp,-9
  2009c8:	e0bffa17 	ldw	r2,-24(fp)
  2009cc:	1885883a 	add	r2,r3,r2
  2009d0:	10800003 	ldbu	r2,0(r2)
  2009d4:	10803fcc 	andi	r2,r2,255
  2009d8:	10000626 	beq	r2,zero,2009f4 <usb_init+0x1d0>
					{
						temp_keycode = kbdbuf.keycode[i];
  2009dc:	e0fffdc4 	addi	r3,fp,-9
  2009e0:	e0bffa17 	ldw	r2,-24(fp)
  2009e4:	1885883a 	add	r2,r3,r2
  2009e8:	10800003 	ldbu	r2,0(r2)
  2009ec:	10803fcc 	andi	r2,r2,255
  2009f0:	e0bff90d 	sth	r2,-28(fp)
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("dfjk: ");
				for (int i = 0; i < 6; i++) {
  2009f4:	e0bffa17 	ldw	r2,-24(fp)
  2009f8:	10800044 	addi	r2,r2,1
  2009fc:	e0bffa15 	stw	r2,-24(fp)
  200a00:	e0bffa17 	ldw	r2,-24(fp)
  200a04:	10800190 	cmplti	r2,r2,6
  200a08:	103fc11e 	bne	r2,zero,200910 <_gp+0xffdeecfc>
					else if(kbdbuf.keycode[i]!=0)
					{
						temp_keycode = kbdbuf.keycode[i];
					}
				}
				setdfjk(dfjk);
  200a0c:	e0bff8c3 	ldbu	r2,-29(fp)
  200a10:	1009883a 	mov	r4,r2
  200a14:	02007ec0 	call	2007ec <setdfjk>
				printf("%x \n", dfjk);
  200a18:	e0bff8c3 	ldbu	r2,-29(fp)
  200a1c:	100b883a 	mov	r5,r2
  200a20:	01000874 	movhi	r4,33
  200a24:	2119dc04 	addi	r4,r4,26480
  200a28:	0203e900 	call	203e90 <printf>
				setKeycode(temp_keycode);
  200a2c:	e0bff90b 	ldhu	r2,-28(fp)
  200a30:	1009883a 	mov	r4,r2
  200a34:	02007b40 	call	2007b4 <setKeycode>
				if(kbdbuf.keycode[0])
  200a38:	e0bffdc3 	ldbu	r2,-9(fp)
  200a3c:	10803fcc 	andi	r2,r2,255
  200a40:	10000626 	beq	r2,zero,200a5c <usb_init+0x238>
				printSignedHex0(kbdbuf.keycode[0]);
  200a44:	e0bffdc3 	ldbu	r2,-9(fp)
  200a48:	10803fcc 	andi	r2,r2,255
  200a4c:	1080201c 	xori	r2,r2,128
  200a50:	10bfe004 	addi	r2,r2,-128
  200a54:	1009883a 	mov	r4,r2
  200a58:	02005540 	call	200554 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
  200a5c:	e0bffe03 	ldbu	r2,-8(fp)
  200a60:	10803fcc 	andi	r2,r2,255
  200a64:	1080201c 	xori	r2,r2,128
  200a68:	10bfe004 	addi	r2,r2,-128
  200a6c:	1009883a 	mov	r4,r2
  200a70:	02006740 	call	200674 <printSignedHex1>
				printf("\n");
  200a74:	01000284 	movi	r4,10
  200a78:	0203ed40 	call	203ed4 <putchar>
  200a7c:	003f7906 	br	200864 <_gp+0xffdeec50>
			}

			else if (device == 2) {
  200a80:	e0bff883 	ldbu	r2,-30(fp)
  200a84:	10800098 	cmpnei	r2,r2,2
  200a88:	103f761e 	bne	r2,zero,200864 <_gp+0xffdeec50>
				rcode = mousePoll(&buf);
  200a8c:	e0bffb44 	addi	r2,fp,-19
  200a90:	1009883a 	mov	r4,r2
  200a94:	02019340 	call	201934 <mousePoll>
  200a98:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
  200a9c:	e0bffb03 	ldbu	r2,-20(fp)
  200aa0:	10800118 	cmpnei	r2,r2,4
  200aa4:	10007426 	beq	r2,zero,200c78 <usb_init+0x454>
					//NAK means no new data
					continue;
				} else if (rcode) {
  200aa8:	e0bffb03 	ldbu	r2,-20(fp)
  200aac:	10000926 	beq	r2,zero,200ad4 <usb_init+0x2b0>
					printf("Rcode: ");
  200ab0:	01000874 	movhi	r4,33
  200ab4:	2119fa04 	addi	r4,r4,26600
  200ab8:	0203e900 	call	203e90 <printf>
					printf("%x \n", rcode);
  200abc:	e0bffb03 	ldbu	r2,-20(fp)
  200ac0:	100b883a 	mov	r5,r2
  200ac4:	01000874 	movhi	r4,33
  200ac8:	2119dc04 	addi	r4,r4,26480
  200acc:	0203e900 	call	203e90 <printf>
					continue;
  200ad0:	00006a06 	br	200c7c <usb_init+0x458>
				}
				printf("X displacement: ");
  200ad4:	01000874 	movhi	r4,33
  200ad8:	2119fe04 	addi	r4,r4,26616
  200adc:	0203e900 	call	203e90 <printf>
				printf("%d ", (signed char) buf.Xdispl);
  200ae0:	e0bffb83 	ldbu	r2,-18(fp)
  200ae4:	10803fcc 	andi	r2,r2,255
  200ae8:	1080201c 	xori	r2,r2,128
  200aec:	10bfe004 	addi	r2,r2,-128
  200af0:	100b883a 	mov	r5,r2
  200af4:	01000874 	movhi	r4,33
  200af8:	211a0304 	addi	r4,r4,26636
  200afc:	0203e900 	call	203e90 <printf>
				printSignedHex0((signed char) buf.Xdispl);
  200b00:	e0bffb83 	ldbu	r2,-18(fp)
  200b04:	10803fcc 	andi	r2,r2,255
  200b08:	1080201c 	xori	r2,r2,128
  200b0c:	10bfe004 	addi	r2,r2,-128
  200b10:	1009883a 	mov	r4,r2
  200b14:	02005540 	call	200554 <printSignedHex0>
				printf("Y displacement: ");
  200b18:	01000874 	movhi	r4,33
  200b1c:	211a0404 	addi	r4,r4,26640
  200b20:	0203e900 	call	203e90 <printf>
				printf("%d ", (signed char) buf.Ydispl);
  200b24:	e0bffbc3 	ldbu	r2,-17(fp)
  200b28:	10803fcc 	andi	r2,r2,255
  200b2c:	1080201c 	xori	r2,r2,128
  200b30:	10bfe004 	addi	r2,r2,-128
  200b34:	100b883a 	mov	r5,r2
  200b38:	01000874 	movhi	r4,33
  200b3c:	211a0304 	addi	r4,r4,26636
  200b40:	0203e900 	call	203e90 <printf>
				printSignedHex1((signed char) buf.Ydispl);
  200b44:	e0bffbc3 	ldbu	r2,-17(fp)
  200b48:	10803fcc 	andi	r2,r2,255
  200b4c:	1080201c 	xori	r2,r2,128
  200b50:	10bfe004 	addi	r2,r2,-128
  200b54:	1009883a 	mov	r4,r2
  200b58:	02006740 	call	200674 <printSignedHex1>
				printf("Buttons: ");
  200b5c:	01000874 	movhi	r4,33
  200b60:	211a0904 	addi	r4,r4,26660
  200b64:	0203e900 	call	203e90 <printf>
				printf("%x\n", buf.button);
  200b68:	e0bffb43 	ldbu	r2,-19(fp)
  200b6c:	10803fcc 	andi	r2,r2,255
  200b70:	100b883a 	mov	r5,r2
  200b74:	01000874 	movhi	r4,33
  200b78:	211a0c04 	addi	r4,r4,26672
  200b7c:	0203e900 	call	203e90 <printf>
				if (buf.button & 0x04)
  200b80:	e0bffb43 	ldbu	r2,-19(fp)
  200b84:	10803fcc 	andi	r2,r2,255
  200b88:	1080010c 	andi	r2,r2,4
  200b8c:	10000326 	beq	r2,zero,200b9c <usb_init+0x378>
					setLED(2);
  200b90:	01000084 	movi	r4,2
  200b94:	02004b80 	call	2004b8 <setLED>
  200b98:	00000206 	br	200ba4 <usb_init+0x380>
				else
					clearLED(2);
  200b9c:	01000084 	movi	r4,2
  200ba0:	02005040 	call	200504 <clearLED>
				if (buf.button & 0x02)
  200ba4:	e0bffb43 	ldbu	r2,-19(fp)
  200ba8:	10803fcc 	andi	r2,r2,255
  200bac:	1080008c 	andi	r2,r2,2
  200bb0:	10000326 	beq	r2,zero,200bc0 <usb_init+0x39c>
					setLED(1);
  200bb4:	01000044 	movi	r4,1
  200bb8:	02004b80 	call	2004b8 <setLED>
  200bbc:	00000206 	br	200bc8 <usb_init+0x3a4>
				else
					clearLED(1);
  200bc0:	01000044 	movi	r4,1
  200bc4:	02005040 	call	200504 <clearLED>
				if (buf.button & 0x01)
  200bc8:	e0bffb43 	ldbu	r2,-19(fp)
  200bcc:	10803fcc 	andi	r2,r2,255
  200bd0:	1080004c 	andi	r2,r2,1
  200bd4:	10000326 	beq	r2,zero,200be4 <usb_init+0x3c0>
					setLED(0);
  200bd8:	0009883a 	mov	r4,zero
  200bdc:	02004b80 	call	2004b8 <setLED>
  200be0:	003f2006 	br	200864 <_gp+0xffdeec50>
				else
					clearLED(0);
  200be4:	0009883a 	mov	r4,zero
  200be8:	02005040 	call	200504 <clearLED>
  200bec:	003f1d06 	br	200864 <_gp+0xffdeec50>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
  200bf0:	0202fb40 	call	202fb4 <GetUsbTaskState>
  200bf4:	10803fcc 	andi	r2,r2,255
  200bf8:	10803fd8 	cmpnei	r2,r2,255
  200bfc:	10000a1e 	bne	r2,zero,200c28 <usb_init+0x404>
			if (!errorflag) {
  200c00:	e0bff843 	ldbu	r2,-31(fp)
  200c04:	103f171e 	bne	r2,zero,200864 <_gp+0xffdeec50>
				errorflag = 1;
  200c08:	00800044 	movi	r2,1
  200c0c:	e0bff845 	stb	r2,-31(fp)
				clearLED(9);
  200c10:	01000244 	movi	r4,9
  200c14:	02005040 	call	200504 <clearLED>
				printf("USB Error State\n");
  200c18:	01000874 	movhi	r4,33
  200c1c:	211a0d04 	addi	r4,r4,26676
  200c20:	0203fac0 	call	203fac <puts>
  200c24:	003f0f06 	br	200864 <_gp+0xffdeec50>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
  200c28:	01000874 	movhi	r4,33
  200c2c:	211a1104 	addi	r4,r4,26692
  200c30:	0203e900 	call	203e90 <printf>
			printf("%x\n", GetUsbTaskState());
  200c34:	0202fb40 	call	202fb4 <GetUsbTaskState>
  200c38:	10803fcc 	andi	r2,r2,255
  200c3c:	100b883a 	mov	r5,r2
  200c40:	01000874 	movhi	r4,33
  200c44:	211a0c04 	addi	r4,r4,26672
  200c48:	0203e900 	call	203e90 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
  200c4c:	e0bff803 	ldbu	r2,-32(fp)
  200c50:	10000326 	beq	r2,zero,200c60 <usb_init+0x43c>
				runningdebugflag = 0;
  200c54:	e03ff805 	stb	zero,-32(fp)
				MAX3421E_init();
  200c58:	0201fd00 	call	201fd0 <MAX3421E_init>
				USB_init();
  200c5c:	02027ac0 	call	2027ac <USB_init>
			}
			errorflag = 0;
  200c60:	e03ff845 	stb	zero,-31(fp)
			clearLED(9);
  200c64:	01000244 	movi	r4,9
  200c68:	02005040 	call	200504 <clearLED>
  200c6c:	003efd06 	br	200864 <_gp+0xffdeec50>
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
		printf(".");
				if (rcode == hrNAK) {
					continue; //NAK means no new data
  200c70:	0001883a 	nop
  200c74:	003efb06 	br	200864 <_gp+0xffdeec50>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
  200c78:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
  200c7c:	003ef906 	br	200864 <_gp+0xffdeec50>

00200c80 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
  200c80:	defff804 	addi	sp,sp,-32
  200c84:	dfc00715 	stw	ra,28(sp)
  200c88:	df000615 	stw	fp,24(sp)
  200c8c:	df000604 	addi	fp,sp,24
  200c90:	e13ffe15 	stw	r4,-8(fp)
  200c94:	2805883a 	mov	r2,r5
  200c98:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
  200c9c:	e0bfff0b 	ldhu	r2,-4(fp)
  200ca0:	1004d23a 	srli	r2,r2,8
  200ca4:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
  200ca8:	e0bfff0b 	ldhu	r2,-4(fp)
  200cac:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
  200cb0:	e13ffd84 	addi	r4,fp,-10
  200cb4:	e0fffd84 	addi	r3,fp,-10
  200cb8:	d8000115 	stw	zero,4(sp)
  200cbc:	00800084 	movi	r2,2
  200cc0:	d8800015 	stw	r2,0(sp)
  200cc4:	200f883a 	mov	r7,r4
  200cc8:	01800084 	movi	r6,2
  200ccc:	180b883a 	mov	r5,r3
  200cd0:	e13ffe17 	ldw	r4,-8(fp)
  200cd4:	02128740 	call	212874 <alt_avalon_i2c_master_tx_rx>
  200cd8:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  200cdc:	e0bffc17 	ldw	r2,-16(fp)
  200ce0:	10000626 	beq	r2,zero,200cfc <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  200ce4:	e0bfff0b 	ldhu	r2,-4(fp)
  200ce8:	100b883a 	mov	r5,r2
  200cec:	01000874 	movhi	r4,33
  200cf0:	211a1604 	addi	r4,r4,26712
  200cf4:	0203e900 	call	203e90 <printf>
		while (1)
		{
			//hang here
		}
  200cf8:	003fff06 	br	200cf8 <_gp+0xffdef0e4>
	}
	value = (buffer[0] << 8) | buffer[1];
  200cfc:	e0bffd83 	ldbu	r2,-10(fp)
  200d00:	10803fcc 	andi	r2,r2,255
  200d04:	1004923a 	slli	r2,r2,8
  200d08:	1007883a 	mov	r3,r2
  200d0c:	e0bffdc3 	ldbu	r2,-9(fp)
  200d10:	10803fcc 	andi	r2,r2,255
  200d14:	1884b03a 	or	r2,r3,r2
  200d18:	e0bffd0d 	sth	r2,-12(fp)
	return value;
  200d1c:	e0bffd0b 	ldhu	r2,-12(fp)
}
  200d20:	e037883a 	mov	sp,fp
  200d24:	dfc00117 	ldw	ra,4(sp)
  200d28:	df000017 	ldw	fp,0(sp)
  200d2c:	dec00204 	addi	sp,sp,8
  200d30:	f800283a 	ret

00200d34 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
  200d34:	defff904 	addi	sp,sp,-28
  200d38:	dfc00615 	stw	ra,24(sp)
  200d3c:	df000515 	stw	fp,20(sp)
  200d40:	df000504 	addi	fp,sp,20
  200d44:	e13ffd15 	stw	r4,-12(fp)
  200d48:	2807883a 	mov	r3,r5
  200d4c:	3005883a 	mov	r2,r6
  200d50:	e0fffe0d 	sth	r3,-8(fp)
  200d54:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
  200d58:	e0bffe0b 	ldhu	r2,-8(fp)
  200d5c:	1004d23a 	srli	r2,r2,8
  200d60:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
  200d64:	e0bffe0b 	ldhu	r2,-8(fp)
  200d68:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
  200d6c:	e0bfff0b 	ldhu	r2,-4(fp)
  200d70:	1004d23a 	srli	r2,r2,8
  200d74:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
  200d78:	e0bfff0b 	ldhu	r2,-4(fp)
  200d7c:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
  200d80:	e0bffc04 	addi	r2,fp,-16
  200d84:	000f883a 	mov	r7,zero
  200d88:	01800104 	movi	r6,4
  200d8c:	100b883a 	mov	r5,r2
  200d90:	e13ffd17 	ldw	r4,-12(fp)
  200d94:	02126500 	call	212650 <alt_avalon_i2c_master_tx>
  200d98:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  200d9c:	e0bffb17 	ldw	r2,-20(fp)
  200da0:	10000626 	beq	r2,zero,200dbc <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  200da4:	e0bffe0b 	ldhu	r2,-8(fp)
  200da8:	100b883a 	mov	r5,r2
  200dac:	01000874 	movhi	r4,33
  200db0:	211a1604 	addi	r4,r4,26712
  200db4:	0203e900 	call	203e90 <printf>
		while (1)
		{
			//hang here
		}
  200db8:	003fff06 	br	200db8 <_gp+0xffdef1a4>
	}
	return DATA;
  200dbc:	e0bfff0b 	ldhu	r2,-4(fp)
}
  200dc0:	e037883a 	mov	sp,fp
  200dc4:	dfc00117 	ldw	ra,4(sp)
  200dc8:	df000017 	ldw	fp,0(sp)
  200dcc:	dec00204 	addi	sp,sp,8
  200dd0:	f800283a 	ret

00200dd4 <setup_i2c>:
#include "sys/alt_irq.h"
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"

int setup_i2c()
{
  200dd4:	defffc04 	addi	sp,sp,-16
  200dd8:	dfc00315 	stw	ra,12(sp)
  200ddc:	df000215 	stw	fp,8(sp)
  200de0:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
  200de4:	01000874 	movhi	r4,33
  200de8:	211a1e04 	addi	r4,r4,26744
  200dec:	0211c780 	call	211c78 <alt_avalon_i2c_open>
  200df0:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
  200df4:	e0bffe17 	ldw	r2,-8(fp)
  200df8:	1000051e 	bne	r2,zero,200e10 <setup_i2c+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
  200dfc:	01000874 	movhi	r4,33
  200e00:	211a2104 	addi	r4,r4,26756
  200e04:	0203fac0 	call	203fac <puts>
		return 1;
  200e08:	00800044 	movi	r2,1
  200e0c:	0000b006 	br	2010d0 <setup_i2c+0x2fc>
	}
	printf ("I2C Test Program\n");
  200e10:	01000874 	movhi	r4,33
  200e14:	211a2904 	addi	r4,r4,26788
  200e18:	0203fac0 	call	203fac <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
  200e1c:	01400284 	movi	r5,10
  200e20:	e13ffe17 	ldw	r4,-8(fp)
  200e24:	02124480 	call	212448 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
  200e28:	000b883a 	mov	r5,zero
  200e2c:	e13ffe17 	ldw	r4,-8(fp)
  200e30:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200e34:	10bfffcc 	andi	r2,r2,65535
  200e38:	100b883a 	mov	r5,r2
  200e3c:	01000874 	movhi	r4,33
  200e40:	211a2e04 	addi	r4,r4,26808
  200e44:	0203e900 	call	203e90 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 196608000/12500000;
  200e48:	008003c4 	movi	r2,15
  200e4c:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
  200e50:	e0bfff03 	ldbu	r2,-4(fp)
  200e54:	1009883a 	mov	r4,r2
  200e58:	0203d0c0 	call	203d0c <__floatunsisf>
  200e5c:	1007883a 	mov	r3,r2
  200e60:	180b883a 	mov	r5,r3
  200e64:	01105f34 	movhi	r4,16764
  200e68:	212a2084 	addi	r4,r4,-22398
  200e6c:	02037b80 	call	2037b8 <__subsf3>
  200e70:	1007883a 	mov	r3,r2
  200e74:	1805883a 	mov	r2,r3
  200e78:	01514034 	movhi	r5,17664
  200e7c:	1009883a 	mov	r4,r2
  200e80:	02033880 	call	203388 <__mulsf3>
  200e84:	1007883a 	mov	r3,r2
  200e88:	1805883a 	mov	r2,r3
  200e8c:	1009883a 	mov	r4,r2
  200e90:	02030900 	call	203090 <__fixunssfsi>
  200e94:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
  200e98:	e0bfff03 	ldbu	r2,-4(fp)
  200e9c:	e0ffff8b 	ldhu	r3,-2(fp)
  200ea0:	180d883a 	mov	r6,r3
  200ea4:	100b883a 	mov	r5,r2
  200ea8:	01000874 	movhi	r4,33
  200eac:	211a3404 	addi	r4,r4,26832
  200eb0:	0203e900 	call	203e90 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
  200eb4:	e0bfff03 	ldbu	r2,-4(fp)
  200eb8:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 196608000/12500000;
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
  200ebc:	1007883a 	mov	r3,r2
  200ec0:	e0bfff8b 	ldhu	r2,-2(fp)
  200ec4:	1884b03a 	or	r2,r3,r2
  200ec8:	10bfffcc 	andi	r2,r2,65535
  200ecc:	100d883a 	mov	r6,r2
  200ed0:	01400c84 	movi	r5,50
  200ed4:	e13ffe17 	ldw	r4,-8(fp)
  200ed8:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
  200edc:	01400c84 	movi	r5,50
  200ee0:	e13ffe17 	ldw	r4,-8(fp)
  200ee4:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200ee8:	10bfffcc 	andi	r2,r2,65535
  200eec:	100b883a 	mov	r5,r2
  200ef0:	01000874 	movhi	r4,33
  200ef4:	211a4504 	addi	r4,r4,26900
  200ef8:	0203e900 	call	203e90 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
  200efc:	01917f84 	movi	r6,17918
  200f00:	01400c04 	movi	r5,48
  200f04:	e13ffe17 	ldw	r4,-8(fp)
  200f08:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
  200f0c:	01400c04 	movi	r5,48
  200f10:	e13ffe17 	ldw	r4,-8(fp)
  200f14:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200f18:	10bfffcc 	andi	r2,r2,65535
  200f1c:	100b883a 	mov	r5,r2
  200f20:	01000874 	movhi	r4,33
  200f24:	211a4c04 	addi	r4,r4,26928
  200f28:	0203e900 	call	203e90 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  200f2c:	01801384 	movi	r6,78
  200f30:	01400a04 	movi	r5,40
  200f34:	e13ffe17 	ldw	r4,-8(fp)
  200f38:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
  200f3c:	01400a04 	movi	r5,40
  200f40:	e13ffe17 	ldw	r4,-8(fp)
  200f44:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200f48:	10bfffcc 	andi	r2,r2,65535
  200f4c:	100b883a 	mov	r5,r2
  200f50:	01000874 	movhi	r4,33
  200f54:	211a5404 	addi	r4,r4,26960
  200f58:	0203e900 	call	203e90 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
  200f5c:	018018c4 	movi	r6,99
  200f60:	01400084 	movi	r5,2
  200f64:	e13ffe17 	ldw	r4,-8(fp)
  200f68:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
  200f6c:	01400084 	movi	r5,2
  200f70:	e13ffe17 	ldw	r4,-8(fp)
  200f74:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200f78:	10bfffcc 	andi	r2,r2,65535
  200f7c:	100b883a 	mov	r5,r2
  200f80:	01000874 	movhi	r4,33
  200f84:	211a5b04 	addi	r4,r4,26988
  200f88:	0203e900 	call	203e90 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
  200f8c:	018002c4 	movi	r6,11
  200f90:	01400104 	movi	r5,4
  200f94:	e13ffe17 	ldw	r4,-8(fp)
  200f98:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_48k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
  200f9c:	01400104 	movi	r5,4
  200fa0:	e13ffe17 	ldw	r4,-8(fp)
  200fa4:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200fa8:	10bfffcc 	andi	r2,r2,65535
  200fac:	100b883a 	mov	r5,r2
  200fb0:	01000874 	movhi	r4,33
  200fb4:	211a6304 	addi	r4,r4,27020
  200fb8:	0203e900 	call	203e90 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, (SGTL5000_I2S_MASTER));
  200fbc:	01802004 	movi	r6,128
  200fc0:	01400184 	movi	r5,6
  200fc4:	e13ffe17 	ldw	r4,-8(fp)
  200fc8:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
  200fcc:	01400184 	movi	r5,6
  200fd0:	e13ffe17 	ldw	r4,-8(fp)
  200fd4:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  200fd8:	10bfffcc 	andi	r2,r2,65535
  200fdc:	100b883a 	mov	r5,r2
  200fe0:	01000874 	movhi	r4,33
  200fe4:	211a6a04 	addi	r4,r4,27048
  200fe8:	0203e900 	call	203e90 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
  200fec:	01800104 	movi	r6,4
  200ff0:	01400904 	movi	r5,36
  200ff4:	e13ffe17 	ldw	r4,-8(fp)
  200ff8:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  200ffc:	01400904 	movi	r5,36
  201000:	e13ffe17 	ldw	r4,-8(fp)
  201004:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  201008:	10bfffcc 	andi	r2,r2,65535
  20100c:	100b883a 	mov	r5,r2
  201010:	01000874 	movhi	r4,33
  201014:	211a7104 	addi	r4,r4,27076
  201018:	0203e900 	call	203e90 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
  20101c:	01800404 	movi	r6,16
  201020:	01400284 	movi	r5,10
  201024:	e13ffe17 	ldw	r4,-8(fp)
  201028:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
  20102c:	01400284 	movi	r5,10
  201030:	e13ffe17 	ldw	r4,-8(fp)
  201034:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  201038:	10bfffcc 	andi	r2,r2,65535
  20103c:	100b883a 	mov	r5,r2
  201040:	01000874 	movhi	r4,33
  201044:	211a7804 	addi	r4,r4,27104
  201048:	0203e900 	call	203e90 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  20104c:	01400904 	movi	r5,36
  201050:	e13ffe17 	ldw	r4,-8(fp)
  201054:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  201058:	10bfffcc 	andi	r2,r2,65535
  20105c:	100b883a 	mov	r5,r2
  201060:	01000874 	movhi	r4,33
  201064:	211a7104 	addi	r4,r4,27076
  201068:	0203e900 	call	203e90 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  20106c:	000d883a 	mov	r6,zero
  201070:	01400384 	movi	r5,14
  201074:	e13ffe17 	ldw	r4,-8(fp)
  201078:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  20107c:	01400384 	movi	r5,14
  201080:	e13ffe17 	ldw	r4,-8(fp)
  201084:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  201088:	10bfffcc 	andi	r2,r2,65535
  20108c:	100b883a 	mov	r5,r2
  201090:	01000874 	movhi	r4,33
  201094:	211a7f04 	addi	r4,r4,27132
  201098:	0203e900 	call	203e90 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
  20109c:	01400504 	movi	r5,20
  2010a0:	e13ffe17 	ldw	r4,-8(fp)
  2010a4:	0200c800 	call	200c80 <SGTL5000_Reg_Rd>
  2010a8:	10bfffcc 	andi	r2,r2,65535
  2010ac:	100b883a 	mov	r5,r2
  2010b0:	01000874 	movhi	r4,33
  2010b4:	211a8704 	addi	r4,r4,27164
  2010b8:	0203e900 	call	203e90 <printf>

	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_HP_CTRL, ((0x0030<<8)|0x0030));
  2010bc:	018c0c04 	movi	r6,12336
  2010c0:	01400884 	movi	r5,34
  2010c4:	e13ffe17 	ldw	r4,-8(fp)
  2010c8:	0200d340 	call	200d34 <SGTL5000_Reg_Wr>



	return 0;
  2010cc:	0005883a 	mov	r2,zero
}
  2010d0:	e037883a 	mov	sp,fp
  2010d4:	dfc00117 	ldw	ra,4(sp)
  2010d8:	df000017 	ldw	fp,0(sp)
  2010dc:	dec00204 	addi	sp,sp,8
  2010e0:	f800283a 	ret

002010e4 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
  2010e4:	defff204 	addi	sp,sp,-56
  2010e8:	dfc00d15 	stw	ra,52(sp)
  2010ec:	df000c15 	stw	fp,48(sp)
  2010f0:	df000c04 	addi	fp,sp,48
  2010f4:	2005883a 	mov	r2,r4
  2010f8:	e17fff15 	stw	r5,-4(fp)
  2010fc:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  201100:	00801074 	movhi	r2,65
  201104:	10a74704 	addi	r2,r2,-25316
  201108:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
  20110c:	00801074 	movhi	r2,65
  201110:	10a74704 	addi	r2,r2,-25316
  201114:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  201118:	e0fffe03 	ldbu	r3,-8(fp)
  20111c:	00801074 	movhi	r2,65
  201120:	10a74704 	addi	r2,r2,-25316
  201124:	d8800415 	stw	r2,16(sp)
  201128:	00800244 	movi	r2,9
  20112c:	d8800315 	stw	r2,12(sp)
  201130:	d8000215 	stw	zero,8(sp)
  201134:	00800084 	movi	r2,2
  201138:	d8800115 	stw	r2,4(sp)
  20113c:	d8000015 	stw	zero,0(sp)
  201140:	01c00184 	movi	r7,6
  201144:	01802004 	movi	r6,128
  201148:	000b883a 	mov	r5,zero
  20114c:	1809883a 	mov	r4,r3
  201150:	02021f80 	call	2021f8 <XferCtrlReq>
  201154:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  201158:	e0bffc03 	ldbu	r2,-16(fp)
  20115c:	10000226 	beq	r2,zero,201168 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
  201160:	0005883a 	mov	r2,zero
  201164:	0000dc06 	br	2014d8 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  201168:	e0bffa17 	ldw	r2,-24(fp)
  20116c:	1080008b 	ldhu	r2,2(r2)
  201170:	10bfffcc 	andi	r2,r2,65535
  201174:	10804070 	cmpltui	r2,r2,257
  201178:	1000031e 	bne	r2,zero,201188 <HIDMProbe+0xa4>
		total_length = 256;
  20117c:	00804004 	movi	r2,256
  201180:	e0bff90d 	sth	r2,-28(fp)
  201184:	00000306 	br	201194 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  201188:	e0bffa17 	ldw	r2,-24(fp)
  20118c:	1080008b 	ldhu	r2,2(r2)
  201190:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  201194:	e13ffe03 	ldbu	r4,-8(fp)
  201198:	e0fff90b 	ldhu	r3,-28(fp)
  20119c:	00801074 	movhi	r2,65
  2011a0:	10a74704 	addi	r2,r2,-25316
  2011a4:	d8800415 	stw	r2,16(sp)
  2011a8:	d8c00315 	stw	r3,12(sp)
  2011ac:	d8000215 	stw	zero,8(sp)
  2011b0:	00800084 	movi	r2,2
  2011b4:	d8800115 	stw	r2,4(sp)
  2011b8:	d8000015 	stw	zero,0(sp)
  2011bc:	01c00184 	movi	r7,6
  2011c0:	01802004 	movi	r6,128
  2011c4:	000b883a 	mov	r5,zero
  2011c8:	02021f80 	call	2021f8 <XferCtrlReq>
  2011cc:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  2011d0:	e0bffc03 	ldbu	r2,-16(fp)
  2011d4:	10000226 	beq	r2,zero,2011e0 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
  2011d8:	0005883a 	mov	r2,zero
  2011dc:	0000be06 	br	2014d8 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
  2011e0:	e0bffa17 	ldw	r2,-24(fp)
  2011e4:	10800143 	ldbu	r2,5(r2)
  2011e8:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
  2011ec:	0000b306 	br	2014bc <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
  2011f0:	e0bffa17 	ldw	r2,-24(fp)
  2011f4:	10800043 	ldbu	r2,1(r2)
  2011f8:	10803fcc 	andi	r2,r2,255
  2011fc:	10800120 	cmpeqi	r2,r2,4
  201200:	1000091e 	bne	r2,zero,201228 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  201204:	e0bffa17 	ldw	r2,-24(fp)
  201208:	10800003 	ldbu	r2,0(r2)
  20120c:	10803fcc 	andi	r2,r2,255
  201210:	e0fffb17 	ldw	r3,-20(fp)
  201214:	1885883a 	add	r2,r3,r2
  201218:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  20121c:	e0bffb17 	ldw	r2,-20(fp)
  201220:	e0bffa15 	stw	r2,-24(fp)
  201224:	0000a506 	br	2014bc <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  201228:	e0bffa17 	ldw	r2,-24(fp)
  20122c:	10800143 	ldbu	r2,5(r2)
  201230:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  201234:	e0bffa17 	ldw	r2,-24(fp)
  201238:	10800183 	ldbu	r2,6(r2)
  20123c:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  201240:	e0bffa17 	ldw	r2,-24(fp)
  201244:	108001c3 	ldbu	r2,7(r2)
  201248:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  20124c:	e0bffc83 	ldbu	r2,-14(fp)
  201250:	108000d8 	cmpnei	r2,r2,3
  201254:	1000971e 	bne	r2,zero,2014b4 <HIDMProbe+0x3d0>
  201258:	e0bffcc3 	ldbu	r2,-13(fp)
  20125c:	10800058 	cmpnei	r2,r2,1
  201260:	1000941e 	bne	r2,zero,2014b4 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
  201264:	e0bffd03 	ldbu	r2,-12(fp)
  201268:	10800098 	cmpnei	r2,r2,2
  20126c:	1000911e 	bne	r2,zero,2014b4 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
  201270:	e0fffe03 	ldbu	r3,-8(fp)
  201274:	00801074 	movhi	r2,65
  201278:	10a78704 	addi	r2,r2,-25060
  20127c:	180690fa 	slli	r3,r3,3
  201280:	10c5883a 	add	r2,r2,r3
  201284:	10800104 	addi	r2,r2,4
  201288:	00c00084 	movi	r3,2
  20128c:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
  201290:	e0fffe03 	ldbu	r3,-8(fp)
  201294:	00801074 	movhi	r2,65
  201298:	10a78704 	addi	r2,r2,-25060
  20129c:	180690fa 	slli	r3,r3,3
  2012a0:	10c5883a 	add	r2,r2,r3
  2012a4:	10800017 	ldw	r2,0(r2)
  2012a8:	1080008b 	ldhu	r2,2(r2)
  2012ac:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
  2012b0:	02018f40 	call	2018f4 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  2012b4:	e0fffe03 	ldbu	r3,-8(fp)
  2012b8:	00801074 	movhi	r2,65
  2012bc:	10a78704 	addi	r2,r2,-25060
  2012c0:	180690fa 	slli	r3,r3,3
  2012c4:	10c7883a 	add	r3,r2,r3
  2012c8:	00801074 	movhi	r2,65
  2012cc:	10a73304 	addi	r2,r2,-25396
  2012d0:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
  2012d4:	e0fffe03 	ldbu	r3,-8(fp)
  2012d8:	00801074 	movhi	r2,65
  2012dc:	10a78704 	addi	r2,r2,-25060
  2012e0:	180690fa 	slli	r3,r3,3
  2012e4:	10c5883a 	add	r2,r2,r3
  2012e8:	10800017 	ldw	r2,0(r2)
  2012ec:	e0fffd43 	ldbu	r3,-11(fp)
  2012f0:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
  2012f4:	e0bffa17 	ldw	r2,-24(fp)
  2012f8:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
  2012fc:	d0a01a45 	stb	r2,-32663(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
  201300:	e0bffe03 	ldbu	r2,-8(fp)
  201304:	d0a01a05 	stb	r2,-32664(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  201308:	e0bffa17 	ldw	r2,-24(fp)
  20130c:	10800003 	ldbu	r2,0(r2)
  201310:	10803fcc 	andi	r2,r2,255
  201314:	e0fffb17 	ldw	r3,-20(fp)
  201318:	1885883a 	add	r2,r3,r2
  20131c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  201320:	e0bffb17 	ldw	r2,-20(fp)
  201324:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
  201328:	00005b06 	br	201498 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
  20132c:	e0bffa17 	ldw	r2,-24(fp)
  201330:	10800043 	ldbu	r2,1(r2)
  201334:	10803fcc 	andi	r2,r2,255
  201338:	10800160 	cmpeqi	r2,r2,5
  20133c:	1000091e 	bne	r2,zero,201364 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  201340:	e0bffa17 	ldw	r2,-24(fp)
  201344:	10800003 	ldbu	r2,0(r2)
  201348:	10803fcc 	andi	r2,r2,255
  20134c:	e0fffb17 	ldw	r3,-20(fp)
  201350:	1885883a 	add	r2,r3,r2
  201354:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  201358:	e0bffb17 	ldw	r2,-20(fp)
  20135c:	e0bffa15 	stw	r2,-24(fp)
  201360:	00004d06 	br	201498 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201364:	e0fffe03 	ldbu	r3,-8(fp)
  201368:	00801074 	movhi	r2,65
  20136c:	10a78704 	addi	r2,r2,-25060
  201370:	180690fa 	slli	r3,r3,3
  201374:	10c5883a 	add	r2,r2,r3
  201378:	10800017 	ldw	r2,0(r2)
  20137c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  201380:	e0fffa17 	ldw	r3,-24(fp)
  201384:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201388:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  20138c:	e0fffe03 	ldbu	r3,-8(fp)
  201390:	00801074 	movhi	r2,65
  201394:	10a78704 	addi	r2,r2,-25060
  201398:	180690fa 	slli	r3,r3,3
  20139c:	10c5883a 	add	r2,r2,r3
  2013a0:	10800017 	ldw	r2,0(r2)
  2013a4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  2013a8:	e0fffa17 	ldw	r3,-24(fp)
  2013ac:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  2013b0:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2013b4:	e0fffe03 	ldbu	r3,-8(fp)
  2013b8:	00801074 	movhi	r2,65
  2013bc:	10a78704 	addi	r2,r2,-25060
  2013c0:	180690fa 	slli	r3,r3,3
  2013c4:	10c5883a 	add	r2,r2,r3
  2013c8:	10800017 	ldw	r2,0(r2)
  2013cc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  2013d0:	e0fffa17 	ldw	r3,-24(fp)
  2013d4:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2013d8:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2013dc:	e0fffe03 	ldbu	r3,-8(fp)
  2013e0:	00801074 	movhi	r2,65
  2013e4:	10a78704 	addi	r2,r2,-25060
  2013e8:	180690fa 	slli	r3,r3,3
  2013ec:	10c5883a 	add	r2,r2,r3
  2013f0:	10800017 	ldw	r2,0(r2)
  2013f4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  2013f8:	e0fffa17 	ldw	r3,-24(fp)
  2013fc:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  201400:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  201404:	e0fffe03 	ldbu	r3,-8(fp)
  201408:	e0bffc43 	ldbu	r2,-15(fp)
  20140c:	d8000415 	stw	zero,16(sp)
  201410:	d8000315 	stw	zero,12(sp)
  201414:	d8000215 	stw	zero,8(sp)
  201418:	d8000115 	stw	zero,4(sp)
  20141c:	d8800015 	stw	r2,0(sp)
  201420:	01c00244 	movi	r7,9
  201424:	000d883a 	mov	r6,zero
  201428:	000b883a 	mov	r5,zero
  20142c:	1809883a 	mov	r4,r3
  201430:	02021f80 	call	2021f8 <XferCtrlReq>
  201434:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
  201438:	e0bffc03 	ldbu	r2,-16(fp)
  20143c:	10000226 	beq	r2,zero,201448 <HIDMProbe+0x364>
							return (FALSE);
  201440:	0005883a 	mov	r2,zero
  201444:	00002406 	br	2014d8 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  201448:	e0fffe03 	ldbu	r3,-8(fp)
  20144c:	d0a01a43 	ldbu	r2,-32663(gp)
  201450:	10803fcc 	andi	r2,r2,255
  201454:	d8000415 	stw	zero,16(sp)
  201458:	d8000315 	stw	zero,12(sp)
  20145c:	d8800215 	stw	r2,8(sp)
  201460:	d8000115 	stw	zero,4(sp)
  201464:	d8000015 	stw	zero,0(sp)
  201468:	01c002c4 	movi	r7,11
  20146c:	01800844 	movi	r6,33
  201470:	000b883a 	mov	r5,zero
  201474:	1809883a 	mov	r4,r3
  201478:	02021f80 	call	2021f8 <XferCtrlReq>
  20147c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  201480:	e0bffc03 	ldbu	r2,-16(fp)
  201484:	10000226 	beq	r2,zero,201490 <HIDMProbe+0x3ac>
							return (FALSE);
  201488:	0005883a 	mov	r2,zero
  20148c:	00001206 	br	2014d8 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
  201490:	00800044 	movi	r2,1
  201494:	00001006 	br	2014d8 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
  201498:	e0fff90b 	ldhu	r3,-28(fp)
  20149c:	00801074 	movhi	r2,65
  2014a0:	10a74704 	addi	r2,r2,-25316
  2014a4:	1885883a 	add	r2,r3,r2
  2014a8:	e0fffb17 	ldw	r3,-20(fp)
  2014ac:	18bf9f36 	bltu	r3,r2,20132c <_gp+0xffdef718>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  2014b0:	00000206 	br	2014bc <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
  2014b4:	0005883a 	mov	r2,zero
  2014b8:	00000706 	br	2014d8 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
  2014bc:	e0fff90b 	ldhu	r3,-28(fp)
  2014c0:	00801074 	movhi	r2,65
  2014c4:	10a74704 	addi	r2,r2,-25316
  2014c8:	1885883a 	add	r2,r3,r2
  2014cc:	e0fffb17 	ldw	r3,-20(fp)
  2014d0:	18bf4736 	bltu	r3,r2,2011f0 <_gp+0xffdef5dc>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  2014d4:	0005883a 	mov	r2,zero
}
  2014d8:	e037883a 	mov	sp,fp
  2014dc:	dfc00117 	ldw	ra,4(sp)
  2014e0:	df000017 	ldw	fp,0(sp)
  2014e4:	dec00204 	addi	sp,sp,8
  2014e8:	f800283a 	ret

002014ec <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
  2014ec:	defff204 	addi	sp,sp,-56
  2014f0:	dfc00d15 	stw	ra,52(sp)
  2014f4:	df000c15 	stw	fp,48(sp)
  2014f8:	df000c04 	addi	fp,sp,48
  2014fc:	2005883a 	mov	r2,r4
  201500:	e17fff15 	stw	r5,-4(fp)
  201504:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  201508:	00801074 	movhi	r2,65
  20150c:	10a74704 	addi	r2,r2,-25316
  201510:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
  201514:	00801074 	movhi	r2,65
  201518:	10a74704 	addi	r2,r2,-25316
  20151c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  201520:	e0fffe03 	ldbu	r3,-8(fp)
  201524:	00801074 	movhi	r2,65
  201528:	10a74704 	addi	r2,r2,-25316
  20152c:	d8800415 	stw	r2,16(sp)
  201530:	00800244 	movi	r2,9
  201534:	d8800315 	stw	r2,12(sp)
  201538:	d8000215 	stw	zero,8(sp)
  20153c:	00800084 	movi	r2,2
  201540:	d8800115 	stw	r2,4(sp)
  201544:	d8000015 	stw	zero,0(sp)
  201548:	01c00184 	movi	r7,6
  20154c:	01802004 	movi	r6,128
  201550:	000b883a 	mov	r5,zero
  201554:	1809883a 	mov	r4,r3
  201558:	02021f80 	call	2021f8 <XferCtrlReq>
  20155c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
  201560:	e0bffc03 	ldbu	r2,-16(fp)
  201564:	10000226 	beq	r2,zero,201570 <HIDKProbe+0x84>
		return (FALSE);
  201568:	0005883a 	mov	r2,zero
  20156c:	0000dc06 	br	2018e0 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  201570:	e0bffa17 	ldw	r2,-24(fp)
  201574:	1080008b 	ldhu	r2,2(r2)
  201578:	10bfffcc 	andi	r2,r2,65535
  20157c:	10804070 	cmpltui	r2,r2,257
  201580:	1000031e 	bne	r2,zero,201590 <HIDKProbe+0xa4>
		total_length = 256;
  201584:	00804004 	movi	r2,256
  201588:	e0bff90d 	sth	r2,-28(fp)
  20158c:	00000306 	br	20159c <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  201590:	e0bffa17 	ldw	r2,-24(fp)
  201594:	1080008b 	ldhu	r2,2(r2)
  201598:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  20159c:	e13ffe03 	ldbu	r4,-8(fp)
  2015a0:	e0fff90b 	ldhu	r3,-28(fp)
  2015a4:	00801074 	movhi	r2,65
  2015a8:	10a74704 	addi	r2,r2,-25316
  2015ac:	d8800415 	stw	r2,16(sp)
  2015b0:	d8c00315 	stw	r3,12(sp)
  2015b4:	d8000215 	stw	zero,8(sp)
  2015b8:	00800084 	movi	r2,2
  2015bc:	d8800115 	stw	r2,4(sp)
  2015c0:	d8000015 	stw	zero,0(sp)
  2015c4:	01c00184 	movi	r7,6
  2015c8:	01802004 	movi	r6,128
  2015cc:	000b883a 	mov	r5,zero
  2015d0:	02021f80 	call	2021f8 <XferCtrlReq>
  2015d4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  2015d8:	e0bffc03 	ldbu	r2,-16(fp)
  2015dc:	10000226 	beq	r2,zero,2015e8 <HIDKProbe+0xfc>
		return (FALSE);
  2015e0:	0005883a 	mov	r2,zero
  2015e4:	0000be06 	br	2018e0 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
  2015e8:	e0bffa17 	ldw	r2,-24(fp)
  2015ec:	10800143 	ldbu	r2,5(r2)
  2015f0:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  2015f4:	0000b306 	br	2018c4 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
  2015f8:	e0bffa17 	ldw	r2,-24(fp)
  2015fc:	10800043 	ldbu	r2,1(r2)
  201600:	10803fcc 	andi	r2,r2,255
  201604:	10800120 	cmpeqi	r2,r2,4
  201608:	1000091e 	bne	r2,zero,201630 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  20160c:	e0bffa17 	ldw	r2,-24(fp)
  201610:	10800003 	ldbu	r2,0(r2)
  201614:	10803fcc 	andi	r2,r2,255
  201618:	e0fffb17 	ldw	r3,-20(fp)
  20161c:	1885883a 	add	r2,r3,r2
  201620:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  201624:	e0bffb17 	ldw	r2,-20(fp)
  201628:	e0bffa15 	stw	r2,-24(fp)
  20162c:	0000a506 	br	2018c4 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  201630:	e0bffa17 	ldw	r2,-24(fp)
  201634:	10800143 	ldbu	r2,5(r2)
  201638:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  20163c:	e0bffa17 	ldw	r2,-24(fp)
  201640:	10800183 	ldbu	r2,6(r2)
  201644:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  201648:	e0bffa17 	ldw	r2,-24(fp)
  20164c:	108001c3 	ldbu	r2,7(r2)
  201650:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  201654:	e0bffc83 	ldbu	r2,-14(fp)
  201658:	108000d8 	cmpnei	r2,r2,3
  20165c:	1000971e 	bne	r2,zero,2018bc <HIDKProbe+0x3d0>
  201660:	e0bffcc3 	ldbu	r2,-13(fp)
  201664:	10800058 	cmpnei	r2,r2,1
  201668:	1000941e 	bne	r2,zero,2018bc <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
  20166c:	e0bffd03 	ldbu	r2,-12(fp)
  201670:	10800058 	cmpnei	r2,r2,1
  201674:	1000911e 	bne	r2,zero,2018bc <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
  201678:	e0fffe03 	ldbu	r3,-8(fp)
  20167c:	00801074 	movhi	r2,65
  201680:	10a78704 	addi	r2,r2,-25060
  201684:	180690fa 	slli	r3,r3,3
  201688:	10c5883a 	add	r2,r2,r3
  20168c:	10800104 	addi	r2,r2,4
  201690:	00c00044 	movi	r3,1
  201694:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
  201698:	e0fffe03 	ldbu	r3,-8(fp)
  20169c:	00801074 	movhi	r2,65
  2016a0:	10a78704 	addi	r2,r2,-25060
  2016a4:	180690fa 	slli	r3,r3,3
  2016a8:	10c5883a 	add	r2,r2,r3
  2016ac:	10800017 	ldw	r2,0(r2)
  2016b0:	1080008b 	ldhu	r2,2(r2)
  2016b4:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
  2016b8:	02018f40 	call	2018f4 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  2016bc:	e0fffe03 	ldbu	r3,-8(fp)
  2016c0:	00801074 	movhi	r2,65
  2016c4:	10a78704 	addi	r2,r2,-25060
  2016c8:	180690fa 	slli	r3,r3,3
  2016cc:	10c7883a 	add	r3,r2,r3
  2016d0:	00801074 	movhi	r2,65
  2016d4:	10a73304 	addi	r2,r2,-25396
  2016d8:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
  2016dc:	e0fffe03 	ldbu	r3,-8(fp)
  2016e0:	00801074 	movhi	r2,65
  2016e4:	10a78704 	addi	r2,r2,-25060
  2016e8:	180690fa 	slli	r3,r3,3
  2016ec:	10c5883a 	add	r2,r2,r3
  2016f0:	10800017 	ldw	r2,0(r2)
  2016f4:	e0fffd43 	ldbu	r3,-11(fp)
  2016f8:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
  2016fc:	e0bffa17 	ldw	r2,-24(fp)
  201700:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
  201704:	d0a01a45 	stb	r2,-32663(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
  201708:	e0bffe03 	ldbu	r2,-8(fp)
  20170c:	d0a01a05 	stb	r2,-32664(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
  201710:	e0bffa17 	ldw	r2,-24(fp)
  201714:	10800003 	ldbu	r2,0(r2)
  201718:	10803fcc 	andi	r2,r2,255
  20171c:	e0fffb17 	ldw	r3,-20(fp)
  201720:	1885883a 	add	r2,r3,r2
  201724:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  201728:	e0bffb17 	ldw	r2,-20(fp)
  20172c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
  201730:	00005b06 	br	2018a0 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
  201734:	e0bffa17 	ldw	r2,-24(fp)
  201738:	10800043 	ldbu	r2,1(r2)
  20173c:	10803fcc 	andi	r2,r2,255
  201740:	10800160 	cmpeqi	r2,r2,5
  201744:	1000091e 	bne	r2,zero,20176c <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  201748:	e0bffa17 	ldw	r2,-24(fp)
  20174c:	10800003 	ldbu	r2,0(r2)
  201750:	10803fcc 	andi	r2,r2,255
  201754:	e0fffb17 	ldw	r3,-20(fp)
  201758:	1885883a 	add	r2,r3,r2
  20175c:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  201760:	e0bffb17 	ldw	r2,-20(fp)
  201764:	e0bffa15 	stw	r2,-24(fp)
  201768:	00004d06 	br	2018a0 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  20176c:	e0fffe03 	ldbu	r3,-8(fp)
  201770:	00801074 	movhi	r2,65
  201774:	10a78704 	addi	r2,r2,-25060
  201778:	180690fa 	slli	r3,r3,3
  20177c:	10c5883a 	add	r2,r2,r3
  201780:	10800017 	ldw	r2,0(r2)
  201784:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  201788:	e0fffa17 	ldw	r3,-24(fp)
  20178c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201790:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  201794:	e0fffe03 	ldbu	r3,-8(fp)
  201798:	00801074 	movhi	r2,65
  20179c:	10a78704 	addi	r2,r2,-25060
  2017a0:	180690fa 	slli	r3,r3,3
  2017a4:	10c5883a 	add	r2,r2,r3
  2017a8:	10800017 	ldw	r2,0(r2)
  2017ac:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  2017b0:	e0fffa17 	ldw	r3,-24(fp)
  2017b4:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  2017b8:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2017bc:	e0fffe03 	ldbu	r3,-8(fp)
  2017c0:	00801074 	movhi	r2,65
  2017c4:	10a78704 	addi	r2,r2,-25060
  2017c8:	180690fa 	slli	r3,r3,3
  2017cc:	10c5883a 	add	r2,r2,r3
  2017d0:	10800017 	ldw	r2,0(r2)
  2017d4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  2017d8:	e0fffa17 	ldw	r3,-24(fp)
  2017dc:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2017e0:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2017e4:	e0fffe03 	ldbu	r3,-8(fp)
  2017e8:	00801074 	movhi	r2,65
  2017ec:	10a78704 	addi	r2,r2,-25060
  2017f0:	180690fa 	slli	r3,r3,3
  2017f4:	10c5883a 	add	r2,r2,r3
  2017f8:	10800017 	ldw	r2,0(r2)
  2017fc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  201800:	e0fffa17 	ldw	r3,-24(fp)
  201804:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  201808:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  20180c:	e0fffe03 	ldbu	r3,-8(fp)
  201810:	e0bffc43 	ldbu	r2,-15(fp)
  201814:	d8000415 	stw	zero,16(sp)
  201818:	d8000315 	stw	zero,12(sp)
  20181c:	d8000215 	stw	zero,8(sp)
  201820:	d8000115 	stw	zero,4(sp)
  201824:	d8800015 	stw	r2,0(sp)
  201828:	01c00244 	movi	r7,9
  20182c:	000d883a 	mov	r6,zero
  201830:	000b883a 	mov	r5,zero
  201834:	1809883a 	mov	r4,r3
  201838:	02021f80 	call	2021f8 <XferCtrlReq>
  20183c:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
  201840:	e0bffc03 	ldbu	r2,-16(fp)
  201844:	10000226 	beq	r2,zero,201850 <HIDKProbe+0x364>
							return (FALSE);
  201848:	0005883a 	mov	r2,zero
  20184c:	00002406 	br	2018e0 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  201850:	e0fffe03 	ldbu	r3,-8(fp)
  201854:	d0a01a43 	ldbu	r2,-32663(gp)
  201858:	10803fcc 	andi	r2,r2,255
  20185c:	d8000415 	stw	zero,16(sp)
  201860:	d8000315 	stw	zero,12(sp)
  201864:	d8800215 	stw	r2,8(sp)
  201868:	d8000115 	stw	zero,4(sp)
  20186c:	d8000015 	stw	zero,0(sp)
  201870:	01c002c4 	movi	r7,11
  201874:	01800844 	movi	r6,33
  201878:	000b883a 	mov	r5,zero
  20187c:	1809883a 	mov	r4,r3
  201880:	02021f80 	call	2021f8 <XferCtrlReq>
  201884:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  201888:	e0bffc03 	ldbu	r2,-16(fp)
  20188c:	10000226 	beq	r2,zero,201898 <HIDKProbe+0x3ac>
							return (FALSE);
  201890:	0005883a 	mov	r2,zero
  201894:	00001206 	br	2018e0 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
  201898:	00800044 	movi	r2,1
  20189c:	00001006 	br	2018e0 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
  2018a0:	e0fff90b 	ldhu	r3,-28(fp)
  2018a4:	00801074 	movhi	r2,65
  2018a8:	10a74704 	addi	r2,r2,-25316
  2018ac:	1885883a 	add	r2,r3,r2
  2018b0:	e0fffb17 	ldw	r3,-20(fp)
  2018b4:	18bf9f36 	bltu	r3,r2,201734 <_gp+0xffdefb20>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  2018b8:	00000206 	br	2018c4 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
  2018bc:	0005883a 	mov	r2,zero
  2018c0:	00000706 	br	2018e0 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  2018c4:	e0fff90b 	ldhu	r3,-28(fp)
  2018c8:	00801074 	movhi	r2,65
  2018cc:	10a74704 	addi	r2,r2,-25316
  2018d0:	1885883a 	add	r2,r3,r2
  2018d4:	e0fffb17 	ldw	r3,-20(fp)
  2018d8:	18bf4736 	bltu	r3,r2,2015f8 <_gp+0xffdef9e4>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  2018dc:	0005883a 	mov	r2,zero
}
  2018e0:	e037883a 	mov	sp,fp
  2018e4:	dfc00117 	ldw	ra,4(sp)
  2018e8:	df000017 	ldw	fp,0(sp)
  2018ec:	dec00204 	addi	sp,sp,8
  2018f0:	f800283a 	ret

002018f4 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
  2018f4:	deffff04 	addi	sp,sp,-4
  2018f8:	df000015 	stw	fp,0(sp)
  2018fc:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
  201900:	00801074 	movhi	r2,65
  201904:	10a73304 	addi	r2,r2,-25396
  201908:	00c01004 	movi	r3,64
  20190c:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
  201910:	00801074 	movhi	r2,65
  201914:	10a73304 	addi	r2,r2,-25396
  201918:	00c00404 	movi	r3,16
  20191c:	10c00385 	stb	r3,14(r2)
}
  201920:	0001883a 	nop
  201924:	e037883a 	mov	sp,fp
  201928:	df000017 	ldw	fp,0(sp)
  20192c:	dec00104 	addi	sp,sp,4
  201930:	f800283a 	ret

00201934 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
  201934:	defffb04 	addi	sp,sp,-20
  201938:	dfc00415 	stw	ra,16(sp)
  20193c:	df000315 	stw	fp,12(sp)
  201940:	df000304 	addi	fp,sp,12
  201944:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  201948:	d0a01a03 	ldbu	r2,-32664(gp)
  20194c:	10803fcc 	andi	r2,r2,255
  201950:	100b883a 	mov	r5,r2
  201954:	01003804 	movi	r4,224
  201958:	0201b100 	call	201b10 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  20195c:	d0a01a03 	ldbu	r2,-32664(gp)
  201960:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  201964:	d0a01a03 	ldbu	r2,-32664(gp)
  201968:	10c03fcc 	andi	r3,r2,255
  20196c:	00801074 	movhi	r2,65
  201970:	10a78704 	addi	r2,r2,-25060
  201974:	180690fa 	slli	r3,r3,3
  201978:	10c5883a 	add	r2,r2,r3
  20197c:	10800017 	ldw	r2,0(r2)
  201980:	10800204 	addi	r2,r2,8
  201984:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  201988:	10803fcc 	andi	r2,r2,255
  20198c:	d8800015 	stw	r2,0(sp)
  201990:	e1ffff17 	ldw	r7,-4(fp)
  201994:	01800204 	movi	r6,8
  201998:	01400044 	movi	r5,1
  20199c:	020261c0 	call	20261c <XferInTransfer>
  2019a0:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
  2019a4:	e0bffe03 	ldbu	r2,-8(fp)
}
  2019a8:	e037883a 	mov	sp,fp
  2019ac:	dfc00117 	ldw	ra,4(sp)
  2019b0:	df000017 	ldw	fp,0(sp)
  2019b4:	dec00204 	addi	sp,sp,8
  2019b8:	f800283a 	ret

002019bc <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
  2019bc:	defffb04 	addi	sp,sp,-20
  2019c0:	dfc00415 	stw	ra,16(sp)
  2019c4:	df000315 	stw	fp,12(sp)
  2019c8:	df000304 	addi	fp,sp,12
  2019cc:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  2019d0:	d0a01a03 	ldbu	r2,-32664(gp)
  2019d4:	10803fcc 	andi	r2,r2,255
  2019d8:	100b883a 	mov	r5,r2
  2019dc:	01003804 	movi	r4,224
  2019e0:	0201b100 	call	201b10 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  2019e4:	d0a01a03 	ldbu	r2,-32664(gp)
  2019e8:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  2019ec:	d0a01a03 	ldbu	r2,-32664(gp)
  2019f0:	10c03fcc 	andi	r3,r2,255
  2019f4:	00801074 	movhi	r2,65
  2019f8:	10a78704 	addi	r2,r2,-25060
  2019fc:	180690fa 	slli	r3,r3,3
  201a00:	10c5883a 	add	r2,r2,r3
  201a04:	10800017 	ldw	r2,0(r2)
  201a08:	10800204 	addi	r2,r2,8
  201a0c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  201a10:	10803fcc 	andi	r2,r2,255
  201a14:	d8800015 	stw	r2,0(sp)
  201a18:	e1ffff17 	ldw	r7,-4(fp)
  201a1c:	01800204 	movi	r6,8
  201a20:	01400044 	movi	r5,1
  201a24:	020261c0 	call	20261c <XferInTransfer>
  201a28:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
  201a2c:	e0bffe03 	ldbu	r2,-8(fp)
}
  201a30:	e037883a 	mov	sp,fp
  201a34:	dfc00117 	ldw	ra,4(sp)
  201a38:	df000017 	ldw	fp,0(sp)
  201a3c:	dec00204 	addi	sp,sp,8
  201a40:	f800283a 	ret

00201a44 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  201a44:	defffb04 	addi	sp,sp,-20
  201a48:	df000415 	stw	fp,16(sp)
  201a4c:	df000404 	addi	fp,sp,16
  201a50:	2007883a 	mov	r3,r4
  201a54:	2805883a 	mov	r2,r5
  201a58:	e1bffe15 	stw	r6,-8(fp)
  201a5c:	e1ffff15 	stw	r7,-4(fp)
  201a60:	e0fffc05 	stb	r3,-16(fp)
  201a64:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
  201a68:	0005883a 	mov	r2,zero
}
  201a6c:	e037883a 	mov	sp,fp
  201a70:	df000017 	ldw	fp,0(sp)
  201a74:	dec00104 	addi	sp,sp,4
  201a78:	f800283a 	ret

00201a7c <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  201a7c:	defffb04 	addi	sp,sp,-20
  201a80:	df000415 	stw	fp,16(sp)
  201a84:	df000404 	addi	fp,sp,16
  201a88:	2007883a 	mov	r3,r4
  201a8c:	2805883a 	mov	r2,r5
  201a90:	e1bffe15 	stw	r6,-8(fp)
  201a94:	e1ffff15 	stw	r7,-4(fp)
  201a98:	e0fffc05 	stb	r3,-16(fp)
  201a9c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
  201aa0:	0005883a 	mov	r2,zero
}
  201aa4:	e037883a 	mov	sp,fp
  201aa8:	df000017 	ldw	fp,0(sp)
  201aac:	dec00104 	addi	sp,sp,4
  201ab0:	f800283a 	ret

00201ab4 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
  201ab4:	defffc04 	addi	sp,sp,-16
  201ab8:	df000315 	stw	fp,12(sp)
  201abc:	df000304 	addi	fp,sp,12
  201ac0:	2807883a 	mov	r3,r5
  201ac4:	3005883a 	mov	r2,r6
  201ac8:	e13ffd05 	stb	r4,-12(fp)
  201acc:	e0fffe05 	stb	r3,-8(fp)
  201ad0:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
  201ad4:	0001883a 	nop
  201ad8:	e037883a 	mov	sp,fp
  201adc:	df000017 	ldw	fp,0(sp)
  201ae0:	dec00104 	addi	sp,sp,4
  201ae4:	f800283a 	ret

00201ae8 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
  201ae8:	defffe04 	addi	sp,sp,-8
  201aec:	df000115 	stw	fp,4(sp)
  201af0:	df000104 	addi	fp,sp,4
  201af4:	2005883a 	mov	r2,r4
  201af8:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
  201afc:	0001883a 	nop
  201b00:	e037883a 	mov	sp,fp
  201b04:	df000017 	ldw	fp,0(sp)
  201b08:	dec00104 	addi	sp,sp,4
  201b0c:	f800283a 	ret

00201b10 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
  201b10:	defff804 	addi	sp,sp,-32
  201b14:	dfc00715 	stw	ra,28(sp)
  201b18:	df000615 	stw	fp,24(sp)
  201b1c:	df000604 	addi	fp,sp,24
  201b20:	2007883a 	mov	r3,r4
  201b24:	2805883a 	mov	r2,r5
  201b28:	e0fffe05 	stb	r3,-8(fp)
  201b2c:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE temp[2];
	temp[0]=reg+2;
  201b30:	e0bffe03 	ldbu	r2,-8(fp)
  201b34:	10800084 	addi	r2,r2,2
  201b38:	e0bffd05 	stb	r2,-12(fp)
	temp[1]=val;
  201b3c:	e0bfff03 	ldbu	r2,-4(fp)
  201b40:	e0bffd45 	stb	r2,-11(fp)
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,2,temp,0,0,0)){
  201b44:	d8000215 	stw	zero,8(sp)
  201b48:	d8000115 	stw	zero,4(sp)
  201b4c:	d8000015 	stw	zero,0(sp)
  201b50:	e1fffd04 	addi	r7,fp,-12
  201b54:	01800084 	movi	r6,2
  201b58:	000b883a 	mov	r5,zero
  201b5c:	01001074 	movhi	r4,65
  201b60:	21042004 	addi	r4,r4,4224
  201b64:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201b68:	1000030e 	bge	r2,zero,201b78 <MAXreg_wr+0x68>
		printf("Error 1\n");
  201b6c:	01000874 	movhi	r4,33
  201b70:	211a8f04 	addi	r4,r4,27196
  201b74:	0203fac0 	call	203fac <puts>
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
  201b78:	0001883a 	nop
  201b7c:	e037883a 	mov	sp,fp
  201b80:	dfc00117 	ldw	ra,4(sp)
  201b84:	df000017 	ldw	fp,0(sp)
  201b88:	dec00204 	addi	sp,sp,8
  201b8c:	f800283a 	ret

00201b90 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
  201b90:	defff804 	addi	sp,sp,-32
  201b94:	dfc00715 	stw	ra,28(sp)
  201b98:	df000615 	stw	fp,24(sp)
  201b9c:	df000604 	addi	fp,sp,24
  201ba0:	2007883a 	mov	r3,r4
  201ba4:	2805883a 	mov	r2,r5
  201ba8:	e1bfff15 	stw	r6,-4(fp)
  201bac:	e0fffd05 	stb	r3,-12(fp)
  201bb0:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	reg+=2;
  201bb4:	e0bffd03 	ldbu	r2,-12(fp)
  201bb8:	10800084 	addi	r2,r2,2
  201bbc:	e0bffd05 	stb	r2,-12(fp)
//	temp[0]=reg;
//	int i;
//	for (i=0;i<nbytes;i++){
//		temp[i+1]=data[i];
//	}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,0,0,1)){
  201bc0:	00800044 	movi	r2,1
  201bc4:	d8800215 	stw	r2,8(sp)
  201bc8:	d8000115 	stw	zero,4(sp)
  201bcc:	d8000015 	stw	zero,0(sp)
  201bd0:	e1fffd04 	addi	r7,fp,-12
  201bd4:	01800044 	movi	r6,1
  201bd8:	000b883a 	mov	r5,zero
  201bdc:	01001074 	movhi	r4,65
  201be0:	21042004 	addi	r4,r4,4224
  201be4:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201be8:	1000030e 	bge	r2,zero,201bf8 <MAXbytes_wr+0x68>
			printf("Error 2_1\n");
  201bec:	01000874 	movhi	r4,33
  201bf0:	211a9104 	addi	r4,r4,27204
  201bf4:	0203fac0 	call	203fac <puts>
		}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,nbytes,data,0,0,0 )){
  201bf8:	e0bffe03 	ldbu	r2,-8(fp)
  201bfc:	d8000215 	stw	zero,8(sp)
  201c00:	d8000115 	stw	zero,4(sp)
  201c04:	d8000015 	stw	zero,0(sp)
  201c08:	e1ffff17 	ldw	r7,-4(fp)
  201c0c:	100d883a 	mov	r6,r2
  201c10:	000b883a 	mov	r5,zero
  201c14:	01001074 	movhi	r4,65
  201c18:	21042004 	addi	r4,r4,4224
  201c1c:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201c20:	1000030e 	bge	r2,zero,201c30 <MAXbytes_wr+0xa0>
			printf("Error 2_2\n");
  201c24:	01000874 	movhi	r4,33
  201c28:	211a9404 	addi	r4,r4,27216
  201c2c:	0203fac0 	call	203fac <puts>
		}
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
  201c30:	e0bffe03 	ldbu	r2,-8(fp)
  201c34:	e0ffff17 	ldw	r3,-4(fp)
  201c38:	1885883a 	add	r2,r3,r2
}
  201c3c:	e037883a 	mov	sp,fp
  201c40:	dfc00117 	ldw	ra,4(sp)
  201c44:	df000017 	ldw	fp,0(sp)
  201c48:	dec00204 	addi	sp,sp,8
  201c4c:	f800283a 	ret

00201c50 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
  201c50:	defff904 	addi	sp,sp,-28
  201c54:	dfc00615 	stw	ra,24(sp)
  201c58:	df000515 	stw	fp,20(sp)
  201c5c:	df000504 	addi	fp,sp,20
  201c60:	2005883a 	mov	r2,r4
  201c64:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:

	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE temp[1];
	temp[0]=0;
  201c68:	e03ffe05 	stb	zero,-8(fp)
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,0,0,1)){
  201c6c:	e0ffff04 	addi	r3,fp,-4
  201c70:	00800044 	movi	r2,1
  201c74:	d8800215 	stw	r2,8(sp)
  201c78:	d8000115 	stw	zero,4(sp)
  201c7c:	d8000015 	stw	zero,0(sp)
  201c80:	180f883a 	mov	r7,r3
  201c84:	01800044 	movi	r6,1
  201c88:	000b883a 	mov	r5,zero
  201c8c:	01001074 	movhi	r4,65
  201c90:	21042004 	addi	r4,r4,4224
  201c94:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201c98:	1000030e 	bge	r2,zero,201ca8 <MAXreg_rd+0x58>
				printf("Error 3\n");
  201c9c:	01000874 	movhi	r4,33
  201ca0:	211a9704 	addi	r4,r4,27228
  201ca4:	0203fac0 	call	203fac <puts>
			}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,0,0,1,temp,0)){
  201ca8:	d8000215 	stw	zero,8(sp)
  201cac:	e0bffe04 	addi	r2,fp,-8
  201cb0:	d8800115 	stw	r2,4(sp)
  201cb4:	00800044 	movi	r2,1
  201cb8:	d8800015 	stw	r2,0(sp)
  201cbc:	000f883a 	mov	r7,zero
  201cc0:	000d883a 	mov	r6,zero
  201cc4:	000b883a 	mov	r5,zero
  201cc8:	01001074 	movhi	r4,65
  201ccc:	21042004 	addi	r4,r4,4224
  201cd0:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201cd4:	1000030e 	bge	r2,zero,201ce4 <MAXreg_rd+0x94>
				printf("Error 3\n");
  201cd8:	01000874 	movhi	r4,33
  201cdc:	211a9704 	addi	r4,r4,27228
  201ce0:	0203fac0 	call	203fac <puts>
			}
	return temp[0];
  201ce4:	e0bffe03 	ldbu	r2,-8(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
//	return val
}
  201ce8:	e037883a 	mov	sp,fp
  201cec:	dfc00117 	ldw	ra,4(sp)
  201cf0:	df000017 	ldw	fp,0(sp)
  201cf4:	dec00204 	addi	sp,sp,8
  201cf8:	f800283a 	ret

00201cfc <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
  201cfc:	defff804 	addi	sp,sp,-32
  201d00:	dfc00715 	stw	ra,28(sp)
  201d04:	df000615 	stw	fp,24(sp)
  201d08:	df000604 	addi	fp,sp,24
  201d0c:	2007883a 	mov	r3,r4
  201d10:	2805883a 	mov	r2,r5
  201d14:	e1bfff15 	stw	r6,-4(fp)
  201d18:	e0fffd05 	stb	r3,-12(fp)
  201d1c:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,nbytes,data,0)){
  201d20:	e0bffe03 	ldbu	r2,-8(fp)
  201d24:	d8000215 	stw	zero,8(sp)
  201d28:	e0ffff17 	ldw	r3,-4(fp)
  201d2c:	d8c00115 	stw	r3,4(sp)
  201d30:	d8800015 	stw	r2,0(sp)
  201d34:	e1fffd04 	addi	r7,fp,-12
  201d38:	01800044 	movi	r6,1
  201d3c:	000b883a 	mov	r5,zero
  201d40:	01001074 	movhi	r4,65
  201d44:	21042004 	addi	r4,r4,4224
  201d48:	0213fbc0 	call	213fbc <alt_avalon_spi_command>
  201d4c:	1000030e 	bge	r2,zero,201d5c <MAXbytes_rd+0x60>
			printf("Error 4\n");
  201d50:	01000874 	movhi	r4,33
  201d54:	211a9904 	addi	r4,r4,27236
  201d58:	0203fac0 	call	203fac <puts>

	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
  201d5c:	e0bffe03 	ldbu	r2,-8(fp)
  201d60:	e0ffff17 	ldw	r3,-4(fp)
  201d64:	1885883a 	add	r2,r3,r2
}
  201d68:	e037883a 	mov	sp,fp
  201d6c:	dfc00117 	ldw	ra,4(sp)
  201d70:	df000017 	ldw	fp,0(sp)
  201d74:	dec00204 	addi	sp,sp,8
  201d78:	f800283a 	ret

00201d7c <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
  201d7c:	defffd04 	addi	sp,sp,-12
  201d80:	dfc00215 	stw	ra,8(sp)
  201d84:	df000115 	stw	fp,4(sp)
  201d88:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
  201d8c:	0007883a 	mov	r3,zero
  201d90:	00801074 	movhi	r2,65
  201d94:	10843c04 	addi	r2,r2,4336
  201d98:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
  201d9c:	010003f4 	movhi	r4,15
  201da0:	21109004 	addi	r4,r4,16960
  201da4:	02116e40 	call	2116e4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
  201da8:	00c00044 	movi	r3,1
  201dac:	00801074 	movhi	r2,65
  201db0:	10843c04 	addi	r2,r2,4336
  201db4:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
  201db8:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
  201dbc:	01400804 	movi	r5,32
  201dc0:	01001e04 	movi	r4,120
  201dc4:	0201b100 	call	201b10 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
  201dc8:	000b883a 	mov	r5,zero
  201dcc:	01001e04 	movi	r4,120
  201dd0:	0201b100 	call	201b10 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  201dd4:	00000806 	br	201df8 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
  201dd8:	e0bfff03 	ldbu	r2,-4(fp)
  201ddc:	10800044 	addi	r2,r2,1
  201de0:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
  201de4:	e0bfff03 	ldbu	r2,-4(fp)
  201de8:	1000031e 	bne	r2,zero,201df8 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
  201dec:	01000874 	movhi	r4,33
  201df0:	211a9b04 	addi	r4,r4,27244
  201df4:	0203e900 	call	203e90 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  201df8:	01001a04 	movi	r4,104
  201dfc:	0201c500 	call	201c50 <MAXreg_rd>
  201e00:	10803fcc 	andi	r2,r2,255
  201e04:	1080004c 	andi	r2,r2,1
  201e08:	103ff326 	beq	r2,zero,201dd8 <_gp+0xffdf01c4>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
  201e0c:	0001883a 	nop
  201e10:	e037883a 	mov	sp,fp
  201e14:	dfc00117 	ldw	ra,4(sp)
  201e18:	df000017 	ldw	fp,0(sp)
  201e1c:	dec00204 	addi	sp,sp,8
  201e20:	f800283a 	ret

00201e24 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
  201e24:	defffe04 	addi	sp,sp,-8
  201e28:	df000115 	stw	fp,4(sp)
  201e2c:	df000104 	addi	fp,sp,4
  201e30:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
  201e34:	00800044 	movi	r2,1
}
  201e38:	e037883a 	mov	sp,fp
  201e3c:	df000017 	ldw	fp,0(sp)
  201e40:	dec00104 	addi	sp,sp,4
  201e44:	f800283a 	ret

00201e48 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
  201e48:	defffd04 	addi	sp,sp,-12
  201e4c:	dfc00215 	stw	ra,8(sp)
  201e50:	df000115 	stw	fp,4(sp)
  201e54:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
  201e58:	01003e04 	movi	r4,248
  201e5c:	0201c500 	call	201c50 <MAXreg_rd>
  201e60:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
  201e64:	e0ffff03 	ldbu	r3,-4(fp)
  201e68:	00bff004 	movi	r2,-64
  201e6c:	1884703a 	and	r2,r3,r2
  201e70:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
  201e74:	e0bfff03 	ldbu	r2,-4(fp)
  201e78:	10c01020 	cmpeqi	r3,r2,64
  201e7c:	1800221e 	bne	r3,zero,201f08 <MAX_busprobe+0xc0>
  201e80:	10c01048 	cmpgei	r3,r2,65
  201e84:	1800021e 	bne	r3,zero,201e90 <MAX_busprobe+0x48>
  201e88:	10003b26 	beq	r2,zero,201f78 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201e8c:	00004a06 	br	201fb8 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
  201e90:	10c02020 	cmpeqi	r3,r2,128
  201e94:	1800031e 	bne	r3,zero,201ea4 <MAX_busprobe+0x5c>
  201e98:	10803020 	cmpeqi	r2,r2,192
  201e9c:	1000331e 	bne	r2,zero,201f6c <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201ea0:	00004506 	br	201fb8 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  201ea4:	d0a00303 	ldbu	r2,-32756(gp)
  201ea8:	10803fcc 	andi	r2,r2,255
  201eac:	108004e0 	cmpeqi	r2,r2,19
  201eb0:	10003e1e 	bne	r2,zero,201fac <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  201eb4:	01003604 	movi	r4,216
  201eb8:	0201c500 	call	201c50 <MAXreg_rd>
  201ebc:	10803fcc 	andi	r2,r2,255
  201ec0:	1080008c 	andi	r2,r2,2
  201ec4:	1000071e 	bne	r2,zero,201ee4 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  201ec8:	01403244 	movi	r5,201
  201ecc:	01003604 	movi	r4,216
  201ed0:	0201b100 	call	201b10 <MAXreg_wr>
				printf("Starting in full speed\n");
  201ed4:	01000874 	movhi	r4,33
  201ed8:	211a9f04 	addi	r4,r4,27260
  201edc:	0203fac0 	call	203fac <puts>
  201ee0:	00000606 	br	201efc <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
  201ee4:	014032c4 	movi	r5,203
  201ee8:	01003604 	movi	r4,216
  201eec:	0201b100 	call	201b10 <MAXreg_wr>
				printf("Starting in low speed\n");
  201ef0:	01000874 	movhi	r4,33
  201ef4:	211aa504 	addi	r4,r4,27284
  201ef8:	0203fac0 	call	203fac <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  201efc:	00800404 	movi	r2,16
  201f00:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201f04:	00002906 	br	201fac <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  201f08:	d0a00303 	ldbu	r2,-32756(gp)
  201f0c:	10803fcc 	andi	r2,r2,255
  201f10:	108004e0 	cmpeqi	r2,r2,19
  201f14:	1000271e 	bne	r2,zero,201fb4 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  201f18:	01003604 	movi	r4,216
  201f1c:	0201c500 	call	201c50 <MAXreg_rd>
  201f20:	10803fcc 	andi	r2,r2,255
  201f24:	1080008c 	andi	r2,r2,2
  201f28:	1000071e 	bne	r2,zero,201f48 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
  201f2c:	014032c4 	movi	r5,203
  201f30:	01003604 	movi	r4,216
  201f34:	0201b100 	call	201b10 <MAXreg_wr>
				printf("Starting in low speed\n");
  201f38:	01000874 	movhi	r4,33
  201f3c:	211aa504 	addi	r4,r4,27284
  201f40:	0203fac0 	call	203fac <puts>
  201f44:	00000606 	br	201f60 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  201f48:	01403244 	movi	r5,201
  201f4c:	01003604 	movi	r4,216
  201f50:	0201b100 	call	201b10 <MAXreg_wr>
				printf("Starting in full speed\n");
  201f54:	01000874 	movhi	r4,33
  201f58:	211a9f04 	addi	r4,r4,27260
  201f5c:	0203fac0 	call	203fac <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  201f60:	00800404 	movi	r2,16
  201f64:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201f68:	00001206 	br	201fb4 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
  201f6c:	00800104 	movi	r2,4
  201f70:	d0a00305 	stb	r2,-32756(gp)
		break;
  201f74:	00001006 	br	201fb8 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
  201f78:	d0a00303 	ldbu	r2,-32756(gp)
  201f7c:	10803fcc 	andi	r2,r2,255
  201f80:	10803c0c 	andi	r2,r2,240
  201f84:	10000326 	beq	r2,zero,201f94 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
  201f88:	00800044 	movi	r2,1
  201f8c:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
  201f90:	00000906 	br	201fb8 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
  201f94:	01403244 	movi	r5,201
  201f98:	01003604 	movi	r4,216
  201f9c:	0201b100 	call	201b10 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
  201fa0:	008000c4 	movi	r2,3
  201fa4:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201fa8:	00000306 	br	201fb8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
  201fac:	0001883a 	nop
  201fb0:	00000106 	br	201fb8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
  201fb4:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201fb8:	0001883a 	nop
  201fbc:	e037883a 	mov	sp,fp
  201fc0:	dfc00117 	ldw	ra,4(sp)
  201fc4:	df000017 	ldw	fp,0(sp)
  201fc8:	dec00204 	addi	sp,sp,8
  201fcc:	f800283a 	ret

00201fd0 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
  201fd0:	defffd04 	addi	sp,sp,-12
  201fd4:	dfc00215 	stw	ra,8(sp)
  201fd8:	df000115 	stw	fp,4(sp)
  201fdc:	df000104 	addi	fp,sp,4
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
  201fe0:	01400684 	movi	r5,26
  201fe4:	01002204 	movi	r4,136
  201fe8:	0201b100 	call	201b10 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
  201fec:	0201d7c0 	call	201d7c <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
  201ff0:	0009883a 	mov	r4,zero
  201ff4:	0201e240 	call	201e24 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
  201ff8:	01402004 	movi	r5,128
  201ffc:	01002e04 	movi	r4,184
  202000:	0201b100 	call	201b10 <MAXreg_wr>
	Vbus_power( ON);
  202004:	01000044 	movi	r4,1
  202008:	0201e240 	call	201e24 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
  20200c:	01403444 	movi	r5,209
  202010:	01003604 	movi	r4,216
  202014:	0201b100 	call	201b10 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
  202018:	01400804 	movi	r5,32
  20201c:	01003404 	movi	r4,208
  202020:	0201b100 	call	201b10 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
  202024:	01400104 	movi	r5,4
  202028:	01003a04 	movi	r4,232
  20202c:	0201b100 	call	201b10 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
  202030:	0201e480 	call	201e48 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
  202034:	01400804 	movi	r5,32
  202038:	01003204 	movi	r4,200
  20203c:	0201b100 	call	201b10 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
  202040:	01400044 	movi	r5,1
  202044:	01002004 	movi	r4,128
  202048:	0201b100 	call	201b10 <MAXreg_wr>
	BYTE testbyte=0x12;
  20204c:	00800484 	movi	r2,18
  202050:	e0bfff05 	stb	r2,-4(fp)
	printf("\n%x\n",MAXreg_rd(testbyte));
  202054:	e0bfff03 	ldbu	r2,-4(fp)
  202058:	1009883a 	mov	r4,r2
  20205c:	0201c500 	call	201c50 <MAXreg_rd>
  202060:	10803fcc 	andi	r2,r2,255
  202064:	100b883a 	mov	r5,r2
  202068:	01000874 	movhi	r4,33
  20206c:	211aab04 	addi	r4,r4,27308
  202070:	0203e900 	call	203e90 <printf>
}
  202074:	0001883a 	nop
  202078:	e037883a 	mov	sp,fp
  20207c:	dfc00117 	ldw	ra,4(sp)
  202080:	df000017 	ldw	fp,0(sp)
  202084:	dec00204 	addi	sp,sp,8
  202088:	f800283a 	ret

0020208c <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
  20208c:	defffe04 	addi	sp,sp,-8
  202090:	dfc00115 	stw	ra,4(sp)
  202094:	df000015 	stw	fp,0(sp)
  202098:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
  20209c:	00801074 	movhi	r2,65
  2020a0:	10844004 	addi	r2,r2,4352
  2020a4:	10800037 	ldwio	r2,0(r2)
  2020a8:	1000041e 	bne	r2,zero,2020bc <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
  2020ac:	01000874 	movhi	r4,33
  2020b0:	211aad04 	addi	r4,r4,27316
  2020b4:	0203e900 	call	203e90 <printf>
		MaxIntHandler();
  2020b8:	02020f80 	call	2020f8 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
  2020bc:	00801074 	movhi	r2,65
  2020c0:	10844404 	addi	r2,r2,4368
  2020c4:	10800037 	ldwio	r2,0(r2)
  2020c8:	10800058 	cmpnei	r2,r2,1
  2020cc:	1000041e 	bne	r2,zero,2020e0 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
  2020d0:	01000874 	movhi	r4,33
  2020d4:	211ab104 	addi	r4,r4,27332
  2020d8:	0203e900 	call	203e90 <printf>
		MaxGpxHandler();
  2020dc:	02021c40 	call	2021c4 <MaxGpxHandler>
	}
}
  2020e0:	0001883a 	nop
  2020e4:	e037883a 	mov	sp,fp
  2020e8:	dfc00117 	ldw	ra,4(sp)
  2020ec:	df000017 	ldw	fp,0(sp)
  2020f0:	dec00204 	addi	sp,sp,8
  2020f4:	f800283a 	ret

002020f8 <MaxIntHandler>:

void MaxIntHandler(void) {
  2020f8:	defffd04 	addi	sp,sp,-12
  2020fc:	dfc00215 	stw	ra,8(sp)
  202100:	df000115 	stw	fp,4(sp)
  202104:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
  202108:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
  20210c:	01003204 	movi	r4,200
  202110:	0201c500 	call	201c50 <MAXreg_rd>
  202114:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
  202118:	e0bfff43 	ldbu	r2,-3(fp)
  20211c:	100b883a 	mov	r5,r2
  202120:	01000874 	movhi	r4,33
  202124:	211ab504 	addi	r4,r4,27348
  202128:	0203e900 	call	203e90 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
  20212c:	e0bfff43 	ldbu	r2,-3(fp)
  202130:	1080100c 	andi	r2,r2,64
  202134:	10000326 	beq	r2,zero,202144 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
  202138:	e0bfff03 	ldbu	r2,-4(fp)
  20213c:	10801014 	ori	r2,r2,64
  202140:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
  202144:	e0bfff43 	ldbu	r2,-3(fp)
  202148:	1080080c 	andi	r2,r2,32
  20214c:	10000426 	beq	r2,zero,202160 <MaxIntHandler+0x68>
		MAX_busprobe();
  202150:	0201e480 	call	201e48 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
  202154:	e0bfff03 	ldbu	r2,-4(fp)
  202158:	10800814 	ori	r2,r2,32
  20215c:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
  202160:	e0bfff43 	ldbu	r2,-3(fp)
  202164:	1080020c 	andi	r2,r2,8
  202168:	10000326 	beq	r2,zero,202178 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
  20216c:	000b883a 	mov	r5,zero
  202170:	01000e04 	movi	r4,56
  202174:	0201b100 	call	201b10 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
  202178:	e0bfff43 	ldbu	r2,-3(fp)
  20217c:	1080004c 	andi	r2,r2,1
  202180:	10000626 	beq	r2,zero,20219c <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
  202184:	d0a00303 	ldbu	r2,-32756(gp)
  202188:	10800044 	addi	r2,r2,1
  20218c:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
  202190:	e0bfff03 	ldbu	r2,-4(fp)
  202194:	10800054 	ori	r2,r2,1
  202198:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
  20219c:	e0bfff03 	ldbu	r2,-4(fp)
  2021a0:	100b883a 	mov	r5,r2
  2021a4:	01003204 	movi	r4,200
  2021a8:	0201b100 	call	201b10 <MAXreg_wr>
}
  2021ac:	0001883a 	nop
  2021b0:	e037883a 	mov	sp,fp
  2021b4:	dfc00117 	ldw	ra,4(sp)
  2021b8:	df000017 	ldw	fp,0(sp)
  2021bc:	dec00204 	addi	sp,sp,8
  2021c0:	f800283a 	ret

002021c4 <MaxGpxHandler>:

void MaxGpxHandler(void) {
  2021c4:	defffd04 	addi	sp,sp,-12
  2021c8:	dfc00215 	stw	ra,8(sp)
  2021cc:	df000115 	stw	fp,4(sp)
  2021d0:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
  2021d4:	01002c04 	movi	r4,176
  2021d8:	0201c500 	call	201c50 <MAXreg_rd>
  2021dc:	e0bfff05 	stb	r2,-4(fp)
}
  2021e0:	0001883a 	nop
  2021e4:	e037883a 	mov	sp,fp
  2021e8:	dfc00117 	ldw	ra,4(sp)
  2021ec:	df000017 	ldw	fp,0(sp)
  2021f0:	dec00204 	addi	sp,sp,8
  2021f4:	f800283a 	ret

002021f8 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
  2021f8:	defff104 	addi	sp,sp,-60
  2021fc:	dfc00e15 	stw	ra,56(sp)
  202200:	df000d15 	stw	fp,52(sp)
  202204:	df000d04 	addi	fp,sp,52
  202208:	2015883a 	mov	r10,r4
  20220c:	2813883a 	mov	r9,r5
  202210:	3011883a 	mov	r8,r6
  202214:	380d883a 	mov	r6,r7
  202218:	e1400217 	ldw	r5,8(fp)
  20221c:	e1000317 	ldw	r4,12(fp)
  202220:	e0c00417 	ldw	r3,16(fp)
  202224:	e0800517 	ldw	r2,20(fp)
  202228:	e2bff805 	stb	r10,-32(fp)
  20222c:	e27ff905 	stb	r9,-28(fp)
  202230:	e23ffa05 	stb	r8,-24(fp)
  202234:	e1bffb05 	stb	r6,-20(fp)
  202238:	e17ffc05 	stb	r5,-16(fp)
  20223c:	e13ffd05 	stb	r4,-12(fp)
  202240:	e0fffe0d 	sth	r3,-8(fp)
  202244:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
  202248:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
  20224c:	00800044 	movi	r2,1
  202250:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
  202254:	e0800617 	ldw	r2,24(fp)
  202258:	1000011e 	bne	r2,zero,202260 <XferCtrlReq+0x68>
        datastage = 0;
  20225c:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
  202260:	e0bff803 	ldbu	r2,-32(fp)
  202264:	100b883a 	mov	r5,r2
  202268:	01003804 	movi	r4,224
  20226c:	0201b100 	call	201b10 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
  202270:	e0bffa03 	ldbu	r2,-24(fp)
  202274:	10803fcc 	andi	r2,r2,255
  202278:	1080201c 	xori	r2,r2,128
  20227c:	10bfe004 	addi	r2,r2,-128
  202280:	1000020e 	bge	r2,zero,20228c <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
  202284:	00800044 	movi	r2,1
  202288:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
  20228c:	e0bffa03 	ldbu	r2,-24(fp)
  202290:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
  202294:	e0bffb03 	ldbu	r2,-20(fp)
  202298:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
  20229c:	e0bffc03 	ldbu	r2,-16(fp)
  2022a0:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
  2022a4:	e0bffd03 	ldbu	r2,-12(fp)
  2022a8:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
  2022ac:	e0bffe0b 	ldhu	r2,-8(fp)
  2022b0:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
  2022b4:	e0bfff0b 	ldhu	r2,-4(fp)
  2022b8:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
  2022bc:	e0bff584 	addi	r2,fp,-42
  2022c0:	100d883a 	mov	r6,r2
  2022c4:	01400204 	movi	r5,8
  2022c8:	01000804 	movi	r4,32
  2022cc:	0201b900 	call	201b90 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
  2022d0:	e0bff903 	ldbu	r2,-28(fp)
  2022d4:	100b883a 	mov	r5,r2
  2022d8:	01000404 	movi	r4,16
  2022dc:	02024a00 	call	2024a0 <XferDispatchPkt>
  2022e0:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
  2022e4:	e0bff543 	ldbu	r2,-43(fp)
  2022e8:	10000226 	beq	r2,zero,2022f4 <XferCtrlReq+0xfc>
        return( rcode );
  2022ec:	e0bff543 	ldbu	r2,-43(fp)
  2022f0:	00000f06 	br	202330 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
  2022f4:	e0bff503 	ldbu	r2,-44(fp)
  2022f8:	1085883a 	add	r2,r2,r2
  2022fc:	1087883a 	add	r3,r2,r2
  202300:	d0a00104 	addi	r2,gp,-32764
  202304:	1885883a 	add	r2,r3,r2
  202308:	10800017 	ldw	r2,0(r2)
  20230c:	e13ff803 	ldbu	r4,-32(fp)
  202310:	e17ff903 	ldbu	r5,-28(fp)
  202314:	e1bfff0b 	ldhu	r6,-4(fp)
  202318:	e0fff417 	ldw	r3,-48(fp)
  20231c:	d8c00015 	stw	r3,0(sp)
  202320:	e1c00617 	ldw	r7,24(fp)
  202324:	103ee83a 	callr	r2
  202328:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
  20232c:	e0bff543 	ldbu	r2,-43(fp)
}
  202330:	e037883a 	mov	sp,fp
  202334:	dfc00117 	ldw	ra,4(sp)
  202338:	df000017 	ldw	fp,0(sp)
  20233c:	dec00204 	addi	sp,sp,8
  202340:	f800283a 	ret

00202344 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  202344:	defff804 	addi	sp,sp,-32
  202348:	dfc00715 	stw	ra,28(sp)
  20234c:	df000615 	stw	fp,24(sp)
  202350:	df000604 	addi	fp,sp,24
  202354:	2807883a 	mov	r3,r5
  202358:	3005883a 	mov	r2,r6
  20235c:	e1ffff15 	stw	r7,-4(fp)
  202360:	e13ffc05 	stb	r4,-16(fp)
  202364:	e0fffd05 	stb	r3,-12(fp)
  202368:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
  20236c:	e0800217 	ldw	r2,8(fp)
  202370:	10002826 	beq	r2,zero,202414 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  202374:	e0fffc03 	ldbu	r3,-16(fp)
  202378:	00801074 	movhi	r2,65
  20237c:	10a78704 	addi	r2,r2,-25060
  202380:	180690fa 	slli	r3,r3,3
  202384:	10c5883a 	add	r2,r2,r3
  202388:	10c00017 	ldw	r3,0(r2)
  20238c:	e0bffd03 	ldbu	r2,-12(fp)
  202390:	100490fa 	slli	r2,r2,3
  202394:	1885883a 	add	r2,r3,r2
  202398:	00c00804 	movi	r3,32
  20239c:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
  2023a0:	e13ffc03 	ldbu	r4,-16(fp)
  2023a4:	e17ffd03 	ldbu	r5,-12(fp)
  2023a8:	e1bffe0b 	ldhu	r6,-8(fp)
  2023ac:	e0fffc03 	ldbu	r3,-16(fp)
  2023b0:	00801074 	movhi	r2,65
  2023b4:	10a78704 	addi	r2,r2,-25060
  2023b8:	180690fa 	slli	r3,r3,3
  2023bc:	10c5883a 	add	r2,r2,r3
  2023c0:	10c00017 	ldw	r3,0(r2)
  2023c4:	e0bffd03 	ldbu	r2,-12(fp)
  2023c8:	100490fa 	slli	r2,r2,3
  2023cc:	1885883a 	add	r2,r3,r2
  2023d0:	1080008b 	ldhu	r2,2(r2)
  2023d4:	10803fcc 	andi	r2,r2,255
  2023d8:	d8800015 	stw	r2,0(sp)
  2023dc:	e1ffff17 	ldw	r7,-4(fp)
  2023e0:	020261c0 	call	20261c <XferInTransfer>
  2023e4:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
  2023e8:	e0bffb03 	ldbu	r2,-20(fp)
  2023ec:	10000226 	beq	r2,zero,2023f8 <XferCtrlData+0xb4>
        return( rcode );
  2023f0:	e0bffb03 	ldbu	r2,-20(fp)
  2023f4:	00000806 	br	202418 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
  2023f8:	e0bffd03 	ldbu	r2,-12(fp)
  2023fc:	100b883a 	mov	r5,r2
  202400:	01002804 	movi	r4,160
  202404:	02024a00 	call	2024a0 <XferDispatchPkt>
  202408:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
  20240c:	e0bffb03 	ldbu	r2,-20(fp)
  202410:	00000106 	br	202418 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
  202414:	00bfffc4 	movi	r2,-1
    }
}
  202418:	e037883a 	mov	sp,fp
  20241c:	dfc00117 	ldw	ra,4(sp)
  202420:	df000017 	ldw	fp,0(sp)
  202424:	dec00204 	addi	sp,sp,8
  202428:	f800283a 	ret

0020242c <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  20242c:	defff904 	addi	sp,sp,-28
  202430:	dfc00615 	stw	ra,24(sp)
  202434:	df000515 	stw	fp,20(sp)
  202438:	df000504 	addi	fp,sp,20
  20243c:	2807883a 	mov	r3,r5
  202440:	3005883a 	mov	r2,r6
  202444:	e1ffff15 	stw	r7,-4(fp)
  202448:	e13ffc05 	stb	r4,-16(fp)
  20244c:	e0fffd05 	stb	r3,-12(fp)
  202450:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
  202454:	e0800217 	ldw	r2,8(fp)
  202458:	10000626 	beq	r2,zero,202474 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
  20245c:	e0bffd03 	ldbu	r2,-12(fp)
  202460:	100b883a 	mov	r5,r2
  202464:	01002804 	movi	r4,160
  202468:	02024a00 	call	2024a0 <XferDispatchPkt>
  20246c:	e0bffb05 	stb	r2,-20(fp)
  202470:	00000506 	br	202488 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
  202474:	e0bffd03 	ldbu	r2,-12(fp)
  202478:	100b883a 	mov	r5,r2
  20247c:	01002004 	movi	r4,128
  202480:	02024a00 	call	2024a0 <XferDispatchPkt>
  202484:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
  202488:	e0bffb03 	ldbu	r2,-20(fp)
}
  20248c:	e037883a 	mov	sp,fp
  202490:	dfc00117 	ldw	ra,4(sp)
  202494:	df000017 	ldw	fp,0(sp)
  202498:	dec00204 	addi	sp,sp,8
  20249c:	f800283a 	ret

002024a0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
  2024a0:	defff904 	addi	sp,sp,-28
  2024a4:	dfc00615 	stw	ra,24(sp)
  2024a8:	df000515 	stw	fp,20(sp)
  2024ac:	df000504 	addi	fp,sp,20
  2024b0:	2007883a 	mov	r3,r4
  2024b4:	2805883a 	mov	r2,r5
  2024b8:	e0fffe05 	stb	r3,-8(fp)
  2024bc:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  2024c0:	d0a02b17 	ldw	r2,-32596(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
  2024c4:	0140fa04 	movi	r5,1000
  2024c8:	1009883a 	mov	r4,r2
  2024cc:	02032a40 	call	2032a4 <__mulsi3>
  2024d0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  2024d4:	d0a02a17 	ldw	r2,-32600(gp)
  2024d8:	100b883a 	mov	r5,r2
  2024dc:	1809883a 	mov	r4,r3
  2024e0:	02031e80 	call	2031e8 <__udivsi3>
  2024e4:	1084e204 	addi	r2,r2,5000
  2024e8:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
  2024ec:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
  2024f0:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
  2024f4:	e0fffe03 	ldbu	r3,-8(fp)
  2024f8:	e0bfff03 	ldbu	r2,-4(fp)
  2024fc:	1884b03a 	or	r2,r3,r2
  202500:	10803fcc 	andi	r2,r2,255
  202504:	100b883a 	mov	r5,r2
  202508:	01003c04 	movi	r4,240
  20250c:	0201b100 	call	201b10 <MAXreg_wr>
        rcode = 0xff;
  202510:	00bfffc4 	movi	r2,-1
  202514:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  202518:	00000d06 	br	202550 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
  20251c:	01003204 	movi	r4,200
  202520:	0201c500 	call	201c50 <MAXreg_rd>
  202524:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
  202528:	e0bffd03 	ldbu	r2,-12(fp)
  20252c:	10803fcc 	andi	r2,r2,255
  202530:	1080201c 	xori	r2,r2,128
  202534:	10bfe004 	addi	r2,r2,-128
  202538:	1000050e 	bge	r2,zero,202550 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
  20253c:	01402004 	movi	r5,128
  202540:	01003204 	movi	r4,200
  202544:	0201b100 	call	201b10 <MAXreg_wr>
                rcode = 0x00;
  202548:	e03ffb05 	stb	zero,-20(fp)
                break;
  20254c:	00000c06 	br	202580 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202550:	d0a02b17 	ldw	r2,-32596(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  202554:	0140fa04 	movi	r5,1000
  202558:	1009883a 	mov	r4,r2
  20255c:	02032a40 	call	2032a4 <__mulsi3>
  202560:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  202564:	d0a02a17 	ldw	r2,-32600(gp)
  202568:	100b883a 	mov	r5,r2
  20256c:	1809883a 	mov	r4,r3
  202570:	02031e80 	call	2031e8 <__udivsi3>
  202574:	1007883a 	mov	r3,r2
  202578:	e0bffc17 	ldw	r2,-16(fp)
  20257c:	18bfe736 	bltu	r3,r2,20251c <_gp+0xffdf0908>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
  202580:	e0bffb03 	ldbu	r2,-20(fp)
  202584:	10000226 	beq	r2,zero,202590 <XferDispatchPkt+0xf0>
            return( rcode );
  202588:	e0bffb03 	ldbu	r2,-20(fp)
  20258c:	00001e06 	br	202608 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
  202590:	01003e04 	movi	r4,248
  202594:	0201c500 	call	201c50 <MAXreg_rd>
  202598:	108003cc 	andi	r2,r2,15
  20259c:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
  2025a0:	e0bffb03 	ldbu	r2,-20(fp)
  2025a4:	10800118 	cmpnei	r2,r2,4
  2025a8:	1000071e 	bne	r2,zero,2025c8 <XferDispatchPkt+0x128>
            nak_count++;
  2025ac:	e0bffb83 	ldbu	r2,-18(fp)
  2025b0:	10800044 	addi	r2,r2,1
  2025b4:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
  2025b8:	e0bffb83 	ldbu	r2,-18(fp)
  2025bc:	10803218 	cmpnei	r2,r2,200
  2025c0:	10000b1e 	bne	r2,zero,2025f0 <XferDispatchPkt+0x150>
                break;
  2025c4:	00000f06 	br	202604 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
  2025c8:	e0bffb03 	ldbu	r2,-20(fp)
  2025cc:	10800398 	cmpnei	r2,r2,14
  2025d0:	1000091e 	bne	r2,zero,2025f8 <XferDispatchPkt+0x158>
            retry_count++;
  2025d4:	e0bffb43 	ldbu	r2,-19(fp)
  2025d8:	10800044 	addi	r2,r2,1
  2025dc:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
  2025e0:	e0bffb47 	ldb	r2,-19(fp)
  2025e4:	108000d8 	cmpnei	r2,r2,3
  2025e8:	10000526 	beq	r2,zero,202600 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
  2025ec:	00000106 	br	2025f4 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
  2025f0:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
  2025f4:	003fbf06 	br	2024f4 <_gp+0xffdf08e0>
            }
            else {
                continue;
            }
        }
        else break;
  2025f8:	0001883a 	nop
  2025fc:	00000106 	br	202604 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
  202600:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
  202604:	e0bffb03 	ldbu	r2,-20(fp)
}
  202608:	e037883a 	mov	sp,fp
  20260c:	dfc00117 	ldw	ra,4(sp)
  202610:	df000017 	ldw	fp,0(sp)
  202614:	dec00204 	addi	sp,sp,8
  202618:	f800283a 	ret

0020261c <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
  20261c:	defff804 	addi	sp,sp,-32
  202620:	dfc00715 	stw	ra,28(sp)
  202624:	df000615 	stw	fp,24(sp)
  202628:	df000604 	addi	fp,sp,24
  20262c:	2011883a 	mov	r8,r4
  202630:	2809883a 	mov	r4,r5
  202634:	3007883a 	mov	r3,r6
  202638:	e1fffe15 	stw	r7,-8(fp)
  20263c:	e0800217 	ldw	r2,8(fp)
  202640:	e23ffb05 	stb	r8,-20(fp)
  202644:	e13ffc05 	stb	r4,-16(fp)
  202648:	e0fffd0d 	sth	r3,-12(fp)
  20264c:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
  202650:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
  202654:	e0fffb03 	ldbu	r3,-20(fp)
  202658:	00801074 	movhi	r2,65
  20265c:	10a78704 	addi	r2,r2,-25060
  202660:	180690fa 	slli	r3,r3,3
  202664:	10c5883a 	add	r2,r2,r3
  202668:	10c00017 	ldw	r3,0(r2)
  20266c:	e0bffc03 	ldbu	r2,-16(fp)
  202670:	100490fa 	slli	r2,r2,3
  202674:	1885883a 	add	r2,r3,r2
  202678:	10800183 	ldbu	r2,6(r2)
  20267c:	10803fcc 	andi	r2,r2,255
  202680:	100b883a 	mov	r5,r2
  202684:	01003a04 	movi	r4,232
  202688:	0201b100 	call	201b10 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
  20268c:	e0bffc03 	ldbu	r2,-16(fp)
  202690:	100b883a 	mov	r5,r2
  202694:	0009883a 	mov	r4,zero
  202698:	02024a00 	call	2024a0 <XferDispatchPkt>
  20269c:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
  2026a0:	e0bffa83 	ldbu	r2,-22(fp)
  2026a4:	10000226 	beq	r2,zero,2026b0 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
  2026a8:	e0bffa83 	ldbu	r2,-22(fp)
  2026ac:	00003a06 	br	202798 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
  2026b0:	01003204 	movi	r4,200
  2026b4:	0201c500 	call	201c50 <MAXreg_rd>
  2026b8:	10803fcc 	andi	r2,r2,255
  2026bc:	1080010c 	andi	r2,r2,4
  2026c0:	1000021e 	bne	r2,zero,2026cc <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
  2026c4:	00bffc04 	movi	r2,-16
  2026c8:	00003306 	br	202798 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
  2026cc:	01000c04 	movi	r4,48
  2026d0:	0201c500 	call	201c50 <MAXreg_rd>
  2026d4:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
  2026d8:	e0bffac3 	ldbu	r2,-21(fp)
  2026dc:	e1bffe17 	ldw	r6,-8(fp)
  2026e0:	100b883a 	mov	r5,r2
  2026e4:	01000204 	movi	r4,8
  2026e8:	0201cfc0 	call	201cfc <MAXbytes_rd>
  2026ec:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
  2026f0:	01400104 	movi	r5,4
  2026f4:	01003204 	movi	r4,200
  2026f8:	0201b100 	call	201b10 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
  2026fc:	e0fffac3 	ldbu	r3,-21(fp)
  202700:	e0bffa0b 	ldhu	r2,-24(fp)
  202704:	1885883a 	add	r2,r3,r2
  202708:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
  20270c:	e0fffac3 	ldbu	r3,-21(fp)
  202710:	e0bfff03 	ldbu	r2,-4(fp)
  202714:	18800336 	bltu	r3,r2,202724 <XferInTransfer+0x108>
  202718:	e0fffa0b 	ldhu	r3,-24(fp)
  20271c:	e0bffd0b 	ldhu	r2,-12(fp)
  202720:	18bfda36 	bltu	r3,r2,20268c <_gp+0xffdf0a78>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
  202724:	01003e04 	movi	r4,248
  202728:	0201c500 	call	201c50 <MAXreg_rd>
  20272c:	10803fcc 	andi	r2,r2,255
  202730:	1080040c 	andi	r2,r2,16
  202734:	10000c26 	beq	r2,zero,202768 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  202738:	e0fffb03 	ldbu	r3,-20(fp)
  20273c:	00801074 	movhi	r2,65
  202740:	10a78704 	addi	r2,r2,-25060
  202744:	180690fa 	slli	r3,r3,3
  202748:	10c5883a 	add	r2,r2,r3
  20274c:	10c00017 	ldw	r3,0(r2)
  202750:	e0bffc03 	ldbu	r2,-16(fp)
  202754:	100490fa 	slli	r2,r2,3
  202758:	1885883a 	add	r2,r3,r2
  20275c:	00c00804 	movi	r3,32
  202760:	10c00185 	stb	r3,6(r2)
  202764:	00000b06 	br	202794 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
  202768:	e0fffb03 	ldbu	r3,-20(fp)
  20276c:	00801074 	movhi	r2,65
  202770:	10a78704 	addi	r2,r2,-25060
  202774:	180690fa 	slli	r3,r3,3
  202778:	10c5883a 	add	r2,r2,r3
  20277c:	10c00017 	ldw	r3,0(r2)
  202780:	e0bffc03 	ldbu	r2,-16(fp)
  202784:	100490fa 	slli	r2,r2,3
  202788:	1885883a 	add	r2,r3,r2
  20278c:	00c00404 	movi	r3,16
  202790:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
  202794:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
  202798:	e037883a 	mov	sp,fp
  20279c:	dfc00117 	ldw	ra,4(sp)
  2027a0:	df000017 	ldw	fp,0(sp)
  2027a4:	dec00204 	addi	sp,sp,8
  2027a8:	f800283a 	ret

002027ac <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
  2027ac:	defffe04 	addi	sp,sp,-8
  2027b0:	df000115 	stw	fp,4(sp)
  2027b4:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  2027b8:	e03fff05 	stb	zero,-4(fp)
  2027bc:	00001006 	br	202800 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
  2027c0:	e0ffff03 	ldbu	r3,-4(fp)
  2027c4:	00801074 	movhi	r2,65
  2027c8:	10a78704 	addi	r2,r2,-25060
  2027cc:	180690fa 	slli	r3,r3,3
  2027d0:	10c5883a 	add	r2,r2,r3
  2027d4:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
  2027d8:	e0ffff03 	ldbu	r3,-4(fp)
  2027dc:	00801074 	movhi	r2,65
  2027e0:	10a78704 	addi	r2,r2,-25060
  2027e4:	180690fa 	slli	r3,r3,3
  2027e8:	10c5883a 	add	r2,r2,r3
  2027ec:	10800104 	addi	r2,r2,4
  2027f0:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  2027f4:	e0bfff03 	ldbu	r2,-4(fp)
  2027f8:	10800044 	addi	r2,r2,1
  2027fc:	e0bfff05 	stb	r2,-4(fp)
  202800:	e0bfff03 	ldbu	r2,-4(fp)
  202804:	10800270 	cmpltui	r2,r2,9
  202808:	103fed1e 	bne	r2,zero,2027c0 <_gp+0xffdf0bac>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
  20280c:	00801074 	movhi	r2,65
  202810:	10a78704 	addi	r2,r2,-25060
  202814:	d0e01b04 	addi	r3,gp,-32660
  202818:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
  20281c:	d0201b8d 	sth	zero,-32658(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
  202820:	00801004 	movi	r2,64
  202824:	d0a01c45 	stb	r2,-32655(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
  202828:	00800404 	movi	r2,16
  20282c:	d0a01c85 	stb	r2,-32654(gp)
}
  202830:	0001883a 	nop
  202834:	e037883a 	mov	sp,fp
  202838:	df000017 	ldw	fp,0(sp)
  20283c:	dec00104 	addi	sp,sp,4
  202840:	f800283a 	ret

00202844 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
  202844:	deffb204 	addi	sp,sp,-312
  202848:	dfc04d15 	stw	ra,308(sp)
  20284c:	df004c15 	stw	fp,304(sp)
  202850:	dc004b15 	stw	r16,300(sp)
  202854:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
  202858:	d0a00303 	ldbu	r2,-32756(gp)
  20285c:	10803fcc 	andi	r2,r2,255
  202860:	10803c0c 	andi	r2,r2,240
  202864:	10c00820 	cmpeqi	r3,r2,32
  202868:	1801121e 	bne	r3,zero,202cb4 <USB_Task+0x470>
  20286c:	10c00848 	cmpgei	r3,r2,33
  202870:	1800041e 	bne	r3,zero,202884 <USB_Task+0x40>
  202874:	10000a26 	beq	r2,zero,2028a0 <USB_Task+0x5c>
  202878:	10800420 	cmpeqi	r2,r2,16
  20287c:	10001b1e 	bne	r2,zero,2028ec <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
  202880:	00017a06 	br	202e6c <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
  202884:	10c01020 	cmpeqi	r3,r2,64
  202888:	18016f1e 	bne	r3,zero,202e48 <USB_Task+0x604>
  20288c:	10c03fe0 	cmpeqi	r3,r2,255
  202890:	18016f1e 	bne	r3,zero,202e50 <USB_Task+0x60c>
  202894:	10800c20 	cmpeqi	r2,r2,48
  202898:	1001441e 	bne	r2,zero,202dac <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
  20289c:	00017306 	br	202e6c <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
  2028a0:	d0a00303 	ldbu	r2,-32756(gp)
  2028a4:	10803fcc 	andi	r2,r2,255
  2028a8:	10c000e0 	cmpeqi	r3,r2,3
  2028ac:	1800091e 	bne	r3,zero,2028d4 <USB_Task+0x90>
  2028b0:	10c00120 	cmpeqi	r3,r2,4
  2028b4:	18000b1e 	bne	r3,zero,2028e4 <USB_Task+0xa0>
  2028b8:	10800060 	cmpeqi	r2,r2,1
  2028bc:	1000011e 	bne	r2,zero,2028c4 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
  2028c0:	00016a06 	br	202e6c <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
  2028c4:	02027ac0 	call	2027ac <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
  2028c8:	008000c4 	movi	r2,3
  2028cc:	d0a00305 	stb	r2,-32756(gp)
                    break;
  2028d0:	00000506 	br	2028e8 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
  2028d4:	01400104 	movi	r5,4
  2028d8:	01003a04 	movi	r4,232
  2028dc:	0201b100 	call	201b10 <MAXreg_wr>
                    break;
  2028e0:	00000106 	br	2028e8 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
  2028e4:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
  2028e8:	00016006 	br	202e6c <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
  2028ec:	d0a00303 	ldbu	r2,-32756(gp)
  2028f0:	10803fcc 	andi	r2,r2,255
  2028f4:	10bffc04 	addi	r2,r2,-16
  2028f8:	10c001a8 	cmpgeui	r3,r2,6
  2028fc:	1801561e 	bne	r3,zero,202e58 <USB_Task+0x614>
  202900:	100690ba 	slli	r3,r2,2
  202904:	00800834 	movhi	r2,32
  202908:	108a4604 	addi	r2,r2,10520
  20290c:	1885883a 	add	r2,r3,r2
  202910:	10800017 	ldw	r2,0(r2)
  202914:	1000683a 	jmp	r2
  202918:	00202930 	cmpltui	zero,zero,32932
  20291c:	00202968 	cmpgeui	zero,zero,32933
  202920:	002029a4 	muli	zero,zero,-32602
  202924:	002029c8 	cmpgei	zero,zero,-32601
  202928:	00202a08 	cmpgei	zero,zero,-32600
  20292c:	00202a1c 	xori	zero,zero,32936
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202930:	d0a02b17 	ldw	r2,-32596(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
  202934:	0140fa04 	movi	r5,1000
  202938:	1009883a 	mov	r4,r2
  20293c:	02032a40 	call	2032a4 <__mulsi3>
  202940:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  202944:	d0a02a17 	ldw	r2,-32600(gp)
  202948:	100b883a 	mov	r5,r2
  20294c:	1809883a 	mov	r4,r3
  202950:	02031e80 	call	2031e8 <__udivsi3>
  202954:	10803204 	addi	r2,r2,200
  202958:	d0a01e15 	stw	r2,-32648(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
  20295c:	00800444 	movi	r2,17
  202960:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
  202964:	0000d206 	br	202cb0 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202968:	d0a02b17 	ldw	r2,-32596(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
  20296c:	0140fa04 	movi	r5,1000
  202970:	1009883a 	mov	r4,r2
  202974:	02032a40 	call	2032a4 <__mulsi3>
  202978:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  20297c:	d0a02a17 	ldw	r2,-32600(gp)
  202980:	100b883a 	mov	r5,r2
  202984:	1809883a 	mov	r4,r3
  202988:	02031e80 	call	2031e8 <__udivsi3>
  20298c:	1007883a 	mov	r3,r2
  202990:	d0a01e17 	ldw	r2,-32648(gp)
  202994:	10c0c32e 	bgeu	r2,r3,202ca4 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
  202998:	00800484 	movi	r2,18
  20299c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  2029a0:	0000c006 	br	202ca4 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
  2029a4:	01400044 	movi	r5,1
  2029a8:	01003204 	movi	r4,200
  2029ac:	0201b100 	call	201b10 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
  2029b0:	01400044 	movi	r5,1
  2029b4:	01003a04 	movi	r4,232
  2029b8:	0201b100 	call	201b10 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
  2029bc:	008004c4 	movi	r2,19
  2029c0:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
  2029c4:	0000ba06 	br	202cb0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
  2029c8:	01003a04 	movi	r4,232
  2029cc:	0201c500 	call	201c50 <MAXreg_rd>
  2029d0:	10803fcc 	andi	r2,r2,255
  2029d4:	1080004c 	andi	r2,r2,1
  2029d8:	1000b41e 	bne	r2,zero,202cac <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
  2029dc:	01003604 	movi	r4,216
  2029e0:	0201c500 	call	201c50 <MAXreg_rd>
  2029e4:	10800214 	ori	r2,r2,8
  2029e8:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
  2029ec:	e0bfb943 	ldbu	r2,-283(fp)
  2029f0:	100b883a 	mov	r5,r2
  2029f4:	01003604 	movi	r4,216
  2029f8:	0201b100 	call	201b10 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
  2029fc:	00800504 	movi	r2,20
  202a00:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  202a04:	0000a906 	br	202cac <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
  202a08:	01003204 	movi	r4,200
  202a0c:	0201c500 	call	201c50 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
  202a10:	00800544 	movi	r2,21
  202a14:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
  202a18:	0000a506 	br	202cb0 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
  202a1c:	00801074 	movhi	r2,65
  202a20:	10a78704 	addi	r2,r2,-25060
  202a24:	10800017 	ldw	r2,0(r2)
  202a28:	00c00204 	movi	r3,8
  202a2c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
  202a30:	e0bfba04 	addi	r2,fp,-280
  202a34:	d8800415 	stw	r2,16(sp)
  202a38:	00800204 	movi	r2,8
  202a3c:	d8800315 	stw	r2,12(sp)
  202a40:	d8000215 	stw	zero,8(sp)
  202a44:	00800044 	movi	r2,1
  202a48:	d8800115 	stw	r2,4(sp)
  202a4c:	d8000015 	stw	zero,0(sp)
  202a50:	01c00184 	movi	r7,6
  202a54:	01802004 	movi	r6,128
  202a58:	000b883a 	mov	r5,zero
  202a5c:	0009883a 	mov	r4,zero
  202a60:	02021f80 	call	2021f8 <XferCtrlReq>
  202a64:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
  202a68:	e0bfb983 	ldbu	r2,-282(fp)
  202a6c:	1000861e 	bne	r2,zero,202c88 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
  202a70:	00801074 	movhi	r2,65
  202a74:	10a78704 	addi	r2,r2,-25060
  202a78:	10800017 	ldw	r2,0(r2)
  202a7c:	e0ffbbc3 	ldbu	r3,-273(fp)
  202a80:	18c03fcc 	andi	r3,r3,255
  202a84:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
  202a88:	e0bfba03 	ldbu	r2,-280(fp)
  202a8c:	10803fcc 	andi	r2,r2,255
  202a90:	e0ffba04 	addi	r3,fp,-280
  202a94:	d8c00415 	stw	r3,16(sp)
  202a98:	d8800315 	stw	r2,12(sp)
  202a9c:	d8000215 	stw	zero,8(sp)
  202aa0:	00800044 	movi	r2,1
  202aa4:	d8800115 	stw	r2,4(sp)
  202aa8:	d8000015 	stw	zero,0(sp)
  202aac:	01c00184 	movi	r7,6
  202ab0:	01802004 	movi	r6,128
  202ab4:	000b883a 	mov	r5,zero
  202ab8:	0009883a 	mov	r4,zero
  202abc:	02021f80 	call	2021f8 <XferCtrlReq>
  202ac0:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
  202ac4:	e0bfbd83 	ldbu	r2,-266(fp)
  202ac8:	10803fcc 	andi	r2,r2,255
  202acc:	10003426 	beq	r2,zero,202ba0 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  202ad0:	e0bfbd83 	ldbu	r2,-266(fp)
  202ad4:	10803fcc 	andi	r2,r2,255
  202ad8:	e0ffbe84 	addi	r3,fp,-262
  202adc:	d8c00415 	stw	r3,16(sp)
  202ae0:	00c00084 	movi	r3,2
  202ae4:	d8c00315 	stw	r3,12(sp)
  202ae8:	00c10244 	movi	r3,1033
  202aec:	d8c00215 	stw	r3,8(sp)
  202af0:	00c000c4 	movi	r3,3
  202af4:	d8c00115 	stw	r3,4(sp)
  202af8:	d8800015 	stw	r2,0(sp)
  202afc:	01c00184 	movi	r7,6
  202b00:	01802004 	movi	r6,128
  202b04:	000b883a 	mov	r5,zero
  202b08:	0009883a 	mov	r4,zero
  202b0c:	02021f80 	call	2021f8 <XferCtrlReq>
  202b10:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  202b14:	e0bfbd83 	ldbu	r2,-266(fp)
  202b18:	10803fcc 	andi	r2,r2,255
  202b1c:	e0ffbe83 	ldbu	r3,-262(fp)
  202b20:	18c03fcc 	andi	r3,r3,255
  202b24:	e13fbe84 	addi	r4,fp,-262
  202b28:	d9000415 	stw	r4,16(sp)
  202b2c:	d8c00315 	stw	r3,12(sp)
  202b30:	00c10244 	movi	r3,1033
  202b34:	d8c00215 	stw	r3,8(sp)
  202b38:	00c000c4 	movi	r3,3
  202b3c:	d8c00115 	stw	r3,4(sp)
  202b40:	d8800015 	stw	r2,0(sp)
  202b44:	01c00184 	movi	r7,6
  202b48:	01802004 	movi	r6,128
  202b4c:	000b883a 	mov	r5,zero
  202b50:	0009883a 	mov	r4,zero
  202b54:	02021f80 	call	2021f8 <XferCtrlReq>
  202b58:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  202b5c:	e0bfbd83 	ldbu	r2,-266(fp)
  202b60:	14003fcc 	andi	r16,r2,255
  202b64:	e0bfbe83 	ldbu	r2,-262(fp)
  202b68:	10803fcc 	andi	r2,r2,255
  202b6c:	1004d07a 	srli	r2,r2,1
  202b70:	10bfffc4 	addi	r2,r2,-1
  202b74:	10c03fcc 	andi	r3,r2,255
  202b78:	e0bfbe84 	addi	r2,fp,-262
  202b7c:	10800084 	addi	r2,r2,2
  202b80:	180b883a 	mov	r5,r3
  202b84:	1009883a 	mov	r4,r2
  202b88:	020300c0 	call	20300c <ConvUTF8ToStr>
  202b8c:	100d883a 	mov	r6,r2
  202b90:	800b883a 	mov	r5,r16
  202b94:	01000874 	movhi	r4,33
  202b98:	211ab804 	addi	r4,r4,27360
  202b9c:	0203e900 	call	203e90 <printf>
                		}
                		if (buf.iProduct != 0)
  202ba0:	e0bfbdc3 	ldbu	r2,-265(fp)
  202ba4:	10803fcc 	andi	r2,r2,255
  202ba8:	10003426 	beq	r2,zero,202c7c <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  202bac:	e0bfbdc3 	ldbu	r2,-265(fp)
  202bb0:	10803fcc 	andi	r2,r2,255
  202bb4:	e0ffbe84 	addi	r3,fp,-262
  202bb8:	d8c00415 	stw	r3,16(sp)
  202bbc:	00c00084 	movi	r3,2
  202bc0:	d8c00315 	stw	r3,12(sp)
  202bc4:	00c10244 	movi	r3,1033
  202bc8:	d8c00215 	stw	r3,8(sp)
  202bcc:	00c000c4 	movi	r3,3
  202bd0:	d8c00115 	stw	r3,4(sp)
  202bd4:	d8800015 	stw	r2,0(sp)
  202bd8:	01c00184 	movi	r7,6
  202bdc:	01802004 	movi	r6,128
  202be0:	000b883a 	mov	r5,zero
  202be4:	0009883a 	mov	r4,zero
  202be8:	02021f80 	call	2021f8 <XferCtrlReq>
  202bec:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  202bf0:	e0bfbdc3 	ldbu	r2,-265(fp)
  202bf4:	10803fcc 	andi	r2,r2,255
  202bf8:	e0ffbe83 	ldbu	r3,-262(fp)
  202bfc:	18c03fcc 	andi	r3,r3,255
  202c00:	e13fbe84 	addi	r4,fp,-262
  202c04:	d9000415 	stw	r4,16(sp)
  202c08:	d8c00315 	stw	r3,12(sp)
  202c0c:	00c10244 	movi	r3,1033
  202c10:	d8c00215 	stw	r3,8(sp)
  202c14:	00c000c4 	movi	r3,3
  202c18:	d8c00115 	stw	r3,4(sp)
  202c1c:	d8800015 	stw	r2,0(sp)
  202c20:	01c00184 	movi	r7,6
  202c24:	01802004 	movi	r6,128
  202c28:	000b883a 	mov	r5,zero
  202c2c:	0009883a 	mov	r4,zero
  202c30:	02021f80 	call	2021f8 <XferCtrlReq>
  202c34:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  202c38:	e0bfbdc3 	ldbu	r2,-265(fp)
  202c3c:	14003fcc 	andi	r16,r2,255
  202c40:	e0bfbe83 	ldbu	r2,-262(fp)
  202c44:	10803fcc 	andi	r2,r2,255
  202c48:	1004d07a 	srli	r2,r2,1
  202c4c:	10bfffc4 	addi	r2,r2,-1
  202c50:	10c03fcc 	andi	r3,r2,255
  202c54:	e0bfbe84 	addi	r2,fp,-262
  202c58:	10800084 	addi	r2,r2,2
  202c5c:	180b883a 	mov	r5,r3
  202c60:	1009883a 	mov	r4,r2
  202c64:	020300c0 	call	20300c <ConvUTF8ToStr>
  202c68:	100d883a 	mov	r6,r2
  202c6c:	800b883a 	mov	r5,r16
  202c70:	01000874 	movhi	r4,33
  202c74:	211abe04 	addi	r4,r4,27384
  202c78:	0203e900 	call	203e90 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
  202c7c:	00800804 	movi	r2,32
  202c80:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  202c84:	00000a06 	br	202cb0 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
  202c88:	e0bfb983 	ldbu	r2,-282(fp)
  202c8c:	d0a01f45 	stb	r2,-32643(gp)
                        last_usb_task_state = usb_task_state;
  202c90:	d0a00303 	ldbu	r2,-32756(gp)
  202c94:	d0a01d05 	stb	r2,-32652(gp)
                        usb_task_state = USB_STATE_ERROR;
  202c98:	00bfffc4 	movi	r2,-1
  202c9c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  202ca0:	00000306 	br	202cb0 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  202ca4:	0001883a 	nop
  202ca8:	00006b06 	br	202e58 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  202cac:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
  202cb0:	00006906 	br	202e58 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  202cb4:	00800044 	movi	r2,1
  202cb8:	e0bfb905 	stb	r2,-284(fp)
  202cbc:	00002d06 	br	202d74 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
  202cc0:	e0ffb903 	ldbu	r3,-284(fp)
  202cc4:	00801074 	movhi	r2,65
  202cc8:	10a78704 	addi	r2,r2,-25060
  202ccc:	180690fa 	slli	r3,r3,3
  202cd0:	10c5883a 	add	r2,r2,r3
  202cd4:	10800017 	ldw	r2,0(r2)
  202cd8:	1000231e 	bne	r2,zero,202d68 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
  202cdc:	e13fb903 	ldbu	r4,-284(fp)
  202ce0:	00801074 	movhi	r2,65
  202ce4:	10a78704 	addi	r2,r2,-25060
  202ce8:	10c00017 	ldw	r3,0(r2)
  202cec:	00801074 	movhi	r2,65
  202cf0:	10a78704 	addi	r2,r2,-25060
  202cf4:	200890fa 	slli	r4,r4,3
  202cf8:	1105883a 	add	r2,r2,r4
  202cfc:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
  202d00:	e0bfb903 	ldbu	r2,-284(fp)
  202d04:	d8000415 	stw	zero,16(sp)
  202d08:	d8000315 	stw	zero,12(sp)
  202d0c:	d8000215 	stw	zero,8(sp)
  202d10:	d8000115 	stw	zero,4(sp)
  202d14:	d8800015 	stw	r2,0(sp)
  202d18:	01c00144 	movi	r7,5
  202d1c:	000d883a 	mov	r6,zero
  202d20:	000b883a 	mov	r5,zero
  202d24:	0009883a 	mov	r4,zero
  202d28:	02021f80 	call	2021f8 <XferCtrlReq>
  202d2c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
  202d30:	e0bfb983 	ldbu	r2,-282(fp)
  202d34:	1000051e 	bne	r2,zero,202d4c <USB_Task+0x508>
                        tmp_addr = i;
  202d38:	e0bfb903 	ldbu	r2,-284(fp)
  202d3c:	d0a01f05 	stb	r2,-32644(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
  202d40:	00800c04 	movi	r2,48
  202d44:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
  202d48:	00000d06 	br	202d80 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
  202d4c:	e0bfb983 	ldbu	r2,-282(fp)
  202d50:	d0a01f45 	stb	r2,-32643(gp)
                        last_usb_task_state = usb_task_state;
  202d54:	d0a00303 	ldbu	r2,-32756(gp)
  202d58:	d0a01d05 	stb	r2,-32652(gp)
                        usb_task_state = USB_STATE_ERROR;
  202d5c:	00bfffc4 	movi	r2,-1
  202d60:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
  202d64:	00000606 	br	202d80 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  202d68:	e0bfb903 	ldbu	r2,-284(fp)
  202d6c:	10800044 	addi	r2,r2,1
  202d70:	e0bfb905 	stb	r2,-284(fp)
  202d74:	e0bfb903 	ldbu	r2,-284(fp)
  202d78:	10800230 	cmpltui	r2,r2,8
  202d7c:	103fd01e 	bne	r2,zero,202cc0 <_gp+0xffdf10ac>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
  202d80:	d0a00303 	ldbu	r2,-32756(gp)
  202d84:	10803fcc 	andi	r2,r2,255
  202d88:	10800818 	cmpnei	r2,r2,32
  202d8c:	1000341e 	bne	r2,zero,202e60 <USB_Task+0x61c>
                usb_error = 0xfe;
  202d90:	00bfff84 	movi	r2,-2
  202d94:	d0a01f45 	stb	r2,-32643(gp)
                last_usb_task_state = usb_task_state;
  202d98:	d0a00303 	ldbu	r2,-32756(gp)
  202d9c:	d0a01d05 	stb	r2,-32652(gp)
                usb_task_state = USB_STATE_ERROR;
  202da0:	00bfffc4 	movi	r2,-1
  202da4:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
  202da8:	00002d06 	br	202e60 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  202dac:	e03fb905 	stb	zero,-284(fp)
  202db0:	00001706 	br	202e10 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
  202db4:	e0bfb903 	ldbu	r2,-284(fp)
  202db8:	04001074 	movhi	r16,65
  202dbc:	84200004 	addi	r16,r16,-32768
  202dc0:	01400304 	movi	r5,12
  202dc4:	1009883a 	mov	r4,r2
  202dc8:	02032a40 	call	2032a4 <__mulsi3>
  202dcc:	8085883a 	add	r2,r16,r2
  202dd0:	10800017 	ldw	r2,0(r2)
  202dd4:	d0e01f03 	ldbu	r3,-32644(gp)
  202dd8:	18c03fcc 	andi	r3,r3,255
  202ddc:	000b883a 	mov	r5,zero
  202de0:	1809883a 	mov	r4,r3
  202de4:	103ee83a 	callr	r2
  202de8:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
  202dec:	e0bfb983 	ldbu	r2,-282(fp)
  202df0:	10800058 	cmpnei	r2,r2,1
  202df4:	1000031e 	bne	r2,zero,202e04 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
  202df8:	00801004 	movi	r2,64
  202dfc:	d0a00305 	stb	r2,-32756(gp)
                    break;
  202e00:	00000606 	br	202e1c <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  202e04:	e0bfb903 	ldbu	r2,-284(fp)
  202e08:	10800044 	addi	r2,r2,1
  202e0c:	e0bfb905 	stb	r2,-284(fp)
  202e10:	e0bfb903 	ldbu	r2,-284(fp)
  202e14:	10800130 	cmpltui	r2,r2,4
  202e18:	103fe61e 	bne	r2,zero,202db4 <_gp+0xffdf11a0>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
  202e1c:	d0a00303 	ldbu	r2,-32756(gp)
  202e20:	10803fcc 	andi	r2,r2,255
  202e24:	10800c18 	cmpnei	r2,r2,48
  202e28:	10000f1e 	bne	r2,zero,202e68 <USB_Task+0x624>
                usb_error = 0xfd;
  202e2c:	00bfff44 	movi	r2,-3
  202e30:	d0a01f45 	stb	r2,-32643(gp)
                last_usb_task_state = usb_task_state;
  202e34:	d0a00303 	ldbu	r2,-32756(gp)
  202e38:	d0a01d05 	stb	r2,-32652(gp)
                usb_task_state = USB_STATE_ERROR;
  202e3c:	00bfffc4 	movi	r2,-1
  202e40:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
  202e44:	00000806 	br	202e68 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
  202e48:	0001883a 	nop
  202e4c:	00000706 	br	202e6c <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
  202e50:	0001883a 	nop
  202e54:	00000506 	br	202e6c <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
  202e58:	0001883a 	nop
  202e5c:	00000306 	br	202e6c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
  202e60:	0001883a 	nop
  202e64:	00000106 	br	202e6c <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
  202e68:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
  202e6c:	0001883a 	nop
  202e70:	e6ffff04 	addi	sp,fp,-4
  202e74:	dfc00217 	ldw	ra,8(sp)
  202e78:	df000117 	ldw	fp,4(sp)
  202e7c:	dc000017 	ldw	r16,0(sp)
  202e80:	dec00304 	addi	sp,sp,12
  202e84:	f800283a 	ret

00202e88 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
  202e88:	defffd04 	addi	sp,sp,-12
  202e8c:	df000215 	stw	fp,8(sp)
  202e90:	df000204 	addi	fp,sp,8
  202e94:	2005883a 	mov	r2,r4
  202e98:	e17fff15 	stw	r5,-4(fp)
  202e9c:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
  202ea0:	0005883a 	mov	r2,zero
}
  202ea4:	e037883a 	mov	sp,fp
  202ea8:	df000017 	ldw	fp,0(sp)
  202eac:	dec00104 	addi	sp,sp,4
  202eb0:	f800283a 	ret

00202eb4 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202eb4:	defffb04 	addi	sp,sp,-20
  202eb8:	df000415 	stw	fp,16(sp)
  202ebc:	df000404 	addi	fp,sp,16
  202ec0:	2007883a 	mov	r3,r4
  202ec4:	2805883a 	mov	r2,r5
  202ec8:	e1bffe15 	stw	r6,-8(fp)
  202ecc:	e1ffff15 	stw	r7,-4(fp)
  202ed0:	e0fffc05 	stb	r3,-16(fp)
  202ed4:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
  202ed8:	0005883a 	mov	r2,zero

}
  202edc:	e037883a 	mov	sp,fp
  202ee0:	df000017 	ldw	fp,0(sp)
  202ee4:	dec00104 	addi	sp,sp,4
  202ee8:	f800283a 	ret

00202eec <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
  202eec:	defffd04 	addi	sp,sp,-12
  202ef0:	df000215 	stw	fp,8(sp)
  202ef4:	df000204 	addi	fp,sp,8
  202ef8:	2005883a 	mov	r2,r4
  202efc:	e17fff15 	stw	r5,-4(fp)
  202f00:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
  202f04:	0005883a 	mov	r2,zero

}
  202f08:	e037883a 	mov	sp,fp
  202f0c:	df000017 	ldw	fp,0(sp)
  202f10:	dec00104 	addi	sp,sp,4
  202f14:	f800283a 	ret

00202f18 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202f18:	defffb04 	addi	sp,sp,-20
  202f1c:	df000415 	stw	fp,16(sp)
  202f20:	df000404 	addi	fp,sp,16
  202f24:	2007883a 	mov	r3,r4
  202f28:	2805883a 	mov	r2,r5
  202f2c:	e1bffe15 	stw	r6,-8(fp)
  202f30:	e1ffff15 	stw	r7,-4(fp)
  202f34:	e0fffc05 	stb	r3,-16(fp)
  202f38:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
  202f3c:	0005883a 	mov	r2,zero
}
  202f40:	e037883a 	mov	sp,fp
  202f44:	df000017 	ldw	fp,0(sp)
  202f48:	dec00104 	addi	sp,sp,4
  202f4c:	f800283a 	ret

00202f50 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
  202f50:	defffd04 	addi	sp,sp,-12
  202f54:	df000215 	stw	fp,8(sp)
  202f58:	df000204 	addi	fp,sp,8
  202f5c:	2005883a 	mov	r2,r4
  202f60:	e17fff15 	stw	r5,-4(fp)
  202f64:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
  202f68:	0005883a 	mov	r2,zero
}
  202f6c:	e037883a 	mov	sp,fp
  202f70:	df000017 	ldw	fp,0(sp)
  202f74:	dec00104 	addi	sp,sp,4
  202f78:	f800283a 	ret

00202f7c <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202f7c:	defffb04 	addi	sp,sp,-20
  202f80:	df000415 	stw	fp,16(sp)
  202f84:	df000404 	addi	fp,sp,16
  202f88:	2007883a 	mov	r3,r4
  202f8c:	2805883a 	mov	r2,r5
  202f90:	e1bffe15 	stw	r6,-8(fp)
  202f94:	e1ffff15 	stw	r7,-4(fp)
  202f98:	e0fffc05 	stb	r3,-16(fp)
  202f9c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
  202fa0:	0005883a 	mov	r2,zero
}
  202fa4:	e037883a 	mov	sp,fp
  202fa8:	df000017 	ldw	fp,0(sp)
  202fac:	dec00104 	addi	sp,sp,4
  202fb0:	f800283a 	ret

00202fb4 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
  202fb4:	deffff04 	addi	sp,sp,-4
  202fb8:	df000015 	stw	fp,0(sp)
  202fbc:	d839883a 	mov	fp,sp
    return( usb_task_state );
  202fc0:	d0a00303 	ldbu	r2,-32756(gp)
}
  202fc4:	e037883a 	mov	sp,fp
  202fc8:	df000017 	ldw	fp,0(sp)
  202fcc:	dec00104 	addi	sp,sp,4
  202fd0:	f800283a 	ret

00202fd4 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
  202fd4:	defffe04 	addi	sp,sp,-8
  202fd8:	df000115 	stw	fp,4(sp)
  202fdc:	df000104 	addi	fp,sp,4
  202fe0:	2005883a 	mov	r2,r4
  202fe4:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
  202fe8:	e0bfff03 	ldbu	r2,-4(fp)
  202fec:	100690fa 	slli	r3,r2,3
  202ff0:	00801074 	movhi	r2,65
  202ff4:	10a78704 	addi	r2,r2,-25060
  202ff8:	1885883a 	add	r2,r3,r2
}
  202ffc:	e037883a 	mov	sp,fp
  203000:	df000017 	ldw	fp,0(sp)
  203004:	dec00104 	addi	sp,sp,4
  203008:	f800283a 	ret

0020300c <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
  20300c:	defffc04 	addi	sp,sp,-16
  203010:	df000315 	stw	fp,12(sp)
  203014:	df000304 	addi	fp,sp,12
  203018:	e13ffe15 	stw	r4,-8(fp)
  20301c:	2805883a 	mov	r2,r5
  203020:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
  203024:	e03ffd05 	stb	zero,-12(fp)
  203028:	00000d06 	br	203060 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
  20302c:	e0bffd03 	ldbu	r2,-12(fp)
  203030:	e0fffe17 	ldw	r3,-8(fp)
  203034:	1887883a 	add	r3,r3,r2
  203038:	e0bffd03 	ldbu	r2,-12(fp)
  20303c:	1085883a 	add	r2,r2,r2
  203040:	1009883a 	mov	r4,r2
  203044:	e0bffe17 	ldw	r2,-8(fp)
  203048:	1105883a 	add	r2,r2,r4
  20304c:	10800003 	ldbu	r2,0(r2)
  203050:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
  203054:	e0bffd03 	ldbu	r2,-12(fp)
  203058:	10800044 	addi	r2,r2,1
  20305c:	e0bffd05 	stb	r2,-12(fp)
  203060:	e0fffd03 	ldbu	r3,-12(fp)
  203064:	e0bfff03 	ldbu	r2,-4(fp)
  203068:	18bff036 	bltu	r3,r2,20302c <_gp+0xffdf1418>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
  20306c:	e0bfff03 	ldbu	r2,-4(fp)
  203070:	e0fffe17 	ldw	r3,-8(fp)
  203074:	1885883a 	add	r2,r3,r2
  203078:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
  20307c:	e0bffe17 	ldw	r2,-8(fp)
}
  203080:	e037883a 	mov	sp,fp
  203084:	df000017 	ldw	fp,0(sp)
  203088:	dec00104 	addi	sp,sp,4
  20308c:	f800283a 	ret

00203090 <__fixunssfsi>:
  203090:	defffd04 	addi	sp,sp,-12
  203094:	dc000015 	stw	r16,0(sp)
  203098:	0413c034 	movhi	r16,20224
  20309c:	800b883a 	mov	r5,r16
  2030a0:	dc400115 	stw	r17,4(sp)
  2030a4:	dfc00215 	stw	ra,8(sp)
  2030a8:	2023883a 	mov	r17,r4
  2030ac:	02032cc0 	call	2032cc <__gesf2>
  2030b0:	1000070e 	bge	r2,zero,2030d0 <__fixunssfsi+0x40>
  2030b4:	8809883a 	mov	r4,r17
  2030b8:	0203c9c0 	call	203c9c <__fixsfsi>
  2030bc:	dfc00217 	ldw	ra,8(sp)
  2030c0:	dc400117 	ldw	r17,4(sp)
  2030c4:	dc000017 	ldw	r16,0(sp)
  2030c8:	dec00304 	addi	sp,sp,12
  2030cc:	f800283a 	ret
  2030d0:	800b883a 	mov	r5,r16
  2030d4:	8809883a 	mov	r4,r17
  2030d8:	02037b80 	call	2037b8 <__subsf3>
  2030dc:	1009883a 	mov	r4,r2
  2030e0:	0203c9c0 	call	203c9c <__fixsfsi>
  2030e4:	00e00034 	movhi	r3,32768
  2030e8:	10c5883a 	add	r2,r2,r3
  2030ec:	003ff306 	br	2030bc <_gp+0xffdf14a8>

002030f0 <__divsi3>:
  2030f0:	20001b16 	blt	r4,zero,203160 <__divsi3+0x70>
  2030f4:	000f883a 	mov	r7,zero
  2030f8:	28001616 	blt	r5,zero,203154 <__divsi3+0x64>
  2030fc:	200d883a 	mov	r6,r4
  203100:	29001a2e 	bgeu	r5,r4,20316c <__divsi3+0x7c>
  203104:	00800804 	movi	r2,32
  203108:	00c00044 	movi	r3,1
  20310c:	00000106 	br	203114 <__divsi3+0x24>
  203110:	10000d26 	beq	r2,zero,203148 <__divsi3+0x58>
  203114:	294b883a 	add	r5,r5,r5
  203118:	10bfffc4 	addi	r2,r2,-1
  20311c:	18c7883a 	add	r3,r3,r3
  203120:	293ffb36 	bltu	r5,r4,203110 <_gp+0xffdf14fc>
  203124:	0005883a 	mov	r2,zero
  203128:	18000726 	beq	r3,zero,203148 <__divsi3+0x58>
  20312c:	0005883a 	mov	r2,zero
  203130:	31400236 	bltu	r6,r5,20313c <__divsi3+0x4c>
  203134:	314dc83a 	sub	r6,r6,r5
  203138:	10c4b03a 	or	r2,r2,r3
  20313c:	1806d07a 	srli	r3,r3,1
  203140:	280ad07a 	srli	r5,r5,1
  203144:	183ffa1e 	bne	r3,zero,203130 <_gp+0xffdf151c>
  203148:	38000126 	beq	r7,zero,203150 <__divsi3+0x60>
  20314c:	0085c83a 	sub	r2,zero,r2
  203150:	f800283a 	ret
  203154:	014bc83a 	sub	r5,zero,r5
  203158:	39c0005c 	xori	r7,r7,1
  20315c:	003fe706 	br	2030fc <_gp+0xffdf14e8>
  203160:	0109c83a 	sub	r4,zero,r4
  203164:	01c00044 	movi	r7,1
  203168:	003fe306 	br	2030f8 <_gp+0xffdf14e4>
  20316c:	00c00044 	movi	r3,1
  203170:	003fee06 	br	20312c <_gp+0xffdf1518>

00203174 <__modsi3>:
  203174:	20001716 	blt	r4,zero,2031d4 <__modsi3+0x60>
  203178:	000f883a 	mov	r7,zero
  20317c:	2005883a 	mov	r2,r4
  203180:	28001216 	blt	r5,zero,2031cc <__modsi3+0x58>
  203184:	2900162e 	bgeu	r5,r4,2031e0 <__modsi3+0x6c>
  203188:	01800804 	movi	r6,32
  20318c:	00c00044 	movi	r3,1
  203190:	00000106 	br	203198 <__modsi3+0x24>
  203194:	30000a26 	beq	r6,zero,2031c0 <__modsi3+0x4c>
  203198:	294b883a 	add	r5,r5,r5
  20319c:	31bfffc4 	addi	r6,r6,-1
  2031a0:	18c7883a 	add	r3,r3,r3
  2031a4:	293ffb36 	bltu	r5,r4,203194 <_gp+0xffdf1580>
  2031a8:	18000526 	beq	r3,zero,2031c0 <__modsi3+0x4c>
  2031ac:	1806d07a 	srli	r3,r3,1
  2031b0:	11400136 	bltu	r2,r5,2031b8 <__modsi3+0x44>
  2031b4:	1145c83a 	sub	r2,r2,r5
  2031b8:	280ad07a 	srli	r5,r5,1
  2031bc:	183ffb1e 	bne	r3,zero,2031ac <_gp+0xffdf1598>
  2031c0:	38000126 	beq	r7,zero,2031c8 <__modsi3+0x54>
  2031c4:	0085c83a 	sub	r2,zero,r2
  2031c8:	f800283a 	ret
  2031cc:	014bc83a 	sub	r5,zero,r5
  2031d0:	003fec06 	br	203184 <_gp+0xffdf1570>
  2031d4:	0109c83a 	sub	r4,zero,r4
  2031d8:	01c00044 	movi	r7,1
  2031dc:	003fe706 	br	20317c <_gp+0xffdf1568>
  2031e0:	00c00044 	movi	r3,1
  2031e4:	003ff106 	br	2031ac <_gp+0xffdf1598>

002031e8 <__udivsi3>:
  2031e8:	200d883a 	mov	r6,r4
  2031ec:	2900152e 	bgeu	r5,r4,203244 <__udivsi3+0x5c>
  2031f0:	28001416 	blt	r5,zero,203244 <__udivsi3+0x5c>
  2031f4:	00800804 	movi	r2,32
  2031f8:	00c00044 	movi	r3,1
  2031fc:	00000206 	br	203208 <__udivsi3+0x20>
  203200:	10000e26 	beq	r2,zero,20323c <__udivsi3+0x54>
  203204:	28000516 	blt	r5,zero,20321c <__udivsi3+0x34>
  203208:	294b883a 	add	r5,r5,r5
  20320c:	10bfffc4 	addi	r2,r2,-1
  203210:	18c7883a 	add	r3,r3,r3
  203214:	293ffa36 	bltu	r5,r4,203200 <_gp+0xffdf15ec>
  203218:	18000826 	beq	r3,zero,20323c <__udivsi3+0x54>
  20321c:	0005883a 	mov	r2,zero
  203220:	31400236 	bltu	r6,r5,20322c <__udivsi3+0x44>
  203224:	314dc83a 	sub	r6,r6,r5
  203228:	10c4b03a 	or	r2,r2,r3
  20322c:	1806d07a 	srli	r3,r3,1
  203230:	280ad07a 	srli	r5,r5,1
  203234:	183ffa1e 	bne	r3,zero,203220 <_gp+0xffdf160c>
  203238:	f800283a 	ret
  20323c:	0005883a 	mov	r2,zero
  203240:	f800283a 	ret
  203244:	00c00044 	movi	r3,1
  203248:	003ff406 	br	20321c <_gp+0xffdf1608>

0020324c <__umodsi3>:
  20324c:	2005883a 	mov	r2,r4
  203250:	2900122e 	bgeu	r5,r4,20329c <__umodsi3+0x50>
  203254:	28001116 	blt	r5,zero,20329c <__umodsi3+0x50>
  203258:	01800804 	movi	r6,32
  20325c:	00c00044 	movi	r3,1
  203260:	00000206 	br	20326c <__umodsi3+0x20>
  203264:	30000c26 	beq	r6,zero,203298 <__umodsi3+0x4c>
  203268:	28000516 	blt	r5,zero,203280 <__umodsi3+0x34>
  20326c:	294b883a 	add	r5,r5,r5
  203270:	31bfffc4 	addi	r6,r6,-1
  203274:	18c7883a 	add	r3,r3,r3
  203278:	293ffa36 	bltu	r5,r4,203264 <_gp+0xffdf1650>
  20327c:	18000626 	beq	r3,zero,203298 <__umodsi3+0x4c>
  203280:	1806d07a 	srli	r3,r3,1
  203284:	11400136 	bltu	r2,r5,20328c <__umodsi3+0x40>
  203288:	1145c83a 	sub	r2,r2,r5
  20328c:	280ad07a 	srli	r5,r5,1
  203290:	183ffb1e 	bne	r3,zero,203280 <_gp+0xffdf166c>
  203294:	f800283a 	ret
  203298:	f800283a 	ret
  20329c:	00c00044 	movi	r3,1
  2032a0:	003ff706 	br	203280 <_gp+0xffdf166c>

002032a4 <__mulsi3>:
  2032a4:	0005883a 	mov	r2,zero
  2032a8:	20000726 	beq	r4,zero,2032c8 <__mulsi3+0x24>
  2032ac:	20c0004c 	andi	r3,r4,1
  2032b0:	2008d07a 	srli	r4,r4,1
  2032b4:	18000126 	beq	r3,zero,2032bc <__mulsi3+0x18>
  2032b8:	1145883a 	add	r2,r2,r5
  2032bc:	294b883a 	add	r5,r5,r5
  2032c0:	203ffa1e 	bne	r4,zero,2032ac <_gp+0xffdf1698>
  2032c4:	f800283a 	ret
  2032c8:	f800283a 	ret

002032cc <__gesf2>:
  2032cc:	2004d5fa 	srli	r2,r4,23
  2032d0:	2806d5fa 	srli	r3,r5,23
  2032d4:	01802034 	movhi	r6,128
  2032d8:	31bfffc4 	addi	r6,r6,-1
  2032dc:	10803fcc 	andi	r2,r2,255
  2032e0:	01c03fc4 	movi	r7,255
  2032e4:	3110703a 	and	r8,r6,r4
  2032e8:	18c03fcc 	andi	r3,r3,255
  2032ec:	314c703a 	and	r6,r6,r5
  2032f0:	2008d7fa 	srli	r4,r4,31
  2032f4:	280ad7fa 	srli	r5,r5,31
  2032f8:	11c01926 	beq	r2,r7,203360 <__gesf2+0x94>
  2032fc:	01c03fc4 	movi	r7,255
  203300:	19c00f26 	beq	r3,r7,203340 <__gesf2+0x74>
  203304:	1000061e 	bne	r2,zero,203320 <__gesf2+0x54>
  203308:	400f003a 	cmpeq	r7,r8,zero
  20330c:	1800071e 	bne	r3,zero,20332c <__gesf2+0x60>
  203310:	3000061e 	bne	r6,zero,20332c <__gesf2+0x60>
  203314:	0005883a 	mov	r2,zero
  203318:	40000e1e 	bne	r8,zero,203354 <__gesf2+0x88>
  20331c:	f800283a 	ret
  203320:	18000a1e 	bne	r3,zero,20334c <__gesf2+0x80>
  203324:	30000b26 	beq	r6,zero,203354 <__gesf2+0x88>
  203328:	000f883a 	mov	r7,zero
  20332c:	29403fcc 	andi	r5,r5,255
  203330:	38000726 	beq	r7,zero,203350 <__gesf2+0x84>
  203334:	28000826 	beq	r5,zero,203358 <__gesf2+0x8c>
  203338:	00800044 	movi	r2,1
  20333c:	f800283a 	ret
  203340:	303ff026 	beq	r6,zero,203304 <_gp+0xffdf16f0>
  203344:	00bfff84 	movi	r2,-2
  203348:	f800283a 	ret
  20334c:	29403fcc 	andi	r5,r5,255
  203350:	21400526 	beq	r4,r5,203368 <__gesf2+0x9c>
  203354:	203ff826 	beq	r4,zero,203338 <_gp+0xffdf1724>
  203358:	00bfffc4 	movi	r2,-1
  20335c:	f800283a 	ret
  203360:	403fe626 	beq	r8,zero,2032fc <_gp+0xffdf16e8>
  203364:	003ff706 	br	203344 <_gp+0xffdf1730>
  203368:	18bffa16 	blt	r3,r2,203354 <_gp+0xffdf1740>
  20336c:	10c00216 	blt	r2,r3,203378 <__gesf2+0xac>
  203370:	323ff836 	bltu	r6,r8,203354 <_gp+0xffdf1740>
  203374:	4180022e 	bgeu	r8,r6,203380 <__gesf2+0xb4>
  203378:	203fef1e 	bne	r4,zero,203338 <_gp+0xffdf1724>
  20337c:	003ff606 	br	203358 <_gp+0xffdf1744>
  203380:	0005883a 	mov	r2,zero
  203384:	f800283a 	ret

00203388 <__mulsf3>:
  203388:	defff504 	addi	sp,sp,-44
  20338c:	dc000115 	stw	r16,4(sp)
  203390:	2020d5fa 	srli	r16,r4,23
  203394:	dd400615 	stw	r21,24(sp)
  203398:	202ad7fa 	srli	r21,r4,31
  20339c:	dc800315 	stw	r18,12(sp)
  2033a0:	04802034 	movhi	r18,128
  2033a4:	df000915 	stw	fp,36(sp)
  2033a8:	dd000515 	stw	r20,20(sp)
  2033ac:	94bfffc4 	addi	r18,r18,-1
  2033b0:	dfc00a15 	stw	ra,40(sp)
  2033b4:	ddc00815 	stw	r23,32(sp)
  2033b8:	dd800715 	stw	r22,28(sp)
  2033bc:	dcc00415 	stw	r19,16(sp)
  2033c0:	dc400215 	stw	r17,8(sp)
  2033c4:	84003fcc 	andi	r16,r16,255
  2033c8:	9124703a 	and	r18,r18,r4
  2033cc:	a829883a 	mov	r20,r21
  2033d0:	af003fcc 	andi	fp,r21,255
  2033d4:	80005426 	beq	r16,zero,203528 <__mulsf3+0x1a0>
  2033d8:	00803fc4 	movi	r2,255
  2033dc:	80802f26 	beq	r16,r2,20349c <__mulsf3+0x114>
  2033e0:	91002034 	orhi	r4,r18,128
  2033e4:	202490fa 	slli	r18,r4,3
  2033e8:	843fe044 	addi	r16,r16,-127
  2033ec:	0023883a 	mov	r17,zero
  2033f0:	002f883a 	mov	r23,zero
  2033f4:	2804d5fa 	srli	r2,r5,23
  2033f8:	282cd7fa 	srli	r22,r5,31
  2033fc:	01002034 	movhi	r4,128
  203400:	213fffc4 	addi	r4,r4,-1
  203404:	10803fcc 	andi	r2,r2,255
  203408:	2166703a 	and	r19,r4,r5
  20340c:	b1803fcc 	andi	r6,r22,255
  203410:	10004c26 	beq	r2,zero,203544 <__mulsf3+0x1bc>
  203414:	00c03fc4 	movi	r3,255
  203418:	10c04726 	beq	r2,r3,203538 <__mulsf3+0x1b0>
  20341c:	99002034 	orhi	r4,r19,128
  203420:	202690fa 	slli	r19,r4,3
  203424:	10bfe044 	addi	r2,r2,-127
  203428:	0007883a 	mov	r3,zero
  20342c:	80a1883a 	add	r16,r16,r2
  203430:	010003c4 	movi	r4,15
  203434:	1c44b03a 	or	r2,r3,r17
  203438:	b56af03a 	xor	r21,r22,r21
  20343c:	81c00044 	addi	r7,r16,1
  203440:	20806b36 	bltu	r4,r2,2035f0 <__mulsf3+0x268>
  203444:	100490ba 	slli	r2,r2,2
  203448:	01000834 	movhi	r4,32
  20344c:	210d1704 	addi	r4,r4,13404
  203450:	1105883a 	add	r2,r2,r4
  203454:	10800017 	ldw	r2,0(r2)
  203458:	1000683a 	jmp	r2
  20345c:	002035f0 	cmpltui	zero,zero,32983
  203460:	002034b0 	cmpltui	zero,zero,32978
  203464:	002034b0 	cmpltui	zero,zero,32978
  203468:	002034ac 	andhi	zero,zero,32978
  20346c:	002035d4 	movui	zero,32983
  203470:	002035d4 	movui	zero,32983
  203474:	002035c0 	call	2035c <__alt_mem_onchip_flash_0_data-0x1dfca4>
  203478:	002034ac 	andhi	zero,zero,32978
  20347c:	002035d4 	movui	zero,32983
  203480:	002035c0 	call	2035c <__alt_mem_onchip_flash_0_data-0x1dfca4>
  203484:	002035d4 	movui	zero,32983
  203488:	002034ac 	andhi	zero,zero,32978
  20348c:	002035e0 	cmpeqi	zero,zero,-32553
  203490:	002035e0 	cmpeqi	zero,zero,-32553
  203494:	002035e0 	cmpeqi	zero,zero,-32553
  203498:	002036f0 	cmpltui	zero,zero,32987
  20349c:	90003b1e 	bne	r18,zero,20358c <__mulsf3+0x204>
  2034a0:	04400204 	movi	r17,8
  2034a4:	05c00084 	movi	r23,2
  2034a8:	003fd206 	br	2033f4 <_gp+0xffdf17e0>
  2034ac:	302b883a 	mov	r21,r6
  2034b0:	00800084 	movi	r2,2
  2034b4:	18802626 	beq	r3,r2,203550 <__mulsf3+0x1c8>
  2034b8:	008000c4 	movi	r2,3
  2034bc:	1880b826 	beq	r3,r2,2037a0 <__mulsf3+0x418>
  2034c0:	00800044 	movi	r2,1
  2034c4:	1880af1e 	bne	r3,r2,203784 <__mulsf3+0x3fc>
  2034c8:	a829883a 	mov	r20,r21
  2034cc:	0007883a 	mov	r3,zero
  2034d0:	0009883a 	mov	r4,zero
  2034d4:	18803fcc 	andi	r2,r3,255
  2034d8:	100695fa 	slli	r3,r2,23
  2034dc:	a0803fcc 	andi	r2,r20,255
  2034e0:	100a97fa 	slli	r5,r2,31
  2034e4:	00802034 	movhi	r2,128
  2034e8:	10bfffc4 	addi	r2,r2,-1
  2034ec:	2084703a 	and	r2,r4,r2
  2034f0:	10c4b03a 	or	r2,r2,r3
  2034f4:	1144b03a 	or	r2,r2,r5
  2034f8:	dfc00a17 	ldw	ra,40(sp)
  2034fc:	df000917 	ldw	fp,36(sp)
  203500:	ddc00817 	ldw	r23,32(sp)
  203504:	dd800717 	ldw	r22,28(sp)
  203508:	dd400617 	ldw	r21,24(sp)
  20350c:	dd000517 	ldw	r20,20(sp)
  203510:	dcc00417 	ldw	r19,16(sp)
  203514:	dc800317 	ldw	r18,12(sp)
  203518:	dc400217 	ldw	r17,8(sp)
  20351c:	dc000117 	ldw	r16,4(sp)
  203520:	dec00b04 	addi	sp,sp,44
  203524:	f800283a 	ret
  203528:	90000d1e 	bne	r18,zero,203560 <__mulsf3+0x1d8>
  20352c:	04400104 	movi	r17,4
  203530:	05c00044 	movi	r23,1
  203534:	003faf06 	br	2033f4 <_gp+0xffdf17e0>
  203538:	9806c03a 	cmpne	r3,r19,zero
  20353c:	18c00084 	addi	r3,r3,2
  203540:	003fba06 	br	20342c <_gp+0xffdf1818>
  203544:	9800141e 	bne	r19,zero,203598 <__mulsf3+0x210>
  203548:	00c00044 	movi	r3,1
  20354c:	003fb706 	br	20342c <_gp+0xffdf1818>
  203550:	a829883a 	mov	r20,r21
  203554:	00ffffc4 	movi	r3,-1
  203558:	0009883a 	mov	r4,zero
  20355c:	003fdd06 	br	2034d4 <_gp+0xffdf18c0>
  203560:	9009883a 	mov	r4,r18
  203564:	d9400015 	stw	r5,0(sp)
  203568:	0203dfc0 	call	203dfc <__clzsi2>
  20356c:	10fffec4 	addi	r3,r2,-5
  203570:	10801d84 	addi	r2,r2,118
  203574:	90e4983a 	sll	r18,r18,r3
  203578:	00a1c83a 	sub	r16,zero,r2
  20357c:	0023883a 	mov	r17,zero
  203580:	002f883a 	mov	r23,zero
  203584:	d9400017 	ldw	r5,0(sp)
  203588:	003f9a06 	br	2033f4 <_gp+0xffdf17e0>
  20358c:	04400304 	movi	r17,12
  203590:	05c000c4 	movi	r23,3
  203594:	003f9706 	br	2033f4 <_gp+0xffdf17e0>
  203598:	9809883a 	mov	r4,r19
  20359c:	d9800015 	stw	r6,0(sp)
  2035a0:	0203dfc0 	call	203dfc <__clzsi2>
  2035a4:	10fffec4 	addi	r3,r2,-5
  2035a8:	10801d84 	addi	r2,r2,118
  2035ac:	98e6983a 	sll	r19,r19,r3
  2035b0:	0085c83a 	sub	r2,zero,r2
  2035b4:	0007883a 	mov	r3,zero
  2035b8:	d9800017 	ldw	r6,0(sp)
  2035bc:	003f9b06 	br	20342c <_gp+0xffdf1818>
  2035c0:	01002034 	movhi	r4,128
  2035c4:	0029883a 	mov	r20,zero
  2035c8:	213fffc4 	addi	r4,r4,-1
  2035cc:	00ffffc4 	movi	r3,-1
  2035d0:	003fc006 	br	2034d4 <_gp+0xffdf18c0>
  2035d4:	9027883a 	mov	r19,r18
  2035d8:	b807883a 	mov	r3,r23
  2035dc:	003fb406 	br	2034b0 <_gp+0xffdf189c>
  2035e0:	9027883a 	mov	r19,r18
  2035e4:	e02b883a 	mov	r21,fp
  2035e8:	b807883a 	mov	r3,r23
  2035ec:	003fb006 	br	2034b0 <_gp+0xffdf189c>
  2035f0:	9028d43a 	srli	r20,r18,16
  2035f4:	982cd43a 	srli	r22,r19,16
  2035f8:	94bfffcc 	andi	r18,r18,65535
  2035fc:	9cffffcc 	andi	r19,r19,65535
  203600:	980b883a 	mov	r5,r19
  203604:	9009883a 	mov	r4,r18
  203608:	d9c00015 	stw	r7,0(sp)
  20360c:	02032a40 	call	2032a4 <__mulsi3>
  203610:	a00b883a 	mov	r5,r20
  203614:	9809883a 	mov	r4,r19
  203618:	1023883a 	mov	r17,r2
  20361c:	02032a40 	call	2032a4 <__mulsi3>
  203620:	a009883a 	mov	r4,r20
  203624:	b00b883a 	mov	r5,r22
  203628:	1027883a 	mov	r19,r2
  20362c:	02032a40 	call	2032a4 <__mulsi3>
  203630:	b00b883a 	mov	r5,r22
  203634:	9009883a 	mov	r4,r18
  203638:	1029883a 	mov	r20,r2
  20363c:	02032a40 	call	2032a4 <__mulsi3>
  203640:	8806d43a 	srli	r3,r17,16
  203644:	14c5883a 	add	r2,r2,r19
  203648:	d9c00017 	ldw	r7,0(sp)
  20364c:	1885883a 	add	r2,r3,r2
  203650:	14c0022e 	bgeu	r2,r19,20365c <__mulsf3+0x2d4>
  203654:	00c00074 	movhi	r3,1
  203658:	a0e9883a 	add	r20,r20,r3
  20365c:	1026943a 	slli	r19,r2,16
  203660:	8c7fffcc 	andi	r17,r17,65535
  203664:	1004d43a 	srli	r2,r2,16
  203668:	9c63883a 	add	r17,r19,r17
  20366c:	882691ba 	slli	r19,r17,6
  203670:	1505883a 	add	r2,r2,r20
  203674:	8822d6ba 	srli	r17,r17,26
  203678:	100891ba 	slli	r4,r2,6
  20367c:	9826c03a 	cmpne	r19,r19,zero
  203680:	9c62b03a 	or	r17,r19,r17
  203684:	8926b03a 	or	r19,r17,r4
  203688:	9882002c 	andhi	r2,r19,2048
  20368c:	10000426 	beq	r2,zero,2036a0 <__mulsf3+0x318>
  203690:	9804d07a 	srli	r2,r19,1
  203694:	9900004c 	andi	r4,r19,1
  203698:	3821883a 	mov	r16,r7
  20369c:	1126b03a 	or	r19,r2,r4
  2036a0:	80c01fc4 	addi	r3,r16,127
  2036a4:	00c0210e 	bge	zero,r3,20372c <__mulsf3+0x3a4>
  2036a8:	988001cc 	andi	r2,r19,7
  2036ac:	10000426 	beq	r2,zero,2036c0 <__mulsf3+0x338>
  2036b0:	988003cc 	andi	r2,r19,15
  2036b4:	01000104 	movi	r4,4
  2036b8:	11000126 	beq	r2,r4,2036c0 <__mulsf3+0x338>
  2036bc:	9927883a 	add	r19,r19,r4
  2036c0:	9882002c 	andhi	r2,r19,2048
  2036c4:	10000426 	beq	r2,zero,2036d8 <__mulsf3+0x350>
  2036c8:	00be0034 	movhi	r2,63488
  2036cc:	10bfffc4 	addi	r2,r2,-1
  2036d0:	80c02004 	addi	r3,r16,128
  2036d4:	98a6703a 	and	r19,r19,r2
  2036d8:	00803f84 	movi	r2,254
  2036dc:	10ff9c16 	blt	r2,r3,203550 <_gp+0xffdf193c>
  2036e0:	980891ba 	slli	r4,r19,6
  2036e4:	a829883a 	mov	r20,r21
  2036e8:	2008d27a 	srli	r4,r4,9
  2036ec:	003f7906 	br	2034d4 <_gp+0xffdf18c0>
  2036f0:	9080102c 	andhi	r2,r18,64
  2036f4:	10000826 	beq	r2,zero,203718 <__mulsf3+0x390>
  2036f8:	9880102c 	andhi	r2,r19,64
  2036fc:	1000061e 	bne	r2,zero,203718 <__mulsf3+0x390>
  203700:	00802034 	movhi	r2,128
  203704:	99001034 	orhi	r4,r19,64
  203708:	10bfffc4 	addi	r2,r2,-1
  20370c:	b029883a 	mov	r20,r22
  203710:	2088703a 	and	r4,r4,r2
  203714:	003fad06 	br	2035cc <_gp+0xffdf19b8>
  203718:	00802034 	movhi	r2,128
  20371c:	91001034 	orhi	r4,r18,64
  203720:	10bfffc4 	addi	r2,r2,-1
  203724:	2088703a 	and	r4,r4,r2
  203728:	003fa806 	br	2035cc <_gp+0xffdf19b8>
  20372c:	00800044 	movi	r2,1
  203730:	10c7c83a 	sub	r3,r2,r3
  203734:	008006c4 	movi	r2,27
  203738:	10ff6316 	blt	r2,r3,2034c8 <_gp+0xffdf18b4>
  20373c:	00800804 	movi	r2,32
  203740:	10c5c83a 	sub	r2,r2,r3
  203744:	9884983a 	sll	r2,r19,r2
  203748:	98c6d83a 	srl	r3,r19,r3
  20374c:	1004c03a 	cmpne	r2,r2,zero
  203750:	1884b03a 	or	r2,r3,r2
  203754:	10c001cc 	andi	r3,r2,7
  203758:	18000426 	beq	r3,zero,20376c <__mulsf3+0x3e4>
  20375c:	10c003cc 	andi	r3,r2,15
  203760:	01000104 	movi	r4,4
  203764:	19000126 	beq	r3,r4,20376c <__mulsf3+0x3e4>
  203768:	1105883a 	add	r2,r2,r4
  20376c:	10c1002c 	andhi	r3,r2,1024
  203770:	18000626 	beq	r3,zero,20378c <__mulsf3+0x404>
  203774:	a829883a 	mov	r20,r21
  203778:	00c00044 	movi	r3,1
  20377c:	0009883a 	mov	r4,zero
  203780:	003f5406 	br	2034d4 <_gp+0xffdf18c0>
  203784:	3821883a 	mov	r16,r7
  203788:	003fc506 	br	2036a0 <_gp+0xffdf1a8c>
  20378c:	100491ba 	slli	r2,r2,6
  203790:	a829883a 	mov	r20,r21
  203794:	0007883a 	mov	r3,zero
  203798:	1008d27a 	srli	r4,r2,9
  20379c:	003f4d06 	br	2034d4 <_gp+0xffdf18c0>
  2037a0:	00802034 	movhi	r2,128
  2037a4:	99001034 	orhi	r4,r19,64
  2037a8:	10bfffc4 	addi	r2,r2,-1
  2037ac:	a829883a 	mov	r20,r21
  2037b0:	2088703a 	and	r4,r4,r2
  2037b4:	003f8506 	br	2035cc <_gp+0xffdf19b8>

002037b8 <__subsf3>:
  2037b8:	defffc04 	addi	sp,sp,-16
  2037bc:	280cd5fa 	srli	r6,r5,23
  2037c0:	dc000015 	stw	r16,0(sp)
  2037c4:	01c02034 	movhi	r7,128
  2037c8:	2020d5fa 	srli	r16,r4,23
  2037cc:	39ffffc4 	addi	r7,r7,-1
  2037d0:	3906703a 	and	r3,r7,r4
  2037d4:	dc400115 	stw	r17,4(sp)
  2037d8:	394e703a 	and	r7,r7,r5
  2037dc:	2022d7fa 	srli	r17,r4,31
  2037e0:	dfc00315 	stw	ra,12(sp)
  2037e4:	dc800215 	stw	r18,8(sp)
  2037e8:	31803fcc 	andi	r6,r6,255
  2037ec:	01003fc4 	movi	r4,255
  2037f0:	84003fcc 	andi	r16,r16,255
  2037f4:	180690fa 	slli	r3,r3,3
  2037f8:	2804d7fa 	srli	r2,r5,31
  2037fc:	380e90fa 	slli	r7,r7,3
  203800:	31006d26 	beq	r6,r4,2039b8 <__subsf3+0x200>
  203804:	1080005c 	xori	r2,r2,1
  203808:	8189c83a 	sub	r4,r16,r6
  20380c:	14404f26 	beq	r2,r17,20394c <__subsf3+0x194>
  203810:	0100770e 	bge	zero,r4,2039f0 <__subsf3+0x238>
  203814:	30001e1e 	bne	r6,zero,203890 <__subsf3+0xd8>
  203818:	38006a1e 	bne	r7,zero,2039c4 <__subsf3+0x20c>
  20381c:	188001cc 	andi	r2,r3,7
  203820:	10000426 	beq	r2,zero,203834 <__subsf3+0x7c>
  203824:	188003cc 	andi	r2,r3,15
  203828:	01000104 	movi	r4,4
  20382c:	11000126 	beq	r2,r4,203834 <__subsf3+0x7c>
  203830:	1907883a 	add	r3,r3,r4
  203834:	1881002c 	andhi	r2,r3,1024
  203838:	10003926 	beq	r2,zero,203920 <__subsf3+0x168>
  20383c:	84000044 	addi	r16,r16,1
  203840:	00803fc4 	movi	r2,255
  203844:	80807526 	beq	r16,r2,203a1c <__subsf3+0x264>
  203848:	180691ba 	slli	r3,r3,6
  20384c:	8880004c 	andi	r2,r17,1
  203850:	180ad27a 	srli	r5,r3,9
  203854:	84003fcc 	andi	r16,r16,255
  203858:	800695fa 	slli	r3,r16,23
  20385c:	10803fcc 	andi	r2,r2,255
  203860:	01002034 	movhi	r4,128
  203864:	213fffc4 	addi	r4,r4,-1
  203868:	100497fa 	slli	r2,r2,31
  20386c:	2920703a 	and	r16,r5,r4
  203870:	80e0b03a 	or	r16,r16,r3
  203874:	8084b03a 	or	r2,r16,r2
  203878:	dfc00317 	ldw	ra,12(sp)
  20387c:	dc800217 	ldw	r18,8(sp)
  203880:	dc400117 	ldw	r17,4(sp)
  203884:	dc000017 	ldw	r16,0(sp)
  203888:	dec00404 	addi	sp,sp,16
  20388c:	f800283a 	ret
  203890:	00803fc4 	movi	r2,255
  203894:	80bfe126 	beq	r16,r2,20381c <_gp+0xffdf1c08>
  203898:	39c10034 	orhi	r7,r7,1024
  20389c:	008006c4 	movi	r2,27
  2038a0:	11007416 	blt	r2,r4,203a74 <__subsf3+0x2bc>
  2038a4:	00800804 	movi	r2,32
  2038a8:	1105c83a 	sub	r2,r2,r4
  2038ac:	3884983a 	sll	r2,r7,r2
  2038b0:	390ed83a 	srl	r7,r7,r4
  2038b4:	1008c03a 	cmpne	r4,r2,zero
  2038b8:	390eb03a 	or	r7,r7,r4
  2038bc:	19c7c83a 	sub	r3,r3,r7
  2038c0:	1881002c 	andhi	r2,r3,1024
  2038c4:	10001426 	beq	r2,zero,203918 <__subsf3+0x160>
  2038c8:	04810034 	movhi	r18,1024
  2038cc:	94bfffc4 	addi	r18,r18,-1
  2038d0:	1ca4703a 	and	r18,r3,r18
  2038d4:	9009883a 	mov	r4,r18
  2038d8:	0203dfc0 	call	203dfc <__clzsi2>
  2038dc:	10bffec4 	addi	r2,r2,-5
  2038e0:	90a4983a 	sll	r18,r18,r2
  2038e4:	14005116 	blt	r2,r16,203a2c <__subsf3+0x274>
  2038e8:	1405c83a 	sub	r2,r2,r16
  2038ec:	10c00044 	addi	r3,r2,1
  2038f0:	00800804 	movi	r2,32
  2038f4:	10c5c83a 	sub	r2,r2,r3
  2038f8:	9084983a 	sll	r2,r18,r2
  2038fc:	90e4d83a 	srl	r18,r18,r3
  203900:	0021883a 	mov	r16,zero
  203904:	1006c03a 	cmpne	r3,r2,zero
  203908:	90c6b03a 	or	r3,r18,r3
  20390c:	003fc306 	br	20381c <_gp+0xffdf1c08>
  203910:	2000e026 	beq	r4,zero,203c94 <__subsf3+0x4dc>
  203914:	2007883a 	mov	r3,r4
  203918:	188001cc 	andi	r2,r3,7
  20391c:	103fc11e 	bne	r2,zero,203824 <_gp+0xffdf1c10>
  203920:	180ad0fa 	srli	r5,r3,3
  203924:	00c03fc4 	movi	r3,255
  203928:	8880004c 	andi	r2,r17,1
  20392c:	80c0031e 	bne	r16,r3,20393c <__subsf3+0x184>
  203930:	28006d26 	beq	r5,zero,203ae8 <__subsf3+0x330>
  203934:	29401034 	orhi	r5,r5,64
  203938:	043fffc4 	movi	r16,-1
  20393c:	00c02034 	movhi	r3,128
  203940:	18ffffc4 	addi	r3,r3,-1
  203944:	28ca703a 	and	r5,r5,r3
  203948:	003fc206 	br	203854 <_gp+0xffdf1c40>
  20394c:	01003c0e 	bge	zero,r4,203a40 <__subsf3+0x288>
  203950:	30002126 	beq	r6,zero,2039d8 <__subsf3+0x220>
  203954:	01403fc4 	movi	r5,255
  203958:	817fb026 	beq	r16,r5,20381c <_gp+0xffdf1c08>
  20395c:	39c10034 	orhi	r7,r7,1024
  203960:	014006c4 	movi	r5,27
  203964:	29007416 	blt	r5,r4,203b38 <__subsf3+0x380>
  203968:	01400804 	movi	r5,32
  20396c:	290bc83a 	sub	r5,r5,r4
  203970:	394a983a 	sll	r5,r7,r5
  203974:	390ed83a 	srl	r7,r7,r4
  203978:	2808c03a 	cmpne	r4,r5,zero
  20397c:	390eb03a 	or	r7,r7,r4
  203980:	19c7883a 	add	r3,r3,r7
  203984:	1901002c 	andhi	r4,r3,1024
  203988:	20003826 	beq	r4,zero,203a6c <__subsf3+0x2b4>
  20398c:	84000044 	addi	r16,r16,1
  203990:	01003fc4 	movi	r4,255
  203994:	81005426 	beq	r16,r4,203ae8 <__subsf3+0x330>
  203998:	1023883a 	mov	r17,r2
  20399c:	00bf0034 	movhi	r2,64512
  2039a0:	10bfffc4 	addi	r2,r2,-1
  2039a4:	1900004c 	andi	r4,r3,1
  2039a8:	1886703a 	and	r3,r3,r2
  2039ac:	1806d07a 	srli	r3,r3,1
  2039b0:	1906b03a 	or	r3,r3,r4
  2039b4:	003f9906 	br	20381c <_gp+0xffdf1c08>
  2039b8:	383f9226 	beq	r7,zero,203804 <_gp+0xffdf1bf0>
  2039bc:	10803fcc 	andi	r2,r2,255
  2039c0:	003f9106 	br	203808 <_gp+0xffdf1bf4>
  2039c4:	213fffc4 	addi	r4,r4,-1
  2039c8:	203fbc26 	beq	r4,zero,2038bc <_gp+0xffdf1ca8>
  2039cc:	00803fc4 	movi	r2,255
  2039d0:	80bfb21e 	bne	r16,r2,20389c <_gp+0xffdf1c88>
  2039d4:	003f9106 	br	20381c <_gp+0xffdf1c08>
  2039d8:	383f9026 	beq	r7,zero,20381c <_gp+0xffdf1c08>
  2039dc:	213fffc4 	addi	r4,r4,-1
  2039e0:	203fe726 	beq	r4,zero,203980 <_gp+0xffdf1d6c>
  2039e4:	01403fc4 	movi	r5,255
  2039e8:	817fdd1e 	bne	r16,r5,203960 <_gp+0xffdf1d4c>
  2039ec:	003f8b06 	br	20381c <_gp+0xffdf1c08>
  2039f0:	2000221e 	bne	r4,zero,203a7c <__subsf3+0x2c4>
  2039f4:	81000044 	addi	r4,r16,1
  2039f8:	21003fcc 	andi	r4,r4,255
  2039fc:	01400044 	movi	r5,1
  203a00:	2900470e 	bge	r5,r4,203b20 <__subsf3+0x368>
  203a04:	19e5c83a 	sub	r18,r3,r7
  203a08:	9141002c 	andhi	r5,r18,1024
  203a0c:	28002d26 	beq	r5,zero,203ac4 <__subsf3+0x30c>
  203a10:	38e5c83a 	sub	r18,r7,r3
  203a14:	1023883a 	mov	r17,r2
  203a18:	003fae06 	br	2038d4 <_gp+0xffdf1cc0>
  203a1c:	8880004c 	andi	r2,r17,1
  203a20:	043fffc4 	movi	r16,-1
  203a24:	000b883a 	mov	r5,zero
  203a28:	003f8a06 	br	203854 <_gp+0xffdf1c40>
  203a2c:	00ff0034 	movhi	r3,64512
  203a30:	18ffffc4 	addi	r3,r3,-1
  203a34:	80a1c83a 	sub	r16,r16,r2
  203a38:	90c6703a 	and	r3,r18,r3
  203a3c:	003f7706 	br	20381c <_gp+0xffdf1c08>
  203a40:	2000431e 	bne	r4,zero,203b50 <__subsf3+0x398>
  203a44:	81000044 	addi	r4,r16,1
  203a48:	21803fcc 	andi	r6,r4,255
  203a4c:	01400044 	movi	r5,1
  203a50:	2980280e 	bge	r5,r6,203af4 <__subsf3+0x33c>
  203a54:	01403fc4 	movi	r5,255
  203a58:	21402326 	beq	r4,r5,203ae8 <__subsf3+0x330>
  203a5c:	19c7883a 	add	r3,r3,r7
  203a60:	1806d07a 	srli	r3,r3,1
  203a64:	2021883a 	mov	r16,r4
  203a68:	003f6c06 	br	20381c <_gp+0xffdf1c08>
  203a6c:	1023883a 	mov	r17,r2
  203a70:	003fa906 	br	203918 <_gp+0xffdf1d04>
  203a74:	01c00044 	movi	r7,1
  203a78:	003f9006 	br	2038bc <_gp+0xffdf1ca8>
  203a7c:	8000151e 	bne	r16,zero,203ad4 <__subsf3+0x31c>
  203a80:	18002f26 	beq	r3,zero,203b40 <__subsf3+0x388>
  203a84:	0108303a 	nor	r4,zero,r4
  203a88:	20000a26 	beq	r4,zero,203ab4 <__subsf3+0x2fc>
  203a8c:	01403fc4 	movi	r5,255
  203a90:	31402b26 	beq	r6,r5,203b40 <__subsf3+0x388>
  203a94:	014006c4 	movi	r5,27
  203a98:	29006e16 	blt	r5,r4,203c54 <__subsf3+0x49c>
  203a9c:	01400804 	movi	r5,32
  203aa0:	290bc83a 	sub	r5,r5,r4
  203aa4:	194a983a 	sll	r5,r3,r5
  203aa8:	1908d83a 	srl	r4,r3,r4
  203aac:	2806c03a 	cmpne	r3,r5,zero
  203ab0:	20c6b03a 	or	r3,r4,r3
  203ab4:	38c7c83a 	sub	r3,r7,r3
  203ab8:	3021883a 	mov	r16,r6
  203abc:	1023883a 	mov	r17,r2
  203ac0:	003f7f06 	br	2038c0 <_gp+0xffdf1cac>
  203ac4:	903f831e 	bne	r18,zero,2038d4 <_gp+0xffdf1cc0>
  203ac8:	0005883a 	mov	r2,zero
  203acc:	0021883a 	mov	r16,zero
  203ad0:	003f9a06 	br	20393c <_gp+0xffdf1d28>
  203ad4:	01403fc4 	movi	r5,255
  203ad8:	31401926 	beq	r6,r5,203b40 <__subsf3+0x388>
  203adc:	0109c83a 	sub	r4,zero,r4
  203ae0:	18c10034 	orhi	r3,r3,1024
  203ae4:	003feb06 	br	203a94 <_gp+0xffdf1e80>
  203ae8:	043fffc4 	movi	r16,-1
  203aec:	000b883a 	mov	r5,zero
  203af0:	003f5806 	br	203854 <_gp+0xffdf1c40>
  203af4:	8000481e 	bne	r16,zero,203c18 <__subsf3+0x460>
  203af8:	18006226 	beq	r3,zero,203c84 <__subsf3+0x4cc>
  203afc:	383f4726 	beq	r7,zero,20381c <_gp+0xffdf1c08>
  203b00:	19c7883a 	add	r3,r3,r7
  203b04:	1881002c 	andhi	r2,r3,1024
  203b08:	103f8326 	beq	r2,zero,203918 <_gp+0xffdf1d04>
  203b0c:	00bf0034 	movhi	r2,64512
  203b10:	10bfffc4 	addi	r2,r2,-1
  203b14:	2821883a 	mov	r16,r5
  203b18:	1886703a 	and	r3,r3,r2
  203b1c:	003f3f06 	br	20381c <_gp+0xffdf1c08>
  203b20:	80001c1e 	bne	r16,zero,203b94 <__subsf3+0x3dc>
  203b24:	1800261e 	bne	r3,zero,203bc0 <__subsf3+0x408>
  203b28:	38004c26 	beq	r7,zero,203c5c <__subsf3+0x4a4>
  203b2c:	3807883a 	mov	r3,r7
  203b30:	1023883a 	mov	r17,r2
  203b34:	003f3906 	br	20381c <_gp+0xffdf1c08>
  203b38:	01c00044 	movi	r7,1
  203b3c:	003f9006 	br	203980 <_gp+0xffdf1d6c>
  203b40:	3807883a 	mov	r3,r7
  203b44:	3021883a 	mov	r16,r6
  203b48:	1023883a 	mov	r17,r2
  203b4c:	003f3306 	br	20381c <_gp+0xffdf1c08>
  203b50:	8000161e 	bne	r16,zero,203bac <__subsf3+0x3f4>
  203b54:	18002d26 	beq	r3,zero,203c0c <__subsf3+0x454>
  203b58:	0108303a 	nor	r4,zero,r4
  203b5c:	20000a26 	beq	r4,zero,203b88 <__subsf3+0x3d0>
  203b60:	01403fc4 	movi	r5,255
  203b64:	31402926 	beq	r6,r5,203c0c <__subsf3+0x454>
  203b68:	014006c4 	movi	r5,27
  203b6c:	29004716 	blt	r5,r4,203c8c <__subsf3+0x4d4>
  203b70:	01400804 	movi	r5,32
  203b74:	290bc83a 	sub	r5,r5,r4
  203b78:	194a983a 	sll	r5,r3,r5
  203b7c:	1908d83a 	srl	r4,r3,r4
  203b80:	2806c03a 	cmpne	r3,r5,zero
  203b84:	20c6b03a 	or	r3,r4,r3
  203b88:	19c7883a 	add	r3,r3,r7
  203b8c:	3021883a 	mov	r16,r6
  203b90:	003f7c06 	br	203984 <_gp+0xffdf1d70>
  203b94:	1800111e 	bne	r3,zero,203bdc <__subsf3+0x424>
  203b98:	38003326 	beq	r7,zero,203c68 <__subsf3+0x4b0>
  203b9c:	3807883a 	mov	r3,r7
  203ba0:	1023883a 	mov	r17,r2
  203ba4:	04003fc4 	movi	r16,255
  203ba8:	003f1c06 	br	20381c <_gp+0xffdf1c08>
  203bac:	01403fc4 	movi	r5,255
  203bb0:	31401626 	beq	r6,r5,203c0c <__subsf3+0x454>
  203bb4:	0109c83a 	sub	r4,zero,r4
  203bb8:	18c10034 	orhi	r3,r3,1024
  203bbc:	003fea06 	br	203b68 <_gp+0xffdf1f54>
  203bc0:	383f1626 	beq	r7,zero,20381c <_gp+0xffdf1c08>
  203bc4:	19c9c83a 	sub	r4,r3,r7
  203bc8:	2141002c 	andhi	r5,r4,1024
  203bcc:	283f5026 	beq	r5,zero,203910 <_gp+0xffdf1cfc>
  203bd0:	38c7c83a 	sub	r3,r7,r3
  203bd4:	1023883a 	mov	r17,r2
  203bd8:	003f1006 	br	20381c <_gp+0xffdf1c08>
  203bdc:	38001b26 	beq	r7,zero,203c4c <__subsf3+0x494>
  203be0:	1806d0fa 	srli	r3,r3,3
  203be4:	1900102c 	andhi	r4,r3,64
  203be8:	20000526 	beq	r4,zero,203c00 <__subsf3+0x448>
  203bec:	380ed0fa 	srli	r7,r7,3
  203bf0:	3900102c 	andhi	r4,r7,64
  203bf4:	2000021e 	bne	r4,zero,203c00 <__subsf3+0x448>
  203bf8:	3807883a 	mov	r3,r7
  203bfc:	1023883a 	mov	r17,r2
  203c00:	180690fa 	slli	r3,r3,3
  203c04:	04003fc4 	movi	r16,255
  203c08:	003f0406 	br	20381c <_gp+0xffdf1c08>
  203c0c:	3807883a 	mov	r3,r7
  203c10:	3021883a 	mov	r16,r6
  203c14:	003f0106 	br	20381c <_gp+0xffdf1c08>
  203c18:	18001726 	beq	r3,zero,203c78 <__subsf3+0x4c0>
  203c1c:	38000b26 	beq	r7,zero,203c4c <__subsf3+0x494>
  203c20:	1806d0fa 	srli	r3,r3,3
  203c24:	1900102c 	andhi	r4,r3,64
  203c28:	20000426 	beq	r4,zero,203c3c <__subsf3+0x484>
  203c2c:	380ed0fa 	srli	r7,r7,3
  203c30:	3900102c 	andhi	r4,r7,64
  203c34:	2000011e 	bne	r4,zero,203c3c <__subsf3+0x484>
  203c38:	3807883a 	mov	r3,r7
  203c3c:	180690fa 	slli	r3,r3,3
  203c40:	1023883a 	mov	r17,r2
  203c44:	04003fc4 	movi	r16,255
  203c48:	003ef406 	br	20381c <_gp+0xffdf1c08>
  203c4c:	04003fc4 	movi	r16,255
  203c50:	003ef206 	br	20381c <_gp+0xffdf1c08>
  203c54:	00c00044 	movi	r3,1
  203c58:	003f9606 	br	203ab4 <_gp+0xffdf1ea0>
  203c5c:	000b883a 	mov	r5,zero
  203c60:	0005883a 	mov	r2,zero
  203c64:	003f3506 	br	20393c <_gp+0xffdf1d28>
  203c68:	01402034 	movhi	r5,128
  203c6c:	297fffc4 	addi	r5,r5,-1
  203c70:	0005883a 	mov	r2,zero
  203c74:	003f2f06 	br	203934 <_gp+0xffdf1d20>
  203c78:	3807883a 	mov	r3,r7
  203c7c:	04003fc4 	movi	r16,255
  203c80:	003ee606 	br	20381c <_gp+0xffdf1c08>
  203c84:	3807883a 	mov	r3,r7
  203c88:	003ee406 	br	20381c <_gp+0xffdf1c08>
  203c8c:	00c00044 	movi	r3,1
  203c90:	003fbd06 	br	203b88 <_gp+0xffdf1f74>
  203c94:	0005883a 	mov	r2,zero
  203c98:	003f2806 	br	20393c <_gp+0xffdf1d28>

00203c9c <__fixsfsi>:
  203c9c:	200ad5fa 	srli	r5,r4,23
  203ca0:	00c02034 	movhi	r3,128
  203ca4:	18ffffc4 	addi	r3,r3,-1
  203ca8:	29403fcc 	andi	r5,r5,255
  203cac:	00801f84 	movi	r2,126
  203cb0:	1906703a 	and	r3,r3,r4
  203cb4:	2008d7fa 	srli	r4,r4,31
  203cb8:	11400e0e 	bge	r2,r5,203cf4 <__fixsfsi+0x58>
  203cbc:	00802744 	movi	r2,157
  203cc0:	11400816 	blt	r2,r5,203ce4 <__fixsfsi+0x48>
  203cc4:	00802544 	movi	r2,149
  203cc8:	18c02034 	orhi	r3,r3,128
  203ccc:	11400b0e 	bge	r2,r5,203cfc <__fixsfsi+0x60>
  203cd0:	28bfda84 	addi	r2,r5,-150
  203cd4:	1884983a 	sll	r2,r3,r2
  203cd8:	20000726 	beq	r4,zero,203cf8 <__fixsfsi+0x5c>
  203cdc:	0085c83a 	sub	r2,zero,r2
  203ce0:	f800283a 	ret
  203ce4:	00a00034 	movhi	r2,32768
  203ce8:	10bfffc4 	addi	r2,r2,-1
  203cec:	2085883a 	add	r2,r4,r2
  203cf0:	f800283a 	ret
  203cf4:	0005883a 	mov	r2,zero
  203cf8:	f800283a 	ret
  203cfc:	00802584 	movi	r2,150
  203d00:	1145c83a 	sub	r2,r2,r5
  203d04:	1884d83a 	srl	r2,r3,r2
  203d08:	003ff306 	br	203cd8 <_gp+0xffdf20c4>

00203d0c <__floatunsisf>:
  203d0c:	defffe04 	addi	sp,sp,-8
  203d10:	dfc00115 	stw	ra,4(sp)
  203d14:	dc000015 	stw	r16,0(sp)
  203d18:	20002c26 	beq	r4,zero,203dcc <__floatunsisf+0xc0>
  203d1c:	2021883a 	mov	r16,r4
  203d20:	0203dfc0 	call	203dfc <__clzsi2>
  203d24:	00c02784 	movi	r3,158
  203d28:	1887c83a 	sub	r3,r3,r2
  203d2c:	01002584 	movi	r4,150
  203d30:	20c00f16 	blt	r4,r3,203d70 <__floatunsisf+0x64>
  203d34:	20c9c83a 	sub	r4,r4,r3
  203d38:	8108983a 	sll	r4,r16,r4
  203d3c:	00802034 	movhi	r2,128
  203d40:	10bfffc4 	addi	r2,r2,-1
  203d44:	2088703a 	and	r4,r4,r2
  203d48:	18803fcc 	andi	r2,r3,255
  203d4c:	100695fa 	slli	r3,r2,23
  203d50:	00802034 	movhi	r2,128
  203d54:	10bfffc4 	addi	r2,r2,-1
  203d58:	2084703a 	and	r2,r4,r2
  203d5c:	10c4b03a 	or	r2,r2,r3
  203d60:	dfc00117 	ldw	ra,4(sp)
  203d64:	dc000017 	ldw	r16,0(sp)
  203d68:	dec00204 	addi	sp,sp,8
  203d6c:	f800283a 	ret
  203d70:	01002644 	movi	r4,153
  203d74:	20c01816 	blt	r4,r3,203dd8 <__floatunsisf+0xcc>
  203d78:	20c9c83a 	sub	r4,r4,r3
  203d7c:	8108983a 	sll	r4,r16,r4
  203d80:	017f0034 	movhi	r5,64512
  203d84:	297fffc4 	addi	r5,r5,-1
  203d88:	218001cc 	andi	r6,r4,7
  203d8c:	214a703a 	and	r5,r4,r5
  203d90:	30000426 	beq	r6,zero,203da4 <__floatunsisf+0x98>
  203d94:	210003cc 	andi	r4,r4,15
  203d98:	01800104 	movi	r6,4
  203d9c:	21800126 	beq	r4,r6,203da4 <__floatunsisf+0x98>
  203da0:	298b883a 	add	r5,r5,r6
  203da4:	2901002c 	andhi	r4,r5,1024
  203da8:	20000526 	beq	r4,zero,203dc0 <__floatunsisf+0xb4>
  203dac:	00c027c4 	movi	r3,159
  203db0:	1887c83a 	sub	r3,r3,r2
  203db4:	00bf0034 	movhi	r2,64512
  203db8:	10bfffc4 	addi	r2,r2,-1
  203dbc:	288a703a 	and	r5,r5,r2
  203dc0:	280891ba 	slli	r4,r5,6
  203dc4:	2008d27a 	srli	r4,r4,9
  203dc8:	003fdf06 	br	203d48 <_gp+0xffdf2134>
  203dcc:	0007883a 	mov	r3,zero
  203dd0:	0009883a 	mov	r4,zero
  203dd4:	003fdc06 	br	203d48 <_gp+0xffdf2134>
  203dd8:	01402e44 	movi	r5,185
  203ddc:	28cbc83a 	sub	r5,r5,r3
  203de0:	01000144 	movi	r4,5
  203de4:	2089c83a 	sub	r4,r4,r2
  203de8:	814a983a 	sll	r5,r16,r5
  203dec:	8108d83a 	srl	r4,r16,r4
  203df0:	2820c03a 	cmpne	r16,r5,zero
  203df4:	2408b03a 	or	r4,r4,r16
  203df8:	003fe106 	br	203d80 <_gp+0xffdf216c>

00203dfc <__clzsi2>:
  203dfc:	00bfffd4 	movui	r2,65535
  203e00:	11000536 	bltu	r2,r4,203e18 <__clzsi2+0x1c>
  203e04:	00803fc4 	movi	r2,255
  203e08:	11000f36 	bltu	r2,r4,203e48 <__clzsi2+0x4c>
  203e0c:	00800804 	movi	r2,32
  203e10:	0007883a 	mov	r3,zero
  203e14:	00000506 	br	203e2c <__clzsi2+0x30>
  203e18:	00804034 	movhi	r2,256
  203e1c:	10bfffc4 	addi	r2,r2,-1
  203e20:	11000c2e 	bgeu	r2,r4,203e54 <__clzsi2+0x58>
  203e24:	00800204 	movi	r2,8
  203e28:	00c00604 	movi	r3,24
  203e2c:	20c8d83a 	srl	r4,r4,r3
  203e30:	00c00874 	movhi	r3,33
  203e34:	18dac404 	addi	r3,r3,27408
  203e38:	1909883a 	add	r4,r3,r4
  203e3c:	20c00003 	ldbu	r3,0(r4)
  203e40:	10c5c83a 	sub	r2,r2,r3
  203e44:	f800283a 	ret
  203e48:	00800604 	movi	r2,24
  203e4c:	00c00204 	movi	r3,8
  203e50:	003ff606 	br	203e2c <_gp+0xffdf2218>
  203e54:	00800404 	movi	r2,16
  203e58:	1007883a 	mov	r3,r2
  203e5c:	003ff306 	br	203e2c <_gp+0xffdf2218>

00203e60 <_printf_r>:
  203e60:	defffd04 	addi	sp,sp,-12
  203e64:	2805883a 	mov	r2,r5
  203e68:	dfc00015 	stw	ra,0(sp)
  203e6c:	d9800115 	stw	r6,4(sp)
  203e70:	d9c00215 	stw	r7,8(sp)
  203e74:	21400217 	ldw	r5,8(r4)
  203e78:	d9c00104 	addi	r7,sp,4
  203e7c:	100d883a 	mov	r6,r2
  203e80:	02040580 	call	204058 <___vfprintf_internal_r>
  203e84:	dfc00017 	ldw	ra,0(sp)
  203e88:	dec00304 	addi	sp,sp,12
  203e8c:	f800283a 	ret

00203e90 <printf>:
  203e90:	defffc04 	addi	sp,sp,-16
  203e94:	dfc00015 	stw	ra,0(sp)
  203e98:	d9400115 	stw	r5,4(sp)
  203e9c:	d9800215 	stw	r6,8(sp)
  203ea0:	d9c00315 	stw	r7,12(sp)
  203ea4:	00801074 	movhi	r2,65
  203ea8:	10a70a04 	addi	r2,r2,-25560
  203eac:	10800017 	ldw	r2,0(r2)
  203eb0:	200b883a 	mov	r5,r4
  203eb4:	d9800104 	addi	r6,sp,4
  203eb8:	11000217 	ldw	r4,8(r2)
  203ebc:	02063340 	call	206334 <__vfprintf_internal>
  203ec0:	dfc00017 	ldw	ra,0(sp)
  203ec4:	dec00404 	addi	sp,sp,16
  203ec8:	f800283a 	ret

00203ecc <_putchar_r>:
  203ecc:	21800217 	ldw	r6,8(r4)
  203ed0:	020aef81 	jmpi	20aef8 <_putc_r>

00203ed4 <putchar>:
  203ed4:	00801074 	movhi	r2,65
  203ed8:	10a70a04 	addi	r2,r2,-25560
  203edc:	200b883a 	mov	r5,r4
  203ee0:	11000017 	ldw	r4,0(r2)
  203ee4:	21800217 	ldw	r6,8(r4)
  203ee8:	020aef81 	jmpi	20aef8 <_putc_r>

00203eec <_puts_r>:
  203eec:	defff604 	addi	sp,sp,-40
  203ef0:	dc000715 	stw	r16,28(sp)
  203ef4:	2021883a 	mov	r16,r4
  203ef8:	2809883a 	mov	r4,r5
  203efc:	dc400815 	stw	r17,32(sp)
  203f00:	dfc00915 	stw	ra,36(sp)
  203f04:	2823883a 	mov	r17,r5
  203f08:	0203fc00 	call	203fc0 <strlen>
  203f0c:	10c00044 	addi	r3,r2,1
  203f10:	d8800115 	stw	r2,4(sp)
  203f14:	00800874 	movhi	r2,33
  203f18:	109b0404 	addi	r2,r2,27664
  203f1c:	d8800215 	stw	r2,8(sp)
  203f20:	00800044 	movi	r2,1
  203f24:	d8800315 	stw	r2,12(sp)
  203f28:	00800084 	movi	r2,2
  203f2c:	dc400015 	stw	r17,0(sp)
  203f30:	d8c00615 	stw	r3,24(sp)
  203f34:	dec00415 	stw	sp,16(sp)
  203f38:	d8800515 	stw	r2,20(sp)
  203f3c:	80000226 	beq	r16,zero,203f48 <_puts_r+0x5c>
  203f40:	80800e17 	ldw	r2,56(r16)
  203f44:	10001426 	beq	r2,zero,203f98 <_puts_r+0xac>
  203f48:	81400217 	ldw	r5,8(r16)
  203f4c:	2880030b 	ldhu	r2,12(r5)
  203f50:	10c8000c 	andi	r3,r2,8192
  203f54:	1800061e 	bne	r3,zero,203f70 <_puts_r+0x84>
  203f58:	29001917 	ldw	r4,100(r5)
  203f5c:	00f7ffc4 	movi	r3,-8193
  203f60:	10880014 	ori	r2,r2,8192
  203f64:	20c6703a 	and	r3,r4,r3
  203f68:	2880030d 	sth	r2,12(r5)
  203f6c:	28c01915 	stw	r3,100(r5)
  203f70:	d9800404 	addi	r6,sp,16
  203f74:	8009883a 	mov	r4,r16
  203f78:	020889c0 	call	20889c <__sfvwrite_r>
  203f7c:	1000091e 	bne	r2,zero,203fa4 <_puts_r+0xb8>
  203f80:	00800284 	movi	r2,10
  203f84:	dfc00917 	ldw	ra,36(sp)
  203f88:	dc400817 	ldw	r17,32(sp)
  203f8c:	dc000717 	ldw	r16,28(sp)
  203f90:	dec00a04 	addi	sp,sp,40
  203f94:	f800283a 	ret
  203f98:	8009883a 	mov	r4,r16
  203f9c:	02084180 	call	208418 <__sinit>
  203fa0:	003fe906 	br	203f48 <_gp+0xffdf2334>
  203fa4:	00bfffc4 	movi	r2,-1
  203fa8:	003ff606 	br	203f84 <_gp+0xffdf2370>

00203fac <puts>:
  203fac:	00801074 	movhi	r2,65
  203fb0:	10a70a04 	addi	r2,r2,-25560
  203fb4:	200b883a 	mov	r5,r4
  203fb8:	11000017 	ldw	r4,0(r2)
  203fbc:	0203eec1 	jmpi	203eec <_puts_r>

00203fc0 <strlen>:
  203fc0:	208000cc 	andi	r2,r4,3
  203fc4:	10002026 	beq	r2,zero,204048 <strlen+0x88>
  203fc8:	20800007 	ldb	r2,0(r4)
  203fcc:	10002026 	beq	r2,zero,204050 <strlen+0x90>
  203fd0:	2005883a 	mov	r2,r4
  203fd4:	00000206 	br	203fe0 <strlen+0x20>
  203fd8:	10c00007 	ldb	r3,0(r2)
  203fdc:	18001826 	beq	r3,zero,204040 <strlen+0x80>
  203fe0:	10800044 	addi	r2,r2,1
  203fe4:	10c000cc 	andi	r3,r2,3
  203fe8:	183ffb1e 	bne	r3,zero,203fd8 <_gp+0xffdf23c4>
  203fec:	10c00017 	ldw	r3,0(r2)
  203ff0:	01ffbff4 	movhi	r7,65279
  203ff4:	39ffbfc4 	addi	r7,r7,-257
  203ff8:	00ca303a 	nor	r5,zero,r3
  203ffc:	01a02074 	movhi	r6,32897
  204000:	19c7883a 	add	r3,r3,r7
  204004:	31a02004 	addi	r6,r6,-32640
  204008:	1946703a 	and	r3,r3,r5
  20400c:	1986703a 	and	r3,r3,r6
  204010:	1800091e 	bne	r3,zero,204038 <strlen+0x78>
  204014:	10800104 	addi	r2,r2,4
  204018:	10c00017 	ldw	r3,0(r2)
  20401c:	19cb883a 	add	r5,r3,r7
  204020:	00c6303a 	nor	r3,zero,r3
  204024:	28c6703a 	and	r3,r5,r3
  204028:	1986703a 	and	r3,r3,r6
  20402c:	183ff926 	beq	r3,zero,204014 <_gp+0xffdf2400>
  204030:	00000106 	br	204038 <strlen+0x78>
  204034:	10800044 	addi	r2,r2,1
  204038:	10c00007 	ldb	r3,0(r2)
  20403c:	183ffd1e 	bne	r3,zero,204034 <_gp+0xffdf2420>
  204040:	1105c83a 	sub	r2,r2,r4
  204044:	f800283a 	ret
  204048:	2005883a 	mov	r2,r4
  20404c:	003fe706 	br	203fec <_gp+0xffdf23d8>
  204050:	0005883a 	mov	r2,zero
  204054:	f800283a 	ret

00204058 <___vfprintf_internal_r>:
  204058:	deffb804 	addi	sp,sp,-288
  20405c:	dfc04715 	stw	ra,284(sp)
  204060:	ddc04515 	stw	r23,276(sp)
  204064:	dd404315 	stw	r21,268(sp)
  204068:	d9002d15 	stw	r4,180(sp)
  20406c:	282f883a 	mov	r23,r5
  204070:	302b883a 	mov	r21,r6
  204074:	d9c02e15 	stw	r7,184(sp)
  204078:	df004615 	stw	fp,280(sp)
  20407c:	dd804415 	stw	r22,272(sp)
  204080:	dd004215 	stw	r20,264(sp)
  204084:	dcc04115 	stw	r19,260(sp)
  204088:	dc804015 	stw	r18,256(sp)
  20408c:	dc403f15 	stw	r17,252(sp)
  204090:	dc003e15 	stw	r16,248(sp)
  204094:	0208f980 	call	208f98 <_localeconv_r>
  204098:	10800017 	ldw	r2,0(r2)
  20409c:	1009883a 	mov	r4,r2
  2040a0:	d8803415 	stw	r2,208(sp)
  2040a4:	0203fc00 	call	203fc0 <strlen>
  2040a8:	d8803715 	stw	r2,220(sp)
  2040ac:	d8802d17 	ldw	r2,180(sp)
  2040b0:	10000226 	beq	r2,zero,2040bc <___vfprintf_internal_r+0x64>
  2040b4:	10800e17 	ldw	r2,56(r2)
  2040b8:	1000fb26 	beq	r2,zero,2044a8 <___vfprintf_internal_r+0x450>
  2040bc:	b880030b 	ldhu	r2,12(r23)
  2040c0:	10c8000c 	andi	r3,r2,8192
  2040c4:	1800061e 	bne	r3,zero,2040e0 <___vfprintf_internal_r+0x88>
  2040c8:	b9001917 	ldw	r4,100(r23)
  2040cc:	00f7ffc4 	movi	r3,-8193
  2040d0:	10880014 	ori	r2,r2,8192
  2040d4:	20c6703a 	and	r3,r4,r3
  2040d8:	b880030d 	sth	r2,12(r23)
  2040dc:	b8c01915 	stw	r3,100(r23)
  2040e0:	10c0020c 	andi	r3,r2,8
  2040e4:	1800c326 	beq	r3,zero,2043f4 <___vfprintf_internal_r+0x39c>
  2040e8:	b8c00417 	ldw	r3,16(r23)
  2040ec:	1800c126 	beq	r3,zero,2043f4 <___vfprintf_internal_r+0x39c>
  2040f0:	1080068c 	andi	r2,r2,26
  2040f4:	00c00284 	movi	r3,10
  2040f8:	10c0c626 	beq	r2,r3,204414 <___vfprintf_internal_r+0x3bc>
  2040fc:	d8c00404 	addi	r3,sp,16
  204100:	05000874 	movhi	r20,33
  204104:	d9001e04 	addi	r4,sp,120
  204108:	a51b1584 	addi	r20,r20,27734
  20410c:	d8c01e15 	stw	r3,120(sp)
  204110:	d8002015 	stw	zero,128(sp)
  204114:	d8001f15 	stw	zero,124(sp)
  204118:	d8003315 	stw	zero,204(sp)
  20411c:	d8003615 	stw	zero,216(sp)
  204120:	d8003815 	stw	zero,224(sp)
  204124:	1811883a 	mov	r8,r3
  204128:	d8003915 	stw	zero,228(sp)
  20412c:	d8003a15 	stw	zero,232(sp)
  204130:	d8002f15 	stw	zero,188(sp)
  204134:	d9002815 	stw	r4,160(sp)
  204138:	a8800007 	ldb	r2,0(r21)
  20413c:	10028b26 	beq	r2,zero,204b6c <___vfprintf_internal_r+0xb14>
  204140:	00c00944 	movi	r3,37
  204144:	a823883a 	mov	r17,r21
  204148:	10c0021e 	bne	r2,r3,204154 <___vfprintf_internal_r+0xfc>
  20414c:	00001406 	br	2041a0 <___vfprintf_internal_r+0x148>
  204150:	10c00326 	beq	r2,r3,204160 <___vfprintf_internal_r+0x108>
  204154:	8c400044 	addi	r17,r17,1
  204158:	88800007 	ldb	r2,0(r17)
  20415c:	103ffc1e 	bne	r2,zero,204150 <_gp+0xffdf253c>
  204160:	8d61c83a 	sub	r16,r17,r21
  204164:	80000e26 	beq	r16,zero,2041a0 <___vfprintf_internal_r+0x148>
  204168:	d8c02017 	ldw	r3,128(sp)
  20416c:	d8801f17 	ldw	r2,124(sp)
  204170:	45400015 	stw	r21,0(r8)
  204174:	1c07883a 	add	r3,r3,r16
  204178:	10800044 	addi	r2,r2,1
  20417c:	d8c02015 	stw	r3,128(sp)
  204180:	44000115 	stw	r16,4(r8)
  204184:	d8801f15 	stw	r2,124(sp)
  204188:	00c001c4 	movi	r3,7
  20418c:	1880a916 	blt	r3,r2,204434 <___vfprintf_internal_r+0x3dc>
  204190:	42000204 	addi	r8,r8,8
  204194:	d9402f17 	ldw	r5,188(sp)
  204198:	2c0b883a 	add	r5,r5,r16
  20419c:	d9402f15 	stw	r5,188(sp)
  2041a0:	88800007 	ldb	r2,0(r17)
  2041a4:	1000aa26 	beq	r2,zero,204450 <___vfprintf_internal_r+0x3f8>
  2041a8:	8d400044 	addi	r21,r17,1
  2041ac:	8c400047 	ldb	r17,1(r17)
  2041b0:	0021883a 	mov	r16,zero
  2041b4:	00bfffc4 	movi	r2,-1
  2041b8:	0025883a 	mov	r18,zero
  2041bc:	dc002905 	stb	r16,164(sp)
  2041c0:	d8002785 	stb	zero,158(sp)
  2041c4:	d8002b05 	stb	zero,172(sp)
  2041c8:	d8802a15 	stw	r2,168(sp)
  2041cc:	d8003115 	stw	zero,196(sp)
  2041d0:	04c01604 	movi	r19,88
  2041d4:	05800244 	movi	r22,9
  2041d8:	9021883a 	mov	r16,r18
  2041dc:	4039883a 	mov	fp,r8
  2041e0:	ad400044 	addi	r21,r21,1
  2041e4:	88bff804 	addi	r2,r17,-32
  2041e8:	98833236 	bltu	r19,r2,204eb4 <___vfprintf_internal_r+0xe5c>
  2041ec:	100490ba 	slli	r2,r2,2
  2041f0:	00c00834 	movhi	r3,32
  2041f4:	18d08104 	addi	r3,r3,16900
  2041f8:	10c5883a 	add	r2,r2,r3
  2041fc:	10800017 	ldw	r2,0(r2)
  204200:	1000683a 	jmp	r2
  204204:	00204dac 	andhi	zero,zero,33078
  204208:	00204eb4 	movhi	zero,33082
  20420c:	00204eb4 	movhi	zero,33082
  204210:	00204dcc 	andi	zero,zero,33079
  204214:	00204eb4 	movhi	zero,33082
  204218:	00204eb4 	movhi	zero,33082
  20421c:	00204eb4 	movhi	zero,33082
  204220:	00204eb4 	movhi	zero,33082
  204224:	00204eb4 	movhi	zero,33082
  204228:	00204eb4 	movhi	zero,33082
  20422c:	002044b4 	movhi	zero,33042
  204230:	00204cbc 	xorhi	zero,zero,33074
  204234:	00204eb4 	movhi	zero,33082
  204238:	00204378 	rdprs	zero,zero,-32499
  20423c:	002044d8 	cmpnei	zero,zero,-32493
  204240:	00204eb4 	movhi	zero,33082
  204244:	00204528 	cmpgeui	zero,zero,33044
  204248:	00204534 	movhi	zero,33044
  20424c:	00204534 	movhi	zero,33044
  204250:	00204534 	movhi	zero,33044
  204254:	00204534 	movhi	zero,33044
  204258:	00204534 	movhi	zero,33044
  20425c:	00204534 	movhi	zero,33044
  204260:	00204534 	movhi	zero,33044
  204264:	00204534 	movhi	zero,33044
  204268:	00204534 	movhi	zero,33044
  20426c:	00204eb4 	movhi	zero,33082
  204270:	00204eb4 	movhi	zero,33082
  204274:	00204eb4 	movhi	zero,33082
  204278:	00204eb4 	movhi	zero,33082
  20427c:	00204eb4 	movhi	zero,33082
  204280:	00204eb4 	movhi	zero,33082
  204284:	00204eb4 	movhi	zero,33082
  204288:	00204eb4 	movhi	zero,33082
  20428c:	00204eb4 	movhi	zero,33082
  204290:	00204eb4 	movhi	zero,33082
  204294:	00204570 	cmpltui	zero,zero,33045
  204298:	00204638 	rdprs	zero,zero,-32488
  20429c:	00204eb4 	movhi	zero,33082
  2042a0:	00204638 	rdprs	zero,zero,-32488
  2042a4:	00204eb4 	movhi	zero,33082
  2042a8:	00204eb4 	movhi	zero,33082
  2042ac:	00204eb4 	movhi	zero,33082
  2042b0:	00204eb4 	movhi	zero,33082
  2042b4:	002046e4 	muli	zero,zero,-32485
  2042b8:	00204eb4 	movhi	zero,33082
  2042bc:	00204eb4 	movhi	zero,33082
  2042c0:	002046f0 	cmpltui	zero,zero,33051
  2042c4:	00204eb4 	movhi	zero,33082
  2042c8:	00204eb4 	movhi	zero,33082
  2042cc:	00204eb4 	movhi	zero,33082
  2042d0:	00204eb4 	movhi	zero,33082
  2042d4:	00204eb4 	movhi	zero,33082
  2042d8:	00204b74 	movhi	zero,33069
  2042dc:	00204eb4 	movhi	zero,33082
  2042e0:	00204eb4 	movhi	zero,33082
  2042e4:	00204be0 	cmpeqi	zero,zero,-32465
  2042e8:	00204eb4 	movhi	zero,33082
  2042ec:	00204eb4 	movhi	zero,33082
  2042f0:	00204eb4 	movhi	zero,33082
  2042f4:	00204eb4 	movhi	zero,33082
  2042f8:	00204eb4 	movhi	zero,33082
  2042fc:	00204eb4 	movhi	zero,33082
  204300:	00204eb4 	movhi	zero,33082
  204304:	00204eb4 	movhi	zero,33082
  204308:	00204eb4 	movhi	zero,33082
  20430c:	00204eb4 	movhi	zero,33082
  204310:	00204e58 	cmpnei	zero,zero,-32455
  204314:	00204dd8 	cmpnei	zero,zero,-32457
  204318:	00204638 	rdprs	zero,zero,-32488
  20431c:	00204638 	rdprs	zero,zero,-32488
  204320:	00204638 	rdprs	zero,zero,-32488
  204324:	00204df8 	rdprs	zero,zero,-32457
  204328:	00204dd8 	cmpnei	zero,zero,-32457
  20432c:	00204eb4 	movhi	zero,33082
  204330:	00204eb4 	movhi	zero,33082
  204334:	00204e04 	movi	zero,-32456
  204338:	00204eb4 	movhi	zero,33082
  20433c:	00204e18 	cmpnei	zero,zero,-32456
  204340:	00204c9c 	xori	zero,zero,33074
  204344:	00204384 	movi	zero,-32498
  204348:	00204cd4 	movui	zero,33075
  20434c:	00204eb4 	movhi	zero,33082
  204350:	00204ce0 	cmpeqi	zero,zero,-32461
  204354:	00204eb4 	movhi	zero,33082
  204358:	00204d44 	movi	zero,-32459
  20435c:	00204eb4 	movhi	zero,33082
  204360:	00204eb4 	movhi	zero,33082
  204364:	00204d64 	muli	zero,zero,-32459
  204368:	d8c03117 	ldw	r3,196(sp)
  20436c:	d8802e15 	stw	r2,184(sp)
  204370:	00c7c83a 	sub	r3,zero,r3
  204374:	d8c03115 	stw	r3,196(sp)
  204378:	84000114 	ori	r16,r16,4
  20437c:	ac400007 	ldb	r17,0(r21)
  204380:	003f9706 	br	2041e0 <_gp+0xffdf25cc>
  204384:	00800c04 	movi	r2,48
  204388:	d8802705 	stb	r2,156(sp)
  20438c:	00801e04 	movi	r2,120
  204390:	d8802745 	stb	r2,157(sp)
  204394:	d9002a17 	ldw	r4,168(sp)
  204398:	d8802e17 	ldw	r2,184(sp)
  20439c:	d8002785 	stb	zero,158(sp)
  2043a0:	e011883a 	mov	r8,fp
  2043a4:	10c00104 	addi	r3,r2,4
  2043a8:	14c00017 	ldw	r19,0(r2)
  2043ac:	002d883a 	mov	r22,zero
  2043b0:	80800094 	ori	r2,r16,2
  2043b4:	2002ca16 	blt	r4,zero,204ee0 <___vfprintf_internal_r+0xe88>
  2043b8:	00bfdfc4 	movi	r2,-129
  2043bc:	80a4703a 	and	r18,r16,r2
  2043c0:	d8c02e15 	stw	r3,184(sp)
  2043c4:	94800094 	ori	r18,r18,2
  2043c8:	9802b41e 	bne	r19,zero,204e9c <___vfprintf_internal_r+0xe44>
  2043cc:	01400874 	movhi	r5,33
  2043d0:	295b0e04 	addi	r5,r5,27704
  2043d4:	d9403915 	stw	r5,228(sp)
  2043d8:	04401e04 	movi	r17,120
  2043dc:	d8802a17 	ldw	r2,168(sp)
  2043e0:	0039883a 	mov	fp,zero
  2043e4:	1001fa26 	beq	r2,zero,204bd0 <___vfprintf_internal_r+0xb78>
  2043e8:	0027883a 	mov	r19,zero
  2043ec:	002d883a 	mov	r22,zero
  2043f0:	00021906 	br	204c58 <___vfprintf_internal_r+0xc00>
  2043f4:	d9002d17 	ldw	r4,180(sp)
  2043f8:	b80b883a 	mov	r5,r23
  2043fc:	020640c0 	call	20640c <__swsetup_r>
  204400:	1005dc1e 	bne	r2,zero,205b74 <___vfprintf_internal_r+0x1b1c>
  204404:	b880030b 	ldhu	r2,12(r23)
  204408:	00c00284 	movi	r3,10
  20440c:	1080068c 	andi	r2,r2,26
  204410:	10ff3a1e 	bne	r2,r3,2040fc <_gp+0xffdf24e8>
  204414:	b880038f 	ldh	r2,14(r23)
  204418:	103f3816 	blt	r2,zero,2040fc <_gp+0xffdf24e8>
  20441c:	d9c02e17 	ldw	r7,184(sp)
  204420:	d9002d17 	ldw	r4,180(sp)
  204424:	a80d883a 	mov	r6,r21
  204428:	b80b883a 	mov	r5,r23
  20442c:	02063500 	call	206350 <__sbprintf>
  204430:	00001106 	br	204478 <___vfprintf_internal_r+0x420>
  204434:	d9002d17 	ldw	r4,180(sp)
  204438:	d9801e04 	addi	r6,sp,120
  20443c:	b80b883a 	mov	r5,r23
  204440:	020b9a00 	call	20b9a0 <__sprint_r>
  204444:	1000081e 	bne	r2,zero,204468 <___vfprintf_internal_r+0x410>
  204448:	da000404 	addi	r8,sp,16
  20444c:	003f5106 	br	204194 <_gp+0xffdf2580>
  204450:	d8802017 	ldw	r2,128(sp)
  204454:	10000426 	beq	r2,zero,204468 <___vfprintf_internal_r+0x410>
  204458:	d9002d17 	ldw	r4,180(sp)
  20445c:	d9801e04 	addi	r6,sp,120
  204460:	b80b883a 	mov	r5,r23
  204464:	020b9a00 	call	20b9a0 <__sprint_r>
  204468:	b880030b 	ldhu	r2,12(r23)
  20446c:	1080100c 	andi	r2,r2,64
  204470:	1005c01e 	bne	r2,zero,205b74 <___vfprintf_internal_r+0x1b1c>
  204474:	d8802f17 	ldw	r2,188(sp)
  204478:	dfc04717 	ldw	ra,284(sp)
  20447c:	df004617 	ldw	fp,280(sp)
  204480:	ddc04517 	ldw	r23,276(sp)
  204484:	dd804417 	ldw	r22,272(sp)
  204488:	dd404317 	ldw	r21,268(sp)
  20448c:	dd004217 	ldw	r20,264(sp)
  204490:	dcc04117 	ldw	r19,260(sp)
  204494:	dc804017 	ldw	r18,256(sp)
  204498:	dc403f17 	ldw	r17,252(sp)
  20449c:	dc003e17 	ldw	r16,248(sp)
  2044a0:	dec04804 	addi	sp,sp,288
  2044a4:	f800283a 	ret
  2044a8:	d9002d17 	ldw	r4,180(sp)
  2044ac:	02084180 	call	208418 <__sinit>
  2044b0:	003f0206 	br	2040bc <_gp+0xffdf24a8>
  2044b4:	d9002e17 	ldw	r4,184(sp)
  2044b8:	d9402e17 	ldw	r5,184(sp)
  2044bc:	21000017 	ldw	r4,0(r4)
  2044c0:	28800104 	addi	r2,r5,4
  2044c4:	d9003115 	stw	r4,196(sp)
  2044c8:	203fa716 	blt	r4,zero,204368 <_gp+0xffdf2754>
  2044cc:	d8802e15 	stw	r2,184(sp)
  2044d0:	ac400007 	ldb	r17,0(r21)
  2044d4:	003f4206 	br	2041e0 <_gp+0xffdf25cc>
  2044d8:	ac400007 	ldb	r17,0(r21)
  2044dc:	01000a84 	movi	r4,42
  2044e0:	a8c00044 	addi	r3,r21,1
  2044e4:	89075826 	beq	r17,r4,206248 <___vfprintf_internal_r+0x21f0>
  2044e8:	8cbff404 	addi	r18,r17,-48
  2044ec:	b486ae36 	bltu	r22,r18,205fa8 <___vfprintf_internal_r+0x1f50>
  2044f0:	0009883a 	mov	r4,zero
  2044f4:	1823883a 	mov	r17,r3
  2044f8:	01400284 	movi	r5,10
  2044fc:	02032a40 	call	2032a4 <__mulsi3>
  204500:	88c00007 	ldb	r3,0(r17)
  204504:	1489883a 	add	r4,r2,r18
  204508:	8d400044 	addi	r21,r17,1
  20450c:	1cbff404 	addi	r18,r3,-48
  204510:	a823883a 	mov	r17,r21
  204514:	b4bff82e 	bgeu	r22,r18,2044f8 <_gp+0xffdf28e4>
  204518:	1823883a 	mov	r17,r3
  20451c:	2005f616 	blt	r4,zero,205cf8 <___vfprintf_internal_r+0x1ca0>
  204520:	d9002a15 	stw	r4,168(sp)
  204524:	003f2f06 	br	2041e4 <_gp+0xffdf25d0>
  204528:	84002014 	ori	r16,r16,128
  20452c:	ac400007 	ldb	r17,0(r21)
  204530:	003f2b06 	br	2041e0 <_gp+0xffdf25cc>
  204534:	8cbff404 	addi	r18,r17,-48
  204538:	d8003115 	stw	zero,196(sp)
  20453c:	0009883a 	mov	r4,zero
  204540:	a823883a 	mov	r17,r21
  204544:	01400284 	movi	r5,10
  204548:	02032a40 	call	2032a4 <__mulsi3>
  20454c:	88c00007 	ldb	r3,0(r17)
  204550:	9089883a 	add	r4,r18,r2
  204554:	ad400044 	addi	r21,r21,1
  204558:	1cbff404 	addi	r18,r3,-48
  20455c:	a823883a 	mov	r17,r21
  204560:	b4bff82e 	bgeu	r22,r18,204544 <_gp+0xffdf2930>
  204564:	1823883a 	mov	r17,r3
  204568:	d9003115 	stw	r4,196(sp)
  20456c:	003f1d06 	br	2041e4 <_gp+0xffdf25d0>
  204570:	8025883a 	mov	r18,r16
  204574:	dc002903 	ldbu	r16,164(sp)
  204578:	e011883a 	mov	r8,fp
  20457c:	84003fcc 	andi	r16,r16,255
  204580:	8007531e 	bne	r16,zero,2062d0 <___vfprintf_internal_r+0x2278>
  204584:	94800414 	ori	r18,r18,16
  204588:	9080080c 	andi	r2,r18,32
  20458c:	1003a326 	beq	r2,zero,20541c <___vfprintf_internal_r+0x13c4>
  204590:	d9002e17 	ldw	r4,184(sp)
  204594:	20800117 	ldw	r2,4(r4)
  204598:	24c00017 	ldw	r19,0(r4)
  20459c:	21000204 	addi	r4,r4,8
  2045a0:	d9002e15 	stw	r4,184(sp)
  2045a4:	102d883a 	mov	r22,r2
  2045a8:	10047316 	blt	r2,zero,205778 <___vfprintf_internal_r+0x1720>
  2045ac:	d9002a17 	ldw	r4,168(sp)
  2045b0:	df002783 	ldbu	fp,158(sp)
  2045b4:	2003e416 	blt	r4,zero,205548 <___vfprintf_internal_r+0x14f0>
  2045b8:	00ffdfc4 	movi	r3,-129
  2045bc:	9d84b03a 	or	r2,r19,r22
  2045c0:	90e4703a 	and	r18,r18,r3
  2045c4:	10018026 	beq	r2,zero,204bc8 <___vfprintf_internal_r+0xb70>
  2045c8:	b003ab26 	beq	r22,zero,205478 <___vfprintf_internal_r+0x1420>
  2045cc:	dc402915 	stw	r17,164(sp)
  2045d0:	dc001e04 	addi	r16,sp,120
  2045d4:	b023883a 	mov	r17,r22
  2045d8:	402d883a 	mov	r22,r8
  2045dc:	9809883a 	mov	r4,r19
  2045e0:	880b883a 	mov	r5,r17
  2045e4:	01800284 	movi	r6,10
  2045e8:	000f883a 	mov	r7,zero
  2045ec:	020dee40 	call	20dee4 <__umoddi3>
  2045f0:	10800c04 	addi	r2,r2,48
  2045f4:	843fffc4 	addi	r16,r16,-1
  2045f8:	9809883a 	mov	r4,r19
  2045fc:	880b883a 	mov	r5,r17
  204600:	80800005 	stb	r2,0(r16)
  204604:	01800284 	movi	r6,10
  204608:	000f883a 	mov	r7,zero
  20460c:	020d8e80 	call	20d8e8 <__udivdi3>
  204610:	1027883a 	mov	r19,r2
  204614:	10c4b03a 	or	r2,r2,r3
  204618:	1823883a 	mov	r17,r3
  20461c:	103fef1e 	bne	r2,zero,2045dc <_gp+0xffdf29c8>
  204620:	d8c02817 	ldw	r3,160(sp)
  204624:	dc402917 	ldw	r17,164(sp)
  204628:	b011883a 	mov	r8,r22
  20462c:	1c07c83a 	sub	r3,r3,r16
  204630:	d8c02b15 	stw	r3,172(sp)
  204634:	00005f06 	br	2047b4 <___vfprintf_internal_r+0x75c>
  204638:	8025883a 	mov	r18,r16
  20463c:	dc002903 	ldbu	r16,164(sp)
  204640:	e011883a 	mov	r8,fp
  204644:	84003fcc 	andi	r16,r16,255
  204648:	80071e1e 	bne	r16,zero,2062c4 <___vfprintf_internal_r+0x226c>
  20464c:	9080020c 	andi	r2,r18,8
  204650:	1004af26 	beq	r2,zero,205910 <___vfprintf_internal_r+0x18b8>
  204654:	d9002e17 	ldw	r4,184(sp)
  204658:	d9402e17 	ldw	r5,184(sp)
  20465c:	d8802e17 	ldw	r2,184(sp)
  204660:	21000017 	ldw	r4,0(r4)
  204664:	29400117 	ldw	r5,4(r5)
  204668:	10800204 	addi	r2,r2,8
  20466c:	d9003615 	stw	r4,216(sp)
  204670:	d9403815 	stw	r5,224(sp)
  204674:	d8802e15 	stw	r2,184(sp)
  204678:	d9003617 	ldw	r4,216(sp)
  20467c:	d9403817 	ldw	r5,224(sp)
  204680:	da003d15 	stw	r8,244(sp)
  204684:	04000044 	movi	r16,1
  204688:	020b5c40 	call	20b5c4 <__fpclassifyd>
  20468c:	da003d17 	ldw	r8,244(sp)
  204690:	1404441e 	bne	r2,r16,2057a4 <___vfprintf_internal_r+0x174c>
  204694:	d9003617 	ldw	r4,216(sp)
  204698:	d9403817 	ldw	r5,224(sp)
  20469c:	000d883a 	mov	r6,zero
  2046a0:	000f883a 	mov	r7,zero
  2046a4:	020f8880 	call	20f888 <__ledf2>
  2046a8:	da003d17 	ldw	r8,244(sp)
  2046ac:	1005e316 	blt	r2,zero,205e3c <___vfprintf_internal_r+0x1de4>
  2046b0:	df002783 	ldbu	fp,158(sp)
  2046b4:	008011c4 	movi	r2,71
  2046b8:	1445580e 	bge	r2,r17,205c1c <___vfprintf_internal_r+0x1bc4>
  2046bc:	04000874 	movhi	r16,33
  2046c0:	841b0604 	addi	r16,r16,27672
  2046c4:	00c000c4 	movi	r3,3
  2046c8:	00bfdfc4 	movi	r2,-129
  2046cc:	d8c02915 	stw	r3,164(sp)
  2046d0:	90a4703a 	and	r18,r18,r2
  2046d4:	d8c02b15 	stw	r3,172(sp)
  2046d8:	d8002a15 	stw	zero,168(sp)
  2046dc:	d8003215 	stw	zero,200(sp)
  2046e0:	00003a06 	br	2047cc <___vfprintf_internal_r+0x774>
  2046e4:	84000214 	ori	r16,r16,8
  2046e8:	ac400007 	ldb	r17,0(r21)
  2046ec:	003ebc06 	br	2041e0 <_gp+0xffdf25cc>
  2046f0:	8025883a 	mov	r18,r16
  2046f4:	dc002903 	ldbu	r16,164(sp)
  2046f8:	e011883a 	mov	r8,fp
  2046fc:	84003fcc 	andi	r16,r16,255
  204700:	8007001e 	bne	r16,zero,206304 <___vfprintf_internal_r+0x22ac>
  204704:	94800414 	ori	r18,r18,16
  204708:	9080080c 	andi	r2,r18,32
  20470c:	1002fa26 	beq	r2,zero,2052f8 <___vfprintf_internal_r+0x12a0>
  204710:	d9002e17 	ldw	r4,184(sp)
  204714:	d9402a17 	ldw	r5,168(sp)
  204718:	d8002785 	stb	zero,158(sp)
  20471c:	20800204 	addi	r2,r4,8
  204720:	24c00017 	ldw	r19,0(r4)
  204724:	25800117 	ldw	r22,4(r4)
  204728:	2804b116 	blt	r5,zero,2059f0 <___vfprintf_internal_r+0x1998>
  20472c:	013fdfc4 	movi	r4,-129
  204730:	9d86b03a 	or	r3,r19,r22
  204734:	d8802e15 	stw	r2,184(sp)
  204738:	9124703a 	and	r18,r18,r4
  20473c:	1802fb1e 	bne	r3,zero,20532c <___vfprintf_internal_r+0x12d4>
  204740:	d8c02a17 	ldw	r3,168(sp)
  204744:	0039883a 	mov	fp,zero
  204748:	1805e526 	beq	r3,zero,205ee0 <___vfprintf_internal_r+0x1e88>
  20474c:	0027883a 	mov	r19,zero
  204750:	002d883a 	mov	r22,zero
  204754:	dc001e04 	addi	r16,sp,120
  204758:	9806d0fa 	srli	r3,r19,3
  20475c:	b008977a 	slli	r4,r22,29
  204760:	b02cd0fa 	srli	r22,r22,3
  204764:	9cc001cc 	andi	r19,r19,7
  204768:	98800c04 	addi	r2,r19,48
  20476c:	843fffc4 	addi	r16,r16,-1
  204770:	20e6b03a 	or	r19,r4,r3
  204774:	80800005 	stb	r2,0(r16)
  204778:	9d86b03a 	or	r3,r19,r22
  20477c:	183ff61e 	bne	r3,zero,204758 <_gp+0xffdf2b44>
  204780:	90c0004c 	andi	r3,r18,1
  204784:	18014126 	beq	r3,zero,204c8c <___vfprintf_internal_r+0xc34>
  204788:	10803fcc 	andi	r2,r2,255
  20478c:	1080201c 	xori	r2,r2,128
  204790:	10bfe004 	addi	r2,r2,-128
  204794:	00c00c04 	movi	r3,48
  204798:	10c13c26 	beq	r2,r3,204c8c <___vfprintf_internal_r+0xc34>
  20479c:	80ffffc5 	stb	r3,-1(r16)
  2047a0:	d8c02817 	ldw	r3,160(sp)
  2047a4:	80bfffc4 	addi	r2,r16,-1
  2047a8:	1021883a 	mov	r16,r2
  2047ac:	1887c83a 	sub	r3,r3,r2
  2047b0:	d8c02b15 	stw	r3,172(sp)
  2047b4:	d8802b17 	ldw	r2,172(sp)
  2047b8:	d9002a17 	ldw	r4,168(sp)
  2047bc:	1100010e 	bge	r2,r4,2047c4 <___vfprintf_internal_r+0x76c>
  2047c0:	2005883a 	mov	r2,r4
  2047c4:	d8802915 	stw	r2,164(sp)
  2047c8:	d8003215 	stw	zero,200(sp)
  2047cc:	e7003fcc 	andi	fp,fp,255
  2047d0:	e700201c 	xori	fp,fp,128
  2047d4:	e73fe004 	addi	fp,fp,-128
  2047d8:	e0000326 	beq	fp,zero,2047e8 <___vfprintf_internal_r+0x790>
  2047dc:	d8c02917 	ldw	r3,164(sp)
  2047e0:	18c00044 	addi	r3,r3,1
  2047e4:	d8c02915 	stw	r3,164(sp)
  2047e8:	90c0008c 	andi	r3,r18,2
  2047ec:	d8c02c15 	stw	r3,176(sp)
  2047f0:	18000326 	beq	r3,zero,204800 <___vfprintf_internal_r+0x7a8>
  2047f4:	d8c02917 	ldw	r3,164(sp)
  2047f8:	18c00084 	addi	r3,r3,2
  2047fc:	d8c02915 	stw	r3,164(sp)
  204800:	90c0210c 	andi	r3,r18,132
  204804:	d8c03015 	stw	r3,192(sp)
  204808:	1801c51e 	bne	r3,zero,204f20 <___vfprintf_internal_r+0xec8>
  20480c:	d9003117 	ldw	r4,196(sp)
  204810:	d8c02917 	ldw	r3,164(sp)
  204814:	20e7c83a 	sub	r19,r4,r3
  204818:	04c1c10e 	bge	zero,r19,204f20 <___vfprintf_internal_r+0xec8>
  20481c:	02400404 	movi	r9,16
  204820:	d8c02017 	ldw	r3,128(sp)
  204824:	d8801f17 	ldw	r2,124(sp)
  204828:	4cc52f0e 	bge	r9,r19,205ce8 <___vfprintf_internal_r+0x1c90>
  20482c:	01400874 	movhi	r5,33
  204830:	295b1984 	addi	r5,r5,27750
  204834:	dc403b15 	stw	r17,236(sp)
  204838:	d9403515 	stw	r5,212(sp)
  20483c:	9823883a 	mov	r17,r19
  204840:	482d883a 	mov	r22,r9
  204844:	9027883a 	mov	r19,r18
  204848:	070001c4 	movi	fp,7
  20484c:	8025883a 	mov	r18,r16
  204850:	dc002d17 	ldw	r16,180(sp)
  204854:	00000306 	br	204864 <___vfprintf_internal_r+0x80c>
  204858:	8c7ffc04 	addi	r17,r17,-16
  20485c:	42000204 	addi	r8,r8,8
  204860:	b440130e 	bge	r22,r17,2048b0 <___vfprintf_internal_r+0x858>
  204864:	01000874 	movhi	r4,33
  204868:	18c00404 	addi	r3,r3,16
  20486c:	10800044 	addi	r2,r2,1
  204870:	211b1984 	addi	r4,r4,27750
  204874:	41000015 	stw	r4,0(r8)
  204878:	45800115 	stw	r22,4(r8)
  20487c:	d8c02015 	stw	r3,128(sp)
  204880:	d8801f15 	stw	r2,124(sp)
  204884:	e0bff40e 	bge	fp,r2,204858 <_gp+0xffdf2c44>
  204888:	d9801e04 	addi	r6,sp,120
  20488c:	b80b883a 	mov	r5,r23
  204890:	8009883a 	mov	r4,r16
  204894:	020b9a00 	call	20b9a0 <__sprint_r>
  204898:	103ef31e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20489c:	8c7ffc04 	addi	r17,r17,-16
  2048a0:	d8c02017 	ldw	r3,128(sp)
  2048a4:	d8801f17 	ldw	r2,124(sp)
  2048a8:	da000404 	addi	r8,sp,16
  2048ac:	b47fed16 	blt	r22,r17,204864 <_gp+0xffdf2c50>
  2048b0:	9021883a 	mov	r16,r18
  2048b4:	9825883a 	mov	r18,r19
  2048b8:	8827883a 	mov	r19,r17
  2048bc:	dc403b17 	ldw	r17,236(sp)
  2048c0:	d9403517 	ldw	r5,212(sp)
  2048c4:	98c7883a 	add	r3,r19,r3
  2048c8:	10800044 	addi	r2,r2,1
  2048cc:	41400015 	stw	r5,0(r8)
  2048d0:	44c00115 	stw	r19,4(r8)
  2048d4:	d8c02015 	stw	r3,128(sp)
  2048d8:	d8801f15 	stw	r2,124(sp)
  2048dc:	010001c4 	movi	r4,7
  2048e0:	2082c516 	blt	r4,r2,2053f8 <___vfprintf_internal_r+0x13a0>
  2048e4:	df002787 	ldb	fp,158(sp)
  2048e8:	42000204 	addi	r8,r8,8
  2048ec:	e0000c26 	beq	fp,zero,204920 <___vfprintf_internal_r+0x8c8>
  2048f0:	d8801f17 	ldw	r2,124(sp)
  2048f4:	d9002784 	addi	r4,sp,158
  2048f8:	18c00044 	addi	r3,r3,1
  2048fc:	10800044 	addi	r2,r2,1
  204900:	41000015 	stw	r4,0(r8)
  204904:	01000044 	movi	r4,1
  204908:	41000115 	stw	r4,4(r8)
  20490c:	d8c02015 	stw	r3,128(sp)
  204910:	d8801f15 	stw	r2,124(sp)
  204914:	010001c4 	movi	r4,7
  204918:	20825e16 	blt	r4,r2,205294 <___vfprintf_internal_r+0x123c>
  20491c:	42000204 	addi	r8,r8,8
  204920:	d8802c17 	ldw	r2,176(sp)
  204924:	10000c26 	beq	r2,zero,204958 <___vfprintf_internal_r+0x900>
  204928:	d8801f17 	ldw	r2,124(sp)
  20492c:	d9002704 	addi	r4,sp,156
  204930:	18c00084 	addi	r3,r3,2
  204934:	10800044 	addi	r2,r2,1
  204938:	41000015 	stw	r4,0(r8)
  20493c:	01000084 	movi	r4,2
  204940:	41000115 	stw	r4,4(r8)
  204944:	d8c02015 	stw	r3,128(sp)
  204948:	d8801f15 	stw	r2,124(sp)
  20494c:	010001c4 	movi	r4,7
  204950:	20825816 	blt	r4,r2,2052b4 <___vfprintf_internal_r+0x125c>
  204954:	42000204 	addi	r8,r8,8
  204958:	d9003017 	ldw	r4,192(sp)
  20495c:	00802004 	movi	r2,128
  204960:	2081bb26 	beq	r4,r2,205050 <___vfprintf_internal_r+0xff8>
  204964:	d9402a17 	ldw	r5,168(sp)
  204968:	d8802b17 	ldw	r2,172(sp)
  20496c:	28adc83a 	sub	r22,r5,r2
  204970:	0580310e 	bge	zero,r22,204a38 <___vfprintf_internal_r+0x9e0>
  204974:	07000404 	movi	fp,16
  204978:	d8801f17 	ldw	r2,124(sp)
  20497c:	e584360e 	bge	fp,r22,205a58 <___vfprintf_internal_r+0x1a00>
  204980:	01400874 	movhi	r5,33
  204984:	295b1584 	addi	r5,r5,27734
  204988:	dc402a15 	stw	r17,168(sp)
  20498c:	d9402c15 	stw	r5,176(sp)
  204990:	b023883a 	mov	r17,r22
  204994:	04c001c4 	movi	r19,7
  204998:	a82d883a 	mov	r22,r21
  20499c:	902b883a 	mov	r21,r18
  2049a0:	8025883a 	mov	r18,r16
  2049a4:	dc002d17 	ldw	r16,180(sp)
  2049a8:	00000306 	br	2049b8 <___vfprintf_internal_r+0x960>
  2049ac:	8c7ffc04 	addi	r17,r17,-16
  2049b0:	42000204 	addi	r8,r8,8
  2049b4:	e440110e 	bge	fp,r17,2049fc <___vfprintf_internal_r+0x9a4>
  2049b8:	18c00404 	addi	r3,r3,16
  2049bc:	10800044 	addi	r2,r2,1
  2049c0:	45000015 	stw	r20,0(r8)
  2049c4:	47000115 	stw	fp,4(r8)
  2049c8:	d8c02015 	stw	r3,128(sp)
  2049cc:	d8801f15 	stw	r2,124(sp)
  2049d0:	98bff60e 	bge	r19,r2,2049ac <_gp+0xffdf2d98>
  2049d4:	d9801e04 	addi	r6,sp,120
  2049d8:	b80b883a 	mov	r5,r23
  2049dc:	8009883a 	mov	r4,r16
  2049e0:	020b9a00 	call	20b9a0 <__sprint_r>
  2049e4:	103ea01e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2049e8:	8c7ffc04 	addi	r17,r17,-16
  2049ec:	d8c02017 	ldw	r3,128(sp)
  2049f0:	d8801f17 	ldw	r2,124(sp)
  2049f4:	da000404 	addi	r8,sp,16
  2049f8:	e47fef16 	blt	fp,r17,2049b8 <_gp+0xffdf2da4>
  2049fc:	9021883a 	mov	r16,r18
  204a00:	a825883a 	mov	r18,r21
  204a04:	b02b883a 	mov	r21,r22
  204a08:	882d883a 	mov	r22,r17
  204a0c:	dc402a17 	ldw	r17,168(sp)
  204a10:	d9002c17 	ldw	r4,176(sp)
  204a14:	1d87883a 	add	r3,r3,r22
  204a18:	10800044 	addi	r2,r2,1
  204a1c:	41000015 	stw	r4,0(r8)
  204a20:	45800115 	stw	r22,4(r8)
  204a24:	d8c02015 	stw	r3,128(sp)
  204a28:	d8801f15 	stw	r2,124(sp)
  204a2c:	010001c4 	movi	r4,7
  204a30:	20821016 	blt	r4,r2,205274 <___vfprintf_internal_r+0x121c>
  204a34:	42000204 	addi	r8,r8,8
  204a38:	9080400c 	andi	r2,r18,256
  204a3c:	10013a1e 	bne	r2,zero,204f28 <___vfprintf_internal_r+0xed0>
  204a40:	d9402b17 	ldw	r5,172(sp)
  204a44:	d8801f17 	ldw	r2,124(sp)
  204a48:	44000015 	stw	r16,0(r8)
  204a4c:	1947883a 	add	r3,r3,r5
  204a50:	10800044 	addi	r2,r2,1
  204a54:	41400115 	stw	r5,4(r8)
  204a58:	d8c02015 	stw	r3,128(sp)
  204a5c:	d8801f15 	stw	r2,124(sp)
  204a60:	010001c4 	movi	r4,7
  204a64:	2081f516 	blt	r4,r2,20523c <___vfprintf_internal_r+0x11e4>
  204a68:	42000204 	addi	r8,r8,8
  204a6c:	9480010c 	andi	r18,r18,4
  204a70:	90003226 	beq	r18,zero,204b3c <___vfprintf_internal_r+0xae4>
  204a74:	d9403117 	ldw	r5,196(sp)
  204a78:	d8802917 	ldw	r2,164(sp)
  204a7c:	28a1c83a 	sub	r16,r5,r2
  204a80:	04002e0e 	bge	zero,r16,204b3c <___vfprintf_internal_r+0xae4>
  204a84:	04400404 	movi	r17,16
  204a88:	d8801f17 	ldw	r2,124(sp)
  204a8c:	8c04c40e 	bge	r17,r16,205da0 <___vfprintf_internal_r+0x1d48>
  204a90:	01400874 	movhi	r5,33
  204a94:	295b1984 	addi	r5,r5,27750
  204a98:	d9403515 	stw	r5,212(sp)
  204a9c:	048001c4 	movi	r18,7
  204aa0:	dcc02d17 	ldw	r19,180(sp)
  204aa4:	00000306 	br	204ab4 <___vfprintf_internal_r+0xa5c>
  204aa8:	843ffc04 	addi	r16,r16,-16
  204aac:	42000204 	addi	r8,r8,8
  204ab0:	8c00130e 	bge	r17,r16,204b00 <___vfprintf_internal_r+0xaa8>
  204ab4:	01000874 	movhi	r4,33
  204ab8:	18c00404 	addi	r3,r3,16
  204abc:	10800044 	addi	r2,r2,1
  204ac0:	211b1984 	addi	r4,r4,27750
  204ac4:	41000015 	stw	r4,0(r8)
  204ac8:	44400115 	stw	r17,4(r8)
  204acc:	d8c02015 	stw	r3,128(sp)
  204ad0:	d8801f15 	stw	r2,124(sp)
  204ad4:	90bff40e 	bge	r18,r2,204aa8 <_gp+0xffdf2e94>
  204ad8:	d9801e04 	addi	r6,sp,120
  204adc:	b80b883a 	mov	r5,r23
  204ae0:	9809883a 	mov	r4,r19
  204ae4:	020b9a00 	call	20b9a0 <__sprint_r>
  204ae8:	103e5f1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  204aec:	843ffc04 	addi	r16,r16,-16
  204af0:	d8c02017 	ldw	r3,128(sp)
  204af4:	d8801f17 	ldw	r2,124(sp)
  204af8:	da000404 	addi	r8,sp,16
  204afc:	8c3fed16 	blt	r17,r16,204ab4 <_gp+0xffdf2ea0>
  204b00:	d9403517 	ldw	r5,212(sp)
  204b04:	1c07883a 	add	r3,r3,r16
  204b08:	10800044 	addi	r2,r2,1
  204b0c:	41400015 	stw	r5,0(r8)
  204b10:	44000115 	stw	r16,4(r8)
  204b14:	d8c02015 	stw	r3,128(sp)
  204b18:	d8801f15 	stw	r2,124(sp)
  204b1c:	010001c4 	movi	r4,7
  204b20:	2080060e 	bge	r4,r2,204b3c <___vfprintf_internal_r+0xae4>
  204b24:	d9002d17 	ldw	r4,180(sp)
  204b28:	d9801e04 	addi	r6,sp,120
  204b2c:	b80b883a 	mov	r5,r23
  204b30:	020b9a00 	call	20b9a0 <__sprint_r>
  204b34:	103e4c1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  204b38:	d8c02017 	ldw	r3,128(sp)
  204b3c:	d8803117 	ldw	r2,196(sp)
  204b40:	d9002917 	ldw	r4,164(sp)
  204b44:	1100010e 	bge	r2,r4,204b4c <___vfprintf_internal_r+0xaf4>
  204b48:	2005883a 	mov	r2,r4
  204b4c:	d9402f17 	ldw	r5,188(sp)
  204b50:	288b883a 	add	r5,r5,r2
  204b54:	d9402f15 	stw	r5,188(sp)
  204b58:	1801c01e 	bne	r3,zero,20525c <___vfprintf_internal_r+0x1204>
  204b5c:	a8800007 	ldb	r2,0(r21)
  204b60:	d8001f15 	stw	zero,124(sp)
  204b64:	da000404 	addi	r8,sp,16
  204b68:	103d751e 	bne	r2,zero,204140 <_gp+0xffdf252c>
  204b6c:	a823883a 	mov	r17,r21
  204b70:	003d8b06 	br	2041a0 <_gp+0xffdf258c>
  204b74:	8025883a 	mov	r18,r16
  204b78:	dc002903 	ldbu	r16,164(sp)
  204b7c:	e011883a 	mov	r8,fp
  204b80:	84003fcc 	andi	r16,r16,255
  204b84:	8005e51e 	bne	r16,zero,20631c <___vfprintf_internal_r+0x22c4>
  204b88:	94800414 	ori	r18,r18,16
  204b8c:	9080080c 	andi	r2,r18,32
  204b90:	10022b26 	beq	r2,zero,205440 <___vfprintf_internal_r+0x13e8>
  204b94:	d9002e17 	ldw	r4,184(sp)
  204b98:	d9402a17 	ldw	r5,168(sp)
  204b9c:	d8002785 	stb	zero,158(sp)
  204ba0:	20c00204 	addi	r3,r4,8
  204ba4:	24c00017 	ldw	r19,0(r4)
  204ba8:	25800117 	ldw	r22,4(r4)
  204bac:	28042e16 	blt	r5,zero,205c68 <___vfprintf_internal_r+0x1c10>
  204bb0:	013fdfc4 	movi	r4,-129
  204bb4:	9d84b03a 	or	r2,r19,r22
  204bb8:	d8c02e15 	stw	r3,184(sp)
  204bbc:	9124703a 	and	r18,r18,r4
  204bc0:	0039883a 	mov	fp,zero
  204bc4:	103e801e 	bne	r2,zero,2045c8 <_gp+0xffdf29b4>
  204bc8:	d9002a17 	ldw	r4,168(sp)
  204bcc:	2002e01e 	bne	r4,zero,205750 <___vfprintf_internal_r+0x16f8>
  204bd0:	d8002a15 	stw	zero,168(sp)
  204bd4:	d8002b15 	stw	zero,172(sp)
  204bd8:	dc001e04 	addi	r16,sp,120
  204bdc:	003ef506 	br	2047b4 <_gp+0xffdf2ba0>
  204be0:	8025883a 	mov	r18,r16
  204be4:	dc002903 	ldbu	r16,164(sp)
  204be8:	e011883a 	mov	r8,fp
  204bec:	84003fcc 	andi	r16,r16,255
  204bf0:	8005ba1e 	bne	r16,zero,2062dc <___vfprintf_internal_r+0x2284>
  204bf4:	01000874 	movhi	r4,33
  204bf8:	211b0904 	addi	r4,r4,27684
  204bfc:	d9003915 	stw	r4,228(sp)
  204c00:	9080080c 	andi	r2,r18,32
  204c04:	10006126 	beq	r2,zero,204d8c <___vfprintf_internal_r+0xd34>
  204c08:	d9402e17 	ldw	r5,184(sp)
  204c0c:	2cc00017 	ldw	r19,0(r5)
  204c10:	2d800117 	ldw	r22,4(r5)
  204c14:	29400204 	addi	r5,r5,8
  204c18:	d9402e15 	stw	r5,184(sp)
  204c1c:	9080004c 	andi	r2,r18,1
  204c20:	1001ac26 	beq	r2,zero,2052d4 <___vfprintf_internal_r+0x127c>
  204c24:	9d84b03a 	or	r2,r19,r22
  204c28:	10038526 	beq	r2,zero,205a40 <___vfprintf_internal_r+0x19e8>
  204c2c:	d8c02a17 	ldw	r3,168(sp)
  204c30:	00800c04 	movi	r2,48
  204c34:	d8802705 	stb	r2,156(sp)
  204c38:	dc402745 	stb	r17,157(sp)
  204c3c:	d8002785 	stb	zero,158(sp)
  204c40:	90800094 	ori	r2,r18,2
  204c44:	18047916 	blt	r3,zero,205e2c <___vfprintf_internal_r+0x1dd4>
  204c48:	00bfdfc4 	movi	r2,-129
  204c4c:	90a4703a 	and	r18,r18,r2
  204c50:	94800094 	ori	r18,r18,2
  204c54:	0039883a 	mov	fp,zero
  204c58:	d9003917 	ldw	r4,228(sp)
  204c5c:	dc001e04 	addi	r16,sp,120
  204c60:	988003cc 	andi	r2,r19,15
  204c64:	b006973a 	slli	r3,r22,28
  204c68:	2085883a 	add	r2,r4,r2
  204c6c:	9826d13a 	srli	r19,r19,4
  204c70:	10800003 	ldbu	r2,0(r2)
  204c74:	b02cd13a 	srli	r22,r22,4
  204c78:	843fffc4 	addi	r16,r16,-1
  204c7c:	1ce6b03a 	or	r19,r3,r19
  204c80:	80800005 	stb	r2,0(r16)
  204c84:	9d84b03a 	or	r2,r19,r22
  204c88:	103ff51e 	bne	r2,zero,204c60 <_gp+0xffdf304c>
  204c8c:	d8c02817 	ldw	r3,160(sp)
  204c90:	1c07c83a 	sub	r3,r3,r16
  204c94:	d8c02b15 	stw	r3,172(sp)
  204c98:	003ec606 	br	2047b4 <_gp+0xffdf2ba0>
  204c9c:	8025883a 	mov	r18,r16
  204ca0:	dc002903 	ldbu	r16,164(sp)
  204ca4:	e011883a 	mov	r8,fp
  204ca8:	84003fcc 	andi	r16,r16,255
  204cac:	803e9626 	beq	r16,zero,204708 <_gp+0xffdf2af4>
  204cb0:	d8c02b03 	ldbu	r3,172(sp)
  204cb4:	d8c02785 	stb	r3,158(sp)
  204cb8:	003e9306 	br	204708 <_gp+0xffdf2af4>
  204cbc:	00c00044 	movi	r3,1
  204cc0:	d8c02905 	stb	r3,164(sp)
  204cc4:	00c00ac4 	movi	r3,43
  204cc8:	d8c02b05 	stb	r3,172(sp)
  204ccc:	ac400007 	ldb	r17,0(r21)
  204cd0:	003d4306 	br	2041e0 <_gp+0xffdf25cc>
  204cd4:	84000814 	ori	r16,r16,32
  204cd8:	ac400007 	ldb	r17,0(r21)
  204cdc:	003d4006 	br	2041e0 <_gp+0xffdf25cc>
  204ce0:	d8802e17 	ldw	r2,184(sp)
  204ce4:	8025883a 	mov	r18,r16
  204ce8:	d8002785 	stb	zero,158(sp)
  204cec:	14000017 	ldw	r16,0(r2)
  204cf0:	e011883a 	mov	r8,fp
  204cf4:	14c00104 	addi	r19,r2,4
  204cf8:	80042d26 	beq	r16,zero,205db0 <___vfprintf_internal_r+0x1d58>
  204cfc:	d8c02a17 	ldw	r3,168(sp)
  204d00:	1803e416 	blt	r3,zero,205c94 <___vfprintf_internal_r+0x1c3c>
  204d04:	180d883a 	mov	r6,r3
  204d08:	000b883a 	mov	r5,zero
  204d0c:	8009883a 	mov	r4,r16
  204d10:	df003d15 	stw	fp,244(sp)
  204d14:	02099900 	call	209990 <memchr>
  204d18:	da003d17 	ldw	r8,244(sp)
  204d1c:	10046826 	beq	r2,zero,205ec0 <___vfprintf_internal_r+0x1e68>
  204d20:	1405c83a 	sub	r2,r2,r16
  204d24:	d8802b15 	stw	r2,172(sp)
  204d28:	1003e016 	blt	r2,zero,205cac <___vfprintf_internal_r+0x1c54>
  204d2c:	df002783 	ldbu	fp,158(sp)
  204d30:	d8802915 	stw	r2,164(sp)
  204d34:	dcc02e15 	stw	r19,184(sp)
  204d38:	d8002a15 	stw	zero,168(sp)
  204d3c:	d8003215 	stw	zero,200(sp)
  204d40:	003ea206 	br	2047cc <_gp+0xffdf2bb8>
  204d44:	8025883a 	mov	r18,r16
  204d48:	dc002903 	ldbu	r16,164(sp)
  204d4c:	e011883a 	mov	r8,fp
  204d50:	84003fcc 	andi	r16,r16,255
  204d54:	803f8d26 	beq	r16,zero,204b8c <_gp+0xffdf2f78>
  204d58:	d8c02b03 	ldbu	r3,172(sp)
  204d5c:	d8c02785 	stb	r3,158(sp)
  204d60:	003f8a06 	br	204b8c <_gp+0xffdf2f78>
  204d64:	8025883a 	mov	r18,r16
  204d68:	dc002903 	ldbu	r16,164(sp)
  204d6c:	e011883a 	mov	r8,fp
  204d70:	84003fcc 	andi	r16,r16,255
  204d74:	8005661e 	bne	r16,zero,206310 <___vfprintf_internal_r+0x22b8>
  204d78:	01000874 	movhi	r4,33
  204d7c:	211b0e04 	addi	r4,r4,27704
  204d80:	d9003915 	stw	r4,228(sp)
  204d84:	9080080c 	andi	r2,r18,32
  204d88:	103f9f1e 	bne	r2,zero,204c08 <_gp+0xffdf2ff4>
  204d8c:	9080040c 	andi	r2,r18,16
  204d90:	1002eb26 	beq	r2,zero,205940 <___vfprintf_internal_r+0x18e8>
  204d94:	d8802e17 	ldw	r2,184(sp)
  204d98:	002d883a 	mov	r22,zero
  204d9c:	14c00017 	ldw	r19,0(r2)
  204da0:	10800104 	addi	r2,r2,4
  204da4:	d8802e15 	stw	r2,184(sp)
  204da8:	003f9c06 	br	204c1c <_gp+0xffdf3008>
  204dac:	d8802b07 	ldb	r2,172(sp)
  204db0:	1002e11e 	bne	r2,zero,205938 <___vfprintf_internal_r+0x18e0>
  204db4:	00c00044 	movi	r3,1
  204db8:	d8c02905 	stb	r3,164(sp)
  204dbc:	00c00804 	movi	r3,32
  204dc0:	d8c02b05 	stb	r3,172(sp)
  204dc4:	ac400007 	ldb	r17,0(r21)
  204dc8:	003d0506 	br	2041e0 <_gp+0xffdf25cc>
  204dcc:	84000054 	ori	r16,r16,1
  204dd0:	ac400007 	ldb	r17,0(r21)
  204dd4:	003d0206 	br	2041e0 <_gp+0xffdf25cc>
  204dd8:	8025883a 	mov	r18,r16
  204ddc:	dc002903 	ldbu	r16,164(sp)
  204de0:	e011883a 	mov	r8,fp
  204de4:	84003fcc 	andi	r16,r16,255
  204de8:	803de726 	beq	r16,zero,204588 <_gp+0xffdf2974>
  204dec:	d8c02b03 	ldbu	r3,172(sp)
  204df0:	d8c02785 	stb	r3,158(sp)
  204df4:	003de406 	br	204588 <_gp+0xffdf2974>
  204df8:	84001014 	ori	r16,r16,64
  204dfc:	ac400007 	ldb	r17,0(r21)
  204e00:	003cf706 	br	2041e0 <_gp+0xffdf25cc>
  204e04:	ac400007 	ldb	r17,0(r21)
  204e08:	00801b04 	movi	r2,108
  204e0c:	88838f26 	beq	r17,r2,205c4c <___vfprintf_internal_r+0x1bf4>
  204e10:	84000414 	ori	r16,r16,16
  204e14:	003cf206 	br	2041e0 <_gp+0xffdf25cc>
  204e18:	8025883a 	mov	r18,r16
  204e1c:	dc002903 	ldbu	r16,164(sp)
  204e20:	e011883a 	mov	r8,fp
  204e24:	84003fcc 	andi	r16,r16,255
  204e28:	80053f1e 	bne	r16,zero,206328 <___vfprintf_internal_r+0x22d0>
  204e2c:	9080080c 	andi	r2,r18,32
  204e30:	1002d226 	beq	r2,zero,20597c <___vfprintf_internal_r+0x1924>
  204e34:	d9002e17 	ldw	r4,184(sp)
  204e38:	d9402f17 	ldw	r5,188(sp)
  204e3c:	20800017 	ldw	r2,0(r4)
  204e40:	2807d7fa 	srai	r3,r5,31
  204e44:	21000104 	addi	r4,r4,4
  204e48:	d9002e15 	stw	r4,184(sp)
  204e4c:	11400015 	stw	r5,0(r2)
  204e50:	10c00115 	stw	r3,4(r2)
  204e54:	003cb806 	br	204138 <_gp+0xffdf2524>
  204e58:	d8c02e17 	ldw	r3,184(sp)
  204e5c:	d9002e17 	ldw	r4,184(sp)
  204e60:	8025883a 	mov	r18,r16
  204e64:	18800017 	ldw	r2,0(r3)
  204e68:	21000104 	addi	r4,r4,4
  204e6c:	00c00044 	movi	r3,1
  204e70:	e011883a 	mov	r8,fp
  204e74:	d8c02915 	stw	r3,164(sp)
  204e78:	d8002785 	stb	zero,158(sp)
  204e7c:	d8801405 	stb	r2,80(sp)
  204e80:	d9002e15 	stw	r4,184(sp)
  204e84:	d8c02b15 	stw	r3,172(sp)
  204e88:	d8002a15 	stw	zero,168(sp)
  204e8c:	d8003215 	stw	zero,200(sp)
  204e90:	dc001404 	addi	r16,sp,80
  204e94:	0039883a 	mov	fp,zero
  204e98:	003e5306 	br	2047e8 <_gp+0xffdf2bd4>
  204e9c:	01000874 	movhi	r4,33
  204ea0:	211b0e04 	addi	r4,r4,27704
  204ea4:	0039883a 	mov	fp,zero
  204ea8:	d9003915 	stw	r4,228(sp)
  204eac:	04401e04 	movi	r17,120
  204eb0:	003f6906 	br	204c58 <_gp+0xffdf3044>
  204eb4:	8025883a 	mov	r18,r16
  204eb8:	dc002903 	ldbu	r16,164(sp)
  204ebc:	e011883a 	mov	r8,fp
  204ec0:	84003fcc 	andi	r16,r16,255
  204ec4:	8005081e 	bne	r16,zero,2062e8 <___vfprintf_internal_r+0x2290>
  204ec8:	883d6126 	beq	r17,zero,204450 <_gp+0xffdf283c>
  204ecc:	00c00044 	movi	r3,1
  204ed0:	d8c02915 	stw	r3,164(sp)
  204ed4:	dc401405 	stb	r17,80(sp)
  204ed8:	d8002785 	stb	zero,158(sp)
  204edc:	003fe906 	br	204e84 <_gp+0xffdf3270>
  204ee0:	01400874 	movhi	r5,33
  204ee4:	295b0e04 	addi	r5,r5,27704
  204ee8:	d9403915 	stw	r5,228(sp)
  204eec:	d8c02e15 	stw	r3,184(sp)
  204ef0:	1025883a 	mov	r18,r2
  204ef4:	04401e04 	movi	r17,120
  204ef8:	9d84b03a 	or	r2,r19,r22
  204efc:	1000fc1e 	bne	r2,zero,2052f0 <___vfprintf_internal_r+0x1298>
  204f00:	0039883a 	mov	fp,zero
  204f04:	00800084 	movi	r2,2
  204f08:	10803fcc 	andi	r2,r2,255
  204f0c:	00c00044 	movi	r3,1
  204f10:	10c20f26 	beq	r2,r3,205750 <___vfprintf_internal_r+0x16f8>
  204f14:	00c00084 	movi	r3,2
  204f18:	10fd3326 	beq	r2,r3,2043e8 <_gp+0xffdf27d4>
  204f1c:	003e0b06 	br	20474c <_gp+0xffdf2b38>
  204f20:	d8c02017 	ldw	r3,128(sp)
  204f24:	003e7106 	br	2048ec <_gp+0xffdf2cd8>
  204f28:	00801944 	movi	r2,101
  204f2c:	14407e0e 	bge	r2,r17,205128 <___vfprintf_internal_r+0x10d0>
  204f30:	d9003617 	ldw	r4,216(sp)
  204f34:	d9403817 	ldw	r5,224(sp)
  204f38:	000d883a 	mov	r6,zero
  204f3c:	000f883a 	mov	r7,zero
  204f40:	d8c03c15 	stw	r3,240(sp)
  204f44:	da003d15 	stw	r8,244(sp)
  204f48:	020f7240 	call	20f724 <__eqdf2>
  204f4c:	d8c03c17 	ldw	r3,240(sp)
  204f50:	da003d17 	ldw	r8,244(sp)
  204f54:	1000f71e 	bne	r2,zero,205334 <___vfprintf_internal_r+0x12dc>
  204f58:	d8801f17 	ldw	r2,124(sp)
  204f5c:	01000874 	movhi	r4,33
  204f60:	211b1504 	addi	r4,r4,27732
  204f64:	18c00044 	addi	r3,r3,1
  204f68:	10800044 	addi	r2,r2,1
  204f6c:	41000015 	stw	r4,0(r8)
  204f70:	01000044 	movi	r4,1
  204f74:	41000115 	stw	r4,4(r8)
  204f78:	d8c02015 	stw	r3,128(sp)
  204f7c:	d8801f15 	stw	r2,124(sp)
  204f80:	010001c4 	movi	r4,7
  204f84:	2082b816 	blt	r4,r2,205a68 <___vfprintf_internal_r+0x1a10>
  204f88:	42000204 	addi	r8,r8,8
  204f8c:	d8802617 	ldw	r2,152(sp)
  204f90:	d9403317 	ldw	r5,204(sp)
  204f94:	11400216 	blt	r2,r5,204fa0 <___vfprintf_internal_r+0xf48>
  204f98:	9080004c 	andi	r2,r18,1
  204f9c:	103eb326 	beq	r2,zero,204a6c <_gp+0xffdf2e58>
  204fa0:	d8803717 	ldw	r2,220(sp)
  204fa4:	d9003417 	ldw	r4,208(sp)
  204fa8:	d9403717 	ldw	r5,220(sp)
  204fac:	1887883a 	add	r3,r3,r2
  204fb0:	d8801f17 	ldw	r2,124(sp)
  204fb4:	41000015 	stw	r4,0(r8)
  204fb8:	41400115 	stw	r5,4(r8)
  204fbc:	10800044 	addi	r2,r2,1
  204fc0:	d8c02015 	stw	r3,128(sp)
  204fc4:	d8801f15 	stw	r2,124(sp)
  204fc8:	010001c4 	movi	r4,7
  204fcc:	20832916 	blt	r4,r2,205c74 <___vfprintf_internal_r+0x1c1c>
  204fd0:	42000204 	addi	r8,r8,8
  204fd4:	d8803317 	ldw	r2,204(sp)
  204fd8:	143fffc4 	addi	r16,r2,-1
  204fdc:	043ea30e 	bge	zero,r16,204a6c <_gp+0xffdf2e58>
  204fe0:	04400404 	movi	r17,16
  204fe4:	d8801f17 	ldw	r2,124(sp)
  204fe8:	8c00880e 	bge	r17,r16,20520c <___vfprintf_internal_r+0x11b4>
  204fec:	01400874 	movhi	r5,33
  204ff0:	295b1584 	addi	r5,r5,27734
  204ff4:	d9402c15 	stw	r5,176(sp)
  204ff8:	058001c4 	movi	r22,7
  204ffc:	dcc02d17 	ldw	r19,180(sp)
  205000:	00000306 	br	205010 <___vfprintf_internal_r+0xfb8>
  205004:	42000204 	addi	r8,r8,8
  205008:	843ffc04 	addi	r16,r16,-16
  20500c:	8c00820e 	bge	r17,r16,205218 <___vfprintf_internal_r+0x11c0>
  205010:	18c00404 	addi	r3,r3,16
  205014:	10800044 	addi	r2,r2,1
  205018:	45000015 	stw	r20,0(r8)
  20501c:	44400115 	stw	r17,4(r8)
  205020:	d8c02015 	stw	r3,128(sp)
  205024:	d8801f15 	stw	r2,124(sp)
  205028:	b0bff60e 	bge	r22,r2,205004 <_gp+0xffdf33f0>
  20502c:	d9801e04 	addi	r6,sp,120
  205030:	b80b883a 	mov	r5,r23
  205034:	9809883a 	mov	r4,r19
  205038:	020b9a00 	call	20b9a0 <__sprint_r>
  20503c:	103d0a1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205040:	d8c02017 	ldw	r3,128(sp)
  205044:	d8801f17 	ldw	r2,124(sp)
  205048:	da000404 	addi	r8,sp,16
  20504c:	003fee06 	br	205008 <_gp+0xffdf33f4>
  205050:	d9403117 	ldw	r5,196(sp)
  205054:	d8802917 	ldw	r2,164(sp)
  205058:	28adc83a 	sub	r22,r5,r2
  20505c:	05be410e 	bge	zero,r22,204964 <_gp+0xffdf2d50>
  205060:	07000404 	movi	fp,16
  205064:	d8801f17 	ldw	r2,124(sp)
  205068:	e5838f0e 	bge	fp,r22,205ea8 <___vfprintf_internal_r+0x1e50>
  20506c:	01400874 	movhi	r5,33
  205070:	295b1584 	addi	r5,r5,27734
  205074:	dc403015 	stw	r17,192(sp)
  205078:	d9402c15 	stw	r5,176(sp)
  20507c:	b023883a 	mov	r17,r22
  205080:	04c001c4 	movi	r19,7
  205084:	a82d883a 	mov	r22,r21
  205088:	902b883a 	mov	r21,r18
  20508c:	8025883a 	mov	r18,r16
  205090:	dc002d17 	ldw	r16,180(sp)
  205094:	00000306 	br	2050a4 <___vfprintf_internal_r+0x104c>
  205098:	8c7ffc04 	addi	r17,r17,-16
  20509c:	42000204 	addi	r8,r8,8
  2050a0:	e440110e 	bge	fp,r17,2050e8 <___vfprintf_internal_r+0x1090>
  2050a4:	18c00404 	addi	r3,r3,16
  2050a8:	10800044 	addi	r2,r2,1
  2050ac:	45000015 	stw	r20,0(r8)
  2050b0:	47000115 	stw	fp,4(r8)
  2050b4:	d8c02015 	stw	r3,128(sp)
  2050b8:	d8801f15 	stw	r2,124(sp)
  2050bc:	98bff60e 	bge	r19,r2,205098 <_gp+0xffdf3484>
  2050c0:	d9801e04 	addi	r6,sp,120
  2050c4:	b80b883a 	mov	r5,r23
  2050c8:	8009883a 	mov	r4,r16
  2050cc:	020b9a00 	call	20b9a0 <__sprint_r>
  2050d0:	103ce51e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2050d4:	8c7ffc04 	addi	r17,r17,-16
  2050d8:	d8c02017 	ldw	r3,128(sp)
  2050dc:	d8801f17 	ldw	r2,124(sp)
  2050e0:	da000404 	addi	r8,sp,16
  2050e4:	e47fef16 	blt	fp,r17,2050a4 <_gp+0xffdf3490>
  2050e8:	9021883a 	mov	r16,r18
  2050ec:	a825883a 	mov	r18,r21
  2050f0:	b02b883a 	mov	r21,r22
  2050f4:	882d883a 	mov	r22,r17
  2050f8:	dc403017 	ldw	r17,192(sp)
  2050fc:	d9002c17 	ldw	r4,176(sp)
  205100:	1d87883a 	add	r3,r3,r22
  205104:	10800044 	addi	r2,r2,1
  205108:	41000015 	stw	r4,0(r8)
  20510c:	45800115 	stw	r22,4(r8)
  205110:	d8c02015 	stw	r3,128(sp)
  205114:	d8801f15 	stw	r2,124(sp)
  205118:	010001c4 	movi	r4,7
  20511c:	20818e16 	blt	r4,r2,205758 <___vfprintf_internal_r+0x1700>
  205120:	42000204 	addi	r8,r8,8
  205124:	003e0f06 	br	204964 <_gp+0xffdf2d50>
  205128:	d9403317 	ldw	r5,204(sp)
  20512c:	00800044 	movi	r2,1
  205130:	18c00044 	addi	r3,r3,1
  205134:	1141530e 	bge	r2,r5,205684 <___vfprintf_internal_r+0x162c>
  205138:	dc401f17 	ldw	r17,124(sp)
  20513c:	00800044 	movi	r2,1
  205140:	40800115 	stw	r2,4(r8)
  205144:	8c400044 	addi	r17,r17,1
  205148:	44000015 	stw	r16,0(r8)
  20514c:	d8c02015 	stw	r3,128(sp)
  205150:	dc401f15 	stw	r17,124(sp)
  205154:	008001c4 	movi	r2,7
  205158:	14416b16 	blt	r2,r17,205708 <___vfprintf_internal_r+0x16b0>
  20515c:	42000204 	addi	r8,r8,8
  205160:	d8803717 	ldw	r2,220(sp)
  205164:	d9003417 	ldw	r4,208(sp)
  205168:	8c400044 	addi	r17,r17,1
  20516c:	10c7883a 	add	r3,r2,r3
  205170:	40800115 	stw	r2,4(r8)
  205174:	41000015 	stw	r4,0(r8)
  205178:	d8c02015 	stw	r3,128(sp)
  20517c:	dc401f15 	stw	r17,124(sp)
  205180:	008001c4 	movi	r2,7
  205184:	14416916 	blt	r2,r17,20572c <___vfprintf_internal_r+0x16d4>
  205188:	45800204 	addi	r22,r8,8
  20518c:	d9003617 	ldw	r4,216(sp)
  205190:	d9403817 	ldw	r5,224(sp)
  205194:	000d883a 	mov	r6,zero
  205198:	000f883a 	mov	r7,zero
  20519c:	d8c03c15 	stw	r3,240(sp)
  2051a0:	020f7240 	call	20f724 <__eqdf2>
  2051a4:	d8c03c17 	ldw	r3,240(sp)
  2051a8:	1000bc26 	beq	r2,zero,20549c <___vfprintf_internal_r+0x1444>
  2051ac:	d9403317 	ldw	r5,204(sp)
  2051b0:	84000044 	addi	r16,r16,1
  2051b4:	8c400044 	addi	r17,r17,1
  2051b8:	28bfffc4 	addi	r2,r5,-1
  2051bc:	1887883a 	add	r3,r3,r2
  2051c0:	b0800115 	stw	r2,4(r22)
  2051c4:	b4000015 	stw	r16,0(r22)
  2051c8:	d8c02015 	stw	r3,128(sp)
  2051cc:	dc401f15 	stw	r17,124(sp)
  2051d0:	008001c4 	movi	r2,7
  2051d4:	14414316 	blt	r2,r17,2056e4 <___vfprintf_internal_r+0x168c>
  2051d8:	b5800204 	addi	r22,r22,8
  2051dc:	d9003a17 	ldw	r4,232(sp)
  2051e0:	df0022c4 	addi	fp,sp,139
  2051e4:	8c400044 	addi	r17,r17,1
  2051e8:	20c7883a 	add	r3,r4,r3
  2051ec:	b7000015 	stw	fp,0(r22)
  2051f0:	b1000115 	stw	r4,4(r22)
  2051f4:	d8c02015 	stw	r3,128(sp)
  2051f8:	dc401f15 	stw	r17,124(sp)
  2051fc:	008001c4 	movi	r2,7
  205200:	14400e16 	blt	r2,r17,20523c <___vfprintf_internal_r+0x11e4>
  205204:	b2000204 	addi	r8,r22,8
  205208:	003e1806 	br	204a6c <_gp+0xffdf2e58>
  20520c:	01000874 	movhi	r4,33
  205210:	211b1584 	addi	r4,r4,27734
  205214:	d9002c15 	stw	r4,176(sp)
  205218:	d9002c17 	ldw	r4,176(sp)
  20521c:	1c07883a 	add	r3,r3,r16
  205220:	44000115 	stw	r16,4(r8)
  205224:	41000015 	stw	r4,0(r8)
  205228:	10800044 	addi	r2,r2,1
  20522c:	d8c02015 	stw	r3,128(sp)
  205230:	d8801f15 	stw	r2,124(sp)
  205234:	010001c4 	movi	r4,7
  205238:	20be0b0e 	bge	r4,r2,204a68 <_gp+0xffdf2e54>
  20523c:	d9002d17 	ldw	r4,180(sp)
  205240:	d9801e04 	addi	r6,sp,120
  205244:	b80b883a 	mov	r5,r23
  205248:	020b9a00 	call	20b9a0 <__sprint_r>
  20524c:	103c861e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205250:	d8c02017 	ldw	r3,128(sp)
  205254:	da000404 	addi	r8,sp,16
  205258:	003e0406 	br	204a6c <_gp+0xffdf2e58>
  20525c:	d9002d17 	ldw	r4,180(sp)
  205260:	d9801e04 	addi	r6,sp,120
  205264:	b80b883a 	mov	r5,r23
  205268:	020b9a00 	call	20b9a0 <__sprint_r>
  20526c:	103e3b26 	beq	r2,zero,204b5c <_gp+0xffdf2f48>
  205270:	003c7d06 	br	204468 <_gp+0xffdf2854>
  205274:	d9002d17 	ldw	r4,180(sp)
  205278:	d9801e04 	addi	r6,sp,120
  20527c:	b80b883a 	mov	r5,r23
  205280:	020b9a00 	call	20b9a0 <__sprint_r>
  205284:	103c781e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205288:	d8c02017 	ldw	r3,128(sp)
  20528c:	da000404 	addi	r8,sp,16
  205290:	003de906 	br	204a38 <_gp+0xffdf2e24>
  205294:	d9002d17 	ldw	r4,180(sp)
  205298:	d9801e04 	addi	r6,sp,120
  20529c:	b80b883a 	mov	r5,r23
  2052a0:	020b9a00 	call	20b9a0 <__sprint_r>
  2052a4:	103c701e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2052a8:	d8c02017 	ldw	r3,128(sp)
  2052ac:	da000404 	addi	r8,sp,16
  2052b0:	003d9b06 	br	204920 <_gp+0xffdf2d0c>
  2052b4:	d9002d17 	ldw	r4,180(sp)
  2052b8:	d9801e04 	addi	r6,sp,120
  2052bc:	b80b883a 	mov	r5,r23
  2052c0:	020b9a00 	call	20b9a0 <__sprint_r>
  2052c4:	103c681e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2052c8:	d8c02017 	ldw	r3,128(sp)
  2052cc:	da000404 	addi	r8,sp,16
  2052d0:	003da106 	br	204958 <_gp+0xffdf2d44>
  2052d4:	d9402a17 	ldw	r5,168(sp)
  2052d8:	d8002785 	stb	zero,158(sp)
  2052dc:	283f0616 	blt	r5,zero,204ef8 <_gp+0xffdf32e4>
  2052e0:	00ffdfc4 	movi	r3,-129
  2052e4:	9d84b03a 	or	r2,r19,r22
  2052e8:	90e4703a 	and	r18,r18,r3
  2052ec:	103c3b26 	beq	r2,zero,2043dc <_gp+0xffdf27c8>
  2052f0:	0039883a 	mov	fp,zero
  2052f4:	003e5806 	br	204c58 <_gp+0xffdf3044>
  2052f8:	9080040c 	andi	r2,r18,16
  2052fc:	1001b326 	beq	r2,zero,2059cc <___vfprintf_internal_r+0x1974>
  205300:	d8c02e17 	ldw	r3,184(sp)
  205304:	d9002a17 	ldw	r4,168(sp)
  205308:	d8002785 	stb	zero,158(sp)
  20530c:	18800104 	addi	r2,r3,4
  205310:	1cc00017 	ldw	r19,0(r3)
  205314:	002d883a 	mov	r22,zero
  205318:	2001b516 	blt	r4,zero,2059f0 <___vfprintf_internal_r+0x1998>
  20531c:	00ffdfc4 	movi	r3,-129
  205320:	d8802e15 	stw	r2,184(sp)
  205324:	90e4703a 	and	r18,r18,r3
  205328:	983d0526 	beq	r19,zero,204740 <_gp+0xffdf2b2c>
  20532c:	0039883a 	mov	fp,zero
  205330:	003d0806 	br	204754 <_gp+0xffdf2b40>
  205334:	dc402617 	ldw	r17,152(sp)
  205338:	0441d30e 	bge	zero,r17,205a88 <___vfprintf_internal_r+0x1a30>
  20533c:	dc403217 	ldw	r17,200(sp)
  205340:	d8803317 	ldw	r2,204(sp)
  205344:	1440010e 	bge	r2,r17,20534c <___vfprintf_internal_r+0x12f4>
  205348:	1023883a 	mov	r17,r2
  20534c:	04400a0e 	bge	zero,r17,205378 <___vfprintf_internal_r+0x1320>
  205350:	d8801f17 	ldw	r2,124(sp)
  205354:	1c47883a 	add	r3,r3,r17
  205358:	44000015 	stw	r16,0(r8)
  20535c:	10800044 	addi	r2,r2,1
  205360:	44400115 	stw	r17,4(r8)
  205364:	d8c02015 	stw	r3,128(sp)
  205368:	d8801f15 	stw	r2,124(sp)
  20536c:	010001c4 	movi	r4,7
  205370:	20826516 	blt	r4,r2,205d08 <___vfprintf_internal_r+0x1cb0>
  205374:	42000204 	addi	r8,r8,8
  205378:	88026116 	blt	r17,zero,205d00 <___vfprintf_internal_r+0x1ca8>
  20537c:	d9003217 	ldw	r4,200(sp)
  205380:	2463c83a 	sub	r17,r4,r17
  205384:	04407b0e 	bge	zero,r17,205574 <___vfprintf_internal_r+0x151c>
  205388:	05800404 	movi	r22,16
  20538c:	d8801f17 	ldw	r2,124(sp)
  205390:	b4419d0e 	bge	r22,r17,205a08 <___vfprintf_internal_r+0x19b0>
  205394:	01000874 	movhi	r4,33
  205398:	211b1584 	addi	r4,r4,27734
  20539c:	d9002c15 	stw	r4,176(sp)
  2053a0:	070001c4 	movi	fp,7
  2053a4:	dcc02d17 	ldw	r19,180(sp)
  2053a8:	00000306 	br	2053b8 <___vfprintf_internal_r+0x1360>
  2053ac:	42000204 	addi	r8,r8,8
  2053b0:	8c7ffc04 	addi	r17,r17,-16
  2053b4:	b441970e 	bge	r22,r17,205a14 <___vfprintf_internal_r+0x19bc>
  2053b8:	18c00404 	addi	r3,r3,16
  2053bc:	10800044 	addi	r2,r2,1
  2053c0:	45000015 	stw	r20,0(r8)
  2053c4:	45800115 	stw	r22,4(r8)
  2053c8:	d8c02015 	stw	r3,128(sp)
  2053cc:	d8801f15 	stw	r2,124(sp)
  2053d0:	e0bff60e 	bge	fp,r2,2053ac <_gp+0xffdf3798>
  2053d4:	d9801e04 	addi	r6,sp,120
  2053d8:	b80b883a 	mov	r5,r23
  2053dc:	9809883a 	mov	r4,r19
  2053e0:	020b9a00 	call	20b9a0 <__sprint_r>
  2053e4:	103c201e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2053e8:	d8c02017 	ldw	r3,128(sp)
  2053ec:	d8801f17 	ldw	r2,124(sp)
  2053f0:	da000404 	addi	r8,sp,16
  2053f4:	003fee06 	br	2053b0 <_gp+0xffdf379c>
  2053f8:	d9002d17 	ldw	r4,180(sp)
  2053fc:	d9801e04 	addi	r6,sp,120
  205400:	b80b883a 	mov	r5,r23
  205404:	020b9a00 	call	20b9a0 <__sprint_r>
  205408:	103c171e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20540c:	d8c02017 	ldw	r3,128(sp)
  205410:	df002787 	ldb	fp,158(sp)
  205414:	da000404 	addi	r8,sp,16
  205418:	003d3406 	br	2048ec <_gp+0xffdf2cd8>
  20541c:	9080040c 	andi	r2,r18,16
  205420:	10016126 	beq	r2,zero,2059a8 <___vfprintf_internal_r+0x1950>
  205424:	d9402e17 	ldw	r5,184(sp)
  205428:	2cc00017 	ldw	r19,0(r5)
  20542c:	29400104 	addi	r5,r5,4
  205430:	d9402e15 	stw	r5,184(sp)
  205434:	982dd7fa 	srai	r22,r19,31
  205438:	b005883a 	mov	r2,r22
  20543c:	003c5a06 	br	2045a8 <_gp+0xffdf2994>
  205440:	9080040c 	andi	r2,r18,16
  205444:	10003526 	beq	r2,zero,20551c <___vfprintf_internal_r+0x14c4>
  205448:	d8c02e17 	ldw	r3,184(sp)
  20544c:	d9002a17 	ldw	r4,168(sp)
  205450:	d8002785 	stb	zero,158(sp)
  205454:	18800104 	addi	r2,r3,4
  205458:	1cc00017 	ldw	r19,0(r3)
  20545c:	002d883a 	mov	r22,zero
  205460:	20003716 	blt	r4,zero,205540 <___vfprintf_internal_r+0x14e8>
  205464:	00ffdfc4 	movi	r3,-129
  205468:	d8802e15 	stw	r2,184(sp)
  20546c:	90e4703a 	and	r18,r18,r3
  205470:	0039883a 	mov	fp,zero
  205474:	983dd426 	beq	r19,zero,204bc8 <_gp+0xffdf2fb4>
  205478:	00800244 	movi	r2,9
  20547c:	14fc5336 	bltu	r2,r19,2045cc <_gp+0xffdf29b8>
  205480:	d8c02817 	ldw	r3,160(sp)
  205484:	dc001dc4 	addi	r16,sp,119
  205488:	9cc00c04 	addi	r19,r19,48
  20548c:	1c07c83a 	sub	r3,r3,r16
  205490:	dcc01dc5 	stb	r19,119(sp)
  205494:	d8c02b15 	stw	r3,172(sp)
  205498:	003cc606 	br	2047b4 <_gp+0xffdf2ba0>
  20549c:	d8803317 	ldw	r2,204(sp)
  2054a0:	143fffc4 	addi	r16,r2,-1
  2054a4:	043f4d0e 	bge	zero,r16,2051dc <_gp+0xffdf35c8>
  2054a8:	07000404 	movi	fp,16
  2054ac:	e400810e 	bge	fp,r16,2056b4 <___vfprintf_internal_r+0x165c>
  2054b0:	01400874 	movhi	r5,33
  2054b4:	295b1584 	addi	r5,r5,27734
  2054b8:	d9402c15 	stw	r5,176(sp)
  2054bc:	01c001c4 	movi	r7,7
  2054c0:	dcc02d17 	ldw	r19,180(sp)
  2054c4:	00000306 	br	2054d4 <___vfprintf_internal_r+0x147c>
  2054c8:	b5800204 	addi	r22,r22,8
  2054cc:	843ffc04 	addi	r16,r16,-16
  2054d0:	e4007b0e 	bge	fp,r16,2056c0 <___vfprintf_internal_r+0x1668>
  2054d4:	18c00404 	addi	r3,r3,16
  2054d8:	8c400044 	addi	r17,r17,1
  2054dc:	b5000015 	stw	r20,0(r22)
  2054e0:	b7000115 	stw	fp,4(r22)
  2054e4:	d8c02015 	stw	r3,128(sp)
  2054e8:	dc401f15 	stw	r17,124(sp)
  2054ec:	3c7ff60e 	bge	r7,r17,2054c8 <_gp+0xffdf38b4>
  2054f0:	d9801e04 	addi	r6,sp,120
  2054f4:	b80b883a 	mov	r5,r23
  2054f8:	9809883a 	mov	r4,r19
  2054fc:	d9c03c15 	stw	r7,240(sp)
  205500:	020b9a00 	call	20b9a0 <__sprint_r>
  205504:	d9c03c17 	ldw	r7,240(sp)
  205508:	103bd71e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20550c:	d8c02017 	ldw	r3,128(sp)
  205510:	dc401f17 	ldw	r17,124(sp)
  205514:	dd800404 	addi	r22,sp,16
  205518:	003fec06 	br	2054cc <_gp+0xffdf38b8>
  20551c:	9080100c 	andi	r2,r18,64
  205520:	d8002785 	stb	zero,158(sp)
  205524:	10010e26 	beq	r2,zero,205960 <___vfprintf_internal_r+0x1908>
  205528:	d9402e17 	ldw	r5,184(sp)
  20552c:	d8c02a17 	ldw	r3,168(sp)
  205530:	002d883a 	mov	r22,zero
  205534:	28800104 	addi	r2,r5,4
  205538:	2cc0000b 	ldhu	r19,0(r5)
  20553c:	183fc90e 	bge	r3,zero,205464 <_gp+0xffdf3850>
  205540:	d8802e15 	stw	r2,184(sp)
  205544:	0039883a 	mov	fp,zero
  205548:	9d84b03a 	or	r2,r19,r22
  20554c:	103c1e1e 	bne	r2,zero,2045c8 <_gp+0xffdf29b4>
  205550:	00800044 	movi	r2,1
  205554:	003e6c06 	br	204f08 <_gp+0xffdf32f4>
  205558:	d9002d17 	ldw	r4,180(sp)
  20555c:	d9801e04 	addi	r6,sp,120
  205560:	b80b883a 	mov	r5,r23
  205564:	020b9a00 	call	20b9a0 <__sprint_r>
  205568:	103bbf1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20556c:	d8c02017 	ldw	r3,128(sp)
  205570:	da000404 	addi	r8,sp,16
  205574:	d9003217 	ldw	r4,200(sp)
  205578:	d8802617 	ldw	r2,152(sp)
  20557c:	d9403317 	ldw	r5,204(sp)
  205580:	8123883a 	add	r17,r16,r4
  205584:	11400216 	blt	r2,r5,205590 <___vfprintf_internal_r+0x1538>
  205588:	9100004c 	andi	r4,r18,1
  20558c:	20000d26 	beq	r4,zero,2055c4 <___vfprintf_internal_r+0x156c>
  205590:	d9003717 	ldw	r4,220(sp)
  205594:	d9403417 	ldw	r5,208(sp)
  205598:	1907883a 	add	r3,r3,r4
  20559c:	d9001f17 	ldw	r4,124(sp)
  2055a0:	41400015 	stw	r5,0(r8)
  2055a4:	d9403717 	ldw	r5,220(sp)
  2055a8:	21000044 	addi	r4,r4,1
  2055ac:	d8c02015 	stw	r3,128(sp)
  2055b0:	41400115 	stw	r5,4(r8)
  2055b4:	d9001f15 	stw	r4,124(sp)
  2055b8:	014001c4 	movi	r5,7
  2055bc:	2901e816 	blt	r5,r4,205d60 <___vfprintf_internal_r+0x1d08>
  2055c0:	42000204 	addi	r8,r8,8
  2055c4:	d9003317 	ldw	r4,204(sp)
  2055c8:	8121883a 	add	r16,r16,r4
  2055cc:	2085c83a 	sub	r2,r4,r2
  2055d0:	8461c83a 	sub	r16,r16,r17
  2055d4:	1400010e 	bge	r2,r16,2055dc <___vfprintf_internal_r+0x1584>
  2055d8:	1021883a 	mov	r16,r2
  2055dc:	04000a0e 	bge	zero,r16,205608 <___vfprintf_internal_r+0x15b0>
  2055e0:	d9001f17 	ldw	r4,124(sp)
  2055e4:	1c07883a 	add	r3,r3,r16
  2055e8:	44400015 	stw	r17,0(r8)
  2055ec:	21000044 	addi	r4,r4,1
  2055f0:	44000115 	stw	r16,4(r8)
  2055f4:	d8c02015 	stw	r3,128(sp)
  2055f8:	d9001f15 	stw	r4,124(sp)
  2055fc:	014001c4 	movi	r5,7
  205600:	2901fb16 	blt	r5,r4,205df0 <___vfprintf_internal_r+0x1d98>
  205604:	42000204 	addi	r8,r8,8
  205608:	8001f716 	blt	r16,zero,205de8 <___vfprintf_internal_r+0x1d90>
  20560c:	1421c83a 	sub	r16,r2,r16
  205610:	043d160e 	bge	zero,r16,204a6c <_gp+0xffdf2e58>
  205614:	04400404 	movi	r17,16
  205618:	d8801f17 	ldw	r2,124(sp)
  20561c:	8c3efb0e 	bge	r17,r16,20520c <_gp+0xffdf35f8>
  205620:	01400874 	movhi	r5,33
  205624:	295b1584 	addi	r5,r5,27734
  205628:	d9402c15 	stw	r5,176(sp)
  20562c:	058001c4 	movi	r22,7
  205630:	dcc02d17 	ldw	r19,180(sp)
  205634:	00000306 	br	205644 <___vfprintf_internal_r+0x15ec>
  205638:	42000204 	addi	r8,r8,8
  20563c:	843ffc04 	addi	r16,r16,-16
  205640:	8c3ef50e 	bge	r17,r16,205218 <_gp+0xffdf3604>
  205644:	18c00404 	addi	r3,r3,16
  205648:	10800044 	addi	r2,r2,1
  20564c:	45000015 	stw	r20,0(r8)
  205650:	44400115 	stw	r17,4(r8)
  205654:	d8c02015 	stw	r3,128(sp)
  205658:	d8801f15 	stw	r2,124(sp)
  20565c:	b0bff60e 	bge	r22,r2,205638 <_gp+0xffdf3a24>
  205660:	d9801e04 	addi	r6,sp,120
  205664:	b80b883a 	mov	r5,r23
  205668:	9809883a 	mov	r4,r19
  20566c:	020b9a00 	call	20b9a0 <__sprint_r>
  205670:	103b7d1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205674:	d8c02017 	ldw	r3,128(sp)
  205678:	d8801f17 	ldw	r2,124(sp)
  20567c:	da000404 	addi	r8,sp,16
  205680:	003fee06 	br	20563c <_gp+0xffdf3a28>
  205684:	9088703a 	and	r4,r18,r2
  205688:	203eab1e 	bne	r4,zero,205138 <_gp+0xffdf3524>
  20568c:	dc401f17 	ldw	r17,124(sp)
  205690:	40800115 	stw	r2,4(r8)
  205694:	44000015 	stw	r16,0(r8)
  205698:	8c400044 	addi	r17,r17,1
  20569c:	d8c02015 	stw	r3,128(sp)
  2056a0:	dc401f15 	stw	r17,124(sp)
  2056a4:	008001c4 	movi	r2,7
  2056a8:	14400e16 	blt	r2,r17,2056e4 <___vfprintf_internal_r+0x168c>
  2056ac:	45800204 	addi	r22,r8,8
  2056b0:	003eca06 	br	2051dc <_gp+0xffdf35c8>
  2056b4:	01000874 	movhi	r4,33
  2056b8:	211b1584 	addi	r4,r4,27734
  2056bc:	d9002c15 	stw	r4,176(sp)
  2056c0:	d8802c17 	ldw	r2,176(sp)
  2056c4:	1c07883a 	add	r3,r3,r16
  2056c8:	8c400044 	addi	r17,r17,1
  2056cc:	b0800015 	stw	r2,0(r22)
  2056d0:	b4000115 	stw	r16,4(r22)
  2056d4:	d8c02015 	stw	r3,128(sp)
  2056d8:	dc401f15 	stw	r17,124(sp)
  2056dc:	008001c4 	movi	r2,7
  2056e0:	147ebd0e 	bge	r2,r17,2051d8 <_gp+0xffdf35c4>
  2056e4:	d9002d17 	ldw	r4,180(sp)
  2056e8:	d9801e04 	addi	r6,sp,120
  2056ec:	b80b883a 	mov	r5,r23
  2056f0:	020b9a00 	call	20b9a0 <__sprint_r>
  2056f4:	103b5c1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  2056f8:	d8c02017 	ldw	r3,128(sp)
  2056fc:	dc401f17 	ldw	r17,124(sp)
  205700:	dd800404 	addi	r22,sp,16
  205704:	003eb506 	br	2051dc <_gp+0xffdf35c8>
  205708:	d9002d17 	ldw	r4,180(sp)
  20570c:	d9801e04 	addi	r6,sp,120
  205710:	b80b883a 	mov	r5,r23
  205714:	020b9a00 	call	20b9a0 <__sprint_r>
  205718:	103b531e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20571c:	d8c02017 	ldw	r3,128(sp)
  205720:	dc401f17 	ldw	r17,124(sp)
  205724:	da000404 	addi	r8,sp,16
  205728:	003e8d06 	br	205160 <_gp+0xffdf354c>
  20572c:	d9002d17 	ldw	r4,180(sp)
  205730:	d9801e04 	addi	r6,sp,120
  205734:	b80b883a 	mov	r5,r23
  205738:	020b9a00 	call	20b9a0 <__sprint_r>
  20573c:	103b4a1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205740:	d8c02017 	ldw	r3,128(sp)
  205744:	dc401f17 	ldw	r17,124(sp)
  205748:	dd800404 	addi	r22,sp,16
  20574c:	003e8f06 	br	20518c <_gp+0xffdf3578>
  205750:	0027883a 	mov	r19,zero
  205754:	003f4a06 	br	205480 <_gp+0xffdf386c>
  205758:	d9002d17 	ldw	r4,180(sp)
  20575c:	d9801e04 	addi	r6,sp,120
  205760:	b80b883a 	mov	r5,r23
  205764:	020b9a00 	call	20b9a0 <__sprint_r>
  205768:	103b3f1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  20576c:	d8c02017 	ldw	r3,128(sp)
  205770:	da000404 	addi	r8,sp,16
  205774:	003c7b06 	br	204964 <_gp+0xffdf2d50>
  205778:	d9402a17 	ldw	r5,168(sp)
  20577c:	04e7c83a 	sub	r19,zero,r19
  205780:	07000b44 	movi	fp,45
  205784:	9804c03a 	cmpne	r2,r19,zero
  205788:	05adc83a 	sub	r22,zero,r22
  20578c:	df002785 	stb	fp,158(sp)
  205790:	b0adc83a 	sub	r22,r22,r2
  205794:	28017b16 	blt	r5,zero,205d84 <___vfprintf_internal_r+0x1d2c>
  205798:	00bfdfc4 	movi	r2,-129
  20579c:	90a4703a 	and	r18,r18,r2
  2057a0:	003b8906 	br	2045c8 <_gp+0xffdf29b4>
  2057a4:	d9003617 	ldw	r4,216(sp)
  2057a8:	d9403817 	ldw	r5,224(sp)
  2057ac:	da003d15 	stw	r8,244(sp)
  2057b0:	020b5c40 	call	20b5c4 <__fpclassifyd>
  2057b4:	da003d17 	ldw	r8,244(sp)
  2057b8:	1000f026 	beq	r2,zero,205b7c <___vfprintf_internal_r+0x1b24>
  2057bc:	d9002a17 	ldw	r4,168(sp)
  2057c0:	05bff7c4 	movi	r22,-33
  2057c4:	00bfffc4 	movi	r2,-1
  2057c8:	8dac703a 	and	r22,r17,r22
  2057cc:	20820026 	beq	r4,r2,205fd0 <___vfprintf_internal_r+0x1f78>
  2057d0:	008011c4 	movi	r2,71
  2057d4:	b081f726 	beq	r22,r2,205fb4 <___vfprintf_internal_r+0x1f5c>
  2057d8:	d9003817 	ldw	r4,224(sp)
  2057dc:	90c04014 	ori	r3,r18,256
  2057e0:	d8c02c15 	stw	r3,176(sp)
  2057e4:	20021516 	blt	r4,zero,20603c <___vfprintf_internal_r+0x1fe4>
  2057e8:	dcc03817 	ldw	r19,224(sp)
  2057ec:	d8002905 	stb	zero,164(sp)
  2057f0:	00801984 	movi	r2,102
  2057f4:	8881f926 	beq	r17,r2,205fdc <___vfprintf_internal_r+0x1f84>
  2057f8:	00801184 	movi	r2,70
  2057fc:	88821c26 	beq	r17,r2,206070 <___vfprintf_internal_r+0x2018>
  205800:	00801144 	movi	r2,69
  205804:	b081ef26 	beq	r22,r2,205fc4 <___vfprintf_internal_r+0x1f6c>
  205808:	d8c02a17 	ldw	r3,168(sp)
  20580c:	d8802104 	addi	r2,sp,132
  205810:	d8800315 	stw	r2,12(sp)
  205814:	d9403617 	ldw	r5,216(sp)
  205818:	d8802504 	addi	r2,sp,148
  20581c:	d9002d17 	ldw	r4,180(sp)
  205820:	d8800215 	stw	r2,8(sp)
  205824:	d8802604 	addi	r2,sp,152
  205828:	d8c00015 	stw	r3,0(sp)
  20582c:	d8800115 	stw	r2,4(sp)
  205830:	01c00084 	movi	r7,2
  205834:	980d883a 	mov	r6,r19
  205838:	d8c03c15 	stw	r3,240(sp)
  20583c:	da003d15 	stw	r8,244(sp)
  205840:	02067880 	call	206788 <_dtoa_r>
  205844:	1021883a 	mov	r16,r2
  205848:	008019c4 	movi	r2,103
  20584c:	d8c03c17 	ldw	r3,240(sp)
  205850:	da003d17 	ldw	r8,244(sp)
  205854:	88817126 	beq	r17,r2,205e1c <___vfprintf_internal_r+0x1dc4>
  205858:	008011c4 	movi	r2,71
  20585c:	88829126 	beq	r17,r2,2062a4 <___vfprintf_internal_r+0x224c>
  205860:	80f9883a 	add	fp,r16,r3
  205864:	d9003617 	ldw	r4,216(sp)
  205868:	000d883a 	mov	r6,zero
  20586c:	000f883a 	mov	r7,zero
  205870:	980b883a 	mov	r5,r19
  205874:	da003d15 	stw	r8,244(sp)
  205878:	020f7240 	call	20f724 <__eqdf2>
  20587c:	da003d17 	ldw	r8,244(sp)
  205880:	10018d26 	beq	r2,zero,205eb8 <___vfprintf_internal_r+0x1e60>
  205884:	d8802117 	ldw	r2,132(sp)
  205888:	1700062e 	bgeu	r2,fp,2058a4 <___vfprintf_internal_r+0x184c>
  20588c:	01000c04 	movi	r4,48
  205890:	10c00044 	addi	r3,r2,1
  205894:	d8c02115 	stw	r3,132(sp)
  205898:	11000005 	stb	r4,0(r2)
  20589c:	d8802117 	ldw	r2,132(sp)
  2058a0:	173ffb36 	bltu	r2,fp,205890 <_gp+0xffdf3c7c>
  2058a4:	1405c83a 	sub	r2,r2,r16
  2058a8:	d8803315 	stw	r2,204(sp)
  2058ac:	008011c4 	movi	r2,71
  2058b0:	b0817626 	beq	r22,r2,205e8c <___vfprintf_internal_r+0x1e34>
  2058b4:	00801944 	movi	r2,101
  2058b8:	1442800e 	bge	r2,r17,2062bc <___vfprintf_internal_r+0x2264>
  2058bc:	d8c02617 	ldw	r3,152(sp)
  2058c0:	00801984 	movi	r2,102
  2058c4:	d8c03215 	stw	r3,200(sp)
  2058c8:	8881fe26 	beq	r17,r2,2060c4 <___vfprintf_internal_r+0x206c>
  2058cc:	d8c03217 	ldw	r3,200(sp)
  2058d0:	d9003317 	ldw	r4,204(sp)
  2058d4:	1901dd16 	blt	r3,r4,20604c <___vfprintf_internal_r+0x1ff4>
  2058d8:	9480004c 	andi	r18,r18,1
  2058dc:	90022b1e 	bne	r18,zero,20618c <___vfprintf_internal_r+0x2134>
  2058e0:	1805883a 	mov	r2,r3
  2058e4:	18028316 	blt	r3,zero,2062f4 <___vfprintf_internal_r+0x229c>
  2058e8:	d8c03217 	ldw	r3,200(sp)
  2058ec:	044019c4 	movi	r17,103
  2058f0:	d8c02b15 	stw	r3,172(sp)
  2058f4:	df002907 	ldb	fp,164(sp)
  2058f8:	e001531e 	bne	fp,zero,205e48 <___vfprintf_internal_r+0x1df0>
  2058fc:	df002783 	ldbu	fp,158(sp)
  205900:	d8802915 	stw	r2,164(sp)
  205904:	dc802c17 	ldw	r18,176(sp)
  205908:	d8002a15 	stw	zero,168(sp)
  20590c:	003baf06 	br	2047cc <_gp+0xffdf2bb8>
  205910:	d8c02e17 	ldw	r3,184(sp)
  205914:	d9002e17 	ldw	r4,184(sp)
  205918:	d9402e17 	ldw	r5,184(sp)
  20591c:	18c00017 	ldw	r3,0(r3)
  205920:	21000117 	ldw	r4,4(r4)
  205924:	29400204 	addi	r5,r5,8
  205928:	d8c03615 	stw	r3,216(sp)
  20592c:	d9003815 	stw	r4,224(sp)
  205930:	d9402e15 	stw	r5,184(sp)
  205934:	003b5006 	br	204678 <_gp+0xffdf2a64>
  205938:	ac400007 	ldb	r17,0(r21)
  20593c:	003a2806 	br	2041e0 <_gp+0xffdf25cc>
  205940:	9080100c 	andi	r2,r18,64
  205944:	1000a826 	beq	r2,zero,205be8 <___vfprintf_internal_r+0x1b90>
  205948:	d8c02e17 	ldw	r3,184(sp)
  20594c:	002d883a 	mov	r22,zero
  205950:	1cc0000b 	ldhu	r19,0(r3)
  205954:	18c00104 	addi	r3,r3,4
  205958:	d8c02e15 	stw	r3,184(sp)
  20595c:	003caf06 	br	204c1c <_gp+0xffdf3008>
  205960:	d9002e17 	ldw	r4,184(sp)
  205964:	d9402a17 	ldw	r5,168(sp)
  205968:	002d883a 	mov	r22,zero
  20596c:	20800104 	addi	r2,r4,4
  205970:	24c00017 	ldw	r19,0(r4)
  205974:	283ebb0e 	bge	r5,zero,205464 <_gp+0xffdf3850>
  205978:	003ef106 	br	205540 <_gp+0xffdf392c>
  20597c:	9080040c 	andi	r2,r18,16
  205980:	1000921e 	bne	r2,zero,205bcc <___vfprintf_internal_r+0x1b74>
  205984:	9480100c 	andi	r18,r18,64
  205988:	90013926 	beq	r18,zero,205e70 <___vfprintf_internal_r+0x1e18>
  20598c:	d9402e17 	ldw	r5,184(sp)
  205990:	d8c02f17 	ldw	r3,188(sp)
  205994:	28800017 	ldw	r2,0(r5)
  205998:	29400104 	addi	r5,r5,4
  20599c:	d9402e15 	stw	r5,184(sp)
  2059a0:	10c0000d 	sth	r3,0(r2)
  2059a4:	0039e406 	br	204138 <_gp+0xffdf2524>
  2059a8:	9080100c 	andi	r2,r18,64
  2059ac:	10008026 	beq	r2,zero,205bb0 <___vfprintf_internal_r+0x1b58>
  2059b0:	d8802e17 	ldw	r2,184(sp)
  2059b4:	14c0000f 	ldh	r19,0(r2)
  2059b8:	10800104 	addi	r2,r2,4
  2059bc:	d8802e15 	stw	r2,184(sp)
  2059c0:	982dd7fa 	srai	r22,r19,31
  2059c4:	b005883a 	mov	r2,r22
  2059c8:	003af706 	br	2045a8 <_gp+0xffdf2994>
  2059cc:	9080100c 	andi	r2,r18,64
  2059d0:	d8002785 	stb	zero,158(sp)
  2059d4:	10008a1e 	bne	r2,zero,205c00 <___vfprintf_internal_r+0x1ba8>
  2059d8:	d9002e17 	ldw	r4,184(sp)
  2059dc:	d9402a17 	ldw	r5,168(sp)
  2059e0:	002d883a 	mov	r22,zero
  2059e4:	20800104 	addi	r2,r4,4
  2059e8:	24c00017 	ldw	r19,0(r4)
  2059ec:	283e4b0e 	bge	r5,zero,20531c <_gp+0xffdf3708>
  2059f0:	9d86b03a 	or	r3,r19,r22
  2059f4:	d8802e15 	stw	r2,184(sp)
  2059f8:	183e4c1e 	bne	r3,zero,20532c <_gp+0xffdf3718>
  2059fc:	0039883a 	mov	fp,zero
  205a00:	0005883a 	mov	r2,zero
  205a04:	003d4006 	br	204f08 <_gp+0xffdf32f4>
  205a08:	01400874 	movhi	r5,33
  205a0c:	295b1584 	addi	r5,r5,27734
  205a10:	d9402c15 	stw	r5,176(sp)
  205a14:	d9402c17 	ldw	r5,176(sp)
  205a18:	1c47883a 	add	r3,r3,r17
  205a1c:	10800044 	addi	r2,r2,1
  205a20:	41400015 	stw	r5,0(r8)
  205a24:	44400115 	stw	r17,4(r8)
  205a28:	d8c02015 	stw	r3,128(sp)
  205a2c:	d8801f15 	stw	r2,124(sp)
  205a30:	010001c4 	movi	r4,7
  205a34:	20bec816 	blt	r4,r2,205558 <_gp+0xffdf3944>
  205a38:	42000204 	addi	r8,r8,8
  205a3c:	003ecd06 	br	205574 <_gp+0xffdf3960>
  205a40:	d9002a17 	ldw	r4,168(sp)
  205a44:	d8002785 	stb	zero,158(sp)
  205a48:	203d2d16 	blt	r4,zero,204f00 <_gp+0xffdf32ec>
  205a4c:	00bfdfc4 	movi	r2,-129
  205a50:	90a4703a 	and	r18,r18,r2
  205a54:	003a6106 	br	2043dc <_gp+0xffdf27c8>
  205a58:	01000874 	movhi	r4,33
  205a5c:	211b1584 	addi	r4,r4,27734
  205a60:	d9002c15 	stw	r4,176(sp)
  205a64:	003bea06 	br	204a10 <_gp+0xffdf2dfc>
  205a68:	d9002d17 	ldw	r4,180(sp)
  205a6c:	d9801e04 	addi	r6,sp,120
  205a70:	b80b883a 	mov	r5,r23
  205a74:	020b9a00 	call	20b9a0 <__sprint_r>
  205a78:	103a7b1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205a7c:	d8c02017 	ldw	r3,128(sp)
  205a80:	da000404 	addi	r8,sp,16
  205a84:	003d4106 	br	204f8c <_gp+0xffdf3378>
  205a88:	d8801f17 	ldw	r2,124(sp)
  205a8c:	01400874 	movhi	r5,33
  205a90:	01000044 	movi	r4,1
  205a94:	18c00044 	addi	r3,r3,1
  205a98:	10800044 	addi	r2,r2,1
  205a9c:	295b1504 	addi	r5,r5,27732
  205aa0:	41000115 	stw	r4,4(r8)
  205aa4:	41400015 	stw	r5,0(r8)
  205aa8:	d8c02015 	stw	r3,128(sp)
  205aac:	d8801f15 	stw	r2,124(sp)
  205ab0:	010001c4 	movi	r4,7
  205ab4:	20805c16 	blt	r4,r2,205c28 <___vfprintf_internal_r+0x1bd0>
  205ab8:	42000204 	addi	r8,r8,8
  205abc:	8800041e 	bne	r17,zero,205ad0 <___vfprintf_internal_r+0x1a78>
  205ac0:	d8803317 	ldw	r2,204(sp)
  205ac4:	1000021e 	bne	r2,zero,205ad0 <___vfprintf_internal_r+0x1a78>
  205ac8:	9080004c 	andi	r2,r18,1
  205acc:	103be726 	beq	r2,zero,204a6c <_gp+0xffdf2e58>
  205ad0:	d9003717 	ldw	r4,220(sp)
  205ad4:	d8801f17 	ldw	r2,124(sp)
  205ad8:	d9403417 	ldw	r5,208(sp)
  205adc:	20c7883a 	add	r3,r4,r3
  205ae0:	10800044 	addi	r2,r2,1
  205ae4:	41000115 	stw	r4,4(r8)
  205ae8:	41400015 	stw	r5,0(r8)
  205aec:	d8c02015 	stw	r3,128(sp)
  205af0:	d8801f15 	stw	r2,124(sp)
  205af4:	010001c4 	movi	r4,7
  205af8:	20812116 	blt	r4,r2,205f80 <___vfprintf_internal_r+0x1f28>
  205afc:	42000204 	addi	r8,r8,8
  205b00:	0463c83a 	sub	r17,zero,r17
  205b04:	0440730e 	bge	zero,r17,205cd4 <___vfprintf_internal_r+0x1c7c>
  205b08:	05800404 	movi	r22,16
  205b0c:	b440860e 	bge	r22,r17,205d28 <___vfprintf_internal_r+0x1cd0>
  205b10:	01400874 	movhi	r5,33
  205b14:	295b1584 	addi	r5,r5,27734
  205b18:	d9402c15 	stw	r5,176(sp)
  205b1c:	070001c4 	movi	fp,7
  205b20:	dcc02d17 	ldw	r19,180(sp)
  205b24:	00000306 	br	205b34 <___vfprintf_internal_r+0x1adc>
  205b28:	42000204 	addi	r8,r8,8
  205b2c:	8c7ffc04 	addi	r17,r17,-16
  205b30:	b440800e 	bge	r22,r17,205d34 <___vfprintf_internal_r+0x1cdc>
  205b34:	18c00404 	addi	r3,r3,16
  205b38:	10800044 	addi	r2,r2,1
  205b3c:	45000015 	stw	r20,0(r8)
  205b40:	45800115 	stw	r22,4(r8)
  205b44:	d8c02015 	stw	r3,128(sp)
  205b48:	d8801f15 	stw	r2,124(sp)
  205b4c:	e0bff60e 	bge	fp,r2,205b28 <_gp+0xffdf3f14>
  205b50:	d9801e04 	addi	r6,sp,120
  205b54:	b80b883a 	mov	r5,r23
  205b58:	9809883a 	mov	r4,r19
  205b5c:	020b9a00 	call	20b9a0 <__sprint_r>
  205b60:	103a411e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205b64:	d8c02017 	ldw	r3,128(sp)
  205b68:	d8801f17 	ldw	r2,124(sp)
  205b6c:	da000404 	addi	r8,sp,16
  205b70:	003fee06 	br	205b2c <_gp+0xffdf3f18>
  205b74:	00bfffc4 	movi	r2,-1
  205b78:	003a3f06 	br	204478 <_gp+0xffdf2864>
  205b7c:	008011c4 	movi	r2,71
  205b80:	1440b816 	blt	r2,r17,205e64 <___vfprintf_internal_r+0x1e0c>
  205b84:	04000874 	movhi	r16,33
  205b88:	841b0704 	addi	r16,r16,27676
  205b8c:	00c000c4 	movi	r3,3
  205b90:	00bfdfc4 	movi	r2,-129
  205b94:	d8c02915 	stw	r3,164(sp)
  205b98:	90a4703a 	and	r18,r18,r2
  205b9c:	df002783 	ldbu	fp,158(sp)
  205ba0:	d8c02b15 	stw	r3,172(sp)
  205ba4:	d8002a15 	stw	zero,168(sp)
  205ba8:	d8003215 	stw	zero,200(sp)
  205bac:	003b0706 	br	2047cc <_gp+0xffdf2bb8>
  205bb0:	d8c02e17 	ldw	r3,184(sp)
  205bb4:	1cc00017 	ldw	r19,0(r3)
  205bb8:	18c00104 	addi	r3,r3,4
  205bbc:	d8c02e15 	stw	r3,184(sp)
  205bc0:	982dd7fa 	srai	r22,r19,31
  205bc4:	b005883a 	mov	r2,r22
  205bc8:	003a7706 	br	2045a8 <_gp+0xffdf2994>
  205bcc:	d8c02e17 	ldw	r3,184(sp)
  205bd0:	d9002f17 	ldw	r4,188(sp)
  205bd4:	18800017 	ldw	r2,0(r3)
  205bd8:	18c00104 	addi	r3,r3,4
  205bdc:	d8c02e15 	stw	r3,184(sp)
  205be0:	11000015 	stw	r4,0(r2)
  205be4:	00395406 	br	204138 <_gp+0xffdf2524>
  205be8:	d9002e17 	ldw	r4,184(sp)
  205bec:	002d883a 	mov	r22,zero
  205bf0:	24c00017 	ldw	r19,0(r4)
  205bf4:	21000104 	addi	r4,r4,4
  205bf8:	d9002e15 	stw	r4,184(sp)
  205bfc:	003c0706 	br	204c1c <_gp+0xffdf3008>
  205c00:	d9402e17 	ldw	r5,184(sp)
  205c04:	d8c02a17 	ldw	r3,168(sp)
  205c08:	002d883a 	mov	r22,zero
  205c0c:	28800104 	addi	r2,r5,4
  205c10:	2cc0000b 	ldhu	r19,0(r5)
  205c14:	183dc10e 	bge	r3,zero,20531c <_gp+0xffdf3708>
  205c18:	003f7506 	br	2059f0 <_gp+0xffdf3ddc>
  205c1c:	04000874 	movhi	r16,33
  205c20:	841b0504 	addi	r16,r16,27668
  205c24:	003aa706 	br	2046c4 <_gp+0xffdf2ab0>
  205c28:	d9002d17 	ldw	r4,180(sp)
  205c2c:	d9801e04 	addi	r6,sp,120
  205c30:	b80b883a 	mov	r5,r23
  205c34:	020b9a00 	call	20b9a0 <__sprint_r>
  205c38:	103a0b1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205c3c:	dc402617 	ldw	r17,152(sp)
  205c40:	d8c02017 	ldw	r3,128(sp)
  205c44:	da000404 	addi	r8,sp,16
  205c48:	003f9c06 	br	205abc <_gp+0xffdf3ea8>
  205c4c:	ac400043 	ldbu	r17,1(r21)
  205c50:	84000814 	ori	r16,r16,32
  205c54:	ad400044 	addi	r21,r21,1
  205c58:	8c403fcc 	andi	r17,r17,255
  205c5c:	8c40201c 	xori	r17,r17,128
  205c60:	8c7fe004 	addi	r17,r17,-128
  205c64:	00395e06 	br	2041e0 <_gp+0xffdf25cc>
  205c68:	d8c02e15 	stw	r3,184(sp)
  205c6c:	0039883a 	mov	fp,zero
  205c70:	003e3506 	br	205548 <_gp+0xffdf3934>
  205c74:	d9002d17 	ldw	r4,180(sp)
  205c78:	d9801e04 	addi	r6,sp,120
  205c7c:	b80b883a 	mov	r5,r23
  205c80:	020b9a00 	call	20b9a0 <__sprint_r>
  205c84:	1039f81e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205c88:	d8c02017 	ldw	r3,128(sp)
  205c8c:	da000404 	addi	r8,sp,16
  205c90:	003cd006 	br	204fd4 <_gp+0xffdf33c0>
  205c94:	8009883a 	mov	r4,r16
  205c98:	df003d15 	stw	fp,244(sp)
  205c9c:	0203fc00 	call	203fc0 <strlen>
  205ca0:	d8802b15 	stw	r2,172(sp)
  205ca4:	da003d17 	ldw	r8,244(sp)
  205ca8:	103c200e 	bge	r2,zero,204d2c <_gp+0xffdf3118>
  205cac:	0005883a 	mov	r2,zero
  205cb0:	003c1e06 	br	204d2c <_gp+0xffdf3118>
  205cb4:	d9002d17 	ldw	r4,180(sp)
  205cb8:	d9801e04 	addi	r6,sp,120
  205cbc:	b80b883a 	mov	r5,r23
  205cc0:	020b9a00 	call	20b9a0 <__sprint_r>
  205cc4:	1039e81e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205cc8:	d8c02017 	ldw	r3,128(sp)
  205ccc:	d8801f17 	ldw	r2,124(sp)
  205cd0:	da000404 	addi	r8,sp,16
  205cd4:	d9403317 	ldw	r5,204(sp)
  205cd8:	10800044 	addi	r2,r2,1
  205cdc:	44000015 	stw	r16,0(r8)
  205ce0:	28c7883a 	add	r3,r5,r3
  205ce4:	003b5b06 	br	204a54 <_gp+0xffdf2e40>
  205ce8:	01000874 	movhi	r4,33
  205cec:	211b1984 	addi	r4,r4,27750
  205cf0:	d9003515 	stw	r4,212(sp)
  205cf4:	003af206 	br	2048c0 <_gp+0xffdf2cac>
  205cf8:	013fffc4 	movi	r4,-1
  205cfc:	003a0806 	br	204520 <_gp+0xffdf290c>
  205d00:	0023883a 	mov	r17,zero
  205d04:	003d9d06 	br	20537c <_gp+0xffdf3768>
  205d08:	d9002d17 	ldw	r4,180(sp)
  205d0c:	d9801e04 	addi	r6,sp,120
  205d10:	b80b883a 	mov	r5,r23
  205d14:	020b9a00 	call	20b9a0 <__sprint_r>
  205d18:	1039d31e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205d1c:	d8c02017 	ldw	r3,128(sp)
  205d20:	da000404 	addi	r8,sp,16
  205d24:	003d9406 	br	205378 <_gp+0xffdf3764>
  205d28:	01000874 	movhi	r4,33
  205d2c:	211b1584 	addi	r4,r4,27734
  205d30:	d9002c15 	stw	r4,176(sp)
  205d34:	d9002c17 	ldw	r4,176(sp)
  205d38:	1c47883a 	add	r3,r3,r17
  205d3c:	10800044 	addi	r2,r2,1
  205d40:	41000015 	stw	r4,0(r8)
  205d44:	44400115 	stw	r17,4(r8)
  205d48:	d8c02015 	stw	r3,128(sp)
  205d4c:	d8801f15 	stw	r2,124(sp)
  205d50:	010001c4 	movi	r4,7
  205d54:	20bfd716 	blt	r4,r2,205cb4 <_gp+0xffdf40a0>
  205d58:	42000204 	addi	r8,r8,8
  205d5c:	003fdd06 	br	205cd4 <_gp+0xffdf40c0>
  205d60:	d9002d17 	ldw	r4,180(sp)
  205d64:	d9801e04 	addi	r6,sp,120
  205d68:	b80b883a 	mov	r5,r23
  205d6c:	020b9a00 	call	20b9a0 <__sprint_r>
  205d70:	1039bd1e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205d74:	d8802617 	ldw	r2,152(sp)
  205d78:	d8c02017 	ldw	r3,128(sp)
  205d7c:	da000404 	addi	r8,sp,16
  205d80:	003e1006 	br	2055c4 <_gp+0xffdf39b0>
  205d84:	00800044 	movi	r2,1
  205d88:	10803fcc 	andi	r2,r2,255
  205d8c:	00c00044 	movi	r3,1
  205d90:	10fa0d26 	beq	r2,r3,2045c8 <_gp+0xffdf29b4>
  205d94:	00c00084 	movi	r3,2
  205d98:	10fbaf26 	beq	r2,r3,204c58 <_gp+0xffdf3044>
  205d9c:	003a6d06 	br	204754 <_gp+0xffdf2b40>
  205da0:	01000874 	movhi	r4,33
  205da4:	211b1984 	addi	r4,r4,27750
  205da8:	d9003515 	stw	r4,212(sp)
  205dac:	003b5406 	br	204b00 <_gp+0xffdf2eec>
  205db0:	d8802a17 	ldw	r2,168(sp)
  205db4:	00c00184 	movi	r3,6
  205db8:	1880012e 	bgeu	r3,r2,205dc0 <___vfprintf_internal_r+0x1d68>
  205dbc:	1805883a 	mov	r2,r3
  205dc0:	d8802b15 	stw	r2,172(sp)
  205dc4:	1000ef16 	blt	r2,zero,206184 <___vfprintf_internal_r+0x212c>
  205dc8:	04000874 	movhi	r16,33
  205dcc:	d8802915 	stw	r2,164(sp)
  205dd0:	dcc02e15 	stw	r19,184(sp)
  205dd4:	d8002a15 	stw	zero,168(sp)
  205dd8:	d8003215 	stw	zero,200(sp)
  205ddc:	841b1304 	addi	r16,r16,27724
  205de0:	0039883a 	mov	fp,zero
  205de4:	003a8006 	br	2047e8 <_gp+0xffdf2bd4>
  205de8:	0021883a 	mov	r16,zero
  205dec:	003e0706 	br	20560c <_gp+0xffdf39f8>
  205df0:	d9002d17 	ldw	r4,180(sp)
  205df4:	d9801e04 	addi	r6,sp,120
  205df8:	b80b883a 	mov	r5,r23
  205dfc:	020b9a00 	call	20b9a0 <__sprint_r>
  205e00:	1039991e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205e04:	d8802617 	ldw	r2,152(sp)
  205e08:	d9403317 	ldw	r5,204(sp)
  205e0c:	d8c02017 	ldw	r3,128(sp)
  205e10:	da000404 	addi	r8,sp,16
  205e14:	2885c83a 	sub	r2,r5,r2
  205e18:	003dfb06 	br	205608 <_gp+0xffdf39f4>
  205e1c:	9080004c 	andi	r2,r18,1
  205e20:	103e8f1e 	bne	r2,zero,205860 <_gp+0xffdf3c4c>
  205e24:	d8802117 	ldw	r2,132(sp)
  205e28:	003e9e06 	br	2058a4 <_gp+0xffdf3c90>
  205e2c:	1025883a 	mov	r18,r2
  205e30:	0039883a 	mov	fp,zero
  205e34:	00800084 	movi	r2,2
  205e38:	003fd306 	br	205d88 <_gp+0xffdf4174>
  205e3c:	07000b44 	movi	fp,45
  205e40:	df002785 	stb	fp,158(sp)
  205e44:	003a1b06 	br	2046b4 <_gp+0xffdf2aa0>
  205e48:	00c00b44 	movi	r3,45
  205e4c:	d8c02785 	stb	r3,158(sp)
  205e50:	d8802915 	stw	r2,164(sp)
  205e54:	dc802c17 	ldw	r18,176(sp)
  205e58:	d8002a15 	stw	zero,168(sp)
  205e5c:	07000b44 	movi	fp,45
  205e60:	003a5e06 	br	2047dc <_gp+0xffdf2bc8>
  205e64:	04000874 	movhi	r16,33
  205e68:	841b0804 	addi	r16,r16,27680
  205e6c:	003f4706 	br	205b8c <_gp+0xffdf3f78>
  205e70:	d9002e17 	ldw	r4,184(sp)
  205e74:	d9402f17 	ldw	r5,188(sp)
  205e78:	20800017 	ldw	r2,0(r4)
  205e7c:	21000104 	addi	r4,r4,4
  205e80:	d9002e15 	stw	r4,184(sp)
  205e84:	11400015 	stw	r5,0(r2)
  205e88:	0038ab06 	br	204138 <_gp+0xffdf2524>
  205e8c:	dd802617 	ldw	r22,152(sp)
  205e90:	00bfff44 	movi	r2,-3
  205e94:	b0801c16 	blt	r22,r2,205f08 <___vfprintf_internal_r+0x1eb0>
  205e98:	d9402a17 	ldw	r5,168(sp)
  205e9c:	2d801a16 	blt	r5,r22,205f08 <___vfprintf_internal_r+0x1eb0>
  205ea0:	dd803215 	stw	r22,200(sp)
  205ea4:	003e8906 	br	2058cc <_gp+0xffdf3cb8>
  205ea8:	01000874 	movhi	r4,33
  205eac:	211b1584 	addi	r4,r4,27734
  205eb0:	d9002c15 	stw	r4,176(sp)
  205eb4:	003c9106 	br	2050fc <_gp+0xffdf34e8>
  205eb8:	e005883a 	mov	r2,fp
  205ebc:	003e7906 	br	2058a4 <_gp+0xffdf3c90>
  205ec0:	d9002a17 	ldw	r4,168(sp)
  205ec4:	df002783 	ldbu	fp,158(sp)
  205ec8:	dcc02e15 	stw	r19,184(sp)
  205ecc:	d9002915 	stw	r4,164(sp)
  205ed0:	d9002b15 	stw	r4,172(sp)
  205ed4:	d8002a15 	stw	zero,168(sp)
  205ed8:	d8003215 	stw	zero,200(sp)
  205edc:	003a3b06 	br	2047cc <_gp+0xffdf2bb8>
  205ee0:	9080004c 	andi	r2,r18,1
  205ee4:	0039883a 	mov	fp,zero
  205ee8:	10000426 	beq	r2,zero,205efc <___vfprintf_internal_r+0x1ea4>
  205eec:	00800c04 	movi	r2,48
  205ef0:	dc001dc4 	addi	r16,sp,119
  205ef4:	d8801dc5 	stb	r2,119(sp)
  205ef8:	003b6406 	br	204c8c <_gp+0xffdf3078>
  205efc:	d8002b15 	stw	zero,172(sp)
  205f00:	dc001e04 	addi	r16,sp,120
  205f04:	003a2b06 	br	2047b4 <_gp+0xffdf2ba0>
  205f08:	8c7fff84 	addi	r17,r17,-2
  205f0c:	b5bfffc4 	addi	r22,r22,-1
  205f10:	dd802615 	stw	r22,152(sp)
  205f14:	dc4022c5 	stb	r17,139(sp)
  205f18:	b000bf16 	blt	r22,zero,206218 <___vfprintf_internal_r+0x21c0>
  205f1c:	00800ac4 	movi	r2,43
  205f20:	d8802305 	stb	r2,140(sp)
  205f24:	00800244 	movi	r2,9
  205f28:	15807016 	blt	r2,r22,2060ec <___vfprintf_internal_r+0x2094>
  205f2c:	00800c04 	movi	r2,48
  205f30:	b5800c04 	addi	r22,r22,48
  205f34:	d8802345 	stb	r2,141(sp)
  205f38:	dd802385 	stb	r22,142(sp)
  205f3c:	d88023c4 	addi	r2,sp,143
  205f40:	df0022c4 	addi	fp,sp,139
  205f44:	d8c03317 	ldw	r3,204(sp)
  205f48:	1739c83a 	sub	fp,r2,fp
  205f4c:	d9003317 	ldw	r4,204(sp)
  205f50:	e0c7883a 	add	r3,fp,r3
  205f54:	df003a15 	stw	fp,232(sp)
  205f58:	d8c02b15 	stw	r3,172(sp)
  205f5c:	00800044 	movi	r2,1
  205f60:	1100b30e 	bge	r2,r4,206230 <___vfprintf_internal_r+0x21d8>
  205f64:	d8c02b17 	ldw	r3,172(sp)
  205f68:	18c00044 	addi	r3,r3,1
  205f6c:	d8c02b15 	stw	r3,172(sp)
  205f70:	1805883a 	mov	r2,r3
  205f74:	1800ac16 	blt	r3,zero,206228 <___vfprintf_internal_r+0x21d0>
  205f78:	d8003215 	stw	zero,200(sp)
  205f7c:	003e5d06 	br	2058f4 <_gp+0xffdf3ce0>
  205f80:	d9002d17 	ldw	r4,180(sp)
  205f84:	d9801e04 	addi	r6,sp,120
  205f88:	b80b883a 	mov	r5,r23
  205f8c:	020b9a00 	call	20b9a0 <__sprint_r>
  205f90:	1039351e 	bne	r2,zero,204468 <_gp+0xffdf2854>
  205f94:	dc402617 	ldw	r17,152(sp)
  205f98:	d8c02017 	ldw	r3,128(sp)
  205f9c:	d8801f17 	ldw	r2,124(sp)
  205fa0:	da000404 	addi	r8,sp,16
  205fa4:	003ed606 	br	205b00 <_gp+0xffdf3eec>
  205fa8:	182b883a 	mov	r21,r3
  205fac:	d8002a15 	stw	zero,168(sp)
  205fb0:	00388c06 	br	2041e4 <_gp+0xffdf25d0>
  205fb4:	d8802a17 	ldw	r2,168(sp)
  205fb8:	103e071e 	bne	r2,zero,2057d8 <_gp+0xffdf3bc4>
  205fbc:	dc002a15 	stw	r16,168(sp)
  205fc0:	003e0506 	br	2057d8 <_gp+0xffdf3bc4>
  205fc4:	d9002a17 	ldw	r4,168(sp)
  205fc8:	20c00044 	addi	r3,r4,1
  205fcc:	003e0f06 	br	20580c <_gp+0xffdf3bf8>
  205fd0:	01400184 	movi	r5,6
  205fd4:	d9402a15 	stw	r5,168(sp)
  205fd8:	003dff06 	br	2057d8 <_gp+0xffdf3bc4>
  205fdc:	d8802104 	addi	r2,sp,132
  205fe0:	d8800315 	stw	r2,12(sp)
  205fe4:	d8802504 	addi	r2,sp,148
  205fe8:	d8800215 	stw	r2,8(sp)
  205fec:	d8802604 	addi	r2,sp,152
  205ff0:	d8800115 	stw	r2,4(sp)
  205ff4:	d8802a17 	ldw	r2,168(sp)
  205ff8:	d9403617 	ldw	r5,216(sp)
  205ffc:	d9002d17 	ldw	r4,180(sp)
  206000:	d8800015 	stw	r2,0(sp)
  206004:	01c000c4 	movi	r7,3
  206008:	980d883a 	mov	r6,r19
  20600c:	da003d15 	stw	r8,244(sp)
  206010:	02067880 	call	206788 <_dtoa_r>
  206014:	d8c02a17 	ldw	r3,168(sp)
  206018:	da003d17 	ldw	r8,244(sp)
  20601c:	1021883a 	mov	r16,r2
  206020:	10f9883a 	add	fp,r2,r3
  206024:	81000007 	ldb	r4,0(r16)
  206028:	00800c04 	movi	r2,48
  20602c:	20805e26 	beq	r4,r2,2061a8 <___vfprintf_internal_r+0x2150>
  206030:	d8c02617 	ldw	r3,152(sp)
  206034:	e0f9883a 	add	fp,fp,r3
  206038:	003e0a06 	br	205864 <_gp+0xffdf3c50>
  20603c:	00c00b44 	movi	r3,45
  206040:	24e0003c 	xorhi	r19,r4,32768
  206044:	d8c02905 	stb	r3,164(sp)
  206048:	003de906 	br	2057f0 <_gp+0xffdf3bdc>
  20604c:	d8c03217 	ldw	r3,200(sp)
  206050:	00c07a0e 	bge	zero,r3,20623c <___vfprintf_internal_r+0x21e4>
  206054:	00800044 	movi	r2,1
  206058:	d9003317 	ldw	r4,204(sp)
  20605c:	1105883a 	add	r2,r2,r4
  206060:	d8802b15 	stw	r2,172(sp)
  206064:	10004e16 	blt	r2,zero,2061a0 <___vfprintf_internal_r+0x2148>
  206068:	044019c4 	movi	r17,103
  20606c:	003e2106 	br	2058f4 <_gp+0xffdf3ce0>
  206070:	d9002a17 	ldw	r4,168(sp)
  206074:	d8802104 	addi	r2,sp,132
  206078:	d8800315 	stw	r2,12(sp)
  20607c:	d9000015 	stw	r4,0(sp)
  206080:	d8802504 	addi	r2,sp,148
  206084:	d9403617 	ldw	r5,216(sp)
  206088:	d9002d17 	ldw	r4,180(sp)
  20608c:	d8800215 	stw	r2,8(sp)
  206090:	d8802604 	addi	r2,sp,152
  206094:	d8800115 	stw	r2,4(sp)
  206098:	01c000c4 	movi	r7,3
  20609c:	980d883a 	mov	r6,r19
  2060a0:	da003d15 	stw	r8,244(sp)
  2060a4:	02067880 	call	206788 <_dtoa_r>
  2060a8:	d8c02a17 	ldw	r3,168(sp)
  2060ac:	da003d17 	ldw	r8,244(sp)
  2060b0:	1021883a 	mov	r16,r2
  2060b4:	00801184 	movi	r2,70
  2060b8:	80f9883a 	add	fp,r16,r3
  2060bc:	88bfd926 	beq	r17,r2,206024 <_gp+0xffdf4410>
  2060c0:	003de806 	br	205864 <_gp+0xffdf3c50>
  2060c4:	d9002a17 	ldw	r4,168(sp)
  2060c8:	00c04d0e 	bge	zero,r3,206200 <___vfprintf_internal_r+0x21a8>
  2060cc:	2000441e 	bne	r4,zero,2061e0 <___vfprintf_internal_r+0x2188>
  2060d0:	9480004c 	andi	r18,r18,1
  2060d4:	9000421e 	bne	r18,zero,2061e0 <___vfprintf_internal_r+0x2188>
  2060d8:	1805883a 	mov	r2,r3
  2060dc:	18006f16 	blt	r3,zero,20629c <___vfprintf_internal_r+0x2244>
  2060e0:	d8c03217 	ldw	r3,200(sp)
  2060e4:	d8c02b15 	stw	r3,172(sp)
  2060e8:	003e0206 	br	2058f4 <_gp+0xffdf3ce0>
  2060ec:	df0022c4 	addi	fp,sp,139
  2060f0:	dc002a15 	stw	r16,168(sp)
  2060f4:	4027883a 	mov	r19,r8
  2060f8:	e021883a 	mov	r16,fp
  2060fc:	b009883a 	mov	r4,r22
  206100:	01400284 	movi	r5,10
  206104:	02031740 	call	203174 <__modsi3>
  206108:	10800c04 	addi	r2,r2,48
  20610c:	843fffc4 	addi	r16,r16,-1
  206110:	b009883a 	mov	r4,r22
  206114:	01400284 	movi	r5,10
  206118:	80800005 	stb	r2,0(r16)
  20611c:	02030f00 	call	2030f0 <__divsi3>
  206120:	102d883a 	mov	r22,r2
  206124:	00800244 	movi	r2,9
  206128:	15bff416 	blt	r2,r22,2060fc <_gp+0xffdf44e8>
  20612c:	9811883a 	mov	r8,r19
  206130:	b0800c04 	addi	r2,r22,48
  206134:	8027883a 	mov	r19,r16
  206138:	997fffc4 	addi	r5,r19,-1
  20613c:	98bfffc5 	stb	r2,-1(r19)
  206140:	dc002a17 	ldw	r16,168(sp)
  206144:	2f006d2e 	bgeu	r5,fp,2062fc <___vfprintf_internal_r+0x22a4>
  206148:	d9c02384 	addi	r7,sp,142
  20614c:	3ccfc83a 	sub	r7,r7,r19
  206150:	d9002344 	addi	r4,sp,141
  206154:	e1cf883a 	add	r7,fp,r7
  206158:	00000106 	br	206160 <___vfprintf_internal_r+0x2108>
  20615c:	28800003 	ldbu	r2,0(r5)
  206160:	20800005 	stb	r2,0(r4)
  206164:	21000044 	addi	r4,r4,1
  206168:	29400044 	addi	r5,r5,1
  20616c:	393ffb1e 	bne	r7,r4,20615c <_gp+0xffdf4548>
  206170:	d8802304 	addi	r2,sp,140
  206174:	14c5c83a 	sub	r2,r2,r19
  206178:	d8c02344 	addi	r3,sp,141
  20617c:	1885883a 	add	r2,r3,r2
  206180:	003f7006 	br	205f44 <_gp+0xffdf4330>
  206184:	0005883a 	mov	r2,zero
  206188:	003f0f06 	br	205dc8 <_gp+0xffdf41b4>
  20618c:	d8c03217 	ldw	r3,200(sp)
  206190:	18c00044 	addi	r3,r3,1
  206194:	d8c02b15 	stw	r3,172(sp)
  206198:	1805883a 	mov	r2,r3
  20619c:	183fb20e 	bge	r3,zero,206068 <_gp+0xffdf4454>
  2061a0:	0005883a 	mov	r2,zero
  2061a4:	003fb006 	br	206068 <_gp+0xffdf4454>
  2061a8:	d9003617 	ldw	r4,216(sp)
  2061ac:	000d883a 	mov	r6,zero
  2061b0:	000f883a 	mov	r7,zero
  2061b4:	980b883a 	mov	r5,r19
  2061b8:	d8c03c15 	stw	r3,240(sp)
  2061bc:	da003d15 	stw	r8,244(sp)
  2061c0:	020f7240 	call	20f724 <__eqdf2>
  2061c4:	d8c03c17 	ldw	r3,240(sp)
  2061c8:	da003d17 	ldw	r8,244(sp)
  2061cc:	103f9826 	beq	r2,zero,206030 <_gp+0xffdf441c>
  2061d0:	00800044 	movi	r2,1
  2061d4:	10c7c83a 	sub	r3,r2,r3
  2061d8:	d8c02615 	stw	r3,152(sp)
  2061dc:	003f9506 	br	206034 <_gp+0xffdf4420>
  2061e0:	d9002a17 	ldw	r4,168(sp)
  2061e4:	d8c03217 	ldw	r3,200(sp)
  2061e8:	20800044 	addi	r2,r4,1
  2061ec:	1885883a 	add	r2,r3,r2
  2061f0:	d8802b15 	stw	r2,172(sp)
  2061f4:	103dbf0e 	bge	r2,zero,2058f4 <_gp+0xffdf3ce0>
  2061f8:	0005883a 	mov	r2,zero
  2061fc:	003dbd06 	br	2058f4 <_gp+0xffdf3ce0>
  206200:	2000201e 	bne	r4,zero,206284 <___vfprintf_internal_r+0x222c>
  206204:	9480004c 	andi	r18,r18,1
  206208:	90001e1e 	bne	r18,zero,206284 <___vfprintf_internal_r+0x222c>
  20620c:	00800044 	movi	r2,1
  206210:	d8802b15 	stw	r2,172(sp)
  206214:	003db706 	br	2058f4 <_gp+0xffdf3ce0>
  206218:	00800b44 	movi	r2,45
  20621c:	05adc83a 	sub	r22,zero,r22
  206220:	d8802305 	stb	r2,140(sp)
  206224:	003f3f06 	br	205f24 <_gp+0xffdf4310>
  206228:	0005883a 	mov	r2,zero
  20622c:	003f5206 	br	205f78 <_gp+0xffdf4364>
  206230:	90a4703a 	and	r18,r18,r2
  206234:	903f4e26 	beq	r18,zero,205f70 <_gp+0xffdf435c>
  206238:	003f4a06 	br	205f64 <_gp+0xffdf4350>
  20623c:	00800084 	movi	r2,2
  206240:	10c5c83a 	sub	r2,r2,r3
  206244:	003f8406 	br	206058 <_gp+0xffdf4444>
  206248:	d9402e17 	ldw	r5,184(sp)
  20624c:	d9002e17 	ldw	r4,184(sp)
  206250:	ac400043 	ldbu	r17,1(r21)
  206254:	29400017 	ldw	r5,0(r5)
  206258:	20800104 	addi	r2,r4,4
  20625c:	d8802e15 	stw	r2,184(sp)
  206260:	d9402a15 	stw	r5,168(sp)
  206264:	182b883a 	mov	r21,r3
  206268:	283e7b0e 	bge	r5,zero,205c58 <_gp+0xffdf4044>
  20626c:	8c403fcc 	andi	r17,r17,255
  206270:	017fffc4 	movi	r5,-1
  206274:	8c40201c 	xori	r17,r17,128
  206278:	d9402a15 	stw	r5,168(sp)
  20627c:	8c7fe004 	addi	r17,r17,-128
  206280:	0037d706 	br	2041e0 <_gp+0xffdf25cc>
  206284:	d8c02a17 	ldw	r3,168(sp)
  206288:	18c00084 	addi	r3,r3,2
  20628c:	d8c02b15 	stw	r3,172(sp)
  206290:	1805883a 	mov	r2,r3
  206294:	183d970e 	bge	r3,zero,2058f4 <_gp+0xffdf3ce0>
  206298:	003fd706 	br	2061f8 <_gp+0xffdf45e4>
  20629c:	0005883a 	mov	r2,zero
  2062a0:	003f8f06 	br	2060e0 <_gp+0xffdf44cc>
  2062a4:	9080004c 	andi	r2,r18,1
  2062a8:	103f821e 	bne	r2,zero,2060b4 <_gp+0xffdf44a0>
  2062ac:	d8802117 	ldw	r2,132(sp)
  2062b0:	1405c83a 	sub	r2,r2,r16
  2062b4:	d8803315 	stw	r2,204(sp)
  2062b8:	b47ef426 	beq	r22,r17,205e8c <_gp+0xffdf4278>
  2062bc:	dd802617 	ldw	r22,152(sp)
  2062c0:	003f1206 	br	205f0c <_gp+0xffdf42f8>
  2062c4:	d8c02b03 	ldbu	r3,172(sp)
  2062c8:	d8c02785 	stb	r3,158(sp)
  2062cc:	0038df06 	br	20464c <_gp+0xffdf2a38>
  2062d0:	d8c02b03 	ldbu	r3,172(sp)
  2062d4:	d8c02785 	stb	r3,158(sp)
  2062d8:	0038aa06 	br	204584 <_gp+0xffdf2970>
  2062dc:	d8c02b03 	ldbu	r3,172(sp)
  2062e0:	d8c02785 	stb	r3,158(sp)
  2062e4:	003a4306 	br	204bf4 <_gp+0xffdf2fe0>
  2062e8:	d8c02b03 	ldbu	r3,172(sp)
  2062ec:	d8c02785 	stb	r3,158(sp)
  2062f0:	003af506 	br	204ec8 <_gp+0xffdf32b4>
  2062f4:	0005883a 	mov	r2,zero
  2062f8:	003d7b06 	br	2058e8 <_gp+0xffdf3cd4>
  2062fc:	d8802344 	addi	r2,sp,141
  206300:	003f1006 	br	205f44 <_gp+0xffdf4330>
  206304:	d8c02b03 	ldbu	r3,172(sp)
  206308:	d8c02785 	stb	r3,158(sp)
  20630c:	0038fd06 	br	204704 <_gp+0xffdf2af0>
  206310:	d8c02b03 	ldbu	r3,172(sp)
  206314:	d8c02785 	stb	r3,158(sp)
  206318:	003a9706 	br	204d78 <_gp+0xffdf3164>
  20631c:	d8c02b03 	ldbu	r3,172(sp)
  206320:	d8c02785 	stb	r3,158(sp)
  206324:	003a1806 	br	204b88 <_gp+0xffdf2f74>
  206328:	d8c02b03 	ldbu	r3,172(sp)
  20632c:	d8c02785 	stb	r3,158(sp)
  206330:	003abe06 	br	204e2c <_gp+0xffdf3218>

00206334 <__vfprintf_internal>:
  206334:	00801074 	movhi	r2,65
  206338:	10a70a04 	addi	r2,r2,-25560
  20633c:	300f883a 	mov	r7,r6
  206340:	280d883a 	mov	r6,r5
  206344:	200b883a 	mov	r5,r4
  206348:	11000017 	ldw	r4,0(r2)
  20634c:	02040581 	jmpi	204058 <___vfprintf_internal_r>

00206350 <__sbprintf>:
  206350:	2880030b 	ldhu	r2,12(r5)
  206354:	2ac01917 	ldw	r11,100(r5)
  206358:	2a80038b 	ldhu	r10,14(r5)
  20635c:	2a400717 	ldw	r9,28(r5)
  206360:	2a000917 	ldw	r8,36(r5)
  206364:	defee204 	addi	sp,sp,-1144
  206368:	00c10004 	movi	r3,1024
  20636c:	dc011a15 	stw	r16,1128(sp)
  206370:	10bfff4c 	andi	r2,r2,65533
  206374:	2821883a 	mov	r16,r5
  206378:	d8cb883a 	add	r5,sp,r3
  20637c:	dc811c15 	stw	r18,1136(sp)
  206380:	dc411b15 	stw	r17,1132(sp)
  206384:	dfc11d15 	stw	ra,1140(sp)
  206388:	2025883a 	mov	r18,r4
  20638c:	d881030d 	sth	r2,1036(sp)
  206390:	dac11915 	stw	r11,1124(sp)
  206394:	da81038d 	sth	r10,1038(sp)
  206398:	da410715 	stw	r9,1052(sp)
  20639c:	da010915 	stw	r8,1060(sp)
  2063a0:	dec10015 	stw	sp,1024(sp)
  2063a4:	dec10415 	stw	sp,1040(sp)
  2063a8:	d8c10215 	stw	r3,1032(sp)
  2063ac:	d8c10515 	stw	r3,1044(sp)
  2063b0:	d8010615 	stw	zero,1048(sp)
  2063b4:	02040580 	call	204058 <___vfprintf_internal_r>
  2063b8:	1023883a 	mov	r17,r2
  2063bc:	10000416 	blt	r2,zero,2063d0 <__sbprintf+0x80>
  2063c0:	d9410004 	addi	r5,sp,1024
  2063c4:	9009883a 	mov	r4,r18
  2063c8:	020802c0 	call	20802c <_fflush_r>
  2063cc:	10000d1e 	bne	r2,zero,206404 <__sbprintf+0xb4>
  2063d0:	d881030b 	ldhu	r2,1036(sp)
  2063d4:	1080100c 	andi	r2,r2,64
  2063d8:	10000326 	beq	r2,zero,2063e8 <__sbprintf+0x98>
  2063dc:	8080030b 	ldhu	r2,12(r16)
  2063e0:	10801014 	ori	r2,r2,64
  2063e4:	8080030d 	sth	r2,12(r16)
  2063e8:	8805883a 	mov	r2,r17
  2063ec:	dfc11d17 	ldw	ra,1140(sp)
  2063f0:	dc811c17 	ldw	r18,1136(sp)
  2063f4:	dc411b17 	ldw	r17,1132(sp)
  2063f8:	dc011a17 	ldw	r16,1128(sp)
  2063fc:	dec11e04 	addi	sp,sp,1144
  206400:	f800283a 	ret
  206404:	047fffc4 	movi	r17,-1
  206408:	003ff106 	br	2063d0 <_gp+0xffdf47bc>

0020640c <__swsetup_r>:
  20640c:	00801074 	movhi	r2,65
  206410:	defffd04 	addi	sp,sp,-12
  206414:	10a70a04 	addi	r2,r2,-25560
  206418:	dc400115 	stw	r17,4(sp)
  20641c:	2023883a 	mov	r17,r4
  206420:	11000017 	ldw	r4,0(r2)
  206424:	dc000015 	stw	r16,0(sp)
  206428:	dfc00215 	stw	ra,8(sp)
  20642c:	2821883a 	mov	r16,r5
  206430:	20000226 	beq	r4,zero,20643c <__swsetup_r+0x30>
  206434:	20800e17 	ldw	r2,56(r4)
  206438:	10003126 	beq	r2,zero,206500 <__swsetup_r+0xf4>
  20643c:	8080030b 	ldhu	r2,12(r16)
  206440:	10c0020c 	andi	r3,r2,8
  206444:	1009883a 	mov	r4,r2
  206448:	18000f26 	beq	r3,zero,206488 <__swsetup_r+0x7c>
  20644c:	80c00417 	ldw	r3,16(r16)
  206450:	18001526 	beq	r3,zero,2064a8 <__swsetup_r+0x9c>
  206454:	1100004c 	andi	r4,r2,1
  206458:	20001c1e 	bne	r4,zero,2064cc <__swsetup_r+0xc0>
  20645c:	1080008c 	andi	r2,r2,2
  206460:	1000291e 	bne	r2,zero,206508 <__swsetup_r+0xfc>
  206464:	80800517 	ldw	r2,20(r16)
  206468:	80800215 	stw	r2,8(r16)
  20646c:	18001c26 	beq	r3,zero,2064e0 <__swsetup_r+0xd4>
  206470:	0005883a 	mov	r2,zero
  206474:	dfc00217 	ldw	ra,8(sp)
  206478:	dc400117 	ldw	r17,4(sp)
  20647c:	dc000017 	ldw	r16,0(sp)
  206480:	dec00304 	addi	sp,sp,12
  206484:	f800283a 	ret
  206488:	2080040c 	andi	r2,r4,16
  20648c:	10002e26 	beq	r2,zero,206548 <__swsetup_r+0x13c>
  206490:	2080010c 	andi	r2,r4,4
  206494:	10001e1e 	bne	r2,zero,206510 <__swsetup_r+0x104>
  206498:	80c00417 	ldw	r3,16(r16)
  20649c:	20800214 	ori	r2,r4,8
  2064a0:	8080030d 	sth	r2,12(r16)
  2064a4:	183feb1e 	bne	r3,zero,206454 <_gp+0xffdf4840>
  2064a8:	1100a00c 	andi	r4,r2,640
  2064ac:	01408004 	movi	r5,512
  2064b0:	217fe826 	beq	r4,r5,206454 <_gp+0xffdf4840>
  2064b4:	800b883a 	mov	r5,r16
  2064b8:	8809883a 	mov	r4,r17
  2064bc:	0208fc80 	call	208fc8 <__smakebuf_r>
  2064c0:	8080030b 	ldhu	r2,12(r16)
  2064c4:	80c00417 	ldw	r3,16(r16)
  2064c8:	003fe206 	br	206454 <_gp+0xffdf4840>
  2064cc:	80800517 	ldw	r2,20(r16)
  2064d0:	80000215 	stw	zero,8(r16)
  2064d4:	0085c83a 	sub	r2,zero,r2
  2064d8:	80800615 	stw	r2,24(r16)
  2064dc:	183fe41e 	bne	r3,zero,206470 <_gp+0xffdf485c>
  2064e0:	80c0030b 	ldhu	r3,12(r16)
  2064e4:	0005883a 	mov	r2,zero
  2064e8:	1900200c 	andi	r4,r3,128
  2064ec:	203fe126 	beq	r4,zero,206474 <_gp+0xffdf4860>
  2064f0:	18c01014 	ori	r3,r3,64
  2064f4:	80c0030d 	sth	r3,12(r16)
  2064f8:	00bfffc4 	movi	r2,-1
  2064fc:	003fdd06 	br	206474 <_gp+0xffdf4860>
  206500:	02084180 	call	208418 <__sinit>
  206504:	003fcd06 	br	20643c <_gp+0xffdf4828>
  206508:	0005883a 	mov	r2,zero
  20650c:	003fd606 	br	206468 <_gp+0xffdf4854>
  206510:	81400c17 	ldw	r5,48(r16)
  206514:	28000626 	beq	r5,zero,206530 <__swsetup_r+0x124>
  206518:	80801004 	addi	r2,r16,64
  20651c:	28800326 	beq	r5,r2,20652c <__swsetup_r+0x120>
  206520:	8809883a 	mov	r4,r17
  206524:	020858c0 	call	20858c <_free_r>
  206528:	8100030b 	ldhu	r4,12(r16)
  20652c:	80000c15 	stw	zero,48(r16)
  206530:	80c00417 	ldw	r3,16(r16)
  206534:	00bff6c4 	movi	r2,-37
  206538:	1108703a 	and	r4,r2,r4
  20653c:	80000115 	stw	zero,4(r16)
  206540:	80c00015 	stw	r3,0(r16)
  206544:	003fd506 	br	20649c <_gp+0xffdf4888>
  206548:	00800244 	movi	r2,9
  20654c:	88800015 	stw	r2,0(r17)
  206550:	20801014 	ori	r2,r4,64
  206554:	8080030d 	sth	r2,12(r16)
  206558:	00bfffc4 	movi	r2,-1
  20655c:	003fc506 	br	206474 <_gp+0xffdf4860>

00206560 <quorem>:
  206560:	defff204 	addi	sp,sp,-56
  206564:	ddc00b15 	stw	r23,44(sp)
  206568:	20800417 	ldw	r2,16(r4)
  20656c:	2dc00417 	ldw	r23,16(r5)
  206570:	dfc00d15 	stw	ra,52(sp)
  206574:	df000c15 	stw	fp,48(sp)
  206578:	dd800a15 	stw	r22,40(sp)
  20657c:	dd400915 	stw	r21,36(sp)
  206580:	dd000815 	stw	r20,32(sp)
  206584:	dcc00715 	stw	r19,28(sp)
  206588:	dc800615 	stw	r18,24(sp)
  20658c:	dc400515 	stw	r17,20(sp)
  206590:	dc000415 	stw	r16,16(sp)
  206594:	15c07a16 	blt	r2,r23,206780 <quorem+0x220>
  206598:	bdffffc4 	addi	r23,r23,-1
  20659c:	bde9883a 	add	r20,r23,r23
  2065a0:	28c00504 	addi	r3,r5,20
  2065a4:	a529883a 	add	r20,r20,r20
  2065a8:	1d39883a 	add	fp,r3,r20
  2065ac:	24c00504 	addi	r19,r4,20
  2065b0:	d9400215 	stw	r5,8(sp)
  2065b4:	9d29883a 	add	r20,r19,r20
  2065b8:	e1400017 	ldw	r5,0(fp)
  2065bc:	d9000015 	stw	r4,0(sp)
  2065c0:	a1000017 	ldw	r4,0(r20)
  2065c4:	29400044 	addi	r5,r5,1
  2065c8:	d8c00115 	stw	r3,4(sp)
  2065cc:	dd000315 	stw	r20,12(sp)
  2065d0:	02031e80 	call	2031e8 <__udivsi3>
  2065d4:	1025883a 	mov	r18,r2
  2065d8:	10003026 	beq	r2,zero,20669c <quorem+0x13c>
  2065dc:	dc400117 	ldw	r17,4(sp)
  2065e0:	9829883a 	mov	r20,r19
  2065e4:	002d883a 	mov	r22,zero
  2065e8:	0021883a 	mov	r16,zero
  2065ec:	8d400017 	ldw	r21,0(r17)
  2065f0:	900b883a 	mov	r5,r18
  2065f4:	8c400104 	addi	r17,r17,4
  2065f8:	a93fffcc 	andi	r4,r21,65535
  2065fc:	02032a40 	call	2032a4 <__mulsi3>
  206600:	a808d43a 	srli	r4,r21,16
  206604:	900b883a 	mov	r5,r18
  206608:	15ad883a 	add	r22,r2,r22
  20660c:	02032a40 	call	2032a4 <__mulsi3>
  206610:	a1000017 	ldw	r4,0(r20)
  206614:	b00cd43a 	srli	r6,r22,16
  206618:	b0ffffcc 	andi	r3,r22,65535
  20661c:	217fffcc 	andi	r5,r4,65535
  206620:	2c21883a 	add	r16,r5,r16
  206624:	80c7c83a 	sub	r3,r16,r3
  206628:	2008d43a 	srli	r4,r4,16
  20662c:	1185883a 	add	r2,r2,r6
  206630:	1821d43a 	srai	r16,r3,16
  206634:	117fffcc 	andi	r5,r2,65535
  206638:	2149c83a 	sub	r4,r4,r5
  20663c:	2421883a 	add	r16,r4,r16
  206640:	8008943a 	slli	r4,r16,16
  206644:	18ffffcc 	andi	r3,r3,65535
  206648:	102cd43a 	srli	r22,r2,16
  20664c:	20c8b03a 	or	r4,r4,r3
  206650:	a1000015 	stw	r4,0(r20)
  206654:	8021d43a 	srai	r16,r16,16
  206658:	a5000104 	addi	r20,r20,4
  20665c:	e47fe32e 	bgeu	fp,r17,2065ec <_gp+0xffdf49d8>
  206660:	d8c00317 	ldw	r3,12(sp)
  206664:	18800017 	ldw	r2,0(r3)
  206668:	10000c1e 	bne	r2,zero,20669c <quorem+0x13c>
  20666c:	18bfff04 	addi	r2,r3,-4
  206670:	9880082e 	bgeu	r19,r2,206694 <quorem+0x134>
  206674:	18ffff17 	ldw	r3,-4(r3)
  206678:	18000326 	beq	r3,zero,206688 <quorem+0x128>
  20667c:	00000506 	br	206694 <quorem+0x134>
  206680:	10c00017 	ldw	r3,0(r2)
  206684:	1800031e 	bne	r3,zero,206694 <quorem+0x134>
  206688:	10bfff04 	addi	r2,r2,-4
  20668c:	bdffffc4 	addi	r23,r23,-1
  206690:	98bffb36 	bltu	r19,r2,206680 <_gp+0xffdf4a6c>
  206694:	d8c00017 	ldw	r3,0(sp)
  206698:	1dc00415 	stw	r23,16(r3)
  20669c:	d9400217 	ldw	r5,8(sp)
  2066a0:	d9000017 	ldw	r4,0(sp)
  2066a4:	020a7c40 	call	20a7c4 <__mcmp>
  2066a8:	10002816 	blt	r2,zero,20674c <quorem+0x1ec>
  2066ac:	dc400117 	ldw	r17,4(sp)
  2066b0:	94800044 	addi	r18,r18,1
  2066b4:	980d883a 	mov	r6,r19
  2066b8:	0007883a 	mov	r3,zero
  2066bc:	31000017 	ldw	r4,0(r6)
  2066c0:	89400017 	ldw	r5,0(r17)
  2066c4:	31800104 	addi	r6,r6,4
  2066c8:	20bfffcc 	andi	r2,r4,65535
  2066cc:	10c7883a 	add	r3,r2,r3
  2066d0:	28bfffcc 	andi	r2,r5,65535
  2066d4:	1885c83a 	sub	r2,r3,r2
  2066d8:	280ad43a 	srli	r5,r5,16
  2066dc:	2008d43a 	srli	r4,r4,16
  2066e0:	1007d43a 	srai	r3,r2,16
  2066e4:	10bfffcc 	andi	r2,r2,65535
  2066e8:	2149c83a 	sub	r4,r4,r5
  2066ec:	20c9883a 	add	r4,r4,r3
  2066f0:	200a943a 	slli	r5,r4,16
  2066f4:	8c400104 	addi	r17,r17,4
  2066f8:	2007d43a 	srai	r3,r4,16
  2066fc:	2884b03a 	or	r2,r5,r2
  206700:	30bfff15 	stw	r2,-4(r6)
  206704:	e47fed2e 	bgeu	fp,r17,2066bc <_gp+0xffdf4aa8>
  206708:	bdc5883a 	add	r2,r23,r23
  20670c:	1085883a 	add	r2,r2,r2
  206710:	9887883a 	add	r3,r19,r2
  206714:	18800017 	ldw	r2,0(r3)
  206718:	10000c1e 	bne	r2,zero,20674c <quorem+0x1ec>
  20671c:	18bfff04 	addi	r2,r3,-4
  206720:	9880082e 	bgeu	r19,r2,206744 <quorem+0x1e4>
  206724:	18ffff17 	ldw	r3,-4(r3)
  206728:	18000326 	beq	r3,zero,206738 <quorem+0x1d8>
  20672c:	00000506 	br	206744 <quorem+0x1e4>
  206730:	10c00017 	ldw	r3,0(r2)
  206734:	1800031e 	bne	r3,zero,206744 <quorem+0x1e4>
  206738:	10bfff04 	addi	r2,r2,-4
  20673c:	bdffffc4 	addi	r23,r23,-1
  206740:	98bffb36 	bltu	r19,r2,206730 <_gp+0xffdf4b1c>
  206744:	d8c00017 	ldw	r3,0(sp)
  206748:	1dc00415 	stw	r23,16(r3)
  20674c:	9005883a 	mov	r2,r18
  206750:	dfc00d17 	ldw	ra,52(sp)
  206754:	df000c17 	ldw	fp,48(sp)
  206758:	ddc00b17 	ldw	r23,44(sp)
  20675c:	dd800a17 	ldw	r22,40(sp)
  206760:	dd400917 	ldw	r21,36(sp)
  206764:	dd000817 	ldw	r20,32(sp)
  206768:	dcc00717 	ldw	r19,28(sp)
  20676c:	dc800617 	ldw	r18,24(sp)
  206770:	dc400517 	ldw	r17,20(sp)
  206774:	dc000417 	ldw	r16,16(sp)
  206778:	dec00e04 	addi	sp,sp,56
  20677c:	f800283a 	ret
  206780:	0005883a 	mov	r2,zero
  206784:	003ff206 	br	206750 <_gp+0xffdf4b3c>

00206788 <_dtoa_r>:
  206788:	20801017 	ldw	r2,64(r4)
  20678c:	deffde04 	addi	sp,sp,-136
  206790:	df002015 	stw	fp,128(sp)
  206794:	dcc01b15 	stw	r19,108(sp)
  206798:	dc801a15 	stw	r18,104(sp)
  20679c:	dc401915 	stw	r17,100(sp)
  2067a0:	dc001815 	stw	r16,96(sp)
  2067a4:	dfc02115 	stw	ra,132(sp)
  2067a8:	ddc01f15 	stw	r23,124(sp)
  2067ac:	dd801e15 	stw	r22,120(sp)
  2067b0:	dd401d15 	stw	r21,116(sp)
  2067b4:	dd001c15 	stw	r20,112(sp)
  2067b8:	d9c00315 	stw	r7,12(sp)
  2067bc:	2039883a 	mov	fp,r4
  2067c0:	3023883a 	mov	r17,r6
  2067c4:	2825883a 	mov	r18,r5
  2067c8:	dc002417 	ldw	r16,144(sp)
  2067cc:	3027883a 	mov	r19,r6
  2067d0:	10000826 	beq	r2,zero,2067f4 <_dtoa_r+0x6c>
  2067d4:	21801117 	ldw	r6,68(r4)
  2067d8:	00c00044 	movi	r3,1
  2067dc:	100b883a 	mov	r5,r2
  2067e0:	1986983a 	sll	r3,r3,r6
  2067e4:	11800115 	stw	r6,4(r2)
  2067e8:	10c00215 	stw	r3,8(r2)
  2067ec:	0209ee80 	call	209ee8 <_Bfree>
  2067f0:	e0001015 	stw	zero,64(fp)
  2067f4:	88002e16 	blt	r17,zero,2068b0 <_dtoa_r+0x128>
  2067f8:	80000015 	stw	zero,0(r16)
  2067fc:	889ffc2c 	andhi	r2,r17,32752
  206800:	00dffc34 	movhi	r3,32752
  206804:	10c01c26 	beq	r2,r3,206878 <_dtoa_r+0xf0>
  206808:	000d883a 	mov	r6,zero
  20680c:	000f883a 	mov	r7,zero
  206810:	9009883a 	mov	r4,r18
  206814:	980b883a 	mov	r5,r19
  206818:	020f7240 	call	20f724 <__eqdf2>
  20681c:	10002b1e 	bne	r2,zero,2068cc <_dtoa_r+0x144>
  206820:	d9c02317 	ldw	r7,140(sp)
  206824:	00800044 	movi	r2,1
  206828:	38800015 	stw	r2,0(r7)
  20682c:	d8802517 	ldw	r2,148(sp)
  206830:	10019e26 	beq	r2,zero,206eac <_dtoa_r+0x724>
  206834:	d8c02517 	ldw	r3,148(sp)
  206838:	00800874 	movhi	r2,33
  20683c:	109b1544 	addi	r2,r2,27733
  206840:	18800015 	stw	r2,0(r3)
  206844:	10bfffc4 	addi	r2,r2,-1
  206848:	dfc02117 	ldw	ra,132(sp)
  20684c:	df002017 	ldw	fp,128(sp)
  206850:	ddc01f17 	ldw	r23,124(sp)
  206854:	dd801e17 	ldw	r22,120(sp)
  206858:	dd401d17 	ldw	r21,116(sp)
  20685c:	dd001c17 	ldw	r20,112(sp)
  206860:	dcc01b17 	ldw	r19,108(sp)
  206864:	dc801a17 	ldw	r18,104(sp)
  206868:	dc401917 	ldw	r17,100(sp)
  20686c:	dc001817 	ldw	r16,96(sp)
  206870:	dec02204 	addi	sp,sp,136
  206874:	f800283a 	ret
  206878:	d8c02317 	ldw	r3,140(sp)
  20687c:	0089c3c4 	movi	r2,9999
  206880:	18800015 	stw	r2,0(r3)
  206884:	90017726 	beq	r18,zero,206e64 <_dtoa_r+0x6dc>
  206888:	00800874 	movhi	r2,33
  20688c:	109b2104 	addi	r2,r2,27780
  206890:	d9002517 	ldw	r4,148(sp)
  206894:	203fec26 	beq	r4,zero,206848 <_gp+0xffdf4c34>
  206898:	10c000c7 	ldb	r3,3(r2)
  20689c:	1801781e 	bne	r3,zero,206e80 <_dtoa_r+0x6f8>
  2068a0:	10c000c4 	addi	r3,r2,3
  2068a4:	d9802517 	ldw	r6,148(sp)
  2068a8:	30c00015 	stw	r3,0(r6)
  2068ac:	003fe606 	br	206848 <_gp+0xffdf4c34>
  2068b0:	04e00034 	movhi	r19,32768
  2068b4:	9cffffc4 	addi	r19,r19,-1
  2068b8:	00800044 	movi	r2,1
  2068bc:	8ce6703a 	and	r19,r17,r19
  2068c0:	80800015 	stw	r2,0(r16)
  2068c4:	9823883a 	mov	r17,r19
  2068c8:	003fcc06 	br	2067fc <_gp+0xffdf4be8>
  2068cc:	d8800204 	addi	r2,sp,8
  2068d0:	d8800015 	stw	r2,0(sp)
  2068d4:	d9c00104 	addi	r7,sp,4
  2068d8:	900b883a 	mov	r5,r18
  2068dc:	980d883a 	mov	r6,r19
  2068e0:	e009883a 	mov	r4,fp
  2068e4:	8820d53a 	srli	r16,r17,20
  2068e8:	020ab900 	call	20ab90 <__d2b>
  2068ec:	d8800915 	stw	r2,36(sp)
  2068f0:	8001651e 	bne	r16,zero,206e88 <_dtoa_r+0x700>
  2068f4:	dd800217 	ldw	r22,8(sp)
  2068f8:	dc000117 	ldw	r16,4(sp)
  2068fc:	00800804 	movi	r2,32
  206900:	b421883a 	add	r16,r22,r16
  206904:	80c10c84 	addi	r3,r16,1074
  206908:	10c2d10e 	bge	r2,r3,207450 <_dtoa_r+0xcc8>
  20690c:	00801004 	movi	r2,64
  206910:	81010484 	addi	r4,r16,1042
  206914:	10c7c83a 	sub	r3,r2,r3
  206918:	9108d83a 	srl	r4,r18,r4
  20691c:	88e2983a 	sll	r17,r17,r3
  206920:	2448b03a 	or	r4,r4,r17
  206924:	0210c400 	call	210c40 <__floatunsidf>
  206928:	017f8434 	movhi	r5,65040
  20692c:	01800044 	movi	r6,1
  206930:	1009883a 	mov	r4,r2
  206934:	194b883a 	add	r5,r3,r5
  206938:	843fffc4 	addi	r16,r16,-1
  20693c:	d9801115 	stw	r6,68(sp)
  206940:	000d883a 	mov	r6,zero
  206944:	01cffe34 	movhi	r7,16376
  206948:	02101e80 	call	2101e8 <__subdf3>
  20694c:	0198dbf4 	movhi	r6,25455
  206950:	01cff4f4 	movhi	r7,16339
  206954:	3190d844 	addi	r6,r6,17249
  206958:	39e1e9c4 	addi	r7,r7,-30809
  20695c:	1009883a 	mov	r4,r2
  206960:	180b883a 	mov	r5,r3
  206964:	020f97c0 	call	20f97c <__muldf3>
  206968:	01a2d874 	movhi	r6,35681
  20696c:	01cff1f4 	movhi	r7,16327
  206970:	31b22cc4 	addi	r6,r6,-14157
  206974:	39e28a04 	addi	r7,r7,-30168
  206978:	180b883a 	mov	r5,r3
  20697c:	1009883a 	mov	r4,r2
  206980:	020e4a80 	call	20e4a8 <__adddf3>
  206984:	8009883a 	mov	r4,r16
  206988:	1029883a 	mov	r20,r2
  20698c:	1823883a 	mov	r17,r3
  206990:	0210b640 	call	210b64 <__floatsidf>
  206994:	019427f4 	movhi	r6,20639
  206998:	01cff4f4 	movhi	r7,16339
  20699c:	319e7ec4 	addi	r6,r6,31227
  2069a0:	39d104c4 	addi	r7,r7,17427
  2069a4:	1009883a 	mov	r4,r2
  2069a8:	180b883a 	mov	r5,r3
  2069ac:	020f97c0 	call	20f97c <__muldf3>
  2069b0:	100d883a 	mov	r6,r2
  2069b4:	180f883a 	mov	r7,r3
  2069b8:	a009883a 	mov	r4,r20
  2069bc:	880b883a 	mov	r5,r17
  2069c0:	020e4a80 	call	20e4a8 <__adddf3>
  2069c4:	1009883a 	mov	r4,r2
  2069c8:	180b883a 	mov	r5,r3
  2069cc:	1029883a 	mov	r20,r2
  2069d0:	1823883a 	mov	r17,r3
  2069d4:	0210ae40 	call	210ae4 <__fixdfsi>
  2069d8:	000d883a 	mov	r6,zero
  2069dc:	000f883a 	mov	r7,zero
  2069e0:	a009883a 	mov	r4,r20
  2069e4:	880b883a 	mov	r5,r17
  2069e8:	d8800515 	stw	r2,20(sp)
  2069ec:	020f8880 	call	20f888 <__ledf2>
  2069f0:	10028716 	blt	r2,zero,207410 <_dtoa_r+0xc88>
  2069f4:	d8c00517 	ldw	r3,20(sp)
  2069f8:	00800584 	movi	r2,22
  2069fc:	10c27536 	bltu	r2,r3,2073d4 <_dtoa_r+0xc4c>
  206a00:	180490fa 	slli	r2,r3,3
  206a04:	00c00874 	movhi	r3,33
  206a08:	18db3d04 	addi	r3,r3,27892
  206a0c:	1885883a 	add	r2,r3,r2
  206a10:	11000017 	ldw	r4,0(r2)
  206a14:	11400117 	ldw	r5,4(r2)
  206a18:	900d883a 	mov	r6,r18
  206a1c:	980f883a 	mov	r7,r19
  206a20:	020f7ac0 	call	20f7ac <__gedf2>
  206a24:	00828d0e 	bge	zero,r2,20745c <_dtoa_r+0xcd4>
  206a28:	d9000517 	ldw	r4,20(sp)
  206a2c:	d8000e15 	stw	zero,56(sp)
  206a30:	213fffc4 	addi	r4,r4,-1
  206a34:	d9000515 	stw	r4,20(sp)
  206a38:	b42dc83a 	sub	r22,r22,r16
  206a3c:	b5bfffc4 	addi	r22,r22,-1
  206a40:	b0026f16 	blt	r22,zero,207400 <_dtoa_r+0xc78>
  206a44:	d8000815 	stw	zero,32(sp)
  206a48:	d9c00517 	ldw	r7,20(sp)
  206a4c:	38026416 	blt	r7,zero,2073e0 <_dtoa_r+0xc58>
  206a50:	b1ed883a 	add	r22,r22,r7
  206a54:	d9c00d15 	stw	r7,52(sp)
  206a58:	d8000a15 	stw	zero,40(sp)
  206a5c:	d9800317 	ldw	r6,12(sp)
  206a60:	00800244 	movi	r2,9
  206a64:	11811436 	bltu	r2,r6,206eb8 <_dtoa_r+0x730>
  206a68:	00800144 	movi	r2,5
  206a6c:	1184e10e 	bge	r2,r6,207df4 <_dtoa_r+0x166c>
  206a70:	31bfff04 	addi	r6,r6,-4
  206a74:	d9800315 	stw	r6,12(sp)
  206a78:	0023883a 	mov	r17,zero
  206a7c:	d9800317 	ldw	r6,12(sp)
  206a80:	008000c4 	movi	r2,3
  206a84:	30836726 	beq	r6,r2,207824 <_dtoa_r+0x109c>
  206a88:	1183410e 	bge	r2,r6,207790 <_dtoa_r+0x1008>
  206a8c:	d9c00317 	ldw	r7,12(sp)
  206a90:	00800104 	movi	r2,4
  206a94:	38827c26 	beq	r7,r2,207488 <_dtoa_r+0xd00>
  206a98:	00800144 	movi	r2,5
  206a9c:	3884c41e 	bne	r7,r2,207db0 <_dtoa_r+0x1628>
  206aa0:	00800044 	movi	r2,1
  206aa4:	d8800b15 	stw	r2,44(sp)
  206aa8:	d8c00517 	ldw	r3,20(sp)
  206aac:	d9002217 	ldw	r4,136(sp)
  206ab0:	1907883a 	add	r3,r3,r4
  206ab4:	19800044 	addi	r6,r3,1
  206ab8:	d8c00c15 	stw	r3,48(sp)
  206abc:	d9800615 	stw	r6,24(sp)
  206ac0:	0183a40e 	bge	zero,r6,207954 <_dtoa_r+0x11cc>
  206ac4:	d9800617 	ldw	r6,24(sp)
  206ac8:	3021883a 	mov	r16,r6
  206acc:	e0001115 	stw	zero,68(fp)
  206ad0:	008005c4 	movi	r2,23
  206ad4:	1184c92e 	bgeu	r2,r6,207dfc <_dtoa_r+0x1674>
  206ad8:	00c00044 	movi	r3,1
  206adc:	00800104 	movi	r2,4
  206ae0:	1085883a 	add	r2,r2,r2
  206ae4:	11000504 	addi	r4,r2,20
  206ae8:	180b883a 	mov	r5,r3
  206aec:	18c00044 	addi	r3,r3,1
  206af0:	313ffb2e 	bgeu	r6,r4,206ae0 <_gp+0xffdf4ecc>
  206af4:	e1401115 	stw	r5,68(fp)
  206af8:	e009883a 	mov	r4,fp
  206afc:	0209e400 	call	209e40 <_Balloc>
  206b00:	d8800715 	stw	r2,28(sp)
  206b04:	e0801015 	stw	r2,64(fp)
  206b08:	00800384 	movi	r2,14
  206b0c:	1400f736 	bltu	r2,r16,206eec <_dtoa_r+0x764>
  206b10:	8800f626 	beq	r17,zero,206eec <_dtoa_r+0x764>
  206b14:	d9c00517 	ldw	r7,20(sp)
  206b18:	01c39a0e 	bge	zero,r7,207984 <_dtoa_r+0x11fc>
  206b1c:	388003cc 	andi	r2,r7,15
  206b20:	100490fa 	slli	r2,r2,3
  206b24:	382bd13a 	srai	r21,r7,4
  206b28:	00c00874 	movhi	r3,33
  206b2c:	18db3d04 	addi	r3,r3,27892
  206b30:	1885883a 	add	r2,r3,r2
  206b34:	a8c0040c 	andi	r3,r21,16
  206b38:	12400017 	ldw	r9,0(r2)
  206b3c:	12000117 	ldw	r8,4(r2)
  206b40:	18037926 	beq	r3,zero,207928 <_dtoa_r+0x11a0>
  206b44:	00800874 	movhi	r2,33
  206b48:	109b3304 	addi	r2,r2,27852
  206b4c:	11800817 	ldw	r6,32(r2)
  206b50:	11c00917 	ldw	r7,36(r2)
  206b54:	9009883a 	mov	r4,r18
  206b58:	980b883a 	mov	r5,r19
  206b5c:	da001715 	stw	r8,92(sp)
  206b60:	da401615 	stw	r9,88(sp)
  206b64:	020ed540 	call	20ed54 <__divdf3>
  206b68:	da001717 	ldw	r8,92(sp)
  206b6c:	da401617 	ldw	r9,88(sp)
  206b70:	ad4003cc 	andi	r21,r21,15
  206b74:	040000c4 	movi	r16,3
  206b78:	1023883a 	mov	r17,r2
  206b7c:	1829883a 	mov	r20,r3
  206b80:	a8001126 	beq	r21,zero,206bc8 <_dtoa_r+0x440>
  206b84:	05c00874 	movhi	r23,33
  206b88:	bddb3304 	addi	r23,r23,27852
  206b8c:	4805883a 	mov	r2,r9
  206b90:	4007883a 	mov	r3,r8
  206b94:	a980004c 	andi	r6,r21,1
  206b98:	1009883a 	mov	r4,r2
  206b9c:	a82bd07a 	srai	r21,r21,1
  206ba0:	180b883a 	mov	r5,r3
  206ba4:	30000426 	beq	r6,zero,206bb8 <_dtoa_r+0x430>
  206ba8:	b9800017 	ldw	r6,0(r23)
  206bac:	b9c00117 	ldw	r7,4(r23)
  206bb0:	84000044 	addi	r16,r16,1
  206bb4:	020f97c0 	call	20f97c <__muldf3>
  206bb8:	bdc00204 	addi	r23,r23,8
  206bbc:	a83ff51e 	bne	r21,zero,206b94 <_gp+0xffdf4f80>
  206bc0:	1013883a 	mov	r9,r2
  206bc4:	1811883a 	mov	r8,r3
  206bc8:	480d883a 	mov	r6,r9
  206bcc:	400f883a 	mov	r7,r8
  206bd0:	8809883a 	mov	r4,r17
  206bd4:	a00b883a 	mov	r5,r20
  206bd8:	020ed540 	call	20ed54 <__divdf3>
  206bdc:	d8800f15 	stw	r2,60(sp)
  206be0:	d8c01015 	stw	r3,64(sp)
  206be4:	d8c00e17 	ldw	r3,56(sp)
  206be8:	18000626 	beq	r3,zero,206c04 <_dtoa_r+0x47c>
  206bec:	d9000f17 	ldw	r4,60(sp)
  206bf0:	d9401017 	ldw	r5,64(sp)
  206bf4:	000d883a 	mov	r6,zero
  206bf8:	01cffc34 	movhi	r7,16368
  206bfc:	020f8880 	call	20f888 <__ledf2>
  206c00:	10040b16 	blt	r2,zero,207c30 <_dtoa_r+0x14a8>
  206c04:	8009883a 	mov	r4,r16
  206c08:	0210b640 	call	210b64 <__floatsidf>
  206c0c:	d9800f17 	ldw	r6,60(sp)
  206c10:	d9c01017 	ldw	r7,64(sp)
  206c14:	1009883a 	mov	r4,r2
  206c18:	180b883a 	mov	r5,r3
  206c1c:	020f97c0 	call	20f97c <__muldf3>
  206c20:	000d883a 	mov	r6,zero
  206c24:	01d00734 	movhi	r7,16412
  206c28:	1009883a 	mov	r4,r2
  206c2c:	180b883a 	mov	r5,r3
  206c30:	020e4a80 	call	20e4a8 <__adddf3>
  206c34:	1021883a 	mov	r16,r2
  206c38:	d8800617 	ldw	r2,24(sp)
  206c3c:	047f3034 	movhi	r17,64704
  206c40:	1c63883a 	add	r17,r3,r17
  206c44:	10031826 	beq	r2,zero,2078a8 <_dtoa_r+0x1120>
  206c48:	d8c00517 	ldw	r3,20(sp)
  206c4c:	db000617 	ldw	r12,24(sp)
  206c50:	d8c01315 	stw	r3,76(sp)
  206c54:	d9000b17 	ldw	r4,44(sp)
  206c58:	20038f26 	beq	r4,zero,207a98 <_dtoa_r+0x1310>
  206c5c:	60bfffc4 	addi	r2,r12,-1
  206c60:	100490fa 	slli	r2,r2,3
  206c64:	00c00874 	movhi	r3,33
  206c68:	18db3d04 	addi	r3,r3,27892
  206c6c:	1885883a 	add	r2,r3,r2
  206c70:	11800017 	ldw	r6,0(r2)
  206c74:	11c00117 	ldw	r7,4(r2)
  206c78:	d8800717 	ldw	r2,28(sp)
  206c7c:	0009883a 	mov	r4,zero
  206c80:	014ff834 	movhi	r5,16352
  206c84:	db001615 	stw	r12,88(sp)
  206c88:	15c00044 	addi	r23,r2,1
  206c8c:	020ed540 	call	20ed54 <__divdf3>
  206c90:	800d883a 	mov	r6,r16
  206c94:	880f883a 	mov	r7,r17
  206c98:	1009883a 	mov	r4,r2
  206c9c:	180b883a 	mov	r5,r3
  206ca0:	02101e80 	call	2101e8 <__subdf3>
  206ca4:	d9401017 	ldw	r5,64(sp)
  206ca8:	d9000f17 	ldw	r4,60(sp)
  206cac:	102b883a 	mov	r21,r2
  206cb0:	d8c01215 	stw	r3,72(sp)
  206cb4:	0210ae40 	call	210ae4 <__fixdfsi>
  206cb8:	1009883a 	mov	r4,r2
  206cbc:	1029883a 	mov	r20,r2
  206cc0:	0210b640 	call	210b64 <__floatsidf>
  206cc4:	d9000f17 	ldw	r4,60(sp)
  206cc8:	d9401017 	ldw	r5,64(sp)
  206ccc:	100d883a 	mov	r6,r2
  206cd0:	180f883a 	mov	r7,r3
  206cd4:	02101e80 	call	2101e8 <__subdf3>
  206cd8:	1823883a 	mov	r17,r3
  206cdc:	d8c00717 	ldw	r3,28(sp)
  206ce0:	d9401217 	ldw	r5,72(sp)
  206ce4:	a2000c04 	addi	r8,r20,48
  206ce8:	1021883a 	mov	r16,r2
  206cec:	1a000005 	stb	r8,0(r3)
  206cf0:	800d883a 	mov	r6,r16
  206cf4:	880f883a 	mov	r7,r17
  206cf8:	a809883a 	mov	r4,r21
  206cfc:	4029883a 	mov	r20,r8
  206d00:	020f7ac0 	call	20f7ac <__gedf2>
  206d04:	00841d16 	blt	zero,r2,207d7c <_dtoa_r+0x15f4>
  206d08:	800d883a 	mov	r6,r16
  206d0c:	880f883a 	mov	r7,r17
  206d10:	0009883a 	mov	r4,zero
  206d14:	014ffc34 	movhi	r5,16368
  206d18:	02101e80 	call	2101e8 <__subdf3>
  206d1c:	d9401217 	ldw	r5,72(sp)
  206d20:	100d883a 	mov	r6,r2
  206d24:	180f883a 	mov	r7,r3
  206d28:	a809883a 	mov	r4,r21
  206d2c:	020f7ac0 	call	20f7ac <__gedf2>
  206d30:	db001617 	ldw	r12,88(sp)
  206d34:	00840e16 	blt	zero,r2,207d70 <_dtoa_r+0x15e8>
  206d38:	00800044 	movi	r2,1
  206d3c:	13006b0e 	bge	r2,r12,206eec <_dtoa_r+0x764>
  206d40:	d9000717 	ldw	r4,28(sp)
  206d44:	dd800f15 	stw	r22,60(sp)
  206d48:	dcc01015 	stw	r19,64(sp)
  206d4c:	2319883a 	add	r12,r4,r12
  206d50:	dcc01217 	ldw	r19,72(sp)
  206d54:	602d883a 	mov	r22,r12
  206d58:	dc801215 	stw	r18,72(sp)
  206d5c:	b825883a 	mov	r18,r23
  206d60:	00000906 	br	206d88 <_dtoa_r+0x600>
  206d64:	02101e80 	call	2101e8 <__subdf3>
  206d68:	a80d883a 	mov	r6,r21
  206d6c:	980f883a 	mov	r7,r19
  206d70:	1009883a 	mov	r4,r2
  206d74:	180b883a 	mov	r5,r3
  206d78:	020f8880 	call	20f888 <__ledf2>
  206d7c:	1003e816 	blt	r2,zero,207d20 <_dtoa_r+0x1598>
  206d80:	b825883a 	mov	r18,r23
  206d84:	bd83e926 	beq	r23,r22,207d2c <_dtoa_r+0x15a4>
  206d88:	a809883a 	mov	r4,r21
  206d8c:	980b883a 	mov	r5,r19
  206d90:	000d883a 	mov	r6,zero
  206d94:	01d00934 	movhi	r7,16420
  206d98:	020f97c0 	call	20f97c <__muldf3>
  206d9c:	000d883a 	mov	r6,zero
  206da0:	01d00934 	movhi	r7,16420
  206da4:	8009883a 	mov	r4,r16
  206da8:	880b883a 	mov	r5,r17
  206dac:	102b883a 	mov	r21,r2
  206db0:	1827883a 	mov	r19,r3
  206db4:	020f97c0 	call	20f97c <__muldf3>
  206db8:	180b883a 	mov	r5,r3
  206dbc:	1009883a 	mov	r4,r2
  206dc0:	1821883a 	mov	r16,r3
  206dc4:	1023883a 	mov	r17,r2
  206dc8:	0210ae40 	call	210ae4 <__fixdfsi>
  206dcc:	1009883a 	mov	r4,r2
  206dd0:	1029883a 	mov	r20,r2
  206dd4:	0210b640 	call	210b64 <__floatsidf>
  206dd8:	8809883a 	mov	r4,r17
  206ddc:	800b883a 	mov	r5,r16
  206de0:	100d883a 	mov	r6,r2
  206de4:	180f883a 	mov	r7,r3
  206de8:	02101e80 	call	2101e8 <__subdf3>
  206dec:	a5000c04 	addi	r20,r20,48
  206df0:	a80d883a 	mov	r6,r21
  206df4:	980f883a 	mov	r7,r19
  206df8:	1009883a 	mov	r4,r2
  206dfc:	180b883a 	mov	r5,r3
  206e00:	95000005 	stb	r20,0(r18)
  206e04:	1021883a 	mov	r16,r2
  206e08:	1823883a 	mov	r17,r3
  206e0c:	020f8880 	call	20f888 <__ledf2>
  206e10:	bdc00044 	addi	r23,r23,1
  206e14:	800d883a 	mov	r6,r16
  206e18:	880f883a 	mov	r7,r17
  206e1c:	0009883a 	mov	r4,zero
  206e20:	014ffc34 	movhi	r5,16368
  206e24:	103fcf0e 	bge	r2,zero,206d64 <_gp+0xffdf5150>
  206e28:	d8c01317 	ldw	r3,76(sp)
  206e2c:	d8c00515 	stw	r3,20(sp)
  206e30:	d9400917 	ldw	r5,36(sp)
  206e34:	e009883a 	mov	r4,fp
  206e38:	0209ee80 	call	209ee8 <_Bfree>
  206e3c:	d9000517 	ldw	r4,20(sp)
  206e40:	d9802317 	ldw	r6,140(sp)
  206e44:	d9c02517 	ldw	r7,148(sp)
  206e48:	b8000005 	stb	zero,0(r23)
  206e4c:	20800044 	addi	r2,r4,1
  206e50:	30800015 	stw	r2,0(r6)
  206e54:	3802aa26 	beq	r7,zero,207900 <_dtoa_r+0x1178>
  206e58:	3dc00015 	stw	r23,0(r7)
  206e5c:	d8800717 	ldw	r2,28(sp)
  206e60:	003e7906 	br	206848 <_gp+0xffdf4c34>
  206e64:	00800434 	movhi	r2,16
  206e68:	10bfffc4 	addi	r2,r2,-1
  206e6c:	88a2703a 	and	r17,r17,r2
  206e70:	883e851e 	bne	r17,zero,206888 <_gp+0xffdf4c74>
  206e74:	00800874 	movhi	r2,33
  206e78:	109b1e04 	addi	r2,r2,27768
  206e7c:	003e8406 	br	206890 <_gp+0xffdf4c7c>
  206e80:	10c00204 	addi	r3,r2,8
  206e84:	003e8706 	br	2068a4 <_gp+0xffdf4c90>
  206e88:	01400434 	movhi	r5,16
  206e8c:	297fffc4 	addi	r5,r5,-1
  206e90:	994a703a 	and	r5,r19,r5
  206e94:	9009883a 	mov	r4,r18
  206e98:	843f0044 	addi	r16,r16,-1023
  206e9c:	294ffc34 	orhi	r5,r5,16368
  206ea0:	dd800217 	ldw	r22,8(sp)
  206ea4:	d8001115 	stw	zero,68(sp)
  206ea8:	003ea506 	br	206940 <_gp+0xffdf4d2c>
  206eac:	00800874 	movhi	r2,33
  206eb0:	109b1504 	addi	r2,r2,27732
  206eb4:	003e6406 	br	206848 <_gp+0xffdf4c34>
  206eb8:	e0001115 	stw	zero,68(fp)
  206ebc:	000b883a 	mov	r5,zero
  206ec0:	e009883a 	mov	r4,fp
  206ec4:	0209e400 	call	209e40 <_Balloc>
  206ec8:	01bfffc4 	movi	r6,-1
  206ecc:	01c00044 	movi	r7,1
  206ed0:	d8800715 	stw	r2,28(sp)
  206ed4:	d9800c15 	stw	r6,48(sp)
  206ed8:	e0801015 	stw	r2,64(fp)
  206edc:	d8000315 	stw	zero,12(sp)
  206ee0:	d9c00b15 	stw	r7,44(sp)
  206ee4:	d9800615 	stw	r6,24(sp)
  206ee8:	d8002215 	stw	zero,136(sp)
  206eec:	d8800117 	ldw	r2,4(sp)
  206ef0:	10008916 	blt	r2,zero,207118 <_dtoa_r+0x990>
  206ef4:	d9000517 	ldw	r4,20(sp)
  206ef8:	00c00384 	movi	r3,14
  206efc:	19008616 	blt	r3,r4,207118 <_dtoa_r+0x990>
  206f00:	200490fa 	slli	r2,r4,3
  206f04:	00c00874 	movhi	r3,33
  206f08:	d9802217 	ldw	r6,136(sp)
  206f0c:	18db3d04 	addi	r3,r3,27892
  206f10:	1885883a 	add	r2,r3,r2
  206f14:	14000017 	ldw	r16,0(r2)
  206f18:	14400117 	ldw	r17,4(r2)
  206f1c:	30016316 	blt	r6,zero,2074ac <_dtoa_r+0xd24>
  206f20:	800d883a 	mov	r6,r16
  206f24:	880f883a 	mov	r7,r17
  206f28:	9009883a 	mov	r4,r18
  206f2c:	980b883a 	mov	r5,r19
  206f30:	020ed540 	call	20ed54 <__divdf3>
  206f34:	180b883a 	mov	r5,r3
  206f38:	1009883a 	mov	r4,r2
  206f3c:	0210ae40 	call	210ae4 <__fixdfsi>
  206f40:	1009883a 	mov	r4,r2
  206f44:	102b883a 	mov	r21,r2
  206f48:	0210b640 	call	210b64 <__floatsidf>
  206f4c:	800d883a 	mov	r6,r16
  206f50:	880f883a 	mov	r7,r17
  206f54:	1009883a 	mov	r4,r2
  206f58:	180b883a 	mov	r5,r3
  206f5c:	020f97c0 	call	20f97c <__muldf3>
  206f60:	100d883a 	mov	r6,r2
  206f64:	180f883a 	mov	r7,r3
  206f68:	9009883a 	mov	r4,r18
  206f6c:	980b883a 	mov	r5,r19
  206f70:	02101e80 	call	2101e8 <__subdf3>
  206f74:	d9c00717 	ldw	r7,28(sp)
  206f78:	1009883a 	mov	r4,r2
  206f7c:	a8800c04 	addi	r2,r21,48
  206f80:	38800005 	stb	r2,0(r7)
  206f84:	3dc00044 	addi	r23,r7,1
  206f88:	d9c00617 	ldw	r7,24(sp)
  206f8c:	01800044 	movi	r6,1
  206f90:	180b883a 	mov	r5,r3
  206f94:	2005883a 	mov	r2,r4
  206f98:	39803826 	beq	r7,r6,20707c <_dtoa_r+0x8f4>
  206f9c:	000d883a 	mov	r6,zero
  206fa0:	01d00934 	movhi	r7,16420
  206fa4:	020f97c0 	call	20f97c <__muldf3>
  206fa8:	000d883a 	mov	r6,zero
  206fac:	000f883a 	mov	r7,zero
  206fb0:	1009883a 	mov	r4,r2
  206fb4:	180b883a 	mov	r5,r3
  206fb8:	1025883a 	mov	r18,r2
  206fbc:	1827883a 	mov	r19,r3
  206fc0:	020f7240 	call	20f724 <__eqdf2>
  206fc4:	103f9a26 	beq	r2,zero,206e30 <_gp+0xffdf521c>
  206fc8:	d9c00617 	ldw	r7,24(sp)
  206fcc:	d8c00717 	ldw	r3,28(sp)
  206fd0:	b829883a 	mov	r20,r23
  206fd4:	38bfffc4 	addi	r2,r7,-1
  206fd8:	18ad883a 	add	r22,r3,r2
  206fdc:	00000a06 	br	207008 <_dtoa_r+0x880>
  206fe0:	020f97c0 	call	20f97c <__muldf3>
  206fe4:	000d883a 	mov	r6,zero
  206fe8:	000f883a 	mov	r7,zero
  206fec:	1009883a 	mov	r4,r2
  206ff0:	180b883a 	mov	r5,r3
  206ff4:	1025883a 	mov	r18,r2
  206ff8:	1827883a 	mov	r19,r3
  206ffc:	b829883a 	mov	r20,r23
  207000:	020f7240 	call	20f724 <__eqdf2>
  207004:	103f8a26 	beq	r2,zero,206e30 <_gp+0xffdf521c>
  207008:	800d883a 	mov	r6,r16
  20700c:	880f883a 	mov	r7,r17
  207010:	9009883a 	mov	r4,r18
  207014:	980b883a 	mov	r5,r19
  207018:	020ed540 	call	20ed54 <__divdf3>
  20701c:	180b883a 	mov	r5,r3
  207020:	1009883a 	mov	r4,r2
  207024:	0210ae40 	call	210ae4 <__fixdfsi>
  207028:	1009883a 	mov	r4,r2
  20702c:	102b883a 	mov	r21,r2
  207030:	0210b640 	call	210b64 <__floatsidf>
  207034:	800d883a 	mov	r6,r16
  207038:	880f883a 	mov	r7,r17
  20703c:	1009883a 	mov	r4,r2
  207040:	180b883a 	mov	r5,r3
  207044:	020f97c0 	call	20f97c <__muldf3>
  207048:	100d883a 	mov	r6,r2
  20704c:	180f883a 	mov	r7,r3
  207050:	9009883a 	mov	r4,r18
  207054:	980b883a 	mov	r5,r19
  207058:	02101e80 	call	2101e8 <__subdf3>
  20705c:	aa000c04 	addi	r8,r21,48
  207060:	a2000005 	stb	r8,0(r20)
  207064:	000d883a 	mov	r6,zero
  207068:	01d00934 	movhi	r7,16420
  20706c:	1009883a 	mov	r4,r2
  207070:	180b883a 	mov	r5,r3
  207074:	a5c00044 	addi	r23,r20,1
  207078:	b53fd91e 	bne	r22,r20,206fe0 <_gp+0xffdf53cc>
  20707c:	100d883a 	mov	r6,r2
  207080:	180f883a 	mov	r7,r3
  207084:	1009883a 	mov	r4,r2
  207088:	180b883a 	mov	r5,r3
  20708c:	020e4a80 	call	20e4a8 <__adddf3>
  207090:	100d883a 	mov	r6,r2
  207094:	180f883a 	mov	r7,r3
  207098:	8009883a 	mov	r4,r16
  20709c:	880b883a 	mov	r5,r17
  2070a0:	1027883a 	mov	r19,r2
  2070a4:	1825883a 	mov	r18,r3
  2070a8:	020f8880 	call	20f888 <__ledf2>
  2070ac:	10000816 	blt	r2,zero,2070d0 <_dtoa_r+0x948>
  2070b0:	980d883a 	mov	r6,r19
  2070b4:	900f883a 	mov	r7,r18
  2070b8:	8009883a 	mov	r4,r16
  2070bc:	880b883a 	mov	r5,r17
  2070c0:	020f7240 	call	20f724 <__eqdf2>
  2070c4:	103f5a1e 	bne	r2,zero,206e30 <_gp+0xffdf521c>
  2070c8:	ad40004c 	andi	r21,r21,1
  2070cc:	a83f5826 	beq	r21,zero,206e30 <_gp+0xffdf521c>
  2070d0:	bd3fffc3 	ldbu	r20,-1(r23)
  2070d4:	b8bfffc4 	addi	r2,r23,-1
  2070d8:	1007883a 	mov	r3,r2
  2070dc:	01400e44 	movi	r5,57
  2070e0:	d9800717 	ldw	r6,28(sp)
  2070e4:	00000506 	br	2070fc <_dtoa_r+0x974>
  2070e8:	18ffffc4 	addi	r3,r3,-1
  2070ec:	11824726 	beq	r2,r6,207a0c <_dtoa_r+0x1284>
  2070f0:	1d000003 	ldbu	r20,0(r3)
  2070f4:	102f883a 	mov	r23,r2
  2070f8:	10bfffc4 	addi	r2,r2,-1
  2070fc:	a1003fcc 	andi	r4,r20,255
  207100:	2100201c 	xori	r4,r4,128
  207104:	213fe004 	addi	r4,r4,-128
  207108:	217ff726 	beq	r4,r5,2070e8 <_gp+0xffdf54d4>
  20710c:	a2000044 	addi	r8,r20,1
  207110:	12000005 	stb	r8,0(r2)
  207114:	003f4606 	br	206e30 <_gp+0xffdf521c>
  207118:	d9000b17 	ldw	r4,44(sp)
  20711c:	2000c826 	beq	r4,zero,207440 <_dtoa_r+0xcb8>
  207120:	d9800317 	ldw	r6,12(sp)
  207124:	00c00044 	movi	r3,1
  207128:	1980f90e 	bge	r3,r6,207510 <_dtoa_r+0xd88>
  20712c:	d8800617 	ldw	r2,24(sp)
  207130:	d8c00a17 	ldw	r3,40(sp)
  207134:	157fffc4 	addi	r21,r2,-1
  207138:	1d41f316 	blt	r3,r21,207908 <_dtoa_r+0x1180>
  20713c:	1d6bc83a 	sub	r21,r3,r21
  207140:	d9c00617 	ldw	r7,24(sp)
  207144:	3802aa16 	blt	r7,zero,207bf0 <_dtoa_r+0x1468>
  207148:	dd000817 	ldw	r20,32(sp)
  20714c:	d8800617 	ldw	r2,24(sp)
  207150:	d8c00817 	ldw	r3,32(sp)
  207154:	01400044 	movi	r5,1
  207158:	e009883a 	mov	r4,fp
  20715c:	1887883a 	add	r3,r3,r2
  207160:	d8c00815 	stw	r3,32(sp)
  207164:	b0ad883a 	add	r22,r22,r2
  207168:	020a2740 	call	20a274 <__i2b>
  20716c:	1023883a 	mov	r17,r2
  207170:	a0000826 	beq	r20,zero,207194 <_dtoa_r+0xa0c>
  207174:	0580070e 	bge	zero,r22,207194 <_dtoa_r+0xa0c>
  207178:	a005883a 	mov	r2,r20
  20717c:	b500b916 	blt	r22,r20,207464 <_dtoa_r+0xcdc>
  207180:	d9000817 	ldw	r4,32(sp)
  207184:	a0a9c83a 	sub	r20,r20,r2
  207188:	b0adc83a 	sub	r22,r22,r2
  20718c:	2089c83a 	sub	r4,r4,r2
  207190:	d9000815 	stw	r4,32(sp)
  207194:	d9800a17 	ldw	r6,40(sp)
  207198:	0181810e 	bge	zero,r6,2077a0 <_dtoa_r+0x1018>
  20719c:	d9c00b17 	ldw	r7,44(sp)
  2071a0:	3800b326 	beq	r7,zero,207470 <_dtoa_r+0xce8>
  2071a4:	a800b226 	beq	r21,zero,207470 <_dtoa_r+0xce8>
  2071a8:	880b883a 	mov	r5,r17
  2071ac:	a80d883a 	mov	r6,r21
  2071b0:	e009883a 	mov	r4,fp
  2071b4:	020a53c0 	call	20a53c <__pow5mult>
  2071b8:	d9800917 	ldw	r6,36(sp)
  2071bc:	100b883a 	mov	r5,r2
  2071c0:	e009883a 	mov	r4,fp
  2071c4:	1023883a 	mov	r17,r2
  2071c8:	020a2b00 	call	20a2b0 <__multiply>
  2071cc:	1021883a 	mov	r16,r2
  2071d0:	d8800a17 	ldw	r2,40(sp)
  2071d4:	d9400917 	ldw	r5,36(sp)
  2071d8:	e009883a 	mov	r4,fp
  2071dc:	1545c83a 	sub	r2,r2,r21
  2071e0:	d8800a15 	stw	r2,40(sp)
  2071e4:	0209ee80 	call	209ee8 <_Bfree>
  2071e8:	d8c00a17 	ldw	r3,40(sp)
  2071ec:	18009f1e 	bne	r3,zero,20746c <_dtoa_r+0xce4>
  2071f0:	05c00044 	movi	r23,1
  2071f4:	e009883a 	mov	r4,fp
  2071f8:	b80b883a 	mov	r5,r23
  2071fc:	020a2740 	call	20a274 <__i2b>
  207200:	d9000d17 	ldw	r4,52(sp)
  207204:	102b883a 	mov	r21,r2
  207208:	2000ce26 	beq	r4,zero,207544 <_dtoa_r+0xdbc>
  20720c:	200d883a 	mov	r6,r4
  207210:	100b883a 	mov	r5,r2
  207214:	e009883a 	mov	r4,fp
  207218:	020a53c0 	call	20a53c <__pow5mult>
  20721c:	d9800317 	ldw	r6,12(sp)
  207220:	102b883a 	mov	r21,r2
  207224:	b981810e 	bge	r23,r6,20782c <_dtoa_r+0x10a4>
  207228:	0027883a 	mov	r19,zero
  20722c:	a8800417 	ldw	r2,16(r21)
  207230:	05c00804 	movi	r23,32
  207234:	10800104 	addi	r2,r2,4
  207238:	1085883a 	add	r2,r2,r2
  20723c:	1085883a 	add	r2,r2,r2
  207240:	a885883a 	add	r2,r21,r2
  207244:	11000017 	ldw	r4,0(r2)
  207248:	020a15c0 	call	20a15c <__hi0bits>
  20724c:	b885c83a 	sub	r2,r23,r2
  207250:	1585883a 	add	r2,r2,r22
  207254:	108007cc 	andi	r2,r2,31
  207258:	1000b326 	beq	r2,zero,207528 <_dtoa_r+0xda0>
  20725c:	00c00804 	movi	r3,32
  207260:	1887c83a 	sub	r3,r3,r2
  207264:	01000104 	movi	r4,4
  207268:	20c2cd0e 	bge	r4,r3,207da0 <_dtoa_r+0x1618>
  20726c:	00c00704 	movi	r3,28
  207270:	1885c83a 	sub	r2,r3,r2
  207274:	d8c00817 	ldw	r3,32(sp)
  207278:	a0a9883a 	add	r20,r20,r2
  20727c:	b0ad883a 	add	r22,r22,r2
  207280:	1887883a 	add	r3,r3,r2
  207284:	d8c00815 	stw	r3,32(sp)
  207288:	d9800817 	ldw	r6,32(sp)
  20728c:	0180040e 	bge	zero,r6,2072a0 <_dtoa_r+0xb18>
  207290:	800b883a 	mov	r5,r16
  207294:	e009883a 	mov	r4,fp
  207298:	020a67c0 	call	20a67c <__lshift>
  20729c:	1021883a 	mov	r16,r2
  2072a0:	0580050e 	bge	zero,r22,2072b8 <_dtoa_r+0xb30>
  2072a4:	a80b883a 	mov	r5,r21
  2072a8:	b00d883a 	mov	r6,r22
  2072ac:	e009883a 	mov	r4,fp
  2072b0:	020a67c0 	call	20a67c <__lshift>
  2072b4:	102b883a 	mov	r21,r2
  2072b8:	d9c00e17 	ldw	r7,56(sp)
  2072bc:	3801211e 	bne	r7,zero,207744 <_dtoa_r+0xfbc>
  2072c0:	d9800617 	ldw	r6,24(sp)
  2072c4:	0181380e 	bge	zero,r6,2077a8 <_dtoa_r+0x1020>
  2072c8:	d8c00b17 	ldw	r3,44(sp)
  2072cc:	1800ab1e 	bne	r3,zero,20757c <_dtoa_r+0xdf4>
  2072d0:	dc800717 	ldw	r18,28(sp)
  2072d4:	dcc00617 	ldw	r19,24(sp)
  2072d8:	9029883a 	mov	r20,r18
  2072dc:	00000206 	br	2072e8 <_dtoa_r+0xb60>
  2072e0:	0209f100 	call	209f10 <__multadd>
  2072e4:	1021883a 	mov	r16,r2
  2072e8:	a80b883a 	mov	r5,r21
  2072ec:	8009883a 	mov	r4,r16
  2072f0:	02065600 	call	206560 <quorem>
  2072f4:	10800c04 	addi	r2,r2,48
  2072f8:	90800005 	stb	r2,0(r18)
  2072fc:	94800044 	addi	r18,r18,1
  207300:	9507c83a 	sub	r3,r18,r20
  207304:	000f883a 	mov	r7,zero
  207308:	01800284 	movi	r6,10
  20730c:	800b883a 	mov	r5,r16
  207310:	e009883a 	mov	r4,fp
  207314:	1cfff216 	blt	r3,r19,2072e0 <_gp+0xffdf56cc>
  207318:	1011883a 	mov	r8,r2
  20731c:	d8800617 	ldw	r2,24(sp)
  207320:	0082370e 	bge	zero,r2,207c00 <_dtoa_r+0x1478>
  207324:	d9000717 	ldw	r4,28(sp)
  207328:	0025883a 	mov	r18,zero
  20732c:	20af883a 	add	r23,r4,r2
  207330:	01800044 	movi	r6,1
  207334:	800b883a 	mov	r5,r16
  207338:	e009883a 	mov	r4,fp
  20733c:	da001715 	stw	r8,92(sp)
  207340:	020a67c0 	call	20a67c <__lshift>
  207344:	a80b883a 	mov	r5,r21
  207348:	1009883a 	mov	r4,r2
  20734c:	d8800915 	stw	r2,36(sp)
  207350:	020a7c40 	call	20a7c4 <__mcmp>
  207354:	da001717 	ldw	r8,92(sp)
  207358:	0081800e 	bge	zero,r2,20795c <_dtoa_r+0x11d4>
  20735c:	b93fffc3 	ldbu	r4,-1(r23)
  207360:	b8bfffc4 	addi	r2,r23,-1
  207364:	1007883a 	mov	r3,r2
  207368:	01800e44 	movi	r6,57
  20736c:	d9c00717 	ldw	r7,28(sp)
  207370:	00000506 	br	207388 <_dtoa_r+0xc00>
  207374:	18ffffc4 	addi	r3,r3,-1
  207378:	11c12326 	beq	r2,r7,207808 <_dtoa_r+0x1080>
  20737c:	19000003 	ldbu	r4,0(r3)
  207380:	102f883a 	mov	r23,r2
  207384:	10bfffc4 	addi	r2,r2,-1
  207388:	21403fcc 	andi	r5,r4,255
  20738c:	2940201c 	xori	r5,r5,128
  207390:	297fe004 	addi	r5,r5,-128
  207394:	29bff726 	beq	r5,r6,207374 <_gp+0xffdf5760>
  207398:	21000044 	addi	r4,r4,1
  20739c:	11000005 	stb	r4,0(r2)
  2073a0:	a80b883a 	mov	r5,r21
  2073a4:	e009883a 	mov	r4,fp
  2073a8:	0209ee80 	call	209ee8 <_Bfree>
  2073ac:	883ea026 	beq	r17,zero,206e30 <_gp+0xffdf521c>
  2073b0:	90000426 	beq	r18,zero,2073c4 <_dtoa_r+0xc3c>
  2073b4:	94400326 	beq	r18,r17,2073c4 <_dtoa_r+0xc3c>
  2073b8:	900b883a 	mov	r5,r18
  2073bc:	e009883a 	mov	r4,fp
  2073c0:	0209ee80 	call	209ee8 <_Bfree>
  2073c4:	880b883a 	mov	r5,r17
  2073c8:	e009883a 	mov	r4,fp
  2073cc:	0209ee80 	call	209ee8 <_Bfree>
  2073d0:	003e9706 	br	206e30 <_gp+0xffdf521c>
  2073d4:	01800044 	movi	r6,1
  2073d8:	d9800e15 	stw	r6,56(sp)
  2073dc:	003d9606 	br	206a38 <_gp+0xffdf4e24>
  2073e0:	d8800817 	ldw	r2,32(sp)
  2073e4:	d8c00517 	ldw	r3,20(sp)
  2073e8:	d8000d15 	stw	zero,52(sp)
  2073ec:	10c5c83a 	sub	r2,r2,r3
  2073f0:	00c9c83a 	sub	r4,zero,r3
  2073f4:	d8800815 	stw	r2,32(sp)
  2073f8:	d9000a15 	stw	r4,40(sp)
  2073fc:	003d9706 	br	206a5c <_gp+0xffdf4e48>
  207400:	05adc83a 	sub	r22,zero,r22
  207404:	dd800815 	stw	r22,32(sp)
  207408:	002d883a 	mov	r22,zero
  20740c:	003d8e06 	br	206a48 <_gp+0xffdf4e34>
  207410:	d9000517 	ldw	r4,20(sp)
  207414:	0210b640 	call	210b64 <__floatsidf>
  207418:	100d883a 	mov	r6,r2
  20741c:	180f883a 	mov	r7,r3
  207420:	a009883a 	mov	r4,r20
  207424:	880b883a 	mov	r5,r17
  207428:	020f7240 	call	20f724 <__eqdf2>
  20742c:	103d7126 	beq	r2,zero,2069f4 <_gp+0xffdf4de0>
  207430:	d9c00517 	ldw	r7,20(sp)
  207434:	39ffffc4 	addi	r7,r7,-1
  207438:	d9c00515 	stw	r7,20(sp)
  20743c:	003d6d06 	br	2069f4 <_gp+0xffdf4de0>
  207440:	dd400a17 	ldw	r21,40(sp)
  207444:	dd000817 	ldw	r20,32(sp)
  207448:	0023883a 	mov	r17,zero
  20744c:	003f4806 	br	207170 <_gp+0xffdf555c>
  207450:	10e3c83a 	sub	r17,r2,r3
  207454:	9448983a 	sll	r4,r18,r17
  207458:	003d3206 	br	206924 <_gp+0xffdf4d10>
  20745c:	d8000e15 	stw	zero,56(sp)
  207460:	003d7506 	br	206a38 <_gp+0xffdf4e24>
  207464:	b005883a 	mov	r2,r22
  207468:	003f4506 	br	207180 <_gp+0xffdf556c>
  20746c:	dc000915 	stw	r16,36(sp)
  207470:	d9800a17 	ldw	r6,40(sp)
  207474:	d9400917 	ldw	r5,36(sp)
  207478:	e009883a 	mov	r4,fp
  20747c:	020a53c0 	call	20a53c <__pow5mult>
  207480:	1021883a 	mov	r16,r2
  207484:	003f5a06 	br	2071f0 <_gp+0xffdf55dc>
  207488:	01c00044 	movi	r7,1
  20748c:	d9c00b15 	stw	r7,44(sp)
  207490:	d8802217 	ldw	r2,136(sp)
  207494:	0081280e 	bge	zero,r2,207938 <_dtoa_r+0x11b0>
  207498:	100d883a 	mov	r6,r2
  20749c:	1021883a 	mov	r16,r2
  2074a0:	d8800c15 	stw	r2,48(sp)
  2074a4:	d8800615 	stw	r2,24(sp)
  2074a8:	003d8806 	br	206acc <_gp+0xffdf4eb8>
  2074ac:	d8800617 	ldw	r2,24(sp)
  2074b0:	00be9b16 	blt	zero,r2,206f20 <_gp+0xffdf530c>
  2074b4:	10010f1e 	bne	r2,zero,2078f4 <_dtoa_r+0x116c>
  2074b8:	880b883a 	mov	r5,r17
  2074bc:	000d883a 	mov	r6,zero
  2074c0:	01d00534 	movhi	r7,16404
  2074c4:	8009883a 	mov	r4,r16
  2074c8:	020f97c0 	call	20f97c <__muldf3>
  2074cc:	900d883a 	mov	r6,r18
  2074d0:	980f883a 	mov	r7,r19
  2074d4:	1009883a 	mov	r4,r2
  2074d8:	180b883a 	mov	r5,r3
  2074dc:	020f7ac0 	call	20f7ac <__gedf2>
  2074e0:	002b883a 	mov	r21,zero
  2074e4:	0023883a 	mov	r17,zero
  2074e8:	1000bf16 	blt	r2,zero,2077e8 <_dtoa_r+0x1060>
  2074ec:	d9802217 	ldw	r6,136(sp)
  2074f0:	ddc00717 	ldw	r23,28(sp)
  2074f4:	018c303a 	nor	r6,zero,r6
  2074f8:	d9800515 	stw	r6,20(sp)
  2074fc:	a80b883a 	mov	r5,r21
  207500:	e009883a 	mov	r4,fp
  207504:	0209ee80 	call	209ee8 <_Bfree>
  207508:	883e4926 	beq	r17,zero,206e30 <_gp+0xffdf521c>
  20750c:	003fad06 	br	2073c4 <_gp+0xffdf57b0>
  207510:	d9c01117 	ldw	r7,68(sp)
  207514:	3801bc26 	beq	r7,zero,207c08 <_dtoa_r+0x1480>
  207518:	10810cc4 	addi	r2,r2,1075
  20751c:	dd400a17 	ldw	r21,40(sp)
  207520:	dd000817 	ldw	r20,32(sp)
  207524:	003f0a06 	br	207150 <_gp+0xffdf553c>
  207528:	00800704 	movi	r2,28
  20752c:	d9000817 	ldw	r4,32(sp)
  207530:	a0a9883a 	add	r20,r20,r2
  207534:	b0ad883a 	add	r22,r22,r2
  207538:	2089883a 	add	r4,r4,r2
  20753c:	d9000815 	stw	r4,32(sp)
  207540:	003f5106 	br	207288 <_gp+0xffdf5674>
  207544:	d8c00317 	ldw	r3,12(sp)
  207548:	b8c1fc0e 	bge	r23,r3,207d3c <_dtoa_r+0x15b4>
  20754c:	0027883a 	mov	r19,zero
  207550:	b805883a 	mov	r2,r23
  207554:	003f3e06 	br	207250 <_gp+0xffdf563c>
  207558:	880b883a 	mov	r5,r17
  20755c:	e009883a 	mov	r4,fp
  207560:	000f883a 	mov	r7,zero
  207564:	01800284 	movi	r6,10
  207568:	0209f100 	call	209f10 <__multadd>
  20756c:	d9000c17 	ldw	r4,48(sp)
  207570:	1023883a 	mov	r17,r2
  207574:	0102040e 	bge	zero,r4,207d88 <_dtoa_r+0x1600>
  207578:	d9000615 	stw	r4,24(sp)
  20757c:	0500050e 	bge	zero,r20,207594 <_dtoa_r+0xe0c>
  207580:	880b883a 	mov	r5,r17
  207584:	a00d883a 	mov	r6,r20
  207588:	e009883a 	mov	r4,fp
  20758c:	020a67c0 	call	20a67c <__lshift>
  207590:	1023883a 	mov	r17,r2
  207594:	9801241e 	bne	r19,zero,207a28 <_dtoa_r+0x12a0>
  207598:	8829883a 	mov	r20,r17
  20759c:	d9000617 	ldw	r4,24(sp)
  2075a0:	dcc00717 	ldw	r19,28(sp)
  2075a4:	9480004c 	andi	r18,r18,1
  2075a8:	20bfffc4 	addi	r2,r4,-1
  2075ac:	9885883a 	add	r2,r19,r2
  2075b0:	d8800415 	stw	r2,16(sp)
  2075b4:	dc800615 	stw	r18,24(sp)
  2075b8:	a80b883a 	mov	r5,r21
  2075bc:	8009883a 	mov	r4,r16
  2075c0:	02065600 	call	206560 <quorem>
  2075c4:	880b883a 	mov	r5,r17
  2075c8:	8009883a 	mov	r4,r16
  2075cc:	102f883a 	mov	r23,r2
  2075d0:	020a7c40 	call	20a7c4 <__mcmp>
  2075d4:	a80b883a 	mov	r5,r21
  2075d8:	a00d883a 	mov	r6,r20
  2075dc:	e009883a 	mov	r4,fp
  2075e0:	102d883a 	mov	r22,r2
  2075e4:	020a8240 	call	20a824 <__mdiff>
  2075e8:	1007883a 	mov	r3,r2
  2075ec:	10800317 	ldw	r2,12(r2)
  2075f0:	bc800c04 	addi	r18,r23,48
  2075f4:	180b883a 	mov	r5,r3
  2075f8:	10004e1e 	bne	r2,zero,207734 <_dtoa_r+0xfac>
  2075fc:	8009883a 	mov	r4,r16
  207600:	d8c01615 	stw	r3,88(sp)
  207604:	020a7c40 	call	20a7c4 <__mcmp>
  207608:	d8c01617 	ldw	r3,88(sp)
  20760c:	e009883a 	mov	r4,fp
  207610:	d8801615 	stw	r2,88(sp)
  207614:	180b883a 	mov	r5,r3
  207618:	0209ee80 	call	209ee8 <_Bfree>
  20761c:	d8801617 	ldw	r2,88(sp)
  207620:	1000041e 	bne	r2,zero,207634 <_dtoa_r+0xeac>
  207624:	d9800317 	ldw	r6,12(sp)
  207628:	3000021e 	bne	r6,zero,207634 <_dtoa_r+0xeac>
  20762c:	d8c00617 	ldw	r3,24(sp)
  207630:	18003726 	beq	r3,zero,207710 <_dtoa_r+0xf88>
  207634:	b0002016 	blt	r22,zero,2076b8 <_dtoa_r+0xf30>
  207638:	b000041e 	bne	r22,zero,20764c <_dtoa_r+0xec4>
  20763c:	d9000317 	ldw	r4,12(sp)
  207640:	2000021e 	bne	r4,zero,20764c <_dtoa_r+0xec4>
  207644:	d8c00617 	ldw	r3,24(sp)
  207648:	18001b26 	beq	r3,zero,2076b8 <_dtoa_r+0xf30>
  20764c:	00810716 	blt	zero,r2,207a6c <_dtoa_r+0x12e4>
  207650:	d8c00417 	ldw	r3,16(sp)
  207654:	9d800044 	addi	r22,r19,1
  207658:	9c800005 	stb	r18,0(r19)
  20765c:	b02f883a 	mov	r23,r22
  207660:	98c10626 	beq	r19,r3,207a7c <_dtoa_r+0x12f4>
  207664:	800b883a 	mov	r5,r16
  207668:	000f883a 	mov	r7,zero
  20766c:	01800284 	movi	r6,10
  207670:	e009883a 	mov	r4,fp
  207674:	0209f100 	call	209f10 <__multadd>
  207678:	1021883a 	mov	r16,r2
  20767c:	000f883a 	mov	r7,zero
  207680:	01800284 	movi	r6,10
  207684:	880b883a 	mov	r5,r17
  207688:	e009883a 	mov	r4,fp
  20768c:	8d002526 	beq	r17,r20,207724 <_dtoa_r+0xf9c>
  207690:	0209f100 	call	209f10 <__multadd>
  207694:	a00b883a 	mov	r5,r20
  207698:	000f883a 	mov	r7,zero
  20769c:	01800284 	movi	r6,10
  2076a0:	e009883a 	mov	r4,fp
  2076a4:	1023883a 	mov	r17,r2
  2076a8:	0209f100 	call	209f10 <__multadd>
  2076ac:	1029883a 	mov	r20,r2
  2076b0:	b027883a 	mov	r19,r22
  2076b4:	003fc006 	br	2075b8 <_gp+0xffdf59a4>
  2076b8:	9011883a 	mov	r8,r18
  2076bc:	00800e0e 	bge	zero,r2,2076f8 <_dtoa_r+0xf70>
  2076c0:	800b883a 	mov	r5,r16
  2076c4:	01800044 	movi	r6,1
  2076c8:	e009883a 	mov	r4,fp
  2076cc:	da001715 	stw	r8,92(sp)
  2076d0:	020a67c0 	call	20a67c <__lshift>
  2076d4:	a80b883a 	mov	r5,r21
  2076d8:	1009883a 	mov	r4,r2
  2076dc:	1021883a 	mov	r16,r2
  2076e0:	020a7c40 	call	20a7c4 <__mcmp>
  2076e4:	da001717 	ldw	r8,92(sp)
  2076e8:	0081960e 	bge	zero,r2,207d44 <_dtoa_r+0x15bc>
  2076ec:	00800e44 	movi	r2,57
  2076f0:	40817026 	beq	r8,r2,207cb4 <_dtoa_r+0x152c>
  2076f4:	ba000c44 	addi	r8,r23,49
  2076f8:	8825883a 	mov	r18,r17
  2076fc:	9dc00044 	addi	r23,r19,1
  207700:	9a000005 	stb	r8,0(r19)
  207704:	a023883a 	mov	r17,r20
  207708:	dc000915 	stw	r16,36(sp)
  20770c:	003f2406 	br	2073a0 <_gp+0xffdf578c>
  207710:	00800e44 	movi	r2,57
  207714:	9011883a 	mov	r8,r18
  207718:	90816626 	beq	r18,r2,207cb4 <_dtoa_r+0x152c>
  20771c:	05bff516 	blt	zero,r22,2076f4 <_gp+0xffdf5ae0>
  207720:	003ff506 	br	2076f8 <_gp+0xffdf5ae4>
  207724:	0209f100 	call	209f10 <__multadd>
  207728:	1023883a 	mov	r17,r2
  20772c:	1029883a 	mov	r20,r2
  207730:	003fdf06 	br	2076b0 <_gp+0xffdf5a9c>
  207734:	e009883a 	mov	r4,fp
  207738:	0209ee80 	call	209ee8 <_Bfree>
  20773c:	00800044 	movi	r2,1
  207740:	003fbc06 	br	207634 <_gp+0xffdf5a20>
  207744:	a80b883a 	mov	r5,r21
  207748:	8009883a 	mov	r4,r16
  20774c:	020a7c40 	call	20a7c4 <__mcmp>
  207750:	103edb0e 	bge	r2,zero,2072c0 <_gp+0xffdf56ac>
  207754:	800b883a 	mov	r5,r16
  207758:	000f883a 	mov	r7,zero
  20775c:	01800284 	movi	r6,10
  207760:	e009883a 	mov	r4,fp
  207764:	0209f100 	call	209f10 <__multadd>
  207768:	1021883a 	mov	r16,r2
  20776c:	d8800517 	ldw	r2,20(sp)
  207770:	d8c00b17 	ldw	r3,44(sp)
  207774:	10bfffc4 	addi	r2,r2,-1
  207778:	d8800515 	stw	r2,20(sp)
  20777c:	183f761e 	bne	r3,zero,207558 <_gp+0xffdf5944>
  207780:	d9000c17 	ldw	r4,48(sp)
  207784:	0101730e 	bge	zero,r4,207d54 <_dtoa_r+0x15cc>
  207788:	d9000615 	stw	r4,24(sp)
  20778c:	003ed006 	br	2072d0 <_gp+0xffdf56bc>
  207790:	00800084 	movi	r2,2
  207794:	3081861e 	bne	r6,r2,207db0 <_dtoa_r+0x1628>
  207798:	d8000b15 	stw	zero,44(sp)
  20779c:	003f3c06 	br	207490 <_gp+0xffdf587c>
  2077a0:	dc000917 	ldw	r16,36(sp)
  2077a4:	003e9206 	br	2071f0 <_gp+0xffdf55dc>
  2077a8:	d9c00317 	ldw	r7,12(sp)
  2077ac:	00800084 	movi	r2,2
  2077b0:	11fec50e 	bge	r2,r7,2072c8 <_gp+0xffdf56b4>
  2077b4:	d9000617 	ldw	r4,24(sp)
  2077b8:	20013c1e 	bne	r4,zero,207cac <_dtoa_r+0x1524>
  2077bc:	a80b883a 	mov	r5,r21
  2077c0:	000f883a 	mov	r7,zero
  2077c4:	01800144 	movi	r6,5
  2077c8:	e009883a 	mov	r4,fp
  2077cc:	0209f100 	call	209f10 <__multadd>
  2077d0:	100b883a 	mov	r5,r2
  2077d4:	8009883a 	mov	r4,r16
  2077d8:	102b883a 	mov	r21,r2
  2077dc:	020a7c40 	call	20a7c4 <__mcmp>
  2077e0:	dc000915 	stw	r16,36(sp)
  2077e4:	00bf410e 	bge	zero,r2,2074ec <_gp+0xffdf58d8>
  2077e8:	d9c00717 	ldw	r7,28(sp)
  2077ec:	00800c44 	movi	r2,49
  2077f0:	38800005 	stb	r2,0(r7)
  2077f4:	d8800517 	ldw	r2,20(sp)
  2077f8:	3dc00044 	addi	r23,r7,1
  2077fc:	10800044 	addi	r2,r2,1
  207800:	d8800515 	stw	r2,20(sp)
  207804:	003f3d06 	br	2074fc <_gp+0xffdf58e8>
  207808:	d9800517 	ldw	r6,20(sp)
  20780c:	d9c00717 	ldw	r7,28(sp)
  207810:	00800c44 	movi	r2,49
  207814:	31800044 	addi	r6,r6,1
  207818:	d9800515 	stw	r6,20(sp)
  20781c:	38800005 	stb	r2,0(r7)
  207820:	003edf06 	br	2073a0 <_gp+0xffdf578c>
  207824:	d8000b15 	stw	zero,44(sp)
  207828:	003c9f06 	br	206aa8 <_gp+0xffdf4e94>
  20782c:	903e7e1e 	bne	r18,zero,207228 <_gp+0xffdf5614>
  207830:	00800434 	movhi	r2,16
  207834:	10bfffc4 	addi	r2,r2,-1
  207838:	9884703a 	and	r2,r19,r2
  20783c:	1000ea1e 	bne	r2,zero,207be8 <_dtoa_r+0x1460>
  207840:	9cdffc2c 	andhi	r19,r19,32752
  207844:	9800e826 	beq	r19,zero,207be8 <_dtoa_r+0x1460>
  207848:	d9c00817 	ldw	r7,32(sp)
  20784c:	b5800044 	addi	r22,r22,1
  207850:	04c00044 	movi	r19,1
  207854:	39c00044 	addi	r7,r7,1
  207858:	d9c00815 	stw	r7,32(sp)
  20785c:	d8800d17 	ldw	r2,52(sp)
  207860:	103e721e 	bne	r2,zero,20722c <_gp+0xffdf5618>
  207864:	00800044 	movi	r2,1
  207868:	003e7906 	br	207250 <_gp+0xffdf563c>
  20786c:	8009883a 	mov	r4,r16
  207870:	0210b640 	call	210b64 <__floatsidf>
  207874:	d9800f17 	ldw	r6,60(sp)
  207878:	d9c01017 	ldw	r7,64(sp)
  20787c:	1009883a 	mov	r4,r2
  207880:	180b883a 	mov	r5,r3
  207884:	020f97c0 	call	20f97c <__muldf3>
  207888:	000d883a 	mov	r6,zero
  20788c:	01d00734 	movhi	r7,16412
  207890:	1009883a 	mov	r4,r2
  207894:	180b883a 	mov	r5,r3
  207898:	020e4a80 	call	20e4a8 <__adddf3>
  20789c:	047f3034 	movhi	r17,64704
  2078a0:	1021883a 	mov	r16,r2
  2078a4:	1c63883a 	add	r17,r3,r17
  2078a8:	d9000f17 	ldw	r4,60(sp)
  2078ac:	d9401017 	ldw	r5,64(sp)
  2078b0:	000d883a 	mov	r6,zero
  2078b4:	01d00534 	movhi	r7,16404
  2078b8:	02101e80 	call	2101e8 <__subdf3>
  2078bc:	800d883a 	mov	r6,r16
  2078c0:	880f883a 	mov	r7,r17
  2078c4:	1009883a 	mov	r4,r2
  2078c8:	180b883a 	mov	r5,r3
  2078cc:	102b883a 	mov	r21,r2
  2078d0:	1829883a 	mov	r20,r3
  2078d4:	020f7ac0 	call	20f7ac <__gedf2>
  2078d8:	00806c16 	blt	zero,r2,207a8c <_dtoa_r+0x1304>
  2078dc:	89e0003c 	xorhi	r7,r17,32768
  2078e0:	800d883a 	mov	r6,r16
  2078e4:	a809883a 	mov	r4,r21
  2078e8:	a00b883a 	mov	r5,r20
  2078ec:	020f8880 	call	20f888 <__ledf2>
  2078f0:	103d7e0e 	bge	r2,zero,206eec <_gp+0xffdf52d8>
  2078f4:	002b883a 	mov	r21,zero
  2078f8:	0023883a 	mov	r17,zero
  2078fc:	003efb06 	br	2074ec <_gp+0xffdf58d8>
  207900:	d8800717 	ldw	r2,28(sp)
  207904:	003bd006 	br	206848 <_gp+0xffdf4c34>
  207908:	d9000a17 	ldw	r4,40(sp)
  20790c:	d9800d17 	ldw	r6,52(sp)
  207910:	dd400a15 	stw	r21,40(sp)
  207914:	a905c83a 	sub	r2,r21,r4
  207918:	308d883a 	add	r6,r6,r2
  20791c:	d9800d15 	stw	r6,52(sp)
  207920:	002b883a 	mov	r21,zero
  207924:	003e0606 	br	207140 <_gp+0xffdf552c>
  207928:	9023883a 	mov	r17,r18
  20792c:	9829883a 	mov	r20,r19
  207930:	04000084 	movi	r16,2
  207934:	003c9206 	br	206b80 <_gp+0xffdf4f6c>
  207938:	04000044 	movi	r16,1
  20793c:	dc000c15 	stw	r16,48(sp)
  207940:	dc000615 	stw	r16,24(sp)
  207944:	dc002215 	stw	r16,136(sp)
  207948:	e0001115 	stw	zero,68(fp)
  20794c:	000b883a 	mov	r5,zero
  207950:	003c6906 	br	206af8 <_gp+0xffdf4ee4>
  207954:	3021883a 	mov	r16,r6
  207958:	003ffb06 	br	207948 <_gp+0xffdf5d34>
  20795c:	1000021e 	bne	r2,zero,207968 <_dtoa_r+0x11e0>
  207960:	4200004c 	andi	r8,r8,1
  207964:	403e7d1e 	bne	r8,zero,20735c <_gp+0xffdf5748>
  207968:	01000c04 	movi	r4,48
  20796c:	00000106 	br	207974 <_dtoa_r+0x11ec>
  207970:	102f883a 	mov	r23,r2
  207974:	b8bfffc4 	addi	r2,r23,-1
  207978:	10c00007 	ldb	r3,0(r2)
  20797c:	193ffc26 	beq	r3,r4,207970 <_gp+0xffdf5d5c>
  207980:	003e8706 	br	2073a0 <_gp+0xffdf578c>
  207984:	d8800517 	ldw	r2,20(sp)
  207988:	00a3c83a 	sub	r17,zero,r2
  20798c:	8800a426 	beq	r17,zero,207c20 <_dtoa_r+0x1498>
  207990:	888003cc 	andi	r2,r17,15
  207994:	100490fa 	slli	r2,r2,3
  207998:	00c00874 	movhi	r3,33
  20799c:	18db3d04 	addi	r3,r3,27892
  2079a0:	1885883a 	add	r2,r3,r2
  2079a4:	11800017 	ldw	r6,0(r2)
  2079a8:	11c00117 	ldw	r7,4(r2)
  2079ac:	9009883a 	mov	r4,r18
  2079b0:	980b883a 	mov	r5,r19
  2079b4:	8823d13a 	srai	r17,r17,4
  2079b8:	020f97c0 	call	20f97c <__muldf3>
  2079bc:	d8800f15 	stw	r2,60(sp)
  2079c0:	d8c01015 	stw	r3,64(sp)
  2079c4:	8800e826 	beq	r17,zero,207d68 <_dtoa_r+0x15e0>
  2079c8:	05000874 	movhi	r20,33
  2079cc:	a51b3304 	addi	r20,r20,27852
  2079d0:	04000084 	movi	r16,2
  2079d4:	8980004c 	andi	r6,r17,1
  2079d8:	1009883a 	mov	r4,r2
  2079dc:	8823d07a 	srai	r17,r17,1
  2079e0:	180b883a 	mov	r5,r3
  2079e4:	30000426 	beq	r6,zero,2079f8 <_dtoa_r+0x1270>
  2079e8:	a1800017 	ldw	r6,0(r20)
  2079ec:	a1c00117 	ldw	r7,4(r20)
  2079f0:	84000044 	addi	r16,r16,1
  2079f4:	020f97c0 	call	20f97c <__muldf3>
  2079f8:	a5000204 	addi	r20,r20,8
  2079fc:	883ff51e 	bne	r17,zero,2079d4 <_gp+0xffdf5dc0>
  207a00:	d8800f15 	stw	r2,60(sp)
  207a04:	d8c01015 	stw	r3,64(sp)
  207a08:	003c7606 	br	206be4 <_gp+0xffdf4fd0>
  207a0c:	00c00c04 	movi	r3,48
  207a10:	10c00005 	stb	r3,0(r2)
  207a14:	d8c00517 	ldw	r3,20(sp)
  207a18:	bd3fffc3 	ldbu	r20,-1(r23)
  207a1c:	18c00044 	addi	r3,r3,1
  207a20:	d8c00515 	stw	r3,20(sp)
  207a24:	003db906 	br	20710c <_gp+0xffdf54f8>
  207a28:	89400117 	ldw	r5,4(r17)
  207a2c:	e009883a 	mov	r4,fp
  207a30:	0209e400 	call	209e40 <_Balloc>
  207a34:	89800417 	ldw	r6,16(r17)
  207a38:	89400304 	addi	r5,r17,12
  207a3c:	11000304 	addi	r4,r2,12
  207a40:	31800084 	addi	r6,r6,2
  207a44:	318d883a 	add	r6,r6,r6
  207a48:	318d883a 	add	r6,r6,r6
  207a4c:	1027883a 	mov	r19,r2
  207a50:	0209a740 	call	209a74 <memcpy>
  207a54:	01800044 	movi	r6,1
  207a58:	980b883a 	mov	r5,r19
  207a5c:	e009883a 	mov	r4,fp
  207a60:	020a67c0 	call	20a67c <__lshift>
  207a64:	1029883a 	mov	r20,r2
  207a68:	003ecc06 	br	20759c <_gp+0xffdf5988>
  207a6c:	00800e44 	movi	r2,57
  207a70:	90809026 	beq	r18,r2,207cb4 <_dtoa_r+0x152c>
  207a74:	92000044 	addi	r8,r18,1
  207a78:	003f1f06 	br	2076f8 <_gp+0xffdf5ae4>
  207a7c:	9011883a 	mov	r8,r18
  207a80:	8825883a 	mov	r18,r17
  207a84:	a023883a 	mov	r17,r20
  207a88:	003e2906 	br	207330 <_gp+0xffdf571c>
  207a8c:	002b883a 	mov	r21,zero
  207a90:	0023883a 	mov	r17,zero
  207a94:	003f5406 	br	2077e8 <_gp+0xffdf5bd4>
  207a98:	61bfffc4 	addi	r6,r12,-1
  207a9c:	300490fa 	slli	r2,r6,3
  207aa0:	00c00874 	movhi	r3,33
  207aa4:	18db3d04 	addi	r3,r3,27892
  207aa8:	1885883a 	add	r2,r3,r2
  207aac:	11000017 	ldw	r4,0(r2)
  207ab0:	11400117 	ldw	r5,4(r2)
  207ab4:	d8800717 	ldw	r2,28(sp)
  207ab8:	880f883a 	mov	r7,r17
  207abc:	d9801215 	stw	r6,72(sp)
  207ac0:	800d883a 	mov	r6,r16
  207ac4:	db001615 	stw	r12,88(sp)
  207ac8:	15c00044 	addi	r23,r2,1
  207acc:	020f97c0 	call	20f97c <__muldf3>
  207ad0:	d9401017 	ldw	r5,64(sp)
  207ad4:	d9000f17 	ldw	r4,60(sp)
  207ad8:	d8c01515 	stw	r3,84(sp)
  207adc:	d8801415 	stw	r2,80(sp)
  207ae0:	0210ae40 	call	210ae4 <__fixdfsi>
  207ae4:	1009883a 	mov	r4,r2
  207ae8:	1021883a 	mov	r16,r2
  207aec:	0210b640 	call	210b64 <__floatsidf>
  207af0:	d9000f17 	ldw	r4,60(sp)
  207af4:	d9401017 	ldw	r5,64(sp)
  207af8:	100d883a 	mov	r6,r2
  207afc:	180f883a 	mov	r7,r3
  207b00:	02101e80 	call	2101e8 <__subdf3>
  207b04:	1829883a 	mov	r20,r3
  207b08:	d8c00717 	ldw	r3,28(sp)
  207b0c:	84000c04 	addi	r16,r16,48
  207b10:	1023883a 	mov	r17,r2
  207b14:	1c000005 	stb	r16,0(r3)
  207b18:	db001617 	ldw	r12,88(sp)
  207b1c:	00800044 	movi	r2,1
  207b20:	60802226 	beq	r12,r2,207bac <_dtoa_r+0x1424>
  207b24:	d9c00717 	ldw	r7,28(sp)
  207b28:	8805883a 	mov	r2,r17
  207b2c:	b82b883a 	mov	r21,r23
  207b30:	3b19883a 	add	r12,r7,r12
  207b34:	6023883a 	mov	r17,r12
  207b38:	a007883a 	mov	r3,r20
  207b3c:	dc800f15 	stw	r18,60(sp)
  207b40:	000d883a 	mov	r6,zero
  207b44:	01d00934 	movhi	r7,16420
  207b48:	1009883a 	mov	r4,r2
  207b4c:	180b883a 	mov	r5,r3
  207b50:	020f97c0 	call	20f97c <__muldf3>
  207b54:	180b883a 	mov	r5,r3
  207b58:	1009883a 	mov	r4,r2
  207b5c:	1829883a 	mov	r20,r3
  207b60:	1025883a 	mov	r18,r2
  207b64:	0210ae40 	call	210ae4 <__fixdfsi>
  207b68:	1009883a 	mov	r4,r2
  207b6c:	1021883a 	mov	r16,r2
  207b70:	0210b640 	call	210b64 <__floatsidf>
  207b74:	100d883a 	mov	r6,r2
  207b78:	180f883a 	mov	r7,r3
  207b7c:	9009883a 	mov	r4,r18
  207b80:	a00b883a 	mov	r5,r20
  207b84:	84000c04 	addi	r16,r16,48
  207b88:	02101e80 	call	2101e8 <__subdf3>
  207b8c:	ad400044 	addi	r21,r21,1
  207b90:	ac3fffc5 	stb	r16,-1(r21)
  207b94:	ac7fea1e 	bne	r21,r17,207b40 <_gp+0xffdf5f2c>
  207b98:	1023883a 	mov	r17,r2
  207b9c:	d8801217 	ldw	r2,72(sp)
  207ba0:	dc800f17 	ldw	r18,60(sp)
  207ba4:	1829883a 	mov	r20,r3
  207ba8:	b8af883a 	add	r23,r23,r2
  207bac:	d9001417 	ldw	r4,80(sp)
  207bb0:	d9401517 	ldw	r5,84(sp)
  207bb4:	000d883a 	mov	r6,zero
  207bb8:	01cff834 	movhi	r7,16352
  207bbc:	020e4a80 	call	20e4a8 <__adddf3>
  207bc0:	880d883a 	mov	r6,r17
  207bc4:	a00f883a 	mov	r7,r20
  207bc8:	1009883a 	mov	r4,r2
  207bcc:	180b883a 	mov	r5,r3
  207bd0:	020f8880 	call	20f888 <__ledf2>
  207bd4:	10003e0e 	bge	r2,zero,207cd0 <_dtoa_r+0x1548>
  207bd8:	d9001317 	ldw	r4,76(sp)
  207bdc:	bd3fffc3 	ldbu	r20,-1(r23)
  207be0:	d9000515 	stw	r4,20(sp)
  207be4:	003d3b06 	br	2070d4 <_gp+0xffdf54c0>
  207be8:	0027883a 	mov	r19,zero
  207bec:	003f1b06 	br	20785c <_gp+0xffdf5c48>
  207bf0:	d8800817 	ldw	r2,32(sp)
  207bf4:	11e9c83a 	sub	r20,r2,r7
  207bf8:	0005883a 	mov	r2,zero
  207bfc:	003d5406 	br	207150 <_gp+0xffdf553c>
  207c00:	00800044 	movi	r2,1
  207c04:	003dc706 	br	207324 <_gp+0xffdf5710>
  207c08:	d8c00217 	ldw	r3,8(sp)
  207c0c:	00800d84 	movi	r2,54
  207c10:	dd400a17 	ldw	r21,40(sp)
  207c14:	10c5c83a 	sub	r2,r2,r3
  207c18:	dd000817 	ldw	r20,32(sp)
  207c1c:	003d4c06 	br	207150 <_gp+0xffdf553c>
  207c20:	dc800f15 	stw	r18,60(sp)
  207c24:	dcc01015 	stw	r19,64(sp)
  207c28:	04000084 	movi	r16,2
  207c2c:	003bed06 	br	206be4 <_gp+0xffdf4fd0>
  207c30:	d9000617 	ldw	r4,24(sp)
  207c34:	203f0d26 	beq	r4,zero,20786c <_gp+0xffdf5c58>
  207c38:	d9800c17 	ldw	r6,48(sp)
  207c3c:	01bcab0e 	bge	zero,r6,206eec <_gp+0xffdf52d8>
  207c40:	d9401017 	ldw	r5,64(sp)
  207c44:	d9000f17 	ldw	r4,60(sp)
  207c48:	000d883a 	mov	r6,zero
  207c4c:	01d00934 	movhi	r7,16420
  207c50:	020f97c0 	call	20f97c <__muldf3>
  207c54:	81000044 	addi	r4,r16,1
  207c58:	d8800f15 	stw	r2,60(sp)
  207c5c:	d8c01015 	stw	r3,64(sp)
  207c60:	0210b640 	call	210b64 <__floatsidf>
  207c64:	d9800f17 	ldw	r6,60(sp)
  207c68:	d9c01017 	ldw	r7,64(sp)
  207c6c:	1009883a 	mov	r4,r2
  207c70:	180b883a 	mov	r5,r3
  207c74:	020f97c0 	call	20f97c <__muldf3>
  207c78:	01d00734 	movhi	r7,16412
  207c7c:	000d883a 	mov	r6,zero
  207c80:	1009883a 	mov	r4,r2
  207c84:	180b883a 	mov	r5,r3
  207c88:	020e4a80 	call	20e4a8 <__adddf3>
  207c8c:	d9c00517 	ldw	r7,20(sp)
  207c90:	047f3034 	movhi	r17,64704
  207c94:	1021883a 	mov	r16,r2
  207c98:	39ffffc4 	addi	r7,r7,-1
  207c9c:	d9c01315 	stw	r7,76(sp)
  207ca0:	1c63883a 	add	r17,r3,r17
  207ca4:	db000c17 	ldw	r12,48(sp)
  207ca8:	003bea06 	br	206c54 <_gp+0xffdf5040>
  207cac:	dc000915 	stw	r16,36(sp)
  207cb0:	003e0e06 	br	2074ec <_gp+0xffdf58d8>
  207cb4:	01000e44 	movi	r4,57
  207cb8:	8825883a 	mov	r18,r17
  207cbc:	9dc00044 	addi	r23,r19,1
  207cc0:	99000005 	stb	r4,0(r19)
  207cc4:	a023883a 	mov	r17,r20
  207cc8:	dc000915 	stw	r16,36(sp)
  207ccc:	003da406 	br	207360 <_gp+0xffdf574c>
  207cd0:	d9801417 	ldw	r6,80(sp)
  207cd4:	d9c01517 	ldw	r7,84(sp)
  207cd8:	0009883a 	mov	r4,zero
  207cdc:	014ff834 	movhi	r5,16352
  207ce0:	02101e80 	call	2101e8 <__subdf3>
  207ce4:	880d883a 	mov	r6,r17
  207ce8:	a00f883a 	mov	r7,r20
  207cec:	1009883a 	mov	r4,r2
  207cf0:	180b883a 	mov	r5,r3
  207cf4:	020f7ac0 	call	20f7ac <__gedf2>
  207cf8:	00bc7c0e 	bge	zero,r2,206eec <_gp+0xffdf52d8>
  207cfc:	01000c04 	movi	r4,48
  207d00:	00000106 	br	207d08 <_dtoa_r+0x1580>
  207d04:	102f883a 	mov	r23,r2
  207d08:	b8bfffc4 	addi	r2,r23,-1
  207d0c:	10c00007 	ldb	r3,0(r2)
  207d10:	193ffc26 	beq	r3,r4,207d04 <_gp+0xffdf60f0>
  207d14:	d9801317 	ldw	r6,76(sp)
  207d18:	d9800515 	stw	r6,20(sp)
  207d1c:	003c4406 	br	206e30 <_gp+0xffdf521c>
  207d20:	d9801317 	ldw	r6,76(sp)
  207d24:	d9800515 	stw	r6,20(sp)
  207d28:	003cea06 	br	2070d4 <_gp+0xffdf54c0>
  207d2c:	dd800f17 	ldw	r22,60(sp)
  207d30:	dcc01017 	ldw	r19,64(sp)
  207d34:	dc801217 	ldw	r18,72(sp)
  207d38:	003c6c06 	br	206eec <_gp+0xffdf52d8>
  207d3c:	903e031e 	bne	r18,zero,20754c <_gp+0xffdf5938>
  207d40:	003ebb06 	br	207830 <_gp+0xffdf5c1c>
  207d44:	103e6c1e 	bne	r2,zero,2076f8 <_gp+0xffdf5ae4>
  207d48:	4080004c 	andi	r2,r8,1
  207d4c:	103e6a26 	beq	r2,zero,2076f8 <_gp+0xffdf5ae4>
  207d50:	003e6606 	br	2076ec <_gp+0xffdf5ad8>
  207d54:	d8c00317 	ldw	r3,12(sp)
  207d58:	00800084 	movi	r2,2
  207d5c:	10c02916 	blt	r2,r3,207e04 <_dtoa_r+0x167c>
  207d60:	d9000c17 	ldw	r4,48(sp)
  207d64:	003e8806 	br	207788 <_gp+0xffdf5b74>
  207d68:	04000084 	movi	r16,2
  207d6c:	003b9d06 	br	206be4 <_gp+0xffdf4fd0>
  207d70:	d9001317 	ldw	r4,76(sp)
  207d74:	d9000515 	stw	r4,20(sp)
  207d78:	003cd606 	br	2070d4 <_gp+0xffdf54c0>
  207d7c:	d8801317 	ldw	r2,76(sp)
  207d80:	d8800515 	stw	r2,20(sp)
  207d84:	003c2a06 	br	206e30 <_gp+0xffdf521c>
  207d88:	d9800317 	ldw	r6,12(sp)
  207d8c:	00800084 	movi	r2,2
  207d90:	11801516 	blt	r2,r6,207de8 <_dtoa_r+0x1660>
  207d94:	d9c00c17 	ldw	r7,48(sp)
  207d98:	d9c00615 	stw	r7,24(sp)
  207d9c:	003df706 	br	20757c <_gp+0xffdf5968>
  207da0:	193d3926 	beq	r3,r4,207288 <_gp+0xffdf5674>
  207da4:	00c00f04 	movi	r3,60
  207da8:	1885c83a 	sub	r2,r3,r2
  207dac:	003ddf06 	br	20752c <_gp+0xffdf5918>
  207db0:	e009883a 	mov	r4,fp
  207db4:	e0001115 	stw	zero,68(fp)
  207db8:	000b883a 	mov	r5,zero
  207dbc:	0209e400 	call	209e40 <_Balloc>
  207dc0:	d8800715 	stw	r2,28(sp)
  207dc4:	d8c00717 	ldw	r3,28(sp)
  207dc8:	00bfffc4 	movi	r2,-1
  207dcc:	01000044 	movi	r4,1
  207dd0:	d8800c15 	stw	r2,48(sp)
  207dd4:	e0c01015 	stw	r3,64(fp)
  207dd8:	d9000b15 	stw	r4,44(sp)
  207ddc:	d8800615 	stw	r2,24(sp)
  207de0:	d8002215 	stw	zero,136(sp)
  207de4:	003c4106 	br	206eec <_gp+0xffdf52d8>
  207de8:	d8c00c17 	ldw	r3,48(sp)
  207dec:	d8c00615 	stw	r3,24(sp)
  207df0:	003e7006 	br	2077b4 <_gp+0xffdf5ba0>
  207df4:	04400044 	movi	r17,1
  207df8:	003b2006 	br	206a7c <_gp+0xffdf4e68>
  207dfc:	000b883a 	mov	r5,zero
  207e00:	003b3d06 	br	206af8 <_gp+0xffdf4ee4>
  207e04:	d8800c17 	ldw	r2,48(sp)
  207e08:	d8800615 	stw	r2,24(sp)
  207e0c:	003e6906 	br	2077b4 <_gp+0xffdf5ba0>

00207e10 <__sflush_r>:
  207e10:	2880030b 	ldhu	r2,12(r5)
  207e14:	defffb04 	addi	sp,sp,-20
  207e18:	dcc00315 	stw	r19,12(sp)
  207e1c:	dc400115 	stw	r17,4(sp)
  207e20:	dfc00415 	stw	ra,16(sp)
  207e24:	dc800215 	stw	r18,8(sp)
  207e28:	dc000015 	stw	r16,0(sp)
  207e2c:	10c0020c 	andi	r3,r2,8
  207e30:	2823883a 	mov	r17,r5
  207e34:	2027883a 	mov	r19,r4
  207e38:	1800311e 	bne	r3,zero,207f00 <__sflush_r+0xf0>
  207e3c:	28c00117 	ldw	r3,4(r5)
  207e40:	10820014 	ori	r2,r2,2048
  207e44:	2880030d 	sth	r2,12(r5)
  207e48:	00c04b0e 	bge	zero,r3,207f78 <__sflush_r+0x168>
  207e4c:	8a000a17 	ldw	r8,40(r17)
  207e50:	40002326 	beq	r8,zero,207ee0 <__sflush_r+0xd0>
  207e54:	9c000017 	ldw	r16,0(r19)
  207e58:	10c4000c 	andi	r3,r2,4096
  207e5c:	98000015 	stw	zero,0(r19)
  207e60:	18004826 	beq	r3,zero,207f84 <__sflush_r+0x174>
  207e64:	89801417 	ldw	r6,80(r17)
  207e68:	10c0010c 	andi	r3,r2,4
  207e6c:	18000626 	beq	r3,zero,207e88 <__sflush_r+0x78>
  207e70:	88c00117 	ldw	r3,4(r17)
  207e74:	88800c17 	ldw	r2,48(r17)
  207e78:	30cdc83a 	sub	r6,r6,r3
  207e7c:	10000226 	beq	r2,zero,207e88 <__sflush_r+0x78>
  207e80:	88800f17 	ldw	r2,60(r17)
  207e84:	308dc83a 	sub	r6,r6,r2
  207e88:	89400717 	ldw	r5,28(r17)
  207e8c:	000f883a 	mov	r7,zero
  207e90:	9809883a 	mov	r4,r19
  207e94:	403ee83a 	callr	r8
  207e98:	00ffffc4 	movi	r3,-1
  207e9c:	10c04426 	beq	r2,r3,207fb0 <__sflush_r+0x1a0>
  207ea0:	88c0030b 	ldhu	r3,12(r17)
  207ea4:	89000417 	ldw	r4,16(r17)
  207ea8:	88000115 	stw	zero,4(r17)
  207eac:	197dffcc 	andi	r5,r3,63487
  207eb0:	8940030d 	sth	r5,12(r17)
  207eb4:	89000015 	stw	r4,0(r17)
  207eb8:	18c4000c 	andi	r3,r3,4096
  207ebc:	18002c1e 	bne	r3,zero,207f70 <__sflush_r+0x160>
  207ec0:	89400c17 	ldw	r5,48(r17)
  207ec4:	9c000015 	stw	r16,0(r19)
  207ec8:	28000526 	beq	r5,zero,207ee0 <__sflush_r+0xd0>
  207ecc:	88801004 	addi	r2,r17,64
  207ed0:	28800226 	beq	r5,r2,207edc <__sflush_r+0xcc>
  207ed4:	9809883a 	mov	r4,r19
  207ed8:	020858c0 	call	20858c <_free_r>
  207edc:	88000c15 	stw	zero,48(r17)
  207ee0:	0005883a 	mov	r2,zero
  207ee4:	dfc00417 	ldw	ra,16(sp)
  207ee8:	dcc00317 	ldw	r19,12(sp)
  207eec:	dc800217 	ldw	r18,8(sp)
  207ef0:	dc400117 	ldw	r17,4(sp)
  207ef4:	dc000017 	ldw	r16,0(sp)
  207ef8:	dec00504 	addi	sp,sp,20
  207efc:	f800283a 	ret
  207f00:	2c800417 	ldw	r18,16(r5)
  207f04:	903ff626 	beq	r18,zero,207ee0 <_gp+0xffdf62cc>
  207f08:	2c000017 	ldw	r16,0(r5)
  207f0c:	108000cc 	andi	r2,r2,3
  207f10:	2c800015 	stw	r18,0(r5)
  207f14:	84a1c83a 	sub	r16,r16,r18
  207f18:	1000131e 	bne	r2,zero,207f68 <__sflush_r+0x158>
  207f1c:	28800517 	ldw	r2,20(r5)
  207f20:	88800215 	stw	r2,8(r17)
  207f24:	04000316 	blt	zero,r16,207f34 <__sflush_r+0x124>
  207f28:	003fed06 	br	207ee0 <_gp+0xffdf62cc>
  207f2c:	90a5883a 	add	r18,r18,r2
  207f30:	043feb0e 	bge	zero,r16,207ee0 <_gp+0xffdf62cc>
  207f34:	88800917 	ldw	r2,36(r17)
  207f38:	89400717 	ldw	r5,28(r17)
  207f3c:	800f883a 	mov	r7,r16
  207f40:	900d883a 	mov	r6,r18
  207f44:	9809883a 	mov	r4,r19
  207f48:	103ee83a 	callr	r2
  207f4c:	80a1c83a 	sub	r16,r16,r2
  207f50:	00bff616 	blt	zero,r2,207f2c <_gp+0xffdf6318>
  207f54:	88c0030b 	ldhu	r3,12(r17)
  207f58:	00bfffc4 	movi	r2,-1
  207f5c:	18c01014 	ori	r3,r3,64
  207f60:	88c0030d 	sth	r3,12(r17)
  207f64:	003fdf06 	br	207ee4 <_gp+0xffdf62d0>
  207f68:	0005883a 	mov	r2,zero
  207f6c:	003fec06 	br	207f20 <_gp+0xffdf630c>
  207f70:	88801415 	stw	r2,80(r17)
  207f74:	003fd206 	br	207ec0 <_gp+0xffdf62ac>
  207f78:	28c00f17 	ldw	r3,60(r5)
  207f7c:	00ffb316 	blt	zero,r3,207e4c <_gp+0xffdf6238>
  207f80:	003fd706 	br	207ee0 <_gp+0xffdf62cc>
  207f84:	89400717 	ldw	r5,28(r17)
  207f88:	000d883a 	mov	r6,zero
  207f8c:	01c00044 	movi	r7,1
  207f90:	9809883a 	mov	r4,r19
  207f94:	403ee83a 	callr	r8
  207f98:	100d883a 	mov	r6,r2
  207f9c:	00bfffc4 	movi	r2,-1
  207fa0:	30801426 	beq	r6,r2,207ff4 <__sflush_r+0x1e4>
  207fa4:	8880030b 	ldhu	r2,12(r17)
  207fa8:	8a000a17 	ldw	r8,40(r17)
  207fac:	003fae06 	br	207e68 <_gp+0xffdf6254>
  207fb0:	98c00017 	ldw	r3,0(r19)
  207fb4:	183fba26 	beq	r3,zero,207ea0 <_gp+0xffdf628c>
  207fb8:	01000744 	movi	r4,29
  207fbc:	19000626 	beq	r3,r4,207fd8 <__sflush_r+0x1c8>
  207fc0:	01000584 	movi	r4,22
  207fc4:	19000426 	beq	r3,r4,207fd8 <__sflush_r+0x1c8>
  207fc8:	88c0030b 	ldhu	r3,12(r17)
  207fcc:	18c01014 	ori	r3,r3,64
  207fd0:	88c0030d 	sth	r3,12(r17)
  207fd4:	003fc306 	br	207ee4 <_gp+0xffdf62d0>
  207fd8:	8880030b 	ldhu	r2,12(r17)
  207fdc:	88c00417 	ldw	r3,16(r17)
  207fe0:	88000115 	stw	zero,4(r17)
  207fe4:	10bdffcc 	andi	r2,r2,63487
  207fe8:	8880030d 	sth	r2,12(r17)
  207fec:	88c00015 	stw	r3,0(r17)
  207ff0:	003fb306 	br	207ec0 <_gp+0xffdf62ac>
  207ff4:	98800017 	ldw	r2,0(r19)
  207ff8:	103fea26 	beq	r2,zero,207fa4 <_gp+0xffdf6390>
  207ffc:	00c00744 	movi	r3,29
  208000:	10c00226 	beq	r2,r3,20800c <__sflush_r+0x1fc>
  208004:	00c00584 	movi	r3,22
  208008:	10c0031e 	bne	r2,r3,208018 <__sflush_r+0x208>
  20800c:	9c000015 	stw	r16,0(r19)
  208010:	0005883a 	mov	r2,zero
  208014:	003fb306 	br	207ee4 <_gp+0xffdf62d0>
  208018:	88c0030b 	ldhu	r3,12(r17)
  20801c:	3005883a 	mov	r2,r6
  208020:	18c01014 	ori	r3,r3,64
  208024:	88c0030d 	sth	r3,12(r17)
  208028:	003fae06 	br	207ee4 <_gp+0xffdf62d0>

0020802c <_fflush_r>:
  20802c:	defffd04 	addi	sp,sp,-12
  208030:	dc000115 	stw	r16,4(sp)
  208034:	dfc00215 	stw	ra,8(sp)
  208038:	2021883a 	mov	r16,r4
  20803c:	20000226 	beq	r4,zero,208048 <_fflush_r+0x1c>
  208040:	20800e17 	ldw	r2,56(r4)
  208044:	10000c26 	beq	r2,zero,208078 <_fflush_r+0x4c>
  208048:	2880030f 	ldh	r2,12(r5)
  20804c:	1000051e 	bne	r2,zero,208064 <_fflush_r+0x38>
  208050:	0005883a 	mov	r2,zero
  208054:	dfc00217 	ldw	ra,8(sp)
  208058:	dc000117 	ldw	r16,4(sp)
  20805c:	dec00304 	addi	sp,sp,12
  208060:	f800283a 	ret
  208064:	8009883a 	mov	r4,r16
  208068:	dfc00217 	ldw	ra,8(sp)
  20806c:	dc000117 	ldw	r16,4(sp)
  208070:	dec00304 	addi	sp,sp,12
  208074:	0207e101 	jmpi	207e10 <__sflush_r>
  208078:	d9400015 	stw	r5,0(sp)
  20807c:	02084180 	call	208418 <__sinit>
  208080:	d9400017 	ldw	r5,0(sp)
  208084:	003ff006 	br	208048 <_gp+0xffdf6434>

00208088 <fflush>:
  208088:	20000526 	beq	r4,zero,2080a0 <fflush+0x18>
  20808c:	00801074 	movhi	r2,65
  208090:	10a70a04 	addi	r2,r2,-25560
  208094:	200b883a 	mov	r5,r4
  208098:	11000017 	ldw	r4,0(r2)
  20809c:	020802c1 	jmpi	20802c <_fflush_r>
  2080a0:	00801074 	movhi	r2,65
  2080a4:	10a70904 	addi	r2,r2,-25564
  2080a8:	11000017 	ldw	r4,0(r2)
  2080ac:	01400874 	movhi	r5,33
  2080b0:	29600b04 	addi	r5,r5,-32724
  2080b4:	0208e281 	jmpi	208e28 <_fwalk_reent>

002080b8 <__fp_unlock>:
  2080b8:	0005883a 	mov	r2,zero
  2080bc:	f800283a 	ret

002080c0 <_cleanup_r>:
  2080c0:	01400874 	movhi	r5,33
  2080c4:	2974a104 	addi	r5,r5,-11644
  2080c8:	0208e281 	jmpi	208e28 <_fwalk_reent>

002080cc <__sinit.part.1>:
  2080cc:	defff704 	addi	sp,sp,-36
  2080d0:	00c00874 	movhi	r3,33
  2080d4:	dfc00815 	stw	ra,32(sp)
  2080d8:	ddc00715 	stw	r23,28(sp)
  2080dc:	dd800615 	stw	r22,24(sp)
  2080e0:	dd400515 	stw	r21,20(sp)
  2080e4:	dd000415 	stw	r20,16(sp)
  2080e8:	dcc00315 	stw	r19,12(sp)
  2080ec:	dc800215 	stw	r18,8(sp)
  2080f0:	dc400115 	stw	r17,4(sp)
  2080f4:	dc000015 	stw	r16,0(sp)
  2080f8:	18e03004 	addi	r3,r3,-32576
  2080fc:	24000117 	ldw	r16,4(r4)
  208100:	20c00f15 	stw	r3,60(r4)
  208104:	2080bb04 	addi	r2,r4,748
  208108:	00c000c4 	movi	r3,3
  20810c:	20c0b915 	stw	r3,740(r4)
  208110:	2080ba15 	stw	r2,744(r4)
  208114:	2000b815 	stw	zero,736(r4)
  208118:	05c00204 	movi	r23,8
  20811c:	00800104 	movi	r2,4
  208120:	2025883a 	mov	r18,r4
  208124:	b80d883a 	mov	r6,r23
  208128:	81001704 	addi	r4,r16,92
  20812c:	000b883a 	mov	r5,zero
  208130:	80000015 	stw	zero,0(r16)
  208134:	80000115 	stw	zero,4(r16)
  208138:	80000215 	stw	zero,8(r16)
  20813c:	8080030d 	sth	r2,12(r16)
  208140:	80001915 	stw	zero,100(r16)
  208144:	8000038d 	sth	zero,14(r16)
  208148:	80000415 	stw	zero,16(r16)
  20814c:	80000515 	stw	zero,20(r16)
  208150:	80000615 	stw	zero,24(r16)
  208154:	0209d180 	call	209d18 <memset>
  208158:	05800874 	movhi	r22,33
  20815c:	94400217 	ldw	r17,8(r18)
  208160:	05400874 	movhi	r21,33
  208164:	05000874 	movhi	r20,33
  208168:	04c00874 	movhi	r19,33
  20816c:	b5ada304 	addi	r22,r22,-18804
  208170:	ad6dba04 	addi	r21,r21,-18712
  208174:	a52dd904 	addi	r20,r20,-18588
  208178:	9cedf004 	addi	r19,r19,-18496
  20817c:	85800815 	stw	r22,32(r16)
  208180:	85400915 	stw	r21,36(r16)
  208184:	85000a15 	stw	r20,40(r16)
  208188:	84c00b15 	stw	r19,44(r16)
  20818c:	84000715 	stw	r16,28(r16)
  208190:	00800284 	movi	r2,10
  208194:	8880030d 	sth	r2,12(r17)
  208198:	00800044 	movi	r2,1
  20819c:	b80d883a 	mov	r6,r23
  2081a0:	89001704 	addi	r4,r17,92
  2081a4:	000b883a 	mov	r5,zero
  2081a8:	88000015 	stw	zero,0(r17)
  2081ac:	88000115 	stw	zero,4(r17)
  2081b0:	88000215 	stw	zero,8(r17)
  2081b4:	88001915 	stw	zero,100(r17)
  2081b8:	8880038d 	sth	r2,14(r17)
  2081bc:	88000415 	stw	zero,16(r17)
  2081c0:	88000515 	stw	zero,20(r17)
  2081c4:	88000615 	stw	zero,24(r17)
  2081c8:	0209d180 	call	209d18 <memset>
  2081cc:	94000317 	ldw	r16,12(r18)
  2081d0:	00800484 	movi	r2,18
  2081d4:	8c400715 	stw	r17,28(r17)
  2081d8:	8d800815 	stw	r22,32(r17)
  2081dc:	8d400915 	stw	r21,36(r17)
  2081e0:	8d000a15 	stw	r20,40(r17)
  2081e4:	8cc00b15 	stw	r19,44(r17)
  2081e8:	8080030d 	sth	r2,12(r16)
  2081ec:	00800084 	movi	r2,2
  2081f0:	80000015 	stw	zero,0(r16)
  2081f4:	80000115 	stw	zero,4(r16)
  2081f8:	80000215 	stw	zero,8(r16)
  2081fc:	80001915 	stw	zero,100(r16)
  208200:	8080038d 	sth	r2,14(r16)
  208204:	80000415 	stw	zero,16(r16)
  208208:	80000515 	stw	zero,20(r16)
  20820c:	80000615 	stw	zero,24(r16)
  208210:	b80d883a 	mov	r6,r23
  208214:	000b883a 	mov	r5,zero
  208218:	81001704 	addi	r4,r16,92
  20821c:	0209d180 	call	209d18 <memset>
  208220:	00800044 	movi	r2,1
  208224:	84000715 	stw	r16,28(r16)
  208228:	85800815 	stw	r22,32(r16)
  20822c:	85400915 	stw	r21,36(r16)
  208230:	85000a15 	stw	r20,40(r16)
  208234:	84c00b15 	stw	r19,44(r16)
  208238:	90800e15 	stw	r2,56(r18)
  20823c:	dfc00817 	ldw	ra,32(sp)
  208240:	ddc00717 	ldw	r23,28(sp)
  208244:	dd800617 	ldw	r22,24(sp)
  208248:	dd400517 	ldw	r21,20(sp)
  20824c:	dd000417 	ldw	r20,16(sp)
  208250:	dcc00317 	ldw	r19,12(sp)
  208254:	dc800217 	ldw	r18,8(sp)
  208258:	dc400117 	ldw	r17,4(sp)
  20825c:	dc000017 	ldw	r16,0(sp)
  208260:	dec00904 	addi	sp,sp,36
  208264:	f800283a 	ret

00208268 <__fp_lock>:
  208268:	0005883a 	mov	r2,zero
  20826c:	f800283a 	ret

00208270 <__sfmoreglue>:
  208270:	defffc04 	addi	sp,sp,-16
  208274:	dc800215 	stw	r18,8(sp)
  208278:	2825883a 	mov	r18,r5
  20827c:	dc000015 	stw	r16,0(sp)
  208280:	01401a04 	movi	r5,104
  208284:	2021883a 	mov	r16,r4
  208288:	913fffc4 	addi	r4,r18,-1
  20828c:	dfc00315 	stw	ra,12(sp)
  208290:	dc400115 	stw	r17,4(sp)
  208294:	02032a40 	call	2032a4 <__mulsi3>
  208298:	8009883a 	mov	r4,r16
  20829c:	11401d04 	addi	r5,r2,116
  2082a0:	1023883a 	mov	r17,r2
  2082a4:	02091840 	call	209184 <_malloc_r>
  2082a8:	1021883a 	mov	r16,r2
  2082ac:	10000726 	beq	r2,zero,2082cc <__sfmoreglue+0x5c>
  2082b0:	11000304 	addi	r4,r2,12
  2082b4:	10000015 	stw	zero,0(r2)
  2082b8:	14800115 	stw	r18,4(r2)
  2082bc:	11000215 	stw	r4,8(r2)
  2082c0:	89801a04 	addi	r6,r17,104
  2082c4:	000b883a 	mov	r5,zero
  2082c8:	0209d180 	call	209d18 <memset>
  2082cc:	8005883a 	mov	r2,r16
  2082d0:	dfc00317 	ldw	ra,12(sp)
  2082d4:	dc800217 	ldw	r18,8(sp)
  2082d8:	dc400117 	ldw	r17,4(sp)
  2082dc:	dc000017 	ldw	r16,0(sp)
  2082e0:	dec00404 	addi	sp,sp,16
  2082e4:	f800283a 	ret

002082e8 <__sfp>:
  2082e8:	defffb04 	addi	sp,sp,-20
  2082ec:	dc000015 	stw	r16,0(sp)
  2082f0:	04001074 	movhi	r16,65
  2082f4:	84270904 	addi	r16,r16,-25564
  2082f8:	dcc00315 	stw	r19,12(sp)
  2082fc:	2027883a 	mov	r19,r4
  208300:	81000017 	ldw	r4,0(r16)
  208304:	dfc00415 	stw	ra,16(sp)
  208308:	dc800215 	stw	r18,8(sp)
  20830c:	20800e17 	ldw	r2,56(r4)
  208310:	dc400115 	stw	r17,4(sp)
  208314:	1000021e 	bne	r2,zero,208320 <__sfp+0x38>
  208318:	02080cc0 	call	2080cc <__sinit.part.1>
  20831c:	81000017 	ldw	r4,0(r16)
  208320:	2480b804 	addi	r18,r4,736
  208324:	047fffc4 	movi	r17,-1
  208328:	91000117 	ldw	r4,4(r18)
  20832c:	94000217 	ldw	r16,8(r18)
  208330:	213fffc4 	addi	r4,r4,-1
  208334:	20000a16 	blt	r4,zero,208360 <__sfp+0x78>
  208338:	8080030f 	ldh	r2,12(r16)
  20833c:	10000c26 	beq	r2,zero,208370 <__sfp+0x88>
  208340:	80c01d04 	addi	r3,r16,116
  208344:	00000206 	br	208350 <__sfp+0x68>
  208348:	18bfe60f 	ldh	r2,-104(r3)
  20834c:	10000826 	beq	r2,zero,208370 <__sfp+0x88>
  208350:	213fffc4 	addi	r4,r4,-1
  208354:	1c3ffd04 	addi	r16,r3,-12
  208358:	18c01a04 	addi	r3,r3,104
  20835c:	247ffa1e 	bne	r4,r17,208348 <_gp+0xffdf6734>
  208360:	90800017 	ldw	r2,0(r18)
  208364:	10001d26 	beq	r2,zero,2083dc <__sfp+0xf4>
  208368:	1025883a 	mov	r18,r2
  20836c:	003fee06 	br	208328 <_gp+0xffdf6714>
  208370:	00bfffc4 	movi	r2,-1
  208374:	8080038d 	sth	r2,14(r16)
  208378:	00800044 	movi	r2,1
  20837c:	8080030d 	sth	r2,12(r16)
  208380:	80001915 	stw	zero,100(r16)
  208384:	80000015 	stw	zero,0(r16)
  208388:	80000215 	stw	zero,8(r16)
  20838c:	80000115 	stw	zero,4(r16)
  208390:	80000415 	stw	zero,16(r16)
  208394:	80000515 	stw	zero,20(r16)
  208398:	80000615 	stw	zero,24(r16)
  20839c:	01800204 	movi	r6,8
  2083a0:	000b883a 	mov	r5,zero
  2083a4:	81001704 	addi	r4,r16,92
  2083a8:	0209d180 	call	209d18 <memset>
  2083ac:	8005883a 	mov	r2,r16
  2083b0:	80000c15 	stw	zero,48(r16)
  2083b4:	80000d15 	stw	zero,52(r16)
  2083b8:	80001115 	stw	zero,68(r16)
  2083bc:	80001215 	stw	zero,72(r16)
  2083c0:	dfc00417 	ldw	ra,16(sp)
  2083c4:	dcc00317 	ldw	r19,12(sp)
  2083c8:	dc800217 	ldw	r18,8(sp)
  2083cc:	dc400117 	ldw	r17,4(sp)
  2083d0:	dc000017 	ldw	r16,0(sp)
  2083d4:	dec00504 	addi	sp,sp,20
  2083d8:	f800283a 	ret
  2083dc:	01400104 	movi	r5,4
  2083e0:	9809883a 	mov	r4,r19
  2083e4:	02082700 	call	208270 <__sfmoreglue>
  2083e8:	90800015 	stw	r2,0(r18)
  2083ec:	103fde1e 	bne	r2,zero,208368 <_gp+0xffdf6754>
  2083f0:	00800304 	movi	r2,12
  2083f4:	98800015 	stw	r2,0(r19)
  2083f8:	0005883a 	mov	r2,zero
  2083fc:	003ff006 	br	2083c0 <_gp+0xffdf67ac>

00208400 <_cleanup>:
  208400:	00801074 	movhi	r2,65
  208404:	10a70904 	addi	r2,r2,-25564
  208408:	11000017 	ldw	r4,0(r2)
  20840c:	01400874 	movhi	r5,33
  208410:	2974a104 	addi	r5,r5,-11644
  208414:	0208e281 	jmpi	208e28 <_fwalk_reent>

00208418 <__sinit>:
  208418:	20800e17 	ldw	r2,56(r4)
  20841c:	10000126 	beq	r2,zero,208424 <__sinit+0xc>
  208420:	f800283a 	ret
  208424:	02080cc1 	jmpi	2080cc <__sinit.part.1>

00208428 <__sfp_lock_acquire>:
  208428:	f800283a 	ret

0020842c <__sfp_lock_release>:
  20842c:	f800283a 	ret

00208430 <__sinit_lock_acquire>:
  208430:	f800283a 	ret

00208434 <__sinit_lock_release>:
  208434:	f800283a 	ret

00208438 <__fp_lock_all>:
  208438:	00801074 	movhi	r2,65
  20843c:	10a70a04 	addi	r2,r2,-25560
  208440:	11000017 	ldw	r4,0(r2)
  208444:	01400874 	movhi	r5,33
  208448:	29609a04 	addi	r5,r5,-32152
  20844c:	0208d641 	jmpi	208d64 <_fwalk>

00208450 <__fp_unlock_all>:
  208450:	00801074 	movhi	r2,65
  208454:	10a70a04 	addi	r2,r2,-25560
  208458:	11000017 	ldw	r4,0(r2)
  20845c:	01400874 	movhi	r5,33
  208460:	29602e04 	addi	r5,r5,-32584
  208464:	0208d641 	jmpi	208d64 <_fwalk>

00208468 <_malloc_trim_r>:
  208468:	defffb04 	addi	sp,sp,-20
  20846c:	dcc00315 	stw	r19,12(sp)
  208470:	04c01074 	movhi	r19,65
  208474:	dc800215 	stw	r18,8(sp)
  208478:	dc400115 	stw	r17,4(sp)
  20847c:	dc000015 	stw	r16,0(sp)
  208480:	dfc00415 	stw	ra,16(sp)
  208484:	2821883a 	mov	r16,r5
  208488:	9ce13304 	addi	r19,r19,-31540
  20848c:	2025883a 	mov	r18,r4
  208490:	02112840 	call	211284 <__malloc_lock>
  208494:	98800217 	ldw	r2,8(r19)
  208498:	14400117 	ldw	r17,4(r2)
  20849c:	00bfff04 	movi	r2,-4
  2084a0:	88a2703a 	and	r17,r17,r2
  2084a4:	8c21c83a 	sub	r16,r17,r16
  2084a8:	8403fbc4 	addi	r16,r16,4079
  2084ac:	8020d33a 	srli	r16,r16,12
  2084b0:	0083ffc4 	movi	r2,4095
  2084b4:	843fffc4 	addi	r16,r16,-1
  2084b8:	8020933a 	slli	r16,r16,12
  2084bc:	1400060e 	bge	r2,r16,2084d8 <_malloc_trim_r+0x70>
  2084c0:	000b883a 	mov	r5,zero
  2084c4:	9009883a 	mov	r4,r18
  2084c8:	020b6380 	call	20b638 <_sbrk_r>
  2084cc:	98c00217 	ldw	r3,8(r19)
  2084d0:	1c47883a 	add	r3,r3,r17
  2084d4:	10c00a26 	beq	r2,r3,208500 <_malloc_trim_r+0x98>
  2084d8:	9009883a 	mov	r4,r18
  2084dc:	02112a80 	call	2112a8 <__malloc_unlock>
  2084e0:	0005883a 	mov	r2,zero
  2084e4:	dfc00417 	ldw	ra,16(sp)
  2084e8:	dcc00317 	ldw	r19,12(sp)
  2084ec:	dc800217 	ldw	r18,8(sp)
  2084f0:	dc400117 	ldw	r17,4(sp)
  2084f4:	dc000017 	ldw	r16,0(sp)
  2084f8:	dec00504 	addi	sp,sp,20
  2084fc:	f800283a 	ret
  208500:	040bc83a 	sub	r5,zero,r16
  208504:	9009883a 	mov	r4,r18
  208508:	020b6380 	call	20b638 <_sbrk_r>
  20850c:	00ffffc4 	movi	r3,-1
  208510:	10c00d26 	beq	r2,r3,208548 <_malloc_trim_r+0xe0>
  208514:	00c01074 	movhi	r3,65
  208518:	18e73d04 	addi	r3,r3,-25356
  20851c:	18800017 	ldw	r2,0(r3)
  208520:	99000217 	ldw	r4,8(r19)
  208524:	8c23c83a 	sub	r17,r17,r16
  208528:	8c400054 	ori	r17,r17,1
  20852c:	1421c83a 	sub	r16,r2,r16
  208530:	24400115 	stw	r17,4(r4)
  208534:	9009883a 	mov	r4,r18
  208538:	1c000015 	stw	r16,0(r3)
  20853c:	02112a80 	call	2112a8 <__malloc_unlock>
  208540:	00800044 	movi	r2,1
  208544:	003fe706 	br	2084e4 <_gp+0xffdf68d0>
  208548:	000b883a 	mov	r5,zero
  20854c:	9009883a 	mov	r4,r18
  208550:	020b6380 	call	20b638 <_sbrk_r>
  208554:	99000217 	ldw	r4,8(r19)
  208558:	014003c4 	movi	r5,15
  20855c:	1107c83a 	sub	r3,r2,r4
  208560:	28ffdd0e 	bge	r5,r3,2084d8 <_gp+0xffdf68c4>
  208564:	01401074 	movhi	r5,65
  208568:	29670c04 	addi	r5,r5,-25552
  20856c:	29400017 	ldw	r5,0(r5)
  208570:	18c00054 	ori	r3,r3,1
  208574:	20c00115 	stw	r3,4(r4)
  208578:	00c01074 	movhi	r3,65
  20857c:	1145c83a 	sub	r2,r2,r5
  208580:	18e73d04 	addi	r3,r3,-25356
  208584:	18800015 	stw	r2,0(r3)
  208588:	003fd306 	br	2084d8 <_gp+0xffdf68c4>

0020858c <_free_r>:
  20858c:	28004126 	beq	r5,zero,208694 <_free_r+0x108>
  208590:	defffd04 	addi	sp,sp,-12
  208594:	dc400115 	stw	r17,4(sp)
  208598:	dc000015 	stw	r16,0(sp)
  20859c:	2023883a 	mov	r17,r4
  2085a0:	2821883a 	mov	r16,r5
  2085a4:	dfc00215 	stw	ra,8(sp)
  2085a8:	02112840 	call	211284 <__malloc_lock>
  2085ac:	81ffff17 	ldw	r7,-4(r16)
  2085b0:	00bfff84 	movi	r2,-2
  2085b4:	01001074 	movhi	r4,65
  2085b8:	81bffe04 	addi	r6,r16,-8
  2085bc:	3884703a 	and	r2,r7,r2
  2085c0:	21213304 	addi	r4,r4,-31540
  2085c4:	308b883a 	add	r5,r6,r2
  2085c8:	2a400117 	ldw	r9,4(r5)
  2085cc:	22000217 	ldw	r8,8(r4)
  2085d0:	00ffff04 	movi	r3,-4
  2085d4:	48c6703a 	and	r3,r9,r3
  2085d8:	2a005726 	beq	r5,r8,208738 <_free_r+0x1ac>
  2085dc:	28c00115 	stw	r3,4(r5)
  2085e0:	39c0004c 	andi	r7,r7,1
  2085e4:	3800091e 	bne	r7,zero,20860c <_free_r+0x80>
  2085e8:	823ffe17 	ldw	r8,-8(r16)
  2085ec:	22400204 	addi	r9,r4,8
  2085f0:	320dc83a 	sub	r6,r6,r8
  2085f4:	31c00217 	ldw	r7,8(r6)
  2085f8:	1205883a 	add	r2,r2,r8
  2085fc:	3a406526 	beq	r7,r9,208794 <_free_r+0x208>
  208600:	32000317 	ldw	r8,12(r6)
  208604:	3a000315 	stw	r8,12(r7)
  208608:	41c00215 	stw	r7,8(r8)
  20860c:	28cf883a 	add	r7,r5,r3
  208610:	39c00117 	ldw	r7,4(r7)
  208614:	39c0004c 	andi	r7,r7,1
  208618:	38003a26 	beq	r7,zero,208704 <_free_r+0x178>
  20861c:	10c00054 	ori	r3,r2,1
  208620:	30c00115 	stw	r3,4(r6)
  208624:	3087883a 	add	r3,r6,r2
  208628:	18800015 	stw	r2,0(r3)
  20862c:	00c07fc4 	movi	r3,511
  208630:	18801936 	bltu	r3,r2,208698 <_free_r+0x10c>
  208634:	1004d0fa 	srli	r2,r2,3
  208638:	01c00044 	movi	r7,1
  20863c:	21400117 	ldw	r5,4(r4)
  208640:	10c00044 	addi	r3,r2,1
  208644:	18c7883a 	add	r3,r3,r3
  208648:	1005d0ba 	srai	r2,r2,2
  20864c:	18c7883a 	add	r3,r3,r3
  208650:	18c7883a 	add	r3,r3,r3
  208654:	1907883a 	add	r3,r3,r4
  208658:	3884983a 	sll	r2,r7,r2
  20865c:	19c00017 	ldw	r7,0(r3)
  208660:	1a3ffe04 	addi	r8,r3,-8
  208664:	1144b03a 	or	r2,r2,r5
  208668:	32000315 	stw	r8,12(r6)
  20866c:	31c00215 	stw	r7,8(r6)
  208670:	20800115 	stw	r2,4(r4)
  208674:	19800015 	stw	r6,0(r3)
  208678:	39800315 	stw	r6,12(r7)
  20867c:	8809883a 	mov	r4,r17
  208680:	dfc00217 	ldw	ra,8(sp)
  208684:	dc400117 	ldw	r17,4(sp)
  208688:	dc000017 	ldw	r16,0(sp)
  20868c:	dec00304 	addi	sp,sp,12
  208690:	02112a81 	jmpi	2112a8 <__malloc_unlock>
  208694:	f800283a 	ret
  208698:	100ad27a 	srli	r5,r2,9
  20869c:	00c00104 	movi	r3,4
  2086a0:	19404a36 	bltu	r3,r5,2087cc <_free_r+0x240>
  2086a4:	100ad1ba 	srli	r5,r2,6
  2086a8:	28c00e44 	addi	r3,r5,57
  2086ac:	18c7883a 	add	r3,r3,r3
  2086b0:	29400e04 	addi	r5,r5,56
  2086b4:	18c7883a 	add	r3,r3,r3
  2086b8:	18c7883a 	add	r3,r3,r3
  2086bc:	1909883a 	add	r4,r3,r4
  2086c0:	20c00017 	ldw	r3,0(r4)
  2086c4:	01c01074 	movhi	r7,65
  2086c8:	213ffe04 	addi	r4,r4,-8
  2086cc:	39e13304 	addi	r7,r7,-31540
  2086d0:	20c04426 	beq	r4,r3,2087e4 <_free_r+0x258>
  2086d4:	01ffff04 	movi	r7,-4
  2086d8:	19400117 	ldw	r5,4(r3)
  2086dc:	29ca703a 	and	r5,r5,r7
  2086e0:	1140022e 	bgeu	r2,r5,2086ec <_free_r+0x160>
  2086e4:	18c00217 	ldw	r3,8(r3)
  2086e8:	20fffb1e 	bne	r4,r3,2086d8 <_gp+0xffdf6ac4>
  2086ec:	19000317 	ldw	r4,12(r3)
  2086f0:	31000315 	stw	r4,12(r6)
  2086f4:	30c00215 	stw	r3,8(r6)
  2086f8:	21800215 	stw	r6,8(r4)
  2086fc:	19800315 	stw	r6,12(r3)
  208700:	003fde06 	br	20867c <_gp+0xffdf6a68>
  208704:	29c00217 	ldw	r7,8(r5)
  208708:	10c5883a 	add	r2,r2,r3
  20870c:	00c01074 	movhi	r3,65
  208710:	18e13504 	addi	r3,r3,-31532
  208714:	38c03b26 	beq	r7,r3,208804 <_free_r+0x278>
  208718:	2a000317 	ldw	r8,12(r5)
  20871c:	11400054 	ori	r5,r2,1
  208720:	3087883a 	add	r3,r6,r2
  208724:	3a000315 	stw	r8,12(r7)
  208728:	41c00215 	stw	r7,8(r8)
  20872c:	31400115 	stw	r5,4(r6)
  208730:	18800015 	stw	r2,0(r3)
  208734:	003fbd06 	br	20862c <_gp+0xffdf6a18>
  208738:	39c0004c 	andi	r7,r7,1
  20873c:	10c5883a 	add	r2,r2,r3
  208740:	3800071e 	bne	r7,zero,208760 <_free_r+0x1d4>
  208744:	81fffe17 	ldw	r7,-8(r16)
  208748:	31cdc83a 	sub	r6,r6,r7
  20874c:	30c00317 	ldw	r3,12(r6)
  208750:	31400217 	ldw	r5,8(r6)
  208754:	11c5883a 	add	r2,r2,r7
  208758:	28c00315 	stw	r3,12(r5)
  20875c:	19400215 	stw	r5,8(r3)
  208760:	10c00054 	ori	r3,r2,1
  208764:	30c00115 	stw	r3,4(r6)
  208768:	00c01074 	movhi	r3,65
  20876c:	18e70d04 	addi	r3,r3,-25548
  208770:	18c00017 	ldw	r3,0(r3)
  208774:	21800215 	stw	r6,8(r4)
  208778:	10ffc036 	bltu	r2,r3,20867c <_gp+0xffdf6a68>
  20877c:	00801074 	movhi	r2,65
  208780:	10a72a04 	addi	r2,r2,-25432
  208784:	11400017 	ldw	r5,0(r2)
  208788:	8809883a 	mov	r4,r17
  20878c:	02084680 	call	208468 <_malloc_trim_r>
  208790:	003fba06 	br	20867c <_gp+0xffdf6a68>
  208794:	28c9883a 	add	r4,r5,r3
  208798:	21000117 	ldw	r4,4(r4)
  20879c:	2100004c 	andi	r4,r4,1
  2087a0:	2000391e 	bne	r4,zero,208888 <_free_r+0x2fc>
  2087a4:	29c00217 	ldw	r7,8(r5)
  2087a8:	29000317 	ldw	r4,12(r5)
  2087ac:	1885883a 	add	r2,r3,r2
  2087b0:	10c00054 	ori	r3,r2,1
  2087b4:	39000315 	stw	r4,12(r7)
  2087b8:	21c00215 	stw	r7,8(r4)
  2087bc:	30c00115 	stw	r3,4(r6)
  2087c0:	308d883a 	add	r6,r6,r2
  2087c4:	30800015 	stw	r2,0(r6)
  2087c8:	003fac06 	br	20867c <_gp+0xffdf6a68>
  2087cc:	00c00504 	movi	r3,20
  2087d0:	19401536 	bltu	r3,r5,208828 <_free_r+0x29c>
  2087d4:	28c01704 	addi	r3,r5,92
  2087d8:	18c7883a 	add	r3,r3,r3
  2087dc:	294016c4 	addi	r5,r5,91
  2087e0:	003fb406 	br	2086b4 <_gp+0xffdf6aa0>
  2087e4:	280bd0ba 	srai	r5,r5,2
  2087e8:	00c00044 	movi	r3,1
  2087ec:	38800117 	ldw	r2,4(r7)
  2087f0:	194a983a 	sll	r5,r3,r5
  2087f4:	2007883a 	mov	r3,r4
  2087f8:	2884b03a 	or	r2,r5,r2
  2087fc:	38800115 	stw	r2,4(r7)
  208800:	003fbb06 	br	2086f0 <_gp+0xffdf6adc>
  208804:	21800515 	stw	r6,20(r4)
  208808:	21800415 	stw	r6,16(r4)
  20880c:	10c00054 	ori	r3,r2,1
  208810:	31c00315 	stw	r7,12(r6)
  208814:	31c00215 	stw	r7,8(r6)
  208818:	30c00115 	stw	r3,4(r6)
  20881c:	308d883a 	add	r6,r6,r2
  208820:	30800015 	stw	r2,0(r6)
  208824:	003f9506 	br	20867c <_gp+0xffdf6a68>
  208828:	00c01504 	movi	r3,84
  20882c:	19400536 	bltu	r3,r5,208844 <_free_r+0x2b8>
  208830:	100ad33a 	srli	r5,r2,12
  208834:	28c01bc4 	addi	r3,r5,111
  208838:	18c7883a 	add	r3,r3,r3
  20883c:	29401b84 	addi	r5,r5,110
  208840:	003f9c06 	br	2086b4 <_gp+0xffdf6aa0>
  208844:	00c05504 	movi	r3,340
  208848:	19400536 	bltu	r3,r5,208860 <_free_r+0x2d4>
  20884c:	100ad3fa 	srli	r5,r2,15
  208850:	28c01e04 	addi	r3,r5,120
  208854:	18c7883a 	add	r3,r3,r3
  208858:	29401dc4 	addi	r5,r5,119
  20885c:	003f9506 	br	2086b4 <_gp+0xffdf6aa0>
  208860:	00c15504 	movi	r3,1364
  208864:	19400536 	bltu	r3,r5,20887c <_free_r+0x2f0>
  208868:	100ad4ba 	srli	r5,r2,18
  20886c:	28c01f44 	addi	r3,r5,125
  208870:	18c7883a 	add	r3,r3,r3
  208874:	29401f04 	addi	r5,r5,124
  208878:	003f8e06 	br	2086b4 <_gp+0xffdf6aa0>
  20887c:	00c03f84 	movi	r3,254
  208880:	01401f84 	movi	r5,126
  208884:	003f8b06 	br	2086b4 <_gp+0xffdf6aa0>
  208888:	10c00054 	ori	r3,r2,1
  20888c:	30c00115 	stw	r3,4(r6)
  208890:	308d883a 	add	r6,r6,r2
  208894:	30800015 	stw	r2,0(r6)
  208898:	003f7806 	br	20867c <_gp+0xffdf6a68>

0020889c <__sfvwrite_r>:
  20889c:	30800217 	ldw	r2,8(r6)
  2088a0:	10006726 	beq	r2,zero,208a40 <__sfvwrite_r+0x1a4>
  2088a4:	28c0030b 	ldhu	r3,12(r5)
  2088a8:	defff404 	addi	sp,sp,-48
  2088ac:	dd400715 	stw	r21,28(sp)
  2088b0:	dd000615 	stw	r20,24(sp)
  2088b4:	dc000215 	stw	r16,8(sp)
  2088b8:	dfc00b15 	stw	ra,44(sp)
  2088bc:	df000a15 	stw	fp,40(sp)
  2088c0:	ddc00915 	stw	r23,36(sp)
  2088c4:	dd800815 	stw	r22,32(sp)
  2088c8:	dcc00515 	stw	r19,20(sp)
  2088cc:	dc800415 	stw	r18,16(sp)
  2088d0:	dc400315 	stw	r17,12(sp)
  2088d4:	1880020c 	andi	r2,r3,8
  2088d8:	2821883a 	mov	r16,r5
  2088dc:	202b883a 	mov	r21,r4
  2088e0:	3029883a 	mov	r20,r6
  2088e4:	10002726 	beq	r2,zero,208984 <__sfvwrite_r+0xe8>
  2088e8:	28800417 	ldw	r2,16(r5)
  2088ec:	10002526 	beq	r2,zero,208984 <__sfvwrite_r+0xe8>
  2088f0:	1880008c 	andi	r2,r3,2
  2088f4:	a4400017 	ldw	r17,0(r20)
  2088f8:	10002a26 	beq	r2,zero,2089a4 <__sfvwrite_r+0x108>
  2088fc:	05a00034 	movhi	r22,32768
  208900:	0027883a 	mov	r19,zero
  208904:	0025883a 	mov	r18,zero
  208908:	b5bf0004 	addi	r22,r22,-1024
  20890c:	980d883a 	mov	r6,r19
  208910:	a809883a 	mov	r4,r21
  208914:	90004626 	beq	r18,zero,208a30 <__sfvwrite_r+0x194>
  208918:	900f883a 	mov	r7,r18
  20891c:	b480022e 	bgeu	r22,r18,208928 <__sfvwrite_r+0x8c>
  208920:	01e00034 	movhi	r7,32768
  208924:	39ff0004 	addi	r7,r7,-1024
  208928:	80800917 	ldw	r2,36(r16)
  20892c:	81400717 	ldw	r5,28(r16)
  208930:	103ee83a 	callr	r2
  208934:	00805a0e 	bge	zero,r2,208aa0 <__sfvwrite_r+0x204>
  208938:	a0c00217 	ldw	r3,8(r20)
  20893c:	98a7883a 	add	r19,r19,r2
  208940:	90a5c83a 	sub	r18,r18,r2
  208944:	1885c83a 	sub	r2,r3,r2
  208948:	a0800215 	stw	r2,8(r20)
  20894c:	103fef1e 	bne	r2,zero,20890c <_gp+0xffdf6cf8>
  208950:	0005883a 	mov	r2,zero
  208954:	dfc00b17 	ldw	ra,44(sp)
  208958:	df000a17 	ldw	fp,40(sp)
  20895c:	ddc00917 	ldw	r23,36(sp)
  208960:	dd800817 	ldw	r22,32(sp)
  208964:	dd400717 	ldw	r21,28(sp)
  208968:	dd000617 	ldw	r20,24(sp)
  20896c:	dcc00517 	ldw	r19,20(sp)
  208970:	dc800417 	ldw	r18,16(sp)
  208974:	dc400317 	ldw	r17,12(sp)
  208978:	dc000217 	ldw	r16,8(sp)
  20897c:	dec00c04 	addi	sp,sp,48
  208980:	f800283a 	ret
  208984:	800b883a 	mov	r5,r16
  208988:	a809883a 	mov	r4,r21
  20898c:	020640c0 	call	20640c <__swsetup_r>
  208990:	1000ee1e 	bne	r2,zero,208d4c <__sfvwrite_r+0x4b0>
  208994:	80c0030b 	ldhu	r3,12(r16)
  208998:	a4400017 	ldw	r17,0(r20)
  20899c:	1880008c 	andi	r2,r3,2
  2089a0:	103fd61e 	bne	r2,zero,2088fc <_gp+0xffdf6ce8>
  2089a4:	1880004c 	andi	r2,r3,1
  2089a8:	1000421e 	bne	r2,zero,208ab4 <__sfvwrite_r+0x218>
  2089ac:	0039883a 	mov	fp,zero
  2089b0:	0025883a 	mov	r18,zero
  2089b4:	90001a26 	beq	r18,zero,208a20 <__sfvwrite_r+0x184>
  2089b8:	1880800c 	andi	r2,r3,512
  2089bc:	84c00217 	ldw	r19,8(r16)
  2089c0:	10002126 	beq	r2,zero,208a48 <__sfvwrite_r+0x1ac>
  2089c4:	982f883a 	mov	r23,r19
  2089c8:	94c09636 	bltu	r18,r19,208c24 <__sfvwrite_r+0x388>
  2089cc:	1881200c 	andi	r2,r3,1152
  2089d0:	1000a11e 	bne	r2,zero,208c58 <__sfvwrite_r+0x3bc>
  2089d4:	81000017 	ldw	r4,0(r16)
  2089d8:	b80d883a 	mov	r6,r23
  2089dc:	e00b883a 	mov	r5,fp
  2089e0:	0209bbc0 	call	209bbc <memmove>
  2089e4:	80c00217 	ldw	r3,8(r16)
  2089e8:	81000017 	ldw	r4,0(r16)
  2089ec:	9005883a 	mov	r2,r18
  2089f0:	1ce7c83a 	sub	r19,r3,r19
  2089f4:	25cf883a 	add	r7,r4,r23
  2089f8:	84c00215 	stw	r19,8(r16)
  2089fc:	81c00015 	stw	r7,0(r16)
  208a00:	a0c00217 	ldw	r3,8(r20)
  208a04:	e0b9883a 	add	fp,fp,r2
  208a08:	90a5c83a 	sub	r18,r18,r2
  208a0c:	18a7c83a 	sub	r19,r3,r2
  208a10:	a4c00215 	stw	r19,8(r20)
  208a14:	983fce26 	beq	r19,zero,208950 <_gp+0xffdf6d3c>
  208a18:	80c0030b 	ldhu	r3,12(r16)
  208a1c:	903fe61e 	bne	r18,zero,2089b8 <_gp+0xffdf6da4>
  208a20:	8f000017 	ldw	fp,0(r17)
  208a24:	8c800117 	ldw	r18,4(r17)
  208a28:	8c400204 	addi	r17,r17,8
  208a2c:	003fe106 	br	2089b4 <_gp+0xffdf6da0>
  208a30:	8cc00017 	ldw	r19,0(r17)
  208a34:	8c800117 	ldw	r18,4(r17)
  208a38:	8c400204 	addi	r17,r17,8
  208a3c:	003fb306 	br	20890c <_gp+0xffdf6cf8>
  208a40:	0005883a 	mov	r2,zero
  208a44:	f800283a 	ret
  208a48:	81000017 	ldw	r4,0(r16)
  208a4c:	80800417 	ldw	r2,16(r16)
  208a50:	11005a36 	bltu	r2,r4,208bbc <__sfvwrite_r+0x320>
  208a54:	85c00517 	ldw	r23,20(r16)
  208a58:	95c05836 	bltu	r18,r23,208bbc <__sfvwrite_r+0x320>
  208a5c:	00a00034 	movhi	r2,32768
  208a60:	10bfffc4 	addi	r2,r2,-1
  208a64:	9009883a 	mov	r4,r18
  208a68:	1480012e 	bgeu	r2,r18,208a70 <__sfvwrite_r+0x1d4>
  208a6c:	1009883a 	mov	r4,r2
  208a70:	b80b883a 	mov	r5,r23
  208a74:	02030f00 	call	2030f0 <__divsi3>
  208a78:	b80b883a 	mov	r5,r23
  208a7c:	1009883a 	mov	r4,r2
  208a80:	02032a40 	call	2032a4 <__mulsi3>
  208a84:	81400717 	ldw	r5,28(r16)
  208a88:	80c00917 	ldw	r3,36(r16)
  208a8c:	100f883a 	mov	r7,r2
  208a90:	e00d883a 	mov	r6,fp
  208a94:	a809883a 	mov	r4,r21
  208a98:	183ee83a 	callr	r3
  208a9c:	00bfd816 	blt	zero,r2,208a00 <_gp+0xffdf6dec>
  208aa0:	8080030b 	ldhu	r2,12(r16)
  208aa4:	10801014 	ori	r2,r2,64
  208aa8:	8080030d 	sth	r2,12(r16)
  208aac:	00bfffc4 	movi	r2,-1
  208ab0:	003fa806 	br	208954 <_gp+0xffdf6d40>
  208ab4:	0027883a 	mov	r19,zero
  208ab8:	0011883a 	mov	r8,zero
  208abc:	0039883a 	mov	fp,zero
  208ac0:	0025883a 	mov	r18,zero
  208ac4:	90001f26 	beq	r18,zero,208b44 <__sfvwrite_r+0x2a8>
  208ac8:	40005a26 	beq	r8,zero,208c34 <__sfvwrite_r+0x398>
  208acc:	982d883a 	mov	r22,r19
  208ad0:	94c0012e 	bgeu	r18,r19,208ad8 <__sfvwrite_r+0x23c>
  208ad4:	902d883a 	mov	r22,r18
  208ad8:	81000017 	ldw	r4,0(r16)
  208adc:	80800417 	ldw	r2,16(r16)
  208ae0:	b02f883a 	mov	r23,r22
  208ae4:	81c00517 	ldw	r7,20(r16)
  208ae8:	1100032e 	bgeu	r2,r4,208af8 <__sfvwrite_r+0x25c>
  208aec:	80c00217 	ldw	r3,8(r16)
  208af0:	38c7883a 	add	r3,r7,r3
  208af4:	1d801816 	blt	r3,r22,208b58 <__sfvwrite_r+0x2bc>
  208af8:	b1c03e16 	blt	r22,r7,208bf4 <__sfvwrite_r+0x358>
  208afc:	80800917 	ldw	r2,36(r16)
  208b00:	81400717 	ldw	r5,28(r16)
  208b04:	e00d883a 	mov	r6,fp
  208b08:	da000115 	stw	r8,4(sp)
  208b0c:	a809883a 	mov	r4,r21
  208b10:	103ee83a 	callr	r2
  208b14:	102f883a 	mov	r23,r2
  208b18:	da000117 	ldw	r8,4(sp)
  208b1c:	00bfe00e 	bge	zero,r2,208aa0 <_gp+0xffdf6e8c>
  208b20:	9de7c83a 	sub	r19,r19,r23
  208b24:	98001f26 	beq	r19,zero,208ba4 <__sfvwrite_r+0x308>
  208b28:	a0800217 	ldw	r2,8(r20)
  208b2c:	e5f9883a 	add	fp,fp,r23
  208b30:	95e5c83a 	sub	r18,r18,r23
  208b34:	15efc83a 	sub	r23,r2,r23
  208b38:	a5c00215 	stw	r23,8(r20)
  208b3c:	b83f8426 	beq	r23,zero,208950 <_gp+0xffdf6d3c>
  208b40:	903fe11e 	bne	r18,zero,208ac8 <_gp+0xffdf6eb4>
  208b44:	8f000017 	ldw	fp,0(r17)
  208b48:	8c800117 	ldw	r18,4(r17)
  208b4c:	0011883a 	mov	r8,zero
  208b50:	8c400204 	addi	r17,r17,8
  208b54:	003fdb06 	br	208ac4 <_gp+0xffdf6eb0>
  208b58:	180d883a 	mov	r6,r3
  208b5c:	e00b883a 	mov	r5,fp
  208b60:	da000115 	stw	r8,4(sp)
  208b64:	d8c00015 	stw	r3,0(sp)
  208b68:	0209bbc0 	call	209bbc <memmove>
  208b6c:	d8c00017 	ldw	r3,0(sp)
  208b70:	80800017 	ldw	r2,0(r16)
  208b74:	800b883a 	mov	r5,r16
  208b78:	a809883a 	mov	r4,r21
  208b7c:	10c5883a 	add	r2,r2,r3
  208b80:	80800015 	stw	r2,0(r16)
  208b84:	d8c00015 	stw	r3,0(sp)
  208b88:	020802c0 	call	20802c <_fflush_r>
  208b8c:	d8c00017 	ldw	r3,0(sp)
  208b90:	da000117 	ldw	r8,4(sp)
  208b94:	103fc21e 	bne	r2,zero,208aa0 <_gp+0xffdf6e8c>
  208b98:	182f883a 	mov	r23,r3
  208b9c:	9de7c83a 	sub	r19,r19,r23
  208ba0:	983fe11e 	bne	r19,zero,208b28 <_gp+0xffdf6f14>
  208ba4:	800b883a 	mov	r5,r16
  208ba8:	a809883a 	mov	r4,r21
  208bac:	020802c0 	call	20802c <_fflush_r>
  208bb0:	103fbb1e 	bne	r2,zero,208aa0 <_gp+0xffdf6e8c>
  208bb4:	0011883a 	mov	r8,zero
  208bb8:	003fdb06 	br	208b28 <_gp+0xffdf6f14>
  208bbc:	94c0012e 	bgeu	r18,r19,208bc4 <__sfvwrite_r+0x328>
  208bc0:	9027883a 	mov	r19,r18
  208bc4:	980d883a 	mov	r6,r19
  208bc8:	e00b883a 	mov	r5,fp
  208bcc:	0209bbc0 	call	209bbc <memmove>
  208bd0:	80800217 	ldw	r2,8(r16)
  208bd4:	80c00017 	ldw	r3,0(r16)
  208bd8:	14c5c83a 	sub	r2,r2,r19
  208bdc:	1cc7883a 	add	r3,r3,r19
  208be0:	80800215 	stw	r2,8(r16)
  208be4:	80c00015 	stw	r3,0(r16)
  208be8:	10004326 	beq	r2,zero,208cf8 <__sfvwrite_r+0x45c>
  208bec:	9805883a 	mov	r2,r19
  208bf0:	003f8306 	br	208a00 <_gp+0xffdf6dec>
  208bf4:	b00d883a 	mov	r6,r22
  208bf8:	e00b883a 	mov	r5,fp
  208bfc:	da000115 	stw	r8,4(sp)
  208c00:	0209bbc0 	call	209bbc <memmove>
  208c04:	80800217 	ldw	r2,8(r16)
  208c08:	80c00017 	ldw	r3,0(r16)
  208c0c:	da000117 	ldw	r8,4(sp)
  208c10:	1585c83a 	sub	r2,r2,r22
  208c14:	1dad883a 	add	r22,r3,r22
  208c18:	80800215 	stw	r2,8(r16)
  208c1c:	85800015 	stw	r22,0(r16)
  208c20:	003fbf06 	br	208b20 <_gp+0xffdf6f0c>
  208c24:	81000017 	ldw	r4,0(r16)
  208c28:	9027883a 	mov	r19,r18
  208c2c:	902f883a 	mov	r23,r18
  208c30:	003f6906 	br	2089d8 <_gp+0xffdf6dc4>
  208c34:	900d883a 	mov	r6,r18
  208c38:	01400284 	movi	r5,10
  208c3c:	e009883a 	mov	r4,fp
  208c40:	02099900 	call	209990 <memchr>
  208c44:	10003e26 	beq	r2,zero,208d40 <__sfvwrite_r+0x4a4>
  208c48:	10800044 	addi	r2,r2,1
  208c4c:	1727c83a 	sub	r19,r2,fp
  208c50:	02000044 	movi	r8,1
  208c54:	003f9d06 	br	208acc <_gp+0xffdf6eb8>
  208c58:	80800517 	ldw	r2,20(r16)
  208c5c:	81400417 	ldw	r5,16(r16)
  208c60:	81c00017 	ldw	r7,0(r16)
  208c64:	10a7883a 	add	r19,r2,r2
  208c68:	9885883a 	add	r2,r19,r2
  208c6c:	1026d7fa 	srli	r19,r2,31
  208c70:	396dc83a 	sub	r22,r7,r5
  208c74:	b1000044 	addi	r4,r22,1
  208c78:	9885883a 	add	r2,r19,r2
  208c7c:	1027d07a 	srai	r19,r2,1
  208c80:	2485883a 	add	r2,r4,r18
  208c84:	980d883a 	mov	r6,r19
  208c88:	9880022e 	bgeu	r19,r2,208c94 <__sfvwrite_r+0x3f8>
  208c8c:	1027883a 	mov	r19,r2
  208c90:	100d883a 	mov	r6,r2
  208c94:	18c1000c 	andi	r3,r3,1024
  208c98:	18001c26 	beq	r3,zero,208d0c <__sfvwrite_r+0x470>
  208c9c:	300b883a 	mov	r5,r6
  208ca0:	a809883a 	mov	r4,r21
  208ca4:	02091840 	call	209184 <_malloc_r>
  208ca8:	102f883a 	mov	r23,r2
  208cac:	10002926 	beq	r2,zero,208d54 <__sfvwrite_r+0x4b8>
  208cb0:	81400417 	ldw	r5,16(r16)
  208cb4:	b00d883a 	mov	r6,r22
  208cb8:	1009883a 	mov	r4,r2
  208cbc:	0209a740 	call	209a74 <memcpy>
  208cc0:	8080030b 	ldhu	r2,12(r16)
  208cc4:	00fedfc4 	movi	r3,-1153
  208cc8:	10c4703a 	and	r2,r2,r3
  208ccc:	10802014 	ori	r2,r2,128
  208cd0:	8080030d 	sth	r2,12(r16)
  208cd4:	bd89883a 	add	r4,r23,r22
  208cd8:	9d8fc83a 	sub	r7,r19,r22
  208cdc:	85c00415 	stw	r23,16(r16)
  208ce0:	84c00515 	stw	r19,20(r16)
  208ce4:	81000015 	stw	r4,0(r16)
  208ce8:	9027883a 	mov	r19,r18
  208cec:	81c00215 	stw	r7,8(r16)
  208cf0:	902f883a 	mov	r23,r18
  208cf4:	003f3806 	br	2089d8 <_gp+0xffdf6dc4>
  208cf8:	800b883a 	mov	r5,r16
  208cfc:	a809883a 	mov	r4,r21
  208d00:	020802c0 	call	20802c <_fflush_r>
  208d04:	103fb926 	beq	r2,zero,208bec <_gp+0xffdf6fd8>
  208d08:	003f6506 	br	208aa0 <_gp+0xffdf6e8c>
  208d0c:	a809883a 	mov	r4,r21
  208d10:	020b0600 	call	20b060 <_realloc_r>
  208d14:	102f883a 	mov	r23,r2
  208d18:	103fee1e 	bne	r2,zero,208cd4 <_gp+0xffdf70c0>
  208d1c:	81400417 	ldw	r5,16(r16)
  208d20:	a809883a 	mov	r4,r21
  208d24:	020858c0 	call	20858c <_free_r>
  208d28:	8080030b 	ldhu	r2,12(r16)
  208d2c:	00ffdfc4 	movi	r3,-129
  208d30:	1884703a 	and	r2,r3,r2
  208d34:	00c00304 	movi	r3,12
  208d38:	a8c00015 	stw	r3,0(r21)
  208d3c:	003f5906 	br	208aa4 <_gp+0xffdf6e90>
  208d40:	94c00044 	addi	r19,r18,1
  208d44:	02000044 	movi	r8,1
  208d48:	003f6006 	br	208acc <_gp+0xffdf6eb8>
  208d4c:	00bfffc4 	movi	r2,-1
  208d50:	003f0006 	br	208954 <_gp+0xffdf6d40>
  208d54:	00800304 	movi	r2,12
  208d58:	a8800015 	stw	r2,0(r21)
  208d5c:	8080030b 	ldhu	r2,12(r16)
  208d60:	003f5006 	br	208aa4 <_gp+0xffdf6e90>

00208d64 <_fwalk>:
  208d64:	defff704 	addi	sp,sp,-36
  208d68:	dd000415 	stw	r20,16(sp)
  208d6c:	dfc00815 	stw	ra,32(sp)
  208d70:	ddc00715 	stw	r23,28(sp)
  208d74:	dd800615 	stw	r22,24(sp)
  208d78:	dd400515 	stw	r21,20(sp)
  208d7c:	dcc00315 	stw	r19,12(sp)
  208d80:	dc800215 	stw	r18,8(sp)
  208d84:	dc400115 	stw	r17,4(sp)
  208d88:	dc000015 	stw	r16,0(sp)
  208d8c:	2500b804 	addi	r20,r4,736
  208d90:	a0002326 	beq	r20,zero,208e20 <_fwalk+0xbc>
  208d94:	282b883a 	mov	r21,r5
  208d98:	002f883a 	mov	r23,zero
  208d9c:	05800044 	movi	r22,1
  208da0:	04ffffc4 	movi	r19,-1
  208da4:	a4400117 	ldw	r17,4(r20)
  208da8:	a4800217 	ldw	r18,8(r20)
  208dac:	8c7fffc4 	addi	r17,r17,-1
  208db0:	88000d16 	blt	r17,zero,208de8 <_fwalk+0x84>
  208db4:	94000304 	addi	r16,r18,12
  208db8:	94800384 	addi	r18,r18,14
  208dbc:	8080000b 	ldhu	r2,0(r16)
  208dc0:	8c7fffc4 	addi	r17,r17,-1
  208dc4:	813ffd04 	addi	r4,r16,-12
  208dc8:	b080042e 	bgeu	r22,r2,208ddc <_fwalk+0x78>
  208dcc:	9080000f 	ldh	r2,0(r18)
  208dd0:	14c00226 	beq	r2,r19,208ddc <_fwalk+0x78>
  208dd4:	a83ee83a 	callr	r21
  208dd8:	b8aeb03a 	or	r23,r23,r2
  208ddc:	84001a04 	addi	r16,r16,104
  208de0:	94801a04 	addi	r18,r18,104
  208de4:	8cfff51e 	bne	r17,r19,208dbc <_gp+0xffdf71a8>
  208de8:	a5000017 	ldw	r20,0(r20)
  208dec:	a03fed1e 	bne	r20,zero,208da4 <_gp+0xffdf7190>
  208df0:	b805883a 	mov	r2,r23
  208df4:	dfc00817 	ldw	ra,32(sp)
  208df8:	ddc00717 	ldw	r23,28(sp)
  208dfc:	dd800617 	ldw	r22,24(sp)
  208e00:	dd400517 	ldw	r21,20(sp)
  208e04:	dd000417 	ldw	r20,16(sp)
  208e08:	dcc00317 	ldw	r19,12(sp)
  208e0c:	dc800217 	ldw	r18,8(sp)
  208e10:	dc400117 	ldw	r17,4(sp)
  208e14:	dc000017 	ldw	r16,0(sp)
  208e18:	dec00904 	addi	sp,sp,36
  208e1c:	f800283a 	ret
  208e20:	002f883a 	mov	r23,zero
  208e24:	003ff206 	br	208df0 <_gp+0xffdf71dc>

00208e28 <_fwalk_reent>:
  208e28:	defff704 	addi	sp,sp,-36
  208e2c:	dd000415 	stw	r20,16(sp)
  208e30:	dfc00815 	stw	ra,32(sp)
  208e34:	ddc00715 	stw	r23,28(sp)
  208e38:	dd800615 	stw	r22,24(sp)
  208e3c:	dd400515 	stw	r21,20(sp)
  208e40:	dcc00315 	stw	r19,12(sp)
  208e44:	dc800215 	stw	r18,8(sp)
  208e48:	dc400115 	stw	r17,4(sp)
  208e4c:	dc000015 	stw	r16,0(sp)
  208e50:	2500b804 	addi	r20,r4,736
  208e54:	a0002326 	beq	r20,zero,208ee4 <_fwalk_reent+0xbc>
  208e58:	282b883a 	mov	r21,r5
  208e5c:	2027883a 	mov	r19,r4
  208e60:	002f883a 	mov	r23,zero
  208e64:	05800044 	movi	r22,1
  208e68:	04bfffc4 	movi	r18,-1
  208e6c:	a4400117 	ldw	r17,4(r20)
  208e70:	a4000217 	ldw	r16,8(r20)
  208e74:	8c7fffc4 	addi	r17,r17,-1
  208e78:	88000c16 	blt	r17,zero,208eac <_fwalk_reent+0x84>
  208e7c:	84000304 	addi	r16,r16,12
  208e80:	8080000b 	ldhu	r2,0(r16)
  208e84:	8c7fffc4 	addi	r17,r17,-1
  208e88:	817ffd04 	addi	r5,r16,-12
  208e8c:	b080052e 	bgeu	r22,r2,208ea4 <_fwalk_reent+0x7c>
  208e90:	8080008f 	ldh	r2,2(r16)
  208e94:	9809883a 	mov	r4,r19
  208e98:	14800226 	beq	r2,r18,208ea4 <_fwalk_reent+0x7c>
  208e9c:	a83ee83a 	callr	r21
  208ea0:	b8aeb03a 	or	r23,r23,r2
  208ea4:	84001a04 	addi	r16,r16,104
  208ea8:	8cbff51e 	bne	r17,r18,208e80 <_gp+0xffdf726c>
  208eac:	a5000017 	ldw	r20,0(r20)
  208eb0:	a03fee1e 	bne	r20,zero,208e6c <_gp+0xffdf7258>
  208eb4:	b805883a 	mov	r2,r23
  208eb8:	dfc00817 	ldw	ra,32(sp)
  208ebc:	ddc00717 	ldw	r23,28(sp)
  208ec0:	dd800617 	ldw	r22,24(sp)
  208ec4:	dd400517 	ldw	r21,20(sp)
  208ec8:	dd000417 	ldw	r20,16(sp)
  208ecc:	dcc00317 	ldw	r19,12(sp)
  208ed0:	dc800217 	ldw	r18,8(sp)
  208ed4:	dc400117 	ldw	r17,4(sp)
  208ed8:	dc000017 	ldw	r16,0(sp)
  208edc:	dec00904 	addi	sp,sp,36
  208ee0:	f800283a 	ret
  208ee4:	002f883a 	mov	r23,zero
  208ee8:	003ff206 	br	208eb4 <_gp+0xffdf72a0>

00208eec <_setlocale_r>:
  208eec:	30001b26 	beq	r6,zero,208f5c <_setlocale_r+0x70>
  208ef0:	01400874 	movhi	r5,33
  208ef4:	defffe04 	addi	sp,sp,-8
  208ef8:	295b2304 	addi	r5,r5,27788
  208efc:	3009883a 	mov	r4,r6
  208f00:	dc000015 	stw	r16,0(sp)
  208f04:	dfc00115 	stw	ra,4(sp)
  208f08:	3021883a 	mov	r16,r6
  208f0c:	020b7c80 	call	20b7c8 <strcmp>
  208f10:	1000061e 	bne	r2,zero,208f2c <_setlocale_r+0x40>
  208f14:	00800874 	movhi	r2,33
  208f18:	109b2204 	addi	r2,r2,27784
  208f1c:	dfc00117 	ldw	ra,4(sp)
  208f20:	dc000017 	ldw	r16,0(sp)
  208f24:	dec00204 	addi	sp,sp,8
  208f28:	f800283a 	ret
  208f2c:	01400874 	movhi	r5,33
  208f30:	295b2204 	addi	r5,r5,27784
  208f34:	8009883a 	mov	r4,r16
  208f38:	020b7c80 	call	20b7c8 <strcmp>
  208f3c:	103ff526 	beq	r2,zero,208f14 <_gp+0xffdf7300>
  208f40:	01400874 	movhi	r5,33
  208f44:	295b0d04 	addi	r5,r5,27700
  208f48:	8009883a 	mov	r4,r16
  208f4c:	020b7c80 	call	20b7c8 <strcmp>
  208f50:	103ff026 	beq	r2,zero,208f14 <_gp+0xffdf7300>
  208f54:	0005883a 	mov	r2,zero
  208f58:	003ff006 	br	208f1c <_gp+0xffdf7308>
  208f5c:	00800874 	movhi	r2,33
  208f60:	109b2204 	addi	r2,r2,27784
  208f64:	f800283a 	ret

00208f68 <__locale_charset>:
  208f68:	00801074 	movhi	r2,65
  208f6c:	10a11d04 	addi	r2,r2,-31628
  208f70:	f800283a 	ret

00208f74 <__locale_mb_cur_max>:
  208f74:	00801074 	movhi	r2,65
  208f78:	10a70b04 	addi	r2,r2,-25556
  208f7c:	10800017 	ldw	r2,0(r2)
  208f80:	f800283a 	ret

00208f84 <__locale_msgcharset>:
  208f84:	00801074 	movhi	r2,65
  208f88:	10a11504 	addi	r2,r2,-31660
  208f8c:	f800283a 	ret

00208f90 <__locale_cjk_lang>:
  208f90:	0005883a 	mov	r2,zero
  208f94:	f800283a 	ret

00208f98 <_localeconv_r>:
  208f98:	00801074 	movhi	r2,65
  208f9c:	10a12504 	addi	r2,r2,-31596
  208fa0:	f800283a 	ret

00208fa4 <setlocale>:
  208fa4:	00801074 	movhi	r2,65
  208fa8:	10a70a04 	addi	r2,r2,-25560
  208fac:	280d883a 	mov	r6,r5
  208fb0:	200b883a 	mov	r5,r4
  208fb4:	11000017 	ldw	r4,0(r2)
  208fb8:	0208eec1 	jmpi	208eec <_setlocale_r>

00208fbc <localeconv>:
  208fbc:	00801074 	movhi	r2,65
  208fc0:	10a12504 	addi	r2,r2,-31596
  208fc4:	f800283a 	ret

00208fc8 <__smakebuf_r>:
  208fc8:	2880030b 	ldhu	r2,12(r5)
  208fcc:	10c0008c 	andi	r3,r2,2
  208fd0:	1800411e 	bne	r3,zero,2090d8 <__smakebuf_r+0x110>
  208fd4:	deffec04 	addi	sp,sp,-80
  208fd8:	dc000f15 	stw	r16,60(sp)
  208fdc:	2821883a 	mov	r16,r5
  208fe0:	2940038f 	ldh	r5,14(r5)
  208fe4:	dc401015 	stw	r17,64(sp)
  208fe8:	dfc01315 	stw	ra,76(sp)
  208fec:	dcc01215 	stw	r19,72(sp)
  208ff0:	dc801115 	stw	r18,68(sp)
  208ff4:	2023883a 	mov	r17,r4
  208ff8:	28001c16 	blt	r5,zero,20906c <__smakebuf_r+0xa4>
  208ffc:	d80d883a 	mov	r6,sp
  209000:	020d5900 	call	20d590 <_fstat_r>
  209004:	10001816 	blt	r2,zero,209068 <__smakebuf_r+0xa0>
  209008:	d8800117 	ldw	r2,4(sp)
  20900c:	00e00014 	movui	r3,32768
  209010:	10bc000c 	andi	r2,r2,61440
  209014:	14c80020 	cmpeqi	r19,r2,8192
  209018:	10c03726 	beq	r2,r3,2090f8 <__smakebuf_r+0x130>
  20901c:	80c0030b 	ldhu	r3,12(r16)
  209020:	18c20014 	ori	r3,r3,2048
  209024:	80c0030d 	sth	r3,12(r16)
  209028:	00c80004 	movi	r3,8192
  20902c:	10c0521e 	bne	r2,r3,209178 <__smakebuf_r+0x1b0>
  209030:	8140038f 	ldh	r5,14(r16)
  209034:	8809883a 	mov	r4,r17
  209038:	020d5ec0 	call	20d5ec <_isatty_r>
  20903c:	10004c26 	beq	r2,zero,209170 <__smakebuf_r+0x1a8>
  209040:	8080030b 	ldhu	r2,12(r16)
  209044:	80c010c4 	addi	r3,r16,67
  209048:	80c00015 	stw	r3,0(r16)
  20904c:	10800054 	ori	r2,r2,1
  209050:	8080030d 	sth	r2,12(r16)
  209054:	00800044 	movi	r2,1
  209058:	80c00415 	stw	r3,16(r16)
  20905c:	80800515 	stw	r2,20(r16)
  209060:	04810004 	movi	r18,1024
  209064:	00000706 	br	209084 <__smakebuf_r+0xbc>
  209068:	8080030b 	ldhu	r2,12(r16)
  20906c:	10c0200c 	andi	r3,r2,128
  209070:	18001f1e 	bne	r3,zero,2090f0 <__smakebuf_r+0x128>
  209074:	04810004 	movi	r18,1024
  209078:	10820014 	ori	r2,r2,2048
  20907c:	8080030d 	sth	r2,12(r16)
  209080:	0027883a 	mov	r19,zero
  209084:	900b883a 	mov	r5,r18
  209088:	8809883a 	mov	r4,r17
  20908c:	02091840 	call	209184 <_malloc_r>
  209090:	10002c26 	beq	r2,zero,209144 <__smakebuf_r+0x17c>
  209094:	80c0030b 	ldhu	r3,12(r16)
  209098:	01000874 	movhi	r4,33
  20909c:	21203004 	addi	r4,r4,-32576
  2090a0:	89000f15 	stw	r4,60(r17)
  2090a4:	18c02014 	ori	r3,r3,128
  2090a8:	80c0030d 	sth	r3,12(r16)
  2090ac:	80800015 	stw	r2,0(r16)
  2090b0:	80800415 	stw	r2,16(r16)
  2090b4:	84800515 	stw	r18,20(r16)
  2090b8:	98001a1e 	bne	r19,zero,209124 <__smakebuf_r+0x15c>
  2090bc:	dfc01317 	ldw	ra,76(sp)
  2090c0:	dcc01217 	ldw	r19,72(sp)
  2090c4:	dc801117 	ldw	r18,68(sp)
  2090c8:	dc401017 	ldw	r17,64(sp)
  2090cc:	dc000f17 	ldw	r16,60(sp)
  2090d0:	dec01404 	addi	sp,sp,80
  2090d4:	f800283a 	ret
  2090d8:	288010c4 	addi	r2,r5,67
  2090dc:	28800015 	stw	r2,0(r5)
  2090e0:	28800415 	stw	r2,16(r5)
  2090e4:	00800044 	movi	r2,1
  2090e8:	28800515 	stw	r2,20(r5)
  2090ec:	f800283a 	ret
  2090f0:	04801004 	movi	r18,64
  2090f4:	003fe006 	br	209078 <_gp+0xffdf7464>
  2090f8:	81000a17 	ldw	r4,40(r16)
  2090fc:	00c00874 	movhi	r3,33
  209100:	18edd904 	addi	r3,r3,-18588
  209104:	20ffc51e 	bne	r4,r3,20901c <_gp+0xffdf7408>
  209108:	8080030b 	ldhu	r2,12(r16)
  20910c:	04810004 	movi	r18,1024
  209110:	84801315 	stw	r18,76(r16)
  209114:	1484b03a 	or	r2,r2,r18
  209118:	8080030d 	sth	r2,12(r16)
  20911c:	0027883a 	mov	r19,zero
  209120:	003fd806 	br	209084 <_gp+0xffdf7470>
  209124:	8140038f 	ldh	r5,14(r16)
  209128:	8809883a 	mov	r4,r17
  20912c:	020d5ec0 	call	20d5ec <_isatty_r>
  209130:	103fe226 	beq	r2,zero,2090bc <_gp+0xffdf74a8>
  209134:	8080030b 	ldhu	r2,12(r16)
  209138:	10800054 	ori	r2,r2,1
  20913c:	8080030d 	sth	r2,12(r16)
  209140:	003fde06 	br	2090bc <_gp+0xffdf74a8>
  209144:	8080030b 	ldhu	r2,12(r16)
  209148:	10c0800c 	andi	r3,r2,512
  20914c:	183fdb1e 	bne	r3,zero,2090bc <_gp+0xffdf74a8>
  209150:	10800094 	ori	r2,r2,2
  209154:	80c010c4 	addi	r3,r16,67
  209158:	8080030d 	sth	r2,12(r16)
  20915c:	00800044 	movi	r2,1
  209160:	80c00015 	stw	r3,0(r16)
  209164:	80c00415 	stw	r3,16(r16)
  209168:	80800515 	stw	r2,20(r16)
  20916c:	003fd306 	br	2090bc <_gp+0xffdf74a8>
  209170:	04810004 	movi	r18,1024
  209174:	003fc306 	br	209084 <_gp+0xffdf7470>
  209178:	0027883a 	mov	r19,zero
  20917c:	04810004 	movi	r18,1024
  209180:	003fc006 	br	209084 <_gp+0xffdf7470>

00209184 <_malloc_r>:
  209184:	defff504 	addi	sp,sp,-44
  209188:	dc800315 	stw	r18,12(sp)
  20918c:	dfc00a15 	stw	ra,40(sp)
  209190:	df000915 	stw	fp,36(sp)
  209194:	ddc00815 	stw	r23,32(sp)
  209198:	dd800715 	stw	r22,28(sp)
  20919c:	dd400615 	stw	r21,24(sp)
  2091a0:	dd000515 	stw	r20,20(sp)
  2091a4:	dcc00415 	stw	r19,16(sp)
  2091a8:	dc400215 	stw	r17,8(sp)
  2091ac:	dc000115 	stw	r16,4(sp)
  2091b0:	288002c4 	addi	r2,r5,11
  2091b4:	00c00584 	movi	r3,22
  2091b8:	2025883a 	mov	r18,r4
  2091bc:	18807f2e 	bgeu	r3,r2,2093bc <_malloc_r+0x238>
  2091c0:	047ffe04 	movi	r17,-8
  2091c4:	1462703a 	and	r17,r2,r17
  2091c8:	8800a316 	blt	r17,zero,209458 <_malloc_r+0x2d4>
  2091cc:	8940a236 	bltu	r17,r5,209458 <_malloc_r+0x2d4>
  2091d0:	02112840 	call	211284 <__malloc_lock>
  2091d4:	00807dc4 	movi	r2,503
  2091d8:	1441e92e 	bgeu	r2,r17,209980 <_malloc_r+0x7fc>
  2091dc:	8804d27a 	srli	r2,r17,9
  2091e0:	1000a126 	beq	r2,zero,209468 <_malloc_r+0x2e4>
  2091e4:	00c00104 	movi	r3,4
  2091e8:	18811e36 	bltu	r3,r2,209664 <_malloc_r+0x4e0>
  2091ec:	8804d1ba 	srli	r2,r17,6
  2091f0:	12000e44 	addi	r8,r2,57
  2091f4:	11c00e04 	addi	r7,r2,56
  2091f8:	4209883a 	add	r4,r8,r8
  2091fc:	04c01074 	movhi	r19,65
  209200:	2109883a 	add	r4,r4,r4
  209204:	9ce13304 	addi	r19,r19,-31540
  209208:	2109883a 	add	r4,r4,r4
  20920c:	9909883a 	add	r4,r19,r4
  209210:	24000117 	ldw	r16,4(r4)
  209214:	213ffe04 	addi	r4,r4,-8
  209218:	24009726 	beq	r4,r16,209478 <_malloc_r+0x2f4>
  20921c:	80800117 	ldw	r2,4(r16)
  209220:	01bfff04 	movi	r6,-4
  209224:	014003c4 	movi	r5,15
  209228:	1184703a 	and	r2,r2,r6
  20922c:	1447c83a 	sub	r3,r2,r17
  209230:	28c00716 	blt	r5,r3,209250 <_malloc_r+0xcc>
  209234:	1800920e 	bge	r3,zero,209480 <_malloc_r+0x2fc>
  209238:	84000317 	ldw	r16,12(r16)
  20923c:	24008e26 	beq	r4,r16,209478 <_malloc_r+0x2f4>
  209240:	80800117 	ldw	r2,4(r16)
  209244:	1184703a 	and	r2,r2,r6
  209248:	1447c83a 	sub	r3,r2,r17
  20924c:	28fff90e 	bge	r5,r3,209234 <_gp+0xffdf7620>
  209250:	3809883a 	mov	r4,r7
  209254:	01801074 	movhi	r6,65
  209258:	9c000417 	ldw	r16,16(r19)
  20925c:	31a13304 	addi	r6,r6,-31540
  209260:	32000204 	addi	r8,r6,8
  209264:	82013426 	beq	r16,r8,209738 <_malloc_r+0x5b4>
  209268:	80c00117 	ldw	r3,4(r16)
  20926c:	00bfff04 	movi	r2,-4
  209270:	188e703a 	and	r7,r3,r2
  209274:	3c45c83a 	sub	r2,r7,r17
  209278:	00c003c4 	movi	r3,15
  20927c:	18811f16 	blt	r3,r2,2096fc <_malloc_r+0x578>
  209280:	32000515 	stw	r8,20(r6)
  209284:	32000415 	stw	r8,16(r6)
  209288:	10007f0e 	bge	r2,zero,209488 <_malloc_r+0x304>
  20928c:	00807fc4 	movi	r2,511
  209290:	11c0fd36 	bltu	r2,r7,209688 <_malloc_r+0x504>
  209294:	3806d0fa 	srli	r3,r7,3
  209298:	01c00044 	movi	r7,1
  20929c:	30800117 	ldw	r2,4(r6)
  2092a0:	19400044 	addi	r5,r3,1
  2092a4:	294b883a 	add	r5,r5,r5
  2092a8:	1807d0ba 	srai	r3,r3,2
  2092ac:	294b883a 	add	r5,r5,r5
  2092b0:	294b883a 	add	r5,r5,r5
  2092b4:	298b883a 	add	r5,r5,r6
  2092b8:	38c6983a 	sll	r3,r7,r3
  2092bc:	29c00017 	ldw	r7,0(r5)
  2092c0:	2a7ffe04 	addi	r9,r5,-8
  2092c4:	1886b03a 	or	r3,r3,r2
  2092c8:	82400315 	stw	r9,12(r16)
  2092cc:	81c00215 	stw	r7,8(r16)
  2092d0:	30c00115 	stw	r3,4(r6)
  2092d4:	2c000015 	stw	r16,0(r5)
  2092d8:	3c000315 	stw	r16,12(r7)
  2092dc:	2005d0ba 	srai	r2,r4,2
  2092e0:	01400044 	movi	r5,1
  2092e4:	288a983a 	sll	r5,r5,r2
  2092e8:	19406f36 	bltu	r3,r5,2094a8 <_malloc_r+0x324>
  2092ec:	28c4703a 	and	r2,r5,r3
  2092f0:	10000a1e 	bne	r2,zero,20931c <_malloc_r+0x198>
  2092f4:	00bfff04 	movi	r2,-4
  2092f8:	294b883a 	add	r5,r5,r5
  2092fc:	2088703a 	and	r4,r4,r2
  209300:	28c4703a 	and	r2,r5,r3
  209304:	21000104 	addi	r4,r4,4
  209308:	1000041e 	bne	r2,zero,20931c <_malloc_r+0x198>
  20930c:	294b883a 	add	r5,r5,r5
  209310:	28c4703a 	and	r2,r5,r3
  209314:	21000104 	addi	r4,r4,4
  209318:	103ffc26 	beq	r2,zero,20930c <_gp+0xffdf76f8>
  20931c:	02bfff04 	movi	r10,-4
  209320:	024003c4 	movi	r9,15
  209324:	21800044 	addi	r6,r4,1
  209328:	318d883a 	add	r6,r6,r6
  20932c:	318d883a 	add	r6,r6,r6
  209330:	318d883a 	add	r6,r6,r6
  209334:	998d883a 	add	r6,r19,r6
  209338:	333ffe04 	addi	r12,r6,-8
  20933c:	2017883a 	mov	r11,r4
  209340:	31800104 	addi	r6,r6,4
  209344:	34000017 	ldw	r16,0(r6)
  209348:	31fffd04 	addi	r7,r6,-12
  20934c:	81c0041e 	bne	r16,r7,209360 <_malloc_r+0x1dc>
  209350:	0000fb06 	br	209740 <_malloc_r+0x5bc>
  209354:	1801030e 	bge	r3,zero,209764 <_malloc_r+0x5e0>
  209358:	84000317 	ldw	r16,12(r16)
  20935c:	81c0f826 	beq	r16,r7,209740 <_malloc_r+0x5bc>
  209360:	80800117 	ldw	r2,4(r16)
  209364:	1284703a 	and	r2,r2,r10
  209368:	1447c83a 	sub	r3,r2,r17
  20936c:	48fff90e 	bge	r9,r3,209354 <_gp+0xffdf7740>
  209370:	80800317 	ldw	r2,12(r16)
  209374:	81000217 	ldw	r4,8(r16)
  209378:	89400054 	ori	r5,r17,1
  20937c:	81400115 	stw	r5,4(r16)
  209380:	20800315 	stw	r2,12(r4)
  209384:	11000215 	stw	r4,8(r2)
  209388:	8463883a 	add	r17,r16,r17
  20938c:	9c400515 	stw	r17,20(r19)
  209390:	9c400415 	stw	r17,16(r19)
  209394:	18800054 	ori	r2,r3,1
  209398:	88800115 	stw	r2,4(r17)
  20939c:	8a000315 	stw	r8,12(r17)
  2093a0:	8a000215 	stw	r8,8(r17)
  2093a4:	88e3883a 	add	r17,r17,r3
  2093a8:	88c00015 	stw	r3,0(r17)
  2093ac:	9009883a 	mov	r4,r18
  2093b0:	02112a80 	call	2112a8 <__malloc_unlock>
  2093b4:	80800204 	addi	r2,r16,8
  2093b8:	00001b06 	br	209428 <_malloc_r+0x2a4>
  2093bc:	04400404 	movi	r17,16
  2093c0:	89402536 	bltu	r17,r5,209458 <_malloc_r+0x2d4>
  2093c4:	02112840 	call	211284 <__malloc_lock>
  2093c8:	00800184 	movi	r2,6
  2093cc:	01000084 	movi	r4,2
  2093d0:	04c01074 	movhi	r19,65
  2093d4:	1085883a 	add	r2,r2,r2
  2093d8:	9ce13304 	addi	r19,r19,-31540
  2093dc:	1085883a 	add	r2,r2,r2
  2093e0:	9885883a 	add	r2,r19,r2
  2093e4:	14000117 	ldw	r16,4(r2)
  2093e8:	10fffe04 	addi	r3,r2,-8
  2093ec:	80c0d926 	beq	r16,r3,209754 <_malloc_r+0x5d0>
  2093f0:	80c00117 	ldw	r3,4(r16)
  2093f4:	81000317 	ldw	r4,12(r16)
  2093f8:	00bfff04 	movi	r2,-4
  2093fc:	1884703a 	and	r2,r3,r2
  209400:	81400217 	ldw	r5,8(r16)
  209404:	8085883a 	add	r2,r16,r2
  209408:	10c00117 	ldw	r3,4(r2)
  20940c:	29000315 	stw	r4,12(r5)
  209410:	21400215 	stw	r5,8(r4)
  209414:	18c00054 	ori	r3,r3,1
  209418:	10c00115 	stw	r3,4(r2)
  20941c:	9009883a 	mov	r4,r18
  209420:	02112a80 	call	2112a8 <__malloc_unlock>
  209424:	80800204 	addi	r2,r16,8
  209428:	dfc00a17 	ldw	ra,40(sp)
  20942c:	df000917 	ldw	fp,36(sp)
  209430:	ddc00817 	ldw	r23,32(sp)
  209434:	dd800717 	ldw	r22,28(sp)
  209438:	dd400617 	ldw	r21,24(sp)
  20943c:	dd000517 	ldw	r20,20(sp)
  209440:	dcc00417 	ldw	r19,16(sp)
  209444:	dc800317 	ldw	r18,12(sp)
  209448:	dc400217 	ldw	r17,8(sp)
  20944c:	dc000117 	ldw	r16,4(sp)
  209450:	dec00b04 	addi	sp,sp,44
  209454:	f800283a 	ret
  209458:	00800304 	movi	r2,12
  20945c:	90800015 	stw	r2,0(r18)
  209460:	0005883a 	mov	r2,zero
  209464:	003ff006 	br	209428 <_gp+0xffdf7814>
  209468:	01002004 	movi	r4,128
  20946c:	02001004 	movi	r8,64
  209470:	01c00fc4 	movi	r7,63
  209474:	003f6106 	br	2091fc <_gp+0xffdf75e8>
  209478:	4009883a 	mov	r4,r8
  20947c:	003f7506 	br	209254 <_gp+0xffdf7640>
  209480:	81000317 	ldw	r4,12(r16)
  209484:	003fde06 	br	209400 <_gp+0xffdf77ec>
  209488:	81c5883a 	add	r2,r16,r7
  20948c:	11400117 	ldw	r5,4(r2)
  209490:	9009883a 	mov	r4,r18
  209494:	29400054 	ori	r5,r5,1
  209498:	11400115 	stw	r5,4(r2)
  20949c:	02112a80 	call	2112a8 <__malloc_unlock>
  2094a0:	80800204 	addi	r2,r16,8
  2094a4:	003fe006 	br	209428 <_gp+0xffdf7814>
  2094a8:	9c000217 	ldw	r16,8(r19)
  2094ac:	00bfff04 	movi	r2,-4
  2094b0:	85800117 	ldw	r22,4(r16)
  2094b4:	b0ac703a 	and	r22,r22,r2
  2094b8:	b4400336 	bltu	r22,r17,2094c8 <_malloc_r+0x344>
  2094bc:	b445c83a 	sub	r2,r22,r17
  2094c0:	00c003c4 	movi	r3,15
  2094c4:	18805d16 	blt	r3,r2,20963c <_malloc_r+0x4b8>
  2094c8:	05c01074 	movhi	r23,65
  2094cc:	00801074 	movhi	r2,65
  2094d0:	10a72a04 	addi	r2,r2,-25432
  2094d4:	bde70c04 	addi	r23,r23,-25552
  2094d8:	15400017 	ldw	r21,0(r2)
  2094dc:	b8c00017 	ldw	r3,0(r23)
  2094e0:	00bfffc4 	movi	r2,-1
  2094e4:	858d883a 	add	r6,r16,r22
  2094e8:	8d6b883a 	add	r21,r17,r21
  2094ec:	1880ea26 	beq	r3,r2,209898 <_malloc_r+0x714>
  2094f0:	ad4403c4 	addi	r21,r21,4111
  2094f4:	00bc0004 	movi	r2,-4096
  2094f8:	a8aa703a 	and	r21,r21,r2
  2094fc:	a80b883a 	mov	r5,r21
  209500:	9009883a 	mov	r4,r18
  209504:	d9800015 	stw	r6,0(sp)
  209508:	020b6380 	call	20b638 <_sbrk_r>
  20950c:	1029883a 	mov	r20,r2
  209510:	00bfffc4 	movi	r2,-1
  209514:	d9800017 	ldw	r6,0(sp)
  209518:	a080e826 	beq	r20,r2,2098bc <_malloc_r+0x738>
  20951c:	a180a636 	bltu	r20,r6,2097b8 <_malloc_r+0x634>
  209520:	07001074 	movhi	fp,65
  209524:	e7273d04 	addi	fp,fp,-25356
  209528:	e0800017 	ldw	r2,0(fp)
  20952c:	a887883a 	add	r3,r21,r2
  209530:	e0c00015 	stw	r3,0(fp)
  209534:	3500e626 	beq	r6,r20,2098d0 <_malloc_r+0x74c>
  209538:	b9000017 	ldw	r4,0(r23)
  20953c:	00bfffc4 	movi	r2,-1
  209540:	2080ee26 	beq	r4,r2,2098fc <_malloc_r+0x778>
  209544:	a185c83a 	sub	r2,r20,r6
  209548:	10c5883a 	add	r2,r2,r3
  20954c:	e0800015 	stw	r2,0(fp)
  209550:	a0c001cc 	andi	r3,r20,7
  209554:	1800bc26 	beq	r3,zero,209848 <_malloc_r+0x6c4>
  209558:	a0e9c83a 	sub	r20,r20,r3
  20955c:	00840204 	movi	r2,4104
  209560:	a5000204 	addi	r20,r20,8
  209564:	10c7c83a 	sub	r3,r2,r3
  209568:	a545883a 	add	r2,r20,r21
  20956c:	1083ffcc 	andi	r2,r2,4095
  209570:	18abc83a 	sub	r21,r3,r2
  209574:	a80b883a 	mov	r5,r21
  209578:	9009883a 	mov	r4,r18
  20957c:	020b6380 	call	20b638 <_sbrk_r>
  209580:	00ffffc4 	movi	r3,-1
  209584:	10c0e126 	beq	r2,r3,20990c <_malloc_r+0x788>
  209588:	1505c83a 	sub	r2,r2,r20
  20958c:	1545883a 	add	r2,r2,r21
  209590:	10800054 	ori	r2,r2,1
  209594:	e0c00017 	ldw	r3,0(fp)
  209598:	9d000215 	stw	r20,8(r19)
  20959c:	a0800115 	stw	r2,4(r20)
  2095a0:	a8c7883a 	add	r3,r21,r3
  2095a4:	e0c00015 	stw	r3,0(fp)
  2095a8:	84c00e26 	beq	r16,r19,2095e4 <_malloc_r+0x460>
  2095ac:	018003c4 	movi	r6,15
  2095b0:	3580a72e 	bgeu	r6,r22,209850 <_malloc_r+0x6cc>
  2095b4:	81400117 	ldw	r5,4(r16)
  2095b8:	013ffe04 	movi	r4,-8
  2095bc:	b0bffd04 	addi	r2,r22,-12
  2095c0:	1104703a 	and	r2,r2,r4
  2095c4:	2900004c 	andi	r4,r5,1
  2095c8:	2088b03a 	or	r4,r4,r2
  2095cc:	81000115 	stw	r4,4(r16)
  2095d0:	01400144 	movi	r5,5
  2095d4:	8089883a 	add	r4,r16,r2
  2095d8:	21400115 	stw	r5,4(r4)
  2095dc:	21400215 	stw	r5,8(r4)
  2095e0:	3080cd36 	bltu	r6,r2,209918 <_malloc_r+0x794>
  2095e4:	00801074 	movhi	r2,65
  2095e8:	10a72904 	addi	r2,r2,-25436
  2095ec:	11000017 	ldw	r4,0(r2)
  2095f0:	20c0012e 	bgeu	r4,r3,2095f8 <_malloc_r+0x474>
  2095f4:	10c00015 	stw	r3,0(r2)
  2095f8:	00801074 	movhi	r2,65
  2095fc:	10a72804 	addi	r2,r2,-25440
  209600:	11000017 	ldw	r4,0(r2)
  209604:	9c000217 	ldw	r16,8(r19)
  209608:	20c0012e 	bgeu	r4,r3,209610 <_malloc_r+0x48c>
  20960c:	10c00015 	stw	r3,0(r2)
  209610:	80c00117 	ldw	r3,4(r16)
  209614:	00bfff04 	movi	r2,-4
  209618:	1886703a 	and	r3,r3,r2
  20961c:	1c45c83a 	sub	r2,r3,r17
  209620:	1c400236 	bltu	r3,r17,20962c <_malloc_r+0x4a8>
  209624:	00c003c4 	movi	r3,15
  209628:	18800416 	blt	r3,r2,20963c <_malloc_r+0x4b8>
  20962c:	9009883a 	mov	r4,r18
  209630:	02112a80 	call	2112a8 <__malloc_unlock>
  209634:	0005883a 	mov	r2,zero
  209638:	003f7b06 	br	209428 <_gp+0xffdf7814>
  20963c:	88c00054 	ori	r3,r17,1
  209640:	80c00115 	stw	r3,4(r16)
  209644:	8463883a 	add	r17,r16,r17
  209648:	10800054 	ori	r2,r2,1
  20964c:	9c400215 	stw	r17,8(r19)
  209650:	88800115 	stw	r2,4(r17)
  209654:	9009883a 	mov	r4,r18
  209658:	02112a80 	call	2112a8 <__malloc_unlock>
  20965c:	80800204 	addi	r2,r16,8
  209660:	003f7106 	br	209428 <_gp+0xffdf7814>
  209664:	00c00504 	movi	r3,20
  209668:	18804a2e 	bgeu	r3,r2,209794 <_malloc_r+0x610>
  20966c:	00c01504 	movi	r3,84
  209670:	18806e36 	bltu	r3,r2,20982c <_malloc_r+0x6a8>
  209674:	8804d33a 	srli	r2,r17,12
  209678:	12001bc4 	addi	r8,r2,111
  20967c:	11c01b84 	addi	r7,r2,110
  209680:	4209883a 	add	r4,r8,r8
  209684:	003edd06 	br	2091fc <_gp+0xffdf75e8>
  209688:	3804d27a 	srli	r2,r7,9
  20968c:	00c00104 	movi	r3,4
  209690:	1880442e 	bgeu	r3,r2,2097a4 <_malloc_r+0x620>
  209694:	00c00504 	movi	r3,20
  209698:	18808136 	bltu	r3,r2,2098a0 <_malloc_r+0x71c>
  20969c:	11401704 	addi	r5,r2,92
  2096a0:	10c016c4 	addi	r3,r2,91
  2096a4:	294b883a 	add	r5,r5,r5
  2096a8:	294b883a 	add	r5,r5,r5
  2096ac:	294b883a 	add	r5,r5,r5
  2096b0:	994b883a 	add	r5,r19,r5
  2096b4:	28800017 	ldw	r2,0(r5)
  2096b8:	01801074 	movhi	r6,65
  2096bc:	297ffe04 	addi	r5,r5,-8
  2096c0:	31a13304 	addi	r6,r6,-31540
  2096c4:	28806526 	beq	r5,r2,20985c <_malloc_r+0x6d8>
  2096c8:	01bfff04 	movi	r6,-4
  2096cc:	10c00117 	ldw	r3,4(r2)
  2096d0:	1986703a 	and	r3,r3,r6
  2096d4:	38c0022e 	bgeu	r7,r3,2096e0 <_malloc_r+0x55c>
  2096d8:	10800217 	ldw	r2,8(r2)
  2096dc:	28bffb1e 	bne	r5,r2,2096cc <_gp+0xffdf7ab8>
  2096e0:	11400317 	ldw	r5,12(r2)
  2096e4:	98c00117 	ldw	r3,4(r19)
  2096e8:	81400315 	stw	r5,12(r16)
  2096ec:	80800215 	stw	r2,8(r16)
  2096f0:	2c000215 	stw	r16,8(r5)
  2096f4:	14000315 	stw	r16,12(r2)
  2096f8:	003ef806 	br	2092dc <_gp+0xffdf76c8>
  2096fc:	88c00054 	ori	r3,r17,1
  209700:	80c00115 	stw	r3,4(r16)
  209704:	8463883a 	add	r17,r16,r17
  209708:	34400515 	stw	r17,20(r6)
  20970c:	34400415 	stw	r17,16(r6)
  209710:	10c00054 	ori	r3,r2,1
  209714:	8a000315 	stw	r8,12(r17)
  209718:	8a000215 	stw	r8,8(r17)
  20971c:	88c00115 	stw	r3,4(r17)
  209720:	88a3883a 	add	r17,r17,r2
  209724:	88800015 	stw	r2,0(r17)
  209728:	9009883a 	mov	r4,r18
  20972c:	02112a80 	call	2112a8 <__malloc_unlock>
  209730:	80800204 	addi	r2,r16,8
  209734:	003f3c06 	br	209428 <_gp+0xffdf7814>
  209738:	30c00117 	ldw	r3,4(r6)
  20973c:	003ee706 	br	2092dc <_gp+0xffdf76c8>
  209740:	5ac00044 	addi	r11,r11,1
  209744:	588000cc 	andi	r2,r11,3
  209748:	31800204 	addi	r6,r6,8
  20974c:	103efd1e 	bne	r2,zero,209344 <_gp+0xffdf7730>
  209750:	00002406 	br	2097e4 <_malloc_r+0x660>
  209754:	14000317 	ldw	r16,12(r2)
  209758:	143f251e 	bne	r2,r16,2093f0 <_gp+0xffdf77dc>
  20975c:	21000084 	addi	r4,r4,2
  209760:	003ebc06 	br	209254 <_gp+0xffdf7640>
  209764:	8085883a 	add	r2,r16,r2
  209768:	10c00117 	ldw	r3,4(r2)
  20976c:	81000317 	ldw	r4,12(r16)
  209770:	81400217 	ldw	r5,8(r16)
  209774:	18c00054 	ori	r3,r3,1
  209778:	10c00115 	stw	r3,4(r2)
  20977c:	29000315 	stw	r4,12(r5)
  209780:	21400215 	stw	r5,8(r4)
  209784:	9009883a 	mov	r4,r18
  209788:	02112a80 	call	2112a8 <__malloc_unlock>
  20978c:	80800204 	addi	r2,r16,8
  209790:	003f2506 	br	209428 <_gp+0xffdf7814>
  209794:	12001704 	addi	r8,r2,92
  209798:	11c016c4 	addi	r7,r2,91
  20979c:	4209883a 	add	r4,r8,r8
  2097a0:	003e9606 	br	2091fc <_gp+0xffdf75e8>
  2097a4:	3804d1ba 	srli	r2,r7,6
  2097a8:	11400e44 	addi	r5,r2,57
  2097ac:	10c00e04 	addi	r3,r2,56
  2097b0:	294b883a 	add	r5,r5,r5
  2097b4:	003fbc06 	br	2096a8 <_gp+0xffdf7a94>
  2097b8:	84ff5926 	beq	r16,r19,209520 <_gp+0xffdf790c>
  2097bc:	00801074 	movhi	r2,65
  2097c0:	10a13304 	addi	r2,r2,-31540
  2097c4:	14000217 	ldw	r16,8(r2)
  2097c8:	00bfff04 	movi	r2,-4
  2097cc:	80c00117 	ldw	r3,4(r16)
  2097d0:	1886703a 	and	r3,r3,r2
  2097d4:	003f9106 	br	20961c <_gp+0xffdf7a08>
  2097d8:	60800217 	ldw	r2,8(r12)
  2097dc:	213fffc4 	addi	r4,r4,-1
  2097e0:	1300651e 	bne	r2,r12,209978 <_malloc_r+0x7f4>
  2097e4:	208000cc 	andi	r2,r4,3
  2097e8:	633ffe04 	addi	r12,r12,-8
  2097ec:	103ffa1e 	bne	r2,zero,2097d8 <_gp+0xffdf7bc4>
  2097f0:	98800117 	ldw	r2,4(r19)
  2097f4:	0146303a 	nor	r3,zero,r5
  2097f8:	1884703a 	and	r2,r3,r2
  2097fc:	98800115 	stw	r2,4(r19)
  209800:	294b883a 	add	r5,r5,r5
  209804:	117f2836 	bltu	r2,r5,2094a8 <_gp+0xffdf7894>
  209808:	283f2726 	beq	r5,zero,2094a8 <_gp+0xffdf7894>
  20980c:	2886703a 	and	r3,r5,r2
  209810:	5809883a 	mov	r4,r11
  209814:	183ec31e 	bne	r3,zero,209324 <_gp+0xffdf7710>
  209818:	294b883a 	add	r5,r5,r5
  20981c:	2886703a 	and	r3,r5,r2
  209820:	21000104 	addi	r4,r4,4
  209824:	183ffc26 	beq	r3,zero,209818 <_gp+0xffdf7c04>
  209828:	003ebe06 	br	209324 <_gp+0xffdf7710>
  20982c:	00c05504 	movi	r3,340
  209830:	18801236 	bltu	r3,r2,20987c <_malloc_r+0x6f8>
  209834:	8804d3fa 	srli	r2,r17,15
  209838:	12001e04 	addi	r8,r2,120
  20983c:	11c01dc4 	addi	r7,r2,119
  209840:	4209883a 	add	r4,r8,r8
  209844:	003e6d06 	br	2091fc <_gp+0xffdf75e8>
  209848:	00c40004 	movi	r3,4096
  20984c:	003f4606 	br	209568 <_gp+0xffdf7954>
  209850:	00800044 	movi	r2,1
  209854:	a0800115 	stw	r2,4(r20)
  209858:	003f7406 	br	20962c <_gp+0xffdf7a18>
  20985c:	1805d0ba 	srai	r2,r3,2
  209860:	01c00044 	movi	r7,1
  209864:	30c00117 	ldw	r3,4(r6)
  209868:	388e983a 	sll	r7,r7,r2
  20986c:	2805883a 	mov	r2,r5
  209870:	38c6b03a 	or	r3,r7,r3
  209874:	30c00115 	stw	r3,4(r6)
  209878:	003f9b06 	br	2096e8 <_gp+0xffdf7ad4>
  20987c:	00c15504 	movi	r3,1364
  209880:	18801a36 	bltu	r3,r2,2098ec <_malloc_r+0x768>
  209884:	8804d4ba 	srli	r2,r17,18
  209888:	12001f44 	addi	r8,r2,125
  20988c:	11c01f04 	addi	r7,r2,124
  209890:	4209883a 	add	r4,r8,r8
  209894:	003e5906 	br	2091fc <_gp+0xffdf75e8>
  209898:	ad400404 	addi	r21,r21,16
  20989c:	003f1706 	br	2094fc <_gp+0xffdf78e8>
  2098a0:	00c01504 	movi	r3,84
  2098a4:	18802336 	bltu	r3,r2,209934 <_malloc_r+0x7b0>
  2098a8:	3804d33a 	srli	r2,r7,12
  2098ac:	11401bc4 	addi	r5,r2,111
  2098b0:	10c01b84 	addi	r3,r2,110
  2098b4:	294b883a 	add	r5,r5,r5
  2098b8:	003f7b06 	br	2096a8 <_gp+0xffdf7a94>
  2098bc:	9c000217 	ldw	r16,8(r19)
  2098c0:	00bfff04 	movi	r2,-4
  2098c4:	80c00117 	ldw	r3,4(r16)
  2098c8:	1886703a 	and	r3,r3,r2
  2098cc:	003f5306 	br	20961c <_gp+0xffdf7a08>
  2098d0:	3083ffcc 	andi	r2,r6,4095
  2098d4:	103f181e 	bne	r2,zero,209538 <_gp+0xffdf7924>
  2098d8:	99000217 	ldw	r4,8(r19)
  2098dc:	b545883a 	add	r2,r22,r21
  2098e0:	10800054 	ori	r2,r2,1
  2098e4:	20800115 	stw	r2,4(r4)
  2098e8:	003f3e06 	br	2095e4 <_gp+0xffdf79d0>
  2098ec:	01003f84 	movi	r4,254
  2098f0:	02001fc4 	movi	r8,127
  2098f4:	01c01f84 	movi	r7,126
  2098f8:	003e4006 	br	2091fc <_gp+0xffdf75e8>
  2098fc:	00801074 	movhi	r2,65
  209900:	10a70c04 	addi	r2,r2,-25552
  209904:	15000015 	stw	r20,0(r2)
  209908:	003f1106 	br	209550 <_gp+0xffdf793c>
  20990c:	00800044 	movi	r2,1
  209910:	002b883a 	mov	r21,zero
  209914:	003f1f06 	br	209594 <_gp+0xffdf7980>
  209918:	81400204 	addi	r5,r16,8
  20991c:	9009883a 	mov	r4,r18
  209920:	020858c0 	call	20858c <_free_r>
  209924:	00801074 	movhi	r2,65
  209928:	10a73d04 	addi	r2,r2,-25356
  20992c:	10c00017 	ldw	r3,0(r2)
  209930:	003f2c06 	br	2095e4 <_gp+0xffdf79d0>
  209934:	00c05504 	movi	r3,340
  209938:	18800536 	bltu	r3,r2,209950 <_malloc_r+0x7cc>
  20993c:	3804d3fa 	srli	r2,r7,15
  209940:	11401e04 	addi	r5,r2,120
  209944:	10c01dc4 	addi	r3,r2,119
  209948:	294b883a 	add	r5,r5,r5
  20994c:	003f5606 	br	2096a8 <_gp+0xffdf7a94>
  209950:	00c15504 	movi	r3,1364
  209954:	18800536 	bltu	r3,r2,20996c <_malloc_r+0x7e8>
  209958:	3804d4ba 	srli	r2,r7,18
  20995c:	11401f44 	addi	r5,r2,125
  209960:	10c01f04 	addi	r3,r2,124
  209964:	294b883a 	add	r5,r5,r5
  209968:	003f4f06 	br	2096a8 <_gp+0xffdf7a94>
  20996c:	01403f84 	movi	r5,254
  209970:	00c01f84 	movi	r3,126
  209974:	003f4c06 	br	2096a8 <_gp+0xffdf7a94>
  209978:	98800117 	ldw	r2,4(r19)
  20997c:	003fa006 	br	209800 <_gp+0xffdf7bec>
  209980:	8808d0fa 	srli	r4,r17,3
  209984:	20800044 	addi	r2,r4,1
  209988:	1085883a 	add	r2,r2,r2
  20998c:	003e9006 	br	2093d0 <_gp+0xffdf77bc>

00209990 <memchr>:
  209990:	208000cc 	andi	r2,r4,3
  209994:	280f883a 	mov	r7,r5
  209998:	10003426 	beq	r2,zero,209a6c <memchr+0xdc>
  20999c:	30bfffc4 	addi	r2,r6,-1
  2099a0:	30001a26 	beq	r6,zero,209a0c <memchr+0x7c>
  2099a4:	20c00003 	ldbu	r3,0(r4)
  2099a8:	29803fcc 	andi	r6,r5,255
  2099ac:	30c0051e 	bne	r6,r3,2099c4 <memchr+0x34>
  2099b0:	00001806 	br	209a14 <memchr+0x84>
  2099b4:	10001526 	beq	r2,zero,209a0c <memchr+0x7c>
  2099b8:	20c00003 	ldbu	r3,0(r4)
  2099bc:	10bfffc4 	addi	r2,r2,-1
  2099c0:	30c01426 	beq	r6,r3,209a14 <memchr+0x84>
  2099c4:	21000044 	addi	r4,r4,1
  2099c8:	20c000cc 	andi	r3,r4,3
  2099cc:	183ff91e 	bne	r3,zero,2099b4 <_gp+0xffdf7da0>
  2099d0:	020000c4 	movi	r8,3
  2099d4:	40801136 	bltu	r8,r2,209a1c <memchr+0x8c>
  2099d8:	10000c26 	beq	r2,zero,209a0c <memchr+0x7c>
  2099dc:	20c00003 	ldbu	r3,0(r4)
  2099e0:	29403fcc 	andi	r5,r5,255
  2099e4:	28c00b26 	beq	r5,r3,209a14 <memchr+0x84>
  2099e8:	20c00044 	addi	r3,r4,1
  2099ec:	39803fcc 	andi	r6,r7,255
  2099f0:	2089883a 	add	r4,r4,r2
  2099f4:	00000306 	br	209a04 <memchr+0x74>
  2099f8:	18c00044 	addi	r3,r3,1
  2099fc:	197fffc3 	ldbu	r5,-1(r3)
  209a00:	31400526 	beq	r6,r5,209a18 <memchr+0x88>
  209a04:	1805883a 	mov	r2,r3
  209a08:	20fffb1e 	bne	r4,r3,2099f8 <_gp+0xffdf7de4>
  209a0c:	0005883a 	mov	r2,zero
  209a10:	f800283a 	ret
  209a14:	2005883a 	mov	r2,r4
  209a18:	f800283a 	ret
  209a1c:	28c03fcc 	andi	r3,r5,255
  209a20:	1812923a 	slli	r9,r3,8
  209a24:	02ffbff4 	movhi	r11,65279
  209a28:	02a02074 	movhi	r10,32897
  209a2c:	48d2b03a 	or	r9,r9,r3
  209a30:	4806943a 	slli	r3,r9,16
  209a34:	5affbfc4 	addi	r11,r11,-257
  209a38:	52a02004 	addi	r10,r10,-32640
  209a3c:	48d2b03a 	or	r9,r9,r3
  209a40:	20c00017 	ldw	r3,0(r4)
  209a44:	48c6f03a 	xor	r3,r9,r3
  209a48:	1acd883a 	add	r6,r3,r11
  209a4c:	00c6303a 	nor	r3,zero,r3
  209a50:	30c6703a 	and	r3,r6,r3
  209a54:	1a86703a 	and	r3,r3,r10
  209a58:	183fe01e 	bne	r3,zero,2099dc <_gp+0xffdf7dc8>
  209a5c:	10bfff04 	addi	r2,r2,-4
  209a60:	21000104 	addi	r4,r4,4
  209a64:	40bff636 	bltu	r8,r2,209a40 <_gp+0xffdf7e2c>
  209a68:	003fdb06 	br	2099d8 <_gp+0xffdf7dc4>
  209a6c:	3005883a 	mov	r2,r6
  209a70:	003fd706 	br	2099d0 <_gp+0xffdf7dbc>

00209a74 <memcpy>:
  209a74:	defffd04 	addi	sp,sp,-12
  209a78:	dfc00215 	stw	ra,8(sp)
  209a7c:	dc400115 	stw	r17,4(sp)
  209a80:	dc000015 	stw	r16,0(sp)
  209a84:	00c003c4 	movi	r3,15
  209a88:	2005883a 	mov	r2,r4
  209a8c:	1980452e 	bgeu	r3,r6,209ba4 <memcpy+0x130>
  209a90:	2906b03a 	or	r3,r5,r4
  209a94:	18c000cc 	andi	r3,r3,3
  209a98:	1800441e 	bne	r3,zero,209bac <memcpy+0x138>
  209a9c:	347ffc04 	addi	r17,r6,-16
  209aa0:	8822d13a 	srli	r17,r17,4
  209aa4:	28c00104 	addi	r3,r5,4
  209aa8:	23400104 	addi	r13,r4,4
  209aac:	8820913a 	slli	r16,r17,4
  209ab0:	2b000204 	addi	r12,r5,8
  209ab4:	22c00204 	addi	r11,r4,8
  209ab8:	84000504 	addi	r16,r16,20
  209abc:	2a800304 	addi	r10,r5,12
  209ac0:	22400304 	addi	r9,r4,12
  209ac4:	2c21883a 	add	r16,r5,r16
  209ac8:	2811883a 	mov	r8,r5
  209acc:	200f883a 	mov	r7,r4
  209ad0:	41000017 	ldw	r4,0(r8)
  209ad4:	1fc00017 	ldw	ra,0(r3)
  209ad8:	63c00017 	ldw	r15,0(r12)
  209adc:	39000015 	stw	r4,0(r7)
  209ae0:	53800017 	ldw	r14,0(r10)
  209ae4:	6fc00015 	stw	ra,0(r13)
  209ae8:	5bc00015 	stw	r15,0(r11)
  209aec:	4b800015 	stw	r14,0(r9)
  209af0:	18c00404 	addi	r3,r3,16
  209af4:	39c00404 	addi	r7,r7,16
  209af8:	42000404 	addi	r8,r8,16
  209afc:	6b400404 	addi	r13,r13,16
  209b00:	63000404 	addi	r12,r12,16
  209b04:	5ac00404 	addi	r11,r11,16
  209b08:	52800404 	addi	r10,r10,16
  209b0c:	4a400404 	addi	r9,r9,16
  209b10:	1c3fef1e 	bne	r3,r16,209ad0 <_gp+0xffdf7ebc>
  209b14:	89c00044 	addi	r7,r17,1
  209b18:	380e913a 	slli	r7,r7,4
  209b1c:	310003cc 	andi	r4,r6,15
  209b20:	02c000c4 	movi	r11,3
  209b24:	11c7883a 	add	r3,r2,r7
  209b28:	29cb883a 	add	r5,r5,r7
  209b2c:	5900212e 	bgeu	r11,r4,209bb4 <memcpy+0x140>
  209b30:	1813883a 	mov	r9,r3
  209b34:	2811883a 	mov	r8,r5
  209b38:	200f883a 	mov	r7,r4
  209b3c:	42800017 	ldw	r10,0(r8)
  209b40:	4a400104 	addi	r9,r9,4
  209b44:	39ffff04 	addi	r7,r7,-4
  209b48:	4abfff15 	stw	r10,-4(r9)
  209b4c:	42000104 	addi	r8,r8,4
  209b50:	59fffa36 	bltu	r11,r7,209b3c <_gp+0xffdf7f28>
  209b54:	213fff04 	addi	r4,r4,-4
  209b58:	2008d0ba 	srli	r4,r4,2
  209b5c:	318000cc 	andi	r6,r6,3
  209b60:	21000044 	addi	r4,r4,1
  209b64:	2109883a 	add	r4,r4,r4
  209b68:	2109883a 	add	r4,r4,r4
  209b6c:	1907883a 	add	r3,r3,r4
  209b70:	290b883a 	add	r5,r5,r4
  209b74:	30000626 	beq	r6,zero,209b90 <memcpy+0x11c>
  209b78:	198d883a 	add	r6,r3,r6
  209b7c:	29c00003 	ldbu	r7,0(r5)
  209b80:	18c00044 	addi	r3,r3,1
  209b84:	29400044 	addi	r5,r5,1
  209b88:	19ffffc5 	stb	r7,-1(r3)
  209b8c:	19bffb1e 	bne	r3,r6,209b7c <_gp+0xffdf7f68>
  209b90:	dfc00217 	ldw	ra,8(sp)
  209b94:	dc400117 	ldw	r17,4(sp)
  209b98:	dc000017 	ldw	r16,0(sp)
  209b9c:	dec00304 	addi	sp,sp,12
  209ba0:	f800283a 	ret
  209ba4:	2007883a 	mov	r3,r4
  209ba8:	003ff206 	br	209b74 <_gp+0xffdf7f60>
  209bac:	2007883a 	mov	r3,r4
  209bb0:	003ff106 	br	209b78 <_gp+0xffdf7f64>
  209bb4:	200d883a 	mov	r6,r4
  209bb8:	003fee06 	br	209b74 <_gp+0xffdf7f60>

00209bbc <memmove>:
  209bbc:	2005883a 	mov	r2,r4
  209bc0:	29000b2e 	bgeu	r5,r4,209bf0 <memmove+0x34>
  209bc4:	298f883a 	add	r7,r5,r6
  209bc8:	21c0092e 	bgeu	r4,r7,209bf0 <memmove+0x34>
  209bcc:	2187883a 	add	r3,r4,r6
  209bd0:	198bc83a 	sub	r5,r3,r6
  209bd4:	30004826 	beq	r6,zero,209cf8 <memmove+0x13c>
  209bd8:	39ffffc4 	addi	r7,r7,-1
  209bdc:	39000003 	ldbu	r4,0(r7)
  209be0:	18ffffc4 	addi	r3,r3,-1
  209be4:	19000005 	stb	r4,0(r3)
  209be8:	28fffb1e 	bne	r5,r3,209bd8 <_gp+0xffdf7fc4>
  209bec:	f800283a 	ret
  209bf0:	00c003c4 	movi	r3,15
  209bf4:	1980412e 	bgeu	r3,r6,209cfc <memmove+0x140>
  209bf8:	2886b03a 	or	r3,r5,r2
  209bfc:	18c000cc 	andi	r3,r3,3
  209c00:	1800401e 	bne	r3,zero,209d04 <memmove+0x148>
  209c04:	33fffc04 	addi	r15,r6,-16
  209c08:	781ed13a 	srli	r15,r15,4
  209c0c:	28c00104 	addi	r3,r5,4
  209c10:	13400104 	addi	r13,r2,4
  209c14:	781c913a 	slli	r14,r15,4
  209c18:	2b000204 	addi	r12,r5,8
  209c1c:	12c00204 	addi	r11,r2,8
  209c20:	73800504 	addi	r14,r14,20
  209c24:	2a800304 	addi	r10,r5,12
  209c28:	12400304 	addi	r9,r2,12
  209c2c:	2b9d883a 	add	r14,r5,r14
  209c30:	2811883a 	mov	r8,r5
  209c34:	100f883a 	mov	r7,r2
  209c38:	41000017 	ldw	r4,0(r8)
  209c3c:	39c00404 	addi	r7,r7,16
  209c40:	18c00404 	addi	r3,r3,16
  209c44:	393ffc15 	stw	r4,-16(r7)
  209c48:	193ffc17 	ldw	r4,-16(r3)
  209c4c:	6b400404 	addi	r13,r13,16
  209c50:	5ac00404 	addi	r11,r11,16
  209c54:	693ffc15 	stw	r4,-16(r13)
  209c58:	61000017 	ldw	r4,0(r12)
  209c5c:	4a400404 	addi	r9,r9,16
  209c60:	42000404 	addi	r8,r8,16
  209c64:	593ffc15 	stw	r4,-16(r11)
  209c68:	51000017 	ldw	r4,0(r10)
  209c6c:	63000404 	addi	r12,r12,16
  209c70:	52800404 	addi	r10,r10,16
  209c74:	493ffc15 	stw	r4,-16(r9)
  209c78:	1bbfef1e 	bne	r3,r14,209c38 <_gp+0xffdf8024>
  209c7c:	79000044 	addi	r4,r15,1
  209c80:	2008913a 	slli	r4,r4,4
  209c84:	328003cc 	andi	r10,r6,15
  209c88:	02c000c4 	movi	r11,3
  209c8c:	1107883a 	add	r3,r2,r4
  209c90:	290b883a 	add	r5,r5,r4
  209c94:	5a801e2e 	bgeu	r11,r10,209d10 <memmove+0x154>
  209c98:	1813883a 	mov	r9,r3
  209c9c:	2811883a 	mov	r8,r5
  209ca0:	500f883a 	mov	r7,r10
  209ca4:	41000017 	ldw	r4,0(r8)
  209ca8:	4a400104 	addi	r9,r9,4
  209cac:	39ffff04 	addi	r7,r7,-4
  209cb0:	493fff15 	stw	r4,-4(r9)
  209cb4:	42000104 	addi	r8,r8,4
  209cb8:	59fffa36 	bltu	r11,r7,209ca4 <_gp+0xffdf8090>
  209cbc:	513fff04 	addi	r4,r10,-4
  209cc0:	2008d0ba 	srli	r4,r4,2
  209cc4:	318000cc 	andi	r6,r6,3
  209cc8:	21000044 	addi	r4,r4,1
  209ccc:	2109883a 	add	r4,r4,r4
  209cd0:	2109883a 	add	r4,r4,r4
  209cd4:	1907883a 	add	r3,r3,r4
  209cd8:	290b883a 	add	r5,r5,r4
  209cdc:	30000b26 	beq	r6,zero,209d0c <memmove+0x150>
  209ce0:	198d883a 	add	r6,r3,r6
  209ce4:	29c00003 	ldbu	r7,0(r5)
  209ce8:	18c00044 	addi	r3,r3,1
  209cec:	29400044 	addi	r5,r5,1
  209cf0:	19ffffc5 	stb	r7,-1(r3)
  209cf4:	19bffb1e 	bne	r3,r6,209ce4 <_gp+0xffdf80d0>
  209cf8:	f800283a 	ret
  209cfc:	1007883a 	mov	r3,r2
  209d00:	003ff606 	br	209cdc <_gp+0xffdf80c8>
  209d04:	1007883a 	mov	r3,r2
  209d08:	003ff506 	br	209ce0 <_gp+0xffdf80cc>
  209d0c:	f800283a 	ret
  209d10:	500d883a 	mov	r6,r10
  209d14:	003ff106 	br	209cdc <_gp+0xffdf80c8>

00209d18 <memset>:
  209d18:	20c000cc 	andi	r3,r4,3
  209d1c:	2005883a 	mov	r2,r4
  209d20:	18004426 	beq	r3,zero,209e34 <memset+0x11c>
  209d24:	31ffffc4 	addi	r7,r6,-1
  209d28:	30004026 	beq	r6,zero,209e2c <memset+0x114>
  209d2c:	2813883a 	mov	r9,r5
  209d30:	200d883a 	mov	r6,r4
  209d34:	2007883a 	mov	r3,r4
  209d38:	00000406 	br	209d4c <memset+0x34>
  209d3c:	3a3fffc4 	addi	r8,r7,-1
  209d40:	31800044 	addi	r6,r6,1
  209d44:	38003926 	beq	r7,zero,209e2c <memset+0x114>
  209d48:	400f883a 	mov	r7,r8
  209d4c:	18c00044 	addi	r3,r3,1
  209d50:	32400005 	stb	r9,0(r6)
  209d54:	1a0000cc 	andi	r8,r3,3
  209d58:	403ff81e 	bne	r8,zero,209d3c <_gp+0xffdf8128>
  209d5c:	010000c4 	movi	r4,3
  209d60:	21c02d2e 	bgeu	r4,r7,209e18 <memset+0x100>
  209d64:	29003fcc 	andi	r4,r5,255
  209d68:	200c923a 	slli	r6,r4,8
  209d6c:	3108b03a 	or	r4,r6,r4
  209d70:	200c943a 	slli	r6,r4,16
  209d74:	218cb03a 	or	r6,r4,r6
  209d78:	010003c4 	movi	r4,15
  209d7c:	21c0182e 	bgeu	r4,r7,209de0 <memset+0xc8>
  209d80:	3b3ffc04 	addi	r12,r7,-16
  209d84:	6018d13a 	srli	r12,r12,4
  209d88:	1a000104 	addi	r8,r3,4
  209d8c:	1ac00204 	addi	r11,r3,8
  209d90:	6008913a 	slli	r4,r12,4
  209d94:	1a800304 	addi	r10,r3,12
  209d98:	1813883a 	mov	r9,r3
  209d9c:	21000504 	addi	r4,r4,20
  209da0:	1909883a 	add	r4,r3,r4
  209da4:	49800015 	stw	r6,0(r9)
  209da8:	41800015 	stw	r6,0(r8)
  209dac:	59800015 	stw	r6,0(r11)
  209db0:	51800015 	stw	r6,0(r10)
  209db4:	42000404 	addi	r8,r8,16
  209db8:	4a400404 	addi	r9,r9,16
  209dbc:	5ac00404 	addi	r11,r11,16
  209dc0:	52800404 	addi	r10,r10,16
  209dc4:	413ff71e 	bne	r8,r4,209da4 <_gp+0xffdf8190>
  209dc8:	63000044 	addi	r12,r12,1
  209dcc:	6018913a 	slli	r12,r12,4
  209dd0:	39c003cc 	andi	r7,r7,15
  209dd4:	010000c4 	movi	r4,3
  209dd8:	1b07883a 	add	r3,r3,r12
  209ddc:	21c00e2e 	bgeu	r4,r7,209e18 <memset+0x100>
  209de0:	1813883a 	mov	r9,r3
  209de4:	3811883a 	mov	r8,r7
  209de8:	010000c4 	movi	r4,3
  209dec:	49800015 	stw	r6,0(r9)
  209df0:	423fff04 	addi	r8,r8,-4
  209df4:	4a400104 	addi	r9,r9,4
  209df8:	223ffc36 	bltu	r4,r8,209dec <_gp+0xffdf81d8>
  209dfc:	393fff04 	addi	r4,r7,-4
  209e00:	2008d0ba 	srli	r4,r4,2
  209e04:	39c000cc 	andi	r7,r7,3
  209e08:	21000044 	addi	r4,r4,1
  209e0c:	2109883a 	add	r4,r4,r4
  209e10:	2109883a 	add	r4,r4,r4
  209e14:	1907883a 	add	r3,r3,r4
  209e18:	38000526 	beq	r7,zero,209e30 <memset+0x118>
  209e1c:	19cf883a 	add	r7,r3,r7
  209e20:	19400005 	stb	r5,0(r3)
  209e24:	18c00044 	addi	r3,r3,1
  209e28:	38fffd1e 	bne	r7,r3,209e20 <_gp+0xffdf820c>
  209e2c:	f800283a 	ret
  209e30:	f800283a 	ret
  209e34:	2007883a 	mov	r3,r4
  209e38:	300f883a 	mov	r7,r6
  209e3c:	003fc706 	br	209d5c <_gp+0xffdf8148>

00209e40 <_Balloc>:
  209e40:	20801317 	ldw	r2,76(r4)
  209e44:	defffc04 	addi	sp,sp,-16
  209e48:	dc400115 	stw	r17,4(sp)
  209e4c:	dc000015 	stw	r16,0(sp)
  209e50:	dfc00315 	stw	ra,12(sp)
  209e54:	dc800215 	stw	r18,8(sp)
  209e58:	2023883a 	mov	r17,r4
  209e5c:	2821883a 	mov	r16,r5
  209e60:	10000f26 	beq	r2,zero,209ea0 <_Balloc+0x60>
  209e64:	8407883a 	add	r3,r16,r16
  209e68:	18c7883a 	add	r3,r3,r3
  209e6c:	10c7883a 	add	r3,r2,r3
  209e70:	18800017 	ldw	r2,0(r3)
  209e74:	10001126 	beq	r2,zero,209ebc <_Balloc+0x7c>
  209e78:	11000017 	ldw	r4,0(r2)
  209e7c:	19000015 	stw	r4,0(r3)
  209e80:	10000415 	stw	zero,16(r2)
  209e84:	10000315 	stw	zero,12(r2)
  209e88:	dfc00317 	ldw	ra,12(sp)
  209e8c:	dc800217 	ldw	r18,8(sp)
  209e90:	dc400117 	ldw	r17,4(sp)
  209e94:	dc000017 	ldw	r16,0(sp)
  209e98:	dec00404 	addi	sp,sp,16
  209e9c:	f800283a 	ret
  209ea0:	01800844 	movi	r6,33
  209ea4:	01400104 	movi	r5,4
  209ea8:	020d1a80 	call	20d1a8 <_calloc_r>
  209eac:	88801315 	stw	r2,76(r17)
  209eb0:	103fec1e 	bne	r2,zero,209e64 <_gp+0xffdf8250>
  209eb4:	0005883a 	mov	r2,zero
  209eb8:	003ff306 	br	209e88 <_gp+0xffdf8274>
  209ebc:	01400044 	movi	r5,1
  209ec0:	2c24983a 	sll	r18,r5,r16
  209ec4:	8809883a 	mov	r4,r17
  209ec8:	91800144 	addi	r6,r18,5
  209ecc:	318d883a 	add	r6,r6,r6
  209ed0:	318d883a 	add	r6,r6,r6
  209ed4:	020d1a80 	call	20d1a8 <_calloc_r>
  209ed8:	103ff626 	beq	r2,zero,209eb4 <_gp+0xffdf82a0>
  209edc:	14000115 	stw	r16,4(r2)
  209ee0:	14800215 	stw	r18,8(r2)
  209ee4:	003fe606 	br	209e80 <_gp+0xffdf826c>

00209ee8 <_Bfree>:
  209ee8:	28000826 	beq	r5,zero,209f0c <_Bfree+0x24>
  209eec:	28c00117 	ldw	r3,4(r5)
  209ef0:	20801317 	ldw	r2,76(r4)
  209ef4:	18c7883a 	add	r3,r3,r3
  209ef8:	18c7883a 	add	r3,r3,r3
  209efc:	10c5883a 	add	r2,r2,r3
  209f00:	10c00017 	ldw	r3,0(r2)
  209f04:	28c00015 	stw	r3,0(r5)
  209f08:	11400015 	stw	r5,0(r2)
  209f0c:	f800283a 	ret

00209f10 <__multadd>:
  209f10:	defff704 	addi	sp,sp,-36
  209f14:	dc800215 	stw	r18,8(sp)
  209f18:	2c800417 	ldw	r18,16(r5)
  209f1c:	dd800615 	stw	r22,24(sp)
  209f20:	dd400515 	stw	r21,20(sp)
  209f24:	dd000415 	stw	r20,16(sp)
  209f28:	dcc00315 	stw	r19,12(sp)
  209f2c:	dc400115 	stw	r17,4(sp)
  209f30:	dc000015 	stw	r16,0(sp)
  209f34:	dfc00815 	stw	ra,32(sp)
  209f38:	ddc00715 	stw	r23,28(sp)
  209f3c:	2827883a 	mov	r19,r5
  209f40:	2029883a 	mov	r20,r4
  209f44:	3023883a 	mov	r17,r6
  209f48:	3821883a 	mov	r16,r7
  209f4c:	2d400504 	addi	r21,r5,20
  209f50:	002d883a 	mov	r22,zero
  209f54:	adc00017 	ldw	r23,0(r21)
  209f58:	880b883a 	mov	r5,r17
  209f5c:	ad400104 	addi	r21,r21,4
  209f60:	b93fffcc 	andi	r4,r23,65535
  209f64:	02032a40 	call	2032a4 <__mulsi3>
  209f68:	b808d43a 	srli	r4,r23,16
  209f6c:	880b883a 	mov	r5,r17
  209f70:	1421883a 	add	r16,r2,r16
  209f74:	02032a40 	call	2032a4 <__mulsi3>
  209f78:	800ed43a 	srli	r7,r16,16
  209f7c:	80ffffcc 	andi	r3,r16,65535
  209f80:	b5800044 	addi	r22,r22,1
  209f84:	11c5883a 	add	r2,r2,r7
  209f88:	100e943a 	slli	r7,r2,16
  209f8c:	1020d43a 	srli	r16,r2,16
  209f90:	38c7883a 	add	r3,r7,r3
  209f94:	a8ffff15 	stw	r3,-4(r21)
  209f98:	b4bfee16 	blt	r22,r18,209f54 <_gp+0xffdf8340>
  209f9c:	80000926 	beq	r16,zero,209fc4 <__multadd+0xb4>
  209fa0:	98800217 	ldw	r2,8(r19)
  209fa4:	9080130e 	bge	r18,r2,209ff4 <__multadd+0xe4>
  209fa8:	90800144 	addi	r2,r18,5
  209fac:	1085883a 	add	r2,r2,r2
  209fb0:	1085883a 	add	r2,r2,r2
  209fb4:	9885883a 	add	r2,r19,r2
  209fb8:	14000015 	stw	r16,0(r2)
  209fbc:	94800044 	addi	r18,r18,1
  209fc0:	9c800415 	stw	r18,16(r19)
  209fc4:	9805883a 	mov	r2,r19
  209fc8:	dfc00817 	ldw	ra,32(sp)
  209fcc:	ddc00717 	ldw	r23,28(sp)
  209fd0:	dd800617 	ldw	r22,24(sp)
  209fd4:	dd400517 	ldw	r21,20(sp)
  209fd8:	dd000417 	ldw	r20,16(sp)
  209fdc:	dcc00317 	ldw	r19,12(sp)
  209fe0:	dc800217 	ldw	r18,8(sp)
  209fe4:	dc400117 	ldw	r17,4(sp)
  209fe8:	dc000017 	ldw	r16,0(sp)
  209fec:	dec00904 	addi	sp,sp,36
  209ff0:	f800283a 	ret
  209ff4:	99400117 	ldw	r5,4(r19)
  209ff8:	a009883a 	mov	r4,r20
  209ffc:	29400044 	addi	r5,r5,1
  20a000:	0209e400 	call	209e40 <_Balloc>
  20a004:	99800417 	ldw	r6,16(r19)
  20a008:	99400304 	addi	r5,r19,12
  20a00c:	11000304 	addi	r4,r2,12
  20a010:	31800084 	addi	r6,r6,2
  20a014:	318d883a 	add	r6,r6,r6
  20a018:	318d883a 	add	r6,r6,r6
  20a01c:	1023883a 	mov	r17,r2
  20a020:	0209a740 	call	209a74 <memcpy>
  20a024:	98000a26 	beq	r19,zero,20a050 <__multadd+0x140>
  20a028:	98c00117 	ldw	r3,4(r19)
  20a02c:	a0801317 	ldw	r2,76(r20)
  20a030:	18c7883a 	add	r3,r3,r3
  20a034:	18c7883a 	add	r3,r3,r3
  20a038:	10c5883a 	add	r2,r2,r3
  20a03c:	10c00017 	ldw	r3,0(r2)
  20a040:	98c00015 	stw	r3,0(r19)
  20a044:	14c00015 	stw	r19,0(r2)
  20a048:	8827883a 	mov	r19,r17
  20a04c:	003fd606 	br	209fa8 <_gp+0xffdf8394>
  20a050:	8827883a 	mov	r19,r17
  20a054:	003fd406 	br	209fa8 <_gp+0xffdf8394>

0020a058 <__s2b>:
  20a058:	defff904 	addi	sp,sp,-28
  20a05c:	dc400115 	stw	r17,4(sp)
  20a060:	dc000015 	stw	r16,0(sp)
  20a064:	2023883a 	mov	r17,r4
  20a068:	2821883a 	mov	r16,r5
  20a06c:	39000204 	addi	r4,r7,8
  20a070:	01400244 	movi	r5,9
  20a074:	dcc00315 	stw	r19,12(sp)
  20a078:	dc800215 	stw	r18,8(sp)
  20a07c:	dfc00615 	stw	ra,24(sp)
  20a080:	dd400515 	stw	r21,20(sp)
  20a084:	dd000415 	stw	r20,16(sp)
  20a088:	3825883a 	mov	r18,r7
  20a08c:	3027883a 	mov	r19,r6
  20a090:	02030f00 	call	2030f0 <__divsi3>
  20a094:	00c00044 	movi	r3,1
  20a098:	000b883a 	mov	r5,zero
  20a09c:	1880030e 	bge	r3,r2,20a0ac <__s2b+0x54>
  20a0a0:	18c7883a 	add	r3,r3,r3
  20a0a4:	29400044 	addi	r5,r5,1
  20a0a8:	18bffd16 	blt	r3,r2,20a0a0 <_gp+0xffdf848c>
  20a0ac:	8809883a 	mov	r4,r17
  20a0b0:	0209e400 	call	209e40 <_Balloc>
  20a0b4:	d8c00717 	ldw	r3,28(sp)
  20a0b8:	10c00515 	stw	r3,20(r2)
  20a0bc:	00c00044 	movi	r3,1
  20a0c0:	10c00415 	stw	r3,16(r2)
  20a0c4:	00c00244 	movi	r3,9
  20a0c8:	1cc0210e 	bge	r3,r19,20a150 <__s2b+0xf8>
  20a0cc:	80eb883a 	add	r21,r16,r3
  20a0d0:	a829883a 	mov	r20,r21
  20a0d4:	84e1883a 	add	r16,r16,r19
  20a0d8:	a1c00007 	ldb	r7,0(r20)
  20a0dc:	01800284 	movi	r6,10
  20a0e0:	a5000044 	addi	r20,r20,1
  20a0e4:	100b883a 	mov	r5,r2
  20a0e8:	39fff404 	addi	r7,r7,-48
  20a0ec:	8809883a 	mov	r4,r17
  20a0f0:	0209f100 	call	209f10 <__multadd>
  20a0f4:	a43ff81e 	bne	r20,r16,20a0d8 <_gp+0xffdf84c4>
  20a0f8:	ace1883a 	add	r16,r21,r19
  20a0fc:	843ffe04 	addi	r16,r16,-8
  20a100:	9c800a0e 	bge	r19,r18,20a12c <__s2b+0xd4>
  20a104:	94e5c83a 	sub	r18,r18,r19
  20a108:	84a5883a 	add	r18,r16,r18
  20a10c:	81c00007 	ldb	r7,0(r16)
  20a110:	01800284 	movi	r6,10
  20a114:	84000044 	addi	r16,r16,1
  20a118:	100b883a 	mov	r5,r2
  20a11c:	39fff404 	addi	r7,r7,-48
  20a120:	8809883a 	mov	r4,r17
  20a124:	0209f100 	call	209f10 <__multadd>
  20a128:	84bff81e 	bne	r16,r18,20a10c <_gp+0xffdf84f8>
  20a12c:	dfc00617 	ldw	ra,24(sp)
  20a130:	dd400517 	ldw	r21,20(sp)
  20a134:	dd000417 	ldw	r20,16(sp)
  20a138:	dcc00317 	ldw	r19,12(sp)
  20a13c:	dc800217 	ldw	r18,8(sp)
  20a140:	dc400117 	ldw	r17,4(sp)
  20a144:	dc000017 	ldw	r16,0(sp)
  20a148:	dec00704 	addi	sp,sp,28
  20a14c:	f800283a 	ret
  20a150:	84000284 	addi	r16,r16,10
  20a154:	1827883a 	mov	r19,r3
  20a158:	003fe906 	br	20a100 <_gp+0xffdf84ec>

0020a15c <__hi0bits>:
  20a15c:	20bfffec 	andhi	r2,r4,65535
  20a160:	1000141e 	bne	r2,zero,20a1b4 <__hi0bits+0x58>
  20a164:	2008943a 	slli	r4,r4,16
  20a168:	00800404 	movi	r2,16
  20a16c:	20ffc02c 	andhi	r3,r4,65280
  20a170:	1800021e 	bne	r3,zero,20a17c <__hi0bits+0x20>
  20a174:	2008923a 	slli	r4,r4,8
  20a178:	10800204 	addi	r2,r2,8
  20a17c:	20fc002c 	andhi	r3,r4,61440
  20a180:	1800021e 	bne	r3,zero,20a18c <__hi0bits+0x30>
  20a184:	2008913a 	slli	r4,r4,4
  20a188:	10800104 	addi	r2,r2,4
  20a18c:	20f0002c 	andhi	r3,r4,49152
  20a190:	1800031e 	bne	r3,zero,20a1a0 <__hi0bits+0x44>
  20a194:	2109883a 	add	r4,r4,r4
  20a198:	10800084 	addi	r2,r2,2
  20a19c:	2109883a 	add	r4,r4,r4
  20a1a0:	20000316 	blt	r4,zero,20a1b0 <__hi0bits+0x54>
  20a1a4:	2110002c 	andhi	r4,r4,16384
  20a1a8:	2000041e 	bne	r4,zero,20a1bc <__hi0bits+0x60>
  20a1ac:	00800804 	movi	r2,32
  20a1b0:	f800283a 	ret
  20a1b4:	0005883a 	mov	r2,zero
  20a1b8:	003fec06 	br	20a16c <_gp+0xffdf8558>
  20a1bc:	10800044 	addi	r2,r2,1
  20a1c0:	f800283a 	ret

0020a1c4 <__lo0bits>:
  20a1c4:	20c00017 	ldw	r3,0(r4)
  20a1c8:	188001cc 	andi	r2,r3,7
  20a1cc:	10000826 	beq	r2,zero,20a1f0 <__lo0bits+0x2c>
  20a1d0:	1880004c 	andi	r2,r3,1
  20a1d4:	1000211e 	bne	r2,zero,20a25c <__lo0bits+0x98>
  20a1d8:	1880008c 	andi	r2,r3,2
  20a1dc:	1000211e 	bne	r2,zero,20a264 <__lo0bits+0xa0>
  20a1e0:	1806d0ba 	srli	r3,r3,2
  20a1e4:	00800084 	movi	r2,2
  20a1e8:	20c00015 	stw	r3,0(r4)
  20a1ec:	f800283a 	ret
  20a1f0:	18bfffcc 	andi	r2,r3,65535
  20a1f4:	10001326 	beq	r2,zero,20a244 <__lo0bits+0x80>
  20a1f8:	0005883a 	mov	r2,zero
  20a1fc:	19403fcc 	andi	r5,r3,255
  20a200:	2800021e 	bne	r5,zero,20a20c <__lo0bits+0x48>
  20a204:	1806d23a 	srli	r3,r3,8
  20a208:	10800204 	addi	r2,r2,8
  20a20c:	194003cc 	andi	r5,r3,15
  20a210:	2800021e 	bne	r5,zero,20a21c <__lo0bits+0x58>
  20a214:	1806d13a 	srli	r3,r3,4
  20a218:	10800104 	addi	r2,r2,4
  20a21c:	194000cc 	andi	r5,r3,3
  20a220:	2800021e 	bne	r5,zero,20a22c <__lo0bits+0x68>
  20a224:	1806d0ba 	srli	r3,r3,2
  20a228:	10800084 	addi	r2,r2,2
  20a22c:	1940004c 	andi	r5,r3,1
  20a230:	2800081e 	bne	r5,zero,20a254 <__lo0bits+0x90>
  20a234:	1806d07a 	srli	r3,r3,1
  20a238:	1800051e 	bne	r3,zero,20a250 <__lo0bits+0x8c>
  20a23c:	00800804 	movi	r2,32
  20a240:	f800283a 	ret
  20a244:	1806d43a 	srli	r3,r3,16
  20a248:	00800404 	movi	r2,16
  20a24c:	003feb06 	br	20a1fc <_gp+0xffdf85e8>
  20a250:	10800044 	addi	r2,r2,1
  20a254:	20c00015 	stw	r3,0(r4)
  20a258:	f800283a 	ret
  20a25c:	0005883a 	mov	r2,zero
  20a260:	f800283a 	ret
  20a264:	1806d07a 	srli	r3,r3,1
  20a268:	00800044 	movi	r2,1
  20a26c:	20c00015 	stw	r3,0(r4)
  20a270:	f800283a 	ret

0020a274 <__i2b>:
  20a274:	defffd04 	addi	sp,sp,-12
  20a278:	dc000015 	stw	r16,0(sp)
  20a27c:	04000044 	movi	r16,1
  20a280:	dc400115 	stw	r17,4(sp)
  20a284:	2823883a 	mov	r17,r5
  20a288:	800b883a 	mov	r5,r16
  20a28c:	dfc00215 	stw	ra,8(sp)
  20a290:	0209e400 	call	209e40 <_Balloc>
  20a294:	14400515 	stw	r17,20(r2)
  20a298:	14000415 	stw	r16,16(r2)
  20a29c:	dfc00217 	ldw	ra,8(sp)
  20a2a0:	dc400117 	ldw	r17,4(sp)
  20a2a4:	dc000017 	ldw	r16,0(sp)
  20a2a8:	dec00304 	addi	sp,sp,12
  20a2ac:	f800283a 	ret

0020a2b0 <__multiply>:
  20a2b0:	deffef04 	addi	sp,sp,-68
  20a2b4:	dc400815 	stw	r17,32(sp)
  20a2b8:	dc000715 	stw	r16,28(sp)
  20a2bc:	34400417 	ldw	r17,16(r6)
  20a2c0:	2c000417 	ldw	r16,16(r5)
  20a2c4:	dd800d15 	stw	r22,52(sp)
  20a2c8:	dc800915 	stw	r18,36(sp)
  20a2cc:	dfc01015 	stw	ra,64(sp)
  20a2d0:	df000f15 	stw	fp,60(sp)
  20a2d4:	ddc00e15 	stw	r23,56(sp)
  20a2d8:	dd400c15 	stw	r21,48(sp)
  20a2dc:	dd000b15 	stw	r20,44(sp)
  20a2e0:	dcc00a15 	stw	r19,40(sp)
  20a2e4:	2825883a 	mov	r18,r5
  20a2e8:	302d883a 	mov	r22,r6
  20a2ec:	8440050e 	bge	r16,r17,20a304 <__multiply+0x54>
  20a2f0:	8007883a 	mov	r3,r16
  20a2f4:	3025883a 	mov	r18,r6
  20a2f8:	8821883a 	mov	r16,r17
  20a2fc:	282d883a 	mov	r22,r5
  20a300:	1823883a 	mov	r17,r3
  20a304:	90800217 	ldw	r2,8(r18)
  20a308:	8447883a 	add	r3,r16,r17
  20a30c:	d8c00215 	stw	r3,8(sp)
  20a310:	91400117 	ldw	r5,4(r18)
  20a314:	10c0010e 	bge	r2,r3,20a31c <__multiply+0x6c>
  20a318:	29400044 	addi	r5,r5,1
  20a31c:	0209e400 	call	209e40 <_Balloc>
  20a320:	d8c00217 	ldw	r3,8(sp)
  20a324:	d8800615 	stw	r2,24(sp)
  20a328:	18eb883a 	add	r21,r3,r3
  20a32c:	ad6b883a 	add	r21,r21,r21
  20a330:	10c00504 	addi	r3,r2,20
  20a334:	1d6b883a 	add	r21,r3,r21
  20a338:	d8c00115 	stw	r3,4(sp)
  20a33c:	dd400315 	stw	r21,12(sp)
  20a340:	1805883a 	mov	r2,r3
  20a344:	1d40042e 	bgeu	r3,r21,20a358 <__multiply+0xa8>
  20a348:	d8c00317 	ldw	r3,12(sp)
  20a34c:	10000015 	stw	zero,0(r2)
  20a350:	10800104 	addi	r2,r2,4
  20a354:	10fffc36 	bltu	r2,r3,20a348 <_gp+0xffdf8734>
  20a358:	8c63883a 	add	r17,r17,r17
  20a35c:	b5800504 	addi	r22,r22,20
  20a360:	8c63883a 	add	r17,r17,r17
  20a364:	94800504 	addi	r18,r18,20
  20a368:	8421883a 	add	r16,r16,r16
  20a36c:	b463883a 	add	r17,r22,r17
  20a370:	8421883a 	add	r16,r16,r16
  20a374:	dd800015 	stw	r22,0(sp)
  20a378:	dc800415 	stw	r18,16(sp)
  20a37c:	dc400515 	stw	r17,20(sp)
  20a380:	9429883a 	add	r20,r18,r16
  20a384:	b4404f2e 	bgeu	r22,r17,20a4c4 <__multiply+0x214>
  20a388:	d8c00017 	ldw	r3,0(sp)
  20a38c:	1c800017 	ldw	r18,0(r3)
  20a390:	947fffcc 	andi	r17,r18,65535
  20a394:	88001e26 	beq	r17,zero,20a410 <__multiply+0x160>
  20a398:	dd800117 	ldw	r22,4(sp)
  20a39c:	dd400417 	ldw	r21,16(sp)
  20a3a0:	0027883a 	mov	r19,zero
  20a3a4:	ac800017 	ldw	r18,0(r21)
  20a3a8:	b4000017 	ldw	r16,0(r22)
  20a3ac:	880b883a 	mov	r5,r17
  20a3b0:	913fffcc 	andi	r4,r18,65535
  20a3b4:	02032a40 	call	2032a4 <__mulsi3>
  20a3b8:	9008d43a 	srli	r4,r18,16
  20a3bc:	84bfffcc 	andi	r18,r16,65535
  20a3c0:	1485883a 	add	r2,r2,r18
  20a3c4:	14e5883a 	add	r18,r2,r19
  20a3c8:	8020d43a 	srli	r16,r16,16
  20a3cc:	9026d43a 	srli	r19,r18,16
  20a3d0:	880b883a 	mov	r5,r17
  20a3d4:	02032a40 	call	2032a4 <__mulsi3>
  20a3d8:	1405883a 	add	r2,r2,r16
  20a3dc:	14e1883a 	add	r16,r2,r19
  20a3e0:	90ffffcc 	andi	r3,r18,65535
  20a3e4:	8024943a 	slli	r18,r16,16
  20a3e8:	ad400104 	addi	r21,r21,4
  20a3ec:	b005883a 	mov	r2,r22
  20a3f0:	90c6b03a 	or	r3,r18,r3
  20a3f4:	b0c00015 	stw	r3,0(r22)
  20a3f8:	8026d43a 	srli	r19,r16,16
  20a3fc:	b5800104 	addi	r22,r22,4
  20a400:	ad3fe836 	bltu	r21,r20,20a3a4 <_gp+0xffdf8790>
  20a404:	d8c00017 	ldw	r3,0(sp)
  20a408:	14c00115 	stw	r19,4(r2)
  20a40c:	1c800017 	ldw	r18,0(r3)
  20a410:	9024d43a 	srli	r18,r18,16
  20a414:	90002226 	beq	r18,zero,20a4a0 <__multiply+0x1f0>
  20a418:	d8c00117 	ldw	r3,4(sp)
  20a41c:	dd800417 	ldw	r22,16(sp)
  20a420:	002f883a 	mov	r23,zero
  20a424:	1f000017 	ldw	fp,0(r3)
  20a428:	1823883a 	mov	r17,r3
  20a42c:	182b883a 	mov	r21,r3
  20a430:	e021883a 	mov	r16,fp
  20a434:	00000106 	br	20a43c <__multiply+0x18c>
  20a438:	982b883a 	mov	r21,r19
  20a43c:	b100000b 	ldhu	r4,0(r22)
  20a440:	8020d43a 	srli	r16,r16,16
  20a444:	900b883a 	mov	r5,r18
  20a448:	02032a40 	call	2032a4 <__mulsi3>
  20a44c:	1405883a 	add	r2,r2,r16
  20a450:	15ef883a 	add	r23,r2,r23
  20a454:	b804943a 	slli	r2,r23,16
  20a458:	e0ffffcc 	andi	r3,fp,65535
  20a45c:	8c400104 	addi	r17,r17,4
  20a460:	10c6b03a 	or	r3,r2,r3
  20a464:	88ffff15 	stw	r3,-4(r17)
  20a468:	b5800104 	addi	r22,r22,4
  20a46c:	b13fff17 	ldw	r4,-4(r22)
  20a470:	acc00104 	addi	r19,r21,4
  20a474:	900b883a 	mov	r5,r18
  20a478:	2008d43a 	srli	r4,r4,16
  20a47c:	9c000017 	ldw	r16,0(r19)
  20a480:	02032a40 	call	2032a4 <__mulsi3>
  20a484:	b806d43a 	srli	r3,r23,16
  20a488:	813fffcc 	andi	r4,r16,65535
  20a48c:	1105883a 	add	r2,r2,r4
  20a490:	10f9883a 	add	fp,r2,r3
  20a494:	e02ed43a 	srli	r23,fp,16
  20a498:	b53fe736 	bltu	r22,r20,20a438 <_gp+0xffdf8824>
  20a49c:	af000115 	stw	fp,4(r21)
  20a4a0:	d8c00017 	ldw	r3,0(sp)
  20a4a4:	d9000517 	ldw	r4,20(sp)
  20a4a8:	18c00104 	addi	r3,r3,4
  20a4ac:	d8c00015 	stw	r3,0(sp)
  20a4b0:	d8c00117 	ldw	r3,4(sp)
  20a4b4:	18c00104 	addi	r3,r3,4
  20a4b8:	d8c00115 	stw	r3,4(sp)
  20a4bc:	d8c00017 	ldw	r3,0(sp)
  20a4c0:	193fb136 	bltu	r3,r4,20a388 <_gp+0xffdf8774>
  20a4c4:	d8c00217 	ldw	r3,8(sp)
  20a4c8:	00c00c0e 	bge	zero,r3,20a4fc <__multiply+0x24c>
  20a4cc:	d8c00317 	ldw	r3,12(sp)
  20a4d0:	18bfff17 	ldw	r2,-4(r3)
  20a4d4:	1d7fff04 	addi	r21,r3,-4
  20a4d8:	10000326 	beq	r2,zero,20a4e8 <__multiply+0x238>
  20a4dc:	00000706 	br	20a4fc <__multiply+0x24c>
  20a4e0:	a8800017 	ldw	r2,0(r21)
  20a4e4:	1000051e 	bne	r2,zero,20a4fc <__multiply+0x24c>
  20a4e8:	d8c00217 	ldw	r3,8(sp)
  20a4ec:	ad7fff04 	addi	r21,r21,-4
  20a4f0:	18ffffc4 	addi	r3,r3,-1
  20a4f4:	d8c00215 	stw	r3,8(sp)
  20a4f8:	183ff91e 	bne	r3,zero,20a4e0 <_gp+0xffdf88cc>
  20a4fc:	d8c00617 	ldw	r3,24(sp)
  20a500:	d9000217 	ldw	r4,8(sp)
  20a504:	1805883a 	mov	r2,r3
  20a508:	19000415 	stw	r4,16(r3)
  20a50c:	dfc01017 	ldw	ra,64(sp)
  20a510:	df000f17 	ldw	fp,60(sp)
  20a514:	ddc00e17 	ldw	r23,56(sp)
  20a518:	dd800d17 	ldw	r22,52(sp)
  20a51c:	dd400c17 	ldw	r21,48(sp)
  20a520:	dd000b17 	ldw	r20,44(sp)
  20a524:	dcc00a17 	ldw	r19,40(sp)
  20a528:	dc800917 	ldw	r18,36(sp)
  20a52c:	dc400817 	ldw	r17,32(sp)
  20a530:	dc000717 	ldw	r16,28(sp)
  20a534:	dec01104 	addi	sp,sp,68
  20a538:	f800283a 	ret

0020a53c <__pow5mult>:
  20a53c:	defffa04 	addi	sp,sp,-24
  20a540:	dcc00315 	stw	r19,12(sp)
  20a544:	dc000015 	stw	r16,0(sp)
  20a548:	dfc00515 	stw	ra,20(sp)
  20a54c:	dd000415 	stw	r20,16(sp)
  20a550:	dc800215 	stw	r18,8(sp)
  20a554:	dc400115 	stw	r17,4(sp)
  20a558:	308000cc 	andi	r2,r6,3
  20a55c:	3021883a 	mov	r16,r6
  20a560:	2027883a 	mov	r19,r4
  20a564:	10002f1e 	bne	r2,zero,20a624 <__pow5mult+0xe8>
  20a568:	2825883a 	mov	r18,r5
  20a56c:	8021d0ba 	srai	r16,r16,2
  20a570:	80001a26 	beq	r16,zero,20a5dc <__pow5mult+0xa0>
  20a574:	9c401217 	ldw	r17,72(r19)
  20a578:	8800061e 	bne	r17,zero,20a594 <__pow5mult+0x58>
  20a57c:	00003406 	br	20a650 <__pow5mult+0x114>
  20a580:	8021d07a 	srai	r16,r16,1
  20a584:	80001526 	beq	r16,zero,20a5dc <__pow5mult+0xa0>
  20a588:	88800017 	ldw	r2,0(r17)
  20a58c:	10001c26 	beq	r2,zero,20a600 <__pow5mult+0xc4>
  20a590:	1023883a 	mov	r17,r2
  20a594:	8080004c 	andi	r2,r16,1
  20a598:	103ff926 	beq	r2,zero,20a580 <_gp+0xffdf896c>
  20a59c:	880d883a 	mov	r6,r17
  20a5a0:	900b883a 	mov	r5,r18
  20a5a4:	9809883a 	mov	r4,r19
  20a5a8:	020a2b00 	call	20a2b0 <__multiply>
  20a5ac:	90001b26 	beq	r18,zero,20a61c <__pow5mult+0xe0>
  20a5b0:	91000117 	ldw	r4,4(r18)
  20a5b4:	98c01317 	ldw	r3,76(r19)
  20a5b8:	8021d07a 	srai	r16,r16,1
  20a5bc:	2109883a 	add	r4,r4,r4
  20a5c0:	2109883a 	add	r4,r4,r4
  20a5c4:	1907883a 	add	r3,r3,r4
  20a5c8:	19000017 	ldw	r4,0(r3)
  20a5cc:	91000015 	stw	r4,0(r18)
  20a5d0:	1c800015 	stw	r18,0(r3)
  20a5d4:	1025883a 	mov	r18,r2
  20a5d8:	803feb1e 	bne	r16,zero,20a588 <_gp+0xffdf8974>
  20a5dc:	9005883a 	mov	r2,r18
  20a5e0:	dfc00517 	ldw	ra,20(sp)
  20a5e4:	dd000417 	ldw	r20,16(sp)
  20a5e8:	dcc00317 	ldw	r19,12(sp)
  20a5ec:	dc800217 	ldw	r18,8(sp)
  20a5f0:	dc400117 	ldw	r17,4(sp)
  20a5f4:	dc000017 	ldw	r16,0(sp)
  20a5f8:	dec00604 	addi	sp,sp,24
  20a5fc:	f800283a 	ret
  20a600:	880d883a 	mov	r6,r17
  20a604:	880b883a 	mov	r5,r17
  20a608:	9809883a 	mov	r4,r19
  20a60c:	020a2b00 	call	20a2b0 <__multiply>
  20a610:	88800015 	stw	r2,0(r17)
  20a614:	10000015 	stw	zero,0(r2)
  20a618:	003fdd06 	br	20a590 <_gp+0xffdf897c>
  20a61c:	1025883a 	mov	r18,r2
  20a620:	003fd706 	br	20a580 <_gp+0xffdf896c>
  20a624:	10bfffc4 	addi	r2,r2,-1
  20a628:	1085883a 	add	r2,r2,r2
  20a62c:	00c00874 	movhi	r3,33
  20a630:	18db2604 	addi	r3,r3,27800
  20a634:	1085883a 	add	r2,r2,r2
  20a638:	1885883a 	add	r2,r3,r2
  20a63c:	11800017 	ldw	r6,0(r2)
  20a640:	000f883a 	mov	r7,zero
  20a644:	0209f100 	call	209f10 <__multadd>
  20a648:	1025883a 	mov	r18,r2
  20a64c:	003fc706 	br	20a56c <_gp+0xffdf8958>
  20a650:	05000044 	movi	r20,1
  20a654:	a00b883a 	mov	r5,r20
  20a658:	9809883a 	mov	r4,r19
  20a65c:	0209e400 	call	209e40 <_Balloc>
  20a660:	1023883a 	mov	r17,r2
  20a664:	00809c44 	movi	r2,625
  20a668:	88800515 	stw	r2,20(r17)
  20a66c:	8d000415 	stw	r20,16(r17)
  20a670:	9c401215 	stw	r17,72(r19)
  20a674:	88000015 	stw	zero,0(r17)
  20a678:	003fc606 	br	20a594 <_gp+0xffdf8980>

0020a67c <__lshift>:
  20a67c:	defff904 	addi	sp,sp,-28
  20a680:	dd400515 	stw	r21,20(sp)
  20a684:	dcc00315 	stw	r19,12(sp)
  20a688:	302bd17a 	srai	r21,r6,5
  20a68c:	2cc00417 	ldw	r19,16(r5)
  20a690:	28800217 	ldw	r2,8(r5)
  20a694:	dd000415 	stw	r20,16(sp)
  20a698:	ace7883a 	add	r19,r21,r19
  20a69c:	dc800215 	stw	r18,8(sp)
  20a6a0:	dc400115 	stw	r17,4(sp)
  20a6a4:	dc000015 	stw	r16,0(sp)
  20a6a8:	dfc00615 	stw	ra,24(sp)
  20a6ac:	9c000044 	addi	r16,r19,1
  20a6b0:	2823883a 	mov	r17,r5
  20a6b4:	3029883a 	mov	r20,r6
  20a6b8:	2025883a 	mov	r18,r4
  20a6bc:	29400117 	ldw	r5,4(r5)
  20a6c0:	1400030e 	bge	r2,r16,20a6d0 <__lshift+0x54>
  20a6c4:	1085883a 	add	r2,r2,r2
  20a6c8:	29400044 	addi	r5,r5,1
  20a6cc:	143ffd16 	blt	r2,r16,20a6c4 <_gp+0xffdf8ab0>
  20a6d0:	9009883a 	mov	r4,r18
  20a6d4:	0209e400 	call	209e40 <_Balloc>
  20a6d8:	10c00504 	addi	r3,r2,20
  20a6dc:	0540070e 	bge	zero,r21,20a6fc <__lshift+0x80>
  20a6e0:	ad6b883a 	add	r21,r21,r21
  20a6e4:	ad6b883a 	add	r21,r21,r21
  20a6e8:	1809883a 	mov	r4,r3
  20a6ec:	1d47883a 	add	r3,r3,r21
  20a6f0:	20000015 	stw	zero,0(r4)
  20a6f4:	21000104 	addi	r4,r4,4
  20a6f8:	193ffd1e 	bne	r3,r4,20a6f0 <_gp+0xffdf8adc>
  20a6fc:	8a000417 	ldw	r8,16(r17)
  20a700:	89000504 	addi	r4,r17,20
  20a704:	a18007cc 	andi	r6,r20,31
  20a708:	4211883a 	add	r8,r8,r8
  20a70c:	4211883a 	add	r8,r8,r8
  20a710:	2211883a 	add	r8,r4,r8
  20a714:	30002326 	beq	r6,zero,20a7a4 <__lshift+0x128>
  20a718:	02400804 	movi	r9,32
  20a71c:	4993c83a 	sub	r9,r9,r6
  20a720:	000b883a 	mov	r5,zero
  20a724:	21c00017 	ldw	r7,0(r4)
  20a728:	1815883a 	mov	r10,r3
  20a72c:	18c00104 	addi	r3,r3,4
  20a730:	398e983a 	sll	r7,r7,r6
  20a734:	21000104 	addi	r4,r4,4
  20a738:	394ab03a 	or	r5,r7,r5
  20a73c:	197fff15 	stw	r5,-4(r3)
  20a740:	217fff17 	ldw	r5,-4(r4)
  20a744:	2a4ad83a 	srl	r5,r5,r9
  20a748:	223ff636 	bltu	r4,r8,20a724 <_gp+0xffdf8b10>
  20a74c:	51400115 	stw	r5,4(r10)
  20a750:	28001a1e 	bne	r5,zero,20a7bc <__lshift+0x140>
  20a754:	843fffc4 	addi	r16,r16,-1
  20a758:	14000415 	stw	r16,16(r2)
  20a75c:	88000826 	beq	r17,zero,20a780 <__lshift+0x104>
  20a760:	89000117 	ldw	r4,4(r17)
  20a764:	90c01317 	ldw	r3,76(r18)
  20a768:	2109883a 	add	r4,r4,r4
  20a76c:	2109883a 	add	r4,r4,r4
  20a770:	1907883a 	add	r3,r3,r4
  20a774:	19000017 	ldw	r4,0(r3)
  20a778:	89000015 	stw	r4,0(r17)
  20a77c:	1c400015 	stw	r17,0(r3)
  20a780:	dfc00617 	ldw	ra,24(sp)
  20a784:	dd400517 	ldw	r21,20(sp)
  20a788:	dd000417 	ldw	r20,16(sp)
  20a78c:	dcc00317 	ldw	r19,12(sp)
  20a790:	dc800217 	ldw	r18,8(sp)
  20a794:	dc400117 	ldw	r17,4(sp)
  20a798:	dc000017 	ldw	r16,0(sp)
  20a79c:	dec00704 	addi	sp,sp,28
  20a7a0:	f800283a 	ret
  20a7a4:	21400017 	ldw	r5,0(r4)
  20a7a8:	18c00104 	addi	r3,r3,4
  20a7ac:	21000104 	addi	r4,r4,4
  20a7b0:	197fff15 	stw	r5,-4(r3)
  20a7b4:	223ffb36 	bltu	r4,r8,20a7a4 <_gp+0xffdf8b90>
  20a7b8:	003fe606 	br	20a754 <_gp+0xffdf8b40>
  20a7bc:	9c000084 	addi	r16,r19,2
  20a7c0:	003fe406 	br	20a754 <_gp+0xffdf8b40>

0020a7c4 <__mcmp>:
  20a7c4:	20800417 	ldw	r2,16(r4)
  20a7c8:	28c00417 	ldw	r3,16(r5)
  20a7cc:	10c5c83a 	sub	r2,r2,r3
  20a7d0:	1000111e 	bne	r2,zero,20a818 <__mcmp+0x54>
  20a7d4:	18c7883a 	add	r3,r3,r3
  20a7d8:	18c7883a 	add	r3,r3,r3
  20a7dc:	21000504 	addi	r4,r4,20
  20a7e0:	29400504 	addi	r5,r5,20
  20a7e4:	20c5883a 	add	r2,r4,r3
  20a7e8:	28cb883a 	add	r5,r5,r3
  20a7ec:	00000106 	br	20a7f4 <__mcmp+0x30>
  20a7f0:	20800a2e 	bgeu	r4,r2,20a81c <__mcmp+0x58>
  20a7f4:	10bfff04 	addi	r2,r2,-4
  20a7f8:	297fff04 	addi	r5,r5,-4
  20a7fc:	11800017 	ldw	r6,0(r2)
  20a800:	28c00017 	ldw	r3,0(r5)
  20a804:	30fffa26 	beq	r6,r3,20a7f0 <_gp+0xffdf8bdc>
  20a808:	30c00236 	bltu	r6,r3,20a814 <__mcmp+0x50>
  20a80c:	00800044 	movi	r2,1
  20a810:	f800283a 	ret
  20a814:	00bfffc4 	movi	r2,-1
  20a818:	f800283a 	ret
  20a81c:	0005883a 	mov	r2,zero
  20a820:	f800283a 	ret

0020a824 <__mdiff>:
  20a824:	28c00417 	ldw	r3,16(r5)
  20a828:	30800417 	ldw	r2,16(r6)
  20a82c:	defffa04 	addi	sp,sp,-24
  20a830:	dcc00315 	stw	r19,12(sp)
  20a834:	dc800215 	stw	r18,8(sp)
  20a838:	dfc00515 	stw	ra,20(sp)
  20a83c:	dd000415 	stw	r20,16(sp)
  20a840:	dc400115 	stw	r17,4(sp)
  20a844:	dc000015 	stw	r16,0(sp)
  20a848:	1887c83a 	sub	r3,r3,r2
  20a84c:	2825883a 	mov	r18,r5
  20a850:	3027883a 	mov	r19,r6
  20a854:	1800141e 	bne	r3,zero,20a8a8 <__mdiff+0x84>
  20a858:	1085883a 	add	r2,r2,r2
  20a85c:	1085883a 	add	r2,r2,r2
  20a860:	2a000504 	addi	r8,r5,20
  20a864:	34000504 	addi	r16,r6,20
  20a868:	4087883a 	add	r3,r8,r2
  20a86c:	8085883a 	add	r2,r16,r2
  20a870:	00000106 	br	20a878 <__mdiff+0x54>
  20a874:	40c0592e 	bgeu	r8,r3,20a9dc <__mdiff+0x1b8>
  20a878:	18ffff04 	addi	r3,r3,-4
  20a87c:	10bfff04 	addi	r2,r2,-4
  20a880:	19c00017 	ldw	r7,0(r3)
  20a884:	11400017 	ldw	r5,0(r2)
  20a888:	397ffa26 	beq	r7,r5,20a874 <_gp+0xffdf8c60>
  20a88c:	3940592e 	bgeu	r7,r5,20a9f4 <__mdiff+0x1d0>
  20a890:	9005883a 	mov	r2,r18
  20a894:	4023883a 	mov	r17,r8
  20a898:	9825883a 	mov	r18,r19
  20a89c:	05000044 	movi	r20,1
  20a8a0:	1027883a 	mov	r19,r2
  20a8a4:	00000406 	br	20a8b8 <__mdiff+0x94>
  20a8a8:	18005616 	blt	r3,zero,20aa04 <__mdiff+0x1e0>
  20a8ac:	34400504 	addi	r17,r6,20
  20a8b0:	2c000504 	addi	r16,r5,20
  20a8b4:	0029883a 	mov	r20,zero
  20a8b8:	91400117 	ldw	r5,4(r18)
  20a8bc:	0209e400 	call	209e40 <_Balloc>
  20a8c0:	92400417 	ldw	r9,16(r18)
  20a8c4:	9b000417 	ldw	r12,16(r19)
  20a8c8:	12c00504 	addi	r11,r2,20
  20a8cc:	4a51883a 	add	r8,r9,r9
  20a8d0:	6319883a 	add	r12,r12,r12
  20a8d4:	4211883a 	add	r8,r8,r8
  20a8d8:	6319883a 	add	r12,r12,r12
  20a8dc:	15000315 	stw	r20,12(r2)
  20a8e0:	8211883a 	add	r8,r16,r8
  20a8e4:	8b19883a 	add	r12,r17,r12
  20a8e8:	0007883a 	mov	r3,zero
  20a8ec:	81400017 	ldw	r5,0(r16)
  20a8f0:	89c00017 	ldw	r7,0(r17)
  20a8f4:	59800104 	addi	r6,r11,4
  20a8f8:	293fffcc 	andi	r4,r5,65535
  20a8fc:	20c7883a 	add	r3,r4,r3
  20a900:	393fffcc 	andi	r4,r7,65535
  20a904:	1909c83a 	sub	r4,r3,r4
  20a908:	280ad43a 	srli	r5,r5,16
  20a90c:	380ed43a 	srli	r7,r7,16
  20a910:	2007d43a 	srai	r3,r4,16
  20a914:	213fffcc 	andi	r4,r4,65535
  20a918:	29cbc83a 	sub	r5,r5,r7
  20a91c:	28c7883a 	add	r3,r5,r3
  20a920:	180a943a 	slli	r5,r3,16
  20a924:	8c400104 	addi	r17,r17,4
  20a928:	84000104 	addi	r16,r16,4
  20a92c:	2908b03a 	or	r4,r5,r4
  20a930:	59000015 	stw	r4,0(r11)
  20a934:	1807d43a 	srai	r3,r3,16
  20a938:	3015883a 	mov	r10,r6
  20a93c:	3017883a 	mov	r11,r6
  20a940:	8b3fea36 	bltu	r17,r12,20a8ec <_gp+0xffdf8cd8>
  20a944:	8200162e 	bgeu	r16,r8,20a9a0 <__mdiff+0x17c>
  20a948:	8017883a 	mov	r11,r16
  20a94c:	59400017 	ldw	r5,0(r11)
  20a950:	31800104 	addi	r6,r6,4
  20a954:	5ac00104 	addi	r11,r11,4
  20a958:	293fffcc 	andi	r4,r5,65535
  20a95c:	20c7883a 	add	r3,r4,r3
  20a960:	280ed43a 	srli	r7,r5,16
  20a964:	180bd43a 	srai	r5,r3,16
  20a968:	193fffcc 	andi	r4,r3,65535
  20a96c:	3947883a 	add	r3,r7,r5
  20a970:	180a943a 	slli	r5,r3,16
  20a974:	1807d43a 	srai	r3,r3,16
  20a978:	2908b03a 	or	r4,r5,r4
  20a97c:	313fff15 	stw	r4,-4(r6)
  20a980:	5a3ff236 	bltu	r11,r8,20a94c <_gp+0xffdf8d38>
  20a984:	0406303a 	nor	r3,zero,r16
  20a988:	1a07883a 	add	r3,r3,r8
  20a98c:	1806d0ba 	srli	r3,r3,2
  20a990:	18c00044 	addi	r3,r3,1
  20a994:	18c7883a 	add	r3,r3,r3
  20a998:	18c7883a 	add	r3,r3,r3
  20a99c:	50d5883a 	add	r10,r10,r3
  20a9a0:	50ffff04 	addi	r3,r10,-4
  20a9a4:	2000041e 	bne	r4,zero,20a9b8 <__mdiff+0x194>
  20a9a8:	18ffff04 	addi	r3,r3,-4
  20a9ac:	19000017 	ldw	r4,0(r3)
  20a9b0:	4a7fffc4 	addi	r9,r9,-1
  20a9b4:	203ffc26 	beq	r4,zero,20a9a8 <_gp+0xffdf8d94>
  20a9b8:	12400415 	stw	r9,16(r2)
  20a9bc:	dfc00517 	ldw	ra,20(sp)
  20a9c0:	dd000417 	ldw	r20,16(sp)
  20a9c4:	dcc00317 	ldw	r19,12(sp)
  20a9c8:	dc800217 	ldw	r18,8(sp)
  20a9cc:	dc400117 	ldw	r17,4(sp)
  20a9d0:	dc000017 	ldw	r16,0(sp)
  20a9d4:	dec00604 	addi	sp,sp,24
  20a9d8:	f800283a 	ret
  20a9dc:	000b883a 	mov	r5,zero
  20a9e0:	0209e400 	call	209e40 <_Balloc>
  20a9e4:	00c00044 	movi	r3,1
  20a9e8:	10c00415 	stw	r3,16(r2)
  20a9ec:	10000515 	stw	zero,20(r2)
  20a9f0:	003ff206 	br	20a9bc <_gp+0xffdf8da8>
  20a9f4:	8023883a 	mov	r17,r16
  20a9f8:	0029883a 	mov	r20,zero
  20a9fc:	4021883a 	mov	r16,r8
  20aa00:	003fad06 	br	20a8b8 <_gp+0xffdf8ca4>
  20aa04:	9005883a 	mov	r2,r18
  20aa08:	94400504 	addi	r17,r18,20
  20aa0c:	9c000504 	addi	r16,r19,20
  20aa10:	9825883a 	mov	r18,r19
  20aa14:	05000044 	movi	r20,1
  20aa18:	1027883a 	mov	r19,r2
  20aa1c:	003fa606 	br	20a8b8 <_gp+0xffdf8ca4>

0020aa20 <__ulp>:
  20aa20:	295ffc2c 	andhi	r5,r5,32752
  20aa24:	00bf3034 	movhi	r2,64704
  20aa28:	2887883a 	add	r3,r5,r2
  20aa2c:	00c0020e 	bge	zero,r3,20aa38 <__ulp+0x18>
  20aa30:	0005883a 	mov	r2,zero
  20aa34:	f800283a 	ret
  20aa38:	00c7c83a 	sub	r3,zero,r3
  20aa3c:	1807d53a 	srai	r3,r3,20
  20aa40:	008004c4 	movi	r2,19
  20aa44:	10c00b0e 	bge	r2,r3,20aa74 <__ulp+0x54>
  20aa48:	18bffb04 	addi	r2,r3,-20
  20aa4c:	01000784 	movi	r4,30
  20aa50:	0007883a 	mov	r3,zero
  20aa54:	20800516 	blt	r4,r2,20aa6c <__ulp+0x4c>
  20aa58:	010007c4 	movi	r4,31
  20aa5c:	2089c83a 	sub	r4,r4,r2
  20aa60:	00800044 	movi	r2,1
  20aa64:	1104983a 	sll	r2,r2,r4
  20aa68:	f800283a 	ret
  20aa6c:	00800044 	movi	r2,1
  20aa70:	f800283a 	ret
  20aa74:	01400234 	movhi	r5,8
  20aa78:	28c7d83a 	sra	r3,r5,r3
  20aa7c:	0005883a 	mov	r2,zero
  20aa80:	f800283a 	ret

0020aa84 <__b2d>:
  20aa84:	defffa04 	addi	sp,sp,-24
  20aa88:	dc000015 	stw	r16,0(sp)
  20aa8c:	24000417 	ldw	r16,16(r4)
  20aa90:	dc400115 	stw	r17,4(sp)
  20aa94:	24400504 	addi	r17,r4,20
  20aa98:	8421883a 	add	r16,r16,r16
  20aa9c:	8421883a 	add	r16,r16,r16
  20aaa0:	8c21883a 	add	r16,r17,r16
  20aaa4:	dc800215 	stw	r18,8(sp)
  20aaa8:	84bfff17 	ldw	r18,-4(r16)
  20aaac:	dd000415 	stw	r20,16(sp)
  20aab0:	dcc00315 	stw	r19,12(sp)
  20aab4:	9009883a 	mov	r4,r18
  20aab8:	2829883a 	mov	r20,r5
  20aabc:	dfc00515 	stw	ra,20(sp)
  20aac0:	020a15c0 	call	20a15c <__hi0bits>
  20aac4:	00c00804 	movi	r3,32
  20aac8:	1889c83a 	sub	r4,r3,r2
  20aacc:	a1000015 	stw	r4,0(r20)
  20aad0:	01000284 	movi	r4,10
  20aad4:	84ffff04 	addi	r19,r16,-4
  20aad8:	20801216 	blt	r4,r2,20ab24 <__b2d+0xa0>
  20aadc:	018002c4 	movi	r6,11
  20aae0:	308dc83a 	sub	r6,r6,r2
  20aae4:	9186d83a 	srl	r3,r18,r6
  20aae8:	18cffc34 	orhi	r3,r3,16368
  20aaec:	8cc0212e 	bgeu	r17,r19,20ab74 <__b2d+0xf0>
  20aaf0:	813ffe17 	ldw	r4,-8(r16)
  20aaf4:	218cd83a 	srl	r6,r4,r6
  20aaf8:	10800544 	addi	r2,r2,21
  20aafc:	9084983a 	sll	r2,r18,r2
  20ab00:	1184b03a 	or	r2,r2,r6
  20ab04:	dfc00517 	ldw	ra,20(sp)
  20ab08:	dd000417 	ldw	r20,16(sp)
  20ab0c:	dcc00317 	ldw	r19,12(sp)
  20ab10:	dc800217 	ldw	r18,8(sp)
  20ab14:	dc400117 	ldw	r17,4(sp)
  20ab18:	dc000017 	ldw	r16,0(sp)
  20ab1c:	dec00604 	addi	sp,sp,24
  20ab20:	f800283a 	ret
  20ab24:	8cc00f2e 	bgeu	r17,r19,20ab64 <__b2d+0xe0>
  20ab28:	117ffd44 	addi	r5,r2,-11
  20ab2c:	80bffe17 	ldw	r2,-8(r16)
  20ab30:	28000e26 	beq	r5,zero,20ab6c <__b2d+0xe8>
  20ab34:	1949c83a 	sub	r4,r3,r5
  20ab38:	9164983a 	sll	r18,r18,r5
  20ab3c:	1106d83a 	srl	r3,r2,r4
  20ab40:	81bffe04 	addi	r6,r16,-8
  20ab44:	948ffc34 	orhi	r18,r18,16368
  20ab48:	90c6b03a 	or	r3,r18,r3
  20ab4c:	89800e2e 	bgeu	r17,r6,20ab88 <__b2d+0x104>
  20ab50:	81bffd17 	ldw	r6,-12(r16)
  20ab54:	1144983a 	sll	r2,r2,r5
  20ab58:	310ad83a 	srl	r5,r6,r4
  20ab5c:	2884b03a 	or	r2,r5,r2
  20ab60:	003fe806 	br	20ab04 <_gp+0xffdf8ef0>
  20ab64:	10bffd44 	addi	r2,r2,-11
  20ab68:	1000041e 	bne	r2,zero,20ab7c <__b2d+0xf8>
  20ab6c:	90cffc34 	orhi	r3,r18,16368
  20ab70:	003fe406 	br	20ab04 <_gp+0xffdf8ef0>
  20ab74:	000d883a 	mov	r6,zero
  20ab78:	003fdf06 	br	20aaf8 <_gp+0xffdf8ee4>
  20ab7c:	90a4983a 	sll	r18,r18,r2
  20ab80:	0005883a 	mov	r2,zero
  20ab84:	003ff906 	br	20ab6c <_gp+0xffdf8f58>
  20ab88:	1144983a 	sll	r2,r2,r5
  20ab8c:	003fdd06 	br	20ab04 <_gp+0xffdf8ef0>

0020ab90 <__d2b>:
  20ab90:	defff804 	addi	sp,sp,-32
  20ab94:	dc000215 	stw	r16,8(sp)
  20ab98:	3021883a 	mov	r16,r6
  20ab9c:	dc400315 	stw	r17,12(sp)
  20aba0:	8022907a 	slli	r17,r16,1
  20aba4:	dd000615 	stw	r20,24(sp)
  20aba8:	2829883a 	mov	r20,r5
  20abac:	01400044 	movi	r5,1
  20abb0:	dcc00515 	stw	r19,20(sp)
  20abb4:	dc800415 	stw	r18,16(sp)
  20abb8:	dfc00715 	stw	ra,28(sp)
  20abbc:	3825883a 	mov	r18,r7
  20abc0:	8822d57a 	srli	r17,r17,21
  20abc4:	0209e400 	call	209e40 <_Balloc>
  20abc8:	1027883a 	mov	r19,r2
  20abcc:	00800434 	movhi	r2,16
  20abd0:	10bfffc4 	addi	r2,r2,-1
  20abd4:	808c703a 	and	r6,r16,r2
  20abd8:	88000126 	beq	r17,zero,20abe0 <__d2b+0x50>
  20abdc:	31800434 	orhi	r6,r6,16
  20abe0:	d9800015 	stw	r6,0(sp)
  20abe4:	a0002426 	beq	r20,zero,20ac78 <__d2b+0xe8>
  20abe8:	d9000104 	addi	r4,sp,4
  20abec:	dd000115 	stw	r20,4(sp)
  20abf0:	020a1c40 	call	20a1c4 <__lo0bits>
  20abf4:	d8c00017 	ldw	r3,0(sp)
  20abf8:	10002f1e 	bne	r2,zero,20acb8 <__d2b+0x128>
  20abfc:	d9000117 	ldw	r4,4(sp)
  20ac00:	99000515 	stw	r4,20(r19)
  20ac04:	1821003a 	cmpeq	r16,r3,zero
  20ac08:	01000084 	movi	r4,2
  20ac0c:	2421c83a 	sub	r16,r4,r16
  20ac10:	98c00615 	stw	r3,24(r19)
  20ac14:	9c000415 	stw	r16,16(r19)
  20ac18:	88001f1e 	bne	r17,zero,20ac98 <__d2b+0x108>
  20ac1c:	10bef384 	addi	r2,r2,-1074
  20ac20:	90800015 	stw	r2,0(r18)
  20ac24:	00900034 	movhi	r2,16384
  20ac28:	10bfffc4 	addi	r2,r2,-1
  20ac2c:	8085883a 	add	r2,r16,r2
  20ac30:	1085883a 	add	r2,r2,r2
  20ac34:	1085883a 	add	r2,r2,r2
  20ac38:	9885883a 	add	r2,r19,r2
  20ac3c:	11000517 	ldw	r4,20(r2)
  20ac40:	8020917a 	slli	r16,r16,5
  20ac44:	020a15c0 	call	20a15c <__hi0bits>
  20ac48:	d8c00817 	ldw	r3,32(sp)
  20ac4c:	8085c83a 	sub	r2,r16,r2
  20ac50:	18800015 	stw	r2,0(r3)
  20ac54:	9805883a 	mov	r2,r19
  20ac58:	dfc00717 	ldw	ra,28(sp)
  20ac5c:	dd000617 	ldw	r20,24(sp)
  20ac60:	dcc00517 	ldw	r19,20(sp)
  20ac64:	dc800417 	ldw	r18,16(sp)
  20ac68:	dc400317 	ldw	r17,12(sp)
  20ac6c:	dc000217 	ldw	r16,8(sp)
  20ac70:	dec00804 	addi	sp,sp,32
  20ac74:	f800283a 	ret
  20ac78:	d809883a 	mov	r4,sp
  20ac7c:	020a1c40 	call	20a1c4 <__lo0bits>
  20ac80:	d8c00017 	ldw	r3,0(sp)
  20ac84:	04000044 	movi	r16,1
  20ac88:	9c000415 	stw	r16,16(r19)
  20ac8c:	98c00515 	stw	r3,20(r19)
  20ac90:	10800804 	addi	r2,r2,32
  20ac94:	883fe126 	beq	r17,zero,20ac1c <_gp+0xffdf9008>
  20ac98:	00c00d44 	movi	r3,53
  20ac9c:	8c7ef344 	addi	r17,r17,-1075
  20aca0:	88a3883a 	add	r17,r17,r2
  20aca4:	1885c83a 	sub	r2,r3,r2
  20aca8:	d8c00817 	ldw	r3,32(sp)
  20acac:	94400015 	stw	r17,0(r18)
  20acb0:	18800015 	stw	r2,0(r3)
  20acb4:	003fe706 	br	20ac54 <_gp+0xffdf9040>
  20acb8:	01000804 	movi	r4,32
  20acbc:	2089c83a 	sub	r4,r4,r2
  20acc0:	1908983a 	sll	r4,r3,r4
  20acc4:	d9400117 	ldw	r5,4(sp)
  20acc8:	1886d83a 	srl	r3,r3,r2
  20accc:	2148b03a 	or	r4,r4,r5
  20acd0:	99000515 	stw	r4,20(r19)
  20acd4:	d8c00015 	stw	r3,0(sp)
  20acd8:	003fca06 	br	20ac04 <_gp+0xffdf8ff0>

0020acdc <__ratio>:
  20acdc:	defff904 	addi	sp,sp,-28
  20ace0:	dc400315 	stw	r17,12(sp)
  20ace4:	2823883a 	mov	r17,r5
  20ace8:	d9400104 	addi	r5,sp,4
  20acec:	dfc00615 	stw	ra,24(sp)
  20acf0:	dcc00515 	stw	r19,20(sp)
  20acf4:	dc800415 	stw	r18,16(sp)
  20acf8:	2027883a 	mov	r19,r4
  20acfc:	dc000215 	stw	r16,8(sp)
  20ad00:	020aa840 	call	20aa84 <__b2d>
  20ad04:	d80b883a 	mov	r5,sp
  20ad08:	8809883a 	mov	r4,r17
  20ad0c:	1025883a 	mov	r18,r2
  20ad10:	1821883a 	mov	r16,r3
  20ad14:	020aa840 	call	20aa84 <__b2d>
  20ad18:	8a000417 	ldw	r8,16(r17)
  20ad1c:	99000417 	ldw	r4,16(r19)
  20ad20:	d9400117 	ldw	r5,4(sp)
  20ad24:	2209c83a 	sub	r4,r4,r8
  20ad28:	2010917a 	slli	r8,r4,5
  20ad2c:	d9000017 	ldw	r4,0(sp)
  20ad30:	2909c83a 	sub	r4,r5,r4
  20ad34:	4109883a 	add	r4,r8,r4
  20ad38:	01000e0e 	bge	zero,r4,20ad74 <__ratio+0x98>
  20ad3c:	2008953a 	slli	r4,r4,20
  20ad40:	2421883a 	add	r16,r4,r16
  20ad44:	100d883a 	mov	r6,r2
  20ad48:	180f883a 	mov	r7,r3
  20ad4c:	9009883a 	mov	r4,r18
  20ad50:	800b883a 	mov	r5,r16
  20ad54:	020ed540 	call	20ed54 <__divdf3>
  20ad58:	dfc00617 	ldw	ra,24(sp)
  20ad5c:	dcc00517 	ldw	r19,20(sp)
  20ad60:	dc800417 	ldw	r18,16(sp)
  20ad64:	dc400317 	ldw	r17,12(sp)
  20ad68:	dc000217 	ldw	r16,8(sp)
  20ad6c:	dec00704 	addi	sp,sp,28
  20ad70:	f800283a 	ret
  20ad74:	2008953a 	slli	r4,r4,20
  20ad78:	1907c83a 	sub	r3,r3,r4
  20ad7c:	003ff106 	br	20ad44 <_gp+0xffdf9130>

0020ad80 <_mprec_log10>:
  20ad80:	defffe04 	addi	sp,sp,-8
  20ad84:	dc000015 	stw	r16,0(sp)
  20ad88:	dfc00115 	stw	ra,4(sp)
  20ad8c:	008005c4 	movi	r2,23
  20ad90:	2021883a 	mov	r16,r4
  20ad94:	11000d0e 	bge	r2,r4,20adcc <_mprec_log10+0x4c>
  20ad98:	0005883a 	mov	r2,zero
  20ad9c:	00cffc34 	movhi	r3,16368
  20ada0:	843fffc4 	addi	r16,r16,-1
  20ada4:	000d883a 	mov	r6,zero
  20ada8:	01d00934 	movhi	r7,16420
  20adac:	1009883a 	mov	r4,r2
  20adb0:	180b883a 	mov	r5,r3
  20adb4:	020f97c0 	call	20f97c <__muldf3>
  20adb8:	803ff91e 	bne	r16,zero,20ada0 <_gp+0xffdf918c>
  20adbc:	dfc00117 	ldw	ra,4(sp)
  20adc0:	dc000017 	ldw	r16,0(sp)
  20adc4:	dec00204 	addi	sp,sp,8
  20adc8:	f800283a 	ret
  20adcc:	202090fa 	slli	r16,r4,3
  20add0:	00800874 	movhi	r2,33
  20add4:	109b3d04 	addi	r2,r2,27892
  20add8:	1421883a 	add	r16,r2,r16
  20addc:	80800017 	ldw	r2,0(r16)
  20ade0:	80c00117 	ldw	r3,4(r16)
  20ade4:	dfc00117 	ldw	ra,4(sp)
  20ade8:	dc000017 	ldw	r16,0(sp)
  20adec:	dec00204 	addi	sp,sp,8
  20adf0:	f800283a 	ret

0020adf4 <__copybits>:
  20adf4:	297fffc4 	addi	r5,r5,-1
  20adf8:	280fd17a 	srai	r7,r5,5
  20adfc:	30c00417 	ldw	r3,16(r6)
  20ae00:	30800504 	addi	r2,r6,20
  20ae04:	39c00044 	addi	r7,r7,1
  20ae08:	18c7883a 	add	r3,r3,r3
  20ae0c:	39cf883a 	add	r7,r7,r7
  20ae10:	18c7883a 	add	r3,r3,r3
  20ae14:	39cf883a 	add	r7,r7,r7
  20ae18:	10c7883a 	add	r3,r2,r3
  20ae1c:	21cf883a 	add	r7,r4,r7
  20ae20:	10c00d2e 	bgeu	r2,r3,20ae58 <__copybits+0x64>
  20ae24:	200b883a 	mov	r5,r4
  20ae28:	12000017 	ldw	r8,0(r2)
  20ae2c:	29400104 	addi	r5,r5,4
  20ae30:	10800104 	addi	r2,r2,4
  20ae34:	2a3fff15 	stw	r8,-4(r5)
  20ae38:	10fffb36 	bltu	r2,r3,20ae28 <_gp+0xffdf9214>
  20ae3c:	1985c83a 	sub	r2,r3,r6
  20ae40:	10bffac4 	addi	r2,r2,-21
  20ae44:	1004d0ba 	srli	r2,r2,2
  20ae48:	10800044 	addi	r2,r2,1
  20ae4c:	1085883a 	add	r2,r2,r2
  20ae50:	1085883a 	add	r2,r2,r2
  20ae54:	2089883a 	add	r4,r4,r2
  20ae58:	21c0032e 	bgeu	r4,r7,20ae68 <__copybits+0x74>
  20ae5c:	20000015 	stw	zero,0(r4)
  20ae60:	21000104 	addi	r4,r4,4
  20ae64:	21fffd36 	bltu	r4,r7,20ae5c <_gp+0xffdf9248>
  20ae68:	f800283a 	ret

0020ae6c <__any_on>:
  20ae6c:	20c00417 	ldw	r3,16(r4)
  20ae70:	2805d17a 	srai	r2,r5,5
  20ae74:	21000504 	addi	r4,r4,20
  20ae78:	18800d0e 	bge	r3,r2,20aeb0 <__any_on+0x44>
  20ae7c:	18c7883a 	add	r3,r3,r3
  20ae80:	18c7883a 	add	r3,r3,r3
  20ae84:	20c7883a 	add	r3,r4,r3
  20ae88:	20c0192e 	bgeu	r4,r3,20aef0 <__any_on+0x84>
  20ae8c:	18bfff17 	ldw	r2,-4(r3)
  20ae90:	18ffff04 	addi	r3,r3,-4
  20ae94:	1000041e 	bne	r2,zero,20aea8 <__any_on+0x3c>
  20ae98:	20c0142e 	bgeu	r4,r3,20aeec <__any_on+0x80>
  20ae9c:	18ffff04 	addi	r3,r3,-4
  20aea0:	19400017 	ldw	r5,0(r3)
  20aea4:	283ffc26 	beq	r5,zero,20ae98 <_gp+0xffdf9284>
  20aea8:	00800044 	movi	r2,1
  20aeac:	f800283a 	ret
  20aeb0:	10c00a0e 	bge	r2,r3,20aedc <__any_on+0x70>
  20aeb4:	1085883a 	add	r2,r2,r2
  20aeb8:	1085883a 	add	r2,r2,r2
  20aebc:	294007cc 	andi	r5,r5,31
  20aec0:	2087883a 	add	r3,r4,r2
  20aec4:	283ff026 	beq	r5,zero,20ae88 <_gp+0xffdf9274>
  20aec8:	19800017 	ldw	r6,0(r3)
  20aecc:	3144d83a 	srl	r2,r6,r5
  20aed0:	114a983a 	sll	r5,r2,r5
  20aed4:	317ff41e 	bne	r6,r5,20aea8 <_gp+0xffdf9294>
  20aed8:	003feb06 	br	20ae88 <_gp+0xffdf9274>
  20aedc:	1085883a 	add	r2,r2,r2
  20aee0:	1085883a 	add	r2,r2,r2
  20aee4:	2087883a 	add	r3,r4,r2
  20aee8:	003fe706 	br	20ae88 <_gp+0xffdf9274>
  20aeec:	f800283a 	ret
  20aef0:	0005883a 	mov	r2,zero
  20aef4:	f800283a 	ret

0020aef8 <_putc_r>:
  20aef8:	defffc04 	addi	sp,sp,-16
  20aefc:	dc000215 	stw	r16,8(sp)
  20af00:	dfc00315 	stw	ra,12(sp)
  20af04:	2021883a 	mov	r16,r4
  20af08:	20000226 	beq	r4,zero,20af14 <_putc_r+0x1c>
  20af0c:	20800e17 	ldw	r2,56(r4)
  20af10:	10001b26 	beq	r2,zero,20af80 <_putc_r+0x88>
  20af14:	30800217 	ldw	r2,8(r6)
  20af18:	10bfffc4 	addi	r2,r2,-1
  20af1c:	30800215 	stw	r2,8(r6)
  20af20:	10000a16 	blt	r2,zero,20af4c <_putc_r+0x54>
  20af24:	30800017 	ldw	r2,0(r6)
  20af28:	11400005 	stb	r5,0(r2)
  20af2c:	30800017 	ldw	r2,0(r6)
  20af30:	10c00044 	addi	r3,r2,1
  20af34:	30c00015 	stw	r3,0(r6)
  20af38:	10800003 	ldbu	r2,0(r2)
  20af3c:	dfc00317 	ldw	ra,12(sp)
  20af40:	dc000217 	ldw	r16,8(sp)
  20af44:	dec00404 	addi	sp,sp,16
  20af48:	f800283a 	ret
  20af4c:	30c00617 	ldw	r3,24(r6)
  20af50:	10c00616 	blt	r2,r3,20af6c <_putc_r+0x74>
  20af54:	30800017 	ldw	r2,0(r6)
  20af58:	00c00284 	movi	r3,10
  20af5c:	11400005 	stb	r5,0(r2)
  20af60:	30800017 	ldw	r2,0(r6)
  20af64:	11400003 	ldbu	r5,0(r2)
  20af68:	28fff11e 	bne	r5,r3,20af30 <_gp+0xffdf931c>
  20af6c:	8009883a 	mov	r4,r16
  20af70:	dfc00317 	ldw	ra,12(sp)
  20af74:	dc000217 	ldw	r16,8(sp)
  20af78:	dec00404 	addi	sp,sp,16
  20af7c:	020cf9c1 	jmpi	20cf9c <__swbuf_r>
  20af80:	d9400015 	stw	r5,0(sp)
  20af84:	d9800115 	stw	r6,4(sp)
  20af88:	02084180 	call	208418 <__sinit>
  20af8c:	d9800117 	ldw	r6,4(sp)
  20af90:	d9400017 	ldw	r5,0(sp)
  20af94:	003fdf06 	br	20af14 <_gp+0xffdf9300>

0020af98 <putc>:
  20af98:	00801074 	movhi	r2,65
  20af9c:	defffc04 	addi	sp,sp,-16
  20afa0:	10a70a04 	addi	r2,r2,-25560
  20afa4:	dc000115 	stw	r16,4(sp)
  20afa8:	14000017 	ldw	r16,0(r2)
  20afac:	dc400215 	stw	r17,8(sp)
  20afb0:	dfc00315 	stw	ra,12(sp)
  20afb4:	2023883a 	mov	r17,r4
  20afb8:	80000226 	beq	r16,zero,20afc4 <putc+0x2c>
  20afbc:	80800e17 	ldw	r2,56(r16)
  20afc0:	10001a26 	beq	r2,zero,20b02c <putc+0x94>
  20afc4:	28800217 	ldw	r2,8(r5)
  20afc8:	10bfffc4 	addi	r2,r2,-1
  20afcc:	28800215 	stw	r2,8(r5)
  20afd0:	10000b16 	blt	r2,zero,20b000 <putc+0x68>
  20afd4:	28800017 	ldw	r2,0(r5)
  20afd8:	14400005 	stb	r17,0(r2)
  20afdc:	28800017 	ldw	r2,0(r5)
  20afe0:	10c00044 	addi	r3,r2,1
  20afe4:	28c00015 	stw	r3,0(r5)
  20afe8:	10800003 	ldbu	r2,0(r2)
  20afec:	dfc00317 	ldw	ra,12(sp)
  20aff0:	dc400217 	ldw	r17,8(sp)
  20aff4:	dc000117 	ldw	r16,4(sp)
  20aff8:	dec00404 	addi	sp,sp,16
  20affc:	f800283a 	ret
  20b000:	28c00617 	ldw	r3,24(r5)
  20b004:	10c00e16 	blt	r2,r3,20b040 <putc+0xa8>
  20b008:	28800017 	ldw	r2,0(r5)
  20b00c:	01000284 	movi	r4,10
  20b010:	14400005 	stb	r17,0(r2)
  20b014:	28800017 	ldw	r2,0(r5)
  20b018:	10c00003 	ldbu	r3,0(r2)
  20b01c:	193ff01e 	bne	r3,r4,20afe0 <_gp+0xffdf93cc>
  20b020:	280d883a 	mov	r6,r5
  20b024:	180b883a 	mov	r5,r3
  20b028:	00000706 	br	20b048 <putc+0xb0>
  20b02c:	8009883a 	mov	r4,r16
  20b030:	d9400015 	stw	r5,0(sp)
  20b034:	02084180 	call	208418 <__sinit>
  20b038:	d9400017 	ldw	r5,0(sp)
  20b03c:	003fe106 	br	20afc4 <_gp+0xffdf93b0>
  20b040:	280d883a 	mov	r6,r5
  20b044:	880b883a 	mov	r5,r17
  20b048:	8009883a 	mov	r4,r16
  20b04c:	dfc00317 	ldw	ra,12(sp)
  20b050:	dc400217 	ldw	r17,8(sp)
  20b054:	dc000117 	ldw	r16,4(sp)
  20b058:	dec00404 	addi	sp,sp,16
  20b05c:	020cf9c1 	jmpi	20cf9c <__swbuf_r>

0020b060 <_realloc_r>:
  20b060:	defff604 	addi	sp,sp,-40
  20b064:	dc800215 	stw	r18,8(sp)
  20b068:	dfc00915 	stw	ra,36(sp)
  20b06c:	df000815 	stw	fp,32(sp)
  20b070:	ddc00715 	stw	r23,28(sp)
  20b074:	dd800615 	stw	r22,24(sp)
  20b078:	dd400515 	stw	r21,20(sp)
  20b07c:	dd000415 	stw	r20,16(sp)
  20b080:	dcc00315 	stw	r19,12(sp)
  20b084:	dc400115 	stw	r17,4(sp)
  20b088:	dc000015 	stw	r16,0(sp)
  20b08c:	3025883a 	mov	r18,r6
  20b090:	2800b726 	beq	r5,zero,20b370 <_realloc_r+0x310>
  20b094:	282b883a 	mov	r21,r5
  20b098:	2029883a 	mov	r20,r4
  20b09c:	02112840 	call	211284 <__malloc_lock>
  20b0a0:	a8bfff17 	ldw	r2,-4(r21)
  20b0a4:	043fff04 	movi	r16,-4
  20b0a8:	90c002c4 	addi	r3,r18,11
  20b0ac:	01000584 	movi	r4,22
  20b0b0:	acfffe04 	addi	r19,r21,-8
  20b0b4:	1420703a 	and	r16,r2,r16
  20b0b8:	20c0332e 	bgeu	r4,r3,20b188 <_realloc_r+0x128>
  20b0bc:	047ffe04 	movi	r17,-8
  20b0c0:	1c62703a 	and	r17,r3,r17
  20b0c4:	8807883a 	mov	r3,r17
  20b0c8:	88005816 	blt	r17,zero,20b22c <_realloc_r+0x1cc>
  20b0cc:	8c805736 	bltu	r17,r18,20b22c <_realloc_r+0x1cc>
  20b0d0:	80c0300e 	bge	r16,r3,20b194 <_realloc_r+0x134>
  20b0d4:	07001074 	movhi	fp,65
  20b0d8:	e7213304 	addi	fp,fp,-31540
  20b0dc:	e1c00217 	ldw	r7,8(fp)
  20b0e0:	9c09883a 	add	r4,r19,r16
  20b0e4:	22000117 	ldw	r8,4(r4)
  20b0e8:	21c06326 	beq	r4,r7,20b278 <_realloc_r+0x218>
  20b0ec:	017fff84 	movi	r5,-2
  20b0f0:	414a703a 	and	r5,r8,r5
  20b0f4:	214b883a 	add	r5,r4,r5
  20b0f8:	29800117 	ldw	r6,4(r5)
  20b0fc:	3180004c 	andi	r6,r6,1
  20b100:	30003f26 	beq	r6,zero,20b200 <_realloc_r+0x1a0>
  20b104:	1080004c 	andi	r2,r2,1
  20b108:	10008326 	beq	r2,zero,20b318 <_realloc_r+0x2b8>
  20b10c:	900b883a 	mov	r5,r18
  20b110:	a009883a 	mov	r4,r20
  20b114:	02091840 	call	209184 <_malloc_r>
  20b118:	1025883a 	mov	r18,r2
  20b11c:	10011e26 	beq	r2,zero,20b598 <_realloc_r+0x538>
  20b120:	a93fff17 	ldw	r4,-4(r21)
  20b124:	10fffe04 	addi	r3,r2,-8
  20b128:	00bfff84 	movi	r2,-2
  20b12c:	2084703a 	and	r2,r4,r2
  20b130:	9885883a 	add	r2,r19,r2
  20b134:	1880ee26 	beq	r3,r2,20b4f0 <_realloc_r+0x490>
  20b138:	81bfff04 	addi	r6,r16,-4
  20b13c:	00800904 	movi	r2,36
  20b140:	1180b836 	bltu	r2,r6,20b424 <_realloc_r+0x3c4>
  20b144:	00c004c4 	movi	r3,19
  20b148:	19809636 	bltu	r3,r6,20b3a4 <_realloc_r+0x344>
  20b14c:	9005883a 	mov	r2,r18
  20b150:	a807883a 	mov	r3,r21
  20b154:	19000017 	ldw	r4,0(r3)
  20b158:	11000015 	stw	r4,0(r2)
  20b15c:	19000117 	ldw	r4,4(r3)
  20b160:	11000115 	stw	r4,4(r2)
  20b164:	18c00217 	ldw	r3,8(r3)
  20b168:	10c00215 	stw	r3,8(r2)
  20b16c:	a80b883a 	mov	r5,r21
  20b170:	a009883a 	mov	r4,r20
  20b174:	020858c0 	call	20858c <_free_r>
  20b178:	a009883a 	mov	r4,r20
  20b17c:	02112a80 	call	2112a8 <__malloc_unlock>
  20b180:	9005883a 	mov	r2,r18
  20b184:	00001206 	br	20b1d0 <_realloc_r+0x170>
  20b188:	00c00404 	movi	r3,16
  20b18c:	1823883a 	mov	r17,r3
  20b190:	003fce06 	br	20b0cc <_gp+0xffdf94b8>
  20b194:	a825883a 	mov	r18,r21
  20b198:	8445c83a 	sub	r2,r16,r17
  20b19c:	00c003c4 	movi	r3,15
  20b1a0:	18802636 	bltu	r3,r2,20b23c <_realloc_r+0x1dc>
  20b1a4:	99800117 	ldw	r6,4(r19)
  20b1a8:	9c07883a 	add	r3,r19,r16
  20b1ac:	3180004c 	andi	r6,r6,1
  20b1b0:	3420b03a 	or	r16,r6,r16
  20b1b4:	9c000115 	stw	r16,4(r19)
  20b1b8:	18800117 	ldw	r2,4(r3)
  20b1bc:	10800054 	ori	r2,r2,1
  20b1c0:	18800115 	stw	r2,4(r3)
  20b1c4:	a009883a 	mov	r4,r20
  20b1c8:	02112a80 	call	2112a8 <__malloc_unlock>
  20b1cc:	9005883a 	mov	r2,r18
  20b1d0:	dfc00917 	ldw	ra,36(sp)
  20b1d4:	df000817 	ldw	fp,32(sp)
  20b1d8:	ddc00717 	ldw	r23,28(sp)
  20b1dc:	dd800617 	ldw	r22,24(sp)
  20b1e0:	dd400517 	ldw	r21,20(sp)
  20b1e4:	dd000417 	ldw	r20,16(sp)
  20b1e8:	dcc00317 	ldw	r19,12(sp)
  20b1ec:	dc800217 	ldw	r18,8(sp)
  20b1f0:	dc400117 	ldw	r17,4(sp)
  20b1f4:	dc000017 	ldw	r16,0(sp)
  20b1f8:	dec00a04 	addi	sp,sp,40
  20b1fc:	f800283a 	ret
  20b200:	017fff04 	movi	r5,-4
  20b204:	414a703a 	and	r5,r8,r5
  20b208:	814d883a 	add	r6,r16,r5
  20b20c:	30c01f16 	blt	r6,r3,20b28c <_realloc_r+0x22c>
  20b210:	20800317 	ldw	r2,12(r4)
  20b214:	20c00217 	ldw	r3,8(r4)
  20b218:	a825883a 	mov	r18,r21
  20b21c:	3021883a 	mov	r16,r6
  20b220:	18800315 	stw	r2,12(r3)
  20b224:	10c00215 	stw	r3,8(r2)
  20b228:	003fdb06 	br	20b198 <_gp+0xffdf9584>
  20b22c:	00800304 	movi	r2,12
  20b230:	a0800015 	stw	r2,0(r20)
  20b234:	0005883a 	mov	r2,zero
  20b238:	003fe506 	br	20b1d0 <_gp+0xffdf95bc>
  20b23c:	98c00117 	ldw	r3,4(r19)
  20b240:	9c4b883a 	add	r5,r19,r17
  20b244:	11000054 	ori	r4,r2,1
  20b248:	18c0004c 	andi	r3,r3,1
  20b24c:	1c62b03a 	or	r17,r3,r17
  20b250:	9c400115 	stw	r17,4(r19)
  20b254:	29000115 	stw	r4,4(r5)
  20b258:	2885883a 	add	r2,r5,r2
  20b25c:	10c00117 	ldw	r3,4(r2)
  20b260:	29400204 	addi	r5,r5,8
  20b264:	a009883a 	mov	r4,r20
  20b268:	18c00054 	ori	r3,r3,1
  20b26c:	10c00115 	stw	r3,4(r2)
  20b270:	020858c0 	call	20858c <_free_r>
  20b274:	003fd306 	br	20b1c4 <_gp+0xffdf95b0>
  20b278:	017fff04 	movi	r5,-4
  20b27c:	414a703a 	and	r5,r8,r5
  20b280:	89800404 	addi	r6,r17,16
  20b284:	8151883a 	add	r8,r16,r5
  20b288:	4180590e 	bge	r8,r6,20b3f0 <_realloc_r+0x390>
  20b28c:	1080004c 	andi	r2,r2,1
  20b290:	103f9e1e 	bne	r2,zero,20b10c <_gp+0xffdf94f8>
  20b294:	adbffe17 	ldw	r22,-8(r21)
  20b298:	00bfff04 	movi	r2,-4
  20b29c:	9dadc83a 	sub	r22,r19,r22
  20b2a0:	b1800117 	ldw	r6,4(r22)
  20b2a4:	3084703a 	and	r2,r6,r2
  20b2a8:	20002026 	beq	r4,zero,20b32c <_realloc_r+0x2cc>
  20b2ac:	80af883a 	add	r23,r16,r2
  20b2b0:	b96f883a 	add	r23,r23,r5
  20b2b4:	21c05f26 	beq	r4,r7,20b434 <_realloc_r+0x3d4>
  20b2b8:	b8c01c16 	blt	r23,r3,20b32c <_realloc_r+0x2cc>
  20b2bc:	20800317 	ldw	r2,12(r4)
  20b2c0:	20c00217 	ldw	r3,8(r4)
  20b2c4:	81bfff04 	addi	r6,r16,-4
  20b2c8:	01000904 	movi	r4,36
  20b2cc:	18800315 	stw	r2,12(r3)
  20b2d0:	10c00215 	stw	r3,8(r2)
  20b2d4:	b0c00217 	ldw	r3,8(r22)
  20b2d8:	b0800317 	ldw	r2,12(r22)
  20b2dc:	b4800204 	addi	r18,r22,8
  20b2e0:	18800315 	stw	r2,12(r3)
  20b2e4:	10c00215 	stw	r3,8(r2)
  20b2e8:	21801b36 	bltu	r4,r6,20b358 <_realloc_r+0x2f8>
  20b2ec:	008004c4 	movi	r2,19
  20b2f0:	1180352e 	bgeu	r2,r6,20b3c8 <_realloc_r+0x368>
  20b2f4:	a8800017 	ldw	r2,0(r21)
  20b2f8:	b0800215 	stw	r2,8(r22)
  20b2fc:	a8800117 	ldw	r2,4(r21)
  20b300:	b0800315 	stw	r2,12(r22)
  20b304:	008006c4 	movi	r2,27
  20b308:	11807f36 	bltu	r2,r6,20b508 <_realloc_r+0x4a8>
  20b30c:	b0800404 	addi	r2,r22,16
  20b310:	ad400204 	addi	r21,r21,8
  20b314:	00002d06 	br	20b3cc <_realloc_r+0x36c>
  20b318:	adbffe17 	ldw	r22,-8(r21)
  20b31c:	00bfff04 	movi	r2,-4
  20b320:	9dadc83a 	sub	r22,r19,r22
  20b324:	b1000117 	ldw	r4,4(r22)
  20b328:	2084703a 	and	r2,r4,r2
  20b32c:	b03f7726 	beq	r22,zero,20b10c <_gp+0xffdf94f8>
  20b330:	80af883a 	add	r23,r16,r2
  20b334:	b8ff7516 	blt	r23,r3,20b10c <_gp+0xffdf94f8>
  20b338:	b0800317 	ldw	r2,12(r22)
  20b33c:	b0c00217 	ldw	r3,8(r22)
  20b340:	81bfff04 	addi	r6,r16,-4
  20b344:	01000904 	movi	r4,36
  20b348:	18800315 	stw	r2,12(r3)
  20b34c:	10c00215 	stw	r3,8(r2)
  20b350:	b4800204 	addi	r18,r22,8
  20b354:	21bfe52e 	bgeu	r4,r6,20b2ec <_gp+0xffdf96d8>
  20b358:	a80b883a 	mov	r5,r21
  20b35c:	9009883a 	mov	r4,r18
  20b360:	0209bbc0 	call	209bbc <memmove>
  20b364:	b821883a 	mov	r16,r23
  20b368:	b027883a 	mov	r19,r22
  20b36c:	003f8a06 	br	20b198 <_gp+0xffdf9584>
  20b370:	300b883a 	mov	r5,r6
  20b374:	dfc00917 	ldw	ra,36(sp)
  20b378:	df000817 	ldw	fp,32(sp)
  20b37c:	ddc00717 	ldw	r23,28(sp)
  20b380:	dd800617 	ldw	r22,24(sp)
  20b384:	dd400517 	ldw	r21,20(sp)
  20b388:	dd000417 	ldw	r20,16(sp)
  20b38c:	dcc00317 	ldw	r19,12(sp)
  20b390:	dc800217 	ldw	r18,8(sp)
  20b394:	dc400117 	ldw	r17,4(sp)
  20b398:	dc000017 	ldw	r16,0(sp)
  20b39c:	dec00a04 	addi	sp,sp,40
  20b3a0:	02091841 	jmpi	209184 <_malloc_r>
  20b3a4:	a8c00017 	ldw	r3,0(r21)
  20b3a8:	90c00015 	stw	r3,0(r18)
  20b3ac:	a8c00117 	ldw	r3,4(r21)
  20b3b0:	90c00115 	stw	r3,4(r18)
  20b3b4:	00c006c4 	movi	r3,27
  20b3b8:	19804536 	bltu	r3,r6,20b4d0 <_realloc_r+0x470>
  20b3bc:	90800204 	addi	r2,r18,8
  20b3c0:	a8c00204 	addi	r3,r21,8
  20b3c4:	003f6306 	br	20b154 <_gp+0xffdf9540>
  20b3c8:	9005883a 	mov	r2,r18
  20b3cc:	a8c00017 	ldw	r3,0(r21)
  20b3d0:	b821883a 	mov	r16,r23
  20b3d4:	b027883a 	mov	r19,r22
  20b3d8:	10c00015 	stw	r3,0(r2)
  20b3dc:	a8c00117 	ldw	r3,4(r21)
  20b3e0:	10c00115 	stw	r3,4(r2)
  20b3e4:	a8c00217 	ldw	r3,8(r21)
  20b3e8:	10c00215 	stw	r3,8(r2)
  20b3ec:	003f6a06 	br	20b198 <_gp+0xffdf9584>
  20b3f0:	9c67883a 	add	r19,r19,r17
  20b3f4:	4445c83a 	sub	r2,r8,r17
  20b3f8:	e4c00215 	stw	r19,8(fp)
  20b3fc:	10800054 	ori	r2,r2,1
  20b400:	98800115 	stw	r2,4(r19)
  20b404:	a8bfff17 	ldw	r2,-4(r21)
  20b408:	a009883a 	mov	r4,r20
  20b40c:	1080004c 	andi	r2,r2,1
  20b410:	1462b03a 	or	r17,r2,r17
  20b414:	ac7fff15 	stw	r17,-4(r21)
  20b418:	02112a80 	call	2112a8 <__malloc_unlock>
  20b41c:	a805883a 	mov	r2,r21
  20b420:	003f6b06 	br	20b1d0 <_gp+0xffdf95bc>
  20b424:	a80b883a 	mov	r5,r21
  20b428:	9009883a 	mov	r4,r18
  20b42c:	0209bbc0 	call	209bbc <memmove>
  20b430:	003f4e06 	br	20b16c <_gp+0xffdf9558>
  20b434:	89000404 	addi	r4,r17,16
  20b438:	b93fbc16 	blt	r23,r4,20b32c <_gp+0xffdf9718>
  20b43c:	b0800317 	ldw	r2,12(r22)
  20b440:	b0c00217 	ldw	r3,8(r22)
  20b444:	81bfff04 	addi	r6,r16,-4
  20b448:	01000904 	movi	r4,36
  20b44c:	18800315 	stw	r2,12(r3)
  20b450:	10c00215 	stw	r3,8(r2)
  20b454:	b4800204 	addi	r18,r22,8
  20b458:	21804336 	bltu	r4,r6,20b568 <_realloc_r+0x508>
  20b45c:	008004c4 	movi	r2,19
  20b460:	11803f2e 	bgeu	r2,r6,20b560 <_realloc_r+0x500>
  20b464:	a8800017 	ldw	r2,0(r21)
  20b468:	b0800215 	stw	r2,8(r22)
  20b46c:	a8800117 	ldw	r2,4(r21)
  20b470:	b0800315 	stw	r2,12(r22)
  20b474:	008006c4 	movi	r2,27
  20b478:	11803f36 	bltu	r2,r6,20b578 <_realloc_r+0x518>
  20b47c:	b0800404 	addi	r2,r22,16
  20b480:	ad400204 	addi	r21,r21,8
  20b484:	a8c00017 	ldw	r3,0(r21)
  20b488:	10c00015 	stw	r3,0(r2)
  20b48c:	a8c00117 	ldw	r3,4(r21)
  20b490:	10c00115 	stw	r3,4(r2)
  20b494:	a8c00217 	ldw	r3,8(r21)
  20b498:	10c00215 	stw	r3,8(r2)
  20b49c:	b447883a 	add	r3,r22,r17
  20b4a0:	bc45c83a 	sub	r2,r23,r17
  20b4a4:	e0c00215 	stw	r3,8(fp)
  20b4a8:	10800054 	ori	r2,r2,1
  20b4ac:	18800115 	stw	r2,4(r3)
  20b4b0:	b0800117 	ldw	r2,4(r22)
  20b4b4:	a009883a 	mov	r4,r20
  20b4b8:	1080004c 	andi	r2,r2,1
  20b4bc:	1462b03a 	or	r17,r2,r17
  20b4c0:	b4400115 	stw	r17,4(r22)
  20b4c4:	02112a80 	call	2112a8 <__malloc_unlock>
  20b4c8:	9005883a 	mov	r2,r18
  20b4cc:	003f4006 	br	20b1d0 <_gp+0xffdf95bc>
  20b4d0:	a8c00217 	ldw	r3,8(r21)
  20b4d4:	90c00215 	stw	r3,8(r18)
  20b4d8:	a8c00317 	ldw	r3,12(r21)
  20b4dc:	90c00315 	stw	r3,12(r18)
  20b4e0:	30801126 	beq	r6,r2,20b528 <_realloc_r+0x4c8>
  20b4e4:	90800404 	addi	r2,r18,16
  20b4e8:	a8c00404 	addi	r3,r21,16
  20b4ec:	003f1906 	br	20b154 <_gp+0xffdf9540>
  20b4f0:	90ffff17 	ldw	r3,-4(r18)
  20b4f4:	00bfff04 	movi	r2,-4
  20b4f8:	a825883a 	mov	r18,r21
  20b4fc:	1884703a 	and	r2,r3,r2
  20b500:	80a1883a 	add	r16,r16,r2
  20b504:	003f2406 	br	20b198 <_gp+0xffdf9584>
  20b508:	a8800217 	ldw	r2,8(r21)
  20b50c:	b0800415 	stw	r2,16(r22)
  20b510:	a8800317 	ldw	r2,12(r21)
  20b514:	b0800515 	stw	r2,20(r22)
  20b518:	31000a26 	beq	r6,r4,20b544 <_realloc_r+0x4e4>
  20b51c:	b0800604 	addi	r2,r22,24
  20b520:	ad400404 	addi	r21,r21,16
  20b524:	003fa906 	br	20b3cc <_gp+0xffdf97b8>
  20b528:	a9000417 	ldw	r4,16(r21)
  20b52c:	90800604 	addi	r2,r18,24
  20b530:	a8c00604 	addi	r3,r21,24
  20b534:	91000415 	stw	r4,16(r18)
  20b538:	a9000517 	ldw	r4,20(r21)
  20b53c:	91000515 	stw	r4,20(r18)
  20b540:	003f0406 	br	20b154 <_gp+0xffdf9540>
  20b544:	a8c00417 	ldw	r3,16(r21)
  20b548:	ad400604 	addi	r21,r21,24
  20b54c:	b0800804 	addi	r2,r22,32
  20b550:	b0c00615 	stw	r3,24(r22)
  20b554:	a8ffff17 	ldw	r3,-4(r21)
  20b558:	b0c00715 	stw	r3,28(r22)
  20b55c:	003f9b06 	br	20b3cc <_gp+0xffdf97b8>
  20b560:	9005883a 	mov	r2,r18
  20b564:	003fc706 	br	20b484 <_gp+0xffdf9870>
  20b568:	a80b883a 	mov	r5,r21
  20b56c:	9009883a 	mov	r4,r18
  20b570:	0209bbc0 	call	209bbc <memmove>
  20b574:	003fc906 	br	20b49c <_gp+0xffdf9888>
  20b578:	a8800217 	ldw	r2,8(r21)
  20b57c:	b0800415 	stw	r2,16(r22)
  20b580:	a8800317 	ldw	r2,12(r21)
  20b584:	b0800515 	stw	r2,20(r22)
  20b588:	31000726 	beq	r6,r4,20b5a8 <_realloc_r+0x548>
  20b58c:	b0800604 	addi	r2,r22,24
  20b590:	ad400404 	addi	r21,r21,16
  20b594:	003fbb06 	br	20b484 <_gp+0xffdf9870>
  20b598:	a009883a 	mov	r4,r20
  20b59c:	02112a80 	call	2112a8 <__malloc_unlock>
  20b5a0:	0005883a 	mov	r2,zero
  20b5a4:	003f0a06 	br	20b1d0 <_gp+0xffdf95bc>
  20b5a8:	a8c00417 	ldw	r3,16(r21)
  20b5ac:	ad400604 	addi	r21,r21,24
  20b5b0:	b0800804 	addi	r2,r22,32
  20b5b4:	b0c00615 	stw	r3,24(r22)
  20b5b8:	a8ffff17 	ldw	r3,-4(r21)
  20b5bc:	b0c00715 	stw	r3,28(r22)
  20b5c0:	003fb006 	br	20b484 <_gp+0xffdf9870>

0020b5c4 <__fpclassifyd>:
  20b5c4:	00a00034 	movhi	r2,32768
  20b5c8:	10bfffc4 	addi	r2,r2,-1
  20b5cc:	2884703a 	and	r2,r5,r2
  20b5d0:	10000726 	beq	r2,zero,20b5f0 <__fpclassifyd+0x2c>
  20b5d4:	00fffc34 	movhi	r3,65520
  20b5d8:	019ff834 	movhi	r6,32736
  20b5dc:	28c7883a 	add	r3,r5,r3
  20b5e0:	31bfffc4 	addi	r6,r6,-1
  20b5e4:	30c00536 	bltu	r6,r3,20b5fc <__fpclassifyd+0x38>
  20b5e8:	00800104 	movi	r2,4
  20b5ec:	f800283a 	ret
  20b5f0:	2000021e 	bne	r4,zero,20b5fc <__fpclassifyd+0x38>
  20b5f4:	00800084 	movi	r2,2
  20b5f8:	f800283a 	ret
  20b5fc:	00dffc34 	movhi	r3,32752
  20b600:	019ff834 	movhi	r6,32736
  20b604:	28cb883a 	add	r5,r5,r3
  20b608:	31bfffc4 	addi	r6,r6,-1
  20b60c:	317ff62e 	bgeu	r6,r5,20b5e8 <_gp+0xffdf99d4>
  20b610:	01400434 	movhi	r5,16
  20b614:	297fffc4 	addi	r5,r5,-1
  20b618:	28800236 	bltu	r5,r2,20b624 <__fpclassifyd+0x60>
  20b61c:	008000c4 	movi	r2,3
  20b620:	f800283a 	ret
  20b624:	10c00226 	beq	r2,r3,20b630 <__fpclassifyd+0x6c>
  20b628:	0005883a 	mov	r2,zero
  20b62c:	f800283a 	ret
  20b630:	2005003a 	cmpeq	r2,r4,zero
  20b634:	f800283a 	ret

0020b638 <_sbrk_r>:
  20b638:	defffd04 	addi	sp,sp,-12
  20b63c:	dc000015 	stw	r16,0(sp)
  20b640:	04001074 	movhi	r16,65
  20b644:	dc400115 	stw	r17,4(sp)
  20b648:	84272b04 	addi	r16,r16,-25428
  20b64c:	2023883a 	mov	r17,r4
  20b650:	2809883a 	mov	r4,r5
  20b654:	dfc00215 	stw	ra,8(sp)
  20b658:	80000015 	stw	zero,0(r16)
  20b65c:	02114900 	call	211490 <sbrk>
  20b660:	00ffffc4 	movi	r3,-1
  20b664:	10c00526 	beq	r2,r3,20b67c <_sbrk_r+0x44>
  20b668:	dfc00217 	ldw	ra,8(sp)
  20b66c:	dc400117 	ldw	r17,4(sp)
  20b670:	dc000017 	ldw	r16,0(sp)
  20b674:	dec00304 	addi	sp,sp,12
  20b678:	f800283a 	ret
  20b67c:	80c00017 	ldw	r3,0(r16)
  20b680:	183ff926 	beq	r3,zero,20b668 <_gp+0xffdf9a54>
  20b684:	88c00015 	stw	r3,0(r17)
  20b688:	003ff706 	br	20b668 <_gp+0xffdf9a54>

0020b68c <__sread>:
  20b68c:	defffe04 	addi	sp,sp,-8
  20b690:	dc000015 	stw	r16,0(sp)
  20b694:	2821883a 	mov	r16,r5
  20b698:	2940038f 	ldh	r5,14(r5)
  20b69c:	dfc00115 	stw	ra,4(sp)
  20b6a0:	020d6a00 	call	20d6a0 <_read_r>
  20b6a4:	10000716 	blt	r2,zero,20b6c4 <__sread+0x38>
  20b6a8:	80c01417 	ldw	r3,80(r16)
  20b6ac:	1887883a 	add	r3,r3,r2
  20b6b0:	80c01415 	stw	r3,80(r16)
  20b6b4:	dfc00117 	ldw	ra,4(sp)
  20b6b8:	dc000017 	ldw	r16,0(sp)
  20b6bc:	dec00204 	addi	sp,sp,8
  20b6c0:	f800283a 	ret
  20b6c4:	80c0030b 	ldhu	r3,12(r16)
  20b6c8:	18fbffcc 	andi	r3,r3,61439
  20b6cc:	80c0030d 	sth	r3,12(r16)
  20b6d0:	dfc00117 	ldw	ra,4(sp)
  20b6d4:	dc000017 	ldw	r16,0(sp)
  20b6d8:	dec00204 	addi	sp,sp,8
  20b6dc:	f800283a 	ret

0020b6e0 <__seofread>:
  20b6e0:	0005883a 	mov	r2,zero
  20b6e4:	f800283a 	ret

0020b6e8 <__swrite>:
  20b6e8:	2880030b 	ldhu	r2,12(r5)
  20b6ec:	defffb04 	addi	sp,sp,-20
  20b6f0:	dcc00315 	stw	r19,12(sp)
  20b6f4:	dc800215 	stw	r18,8(sp)
  20b6f8:	dc400115 	stw	r17,4(sp)
  20b6fc:	dc000015 	stw	r16,0(sp)
  20b700:	dfc00415 	stw	ra,16(sp)
  20b704:	10c0400c 	andi	r3,r2,256
  20b708:	2821883a 	mov	r16,r5
  20b70c:	2023883a 	mov	r17,r4
  20b710:	3025883a 	mov	r18,r6
  20b714:	3827883a 	mov	r19,r7
  20b718:	18000526 	beq	r3,zero,20b730 <__swrite+0x48>
  20b71c:	2940038f 	ldh	r5,14(r5)
  20b720:	01c00084 	movi	r7,2
  20b724:	000d883a 	mov	r6,zero
  20b728:	020d6400 	call	20d640 <_lseek_r>
  20b72c:	8080030b 	ldhu	r2,12(r16)
  20b730:	8140038f 	ldh	r5,14(r16)
  20b734:	10bbffcc 	andi	r2,r2,61439
  20b738:	980f883a 	mov	r7,r19
  20b73c:	900d883a 	mov	r6,r18
  20b740:	8809883a 	mov	r4,r17
  20b744:	8080030d 	sth	r2,12(r16)
  20b748:	dfc00417 	ldw	ra,16(sp)
  20b74c:	dcc00317 	ldw	r19,12(sp)
  20b750:	dc800217 	ldw	r18,8(sp)
  20b754:	dc400117 	ldw	r17,4(sp)
  20b758:	dc000017 	ldw	r16,0(sp)
  20b75c:	dec00504 	addi	sp,sp,20
  20b760:	020d0f41 	jmpi	20d0f4 <_write_r>

0020b764 <__sseek>:
  20b764:	defffe04 	addi	sp,sp,-8
  20b768:	dc000015 	stw	r16,0(sp)
  20b76c:	2821883a 	mov	r16,r5
  20b770:	2940038f 	ldh	r5,14(r5)
  20b774:	dfc00115 	stw	ra,4(sp)
  20b778:	020d6400 	call	20d640 <_lseek_r>
  20b77c:	00ffffc4 	movi	r3,-1
  20b780:	10c00826 	beq	r2,r3,20b7a4 <__sseek+0x40>
  20b784:	80c0030b 	ldhu	r3,12(r16)
  20b788:	80801415 	stw	r2,80(r16)
  20b78c:	18c40014 	ori	r3,r3,4096
  20b790:	80c0030d 	sth	r3,12(r16)
  20b794:	dfc00117 	ldw	ra,4(sp)
  20b798:	dc000017 	ldw	r16,0(sp)
  20b79c:	dec00204 	addi	sp,sp,8
  20b7a0:	f800283a 	ret
  20b7a4:	80c0030b 	ldhu	r3,12(r16)
  20b7a8:	18fbffcc 	andi	r3,r3,61439
  20b7ac:	80c0030d 	sth	r3,12(r16)
  20b7b0:	dfc00117 	ldw	ra,4(sp)
  20b7b4:	dc000017 	ldw	r16,0(sp)
  20b7b8:	dec00204 	addi	sp,sp,8
  20b7bc:	f800283a 	ret

0020b7c0 <__sclose>:
  20b7c0:	2940038f 	ldh	r5,14(r5)
  20b7c4:	020d1541 	jmpi	20d154 <_close_r>

0020b7c8 <strcmp>:
  20b7c8:	2144b03a 	or	r2,r4,r5
  20b7cc:	108000cc 	andi	r2,r2,3
  20b7d0:	1000171e 	bne	r2,zero,20b830 <strcmp+0x68>
  20b7d4:	20800017 	ldw	r2,0(r4)
  20b7d8:	28c00017 	ldw	r3,0(r5)
  20b7dc:	10c0141e 	bne	r2,r3,20b830 <strcmp+0x68>
  20b7e0:	027fbff4 	movhi	r9,65279
  20b7e4:	4a7fbfc4 	addi	r9,r9,-257
  20b7e8:	0086303a 	nor	r3,zero,r2
  20b7ec:	02202074 	movhi	r8,32897
  20b7f0:	1245883a 	add	r2,r2,r9
  20b7f4:	42202004 	addi	r8,r8,-32640
  20b7f8:	10c4703a 	and	r2,r2,r3
  20b7fc:	1204703a 	and	r2,r2,r8
  20b800:	10000226 	beq	r2,zero,20b80c <strcmp+0x44>
  20b804:	00002306 	br	20b894 <strcmp+0xcc>
  20b808:	1000221e 	bne	r2,zero,20b894 <strcmp+0xcc>
  20b80c:	21000104 	addi	r4,r4,4
  20b810:	20c00017 	ldw	r3,0(r4)
  20b814:	29400104 	addi	r5,r5,4
  20b818:	29800017 	ldw	r6,0(r5)
  20b81c:	1a4f883a 	add	r7,r3,r9
  20b820:	00c4303a 	nor	r2,zero,r3
  20b824:	3884703a 	and	r2,r7,r2
  20b828:	1204703a 	and	r2,r2,r8
  20b82c:	19bff626 	beq	r3,r6,20b808 <_gp+0xffdf9bf4>
  20b830:	20800003 	ldbu	r2,0(r4)
  20b834:	10c03fcc 	andi	r3,r2,255
  20b838:	18c0201c 	xori	r3,r3,128
  20b83c:	18ffe004 	addi	r3,r3,-128
  20b840:	18000c26 	beq	r3,zero,20b874 <strcmp+0xac>
  20b844:	29800007 	ldb	r6,0(r5)
  20b848:	19800326 	beq	r3,r6,20b858 <strcmp+0x90>
  20b84c:	00001306 	br	20b89c <strcmp+0xd4>
  20b850:	29800007 	ldb	r6,0(r5)
  20b854:	11800b1e 	bne	r2,r6,20b884 <strcmp+0xbc>
  20b858:	21000044 	addi	r4,r4,1
  20b85c:	20c00003 	ldbu	r3,0(r4)
  20b860:	29400044 	addi	r5,r5,1
  20b864:	18803fcc 	andi	r2,r3,255
  20b868:	1080201c 	xori	r2,r2,128
  20b86c:	10bfe004 	addi	r2,r2,-128
  20b870:	103ff71e 	bne	r2,zero,20b850 <_gp+0xffdf9c3c>
  20b874:	0007883a 	mov	r3,zero
  20b878:	28800003 	ldbu	r2,0(r5)
  20b87c:	1885c83a 	sub	r2,r3,r2
  20b880:	f800283a 	ret
  20b884:	28800003 	ldbu	r2,0(r5)
  20b888:	18c03fcc 	andi	r3,r3,255
  20b88c:	1885c83a 	sub	r2,r3,r2
  20b890:	f800283a 	ret
  20b894:	0005883a 	mov	r2,zero
  20b898:	f800283a 	ret
  20b89c:	10c03fcc 	andi	r3,r2,255
  20b8a0:	003ff506 	br	20b878 <_gp+0xffdf9c64>

0020b8a4 <__sprint_r.part.0>:
  20b8a4:	28801917 	ldw	r2,100(r5)
  20b8a8:	defff604 	addi	sp,sp,-40
  20b8ac:	dd400515 	stw	r21,20(sp)
  20b8b0:	dfc00915 	stw	ra,36(sp)
  20b8b4:	df000815 	stw	fp,32(sp)
  20b8b8:	ddc00715 	stw	r23,28(sp)
  20b8bc:	dd800615 	stw	r22,24(sp)
  20b8c0:	dd000415 	stw	r20,16(sp)
  20b8c4:	dcc00315 	stw	r19,12(sp)
  20b8c8:	dc800215 	stw	r18,8(sp)
  20b8cc:	dc400115 	stw	r17,4(sp)
  20b8d0:	dc000015 	stw	r16,0(sp)
  20b8d4:	1088000c 	andi	r2,r2,8192
  20b8d8:	302b883a 	mov	r21,r6
  20b8dc:	10002e26 	beq	r2,zero,20b998 <__sprint_r.part.0+0xf4>
  20b8e0:	30800217 	ldw	r2,8(r6)
  20b8e4:	35800017 	ldw	r22,0(r6)
  20b8e8:	10002926 	beq	r2,zero,20b990 <__sprint_r.part.0+0xec>
  20b8ec:	2827883a 	mov	r19,r5
  20b8f0:	2029883a 	mov	r20,r4
  20b8f4:	b5c00104 	addi	r23,r22,4
  20b8f8:	04bfffc4 	movi	r18,-1
  20b8fc:	bc400017 	ldw	r17,0(r23)
  20b900:	b4000017 	ldw	r16,0(r22)
  20b904:	0039883a 	mov	fp,zero
  20b908:	8822d0ba 	srli	r17,r17,2
  20b90c:	8800031e 	bne	r17,zero,20b91c <__sprint_r.part.0+0x78>
  20b910:	00001806 	br	20b974 <__sprint_r.part.0+0xd0>
  20b914:	84000104 	addi	r16,r16,4
  20b918:	8f001526 	beq	r17,fp,20b970 <__sprint_r.part.0+0xcc>
  20b91c:	81400017 	ldw	r5,0(r16)
  20b920:	980d883a 	mov	r6,r19
  20b924:	a009883a 	mov	r4,r20
  20b928:	020d4ec0 	call	20d4ec <_fputwc_r>
  20b92c:	e7000044 	addi	fp,fp,1
  20b930:	14bff81e 	bne	r2,r18,20b914 <_gp+0xffdf9d00>
  20b934:	9005883a 	mov	r2,r18
  20b938:	a8000215 	stw	zero,8(r21)
  20b93c:	a8000115 	stw	zero,4(r21)
  20b940:	dfc00917 	ldw	ra,36(sp)
  20b944:	df000817 	ldw	fp,32(sp)
  20b948:	ddc00717 	ldw	r23,28(sp)
  20b94c:	dd800617 	ldw	r22,24(sp)
  20b950:	dd400517 	ldw	r21,20(sp)
  20b954:	dd000417 	ldw	r20,16(sp)
  20b958:	dcc00317 	ldw	r19,12(sp)
  20b95c:	dc800217 	ldw	r18,8(sp)
  20b960:	dc400117 	ldw	r17,4(sp)
  20b964:	dc000017 	ldw	r16,0(sp)
  20b968:	dec00a04 	addi	sp,sp,40
  20b96c:	f800283a 	ret
  20b970:	a8800217 	ldw	r2,8(r21)
  20b974:	8c63883a 	add	r17,r17,r17
  20b978:	8c63883a 	add	r17,r17,r17
  20b97c:	1445c83a 	sub	r2,r2,r17
  20b980:	a8800215 	stw	r2,8(r21)
  20b984:	b5800204 	addi	r22,r22,8
  20b988:	bdc00204 	addi	r23,r23,8
  20b98c:	103fdb1e 	bne	r2,zero,20b8fc <_gp+0xffdf9ce8>
  20b990:	0005883a 	mov	r2,zero
  20b994:	003fe806 	br	20b938 <_gp+0xffdf9d24>
  20b998:	020889c0 	call	20889c <__sfvwrite_r>
  20b99c:	003fe606 	br	20b938 <_gp+0xffdf9d24>

0020b9a0 <__sprint_r>:
  20b9a0:	30c00217 	ldw	r3,8(r6)
  20b9a4:	18000126 	beq	r3,zero,20b9ac <__sprint_r+0xc>
  20b9a8:	020b8a41 	jmpi	20b8a4 <__sprint_r.part.0>
  20b9ac:	30000115 	stw	zero,4(r6)
  20b9b0:	0005883a 	mov	r2,zero
  20b9b4:	f800283a 	ret

0020b9b8 <___vfiprintf_internal_r>:
  20b9b8:	deffca04 	addi	sp,sp,-216
  20b9bc:	dd403115 	stw	r21,196(sp)
  20b9c0:	dfc03515 	stw	ra,212(sp)
  20b9c4:	df003415 	stw	fp,208(sp)
  20b9c8:	ddc03315 	stw	r23,204(sp)
  20b9cc:	dd803215 	stw	r22,200(sp)
  20b9d0:	dd003015 	stw	r20,192(sp)
  20b9d4:	dcc02f15 	stw	r19,188(sp)
  20b9d8:	dc802e15 	stw	r18,184(sp)
  20b9dc:	dc402d15 	stw	r17,180(sp)
  20b9e0:	dc002c15 	stw	r16,176(sp)
  20b9e4:	d9002115 	stw	r4,132(sp)
  20b9e8:	d9402015 	stw	r5,128(sp)
  20b9ec:	d9c02215 	stw	r7,136(sp)
  20b9f0:	302b883a 	mov	r21,r6
  20b9f4:	20000226 	beq	r4,zero,20ba00 <___vfiprintf_internal_r+0x48>
  20b9f8:	20800e17 	ldw	r2,56(r4)
  20b9fc:	1000cf26 	beq	r2,zero,20bd3c <___vfiprintf_internal_r+0x384>
  20ba00:	d8c02017 	ldw	r3,128(sp)
  20ba04:	1880030b 	ldhu	r2,12(r3)
  20ba08:	10c8000c 	andi	r3,r2,8192
  20ba0c:	1800071e 	bne	r3,zero,20ba2c <___vfiprintf_internal_r+0x74>
  20ba10:	d9402017 	ldw	r5,128(sp)
  20ba14:	00f7ffc4 	movi	r3,-8193
  20ba18:	10880014 	ori	r2,r2,8192
  20ba1c:	29001917 	ldw	r4,100(r5)
  20ba20:	2880030d 	sth	r2,12(r5)
  20ba24:	20c6703a 	and	r3,r4,r3
  20ba28:	28c01915 	stw	r3,100(r5)
  20ba2c:	10c0020c 	andi	r3,r2,8
  20ba30:	1800a526 	beq	r3,zero,20bcc8 <___vfiprintf_internal_r+0x310>
  20ba34:	d9002017 	ldw	r4,128(sp)
  20ba38:	20c00417 	ldw	r3,16(r4)
  20ba3c:	1800a226 	beq	r3,zero,20bcc8 <___vfiprintf_internal_r+0x310>
  20ba40:	1080068c 	andi	r2,r2,26
  20ba44:	00c00284 	movi	r3,10
  20ba48:	10c0a826 	beq	r2,r3,20bcec <___vfiprintf_internal_r+0x334>
  20ba4c:	d9001a04 	addi	r4,sp,104
  20ba50:	d94019c4 	addi	r5,sp,103
  20ba54:	04800874 	movhi	r18,33
  20ba58:	2145c83a 	sub	r2,r4,r5
  20ba5c:	949b6f04 	addi	r18,r18,28092
  20ba60:	d9001e15 	stw	r4,120(sp)
  20ba64:	d9401f15 	stw	r5,124(sp)
  20ba68:	dec01a15 	stw	sp,104(sp)
  20ba6c:	d8001c15 	stw	zero,112(sp)
  20ba70:	d8001b15 	stw	zero,108(sp)
  20ba74:	d811883a 	mov	r8,sp
  20ba78:	d8002615 	stw	zero,152(sp)
  20ba7c:	d8002415 	stw	zero,144(sp)
  20ba80:	d8802815 	stw	r2,160(sp)
  20ba84:	a82d883a 	mov	r22,r21
  20ba88:	b0800007 	ldb	r2,0(r22)
  20ba8c:	10040d26 	beq	r2,zero,20cac4 <___vfiprintf_internal_r+0x110c>
  20ba90:	00c00944 	movi	r3,37
  20ba94:	b029883a 	mov	r20,r22
  20ba98:	10c0021e 	bne	r2,r3,20baa4 <___vfiprintf_internal_r+0xec>
  20ba9c:	00001606 	br	20baf8 <___vfiprintf_internal_r+0x140>
  20baa0:	10c00326 	beq	r2,r3,20bab0 <___vfiprintf_internal_r+0xf8>
  20baa4:	a5000044 	addi	r20,r20,1
  20baa8:	a0800007 	ldb	r2,0(r20)
  20baac:	103ffc1e 	bne	r2,zero,20baa0 <_gp+0xffdf9e8c>
  20bab0:	a5a1c83a 	sub	r16,r20,r22
  20bab4:	80001026 	beq	r16,zero,20baf8 <___vfiprintf_internal_r+0x140>
  20bab8:	d8c01c17 	ldw	r3,112(sp)
  20babc:	d8801b17 	ldw	r2,108(sp)
  20bac0:	45800015 	stw	r22,0(r8)
  20bac4:	80c7883a 	add	r3,r16,r3
  20bac8:	10800044 	addi	r2,r2,1
  20bacc:	44000115 	stw	r16,4(r8)
  20bad0:	d8c01c15 	stw	r3,112(sp)
  20bad4:	d8801b15 	stw	r2,108(sp)
  20bad8:	010001c4 	movi	r4,7
  20badc:	2080750e 	bge	r4,r2,20bcb4 <___vfiprintf_internal_r+0x2fc>
  20bae0:	1803951e 	bne	r3,zero,20c938 <___vfiprintf_internal_r+0xf80>
  20bae4:	d8c02417 	ldw	r3,144(sp)
  20bae8:	d8001b15 	stw	zero,108(sp)
  20baec:	d811883a 	mov	r8,sp
  20baf0:	1c07883a 	add	r3,r3,r16
  20baf4:	d8c02415 	stw	r3,144(sp)
  20baf8:	a0800007 	ldb	r2,0(r20)
  20bafc:	1002e026 	beq	r2,zero,20c680 <___vfiprintf_internal_r+0xcc8>
  20bb00:	a5800044 	addi	r22,r20,1
  20bb04:	a0c00047 	ldb	r3,1(r20)
  20bb08:	d8001d85 	stb	zero,118(sp)
  20bb0c:	0027883a 	mov	r19,zero
  20bb10:	d8002305 	stb	zero,140(sp)
  20bb14:	043fffc4 	movi	r16,-1
  20bb18:	d8002515 	stw	zero,148(sp)
  20bb1c:	0023883a 	mov	r17,zero
  20bb20:	05001604 	movi	r20,88
  20bb24:	05400244 	movi	r21,9
  20bb28:	402f883a 	mov	r23,r8
  20bb2c:	b5800044 	addi	r22,r22,1
  20bb30:	18bff804 	addi	r2,r3,-32
  20bb34:	a0827736 	bltu	r20,r2,20c514 <___vfiprintf_internal_r+0xb5c>
  20bb38:	100490ba 	slli	r2,r2,2
  20bb3c:	01000874 	movhi	r4,33
  20bb40:	212ed404 	addi	r4,r4,-17584
  20bb44:	1105883a 	add	r2,r2,r4
  20bb48:	10800017 	ldw	r2,0(r2)
  20bb4c:	1000683a 	jmp	r2
  20bb50:	0020c214 	movui	zero,33544
  20bb54:	0020c514 	movui	zero,33556
  20bb58:	0020c514 	movui	zero,33556
  20bb5c:	0020c230 	cmpltui	zero,zero,33544
  20bb60:	0020c514 	movui	zero,33556
  20bb64:	0020c514 	movui	zero,33556
  20bb68:	0020c514 	movui	zero,33556
  20bb6c:	0020c514 	movui	zero,33556
  20bb70:	0020c514 	movui	zero,33556
  20bb74:	0020c514 	movui	zero,33556
  20bb78:	0020c438 	rdprs	zero,zero,-31984
  20bb7c:	0020c45c 	xori	zero,zero,33553
  20bb80:	0020c514 	movui	zero,33556
  20bb84:	0020bd54 	movui	zero,33525
  20bb88:	0020c470 	cmpltui	zero,zero,33553
  20bb8c:	0020c514 	movui	zero,33556
  20bb90:	0020c23c 	xorhi	zero,zero,33544
  20bb94:	0020c248 	cmpgei	zero,zero,-31991
  20bb98:	0020c248 	cmpgei	zero,zero,-31991
  20bb9c:	0020c248 	cmpgei	zero,zero,-31991
  20bba0:	0020c248 	cmpgei	zero,zero,-31991
  20bba4:	0020c248 	cmpgei	zero,zero,-31991
  20bba8:	0020c248 	cmpgei	zero,zero,-31991
  20bbac:	0020c248 	cmpgei	zero,zero,-31991
  20bbb0:	0020c248 	cmpgei	zero,zero,-31991
  20bbb4:	0020c248 	cmpgei	zero,zero,-31991
  20bbb8:	0020c514 	movui	zero,33556
  20bbbc:	0020c514 	movui	zero,33556
  20bbc0:	0020c514 	movui	zero,33556
  20bbc4:	0020c514 	movui	zero,33556
  20bbc8:	0020c514 	movui	zero,33556
  20bbcc:	0020c514 	movui	zero,33556
  20bbd0:	0020c514 	movui	zero,33556
  20bbd4:	0020c514 	movui	zero,33556
  20bbd8:	0020c514 	movui	zero,33556
  20bbdc:	0020c514 	movui	zero,33556
  20bbe0:	0020c288 	cmpgei	zero,zero,-31990
  20bbe4:	0020c514 	movui	zero,33556
  20bbe8:	0020c514 	movui	zero,33556
  20bbec:	0020c514 	movui	zero,33556
  20bbf0:	0020c514 	movui	zero,33556
  20bbf4:	0020c514 	movui	zero,33556
  20bbf8:	0020c514 	movui	zero,33556
  20bbfc:	0020c514 	movui	zero,33556
  20bc00:	0020c514 	movui	zero,33556
  20bc04:	0020c514 	movui	zero,33556
  20bc08:	0020c514 	movui	zero,33556
  20bc0c:	0020c2c4 	movi	zero,-31989
  20bc10:	0020c514 	movui	zero,33556
  20bc14:	0020c514 	movui	zero,33556
  20bc18:	0020c514 	movui	zero,33556
  20bc1c:	0020c514 	movui	zero,33556
  20bc20:	0020c514 	movui	zero,33556
  20bc24:	0020c320 	cmpeqi	zero,zero,-31988
  20bc28:	0020c514 	movui	zero,33556
  20bc2c:	0020c514 	movui	zero,33556
  20bc30:	0020c394 	movui	zero,33550
  20bc34:	0020c514 	movui	zero,33556
  20bc38:	0020c514 	movui	zero,33556
  20bc3c:	0020c514 	movui	zero,33556
  20bc40:	0020c514 	movui	zero,33556
  20bc44:	0020c514 	movui	zero,33556
  20bc48:	0020c514 	movui	zero,33556
  20bc4c:	0020c514 	movui	zero,33556
  20bc50:	0020c514 	movui	zero,33556
  20bc54:	0020c514 	movui	zero,33556
  20bc58:	0020c514 	movui	zero,33556
  20bc5c:	0020c13c 	xorhi	zero,zero,33540
  20bc60:	0020c16c 	andhi	zero,zero,33541
  20bc64:	0020c514 	movui	zero,33556
  20bc68:	0020c514 	movui	zero,33556
  20bc6c:	0020c514 	movui	zero,33556
  20bc70:	0020c4bc 	xorhi	zero,zero,33554
  20bc74:	0020c16c 	andhi	zero,zero,33541
  20bc78:	0020c514 	movui	zero,33556
  20bc7c:	0020c514 	movui	zero,33556
  20bc80:	0020c014 	movui	zero,33536
  20bc84:	0020c514 	movui	zero,33556
  20bc88:	0020c028 	cmpgeui	zero,zero,33536
  20bc8c:	0020c060 	cmpeqi	zero,zero,-31999
  20bc90:	0020bd60 	cmpeqi	zero,zero,-32011
  20bc94:	0020c008 	cmpgei	zero,zero,-32000
  20bc98:	0020c514 	movui	zero,33556
  20bc9c:	0020c3d4 	movui	zero,33551
  20bca0:	0020c514 	movui	zero,33556
  20bca4:	0020c420 	cmpeqi	zero,zero,-31984
  20bca8:	0020c514 	movui	zero,33556
  20bcac:	0020c514 	movui	zero,33556
  20bcb0:	0020c0e4 	muli	zero,zero,-31997
  20bcb4:	42000204 	addi	r8,r8,8
  20bcb8:	d8c02417 	ldw	r3,144(sp)
  20bcbc:	1c07883a 	add	r3,r3,r16
  20bcc0:	d8c02415 	stw	r3,144(sp)
  20bcc4:	003f8c06 	br	20baf8 <_gp+0xffdf9ee4>
  20bcc8:	d9402017 	ldw	r5,128(sp)
  20bccc:	d9002117 	ldw	r4,132(sp)
  20bcd0:	020640c0 	call	20640c <__swsetup_r>
  20bcd4:	1003c11e 	bne	r2,zero,20cbdc <___vfiprintf_internal_r+0x1224>
  20bcd8:	d9402017 	ldw	r5,128(sp)
  20bcdc:	00c00284 	movi	r3,10
  20bce0:	2880030b 	ldhu	r2,12(r5)
  20bce4:	1080068c 	andi	r2,r2,26
  20bce8:	10ff581e 	bne	r2,r3,20ba4c <_gp+0xffdf9e38>
  20bcec:	d8c02017 	ldw	r3,128(sp)
  20bcf0:	1880038f 	ldh	r2,14(r3)
  20bcf4:	103f5516 	blt	r2,zero,20ba4c <_gp+0xffdf9e38>
  20bcf8:	d9c02217 	ldw	r7,136(sp)
  20bcfc:	d9002117 	ldw	r4,132(sp)
  20bd00:	a80d883a 	mov	r6,r21
  20bd04:	180b883a 	mov	r5,r3
  20bd08:	020cee00 	call	20cee0 <__sbprintf>
  20bd0c:	dfc03517 	ldw	ra,212(sp)
  20bd10:	df003417 	ldw	fp,208(sp)
  20bd14:	ddc03317 	ldw	r23,204(sp)
  20bd18:	dd803217 	ldw	r22,200(sp)
  20bd1c:	dd403117 	ldw	r21,196(sp)
  20bd20:	dd003017 	ldw	r20,192(sp)
  20bd24:	dcc02f17 	ldw	r19,188(sp)
  20bd28:	dc802e17 	ldw	r18,184(sp)
  20bd2c:	dc402d17 	ldw	r17,180(sp)
  20bd30:	dc002c17 	ldw	r16,176(sp)
  20bd34:	dec03604 	addi	sp,sp,216
  20bd38:	f800283a 	ret
  20bd3c:	02084180 	call	208418 <__sinit>
  20bd40:	003f2f06 	br	20ba00 <_gp+0xffdf9dec>
  20bd44:	d8c02517 	ldw	r3,148(sp)
  20bd48:	d8802215 	stw	r2,136(sp)
  20bd4c:	00c7c83a 	sub	r3,zero,r3
  20bd50:	d8c02515 	stw	r3,148(sp)
  20bd54:	8c400114 	ori	r17,r17,4
  20bd58:	b0c00007 	ldb	r3,0(r22)
  20bd5c:	003f7306 	br	20bb2c <_gp+0xffdf9f18>
  20bd60:	00800c04 	movi	r2,48
  20bd64:	d9402217 	ldw	r5,136(sp)
  20bd68:	d8801d05 	stb	r2,116(sp)
  20bd6c:	00801e04 	movi	r2,120
  20bd70:	d8801d45 	stb	r2,117(sp)
  20bd74:	d8001d85 	stb	zero,118(sp)
  20bd78:	b811883a 	mov	r8,r23
  20bd7c:	28c00104 	addi	r3,r5,4
  20bd80:	2cc00017 	ldw	r19,0(r5)
  20bd84:	0029883a 	mov	r20,zero
  20bd88:	88800094 	ori	r2,r17,2
  20bd8c:	80032516 	blt	r16,zero,20ca24 <___vfiprintf_internal_r+0x106c>
  20bd90:	00bfdfc4 	movi	r2,-129
  20bd94:	88a2703a 	and	r17,r17,r2
  20bd98:	d8c02215 	stw	r3,136(sp)
  20bd9c:	8c400094 	ori	r17,r17,2
  20bda0:	98032a1e 	bne	r19,zero,20ca4c <___vfiprintf_internal_r+0x1094>
  20bda4:	00800874 	movhi	r2,33
  20bda8:	109b0e04 	addi	r2,r2,27704
  20bdac:	d8802615 	stw	r2,152(sp)
  20bdb0:	002b883a 	mov	r21,zero
  20bdb4:	8001741e 	bne	r16,zero,20c388 <___vfiprintf_internal_r+0x9d0>
  20bdb8:	0021883a 	mov	r16,zero
  20bdbc:	0029883a 	mov	r20,zero
  20bdc0:	ddc01a04 	addi	r23,sp,104
  20bdc4:	8027883a 	mov	r19,r16
  20bdc8:	8500010e 	bge	r16,r20,20bdd0 <___vfiprintf_internal_r+0x418>
  20bdcc:	a027883a 	mov	r19,r20
  20bdd0:	ad403fcc 	andi	r21,r21,255
  20bdd4:	ad40201c 	xori	r21,r21,128
  20bdd8:	ad7fe004 	addi	r21,r21,-128
  20bddc:	a8000126 	beq	r21,zero,20bde4 <___vfiprintf_internal_r+0x42c>
  20bde0:	9cc00044 	addi	r19,r19,1
  20bde4:	89c0008c 	andi	r7,r17,2
  20bde8:	38000126 	beq	r7,zero,20bdf0 <___vfiprintf_internal_r+0x438>
  20bdec:	9cc00084 	addi	r19,r19,2
  20bdf0:	88c0210c 	andi	r3,r17,132
  20bdf4:	1801dd1e 	bne	r3,zero,20c56c <___vfiprintf_internal_r+0xbb4>
  20bdf8:	d9402517 	ldw	r5,148(sp)
  20bdfc:	2cebc83a 	sub	r21,r5,r19
  20be00:	0541da0e 	bge	zero,r21,20c56c <___vfiprintf_internal_r+0xbb4>
  20be04:	07000404 	movi	fp,16
  20be08:	d8801c17 	ldw	r2,112(sp)
  20be0c:	e543be0e 	bge	fp,r21,20cd08 <___vfiprintf_internal_r+0x1350>
  20be10:	01400874 	movhi	r5,33
  20be14:	295b7304 	addi	r5,r5,28108
  20be18:	dc002715 	stw	r16,156(sp)
  20be1c:	d9801b17 	ldw	r6,108(sp)
  20be20:	a821883a 	mov	r16,r21
  20be24:	d9402315 	stw	r5,140(sp)
  20be28:	028001c4 	movi	r10,7
  20be2c:	d9c02915 	stw	r7,164(sp)
  20be30:	182b883a 	mov	r21,r3
  20be34:	00000506 	br	20be4c <___vfiprintf_internal_r+0x494>
  20be38:	31000084 	addi	r4,r6,2
  20be3c:	42000204 	addi	r8,r8,8
  20be40:	180d883a 	mov	r6,r3
  20be44:	843ffc04 	addi	r16,r16,-16
  20be48:	e4000f0e 	bge	fp,r16,20be88 <___vfiprintf_internal_r+0x4d0>
  20be4c:	01000874 	movhi	r4,33
  20be50:	10800404 	addi	r2,r2,16
  20be54:	30c00044 	addi	r3,r6,1
  20be58:	211b7304 	addi	r4,r4,28108
  20be5c:	41000015 	stw	r4,0(r8)
  20be60:	47000115 	stw	fp,4(r8)
  20be64:	d8801c15 	stw	r2,112(sp)
  20be68:	d8c01b15 	stw	r3,108(sp)
  20be6c:	50fff20e 	bge	r10,r3,20be38 <_gp+0xffdfa224>
  20be70:	1001b21e 	bne	r2,zero,20c53c <___vfiprintf_internal_r+0xb84>
  20be74:	843ffc04 	addi	r16,r16,-16
  20be78:	000d883a 	mov	r6,zero
  20be7c:	01000044 	movi	r4,1
  20be80:	d811883a 	mov	r8,sp
  20be84:	e43ff116 	blt	fp,r16,20be4c <_gp+0xffdfa238>
  20be88:	a807883a 	mov	r3,r21
  20be8c:	d9c02917 	ldw	r7,164(sp)
  20be90:	802b883a 	mov	r21,r16
  20be94:	dc002717 	ldw	r16,156(sp)
  20be98:	d9402317 	ldw	r5,140(sp)
  20be9c:	a885883a 	add	r2,r21,r2
  20bea0:	45400115 	stw	r21,4(r8)
  20bea4:	41400015 	stw	r5,0(r8)
  20bea8:	d8801c15 	stw	r2,112(sp)
  20beac:	d9001b15 	stw	r4,108(sp)
  20beb0:	014001c4 	movi	r5,7
  20beb4:	29026216 	blt	r5,r4,20c840 <___vfiprintf_internal_r+0xe88>
  20beb8:	d9801d87 	ldb	r6,118(sp)
  20bebc:	42000204 	addi	r8,r8,8
  20bec0:	21400044 	addi	r5,r4,1
  20bec4:	3001ae1e 	bne	r6,zero,20c580 <___vfiprintf_internal_r+0xbc8>
  20bec8:	3801bb26 	beq	r7,zero,20c5b8 <___vfiprintf_internal_r+0xc00>
  20becc:	d9001d04 	addi	r4,sp,116
  20bed0:	10800084 	addi	r2,r2,2
  20bed4:	41000015 	stw	r4,0(r8)
  20bed8:	01000084 	movi	r4,2
  20bedc:	41000115 	stw	r4,4(r8)
  20bee0:	d8801c15 	stw	r2,112(sp)
  20bee4:	d9401b15 	stw	r5,108(sp)
  20bee8:	010001c4 	movi	r4,7
  20beec:	2142680e 	bge	r4,r5,20c890 <___vfiprintf_internal_r+0xed8>
  20bef0:	1002b11e 	bne	r2,zero,20c9b8 <___vfiprintf_internal_r+0x1000>
  20bef4:	01802004 	movi	r6,128
  20bef8:	01400044 	movi	r5,1
  20befc:	0009883a 	mov	r4,zero
  20bf00:	d811883a 	mov	r8,sp
  20bf04:	1981ae1e 	bne	r3,r6,20c5c0 <___vfiprintf_internal_r+0xc08>
  20bf08:	d8c02517 	ldw	r3,148(sp)
  20bf0c:	1cf9c83a 	sub	fp,r3,r19
  20bf10:	0701ab0e 	bge	zero,fp,20c5c0 <___vfiprintf_internal_r+0xc08>
  20bf14:	05400404 	movi	r21,16
  20bf18:	af03a90e 	bge	r21,fp,20cdc0 <___vfiprintf_internal_r+0x1408>
  20bf1c:	01400874 	movhi	r5,33
  20bf20:	295b6f04 	addi	r5,r5,28092
  20bf24:	d9402315 	stw	r5,140(sp)
  20bf28:	01c001c4 	movi	r7,7
  20bf2c:	00000506 	br	20bf44 <___vfiprintf_internal_r+0x58c>
  20bf30:	21800084 	addi	r6,r4,2
  20bf34:	42000204 	addi	r8,r8,8
  20bf38:	1809883a 	mov	r4,r3
  20bf3c:	e73ffc04 	addi	fp,fp,-16
  20bf40:	af000d0e 	bge	r21,fp,20bf78 <___vfiprintf_internal_r+0x5c0>
  20bf44:	10800404 	addi	r2,r2,16
  20bf48:	20c00044 	addi	r3,r4,1
  20bf4c:	44800015 	stw	r18,0(r8)
  20bf50:	45400115 	stw	r21,4(r8)
  20bf54:	d8801c15 	stw	r2,112(sp)
  20bf58:	d8c01b15 	stw	r3,108(sp)
  20bf5c:	38fff40e 	bge	r7,r3,20bf30 <_gp+0xffdfa31c>
  20bf60:	10022b1e 	bne	r2,zero,20c810 <___vfiprintf_internal_r+0xe58>
  20bf64:	e73ffc04 	addi	fp,fp,-16
  20bf68:	01800044 	movi	r6,1
  20bf6c:	0009883a 	mov	r4,zero
  20bf70:	d811883a 	mov	r8,sp
  20bf74:	af3ff316 	blt	r21,fp,20bf44 <_gp+0xffdfa330>
  20bf78:	d8c02317 	ldw	r3,140(sp)
  20bf7c:	1705883a 	add	r2,r2,fp
  20bf80:	47000115 	stw	fp,4(r8)
  20bf84:	40c00015 	stw	r3,0(r8)
  20bf88:	d8801c15 	stw	r2,112(sp)
  20bf8c:	d9801b15 	stw	r6,108(sp)
  20bf90:	00c001c4 	movi	r3,7
  20bf94:	19829416 	blt	r3,r6,20c9e8 <___vfiprintf_internal_r+0x1030>
  20bf98:	8521c83a 	sub	r16,r16,r20
  20bf9c:	42000204 	addi	r8,r8,8
  20bfa0:	31400044 	addi	r5,r6,1
  20bfa4:	3009883a 	mov	r4,r6
  20bfa8:	04018716 	blt	zero,r16,20c5c8 <___vfiprintf_internal_r+0xc10>
  20bfac:	a085883a 	add	r2,r20,r2
  20bfb0:	45c00015 	stw	r23,0(r8)
  20bfb4:	45000115 	stw	r20,4(r8)
  20bfb8:	d8801c15 	stw	r2,112(sp)
  20bfbc:	d9401b15 	stw	r5,108(sp)
  20bfc0:	00c001c4 	movi	r3,7
  20bfc4:	1941c20e 	bge	r3,r5,20c6d0 <___vfiprintf_internal_r+0xd18>
  20bfc8:	1002531e 	bne	r2,zero,20c918 <___vfiprintf_internal_r+0xf60>
  20bfcc:	d8001b15 	stw	zero,108(sp)
  20bfd0:	8c40010c 	andi	r17,r17,4
  20bfd4:	88023226 	beq	r17,zero,20c8a0 <___vfiprintf_internal_r+0xee8>
  20bfd8:	d9002517 	ldw	r4,148(sp)
  20bfdc:	24e3c83a 	sub	r17,r4,r19
  20bfe0:	04432916 	blt	zero,r17,20cc88 <___vfiprintf_internal_r+0x12d0>
  20bfe4:	d8802517 	ldw	r2,148(sp)
  20bfe8:	14c0010e 	bge	r2,r19,20bff0 <___vfiprintf_internal_r+0x638>
  20bfec:	9805883a 	mov	r2,r19
  20bff0:	d8c02417 	ldw	r3,144(sp)
  20bff4:	1887883a 	add	r3,r3,r2
  20bff8:	d8c02415 	stw	r3,144(sp)
  20bffc:	d8001b15 	stw	zero,108(sp)
  20c000:	d811883a 	mov	r8,sp
  20c004:	003ea006 	br	20ba88 <_gp+0xffdf9e74>
  20c008:	8c400814 	ori	r17,r17,32
  20c00c:	b0c00007 	ldb	r3,0(r22)
  20c010:	003ec606 	br	20bb2c <_gp+0xffdf9f18>
  20c014:	b0c00007 	ldb	r3,0(r22)
  20c018:	00801b04 	movi	r2,108
  20c01c:	18832026 	beq	r3,r2,20cca0 <___vfiprintf_internal_r+0x12e8>
  20c020:	8c400414 	ori	r17,r17,16
  20c024:	003ec106 	br	20bb2c <_gp+0xffdf9f18>
  20c028:	9cc03fcc 	andi	r19,r19,255
  20c02c:	b811883a 	mov	r8,r23
  20c030:	9803981e 	bne	r19,zero,20ce94 <___vfiprintf_internal_r+0x14dc>
  20c034:	8880080c 	andi	r2,r17,32
  20c038:	1002be26 	beq	r2,zero,20cb34 <___vfiprintf_internal_r+0x117c>
  20c03c:	d9002217 	ldw	r4,136(sp)
  20c040:	d9402417 	ldw	r5,144(sp)
  20c044:	20800017 	ldw	r2,0(r4)
  20c048:	2807d7fa 	srai	r3,r5,31
  20c04c:	21000104 	addi	r4,r4,4
  20c050:	d9002215 	stw	r4,136(sp)
  20c054:	11400015 	stw	r5,0(r2)
  20c058:	10c00115 	stw	r3,4(r2)
  20c05c:	003e8a06 	br	20ba88 <_gp+0xffdf9e74>
  20c060:	9cc03fcc 	andi	r19,r19,255
  20c064:	b811883a 	mov	r8,r23
  20c068:	9803871e 	bne	r19,zero,20ce88 <___vfiprintf_internal_r+0x14d0>
  20c06c:	8880080c 	andi	r2,r17,32
  20c070:	10009a26 	beq	r2,zero,20c2dc <___vfiprintf_internal_r+0x924>
  20c074:	d9002217 	ldw	r4,136(sp)
  20c078:	d8001d85 	stb	zero,118(sp)
  20c07c:	20800204 	addi	r2,r4,8
  20c080:	24c00017 	ldw	r19,0(r4)
  20c084:	25000117 	ldw	r20,4(r4)
  20c088:	8002a416 	blt	r16,zero,20cb1c <___vfiprintf_internal_r+0x1164>
  20c08c:	013fdfc4 	movi	r4,-129
  20c090:	9d06b03a 	or	r3,r19,r20
  20c094:	d8802215 	stw	r2,136(sp)
  20c098:	8922703a 	and	r17,r17,r4
  20c09c:	18009b26 	beq	r3,zero,20c30c <___vfiprintf_internal_r+0x954>
  20c0a0:	002b883a 	mov	r21,zero
  20c0a4:	ddc01a04 	addi	r23,sp,104
  20c0a8:	9806d0fa 	srli	r3,r19,3
  20c0ac:	a008977a 	slli	r4,r20,29
  20c0b0:	a028d0fa 	srli	r20,r20,3
  20c0b4:	9cc001cc 	andi	r19,r19,7
  20c0b8:	98800c04 	addi	r2,r19,48
  20c0bc:	bdffffc4 	addi	r23,r23,-1
  20c0c0:	20e6b03a 	or	r19,r4,r3
  20c0c4:	b8800005 	stb	r2,0(r23)
  20c0c8:	9d06b03a 	or	r3,r19,r20
  20c0cc:	183ff61e 	bne	r3,zero,20c0a8 <_gp+0xffdfa494>
  20c0d0:	88c0004c 	andi	r3,r17,1
  20c0d4:	18021f1e 	bne	r3,zero,20c954 <___vfiprintf_internal_r+0xf9c>
  20c0d8:	d9401e17 	ldw	r5,120(sp)
  20c0dc:	2de9c83a 	sub	r20,r5,r23
  20c0e0:	003f3806 	br	20bdc4 <_gp+0xffdfa1b0>
  20c0e4:	9cc03fcc 	andi	r19,r19,255
  20c0e8:	b811883a 	mov	r8,r23
  20c0ec:	98034f1e 	bne	r19,zero,20ce2c <___vfiprintf_internal_r+0x1474>
  20c0f0:	00800874 	movhi	r2,33
  20c0f4:	109b0e04 	addi	r2,r2,27704
  20c0f8:	d8802615 	stw	r2,152(sp)
  20c0fc:	8880080c 	andi	r2,r17,32
  20c100:	1000ac26 	beq	r2,zero,20c3b4 <___vfiprintf_internal_r+0x9fc>
  20c104:	d9002217 	ldw	r4,136(sp)
  20c108:	24c00017 	ldw	r19,0(r4)
  20c10c:	25000117 	ldw	r20,4(r4)
  20c110:	21000204 	addi	r4,r4,8
  20c114:	d9002215 	stw	r4,136(sp)
  20c118:	8880004c 	andi	r2,r17,1
  20c11c:	1001e726 	beq	r2,zero,20c8bc <___vfiprintf_internal_r+0xf04>
  20c120:	9d04b03a 	or	r2,r19,r20
  20c124:	10025c1e 	bne	r2,zero,20ca98 <___vfiprintf_internal_r+0x10e0>
  20c128:	d8001d85 	stb	zero,118(sp)
  20c12c:	80024416 	blt	r16,zero,20ca40 <___vfiprintf_internal_r+0x1088>
  20c130:	00bfdfc4 	movi	r2,-129
  20c134:	88a2703a 	and	r17,r17,r2
  20c138:	003f1d06 	br	20bdb0 <_gp+0xffdfa19c>
  20c13c:	d8c02217 	ldw	r3,136(sp)
  20c140:	04c00044 	movi	r19,1
  20c144:	b811883a 	mov	r8,r23
  20c148:	18800017 	ldw	r2,0(r3)
  20c14c:	18c00104 	addi	r3,r3,4
  20c150:	d8001d85 	stb	zero,118(sp)
  20c154:	d8801005 	stb	r2,64(sp)
  20c158:	d8c02215 	stw	r3,136(sp)
  20c15c:	9829883a 	mov	r20,r19
  20c160:	ddc01004 	addi	r23,sp,64
  20c164:	0021883a 	mov	r16,zero
  20c168:	003f1e06 	br	20bde4 <_gp+0xffdfa1d0>
  20c16c:	9cc03fcc 	andi	r19,r19,255
  20c170:	b811883a 	mov	r8,r23
  20c174:	9803331e 	bne	r19,zero,20ce44 <___vfiprintf_internal_r+0x148c>
  20c178:	8880080c 	andi	r2,r17,32
  20c17c:	10004826 	beq	r2,zero,20c2a0 <___vfiprintf_internal_r+0x8e8>
  20c180:	d9002217 	ldw	r4,136(sp)
  20c184:	20800117 	ldw	r2,4(r4)
  20c188:	24c00017 	ldw	r19,0(r4)
  20c18c:	21000204 	addi	r4,r4,8
  20c190:	d9002215 	stw	r4,136(sp)
  20c194:	1029883a 	mov	r20,r2
  20c198:	10024c16 	blt	r2,zero,20cacc <___vfiprintf_internal_r+0x1114>
  20c19c:	dd401d83 	ldbu	r21,118(sp)
  20c1a0:	80007116 	blt	r16,zero,20c368 <___vfiprintf_internal_r+0x9b0>
  20c1a4:	00ffdfc4 	movi	r3,-129
  20c1a8:	9d04b03a 	or	r2,r19,r20
  20c1ac:	88e2703a 	and	r17,r17,r3
  20c1b0:	1000d126 	beq	r2,zero,20c4f8 <___vfiprintf_internal_r+0xb40>
  20c1b4:	a0023526 	beq	r20,zero,20ca8c <___vfiprintf_internal_r+0x10d4>
  20c1b8:	ddc01a04 	addi	r23,sp,104
  20c1bc:	4039883a 	mov	fp,r8
  20c1c0:	9809883a 	mov	r4,r19
  20c1c4:	a00b883a 	mov	r5,r20
  20c1c8:	01800284 	movi	r6,10
  20c1cc:	000f883a 	mov	r7,zero
  20c1d0:	020dee40 	call	20dee4 <__umoddi3>
  20c1d4:	10800c04 	addi	r2,r2,48
  20c1d8:	bdffffc4 	addi	r23,r23,-1
  20c1dc:	9809883a 	mov	r4,r19
  20c1e0:	a00b883a 	mov	r5,r20
  20c1e4:	b8800005 	stb	r2,0(r23)
  20c1e8:	01800284 	movi	r6,10
  20c1ec:	000f883a 	mov	r7,zero
  20c1f0:	020d8e80 	call	20d8e8 <__udivdi3>
  20c1f4:	1027883a 	mov	r19,r2
  20c1f8:	10c4b03a 	or	r2,r2,r3
  20c1fc:	1829883a 	mov	r20,r3
  20c200:	103fef1e 	bne	r2,zero,20c1c0 <_gp+0xffdfa5ac>
  20c204:	d9001e17 	ldw	r4,120(sp)
  20c208:	e011883a 	mov	r8,fp
  20c20c:	25e9c83a 	sub	r20,r4,r23
  20c210:	003eec06 	br	20bdc4 <_gp+0xffdfa1b0>
  20c214:	d8802307 	ldb	r2,140(sp)
  20c218:	1002361e 	bne	r2,zero,20caf4 <___vfiprintf_internal_r+0x113c>
  20c21c:	00c00804 	movi	r3,32
  20c220:	d8c02305 	stb	r3,140(sp)
  20c224:	04c00044 	movi	r19,1
  20c228:	b0c00007 	ldb	r3,0(r22)
  20c22c:	003e3f06 	br	20bb2c <_gp+0xffdf9f18>
  20c230:	8c400054 	ori	r17,r17,1
  20c234:	b0c00007 	ldb	r3,0(r22)
  20c238:	003e3c06 	br	20bb2c <_gp+0xffdf9f18>
  20c23c:	8c402014 	ori	r17,r17,128
  20c240:	b0c00007 	ldb	r3,0(r22)
  20c244:	003e3906 	br	20bb2c <_gp+0xffdf9f18>
  20c248:	dc002715 	stw	r16,156(sp)
  20c24c:	d8002515 	stw	zero,148(sp)
  20c250:	1f3ff404 	addi	fp,r3,-48
  20c254:	0009883a 	mov	r4,zero
  20c258:	b021883a 	mov	r16,r22
  20c25c:	01400284 	movi	r5,10
  20c260:	02032a40 	call	2032a4 <__mulsi3>
  20c264:	80c00007 	ldb	r3,0(r16)
  20c268:	e089883a 	add	r4,fp,r2
  20c26c:	b5800044 	addi	r22,r22,1
  20c270:	1f3ff404 	addi	fp,r3,-48
  20c274:	b021883a 	mov	r16,r22
  20c278:	af3ff82e 	bgeu	r21,fp,20c25c <_gp+0xffdfa648>
  20c27c:	d9002515 	stw	r4,148(sp)
  20c280:	dc002717 	ldw	r16,156(sp)
  20c284:	003e2a06 	br	20bb30 <_gp+0xffdf9f1c>
  20c288:	9cc03fcc 	andi	r19,r19,255
  20c28c:	b811883a 	mov	r8,r23
  20c290:	9802e91e 	bne	r19,zero,20ce38 <___vfiprintf_internal_r+0x1480>
  20c294:	8c400414 	ori	r17,r17,16
  20c298:	8880080c 	andi	r2,r17,32
  20c29c:	103fb81e 	bne	r2,zero,20c180 <_gp+0xffdfa56c>
  20c2a0:	8880040c 	andi	r2,r17,16
  20c2a4:	10022e26 	beq	r2,zero,20cb60 <___vfiprintf_internal_r+0x11a8>
  20c2a8:	d9402217 	ldw	r5,136(sp)
  20c2ac:	2cc00017 	ldw	r19,0(r5)
  20c2b0:	29400104 	addi	r5,r5,4
  20c2b4:	d9402215 	stw	r5,136(sp)
  20c2b8:	9829d7fa 	srai	r20,r19,31
  20c2bc:	a005883a 	mov	r2,r20
  20c2c0:	003fb506 	br	20c198 <_gp+0xffdfa584>
  20c2c4:	9cc03fcc 	andi	r19,r19,255
  20c2c8:	b811883a 	mov	r8,r23
  20c2cc:	9802fa1e 	bne	r19,zero,20ceb8 <___vfiprintf_internal_r+0x1500>
  20c2d0:	8c400414 	ori	r17,r17,16
  20c2d4:	8880080c 	andi	r2,r17,32
  20c2d8:	103f661e 	bne	r2,zero,20c074 <_gp+0xffdfa460>
  20c2dc:	8880040c 	andi	r2,r17,16
  20c2e0:	10020626 	beq	r2,zero,20cafc <___vfiprintf_internal_r+0x1144>
  20c2e4:	d9402217 	ldw	r5,136(sp)
  20c2e8:	d8001d85 	stb	zero,118(sp)
  20c2ec:	0029883a 	mov	r20,zero
  20c2f0:	28800104 	addi	r2,r5,4
  20c2f4:	2cc00017 	ldw	r19,0(r5)
  20c2f8:	80020816 	blt	r16,zero,20cb1c <___vfiprintf_internal_r+0x1164>
  20c2fc:	00ffdfc4 	movi	r3,-129
  20c300:	d8802215 	stw	r2,136(sp)
  20c304:	88e2703a 	and	r17,r17,r3
  20c308:	983f651e 	bne	r19,zero,20c0a0 <_gp+0xffdfa48c>
  20c30c:	002b883a 	mov	r21,zero
  20c310:	8002cf26 	beq	r16,zero,20ce50 <___vfiprintf_internal_r+0x1498>
  20c314:	0027883a 	mov	r19,zero
  20c318:	0029883a 	mov	r20,zero
  20c31c:	003f6106 	br	20c0a4 <_gp+0xffdfa490>
  20c320:	9cc03fcc 	andi	r19,r19,255
  20c324:	b811883a 	mov	r8,r23
  20c328:	9802e01e 	bne	r19,zero,20ceac <___vfiprintf_internal_r+0x14f4>
  20c32c:	8c400414 	ori	r17,r17,16
  20c330:	8880080c 	andi	r2,r17,32
  20c334:	1000641e 	bne	r2,zero,20c4c8 <___vfiprintf_internal_r+0xb10>
  20c338:	8880040c 	andi	r2,r17,16
  20c33c:	1001c81e 	bne	r2,zero,20ca60 <___vfiprintf_internal_r+0x10a8>
  20c340:	8880100c 	andi	r2,r17,64
  20c344:	d8001d85 	stb	zero,118(sp)
  20c348:	1002281e 	bne	r2,zero,20cbec <___vfiprintf_internal_r+0x1234>
  20c34c:	d9002217 	ldw	r4,136(sp)
  20c350:	0029883a 	mov	r20,zero
  20c354:	20800104 	addi	r2,r4,4
  20c358:	24c00017 	ldw	r19,0(r4)
  20c35c:	8001c60e 	bge	r16,zero,20ca78 <___vfiprintf_internal_r+0x10c0>
  20c360:	d8802215 	stw	r2,136(sp)
  20c364:	002b883a 	mov	r21,zero
  20c368:	9d04b03a 	or	r2,r19,r20
  20c36c:	103f911e 	bne	r2,zero,20c1b4 <_gp+0xffdfa5a0>
  20c370:	00800044 	movi	r2,1
  20c374:	10803fcc 	andi	r2,r2,255
  20c378:	00c00044 	movi	r3,1
  20c37c:	10c05f26 	beq	r2,r3,20c4fc <___vfiprintf_internal_r+0xb44>
  20c380:	00c00084 	movi	r3,2
  20c384:	10ffe31e 	bne	r2,r3,20c314 <_gp+0xffdfa700>
  20c388:	0027883a 	mov	r19,zero
  20c38c:	0029883a 	mov	r20,zero
  20c390:	00015106 	br	20c8d8 <___vfiprintf_internal_r+0xf20>
  20c394:	9cc03fcc 	andi	r19,r19,255
  20c398:	b811883a 	mov	r8,r23
  20c39c:	9802c01e 	bne	r19,zero,20cea0 <___vfiprintf_internal_r+0x14e8>
  20c3a0:	01400874 	movhi	r5,33
  20c3a4:	295b0904 	addi	r5,r5,27684
  20c3a8:	d9402615 	stw	r5,152(sp)
  20c3ac:	8880080c 	andi	r2,r17,32
  20c3b0:	103f541e 	bne	r2,zero,20c104 <_gp+0xffdfa4f0>
  20c3b4:	8880040c 	andi	r2,r17,16
  20c3b8:	1001f226 	beq	r2,zero,20cb84 <___vfiprintf_internal_r+0x11cc>
  20c3bc:	d9402217 	ldw	r5,136(sp)
  20c3c0:	0029883a 	mov	r20,zero
  20c3c4:	2cc00017 	ldw	r19,0(r5)
  20c3c8:	29400104 	addi	r5,r5,4
  20c3cc:	d9402215 	stw	r5,136(sp)
  20c3d0:	003f5106 	br	20c118 <_gp+0xffdfa504>
  20c3d4:	d8c02217 	ldw	r3,136(sp)
  20c3d8:	b811883a 	mov	r8,r23
  20c3dc:	d8001d85 	stb	zero,118(sp)
  20c3e0:	1dc00017 	ldw	r23,0(r3)
  20c3e4:	1f000104 	addi	fp,r3,4
  20c3e8:	b8025926 	beq	r23,zero,20cd50 <___vfiprintf_internal_r+0x1398>
  20c3ec:	80023316 	blt	r16,zero,20ccbc <___vfiprintf_internal_r+0x1304>
  20c3f0:	800d883a 	mov	r6,r16
  20c3f4:	000b883a 	mov	r5,zero
  20c3f8:	b809883a 	mov	r4,r23
  20c3fc:	da002a15 	stw	r8,168(sp)
  20c400:	02099900 	call	209990 <memchr>
  20c404:	da002a17 	ldw	r8,168(sp)
  20c408:	10026826 	beq	r2,zero,20cdac <___vfiprintf_internal_r+0x13f4>
  20c40c:	15e9c83a 	sub	r20,r2,r23
  20c410:	dd401d83 	ldbu	r21,118(sp)
  20c414:	df002215 	stw	fp,136(sp)
  20c418:	0021883a 	mov	r16,zero
  20c41c:	003e6906 	br	20bdc4 <_gp+0xffdfa1b0>
  20c420:	9cc03fcc 	andi	r19,r19,255
  20c424:	b811883a 	mov	r8,r23
  20c428:	983fc126 	beq	r19,zero,20c330 <_gp+0xffdfa71c>
  20c42c:	d8c02303 	ldbu	r3,140(sp)
  20c430:	d8c01d85 	stb	r3,118(sp)
  20c434:	003fbe06 	br	20c330 <_gp+0xffdfa71c>
  20c438:	d9002217 	ldw	r4,136(sp)
  20c43c:	d9402217 	ldw	r5,136(sp)
  20c440:	21000017 	ldw	r4,0(r4)
  20c444:	28800104 	addi	r2,r5,4
  20c448:	d9002515 	stw	r4,148(sp)
  20c44c:	203e3d16 	blt	r4,zero,20bd44 <_gp+0xffdfa130>
  20c450:	d8802215 	stw	r2,136(sp)
  20c454:	b0c00007 	ldb	r3,0(r22)
  20c458:	003db406 	br	20bb2c <_gp+0xffdf9f18>
  20c45c:	00c00ac4 	movi	r3,43
  20c460:	d8c02305 	stb	r3,140(sp)
  20c464:	04c00044 	movi	r19,1
  20c468:	b0c00007 	ldb	r3,0(r22)
  20c46c:	003daf06 	br	20bb2c <_gp+0xffdf9f18>
  20c470:	b0c00007 	ldb	r3,0(r22)
  20c474:	01000a84 	movi	r4,42
  20c478:	b4000044 	addi	r16,r22,1
  20c47c:	19025e26 	beq	r3,r4,20cdf8 <___vfiprintf_internal_r+0x1440>
  20c480:	1f3ff404 	addi	fp,r3,-48
  20c484:	0009883a 	mov	r4,zero
  20c488:	af025236 	bltu	r21,fp,20cdd4 <___vfiprintf_internal_r+0x141c>
  20c48c:	01400284 	movi	r5,10
  20c490:	02032a40 	call	2032a4 <__mulsi3>
  20c494:	80c00007 	ldb	r3,0(r16)
  20c498:	1709883a 	add	r4,r2,fp
  20c49c:	85800044 	addi	r22,r16,1
  20c4a0:	1f3ff404 	addi	fp,r3,-48
  20c4a4:	b021883a 	mov	r16,r22
  20c4a8:	af3ff82e 	bgeu	r21,fp,20c48c <_gp+0xffdfa878>
  20c4ac:	2021883a 	mov	r16,r4
  20c4b0:	203d9f0e 	bge	r4,zero,20bb30 <_gp+0xffdf9f1c>
  20c4b4:	043fffc4 	movi	r16,-1
  20c4b8:	003d9d06 	br	20bb30 <_gp+0xffdf9f1c>
  20c4bc:	8c401014 	ori	r17,r17,64
  20c4c0:	b0c00007 	ldb	r3,0(r22)
  20c4c4:	003d9906 	br	20bb2c <_gp+0xffdf9f18>
  20c4c8:	d9002217 	ldw	r4,136(sp)
  20c4cc:	d8001d85 	stb	zero,118(sp)
  20c4d0:	20c00204 	addi	r3,r4,8
  20c4d4:	24c00017 	ldw	r19,0(r4)
  20c4d8:	25000117 	ldw	r20,4(r4)
  20c4dc:	8001e716 	blt	r16,zero,20cc7c <___vfiprintf_internal_r+0x12c4>
  20c4e0:	013fdfc4 	movi	r4,-129
  20c4e4:	9d04b03a 	or	r2,r19,r20
  20c4e8:	d8c02215 	stw	r3,136(sp)
  20c4ec:	8922703a 	and	r17,r17,r4
  20c4f0:	002b883a 	mov	r21,zero
  20c4f4:	103f2f1e 	bne	r2,zero,20c1b4 <_gp+0xffdfa5a0>
  20c4f8:	803e2f26 	beq	r16,zero,20bdb8 <_gp+0xffdfa1a4>
  20c4fc:	0027883a 	mov	r19,zero
  20c500:	9cc00c04 	addi	r19,r19,48
  20c504:	dcc019c5 	stb	r19,103(sp)
  20c508:	dd002817 	ldw	r20,160(sp)
  20c50c:	ddc019c4 	addi	r23,sp,103
  20c510:	003e2c06 	br	20bdc4 <_gp+0xffdfa1b0>
  20c514:	9cc03fcc 	andi	r19,r19,255
  20c518:	b811883a 	mov	r8,r23
  20c51c:	9802571e 	bne	r19,zero,20ce7c <___vfiprintf_internal_r+0x14c4>
  20c520:	18005726 	beq	r3,zero,20c680 <___vfiprintf_internal_r+0xcc8>
  20c524:	04c00044 	movi	r19,1
  20c528:	d8c01005 	stb	r3,64(sp)
  20c52c:	d8001d85 	stb	zero,118(sp)
  20c530:	9829883a 	mov	r20,r19
  20c534:	ddc01004 	addi	r23,sp,64
  20c538:	003f0a06 	br	20c164 <_gp+0xffdfa550>
  20c53c:	d9402017 	ldw	r5,128(sp)
  20c540:	d9002117 	ldw	r4,132(sp)
  20c544:	d9801a04 	addi	r6,sp,104
  20c548:	da802a15 	stw	r10,168(sp)
  20c54c:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c550:	da802a17 	ldw	r10,168(sp)
  20c554:	1000501e 	bne	r2,zero,20c698 <___vfiprintf_internal_r+0xce0>
  20c558:	d9801b17 	ldw	r6,108(sp)
  20c55c:	d8801c17 	ldw	r2,112(sp)
  20c560:	d811883a 	mov	r8,sp
  20c564:	31000044 	addi	r4,r6,1
  20c568:	003e3606 	br	20be44 <_gp+0xffdfa230>
  20c56c:	d9001b17 	ldw	r4,108(sp)
  20c570:	d8801c17 	ldw	r2,112(sp)
  20c574:	21400044 	addi	r5,r4,1
  20c578:	d9801d87 	ldb	r6,118(sp)
  20c57c:	303e5226 	beq	r6,zero,20bec8 <_gp+0xffdfa2b4>
  20c580:	01800044 	movi	r6,1
  20c584:	d9001d84 	addi	r4,sp,118
  20c588:	1185883a 	add	r2,r2,r6
  20c58c:	41000015 	stw	r4,0(r8)
  20c590:	41800115 	stw	r6,4(r8)
  20c594:	d8801c15 	stw	r2,112(sp)
  20c598:	d9401b15 	stw	r5,108(sp)
  20c59c:	010001c4 	movi	r4,7
  20c5a0:	2140b00e 	bge	r4,r5,20c864 <___vfiprintf_internal_r+0xeac>
  20c5a4:	1000f61e 	bne	r2,zero,20c980 <___vfiprintf_internal_r+0xfc8>
  20c5a8:	3800b31e 	bne	r7,zero,20c878 <___vfiprintf_internal_r+0xec0>
  20c5ac:	0009883a 	mov	r4,zero
  20c5b0:	300b883a 	mov	r5,r6
  20c5b4:	d811883a 	mov	r8,sp
  20c5b8:	01802004 	movi	r6,128
  20c5bc:	19be5226 	beq	r3,r6,20bf08 <_gp+0xffdfa2f4>
  20c5c0:	8521c83a 	sub	r16,r16,r20
  20c5c4:	043e790e 	bge	zero,r16,20bfac <_gp+0xffdfa398>
  20c5c8:	05400404 	movi	r21,16
  20c5cc:	ac01b00e 	bge	r21,r16,20cc90 <___vfiprintf_internal_r+0x12d8>
  20c5d0:	01400874 	movhi	r5,33
  20c5d4:	295b6f04 	addi	r5,r5,28092
  20c5d8:	d9402315 	stw	r5,140(sp)
  20c5dc:	070001c4 	movi	fp,7
  20c5e0:	00000506 	br	20c5f8 <___vfiprintf_internal_r+0xc40>
  20c5e4:	21400084 	addi	r5,r4,2
  20c5e8:	42000204 	addi	r8,r8,8
  20c5ec:	1809883a 	mov	r4,r3
  20c5f0:	843ffc04 	addi	r16,r16,-16
  20c5f4:	ac000d0e 	bge	r21,r16,20c62c <___vfiprintf_internal_r+0xc74>
  20c5f8:	10800404 	addi	r2,r2,16
  20c5fc:	20c00044 	addi	r3,r4,1
  20c600:	44800015 	stw	r18,0(r8)
  20c604:	45400115 	stw	r21,4(r8)
  20c608:	d8801c15 	stw	r2,112(sp)
  20c60c:	d8c01b15 	stw	r3,108(sp)
  20c610:	e0fff40e 	bge	fp,r3,20c5e4 <_gp+0xffdfa9d0>
  20c614:	1000101e 	bne	r2,zero,20c658 <___vfiprintf_internal_r+0xca0>
  20c618:	843ffc04 	addi	r16,r16,-16
  20c61c:	01400044 	movi	r5,1
  20c620:	0009883a 	mov	r4,zero
  20c624:	d811883a 	mov	r8,sp
  20c628:	ac3ff316 	blt	r21,r16,20c5f8 <_gp+0xffdfa9e4>
  20c62c:	d8c02317 	ldw	r3,140(sp)
  20c630:	1405883a 	add	r2,r2,r16
  20c634:	44000115 	stw	r16,4(r8)
  20c638:	40c00015 	stw	r3,0(r8)
  20c63c:	d8801c15 	stw	r2,112(sp)
  20c640:	d9401b15 	stw	r5,108(sp)
  20c644:	00c001c4 	movi	r3,7
  20c648:	19401916 	blt	r3,r5,20c6b0 <___vfiprintf_internal_r+0xcf8>
  20c64c:	42000204 	addi	r8,r8,8
  20c650:	29400044 	addi	r5,r5,1
  20c654:	003e5506 	br	20bfac <_gp+0xffdfa398>
  20c658:	d9402017 	ldw	r5,128(sp)
  20c65c:	d9002117 	ldw	r4,132(sp)
  20c660:	d9801a04 	addi	r6,sp,104
  20c664:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c668:	10000b1e 	bne	r2,zero,20c698 <___vfiprintf_internal_r+0xce0>
  20c66c:	d9001b17 	ldw	r4,108(sp)
  20c670:	d8801c17 	ldw	r2,112(sp)
  20c674:	d811883a 	mov	r8,sp
  20c678:	21400044 	addi	r5,r4,1
  20c67c:	003fdc06 	br	20c5f0 <_gp+0xffdfa9dc>
  20c680:	d8801c17 	ldw	r2,112(sp)
  20c684:	10000426 	beq	r2,zero,20c698 <___vfiprintf_internal_r+0xce0>
  20c688:	d9402017 	ldw	r5,128(sp)
  20c68c:	d9002117 	ldw	r4,132(sp)
  20c690:	d9801a04 	addi	r6,sp,104
  20c694:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c698:	d9402017 	ldw	r5,128(sp)
  20c69c:	2880030b 	ldhu	r2,12(r5)
  20c6a0:	1080100c 	andi	r2,r2,64
  20c6a4:	10014d1e 	bne	r2,zero,20cbdc <___vfiprintf_internal_r+0x1224>
  20c6a8:	d8802417 	ldw	r2,144(sp)
  20c6ac:	003d9706 	br	20bd0c <_gp+0xffdfa0f8>
  20c6b0:	1000d21e 	bne	r2,zero,20c9fc <___vfiprintf_internal_r+0x1044>
  20c6b4:	00c00044 	movi	r3,1
  20c6b8:	a005883a 	mov	r2,r20
  20c6bc:	ddc00015 	stw	r23,0(sp)
  20c6c0:	dd000115 	stw	r20,4(sp)
  20c6c4:	dd001c15 	stw	r20,112(sp)
  20c6c8:	d8c01b15 	stw	r3,108(sp)
  20c6cc:	d811883a 	mov	r8,sp
  20c6d0:	42000204 	addi	r8,r8,8
  20c6d4:	8c40010c 	andi	r17,r17,4
  20c6d8:	88004026 	beq	r17,zero,20c7dc <___vfiprintf_internal_r+0xe24>
  20c6dc:	d9002517 	ldw	r4,148(sp)
  20c6e0:	24e3c83a 	sub	r17,r4,r19
  20c6e4:	04403d0e 	bge	zero,r17,20c7dc <___vfiprintf_internal_r+0xe24>
  20c6e8:	04000404 	movi	r16,16
  20c6ec:	8441a90e 	bge	r16,r17,20cd94 <___vfiprintf_internal_r+0x13dc>
  20c6f0:	00c00874 	movhi	r3,33
  20c6f4:	18db7304 	addi	r3,r3,28108
  20c6f8:	d9001b17 	ldw	r4,108(sp)
  20c6fc:	d8c02315 	stw	r3,140(sp)
  20c700:	050001c4 	movi	r20,7
  20c704:	dd402117 	ldw	r21,132(sp)
  20c708:	ddc02017 	ldw	r23,128(sp)
  20c70c:	00000506 	br	20c724 <___vfiprintf_internal_r+0xd6c>
  20c710:	21400084 	addi	r5,r4,2
  20c714:	42000204 	addi	r8,r8,8
  20c718:	1809883a 	mov	r4,r3
  20c71c:	8c7ffc04 	addi	r17,r17,-16
  20c720:	84400f0e 	bge	r16,r17,20c760 <___vfiprintf_internal_r+0xda8>
  20c724:	01400874 	movhi	r5,33
  20c728:	10800404 	addi	r2,r2,16
  20c72c:	20c00044 	addi	r3,r4,1
  20c730:	295b7304 	addi	r5,r5,28108
  20c734:	41400015 	stw	r5,0(r8)
  20c738:	44000115 	stw	r16,4(r8)
  20c73c:	d8801c15 	stw	r2,112(sp)
  20c740:	d8c01b15 	stw	r3,108(sp)
  20c744:	a0fff20e 	bge	r20,r3,20c710 <_gp+0xffdfaafc>
  20c748:	1000141e 	bne	r2,zero,20c79c <___vfiprintf_internal_r+0xde4>
  20c74c:	8c7ffc04 	addi	r17,r17,-16
  20c750:	01400044 	movi	r5,1
  20c754:	0009883a 	mov	r4,zero
  20c758:	d811883a 	mov	r8,sp
  20c75c:	847ff116 	blt	r16,r17,20c724 <_gp+0xffdfab10>
  20c760:	d8c02317 	ldw	r3,140(sp)
  20c764:	1445883a 	add	r2,r2,r17
  20c768:	44400115 	stw	r17,4(r8)
  20c76c:	40c00015 	stw	r3,0(r8)
  20c770:	d8801c15 	stw	r2,112(sp)
  20c774:	d9401b15 	stw	r5,108(sp)
  20c778:	00c001c4 	movi	r3,7
  20c77c:	1940170e 	bge	r3,r5,20c7dc <___vfiprintf_internal_r+0xe24>
  20c780:	1000101e 	bne	r2,zero,20c7c4 <___vfiprintf_internal_r+0xe0c>
  20c784:	d8802517 	ldw	r2,148(sp)
  20c788:	14c11616 	blt	r2,r19,20cbe4 <___vfiprintf_internal_r+0x122c>
  20c78c:	d9002417 	ldw	r4,144(sp)
  20c790:	2089883a 	add	r4,r4,r2
  20c794:	d9002415 	stw	r4,144(sp)
  20c798:	003e1806 	br	20bffc <_gp+0xffdfa3e8>
  20c79c:	d9801a04 	addi	r6,sp,104
  20c7a0:	b80b883a 	mov	r5,r23
  20c7a4:	a809883a 	mov	r4,r21
  20c7a8:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c7ac:	103fba1e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c7b0:	d9001b17 	ldw	r4,108(sp)
  20c7b4:	d8801c17 	ldw	r2,112(sp)
  20c7b8:	d811883a 	mov	r8,sp
  20c7bc:	21400044 	addi	r5,r4,1
  20c7c0:	003fd606 	br	20c71c <_gp+0xffdfab08>
  20c7c4:	d9402017 	ldw	r5,128(sp)
  20c7c8:	d9002117 	ldw	r4,132(sp)
  20c7cc:	d9801a04 	addi	r6,sp,104
  20c7d0:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c7d4:	103fb01e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c7d8:	d8801c17 	ldw	r2,112(sp)
  20c7dc:	d8c02517 	ldw	r3,148(sp)
  20c7e0:	1cc0010e 	bge	r3,r19,20c7e8 <___vfiprintf_internal_r+0xe30>
  20c7e4:	9807883a 	mov	r3,r19
  20c7e8:	d9002417 	ldw	r4,144(sp)
  20c7ec:	20c9883a 	add	r4,r4,r3
  20c7f0:	d9002415 	stw	r4,144(sp)
  20c7f4:	103e0126 	beq	r2,zero,20bffc <_gp+0xffdfa3e8>
  20c7f8:	d9402017 	ldw	r5,128(sp)
  20c7fc:	d9002117 	ldw	r4,132(sp)
  20c800:	d9801a04 	addi	r6,sp,104
  20c804:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c808:	103dfc26 	beq	r2,zero,20bffc <_gp+0xffdfa3e8>
  20c80c:	003fa206 	br	20c698 <_gp+0xffdfaa84>
  20c810:	d9402017 	ldw	r5,128(sp)
  20c814:	d9002117 	ldw	r4,132(sp)
  20c818:	d9801a04 	addi	r6,sp,104
  20c81c:	d9c02b15 	stw	r7,172(sp)
  20c820:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c824:	d9c02b17 	ldw	r7,172(sp)
  20c828:	103f9b1e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c82c:	d9001b17 	ldw	r4,108(sp)
  20c830:	d8801c17 	ldw	r2,112(sp)
  20c834:	d811883a 	mov	r8,sp
  20c838:	21800044 	addi	r6,r4,1
  20c83c:	003dbf06 	br	20bf3c <_gp+0xffdfa328>
  20c840:	1000d81e 	bne	r2,zero,20cba4 <___vfiprintf_internal_r+0x11ec>
  20c844:	d9001d87 	ldb	r4,118(sp)
  20c848:	20000a26 	beq	r4,zero,20c874 <___vfiprintf_internal_r+0xebc>
  20c84c:	00800044 	movi	r2,1
  20c850:	d9001d84 	addi	r4,sp,118
  20c854:	100b883a 	mov	r5,r2
  20c858:	d9000015 	stw	r4,0(sp)
  20c85c:	d8800115 	stw	r2,4(sp)
  20c860:	d811883a 	mov	r8,sp
  20c864:	2809883a 	mov	r4,r5
  20c868:	42000204 	addi	r8,r8,8
  20c86c:	29400044 	addi	r5,r5,1
  20c870:	003d9506 	br	20bec8 <_gp+0xffdfa2b4>
  20c874:	3800fd26 	beq	r7,zero,20cc6c <___vfiprintf_internal_r+0x12b4>
  20c878:	00800084 	movi	r2,2
  20c87c:	d9001d04 	addi	r4,sp,116
  20c880:	d9000015 	stw	r4,0(sp)
  20c884:	d8800115 	stw	r2,4(sp)
  20c888:	01400044 	movi	r5,1
  20c88c:	d811883a 	mov	r8,sp
  20c890:	2809883a 	mov	r4,r5
  20c894:	42000204 	addi	r8,r8,8
  20c898:	29400044 	addi	r5,r5,1
  20c89c:	003f4606 	br	20c5b8 <_gp+0xffdfa9a4>
  20c8a0:	d8802517 	ldw	r2,148(sp)
  20c8a4:	14c0010e 	bge	r2,r19,20c8ac <___vfiprintf_internal_r+0xef4>
  20c8a8:	9805883a 	mov	r2,r19
  20c8ac:	d9402417 	ldw	r5,144(sp)
  20c8b0:	288b883a 	add	r5,r5,r2
  20c8b4:	d9402415 	stw	r5,144(sp)
  20c8b8:	003dd006 	br	20bffc <_gp+0xffdfa3e8>
  20c8bc:	d8001d85 	stb	zero,118(sp)
  20c8c0:	80005d16 	blt	r16,zero,20ca38 <___vfiprintf_internal_r+0x1080>
  20c8c4:	00ffdfc4 	movi	r3,-129
  20c8c8:	9d04b03a 	or	r2,r19,r20
  20c8cc:	88e2703a 	and	r17,r17,r3
  20c8d0:	103d3726 	beq	r2,zero,20bdb0 <_gp+0xffdfa19c>
  20c8d4:	002b883a 	mov	r21,zero
  20c8d8:	d9002617 	ldw	r4,152(sp)
  20c8dc:	ddc01a04 	addi	r23,sp,104
  20c8e0:	988003cc 	andi	r2,r19,15
  20c8e4:	a006973a 	slli	r3,r20,28
  20c8e8:	2085883a 	add	r2,r4,r2
  20c8ec:	9826d13a 	srli	r19,r19,4
  20c8f0:	10800003 	ldbu	r2,0(r2)
  20c8f4:	a028d13a 	srli	r20,r20,4
  20c8f8:	bdffffc4 	addi	r23,r23,-1
  20c8fc:	1ce6b03a 	or	r19,r3,r19
  20c900:	b8800005 	stb	r2,0(r23)
  20c904:	9d04b03a 	or	r2,r19,r20
  20c908:	103ff51e 	bne	r2,zero,20c8e0 <_gp+0xffdfaccc>
  20c90c:	d8801e17 	ldw	r2,120(sp)
  20c910:	15e9c83a 	sub	r20,r2,r23
  20c914:	003d2b06 	br	20bdc4 <_gp+0xffdfa1b0>
  20c918:	d9402017 	ldw	r5,128(sp)
  20c91c:	d9002117 	ldw	r4,132(sp)
  20c920:	d9801a04 	addi	r6,sp,104
  20c924:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c928:	103f5b1e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c92c:	d8801c17 	ldw	r2,112(sp)
  20c930:	d811883a 	mov	r8,sp
  20c934:	003f6706 	br	20c6d4 <_gp+0xffdfaac0>
  20c938:	d9402017 	ldw	r5,128(sp)
  20c93c:	d9002117 	ldw	r4,132(sp)
  20c940:	d9801a04 	addi	r6,sp,104
  20c944:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c948:	103f531e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c94c:	d811883a 	mov	r8,sp
  20c950:	003cd906 	br	20bcb8 <_gp+0xffdfa0a4>
  20c954:	10803fcc 	andi	r2,r2,255
  20c958:	1080201c 	xori	r2,r2,128
  20c95c:	10bfe004 	addi	r2,r2,-128
  20c960:	00c00c04 	movi	r3,48
  20c964:	10ffe926 	beq	r2,r3,20c90c <_gp+0xffdfacf8>
  20c968:	b8ffffc5 	stb	r3,-1(r23)
  20c96c:	d8c01e17 	ldw	r3,120(sp)
  20c970:	b8bfffc4 	addi	r2,r23,-1
  20c974:	102f883a 	mov	r23,r2
  20c978:	18a9c83a 	sub	r20,r3,r2
  20c97c:	003d1106 	br	20bdc4 <_gp+0xffdfa1b0>
  20c980:	d9402017 	ldw	r5,128(sp)
  20c984:	d9002117 	ldw	r4,132(sp)
  20c988:	d9801a04 	addi	r6,sp,104
  20c98c:	d8c02a15 	stw	r3,168(sp)
  20c990:	d9c02b15 	stw	r7,172(sp)
  20c994:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c998:	d8c02a17 	ldw	r3,168(sp)
  20c99c:	d9c02b17 	ldw	r7,172(sp)
  20c9a0:	103f3d1e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c9a4:	d9001b17 	ldw	r4,108(sp)
  20c9a8:	d8801c17 	ldw	r2,112(sp)
  20c9ac:	d811883a 	mov	r8,sp
  20c9b0:	21400044 	addi	r5,r4,1
  20c9b4:	003d4406 	br	20bec8 <_gp+0xffdfa2b4>
  20c9b8:	d9402017 	ldw	r5,128(sp)
  20c9bc:	d9002117 	ldw	r4,132(sp)
  20c9c0:	d9801a04 	addi	r6,sp,104
  20c9c4:	d8c02a15 	stw	r3,168(sp)
  20c9c8:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20c9cc:	d8c02a17 	ldw	r3,168(sp)
  20c9d0:	103f311e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20c9d4:	d9001b17 	ldw	r4,108(sp)
  20c9d8:	d8801c17 	ldw	r2,112(sp)
  20c9dc:	d811883a 	mov	r8,sp
  20c9e0:	21400044 	addi	r5,r4,1
  20c9e4:	003ef406 	br	20c5b8 <_gp+0xffdfa9a4>
  20c9e8:	1000bd1e 	bne	r2,zero,20cce0 <___vfiprintf_internal_r+0x1328>
  20c9ec:	01400044 	movi	r5,1
  20c9f0:	0009883a 	mov	r4,zero
  20c9f4:	d811883a 	mov	r8,sp
  20c9f8:	003ef106 	br	20c5c0 <_gp+0xffdfa9ac>
  20c9fc:	d9402017 	ldw	r5,128(sp)
  20ca00:	d9002117 	ldw	r4,132(sp)
  20ca04:	d9801a04 	addi	r6,sp,104
  20ca08:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20ca0c:	103f221e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20ca10:	d9401b17 	ldw	r5,108(sp)
  20ca14:	d8801c17 	ldw	r2,112(sp)
  20ca18:	d811883a 	mov	r8,sp
  20ca1c:	29400044 	addi	r5,r5,1
  20ca20:	003d6206 	br	20bfac <_gp+0xffdfa398>
  20ca24:	01400874 	movhi	r5,33
  20ca28:	295b0e04 	addi	r5,r5,27704
  20ca2c:	d9402615 	stw	r5,152(sp)
  20ca30:	d8c02215 	stw	r3,136(sp)
  20ca34:	1023883a 	mov	r17,r2
  20ca38:	9d04b03a 	or	r2,r19,r20
  20ca3c:	103fa51e 	bne	r2,zero,20c8d4 <_gp+0xffdfacc0>
  20ca40:	002b883a 	mov	r21,zero
  20ca44:	00800084 	movi	r2,2
  20ca48:	003e4a06 	br	20c374 <_gp+0xffdfa760>
  20ca4c:	01400874 	movhi	r5,33
  20ca50:	295b0e04 	addi	r5,r5,27704
  20ca54:	002b883a 	mov	r21,zero
  20ca58:	d9402615 	stw	r5,152(sp)
  20ca5c:	003f9e06 	br	20c8d8 <_gp+0xffdfacc4>
  20ca60:	d9402217 	ldw	r5,136(sp)
  20ca64:	d8001d85 	stb	zero,118(sp)
  20ca68:	0029883a 	mov	r20,zero
  20ca6c:	28800104 	addi	r2,r5,4
  20ca70:	2cc00017 	ldw	r19,0(r5)
  20ca74:	803e3a16 	blt	r16,zero,20c360 <_gp+0xffdfa74c>
  20ca78:	00ffdfc4 	movi	r3,-129
  20ca7c:	d8802215 	stw	r2,136(sp)
  20ca80:	88e2703a 	and	r17,r17,r3
  20ca84:	002b883a 	mov	r21,zero
  20ca88:	983e9b26 	beq	r19,zero,20c4f8 <_gp+0xffdfa8e4>
  20ca8c:	00800244 	movi	r2,9
  20ca90:	14fdc936 	bltu	r2,r19,20c1b8 <_gp+0xffdfa5a4>
  20ca94:	003e9a06 	br	20c500 <_gp+0xffdfa8ec>
  20ca98:	00800c04 	movi	r2,48
  20ca9c:	d8c01d45 	stb	r3,117(sp)
  20caa0:	d8801d05 	stb	r2,116(sp)
  20caa4:	d8001d85 	stb	zero,118(sp)
  20caa8:	88c00094 	ori	r3,r17,2
  20caac:	80009c16 	blt	r16,zero,20cd20 <___vfiprintf_internal_r+0x1368>
  20cab0:	00bfdfc4 	movi	r2,-129
  20cab4:	88a2703a 	and	r17,r17,r2
  20cab8:	8c400094 	ori	r17,r17,2
  20cabc:	002b883a 	mov	r21,zero
  20cac0:	003f8506 	br	20c8d8 <_gp+0xffdfacc4>
  20cac4:	b029883a 	mov	r20,r22
  20cac8:	003c0b06 	br	20baf8 <_gp+0xffdf9ee4>
  20cacc:	04e7c83a 	sub	r19,zero,r19
  20cad0:	05400b44 	movi	r21,45
  20cad4:	9804c03a 	cmpne	r2,r19,zero
  20cad8:	0529c83a 	sub	r20,zero,r20
  20cadc:	dd401d85 	stb	r21,118(sp)
  20cae0:	a0a9c83a 	sub	r20,r20,r2
  20cae4:	80009716 	blt	r16,zero,20cd44 <___vfiprintf_internal_r+0x138c>
  20cae8:	00bfdfc4 	movi	r2,-129
  20caec:	88a2703a 	and	r17,r17,r2
  20caf0:	003db006 	br	20c1b4 <_gp+0xffdfa5a0>
  20caf4:	b0c00007 	ldb	r3,0(r22)
  20caf8:	003c0c06 	br	20bb2c <_gp+0xffdf9f18>
  20cafc:	8880100c 	andi	r2,r17,64
  20cb00:	d8001d85 	stb	zero,118(sp)
  20cb04:	1000461e 	bne	r2,zero,20cc20 <___vfiprintf_internal_r+0x1268>
  20cb08:	d9002217 	ldw	r4,136(sp)
  20cb0c:	0029883a 	mov	r20,zero
  20cb10:	20800104 	addi	r2,r4,4
  20cb14:	24c00017 	ldw	r19,0(r4)
  20cb18:	803df80e 	bge	r16,zero,20c2fc <_gp+0xffdfa6e8>
  20cb1c:	9d06b03a 	or	r3,r19,r20
  20cb20:	d8802215 	stw	r2,136(sp)
  20cb24:	183d5e1e 	bne	r3,zero,20c0a0 <_gp+0xffdfa48c>
  20cb28:	002b883a 	mov	r21,zero
  20cb2c:	0005883a 	mov	r2,zero
  20cb30:	003e1006 	br	20c374 <_gp+0xffdfa760>
  20cb34:	8880040c 	andi	r2,r17,16
  20cb38:	1000321e 	bne	r2,zero,20cc04 <___vfiprintf_internal_r+0x124c>
  20cb3c:	8c40100c 	andi	r17,r17,64
  20cb40:	88008d26 	beq	r17,zero,20cd78 <___vfiprintf_internal_r+0x13c0>
  20cb44:	d9402217 	ldw	r5,136(sp)
  20cb48:	d8c02417 	ldw	r3,144(sp)
  20cb4c:	28800017 	ldw	r2,0(r5)
  20cb50:	29400104 	addi	r5,r5,4
  20cb54:	d9402215 	stw	r5,136(sp)
  20cb58:	10c0000d 	sth	r3,0(r2)
  20cb5c:	003bca06 	br	20ba88 <_gp+0xffdf9e74>
  20cb60:	8880100c 	andi	r2,r17,64
  20cb64:	10003a26 	beq	r2,zero,20cc50 <___vfiprintf_internal_r+0x1298>
  20cb68:	d8802217 	ldw	r2,136(sp)
  20cb6c:	14c0000f 	ldh	r19,0(r2)
  20cb70:	10800104 	addi	r2,r2,4
  20cb74:	d8802215 	stw	r2,136(sp)
  20cb78:	9829d7fa 	srai	r20,r19,31
  20cb7c:	a005883a 	mov	r2,r20
  20cb80:	003d8506 	br	20c198 <_gp+0xffdfa584>
  20cb84:	8880100c 	andi	r2,r17,64
  20cb88:	10002b26 	beq	r2,zero,20cc38 <___vfiprintf_internal_r+0x1280>
  20cb8c:	d8802217 	ldw	r2,136(sp)
  20cb90:	0029883a 	mov	r20,zero
  20cb94:	14c0000b 	ldhu	r19,0(r2)
  20cb98:	10800104 	addi	r2,r2,4
  20cb9c:	d8802215 	stw	r2,136(sp)
  20cba0:	003d5d06 	br	20c118 <_gp+0xffdfa504>
  20cba4:	d9402017 	ldw	r5,128(sp)
  20cba8:	d9002117 	ldw	r4,132(sp)
  20cbac:	d9801a04 	addi	r6,sp,104
  20cbb0:	d8c02a15 	stw	r3,168(sp)
  20cbb4:	d9c02b15 	stw	r7,172(sp)
  20cbb8:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20cbbc:	d8c02a17 	ldw	r3,168(sp)
  20cbc0:	d9c02b17 	ldw	r7,172(sp)
  20cbc4:	103eb41e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20cbc8:	d9001b17 	ldw	r4,108(sp)
  20cbcc:	d8801c17 	ldw	r2,112(sp)
  20cbd0:	d811883a 	mov	r8,sp
  20cbd4:	21400044 	addi	r5,r4,1
  20cbd8:	003e6706 	br	20c578 <_gp+0xffdfa964>
  20cbdc:	00bfffc4 	movi	r2,-1
  20cbe0:	003c4a06 	br	20bd0c <_gp+0xffdfa0f8>
  20cbe4:	9805883a 	mov	r2,r19
  20cbe8:	003ee806 	br	20c78c <_gp+0xffdfab78>
  20cbec:	d8c02217 	ldw	r3,136(sp)
  20cbf0:	0029883a 	mov	r20,zero
  20cbf4:	18800104 	addi	r2,r3,4
  20cbf8:	1cc0000b 	ldhu	r19,0(r3)
  20cbfc:	803f9e0e 	bge	r16,zero,20ca78 <_gp+0xffdfae64>
  20cc00:	003dd706 	br	20c360 <_gp+0xffdfa74c>
  20cc04:	d8c02217 	ldw	r3,136(sp)
  20cc08:	d9002417 	ldw	r4,144(sp)
  20cc0c:	18800017 	ldw	r2,0(r3)
  20cc10:	18c00104 	addi	r3,r3,4
  20cc14:	d8c02215 	stw	r3,136(sp)
  20cc18:	11000015 	stw	r4,0(r2)
  20cc1c:	003b9a06 	br	20ba88 <_gp+0xffdf9e74>
  20cc20:	d8c02217 	ldw	r3,136(sp)
  20cc24:	0029883a 	mov	r20,zero
  20cc28:	18800104 	addi	r2,r3,4
  20cc2c:	1cc0000b 	ldhu	r19,0(r3)
  20cc30:	803db20e 	bge	r16,zero,20c2fc <_gp+0xffdfa6e8>
  20cc34:	003fb906 	br	20cb1c <_gp+0xffdfaf08>
  20cc38:	d9002217 	ldw	r4,136(sp)
  20cc3c:	0029883a 	mov	r20,zero
  20cc40:	24c00017 	ldw	r19,0(r4)
  20cc44:	21000104 	addi	r4,r4,4
  20cc48:	d9002215 	stw	r4,136(sp)
  20cc4c:	003d3206 	br	20c118 <_gp+0xffdfa504>
  20cc50:	d8c02217 	ldw	r3,136(sp)
  20cc54:	1cc00017 	ldw	r19,0(r3)
  20cc58:	18c00104 	addi	r3,r3,4
  20cc5c:	d8c02215 	stw	r3,136(sp)
  20cc60:	9829d7fa 	srai	r20,r19,31
  20cc64:	a005883a 	mov	r2,r20
  20cc68:	003d4b06 	br	20c198 <_gp+0xffdfa584>
  20cc6c:	0009883a 	mov	r4,zero
  20cc70:	01400044 	movi	r5,1
  20cc74:	d811883a 	mov	r8,sp
  20cc78:	003e4f06 	br	20c5b8 <_gp+0xffdfa9a4>
  20cc7c:	d8c02215 	stw	r3,136(sp)
  20cc80:	002b883a 	mov	r21,zero
  20cc84:	003db806 	br	20c368 <_gp+0xffdfa754>
  20cc88:	d811883a 	mov	r8,sp
  20cc8c:	003e9606 	br	20c6e8 <_gp+0xffdfaad4>
  20cc90:	01000874 	movhi	r4,33
  20cc94:	211b6f04 	addi	r4,r4,28092
  20cc98:	d9002315 	stw	r4,140(sp)
  20cc9c:	003e6306 	br	20c62c <_gp+0xffdfaa18>
  20cca0:	b0c00043 	ldbu	r3,1(r22)
  20cca4:	8c400814 	ori	r17,r17,32
  20cca8:	b5800044 	addi	r22,r22,1
  20ccac:	18c03fcc 	andi	r3,r3,255
  20ccb0:	18c0201c 	xori	r3,r3,128
  20ccb4:	18ffe004 	addi	r3,r3,-128
  20ccb8:	003b9c06 	br	20bb2c <_gp+0xffdf9f18>
  20ccbc:	b809883a 	mov	r4,r23
  20ccc0:	da002a15 	stw	r8,168(sp)
  20ccc4:	0203fc00 	call	203fc0 <strlen>
  20ccc8:	1029883a 	mov	r20,r2
  20cccc:	dd401d83 	ldbu	r21,118(sp)
  20ccd0:	df002215 	stw	fp,136(sp)
  20ccd4:	0021883a 	mov	r16,zero
  20ccd8:	da002a17 	ldw	r8,168(sp)
  20ccdc:	003c3906 	br	20bdc4 <_gp+0xffdfa1b0>
  20cce0:	d9402017 	ldw	r5,128(sp)
  20cce4:	d9002117 	ldw	r4,132(sp)
  20cce8:	d9801a04 	addi	r6,sp,104
  20ccec:	020b8a40 	call	20b8a4 <__sprint_r.part.0>
  20ccf0:	103e691e 	bne	r2,zero,20c698 <_gp+0xffdfaa84>
  20ccf4:	d9001b17 	ldw	r4,108(sp)
  20ccf8:	d8801c17 	ldw	r2,112(sp)
  20ccfc:	d811883a 	mov	r8,sp
  20cd00:	21400044 	addi	r5,r4,1
  20cd04:	003e2e06 	br	20c5c0 <_gp+0xffdfa9ac>
  20cd08:	01000874 	movhi	r4,33
  20cd0c:	211b7304 	addi	r4,r4,28108
  20cd10:	d9002315 	stw	r4,140(sp)
  20cd14:	d9001b17 	ldw	r4,108(sp)
  20cd18:	21000044 	addi	r4,r4,1
  20cd1c:	003c5e06 	br	20be98 <_gp+0xffdfa284>
  20cd20:	002b883a 	mov	r21,zero
  20cd24:	00800084 	movi	r2,2
  20cd28:	10803fcc 	andi	r2,r2,255
  20cd2c:	01000044 	movi	r4,1
  20cd30:	11002b26 	beq	r2,r4,20cde0 <___vfiprintf_internal_r+0x1428>
  20cd34:	01000084 	movi	r4,2
  20cd38:	11002b1e 	bne	r2,r4,20cde8 <___vfiprintf_internal_r+0x1430>
  20cd3c:	1823883a 	mov	r17,r3
  20cd40:	003ee506 	br	20c8d8 <_gp+0xffdfacc4>
  20cd44:	8807883a 	mov	r3,r17
  20cd48:	00800044 	movi	r2,1
  20cd4c:	003ff606 	br	20cd28 <_gp+0xffdfb114>
  20cd50:	00800184 	movi	r2,6
  20cd54:	1400012e 	bgeu	r2,r16,20cd5c <___vfiprintf_internal_r+0x13a4>
  20cd58:	1021883a 	mov	r16,r2
  20cd5c:	8029883a 	mov	r20,r16
  20cd60:	8027883a 	mov	r19,r16
  20cd64:	80002216 	blt	r16,zero,20cdf0 <___vfiprintf_internal_r+0x1438>
  20cd68:	05c00874 	movhi	r23,33
  20cd6c:	df002215 	stw	fp,136(sp)
  20cd70:	bddb1304 	addi	r23,r23,27724
  20cd74:	003cfb06 	br	20c164 <_gp+0xffdfa550>
  20cd78:	d9002217 	ldw	r4,136(sp)
  20cd7c:	d9402417 	ldw	r5,144(sp)
  20cd80:	20800017 	ldw	r2,0(r4)
  20cd84:	21000104 	addi	r4,r4,4
  20cd88:	d9002215 	stw	r4,136(sp)
  20cd8c:	11400015 	stw	r5,0(r2)
  20cd90:	003b3d06 	br	20ba88 <_gp+0xffdf9e74>
  20cd94:	01400874 	movhi	r5,33
  20cd98:	295b7304 	addi	r5,r5,28108
  20cd9c:	d9402315 	stw	r5,140(sp)
  20cda0:	d9401b17 	ldw	r5,108(sp)
  20cda4:	29400044 	addi	r5,r5,1
  20cda8:	003e6d06 	br	20c760 <_gp+0xffdfab4c>
  20cdac:	8029883a 	mov	r20,r16
  20cdb0:	dd401d83 	ldbu	r21,118(sp)
  20cdb4:	df002215 	stw	fp,136(sp)
  20cdb8:	0021883a 	mov	r16,zero
  20cdbc:	003c0106 	br	20bdc4 <_gp+0xffdfa1b0>
  20cdc0:	00c00874 	movhi	r3,33
  20cdc4:	18db6f04 	addi	r3,r3,28092
  20cdc8:	d8c02315 	stw	r3,140(sp)
  20cdcc:	280d883a 	mov	r6,r5
  20cdd0:	003c6906 	br	20bf78 <_gp+0xffdfa364>
  20cdd4:	802d883a 	mov	r22,r16
  20cdd8:	0021883a 	mov	r16,zero
  20cddc:	003b5406 	br	20bb30 <_gp+0xffdf9f1c>
  20cde0:	1823883a 	mov	r17,r3
  20cde4:	003cf306 	br	20c1b4 <_gp+0xffdfa5a0>
  20cde8:	1823883a 	mov	r17,r3
  20cdec:	003cad06 	br	20c0a4 <_gp+0xffdfa490>
  20cdf0:	0027883a 	mov	r19,zero
  20cdf4:	003fdc06 	br	20cd68 <_gp+0xffdfb154>
  20cdf8:	d9402217 	ldw	r5,136(sp)
  20cdfc:	8005883a 	mov	r2,r16
  20ce00:	b0c00043 	ldbu	r3,1(r22)
  20ce04:	2c000017 	ldw	r16,0(r5)
  20ce08:	29000104 	addi	r4,r5,4
  20ce0c:	d9002215 	stw	r4,136(sp)
  20ce10:	102d883a 	mov	r22,r2
  20ce14:	803fa50e 	bge	r16,zero,20ccac <_gp+0xffdfb098>
  20ce18:	18c03fcc 	andi	r3,r3,255
  20ce1c:	18c0201c 	xori	r3,r3,128
  20ce20:	043fffc4 	movi	r16,-1
  20ce24:	18ffe004 	addi	r3,r3,-128
  20ce28:	003b4006 	br	20bb2c <_gp+0xffdf9f18>
  20ce2c:	d9402303 	ldbu	r5,140(sp)
  20ce30:	d9401d85 	stb	r5,118(sp)
  20ce34:	003cae06 	br	20c0f0 <_gp+0xffdfa4dc>
  20ce38:	d8c02303 	ldbu	r3,140(sp)
  20ce3c:	d8c01d85 	stb	r3,118(sp)
  20ce40:	003d1406 	br	20c294 <_gp+0xffdfa680>
  20ce44:	d8c02303 	ldbu	r3,140(sp)
  20ce48:	d8c01d85 	stb	r3,118(sp)
  20ce4c:	003cca06 	br	20c178 <_gp+0xffdfa564>
  20ce50:	8880004c 	andi	r2,r17,1
  20ce54:	002b883a 	mov	r21,zero
  20ce58:	10000526 	beq	r2,zero,20ce70 <___vfiprintf_internal_r+0x14b8>
  20ce5c:	00800c04 	movi	r2,48
  20ce60:	d88019c5 	stb	r2,103(sp)
  20ce64:	dd002817 	ldw	r20,160(sp)
  20ce68:	ddc019c4 	addi	r23,sp,103
  20ce6c:	003bd506 	br	20bdc4 <_gp+0xffdfa1b0>
  20ce70:	0029883a 	mov	r20,zero
  20ce74:	ddc01a04 	addi	r23,sp,104
  20ce78:	003bd206 	br	20bdc4 <_gp+0xffdfa1b0>
  20ce7c:	d9002303 	ldbu	r4,140(sp)
  20ce80:	d9001d85 	stb	r4,118(sp)
  20ce84:	003da606 	br	20c520 <_gp+0xffdfa90c>
  20ce88:	d8c02303 	ldbu	r3,140(sp)
  20ce8c:	d8c01d85 	stb	r3,118(sp)
  20ce90:	003c7606 	br	20c06c <_gp+0xffdfa458>
  20ce94:	d8c02303 	ldbu	r3,140(sp)
  20ce98:	d8c01d85 	stb	r3,118(sp)
  20ce9c:	003c6506 	br	20c034 <_gp+0xffdfa420>
  20cea0:	d9002303 	ldbu	r4,140(sp)
  20cea4:	d9001d85 	stb	r4,118(sp)
  20cea8:	003d3d06 	br	20c3a0 <_gp+0xffdfa78c>
  20ceac:	d8c02303 	ldbu	r3,140(sp)
  20ceb0:	d8c01d85 	stb	r3,118(sp)
  20ceb4:	003d1d06 	br	20c32c <_gp+0xffdfa718>
  20ceb8:	d8c02303 	ldbu	r3,140(sp)
  20cebc:	d8c01d85 	stb	r3,118(sp)
  20cec0:	003d0306 	br	20c2d0 <_gp+0xffdfa6bc>

0020cec4 <__vfiprintf_internal>:
  20cec4:	00801074 	movhi	r2,65
  20cec8:	10a70a04 	addi	r2,r2,-25560
  20cecc:	300f883a 	mov	r7,r6
  20ced0:	280d883a 	mov	r6,r5
  20ced4:	200b883a 	mov	r5,r4
  20ced8:	11000017 	ldw	r4,0(r2)
  20cedc:	020b9b81 	jmpi	20b9b8 <___vfiprintf_internal_r>

0020cee0 <__sbprintf>:
  20cee0:	2880030b 	ldhu	r2,12(r5)
  20cee4:	2ac01917 	ldw	r11,100(r5)
  20cee8:	2a80038b 	ldhu	r10,14(r5)
  20ceec:	2a400717 	ldw	r9,28(r5)
  20cef0:	2a000917 	ldw	r8,36(r5)
  20cef4:	defee204 	addi	sp,sp,-1144
  20cef8:	00c10004 	movi	r3,1024
  20cefc:	dc011a15 	stw	r16,1128(sp)
  20cf00:	10bfff4c 	andi	r2,r2,65533
  20cf04:	2821883a 	mov	r16,r5
  20cf08:	d8cb883a 	add	r5,sp,r3
  20cf0c:	dc811c15 	stw	r18,1136(sp)
  20cf10:	dc411b15 	stw	r17,1132(sp)
  20cf14:	dfc11d15 	stw	ra,1140(sp)
  20cf18:	2025883a 	mov	r18,r4
  20cf1c:	d881030d 	sth	r2,1036(sp)
  20cf20:	dac11915 	stw	r11,1124(sp)
  20cf24:	da81038d 	sth	r10,1038(sp)
  20cf28:	da410715 	stw	r9,1052(sp)
  20cf2c:	da010915 	stw	r8,1060(sp)
  20cf30:	dec10015 	stw	sp,1024(sp)
  20cf34:	dec10415 	stw	sp,1040(sp)
  20cf38:	d8c10215 	stw	r3,1032(sp)
  20cf3c:	d8c10515 	stw	r3,1044(sp)
  20cf40:	d8010615 	stw	zero,1048(sp)
  20cf44:	020b9b80 	call	20b9b8 <___vfiprintf_internal_r>
  20cf48:	1023883a 	mov	r17,r2
  20cf4c:	10000416 	blt	r2,zero,20cf60 <__sbprintf+0x80>
  20cf50:	d9410004 	addi	r5,sp,1024
  20cf54:	9009883a 	mov	r4,r18
  20cf58:	020802c0 	call	20802c <_fflush_r>
  20cf5c:	10000d1e 	bne	r2,zero,20cf94 <__sbprintf+0xb4>
  20cf60:	d881030b 	ldhu	r2,1036(sp)
  20cf64:	1080100c 	andi	r2,r2,64
  20cf68:	10000326 	beq	r2,zero,20cf78 <__sbprintf+0x98>
  20cf6c:	8080030b 	ldhu	r2,12(r16)
  20cf70:	10801014 	ori	r2,r2,64
  20cf74:	8080030d 	sth	r2,12(r16)
  20cf78:	8805883a 	mov	r2,r17
  20cf7c:	dfc11d17 	ldw	ra,1140(sp)
  20cf80:	dc811c17 	ldw	r18,1136(sp)
  20cf84:	dc411b17 	ldw	r17,1132(sp)
  20cf88:	dc011a17 	ldw	r16,1128(sp)
  20cf8c:	dec11e04 	addi	sp,sp,1144
  20cf90:	f800283a 	ret
  20cf94:	047fffc4 	movi	r17,-1
  20cf98:	003ff106 	br	20cf60 <_gp+0xffdfb34c>

0020cf9c <__swbuf_r>:
  20cf9c:	defffb04 	addi	sp,sp,-20
  20cfa0:	dcc00315 	stw	r19,12(sp)
  20cfa4:	dc800215 	stw	r18,8(sp)
  20cfa8:	dc000015 	stw	r16,0(sp)
  20cfac:	dfc00415 	stw	ra,16(sp)
  20cfb0:	dc400115 	stw	r17,4(sp)
  20cfb4:	2025883a 	mov	r18,r4
  20cfb8:	2827883a 	mov	r19,r5
  20cfbc:	3021883a 	mov	r16,r6
  20cfc0:	20000226 	beq	r4,zero,20cfcc <__swbuf_r+0x30>
  20cfc4:	20800e17 	ldw	r2,56(r4)
  20cfc8:	10004226 	beq	r2,zero,20d0d4 <__swbuf_r+0x138>
  20cfcc:	80800617 	ldw	r2,24(r16)
  20cfd0:	8100030b 	ldhu	r4,12(r16)
  20cfd4:	80800215 	stw	r2,8(r16)
  20cfd8:	2080020c 	andi	r2,r4,8
  20cfdc:	10003626 	beq	r2,zero,20d0b8 <__swbuf_r+0x11c>
  20cfe0:	80c00417 	ldw	r3,16(r16)
  20cfe4:	18003426 	beq	r3,zero,20d0b8 <__swbuf_r+0x11c>
  20cfe8:	2088000c 	andi	r2,r4,8192
  20cfec:	9c403fcc 	andi	r17,r19,255
  20cff0:	10001a26 	beq	r2,zero,20d05c <__swbuf_r+0xc0>
  20cff4:	80800017 	ldw	r2,0(r16)
  20cff8:	81000517 	ldw	r4,20(r16)
  20cffc:	10c7c83a 	sub	r3,r2,r3
  20d000:	1900200e 	bge	r3,r4,20d084 <__swbuf_r+0xe8>
  20d004:	18c00044 	addi	r3,r3,1
  20d008:	81000217 	ldw	r4,8(r16)
  20d00c:	11400044 	addi	r5,r2,1
  20d010:	81400015 	stw	r5,0(r16)
  20d014:	213fffc4 	addi	r4,r4,-1
  20d018:	81000215 	stw	r4,8(r16)
  20d01c:	14c00005 	stb	r19,0(r2)
  20d020:	80800517 	ldw	r2,20(r16)
  20d024:	10c01e26 	beq	r2,r3,20d0a0 <__swbuf_r+0x104>
  20d028:	8080030b 	ldhu	r2,12(r16)
  20d02c:	1080004c 	andi	r2,r2,1
  20d030:	10000226 	beq	r2,zero,20d03c <__swbuf_r+0xa0>
  20d034:	00800284 	movi	r2,10
  20d038:	88801926 	beq	r17,r2,20d0a0 <__swbuf_r+0x104>
  20d03c:	8805883a 	mov	r2,r17
  20d040:	dfc00417 	ldw	ra,16(sp)
  20d044:	dcc00317 	ldw	r19,12(sp)
  20d048:	dc800217 	ldw	r18,8(sp)
  20d04c:	dc400117 	ldw	r17,4(sp)
  20d050:	dc000017 	ldw	r16,0(sp)
  20d054:	dec00504 	addi	sp,sp,20
  20d058:	f800283a 	ret
  20d05c:	81401917 	ldw	r5,100(r16)
  20d060:	00b7ffc4 	movi	r2,-8193
  20d064:	21080014 	ori	r4,r4,8192
  20d068:	2884703a 	and	r2,r5,r2
  20d06c:	80801915 	stw	r2,100(r16)
  20d070:	80800017 	ldw	r2,0(r16)
  20d074:	8100030d 	sth	r4,12(r16)
  20d078:	81000517 	ldw	r4,20(r16)
  20d07c:	10c7c83a 	sub	r3,r2,r3
  20d080:	193fe016 	blt	r3,r4,20d004 <_gp+0xffdfb3f0>
  20d084:	800b883a 	mov	r5,r16
  20d088:	9009883a 	mov	r4,r18
  20d08c:	020802c0 	call	20802c <_fflush_r>
  20d090:	1000071e 	bne	r2,zero,20d0b0 <__swbuf_r+0x114>
  20d094:	80800017 	ldw	r2,0(r16)
  20d098:	00c00044 	movi	r3,1
  20d09c:	003fda06 	br	20d008 <_gp+0xffdfb3f4>
  20d0a0:	800b883a 	mov	r5,r16
  20d0a4:	9009883a 	mov	r4,r18
  20d0a8:	020802c0 	call	20802c <_fflush_r>
  20d0ac:	103fe326 	beq	r2,zero,20d03c <_gp+0xffdfb428>
  20d0b0:	00bfffc4 	movi	r2,-1
  20d0b4:	003fe206 	br	20d040 <_gp+0xffdfb42c>
  20d0b8:	800b883a 	mov	r5,r16
  20d0bc:	9009883a 	mov	r4,r18
  20d0c0:	020640c0 	call	20640c <__swsetup_r>
  20d0c4:	103ffa1e 	bne	r2,zero,20d0b0 <_gp+0xffdfb49c>
  20d0c8:	8100030b 	ldhu	r4,12(r16)
  20d0cc:	80c00417 	ldw	r3,16(r16)
  20d0d0:	003fc506 	br	20cfe8 <_gp+0xffdfb3d4>
  20d0d4:	02084180 	call	208418 <__sinit>
  20d0d8:	003fbc06 	br	20cfcc <_gp+0xffdfb3b8>

0020d0dc <__swbuf>:
  20d0dc:	00801074 	movhi	r2,65
  20d0e0:	10a70a04 	addi	r2,r2,-25560
  20d0e4:	280d883a 	mov	r6,r5
  20d0e8:	200b883a 	mov	r5,r4
  20d0ec:	11000017 	ldw	r4,0(r2)
  20d0f0:	020cf9c1 	jmpi	20cf9c <__swbuf_r>

0020d0f4 <_write_r>:
  20d0f4:	defffd04 	addi	sp,sp,-12
  20d0f8:	2805883a 	mov	r2,r5
  20d0fc:	dc000015 	stw	r16,0(sp)
  20d100:	04001074 	movhi	r16,65
  20d104:	dc400115 	stw	r17,4(sp)
  20d108:	300b883a 	mov	r5,r6
  20d10c:	84272b04 	addi	r16,r16,-25428
  20d110:	2023883a 	mov	r17,r4
  20d114:	380d883a 	mov	r6,r7
  20d118:	1009883a 	mov	r4,r2
  20d11c:	dfc00215 	stw	ra,8(sp)
  20d120:	80000015 	stw	zero,0(r16)
  20d124:	02117500 	call	211750 <write>
  20d128:	00ffffc4 	movi	r3,-1
  20d12c:	10c00526 	beq	r2,r3,20d144 <_write_r+0x50>
  20d130:	dfc00217 	ldw	ra,8(sp)
  20d134:	dc400117 	ldw	r17,4(sp)
  20d138:	dc000017 	ldw	r16,0(sp)
  20d13c:	dec00304 	addi	sp,sp,12
  20d140:	f800283a 	ret
  20d144:	80c00017 	ldw	r3,0(r16)
  20d148:	183ff926 	beq	r3,zero,20d130 <_gp+0xffdfb51c>
  20d14c:	88c00015 	stw	r3,0(r17)
  20d150:	003ff706 	br	20d130 <_gp+0xffdfb51c>

0020d154 <_close_r>:
  20d154:	defffd04 	addi	sp,sp,-12
  20d158:	dc000015 	stw	r16,0(sp)
  20d15c:	04001074 	movhi	r16,65
  20d160:	dc400115 	stw	r17,4(sp)
  20d164:	84272b04 	addi	r16,r16,-25428
  20d168:	2023883a 	mov	r17,r4
  20d16c:	2809883a 	mov	r4,r5
  20d170:	dfc00215 	stw	ra,8(sp)
  20d174:	80000015 	stw	zero,0(r16)
  20d178:	0210d240 	call	210d24 <close>
  20d17c:	00ffffc4 	movi	r3,-1
  20d180:	10c00526 	beq	r2,r3,20d198 <_close_r+0x44>
  20d184:	dfc00217 	ldw	ra,8(sp)
  20d188:	dc400117 	ldw	r17,4(sp)
  20d18c:	dc000017 	ldw	r16,0(sp)
  20d190:	dec00304 	addi	sp,sp,12
  20d194:	f800283a 	ret
  20d198:	80c00017 	ldw	r3,0(r16)
  20d19c:	183ff926 	beq	r3,zero,20d184 <_gp+0xffdfb570>
  20d1a0:	88c00015 	stw	r3,0(r17)
  20d1a4:	003ff706 	br	20d184 <_gp+0xffdfb570>

0020d1a8 <_calloc_r>:
  20d1a8:	defffe04 	addi	sp,sp,-8
  20d1ac:	2805883a 	mov	r2,r5
  20d1b0:	dc000015 	stw	r16,0(sp)
  20d1b4:	300b883a 	mov	r5,r6
  20d1b8:	2021883a 	mov	r16,r4
  20d1bc:	1009883a 	mov	r4,r2
  20d1c0:	dfc00115 	stw	ra,4(sp)
  20d1c4:	02032a40 	call	2032a4 <__mulsi3>
  20d1c8:	100b883a 	mov	r5,r2
  20d1cc:	8009883a 	mov	r4,r16
  20d1d0:	02091840 	call	209184 <_malloc_r>
  20d1d4:	10002926 	beq	r2,zero,20d27c <_calloc_r+0xd4>
  20d1d8:	11bfff17 	ldw	r6,-4(r2)
  20d1dc:	1021883a 	mov	r16,r2
  20d1e0:	00bfff04 	movi	r2,-4
  20d1e4:	308c703a 	and	r6,r6,r2
  20d1e8:	00c00904 	movi	r3,36
  20d1ec:	308d883a 	add	r6,r6,r2
  20d1f0:	19801636 	bltu	r3,r6,20d24c <_calloc_r+0xa4>
  20d1f4:	008004c4 	movi	r2,19
  20d1f8:	11800b2e 	bgeu	r2,r6,20d228 <_calloc_r+0x80>
  20d1fc:	80000015 	stw	zero,0(r16)
  20d200:	80000115 	stw	zero,4(r16)
  20d204:	008006c4 	movi	r2,27
  20d208:	11801a2e 	bgeu	r2,r6,20d274 <_calloc_r+0xcc>
  20d20c:	80000215 	stw	zero,8(r16)
  20d210:	80000315 	stw	zero,12(r16)
  20d214:	30c0151e 	bne	r6,r3,20d26c <_calloc_r+0xc4>
  20d218:	80000415 	stw	zero,16(r16)
  20d21c:	80800604 	addi	r2,r16,24
  20d220:	80000515 	stw	zero,20(r16)
  20d224:	00000106 	br	20d22c <_calloc_r+0x84>
  20d228:	8005883a 	mov	r2,r16
  20d22c:	10000015 	stw	zero,0(r2)
  20d230:	10000115 	stw	zero,4(r2)
  20d234:	10000215 	stw	zero,8(r2)
  20d238:	8005883a 	mov	r2,r16
  20d23c:	dfc00117 	ldw	ra,4(sp)
  20d240:	dc000017 	ldw	r16,0(sp)
  20d244:	dec00204 	addi	sp,sp,8
  20d248:	f800283a 	ret
  20d24c:	000b883a 	mov	r5,zero
  20d250:	8009883a 	mov	r4,r16
  20d254:	0209d180 	call	209d18 <memset>
  20d258:	8005883a 	mov	r2,r16
  20d25c:	dfc00117 	ldw	ra,4(sp)
  20d260:	dc000017 	ldw	r16,0(sp)
  20d264:	dec00204 	addi	sp,sp,8
  20d268:	f800283a 	ret
  20d26c:	80800404 	addi	r2,r16,16
  20d270:	003fee06 	br	20d22c <_gp+0xffdfb618>
  20d274:	80800204 	addi	r2,r16,8
  20d278:	003fec06 	br	20d22c <_gp+0xffdfb618>
  20d27c:	0005883a 	mov	r2,zero
  20d280:	003fee06 	br	20d23c <_gp+0xffdfb628>

0020d284 <_fclose_r>:
  20d284:	28003926 	beq	r5,zero,20d36c <_fclose_r+0xe8>
  20d288:	defffc04 	addi	sp,sp,-16
  20d28c:	dc400115 	stw	r17,4(sp)
  20d290:	dc000015 	stw	r16,0(sp)
  20d294:	dfc00315 	stw	ra,12(sp)
  20d298:	dc800215 	stw	r18,8(sp)
  20d29c:	2023883a 	mov	r17,r4
  20d2a0:	2821883a 	mov	r16,r5
  20d2a4:	20000226 	beq	r4,zero,20d2b0 <_fclose_r+0x2c>
  20d2a8:	20800e17 	ldw	r2,56(r4)
  20d2ac:	10002726 	beq	r2,zero,20d34c <_fclose_r+0xc8>
  20d2b0:	8080030f 	ldh	r2,12(r16)
  20d2b4:	1000071e 	bne	r2,zero,20d2d4 <_fclose_r+0x50>
  20d2b8:	0005883a 	mov	r2,zero
  20d2bc:	dfc00317 	ldw	ra,12(sp)
  20d2c0:	dc800217 	ldw	r18,8(sp)
  20d2c4:	dc400117 	ldw	r17,4(sp)
  20d2c8:	dc000017 	ldw	r16,0(sp)
  20d2cc:	dec00404 	addi	sp,sp,16
  20d2d0:	f800283a 	ret
  20d2d4:	800b883a 	mov	r5,r16
  20d2d8:	8809883a 	mov	r4,r17
  20d2dc:	0207e100 	call	207e10 <__sflush_r>
  20d2e0:	1025883a 	mov	r18,r2
  20d2e4:	80800b17 	ldw	r2,44(r16)
  20d2e8:	10000426 	beq	r2,zero,20d2fc <_fclose_r+0x78>
  20d2ec:	81400717 	ldw	r5,28(r16)
  20d2f0:	8809883a 	mov	r4,r17
  20d2f4:	103ee83a 	callr	r2
  20d2f8:	10001616 	blt	r2,zero,20d354 <_fclose_r+0xd0>
  20d2fc:	8080030b 	ldhu	r2,12(r16)
  20d300:	1080200c 	andi	r2,r2,128
  20d304:	1000151e 	bne	r2,zero,20d35c <_fclose_r+0xd8>
  20d308:	81400c17 	ldw	r5,48(r16)
  20d30c:	28000526 	beq	r5,zero,20d324 <_fclose_r+0xa0>
  20d310:	80801004 	addi	r2,r16,64
  20d314:	28800226 	beq	r5,r2,20d320 <_fclose_r+0x9c>
  20d318:	8809883a 	mov	r4,r17
  20d31c:	020858c0 	call	20858c <_free_r>
  20d320:	80000c15 	stw	zero,48(r16)
  20d324:	81401117 	ldw	r5,68(r16)
  20d328:	28000326 	beq	r5,zero,20d338 <_fclose_r+0xb4>
  20d32c:	8809883a 	mov	r4,r17
  20d330:	020858c0 	call	20858c <_free_r>
  20d334:	80001115 	stw	zero,68(r16)
  20d338:	02084280 	call	208428 <__sfp_lock_acquire>
  20d33c:	8000030d 	sth	zero,12(r16)
  20d340:	020842c0 	call	20842c <__sfp_lock_release>
  20d344:	9005883a 	mov	r2,r18
  20d348:	003fdc06 	br	20d2bc <_gp+0xffdfb6a8>
  20d34c:	02084180 	call	208418 <__sinit>
  20d350:	003fd706 	br	20d2b0 <_gp+0xffdfb69c>
  20d354:	04bfffc4 	movi	r18,-1
  20d358:	003fe806 	br	20d2fc <_gp+0xffdfb6e8>
  20d35c:	81400417 	ldw	r5,16(r16)
  20d360:	8809883a 	mov	r4,r17
  20d364:	020858c0 	call	20858c <_free_r>
  20d368:	003fe706 	br	20d308 <_gp+0xffdfb6f4>
  20d36c:	0005883a 	mov	r2,zero
  20d370:	f800283a 	ret

0020d374 <fclose>:
  20d374:	00801074 	movhi	r2,65
  20d378:	10a70a04 	addi	r2,r2,-25560
  20d37c:	200b883a 	mov	r5,r4
  20d380:	11000017 	ldw	r4,0(r2)
  20d384:	020d2841 	jmpi	20d284 <_fclose_r>

0020d388 <__fputwc>:
  20d388:	defff804 	addi	sp,sp,-32
  20d38c:	dcc00415 	stw	r19,16(sp)
  20d390:	dc800315 	stw	r18,12(sp)
  20d394:	dc000115 	stw	r16,4(sp)
  20d398:	dfc00715 	stw	ra,28(sp)
  20d39c:	dd400615 	stw	r21,24(sp)
  20d3a0:	dd000515 	stw	r20,20(sp)
  20d3a4:	dc400215 	stw	r17,8(sp)
  20d3a8:	2027883a 	mov	r19,r4
  20d3ac:	2825883a 	mov	r18,r5
  20d3b0:	3021883a 	mov	r16,r6
  20d3b4:	0208f740 	call	208f74 <__locale_mb_cur_max>
  20d3b8:	00c00044 	movi	r3,1
  20d3bc:	10c03e26 	beq	r2,r3,20d4b8 <__fputwc+0x130>
  20d3c0:	81c01704 	addi	r7,r16,92
  20d3c4:	900d883a 	mov	r6,r18
  20d3c8:	d80b883a 	mov	r5,sp
  20d3cc:	9809883a 	mov	r4,r19
  20d3d0:	020d7000 	call	20d700 <_wcrtomb_r>
  20d3d4:	1029883a 	mov	r20,r2
  20d3d8:	00bfffc4 	movi	r2,-1
  20d3dc:	a0802026 	beq	r20,r2,20d460 <__fputwc+0xd8>
  20d3e0:	d9400003 	ldbu	r5,0(sp)
  20d3e4:	a0001c26 	beq	r20,zero,20d458 <__fputwc+0xd0>
  20d3e8:	0023883a 	mov	r17,zero
  20d3ec:	05400284 	movi	r21,10
  20d3f0:	00000906 	br	20d418 <__fputwc+0x90>
  20d3f4:	80800017 	ldw	r2,0(r16)
  20d3f8:	11400005 	stb	r5,0(r2)
  20d3fc:	80c00017 	ldw	r3,0(r16)
  20d400:	18c00044 	addi	r3,r3,1
  20d404:	80c00015 	stw	r3,0(r16)
  20d408:	8c400044 	addi	r17,r17,1
  20d40c:	dc45883a 	add	r2,sp,r17
  20d410:	8d00112e 	bgeu	r17,r20,20d458 <__fputwc+0xd0>
  20d414:	11400003 	ldbu	r5,0(r2)
  20d418:	80c00217 	ldw	r3,8(r16)
  20d41c:	18ffffc4 	addi	r3,r3,-1
  20d420:	80c00215 	stw	r3,8(r16)
  20d424:	183ff30e 	bge	r3,zero,20d3f4 <_gp+0xffdfb7e0>
  20d428:	80800617 	ldw	r2,24(r16)
  20d42c:	18801916 	blt	r3,r2,20d494 <__fputwc+0x10c>
  20d430:	80800017 	ldw	r2,0(r16)
  20d434:	11400005 	stb	r5,0(r2)
  20d438:	80800017 	ldw	r2,0(r16)
  20d43c:	10c00003 	ldbu	r3,0(r2)
  20d440:	10800044 	addi	r2,r2,1
  20d444:	1d402326 	beq	r3,r21,20d4d4 <__fputwc+0x14c>
  20d448:	80800015 	stw	r2,0(r16)
  20d44c:	8c400044 	addi	r17,r17,1
  20d450:	dc45883a 	add	r2,sp,r17
  20d454:	8d3fef36 	bltu	r17,r20,20d414 <_gp+0xffdfb800>
  20d458:	9005883a 	mov	r2,r18
  20d45c:	00000406 	br	20d470 <__fputwc+0xe8>
  20d460:	80c0030b 	ldhu	r3,12(r16)
  20d464:	a005883a 	mov	r2,r20
  20d468:	18c01014 	ori	r3,r3,64
  20d46c:	80c0030d 	sth	r3,12(r16)
  20d470:	dfc00717 	ldw	ra,28(sp)
  20d474:	dd400617 	ldw	r21,24(sp)
  20d478:	dd000517 	ldw	r20,20(sp)
  20d47c:	dcc00417 	ldw	r19,16(sp)
  20d480:	dc800317 	ldw	r18,12(sp)
  20d484:	dc400217 	ldw	r17,8(sp)
  20d488:	dc000117 	ldw	r16,4(sp)
  20d48c:	dec00804 	addi	sp,sp,32
  20d490:	f800283a 	ret
  20d494:	800d883a 	mov	r6,r16
  20d498:	29403fcc 	andi	r5,r5,255
  20d49c:	9809883a 	mov	r4,r19
  20d4a0:	020cf9c0 	call	20cf9c <__swbuf_r>
  20d4a4:	10bfffe0 	cmpeqi	r2,r2,-1
  20d4a8:	10803fcc 	andi	r2,r2,255
  20d4ac:	103fd626 	beq	r2,zero,20d408 <_gp+0xffdfb7f4>
  20d4b0:	00bfffc4 	movi	r2,-1
  20d4b4:	003fee06 	br	20d470 <_gp+0xffdfb85c>
  20d4b8:	90ffffc4 	addi	r3,r18,-1
  20d4bc:	01003f84 	movi	r4,254
  20d4c0:	20ffbf36 	bltu	r4,r3,20d3c0 <_gp+0xffdfb7ac>
  20d4c4:	900b883a 	mov	r5,r18
  20d4c8:	dc800005 	stb	r18,0(sp)
  20d4cc:	1029883a 	mov	r20,r2
  20d4d0:	003fc506 	br	20d3e8 <_gp+0xffdfb7d4>
  20d4d4:	800d883a 	mov	r6,r16
  20d4d8:	a80b883a 	mov	r5,r21
  20d4dc:	9809883a 	mov	r4,r19
  20d4e0:	020cf9c0 	call	20cf9c <__swbuf_r>
  20d4e4:	10bfffe0 	cmpeqi	r2,r2,-1
  20d4e8:	003fef06 	br	20d4a8 <_gp+0xffdfb894>

0020d4ec <_fputwc_r>:
  20d4ec:	3080030b 	ldhu	r2,12(r6)
  20d4f0:	10c8000c 	andi	r3,r2,8192
  20d4f4:	1800051e 	bne	r3,zero,20d50c <_fputwc_r+0x20>
  20d4f8:	30c01917 	ldw	r3,100(r6)
  20d4fc:	10880014 	ori	r2,r2,8192
  20d500:	3080030d 	sth	r2,12(r6)
  20d504:	18880014 	ori	r2,r3,8192
  20d508:	30801915 	stw	r2,100(r6)
  20d50c:	020d3881 	jmpi	20d388 <__fputwc>

0020d510 <fputwc>:
  20d510:	00801074 	movhi	r2,65
  20d514:	defffc04 	addi	sp,sp,-16
  20d518:	10a70a04 	addi	r2,r2,-25560
  20d51c:	dc000115 	stw	r16,4(sp)
  20d520:	14000017 	ldw	r16,0(r2)
  20d524:	dc400215 	stw	r17,8(sp)
  20d528:	dfc00315 	stw	ra,12(sp)
  20d52c:	2023883a 	mov	r17,r4
  20d530:	80000226 	beq	r16,zero,20d53c <fputwc+0x2c>
  20d534:	80800e17 	ldw	r2,56(r16)
  20d538:	10001026 	beq	r2,zero,20d57c <fputwc+0x6c>
  20d53c:	2880030b 	ldhu	r2,12(r5)
  20d540:	10c8000c 	andi	r3,r2,8192
  20d544:	1800051e 	bne	r3,zero,20d55c <fputwc+0x4c>
  20d548:	28c01917 	ldw	r3,100(r5)
  20d54c:	10880014 	ori	r2,r2,8192
  20d550:	2880030d 	sth	r2,12(r5)
  20d554:	18880014 	ori	r2,r3,8192
  20d558:	28801915 	stw	r2,100(r5)
  20d55c:	280d883a 	mov	r6,r5
  20d560:	8009883a 	mov	r4,r16
  20d564:	880b883a 	mov	r5,r17
  20d568:	dfc00317 	ldw	ra,12(sp)
  20d56c:	dc400217 	ldw	r17,8(sp)
  20d570:	dc000117 	ldw	r16,4(sp)
  20d574:	dec00404 	addi	sp,sp,16
  20d578:	020d3881 	jmpi	20d388 <__fputwc>
  20d57c:	8009883a 	mov	r4,r16
  20d580:	d9400015 	stw	r5,0(sp)
  20d584:	02084180 	call	208418 <__sinit>
  20d588:	d9400017 	ldw	r5,0(sp)
  20d58c:	003feb06 	br	20d53c <_gp+0xffdfb928>

0020d590 <_fstat_r>:
  20d590:	defffd04 	addi	sp,sp,-12
  20d594:	2805883a 	mov	r2,r5
  20d598:	dc000015 	stw	r16,0(sp)
  20d59c:	04001074 	movhi	r16,65
  20d5a0:	dc400115 	stw	r17,4(sp)
  20d5a4:	84272b04 	addi	r16,r16,-25428
  20d5a8:	2023883a 	mov	r17,r4
  20d5ac:	300b883a 	mov	r5,r6
  20d5b0:	1009883a 	mov	r4,r2
  20d5b4:	dfc00215 	stw	ra,8(sp)
  20d5b8:	80000015 	stw	zero,0(r16)
  20d5bc:	0210e640 	call	210e64 <fstat>
  20d5c0:	00ffffc4 	movi	r3,-1
  20d5c4:	10c00526 	beq	r2,r3,20d5dc <_fstat_r+0x4c>
  20d5c8:	dfc00217 	ldw	ra,8(sp)
  20d5cc:	dc400117 	ldw	r17,4(sp)
  20d5d0:	dc000017 	ldw	r16,0(sp)
  20d5d4:	dec00304 	addi	sp,sp,12
  20d5d8:	f800283a 	ret
  20d5dc:	80c00017 	ldw	r3,0(r16)
  20d5e0:	183ff926 	beq	r3,zero,20d5c8 <_gp+0xffdfb9b4>
  20d5e4:	88c00015 	stw	r3,0(r17)
  20d5e8:	003ff706 	br	20d5c8 <_gp+0xffdfb9b4>

0020d5ec <_isatty_r>:
  20d5ec:	defffd04 	addi	sp,sp,-12
  20d5f0:	dc000015 	stw	r16,0(sp)
  20d5f4:	04001074 	movhi	r16,65
  20d5f8:	dc400115 	stw	r17,4(sp)
  20d5fc:	84272b04 	addi	r16,r16,-25428
  20d600:	2023883a 	mov	r17,r4
  20d604:	2809883a 	mov	r4,r5
  20d608:	dfc00215 	stw	ra,8(sp)
  20d60c:	80000015 	stw	zero,0(r16)
  20d610:	0210f580 	call	210f58 <isatty>
  20d614:	00ffffc4 	movi	r3,-1
  20d618:	10c00526 	beq	r2,r3,20d630 <_isatty_r+0x44>
  20d61c:	dfc00217 	ldw	ra,8(sp)
  20d620:	dc400117 	ldw	r17,4(sp)
  20d624:	dc000017 	ldw	r16,0(sp)
  20d628:	dec00304 	addi	sp,sp,12
  20d62c:	f800283a 	ret
  20d630:	80c00017 	ldw	r3,0(r16)
  20d634:	183ff926 	beq	r3,zero,20d61c <_gp+0xffdfba08>
  20d638:	88c00015 	stw	r3,0(r17)
  20d63c:	003ff706 	br	20d61c <_gp+0xffdfba08>

0020d640 <_lseek_r>:
  20d640:	defffd04 	addi	sp,sp,-12
  20d644:	2805883a 	mov	r2,r5
  20d648:	dc000015 	stw	r16,0(sp)
  20d64c:	04001074 	movhi	r16,65
  20d650:	dc400115 	stw	r17,4(sp)
  20d654:	300b883a 	mov	r5,r6
  20d658:	84272b04 	addi	r16,r16,-25428
  20d65c:	2023883a 	mov	r17,r4
  20d660:	380d883a 	mov	r6,r7
  20d664:	1009883a 	mov	r4,r2
  20d668:	dfc00215 	stw	ra,8(sp)
  20d66c:	80000015 	stw	zero,0(r16)
  20d670:	021112c0 	call	21112c <lseek>
  20d674:	00ffffc4 	movi	r3,-1
  20d678:	10c00526 	beq	r2,r3,20d690 <_lseek_r+0x50>
  20d67c:	dfc00217 	ldw	ra,8(sp)
  20d680:	dc400117 	ldw	r17,4(sp)
  20d684:	dc000017 	ldw	r16,0(sp)
  20d688:	dec00304 	addi	sp,sp,12
  20d68c:	f800283a 	ret
  20d690:	80c00017 	ldw	r3,0(r16)
  20d694:	183ff926 	beq	r3,zero,20d67c <_gp+0xffdfba68>
  20d698:	88c00015 	stw	r3,0(r17)
  20d69c:	003ff706 	br	20d67c <_gp+0xffdfba68>

0020d6a0 <_read_r>:
  20d6a0:	defffd04 	addi	sp,sp,-12
  20d6a4:	2805883a 	mov	r2,r5
  20d6a8:	dc000015 	stw	r16,0(sp)
  20d6ac:	04001074 	movhi	r16,65
  20d6b0:	dc400115 	stw	r17,4(sp)
  20d6b4:	300b883a 	mov	r5,r6
  20d6b8:	84272b04 	addi	r16,r16,-25428
  20d6bc:	2023883a 	mov	r17,r4
  20d6c0:	380d883a 	mov	r6,r7
  20d6c4:	1009883a 	mov	r4,r2
  20d6c8:	dfc00215 	stw	ra,8(sp)
  20d6cc:	80000015 	stw	zero,0(r16)
  20d6d0:	02113080 	call	211308 <read>
  20d6d4:	00ffffc4 	movi	r3,-1
  20d6d8:	10c00526 	beq	r2,r3,20d6f0 <_read_r+0x50>
  20d6dc:	dfc00217 	ldw	ra,8(sp)
  20d6e0:	dc400117 	ldw	r17,4(sp)
  20d6e4:	dc000017 	ldw	r16,0(sp)
  20d6e8:	dec00304 	addi	sp,sp,12
  20d6ec:	f800283a 	ret
  20d6f0:	80c00017 	ldw	r3,0(r16)
  20d6f4:	183ff926 	beq	r3,zero,20d6dc <_gp+0xffdfbac8>
  20d6f8:	88c00015 	stw	r3,0(r17)
  20d6fc:	003ff706 	br	20d6dc <_gp+0xffdfbac8>

0020d700 <_wcrtomb_r>:
  20d700:	defff604 	addi	sp,sp,-40
  20d704:	00801074 	movhi	r2,65
  20d708:	dc800815 	stw	r18,32(sp)
  20d70c:	dc400715 	stw	r17,28(sp)
  20d710:	dc000615 	stw	r16,24(sp)
  20d714:	10a70e04 	addi	r2,r2,-25544
  20d718:	dfc00915 	stw	ra,36(sp)
  20d71c:	2021883a 	mov	r16,r4
  20d720:	3823883a 	mov	r17,r7
  20d724:	14800017 	ldw	r18,0(r2)
  20d728:	28001426 	beq	r5,zero,20d77c <_wcrtomb_r+0x7c>
  20d72c:	d9400415 	stw	r5,16(sp)
  20d730:	d9800515 	stw	r6,20(sp)
  20d734:	0208f680 	call	208f68 <__locale_charset>
  20d738:	d9800517 	ldw	r6,20(sp)
  20d73c:	d9400417 	ldw	r5,16(sp)
  20d740:	100f883a 	mov	r7,r2
  20d744:	dc400015 	stw	r17,0(sp)
  20d748:	8009883a 	mov	r4,r16
  20d74c:	903ee83a 	callr	r18
  20d750:	00ffffc4 	movi	r3,-1
  20d754:	10c0031e 	bne	r2,r3,20d764 <_wcrtomb_r+0x64>
  20d758:	88000015 	stw	zero,0(r17)
  20d75c:	00c02284 	movi	r3,138
  20d760:	80c00015 	stw	r3,0(r16)
  20d764:	dfc00917 	ldw	ra,36(sp)
  20d768:	dc800817 	ldw	r18,32(sp)
  20d76c:	dc400717 	ldw	r17,28(sp)
  20d770:	dc000617 	ldw	r16,24(sp)
  20d774:	dec00a04 	addi	sp,sp,40
  20d778:	f800283a 	ret
  20d77c:	0208f680 	call	208f68 <__locale_charset>
  20d780:	100f883a 	mov	r7,r2
  20d784:	dc400015 	stw	r17,0(sp)
  20d788:	000d883a 	mov	r6,zero
  20d78c:	d9400104 	addi	r5,sp,4
  20d790:	8009883a 	mov	r4,r16
  20d794:	903ee83a 	callr	r18
  20d798:	003fed06 	br	20d750 <_gp+0xffdfbb3c>

0020d79c <wcrtomb>:
  20d79c:	defff604 	addi	sp,sp,-40
  20d7a0:	00801074 	movhi	r2,65
  20d7a4:	dc800615 	stw	r18,24(sp)
  20d7a8:	dc400515 	stw	r17,20(sp)
  20d7ac:	10a70a04 	addi	r2,r2,-25560
  20d7b0:	dfc00915 	stw	ra,36(sp)
  20d7b4:	dd000815 	stw	r20,32(sp)
  20d7b8:	dcc00715 	stw	r19,28(sp)
  20d7bc:	dc000415 	stw	r16,16(sp)
  20d7c0:	3025883a 	mov	r18,r6
  20d7c4:	14400017 	ldw	r17,0(r2)
  20d7c8:	20001926 	beq	r4,zero,20d830 <wcrtomb+0x94>
  20d7cc:	00801074 	movhi	r2,65
  20d7d0:	10a70e04 	addi	r2,r2,-25544
  20d7d4:	15000017 	ldw	r20,0(r2)
  20d7d8:	2021883a 	mov	r16,r4
  20d7dc:	2827883a 	mov	r19,r5
  20d7e0:	0208f680 	call	208f68 <__locale_charset>
  20d7e4:	100f883a 	mov	r7,r2
  20d7e8:	dc800015 	stw	r18,0(sp)
  20d7ec:	980d883a 	mov	r6,r19
  20d7f0:	800b883a 	mov	r5,r16
  20d7f4:	8809883a 	mov	r4,r17
  20d7f8:	a03ee83a 	callr	r20
  20d7fc:	00ffffc4 	movi	r3,-1
  20d800:	10c0031e 	bne	r2,r3,20d810 <wcrtomb+0x74>
  20d804:	90000015 	stw	zero,0(r18)
  20d808:	00c02284 	movi	r3,138
  20d80c:	88c00015 	stw	r3,0(r17)
  20d810:	dfc00917 	ldw	ra,36(sp)
  20d814:	dd000817 	ldw	r20,32(sp)
  20d818:	dcc00717 	ldw	r19,28(sp)
  20d81c:	dc800617 	ldw	r18,24(sp)
  20d820:	dc400517 	ldw	r17,20(sp)
  20d824:	dc000417 	ldw	r16,16(sp)
  20d828:	dec00a04 	addi	sp,sp,40
  20d82c:	f800283a 	ret
  20d830:	00801074 	movhi	r2,65
  20d834:	10a70e04 	addi	r2,r2,-25544
  20d838:	14000017 	ldw	r16,0(r2)
  20d83c:	0208f680 	call	208f68 <__locale_charset>
  20d840:	100f883a 	mov	r7,r2
  20d844:	dc800015 	stw	r18,0(sp)
  20d848:	000d883a 	mov	r6,zero
  20d84c:	d9400104 	addi	r5,sp,4
  20d850:	8809883a 	mov	r4,r17
  20d854:	803ee83a 	callr	r16
  20d858:	003fe806 	br	20d7fc <_gp+0xffdfbbe8>

0020d85c <__ascii_wctomb>:
  20d85c:	28000526 	beq	r5,zero,20d874 <__ascii_wctomb+0x18>
  20d860:	00803fc4 	movi	r2,255
  20d864:	11800536 	bltu	r2,r6,20d87c <__ascii_wctomb+0x20>
  20d868:	29800005 	stb	r6,0(r5)
  20d86c:	00800044 	movi	r2,1
  20d870:	f800283a 	ret
  20d874:	0005883a 	mov	r2,zero
  20d878:	f800283a 	ret
  20d87c:	00802284 	movi	r2,138
  20d880:	20800015 	stw	r2,0(r4)
  20d884:	00bfffc4 	movi	r2,-1
  20d888:	f800283a 	ret

0020d88c <_wctomb_r>:
  20d88c:	00801074 	movhi	r2,65
  20d890:	defff904 	addi	sp,sp,-28
  20d894:	10a70e04 	addi	r2,r2,-25544
  20d898:	dfc00615 	stw	ra,24(sp)
  20d89c:	dc400515 	stw	r17,20(sp)
  20d8a0:	dc000415 	stw	r16,16(sp)
  20d8a4:	3823883a 	mov	r17,r7
  20d8a8:	14000017 	ldw	r16,0(r2)
  20d8ac:	d9000115 	stw	r4,4(sp)
  20d8b0:	d9400215 	stw	r5,8(sp)
  20d8b4:	d9800315 	stw	r6,12(sp)
  20d8b8:	0208f680 	call	208f68 <__locale_charset>
  20d8bc:	d9800317 	ldw	r6,12(sp)
  20d8c0:	d9400217 	ldw	r5,8(sp)
  20d8c4:	d9000117 	ldw	r4,4(sp)
  20d8c8:	100f883a 	mov	r7,r2
  20d8cc:	dc400015 	stw	r17,0(sp)
  20d8d0:	803ee83a 	callr	r16
  20d8d4:	dfc00617 	ldw	ra,24(sp)
  20d8d8:	dc400517 	ldw	r17,20(sp)
  20d8dc:	dc000417 	ldw	r16,16(sp)
  20d8e0:	dec00704 	addi	sp,sp,28
  20d8e4:	f800283a 	ret

0020d8e8 <__udivdi3>:
  20d8e8:	defff404 	addi	sp,sp,-48
  20d8ec:	dcc00515 	stw	r19,20(sp)
  20d8f0:	dc000215 	stw	r16,8(sp)
  20d8f4:	dfc00b15 	stw	ra,44(sp)
  20d8f8:	df000a15 	stw	fp,40(sp)
  20d8fc:	ddc00915 	stw	r23,36(sp)
  20d900:	dd800815 	stw	r22,32(sp)
  20d904:	dd400715 	stw	r21,28(sp)
  20d908:	dd000615 	stw	r20,24(sp)
  20d90c:	dc800415 	stw	r18,16(sp)
  20d910:	dc400315 	stw	r17,12(sp)
  20d914:	2027883a 	mov	r19,r4
  20d918:	2821883a 	mov	r16,r5
  20d91c:	3800461e 	bne	r7,zero,20da38 <__udivdi3+0x150>
  20d920:	3023883a 	mov	r17,r6
  20d924:	2025883a 	mov	r18,r4
  20d928:	2980572e 	bgeu	r5,r6,20da88 <__udivdi3+0x1a0>
  20d92c:	00bfffd4 	movui	r2,65535
  20d930:	282d883a 	mov	r22,r5
  20d934:	1180b236 	bltu	r2,r6,20dc00 <__udivdi3+0x318>
  20d938:	00803fc4 	movi	r2,255
  20d93c:	1185803a 	cmpltu	r2,r2,r6
  20d940:	100490fa 	slli	r2,r2,3
  20d944:	3086d83a 	srl	r3,r6,r2
  20d948:	01000874 	movhi	r4,33
  20d94c:	211ac404 	addi	r4,r4,27408
  20d950:	20c7883a 	add	r3,r4,r3
  20d954:	18c00003 	ldbu	r3,0(r3)
  20d958:	1885883a 	add	r2,r3,r2
  20d95c:	00c00804 	movi	r3,32
  20d960:	1887c83a 	sub	r3,r3,r2
  20d964:	18000526 	beq	r3,zero,20d97c <__udivdi3+0x94>
  20d968:	80e0983a 	sll	r16,r16,r3
  20d96c:	9884d83a 	srl	r2,r19,r2
  20d970:	30e2983a 	sll	r17,r6,r3
  20d974:	98e4983a 	sll	r18,r19,r3
  20d978:	142cb03a 	or	r22,r2,r16
  20d97c:	882ad43a 	srli	r21,r17,16
  20d980:	b009883a 	mov	r4,r22
  20d984:	8d3fffcc 	andi	r20,r17,65535
  20d988:	a80b883a 	mov	r5,r21
  20d98c:	020324c0 	call	20324c <__umodsi3>
  20d990:	b009883a 	mov	r4,r22
  20d994:	a80b883a 	mov	r5,r21
  20d998:	1027883a 	mov	r19,r2
  20d99c:	02031e80 	call	2031e8 <__udivsi3>
  20d9a0:	100b883a 	mov	r5,r2
  20d9a4:	a009883a 	mov	r4,r20
  20d9a8:	102d883a 	mov	r22,r2
  20d9ac:	02032a40 	call	2032a4 <__mulsi3>
  20d9b0:	9826943a 	slli	r19,r19,16
  20d9b4:	9006d43a 	srli	r3,r18,16
  20d9b8:	1cc6b03a 	or	r3,r3,r19
  20d9bc:	1880052e 	bgeu	r3,r2,20d9d4 <__udivdi3+0xec>
  20d9c0:	1c47883a 	add	r3,r3,r17
  20d9c4:	b13fffc4 	addi	r4,r22,-1
  20d9c8:	1c400136 	bltu	r3,r17,20d9d0 <__udivdi3+0xe8>
  20d9cc:	18814236 	bltu	r3,r2,20ded8 <__udivdi3+0x5f0>
  20d9d0:	202d883a 	mov	r22,r4
  20d9d4:	18a1c83a 	sub	r16,r3,r2
  20d9d8:	8009883a 	mov	r4,r16
  20d9dc:	a80b883a 	mov	r5,r21
  20d9e0:	020324c0 	call	20324c <__umodsi3>
  20d9e4:	1027883a 	mov	r19,r2
  20d9e8:	8009883a 	mov	r4,r16
  20d9ec:	a80b883a 	mov	r5,r21
  20d9f0:	9826943a 	slli	r19,r19,16
  20d9f4:	02031e80 	call	2031e8 <__udivsi3>
  20d9f8:	100b883a 	mov	r5,r2
  20d9fc:	a009883a 	mov	r4,r20
  20da00:	94bfffcc 	andi	r18,r18,65535
  20da04:	1021883a 	mov	r16,r2
  20da08:	94e4b03a 	or	r18,r18,r19
  20da0c:	02032a40 	call	2032a4 <__mulsi3>
  20da10:	9080052e 	bgeu	r18,r2,20da28 <__udivdi3+0x140>
  20da14:	8ca5883a 	add	r18,r17,r18
  20da18:	80ffffc4 	addi	r3,r16,-1
  20da1c:	94410c36 	bltu	r18,r17,20de50 <__udivdi3+0x568>
  20da20:	90810b2e 	bgeu	r18,r2,20de50 <__udivdi3+0x568>
  20da24:	843fff84 	addi	r16,r16,-2
  20da28:	b004943a 	slli	r2,r22,16
  20da2c:	0007883a 	mov	r3,zero
  20da30:	1404b03a 	or	r2,r2,r16
  20da34:	00005e06 	br	20dbb0 <__udivdi3+0x2c8>
  20da38:	29c05b36 	bltu	r5,r7,20dba8 <__udivdi3+0x2c0>
  20da3c:	00bfffd4 	movui	r2,65535
  20da40:	11c0672e 	bgeu	r2,r7,20dbe0 <__udivdi3+0x2f8>
  20da44:	00804034 	movhi	r2,256
  20da48:	10bfffc4 	addi	r2,r2,-1
  20da4c:	11c10a36 	bltu	r2,r7,20de78 <__udivdi3+0x590>
  20da50:	00800404 	movi	r2,16
  20da54:	3886d83a 	srl	r3,r7,r2
  20da58:	01000874 	movhi	r4,33
  20da5c:	211ac404 	addi	r4,r4,27408
  20da60:	20c7883a 	add	r3,r4,r3
  20da64:	18c00003 	ldbu	r3,0(r3)
  20da68:	05c00804 	movi	r23,32
  20da6c:	1885883a 	add	r2,r3,r2
  20da70:	b8afc83a 	sub	r23,r23,r2
  20da74:	b800671e 	bne	r23,zero,20dc14 <__udivdi3+0x32c>
  20da78:	3c010536 	bltu	r7,r16,20de90 <__udivdi3+0x5a8>
  20da7c:	9985403a 	cmpgeu	r2,r19,r6
  20da80:	0007883a 	mov	r3,zero
  20da84:	00004a06 	br	20dbb0 <__udivdi3+0x2c8>
  20da88:	3000041e 	bne	r6,zero,20da9c <__udivdi3+0x1b4>
  20da8c:	000b883a 	mov	r5,zero
  20da90:	01000044 	movi	r4,1
  20da94:	02031e80 	call	2031e8 <__udivsi3>
  20da98:	1023883a 	mov	r17,r2
  20da9c:	00bfffd4 	movui	r2,65535
  20daa0:	1440532e 	bgeu	r2,r17,20dbf0 <__udivdi3+0x308>
  20daa4:	00804034 	movhi	r2,256
  20daa8:	10bfffc4 	addi	r2,r2,-1
  20daac:	1440f436 	bltu	r2,r17,20de80 <__udivdi3+0x598>
  20dab0:	00800404 	movi	r2,16
  20dab4:	8886d83a 	srl	r3,r17,r2
  20dab8:	01000874 	movhi	r4,33
  20dabc:	211ac404 	addi	r4,r4,27408
  20dac0:	20c7883a 	add	r3,r4,r3
  20dac4:	18c00003 	ldbu	r3,0(r3)
  20dac8:	1885883a 	add	r2,r3,r2
  20dacc:	00c00804 	movi	r3,32
  20dad0:	1887c83a 	sub	r3,r3,r2
  20dad4:	1800a51e 	bne	r3,zero,20dd6c <__udivdi3+0x484>
  20dad8:	882ad43a 	srli	r21,r17,16
  20dadc:	8461c83a 	sub	r16,r16,r17
  20dae0:	8d3fffcc 	andi	r20,r17,65535
  20dae4:	00c00044 	movi	r3,1
  20dae8:	a80b883a 	mov	r5,r21
  20daec:	8009883a 	mov	r4,r16
  20daf0:	d8c00115 	stw	r3,4(sp)
  20daf4:	020324c0 	call	20324c <__umodsi3>
  20daf8:	a80b883a 	mov	r5,r21
  20dafc:	8009883a 	mov	r4,r16
  20db00:	1027883a 	mov	r19,r2
  20db04:	02031e80 	call	2031e8 <__udivsi3>
  20db08:	a00b883a 	mov	r5,r20
  20db0c:	1009883a 	mov	r4,r2
  20db10:	102d883a 	mov	r22,r2
  20db14:	02032a40 	call	2032a4 <__mulsi3>
  20db18:	9826943a 	slli	r19,r19,16
  20db1c:	900ed43a 	srli	r7,r18,16
  20db20:	d8c00117 	ldw	r3,4(sp)
  20db24:	3cceb03a 	or	r7,r7,r19
  20db28:	3880052e 	bgeu	r7,r2,20db40 <__udivdi3+0x258>
  20db2c:	3c4f883a 	add	r7,r7,r17
  20db30:	b13fffc4 	addi	r4,r22,-1
  20db34:	3c400136 	bltu	r7,r17,20db3c <__udivdi3+0x254>
  20db38:	3880e436 	bltu	r7,r2,20decc <__udivdi3+0x5e4>
  20db3c:	202d883a 	mov	r22,r4
  20db40:	38a1c83a 	sub	r16,r7,r2
  20db44:	8009883a 	mov	r4,r16
  20db48:	a80b883a 	mov	r5,r21
  20db4c:	d8c00115 	stw	r3,4(sp)
  20db50:	020324c0 	call	20324c <__umodsi3>
  20db54:	1027883a 	mov	r19,r2
  20db58:	8009883a 	mov	r4,r16
  20db5c:	a80b883a 	mov	r5,r21
  20db60:	9826943a 	slli	r19,r19,16
  20db64:	02031e80 	call	2031e8 <__udivsi3>
  20db68:	a00b883a 	mov	r5,r20
  20db6c:	1009883a 	mov	r4,r2
  20db70:	94bfffcc 	andi	r18,r18,65535
  20db74:	1021883a 	mov	r16,r2
  20db78:	94e4b03a 	or	r18,r18,r19
  20db7c:	02032a40 	call	2032a4 <__mulsi3>
  20db80:	d8c00117 	ldw	r3,4(sp)
  20db84:	9080052e 	bgeu	r18,r2,20db9c <__udivdi3+0x2b4>
  20db88:	8ca5883a 	add	r18,r17,r18
  20db8c:	813fffc4 	addi	r4,r16,-1
  20db90:	9440ad36 	bltu	r18,r17,20de48 <__udivdi3+0x560>
  20db94:	9080ac2e 	bgeu	r18,r2,20de48 <__udivdi3+0x560>
  20db98:	843fff84 	addi	r16,r16,-2
  20db9c:	b004943a 	slli	r2,r22,16
  20dba0:	1404b03a 	or	r2,r2,r16
  20dba4:	00000206 	br	20dbb0 <__udivdi3+0x2c8>
  20dba8:	0007883a 	mov	r3,zero
  20dbac:	0005883a 	mov	r2,zero
  20dbb0:	dfc00b17 	ldw	ra,44(sp)
  20dbb4:	df000a17 	ldw	fp,40(sp)
  20dbb8:	ddc00917 	ldw	r23,36(sp)
  20dbbc:	dd800817 	ldw	r22,32(sp)
  20dbc0:	dd400717 	ldw	r21,28(sp)
  20dbc4:	dd000617 	ldw	r20,24(sp)
  20dbc8:	dcc00517 	ldw	r19,20(sp)
  20dbcc:	dc800417 	ldw	r18,16(sp)
  20dbd0:	dc400317 	ldw	r17,12(sp)
  20dbd4:	dc000217 	ldw	r16,8(sp)
  20dbd8:	dec00c04 	addi	sp,sp,48
  20dbdc:	f800283a 	ret
  20dbe0:	00803fc4 	movi	r2,255
  20dbe4:	11c5803a 	cmpltu	r2,r2,r7
  20dbe8:	100490fa 	slli	r2,r2,3
  20dbec:	003f9906 	br	20da54 <_gp+0xffdfbe40>
  20dbf0:	00803fc4 	movi	r2,255
  20dbf4:	1445803a 	cmpltu	r2,r2,r17
  20dbf8:	100490fa 	slli	r2,r2,3
  20dbfc:	003fad06 	br	20dab4 <_gp+0xffdfbea0>
  20dc00:	00804034 	movhi	r2,256
  20dc04:	10bfffc4 	addi	r2,r2,-1
  20dc08:	11809f36 	bltu	r2,r6,20de88 <__udivdi3+0x5a0>
  20dc0c:	00800404 	movi	r2,16
  20dc10:	003f4c06 	br	20d944 <_gp+0xffdfbd30>
  20dc14:	3dce983a 	sll	r7,r7,r23
  20dc18:	30b8d83a 	srl	fp,r6,r2
  20dc1c:	80a2d83a 	srl	r17,r16,r2
  20dc20:	35cc983a 	sll	r6,r6,r23
  20dc24:	3f38b03a 	or	fp,r7,fp
  20dc28:	e024d43a 	srli	r18,fp,16
  20dc2c:	9884d83a 	srl	r2,r19,r2
  20dc30:	85e0983a 	sll	r16,r16,r23
  20dc34:	8809883a 	mov	r4,r17
  20dc38:	900b883a 	mov	r5,r18
  20dc3c:	d9800015 	stw	r6,0(sp)
  20dc40:	1420b03a 	or	r16,r2,r16
  20dc44:	020324c0 	call	20324c <__umodsi3>
  20dc48:	900b883a 	mov	r5,r18
  20dc4c:	8809883a 	mov	r4,r17
  20dc50:	1029883a 	mov	r20,r2
  20dc54:	e5bfffcc 	andi	r22,fp,65535
  20dc58:	02031e80 	call	2031e8 <__udivsi3>
  20dc5c:	100b883a 	mov	r5,r2
  20dc60:	b009883a 	mov	r4,r22
  20dc64:	102b883a 	mov	r21,r2
  20dc68:	02032a40 	call	2032a4 <__mulsi3>
  20dc6c:	a028943a 	slli	r20,r20,16
  20dc70:	8006d43a 	srli	r3,r16,16
  20dc74:	1d06b03a 	or	r3,r3,r20
  20dc78:	1880042e 	bgeu	r3,r2,20dc8c <__udivdi3+0x3a4>
  20dc7c:	1f07883a 	add	r3,r3,fp
  20dc80:	a93fffc4 	addi	r4,r21,-1
  20dc84:	1f00892e 	bgeu	r3,fp,20deac <__udivdi3+0x5c4>
  20dc88:	202b883a 	mov	r21,r4
  20dc8c:	18a3c83a 	sub	r17,r3,r2
  20dc90:	8809883a 	mov	r4,r17
  20dc94:	900b883a 	mov	r5,r18
  20dc98:	020324c0 	call	20324c <__umodsi3>
  20dc9c:	1029883a 	mov	r20,r2
  20dca0:	8809883a 	mov	r4,r17
  20dca4:	900b883a 	mov	r5,r18
  20dca8:	a028943a 	slli	r20,r20,16
  20dcac:	02031e80 	call	2031e8 <__udivsi3>
  20dcb0:	100b883a 	mov	r5,r2
  20dcb4:	b009883a 	mov	r4,r22
  20dcb8:	843fffcc 	andi	r16,r16,65535
  20dcbc:	1023883a 	mov	r17,r2
  20dcc0:	8520b03a 	or	r16,r16,r20
  20dcc4:	02032a40 	call	2032a4 <__mulsi3>
  20dcc8:	8080042e 	bgeu	r16,r2,20dcdc <__udivdi3+0x3f4>
  20dccc:	8721883a 	add	r16,r16,fp
  20dcd0:	88ffffc4 	addi	r3,r17,-1
  20dcd4:	8700712e 	bgeu	r16,fp,20de9c <__udivdi3+0x5b4>
  20dcd8:	1823883a 	mov	r17,r3
  20dcdc:	a80e943a 	slli	r7,r21,16
  20dce0:	d8c00017 	ldw	r3,0(sp)
  20dce4:	80a1c83a 	sub	r16,r16,r2
  20dce8:	3c64b03a 	or	r18,r7,r17
  20dcec:	1d3fffcc 	andi	r20,r3,65535
  20dcf0:	9022d43a 	srli	r17,r18,16
  20dcf4:	95bfffcc 	andi	r22,r18,65535
  20dcf8:	a00b883a 	mov	r5,r20
  20dcfc:	b009883a 	mov	r4,r22
  20dd00:	182ad43a 	srli	r21,r3,16
  20dd04:	02032a40 	call	2032a4 <__mulsi3>
  20dd08:	a00b883a 	mov	r5,r20
  20dd0c:	8809883a 	mov	r4,r17
  20dd10:	1039883a 	mov	fp,r2
  20dd14:	02032a40 	call	2032a4 <__mulsi3>
  20dd18:	8809883a 	mov	r4,r17
  20dd1c:	a80b883a 	mov	r5,r21
  20dd20:	1029883a 	mov	r20,r2
  20dd24:	02032a40 	call	2032a4 <__mulsi3>
  20dd28:	a80b883a 	mov	r5,r21
  20dd2c:	b009883a 	mov	r4,r22
  20dd30:	1023883a 	mov	r17,r2
  20dd34:	02032a40 	call	2032a4 <__mulsi3>
  20dd38:	e006d43a 	srli	r3,fp,16
  20dd3c:	1505883a 	add	r2,r2,r20
  20dd40:	1887883a 	add	r3,r3,r2
  20dd44:	1d00022e 	bgeu	r3,r20,20dd50 <__udivdi3+0x468>
  20dd48:	00800074 	movhi	r2,1
  20dd4c:	88a3883a 	add	r17,r17,r2
  20dd50:	1804d43a 	srli	r2,r3,16
  20dd54:	1463883a 	add	r17,r2,r17
  20dd58:	84404436 	bltu	r16,r17,20de6c <__udivdi3+0x584>
  20dd5c:	84403e26 	beq	r16,r17,20de58 <__udivdi3+0x570>
  20dd60:	9005883a 	mov	r2,r18
  20dd64:	0007883a 	mov	r3,zero
  20dd68:	003f9106 	br	20dbb0 <_gp+0xffdfbf9c>
  20dd6c:	88e2983a 	sll	r17,r17,r3
  20dd70:	80aed83a 	srl	r23,r16,r2
  20dd74:	80e0983a 	sll	r16,r16,r3
  20dd78:	882ad43a 	srli	r21,r17,16
  20dd7c:	9884d83a 	srl	r2,r19,r2
  20dd80:	b809883a 	mov	r4,r23
  20dd84:	a80b883a 	mov	r5,r21
  20dd88:	98e4983a 	sll	r18,r19,r3
  20dd8c:	142cb03a 	or	r22,r2,r16
  20dd90:	020324c0 	call	20324c <__umodsi3>
  20dd94:	b809883a 	mov	r4,r23
  20dd98:	a80b883a 	mov	r5,r21
  20dd9c:	1027883a 	mov	r19,r2
  20dda0:	8d3fffcc 	andi	r20,r17,65535
  20dda4:	02031e80 	call	2031e8 <__udivsi3>
  20dda8:	a009883a 	mov	r4,r20
  20ddac:	100b883a 	mov	r5,r2
  20ddb0:	102f883a 	mov	r23,r2
  20ddb4:	02032a40 	call	2032a4 <__mulsi3>
  20ddb8:	9826943a 	slli	r19,r19,16
  20ddbc:	b008d43a 	srli	r4,r22,16
  20ddc0:	24c8b03a 	or	r4,r4,r19
  20ddc4:	2080062e 	bgeu	r4,r2,20dde0 <__udivdi3+0x4f8>
  20ddc8:	2449883a 	add	r4,r4,r17
  20ddcc:	b8ffffc4 	addi	r3,r23,-1
  20ddd0:	24403c36 	bltu	r4,r17,20dec4 <__udivdi3+0x5dc>
  20ddd4:	20803b2e 	bgeu	r4,r2,20dec4 <__udivdi3+0x5dc>
  20ddd8:	bdffff84 	addi	r23,r23,-2
  20dddc:	2449883a 	add	r4,r4,r17
  20dde0:	20a1c83a 	sub	r16,r4,r2
  20dde4:	a80b883a 	mov	r5,r21
  20dde8:	8009883a 	mov	r4,r16
  20ddec:	020324c0 	call	20324c <__umodsi3>
  20ddf0:	a80b883a 	mov	r5,r21
  20ddf4:	8009883a 	mov	r4,r16
  20ddf8:	1027883a 	mov	r19,r2
  20ddfc:	02031e80 	call	2031e8 <__udivsi3>
  20de00:	a009883a 	mov	r4,r20
  20de04:	100b883a 	mov	r5,r2
  20de08:	9826943a 	slli	r19,r19,16
  20de0c:	1039883a 	mov	fp,r2
  20de10:	02032a40 	call	2032a4 <__mulsi3>
  20de14:	b13fffcc 	andi	r4,r22,65535
  20de18:	24c8b03a 	or	r4,r4,r19
  20de1c:	2080062e 	bgeu	r4,r2,20de38 <__udivdi3+0x550>
  20de20:	2449883a 	add	r4,r4,r17
  20de24:	e0ffffc4 	addi	r3,fp,-1
  20de28:	24402436 	bltu	r4,r17,20debc <__udivdi3+0x5d4>
  20de2c:	2080232e 	bgeu	r4,r2,20debc <__udivdi3+0x5d4>
  20de30:	e73fff84 	addi	fp,fp,-2
  20de34:	2449883a 	add	r4,r4,r17
  20de38:	b82e943a 	slli	r23,r23,16
  20de3c:	20a1c83a 	sub	r16,r4,r2
  20de40:	bf06b03a 	or	r3,r23,fp
  20de44:	003f2806 	br	20dae8 <_gp+0xffdfbed4>
  20de48:	2021883a 	mov	r16,r4
  20de4c:	003f5306 	br	20db9c <_gp+0xffdfbf88>
  20de50:	1821883a 	mov	r16,r3
  20de54:	003ef406 	br	20da28 <_gp+0xffdfbe14>
  20de58:	1806943a 	slli	r3,r3,16
  20de5c:	9de6983a 	sll	r19,r19,r23
  20de60:	e73fffcc 	andi	fp,fp,65535
  20de64:	1f07883a 	add	r3,r3,fp
  20de68:	98ffbd2e 	bgeu	r19,r3,20dd60 <_gp+0xffdfc14c>
  20de6c:	90bfffc4 	addi	r2,r18,-1
  20de70:	0007883a 	mov	r3,zero
  20de74:	003f4e06 	br	20dbb0 <_gp+0xffdfbf9c>
  20de78:	00800604 	movi	r2,24
  20de7c:	003ef506 	br	20da54 <_gp+0xffdfbe40>
  20de80:	00800604 	movi	r2,24
  20de84:	003f0b06 	br	20dab4 <_gp+0xffdfbea0>
  20de88:	00800604 	movi	r2,24
  20de8c:	003ead06 	br	20d944 <_gp+0xffdfbd30>
  20de90:	0007883a 	mov	r3,zero
  20de94:	00800044 	movi	r2,1
  20de98:	003f4506 	br	20dbb0 <_gp+0xffdfbf9c>
  20de9c:	80bf8e2e 	bgeu	r16,r2,20dcd8 <_gp+0xffdfc0c4>
  20dea0:	8c7fff84 	addi	r17,r17,-2
  20dea4:	8721883a 	add	r16,r16,fp
  20dea8:	003f8c06 	br	20dcdc <_gp+0xffdfc0c8>
  20deac:	18bf762e 	bgeu	r3,r2,20dc88 <_gp+0xffdfc074>
  20deb0:	ad7fff84 	addi	r21,r21,-2
  20deb4:	1f07883a 	add	r3,r3,fp
  20deb8:	003f7406 	br	20dc8c <_gp+0xffdfc078>
  20debc:	1839883a 	mov	fp,r3
  20dec0:	003fdd06 	br	20de38 <_gp+0xffdfc224>
  20dec4:	182f883a 	mov	r23,r3
  20dec8:	003fc506 	br	20dde0 <_gp+0xffdfc1cc>
  20decc:	b5bfff84 	addi	r22,r22,-2
  20ded0:	3c4f883a 	add	r7,r7,r17
  20ded4:	003f1a06 	br	20db40 <_gp+0xffdfbf2c>
  20ded8:	b5bfff84 	addi	r22,r22,-2
  20dedc:	1c47883a 	add	r3,r3,r17
  20dee0:	003ebc06 	br	20d9d4 <_gp+0xffdfbdc0>

0020dee4 <__umoddi3>:
  20dee4:	defff304 	addi	sp,sp,-52
  20dee8:	df000b15 	stw	fp,44(sp)
  20deec:	dc400415 	stw	r17,16(sp)
  20def0:	dc000315 	stw	r16,12(sp)
  20def4:	dfc00c15 	stw	ra,48(sp)
  20def8:	ddc00a15 	stw	r23,40(sp)
  20defc:	dd800915 	stw	r22,36(sp)
  20df00:	dd400815 	stw	r21,32(sp)
  20df04:	dd000715 	stw	r20,28(sp)
  20df08:	dcc00615 	stw	r19,24(sp)
  20df0c:	dc800515 	stw	r18,20(sp)
  20df10:	2021883a 	mov	r16,r4
  20df14:	2823883a 	mov	r17,r5
  20df18:	2839883a 	mov	fp,r5
  20df1c:	3800401e 	bne	r7,zero,20e020 <__umoddi3+0x13c>
  20df20:	3027883a 	mov	r19,r6
  20df24:	2029883a 	mov	r20,r4
  20df28:	2980552e 	bgeu	r5,r6,20e080 <__umoddi3+0x19c>
  20df2c:	00bfffd4 	movui	r2,65535
  20df30:	1180a236 	bltu	r2,r6,20e1bc <__umoddi3+0x2d8>
  20df34:	01003fc4 	movi	r4,255
  20df38:	2189803a 	cmpltu	r4,r4,r6
  20df3c:	200890fa 	slli	r4,r4,3
  20df40:	3104d83a 	srl	r2,r6,r4
  20df44:	00c00874 	movhi	r3,33
  20df48:	18dac404 	addi	r3,r3,27408
  20df4c:	1885883a 	add	r2,r3,r2
  20df50:	10c00003 	ldbu	r3,0(r2)
  20df54:	00800804 	movi	r2,32
  20df58:	1909883a 	add	r4,r3,r4
  20df5c:	1125c83a 	sub	r18,r2,r4
  20df60:	90000526 	beq	r18,zero,20df78 <__umoddi3+0x94>
  20df64:	8ca2983a 	sll	r17,r17,r18
  20df68:	8108d83a 	srl	r4,r16,r4
  20df6c:	34a6983a 	sll	r19,r6,r18
  20df70:	84a8983a 	sll	r20,r16,r18
  20df74:	2478b03a 	or	fp,r4,r17
  20df78:	982cd43a 	srli	r22,r19,16
  20df7c:	e009883a 	mov	r4,fp
  20df80:	9dffffcc 	andi	r23,r19,65535
  20df84:	b00b883a 	mov	r5,r22
  20df88:	020324c0 	call	20324c <__umodsi3>
  20df8c:	b00b883a 	mov	r5,r22
  20df90:	e009883a 	mov	r4,fp
  20df94:	102b883a 	mov	r21,r2
  20df98:	02031e80 	call	2031e8 <__udivsi3>
  20df9c:	100b883a 	mov	r5,r2
  20dfa0:	b809883a 	mov	r4,r23
  20dfa4:	02032a40 	call	2032a4 <__mulsi3>
  20dfa8:	a82a943a 	slli	r21,r21,16
  20dfac:	a006d43a 	srli	r3,r20,16
  20dfb0:	1d46b03a 	or	r3,r3,r21
  20dfb4:	1880032e 	bgeu	r3,r2,20dfc4 <__umoddi3+0xe0>
  20dfb8:	1cc7883a 	add	r3,r3,r19
  20dfbc:	1cc00136 	bltu	r3,r19,20dfc4 <__umoddi3+0xe0>
  20dfc0:	18813136 	bltu	r3,r2,20e488 <__umoddi3+0x5a4>
  20dfc4:	18a1c83a 	sub	r16,r3,r2
  20dfc8:	b00b883a 	mov	r5,r22
  20dfcc:	8009883a 	mov	r4,r16
  20dfd0:	020324c0 	call	20324c <__umodsi3>
  20dfd4:	b00b883a 	mov	r5,r22
  20dfd8:	8009883a 	mov	r4,r16
  20dfdc:	1023883a 	mov	r17,r2
  20dfe0:	02031e80 	call	2031e8 <__udivsi3>
  20dfe4:	100b883a 	mov	r5,r2
  20dfe8:	b809883a 	mov	r4,r23
  20dfec:	8822943a 	slli	r17,r17,16
  20dff0:	02032a40 	call	2032a4 <__mulsi3>
  20dff4:	a0ffffcc 	andi	r3,r20,65535
  20dff8:	1c46b03a 	or	r3,r3,r17
  20dffc:	1880042e 	bgeu	r3,r2,20e010 <__umoddi3+0x12c>
  20e000:	1cc7883a 	add	r3,r3,r19
  20e004:	1cc00236 	bltu	r3,r19,20e010 <__umoddi3+0x12c>
  20e008:	1880012e 	bgeu	r3,r2,20e010 <__umoddi3+0x12c>
  20e00c:	1cc7883a 	add	r3,r3,r19
  20e010:	1885c83a 	sub	r2,r3,r2
  20e014:	1484d83a 	srl	r2,r2,r18
  20e018:	0007883a 	mov	r3,zero
  20e01c:	00005306 	br	20e16c <__umoddi3+0x288>
  20e020:	29c05036 	bltu	r5,r7,20e164 <__umoddi3+0x280>
  20e024:	00bfffd4 	movui	r2,65535
  20e028:	11c05c2e 	bgeu	r2,r7,20e19c <__umoddi3+0x2b8>
  20e02c:	00804034 	movhi	r2,256
  20e030:	10bfffc4 	addi	r2,r2,-1
  20e034:	11c10636 	bltu	r2,r7,20e450 <__umoddi3+0x56c>
  20e038:	01000404 	movi	r4,16
  20e03c:	3904d83a 	srl	r2,r7,r4
  20e040:	00c00874 	movhi	r3,33
  20e044:	18dac404 	addi	r3,r3,27408
  20e048:	1885883a 	add	r2,r3,r2
  20e04c:	14c00003 	ldbu	r19,0(r2)
  20e050:	00c00804 	movi	r3,32
  20e054:	9927883a 	add	r19,r19,r4
  20e058:	1ce9c83a 	sub	r20,r3,r19
  20e05c:	a0005c1e 	bne	r20,zero,20e1d0 <__umoddi3+0x2ec>
  20e060:	3c400136 	bltu	r7,r17,20e068 <__umoddi3+0x184>
  20e064:	81810a36 	bltu	r16,r6,20e490 <__umoddi3+0x5ac>
  20e068:	8185c83a 	sub	r2,r16,r6
  20e06c:	89e3c83a 	sub	r17,r17,r7
  20e070:	8089803a 	cmpltu	r4,r16,r2
  20e074:	8939c83a 	sub	fp,r17,r4
  20e078:	e007883a 	mov	r3,fp
  20e07c:	00003b06 	br	20e16c <__umoddi3+0x288>
  20e080:	3000041e 	bne	r6,zero,20e094 <__umoddi3+0x1b0>
  20e084:	000b883a 	mov	r5,zero
  20e088:	01000044 	movi	r4,1
  20e08c:	02031e80 	call	2031e8 <__udivsi3>
  20e090:	1027883a 	mov	r19,r2
  20e094:	00bfffd4 	movui	r2,65535
  20e098:	14c0442e 	bgeu	r2,r19,20e1ac <__umoddi3+0x2c8>
  20e09c:	00804034 	movhi	r2,256
  20e0a0:	10bfffc4 	addi	r2,r2,-1
  20e0a4:	14c0ec36 	bltu	r2,r19,20e458 <__umoddi3+0x574>
  20e0a8:	00800404 	movi	r2,16
  20e0ac:	9886d83a 	srl	r3,r19,r2
  20e0b0:	01000874 	movhi	r4,33
  20e0b4:	211ac404 	addi	r4,r4,27408
  20e0b8:	20c7883a 	add	r3,r4,r3
  20e0bc:	18c00003 	ldbu	r3,0(r3)
  20e0c0:	1887883a 	add	r3,r3,r2
  20e0c4:	00800804 	movi	r2,32
  20e0c8:	10e5c83a 	sub	r18,r2,r3
  20e0cc:	9000ab1e 	bne	r18,zero,20e37c <__umoddi3+0x498>
  20e0d0:	982cd43a 	srli	r22,r19,16
  20e0d4:	8ce3c83a 	sub	r17,r17,r19
  20e0d8:	9dffffcc 	andi	r23,r19,65535
  20e0dc:	b00b883a 	mov	r5,r22
  20e0e0:	8809883a 	mov	r4,r17
  20e0e4:	020324c0 	call	20324c <__umodsi3>
  20e0e8:	b00b883a 	mov	r5,r22
  20e0ec:	8809883a 	mov	r4,r17
  20e0f0:	102b883a 	mov	r21,r2
  20e0f4:	02031e80 	call	2031e8 <__udivsi3>
  20e0f8:	b80b883a 	mov	r5,r23
  20e0fc:	1009883a 	mov	r4,r2
  20e100:	02032a40 	call	2032a4 <__mulsi3>
  20e104:	a82a943a 	slli	r21,r21,16
  20e108:	a006d43a 	srli	r3,r20,16
  20e10c:	1d46b03a 	or	r3,r3,r21
  20e110:	1880042e 	bgeu	r3,r2,20e124 <__umoddi3+0x240>
  20e114:	1cc7883a 	add	r3,r3,r19
  20e118:	1cc00236 	bltu	r3,r19,20e124 <__umoddi3+0x240>
  20e11c:	1880012e 	bgeu	r3,r2,20e124 <__umoddi3+0x240>
  20e120:	1cc7883a 	add	r3,r3,r19
  20e124:	18a1c83a 	sub	r16,r3,r2
  20e128:	b00b883a 	mov	r5,r22
  20e12c:	8009883a 	mov	r4,r16
  20e130:	020324c0 	call	20324c <__umodsi3>
  20e134:	1023883a 	mov	r17,r2
  20e138:	b00b883a 	mov	r5,r22
  20e13c:	8009883a 	mov	r4,r16
  20e140:	02031e80 	call	2031e8 <__udivsi3>
  20e144:	8822943a 	slli	r17,r17,16
  20e148:	b80b883a 	mov	r5,r23
  20e14c:	1009883a 	mov	r4,r2
  20e150:	02032a40 	call	2032a4 <__mulsi3>
  20e154:	a53fffcc 	andi	r20,r20,65535
  20e158:	a446b03a 	or	r3,r20,r17
  20e15c:	18bfac2e 	bgeu	r3,r2,20e010 <_gp+0xffdfc3fc>
  20e160:	003fa706 	br	20e000 <_gp+0xffdfc3ec>
  20e164:	2005883a 	mov	r2,r4
  20e168:	2807883a 	mov	r3,r5
  20e16c:	dfc00c17 	ldw	ra,48(sp)
  20e170:	df000b17 	ldw	fp,44(sp)
  20e174:	ddc00a17 	ldw	r23,40(sp)
  20e178:	dd800917 	ldw	r22,36(sp)
  20e17c:	dd400817 	ldw	r21,32(sp)
  20e180:	dd000717 	ldw	r20,28(sp)
  20e184:	dcc00617 	ldw	r19,24(sp)
  20e188:	dc800517 	ldw	r18,20(sp)
  20e18c:	dc400417 	ldw	r17,16(sp)
  20e190:	dc000317 	ldw	r16,12(sp)
  20e194:	dec00d04 	addi	sp,sp,52
  20e198:	f800283a 	ret
  20e19c:	04c03fc4 	movi	r19,255
  20e1a0:	99c9803a 	cmpltu	r4,r19,r7
  20e1a4:	200890fa 	slli	r4,r4,3
  20e1a8:	003fa406 	br	20e03c <_gp+0xffdfc428>
  20e1ac:	00803fc4 	movi	r2,255
  20e1b0:	14c5803a 	cmpltu	r2,r2,r19
  20e1b4:	100490fa 	slli	r2,r2,3
  20e1b8:	003fbc06 	br	20e0ac <_gp+0xffdfc498>
  20e1bc:	00804034 	movhi	r2,256
  20e1c0:	10bfffc4 	addi	r2,r2,-1
  20e1c4:	1180a636 	bltu	r2,r6,20e460 <__umoddi3+0x57c>
  20e1c8:	01000404 	movi	r4,16
  20e1cc:	003f5c06 	br	20df40 <_gp+0xffdfc32c>
  20e1d0:	3d0e983a 	sll	r7,r7,r20
  20e1d4:	34ead83a 	srl	r21,r6,r19
  20e1d8:	8cc6d83a 	srl	r3,r17,r19
  20e1dc:	8d10983a 	sll	r8,r17,r20
  20e1e0:	3d6ab03a 	or	r21,r7,r21
  20e1e4:	a82cd43a 	srli	r22,r21,16
  20e1e8:	84e2d83a 	srl	r17,r16,r19
  20e1ec:	1809883a 	mov	r4,r3
  20e1f0:	b00b883a 	mov	r5,r22
  20e1f4:	8a22b03a 	or	r17,r17,r8
  20e1f8:	3524983a 	sll	r18,r6,r20
  20e1fc:	dc400015 	stw	r17,0(sp)
  20e200:	d8c00115 	stw	r3,4(sp)
  20e204:	020324c0 	call	20324c <__umodsi3>
  20e208:	d8c00117 	ldw	r3,4(sp)
  20e20c:	b00b883a 	mov	r5,r22
  20e210:	1039883a 	mov	fp,r2
  20e214:	1809883a 	mov	r4,r3
  20e218:	02031e80 	call	2031e8 <__udivsi3>
  20e21c:	adffffcc 	andi	r23,r21,65535
  20e220:	100b883a 	mov	r5,r2
  20e224:	b809883a 	mov	r4,r23
  20e228:	1023883a 	mov	r17,r2
  20e22c:	02032a40 	call	2032a4 <__mulsi3>
  20e230:	d9400017 	ldw	r5,0(sp)
  20e234:	e008943a 	slli	r4,fp,16
  20e238:	8520983a 	sll	r16,r16,r20
  20e23c:	2806d43a 	srli	r3,r5,16
  20e240:	1906b03a 	or	r3,r3,r4
  20e244:	1880042e 	bgeu	r3,r2,20e258 <__umoddi3+0x374>
  20e248:	1d47883a 	add	r3,r3,r21
  20e24c:	893fffc4 	addi	r4,r17,-1
  20e250:	1d40892e 	bgeu	r3,r21,20e478 <__umoddi3+0x594>
  20e254:	2023883a 	mov	r17,r4
  20e258:	18b9c83a 	sub	fp,r3,r2
  20e25c:	b00b883a 	mov	r5,r22
  20e260:	e009883a 	mov	r4,fp
  20e264:	020324c0 	call	20324c <__umodsi3>
  20e268:	b00b883a 	mov	r5,r22
  20e26c:	e009883a 	mov	r4,fp
  20e270:	d8800215 	stw	r2,8(sp)
  20e274:	02031e80 	call	2031e8 <__udivsi3>
  20e278:	100b883a 	mov	r5,r2
  20e27c:	b809883a 	mov	r4,r23
  20e280:	102d883a 	mov	r22,r2
  20e284:	02032a40 	call	2032a4 <__mulsi3>
  20e288:	d9800217 	ldw	r6,8(sp)
  20e28c:	d8c00017 	ldw	r3,0(sp)
  20e290:	300c943a 	slli	r6,r6,16
  20e294:	1a3fffcc 	andi	r8,r3,65535
  20e298:	4190b03a 	or	r8,r8,r6
  20e29c:	4080042e 	bgeu	r8,r2,20e2b0 <__umoddi3+0x3cc>
  20e2a0:	4551883a 	add	r8,r8,r21
  20e2a4:	b0ffffc4 	addi	r3,r22,-1
  20e2a8:	45406f2e 	bgeu	r8,r21,20e468 <__umoddi3+0x584>
  20e2ac:	182d883a 	mov	r22,r3
  20e2b0:	880e943a 	slli	r7,r17,16
  20e2b4:	9006d43a 	srli	r3,r18,16
  20e2b8:	91bfffcc 	andi	r6,r18,65535
  20e2bc:	3dacb03a 	or	r22,r7,r22
  20e2c0:	b02ed43a 	srli	r23,r22,16
  20e2c4:	b5bfffcc 	andi	r22,r22,65535
  20e2c8:	300b883a 	mov	r5,r6
  20e2cc:	b009883a 	mov	r4,r22
  20e2d0:	40a3c83a 	sub	r17,r8,r2
  20e2d4:	d8c00115 	stw	r3,4(sp)
  20e2d8:	d9800215 	stw	r6,8(sp)
  20e2dc:	02032a40 	call	2032a4 <__mulsi3>
  20e2e0:	d9800217 	ldw	r6,8(sp)
  20e2e4:	b809883a 	mov	r4,r23
  20e2e8:	1039883a 	mov	fp,r2
  20e2ec:	300b883a 	mov	r5,r6
  20e2f0:	02032a40 	call	2032a4 <__mulsi3>
  20e2f4:	d8c00117 	ldw	r3,4(sp)
  20e2f8:	b809883a 	mov	r4,r23
  20e2fc:	d8800215 	stw	r2,8(sp)
  20e300:	180b883a 	mov	r5,r3
  20e304:	02032a40 	call	2032a4 <__mulsi3>
  20e308:	d8c00117 	ldw	r3,4(sp)
  20e30c:	b009883a 	mov	r4,r22
  20e310:	102f883a 	mov	r23,r2
  20e314:	180b883a 	mov	r5,r3
  20e318:	02032a40 	call	2032a4 <__mulsi3>
  20e31c:	d9800217 	ldw	r6,8(sp)
  20e320:	e006d43a 	srli	r3,fp,16
  20e324:	1185883a 	add	r2,r2,r6
  20e328:	1885883a 	add	r2,r3,r2
  20e32c:	1180022e 	bgeu	r2,r6,20e338 <__umoddi3+0x454>
  20e330:	00c00074 	movhi	r3,1
  20e334:	b8ef883a 	add	r23,r23,r3
  20e338:	1006d43a 	srli	r3,r2,16
  20e33c:	1004943a 	slli	r2,r2,16
  20e340:	e73fffcc 	andi	fp,fp,65535
  20e344:	1dc7883a 	add	r3,r3,r23
  20e348:	1739883a 	add	fp,r2,fp
  20e34c:	88c03a36 	bltu	r17,r3,20e438 <__umoddi3+0x554>
  20e350:	88c05126 	beq	r17,r3,20e498 <__umoddi3+0x5b4>
  20e354:	88c9c83a 	sub	r4,r17,r3
  20e358:	e00f883a 	mov	r7,fp
  20e35c:	81cfc83a 	sub	r7,r16,r7
  20e360:	81c7803a 	cmpltu	r3,r16,r7
  20e364:	20c7c83a 	sub	r3,r4,r3
  20e368:	1cc4983a 	sll	r2,r3,r19
  20e36c:	3d0ed83a 	srl	r7,r7,r20
  20e370:	1d06d83a 	srl	r3,r3,r20
  20e374:	11c4b03a 	or	r2,r2,r7
  20e378:	003f7c06 	br	20e16c <_gp+0xffdfc558>
  20e37c:	9ca6983a 	sll	r19,r19,r18
  20e380:	88f8d83a 	srl	fp,r17,r3
  20e384:	80c4d83a 	srl	r2,r16,r3
  20e388:	982cd43a 	srli	r22,r19,16
  20e38c:	8ca2983a 	sll	r17,r17,r18
  20e390:	e009883a 	mov	r4,fp
  20e394:	b00b883a 	mov	r5,r22
  20e398:	146ab03a 	or	r21,r2,r17
  20e39c:	020324c0 	call	20324c <__umodsi3>
  20e3a0:	b00b883a 	mov	r5,r22
  20e3a4:	e009883a 	mov	r4,fp
  20e3a8:	1029883a 	mov	r20,r2
  20e3ac:	9dffffcc 	andi	r23,r19,65535
  20e3b0:	02031e80 	call	2031e8 <__udivsi3>
  20e3b4:	b809883a 	mov	r4,r23
  20e3b8:	100b883a 	mov	r5,r2
  20e3bc:	02032a40 	call	2032a4 <__mulsi3>
  20e3c0:	a008943a 	slli	r4,r20,16
  20e3c4:	a806d43a 	srli	r3,r21,16
  20e3c8:	84a8983a 	sll	r20,r16,r18
  20e3cc:	1906b03a 	or	r3,r3,r4
  20e3d0:	1880042e 	bgeu	r3,r2,20e3e4 <__umoddi3+0x500>
  20e3d4:	1cc7883a 	add	r3,r3,r19
  20e3d8:	1cc00236 	bltu	r3,r19,20e3e4 <__umoddi3+0x500>
  20e3dc:	1880012e 	bgeu	r3,r2,20e3e4 <__umoddi3+0x500>
  20e3e0:	1cc7883a 	add	r3,r3,r19
  20e3e4:	18a3c83a 	sub	r17,r3,r2
  20e3e8:	b00b883a 	mov	r5,r22
  20e3ec:	8809883a 	mov	r4,r17
  20e3f0:	020324c0 	call	20324c <__umodsi3>
  20e3f4:	b00b883a 	mov	r5,r22
  20e3f8:	8809883a 	mov	r4,r17
  20e3fc:	1021883a 	mov	r16,r2
  20e400:	02031e80 	call	2031e8 <__udivsi3>
  20e404:	100b883a 	mov	r5,r2
  20e408:	b809883a 	mov	r4,r23
  20e40c:	8020943a 	slli	r16,r16,16
  20e410:	02032a40 	call	2032a4 <__mulsi3>
  20e414:	a8ffffcc 	andi	r3,r21,65535
  20e418:	1c06b03a 	or	r3,r3,r16
  20e41c:	1880042e 	bgeu	r3,r2,20e430 <__umoddi3+0x54c>
  20e420:	1cc7883a 	add	r3,r3,r19
  20e424:	1cc00236 	bltu	r3,r19,20e430 <__umoddi3+0x54c>
  20e428:	1880012e 	bgeu	r3,r2,20e430 <__umoddi3+0x54c>
  20e42c:	1cc7883a 	add	r3,r3,r19
  20e430:	18a3c83a 	sub	r17,r3,r2
  20e434:	003f2906 	br	20e0dc <_gp+0xffdfc4c8>
  20e438:	e48fc83a 	sub	r7,fp,r18
  20e43c:	1d49c83a 	sub	r4,r3,r21
  20e440:	e1f9803a 	cmpltu	fp,fp,r7
  20e444:	2739c83a 	sub	fp,r4,fp
  20e448:	8f09c83a 	sub	r4,r17,fp
  20e44c:	003fc306 	br	20e35c <_gp+0xffdfc748>
  20e450:	01000604 	movi	r4,24
  20e454:	003ef906 	br	20e03c <_gp+0xffdfc428>
  20e458:	00800604 	movi	r2,24
  20e45c:	003f1306 	br	20e0ac <_gp+0xffdfc498>
  20e460:	01000604 	movi	r4,24
  20e464:	003eb606 	br	20df40 <_gp+0xffdfc32c>
  20e468:	40bf902e 	bgeu	r8,r2,20e2ac <_gp+0xffdfc698>
  20e46c:	b5bfff84 	addi	r22,r22,-2
  20e470:	4551883a 	add	r8,r8,r21
  20e474:	003f8e06 	br	20e2b0 <_gp+0xffdfc69c>
  20e478:	18bf762e 	bgeu	r3,r2,20e254 <_gp+0xffdfc640>
  20e47c:	8c7fff84 	addi	r17,r17,-2
  20e480:	1d47883a 	add	r3,r3,r21
  20e484:	003f7406 	br	20e258 <_gp+0xffdfc644>
  20e488:	1cc7883a 	add	r3,r3,r19
  20e48c:	003ecd06 	br	20dfc4 <_gp+0xffdfc3b0>
  20e490:	8005883a 	mov	r2,r16
  20e494:	003ef806 	br	20e078 <_gp+0xffdfc464>
  20e498:	873fe736 	bltu	r16,fp,20e438 <_gp+0xffdfc824>
  20e49c:	e00f883a 	mov	r7,fp
  20e4a0:	0009883a 	mov	r4,zero
  20e4a4:	003fad06 	br	20e35c <_gp+0xffdfc748>

0020e4a8 <__adddf3>:
  20e4a8:	02c00434 	movhi	r11,16
  20e4ac:	5affffc4 	addi	r11,r11,-1
  20e4b0:	2806d7fa 	srli	r3,r5,31
  20e4b4:	2ad4703a 	and	r10,r5,r11
  20e4b8:	3ad2703a 	and	r9,r7,r11
  20e4bc:	3804d53a 	srli	r2,r7,20
  20e4c0:	3018d77a 	srli	r12,r6,29
  20e4c4:	280ad53a 	srli	r5,r5,20
  20e4c8:	501490fa 	slli	r10,r10,3
  20e4cc:	2010d77a 	srli	r8,r4,29
  20e4d0:	481290fa 	slli	r9,r9,3
  20e4d4:	380ed7fa 	srli	r7,r7,31
  20e4d8:	defffb04 	addi	sp,sp,-20
  20e4dc:	dc800215 	stw	r18,8(sp)
  20e4e0:	dc400115 	stw	r17,4(sp)
  20e4e4:	dc000015 	stw	r16,0(sp)
  20e4e8:	dfc00415 	stw	ra,16(sp)
  20e4ec:	dcc00315 	stw	r19,12(sp)
  20e4f0:	1c803fcc 	andi	r18,r3,255
  20e4f4:	2c01ffcc 	andi	r16,r5,2047
  20e4f8:	5210b03a 	or	r8,r10,r8
  20e4fc:	202290fa 	slli	r17,r4,3
  20e500:	1081ffcc 	andi	r2,r2,2047
  20e504:	4b12b03a 	or	r9,r9,r12
  20e508:	300c90fa 	slli	r6,r6,3
  20e50c:	91c07526 	beq	r18,r7,20e6e4 <__adddf3+0x23c>
  20e510:	8087c83a 	sub	r3,r16,r2
  20e514:	00c0ab0e 	bge	zero,r3,20e7c4 <__adddf3+0x31c>
  20e518:	10002a1e 	bne	r2,zero,20e5c4 <__adddf3+0x11c>
  20e51c:	4984b03a 	or	r2,r9,r6
  20e520:	1000961e 	bne	r2,zero,20e77c <__adddf3+0x2d4>
  20e524:	888001cc 	andi	r2,r17,7
  20e528:	10000726 	beq	r2,zero,20e548 <__adddf3+0xa0>
  20e52c:	888003cc 	andi	r2,r17,15
  20e530:	00c00104 	movi	r3,4
  20e534:	10c00426 	beq	r2,r3,20e548 <__adddf3+0xa0>
  20e538:	88c7883a 	add	r3,r17,r3
  20e53c:	1c63803a 	cmpltu	r17,r3,r17
  20e540:	4451883a 	add	r8,r8,r17
  20e544:	1823883a 	mov	r17,r3
  20e548:	4080202c 	andhi	r2,r8,128
  20e54c:	10005926 	beq	r2,zero,20e6b4 <__adddf3+0x20c>
  20e550:	84000044 	addi	r16,r16,1
  20e554:	0081ffc4 	movi	r2,2047
  20e558:	8080ba26 	beq	r16,r2,20e844 <__adddf3+0x39c>
  20e55c:	00bfe034 	movhi	r2,65408
  20e560:	10bfffc4 	addi	r2,r2,-1
  20e564:	4090703a 	and	r8,r8,r2
  20e568:	4004977a 	slli	r2,r8,29
  20e56c:	4010927a 	slli	r8,r8,9
  20e570:	8822d0fa 	srli	r17,r17,3
  20e574:	8401ffcc 	andi	r16,r16,2047
  20e578:	4010d33a 	srli	r8,r8,12
  20e57c:	9007883a 	mov	r3,r18
  20e580:	1444b03a 	or	r2,r2,r17
  20e584:	8401ffcc 	andi	r16,r16,2047
  20e588:	8020953a 	slli	r16,r16,20
  20e58c:	18c03fcc 	andi	r3,r3,255
  20e590:	01000434 	movhi	r4,16
  20e594:	213fffc4 	addi	r4,r4,-1
  20e598:	180697fa 	slli	r3,r3,31
  20e59c:	4110703a 	and	r8,r8,r4
  20e5a0:	4410b03a 	or	r8,r8,r16
  20e5a4:	40c6b03a 	or	r3,r8,r3
  20e5a8:	dfc00417 	ldw	ra,16(sp)
  20e5ac:	dcc00317 	ldw	r19,12(sp)
  20e5b0:	dc800217 	ldw	r18,8(sp)
  20e5b4:	dc400117 	ldw	r17,4(sp)
  20e5b8:	dc000017 	ldw	r16,0(sp)
  20e5bc:	dec00504 	addi	sp,sp,20
  20e5c0:	f800283a 	ret
  20e5c4:	0081ffc4 	movi	r2,2047
  20e5c8:	80bfd626 	beq	r16,r2,20e524 <_gp+0xffdfc910>
  20e5cc:	4a402034 	orhi	r9,r9,128
  20e5d0:	00800e04 	movi	r2,56
  20e5d4:	10c09f16 	blt	r2,r3,20e854 <__adddf3+0x3ac>
  20e5d8:	008007c4 	movi	r2,31
  20e5dc:	10c0c216 	blt	r2,r3,20e8e8 <__adddf3+0x440>
  20e5e0:	00800804 	movi	r2,32
  20e5e4:	10c5c83a 	sub	r2,r2,r3
  20e5e8:	488a983a 	sll	r5,r9,r2
  20e5ec:	30c8d83a 	srl	r4,r6,r3
  20e5f0:	3084983a 	sll	r2,r6,r2
  20e5f4:	48c6d83a 	srl	r3,r9,r3
  20e5f8:	290cb03a 	or	r6,r5,r4
  20e5fc:	1004c03a 	cmpne	r2,r2,zero
  20e600:	308cb03a 	or	r6,r6,r2
  20e604:	898dc83a 	sub	r6,r17,r6
  20e608:	89a3803a 	cmpltu	r17,r17,r6
  20e60c:	40d1c83a 	sub	r8,r8,r3
  20e610:	4451c83a 	sub	r8,r8,r17
  20e614:	3023883a 	mov	r17,r6
  20e618:	4080202c 	andhi	r2,r8,128
  20e61c:	10002326 	beq	r2,zero,20e6ac <__adddf3+0x204>
  20e620:	04c02034 	movhi	r19,128
  20e624:	9cffffc4 	addi	r19,r19,-1
  20e628:	44e6703a 	and	r19,r8,r19
  20e62c:	98007626 	beq	r19,zero,20e808 <__adddf3+0x360>
  20e630:	9809883a 	mov	r4,r19
  20e634:	0203dfc0 	call	203dfc <__clzsi2>
  20e638:	10fffe04 	addi	r3,r2,-8
  20e63c:	010007c4 	movi	r4,31
  20e640:	20c07716 	blt	r4,r3,20e820 <__adddf3+0x378>
  20e644:	00800804 	movi	r2,32
  20e648:	10c5c83a 	sub	r2,r2,r3
  20e64c:	8884d83a 	srl	r2,r17,r2
  20e650:	98d0983a 	sll	r8,r19,r3
  20e654:	88e2983a 	sll	r17,r17,r3
  20e658:	1204b03a 	or	r2,r2,r8
  20e65c:	1c007416 	blt	r3,r16,20e830 <__adddf3+0x388>
  20e660:	1c21c83a 	sub	r16,r3,r16
  20e664:	82000044 	addi	r8,r16,1
  20e668:	00c007c4 	movi	r3,31
  20e66c:	1a009116 	blt	r3,r8,20e8b4 <__adddf3+0x40c>
  20e670:	00c00804 	movi	r3,32
  20e674:	1a07c83a 	sub	r3,r3,r8
  20e678:	8a08d83a 	srl	r4,r17,r8
  20e67c:	88e2983a 	sll	r17,r17,r3
  20e680:	10c6983a 	sll	r3,r2,r3
  20e684:	1210d83a 	srl	r8,r2,r8
  20e688:	8804c03a 	cmpne	r2,r17,zero
  20e68c:	1906b03a 	or	r3,r3,r4
  20e690:	18a2b03a 	or	r17,r3,r2
  20e694:	0021883a 	mov	r16,zero
  20e698:	003fa206 	br	20e524 <_gp+0xffdfc910>
  20e69c:	1890b03a 	or	r8,r3,r2
  20e6a0:	40017d26 	beq	r8,zero,20ec98 <__adddf3+0x7f0>
  20e6a4:	1011883a 	mov	r8,r2
  20e6a8:	1823883a 	mov	r17,r3
  20e6ac:	888001cc 	andi	r2,r17,7
  20e6b0:	103f9e1e 	bne	r2,zero,20e52c <_gp+0xffdfc918>
  20e6b4:	4004977a 	slli	r2,r8,29
  20e6b8:	8822d0fa 	srli	r17,r17,3
  20e6bc:	4010d0fa 	srli	r8,r8,3
  20e6c0:	9007883a 	mov	r3,r18
  20e6c4:	1444b03a 	or	r2,r2,r17
  20e6c8:	0101ffc4 	movi	r4,2047
  20e6cc:	81002426 	beq	r16,r4,20e760 <__adddf3+0x2b8>
  20e6d0:	8120703a 	and	r16,r16,r4
  20e6d4:	01000434 	movhi	r4,16
  20e6d8:	213fffc4 	addi	r4,r4,-1
  20e6dc:	4110703a 	and	r8,r8,r4
  20e6e0:	003fa806 	br	20e584 <_gp+0xffdfc970>
  20e6e4:	8089c83a 	sub	r4,r16,r2
  20e6e8:	01005e0e 	bge	zero,r4,20e864 <__adddf3+0x3bc>
  20e6ec:	10002b26 	beq	r2,zero,20e79c <__adddf3+0x2f4>
  20e6f0:	0081ffc4 	movi	r2,2047
  20e6f4:	80bf8b26 	beq	r16,r2,20e524 <_gp+0xffdfc910>
  20e6f8:	4a402034 	orhi	r9,r9,128
  20e6fc:	00800e04 	movi	r2,56
  20e700:	1100a40e 	bge	r2,r4,20e994 <__adddf3+0x4ec>
  20e704:	498cb03a 	or	r6,r9,r6
  20e708:	300ac03a 	cmpne	r5,r6,zero
  20e70c:	0013883a 	mov	r9,zero
  20e710:	2c4b883a 	add	r5,r5,r17
  20e714:	2c63803a 	cmpltu	r17,r5,r17
  20e718:	4a11883a 	add	r8,r9,r8
  20e71c:	8a11883a 	add	r8,r17,r8
  20e720:	2823883a 	mov	r17,r5
  20e724:	4080202c 	andhi	r2,r8,128
  20e728:	103fe026 	beq	r2,zero,20e6ac <_gp+0xffdfca98>
  20e72c:	84000044 	addi	r16,r16,1
  20e730:	0081ffc4 	movi	r2,2047
  20e734:	8080d226 	beq	r16,r2,20ea80 <__adddf3+0x5d8>
  20e738:	00bfe034 	movhi	r2,65408
  20e73c:	10bfffc4 	addi	r2,r2,-1
  20e740:	4090703a 	and	r8,r8,r2
  20e744:	880ad07a 	srli	r5,r17,1
  20e748:	400897fa 	slli	r4,r8,31
  20e74c:	88c0004c 	andi	r3,r17,1
  20e750:	28e2b03a 	or	r17,r5,r3
  20e754:	4010d07a 	srli	r8,r8,1
  20e758:	2462b03a 	or	r17,r4,r17
  20e75c:	003f7106 	br	20e524 <_gp+0xffdfc910>
  20e760:	4088b03a 	or	r4,r8,r2
  20e764:	20014526 	beq	r4,zero,20ec7c <__adddf3+0x7d4>
  20e768:	01000434 	movhi	r4,16
  20e76c:	42000234 	orhi	r8,r8,8
  20e770:	213fffc4 	addi	r4,r4,-1
  20e774:	4110703a 	and	r8,r8,r4
  20e778:	003f8206 	br	20e584 <_gp+0xffdfc970>
  20e77c:	18ffffc4 	addi	r3,r3,-1
  20e780:	1800491e 	bne	r3,zero,20e8a8 <__adddf3+0x400>
  20e784:	898bc83a 	sub	r5,r17,r6
  20e788:	8963803a 	cmpltu	r17,r17,r5
  20e78c:	4251c83a 	sub	r8,r8,r9
  20e790:	4451c83a 	sub	r8,r8,r17
  20e794:	2823883a 	mov	r17,r5
  20e798:	003f9f06 	br	20e618 <_gp+0xffdfca04>
  20e79c:	4984b03a 	or	r2,r9,r6
  20e7a0:	103f6026 	beq	r2,zero,20e524 <_gp+0xffdfc910>
  20e7a4:	213fffc4 	addi	r4,r4,-1
  20e7a8:	2000931e 	bne	r4,zero,20e9f8 <__adddf3+0x550>
  20e7ac:	898d883a 	add	r6,r17,r6
  20e7b0:	3463803a 	cmpltu	r17,r6,r17
  20e7b4:	4251883a 	add	r8,r8,r9
  20e7b8:	8a11883a 	add	r8,r17,r8
  20e7bc:	3023883a 	mov	r17,r6
  20e7c0:	003fd806 	br	20e724 <_gp+0xffdfcb10>
  20e7c4:	1800541e 	bne	r3,zero,20e918 <__adddf3+0x470>
  20e7c8:	80800044 	addi	r2,r16,1
  20e7cc:	1081ffcc 	andi	r2,r2,2047
  20e7d0:	00c00044 	movi	r3,1
  20e7d4:	1880a00e 	bge	r3,r2,20ea58 <__adddf3+0x5b0>
  20e7d8:	8989c83a 	sub	r4,r17,r6
  20e7dc:	8905803a 	cmpltu	r2,r17,r4
  20e7e0:	4267c83a 	sub	r19,r8,r9
  20e7e4:	98a7c83a 	sub	r19,r19,r2
  20e7e8:	9880202c 	andhi	r2,r19,128
  20e7ec:	10006326 	beq	r2,zero,20e97c <__adddf3+0x4d4>
  20e7f0:	3463c83a 	sub	r17,r6,r17
  20e7f4:	4a07c83a 	sub	r3,r9,r8
  20e7f8:	344d803a 	cmpltu	r6,r6,r17
  20e7fc:	19a7c83a 	sub	r19,r3,r6
  20e800:	3825883a 	mov	r18,r7
  20e804:	983f8a1e 	bne	r19,zero,20e630 <_gp+0xffdfca1c>
  20e808:	8809883a 	mov	r4,r17
  20e80c:	0203dfc0 	call	203dfc <__clzsi2>
  20e810:	10800804 	addi	r2,r2,32
  20e814:	10fffe04 	addi	r3,r2,-8
  20e818:	010007c4 	movi	r4,31
  20e81c:	20ff890e 	bge	r4,r3,20e644 <_gp+0xffdfca30>
  20e820:	10bff604 	addi	r2,r2,-40
  20e824:	8884983a 	sll	r2,r17,r2
  20e828:	0023883a 	mov	r17,zero
  20e82c:	1c3f8c0e 	bge	r3,r16,20e660 <_gp+0xffdfca4c>
  20e830:	023fe034 	movhi	r8,65408
  20e834:	423fffc4 	addi	r8,r8,-1
  20e838:	80e1c83a 	sub	r16,r16,r3
  20e83c:	1210703a 	and	r8,r2,r8
  20e840:	003f3806 	br	20e524 <_gp+0xffdfc910>
  20e844:	9007883a 	mov	r3,r18
  20e848:	0011883a 	mov	r8,zero
  20e84c:	0005883a 	mov	r2,zero
  20e850:	003f4c06 	br	20e584 <_gp+0xffdfc970>
  20e854:	498cb03a 	or	r6,r9,r6
  20e858:	300cc03a 	cmpne	r6,r6,zero
  20e85c:	0007883a 	mov	r3,zero
  20e860:	003f6806 	br	20e604 <_gp+0xffdfc9f0>
  20e864:	20009c1e 	bne	r4,zero,20ead8 <__adddf3+0x630>
  20e868:	80800044 	addi	r2,r16,1
  20e86c:	1141ffcc 	andi	r5,r2,2047
  20e870:	01000044 	movi	r4,1
  20e874:	2140670e 	bge	r4,r5,20ea14 <__adddf3+0x56c>
  20e878:	0101ffc4 	movi	r4,2047
  20e87c:	11007f26 	beq	r2,r4,20ea7c <__adddf3+0x5d4>
  20e880:	898d883a 	add	r6,r17,r6
  20e884:	4247883a 	add	r3,r8,r9
  20e888:	3451803a 	cmpltu	r8,r6,r17
  20e88c:	40d1883a 	add	r8,r8,r3
  20e890:	402297fa 	slli	r17,r8,31
  20e894:	300cd07a 	srli	r6,r6,1
  20e898:	4010d07a 	srli	r8,r8,1
  20e89c:	1021883a 	mov	r16,r2
  20e8a0:	89a2b03a 	or	r17,r17,r6
  20e8a4:	003f1f06 	br	20e524 <_gp+0xffdfc910>
  20e8a8:	0081ffc4 	movi	r2,2047
  20e8ac:	80bf481e 	bne	r16,r2,20e5d0 <_gp+0xffdfc9bc>
  20e8b0:	003f1c06 	br	20e524 <_gp+0xffdfc910>
  20e8b4:	843ff844 	addi	r16,r16,-31
  20e8b8:	01000804 	movi	r4,32
  20e8bc:	1406d83a 	srl	r3,r2,r16
  20e8c0:	41005026 	beq	r8,r4,20ea04 <__adddf3+0x55c>
  20e8c4:	01001004 	movi	r4,64
  20e8c8:	2211c83a 	sub	r8,r4,r8
  20e8cc:	1204983a 	sll	r2,r2,r8
  20e8d0:	88a2b03a 	or	r17,r17,r2
  20e8d4:	8822c03a 	cmpne	r17,r17,zero
  20e8d8:	1c62b03a 	or	r17,r3,r17
  20e8dc:	0011883a 	mov	r8,zero
  20e8e0:	0021883a 	mov	r16,zero
  20e8e4:	003f7106 	br	20e6ac <_gp+0xffdfca98>
  20e8e8:	193ff804 	addi	r4,r3,-32
  20e8ec:	00800804 	movi	r2,32
  20e8f0:	4908d83a 	srl	r4,r9,r4
  20e8f4:	18804526 	beq	r3,r2,20ea0c <__adddf3+0x564>
  20e8f8:	00801004 	movi	r2,64
  20e8fc:	10c5c83a 	sub	r2,r2,r3
  20e900:	4886983a 	sll	r3,r9,r2
  20e904:	198cb03a 	or	r6,r3,r6
  20e908:	300cc03a 	cmpne	r6,r6,zero
  20e90c:	218cb03a 	or	r6,r4,r6
  20e910:	0007883a 	mov	r3,zero
  20e914:	003f3b06 	br	20e604 <_gp+0xffdfc9f0>
  20e918:	80002a26 	beq	r16,zero,20e9c4 <__adddf3+0x51c>
  20e91c:	0101ffc4 	movi	r4,2047
  20e920:	11006826 	beq	r2,r4,20eac4 <__adddf3+0x61c>
  20e924:	00c7c83a 	sub	r3,zero,r3
  20e928:	42002034 	orhi	r8,r8,128
  20e92c:	01000e04 	movi	r4,56
  20e930:	20c07c16 	blt	r4,r3,20eb24 <__adddf3+0x67c>
  20e934:	010007c4 	movi	r4,31
  20e938:	20c0da16 	blt	r4,r3,20eca4 <__adddf3+0x7fc>
  20e93c:	01000804 	movi	r4,32
  20e940:	20c9c83a 	sub	r4,r4,r3
  20e944:	4114983a 	sll	r10,r8,r4
  20e948:	88cad83a 	srl	r5,r17,r3
  20e94c:	8908983a 	sll	r4,r17,r4
  20e950:	40c6d83a 	srl	r3,r8,r3
  20e954:	5162b03a 	or	r17,r10,r5
  20e958:	2008c03a 	cmpne	r4,r4,zero
  20e95c:	8922b03a 	or	r17,r17,r4
  20e960:	3463c83a 	sub	r17,r6,r17
  20e964:	48c7c83a 	sub	r3,r9,r3
  20e968:	344d803a 	cmpltu	r6,r6,r17
  20e96c:	1991c83a 	sub	r8,r3,r6
  20e970:	1021883a 	mov	r16,r2
  20e974:	3825883a 	mov	r18,r7
  20e978:	003f2706 	br	20e618 <_gp+0xffdfca04>
  20e97c:	24d0b03a 	or	r8,r4,r19
  20e980:	40001b1e 	bne	r8,zero,20e9f0 <__adddf3+0x548>
  20e984:	0005883a 	mov	r2,zero
  20e988:	0007883a 	mov	r3,zero
  20e98c:	0021883a 	mov	r16,zero
  20e990:	003f4d06 	br	20e6c8 <_gp+0xffdfcab4>
  20e994:	008007c4 	movi	r2,31
  20e998:	11003c16 	blt	r2,r4,20ea8c <__adddf3+0x5e4>
  20e99c:	00800804 	movi	r2,32
  20e9a0:	1105c83a 	sub	r2,r2,r4
  20e9a4:	488e983a 	sll	r7,r9,r2
  20e9a8:	310ad83a 	srl	r5,r6,r4
  20e9ac:	3084983a 	sll	r2,r6,r2
  20e9b0:	4912d83a 	srl	r9,r9,r4
  20e9b4:	394ab03a 	or	r5,r7,r5
  20e9b8:	1004c03a 	cmpne	r2,r2,zero
  20e9bc:	288ab03a 	or	r5,r5,r2
  20e9c0:	003f5306 	br	20e710 <_gp+0xffdfcafc>
  20e9c4:	4448b03a 	or	r4,r8,r17
  20e9c8:	20003e26 	beq	r4,zero,20eac4 <__adddf3+0x61c>
  20e9cc:	00c6303a 	nor	r3,zero,r3
  20e9d0:	18003a1e 	bne	r3,zero,20eabc <__adddf3+0x614>
  20e9d4:	3463c83a 	sub	r17,r6,r17
  20e9d8:	4a07c83a 	sub	r3,r9,r8
  20e9dc:	344d803a 	cmpltu	r6,r6,r17
  20e9e0:	1991c83a 	sub	r8,r3,r6
  20e9e4:	1021883a 	mov	r16,r2
  20e9e8:	3825883a 	mov	r18,r7
  20e9ec:	003f0a06 	br	20e618 <_gp+0xffdfca04>
  20e9f0:	2023883a 	mov	r17,r4
  20e9f4:	003f0d06 	br	20e62c <_gp+0xffdfca18>
  20e9f8:	0081ffc4 	movi	r2,2047
  20e9fc:	80bf3f1e 	bne	r16,r2,20e6fc <_gp+0xffdfcae8>
  20ea00:	003ec806 	br	20e524 <_gp+0xffdfc910>
  20ea04:	0005883a 	mov	r2,zero
  20ea08:	003fb106 	br	20e8d0 <_gp+0xffdfccbc>
  20ea0c:	0007883a 	mov	r3,zero
  20ea10:	003fbc06 	br	20e904 <_gp+0xffdfccf0>
  20ea14:	4444b03a 	or	r2,r8,r17
  20ea18:	8000871e 	bne	r16,zero,20ec38 <__adddf3+0x790>
  20ea1c:	1000ba26 	beq	r2,zero,20ed08 <__adddf3+0x860>
  20ea20:	4984b03a 	or	r2,r9,r6
  20ea24:	103ebf26 	beq	r2,zero,20e524 <_gp+0xffdfc910>
  20ea28:	8985883a 	add	r2,r17,r6
  20ea2c:	4247883a 	add	r3,r8,r9
  20ea30:	1451803a 	cmpltu	r8,r2,r17
  20ea34:	40d1883a 	add	r8,r8,r3
  20ea38:	40c0202c 	andhi	r3,r8,128
  20ea3c:	1023883a 	mov	r17,r2
  20ea40:	183f1a26 	beq	r3,zero,20e6ac <_gp+0xffdfca98>
  20ea44:	00bfe034 	movhi	r2,65408
  20ea48:	10bfffc4 	addi	r2,r2,-1
  20ea4c:	2021883a 	mov	r16,r4
  20ea50:	4090703a 	and	r8,r8,r2
  20ea54:	003eb306 	br	20e524 <_gp+0xffdfc910>
  20ea58:	4444b03a 	or	r2,r8,r17
  20ea5c:	8000291e 	bne	r16,zero,20eb04 <__adddf3+0x65c>
  20ea60:	10004b1e 	bne	r2,zero,20eb90 <__adddf3+0x6e8>
  20ea64:	4990b03a 	or	r8,r9,r6
  20ea68:	40008b26 	beq	r8,zero,20ec98 <__adddf3+0x7f0>
  20ea6c:	4811883a 	mov	r8,r9
  20ea70:	3023883a 	mov	r17,r6
  20ea74:	3825883a 	mov	r18,r7
  20ea78:	003eaa06 	br	20e524 <_gp+0xffdfc910>
  20ea7c:	1021883a 	mov	r16,r2
  20ea80:	0011883a 	mov	r8,zero
  20ea84:	0005883a 	mov	r2,zero
  20ea88:	003f0f06 	br	20e6c8 <_gp+0xffdfcab4>
  20ea8c:	217ff804 	addi	r5,r4,-32
  20ea90:	00800804 	movi	r2,32
  20ea94:	494ad83a 	srl	r5,r9,r5
  20ea98:	20807d26 	beq	r4,r2,20ec90 <__adddf3+0x7e8>
  20ea9c:	00801004 	movi	r2,64
  20eaa0:	1109c83a 	sub	r4,r2,r4
  20eaa4:	4912983a 	sll	r9,r9,r4
  20eaa8:	498cb03a 	or	r6,r9,r6
  20eaac:	300cc03a 	cmpne	r6,r6,zero
  20eab0:	298ab03a 	or	r5,r5,r6
  20eab4:	0013883a 	mov	r9,zero
  20eab8:	003f1506 	br	20e710 <_gp+0xffdfcafc>
  20eabc:	0101ffc4 	movi	r4,2047
  20eac0:	113f9a1e 	bne	r2,r4,20e92c <_gp+0xffdfcd18>
  20eac4:	4811883a 	mov	r8,r9
  20eac8:	3023883a 	mov	r17,r6
  20eacc:	1021883a 	mov	r16,r2
  20ead0:	3825883a 	mov	r18,r7
  20ead4:	003e9306 	br	20e524 <_gp+0xffdfc910>
  20ead8:	8000161e 	bne	r16,zero,20eb34 <__adddf3+0x68c>
  20eadc:	444ab03a 	or	r5,r8,r17
  20eae0:	28005126 	beq	r5,zero,20ec28 <__adddf3+0x780>
  20eae4:	0108303a 	nor	r4,zero,r4
  20eae8:	20004d1e 	bne	r4,zero,20ec20 <__adddf3+0x778>
  20eaec:	89a3883a 	add	r17,r17,r6
  20eaf0:	4253883a 	add	r9,r8,r9
  20eaf4:	898d803a 	cmpltu	r6,r17,r6
  20eaf8:	3251883a 	add	r8,r6,r9
  20eafc:	1021883a 	mov	r16,r2
  20eb00:	003f0806 	br	20e724 <_gp+0xffdfcb10>
  20eb04:	1000301e 	bne	r2,zero,20ebc8 <__adddf3+0x720>
  20eb08:	4984b03a 	or	r2,r9,r6
  20eb0c:	10007126 	beq	r2,zero,20ecd4 <__adddf3+0x82c>
  20eb10:	4811883a 	mov	r8,r9
  20eb14:	3023883a 	mov	r17,r6
  20eb18:	3825883a 	mov	r18,r7
  20eb1c:	0401ffc4 	movi	r16,2047
  20eb20:	003e8006 	br	20e524 <_gp+0xffdfc910>
  20eb24:	4462b03a 	or	r17,r8,r17
  20eb28:	8822c03a 	cmpne	r17,r17,zero
  20eb2c:	0007883a 	mov	r3,zero
  20eb30:	003f8b06 	br	20e960 <_gp+0xffdfcd4c>
  20eb34:	0141ffc4 	movi	r5,2047
  20eb38:	11403b26 	beq	r2,r5,20ec28 <__adddf3+0x780>
  20eb3c:	0109c83a 	sub	r4,zero,r4
  20eb40:	42002034 	orhi	r8,r8,128
  20eb44:	01400e04 	movi	r5,56
  20eb48:	29006716 	blt	r5,r4,20ece8 <__adddf3+0x840>
  20eb4c:	014007c4 	movi	r5,31
  20eb50:	29007016 	blt	r5,r4,20ed14 <__adddf3+0x86c>
  20eb54:	01400804 	movi	r5,32
  20eb58:	290bc83a 	sub	r5,r5,r4
  20eb5c:	4154983a 	sll	r10,r8,r5
  20eb60:	890ed83a 	srl	r7,r17,r4
  20eb64:	894a983a 	sll	r5,r17,r5
  20eb68:	4108d83a 	srl	r4,r8,r4
  20eb6c:	51e2b03a 	or	r17,r10,r7
  20eb70:	280ac03a 	cmpne	r5,r5,zero
  20eb74:	8962b03a 	or	r17,r17,r5
  20eb78:	89a3883a 	add	r17,r17,r6
  20eb7c:	2253883a 	add	r9,r4,r9
  20eb80:	898d803a 	cmpltu	r6,r17,r6
  20eb84:	3251883a 	add	r8,r6,r9
  20eb88:	1021883a 	mov	r16,r2
  20eb8c:	003ee506 	br	20e724 <_gp+0xffdfcb10>
  20eb90:	4984b03a 	or	r2,r9,r6
  20eb94:	103e6326 	beq	r2,zero,20e524 <_gp+0xffdfc910>
  20eb98:	8987c83a 	sub	r3,r17,r6
  20eb9c:	88c9803a 	cmpltu	r4,r17,r3
  20eba0:	4245c83a 	sub	r2,r8,r9
  20eba4:	1105c83a 	sub	r2,r2,r4
  20eba8:	1100202c 	andhi	r4,r2,128
  20ebac:	203ebb26 	beq	r4,zero,20e69c <_gp+0xffdfca88>
  20ebb0:	3463c83a 	sub	r17,r6,r17
  20ebb4:	4a07c83a 	sub	r3,r9,r8
  20ebb8:	344d803a 	cmpltu	r6,r6,r17
  20ebbc:	1991c83a 	sub	r8,r3,r6
  20ebc0:	3825883a 	mov	r18,r7
  20ebc4:	003e5706 	br	20e524 <_gp+0xffdfc910>
  20ebc8:	4984b03a 	or	r2,r9,r6
  20ebcc:	10002e26 	beq	r2,zero,20ec88 <__adddf3+0x7e0>
  20ebd0:	4004d0fa 	srli	r2,r8,3
  20ebd4:	8822d0fa 	srli	r17,r17,3
  20ebd8:	4010977a 	slli	r8,r8,29
  20ebdc:	10c0022c 	andhi	r3,r2,8
  20ebe0:	4462b03a 	or	r17,r8,r17
  20ebe4:	18000826 	beq	r3,zero,20ec08 <__adddf3+0x760>
  20ebe8:	4808d0fa 	srli	r4,r9,3
  20ebec:	20c0022c 	andhi	r3,r4,8
  20ebf0:	1800051e 	bne	r3,zero,20ec08 <__adddf3+0x760>
  20ebf4:	300cd0fa 	srli	r6,r6,3
  20ebf8:	4806977a 	slli	r3,r9,29
  20ebfc:	2005883a 	mov	r2,r4
  20ec00:	3825883a 	mov	r18,r7
  20ec04:	19a2b03a 	or	r17,r3,r6
  20ec08:	8810d77a 	srli	r8,r17,29
  20ec0c:	100490fa 	slli	r2,r2,3
  20ec10:	882290fa 	slli	r17,r17,3
  20ec14:	0401ffc4 	movi	r16,2047
  20ec18:	4090b03a 	or	r8,r8,r2
  20ec1c:	003e4106 	br	20e524 <_gp+0xffdfc910>
  20ec20:	0141ffc4 	movi	r5,2047
  20ec24:	117fc71e 	bne	r2,r5,20eb44 <_gp+0xffdfcf30>
  20ec28:	4811883a 	mov	r8,r9
  20ec2c:	3023883a 	mov	r17,r6
  20ec30:	1021883a 	mov	r16,r2
  20ec34:	003e3b06 	br	20e524 <_gp+0xffdfc910>
  20ec38:	10002f26 	beq	r2,zero,20ecf8 <__adddf3+0x850>
  20ec3c:	4984b03a 	or	r2,r9,r6
  20ec40:	10001126 	beq	r2,zero,20ec88 <__adddf3+0x7e0>
  20ec44:	4004d0fa 	srli	r2,r8,3
  20ec48:	8822d0fa 	srli	r17,r17,3
  20ec4c:	4010977a 	slli	r8,r8,29
  20ec50:	10c0022c 	andhi	r3,r2,8
  20ec54:	4462b03a 	or	r17,r8,r17
  20ec58:	183feb26 	beq	r3,zero,20ec08 <_gp+0xffdfcff4>
  20ec5c:	4808d0fa 	srli	r4,r9,3
  20ec60:	20c0022c 	andhi	r3,r4,8
  20ec64:	183fe81e 	bne	r3,zero,20ec08 <_gp+0xffdfcff4>
  20ec68:	300cd0fa 	srli	r6,r6,3
  20ec6c:	4806977a 	slli	r3,r9,29
  20ec70:	2005883a 	mov	r2,r4
  20ec74:	19a2b03a 	or	r17,r3,r6
  20ec78:	003fe306 	br	20ec08 <_gp+0xffdfcff4>
  20ec7c:	0011883a 	mov	r8,zero
  20ec80:	0005883a 	mov	r2,zero
  20ec84:	003e3f06 	br	20e584 <_gp+0xffdfc970>
  20ec88:	0401ffc4 	movi	r16,2047
  20ec8c:	003e2506 	br	20e524 <_gp+0xffdfc910>
  20ec90:	0013883a 	mov	r9,zero
  20ec94:	003f8406 	br	20eaa8 <_gp+0xffdfce94>
  20ec98:	0005883a 	mov	r2,zero
  20ec9c:	0007883a 	mov	r3,zero
  20eca0:	003e8906 	br	20e6c8 <_gp+0xffdfcab4>
  20eca4:	197ff804 	addi	r5,r3,-32
  20eca8:	01000804 	movi	r4,32
  20ecac:	414ad83a 	srl	r5,r8,r5
  20ecb0:	19002426 	beq	r3,r4,20ed44 <__adddf3+0x89c>
  20ecb4:	01001004 	movi	r4,64
  20ecb8:	20c7c83a 	sub	r3,r4,r3
  20ecbc:	40c6983a 	sll	r3,r8,r3
  20ecc0:	1c46b03a 	or	r3,r3,r17
  20ecc4:	1806c03a 	cmpne	r3,r3,zero
  20ecc8:	28e2b03a 	or	r17,r5,r3
  20eccc:	0007883a 	mov	r3,zero
  20ecd0:	003f2306 	br	20e960 <_gp+0xffdfcd4c>
  20ecd4:	0007883a 	mov	r3,zero
  20ecd8:	5811883a 	mov	r8,r11
  20ecdc:	00bfffc4 	movi	r2,-1
  20ece0:	0401ffc4 	movi	r16,2047
  20ece4:	003e7806 	br	20e6c8 <_gp+0xffdfcab4>
  20ece8:	4462b03a 	or	r17,r8,r17
  20ecec:	8822c03a 	cmpne	r17,r17,zero
  20ecf0:	0009883a 	mov	r4,zero
  20ecf4:	003fa006 	br	20eb78 <_gp+0xffdfcf64>
  20ecf8:	4811883a 	mov	r8,r9
  20ecfc:	3023883a 	mov	r17,r6
  20ed00:	0401ffc4 	movi	r16,2047
  20ed04:	003e0706 	br	20e524 <_gp+0xffdfc910>
  20ed08:	4811883a 	mov	r8,r9
  20ed0c:	3023883a 	mov	r17,r6
  20ed10:	003e0406 	br	20e524 <_gp+0xffdfc910>
  20ed14:	21fff804 	addi	r7,r4,-32
  20ed18:	01400804 	movi	r5,32
  20ed1c:	41ced83a 	srl	r7,r8,r7
  20ed20:	21400a26 	beq	r4,r5,20ed4c <__adddf3+0x8a4>
  20ed24:	01401004 	movi	r5,64
  20ed28:	2909c83a 	sub	r4,r5,r4
  20ed2c:	4108983a 	sll	r4,r8,r4
  20ed30:	2448b03a 	or	r4,r4,r17
  20ed34:	2008c03a 	cmpne	r4,r4,zero
  20ed38:	3922b03a 	or	r17,r7,r4
  20ed3c:	0009883a 	mov	r4,zero
  20ed40:	003f8d06 	br	20eb78 <_gp+0xffdfcf64>
  20ed44:	0007883a 	mov	r3,zero
  20ed48:	003fdd06 	br	20ecc0 <_gp+0xffdfd0ac>
  20ed4c:	0009883a 	mov	r4,zero
  20ed50:	003ff706 	br	20ed30 <_gp+0xffdfd11c>

0020ed54 <__divdf3>:
  20ed54:	defff004 	addi	sp,sp,-64
  20ed58:	dc800815 	stw	r18,32(sp)
  20ed5c:	2824d53a 	srli	r18,r5,20
  20ed60:	dd800c15 	stw	r22,48(sp)
  20ed64:	282cd7fa 	srli	r22,r5,31
  20ed68:	dc000615 	stw	r16,24(sp)
  20ed6c:	04000434 	movhi	r16,16
  20ed70:	843fffc4 	addi	r16,r16,-1
  20ed74:	dfc00f15 	stw	ra,60(sp)
  20ed78:	df000e15 	stw	fp,56(sp)
  20ed7c:	ddc00d15 	stw	r23,52(sp)
  20ed80:	dd400b15 	stw	r21,44(sp)
  20ed84:	dd000a15 	stw	r20,40(sp)
  20ed88:	dcc00915 	stw	r19,36(sp)
  20ed8c:	dc400715 	stw	r17,28(sp)
  20ed90:	9481ffcc 	andi	r18,r18,2047
  20ed94:	2c20703a 	and	r16,r5,r16
  20ed98:	b2003fcc 	andi	r8,r22,255
  20ed9c:	90006126 	beq	r18,zero,20ef24 <__divdf3+0x1d0>
  20eda0:	0081ffc4 	movi	r2,2047
  20eda4:	202b883a 	mov	r21,r4
  20eda8:	90803726 	beq	r18,r2,20ee88 <__divdf3+0x134>
  20edac:	80800434 	orhi	r2,r16,16
  20edb0:	100490fa 	slli	r2,r2,3
  20edb4:	2020d77a 	srli	r16,r4,29
  20edb8:	202a90fa 	slli	r21,r4,3
  20edbc:	94bf0044 	addi	r18,r18,-1023
  20edc0:	80a0b03a 	or	r16,r16,r2
  20edc4:	0013883a 	mov	r9,zero
  20edc8:	000b883a 	mov	r5,zero
  20edcc:	3806d53a 	srli	r3,r7,20
  20edd0:	382ed7fa 	srli	r23,r7,31
  20edd4:	04400434 	movhi	r17,16
  20edd8:	8c7fffc4 	addi	r17,r17,-1
  20eddc:	18c1ffcc 	andi	r3,r3,2047
  20ede0:	3029883a 	mov	r20,r6
  20ede4:	3c62703a 	and	r17,r7,r17
  20ede8:	bf003fcc 	andi	fp,r23,255
  20edec:	18006e26 	beq	r3,zero,20efa8 <__divdf3+0x254>
  20edf0:	0081ffc4 	movi	r2,2047
  20edf4:	18806626 	beq	r3,r2,20ef90 <__divdf3+0x23c>
  20edf8:	88800434 	orhi	r2,r17,16
  20edfc:	100490fa 	slli	r2,r2,3
  20ee00:	3022d77a 	srli	r17,r6,29
  20ee04:	302890fa 	slli	r20,r6,3
  20ee08:	18ff0044 	addi	r3,r3,-1023
  20ee0c:	88a2b03a 	or	r17,r17,r2
  20ee10:	000f883a 	mov	r7,zero
  20ee14:	b5e6f03a 	xor	r19,r22,r23
  20ee18:	3a4cb03a 	or	r6,r7,r9
  20ee1c:	008003c4 	movi	r2,15
  20ee20:	9809883a 	mov	r4,r19
  20ee24:	90c7c83a 	sub	r3,r18,r3
  20ee28:	9cc03fcc 	andi	r19,r19,255
  20ee2c:	11809636 	bltu	r2,r6,20f088 <__divdf3+0x334>
  20ee30:	300c90ba 	slli	r6,r6,2
  20ee34:	00800874 	movhi	r2,33
  20ee38:	10bb9204 	addi	r2,r2,-4536
  20ee3c:	308d883a 	add	r6,r6,r2
  20ee40:	30800017 	ldw	r2,0(r6)
  20ee44:	1000683a 	jmp	r2
  20ee48:	0020f088 	cmpgei	zero,zero,-31806
  20ee4c:	0020eec0 	call	20eec <__alt_mem_onchip_flash_0_data-0x1df114>
  20ee50:	0020f078 	rdprs	zero,zero,-31807
  20ee54:	0020eeb4 	movhi	zero,33722
  20ee58:	0020f078 	rdprs	zero,zero,-31807
  20ee5c:	0020f04c 	andi	zero,zero,33729
  20ee60:	0020f078 	rdprs	zero,zero,-31807
  20ee64:	0020eeb4 	movhi	zero,33722
  20ee68:	0020eec0 	call	20eec <__alt_mem_onchip_flash_0_data-0x1df114>
  20ee6c:	0020eec0 	call	20eec <__alt_mem_onchip_flash_0_data-0x1df114>
  20ee70:	0020f04c 	andi	zero,zero,33729
  20ee74:	0020eeb4 	movhi	zero,33722
  20ee78:	0020eea4 	muli	zero,zero,-31814
  20ee7c:	0020eea4 	muli	zero,zero,-31814
  20ee80:	0020eea4 	muli	zero,zero,-31814
  20ee84:	0020f410 	cmplti	zero,zero,-31792
  20ee88:	2404b03a 	or	r2,r4,r16
  20ee8c:	10006c1e 	bne	r2,zero,20f040 <__divdf3+0x2ec>
  20ee90:	02400204 	movi	r9,8
  20ee94:	0021883a 	mov	r16,zero
  20ee98:	002b883a 	mov	r21,zero
  20ee9c:	01400084 	movi	r5,2
  20eea0:	003fca06 	br	20edcc <_gp+0xffdfd1b8>
  20eea4:	8023883a 	mov	r17,r16
  20eea8:	a829883a 	mov	r20,r21
  20eeac:	4039883a 	mov	fp,r8
  20eeb0:	280f883a 	mov	r7,r5
  20eeb4:	00800084 	movi	r2,2
  20eeb8:	3881601e 	bne	r7,r2,20f43c <__divdf3+0x6e8>
  20eebc:	e027883a 	mov	r19,fp
  20eec0:	9900004c 	andi	r4,r19,1
  20eec4:	0081ffc4 	movi	r2,2047
  20eec8:	0021883a 	mov	r16,zero
  20eecc:	002b883a 	mov	r21,zero
  20eed0:	1004953a 	slli	r2,r2,20
  20eed4:	20c03fcc 	andi	r3,r4,255
  20eed8:	01400434 	movhi	r5,16
  20eedc:	297fffc4 	addi	r5,r5,-1
  20eee0:	180697fa 	slli	r3,r3,31
  20eee4:	8160703a 	and	r16,r16,r5
  20eee8:	80a0b03a 	or	r16,r16,r2
  20eeec:	80c6b03a 	or	r3,r16,r3
  20eef0:	a805883a 	mov	r2,r21
  20eef4:	dfc00f17 	ldw	ra,60(sp)
  20eef8:	df000e17 	ldw	fp,56(sp)
  20eefc:	ddc00d17 	ldw	r23,52(sp)
  20ef00:	dd800c17 	ldw	r22,48(sp)
  20ef04:	dd400b17 	ldw	r21,44(sp)
  20ef08:	dd000a17 	ldw	r20,40(sp)
  20ef0c:	dcc00917 	ldw	r19,36(sp)
  20ef10:	dc800817 	ldw	r18,32(sp)
  20ef14:	dc400717 	ldw	r17,28(sp)
  20ef18:	dc000617 	ldw	r16,24(sp)
  20ef1c:	dec01004 	addi	sp,sp,64
  20ef20:	f800283a 	ret
  20ef24:	2404b03a 	or	r2,r4,r16
  20ef28:	2023883a 	mov	r17,r4
  20ef2c:	10003f26 	beq	r2,zero,20f02c <__divdf3+0x2d8>
  20ef30:	80015e26 	beq	r16,zero,20f4ac <__divdf3+0x758>
  20ef34:	8009883a 	mov	r4,r16
  20ef38:	d9800215 	stw	r6,8(sp)
  20ef3c:	d9c00515 	stw	r7,20(sp)
  20ef40:	da000415 	stw	r8,16(sp)
  20ef44:	0203dfc0 	call	203dfc <__clzsi2>
  20ef48:	d9800217 	ldw	r6,8(sp)
  20ef4c:	d9c00517 	ldw	r7,20(sp)
  20ef50:	da000417 	ldw	r8,16(sp)
  20ef54:	113ffd44 	addi	r4,r2,-11
  20ef58:	00c00704 	movi	r3,28
  20ef5c:	19014f16 	blt	r3,r4,20f49c <__divdf3+0x748>
  20ef60:	00c00744 	movi	r3,29
  20ef64:	157ffe04 	addi	r21,r2,-8
  20ef68:	1907c83a 	sub	r3,r3,r4
  20ef6c:	8560983a 	sll	r16,r16,r21
  20ef70:	88c6d83a 	srl	r3,r17,r3
  20ef74:	8d6a983a 	sll	r21,r17,r21
  20ef78:	1c20b03a 	or	r16,r3,r16
  20ef7c:	1080fcc4 	addi	r2,r2,1011
  20ef80:	00a5c83a 	sub	r18,zero,r2
  20ef84:	0013883a 	mov	r9,zero
  20ef88:	000b883a 	mov	r5,zero
  20ef8c:	003f8f06 	br	20edcc <_gp+0xffdfd1b8>
  20ef90:	3444b03a 	or	r2,r6,r17
  20ef94:	1000231e 	bne	r2,zero,20f024 <__divdf3+0x2d0>
  20ef98:	0023883a 	mov	r17,zero
  20ef9c:	0029883a 	mov	r20,zero
  20efa0:	01c00084 	movi	r7,2
  20efa4:	003f9b06 	br	20ee14 <_gp+0xffdfd200>
  20efa8:	3444b03a 	or	r2,r6,r17
  20efac:	10001926 	beq	r2,zero,20f014 <__divdf3+0x2c0>
  20efb0:	88014b26 	beq	r17,zero,20f4e0 <__divdf3+0x78c>
  20efb4:	8809883a 	mov	r4,r17
  20efb8:	d9400115 	stw	r5,4(sp)
  20efbc:	d9800215 	stw	r6,8(sp)
  20efc0:	da000415 	stw	r8,16(sp)
  20efc4:	da400315 	stw	r9,12(sp)
  20efc8:	0203dfc0 	call	203dfc <__clzsi2>
  20efcc:	d9400117 	ldw	r5,4(sp)
  20efd0:	d9800217 	ldw	r6,8(sp)
  20efd4:	da000417 	ldw	r8,16(sp)
  20efd8:	da400317 	ldw	r9,12(sp)
  20efdc:	113ffd44 	addi	r4,r2,-11
  20efe0:	00c00704 	movi	r3,28
  20efe4:	19013a16 	blt	r3,r4,20f4d0 <__divdf3+0x77c>
  20efe8:	00c00744 	movi	r3,29
  20efec:	153ffe04 	addi	r20,r2,-8
  20eff0:	1907c83a 	sub	r3,r3,r4
  20eff4:	8d22983a 	sll	r17,r17,r20
  20eff8:	30c6d83a 	srl	r3,r6,r3
  20effc:	3528983a 	sll	r20,r6,r20
  20f000:	1c62b03a 	or	r17,r3,r17
  20f004:	1080fcc4 	addi	r2,r2,1011
  20f008:	0087c83a 	sub	r3,zero,r2
  20f00c:	000f883a 	mov	r7,zero
  20f010:	003f8006 	br	20ee14 <_gp+0xffdfd200>
  20f014:	0023883a 	mov	r17,zero
  20f018:	0029883a 	mov	r20,zero
  20f01c:	01c00044 	movi	r7,1
  20f020:	003f7c06 	br	20ee14 <_gp+0xffdfd200>
  20f024:	01c000c4 	movi	r7,3
  20f028:	003f7a06 	br	20ee14 <_gp+0xffdfd200>
  20f02c:	02400104 	movi	r9,4
  20f030:	0021883a 	mov	r16,zero
  20f034:	002b883a 	mov	r21,zero
  20f038:	01400044 	movi	r5,1
  20f03c:	003f6306 	br	20edcc <_gp+0xffdfd1b8>
  20f040:	02400304 	movi	r9,12
  20f044:	014000c4 	movi	r5,3
  20f048:	003f6006 	br	20edcc <_gp+0xffdfd1b8>
  20f04c:	04000434 	movhi	r16,16
  20f050:	0009883a 	mov	r4,zero
  20f054:	843fffc4 	addi	r16,r16,-1
  20f058:	057fffc4 	movi	r21,-1
  20f05c:	0081ffc4 	movi	r2,2047
  20f060:	003f9b06 	br	20eed0 <_gp+0xffdfd2bc>
  20f064:	00c00044 	movi	r3,1
  20f068:	1887c83a 	sub	r3,r3,r2
  20f06c:	01000e04 	movi	r4,56
  20f070:	20c1530e 	bge	r4,r3,20f5c0 <__divdf3+0x86c>
  20f074:	9900004c 	andi	r4,r19,1
  20f078:	0005883a 	mov	r2,zero
  20f07c:	0021883a 	mov	r16,zero
  20f080:	002b883a 	mov	r21,zero
  20f084:	003f9206 	br	20eed0 <_gp+0xffdfd2bc>
  20f088:	8c012e36 	bltu	r17,r16,20f544 <__divdf3+0x7f0>
  20f08c:	84412c26 	beq	r16,r17,20f540 <__divdf3+0x7ec>
  20f090:	a82f883a 	mov	r23,r21
  20f094:	18ffffc4 	addi	r3,r3,-1
  20f098:	002b883a 	mov	r21,zero
  20f09c:	a004d63a 	srli	r2,r20,24
  20f0a0:	8822923a 	slli	r17,r17,8
  20f0a4:	a028923a 	slli	r20,r20,8
  20f0a8:	8009883a 	mov	r4,r16
  20f0ac:	88acb03a 	or	r22,r17,r2
  20f0b0:	dd000015 	stw	r20,0(sp)
  20f0b4:	b028d43a 	srli	r20,r22,16
  20f0b8:	d8c00215 	stw	r3,8(sp)
  20f0bc:	b4bfffcc 	andi	r18,r22,65535
  20f0c0:	a00b883a 	mov	r5,r20
  20f0c4:	02031e80 	call	2031e8 <__udivsi3>
  20f0c8:	100b883a 	mov	r5,r2
  20f0cc:	9009883a 	mov	r4,r18
  20f0d0:	1023883a 	mov	r17,r2
  20f0d4:	02032a40 	call	2032a4 <__mulsi3>
  20f0d8:	8009883a 	mov	r4,r16
  20f0dc:	a00b883a 	mov	r5,r20
  20f0e0:	1039883a 	mov	fp,r2
  20f0e4:	020324c0 	call	20324c <__umodsi3>
  20f0e8:	1004943a 	slli	r2,r2,16
  20f0ec:	b808d43a 	srli	r4,r23,16
  20f0f0:	d8c00217 	ldw	r3,8(sp)
  20f0f4:	2084b03a 	or	r2,r4,r2
  20f0f8:	1700062e 	bgeu	r2,fp,20f114 <__divdf3+0x3c0>
  20f0fc:	1585883a 	add	r2,r2,r22
  20f100:	893fffc4 	addi	r4,r17,-1
  20f104:	15811d36 	bltu	r2,r22,20f57c <__divdf3+0x828>
  20f108:	17011c2e 	bgeu	r2,fp,20f57c <__divdf3+0x828>
  20f10c:	8c7fff84 	addi	r17,r17,-2
  20f110:	1585883a 	add	r2,r2,r22
  20f114:	1739c83a 	sub	fp,r2,fp
  20f118:	a00b883a 	mov	r5,r20
  20f11c:	e009883a 	mov	r4,fp
  20f120:	d8c00215 	stw	r3,8(sp)
  20f124:	02031e80 	call	2031e8 <__udivsi3>
  20f128:	100b883a 	mov	r5,r2
  20f12c:	9009883a 	mov	r4,r18
  20f130:	1021883a 	mov	r16,r2
  20f134:	02032a40 	call	2032a4 <__mulsi3>
  20f138:	a00b883a 	mov	r5,r20
  20f13c:	e009883a 	mov	r4,fp
  20f140:	d8800415 	stw	r2,16(sp)
  20f144:	020324c0 	call	20324c <__umodsi3>
  20f148:	1004943a 	slli	r2,r2,16
  20f14c:	da000417 	ldw	r8,16(sp)
  20f150:	bdffffcc 	andi	r23,r23,65535
  20f154:	b884b03a 	or	r2,r23,r2
  20f158:	d8c00217 	ldw	r3,8(sp)
  20f15c:	1200062e 	bgeu	r2,r8,20f178 <__divdf3+0x424>
  20f160:	1585883a 	add	r2,r2,r22
  20f164:	813fffc4 	addi	r4,r16,-1
  20f168:	15810236 	bltu	r2,r22,20f574 <__divdf3+0x820>
  20f16c:	1201012e 	bgeu	r2,r8,20f574 <__divdf3+0x820>
  20f170:	843fff84 	addi	r16,r16,-2
  20f174:	1585883a 	add	r2,r2,r22
  20f178:	8822943a 	slli	r17,r17,16
  20f17c:	d9800017 	ldw	r6,0(sp)
  20f180:	1211c83a 	sub	r8,r2,r8
  20f184:	8c22b03a 	or	r17,r17,r16
  20f188:	373fffcc 	andi	fp,r6,65535
  20f18c:	8abfffcc 	andi	r10,r17,65535
  20f190:	8820d43a 	srli	r16,r17,16
  20f194:	5009883a 	mov	r4,r10
  20f198:	e00b883a 	mov	r5,fp
  20f19c:	302ed43a 	srli	r23,r6,16
  20f1a0:	d8c00215 	stw	r3,8(sp)
  20f1a4:	da000415 	stw	r8,16(sp)
  20f1a8:	da800115 	stw	r10,4(sp)
  20f1ac:	02032a40 	call	2032a4 <__mulsi3>
  20f1b0:	800b883a 	mov	r5,r16
  20f1b4:	e009883a 	mov	r4,fp
  20f1b8:	d8800515 	stw	r2,20(sp)
  20f1bc:	02032a40 	call	2032a4 <__mulsi3>
  20f1c0:	8009883a 	mov	r4,r16
  20f1c4:	b80b883a 	mov	r5,r23
  20f1c8:	d8800315 	stw	r2,12(sp)
  20f1cc:	02032a40 	call	2032a4 <__mulsi3>
  20f1d0:	da800117 	ldw	r10,4(sp)
  20f1d4:	b80b883a 	mov	r5,r23
  20f1d8:	1021883a 	mov	r16,r2
  20f1dc:	5009883a 	mov	r4,r10
  20f1e0:	02032a40 	call	2032a4 <__mulsi3>
  20f1e4:	d9c00517 	ldw	r7,20(sp)
  20f1e8:	da400317 	ldw	r9,12(sp)
  20f1ec:	d8c00217 	ldw	r3,8(sp)
  20f1f0:	3808d43a 	srli	r4,r7,16
  20f1f4:	1245883a 	add	r2,r2,r9
  20f1f8:	da000417 	ldw	r8,16(sp)
  20f1fc:	2085883a 	add	r2,r4,r2
  20f200:	1240022e 	bgeu	r2,r9,20f20c <__divdf3+0x4b8>
  20f204:	01000074 	movhi	r4,1
  20f208:	8121883a 	add	r16,r16,r4
  20f20c:	1008d43a 	srli	r4,r2,16
  20f210:	1004943a 	slli	r2,r2,16
  20f214:	39ffffcc 	andi	r7,r7,65535
  20f218:	2409883a 	add	r4,r4,r16
  20f21c:	11c5883a 	add	r2,r2,r7
  20f220:	4100bb36 	bltu	r8,r4,20f510 <__divdf3+0x7bc>
  20f224:	4100d726 	beq	r8,r4,20f584 <__divdf3+0x830>
  20f228:	4109c83a 	sub	r4,r8,r4
  20f22c:	a8a1c83a 	sub	r16,r21,r2
  20f230:	ac2b803a 	cmpltu	r21,r21,r16
  20f234:	256bc83a 	sub	r21,r4,r21
  20f238:	b540d926 	beq	r22,r21,20f5a0 <__divdf3+0x84c>
  20f23c:	a00b883a 	mov	r5,r20
  20f240:	a809883a 	mov	r4,r21
  20f244:	d8c00215 	stw	r3,8(sp)
  20f248:	02031e80 	call	2031e8 <__udivsi3>
  20f24c:	100b883a 	mov	r5,r2
  20f250:	9009883a 	mov	r4,r18
  20f254:	d8800515 	stw	r2,20(sp)
  20f258:	02032a40 	call	2032a4 <__mulsi3>
  20f25c:	a809883a 	mov	r4,r21
  20f260:	a00b883a 	mov	r5,r20
  20f264:	d8800415 	stw	r2,16(sp)
  20f268:	020324c0 	call	20324c <__umodsi3>
  20f26c:	1004943a 	slli	r2,r2,16
  20f270:	8008d43a 	srli	r4,r16,16
  20f274:	da000417 	ldw	r8,16(sp)
  20f278:	d8c00217 	ldw	r3,8(sp)
  20f27c:	2084b03a 	or	r2,r4,r2
  20f280:	d9c00517 	ldw	r7,20(sp)
  20f284:	1200062e 	bgeu	r2,r8,20f2a0 <__divdf3+0x54c>
  20f288:	1585883a 	add	r2,r2,r22
  20f28c:	393fffc4 	addi	r4,r7,-1
  20f290:	1580c536 	bltu	r2,r22,20f5a8 <__divdf3+0x854>
  20f294:	1200c42e 	bgeu	r2,r8,20f5a8 <__divdf3+0x854>
  20f298:	39ffff84 	addi	r7,r7,-2
  20f29c:	1585883a 	add	r2,r2,r22
  20f2a0:	122bc83a 	sub	r21,r2,r8
  20f2a4:	a00b883a 	mov	r5,r20
  20f2a8:	a809883a 	mov	r4,r21
  20f2ac:	d8c00215 	stw	r3,8(sp)
  20f2b0:	d9c00515 	stw	r7,20(sp)
  20f2b4:	02031e80 	call	2031e8 <__udivsi3>
  20f2b8:	9009883a 	mov	r4,r18
  20f2bc:	100b883a 	mov	r5,r2
  20f2c0:	d8800415 	stw	r2,16(sp)
  20f2c4:	02032a40 	call	2032a4 <__mulsi3>
  20f2c8:	a809883a 	mov	r4,r21
  20f2cc:	a00b883a 	mov	r5,r20
  20f2d0:	1025883a 	mov	r18,r2
  20f2d4:	020324c0 	call	20324c <__umodsi3>
  20f2d8:	1004943a 	slli	r2,r2,16
  20f2dc:	813fffcc 	andi	r4,r16,65535
  20f2e0:	d8c00217 	ldw	r3,8(sp)
  20f2e4:	20a0b03a 	or	r16,r4,r2
  20f2e8:	d9c00517 	ldw	r7,20(sp)
  20f2ec:	da000417 	ldw	r8,16(sp)
  20f2f0:	8480062e 	bgeu	r16,r18,20f30c <__divdf3+0x5b8>
  20f2f4:	85a1883a 	add	r16,r16,r22
  20f2f8:	40bfffc4 	addi	r2,r8,-1
  20f2fc:	8580ac36 	bltu	r16,r22,20f5b0 <__divdf3+0x85c>
  20f300:	8480ab2e 	bgeu	r16,r18,20f5b0 <__divdf3+0x85c>
  20f304:	423fff84 	addi	r8,r8,-2
  20f308:	85a1883a 	add	r16,r16,r22
  20f30c:	3804943a 	slli	r2,r7,16
  20f310:	84a1c83a 	sub	r16,r16,r18
  20f314:	e009883a 	mov	r4,fp
  20f318:	1228b03a 	or	r20,r2,r8
  20f31c:	a1ffffcc 	andi	r7,r20,65535
  20f320:	a024d43a 	srli	r18,r20,16
  20f324:	380b883a 	mov	r5,r7
  20f328:	d8c00215 	stw	r3,8(sp)
  20f32c:	d9c00515 	stw	r7,20(sp)
  20f330:	02032a40 	call	2032a4 <__mulsi3>
  20f334:	900b883a 	mov	r5,r18
  20f338:	e009883a 	mov	r4,fp
  20f33c:	102b883a 	mov	r21,r2
  20f340:	02032a40 	call	2032a4 <__mulsi3>
  20f344:	900b883a 	mov	r5,r18
  20f348:	b809883a 	mov	r4,r23
  20f34c:	1039883a 	mov	fp,r2
  20f350:	02032a40 	call	2032a4 <__mulsi3>
  20f354:	d9c00517 	ldw	r7,20(sp)
  20f358:	b80b883a 	mov	r5,r23
  20f35c:	1025883a 	mov	r18,r2
  20f360:	3809883a 	mov	r4,r7
  20f364:	02032a40 	call	2032a4 <__mulsi3>
  20f368:	a808d43a 	srli	r4,r21,16
  20f36c:	1705883a 	add	r2,r2,fp
  20f370:	d8c00217 	ldw	r3,8(sp)
  20f374:	2085883a 	add	r2,r4,r2
  20f378:	1700022e 	bgeu	r2,fp,20f384 <__divdf3+0x630>
  20f37c:	01000074 	movhi	r4,1
  20f380:	9125883a 	add	r18,r18,r4
  20f384:	1008d43a 	srli	r4,r2,16
  20f388:	1004943a 	slli	r2,r2,16
  20f38c:	ad7fffcc 	andi	r21,r21,65535
  20f390:	2489883a 	add	r4,r4,r18
  20f394:	1545883a 	add	r2,r2,r21
  20f398:	81003836 	bltu	r16,r4,20f47c <__divdf3+0x728>
  20f39c:	81003626 	beq	r16,r4,20f478 <__divdf3+0x724>
  20f3a0:	a5000054 	ori	r20,r20,1
  20f3a4:	1880ffc4 	addi	r2,r3,1023
  20f3a8:	00bf2e0e 	bge	zero,r2,20f064 <_gp+0xffdfd450>
  20f3ac:	a10001cc 	andi	r4,r20,7
  20f3b0:	20000726 	beq	r4,zero,20f3d0 <__divdf3+0x67c>
  20f3b4:	a10003cc 	andi	r4,r20,15
  20f3b8:	01400104 	movi	r5,4
  20f3bc:	21400426 	beq	r4,r5,20f3d0 <__divdf3+0x67c>
  20f3c0:	a149883a 	add	r4,r20,r5
  20f3c4:	2529803a 	cmpltu	r20,r4,r20
  20f3c8:	8d23883a 	add	r17,r17,r20
  20f3cc:	2029883a 	mov	r20,r4
  20f3d0:	8900402c 	andhi	r4,r17,256
  20f3d4:	20000426 	beq	r4,zero,20f3e8 <__divdf3+0x694>
  20f3d8:	18810004 	addi	r2,r3,1024
  20f3dc:	00ffc034 	movhi	r3,65280
  20f3e0:	18ffffc4 	addi	r3,r3,-1
  20f3e4:	88e2703a 	and	r17,r17,r3
  20f3e8:	00c1ff84 	movi	r3,2046
  20f3ec:	18beb416 	blt	r3,r2,20eec0 <_gp+0xffdfd2ac>
  20f3f0:	a028d0fa 	srli	r20,r20,3
  20f3f4:	882a977a 	slli	r21,r17,29
  20f3f8:	8820927a 	slli	r16,r17,9
  20f3fc:	1081ffcc 	andi	r2,r2,2047
  20f400:	ad2ab03a 	or	r21,r21,r20
  20f404:	8020d33a 	srli	r16,r16,12
  20f408:	9900004c 	andi	r4,r19,1
  20f40c:	003eb006 	br	20eed0 <_gp+0xffdfd2bc>
  20f410:	8080022c 	andhi	r2,r16,8
  20f414:	10001226 	beq	r2,zero,20f460 <__divdf3+0x70c>
  20f418:	8880022c 	andhi	r2,r17,8
  20f41c:	1000101e 	bne	r2,zero,20f460 <__divdf3+0x70c>
  20f420:	00800434 	movhi	r2,16
  20f424:	8c000234 	orhi	r16,r17,8
  20f428:	10bfffc4 	addi	r2,r2,-1
  20f42c:	b809883a 	mov	r4,r23
  20f430:	80a0703a 	and	r16,r16,r2
  20f434:	a02b883a 	mov	r21,r20
  20f438:	003f0806 	br	20f05c <_gp+0xffdfd448>
  20f43c:	008000c4 	movi	r2,3
  20f440:	3880b126 	beq	r7,r2,20f708 <__divdf3+0x9b4>
  20f444:	00800044 	movi	r2,1
  20f448:	38805b1e 	bne	r7,r2,20f5b8 <__divdf3+0x864>
  20f44c:	e009883a 	mov	r4,fp
  20f450:	0005883a 	mov	r2,zero
  20f454:	0021883a 	mov	r16,zero
  20f458:	002b883a 	mov	r21,zero
  20f45c:	003e9c06 	br	20eed0 <_gp+0xffdfd2bc>
  20f460:	00800434 	movhi	r2,16
  20f464:	84000234 	orhi	r16,r16,8
  20f468:	10bfffc4 	addi	r2,r2,-1
  20f46c:	b009883a 	mov	r4,r22
  20f470:	80a0703a 	and	r16,r16,r2
  20f474:	003ef906 	br	20f05c <_gp+0xffdfd448>
  20f478:	103fca26 	beq	r2,zero,20f3a4 <_gp+0xffdfd790>
  20f47c:	b421883a 	add	r16,r22,r16
  20f480:	a17fffc4 	addi	r5,r20,-1
  20f484:	8580422e 	bgeu	r16,r22,20f590 <__divdf3+0x83c>
  20f488:	2829883a 	mov	r20,r5
  20f48c:	813fc41e 	bne	r16,r4,20f3a0 <_gp+0xffdfd78c>
  20f490:	d9800017 	ldw	r6,0(sp)
  20f494:	30bfc21e 	bne	r6,r2,20f3a0 <_gp+0xffdfd78c>
  20f498:	003fc206 	br	20f3a4 <_gp+0xffdfd790>
  20f49c:	143ff604 	addi	r16,r2,-40
  20f4a0:	8c20983a 	sll	r16,r17,r16
  20f4a4:	002b883a 	mov	r21,zero
  20f4a8:	003eb406 	br	20ef7c <_gp+0xffdfd368>
  20f4ac:	d9800215 	stw	r6,8(sp)
  20f4b0:	d9c00515 	stw	r7,20(sp)
  20f4b4:	da000415 	stw	r8,16(sp)
  20f4b8:	0203dfc0 	call	203dfc <__clzsi2>
  20f4bc:	10800804 	addi	r2,r2,32
  20f4c0:	da000417 	ldw	r8,16(sp)
  20f4c4:	d9c00517 	ldw	r7,20(sp)
  20f4c8:	d9800217 	ldw	r6,8(sp)
  20f4cc:	003ea106 	br	20ef54 <_gp+0xffdfd340>
  20f4d0:	147ff604 	addi	r17,r2,-40
  20f4d4:	3462983a 	sll	r17,r6,r17
  20f4d8:	0029883a 	mov	r20,zero
  20f4dc:	003ec906 	br	20f004 <_gp+0xffdfd3f0>
  20f4e0:	3009883a 	mov	r4,r6
  20f4e4:	d9400115 	stw	r5,4(sp)
  20f4e8:	d9800215 	stw	r6,8(sp)
  20f4ec:	da000415 	stw	r8,16(sp)
  20f4f0:	da400315 	stw	r9,12(sp)
  20f4f4:	0203dfc0 	call	203dfc <__clzsi2>
  20f4f8:	10800804 	addi	r2,r2,32
  20f4fc:	da400317 	ldw	r9,12(sp)
  20f500:	da000417 	ldw	r8,16(sp)
  20f504:	d9800217 	ldw	r6,8(sp)
  20f508:	d9400117 	ldw	r5,4(sp)
  20f50c:	003eb306 	br	20efdc <_gp+0xffdfd3c8>
  20f510:	d9800017 	ldw	r6,0(sp)
  20f514:	a9ab883a 	add	r21,r21,r6
  20f518:	a98b803a 	cmpltu	r5,r21,r6
  20f51c:	2d8b883a 	add	r5,r5,r22
  20f520:	2a11883a 	add	r8,r5,r8
  20f524:	897fffc4 	addi	r5,r17,-1
  20f528:	b2000c2e 	bgeu	r22,r8,20f55c <__divdf3+0x808>
  20f52c:	41003f36 	bltu	r8,r4,20f62c <__divdf3+0x8d8>
  20f530:	22006c26 	beq	r4,r8,20f6e4 <__divdf3+0x990>
  20f534:	4109c83a 	sub	r4,r8,r4
  20f538:	2823883a 	mov	r17,r5
  20f53c:	003f3b06 	br	20f22c <_gp+0xffdfd618>
  20f540:	ad3ed336 	bltu	r21,r20,20f090 <_gp+0xffdfd47c>
  20f544:	a804d07a 	srli	r2,r21,1
  20f548:	802e97fa 	slli	r23,r16,31
  20f54c:	a82a97fa 	slli	r21,r21,31
  20f550:	8020d07a 	srli	r16,r16,1
  20f554:	b8aeb03a 	or	r23,r23,r2
  20f558:	003ed006 	br	20f09c <_gp+0xffdfd488>
  20f55c:	b23ff51e 	bne	r22,r8,20f534 <_gp+0xffdfd920>
  20f560:	d9800017 	ldw	r6,0(sp)
  20f564:	a9bff12e 	bgeu	r21,r6,20f52c <_gp+0xffdfd918>
  20f568:	b109c83a 	sub	r4,r22,r4
  20f56c:	2823883a 	mov	r17,r5
  20f570:	003f2e06 	br	20f22c <_gp+0xffdfd618>
  20f574:	2021883a 	mov	r16,r4
  20f578:	003eff06 	br	20f178 <_gp+0xffdfd564>
  20f57c:	2023883a 	mov	r17,r4
  20f580:	003ee406 	br	20f114 <_gp+0xffdfd500>
  20f584:	a8bfe236 	bltu	r21,r2,20f510 <_gp+0xffdfd8fc>
  20f588:	0009883a 	mov	r4,zero
  20f58c:	003f2706 	br	20f22c <_gp+0xffdfd618>
  20f590:	81002d36 	bltu	r16,r4,20f648 <__divdf3+0x8f4>
  20f594:	24005626 	beq	r4,r16,20f6f0 <__divdf3+0x99c>
  20f598:	2829883a 	mov	r20,r5
  20f59c:	003f8006 	br	20f3a0 <_gp+0xffdfd78c>
  20f5a0:	053fffc4 	movi	r20,-1
  20f5a4:	003f7f06 	br	20f3a4 <_gp+0xffdfd790>
  20f5a8:	200f883a 	mov	r7,r4
  20f5ac:	003f3c06 	br	20f2a0 <_gp+0xffdfd68c>
  20f5b0:	1011883a 	mov	r8,r2
  20f5b4:	003f5506 	br	20f30c <_gp+0xffdfd6f8>
  20f5b8:	e027883a 	mov	r19,fp
  20f5bc:	003f7906 	br	20f3a4 <_gp+0xffdfd790>
  20f5c0:	010007c4 	movi	r4,31
  20f5c4:	20c02816 	blt	r4,r3,20f668 <__divdf3+0x914>
  20f5c8:	00800804 	movi	r2,32
  20f5cc:	10c5c83a 	sub	r2,r2,r3
  20f5d0:	888a983a 	sll	r5,r17,r2
  20f5d4:	a0c8d83a 	srl	r4,r20,r3
  20f5d8:	a084983a 	sll	r2,r20,r2
  20f5dc:	88e2d83a 	srl	r17,r17,r3
  20f5e0:	2906b03a 	or	r3,r5,r4
  20f5e4:	1004c03a 	cmpne	r2,r2,zero
  20f5e8:	1886b03a 	or	r3,r3,r2
  20f5ec:	188001cc 	andi	r2,r3,7
  20f5f0:	10000726 	beq	r2,zero,20f610 <__divdf3+0x8bc>
  20f5f4:	188003cc 	andi	r2,r3,15
  20f5f8:	01000104 	movi	r4,4
  20f5fc:	11000426 	beq	r2,r4,20f610 <__divdf3+0x8bc>
  20f600:	1805883a 	mov	r2,r3
  20f604:	10c00104 	addi	r3,r2,4
  20f608:	1885803a 	cmpltu	r2,r3,r2
  20f60c:	88a3883a 	add	r17,r17,r2
  20f610:	8880202c 	andhi	r2,r17,128
  20f614:	10002926 	beq	r2,zero,20f6bc <__divdf3+0x968>
  20f618:	9900004c 	andi	r4,r19,1
  20f61c:	00800044 	movi	r2,1
  20f620:	0021883a 	mov	r16,zero
  20f624:	002b883a 	mov	r21,zero
  20f628:	003e2906 	br	20eed0 <_gp+0xffdfd2bc>
  20f62c:	d9800017 	ldw	r6,0(sp)
  20f630:	8c7fff84 	addi	r17,r17,-2
  20f634:	a9ab883a 	add	r21,r21,r6
  20f638:	a98b803a 	cmpltu	r5,r21,r6
  20f63c:	2d8b883a 	add	r5,r5,r22
  20f640:	2a11883a 	add	r8,r5,r8
  20f644:	003ef806 	br	20f228 <_gp+0xffdfd614>
  20f648:	d9800017 	ldw	r6,0(sp)
  20f64c:	318f883a 	add	r7,r6,r6
  20f650:	398b803a 	cmpltu	r5,r7,r6
  20f654:	2d8d883a 	add	r6,r5,r22
  20f658:	81a1883a 	add	r16,r16,r6
  20f65c:	a17fff84 	addi	r5,r20,-2
  20f660:	d9c00015 	stw	r7,0(sp)
  20f664:	003f8806 	br	20f488 <_gp+0xffdfd874>
  20f668:	013ff844 	movi	r4,-31
  20f66c:	2085c83a 	sub	r2,r4,r2
  20f670:	8888d83a 	srl	r4,r17,r2
  20f674:	00800804 	movi	r2,32
  20f678:	18802126 	beq	r3,r2,20f700 <__divdf3+0x9ac>
  20f67c:	04001004 	movi	r16,64
  20f680:	80c7c83a 	sub	r3,r16,r3
  20f684:	88e0983a 	sll	r16,r17,r3
  20f688:	8504b03a 	or	r2,r16,r20
  20f68c:	1004c03a 	cmpne	r2,r2,zero
  20f690:	2084b03a 	or	r2,r4,r2
  20f694:	144001cc 	andi	r17,r2,7
  20f698:	88000d1e 	bne	r17,zero,20f6d0 <__divdf3+0x97c>
  20f69c:	0021883a 	mov	r16,zero
  20f6a0:	102ad0fa 	srli	r21,r2,3
  20f6a4:	9900004c 	andi	r4,r19,1
  20f6a8:	0005883a 	mov	r2,zero
  20f6ac:	ac6ab03a 	or	r21,r21,r17
  20f6b0:	003e0706 	br	20eed0 <_gp+0xffdfd2bc>
  20f6b4:	1007883a 	mov	r3,r2
  20f6b8:	0023883a 	mov	r17,zero
  20f6bc:	8820927a 	slli	r16,r17,9
  20f6c0:	1805883a 	mov	r2,r3
  20f6c4:	8822977a 	slli	r17,r17,29
  20f6c8:	8020d33a 	srli	r16,r16,12
  20f6cc:	003ff406 	br	20f6a0 <_gp+0xffdfda8c>
  20f6d0:	10c003cc 	andi	r3,r2,15
  20f6d4:	01000104 	movi	r4,4
  20f6d8:	193ff626 	beq	r3,r4,20f6b4 <_gp+0xffdfdaa0>
  20f6dc:	0023883a 	mov	r17,zero
  20f6e0:	003fc806 	br	20f604 <_gp+0xffdfd9f0>
  20f6e4:	a8bfd136 	bltu	r21,r2,20f62c <_gp+0xffdfda18>
  20f6e8:	2823883a 	mov	r17,r5
  20f6ec:	003fa606 	br	20f588 <_gp+0xffdfd974>
  20f6f0:	d9800017 	ldw	r6,0(sp)
  20f6f4:	30bfd436 	bltu	r6,r2,20f648 <_gp+0xffdfda34>
  20f6f8:	2829883a 	mov	r20,r5
  20f6fc:	003f6406 	br	20f490 <_gp+0xffdfd87c>
  20f700:	0021883a 	mov	r16,zero
  20f704:	003fe006 	br	20f688 <_gp+0xffdfda74>
  20f708:	00800434 	movhi	r2,16
  20f70c:	8c000234 	orhi	r16,r17,8
  20f710:	10bfffc4 	addi	r2,r2,-1
  20f714:	e009883a 	mov	r4,fp
  20f718:	80a0703a 	and	r16,r16,r2
  20f71c:	a02b883a 	mov	r21,r20
  20f720:	003e4e06 	br	20f05c <_gp+0xffdfd448>

0020f724 <__eqdf2>:
  20f724:	2804d53a 	srli	r2,r5,20
  20f728:	3806d53a 	srli	r3,r7,20
  20f72c:	02000434 	movhi	r8,16
  20f730:	423fffc4 	addi	r8,r8,-1
  20f734:	1081ffcc 	andi	r2,r2,2047
  20f738:	0281ffc4 	movi	r10,2047
  20f73c:	2a12703a 	and	r9,r5,r8
  20f740:	18c1ffcc 	andi	r3,r3,2047
  20f744:	3a10703a 	and	r8,r7,r8
  20f748:	280ad7fa 	srli	r5,r5,31
  20f74c:	380ed7fa 	srli	r7,r7,31
  20f750:	12801026 	beq	r2,r10,20f794 <__eqdf2+0x70>
  20f754:	0281ffc4 	movi	r10,2047
  20f758:	1a800a26 	beq	r3,r10,20f784 <__eqdf2+0x60>
  20f75c:	10c00226 	beq	r2,r3,20f768 <__eqdf2+0x44>
  20f760:	00800044 	movi	r2,1
  20f764:	f800283a 	ret
  20f768:	4a3ffd1e 	bne	r9,r8,20f760 <_gp+0xffdfdb4c>
  20f76c:	21bffc1e 	bne	r4,r6,20f760 <_gp+0xffdfdb4c>
  20f770:	29c00c26 	beq	r5,r7,20f7a4 <__eqdf2+0x80>
  20f774:	103ffa1e 	bne	r2,zero,20f760 <_gp+0xffdfdb4c>
  20f778:	2244b03a 	or	r2,r4,r9
  20f77c:	1004c03a 	cmpne	r2,r2,zero
  20f780:	f800283a 	ret
  20f784:	3214b03a 	or	r10,r6,r8
  20f788:	503ff426 	beq	r10,zero,20f75c <_gp+0xffdfdb48>
  20f78c:	00800044 	movi	r2,1
  20f790:	f800283a 	ret
  20f794:	2254b03a 	or	r10,r4,r9
  20f798:	503fee26 	beq	r10,zero,20f754 <_gp+0xffdfdb40>
  20f79c:	00800044 	movi	r2,1
  20f7a0:	f800283a 	ret
  20f7a4:	0005883a 	mov	r2,zero
  20f7a8:	f800283a 	ret

0020f7ac <__gedf2>:
  20f7ac:	2804d53a 	srli	r2,r5,20
  20f7b0:	3806d53a 	srli	r3,r7,20
  20f7b4:	02000434 	movhi	r8,16
  20f7b8:	423fffc4 	addi	r8,r8,-1
  20f7bc:	1081ffcc 	andi	r2,r2,2047
  20f7c0:	0241ffc4 	movi	r9,2047
  20f7c4:	2a14703a 	and	r10,r5,r8
  20f7c8:	18c1ffcc 	andi	r3,r3,2047
  20f7cc:	3a10703a 	and	r8,r7,r8
  20f7d0:	280ad7fa 	srli	r5,r5,31
  20f7d4:	380ed7fa 	srli	r7,r7,31
  20f7d8:	12401d26 	beq	r2,r9,20f850 <__gedf2+0xa4>
  20f7dc:	0241ffc4 	movi	r9,2047
  20f7e0:	1a401226 	beq	r3,r9,20f82c <__gedf2+0x80>
  20f7e4:	1000081e 	bne	r2,zero,20f808 <__gedf2+0x5c>
  20f7e8:	2296b03a 	or	r11,r4,r10
  20f7ec:	5813003a 	cmpeq	r9,r11,zero
  20f7f0:	1800091e 	bne	r3,zero,20f818 <__gedf2+0x6c>
  20f7f4:	3218b03a 	or	r12,r6,r8
  20f7f8:	6000071e 	bne	r12,zero,20f818 <__gedf2+0x6c>
  20f7fc:	0005883a 	mov	r2,zero
  20f800:	5800101e 	bne	r11,zero,20f844 <__gedf2+0x98>
  20f804:	f800283a 	ret
  20f808:	18000c1e 	bne	r3,zero,20f83c <__gedf2+0x90>
  20f80c:	3212b03a 	or	r9,r6,r8
  20f810:	48000c26 	beq	r9,zero,20f844 <__gedf2+0x98>
  20f814:	0013883a 	mov	r9,zero
  20f818:	39c03fcc 	andi	r7,r7,255
  20f81c:	48000826 	beq	r9,zero,20f840 <__gedf2+0x94>
  20f820:	38000926 	beq	r7,zero,20f848 <__gedf2+0x9c>
  20f824:	00800044 	movi	r2,1
  20f828:	f800283a 	ret
  20f82c:	3212b03a 	or	r9,r6,r8
  20f830:	483fec26 	beq	r9,zero,20f7e4 <_gp+0xffdfdbd0>
  20f834:	00bfff84 	movi	r2,-2
  20f838:	f800283a 	ret
  20f83c:	39c03fcc 	andi	r7,r7,255
  20f840:	29c00626 	beq	r5,r7,20f85c <__gedf2+0xb0>
  20f844:	283ff726 	beq	r5,zero,20f824 <_gp+0xffdfdc10>
  20f848:	00bfffc4 	movi	r2,-1
  20f84c:	f800283a 	ret
  20f850:	2292b03a 	or	r9,r4,r10
  20f854:	483fe126 	beq	r9,zero,20f7dc <_gp+0xffdfdbc8>
  20f858:	003ff606 	br	20f834 <_gp+0xffdfdc20>
  20f85c:	18bff916 	blt	r3,r2,20f844 <_gp+0xffdfdc30>
  20f860:	10c00316 	blt	r2,r3,20f870 <__gedf2+0xc4>
  20f864:	42bff736 	bltu	r8,r10,20f844 <_gp+0xffdfdc30>
  20f868:	52000326 	beq	r10,r8,20f878 <__gedf2+0xcc>
  20f86c:	5200042e 	bgeu	r10,r8,20f880 <__gedf2+0xd4>
  20f870:	283fec1e 	bne	r5,zero,20f824 <_gp+0xffdfdc10>
  20f874:	003ff406 	br	20f848 <_gp+0xffdfdc34>
  20f878:	313ff236 	bltu	r6,r4,20f844 <_gp+0xffdfdc30>
  20f87c:	21bffc36 	bltu	r4,r6,20f870 <_gp+0xffdfdc5c>
  20f880:	0005883a 	mov	r2,zero
  20f884:	f800283a 	ret

0020f888 <__ledf2>:
  20f888:	2804d53a 	srli	r2,r5,20
  20f88c:	3810d53a 	srli	r8,r7,20
  20f890:	00c00434 	movhi	r3,16
  20f894:	18ffffc4 	addi	r3,r3,-1
  20f898:	1081ffcc 	andi	r2,r2,2047
  20f89c:	0241ffc4 	movi	r9,2047
  20f8a0:	28d4703a 	and	r10,r5,r3
  20f8a4:	4201ffcc 	andi	r8,r8,2047
  20f8a8:	38c6703a 	and	r3,r7,r3
  20f8ac:	280ad7fa 	srli	r5,r5,31
  20f8b0:	380ed7fa 	srli	r7,r7,31
  20f8b4:	12401f26 	beq	r2,r9,20f934 <__ledf2+0xac>
  20f8b8:	0241ffc4 	movi	r9,2047
  20f8bc:	42401426 	beq	r8,r9,20f910 <__ledf2+0x88>
  20f8c0:	1000091e 	bne	r2,zero,20f8e8 <__ledf2+0x60>
  20f8c4:	2296b03a 	or	r11,r4,r10
  20f8c8:	5813003a 	cmpeq	r9,r11,zero
  20f8cc:	29403fcc 	andi	r5,r5,255
  20f8d0:	40000a1e 	bne	r8,zero,20f8fc <__ledf2+0x74>
  20f8d4:	30d8b03a 	or	r12,r6,r3
  20f8d8:	6000081e 	bne	r12,zero,20f8fc <__ledf2+0x74>
  20f8dc:	0005883a 	mov	r2,zero
  20f8e0:	5800111e 	bne	r11,zero,20f928 <__ledf2+0xa0>
  20f8e4:	f800283a 	ret
  20f8e8:	29403fcc 	andi	r5,r5,255
  20f8ec:	40000c1e 	bne	r8,zero,20f920 <__ledf2+0x98>
  20f8f0:	30d2b03a 	or	r9,r6,r3
  20f8f4:	48000c26 	beq	r9,zero,20f928 <__ledf2+0xa0>
  20f8f8:	0013883a 	mov	r9,zero
  20f8fc:	39c03fcc 	andi	r7,r7,255
  20f900:	48000826 	beq	r9,zero,20f924 <__ledf2+0x9c>
  20f904:	38001126 	beq	r7,zero,20f94c <__ledf2+0xc4>
  20f908:	00800044 	movi	r2,1
  20f90c:	f800283a 	ret
  20f910:	30d2b03a 	or	r9,r6,r3
  20f914:	483fea26 	beq	r9,zero,20f8c0 <_gp+0xffdfdcac>
  20f918:	00800084 	movi	r2,2
  20f91c:	f800283a 	ret
  20f920:	39c03fcc 	andi	r7,r7,255
  20f924:	39400726 	beq	r7,r5,20f944 <__ledf2+0xbc>
  20f928:	2800081e 	bne	r5,zero,20f94c <__ledf2+0xc4>
  20f92c:	00800044 	movi	r2,1
  20f930:	f800283a 	ret
  20f934:	2292b03a 	or	r9,r4,r10
  20f938:	483fdf26 	beq	r9,zero,20f8b8 <_gp+0xffdfdca4>
  20f93c:	00800084 	movi	r2,2
  20f940:	f800283a 	ret
  20f944:	4080030e 	bge	r8,r2,20f954 <__ledf2+0xcc>
  20f948:	383fef26 	beq	r7,zero,20f908 <_gp+0xffdfdcf4>
  20f94c:	00bfffc4 	movi	r2,-1
  20f950:	f800283a 	ret
  20f954:	123feb16 	blt	r2,r8,20f904 <_gp+0xffdfdcf0>
  20f958:	1abff336 	bltu	r3,r10,20f928 <_gp+0xffdfdd14>
  20f95c:	50c00326 	beq	r10,r3,20f96c <__ledf2+0xe4>
  20f960:	50c0042e 	bgeu	r10,r3,20f974 <__ledf2+0xec>
  20f964:	283fe81e 	bne	r5,zero,20f908 <_gp+0xffdfdcf4>
  20f968:	003ff806 	br	20f94c <_gp+0xffdfdd38>
  20f96c:	313fee36 	bltu	r6,r4,20f928 <_gp+0xffdfdd14>
  20f970:	21bffc36 	bltu	r4,r6,20f964 <_gp+0xffdfdd50>
  20f974:	0005883a 	mov	r2,zero
  20f978:	f800283a 	ret

0020f97c <__muldf3>:
  20f97c:	deffee04 	addi	sp,sp,-72
  20f980:	dd000c15 	stw	r20,48(sp)
  20f984:	2828d53a 	srli	r20,r5,20
  20f988:	ddc00f15 	stw	r23,60(sp)
  20f98c:	282ed7fa 	srli	r23,r5,31
  20f990:	dc000815 	stw	r16,32(sp)
  20f994:	04000434 	movhi	r16,16
  20f998:	dcc00b15 	stw	r19,44(sp)
  20f99c:	843fffc4 	addi	r16,r16,-1
  20f9a0:	dfc01115 	stw	ra,68(sp)
  20f9a4:	df001015 	stw	fp,64(sp)
  20f9a8:	dd800e15 	stw	r22,56(sp)
  20f9ac:	dd400d15 	stw	r21,52(sp)
  20f9b0:	dc800a15 	stw	r18,40(sp)
  20f9b4:	dc400915 	stw	r17,36(sp)
  20f9b8:	a501ffcc 	andi	r20,r20,2047
  20f9bc:	2c20703a 	and	r16,r5,r16
  20f9c0:	b827883a 	mov	r19,r23
  20f9c4:	ba403fcc 	andi	r9,r23,255
  20f9c8:	a0006026 	beq	r20,zero,20fb4c <__muldf3+0x1d0>
  20f9cc:	0081ffc4 	movi	r2,2047
  20f9d0:	202d883a 	mov	r22,r4
  20f9d4:	a0803626 	beq	r20,r2,20fab0 <__muldf3+0x134>
  20f9d8:	84000434 	orhi	r16,r16,16
  20f9dc:	200ad77a 	srli	r5,r4,29
  20f9e0:	800490fa 	slli	r2,r16,3
  20f9e4:	202c90fa 	slli	r22,r4,3
  20f9e8:	a53f0044 	addi	r20,r20,-1023
  20f9ec:	28a0b03a 	or	r16,r5,r2
  20f9f0:	002b883a 	mov	r21,zero
  20f9f4:	000b883a 	mov	r5,zero
  20f9f8:	3804d53a 	srli	r2,r7,20
  20f9fc:	3838d7fa 	srli	fp,r7,31
  20fa00:	04400434 	movhi	r17,16
  20fa04:	8c7fffc4 	addi	r17,r17,-1
  20fa08:	1081ffcc 	andi	r2,r2,2047
  20fa0c:	3025883a 	mov	r18,r6
  20fa10:	3c62703a 	and	r17,r7,r17
  20fa14:	e2803fcc 	andi	r10,fp,255
  20fa18:	10006d26 	beq	r2,zero,20fbd0 <__muldf3+0x254>
  20fa1c:	00c1ffc4 	movi	r3,2047
  20fa20:	10c06526 	beq	r2,r3,20fbb8 <__muldf3+0x23c>
  20fa24:	8c400434 	orhi	r17,r17,16
  20fa28:	300ed77a 	srli	r7,r6,29
  20fa2c:	880690fa 	slli	r3,r17,3
  20fa30:	302490fa 	slli	r18,r6,3
  20fa34:	10bf0044 	addi	r2,r2,-1023
  20fa38:	38e2b03a 	or	r17,r7,r3
  20fa3c:	000f883a 	mov	r7,zero
  20fa40:	a087883a 	add	r3,r20,r2
  20fa44:	010003c4 	movi	r4,15
  20fa48:	3d44b03a 	or	r2,r7,r21
  20fa4c:	e5ccf03a 	xor	r6,fp,r23
  20fa50:	1a000044 	addi	r8,r3,1
  20fa54:	20809b36 	bltu	r4,r2,20fcc4 <__muldf3+0x348>
  20fa58:	100490ba 	slli	r2,r2,2
  20fa5c:	01000874 	movhi	r4,33
  20fa60:	213e9c04 	addi	r4,r4,-1424
  20fa64:	1105883a 	add	r2,r2,r4
  20fa68:	10800017 	ldw	r2,0(r2)
  20fa6c:	1000683a 	jmp	r2
  20fa70:	0020fcc4 	movi	zero,-31757
  20fa74:	0020fad0 	cmplti	zero,zero,-31765
  20fa78:	0020fad0 	cmplti	zero,zero,-31765
  20fa7c:	0020facc 	andi	zero,zero,33771
  20fa80:	0020fca0 	cmpeqi	zero,zero,-31758
  20fa84:	0020fca0 	cmpeqi	zero,zero,-31758
  20fa88:	0020fc88 	cmpgei	zero,zero,-31758
  20fa8c:	0020facc 	andi	zero,zero,33771
  20fa90:	0020fca0 	cmpeqi	zero,zero,-31758
  20fa94:	0020fc88 	cmpgei	zero,zero,-31758
  20fa98:	0020fca0 	cmpeqi	zero,zero,-31758
  20fa9c:	0020facc 	andi	zero,zero,33771
  20faa0:	0020fcb0 	cmpltui	zero,zero,33778
  20faa4:	0020fcb0 	cmpltui	zero,zero,33778
  20faa8:	0020fcb0 	cmpltui	zero,zero,33778
  20faac:	00210010 	cmplti	zero,zero,-31744
  20fab0:	2404b03a 	or	r2,r4,r16
  20fab4:	1000711e 	bne	r2,zero,20fc7c <__muldf3+0x300>
  20fab8:	05400204 	movi	r21,8
  20fabc:	0021883a 	mov	r16,zero
  20fac0:	002d883a 	mov	r22,zero
  20fac4:	01400084 	movi	r5,2
  20fac8:	003fcb06 	br	20f9f8 <_gp+0xffdfdde4>
  20facc:	500d883a 	mov	r6,r10
  20fad0:	00800084 	movi	r2,2
  20fad4:	38805926 	beq	r7,r2,20fc3c <__muldf3+0x2c0>
  20fad8:	008000c4 	movi	r2,3
  20fadc:	3881bb26 	beq	r7,r2,2101cc <__muldf3+0x850>
  20fae0:	00800044 	movi	r2,1
  20fae4:	3881961e 	bne	r7,r2,210140 <__muldf3+0x7c4>
  20fae8:	3027883a 	mov	r19,r6
  20faec:	0005883a 	mov	r2,zero
  20faf0:	0021883a 	mov	r16,zero
  20faf4:	002d883a 	mov	r22,zero
  20faf8:	1004953a 	slli	r2,r2,20
  20fafc:	98c03fcc 	andi	r3,r19,255
  20fb00:	04400434 	movhi	r17,16
  20fb04:	8c7fffc4 	addi	r17,r17,-1
  20fb08:	180697fa 	slli	r3,r3,31
  20fb0c:	8460703a 	and	r16,r16,r17
  20fb10:	80a0b03a 	or	r16,r16,r2
  20fb14:	80c6b03a 	or	r3,r16,r3
  20fb18:	b005883a 	mov	r2,r22
  20fb1c:	dfc01117 	ldw	ra,68(sp)
  20fb20:	df001017 	ldw	fp,64(sp)
  20fb24:	ddc00f17 	ldw	r23,60(sp)
  20fb28:	dd800e17 	ldw	r22,56(sp)
  20fb2c:	dd400d17 	ldw	r21,52(sp)
  20fb30:	dd000c17 	ldw	r20,48(sp)
  20fb34:	dcc00b17 	ldw	r19,44(sp)
  20fb38:	dc800a17 	ldw	r18,40(sp)
  20fb3c:	dc400917 	ldw	r17,36(sp)
  20fb40:	dc000817 	ldw	r16,32(sp)
  20fb44:	dec01204 	addi	sp,sp,72
  20fb48:	f800283a 	ret
  20fb4c:	2404b03a 	or	r2,r4,r16
  20fb50:	202b883a 	mov	r21,r4
  20fb54:	10004426 	beq	r2,zero,20fc68 <__muldf3+0x2ec>
  20fb58:	80015126 	beq	r16,zero,2100a0 <__muldf3+0x724>
  20fb5c:	8009883a 	mov	r4,r16
  20fb60:	d9800715 	stw	r6,28(sp)
  20fb64:	d9c00215 	stw	r7,8(sp)
  20fb68:	da400415 	stw	r9,16(sp)
  20fb6c:	0203dfc0 	call	203dfc <__clzsi2>
  20fb70:	d9800717 	ldw	r6,28(sp)
  20fb74:	d9c00217 	ldw	r7,8(sp)
  20fb78:	da400417 	ldw	r9,16(sp)
  20fb7c:	113ffd44 	addi	r4,r2,-11
  20fb80:	00c00704 	movi	r3,28
  20fb84:	19014216 	blt	r3,r4,210090 <__muldf3+0x714>
  20fb88:	00c00744 	movi	r3,29
  20fb8c:	15bffe04 	addi	r22,r2,-8
  20fb90:	1907c83a 	sub	r3,r3,r4
  20fb94:	85a0983a 	sll	r16,r16,r22
  20fb98:	a8c6d83a 	srl	r3,r21,r3
  20fb9c:	adac983a 	sll	r22,r21,r22
  20fba0:	1c20b03a 	or	r16,r3,r16
  20fba4:	1080fcc4 	addi	r2,r2,1011
  20fba8:	00a9c83a 	sub	r20,zero,r2
  20fbac:	002b883a 	mov	r21,zero
  20fbb0:	000b883a 	mov	r5,zero
  20fbb4:	003f9006 	br	20f9f8 <_gp+0xffdfdde4>
  20fbb8:	3446b03a 	or	r3,r6,r17
  20fbbc:	1800281e 	bne	r3,zero,20fc60 <__muldf3+0x2e4>
  20fbc0:	0023883a 	mov	r17,zero
  20fbc4:	0025883a 	mov	r18,zero
  20fbc8:	01c00084 	movi	r7,2
  20fbcc:	003f9c06 	br	20fa40 <_gp+0xffdfde2c>
  20fbd0:	3446b03a 	or	r3,r6,r17
  20fbd4:	18001e26 	beq	r3,zero,20fc50 <__muldf3+0x2d4>
  20fbd8:	88012126 	beq	r17,zero,210060 <__muldf3+0x6e4>
  20fbdc:	8809883a 	mov	r4,r17
  20fbe0:	d9400215 	stw	r5,8(sp)
  20fbe4:	d9800715 	stw	r6,28(sp)
  20fbe8:	da400415 	stw	r9,16(sp)
  20fbec:	da800315 	stw	r10,12(sp)
  20fbf0:	0203dfc0 	call	203dfc <__clzsi2>
  20fbf4:	d9400217 	ldw	r5,8(sp)
  20fbf8:	d9800717 	ldw	r6,28(sp)
  20fbfc:	da400417 	ldw	r9,16(sp)
  20fc00:	da800317 	ldw	r10,12(sp)
  20fc04:	113ffd44 	addi	r4,r2,-11
  20fc08:	00c00704 	movi	r3,28
  20fc0c:	19011016 	blt	r3,r4,210050 <__muldf3+0x6d4>
  20fc10:	00c00744 	movi	r3,29
  20fc14:	14bffe04 	addi	r18,r2,-8
  20fc18:	1907c83a 	sub	r3,r3,r4
  20fc1c:	8ca2983a 	sll	r17,r17,r18
  20fc20:	30c6d83a 	srl	r3,r6,r3
  20fc24:	34a4983a 	sll	r18,r6,r18
  20fc28:	1c62b03a 	or	r17,r3,r17
  20fc2c:	1080fcc4 	addi	r2,r2,1011
  20fc30:	0085c83a 	sub	r2,zero,r2
  20fc34:	000f883a 	mov	r7,zero
  20fc38:	003f8106 	br	20fa40 <_gp+0xffdfde2c>
  20fc3c:	3027883a 	mov	r19,r6
  20fc40:	0081ffc4 	movi	r2,2047
  20fc44:	0021883a 	mov	r16,zero
  20fc48:	002d883a 	mov	r22,zero
  20fc4c:	003faa06 	br	20faf8 <_gp+0xffdfdee4>
  20fc50:	0023883a 	mov	r17,zero
  20fc54:	0025883a 	mov	r18,zero
  20fc58:	01c00044 	movi	r7,1
  20fc5c:	003f7806 	br	20fa40 <_gp+0xffdfde2c>
  20fc60:	01c000c4 	movi	r7,3
  20fc64:	003f7606 	br	20fa40 <_gp+0xffdfde2c>
  20fc68:	05400104 	movi	r21,4
  20fc6c:	0021883a 	mov	r16,zero
  20fc70:	002d883a 	mov	r22,zero
  20fc74:	01400044 	movi	r5,1
  20fc78:	003f5f06 	br	20f9f8 <_gp+0xffdfdde4>
  20fc7c:	05400304 	movi	r21,12
  20fc80:	014000c4 	movi	r5,3
  20fc84:	003f5c06 	br	20f9f8 <_gp+0xffdfdde4>
  20fc88:	04000434 	movhi	r16,16
  20fc8c:	0027883a 	mov	r19,zero
  20fc90:	843fffc4 	addi	r16,r16,-1
  20fc94:	05bfffc4 	movi	r22,-1
  20fc98:	0081ffc4 	movi	r2,2047
  20fc9c:	003f9606 	br	20faf8 <_gp+0xffdfdee4>
  20fca0:	8023883a 	mov	r17,r16
  20fca4:	b025883a 	mov	r18,r22
  20fca8:	280f883a 	mov	r7,r5
  20fcac:	003f8806 	br	20fad0 <_gp+0xffdfdebc>
  20fcb0:	8023883a 	mov	r17,r16
  20fcb4:	b025883a 	mov	r18,r22
  20fcb8:	480d883a 	mov	r6,r9
  20fcbc:	280f883a 	mov	r7,r5
  20fcc0:	003f8306 	br	20fad0 <_gp+0xffdfdebc>
  20fcc4:	b026d43a 	srli	r19,r22,16
  20fcc8:	902ed43a 	srli	r23,r18,16
  20fccc:	b5bfffcc 	andi	r22,r22,65535
  20fcd0:	94bfffcc 	andi	r18,r18,65535
  20fcd4:	b00b883a 	mov	r5,r22
  20fcd8:	9009883a 	mov	r4,r18
  20fcdc:	d8c00515 	stw	r3,20(sp)
  20fce0:	d9800715 	stw	r6,28(sp)
  20fce4:	da000615 	stw	r8,24(sp)
  20fce8:	02032a40 	call	2032a4 <__mulsi3>
  20fcec:	980b883a 	mov	r5,r19
  20fcf0:	9009883a 	mov	r4,r18
  20fcf4:	1029883a 	mov	r20,r2
  20fcf8:	02032a40 	call	2032a4 <__mulsi3>
  20fcfc:	b80b883a 	mov	r5,r23
  20fd00:	9809883a 	mov	r4,r19
  20fd04:	102b883a 	mov	r21,r2
  20fd08:	02032a40 	call	2032a4 <__mulsi3>
  20fd0c:	b809883a 	mov	r4,r23
  20fd10:	b00b883a 	mov	r5,r22
  20fd14:	1039883a 	mov	fp,r2
  20fd18:	02032a40 	call	2032a4 <__mulsi3>
  20fd1c:	a008d43a 	srli	r4,r20,16
  20fd20:	1545883a 	add	r2,r2,r21
  20fd24:	d8c00517 	ldw	r3,20(sp)
  20fd28:	2085883a 	add	r2,r4,r2
  20fd2c:	d9800717 	ldw	r6,28(sp)
  20fd30:	da000617 	ldw	r8,24(sp)
  20fd34:	1540022e 	bgeu	r2,r21,20fd40 <__muldf3+0x3c4>
  20fd38:	01000074 	movhi	r4,1
  20fd3c:	e139883a 	add	fp,fp,r4
  20fd40:	100e943a 	slli	r7,r2,16
  20fd44:	1004d43a 	srli	r2,r2,16
  20fd48:	882ad43a 	srli	r21,r17,16
  20fd4c:	a53fffcc 	andi	r20,r20,65535
  20fd50:	8c7fffcc 	andi	r17,r17,65535
  20fd54:	3d29883a 	add	r20,r7,r20
  20fd58:	b00b883a 	mov	r5,r22
  20fd5c:	8809883a 	mov	r4,r17
  20fd60:	d8c00515 	stw	r3,20(sp)
  20fd64:	d9800715 	stw	r6,28(sp)
  20fd68:	da000615 	stw	r8,24(sp)
  20fd6c:	dd000115 	stw	r20,4(sp)
  20fd70:	d8800015 	stw	r2,0(sp)
  20fd74:	02032a40 	call	2032a4 <__mulsi3>
  20fd78:	980b883a 	mov	r5,r19
  20fd7c:	8809883a 	mov	r4,r17
  20fd80:	d8800215 	stw	r2,8(sp)
  20fd84:	02032a40 	call	2032a4 <__mulsi3>
  20fd88:	9809883a 	mov	r4,r19
  20fd8c:	a80b883a 	mov	r5,r21
  20fd90:	1029883a 	mov	r20,r2
  20fd94:	02032a40 	call	2032a4 <__mulsi3>
  20fd98:	b00b883a 	mov	r5,r22
  20fd9c:	a809883a 	mov	r4,r21
  20fda0:	d8800415 	stw	r2,16(sp)
  20fda4:	02032a40 	call	2032a4 <__mulsi3>
  20fda8:	d9c00217 	ldw	r7,8(sp)
  20fdac:	1505883a 	add	r2,r2,r20
  20fdb0:	d8c00517 	ldw	r3,20(sp)
  20fdb4:	3826d43a 	srli	r19,r7,16
  20fdb8:	d9800717 	ldw	r6,28(sp)
  20fdbc:	da000617 	ldw	r8,24(sp)
  20fdc0:	9885883a 	add	r2,r19,r2
  20fdc4:	da400417 	ldw	r9,16(sp)
  20fdc8:	1500022e 	bgeu	r2,r20,20fdd4 <__muldf3+0x458>
  20fdcc:	01000074 	movhi	r4,1
  20fdd0:	4913883a 	add	r9,r9,r4
  20fdd4:	1028d43a 	srli	r20,r2,16
  20fdd8:	1004943a 	slli	r2,r2,16
  20fddc:	802cd43a 	srli	r22,r16,16
  20fde0:	843fffcc 	andi	r16,r16,65535
  20fde4:	3cffffcc 	andi	r19,r7,65535
  20fde8:	9009883a 	mov	r4,r18
  20fdec:	800b883a 	mov	r5,r16
  20fdf0:	a269883a 	add	r20,r20,r9
  20fdf4:	d8c00515 	stw	r3,20(sp)
  20fdf8:	d9800715 	stw	r6,28(sp)
  20fdfc:	da000615 	stw	r8,24(sp)
  20fe00:	14e7883a 	add	r19,r2,r19
  20fe04:	02032a40 	call	2032a4 <__mulsi3>
  20fe08:	9009883a 	mov	r4,r18
  20fe0c:	b00b883a 	mov	r5,r22
  20fe10:	d8800315 	stw	r2,12(sp)
  20fe14:	02032a40 	call	2032a4 <__mulsi3>
  20fe18:	b809883a 	mov	r4,r23
  20fe1c:	b00b883a 	mov	r5,r22
  20fe20:	d8800215 	stw	r2,8(sp)
  20fe24:	02032a40 	call	2032a4 <__mulsi3>
  20fe28:	b80b883a 	mov	r5,r23
  20fe2c:	8009883a 	mov	r4,r16
  20fe30:	d8800415 	stw	r2,16(sp)
  20fe34:	02032a40 	call	2032a4 <__mulsi3>
  20fe38:	da800317 	ldw	r10,12(sp)
  20fe3c:	d9c00217 	ldw	r7,8(sp)
  20fe40:	d9000017 	ldw	r4,0(sp)
  20fe44:	502ed43a 	srli	r23,r10,16
  20fe48:	11c5883a 	add	r2,r2,r7
  20fe4c:	24e5883a 	add	r18,r4,r19
  20fe50:	b885883a 	add	r2,r23,r2
  20fe54:	d8c00517 	ldw	r3,20(sp)
  20fe58:	d9800717 	ldw	r6,28(sp)
  20fe5c:	da000617 	ldw	r8,24(sp)
  20fe60:	da400417 	ldw	r9,16(sp)
  20fe64:	11c0022e 	bgeu	r2,r7,20fe70 <__muldf3+0x4f4>
  20fe68:	01000074 	movhi	r4,1
  20fe6c:	4913883a 	add	r9,r9,r4
  20fe70:	100ed43a 	srli	r7,r2,16
  20fe74:	1004943a 	slli	r2,r2,16
  20fe78:	55ffffcc 	andi	r23,r10,65535
  20fe7c:	3a53883a 	add	r9,r7,r9
  20fe80:	8809883a 	mov	r4,r17
  20fe84:	800b883a 	mov	r5,r16
  20fe88:	d8c00515 	stw	r3,20(sp)
  20fe8c:	d9800715 	stw	r6,28(sp)
  20fe90:	da000615 	stw	r8,24(sp)
  20fe94:	da400415 	stw	r9,16(sp)
  20fe98:	15ef883a 	add	r23,r2,r23
  20fe9c:	02032a40 	call	2032a4 <__mulsi3>
  20fea0:	8809883a 	mov	r4,r17
  20fea4:	b00b883a 	mov	r5,r22
  20fea8:	d8800215 	stw	r2,8(sp)
  20feac:	02032a40 	call	2032a4 <__mulsi3>
  20feb0:	b00b883a 	mov	r5,r22
  20feb4:	a809883a 	mov	r4,r21
  20feb8:	d8800315 	stw	r2,12(sp)
  20febc:	02032a40 	call	2032a4 <__mulsi3>
  20fec0:	8009883a 	mov	r4,r16
  20fec4:	a80b883a 	mov	r5,r21
  20fec8:	1023883a 	mov	r17,r2
  20fecc:	02032a40 	call	2032a4 <__mulsi3>
  20fed0:	d9c00217 	ldw	r7,8(sp)
  20fed4:	da800317 	ldw	r10,12(sp)
  20fed8:	d8c00517 	ldw	r3,20(sp)
  20fedc:	3808d43a 	srli	r4,r7,16
  20fee0:	1285883a 	add	r2,r2,r10
  20fee4:	d9800717 	ldw	r6,28(sp)
  20fee8:	2085883a 	add	r2,r4,r2
  20feec:	da000617 	ldw	r8,24(sp)
  20fef0:	da400417 	ldw	r9,16(sp)
  20fef4:	1280022e 	bgeu	r2,r10,20ff00 <__muldf3+0x584>
  20fef8:	01000074 	movhi	r4,1
  20fefc:	8923883a 	add	r17,r17,r4
  20ff00:	1008943a 	slli	r4,r2,16
  20ff04:	39ffffcc 	andi	r7,r7,65535
  20ff08:	e4b9883a 	add	fp,fp,r18
  20ff0c:	21cf883a 	add	r7,r4,r7
  20ff10:	e4e7803a 	cmpltu	r19,fp,r19
  20ff14:	3d0f883a 	add	r7,r7,r20
  20ff18:	bf39883a 	add	fp,r23,fp
  20ff1c:	99c9883a 	add	r4,r19,r7
  20ff20:	e5ef803a 	cmpltu	r23,fp,r23
  20ff24:	490b883a 	add	r5,r9,r4
  20ff28:	1004d43a 	srli	r2,r2,16
  20ff2c:	b965883a 	add	r18,r23,r5
  20ff30:	24c9803a 	cmpltu	r4,r4,r19
  20ff34:	3d29803a 	cmpltu	r20,r7,r20
  20ff38:	a128b03a 	or	r20,r20,r4
  20ff3c:	95ef803a 	cmpltu	r23,r18,r23
  20ff40:	2a53803a 	cmpltu	r9,r5,r9
  20ff44:	a0a9883a 	add	r20,r20,r2
  20ff48:	4deeb03a 	or	r23,r9,r23
  20ff4c:	a5ef883a 	add	r23,r20,r23
  20ff50:	bc63883a 	add	r17,r23,r17
  20ff54:	e004927a 	slli	r2,fp,9
  20ff58:	d9000117 	ldw	r4,4(sp)
  20ff5c:	882e927a 	slli	r23,r17,9
  20ff60:	9022d5fa 	srli	r17,r18,23
  20ff64:	e038d5fa 	srli	fp,fp,23
  20ff68:	1104b03a 	or	r2,r2,r4
  20ff6c:	9024927a 	slli	r18,r18,9
  20ff70:	1004c03a 	cmpne	r2,r2,zero
  20ff74:	bc62b03a 	or	r17,r23,r17
  20ff78:	1738b03a 	or	fp,r2,fp
  20ff7c:	8880402c 	andhi	r2,r17,256
  20ff80:	e4a4b03a 	or	r18,fp,r18
  20ff84:	10000726 	beq	r2,zero,20ffa4 <__muldf3+0x628>
  20ff88:	9006d07a 	srli	r3,r18,1
  20ff8c:	880497fa 	slli	r2,r17,31
  20ff90:	9480004c 	andi	r18,r18,1
  20ff94:	8822d07a 	srli	r17,r17,1
  20ff98:	1ca4b03a 	or	r18,r3,r18
  20ff9c:	14a4b03a 	or	r18,r2,r18
  20ffa0:	4007883a 	mov	r3,r8
  20ffa4:	1880ffc4 	addi	r2,r3,1023
  20ffa8:	0080460e 	bge	zero,r2,2100c4 <__muldf3+0x748>
  20ffac:	910001cc 	andi	r4,r18,7
  20ffb0:	20000726 	beq	r4,zero,20ffd0 <__muldf3+0x654>
  20ffb4:	910003cc 	andi	r4,r18,15
  20ffb8:	01400104 	movi	r5,4
  20ffbc:	21400426 	beq	r4,r5,20ffd0 <__muldf3+0x654>
  20ffc0:	9149883a 	add	r4,r18,r5
  20ffc4:	24a5803a 	cmpltu	r18,r4,r18
  20ffc8:	8ca3883a 	add	r17,r17,r18
  20ffcc:	2025883a 	mov	r18,r4
  20ffd0:	8900402c 	andhi	r4,r17,256
  20ffd4:	20000426 	beq	r4,zero,20ffe8 <__muldf3+0x66c>
  20ffd8:	18810004 	addi	r2,r3,1024
  20ffdc:	00ffc034 	movhi	r3,65280
  20ffe0:	18ffffc4 	addi	r3,r3,-1
  20ffe4:	88e2703a 	and	r17,r17,r3
  20ffe8:	00c1ff84 	movi	r3,2046
  20ffec:	18bf1316 	blt	r3,r2,20fc3c <_gp+0xffdfe028>
  20fff0:	882c977a 	slli	r22,r17,29
  20fff4:	9024d0fa 	srli	r18,r18,3
  20fff8:	8822927a 	slli	r17,r17,9
  20fffc:	1081ffcc 	andi	r2,r2,2047
  210000:	b4acb03a 	or	r22,r22,r18
  210004:	8820d33a 	srli	r16,r17,12
  210008:	3027883a 	mov	r19,r6
  21000c:	003eba06 	br	20faf8 <_gp+0xffdfdee4>
  210010:	8080022c 	andhi	r2,r16,8
  210014:	10000926 	beq	r2,zero,21003c <__muldf3+0x6c0>
  210018:	8880022c 	andhi	r2,r17,8
  21001c:	1000071e 	bne	r2,zero,21003c <__muldf3+0x6c0>
  210020:	00800434 	movhi	r2,16
  210024:	8c000234 	orhi	r16,r17,8
  210028:	10bfffc4 	addi	r2,r2,-1
  21002c:	e027883a 	mov	r19,fp
  210030:	80a0703a 	and	r16,r16,r2
  210034:	902d883a 	mov	r22,r18
  210038:	003f1706 	br	20fc98 <_gp+0xffdfe084>
  21003c:	00800434 	movhi	r2,16
  210040:	84000234 	orhi	r16,r16,8
  210044:	10bfffc4 	addi	r2,r2,-1
  210048:	80a0703a 	and	r16,r16,r2
  21004c:	003f1206 	br	20fc98 <_gp+0xffdfe084>
  210050:	147ff604 	addi	r17,r2,-40
  210054:	3462983a 	sll	r17,r6,r17
  210058:	0025883a 	mov	r18,zero
  21005c:	003ef306 	br	20fc2c <_gp+0xffdfe018>
  210060:	3009883a 	mov	r4,r6
  210064:	d9400215 	stw	r5,8(sp)
  210068:	d9800715 	stw	r6,28(sp)
  21006c:	da400415 	stw	r9,16(sp)
  210070:	da800315 	stw	r10,12(sp)
  210074:	0203dfc0 	call	203dfc <__clzsi2>
  210078:	10800804 	addi	r2,r2,32
  21007c:	da800317 	ldw	r10,12(sp)
  210080:	da400417 	ldw	r9,16(sp)
  210084:	d9800717 	ldw	r6,28(sp)
  210088:	d9400217 	ldw	r5,8(sp)
  21008c:	003edd06 	br	20fc04 <_gp+0xffdfdff0>
  210090:	143ff604 	addi	r16,r2,-40
  210094:	ac20983a 	sll	r16,r21,r16
  210098:	002d883a 	mov	r22,zero
  21009c:	003ec106 	br	20fba4 <_gp+0xffdfdf90>
  2100a0:	d9800715 	stw	r6,28(sp)
  2100a4:	d9c00215 	stw	r7,8(sp)
  2100a8:	da400415 	stw	r9,16(sp)
  2100ac:	0203dfc0 	call	203dfc <__clzsi2>
  2100b0:	10800804 	addi	r2,r2,32
  2100b4:	da400417 	ldw	r9,16(sp)
  2100b8:	d9c00217 	ldw	r7,8(sp)
  2100bc:	d9800717 	ldw	r6,28(sp)
  2100c0:	003eae06 	br	20fb7c <_gp+0xffdfdf68>
  2100c4:	00c00044 	movi	r3,1
  2100c8:	1887c83a 	sub	r3,r3,r2
  2100cc:	01000e04 	movi	r4,56
  2100d0:	20fe8516 	blt	r4,r3,20fae8 <_gp+0xffdfded4>
  2100d4:	010007c4 	movi	r4,31
  2100d8:	20c01b16 	blt	r4,r3,210148 <__muldf3+0x7cc>
  2100dc:	00800804 	movi	r2,32
  2100e0:	10c5c83a 	sub	r2,r2,r3
  2100e4:	888a983a 	sll	r5,r17,r2
  2100e8:	90c8d83a 	srl	r4,r18,r3
  2100ec:	9084983a 	sll	r2,r18,r2
  2100f0:	88e2d83a 	srl	r17,r17,r3
  2100f4:	2906b03a 	or	r3,r5,r4
  2100f8:	1004c03a 	cmpne	r2,r2,zero
  2100fc:	1886b03a 	or	r3,r3,r2
  210100:	188001cc 	andi	r2,r3,7
  210104:	10000726 	beq	r2,zero,210124 <__muldf3+0x7a8>
  210108:	188003cc 	andi	r2,r3,15
  21010c:	01000104 	movi	r4,4
  210110:	11000426 	beq	r2,r4,210124 <__muldf3+0x7a8>
  210114:	1805883a 	mov	r2,r3
  210118:	10c00104 	addi	r3,r2,4
  21011c:	1885803a 	cmpltu	r2,r3,r2
  210120:	88a3883a 	add	r17,r17,r2
  210124:	8880202c 	andhi	r2,r17,128
  210128:	10001c26 	beq	r2,zero,21019c <__muldf3+0x820>
  21012c:	3027883a 	mov	r19,r6
  210130:	00800044 	movi	r2,1
  210134:	0021883a 	mov	r16,zero
  210138:	002d883a 	mov	r22,zero
  21013c:	003e6e06 	br	20faf8 <_gp+0xffdfdee4>
  210140:	4007883a 	mov	r3,r8
  210144:	003f9706 	br	20ffa4 <_gp+0xffdfe390>
  210148:	017ff844 	movi	r5,-31
  21014c:	2885c83a 	sub	r2,r5,r2
  210150:	888ad83a 	srl	r5,r17,r2
  210154:	00800804 	movi	r2,32
  210158:	18801a26 	beq	r3,r2,2101c4 <__muldf3+0x848>
  21015c:	01001004 	movi	r4,64
  210160:	20c7c83a 	sub	r3,r4,r3
  210164:	88e2983a 	sll	r17,r17,r3
  210168:	8ca4b03a 	or	r18,r17,r18
  21016c:	9004c03a 	cmpne	r2,r18,zero
  210170:	2884b03a 	or	r2,r5,r2
  210174:	144001cc 	andi	r17,r2,7
  210178:	88000d1e 	bne	r17,zero,2101b0 <__muldf3+0x834>
  21017c:	0021883a 	mov	r16,zero
  210180:	102cd0fa 	srli	r22,r2,3
  210184:	3027883a 	mov	r19,r6
  210188:	0005883a 	mov	r2,zero
  21018c:	b46cb03a 	or	r22,r22,r17
  210190:	003e5906 	br	20faf8 <_gp+0xffdfdee4>
  210194:	1007883a 	mov	r3,r2
  210198:	0023883a 	mov	r17,zero
  21019c:	8820927a 	slli	r16,r17,9
  2101a0:	1805883a 	mov	r2,r3
  2101a4:	8822977a 	slli	r17,r17,29
  2101a8:	8020d33a 	srli	r16,r16,12
  2101ac:	003ff406 	br	210180 <_gp+0xffdfe56c>
  2101b0:	10c003cc 	andi	r3,r2,15
  2101b4:	01000104 	movi	r4,4
  2101b8:	193ff626 	beq	r3,r4,210194 <_gp+0xffdfe580>
  2101bc:	0023883a 	mov	r17,zero
  2101c0:	003fd506 	br	210118 <_gp+0xffdfe504>
  2101c4:	0023883a 	mov	r17,zero
  2101c8:	003fe706 	br	210168 <_gp+0xffdfe554>
  2101cc:	00800434 	movhi	r2,16
  2101d0:	8c000234 	orhi	r16,r17,8
  2101d4:	10bfffc4 	addi	r2,r2,-1
  2101d8:	3027883a 	mov	r19,r6
  2101dc:	80a0703a 	and	r16,r16,r2
  2101e0:	902d883a 	mov	r22,r18
  2101e4:	003eac06 	br	20fc98 <_gp+0xffdfe084>

002101e8 <__subdf3>:
  2101e8:	02000434 	movhi	r8,16
  2101ec:	423fffc4 	addi	r8,r8,-1
  2101f0:	defffb04 	addi	sp,sp,-20
  2101f4:	2a14703a 	and	r10,r5,r8
  2101f8:	3812d53a 	srli	r9,r7,20
  2101fc:	3a10703a 	and	r8,r7,r8
  210200:	2006d77a 	srli	r3,r4,29
  210204:	3004d77a 	srli	r2,r6,29
  210208:	dc000015 	stw	r16,0(sp)
  21020c:	501490fa 	slli	r10,r10,3
  210210:	2820d53a 	srli	r16,r5,20
  210214:	401090fa 	slli	r8,r8,3
  210218:	dc800215 	stw	r18,8(sp)
  21021c:	dc400115 	stw	r17,4(sp)
  210220:	dfc00415 	stw	ra,16(sp)
  210224:	202290fa 	slli	r17,r4,3
  210228:	dcc00315 	stw	r19,12(sp)
  21022c:	4a41ffcc 	andi	r9,r9,2047
  210230:	0101ffc4 	movi	r4,2047
  210234:	2824d7fa 	srli	r18,r5,31
  210238:	8401ffcc 	andi	r16,r16,2047
  21023c:	50c6b03a 	or	r3,r10,r3
  210240:	380ed7fa 	srli	r7,r7,31
  210244:	408ab03a 	or	r5,r8,r2
  210248:	300c90fa 	slli	r6,r6,3
  21024c:	49009626 	beq	r9,r4,2104a8 <__subdf3+0x2c0>
  210250:	39c0005c 	xori	r7,r7,1
  210254:	8245c83a 	sub	r2,r16,r9
  210258:	3c807426 	beq	r7,r18,21042c <__subdf3+0x244>
  21025c:	0080af0e 	bge	zero,r2,21051c <__subdf3+0x334>
  210260:	48002a1e 	bne	r9,zero,21030c <__subdf3+0x124>
  210264:	2988b03a 	or	r4,r5,r6
  210268:	20009a1e 	bne	r4,zero,2104d4 <__subdf3+0x2ec>
  21026c:	888001cc 	andi	r2,r17,7
  210270:	10000726 	beq	r2,zero,210290 <__subdf3+0xa8>
  210274:	888003cc 	andi	r2,r17,15
  210278:	01000104 	movi	r4,4
  21027c:	11000426 	beq	r2,r4,210290 <__subdf3+0xa8>
  210280:	890b883a 	add	r5,r17,r4
  210284:	2c63803a 	cmpltu	r17,r5,r17
  210288:	1c47883a 	add	r3,r3,r17
  21028c:	2823883a 	mov	r17,r5
  210290:	1880202c 	andhi	r2,r3,128
  210294:	10005926 	beq	r2,zero,2103fc <__subdf3+0x214>
  210298:	84000044 	addi	r16,r16,1
  21029c:	0081ffc4 	movi	r2,2047
  2102a0:	8080be26 	beq	r16,r2,21059c <__subdf3+0x3b4>
  2102a4:	017fe034 	movhi	r5,65408
  2102a8:	297fffc4 	addi	r5,r5,-1
  2102ac:	1946703a 	and	r3,r3,r5
  2102b0:	1804977a 	slli	r2,r3,29
  2102b4:	1806927a 	slli	r3,r3,9
  2102b8:	8822d0fa 	srli	r17,r17,3
  2102bc:	8401ffcc 	andi	r16,r16,2047
  2102c0:	180ad33a 	srli	r5,r3,12
  2102c4:	9100004c 	andi	r4,r18,1
  2102c8:	1444b03a 	or	r2,r2,r17
  2102cc:	80c1ffcc 	andi	r3,r16,2047
  2102d0:	1820953a 	slli	r16,r3,20
  2102d4:	20c03fcc 	andi	r3,r4,255
  2102d8:	180897fa 	slli	r4,r3,31
  2102dc:	00c00434 	movhi	r3,16
  2102e0:	18ffffc4 	addi	r3,r3,-1
  2102e4:	28c6703a 	and	r3,r5,r3
  2102e8:	1c06b03a 	or	r3,r3,r16
  2102ec:	1906b03a 	or	r3,r3,r4
  2102f0:	dfc00417 	ldw	ra,16(sp)
  2102f4:	dcc00317 	ldw	r19,12(sp)
  2102f8:	dc800217 	ldw	r18,8(sp)
  2102fc:	dc400117 	ldw	r17,4(sp)
  210300:	dc000017 	ldw	r16,0(sp)
  210304:	dec00504 	addi	sp,sp,20
  210308:	f800283a 	ret
  21030c:	0101ffc4 	movi	r4,2047
  210310:	813fd626 	beq	r16,r4,21026c <_gp+0xffdfe658>
  210314:	29402034 	orhi	r5,r5,128
  210318:	01000e04 	movi	r4,56
  21031c:	2080a316 	blt	r4,r2,2105ac <__subdf3+0x3c4>
  210320:	010007c4 	movi	r4,31
  210324:	2080c616 	blt	r4,r2,210640 <__subdf3+0x458>
  210328:	01000804 	movi	r4,32
  21032c:	2089c83a 	sub	r4,r4,r2
  210330:	2910983a 	sll	r8,r5,r4
  210334:	308ed83a 	srl	r7,r6,r2
  210338:	3108983a 	sll	r4,r6,r4
  21033c:	2884d83a 	srl	r2,r5,r2
  210340:	41ccb03a 	or	r6,r8,r7
  210344:	2008c03a 	cmpne	r4,r4,zero
  210348:	310cb03a 	or	r6,r6,r4
  21034c:	898dc83a 	sub	r6,r17,r6
  210350:	89a3803a 	cmpltu	r17,r17,r6
  210354:	1887c83a 	sub	r3,r3,r2
  210358:	1c47c83a 	sub	r3,r3,r17
  21035c:	3023883a 	mov	r17,r6
  210360:	1880202c 	andhi	r2,r3,128
  210364:	10002326 	beq	r2,zero,2103f4 <__subdf3+0x20c>
  210368:	04c02034 	movhi	r19,128
  21036c:	9cffffc4 	addi	r19,r19,-1
  210370:	1ce6703a 	and	r19,r3,r19
  210374:	98007a26 	beq	r19,zero,210560 <__subdf3+0x378>
  210378:	9809883a 	mov	r4,r19
  21037c:	0203dfc0 	call	203dfc <__clzsi2>
  210380:	113ffe04 	addi	r4,r2,-8
  210384:	00c007c4 	movi	r3,31
  210388:	19007b16 	blt	r3,r4,210578 <__subdf3+0x390>
  21038c:	00800804 	movi	r2,32
  210390:	1105c83a 	sub	r2,r2,r4
  210394:	8884d83a 	srl	r2,r17,r2
  210398:	9906983a 	sll	r3,r19,r4
  21039c:	8922983a 	sll	r17,r17,r4
  2103a0:	10c4b03a 	or	r2,r2,r3
  2103a4:	24007816 	blt	r4,r16,210588 <__subdf3+0x3a0>
  2103a8:	2421c83a 	sub	r16,r4,r16
  2103ac:	80c00044 	addi	r3,r16,1
  2103b0:	010007c4 	movi	r4,31
  2103b4:	20c09516 	blt	r4,r3,21060c <__subdf3+0x424>
  2103b8:	01400804 	movi	r5,32
  2103bc:	28cbc83a 	sub	r5,r5,r3
  2103c0:	88c8d83a 	srl	r4,r17,r3
  2103c4:	8962983a 	sll	r17,r17,r5
  2103c8:	114a983a 	sll	r5,r2,r5
  2103cc:	10c6d83a 	srl	r3,r2,r3
  2103d0:	8804c03a 	cmpne	r2,r17,zero
  2103d4:	290ab03a 	or	r5,r5,r4
  2103d8:	28a2b03a 	or	r17,r5,r2
  2103dc:	0021883a 	mov	r16,zero
  2103e0:	003fa206 	br	21026c <_gp+0xffdfe658>
  2103e4:	2090b03a 	or	r8,r4,r2
  2103e8:	40018e26 	beq	r8,zero,210a24 <__subdf3+0x83c>
  2103ec:	1007883a 	mov	r3,r2
  2103f0:	2023883a 	mov	r17,r4
  2103f4:	888001cc 	andi	r2,r17,7
  2103f8:	103f9e1e 	bne	r2,zero,210274 <_gp+0xffdfe660>
  2103fc:	1804977a 	slli	r2,r3,29
  210400:	8822d0fa 	srli	r17,r17,3
  210404:	1810d0fa 	srli	r8,r3,3
  210408:	9100004c 	andi	r4,r18,1
  21040c:	1444b03a 	or	r2,r2,r17
  210410:	00c1ffc4 	movi	r3,2047
  210414:	80c02826 	beq	r16,r3,2104b8 <__subdf3+0x2d0>
  210418:	01400434 	movhi	r5,16
  21041c:	297fffc4 	addi	r5,r5,-1
  210420:	80e0703a 	and	r16,r16,r3
  210424:	414a703a 	and	r5,r8,r5
  210428:	003fa806 	br	2102cc <_gp+0xffdfe6b8>
  21042c:	0080630e 	bge	zero,r2,2105bc <__subdf3+0x3d4>
  210430:	48003026 	beq	r9,zero,2104f4 <__subdf3+0x30c>
  210434:	0101ffc4 	movi	r4,2047
  210438:	813f8c26 	beq	r16,r4,21026c <_gp+0xffdfe658>
  21043c:	29402034 	orhi	r5,r5,128
  210440:	01000e04 	movi	r4,56
  210444:	2080a90e 	bge	r4,r2,2106ec <__subdf3+0x504>
  210448:	298cb03a 	or	r6,r5,r6
  21044c:	3012c03a 	cmpne	r9,r6,zero
  210450:	0005883a 	mov	r2,zero
  210454:	4c53883a 	add	r9,r9,r17
  210458:	4c63803a 	cmpltu	r17,r9,r17
  21045c:	10c7883a 	add	r3,r2,r3
  210460:	88c7883a 	add	r3,r17,r3
  210464:	4823883a 	mov	r17,r9
  210468:	1880202c 	andhi	r2,r3,128
  21046c:	1000d026 	beq	r2,zero,2107b0 <__subdf3+0x5c8>
  210470:	84000044 	addi	r16,r16,1
  210474:	0081ffc4 	movi	r2,2047
  210478:	8080fe26 	beq	r16,r2,210874 <__subdf3+0x68c>
  21047c:	00bfe034 	movhi	r2,65408
  210480:	10bfffc4 	addi	r2,r2,-1
  210484:	1886703a 	and	r3,r3,r2
  210488:	880ad07a 	srli	r5,r17,1
  21048c:	180497fa 	slli	r2,r3,31
  210490:	8900004c 	andi	r4,r17,1
  210494:	2922b03a 	or	r17,r5,r4
  210498:	1806d07a 	srli	r3,r3,1
  21049c:	1462b03a 	or	r17,r2,r17
  2104a0:	3825883a 	mov	r18,r7
  2104a4:	003f7106 	br	21026c <_gp+0xffdfe658>
  2104a8:	2984b03a 	or	r2,r5,r6
  2104ac:	103f6826 	beq	r2,zero,210250 <_gp+0xffdfe63c>
  2104b0:	39c03fcc 	andi	r7,r7,255
  2104b4:	003f6706 	br	210254 <_gp+0xffdfe640>
  2104b8:	4086b03a 	or	r3,r8,r2
  2104bc:	18015226 	beq	r3,zero,210a08 <__subdf3+0x820>
  2104c0:	00c00434 	movhi	r3,16
  2104c4:	41400234 	orhi	r5,r8,8
  2104c8:	18ffffc4 	addi	r3,r3,-1
  2104cc:	28ca703a 	and	r5,r5,r3
  2104d0:	003f7e06 	br	2102cc <_gp+0xffdfe6b8>
  2104d4:	10bfffc4 	addi	r2,r2,-1
  2104d8:	1000491e 	bne	r2,zero,210600 <__subdf3+0x418>
  2104dc:	898fc83a 	sub	r7,r17,r6
  2104e0:	89e3803a 	cmpltu	r17,r17,r7
  2104e4:	1947c83a 	sub	r3,r3,r5
  2104e8:	1c47c83a 	sub	r3,r3,r17
  2104ec:	3823883a 	mov	r17,r7
  2104f0:	003f9b06 	br	210360 <_gp+0xffdfe74c>
  2104f4:	2988b03a 	or	r4,r5,r6
  2104f8:	203f5c26 	beq	r4,zero,21026c <_gp+0xffdfe658>
  2104fc:	10bfffc4 	addi	r2,r2,-1
  210500:	1000931e 	bne	r2,zero,210750 <__subdf3+0x568>
  210504:	898d883a 	add	r6,r17,r6
  210508:	3463803a 	cmpltu	r17,r6,r17
  21050c:	1947883a 	add	r3,r3,r5
  210510:	88c7883a 	add	r3,r17,r3
  210514:	3023883a 	mov	r17,r6
  210518:	003fd306 	br	210468 <_gp+0xffdfe854>
  21051c:	1000541e 	bne	r2,zero,210670 <__subdf3+0x488>
  210520:	80800044 	addi	r2,r16,1
  210524:	1081ffcc 	andi	r2,r2,2047
  210528:	01000044 	movi	r4,1
  21052c:	2080a20e 	bge	r4,r2,2107b8 <__subdf3+0x5d0>
  210530:	8989c83a 	sub	r4,r17,r6
  210534:	8905803a 	cmpltu	r2,r17,r4
  210538:	1967c83a 	sub	r19,r3,r5
  21053c:	98a7c83a 	sub	r19,r19,r2
  210540:	9880202c 	andhi	r2,r19,128
  210544:	10006326 	beq	r2,zero,2106d4 <__subdf3+0x4ec>
  210548:	3463c83a 	sub	r17,r6,r17
  21054c:	28c7c83a 	sub	r3,r5,r3
  210550:	344d803a 	cmpltu	r6,r6,r17
  210554:	19a7c83a 	sub	r19,r3,r6
  210558:	3825883a 	mov	r18,r7
  21055c:	983f861e 	bne	r19,zero,210378 <_gp+0xffdfe764>
  210560:	8809883a 	mov	r4,r17
  210564:	0203dfc0 	call	203dfc <__clzsi2>
  210568:	10800804 	addi	r2,r2,32
  21056c:	113ffe04 	addi	r4,r2,-8
  210570:	00c007c4 	movi	r3,31
  210574:	193f850e 	bge	r3,r4,21038c <_gp+0xffdfe778>
  210578:	10bff604 	addi	r2,r2,-40
  21057c:	8884983a 	sll	r2,r17,r2
  210580:	0023883a 	mov	r17,zero
  210584:	243f880e 	bge	r4,r16,2103a8 <_gp+0xffdfe794>
  210588:	00ffe034 	movhi	r3,65408
  21058c:	18ffffc4 	addi	r3,r3,-1
  210590:	8121c83a 	sub	r16,r16,r4
  210594:	10c6703a 	and	r3,r2,r3
  210598:	003f3406 	br	21026c <_gp+0xffdfe658>
  21059c:	9100004c 	andi	r4,r18,1
  2105a0:	000b883a 	mov	r5,zero
  2105a4:	0005883a 	mov	r2,zero
  2105a8:	003f4806 	br	2102cc <_gp+0xffdfe6b8>
  2105ac:	298cb03a 	or	r6,r5,r6
  2105b0:	300cc03a 	cmpne	r6,r6,zero
  2105b4:	0005883a 	mov	r2,zero
  2105b8:	003f6406 	br	21034c <_gp+0xffdfe738>
  2105bc:	10009a1e 	bne	r2,zero,210828 <__subdf3+0x640>
  2105c0:	82400044 	addi	r9,r16,1
  2105c4:	4881ffcc 	andi	r2,r9,2047
  2105c8:	02800044 	movi	r10,1
  2105cc:	5080670e 	bge	r10,r2,21076c <__subdf3+0x584>
  2105d0:	0081ffc4 	movi	r2,2047
  2105d4:	4880af26 	beq	r9,r2,210894 <__subdf3+0x6ac>
  2105d8:	898d883a 	add	r6,r17,r6
  2105dc:	1945883a 	add	r2,r3,r5
  2105e0:	3447803a 	cmpltu	r3,r6,r17
  2105e4:	1887883a 	add	r3,r3,r2
  2105e8:	182297fa 	slli	r17,r3,31
  2105ec:	300cd07a 	srli	r6,r6,1
  2105f0:	1806d07a 	srli	r3,r3,1
  2105f4:	4821883a 	mov	r16,r9
  2105f8:	89a2b03a 	or	r17,r17,r6
  2105fc:	003f1b06 	br	21026c <_gp+0xffdfe658>
  210600:	0101ffc4 	movi	r4,2047
  210604:	813f441e 	bne	r16,r4,210318 <_gp+0xffdfe704>
  210608:	003f1806 	br	21026c <_gp+0xffdfe658>
  21060c:	843ff844 	addi	r16,r16,-31
  210610:	01400804 	movi	r5,32
  210614:	1408d83a 	srl	r4,r2,r16
  210618:	19405026 	beq	r3,r5,21075c <__subdf3+0x574>
  21061c:	01401004 	movi	r5,64
  210620:	28c7c83a 	sub	r3,r5,r3
  210624:	10c4983a 	sll	r2,r2,r3
  210628:	88a2b03a 	or	r17,r17,r2
  21062c:	8822c03a 	cmpne	r17,r17,zero
  210630:	2462b03a 	or	r17,r4,r17
  210634:	0007883a 	mov	r3,zero
  210638:	0021883a 	mov	r16,zero
  21063c:	003f6d06 	br	2103f4 <_gp+0xffdfe7e0>
  210640:	11fff804 	addi	r7,r2,-32
  210644:	01000804 	movi	r4,32
  210648:	29ced83a 	srl	r7,r5,r7
  21064c:	11004526 	beq	r2,r4,210764 <__subdf3+0x57c>
  210650:	01001004 	movi	r4,64
  210654:	2089c83a 	sub	r4,r4,r2
  210658:	2904983a 	sll	r2,r5,r4
  21065c:	118cb03a 	or	r6,r2,r6
  210660:	300cc03a 	cmpne	r6,r6,zero
  210664:	398cb03a 	or	r6,r7,r6
  210668:	0005883a 	mov	r2,zero
  21066c:	003f3706 	br	21034c <_gp+0xffdfe738>
  210670:	80002a26 	beq	r16,zero,21071c <__subdf3+0x534>
  210674:	0101ffc4 	movi	r4,2047
  210678:	49006626 	beq	r9,r4,210814 <__subdf3+0x62c>
  21067c:	0085c83a 	sub	r2,zero,r2
  210680:	18c02034 	orhi	r3,r3,128
  210684:	01000e04 	movi	r4,56
  210688:	20807e16 	blt	r4,r2,210884 <__subdf3+0x69c>
  21068c:	010007c4 	movi	r4,31
  210690:	2080e716 	blt	r4,r2,210a30 <__subdf3+0x848>
  210694:	01000804 	movi	r4,32
  210698:	2089c83a 	sub	r4,r4,r2
  21069c:	1914983a 	sll	r10,r3,r4
  2106a0:	8890d83a 	srl	r8,r17,r2
  2106a4:	8908983a 	sll	r4,r17,r4
  2106a8:	1884d83a 	srl	r2,r3,r2
  2106ac:	5222b03a 	or	r17,r10,r8
  2106b0:	2006c03a 	cmpne	r3,r4,zero
  2106b4:	88e2b03a 	or	r17,r17,r3
  2106b8:	3463c83a 	sub	r17,r6,r17
  2106bc:	2885c83a 	sub	r2,r5,r2
  2106c0:	344d803a 	cmpltu	r6,r6,r17
  2106c4:	1187c83a 	sub	r3,r2,r6
  2106c8:	4821883a 	mov	r16,r9
  2106cc:	3825883a 	mov	r18,r7
  2106d0:	003f2306 	br	210360 <_gp+0xffdfe74c>
  2106d4:	24d0b03a 	or	r8,r4,r19
  2106d8:	40001b1e 	bne	r8,zero,210748 <__subdf3+0x560>
  2106dc:	0005883a 	mov	r2,zero
  2106e0:	0009883a 	mov	r4,zero
  2106e4:	0021883a 	mov	r16,zero
  2106e8:	003f4906 	br	210410 <_gp+0xffdfe7fc>
  2106ec:	010007c4 	movi	r4,31
  2106f0:	20803a16 	blt	r4,r2,2107dc <__subdf3+0x5f4>
  2106f4:	01000804 	movi	r4,32
  2106f8:	2089c83a 	sub	r4,r4,r2
  2106fc:	2912983a 	sll	r9,r5,r4
  210700:	3090d83a 	srl	r8,r6,r2
  210704:	3108983a 	sll	r4,r6,r4
  210708:	2884d83a 	srl	r2,r5,r2
  21070c:	4a12b03a 	or	r9,r9,r8
  210710:	2008c03a 	cmpne	r4,r4,zero
  210714:	4912b03a 	or	r9,r9,r4
  210718:	003f4e06 	br	210454 <_gp+0xffdfe840>
  21071c:	1c48b03a 	or	r4,r3,r17
  210720:	20003c26 	beq	r4,zero,210814 <__subdf3+0x62c>
  210724:	0084303a 	nor	r2,zero,r2
  210728:	1000381e 	bne	r2,zero,21080c <__subdf3+0x624>
  21072c:	3463c83a 	sub	r17,r6,r17
  210730:	28c5c83a 	sub	r2,r5,r3
  210734:	344d803a 	cmpltu	r6,r6,r17
  210738:	1187c83a 	sub	r3,r2,r6
  21073c:	4821883a 	mov	r16,r9
  210740:	3825883a 	mov	r18,r7
  210744:	003f0606 	br	210360 <_gp+0xffdfe74c>
  210748:	2023883a 	mov	r17,r4
  21074c:	003f0906 	br	210374 <_gp+0xffdfe760>
  210750:	0101ffc4 	movi	r4,2047
  210754:	813f3a1e 	bne	r16,r4,210440 <_gp+0xffdfe82c>
  210758:	003ec406 	br	21026c <_gp+0xffdfe658>
  21075c:	0005883a 	mov	r2,zero
  210760:	003fb106 	br	210628 <_gp+0xffdfea14>
  210764:	0005883a 	mov	r2,zero
  210768:	003fbc06 	br	21065c <_gp+0xffdfea48>
  21076c:	1c44b03a 	or	r2,r3,r17
  210770:	80008e1e 	bne	r16,zero,2109ac <__subdf3+0x7c4>
  210774:	1000c826 	beq	r2,zero,210a98 <__subdf3+0x8b0>
  210778:	2984b03a 	or	r2,r5,r6
  21077c:	103ebb26 	beq	r2,zero,21026c <_gp+0xffdfe658>
  210780:	8989883a 	add	r4,r17,r6
  210784:	1945883a 	add	r2,r3,r5
  210788:	2447803a 	cmpltu	r3,r4,r17
  21078c:	1887883a 	add	r3,r3,r2
  210790:	1880202c 	andhi	r2,r3,128
  210794:	2023883a 	mov	r17,r4
  210798:	103f1626 	beq	r2,zero,2103f4 <_gp+0xffdfe7e0>
  21079c:	00bfe034 	movhi	r2,65408
  2107a0:	10bfffc4 	addi	r2,r2,-1
  2107a4:	5021883a 	mov	r16,r10
  2107a8:	1886703a 	and	r3,r3,r2
  2107ac:	003eaf06 	br	21026c <_gp+0xffdfe658>
  2107b0:	3825883a 	mov	r18,r7
  2107b4:	003f0f06 	br	2103f4 <_gp+0xffdfe7e0>
  2107b8:	1c44b03a 	or	r2,r3,r17
  2107bc:	8000251e 	bne	r16,zero,210854 <__subdf3+0x66c>
  2107c0:	1000661e 	bne	r2,zero,21095c <__subdf3+0x774>
  2107c4:	2990b03a 	or	r8,r5,r6
  2107c8:	40009626 	beq	r8,zero,210a24 <__subdf3+0x83c>
  2107cc:	2807883a 	mov	r3,r5
  2107d0:	3023883a 	mov	r17,r6
  2107d4:	3825883a 	mov	r18,r7
  2107d8:	003ea406 	br	21026c <_gp+0xffdfe658>
  2107dc:	127ff804 	addi	r9,r2,-32
  2107e0:	01000804 	movi	r4,32
  2107e4:	2a52d83a 	srl	r9,r5,r9
  2107e8:	11008c26 	beq	r2,r4,210a1c <__subdf3+0x834>
  2107ec:	01001004 	movi	r4,64
  2107f0:	2085c83a 	sub	r2,r4,r2
  2107f4:	2884983a 	sll	r2,r5,r2
  2107f8:	118cb03a 	or	r6,r2,r6
  2107fc:	300cc03a 	cmpne	r6,r6,zero
  210800:	4992b03a 	or	r9,r9,r6
  210804:	0005883a 	mov	r2,zero
  210808:	003f1206 	br	210454 <_gp+0xffdfe840>
  21080c:	0101ffc4 	movi	r4,2047
  210810:	493f9c1e 	bne	r9,r4,210684 <_gp+0xffdfea70>
  210814:	2807883a 	mov	r3,r5
  210818:	3023883a 	mov	r17,r6
  21081c:	4821883a 	mov	r16,r9
  210820:	3825883a 	mov	r18,r7
  210824:	003e9106 	br	21026c <_gp+0xffdfe658>
  210828:	80001f1e 	bne	r16,zero,2108a8 <__subdf3+0x6c0>
  21082c:	1c48b03a 	or	r4,r3,r17
  210830:	20005a26 	beq	r4,zero,21099c <__subdf3+0x7b4>
  210834:	0084303a 	nor	r2,zero,r2
  210838:	1000561e 	bne	r2,zero,210994 <__subdf3+0x7ac>
  21083c:	89a3883a 	add	r17,r17,r6
  210840:	1945883a 	add	r2,r3,r5
  210844:	898d803a 	cmpltu	r6,r17,r6
  210848:	3087883a 	add	r3,r6,r2
  21084c:	4821883a 	mov	r16,r9
  210850:	003f0506 	br	210468 <_gp+0xffdfe854>
  210854:	10002b1e 	bne	r2,zero,210904 <__subdf3+0x71c>
  210858:	2984b03a 	or	r2,r5,r6
  21085c:	10008026 	beq	r2,zero,210a60 <__subdf3+0x878>
  210860:	2807883a 	mov	r3,r5
  210864:	3023883a 	mov	r17,r6
  210868:	3825883a 	mov	r18,r7
  21086c:	0401ffc4 	movi	r16,2047
  210870:	003e7e06 	br	21026c <_gp+0xffdfe658>
  210874:	3809883a 	mov	r4,r7
  210878:	0011883a 	mov	r8,zero
  21087c:	0005883a 	mov	r2,zero
  210880:	003ee306 	br	210410 <_gp+0xffdfe7fc>
  210884:	1c62b03a 	or	r17,r3,r17
  210888:	8822c03a 	cmpne	r17,r17,zero
  21088c:	0005883a 	mov	r2,zero
  210890:	003f8906 	br	2106b8 <_gp+0xffdfeaa4>
  210894:	3809883a 	mov	r4,r7
  210898:	4821883a 	mov	r16,r9
  21089c:	0011883a 	mov	r8,zero
  2108a0:	0005883a 	mov	r2,zero
  2108a4:	003eda06 	br	210410 <_gp+0xffdfe7fc>
  2108a8:	0101ffc4 	movi	r4,2047
  2108ac:	49003b26 	beq	r9,r4,21099c <__subdf3+0x7b4>
  2108b0:	0085c83a 	sub	r2,zero,r2
  2108b4:	18c02034 	orhi	r3,r3,128
  2108b8:	01000e04 	movi	r4,56
  2108bc:	20806e16 	blt	r4,r2,210a78 <__subdf3+0x890>
  2108c0:	010007c4 	movi	r4,31
  2108c4:	20807716 	blt	r4,r2,210aa4 <__subdf3+0x8bc>
  2108c8:	01000804 	movi	r4,32
  2108cc:	2089c83a 	sub	r4,r4,r2
  2108d0:	1914983a 	sll	r10,r3,r4
  2108d4:	8890d83a 	srl	r8,r17,r2
  2108d8:	8908983a 	sll	r4,r17,r4
  2108dc:	1884d83a 	srl	r2,r3,r2
  2108e0:	5222b03a 	or	r17,r10,r8
  2108e4:	2006c03a 	cmpne	r3,r4,zero
  2108e8:	88e2b03a 	or	r17,r17,r3
  2108ec:	89a3883a 	add	r17,r17,r6
  2108f0:	1145883a 	add	r2,r2,r5
  2108f4:	898d803a 	cmpltu	r6,r17,r6
  2108f8:	3087883a 	add	r3,r6,r2
  2108fc:	4821883a 	mov	r16,r9
  210900:	003ed906 	br	210468 <_gp+0xffdfe854>
  210904:	2984b03a 	or	r2,r5,r6
  210908:	10004226 	beq	r2,zero,210a14 <__subdf3+0x82c>
  21090c:	1808d0fa 	srli	r4,r3,3
  210910:	8822d0fa 	srli	r17,r17,3
  210914:	1806977a 	slli	r3,r3,29
  210918:	2080022c 	andhi	r2,r4,8
  21091c:	1c62b03a 	or	r17,r3,r17
  210920:	10000826 	beq	r2,zero,210944 <__subdf3+0x75c>
  210924:	2812d0fa 	srli	r9,r5,3
  210928:	4880022c 	andhi	r2,r9,8
  21092c:	1000051e 	bne	r2,zero,210944 <__subdf3+0x75c>
  210930:	300cd0fa 	srli	r6,r6,3
  210934:	2804977a 	slli	r2,r5,29
  210938:	4809883a 	mov	r4,r9
  21093c:	3825883a 	mov	r18,r7
  210940:	11a2b03a 	or	r17,r2,r6
  210944:	8806d77a 	srli	r3,r17,29
  210948:	200890fa 	slli	r4,r4,3
  21094c:	882290fa 	slli	r17,r17,3
  210950:	0401ffc4 	movi	r16,2047
  210954:	1906b03a 	or	r3,r3,r4
  210958:	003e4406 	br	21026c <_gp+0xffdfe658>
  21095c:	2984b03a 	or	r2,r5,r6
  210960:	103e4226 	beq	r2,zero,21026c <_gp+0xffdfe658>
  210964:	8989c83a 	sub	r4,r17,r6
  210968:	8911803a 	cmpltu	r8,r17,r4
  21096c:	1945c83a 	sub	r2,r3,r5
  210970:	1205c83a 	sub	r2,r2,r8
  210974:	1200202c 	andhi	r8,r2,128
  210978:	403e9a26 	beq	r8,zero,2103e4 <_gp+0xffdfe7d0>
  21097c:	3463c83a 	sub	r17,r6,r17
  210980:	28c5c83a 	sub	r2,r5,r3
  210984:	344d803a 	cmpltu	r6,r6,r17
  210988:	1187c83a 	sub	r3,r2,r6
  21098c:	3825883a 	mov	r18,r7
  210990:	003e3606 	br	21026c <_gp+0xffdfe658>
  210994:	0101ffc4 	movi	r4,2047
  210998:	493fc71e 	bne	r9,r4,2108b8 <_gp+0xffdfeca4>
  21099c:	2807883a 	mov	r3,r5
  2109a0:	3023883a 	mov	r17,r6
  2109a4:	4821883a 	mov	r16,r9
  2109a8:	003e3006 	br	21026c <_gp+0xffdfe658>
  2109ac:	10003626 	beq	r2,zero,210a88 <__subdf3+0x8a0>
  2109b0:	2984b03a 	or	r2,r5,r6
  2109b4:	10001726 	beq	r2,zero,210a14 <__subdf3+0x82c>
  2109b8:	1808d0fa 	srli	r4,r3,3
  2109bc:	8822d0fa 	srli	r17,r17,3
  2109c0:	1806977a 	slli	r3,r3,29
  2109c4:	2080022c 	andhi	r2,r4,8
  2109c8:	1c62b03a 	or	r17,r3,r17
  2109cc:	10000726 	beq	r2,zero,2109ec <__subdf3+0x804>
  2109d0:	2812d0fa 	srli	r9,r5,3
  2109d4:	4880022c 	andhi	r2,r9,8
  2109d8:	1000041e 	bne	r2,zero,2109ec <__subdf3+0x804>
  2109dc:	300cd0fa 	srli	r6,r6,3
  2109e0:	2804977a 	slli	r2,r5,29
  2109e4:	4809883a 	mov	r4,r9
  2109e8:	11a2b03a 	or	r17,r2,r6
  2109ec:	8806d77a 	srli	r3,r17,29
  2109f0:	200890fa 	slli	r4,r4,3
  2109f4:	882290fa 	slli	r17,r17,3
  2109f8:	3825883a 	mov	r18,r7
  2109fc:	1906b03a 	or	r3,r3,r4
  210a00:	0401ffc4 	movi	r16,2047
  210a04:	003e1906 	br	21026c <_gp+0xffdfe658>
  210a08:	000b883a 	mov	r5,zero
  210a0c:	0005883a 	mov	r2,zero
  210a10:	003e2e06 	br	2102cc <_gp+0xffdfe6b8>
  210a14:	0401ffc4 	movi	r16,2047
  210a18:	003e1406 	br	21026c <_gp+0xffdfe658>
  210a1c:	0005883a 	mov	r2,zero
  210a20:	003f7506 	br	2107f8 <_gp+0xffdfebe4>
  210a24:	0005883a 	mov	r2,zero
  210a28:	0009883a 	mov	r4,zero
  210a2c:	003e7806 	br	210410 <_gp+0xffdfe7fc>
  210a30:	123ff804 	addi	r8,r2,-32
  210a34:	01000804 	movi	r4,32
  210a38:	1a10d83a 	srl	r8,r3,r8
  210a3c:	11002526 	beq	r2,r4,210ad4 <__subdf3+0x8ec>
  210a40:	01001004 	movi	r4,64
  210a44:	2085c83a 	sub	r2,r4,r2
  210a48:	1884983a 	sll	r2,r3,r2
  210a4c:	1444b03a 	or	r2,r2,r17
  210a50:	1004c03a 	cmpne	r2,r2,zero
  210a54:	40a2b03a 	or	r17,r8,r2
  210a58:	0005883a 	mov	r2,zero
  210a5c:	003f1606 	br	2106b8 <_gp+0xffdfeaa4>
  210a60:	02000434 	movhi	r8,16
  210a64:	0009883a 	mov	r4,zero
  210a68:	423fffc4 	addi	r8,r8,-1
  210a6c:	00bfffc4 	movi	r2,-1
  210a70:	0401ffc4 	movi	r16,2047
  210a74:	003e6606 	br	210410 <_gp+0xffdfe7fc>
  210a78:	1c62b03a 	or	r17,r3,r17
  210a7c:	8822c03a 	cmpne	r17,r17,zero
  210a80:	0005883a 	mov	r2,zero
  210a84:	003f9906 	br	2108ec <_gp+0xffdfecd8>
  210a88:	2807883a 	mov	r3,r5
  210a8c:	3023883a 	mov	r17,r6
  210a90:	0401ffc4 	movi	r16,2047
  210a94:	003df506 	br	21026c <_gp+0xffdfe658>
  210a98:	2807883a 	mov	r3,r5
  210a9c:	3023883a 	mov	r17,r6
  210aa0:	003df206 	br	21026c <_gp+0xffdfe658>
  210aa4:	123ff804 	addi	r8,r2,-32
  210aa8:	01000804 	movi	r4,32
  210aac:	1a10d83a 	srl	r8,r3,r8
  210ab0:	11000a26 	beq	r2,r4,210adc <__subdf3+0x8f4>
  210ab4:	01001004 	movi	r4,64
  210ab8:	2085c83a 	sub	r2,r4,r2
  210abc:	1884983a 	sll	r2,r3,r2
  210ac0:	1444b03a 	or	r2,r2,r17
  210ac4:	1004c03a 	cmpne	r2,r2,zero
  210ac8:	40a2b03a 	or	r17,r8,r2
  210acc:	0005883a 	mov	r2,zero
  210ad0:	003f8606 	br	2108ec <_gp+0xffdfecd8>
  210ad4:	0005883a 	mov	r2,zero
  210ad8:	003fdc06 	br	210a4c <_gp+0xffdfee38>
  210adc:	0005883a 	mov	r2,zero
  210ae0:	003ff706 	br	210ac0 <_gp+0xffdfeeac>

00210ae4 <__fixdfsi>:
  210ae4:	280cd53a 	srli	r6,r5,20
  210ae8:	00c00434 	movhi	r3,16
  210aec:	18ffffc4 	addi	r3,r3,-1
  210af0:	3181ffcc 	andi	r6,r6,2047
  210af4:	01c0ff84 	movi	r7,1022
  210af8:	28c6703a 	and	r3,r5,r3
  210afc:	280ad7fa 	srli	r5,r5,31
  210b00:	3980120e 	bge	r7,r6,210b4c <__fixdfsi+0x68>
  210b04:	00810744 	movi	r2,1053
  210b08:	11800c16 	blt	r2,r6,210b3c <__fixdfsi+0x58>
  210b0c:	00810cc4 	movi	r2,1075
  210b10:	1185c83a 	sub	r2,r2,r6
  210b14:	01c007c4 	movi	r7,31
  210b18:	18c00434 	orhi	r3,r3,16
  210b1c:	38800d16 	blt	r7,r2,210b54 <__fixdfsi+0x70>
  210b20:	31befb44 	addi	r6,r6,-1043
  210b24:	2084d83a 	srl	r2,r4,r2
  210b28:	1986983a 	sll	r3,r3,r6
  210b2c:	1884b03a 	or	r2,r3,r2
  210b30:	28000726 	beq	r5,zero,210b50 <__fixdfsi+0x6c>
  210b34:	0085c83a 	sub	r2,zero,r2
  210b38:	f800283a 	ret
  210b3c:	00a00034 	movhi	r2,32768
  210b40:	10bfffc4 	addi	r2,r2,-1
  210b44:	2885883a 	add	r2,r5,r2
  210b48:	f800283a 	ret
  210b4c:	0005883a 	mov	r2,zero
  210b50:	f800283a 	ret
  210b54:	008104c4 	movi	r2,1043
  210b58:	1185c83a 	sub	r2,r2,r6
  210b5c:	1884d83a 	srl	r2,r3,r2
  210b60:	003ff306 	br	210b30 <_gp+0xffdfef1c>

00210b64 <__floatsidf>:
  210b64:	defffd04 	addi	sp,sp,-12
  210b68:	dfc00215 	stw	ra,8(sp)
  210b6c:	dc400115 	stw	r17,4(sp)
  210b70:	dc000015 	stw	r16,0(sp)
  210b74:	20002b26 	beq	r4,zero,210c24 <__floatsidf+0xc0>
  210b78:	2023883a 	mov	r17,r4
  210b7c:	2020d7fa 	srli	r16,r4,31
  210b80:	20002d16 	blt	r4,zero,210c38 <__floatsidf+0xd4>
  210b84:	8809883a 	mov	r4,r17
  210b88:	0203dfc0 	call	203dfc <__clzsi2>
  210b8c:	01410784 	movi	r5,1054
  210b90:	288bc83a 	sub	r5,r5,r2
  210b94:	01010cc4 	movi	r4,1075
  210b98:	2149c83a 	sub	r4,r4,r5
  210b9c:	00c007c4 	movi	r3,31
  210ba0:	1900160e 	bge	r3,r4,210bfc <__floatsidf+0x98>
  210ba4:	00c104c4 	movi	r3,1043
  210ba8:	1947c83a 	sub	r3,r3,r5
  210bac:	88c6983a 	sll	r3,r17,r3
  210bb0:	00800434 	movhi	r2,16
  210bb4:	10bfffc4 	addi	r2,r2,-1
  210bb8:	1886703a 	and	r3,r3,r2
  210bbc:	2941ffcc 	andi	r5,r5,2047
  210bc0:	800d883a 	mov	r6,r16
  210bc4:	0005883a 	mov	r2,zero
  210bc8:	280a953a 	slli	r5,r5,20
  210bcc:	31803fcc 	andi	r6,r6,255
  210bd0:	01000434 	movhi	r4,16
  210bd4:	300c97fa 	slli	r6,r6,31
  210bd8:	213fffc4 	addi	r4,r4,-1
  210bdc:	1906703a 	and	r3,r3,r4
  210be0:	1946b03a 	or	r3,r3,r5
  210be4:	1986b03a 	or	r3,r3,r6
  210be8:	dfc00217 	ldw	ra,8(sp)
  210bec:	dc400117 	ldw	r17,4(sp)
  210bf0:	dc000017 	ldw	r16,0(sp)
  210bf4:	dec00304 	addi	sp,sp,12
  210bf8:	f800283a 	ret
  210bfc:	00c002c4 	movi	r3,11
  210c00:	1887c83a 	sub	r3,r3,r2
  210c04:	88c6d83a 	srl	r3,r17,r3
  210c08:	8904983a 	sll	r2,r17,r4
  210c0c:	01000434 	movhi	r4,16
  210c10:	213fffc4 	addi	r4,r4,-1
  210c14:	2941ffcc 	andi	r5,r5,2047
  210c18:	1906703a 	and	r3,r3,r4
  210c1c:	800d883a 	mov	r6,r16
  210c20:	003fe906 	br	210bc8 <_gp+0xffdfefb4>
  210c24:	000d883a 	mov	r6,zero
  210c28:	000b883a 	mov	r5,zero
  210c2c:	0007883a 	mov	r3,zero
  210c30:	0005883a 	mov	r2,zero
  210c34:	003fe406 	br	210bc8 <_gp+0xffdfefb4>
  210c38:	0123c83a 	sub	r17,zero,r4
  210c3c:	003fd106 	br	210b84 <_gp+0xffdfef70>

00210c40 <__floatunsidf>:
  210c40:	defffe04 	addi	sp,sp,-8
  210c44:	dc000015 	stw	r16,0(sp)
  210c48:	dfc00115 	stw	ra,4(sp)
  210c4c:	2021883a 	mov	r16,r4
  210c50:	20002226 	beq	r4,zero,210cdc <__floatunsidf+0x9c>
  210c54:	0203dfc0 	call	203dfc <__clzsi2>
  210c58:	01010784 	movi	r4,1054
  210c5c:	2089c83a 	sub	r4,r4,r2
  210c60:	01810cc4 	movi	r6,1075
  210c64:	310dc83a 	sub	r6,r6,r4
  210c68:	00c007c4 	movi	r3,31
  210c6c:	1980120e 	bge	r3,r6,210cb8 <__floatunsidf+0x78>
  210c70:	00c104c4 	movi	r3,1043
  210c74:	1907c83a 	sub	r3,r3,r4
  210c78:	80ca983a 	sll	r5,r16,r3
  210c7c:	00800434 	movhi	r2,16
  210c80:	10bfffc4 	addi	r2,r2,-1
  210c84:	2101ffcc 	andi	r4,r4,2047
  210c88:	0021883a 	mov	r16,zero
  210c8c:	288a703a 	and	r5,r5,r2
  210c90:	2008953a 	slli	r4,r4,20
  210c94:	00c00434 	movhi	r3,16
  210c98:	18ffffc4 	addi	r3,r3,-1
  210c9c:	28c6703a 	and	r3,r5,r3
  210ca0:	8005883a 	mov	r2,r16
  210ca4:	1906b03a 	or	r3,r3,r4
  210ca8:	dfc00117 	ldw	ra,4(sp)
  210cac:	dc000017 	ldw	r16,0(sp)
  210cb0:	dec00204 	addi	sp,sp,8
  210cb4:	f800283a 	ret
  210cb8:	00c002c4 	movi	r3,11
  210cbc:	188bc83a 	sub	r5,r3,r2
  210cc0:	814ad83a 	srl	r5,r16,r5
  210cc4:	00c00434 	movhi	r3,16
  210cc8:	18ffffc4 	addi	r3,r3,-1
  210ccc:	81a0983a 	sll	r16,r16,r6
  210cd0:	2101ffcc 	andi	r4,r4,2047
  210cd4:	28ca703a 	and	r5,r5,r3
  210cd8:	003fed06 	br	210c90 <_gp+0xffdff07c>
  210cdc:	0009883a 	mov	r4,zero
  210ce0:	000b883a 	mov	r5,zero
  210ce4:	003fea06 	br	210c90 <_gp+0xffdff07c>

00210ce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210ce8:	defffe04 	addi	sp,sp,-8
  210cec:	dfc00115 	stw	ra,4(sp)
  210cf0:	df000015 	stw	fp,0(sp)
  210cf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210cf8:	d0a00f17 	ldw	r2,-32708(gp)
  210cfc:	10000326 	beq	r2,zero,210d0c <alt_get_errno+0x24>
  210d00:	d0a00f17 	ldw	r2,-32708(gp)
  210d04:	103ee83a 	callr	r2
  210d08:	00000106 	br	210d10 <alt_get_errno+0x28>
  210d0c:	d0a02604 	addi	r2,gp,-32616
}
  210d10:	e037883a 	mov	sp,fp
  210d14:	dfc00117 	ldw	ra,4(sp)
  210d18:	df000017 	ldw	fp,0(sp)
  210d1c:	dec00204 	addi	sp,sp,8
  210d20:	f800283a 	ret

00210d24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  210d24:	defffb04 	addi	sp,sp,-20
  210d28:	dfc00415 	stw	ra,16(sp)
  210d2c:	df000315 	stw	fp,12(sp)
  210d30:	df000304 	addi	fp,sp,12
  210d34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  210d38:	e0bfff17 	ldw	r2,-4(fp)
  210d3c:	10000816 	blt	r2,zero,210d60 <close+0x3c>
  210d40:	01400304 	movi	r5,12
  210d44:	e13fff17 	ldw	r4,-4(fp)
  210d48:	02032a40 	call	2032a4 <__mulsi3>
  210d4c:	1007883a 	mov	r3,r2
  210d50:	00801074 	movhi	r2,65
  210d54:	10a23f04 	addi	r2,r2,-30468
  210d58:	1885883a 	add	r2,r3,r2
  210d5c:	00000106 	br	210d64 <close+0x40>
  210d60:	0005883a 	mov	r2,zero
  210d64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  210d68:	e0bffd17 	ldw	r2,-12(fp)
  210d6c:	10001926 	beq	r2,zero,210dd4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  210d70:	e0bffd17 	ldw	r2,-12(fp)
  210d74:	10800017 	ldw	r2,0(r2)
  210d78:	10800417 	ldw	r2,16(r2)
  210d7c:	10000626 	beq	r2,zero,210d98 <close+0x74>
  210d80:	e0bffd17 	ldw	r2,-12(fp)
  210d84:	10800017 	ldw	r2,0(r2)
  210d88:	10800417 	ldw	r2,16(r2)
  210d8c:	e13ffd17 	ldw	r4,-12(fp)
  210d90:	103ee83a 	callr	r2
  210d94:	00000106 	br	210d9c <close+0x78>
  210d98:	0005883a 	mov	r2,zero
  210d9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  210da0:	e13fff17 	ldw	r4,-4(fp)
  210da4:	021140c0 	call	21140c <alt_release_fd>
    if (rval < 0)
  210da8:	e0bffe17 	ldw	r2,-8(fp)
  210dac:	1000070e 	bge	r2,zero,210dcc <close+0xa8>
    {
      ALT_ERRNO = -rval;
  210db0:	0210ce80 	call	210ce8 <alt_get_errno>
  210db4:	1007883a 	mov	r3,r2
  210db8:	e0bffe17 	ldw	r2,-8(fp)
  210dbc:	0085c83a 	sub	r2,zero,r2
  210dc0:	18800015 	stw	r2,0(r3)
      return -1;
  210dc4:	00bfffc4 	movi	r2,-1
  210dc8:	00000706 	br	210de8 <close+0xc4>
    }
    return 0;
  210dcc:	0005883a 	mov	r2,zero
  210dd0:	00000506 	br	210de8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210dd4:	0210ce80 	call	210ce8 <alt_get_errno>
  210dd8:	1007883a 	mov	r3,r2
  210ddc:	00801444 	movi	r2,81
  210de0:	18800015 	stw	r2,0(r3)
    return -1;
  210de4:	00bfffc4 	movi	r2,-1
  }
}
  210de8:	e037883a 	mov	sp,fp
  210dec:	dfc00117 	ldw	ra,4(sp)
  210df0:	df000017 	ldw	fp,0(sp)
  210df4:	dec00204 	addi	sp,sp,8
  210df8:	f800283a 	ret

00210dfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  210dfc:	defffc04 	addi	sp,sp,-16
  210e00:	df000315 	stw	fp,12(sp)
  210e04:	df000304 	addi	fp,sp,12
  210e08:	e13ffd15 	stw	r4,-12(fp)
  210e0c:	e17ffe15 	stw	r5,-8(fp)
  210e10:	e1bfff15 	stw	r6,-4(fp)
  return len;
  210e14:	e0bfff17 	ldw	r2,-4(fp)
}
  210e18:	e037883a 	mov	sp,fp
  210e1c:	df000017 	ldw	fp,0(sp)
  210e20:	dec00104 	addi	sp,sp,4
  210e24:	f800283a 	ret

00210e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210e28:	defffe04 	addi	sp,sp,-8
  210e2c:	dfc00115 	stw	ra,4(sp)
  210e30:	df000015 	stw	fp,0(sp)
  210e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210e38:	d0a00f17 	ldw	r2,-32708(gp)
  210e3c:	10000326 	beq	r2,zero,210e4c <alt_get_errno+0x24>
  210e40:	d0a00f17 	ldw	r2,-32708(gp)
  210e44:	103ee83a 	callr	r2
  210e48:	00000106 	br	210e50 <alt_get_errno+0x28>
  210e4c:	d0a02604 	addi	r2,gp,-32616
}
  210e50:	e037883a 	mov	sp,fp
  210e54:	dfc00117 	ldw	ra,4(sp)
  210e58:	df000017 	ldw	fp,0(sp)
  210e5c:	dec00204 	addi	sp,sp,8
  210e60:	f800283a 	ret

00210e64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  210e64:	defffb04 	addi	sp,sp,-20
  210e68:	dfc00415 	stw	ra,16(sp)
  210e6c:	df000315 	stw	fp,12(sp)
  210e70:	df000304 	addi	fp,sp,12
  210e74:	e13ffe15 	stw	r4,-8(fp)
  210e78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  210e7c:	e0bffe17 	ldw	r2,-8(fp)
  210e80:	10000816 	blt	r2,zero,210ea4 <fstat+0x40>
  210e84:	01400304 	movi	r5,12
  210e88:	e13ffe17 	ldw	r4,-8(fp)
  210e8c:	02032a40 	call	2032a4 <__mulsi3>
  210e90:	1007883a 	mov	r3,r2
  210e94:	00801074 	movhi	r2,65
  210e98:	10a23f04 	addi	r2,r2,-30468
  210e9c:	1885883a 	add	r2,r3,r2
  210ea0:	00000106 	br	210ea8 <fstat+0x44>
  210ea4:	0005883a 	mov	r2,zero
  210ea8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  210eac:	e0bffd17 	ldw	r2,-12(fp)
  210eb0:	10001026 	beq	r2,zero,210ef4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  210eb4:	e0bffd17 	ldw	r2,-12(fp)
  210eb8:	10800017 	ldw	r2,0(r2)
  210ebc:	10800817 	ldw	r2,32(r2)
  210ec0:	10000726 	beq	r2,zero,210ee0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  210ec4:	e0bffd17 	ldw	r2,-12(fp)
  210ec8:	10800017 	ldw	r2,0(r2)
  210ecc:	10800817 	ldw	r2,32(r2)
  210ed0:	e17fff17 	ldw	r5,-4(fp)
  210ed4:	e13ffd17 	ldw	r4,-12(fp)
  210ed8:	103ee83a 	callr	r2
  210edc:	00000a06 	br	210f08 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  210ee0:	e0bfff17 	ldw	r2,-4(fp)
  210ee4:	00c80004 	movi	r3,8192
  210ee8:	10c00115 	stw	r3,4(r2)
      return 0;
  210eec:	0005883a 	mov	r2,zero
  210ef0:	00000506 	br	210f08 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210ef4:	0210e280 	call	210e28 <alt_get_errno>
  210ef8:	1007883a 	mov	r3,r2
  210efc:	00801444 	movi	r2,81
  210f00:	18800015 	stw	r2,0(r3)
    return -1;
  210f04:	00bfffc4 	movi	r2,-1
  }
}
  210f08:	e037883a 	mov	sp,fp
  210f0c:	dfc00117 	ldw	ra,4(sp)
  210f10:	df000017 	ldw	fp,0(sp)
  210f14:	dec00204 	addi	sp,sp,8
  210f18:	f800283a 	ret

00210f1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210f1c:	defffe04 	addi	sp,sp,-8
  210f20:	dfc00115 	stw	ra,4(sp)
  210f24:	df000015 	stw	fp,0(sp)
  210f28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210f2c:	d0a00f17 	ldw	r2,-32708(gp)
  210f30:	10000326 	beq	r2,zero,210f40 <alt_get_errno+0x24>
  210f34:	d0a00f17 	ldw	r2,-32708(gp)
  210f38:	103ee83a 	callr	r2
  210f3c:	00000106 	br	210f44 <alt_get_errno+0x28>
  210f40:	d0a02604 	addi	r2,gp,-32616
}
  210f44:	e037883a 	mov	sp,fp
  210f48:	dfc00117 	ldw	ra,4(sp)
  210f4c:	df000017 	ldw	fp,0(sp)
  210f50:	dec00204 	addi	sp,sp,8
  210f54:	f800283a 	ret

00210f58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  210f58:	deffed04 	addi	sp,sp,-76
  210f5c:	dfc01215 	stw	ra,72(sp)
  210f60:	df001115 	stw	fp,68(sp)
  210f64:	df001104 	addi	fp,sp,68
  210f68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  210f6c:	e0bfff17 	ldw	r2,-4(fp)
  210f70:	10000816 	blt	r2,zero,210f94 <isatty+0x3c>
  210f74:	01400304 	movi	r5,12
  210f78:	e13fff17 	ldw	r4,-4(fp)
  210f7c:	02032a40 	call	2032a4 <__mulsi3>
  210f80:	1007883a 	mov	r3,r2
  210f84:	00801074 	movhi	r2,65
  210f88:	10a23f04 	addi	r2,r2,-30468
  210f8c:	1885883a 	add	r2,r3,r2
  210f90:	00000106 	br	210f98 <isatty+0x40>
  210f94:	0005883a 	mov	r2,zero
  210f98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  210f9c:	e0bfef17 	ldw	r2,-68(fp)
  210fa0:	10000e26 	beq	r2,zero,210fdc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  210fa4:	e0bfef17 	ldw	r2,-68(fp)
  210fa8:	10800017 	ldw	r2,0(r2)
  210fac:	10800817 	ldw	r2,32(r2)
  210fb0:	1000021e 	bne	r2,zero,210fbc <isatty+0x64>
    {
      return 1;
  210fb4:	00800044 	movi	r2,1
  210fb8:	00000d06 	br	210ff0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  210fbc:	e0bff004 	addi	r2,fp,-64
  210fc0:	100b883a 	mov	r5,r2
  210fc4:	e13fff17 	ldw	r4,-4(fp)
  210fc8:	0210e640 	call	210e64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  210fcc:	e0bff117 	ldw	r2,-60(fp)
  210fd0:	10880020 	cmpeqi	r2,r2,8192
  210fd4:	10803fcc 	andi	r2,r2,255
  210fd8:	00000506 	br	210ff0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210fdc:	0210f1c0 	call	210f1c <alt_get_errno>
  210fe0:	1007883a 	mov	r3,r2
  210fe4:	00801444 	movi	r2,81
  210fe8:	18800015 	stw	r2,0(r3)
    return 0;
  210fec:	0005883a 	mov	r2,zero
  }
}
  210ff0:	e037883a 	mov	sp,fp
  210ff4:	dfc00117 	ldw	ra,4(sp)
  210ff8:	df000017 	ldw	fp,0(sp)
  210ffc:	dec00204 	addi	sp,sp,8
  211000:	f800283a 	ret

00211004 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  211004:	defffc04 	addi	sp,sp,-16
  211008:	df000315 	stw	fp,12(sp)
  21100c:	df000304 	addi	fp,sp,12
  211010:	e13ffd15 	stw	r4,-12(fp)
  211014:	e17ffe15 	stw	r5,-8(fp)
  211018:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  21101c:	e0fffe17 	ldw	r3,-8(fp)
  211020:	e0bffd17 	ldw	r2,-12(fp)
  211024:	18800c26 	beq	r3,r2,211058 <alt_load_section+0x54>
  {
    while( to != end )
  211028:	00000806 	br	21104c <alt_load_section+0x48>
    {
      *to++ = *from++;
  21102c:	e0bffe17 	ldw	r2,-8(fp)
  211030:	10c00104 	addi	r3,r2,4
  211034:	e0fffe15 	stw	r3,-8(fp)
  211038:	e0fffd17 	ldw	r3,-12(fp)
  21103c:	19000104 	addi	r4,r3,4
  211040:	e13ffd15 	stw	r4,-12(fp)
  211044:	18c00017 	ldw	r3,0(r3)
  211048:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  21104c:	e0fffe17 	ldw	r3,-8(fp)
  211050:	e0bfff17 	ldw	r2,-4(fp)
  211054:	18bff51e 	bne	r3,r2,21102c <_gp+0xffdff418>
    {
      *to++ = *from++;
    }
  }
}
  211058:	0001883a 	nop
  21105c:	e037883a 	mov	sp,fp
  211060:	df000017 	ldw	fp,0(sp)
  211064:	dec00104 	addi	sp,sp,4
  211068:	f800283a 	ret

0021106c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  21106c:	defffe04 	addi	sp,sp,-8
  211070:	dfc00115 	stw	ra,4(sp)
  211074:	df000015 	stw	fp,0(sp)
  211078:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  21107c:	01801074 	movhi	r6,65
  211080:	31a71f04 	addi	r6,r6,-25476
  211084:	01401074 	movhi	r5,65
  211088:	29600004 	addi	r5,r5,-32768
  21108c:	01000874 	movhi	r4,33
  211090:	211b9604 	addi	r4,r4,28248
  211094:	02110040 	call	211004 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  211098:	01800834 	movhi	r6,32
  21109c:	31808c04 	addi	r6,r6,560
  2110a0:	01400834 	movhi	r5,32
  2110a4:	29400804 	addi	r5,r5,32
  2110a8:	01000834 	movhi	r4,32
  2110ac:	21000804 	addi	r4,r4,32
  2110b0:	02110040 	call	211004 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  2110b4:	01800874 	movhi	r6,33
  2110b8:	319b9604 	addi	r6,r6,28248
  2110bc:	01400874 	movhi	r5,33
  2110c0:	2959b404 	addi	r5,r5,26320
  2110c4:	01000874 	movhi	r4,33
  2110c8:	2119b404 	addi	r4,r4,26320
  2110cc:	02110040 	call	211004 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  2110d0:	02154980 	call	215498 <alt_dcache_flush_all>
  alt_icache_flush_all();
  2110d4:	02157a40 	call	2157a4 <alt_icache_flush_all>
}
  2110d8:	0001883a 	nop
  2110dc:	e037883a 	mov	sp,fp
  2110e0:	dfc00117 	ldw	ra,4(sp)
  2110e4:	df000017 	ldw	fp,0(sp)
  2110e8:	dec00204 	addi	sp,sp,8
  2110ec:	f800283a 	ret

002110f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2110f0:	defffe04 	addi	sp,sp,-8
  2110f4:	dfc00115 	stw	ra,4(sp)
  2110f8:	df000015 	stw	fp,0(sp)
  2110fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  211100:	d0a00f17 	ldw	r2,-32708(gp)
  211104:	10000326 	beq	r2,zero,211114 <alt_get_errno+0x24>
  211108:	d0a00f17 	ldw	r2,-32708(gp)
  21110c:	103ee83a 	callr	r2
  211110:	00000106 	br	211118 <alt_get_errno+0x28>
  211114:	d0a02604 	addi	r2,gp,-32616
}
  211118:	e037883a 	mov	sp,fp
  21111c:	dfc00117 	ldw	ra,4(sp)
  211120:	df000017 	ldw	fp,0(sp)
  211124:	dec00204 	addi	sp,sp,8
  211128:	f800283a 	ret

0021112c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  21112c:	defff904 	addi	sp,sp,-28
  211130:	dfc00615 	stw	ra,24(sp)
  211134:	df000515 	stw	fp,20(sp)
  211138:	df000504 	addi	fp,sp,20
  21113c:	e13ffd15 	stw	r4,-12(fp)
  211140:	e17ffe15 	stw	r5,-8(fp)
  211144:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  211148:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  21114c:	e0bffd17 	ldw	r2,-12(fp)
  211150:	10000816 	blt	r2,zero,211174 <lseek+0x48>
  211154:	01400304 	movi	r5,12
  211158:	e13ffd17 	ldw	r4,-12(fp)
  21115c:	02032a40 	call	2032a4 <__mulsi3>
  211160:	1007883a 	mov	r3,r2
  211164:	00801074 	movhi	r2,65
  211168:	10a23f04 	addi	r2,r2,-30468
  21116c:	1885883a 	add	r2,r3,r2
  211170:	00000106 	br	211178 <lseek+0x4c>
  211174:	0005883a 	mov	r2,zero
  211178:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  21117c:	e0bffc17 	ldw	r2,-16(fp)
  211180:	10001026 	beq	r2,zero,2111c4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  211184:	e0bffc17 	ldw	r2,-16(fp)
  211188:	10800017 	ldw	r2,0(r2)
  21118c:	10800717 	ldw	r2,28(r2)
  211190:	10000926 	beq	r2,zero,2111b8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  211194:	e0bffc17 	ldw	r2,-16(fp)
  211198:	10800017 	ldw	r2,0(r2)
  21119c:	10800717 	ldw	r2,28(r2)
  2111a0:	e1bfff17 	ldw	r6,-4(fp)
  2111a4:	e17ffe17 	ldw	r5,-8(fp)
  2111a8:	e13ffc17 	ldw	r4,-16(fp)
  2111ac:	103ee83a 	callr	r2
  2111b0:	e0bffb15 	stw	r2,-20(fp)
  2111b4:	00000506 	br	2111cc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  2111b8:	00bfde84 	movi	r2,-134
  2111bc:	e0bffb15 	stw	r2,-20(fp)
  2111c0:	00000206 	br	2111cc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  2111c4:	00bfebc4 	movi	r2,-81
  2111c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  2111cc:	e0bffb17 	ldw	r2,-20(fp)
  2111d0:	1000070e 	bge	r2,zero,2111f0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  2111d4:	02110f00 	call	2110f0 <alt_get_errno>
  2111d8:	1007883a 	mov	r3,r2
  2111dc:	e0bffb17 	ldw	r2,-20(fp)
  2111e0:	0085c83a 	sub	r2,zero,r2
  2111e4:	18800015 	stw	r2,0(r3)
    rc = -1;
  2111e8:	00bfffc4 	movi	r2,-1
  2111ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  2111f0:	e0bffb17 	ldw	r2,-20(fp)
}
  2111f4:	e037883a 	mov	sp,fp
  2111f8:	dfc00117 	ldw	ra,4(sp)
  2111fc:	df000017 	ldw	fp,0(sp)
  211200:	dec00204 	addi	sp,sp,8
  211204:	f800283a 	ret

00211208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  211208:	defffd04 	addi	sp,sp,-12
  21120c:	dfc00215 	stw	ra,8(sp)
  211210:	df000115 	stw	fp,4(sp)
  211214:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  211218:	0009883a 	mov	r4,zero
  21121c:	02118840 	call	211884 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  211220:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  211224:	02118bc0 	call	2118bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  211228:	01800874 	movhi	r6,33
  21122c:	319b7a04 	addi	r6,r6,28136
  211230:	01400874 	movhi	r5,33
  211234:	295b7a04 	addi	r5,r5,28136
  211238:	01000874 	movhi	r4,33
  21123c:	211b7a04 	addi	r4,r4,28136
  211240:	0215b480 	call	215b48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  211244:	02155980 	call	215598 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  211248:	01000874 	movhi	r4,33
  21124c:	21157e04 	addi	r4,r4,22008
  211250:	021633c0 	call	21633c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  211254:	d0a02717 	ldw	r2,-32612(gp)
  211258:	d0e02817 	ldw	r3,-32608(gp)
  21125c:	d1202917 	ldw	r4,-32604(gp)
  211260:	200d883a 	mov	r6,r4
  211264:	180b883a 	mov	r5,r3
  211268:	1009883a 	mov	r4,r2
  21126c:	020026c0 	call	20026c <main>
  211270:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  211274:	01000044 	movi	r4,1
  211278:	0210d240 	call	210d24 <close>
  exit (result);
  21127c:	e13fff17 	ldw	r4,-4(fp)
  211280:	02163500 	call	216350 <exit>

00211284 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  211284:	defffe04 	addi	sp,sp,-8
  211288:	df000115 	stw	fp,4(sp)
  21128c:	df000104 	addi	fp,sp,4
  211290:	e13fff15 	stw	r4,-4(fp)
}
  211294:	0001883a 	nop
  211298:	e037883a 	mov	sp,fp
  21129c:	df000017 	ldw	fp,0(sp)
  2112a0:	dec00104 	addi	sp,sp,4
  2112a4:	f800283a 	ret

002112a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  2112a8:	defffe04 	addi	sp,sp,-8
  2112ac:	df000115 	stw	fp,4(sp)
  2112b0:	df000104 	addi	fp,sp,4
  2112b4:	e13fff15 	stw	r4,-4(fp)
}
  2112b8:	0001883a 	nop
  2112bc:	e037883a 	mov	sp,fp
  2112c0:	df000017 	ldw	fp,0(sp)
  2112c4:	dec00104 	addi	sp,sp,4
  2112c8:	f800283a 	ret

002112cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2112cc:	defffe04 	addi	sp,sp,-8
  2112d0:	dfc00115 	stw	ra,4(sp)
  2112d4:	df000015 	stw	fp,0(sp)
  2112d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2112dc:	d0a00f17 	ldw	r2,-32708(gp)
  2112e0:	10000326 	beq	r2,zero,2112f0 <alt_get_errno+0x24>
  2112e4:	d0a00f17 	ldw	r2,-32708(gp)
  2112e8:	103ee83a 	callr	r2
  2112ec:	00000106 	br	2112f4 <alt_get_errno+0x28>
  2112f0:	d0a02604 	addi	r2,gp,-32616
}
  2112f4:	e037883a 	mov	sp,fp
  2112f8:	dfc00117 	ldw	ra,4(sp)
  2112fc:	df000017 	ldw	fp,0(sp)
  211300:	dec00204 	addi	sp,sp,8
  211304:	f800283a 	ret

00211308 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  211308:	defff904 	addi	sp,sp,-28
  21130c:	dfc00615 	stw	ra,24(sp)
  211310:	df000515 	stw	fp,20(sp)
  211314:	df000504 	addi	fp,sp,20
  211318:	e13ffd15 	stw	r4,-12(fp)
  21131c:	e17ffe15 	stw	r5,-8(fp)
  211320:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  211324:	e0bffd17 	ldw	r2,-12(fp)
  211328:	10000816 	blt	r2,zero,21134c <read+0x44>
  21132c:	01400304 	movi	r5,12
  211330:	e13ffd17 	ldw	r4,-12(fp)
  211334:	02032a40 	call	2032a4 <__mulsi3>
  211338:	1007883a 	mov	r3,r2
  21133c:	00801074 	movhi	r2,65
  211340:	10a23f04 	addi	r2,r2,-30468
  211344:	1885883a 	add	r2,r3,r2
  211348:	00000106 	br	211350 <read+0x48>
  21134c:	0005883a 	mov	r2,zero
  211350:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  211354:	e0bffb17 	ldw	r2,-20(fp)
  211358:	10002226 	beq	r2,zero,2113e4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  21135c:	e0bffb17 	ldw	r2,-20(fp)
  211360:	10800217 	ldw	r2,8(r2)
  211364:	108000cc 	andi	r2,r2,3
  211368:	10800060 	cmpeqi	r2,r2,1
  21136c:	1000181e 	bne	r2,zero,2113d0 <read+0xc8>
        (fd->dev->read))
  211370:	e0bffb17 	ldw	r2,-20(fp)
  211374:	10800017 	ldw	r2,0(r2)
  211378:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  21137c:	10001426 	beq	r2,zero,2113d0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  211380:	e0bffb17 	ldw	r2,-20(fp)
  211384:	10800017 	ldw	r2,0(r2)
  211388:	10800517 	ldw	r2,20(r2)
  21138c:	e0ffff17 	ldw	r3,-4(fp)
  211390:	180d883a 	mov	r6,r3
  211394:	e17ffe17 	ldw	r5,-8(fp)
  211398:	e13ffb17 	ldw	r4,-20(fp)
  21139c:	103ee83a 	callr	r2
  2113a0:	e0bffc15 	stw	r2,-16(fp)
  2113a4:	e0bffc17 	ldw	r2,-16(fp)
  2113a8:	1000070e 	bge	r2,zero,2113c8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
  2113ac:	02112cc0 	call	2112cc <alt_get_errno>
  2113b0:	1007883a 	mov	r3,r2
  2113b4:	e0bffc17 	ldw	r2,-16(fp)
  2113b8:	0085c83a 	sub	r2,zero,r2
  2113bc:	18800015 	stw	r2,0(r3)
          return -1;
  2113c0:	00bfffc4 	movi	r2,-1
  2113c4:	00000c06 	br	2113f8 <read+0xf0>
        }
        return rval;
  2113c8:	e0bffc17 	ldw	r2,-16(fp)
  2113cc:	00000a06 	br	2113f8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  2113d0:	02112cc0 	call	2112cc <alt_get_errno>
  2113d4:	1007883a 	mov	r3,r2
  2113d8:	00800344 	movi	r2,13
  2113dc:	18800015 	stw	r2,0(r3)
  2113e0:	00000406 	br	2113f4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  2113e4:	02112cc0 	call	2112cc <alt_get_errno>
  2113e8:	1007883a 	mov	r3,r2
  2113ec:	00801444 	movi	r2,81
  2113f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  2113f4:	00bfffc4 	movi	r2,-1
}
  2113f8:	e037883a 	mov	sp,fp
  2113fc:	dfc00117 	ldw	ra,4(sp)
  211400:	df000017 	ldw	fp,0(sp)
  211404:	dec00204 	addi	sp,sp,8
  211408:	f800283a 	ret

0021140c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  21140c:	defffc04 	addi	sp,sp,-16
  211410:	dfc00315 	stw	ra,12(sp)
  211414:	df000215 	stw	fp,8(sp)
  211418:	dc000115 	stw	r16,4(sp)
  21141c:	df000204 	addi	fp,sp,8
  211420:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  211424:	e0bffe17 	ldw	r2,-8(fp)
  211428:	108000d0 	cmplti	r2,r2,3
  21142c:	1000111e 	bne	r2,zero,211474 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  211430:	04001074 	movhi	r16,65
  211434:	84223f04 	addi	r16,r16,-30468
  211438:	e0bffe17 	ldw	r2,-8(fp)
  21143c:	01400304 	movi	r5,12
  211440:	1009883a 	mov	r4,r2
  211444:	02032a40 	call	2032a4 <__mulsi3>
  211448:	8085883a 	add	r2,r16,r2
  21144c:	10800204 	addi	r2,r2,8
  211450:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  211454:	04001074 	movhi	r16,65
  211458:	84223f04 	addi	r16,r16,-30468
  21145c:	e0bffe17 	ldw	r2,-8(fp)
  211460:	01400304 	movi	r5,12
  211464:	1009883a 	mov	r4,r2
  211468:	02032a40 	call	2032a4 <__mulsi3>
  21146c:	8085883a 	add	r2,r16,r2
  211470:	10000015 	stw	zero,0(r2)
  }
}
  211474:	0001883a 	nop
  211478:	e6ffff04 	addi	sp,fp,-4
  21147c:	dfc00217 	ldw	ra,8(sp)
  211480:	df000117 	ldw	fp,4(sp)
  211484:	dc000017 	ldw	r16,0(sp)
  211488:	dec00304 	addi	sp,sp,12
  21148c:	f800283a 	ret

00211490 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  211490:	defff904 	addi	sp,sp,-28
  211494:	df000615 	stw	fp,24(sp)
  211498:	df000604 	addi	fp,sp,24
  21149c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2114a0:	0005303a 	rdctl	r2,status
  2114a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2114a8:	e0fffe17 	ldw	r3,-8(fp)
  2114ac:	00bfff84 	movi	r2,-2
  2114b0:	1884703a 	and	r2,r3,r2
  2114b4:	1001703a 	wrctl	status,r2
  
  return context;
  2114b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  2114bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  2114c0:	d0a01017 	ldw	r2,-32704(gp)
  2114c4:	10c000c4 	addi	r3,r2,3
  2114c8:	00bfff04 	movi	r2,-4
  2114cc:	1884703a 	and	r2,r3,r2
  2114d0:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  2114d4:	d0e01017 	ldw	r3,-32704(gp)
  2114d8:	e0bfff17 	ldw	r2,-4(fp)
  2114dc:	1887883a 	add	r3,r3,r2
  2114e0:	00801074 	movhi	r2,65
  2114e4:	10800004 	addi	r2,r2,0
  2114e8:	10c0062e 	bgeu	r2,r3,211504 <sbrk+0x74>
  2114ec:	e0bffb17 	ldw	r2,-20(fp)
  2114f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2114f4:	e0bffa17 	ldw	r2,-24(fp)
  2114f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  2114fc:	00bfffc4 	movi	r2,-1
  211500:	00000b06 	br	211530 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  211504:	d0a01017 	ldw	r2,-32704(gp)
  211508:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  21150c:	d0e01017 	ldw	r3,-32704(gp)
  211510:	e0bfff17 	ldw	r2,-4(fp)
  211514:	1885883a 	add	r2,r3,r2
  211518:	d0a01015 	stw	r2,-32704(gp)
  21151c:	e0bffb17 	ldw	r2,-20(fp)
  211520:	e0bffc15 	stw	r2,-16(fp)
  211524:	e0bffc17 	ldw	r2,-16(fp)
  211528:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  21152c:	e0bffd17 	ldw	r2,-12(fp)
} 
  211530:	e037883a 	mov	sp,fp
  211534:	df000017 	ldw	fp,0(sp)
  211538:	dec00104 	addi	sp,sp,4
  21153c:	f800283a 	ret

00211540 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  211540:	defffa04 	addi	sp,sp,-24
  211544:	df000515 	stw	fp,20(sp)
  211548:	df000504 	addi	fp,sp,20
  21154c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211550:	0005303a 	rdctl	r2,status
  211554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211558:	e0fffc17 	ldw	r3,-16(fp)
  21155c:	00bfff84 	movi	r2,-2
  211560:	1884703a 	and	r2,r3,r2
  211564:	1001703a 	wrctl	status,r2
  
  return context;
  211568:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  21156c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  211570:	e0bfff17 	ldw	r2,-4(fp)
  211574:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  211578:	e0bffd17 	ldw	r2,-12(fp)
  21157c:	10800017 	ldw	r2,0(r2)
  211580:	e0fffd17 	ldw	r3,-12(fp)
  211584:	18c00117 	ldw	r3,4(r3)
  211588:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  21158c:	e0bffd17 	ldw	r2,-12(fp)
  211590:	10800117 	ldw	r2,4(r2)
  211594:	e0fffd17 	ldw	r3,-12(fp)
  211598:	18c00017 	ldw	r3,0(r3)
  21159c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  2115a0:	e0bffd17 	ldw	r2,-12(fp)
  2115a4:	e0fffd17 	ldw	r3,-12(fp)
  2115a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  2115ac:	e0bffd17 	ldw	r2,-12(fp)
  2115b0:	e0fffd17 	ldw	r3,-12(fp)
  2115b4:	10c00015 	stw	r3,0(r2)
  2115b8:	e0bffb17 	ldw	r2,-20(fp)
  2115bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2115c0:	e0bffe17 	ldw	r2,-8(fp)
  2115c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  2115c8:	0001883a 	nop
  2115cc:	e037883a 	mov	sp,fp
  2115d0:	df000017 	ldw	fp,0(sp)
  2115d4:	dec00104 	addi	sp,sp,4
  2115d8:	f800283a 	ret

002115dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  2115dc:	defffb04 	addi	sp,sp,-20
  2115e0:	dfc00415 	stw	ra,16(sp)
  2115e4:	df000315 	stw	fp,12(sp)
  2115e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  2115ec:	d0a01117 	ldw	r2,-32700(gp)
  2115f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  2115f4:	d0a02b17 	ldw	r2,-32596(gp)
  2115f8:	10800044 	addi	r2,r2,1
  2115fc:	d0a02b15 	stw	r2,-32596(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  211600:	00002e06 	br	2116bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  211604:	e0bffd17 	ldw	r2,-12(fp)
  211608:	10800017 	ldw	r2,0(r2)
  21160c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  211610:	e0bffd17 	ldw	r2,-12(fp)
  211614:	10800403 	ldbu	r2,16(r2)
  211618:	10803fcc 	andi	r2,r2,255
  21161c:	10000426 	beq	r2,zero,211630 <alt_tick+0x54>
  211620:	d0a02b17 	ldw	r2,-32596(gp)
  211624:	1000021e 	bne	r2,zero,211630 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  211628:	e0bffd17 	ldw	r2,-12(fp)
  21162c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  211630:	e0bffd17 	ldw	r2,-12(fp)
  211634:	10800217 	ldw	r2,8(r2)
  211638:	d0e02b17 	ldw	r3,-32596(gp)
  21163c:	18801d36 	bltu	r3,r2,2116b4 <alt_tick+0xd8>
  211640:	e0bffd17 	ldw	r2,-12(fp)
  211644:	10800403 	ldbu	r2,16(r2)
  211648:	10803fcc 	andi	r2,r2,255
  21164c:	1000191e 	bne	r2,zero,2116b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  211650:	e0bffd17 	ldw	r2,-12(fp)
  211654:	10800317 	ldw	r2,12(r2)
  211658:	e0fffd17 	ldw	r3,-12(fp)
  21165c:	18c00517 	ldw	r3,20(r3)
  211660:	1809883a 	mov	r4,r3
  211664:	103ee83a 	callr	r2
  211668:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  21166c:	e0bfff17 	ldw	r2,-4(fp)
  211670:	1000031e 	bne	r2,zero,211680 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  211674:	e13ffd17 	ldw	r4,-12(fp)
  211678:	02115400 	call	211540 <alt_alarm_stop>
  21167c:	00000d06 	br	2116b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  211680:	e0bffd17 	ldw	r2,-12(fp)
  211684:	10c00217 	ldw	r3,8(r2)
  211688:	e0bfff17 	ldw	r2,-4(fp)
  21168c:	1887883a 	add	r3,r3,r2
  211690:	e0bffd17 	ldw	r2,-12(fp)
  211694:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  211698:	e0bffd17 	ldw	r2,-12(fp)
  21169c:	10c00217 	ldw	r3,8(r2)
  2116a0:	d0a02b17 	ldw	r2,-32596(gp)
  2116a4:	1880032e 	bgeu	r3,r2,2116b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  2116a8:	e0bffd17 	ldw	r2,-12(fp)
  2116ac:	00c00044 	movi	r3,1
  2116b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  2116b4:	e0bffe17 	ldw	r2,-8(fp)
  2116b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  2116bc:	e0fffd17 	ldw	r3,-12(fp)
  2116c0:	d0a01104 	addi	r2,gp,-32700
  2116c4:	18bfcf1e 	bne	r3,r2,211604 <_gp+0xffdff9f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  2116c8:	0001883a 	nop
}
  2116cc:	0001883a 	nop
  2116d0:	e037883a 	mov	sp,fp
  2116d4:	dfc00117 	ldw	ra,4(sp)
  2116d8:	df000017 	ldw	fp,0(sp)
  2116dc:	dec00204 	addi	sp,sp,8
  2116e0:	f800283a 	ret

002116e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  2116e4:	defffd04 	addi	sp,sp,-12
  2116e8:	dfc00215 	stw	ra,8(sp)
  2116ec:	df000115 	stw	fp,4(sp)
  2116f0:	df000104 	addi	fp,sp,4
  2116f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  2116f8:	e13fff17 	ldw	r4,-4(fp)
  2116fc:	02153180 	call	215318 <alt_busy_sleep>
}
  211700:	e037883a 	mov	sp,fp
  211704:	dfc00117 	ldw	ra,4(sp)
  211708:	df000017 	ldw	fp,0(sp)
  21170c:	dec00204 	addi	sp,sp,8
  211710:	f800283a 	ret

00211714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  211714:	defffe04 	addi	sp,sp,-8
  211718:	dfc00115 	stw	ra,4(sp)
  21171c:	df000015 	stw	fp,0(sp)
  211720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  211724:	d0a00f17 	ldw	r2,-32708(gp)
  211728:	10000326 	beq	r2,zero,211738 <alt_get_errno+0x24>
  21172c:	d0a00f17 	ldw	r2,-32708(gp)
  211730:	103ee83a 	callr	r2
  211734:	00000106 	br	21173c <alt_get_errno+0x28>
  211738:	d0a02604 	addi	r2,gp,-32616
}
  21173c:	e037883a 	mov	sp,fp
  211740:	dfc00117 	ldw	ra,4(sp)
  211744:	df000017 	ldw	fp,0(sp)
  211748:	dec00204 	addi	sp,sp,8
  21174c:	f800283a 	ret

00211750 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  211750:	defff904 	addi	sp,sp,-28
  211754:	dfc00615 	stw	ra,24(sp)
  211758:	df000515 	stw	fp,20(sp)
  21175c:	df000504 	addi	fp,sp,20
  211760:	e13ffd15 	stw	r4,-12(fp)
  211764:	e17ffe15 	stw	r5,-8(fp)
  211768:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  21176c:	e0bffd17 	ldw	r2,-12(fp)
  211770:	10000816 	blt	r2,zero,211794 <write+0x44>
  211774:	01400304 	movi	r5,12
  211778:	e13ffd17 	ldw	r4,-12(fp)
  21177c:	02032a40 	call	2032a4 <__mulsi3>
  211780:	1007883a 	mov	r3,r2
  211784:	00801074 	movhi	r2,65
  211788:	10a23f04 	addi	r2,r2,-30468
  21178c:	1885883a 	add	r2,r3,r2
  211790:	00000106 	br	211798 <write+0x48>
  211794:	0005883a 	mov	r2,zero
  211798:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  21179c:	e0bffb17 	ldw	r2,-20(fp)
  2117a0:	10002126 	beq	r2,zero,211828 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  2117a4:	e0bffb17 	ldw	r2,-20(fp)
  2117a8:	10800217 	ldw	r2,8(r2)
  2117ac:	108000cc 	andi	r2,r2,3
  2117b0:	10001826 	beq	r2,zero,211814 <write+0xc4>
  2117b4:	e0bffb17 	ldw	r2,-20(fp)
  2117b8:	10800017 	ldw	r2,0(r2)
  2117bc:	10800617 	ldw	r2,24(r2)
  2117c0:	10001426 	beq	r2,zero,211814 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  2117c4:	e0bffb17 	ldw	r2,-20(fp)
  2117c8:	10800017 	ldw	r2,0(r2)
  2117cc:	10800617 	ldw	r2,24(r2)
  2117d0:	e0ffff17 	ldw	r3,-4(fp)
  2117d4:	180d883a 	mov	r6,r3
  2117d8:	e17ffe17 	ldw	r5,-8(fp)
  2117dc:	e13ffb17 	ldw	r4,-20(fp)
  2117e0:	103ee83a 	callr	r2
  2117e4:	e0bffc15 	stw	r2,-16(fp)
  2117e8:	e0bffc17 	ldw	r2,-16(fp)
  2117ec:	1000070e 	bge	r2,zero,21180c <write+0xbc>
      {
        ALT_ERRNO = -rval;
  2117f0:	02117140 	call	211714 <alt_get_errno>
  2117f4:	1007883a 	mov	r3,r2
  2117f8:	e0bffc17 	ldw	r2,-16(fp)
  2117fc:	0085c83a 	sub	r2,zero,r2
  211800:	18800015 	stw	r2,0(r3)
        return -1;
  211804:	00bfffc4 	movi	r2,-1
  211808:	00000c06 	br	21183c <write+0xec>
      }
      return rval;
  21180c:	e0bffc17 	ldw	r2,-16(fp)
  211810:	00000a06 	br	21183c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  211814:	02117140 	call	211714 <alt_get_errno>
  211818:	1007883a 	mov	r3,r2
  21181c:	00800344 	movi	r2,13
  211820:	18800015 	stw	r2,0(r3)
  211824:	00000406 	br	211838 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  211828:	02117140 	call	211714 <alt_get_errno>
  21182c:	1007883a 	mov	r3,r2
  211830:	00801444 	movi	r2,81
  211834:	18800015 	stw	r2,0(r3)
  }
  return -1;
  211838:	00bfffc4 	movi	r2,-1
}
  21183c:	e037883a 	mov	sp,fp
  211840:	dfc00117 	ldw	ra,4(sp)
  211844:	df000017 	ldw	fp,0(sp)
  211848:	dec00204 	addi	sp,sp,8
  21184c:	f800283a 	ret

00211850 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  211850:	defffd04 	addi	sp,sp,-12
  211854:	dfc00215 	stw	ra,8(sp)
  211858:	df000115 	stw	fp,4(sp)
  21185c:	df000104 	addi	fp,sp,4
  211860:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  211864:	d1600c04 	addi	r5,gp,-32720
  211868:	e13fff17 	ldw	r4,-4(fp)
  21186c:	02154f40 	call	2154f4 <alt_dev_llist_insert>
}
  211870:	e037883a 	mov	sp,fp
  211874:	dfc00117 	ldw	ra,4(sp)
  211878:	df000017 	ldw	fp,0(sp)
  21187c:	dec00204 	addi	sp,sp,8
  211880:	f800283a 	ret

00211884 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  211884:	defffd04 	addi	sp,sp,-12
  211888:	dfc00215 	stw	ra,8(sp)
  21188c:	df000115 	stw	fp,4(sp)
  211890:	df000104 	addi	fp,sp,4
  211894:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  211898:	02160b00 	call	2160b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  21189c:	00800044 	movi	r2,1
  2118a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  2118a4:	0001883a 	nop
  2118a8:	e037883a 	mov	sp,fp
  2118ac:	dfc00117 	ldw	ra,4(sp)
  2118b0:	df000017 	ldw	fp,0(sp)
  2118b4:	dec00204 	addi	sp,sp,8
  2118b8:	f800283a 	ret

002118bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  2118bc:	defffe04 	addi	sp,sp,-8
  2118c0:	dfc00115 	stw	ra,4(sp)
  2118c4:	df000015 	stw	fp,0(sp)
  2118c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  2118cc:	01c0fa04 	movi	r7,1000
  2118d0:	01800044 	movi	r6,1
  2118d4:	000b883a 	mov	r5,zero
  2118d8:	01001074 	movhi	r4,65
  2118dc:	21040004 	addi	r4,r4,4096
  2118e0:	02142300 	call	214230 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
  2118e4:	01001074 	movhi	r4,65
  2118e8:	21229f04 	addi	r4,r4,-30084
  2118ec:	0211b8c0 	call	211b8c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  2118f0:	000d883a 	mov	r6,zero
  2118f4:	000b883a 	mov	r5,zero
  2118f8:	01001074 	movhi	r4,65
  2118fc:	2122b704 	addi	r4,r4,-29988
  211900:	02136b80 	call	2136b8 <altera_avalon_jtag_uart_init>
  211904:	01001074 	movhi	r4,65
  211908:	2122ad04 	addi	r4,r4,-30028
  21190c:	02118500 	call	211850 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
  211910:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  211914:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  211918:	01001074 	movhi	r4,65
  21191c:	2126c504 	addi	r4,r4,-25836
  211920:	0214b600 	call	214b60 <altera_onchip_flash_init>
}
  211924:	0001883a 	nop
  211928:	e037883a 	mov	sp,fp
  21192c:	dfc00117 	ldw	ra,4(sp)
  211930:	df000017 	ldw	fp,0(sp)
  211934:	dec00204 	addi	sp,sp,8
  211938:	f800283a 	ret

0021193c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
  21193c:	defff904 	addi	sp,sp,-28
  211940:	dfc00615 	stw	ra,24(sp)
  211944:	df000515 	stw	fp,20(sp)
  211948:	df000504 	addi	fp,sp,20
  21194c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
  211950:	008000b4 	movhi	r2,2
  211954:	10a1a804 	addi	r2,r2,-31072
  211958:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
  21195c:	e0bfff17 	ldw	r2,-4(fp)
  211960:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
  211964:	e0bffc17 	ldw	r2,-16(fp)
  211968:	10800717 	ldw	r2,28(r2)
  21196c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
  211970:	e0bffd17 	ldw	r2,-12(fp)
  211974:	10800217 	ldw	r2,8(r2)
  211978:	10800098 	cmpnei	r2,r2,2
  21197c:	1000251e 	bne	r2,zero,211a14 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
  211980:	e0bffd17 	ldw	r2,-12(fp)
  211984:	10c00017 	ldw	r3,0(r2)
  211988:	e0bffd17 	ldw	r2,-12(fp)
  21198c:	10800117 	ldw	r2,4(r2)
  211990:	e13ffe04 	addi	r4,fp,-8
  211994:	200f883a 	mov	r7,r4
  211998:	100d883a 	mov	r6,r2
  21199c:	180b883a 	mov	r5,r3
  2119a0:	e13ffc17 	ldw	r4,-16(fp)
  2119a4:	02120ec0 	call	2120ec <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
  2119a8:	e0bffd17 	ldw	r2,-12(fp)
  2119ac:	10c00117 	ldw	r3,4(r2)
  2119b0:	e0bffe17 	ldw	r2,-8(fp)
  2119b4:	1887c83a 	sub	r3,r3,r2
  2119b8:	e0bffd17 	ldw	r2,-12(fp)
  2119bc:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
  2119c0:	e0bffd17 	ldw	r2,-12(fp)
  2119c4:	10c00017 	ldw	r3,0(r2)
  2119c8:	e0bffe17 	ldw	r2,-8(fp)
  2119cc:	1887883a 	add	r3,r3,r2
  2119d0:	e0bffd17 	ldw	r2,-12(fp)
  2119d4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
  2119d8:	e0bffd17 	ldw	r2,-12(fp)
  2119dc:	10800117 	ldw	r2,4(r2)
  2119e0:	10000c26 	beq	r2,zero,211a14 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2119e4:	01400704 	movi	r5,28
  2119e8:	e13ffc17 	ldw	r4,-16(fp)
  2119ec:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  2119f0:	01400084 	movi	r5,2
  2119f4:	e13ffc17 	ldw	r4,-16(fp)
  2119f8:	02133480 	call	213348 <alt_avalon_i2c_int_enable>
  2119fc:	00000e06 	br	211a38 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
  211a00:	e0bffb17 	ldw	r2,-20(fp)
  211a04:	10bfffc4 	addi	r2,r2,-1
  211a08:	e0bffb15 	stw	r2,-20(fp)
  211a0c:	e0bffb17 	ldw	r2,-20(fp)
  211a10:	10000426 	beq	r2,zero,211a24 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
  211a14:	e13ffc17 	ldw	r4,-16(fp)
  211a18:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  211a1c:	103ff81e 	bne	r2,zero,211a00 <_gp+0xffdffdec>
  211a20:	00000106 	br	211a28 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
  211a24:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
  211a28:	e13ffc17 	ldw	r4,-16(fp)
  211a2c:	0211d500 	call	211d50 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
  211a30:	e0bffd17 	ldw	r2,-12(fp)
  211a34:	10000215 	stw	zero,8(r2)
}
  211a38:	e037883a 	mov	sp,fp
  211a3c:	dfc00117 	ldw	ra,4(sp)
  211a40:	df000017 	ldw	fp,0(sp)
  211a44:	dec00204 	addi	sp,sp,8
  211a48:	f800283a 	ret

00211a4c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
  211a4c:	defffc04 	addi	sp,sp,-16
  211a50:	dfc00315 	stw	ra,12(sp)
  211a54:	df000215 	stw	fp,8(sp)
  211a58:	df000204 	addi	fp,sp,8
  211a5c:	e13ffe15 	stw	r4,-8(fp)
  211a60:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
  211a64:	e0bfff17 	ldw	r2,-4(fp)
  211a68:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
  211a6c:	e1ffff17 	ldw	r7,-4(fp)
  211a70:	000d883a 	mov	r6,zero
  211a74:	01400874 	movhi	r5,33
  211a78:	29464f04 	addi	r5,r5,6460
  211a7c:	e13ffe17 	ldw	r4,-8(fp)
  211a80:	0211b380 	call	211b38 <alt_avalon_i2c_register_callback>
}
  211a84:	0001883a 	nop
  211a88:	e037883a 	mov	sp,fp
  211a8c:	dfc00117 	ldw	ra,4(sp)
  211a90:	df000017 	ldw	fp,0(sp)
  211a94:	dec00204 	addi	sp,sp,8
  211a98:	f800283a 	ret

00211a9c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
  211a9c:	defff904 	addi	sp,sp,-28
  211aa0:	dfc00615 	stw	ra,24(sp)
  211aa4:	df000515 	stw	fp,20(sp)
  211aa8:	df000504 	addi	fp,sp,20
  211aac:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
  211ab0:	e0bfff17 	ldw	r2,-4(fp)
  211ab4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  211ab8:	014007c4 	movi	r5,31
  211abc:	e13ffb17 	ldw	r4,-20(fp)
  211ac0:	02132e00 	call	2132e0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  211ac4:	01400704 	movi	r5,28
  211ac8:	e13ffb17 	ldw	r4,-20(fp)
  211acc:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
  211ad0:	e0bffb17 	ldw	r2,-20(fp)
  211ad4:	10800617 	ldw	r2,24(r2)
  211ad8:	10001126 	beq	r2,zero,211b20 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211adc:	0005303a 	rdctl	r2,status
  211ae0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211ae4:	e0fffd17 	ldw	r3,-12(fp)
  211ae8:	00bfff84 	movi	r2,-2
  211aec:	1884703a 	and	r2,r3,r2
  211af0:	1001703a 	wrctl	status,r2
  
  return context;
  211af4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
  211af8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
  211afc:	e0bffb17 	ldw	r2,-20(fp)
  211b00:	10800617 	ldw	r2,24(r2)
  211b04:	e13ffb17 	ldw	r4,-20(fp)
  211b08:	103ee83a 	callr	r2
  211b0c:	e0bffc17 	ldw	r2,-16(fp)
  211b10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211b14:	e0bffe17 	ldw	r2,-8(fp)
  211b18:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
  211b1c:	0001883a 	nop
  211b20:	0001883a 	nop
}
  211b24:	e037883a 	mov	sp,fp
  211b28:	dfc00117 	ldw	ra,4(sp)
  211b2c:	df000017 	ldw	fp,0(sp)
  211b30:	dec00204 	addi	sp,sp,8
  211b34:	f800283a 	ret

00211b38 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
  211b38:	defffb04 	addi	sp,sp,-20
  211b3c:	df000415 	stw	fp,16(sp)
  211b40:	df000404 	addi	fp,sp,16
  211b44:	e13ffc15 	stw	r4,-16(fp)
  211b48:	e17ffd15 	stw	r5,-12(fp)
  211b4c:	e1bffe15 	stw	r6,-8(fp)
  211b50:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  211b54:	e0bffc17 	ldw	r2,-16(fp)
  211b58:	e0fffd17 	ldw	r3,-12(fp)
  211b5c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
  211b60:	e0bffc17 	ldw	r2,-16(fp)
  211b64:	e0ffff17 	ldw	r3,-4(fp)
  211b68:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
  211b6c:	e0bffc17 	ldw	r2,-16(fp)
  211b70:	e0fffe17 	ldw	r3,-8(fp)
  211b74:	10c00815 	stw	r3,32(r2)

    return ;
  211b78:	0001883a 	nop
}
  211b7c:	e037883a 	mov	sp,fp
  211b80:	df000017 	ldw	fp,0(sp)
  211b84:	dec00104 	addi	sp,sp,4
  211b88:	f800283a 	ret

00211b8c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
  211b8c:	defff704 	addi	sp,sp,-36
  211b90:	dfc00815 	stw	ra,32(sp)
  211b94:	df000715 	stw	fp,28(sp)
  211b98:	df000704 	addi	fp,sp,28
  211b9c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
  211ba0:	e13fff17 	ldw	r4,-4(fp)
  211ba4:	0211d500 	call	211d50 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  211ba8:	014007c4 	movi	r5,31
  211bac:	e13fff17 	ldw	r4,-4(fp)
  211bb0:	02132e00 	call	2132e0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  211bb4:	01400704 	movi	r5,28
  211bb8:	e13fff17 	ldw	r4,-4(fp)
  211bbc:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
  211bc0:	014000c4 	movi	r5,3
  211bc4:	e13fff17 	ldw	r4,-4(fp)
  211bc8:	02134ec0 	call	2134ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
  211bcc:	014000c4 	movi	r5,3
  211bd0:	e13fff17 	ldw	r4,-4(fp)
  211bd4:	021343c0 	call	21343c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
  211bd8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
  211bdc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
  211be0:	e0bffb04 	addi	r2,fp,-20
  211be4:	018000b4 	movhi	r6,2
  211be8:	31a1a804 	addi	r6,r6,-31072
  211bec:	100b883a 	mov	r5,r2
  211bf0:	e13fff17 	ldw	r4,-4(fp)
  211bf4:	0211fac0 	call	211fac <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
  211bf8:	e0bffb04 	addi	r2,fp,-20
  211bfc:	100b883a 	mov	r5,r2
  211c00:	e13fff17 	ldw	r4,-4(fp)
  211c04:	0211e4c0 	call	211e4c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
  211c08:	d1601304 	addi	r5,gp,-32692
  211c0c:	e13fff17 	ldw	r4,-4(fp)
  211c10:	02154f40 	call	2154f4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  211c14:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
  211c18:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
  211c1c:	e0bffa17 	ldw	r2,-24(fp)
  211c20:	10000c1e 	bne	r2,zero,211c54 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
  211c24:	e0bfff17 	ldw	r2,-4(fp)
  211c28:	10c00417 	ldw	r3,16(r2)
  211c2c:	e0bfff17 	ldw	r2,-4(fp)
  211c30:	10800517 	ldw	r2,20(r2)
  211c34:	d8000015 	stw	zero,0(sp)
  211c38:	e1ffff17 	ldw	r7,-4(fp)
  211c3c:	01800874 	movhi	r6,33
  211c40:	3186a704 	addi	r6,r6,6812
  211c44:	100b883a 	mov	r5,r2
  211c48:	1809883a 	mov	r4,r3
  211c4c:	02157c40 	call	2157c4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
  211c50:	00000406 	br	211c64 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
  211c54:	01000874 	movhi	r4,33
  211c58:	211b8e04 	addi	r4,r4,28216
  211c5c:	0215e480 	call	215e48 <alt_printf>
    }

    return;
  211c60:	0001883a 	nop

}
  211c64:	e037883a 	mov	sp,fp
  211c68:	dfc00117 	ldw	ra,4(sp)
  211c6c:	df000017 	ldw	fp,0(sp)
  211c70:	dec00204 	addi	sp,sp,8
  211c74:	f800283a 	ret

00211c78 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
  211c78:	defffc04 	addi	sp,sp,-16
  211c7c:	dfc00315 	stw	ra,12(sp)
  211c80:	df000215 	stw	fp,8(sp)
  211c84:	df000204 	addi	fp,sp,8
  211c88:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
  211c8c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
  211c90:	d1601304 	addi	r5,gp,-32692
  211c94:	e13fff17 	ldw	r4,-4(fp)
  211c98:	02156580 	call	215658 <alt_find_dev>
  211c9c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  211ca0:	e0bffe17 	ldw	r2,-8(fp)
}
  211ca4:	e037883a 	mov	sp,fp
  211ca8:	dfc00117 	ldw	ra,4(sp)
  211cac:	df000017 	ldw	fp,0(sp)
  211cb0:	dec00204 	addi	sp,sp,8
  211cb4:	f800283a 	ret

00211cb8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  211cb8:	defffc04 	addi	sp,sp,-16
  211cbc:	df000315 	stw	fp,12(sp)
  211cc0:	df000304 	addi	fp,sp,12
  211cc4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  211cc8:	e0bfff17 	ldw	r2,-4(fp)
  211ccc:	10800717 	ldw	r2,28(r2)
  211cd0:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
  211cd4:	e0bfff17 	ldw	r2,-4(fp)
  211cd8:	10800317 	ldw	r2,12(r2)
  211cdc:	10800204 	addi	r2,r2,8
  211ce0:	10800037 	ldwio	r2,0(r2)
  211ce4:	1080004c 	andi	r2,r2,1
  211ce8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
  211cec:	e0bffe17 	ldw	r2,-8(fp)
  211cf0:	10000226 	beq	r2,zero,211cfc <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
  211cf4:	00bffe44 	movi	r2,-7
  211cf8:	00001106 	br	211d40 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
  211cfc:	e0bfff17 	ldw	r2,-4(fp)
  211d00:	10c00617 	ldw	r3,24(r2)
  211d04:	00800874 	movhi	r2,33
  211d08:	10864f04 	addi	r2,r2,6460
  211d0c:	1880021e 	bne	r3,r2,211d18 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
  211d10:	e0bffd17 	ldw	r2,-12(fp)
  211d14:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
  211d18:	e0bfff17 	ldw	r2,-4(fp)
  211d1c:	10800317 	ldw	r2,12(r2)
  211d20:	10800204 	addi	r2,r2,8
  211d24:	e0ffff17 	ldw	r3,-4(fp)
  211d28:	18c00317 	ldw	r3,12(r3)
  211d2c:	18c00204 	addi	r3,r3,8
  211d30:	18c00037 	ldwio	r3,0(r3)
  211d34:	18c00054 	ori	r3,r3,1
  211d38:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  211d3c:	0005883a 	mov	r2,zero
}
  211d40:	e037883a 	mov	sp,fp
  211d44:	df000017 	ldw	fp,0(sp)
  211d48:	dec00104 	addi	sp,sp,4
  211d4c:	f800283a 	ret

00211d50 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  211d50:	defffe04 	addi	sp,sp,-8
  211d54:	df000115 	stw	fp,4(sp)
  211d58:	df000104 	addi	fp,sp,4
  211d5c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
  211d60:	e0bfff17 	ldw	r2,-4(fp)
  211d64:	10800317 	ldw	r2,12(r2)
  211d68:	10800204 	addi	r2,r2,8
  211d6c:	e0ffff17 	ldw	r3,-4(fp)
  211d70:	18c00317 	ldw	r3,12(r3)
  211d74:	18c00204 	addi	r3,r3,8
  211d78:	19000037 	ldwio	r4,0(r3)
  211d7c:	00ffff84 	movi	r3,-2
  211d80:	20c6703a 	and	r3,r4,r3
  211d84:	10c00035 	stwio	r3,0(r2)

}
  211d88:	0001883a 	nop
  211d8c:	e037883a 	mov	sp,fp
  211d90:	df000017 	ldw	fp,0(sp)
  211d94:	dec00104 	addi	sp,sp,4
  211d98:	f800283a 	ret

00211d9c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  211d9c:	defffd04 	addi	sp,sp,-12
  211da0:	df000215 	stw	fp,8(sp)
  211da4:	df000204 	addi	fp,sp,8
  211da8:	e13ffe15 	stw	r4,-8(fp)
  211dac:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
  211db0:	e0bffe17 	ldw	r2,-8(fp)
  211db4:	10c00d17 	ldw	r3,52(r2)
  211db8:	e0bfff17 	ldw	r2,-4(fp)
  211dbc:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
  211dc0:	e0bffe17 	ldw	r2,-8(fp)
  211dc4:	10800317 	ldw	r2,12(r2)
  211dc8:	10800204 	addi	r2,r2,8
  211dcc:	10800037 	ldwio	r2,0(r2)
  211dd0:	1080008c 	andi	r2,r2,2
  211dd4:	1005d07a 	srai	r2,r2,1
  211dd8:	1007883a 	mov	r3,r2
  211ddc:	e0bfff17 	ldw	r2,-4(fp)
  211de0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
  211de4:	e0bffe17 	ldw	r2,-8(fp)
  211de8:	10800317 	ldw	r2,12(r2)
  211dec:	10800904 	addi	r2,r2,36
  211df0:	10800037 	ldwio	r2,0(r2)
  211df4:	1007883a 	mov	r3,r2
  211df8:	e0bfff17 	ldw	r2,-4(fp)
  211dfc:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
  211e00:	e0bffe17 	ldw	r2,-8(fp)
  211e04:	10800317 	ldw	r2,12(r2)
  211e08:	10800804 	addi	r2,r2,32
  211e0c:	10800037 	ldwio	r2,0(r2)
  211e10:	1007883a 	mov	r3,r2
  211e14:	e0bfff17 	ldw	r2,-4(fp)
  211e18:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
  211e1c:	e0bffe17 	ldw	r2,-8(fp)
  211e20:	10800317 	ldw	r2,12(r2)
  211e24:	10800a04 	addi	r2,r2,40
  211e28:	10800037 	ldwio	r2,0(r2)
  211e2c:	1007883a 	mov	r3,r2
  211e30:	e0bfff17 	ldw	r2,-4(fp)
  211e34:	10c0030d 	sth	r3,12(r2)
}
  211e38:	0001883a 	nop
  211e3c:	e037883a 	mov	sp,fp
  211e40:	df000017 	ldw	fp,0(sp)
  211e44:	dec00104 	addi	sp,sp,4
  211e48:	f800283a 	ret

00211e4c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  211e4c:	defffd04 	addi	sp,sp,-12
  211e50:	df000215 	stw	fp,8(sp)
  211e54:	df000204 	addi	fp,sp,8
  211e58:	e13ffe15 	stw	r4,-8(fp)
  211e5c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
  211e60:	e0bfff17 	ldw	r2,-4(fp)
  211e64:	10c00017 	ldw	r3,0(r2)
  211e68:	e0bffe17 	ldw	r2,-8(fp)
  211e6c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
  211e70:	e0bffe17 	ldw	r2,-8(fp)
  211e74:	10800317 	ldw	r2,12(r2)
  211e78:	10c00204 	addi	r3,r2,8
  211e7c:	e0bffe17 	ldw	r2,-8(fp)
  211e80:	10800317 	ldw	r2,12(r2)
  211e84:	10800204 	addi	r2,r2,8
  211e88:	10800037 	ldwio	r2,0(r2)
  211e8c:	1009883a 	mov	r4,r2
  211e90:	00bfff44 	movi	r2,-3
  211e94:	2088703a 	and	r4,r4,r2
  211e98:	e0bfff17 	ldw	r2,-4(fp)
  211e9c:	10800117 	ldw	r2,4(r2)
  211ea0:	1085883a 	add	r2,r2,r2
  211ea4:	1080008c 	andi	r2,r2,2
  211ea8:	2084b03a 	or	r2,r4,r2
  211eac:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
  211eb0:	e0bffe17 	ldw	r2,-8(fp)
  211eb4:	10800317 	ldw	r2,12(r2)
  211eb8:	10800904 	addi	r2,r2,36
  211ebc:	e0ffff17 	ldw	r3,-4(fp)
  211ec0:	18c0020b 	ldhu	r3,8(r3)
  211ec4:	18ffffcc 	andi	r3,r3,65535
  211ec8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
  211ecc:	e0bffe17 	ldw	r2,-8(fp)
  211ed0:	10800317 	ldw	r2,12(r2)
  211ed4:	10800804 	addi	r2,r2,32
  211ed8:	e0ffff17 	ldw	r3,-4(fp)
  211edc:	18c0028b 	ldhu	r3,10(r3)
  211ee0:	18ffffcc 	andi	r3,r3,65535
  211ee4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
  211ee8:	e0bffe17 	ldw	r2,-8(fp)
  211eec:	10800317 	ldw	r2,12(r2)
  211ef0:	10800a04 	addi	r2,r2,40
  211ef4:	e0ffff17 	ldw	r3,-4(fp)
  211ef8:	18c0030b 	ldhu	r3,12(r3)
  211efc:	18ffffcc 	andi	r3,r3,65535
  211f00:	10c00035 	stwio	r3,0(r2)
}
  211f04:	0001883a 	nop
  211f08:	e037883a 	mov	sp,fp
  211f0c:	df000017 	ldw	fp,0(sp)
  211f10:	dec00104 	addi	sp,sp,4
  211f14:	f800283a 	ret

00211f18 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
  211f18:	defffb04 	addi	sp,sp,-20
  211f1c:	dfc00415 	stw	ra,16(sp)
  211f20:	df000315 	stw	fp,12(sp)
  211f24:	df000304 	addi	fp,sp,12
  211f28:	e13ffd15 	stw	r4,-12(fp)
  211f2c:	e17ffe15 	stw	r5,-8(fp)
  211f30:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
  211f34:	e0bffe17 	ldw	r2,-8(fp)
  211f38:	1080028b 	ldhu	r2,10(r2)
  211f3c:	10bfffcc 	andi	r2,r2,65535
  211f40:	10000426 	beq	r2,zero,211f54 <alt_avalon_i2c_master_config_speed_get+0x3c>
  211f44:	e0bffe17 	ldw	r2,-8(fp)
  211f48:	1080020b 	ldhu	r2,8(r2)
  211f4c:	10bfffcc 	andi	r2,r2,65535
  211f50:	1000021e 	bne	r2,zero,211f5c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
  211f54:	00bfff44 	movi	r2,-3
  211f58:	00000f06 	br	211f98 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
  211f5c:	e0bffd17 	ldw	r2,-12(fp)
  211f60:	11000c17 	ldw	r4,48(r2)
  211f64:	e0bffe17 	ldw	r2,-8(fp)
  211f68:	1080028b 	ldhu	r2,10(r2)
  211f6c:	10ffffcc 	andi	r3,r2,65535
  211f70:	e0bffe17 	ldw	r2,-8(fp)
  211f74:	1080020b 	ldhu	r2,8(r2)
  211f78:	10bfffcc 	andi	r2,r2,65535
  211f7c:	1885883a 	add	r2,r3,r2
  211f80:	100b883a 	mov	r5,r2
  211f84:	02031e80 	call	2031e8 <__udivsi3>
  211f88:	1007883a 	mov	r3,r2
  211f8c:	e0bfff17 	ldw	r2,-4(fp)
  211f90:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  211f94:	0005883a 	mov	r2,zero
}
  211f98:	e037883a 	mov	sp,fp
  211f9c:	dfc00117 	ldw	ra,4(sp)
  211fa0:	df000017 	ldw	fp,0(sp)
  211fa4:	dec00204 	addi	sp,sp,8
  211fa8:	f800283a 	ret

00211fac <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
  211fac:	defff904 	addi	sp,sp,-28
  211fb0:	dfc00615 	stw	ra,24(sp)
  211fb4:	df000515 	stw	fp,20(sp)
  211fb8:	df000504 	addi	fp,sp,20
  211fbc:	e13ffd15 	stw	r4,-12(fp)
  211fc0:	e17ffe15 	stw	r5,-8(fp)
  211fc4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
  211fc8:	e0ffff17 	ldw	r3,-4(fp)
  211fcc:	008001b4 	movhi	r2,6
  211fd0:	1086a004 	addi	r2,r2,6784
  211fd4:	10c00436 	bltu	r2,r3,211fe8 <alt_avalon_i2c_master_config_speed_set+0x3c>
  211fd8:	e0bfff17 	ldw	r2,-4(fp)
  211fdc:	10000226 	beq	r2,zero,211fe8 <alt_avalon_i2c_master_config_speed_set+0x3c>
  211fe0:	e0bfff17 	ldw	r2,-4(fp)
  211fe4:	1000021e 	bne	r2,zero,211ff0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
  211fe8:	00bfff04 	movi	r2,-4
  211fec:	00002906 	br	212094 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
  211ff0:	e0bffd17 	ldw	r2,-12(fp)
  211ff4:	10c00c17 	ldw	r3,48(r2)
  211ff8:	e0bfff17 	ldw	r2,-4(fp)
  211ffc:	1085883a 	add	r2,r2,r2
  212000:	100b883a 	mov	r5,r2
  212004:	1809883a 	mov	r4,r3
  212008:	02031e80 	call	2031e8 <__udivsi3>
  21200c:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  212010:	e0bffb17 	ldw	r2,-20(fp)
  212014:	10800f04 	addi	r2,r2,60
  212018:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  21201c:	e0bffb17 	ldw	r2,-20(fp)
  212020:	10bff104 	addi	r2,r2,-60
  212024:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
  212028:	e0ffff17 	ldw	r3,-4(fp)
  21202c:	008000b4 	movhi	r2,2
  212030:	10a1a804 	addi	r2,r2,-31072
  212034:	10c0042e 	bgeu	r2,r3,212048 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
  212038:	e0bffe17 	ldw	r2,-8(fp)
  21203c:	00c00044 	movi	r3,1
  212040:	10c00115 	stw	r3,4(r2)
  212044:	00000206 	br	212050 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
  212048:	e0bffe17 	ldw	r2,-8(fp)
  21204c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
  212050:	e0bffb17 	ldw	r2,-20(fp)
  212054:	1007883a 	mov	r3,r2
  212058:	e0bffe17 	ldw	r2,-8(fp)
  21205c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
  212060:	e0bffc17 	ldw	r2,-16(fp)
  212064:	1007883a 	mov	r3,r2
  212068:	e0bffe17 	ldw	r2,-8(fp)
  21206c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
  212070:	e0bffb17 	ldw	r2,-20(fp)
  212074:	1007883a 	mov	r3,r2
  212078:	e0bffb17 	ldw	r2,-20(fp)
  21207c:	1004d07a 	srli	r2,r2,1
  212080:	1885c83a 	sub	r2,r3,r2
  212084:	1007883a 	mov	r3,r2
  212088:	e0bffe17 	ldw	r2,-8(fp)
  21208c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
  212090:	0005883a 	mov	r2,zero

}
  212094:	e037883a 	mov	sp,fp
  212098:	dfc00117 	ldw	ra,4(sp)
  21209c:	df000017 	ldw	fp,0(sp)
  2120a0:	dec00204 	addi	sp,sp,8
  2120a4:	f800283a 	ret

002120a8 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  2120a8:	defffe04 	addi	sp,sp,-8
  2120ac:	df000115 	stw	fp,4(sp)
  2120b0:	df000104 	addi	fp,sp,4
  2120b4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
  2120b8:	e0bfff17 	ldw	r2,-4(fp)
  2120bc:	10800317 	ldw	r2,12(r2)
  2120c0:	10800504 	addi	r2,r2,20
  2120c4:	10800037 	ldwio	r2,0(r2)
  2120c8:	1080004c 	andi	r2,r2,1
  2120cc:	10000226 	beq	r2,zero,2120d8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
  2120d0:	00800044 	movi	r2,1
  2120d4:	00000106 	br	2120dc <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
  2120d8:	0005883a 	mov	r2,zero
}
  2120dc:	e037883a 	mov	sp,fp
  2120e0:	df000017 	ldw	fp,0(sp)
  2120e4:	dec00104 	addi	sp,sp,4
  2120e8:	f800283a 	ret

002120ec <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
  2120ec:	defffb04 	addi	sp,sp,-20
  2120f0:	df000415 	stw	fp,16(sp)
  2120f4:	df000404 	addi	fp,sp,16
  2120f8:	e13ffc15 	stw	r4,-16(fp)
  2120fc:	e17ffd15 	stw	r5,-12(fp)
  212100:	e1bffe15 	stw	r6,-8(fp)
  212104:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
  212108:	e0bfff17 	ldw	r2,-4(fp)
  21210c:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  212110:	00001406 	br	212164 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  212114:	e0bfff17 	ldw	r2,-4(fp)
  212118:	10800017 	ldw	r2,0(r2)
  21211c:	e0fffd17 	ldw	r3,-12(fp)
  212120:	1885883a 	add	r2,r3,r2
  212124:	e0fffc17 	ldw	r3,-16(fp)
  212128:	18c00317 	ldw	r3,12(r3)
  21212c:	18c00104 	addi	r3,r3,4
  212130:	18c00037 	ldwio	r3,0(r3)
  212134:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
  212138:	e0bfff17 	ldw	r2,-4(fp)
  21213c:	10800017 	ldw	r2,0(r2)
  212140:	10c00044 	addi	r3,r2,1
  212144:	e0bfff17 	ldw	r2,-4(fp)
  212148:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  21214c:	e0bfff17 	ldw	r2,-4(fp)
  212150:	10c00017 	ldw	r3,0(r2)
  212154:	e0bffe17 	ldw	r2,-8(fp)
  212158:	1880021e 	bne	r3,r2,212164 <alt_avalon_i2c_rx_read_available+0x78>
  21215c:	e0bffe17 	ldw	r2,-8(fp)
  212160:	1000061e 	bne	r2,zero,21217c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  212164:	e0bffc17 	ldw	r2,-16(fp)
  212168:	10800317 	ldw	r2,12(r2)
  21216c:	10800704 	addi	r2,r2,28
  212170:	10800037 	ldwio	r2,0(r2)
  212174:	103fe71e 	bne	r2,zero,212114 <_gp+0xffe00500>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
  212178:	00000106 	br	212180 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  21217c:	0001883a 	nop
    }
}
  212180:	0001883a 	nop
  212184:	e037883a 	mov	sp,fp
  212188:	df000017 	ldw	fp,0(sp)
  21218c:	dec00104 	addi	sp,sp,4
  212190:	f800283a 	ret

00212194 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
  212194:	defffa04 	addi	sp,sp,-24
  212198:	dfc00515 	stw	ra,20(sp)
  21219c:	df000415 	stw	fp,16(sp)
  2121a0:	df000404 	addi	fp,sp,16
  2121a4:	e13ffe15 	stw	r4,-8(fp)
  2121a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
  2121ac:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
  2121b0:	008000b4 	movhi	r2,2
  2121b4:	10a1a804 	addi	r2,r2,-31072
  2121b8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  2121bc:	00000d06 	br	2121f4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
  2121c0:	e0bffd17 	ldw	r2,-12(fp)
  2121c4:	108002a8 	cmpgeui	r2,r2,10
  2121c8:	1000021e 	bne	r2,zero,2121d4 <alt_avalon_i2c_rx_read+0x40>
  2121cc:	0109c404 	movi	r4,10000
  2121d0:	02153180 	call	215318 <alt_busy_sleep>
      if (--timeout == 0)
  2121d4:	e0bffd17 	ldw	r2,-12(fp)
  2121d8:	10bfffc4 	addi	r2,r2,-1
  2121dc:	e0bffd15 	stw	r2,-12(fp)
  2121e0:	e0bffd17 	ldw	r2,-12(fp)
  2121e4:	1000031e 	bne	r2,zero,2121f4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
  2121e8:	00bfff84 	movi	r2,-2
  2121ec:	e0bffc15 	stw	r2,-16(fp)
        break;
  2121f0:	00000506 	br	212208 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  2121f4:	e0bffe17 	ldw	r2,-8(fp)
  2121f8:	10800317 	ldw	r2,12(r2)
  2121fc:	10800704 	addi	r2,r2,28
  212200:	10800037 	ldwio	r2,0(r2)
  212204:	103fee26 	beq	r2,zero,2121c0 <_gp+0xffe005ac>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  212208:	e0bffe17 	ldw	r2,-8(fp)
  21220c:	10800317 	ldw	r2,12(r2)
  212210:	10800104 	addi	r2,r2,4
  212214:	10800037 	ldwio	r2,0(r2)
  212218:	1007883a 	mov	r3,r2
  21221c:	e0bfff17 	ldw	r2,-4(fp)
  212220:	10c00005 	stb	r3,0(r2)
        
    return status;
  212224:	e0bffc17 	ldw	r2,-16(fp)
}
  212228:	e037883a 	mov	sp,fp
  21222c:	dfc00117 	ldw	ra,4(sp)
  212230:	df000017 	ldw	fp,0(sp)
  212234:	dec00204 	addi	sp,sp,8
  212238:	f800283a 	ret

0021223c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
  21223c:	defff804 	addi	sp,sp,-32
  212240:	dfc00715 	stw	ra,28(sp)
  212244:	df000615 	stw	fp,24(sp)
  212248:	df000604 	addi	fp,sp,24
  21224c:	e13ffc15 	stw	r4,-16(fp)
  212250:	2809883a 	mov	r4,r5
  212254:	3007883a 	mov	r3,r6
  212258:	3805883a 	mov	r2,r7
  21225c:	e13ffd05 	stb	r4,-12(fp)
  212260:	e0fffe05 	stb	r3,-8(fp)
  212264:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
  212268:	0089c404 	movi	r2,10000
  21226c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212270:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  212274:	00000c06 	br	2122a8 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
  212278:	e0bffa17 	ldw	r2,-24(fp)
  21227c:	108002a8 	cmpgeui	r2,r2,10
  212280:	1000021e 	bne	r2,zero,21228c <alt_avalon_i2c_cmd_write+0x50>
  212284:	0109c404 	movi	r4,10000
  212288:	02153180 	call	215318 <alt_busy_sleep>
      if (--timeout == 0)
  21228c:	e0bffa17 	ldw	r2,-24(fp)
  212290:	10bfffc4 	addi	r2,r2,-1
  212294:	e0bffa15 	stw	r2,-24(fp)
  212298:	e0bffa17 	ldw	r2,-24(fp)
  21229c:	1000021e 	bne	r2,zero,2122a8 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
  2122a0:	00bfff84 	movi	r2,-2
  2122a4:	00001906 	br	21230c <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  2122a8:	e0bffc17 	ldw	r2,-16(fp)
  2122ac:	10800317 	ldw	r2,12(r2)
  2122b0:	10800404 	addi	r2,r2,16
  2122b4:	10800037 	ldwio	r2,0(r2)
  2122b8:	1080004c 	andi	r2,r2,1
  2122bc:	103fee26 	beq	r2,zero,212278 <_gp+0xffe00664>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
  2122c0:	e0bffc17 	ldw	r2,-16(fp)
  2122c4:	10800317 	ldw	r2,12(r2)
  2122c8:	e13ffd03 	ldbu	r4,-12(fp)
  2122cc:	e0fffe03 	ldbu	r3,-8(fp)
  2122d0:	1806927a 	slli	r3,r3,9
  2122d4:	20c8b03a 	or	r4,r4,r3
  2122d8:	e0ffff03 	ldbu	r3,-4(fp)
  2122dc:	1806923a 	slli	r3,r3,8
  2122e0:	20c6b03a 	or	r3,r4,r3
  2122e4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  2122e8:	e0bffb04 	addi	r2,fp,-20
  2122ec:	100b883a 	mov	r5,r2
  2122f0:	e13ffc17 	ldw	r4,-16(fp)
  2122f4:	021247c0 	call	21247c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
  2122f8:	e0bffb04 	addi	r2,fp,-20
  2122fc:	100b883a 	mov	r5,r2
  212300:	e13ffc17 	ldw	r4,-16(fp)
  212304:	02124c80 	call	2124c8 <alt_avalon_i2c_check_arblost>
    
    return status;
  212308:	e0bffb17 	ldw	r2,-20(fp)
}
  21230c:	e037883a 	mov	sp,fp
  212310:	dfc00117 	ldw	ra,4(sp)
  212314:	df000017 	ldw	fp,0(sp)
  212318:	dec00204 	addi	sp,sp,8
  21231c:	f800283a 	ret

00212320 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
  212320:	defffa04 	addi	sp,sp,-24
  212324:	dfc00515 	stw	ra,20(sp)
  212328:	df000415 	stw	fp,16(sp)
  21232c:	df000404 	addi	fp,sp,16
  212330:	e13ffd15 	stw	r4,-12(fp)
  212334:	e17ffe15 	stw	r5,-8(fp)
  212338:	3005883a 	mov	r2,r6
  21233c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
  212340:	e0bffd17 	ldw	r2,-12(fp)
  212344:	10800d17 	ldw	r2,52(r2)
  212348:	10800058 	cmpnei	r2,r2,1
  21234c:	10001c1e 	bne	r2,zero,2123c0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  212350:	e0bffd17 	ldw	r2,-12(fp)
  212354:	10800917 	ldw	r2,36(r2)
  212358:	109e0014 	ori	r2,r2,30720
  21235c:	1004d1fa 	srli	r2,r2,7
  212360:	1007883a 	mov	r3,r2
  212364:	00bfff84 	movi	r2,-2
  212368:	1884703a 	and	r2,r3,r2
  21236c:	1007883a 	mov	r3,r2
  212370:	e0bffe17 	ldw	r2,-8(fp)
  212374:	1884b03a 	or	r2,r3,r2
  212378:	10803fcc 	andi	r2,r2,255
  21237c:	e0ffff03 	ldbu	r3,-4(fp)
  212380:	000f883a 	mov	r7,zero
  212384:	180d883a 	mov	r6,r3
  212388:	100b883a 	mov	r5,r2
  21238c:	e13ffd17 	ldw	r4,-12(fp)
  212390:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212394:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
  212398:	e0bffd17 	ldw	r2,-12(fp)
  21239c:	10800917 	ldw	r2,36(r2)
  2123a0:	10803fcc 	andi	r2,r2,255
  2123a4:	000f883a 	mov	r7,zero
  2123a8:	000d883a 	mov	r6,zero
  2123ac:	100b883a 	mov	r5,r2
  2123b0:	e13ffd17 	ldw	r4,-12(fp)
  2123b4:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  2123b8:	e0bffc15 	stw	r2,-16(fp)
  2123bc:	00000e06 	br	2123f8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  2123c0:	e0bffd17 	ldw	r2,-12(fp)
  2123c4:	10800917 	ldw	r2,36(r2)
  2123c8:	1085883a 	add	r2,r2,r2
  2123cc:	1007883a 	mov	r3,r2
  2123d0:	e0bffe17 	ldw	r2,-8(fp)
  2123d4:	1884b03a 	or	r2,r3,r2
  2123d8:	10803fcc 	andi	r2,r2,255
  2123dc:	e0ffff03 	ldbu	r3,-4(fp)
  2123e0:	000f883a 	mov	r7,zero
  2123e4:	180d883a 	mov	r6,r3
  2123e8:	100b883a 	mov	r5,r2
  2123ec:	e13ffd17 	ldw	r4,-12(fp)
  2123f0:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  2123f4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
  2123f8:	e0bffc17 	ldw	r2,-16(fp)
}
  2123fc:	e037883a 	mov	sp,fp
  212400:	dfc00117 	ldw	ra,4(sp)
  212404:	df000017 	ldw	fp,0(sp)
  212408:	dec00204 	addi	sp,sp,8
  21240c:	f800283a 	ret

00212410 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
  212410:	defffd04 	addi	sp,sp,-12
  212414:	df000215 	stw	fp,8(sp)
  212418:	df000204 	addi	fp,sp,8
  21241c:	e13ffe15 	stw	r4,-8(fp)
  212420:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
  212424:	e0bffe17 	ldw	r2,-8(fp)
  212428:	10c00917 	ldw	r3,36(r2)
  21242c:	e0bfff17 	ldw	r2,-4(fp)
  212430:	10c00015 	stw	r3,0(r2)
}
  212434:	0001883a 	nop
  212438:	e037883a 	mov	sp,fp
  21243c:	df000017 	ldw	fp,0(sp)
  212440:	dec00104 	addi	sp,sp,4
  212444:	f800283a 	ret

00212448 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
  212448:	defffd04 	addi	sp,sp,-12
  21244c:	df000215 	stw	fp,8(sp)
  212450:	df000204 	addi	fp,sp,8
  212454:	e13ffe15 	stw	r4,-8(fp)
  212458:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
  21245c:	e0bffe17 	ldw	r2,-8(fp)
  212460:	e0ffff17 	ldw	r3,-4(fp)
  212464:	10c00915 	stw	r3,36(r2)
}
  212468:	0001883a 	nop
  21246c:	e037883a 	mov	sp,fp
  212470:	df000017 	ldw	fp,0(sp)
  212474:	dec00104 	addi	sp,sp,4
  212478:	f800283a 	ret

0021247c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
  21247c:	defffd04 	addi	sp,sp,-12
  212480:	df000215 	stw	fp,8(sp)
  212484:	df000204 	addi	fp,sp,8
  212488:	e13ffe15 	stw	r4,-8(fp)
  21248c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
  212490:	e0bffe17 	ldw	r2,-8(fp)
  212494:	10800317 	ldw	r2,12(r2)
  212498:	10800404 	addi	r2,r2,16
  21249c:	10800037 	ldwio	r2,0(r2)
  2124a0:	1080010c 	andi	r2,r2,4
  2124a4:	10000326 	beq	r2,zero,2124b4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
  2124a8:	e0bfff17 	ldw	r2,-4(fp)
  2124ac:	00fffec4 	movi	r3,-5
  2124b0:	10c00015 	stw	r3,0(r2)
    }
}
  2124b4:	0001883a 	nop
  2124b8:	e037883a 	mov	sp,fp
  2124bc:	df000017 	ldw	fp,0(sp)
  2124c0:	dec00104 	addi	sp,sp,4
  2124c4:	f800283a 	ret

002124c8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
  2124c8:	defffd04 	addi	sp,sp,-12
  2124cc:	df000215 	stw	fp,8(sp)
  2124d0:	df000204 	addi	fp,sp,8
  2124d4:	e13ffe15 	stw	r4,-8(fp)
  2124d8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
  2124dc:	e0bffe17 	ldw	r2,-8(fp)
  2124e0:	10800317 	ldw	r2,12(r2)
  2124e4:	10800404 	addi	r2,r2,16
  2124e8:	10800037 	ldwio	r2,0(r2)
  2124ec:	1080020c 	andi	r2,r2,8
  2124f0:	10000326 	beq	r2,zero,212500 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
  2124f4:	e0bfff17 	ldw	r2,-4(fp)
  2124f8:	00fffe84 	movi	r3,-6
  2124fc:	10c00015 	stw	r3,0(r2)
    }
}
  212500:	0001883a 	nop
  212504:	e037883a 	mov	sp,fp
  212508:	df000017 	ldw	fp,0(sp)
  21250c:	dec00104 	addi	sp,sp,4
  212510:	f800283a 	ret

00212514 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  212514:	defff804 	addi	sp,sp,-32
  212518:	dfc00715 	stw	ra,28(sp)
  21251c:	df000615 	stw	fp,24(sp)
  212520:	df000604 	addi	fp,sp,24
  212524:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212528:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  21252c:	e0bfff17 	ldw	r2,-4(fp)
  212530:	10800717 	ldw	r2,28(r2)
  212534:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
  212538:	e0bffb17 	ldw	r2,-20(fp)
  21253c:	10800117 	ldw	r2,4(r2)
  212540:	10800044 	addi	r2,r2,1
  212544:	0149c404 	movi	r5,10000
  212548:	1009883a 	mov	r4,r2
  21254c:	02032a40 	call	2032a4 <__mulsi3>
  212550:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
  212554:	e0bffd04 	addi	r2,fp,-12
  212558:	100b883a 	mov	r5,r2
  21255c:	e13fff17 	ldw	r4,-4(fp)
  212560:	02133ac0 	call	2133ac <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
  212564:	e0bffd17 	ldw	r2,-12(fp)
  212568:	100b883a 	mov	r5,r2
  21256c:	e13fff17 	ldw	r4,-4(fp)
  212570:	02132e00 	call	2132e0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  212574:	e0bffc04 	addi	r2,fp,-16
  212578:	100b883a 	mov	r5,r2
  21257c:	e13fff17 	ldw	r4,-4(fp)
  212580:	021247c0 	call	21247c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
  212584:	e0bffc17 	ldw	r2,-16(fp)
  212588:	10002226 	beq	r2,zero,212614 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
  21258c:	e0bffb17 	ldw	r2,-20(fp)
  212590:	10800217 	ldw	r2,8(r2)
  212594:	10001d26 	beq	r2,zero,21260c <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  212598:	00000d06 	br	2125d0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
  21259c:	e0bffa17 	ldw	r2,-24(fp)
  2125a0:	108002a8 	cmpgeui	r2,r2,10
  2125a4:	1000021e 	bne	r2,zero,2125b0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
  2125a8:	0109c404 	movi	r4,10000
  2125ac:	02153180 	call	215318 <alt_busy_sleep>
              if (--timeout == 0)
  2125b0:	e0bffa17 	ldw	r2,-24(fp)
  2125b4:	10bfffc4 	addi	r2,r2,-1
  2125b8:	e0bffa15 	stw	r2,-24(fp)
  2125bc:	e0bffa17 	ldw	r2,-24(fp)
  2125c0:	1000031e 	bne	r2,zero,2125d0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
  2125c4:	00bfff84 	movi	r2,-2
  2125c8:	e0bffc15 	stw	r2,-16(fp)
                 break;
  2125cc:	00000306 	br	2125dc <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2125d0:	e13fff17 	ldw	r4,-4(fp)
  2125d4:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  2125d8:	103ff01e 	bne	r2,zero,21259c <_gp+0xffe00988>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
  2125dc:	e0bffb17 	ldw	r2,-20(fp)
  2125e0:	10800017 	ldw	r2,0(r2)
  2125e4:	e0fffe04 	addi	r3,fp,-8
  2125e8:	180f883a 	mov	r7,r3
  2125ec:	000d883a 	mov	r6,zero
  2125f0:	100b883a 	mov	r5,r2
  2125f4:	e13fff17 	ldw	r4,-4(fp)
  2125f8:	02120ec0 	call	2120ec <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
  2125fc:	e13fff17 	ldw	r4,-4(fp)
  212600:	0211d500 	call	211d50 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
  212604:	e0bffb17 	ldw	r2,-20(fp)
  212608:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
  21260c:	e0bffc17 	ldw	r2,-16(fp)
  212610:	00000a06 	br	21263c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
  212614:	e0bffb17 	ldw	r2,-20(fp)
  212618:	10800217 	ldw	r2,8(r2)
  21261c:	10000626 	beq	r2,zero,212638 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
  212620:	e0bffd17 	ldw	r2,-12(fp)
  212624:	100b883a 	mov	r5,r2
  212628:	e13fff17 	ldw	r4,-4(fp)
  21262c:	02133480 	call	213348 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
  212630:	00bffe44 	movi	r2,-7
  212634:	00000106 	br	21263c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
  212638:	0005883a 	mov	r2,zero
}
  21263c:	e037883a 	mov	sp,fp
  212640:	dfc00117 	ldw	ra,4(sp)
  212644:	df000017 	ldw	fp,0(sp)
  212648:	dec00204 	addi	sp,sp,8
  21264c:	f800283a 	ret

00212650 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  212650:	defff704 	addi	sp,sp,-36
  212654:	dfc00815 	stw	ra,32(sp)
  212658:	df000715 	stw	fp,28(sp)
  21265c:	df000704 	addi	fp,sp,28
  212660:	e13ffc15 	stw	r4,-16(fp)
  212664:	e17ffd15 	stw	r5,-12(fp)
  212668:	e1bffe15 	stw	r6,-8(fp)
  21266c:	3805883a 	mov	r2,r7
  212670:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  212674:	0089c404 	movi	r2,10000
  212678:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
  21267c:	00002206 	br	212708 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
  212680:	e0bffb17 	ldw	r2,-20(fp)
  212684:	108002a8 	cmpgeui	r2,r2,10
  212688:	1000021e 	bne	r2,zero,212694 <alt_avalon_i2c_master_tx+0x44>
  21268c:	0109c404 	movi	r4,10000
  212690:	02153180 	call	215318 <alt_busy_sleep>
      if (use_interrupts)
  212694:	e0bfff03 	ldbu	r2,-4(fp)
  212698:	10000926 	beq	r2,zero,2126c0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
  21269c:	00800044 	movi	r2,1
  2126a0:	d8800015 	stw	r2,0(sp)
  2126a4:	000f883a 	mov	r7,zero
  2126a8:	e1bffe17 	ldw	r6,-8(fp)
  2126ac:	e17ffd17 	ldw	r5,-12(fp)
  2126b0:	e13ffc17 	ldw	r4,-16(fp)
  2126b4:	0212bfc0 	call	212bfc <alt_avalon_i2c_master_transmit_using_interrupts>
  2126b8:	e0bffa15 	stw	r2,-24(fp)
  2126bc:	00000806 	br	2126e0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
  2126c0:	00800044 	movi	r2,1
  2126c4:	d8800015 	stw	r2,0(sp)
  2126c8:	000f883a 	mov	r7,zero
  2126cc:	e1bffe17 	ldw	r6,-8(fp)
  2126d0:	e17ffd17 	ldw	r5,-12(fp)
  2126d4:	e13ffc17 	ldw	r4,-16(fp)
  2126d8:	0212a3c0 	call	212a3c <alt_avalon_i2c_master_transmit>
  2126dc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2126e0:	e0bffa17 	ldw	r2,-24(fp)
  2126e4:	10bffea0 	cmpeqi	r2,r2,-6
  2126e8:	1000061e 	bne	r2,zero,212704 <alt_avalon_i2c_master_tx+0xb4>
  2126ec:	e0bffa17 	ldw	r2,-24(fp)
  2126f0:	10bffee0 	cmpeqi	r2,r2,-5
  2126f4:	1000031e 	bne	r2,zero,212704 <alt_avalon_i2c_master_tx+0xb4>
  2126f8:	e0bffa17 	ldw	r2,-24(fp)
  2126fc:	10bffe58 	cmpnei	r2,r2,-7
  212700:	1000061e 	bne	r2,zero,21271c <alt_avalon_i2c_master_tx+0xcc>
  212704:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
  212708:	e0bffb17 	ldw	r2,-20(fp)
  21270c:	10ffffc4 	addi	r3,r2,-1
  212710:	e0fffb15 	stw	r3,-20(fp)
  212714:	103fda1e 	bne	r2,zero,212680 <_gp+0xffe00a6c>
  212718:	00000106 	br	212720 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
  21271c:	0001883a 	nop
    }

    return status;
  212720:	e0bffa17 	ldw	r2,-24(fp)
}        
  212724:	e037883a 	mov	sp,fp
  212728:	dfc00117 	ldw	ra,4(sp)
  21272c:	df000017 	ldw	fp,0(sp)
  212730:	dec00204 	addi	sp,sp,8
  212734:	f800283a 	ret

00212738 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  212738:	defff704 	addi	sp,sp,-36
  21273c:	dfc00815 	stw	ra,32(sp)
  212740:	df000715 	stw	fp,28(sp)
  212744:	df000704 	addi	fp,sp,28
  212748:	e13ffc15 	stw	r4,-16(fp)
  21274c:	e17ffd15 	stw	r5,-12(fp)
  212750:	e1bffe15 	stw	r6,-8(fp)
  212754:	3805883a 	mov	r2,r7
  212758:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  21275c:	0089c404 	movi	r2,10000
  212760:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
  212764:	e0bfff03 	ldbu	r2,-4(fp)
  212768:	10003426 	beq	r2,zero,21283c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
  21276c:	00001706 	br	2127cc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
  212770:	e0bffb17 	ldw	r2,-20(fp)
  212774:	108002a8 	cmpgeui	r2,r2,10
  212778:	1000021e 	bne	r2,zero,212784 <alt_avalon_i2c_master_rx+0x4c>
  21277c:	0109c404 	movi	r4,10000
  212780:	02153180 	call	215318 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  212784:	00800044 	movi	r2,1
  212788:	d8800015 	stw	r2,0(sp)
  21278c:	000f883a 	mov	r7,zero
  212790:	e1bffe17 	ldw	r6,-8(fp)
  212794:	e17ffd17 	ldw	r5,-12(fp)
  212798:	e13ffc17 	ldw	r4,-16(fp)
  21279c:	02130180 	call	213018 <alt_avalon_i2c_master_receive_using_interrupts>
  2127a0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2127a4:	e0bffa17 	ldw	r2,-24(fp)
  2127a8:	10bffea0 	cmpeqi	r2,r2,-6
  2127ac:	1000061e 	bne	r2,zero,2127c8 <alt_avalon_i2c_master_rx+0x90>
  2127b0:	e0bffa17 	ldw	r2,-24(fp)
  2127b4:	10bffee0 	cmpeqi	r2,r2,-5
  2127b8:	1000031e 	bne	r2,zero,2127c8 <alt_avalon_i2c_master_rx+0x90>
  2127bc:	e0bffa17 	ldw	r2,-24(fp)
  2127c0:	10bffe58 	cmpnei	r2,r2,-7
  2127c4:	1000221e 	bne	r2,zero,212850 <alt_avalon_i2c_master_rx+0x118>
  2127c8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
  2127cc:	e0bffb17 	ldw	r2,-20(fp)
  2127d0:	10ffffc4 	addi	r3,r2,-1
  2127d4:	e0fffb15 	stw	r3,-20(fp)
  2127d8:	103fe51e 	bne	r2,zero,212770 <_gp+0xffe00b5c>
  2127dc:	00001f06 	br	21285c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  2127e0:	e0bffb17 	ldw	r2,-20(fp)
  2127e4:	108002a8 	cmpgeui	r2,r2,10
  2127e8:	1000021e 	bne	r2,zero,2127f4 <alt_avalon_i2c_master_rx+0xbc>
  2127ec:	0109c404 	movi	r4,10000
  2127f0:	02153180 	call	215318 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  2127f4:	00800044 	movi	r2,1
  2127f8:	d8800015 	stw	r2,0(sp)
  2127fc:	000f883a 	mov	r7,zero
  212800:	e1bffe17 	ldw	r6,-8(fp)
  212804:	e17ffd17 	ldw	r5,-12(fp)
  212808:	e13ffc17 	ldw	r4,-16(fp)
  21280c:	0212e080 	call	212e08 <alt_avalon_i2c_master_receive>
  212810:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  212814:	e0bffa17 	ldw	r2,-24(fp)
  212818:	10bffea0 	cmpeqi	r2,r2,-6
  21281c:	1000061e 	bne	r2,zero,212838 <alt_avalon_i2c_master_rx+0x100>
  212820:	e0bffa17 	ldw	r2,-24(fp)
  212824:	10bffee0 	cmpeqi	r2,r2,-5
  212828:	1000031e 	bne	r2,zero,212838 <alt_avalon_i2c_master_rx+0x100>
  21282c:	e0bffa17 	ldw	r2,-24(fp)
  212830:	10bffe58 	cmpnei	r2,r2,-7
  212834:	1000081e 	bne	r2,zero,212858 <alt_avalon_i2c_master_rx+0x120>
  212838:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
  21283c:	e0bffb17 	ldw	r2,-20(fp)
  212840:	10ffffc4 	addi	r3,r2,-1
  212844:	e0fffb15 	stw	r3,-20(fp)
  212848:	103fe51e 	bne	r2,zero,2127e0 <_gp+0xffe00bcc>
  21284c:	00000306 	br	21285c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  212850:	0001883a 	nop
  212854:	00000106 	br	21285c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  212858:	0001883a 	nop
      }
    }
    
    return status;
  21285c:	e0bffa17 	ldw	r2,-24(fp)
}        
  212860:	e037883a 	mov	sp,fp
  212864:	dfc00117 	ldw	ra,4(sp)
  212868:	df000017 	ldw	fp,0(sp)
  21286c:	dec00204 	addi	sp,sp,8
  212870:	f800283a 	ret

00212874 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
  212874:	defff604 	addi	sp,sp,-40
  212878:	dfc00915 	stw	ra,36(sp)
  21287c:	df000815 	stw	fp,32(sp)
  212880:	df000804 	addi	fp,sp,32
  212884:	e13ffb15 	stw	r4,-20(fp)
  212888:	e17ffc15 	stw	r5,-16(fp)
  21288c:	e1bffd15 	stw	r6,-12(fp)
  212890:	e1fffe15 	stw	r7,-8(fp)
  212894:	e0800317 	ldw	r2,12(fp)
  212898:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  21289c:	0089c404 	movi	r2,10000
  2128a0:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
  2128a4:	e0bfff03 	ldbu	r2,-4(fp)
  2128a8:	10005626 	beq	r2,zero,212a04 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
  2128ac:	00002806 	br	212950 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
  2128b0:	e0bffa17 	ldw	r2,-24(fp)
  2128b4:	108002a8 	cmpgeui	r2,r2,10
  2128b8:	1000021e 	bne	r2,zero,2128c4 <alt_avalon_i2c_master_tx_rx+0x50>
  2128bc:	0109c404 	movi	r4,10000
  2128c0:	02153180 	call	215318 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  2128c4:	d8000015 	stw	zero,0(sp)
  2128c8:	000f883a 	mov	r7,zero
  2128cc:	e1bffd17 	ldw	r6,-12(fp)
  2128d0:	e17ffc17 	ldw	r5,-16(fp)
  2128d4:	e13ffb17 	ldw	r4,-20(fp)
  2128d8:	0212bfc0 	call	212bfc <alt_avalon_i2c_master_transmit_using_interrupts>
  2128dc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2128e0:	e0bff917 	ldw	r2,-28(fp)
  2128e4:	10bffea0 	cmpeqi	r2,r2,-6
  2128e8:	1000191e 	bne	r2,zero,212950 <alt_avalon_i2c_master_tx_rx+0xdc>
  2128ec:	e0bff917 	ldw	r2,-28(fp)
  2128f0:	10bffee0 	cmpeqi	r2,r2,-5
  2128f4:	1000161e 	bne	r2,zero,212950 <alt_avalon_i2c_master_tx_rx+0xdc>
  2128f8:	e0bff917 	ldw	r2,-28(fp)
  2128fc:	10bffe58 	cmpnei	r2,r2,-7
  212900:	1000011e 	bne	r2,zero,212908 <alt_avalon_i2c_master_tx_rx+0x94>
  212904:	00001206 	br	212950 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  212908:	00800044 	movi	r2,1
  21290c:	d8800015 	stw	r2,0(sp)
  212910:	01c00044 	movi	r7,1
  212914:	e1800217 	ldw	r6,8(fp)
  212918:	e17ffe17 	ldw	r5,-8(fp)
  21291c:	e13ffb17 	ldw	r4,-20(fp)
  212920:	02130180 	call	213018 <alt_avalon_i2c_master_receive_using_interrupts>
  212924:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  212928:	e0bff917 	ldw	r2,-28(fp)
  21292c:	10bffea0 	cmpeqi	r2,r2,-6
  212930:	1000061e 	bne	r2,zero,21294c <alt_avalon_i2c_master_tx_rx+0xd8>
  212934:	e0bff917 	ldw	r2,-28(fp)
  212938:	10bffee0 	cmpeqi	r2,r2,-5
  21293c:	1000031e 	bne	r2,zero,21294c <alt_avalon_i2c_master_tx_rx+0xd8>
  212940:	e0bff917 	ldw	r2,-28(fp)
  212944:	10bffe58 	cmpnei	r2,r2,-7
  212948:	1000331e 	bne	r2,zero,212a18 <alt_avalon_i2c_master_tx_rx+0x1a4>
  21294c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
  212950:	e0bffa17 	ldw	r2,-24(fp)
  212954:	10ffffc4 	addi	r3,r2,-1
  212958:	e0fffa15 	stw	r3,-24(fp)
  21295c:	103fd41e 	bne	r2,zero,2128b0 <_gp+0xffe00c9c>
  212960:	00003006 	br	212a24 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  212964:	e0bffa17 	ldw	r2,-24(fp)
  212968:	108002a8 	cmpgeui	r2,r2,10
  21296c:	1000021e 	bne	r2,zero,212978 <alt_avalon_i2c_master_tx_rx+0x104>
  212970:	0109c404 	movi	r4,10000
  212974:	02153180 	call	215318 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  212978:	d8000015 	stw	zero,0(sp)
  21297c:	000f883a 	mov	r7,zero
  212980:	e1bffd17 	ldw	r6,-12(fp)
  212984:	e17ffc17 	ldw	r5,-16(fp)
  212988:	e13ffb17 	ldw	r4,-20(fp)
  21298c:	0212a3c0 	call	212a3c <alt_avalon_i2c_master_transmit>
  212990:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  212994:	e0bff917 	ldw	r2,-28(fp)
  212998:	10bffea0 	cmpeqi	r2,r2,-6
  21299c:	1000191e 	bne	r2,zero,212a04 <alt_avalon_i2c_master_tx_rx+0x190>
  2129a0:	e0bff917 	ldw	r2,-28(fp)
  2129a4:	10bffee0 	cmpeqi	r2,r2,-5
  2129a8:	1000161e 	bne	r2,zero,212a04 <alt_avalon_i2c_master_tx_rx+0x190>
  2129ac:	e0bff917 	ldw	r2,-28(fp)
  2129b0:	10bffe58 	cmpnei	r2,r2,-7
  2129b4:	1000011e 	bne	r2,zero,2129bc <alt_avalon_i2c_master_tx_rx+0x148>
  2129b8:	00001206 	br	212a04 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  2129bc:	00800044 	movi	r2,1
  2129c0:	d8800015 	stw	r2,0(sp)
  2129c4:	01c00044 	movi	r7,1
  2129c8:	e1800217 	ldw	r6,8(fp)
  2129cc:	e17ffe17 	ldw	r5,-8(fp)
  2129d0:	e13ffb17 	ldw	r4,-20(fp)
  2129d4:	0212e080 	call	212e08 <alt_avalon_i2c_master_receive>
  2129d8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2129dc:	e0bff917 	ldw	r2,-28(fp)
  2129e0:	10bffea0 	cmpeqi	r2,r2,-6
  2129e4:	1000061e 	bne	r2,zero,212a00 <alt_avalon_i2c_master_tx_rx+0x18c>
  2129e8:	e0bff917 	ldw	r2,-28(fp)
  2129ec:	10bffee0 	cmpeqi	r2,r2,-5
  2129f0:	1000031e 	bne	r2,zero,212a00 <alt_avalon_i2c_master_tx_rx+0x18c>
  2129f4:	e0bff917 	ldw	r2,-28(fp)
  2129f8:	10bffe58 	cmpnei	r2,r2,-7
  2129fc:	1000081e 	bne	r2,zero,212a20 <alt_avalon_i2c_master_tx_rx+0x1ac>
  212a00:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
  212a04:	e0bffa17 	ldw	r2,-24(fp)
  212a08:	10ffffc4 	addi	r3,r2,-1
  212a0c:	e0fffa15 	stw	r3,-24(fp)
  212a10:	103fd41e 	bne	r2,zero,212964 <_gp+0xffe00d50>
  212a14:	00000306 	br	212a24 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  212a18:	0001883a 	nop
  212a1c:	00000106 	br	212a24 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  212a20:	0001883a 	nop
      }
    }
    
    return status;
  212a24:	e0bff917 	ldw	r2,-28(fp)
}                                       
  212a28:	e037883a 	mov	sp,fp
  212a2c:	dfc00117 	ldw	ra,4(sp)
  212a30:	df000017 	ldw	fp,0(sp)
  212a34:	dec00204 	addi	sp,sp,8
  212a38:	f800283a 	ret

00212a3c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  212a3c:	defff704 	addi	sp,sp,-36
  212a40:	dfc00815 	stw	ra,32(sp)
  212a44:	df000715 	stw	fp,28(sp)
  212a48:	df000704 	addi	fp,sp,28
  212a4c:	e13ffb15 	stw	r4,-20(fp)
  212a50:	e17ffc15 	stw	r5,-16(fp)
  212a54:	e1bffd15 	stw	r6,-12(fp)
  212a58:	3807883a 	mov	r3,r7
  212a5c:	e0800217 	ldw	r2,8(fp)
  212a60:	e0fffe05 	stb	r3,-8(fp)
  212a64:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212a68:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
  212a6c:	0149c404 	movi	r5,10000
  212a70:	e13ffd17 	ldw	r4,-12(fp)
  212a74:	02032a40 	call	2032a4 <__mulsi3>
  212a78:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
  212a7c:	e0bffd17 	ldw	r2,-12(fp)
  212a80:	1000021e 	bne	r2,zero,212a8c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212a84:	0005883a 	mov	r2,zero
  212a88:	00005706 	br	212be8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212a8c:	e0bffe03 	ldbu	r2,-8(fp)
  212a90:	10000a1e 	bne	r2,zero,212abc <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212a94:	e13ffb17 	ldw	r4,-20(fp)
  212a98:	0211cb80 	call	211cb8 <alt_avalon_i2c_enable>
  212a9c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212aa0:	e0bffa17 	ldw	r2,-24(fp)
  212aa4:	10000226 	beq	r2,zero,212ab0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
  212aa8:	e0bffa17 	ldw	r2,-24(fp)
  212aac:	00004e06 	br	212be8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212ab0:	01400704 	movi	r5,28
  212ab4:	e13ffb17 	ldw	r4,-20(fp)
  212ab8:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  212abc:	e0bffe03 	ldbu	r2,-8(fp)
  212ac0:	100d883a 	mov	r6,r2
  212ac4:	000b883a 	mov	r5,zero
  212ac8:	e13ffb17 	ldw	r4,-20(fp)
  212acc:	02123200 	call	212320 <alt_avalon_i2c_send_address>
  212ad0:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
  212ad4:	e0bffa17 	ldw	r2,-24(fp)
  212ad8:	1000271e 	bne	r2,zero,212b78 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212adc:	00000f06 	br	212b1c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212ae0:	e0bffc17 	ldw	r2,-16(fp)
  212ae4:	10800003 	ldbu	r2,0(r2)
  212ae8:	10803fcc 	andi	r2,r2,255
  212aec:	000f883a 	mov	r7,zero
  212af0:	000d883a 	mov	r6,zero
  212af4:	100b883a 	mov	r5,r2
  212af8:	e13ffb17 	ldw	r4,-20(fp)
  212afc:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212b00:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
  212b04:	e0bffc17 	ldw	r2,-16(fp)
  212b08:	10800044 	addi	r2,r2,1
  212b0c:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212b10:	e0bffd17 	ldw	r2,-12(fp)
  212b14:	10bfffc4 	addi	r2,r2,-1
  212b18:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212b1c:	e0bffd17 	ldw	r2,-12(fp)
  212b20:	108000b0 	cmpltui	r2,r2,2
  212b24:	1000021e 	bne	r2,zero,212b30 <alt_avalon_i2c_master_transmit+0xf4>
  212b28:	e0bffa17 	ldw	r2,-24(fp)
  212b2c:	103fec26 	beq	r2,zero,212ae0 <_gp+0xffe00ecc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212b30:	e0bffa17 	ldw	r2,-24(fp)
  212b34:	1000101e 	bne	r2,zero,212b78 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212b38:	e0bffc17 	ldw	r2,-16(fp)
  212b3c:	10800003 	ldbu	r2,0(r2)
  212b40:	10803fcc 	andi	r2,r2,255
  212b44:	e0ffff03 	ldbu	r3,-4(fp)
  212b48:	180f883a 	mov	r7,r3
  212b4c:	000d883a 	mov	r6,zero
  212b50:	100b883a 	mov	r5,r2
  212b54:	e13ffb17 	ldw	r4,-20(fp)
  212b58:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212b5c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
  212b60:	e0bffc17 	ldw	r2,-16(fp)
  212b64:	10800044 	addi	r2,r2,1
  212b68:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212b6c:	e0bffd17 	ldw	r2,-12(fp)
  212b70:	10bfffc4 	addi	r2,r2,-1
  212b74:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  212b78:	e0bfff03 	ldbu	r2,-4(fp)
  212b7c:	1000101e 	bne	r2,zero,212bc0 <alt_avalon_i2c_master_transmit+0x184>
  212b80:	e0bffa17 	ldw	r2,-24(fp)
  212b84:	10001726 	beq	r2,zero,212be4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212b88:	00000d06 	br	212bc0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
  212b8c:	e0bff917 	ldw	r2,-28(fp)
  212b90:	108002a8 	cmpgeui	r2,r2,10
  212b94:	1000021e 	bne	r2,zero,212ba0 <alt_avalon_i2c_master_transmit+0x164>
  212b98:	0109c404 	movi	r4,10000
  212b9c:	02153180 	call	215318 <alt_busy_sleep>
            if (--timeout == 0)
  212ba0:	e0bff917 	ldw	r2,-28(fp)
  212ba4:	10bfffc4 	addi	r2,r2,-1
  212ba8:	e0bff915 	stw	r2,-28(fp)
  212bac:	e0bff917 	ldw	r2,-28(fp)
  212bb0:	1000031e 	bne	r2,zero,212bc0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212bb4:	00bfff84 	movi	r2,-2
  212bb8:	e0bffa15 	stw	r2,-24(fp)
               break;
  212bbc:	00000306 	br	212bcc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212bc0:	e13ffb17 	ldw	r4,-20(fp)
  212bc4:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  212bc8:	103ff01e 	bne	r2,zero,212b8c <_gp+0xffe00f78>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
  212bcc:	e0bffa04 	addi	r2,fp,-24
  212bd0:	100b883a 	mov	r5,r2
  212bd4:	e13ffb17 	ldw	r4,-20(fp)
  212bd8:	021247c0 	call	21247c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212bdc:	e13ffb17 	ldw	r4,-20(fp)
  212be0:	0211d500 	call	211d50 <alt_avalon_i2c_disable>
    }


    return status;
  212be4:	e0bffa17 	ldw	r2,-24(fp)
}
  212be8:	e037883a 	mov	sp,fp
  212bec:	dfc00117 	ldw	ra,4(sp)
  212bf0:	df000017 	ldw	fp,0(sp)
  212bf4:	dec00204 	addi	sp,sp,8
  212bf8:	f800283a 	ret

00212bfc <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  212bfc:	defff604 	addi	sp,sp,-40
  212c00:	dfc00915 	stw	ra,36(sp)
  212c04:	df000815 	stw	fp,32(sp)
  212c08:	df000804 	addi	fp,sp,32
  212c0c:	e13ffb15 	stw	r4,-20(fp)
  212c10:	e17ffc15 	stw	r5,-16(fp)
  212c14:	e1bffd15 	stw	r6,-12(fp)
  212c18:	3807883a 	mov	r3,r7
  212c1c:	e0800217 	ldw	r2,8(fp)
  212c20:	e0fffe05 	stb	r3,-8(fp)
  212c24:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212c28:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
  212c2c:	0149c404 	movi	r5,10000
  212c30:	e13ffd17 	ldw	r4,-12(fp)
  212c34:	02032a40 	call	2032a4 <__mulsi3>
  212c38:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  212c3c:	e0bffb17 	ldw	r2,-20(fp)
  212c40:	10800717 	ldw	r2,28(r2)
  212c44:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
  212c48:	e0bffd17 	ldw	r2,-12(fp)
  212c4c:	1000021e 	bne	r2,zero,212c58 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212c50:	0005883a 	mov	r2,zero
  212c54:	00006706 	br	212df4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  212c58:	e0bffb17 	ldw	r2,-20(fp)
  212c5c:	10c00617 	ldw	r3,24(r2)
  212c60:	00800874 	movhi	r2,33
  212c64:	10864f04 	addi	r2,r2,6460
  212c68:	18800226 	beq	r3,r2,212c74 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  212c6c:	00bfff44 	movi	r2,-3
  212c70:	00006006 	br	212df4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212c74:	e0bffe03 	ldbu	r2,-8(fp)
  212c78:	10000a1e 	bne	r2,zero,212ca4 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212c7c:	e13ffb17 	ldw	r4,-20(fp)
  212c80:	0211cb80 	call	211cb8 <alt_avalon_i2c_enable>
  212c84:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212c88:	e0bff817 	ldw	r2,-32(fp)
  212c8c:	10000226 	beq	r2,zero,212c98 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
  212c90:	e0bff817 	ldw	r2,-32(fp)
  212c94:	00005706 	br	212df4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212c98:	01400704 	movi	r5,28
  212c9c:	e13ffb17 	ldw	r4,-20(fp)
  212ca0:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  212ca4:	e0bffe03 	ldbu	r2,-8(fp)
  212ca8:	100d883a 	mov	r6,r2
  212cac:	000b883a 	mov	r5,zero
  212cb0:	e13ffb17 	ldw	r4,-20(fp)
  212cb4:	02123200 	call	212320 <alt_avalon_i2c_send_address>
  212cb8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
  212cbc:	e0bff817 	ldw	r2,-32(fp)
  212cc0:	1000271e 	bne	r2,zero,212d60 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212cc4:	00000f06 	br	212d04 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212cc8:	e0bffc17 	ldw	r2,-16(fp)
  212ccc:	10800003 	ldbu	r2,0(r2)
  212cd0:	10803fcc 	andi	r2,r2,255
  212cd4:	000f883a 	mov	r7,zero
  212cd8:	000d883a 	mov	r6,zero
  212cdc:	100b883a 	mov	r5,r2
  212ce0:	e13ffb17 	ldw	r4,-20(fp)
  212ce4:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212ce8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
  212cec:	e0bffc17 	ldw	r2,-16(fp)
  212cf0:	10800044 	addi	r2,r2,1
  212cf4:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212cf8:	e0bffd17 	ldw	r2,-12(fp)
  212cfc:	10bfffc4 	addi	r2,r2,-1
  212d00:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212d04:	e0bffd17 	ldw	r2,-12(fp)
  212d08:	108000b0 	cmpltui	r2,r2,2
  212d0c:	1000021e 	bne	r2,zero,212d18 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
  212d10:	e0bff817 	ldw	r2,-32(fp)
  212d14:	103fec26 	beq	r2,zero,212cc8 <_gp+0xffe010b4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212d18:	e0bff817 	ldw	r2,-32(fp)
  212d1c:	1000101e 	bne	r2,zero,212d60 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212d20:	e0bffc17 	ldw	r2,-16(fp)
  212d24:	10800003 	ldbu	r2,0(r2)
  212d28:	10803fcc 	andi	r2,r2,255
  212d2c:	e0ffff03 	ldbu	r3,-4(fp)
  212d30:	180f883a 	mov	r7,r3
  212d34:	000d883a 	mov	r6,zero
  212d38:	100b883a 	mov	r5,r2
  212d3c:	e13ffb17 	ldw	r4,-20(fp)
  212d40:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212d44:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
  212d48:	e0bffc17 	ldw	r2,-16(fp)
  212d4c:	10800044 	addi	r2,r2,1
  212d50:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212d54:	e0bffd17 	ldw	r2,-12(fp)
  212d58:	10bfffc4 	addi	r2,r2,-1
  212d5c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  212d60:	e0bff817 	ldw	r2,-32(fp)
  212d64:	10001426 	beq	r2,zero,212db8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212d68:	00000d06 	br	212da0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
  212d6c:	e0bff917 	ldw	r2,-28(fp)
  212d70:	108002a8 	cmpgeui	r2,r2,10
  212d74:	1000021e 	bne	r2,zero,212d80 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
  212d78:	0109c404 	movi	r4,10000
  212d7c:	02153180 	call	215318 <alt_busy_sleep>
            if (--timeout == 0)
  212d80:	e0bff917 	ldw	r2,-28(fp)
  212d84:	10bfffc4 	addi	r2,r2,-1
  212d88:	e0bff915 	stw	r2,-28(fp)
  212d8c:	e0bff917 	ldw	r2,-28(fp)
  212d90:	1000031e 	bne	r2,zero,212da0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212d94:	00bfff84 	movi	r2,-2
  212d98:	e0bff815 	stw	r2,-32(fp)
               break;
  212d9c:	00000306 	br	212dac <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212da0:	e13ffb17 	ldw	r4,-20(fp)
  212da4:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  212da8:	103ff01e 	bne	r2,zero,212d6c <_gp+0xffe01158>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212dac:	e13ffb17 	ldw	r4,-20(fp)
  212db0:	0211d500 	call	211d50 <alt_avalon_i2c_disable>
  212db4:	00000e06 	br	212df0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
  212db8:	e0bfff03 	ldbu	r2,-4(fp)
  212dbc:	10000c26 	beq	r2,zero,212df0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212dc0:	01400704 	movi	r5,28
  212dc4:	e13ffb17 	ldw	r4,-20(fp)
  212dc8:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
  212dcc:	000b883a 	mov	r5,zero
  212dd0:	e13ffb17 	ldw	r4,-20(fp)
  212dd4:	02134ec0 	call	2134ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
  212dd8:	e0bffa17 	ldw	r2,-24(fp)
  212ddc:	00c00044 	movi	r3,1
  212de0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
  212de4:	01400044 	movi	r5,1
  212de8:	e13ffb17 	ldw	r4,-20(fp)
  212dec:	02133480 	call	213348 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
  212df0:	e0bff817 	ldw	r2,-32(fp)
}
  212df4:	e037883a 	mov	sp,fp
  212df8:	dfc00117 	ldw	ra,4(sp)
  212dfc:	df000017 	ldw	fp,0(sp)
  212e00:	dec00204 	addi	sp,sp,8
  212e04:	f800283a 	ret

00212e08 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  212e08:	defff404 	addi	sp,sp,-48
  212e0c:	dfc00b15 	stw	ra,44(sp)
  212e10:	df000a15 	stw	fp,40(sp)
  212e14:	df000a04 	addi	fp,sp,40
  212e18:	e13ffb15 	stw	r4,-20(fp)
  212e1c:	e17ffc15 	stw	r5,-16(fp)
  212e20:	e1bffd15 	stw	r6,-12(fp)
  212e24:	3807883a 	mov	r3,r7
  212e28:	e0800217 	ldw	r2,8(fp)
  212e2c:	e0fffe05 	stb	r3,-8(fp)
  212e30:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212e34:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
  212e38:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
  212e3c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
  212e40:	e0bffd17 	ldw	r2,-12(fp)
  212e44:	1000021e 	bne	r2,zero,212e50 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212e48:	0005883a 	mov	r2,zero
  212e4c:	00006d06 	br	213004 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212e50:	e0bffe03 	ldbu	r2,-8(fp)
  212e54:	10000a1e 	bne	r2,zero,212e80 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212e58:	e13ffb17 	ldw	r4,-20(fp)
  212e5c:	0211cb80 	call	211cb8 <alt_avalon_i2c_enable>
  212e60:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212e64:	e0bff917 	ldw	r2,-28(fp)
  212e68:	10000226 	beq	r2,zero,212e74 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
  212e6c:	e0bff917 	ldw	r2,-28(fp)
  212e70:	00006406 	br	213004 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212e74:	01400704 	movi	r5,28
  212e78:	e13ffb17 	ldw	r4,-20(fp)
  212e7c:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  212e80:	e0bffe03 	ldbu	r2,-8(fp)
  212e84:	100d883a 	mov	r6,r2
  212e88:	01400044 	movi	r5,1
  212e8c:	e13ffb17 	ldw	r4,-20(fp)
  212e90:	02123200 	call	212320 <alt_avalon_i2c_send_address>
  212e94:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  212e98:	e0bff917 	ldw	r2,-28(fp)
  212e9c:	1000341e 	bne	r2,zero,212f70 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  212ea0:	00001906 	br	212f08 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212ea4:	000f883a 	mov	r7,zero
  212ea8:	000d883a 	mov	r6,zero
  212eac:	000b883a 	mov	r5,zero
  212eb0:	e13ffb17 	ldw	r4,-20(fp)
  212eb4:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212eb8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
  212ebc:	e0bff817 	ldw	r2,-32(fp)
  212ec0:	10800044 	addi	r2,r2,1
  212ec4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
  212ec8:	e0bff917 	ldw	r2,-28(fp)
  212ecc:	10000e1e 	bne	r2,zero,212f08 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
  212ed0:	e0bffa04 	addi	r2,fp,-24
  212ed4:	100f883a 	mov	r7,r2
  212ed8:	000d883a 	mov	r6,zero
  212edc:	e17ffc17 	ldw	r5,-16(fp)
  212ee0:	e13ffb17 	ldw	r4,-20(fp)
  212ee4:	02120ec0 	call	2120ec <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
  212ee8:	e0bffa17 	ldw	r2,-24(fp)
  212eec:	e0fffc17 	ldw	r3,-16(fp)
  212ef0:	1885883a 	add	r2,r3,r2
  212ef4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
  212ef8:	e0bffa17 	ldw	r2,-24(fp)
  212efc:	e0fff717 	ldw	r3,-36(fp)
  212f00:	1885883a 	add	r2,r3,r2
  212f04:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  212f08:	e0bffd17 	ldw	r2,-12(fp)
  212f0c:	10bfffc4 	addi	r2,r2,-1
  212f10:	e0fff817 	ldw	r3,-32(fp)
  212f14:	1880022e 	bgeu	r3,r2,212f20 <alt_avalon_i2c_master_receive+0x118>
  212f18:	e0bff917 	ldw	r2,-28(fp)
  212f1c:	103fe126 	beq	r2,zero,212ea4 <_gp+0xffe01290>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212f20:	e0bff917 	ldw	r2,-28(fp)
  212f24:	1000121e 	bne	r2,zero,212f70 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212f28:	e0bfff03 	ldbu	r2,-4(fp)
  212f2c:	100f883a 	mov	r7,r2
  212f30:	000d883a 	mov	r6,zero
  212f34:	000b883a 	mov	r5,zero
  212f38:	e13ffb17 	ldw	r4,-20(fp)
  212f3c:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  212f40:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  212f44:	00000a06 	br	212f70 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
  212f48:	e17ffc17 	ldw	r5,-16(fp)
  212f4c:	e13ffb17 	ldw	r4,-20(fp)
  212f50:	02121940 	call	212194 <alt_avalon_i2c_rx_read>
  212f54:	e0bff915 	stw	r2,-28(fp)
        buffer++;
  212f58:	e0bffc17 	ldw	r2,-16(fp)
  212f5c:	10800044 	addi	r2,r2,1
  212f60:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
  212f64:	e0bff717 	ldw	r2,-36(fp)
  212f68:	10800044 	addi	r2,r2,1
  212f6c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  212f70:	e0fff717 	ldw	r3,-36(fp)
  212f74:	e0bffd17 	ldw	r2,-12(fp)
  212f78:	1880022e 	bgeu	r3,r2,212f84 <alt_avalon_i2c_master_receive+0x17c>
  212f7c:	e0bff917 	ldw	r2,-28(fp)
  212f80:	103ff126 	beq	r2,zero,212f48 <_gp+0xffe01334>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  212f84:	e0bfff03 	ldbu	r2,-4(fp)
  212f88:	1000021e 	bne	r2,zero,212f94 <alt_avalon_i2c_master_receive+0x18c>
  212f8c:	e0bff917 	ldw	r2,-28(fp)
  212f90:	10001b26 	beq	r2,zero,213000 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
  212f94:	0149c404 	movi	r5,10000
  212f98:	e13ffd17 	ldw	r4,-12(fp)
  212f9c:	02032a40 	call	2032a4 <__mulsi3>
  212fa0:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  212fa4:	00000d06 	br	212fdc <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
  212fa8:	e0bff617 	ldw	r2,-40(fp)
  212fac:	108002a8 	cmpgeui	r2,r2,10
  212fb0:	1000021e 	bne	r2,zero,212fbc <alt_avalon_i2c_master_receive+0x1b4>
  212fb4:	0109c404 	movi	r4,10000
  212fb8:	02153180 	call	215318 <alt_busy_sleep>
            if (--timeout == 0)
  212fbc:	e0bff617 	ldw	r2,-40(fp)
  212fc0:	10bfffc4 	addi	r2,r2,-1
  212fc4:	e0bff615 	stw	r2,-40(fp)
  212fc8:	e0bff617 	ldw	r2,-40(fp)
  212fcc:	1000031e 	bne	r2,zero,212fdc <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212fd0:	00bfff84 	movi	r2,-2
  212fd4:	e0bff915 	stw	r2,-28(fp)
               break;
  212fd8:	00000306 	br	212fe8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  212fdc:	e13ffb17 	ldw	r4,-20(fp)
  212fe0:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  212fe4:	103ff01e 	bne	r2,zero,212fa8 <_gp+0xffe01394>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
  212fe8:	e0bff904 	addi	r2,fp,-28
  212fec:	100b883a 	mov	r5,r2
  212ff0:	e13ffb17 	ldw	r4,-20(fp)
  212ff4:	021247c0 	call	21247c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212ff8:	e13ffb17 	ldw	r4,-20(fp)
  212ffc:	0211d500 	call	211d50 <alt_avalon_i2c_disable>
    }

    return status;
  213000:	e0bff917 	ldw	r2,-28(fp)
}
  213004:	e037883a 	mov	sp,fp
  213008:	dfc00117 	ldw	ra,4(sp)
  21300c:	df000017 	ldw	fp,0(sp)
  213010:	dec00204 	addi	sp,sp,8
  213014:	f800283a 	ret

00213018 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  213018:	defff504 	addi	sp,sp,-44
  21301c:	dfc00a15 	stw	ra,40(sp)
  213020:	df000915 	stw	fp,36(sp)
  213024:	df000904 	addi	fp,sp,36
  213028:	e13ffb15 	stw	r4,-20(fp)
  21302c:	e17ffc15 	stw	r5,-16(fp)
  213030:	e1bffd15 	stw	r6,-12(fp)
  213034:	3807883a 	mov	r3,r7
  213038:	e0800217 	ldw	r2,8(fp)
  21303c:	e0fffe05 	stb	r3,-8(fp)
  213040:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  213044:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  213048:	e0bffb17 	ldw	r2,-20(fp)
  21304c:	10800717 	ldw	r2,28(r2)
  213050:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
  213054:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
  213058:	e0bffd17 	ldw	r2,-12(fp)
  21305c:	1000021e 	bne	r2,zero,213068 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  213060:	0005883a 	mov	r2,zero
  213064:	00006306 	br	2131f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  213068:	e0bffb17 	ldw	r2,-20(fp)
  21306c:	10c00617 	ldw	r3,24(r2)
  213070:	00800874 	movhi	r2,33
  213074:	10864f04 	addi	r2,r2,6460
  213078:	18800226 	beq	r3,r2,213084 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  21307c:	00bfff44 	movi	r2,-3
  213080:	00005c06 	br	2131f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  213084:	e0bffe03 	ldbu	r2,-8(fp)
  213088:	10000a1e 	bne	r2,zero,2130b4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  21308c:	e13ffb17 	ldw	r4,-20(fp)
  213090:	0211cb80 	call	211cb8 <alt_avalon_i2c_enable>
  213094:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  213098:	e0bff717 	ldw	r2,-36(fp)
  21309c:	10000226 	beq	r2,zero,2130a8 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
  2130a0:	e0bff717 	ldw	r2,-36(fp)
  2130a4:	00005306 	br	2131f4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2130a8:	01400704 	movi	r5,28
  2130ac:	e13ffb17 	ldw	r4,-20(fp)
  2130b0:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  2130b4:	e0bffe03 	ldbu	r2,-8(fp)
  2130b8:	100d883a 	mov	r6,r2
  2130bc:	01400044 	movi	r5,1
  2130c0:	e13ffb17 	ldw	r4,-20(fp)
  2130c4:	02123200 	call	212320 <alt_avalon_i2c_send_address>
  2130c8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  2130cc:	e0bff717 	ldw	r2,-36(fp)
  2130d0:	1000191e 	bne	r2,zero,213138 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2130d4:	00000906 	br	2130fc <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  2130d8:	000f883a 	mov	r7,zero
  2130dc:	000d883a 	mov	r6,zero
  2130e0:	000b883a 	mov	r5,zero
  2130e4:	e13ffb17 	ldw	r4,-20(fp)
  2130e8:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  2130ec:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
  2130f0:	e0bff917 	ldw	r2,-28(fp)
  2130f4:	10800044 	addi	r2,r2,1
  2130f8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2130fc:	e0bffd17 	ldw	r2,-12(fp)
  213100:	10bfffc4 	addi	r2,r2,-1
  213104:	e0fff917 	ldw	r3,-28(fp)
  213108:	1880022e 	bgeu	r3,r2,213114 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
  21310c:	e0bff717 	ldw	r2,-36(fp)
  213110:	103ff126 	beq	r2,zero,2130d8 <_gp+0xffe014c4>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  213114:	e0bff717 	ldw	r2,-36(fp)
  213118:	1000071e 	bne	r2,zero,213138 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  21311c:	e0bfff03 	ldbu	r2,-4(fp)
  213120:	100f883a 	mov	r7,r2
  213124:	000d883a 	mov	r6,zero
  213128:	000b883a 	mov	r5,zero
  21312c:	e13ffb17 	ldw	r4,-20(fp)
  213130:	021223c0 	call	21223c <alt_avalon_i2c_cmd_write>
  213134:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  213138:	e0bff717 	ldw	r2,-36(fp)
  21313c:	10001826 	beq	r2,zero,2131a0 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
  213140:	0149c404 	movi	r5,10000
  213144:	e13ffd17 	ldw	r4,-12(fp)
  213148:	02032a40 	call	2032a4 <__mulsi3>
  21314c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  213150:	00000d06 	br	213188 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
  213154:	e0bff817 	ldw	r2,-32(fp)
  213158:	108002a8 	cmpgeui	r2,r2,10
  21315c:	1000021e 	bne	r2,zero,213168 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
  213160:	0109c404 	movi	r4,10000
  213164:	02153180 	call	215318 <alt_busy_sleep>
            if (--timeout == 0)
  213168:	e0bff817 	ldw	r2,-32(fp)
  21316c:	10bfffc4 	addi	r2,r2,-1
  213170:	e0bff815 	stw	r2,-32(fp)
  213174:	e0bff817 	ldw	r2,-32(fp)
  213178:	1000031e 	bne	r2,zero,213188 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  21317c:	00bfff84 	movi	r2,-2
  213180:	e0bff715 	stw	r2,-36(fp)
               break;
  213184:	00000306 	br	213194 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  213188:	e13ffb17 	ldw	r4,-20(fp)
  21318c:	02120a80 	call	2120a8 <alt_avalon_i2c_is_busy>
  213190:	103ff01e 	bne	r2,zero,213154 <_gp+0xffe01540>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  213194:	e13ffb17 	ldw	r4,-20(fp)
  213198:	0211d500 	call	211d50 <alt_avalon_i2c_disable>
  21319c:	00001406 	br	2131f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
  2131a0:	e0bfff03 	ldbu	r2,-4(fp)
  2131a4:	10001226 	beq	r2,zero,2131f0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2131a8:	01400704 	movi	r5,28
  2131ac:	e13ffb17 	ldw	r4,-20(fp)
  2131b0:	02132a40 	call	2132a4 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
  2131b4:	000b883a 	mov	r5,zero
  2131b8:	e13ffb17 	ldw	r4,-20(fp)
  2131bc:	021343c0 	call	21343c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
  2131c0:	e0bffa17 	ldw	r2,-24(fp)
  2131c4:	00c00084 	movi	r3,2
  2131c8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
  2131cc:	e0bffa17 	ldw	r2,-24(fp)
  2131d0:	e0fffc17 	ldw	r3,-16(fp)
  2131d4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
  2131d8:	e0bffa17 	ldw	r2,-24(fp)
  2131dc:	e0fffd17 	ldw	r3,-12(fp)
  2131e0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  2131e4:	01400084 	movi	r5,2
  2131e8:	e13ffb17 	ldw	r4,-20(fp)
  2131ec:	02133480 	call	213348 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
  2131f0:	e0bff717 	ldw	r2,-36(fp)
}
  2131f4:	e037883a 	mov	sp,fp
  2131f8:	dfc00117 	ldw	ra,4(sp)
  2131fc:	df000017 	ldw	fp,0(sp)
  213200:	dec00204 	addi	sp,sp,8
  213204:	f800283a 	ret

00213208 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
  213208:	defffd04 	addi	sp,sp,-12
  21320c:	df000215 	stw	fp,8(sp)
  213210:	df000204 	addi	fp,sp,8
  213214:	e13ffe15 	stw	r4,-8(fp)
  213218:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
  21321c:	e0bffe17 	ldw	r2,-8(fp)
  213220:	10800317 	ldw	r2,12(r2)
  213224:	10800404 	addi	r2,r2,16
  213228:	10c00037 	ldwio	r3,0(r2)
  21322c:	e0bffe17 	ldw	r2,-8(fp)
  213230:	10800317 	ldw	r2,12(r2)
  213234:	10800304 	addi	r2,r2,12
  213238:	10800037 	ldwio	r2,0(r2)
  21323c:	1884703a 	and	r2,r3,r2
  213240:	1007883a 	mov	r3,r2
  213244:	e0bfff17 	ldw	r2,-4(fp)
  213248:	10c00015 	stw	r3,0(r2)
}
  21324c:	0001883a 	nop
  213250:	e037883a 	mov	sp,fp
  213254:	df000017 	ldw	fp,0(sp)
  213258:	dec00104 	addi	sp,sp,4
  21325c:	f800283a 	ret

00213260 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
  213260:	defffd04 	addi	sp,sp,-12
  213264:	df000215 	stw	fp,8(sp)
  213268:	df000204 	addi	fp,sp,8
  21326c:	e13ffe15 	stw	r4,-8(fp)
  213270:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
  213274:	e0bffe17 	ldw	r2,-8(fp)
  213278:	10800317 	ldw	r2,12(r2)
  21327c:	10800404 	addi	r2,r2,16
  213280:	10800037 	ldwio	r2,0(r2)
  213284:	1007883a 	mov	r3,r2
  213288:	e0bfff17 	ldw	r2,-4(fp)
  21328c:	10c00015 	stw	r3,0(r2)
}
  213290:	0001883a 	nop
  213294:	e037883a 	mov	sp,fp
  213298:	df000017 	ldw	fp,0(sp)
  21329c:	dec00104 	addi	sp,sp,4
  2132a0:	f800283a 	ret

002132a4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  2132a4:	defffd04 	addi	sp,sp,-12
  2132a8:	df000215 	stw	fp,8(sp)
  2132ac:	df000204 	addi	fp,sp,8
  2132b0:	e13ffe15 	stw	r4,-8(fp)
  2132b4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
  2132b8:	e0bffe17 	ldw	r2,-8(fp)
  2132bc:	10800317 	ldw	r2,12(r2)
  2132c0:	10800404 	addi	r2,r2,16
  2132c4:	e0ffff17 	ldw	r3,-4(fp)
  2132c8:	10c00035 	stwio	r3,0(r2)
}
  2132cc:	0001883a 	nop
  2132d0:	e037883a 	mov	sp,fp
  2132d4:	df000017 	ldw	fp,0(sp)
  2132d8:	dec00104 	addi	sp,sp,4
  2132dc:	f800283a 	ret

002132e0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  2132e0:	defffb04 	addi	sp,sp,-20
  2132e4:	dfc00415 	stw	ra,16(sp)
  2132e8:	df000315 	stw	fp,12(sp)
  2132ec:	df000304 	addi	fp,sp,12
  2132f0:	e13ffe15 	stw	r4,-8(fp)
  2132f4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  2132f8:	e17ffd04 	addi	r5,fp,-12
  2132fc:	e13ffe17 	ldw	r4,-8(fp)
  213300:	02133ac0 	call	2133ac <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
  213304:	e0bfff17 	ldw	r2,-4(fp)
  213308:	0086303a 	nor	r3,zero,r2
  21330c:	e0bffd17 	ldw	r2,-12(fp)
  213310:	1884703a 	and	r2,r3,r2
  213314:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  213318:	e0bffe17 	ldw	r2,-8(fp)
  21331c:	10800317 	ldw	r2,12(r2)
  213320:	10800304 	addi	r2,r2,12
  213324:	e0fffd17 	ldw	r3,-12(fp)
  213328:	18c007cc 	andi	r3,r3,31
  21332c:	10c00035 	stwio	r3,0(r2)
}
  213330:	0001883a 	nop
  213334:	e037883a 	mov	sp,fp
  213338:	dfc00117 	ldw	ra,4(sp)
  21333c:	df000017 	ldw	fp,0(sp)
  213340:	dec00204 	addi	sp,sp,8
  213344:	f800283a 	ret

00213348 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  213348:	defffb04 	addi	sp,sp,-20
  21334c:	dfc00415 	stw	ra,16(sp)
  213350:	df000315 	stw	fp,12(sp)
  213354:	df000304 	addi	fp,sp,12
  213358:	e13ffe15 	stw	r4,-8(fp)
  21335c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  213360:	e17ffd04 	addi	r5,fp,-12
  213364:	e13ffe17 	ldw	r4,-8(fp)
  213368:	02133ac0 	call	2133ac <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
  21336c:	e0fffd17 	ldw	r3,-12(fp)
  213370:	e0bfff17 	ldw	r2,-4(fp)
  213374:	1884b03a 	or	r2,r3,r2
  213378:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  21337c:	e0bffe17 	ldw	r2,-8(fp)
  213380:	10800317 	ldw	r2,12(r2)
  213384:	10800304 	addi	r2,r2,12
  213388:	e0fffd17 	ldw	r3,-12(fp)
  21338c:	18c007cc 	andi	r3,r3,31
  213390:	10c00035 	stwio	r3,0(r2)
}
  213394:	0001883a 	nop
  213398:	e037883a 	mov	sp,fp
  21339c:	dfc00117 	ldw	ra,4(sp)
  2133a0:	df000017 	ldw	fp,0(sp)
  2133a4:	dec00204 	addi	sp,sp,8
  2133a8:	f800283a 	ret

002133ac <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
  2133ac:	defffd04 	addi	sp,sp,-12
  2133b0:	df000215 	stw	fp,8(sp)
  2133b4:	df000204 	addi	fp,sp,8
  2133b8:	e13ffe15 	stw	r4,-8(fp)
  2133bc:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
  2133c0:	e0bffe17 	ldw	r2,-8(fp)
  2133c4:	10800317 	ldw	r2,12(r2)
  2133c8:	10800304 	addi	r2,r2,12
  2133cc:	10800037 	ldwio	r2,0(r2)
  2133d0:	10c007cc 	andi	r3,r2,31
  2133d4:	e0bfff17 	ldw	r2,-4(fp)
  2133d8:	10c00015 	stw	r3,0(r2)
}
  2133dc:	0001883a 	nop
  2133e0:	e037883a 	mov	sp,fp
  2133e4:	df000017 	ldw	fp,0(sp)
  2133e8:	dec00104 	addi	sp,sp,4
  2133ec:	f800283a 	ret

002133f0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
  2133f0:	defffd04 	addi	sp,sp,-12
  2133f4:	df000215 	stw	fp,8(sp)
  2133f8:	df000204 	addi	fp,sp,8
  2133fc:	e13ffe15 	stw	r4,-8(fp)
  213400:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
  213404:	e0bffe17 	ldw	r2,-8(fp)
  213408:	10800317 	ldw	r2,12(r2)
  21340c:	10800204 	addi	r2,r2,8
  213410:	10800037 	ldwio	r2,0(r2)
  213414:	10800c0c 	andi	r2,r2,48
  213418:	1005d13a 	srai	r2,r2,4
  21341c:	1007883a 	mov	r3,r2
  213420:	e0bfff17 	ldw	r2,-4(fp)
  213424:	10c00015 	stw	r3,0(r2)
}
  213428:	0001883a 	nop
  21342c:	e037883a 	mov	sp,fp
  213430:	df000017 	ldw	fp,0(sp)
  213434:	dec00104 	addi	sp,sp,4
  213438:	f800283a 	ret

0021343c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
  21343c:	defffd04 	addi	sp,sp,-12
  213440:	df000215 	stw	fp,8(sp)
  213444:	df000204 	addi	fp,sp,8
  213448:	e13ffe15 	stw	r4,-8(fp)
  21344c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
  213450:	e0bffe17 	ldw	r2,-8(fp)
  213454:	10800317 	ldw	r2,12(r2)
  213458:	10800204 	addi	r2,r2,8
  21345c:	e0fffe17 	ldw	r3,-8(fp)
  213460:	18c00317 	ldw	r3,12(r3)
  213464:	18c00204 	addi	r3,r3,8
  213468:	18c00037 	ldwio	r3,0(r3)
  21346c:	1809883a 	mov	r4,r3
  213470:	00fff3c4 	movi	r3,-49
  213474:	20c8703a 	and	r4,r4,r3
  213478:	e0ffff17 	ldw	r3,-4(fp)
  21347c:	1806913a 	slli	r3,r3,4
  213480:	18c00c0c 	andi	r3,r3,48
  213484:	20c6b03a 	or	r3,r4,r3
  213488:	10c00035 	stwio	r3,0(r2)
}
  21348c:	0001883a 	nop
  213490:	e037883a 	mov	sp,fp
  213494:	df000017 	ldw	fp,0(sp)
  213498:	dec00104 	addi	sp,sp,4
  21349c:	f800283a 	ret

002134a0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
  2134a0:	defffd04 	addi	sp,sp,-12
  2134a4:	df000215 	stw	fp,8(sp)
  2134a8:	df000204 	addi	fp,sp,8
  2134ac:	e13ffe15 	stw	r4,-8(fp)
  2134b0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
  2134b4:	e0bffe17 	ldw	r2,-8(fp)
  2134b8:	10800317 	ldw	r2,12(r2)
  2134bc:	10800204 	addi	r2,r2,8
  2134c0:	10800037 	ldwio	r2,0(r2)
  2134c4:	1080030c 	andi	r2,r2,12
  2134c8:	1005d0ba 	srai	r2,r2,2
  2134cc:	1007883a 	mov	r3,r2
  2134d0:	e0bfff17 	ldw	r2,-4(fp)
  2134d4:	10c00015 	stw	r3,0(r2)
}
  2134d8:	0001883a 	nop
  2134dc:	e037883a 	mov	sp,fp
  2134e0:	df000017 	ldw	fp,0(sp)
  2134e4:	dec00104 	addi	sp,sp,4
  2134e8:	f800283a 	ret

002134ec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  2134ec:	defffd04 	addi	sp,sp,-12
  2134f0:	df000215 	stw	fp,8(sp)
  2134f4:	df000204 	addi	fp,sp,8
  2134f8:	e13ffe15 	stw	r4,-8(fp)
  2134fc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
  213500:	e0bffe17 	ldw	r2,-8(fp)
  213504:	10800317 	ldw	r2,12(r2)
  213508:	10c00204 	addi	r3,r2,8
  21350c:	e0bffe17 	ldw	r2,-8(fp)
  213510:	10800317 	ldw	r2,12(r2)
  213514:	10800204 	addi	r2,r2,8
  213518:	10800037 	ldwio	r2,0(r2)
  21351c:	1009883a 	mov	r4,r2
  213520:	00bffcc4 	movi	r2,-13
  213524:	2088703a 	and	r4,r4,r2
  213528:	e0bfff17 	ldw	r2,-4(fp)
  21352c:	1085883a 	add	r2,r2,r2
  213530:	1085883a 	add	r2,r2,r2
  213534:	1080030c 	andi	r2,r2,12
  213538:	2084b03a 	or	r2,r4,r2
  21353c:	18800035 	stwio	r2,0(r3)
}
  213540:	0001883a 	nop
  213544:	e037883a 	mov	sp,fp
  213548:	df000017 	ldw	fp,0(sp)
  21354c:	dec00104 	addi	sp,sp,4
  213550:	f800283a 	ret

00213554 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  213554:	defffa04 	addi	sp,sp,-24
  213558:	dfc00515 	stw	ra,20(sp)
  21355c:	df000415 	stw	fp,16(sp)
  213560:	df000404 	addi	fp,sp,16
  213564:	e13ffd15 	stw	r4,-12(fp)
  213568:	e17ffe15 	stw	r5,-8(fp)
  21356c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  213570:	e0bffd17 	ldw	r2,-12(fp)
  213574:	10800017 	ldw	r2,0(r2)
  213578:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  21357c:	e0bffc17 	ldw	r2,-16(fp)
  213580:	10c00a04 	addi	r3,r2,40
  213584:	e0bffd17 	ldw	r2,-12(fp)
  213588:	10800217 	ldw	r2,8(r2)
  21358c:	100f883a 	mov	r7,r2
  213590:	e1bfff17 	ldw	r6,-4(fp)
  213594:	e17ffe17 	ldw	r5,-8(fp)
  213598:	1809883a 	mov	r4,r3
  21359c:	0213b7c0 	call	213b7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  2135a0:	e037883a 	mov	sp,fp
  2135a4:	dfc00117 	ldw	ra,4(sp)
  2135a8:	df000017 	ldw	fp,0(sp)
  2135ac:	dec00204 	addi	sp,sp,8
  2135b0:	f800283a 	ret

002135b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  2135b4:	defffa04 	addi	sp,sp,-24
  2135b8:	dfc00515 	stw	ra,20(sp)
  2135bc:	df000415 	stw	fp,16(sp)
  2135c0:	df000404 	addi	fp,sp,16
  2135c4:	e13ffd15 	stw	r4,-12(fp)
  2135c8:	e17ffe15 	stw	r5,-8(fp)
  2135cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  2135d0:	e0bffd17 	ldw	r2,-12(fp)
  2135d4:	10800017 	ldw	r2,0(r2)
  2135d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  2135dc:	e0bffc17 	ldw	r2,-16(fp)
  2135e0:	10c00a04 	addi	r3,r2,40
  2135e4:	e0bffd17 	ldw	r2,-12(fp)
  2135e8:	10800217 	ldw	r2,8(r2)
  2135ec:	100f883a 	mov	r7,r2
  2135f0:	e1bfff17 	ldw	r6,-4(fp)
  2135f4:	e17ffe17 	ldw	r5,-8(fp)
  2135f8:	1809883a 	mov	r4,r3
  2135fc:	0213d980 	call	213d98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  213600:	e037883a 	mov	sp,fp
  213604:	dfc00117 	ldw	ra,4(sp)
  213608:	df000017 	ldw	fp,0(sp)
  21360c:	dec00204 	addi	sp,sp,8
  213610:	f800283a 	ret

00213614 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  213614:	defffc04 	addi	sp,sp,-16
  213618:	dfc00315 	stw	ra,12(sp)
  21361c:	df000215 	stw	fp,8(sp)
  213620:	df000204 	addi	fp,sp,8
  213624:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  213628:	e0bfff17 	ldw	r2,-4(fp)
  21362c:	10800017 	ldw	r2,0(r2)
  213630:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  213634:	e0bffe17 	ldw	r2,-8(fp)
  213638:	10c00a04 	addi	r3,r2,40
  21363c:	e0bfff17 	ldw	r2,-4(fp)
  213640:	10800217 	ldw	r2,8(r2)
  213644:	100b883a 	mov	r5,r2
  213648:	1809883a 	mov	r4,r3
  21364c:	0213a240 	call	213a24 <altera_avalon_jtag_uart_close>
}
  213650:	e037883a 	mov	sp,fp
  213654:	dfc00117 	ldw	ra,4(sp)
  213658:	df000017 	ldw	fp,0(sp)
  21365c:	dec00204 	addi	sp,sp,8
  213660:	f800283a 	ret

00213664 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  213664:	defffa04 	addi	sp,sp,-24
  213668:	dfc00515 	stw	ra,20(sp)
  21366c:	df000415 	stw	fp,16(sp)
  213670:	df000404 	addi	fp,sp,16
  213674:	e13ffd15 	stw	r4,-12(fp)
  213678:	e17ffe15 	stw	r5,-8(fp)
  21367c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  213680:	e0bffd17 	ldw	r2,-12(fp)
  213684:	10800017 	ldw	r2,0(r2)
  213688:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  21368c:	e0bffc17 	ldw	r2,-16(fp)
  213690:	10800a04 	addi	r2,r2,40
  213694:	e1bfff17 	ldw	r6,-4(fp)
  213698:	e17ffe17 	ldw	r5,-8(fp)
  21369c:	1009883a 	mov	r4,r2
  2136a0:	0213a8c0 	call	213a8c <altera_avalon_jtag_uart_ioctl>
}
  2136a4:	e037883a 	mov	sp,fp
  2136a8:	dfc00117 	ldw	ra,4(sp)
  2136ac:	df000017 	ldw	fp,0(sp)
  2136b0:	dec00204 	addi	sp,sp,8
  2136b4:	f800283a 	ret

002136b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  2136b8:	defffa04 	addi	sp,sp,-24
  2136bc:	dfc00515 	stw	ra,20(sp)
  2136c0:	df000415 	stw	fp,16(sp)
  2136c4:	df000404 	addi	fp,sp,16
  2136c8:	e13ffd15 	stw	r4,-12(fp)
  2136cc:	e17ffe15 	stw	r5,-8(fp)
  2136d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  2136d4:	e0bffd17 	ldw	r2,-12(fp)
  2136d8:	00c00044 	movi	r3,1
  2136dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  2136e0:	e0bffd17 	ldw	r2,-12(fp)
  2136e4:	10800017 	ldw	r2,0(r2)
  2136e8:	10800104 	addi	r2,r2,4
  2136ec:	1007883a 	mov	r3,r2
  2136f0:	e0bffd17 	ldw	r2,-12(fp)
  2136f4:	10800817 	ldw	r2,32(r2)
  2136f8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  2136fc:	e0bffe17 	ldw	r2,-8(fp)
  213700:	e0ffff17 	ldw	r3,-4(fp)
  213704:	d8000015 	stw	zero,0(sp)
  213708:	e1fffd17 	ldw	r7,-12(fp)
  21370c:	01800874 	movhi	r6,33
  213710:	318dde04 	addi	r6,r6,14200
  213714:	180b883a 	mov	r5,r3
  213718:	1009883a 	mov	r4,r2
  21371c:	02157c40 	call	2157c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  213720:	e0bffd17 	ldw	r2,-12(fp)
  213724:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  213728:	e0bffd17 	ldw	r2,-12(fp)
  21372c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  213730:	d0e02a17 	ldw	r3,-32600(gp)
  213734:	e1fffd17 	ldw	r7,-12(fp)
  213738:	01800874 	movhi	r6,33
  21373c:	318e6104 	addi	r6,r6,14724
  213740:	180b883a 	mov	r5,r3
  213744:	1009883a 	mov	r4,r2
  213748:	02151ec0 	call	2151ec <alt_alarm_start>
  21374c:	1000040e 	bge	r2,zero,213760 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  213750:	e0fffd17 	ldw	r3,-12(fp)
  213754:	00a00034 	movhi	r2,32768
  213758:	10bfffc4 	addi	r2,r2,-1
  21375c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  213760:	0001883a 	nop
  213764:	e037883a 	mov	sp,fp
  213768:	dfc00117 	ldw	ra,4(sp)
  21376c:	df000017 	ldw	fp,0(sp)
  213770:	dec00204 	addi	sp,sp,8
  213774:	f800283a 	ret

00213778 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  213778:	defff804 	addi	sp,sp,-32
  21377c:	df000715 	stw	fp,28(sp)
  213780:	df000704 	addi	fp,sp,28
  213784:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  213788:	e0bfff17 	ldw	r2,-4(fp)
  21378c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  213790:	e0bffb17 	ldw	r2,-20(fp)
  213794:	10800017 	ldw	r2,0(r2)
  213798:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  21379c:	e0bffc17 	ldw	r2,-16(fp)
  2137a0:	10800104 	addi	r2,r2,4
  2137a4:	10800037 	ldwio	r2,0(r2)
  2137a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  2137ac:	e0bffd17 	ldw	r2,-12(fp)
  2137b0:	1080c00c 	andi	r2,r2,768
  2137b4:	10006d26 	beq	r2,zero,21396c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  2137b8:	e0bffd17 	ldw	r2,-12(fp)
  2137bc:	1080400c 	andi	r2,r2,256
  2137c0:	10003526 	beq	r2,zero,213898 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  2137c4:	00800074 	movhi	r2,1
  2137c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2137cc:	e0bffb17 	ldw	r2,-20(fp)
  2137d0:	10800a17 	ldw	r2,40(r2)
  2137d4:	10800044 	addi	r2,r2,1
  2137d8:	1081ffcc 	andi	r2,r2,2047
  2137dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  2137e0:	e0bffb17 	ldw	r2,-20(fp)
  2137e4:	10c00b17 	ldw	r3,44(r2)
  2137e8:	e0bffe17 	ldw	r2,-8(fp)
  2137ec:	18801526 	beq	r3,r2,213844 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  2137f0:	e0bffc17 	ldw	r2,-16(fp)
  2137f4:	10800037 	ldwio	r2,0(r2)
  2137f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  2137fc:	e0bff917 	ldw	r2,-28(fp)
  213800:	10a0000c 	andi	r2,r2,32768
  213804:	10001126 	beq	r2,zero,21384c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  213808:	e0bffb17 	ldw	r2,-20(fp)
  21380c:	10800a17 	ldw	r2,40(r2)
  213810:	e0fff917 	ldw	r3,-28(fp)
  213814:	1809883a 	mov	r4,r3
  213818:	e0fffb17 	ldw	r3,-20(fp)
  21381c:	1885883a 	add	r2,r3,r2
  213820:	10800e04 	addi	r2,r2,56
  213824:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  213828:	e0bffb17 	ldw	r2,-20(fp)
  21382c:	10800a17 	ldw	r2,40(r2)
  213830:	10800044 	addi	r2,r2,1
  213834:	10c1ffcc 	andi	r3,r2,2047
  213838:	e0bffb17 	ldw	r2,-20(fp)
  21383c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  213840:	003fe206 	br	2137cc <_gp+0xffe01bb8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  213844:	0001883a 	nop
  213848:	00000106 	br	213850 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  21384c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  213850:	e0bff917 	ldw	r2,-28(fp)
  213854:	10bfffec 	andhi	r2,r2,65535
  213858:	10000f26 	beq	r2,zero,213898 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  21385c:	e0bffb17 	ldw	r2,-20(fp)
  213860:	10c00817 	ldw	r3,32(r2)
  213864:	00bfff84 	movi	r2,-2
  213868:	1886703a 	and	r3,r3,r2
  21386c:	e0bffb17 	ldw	r2,-20(fp)
  213870:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  213874:	e0bffc17 	ldw	r2,-16(fp)
  213878:	10800104 	addi	r2,r2,4
  21387c:	1007883a 	mov	r3,r2
  213880:	e0bffb17 	ldw	r2,-20(fp)
  213884:	10800817 	ldw	r2,32(r2)
  213888:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  21388c:	e0bffc17 	ldw	r2,-16(fp)
  213890:	10800104 	addi	r2,r2,4
  213894:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  213898:	e0bffd17 	ldw	r2,-12(fp)
  21389c:	1080800c 	andi	r2,r2,512
  2138a0:	103fbe26 	beq	r2,zero,21379c <_gp+0xffe01b88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  2138a4:	e0bffd17 	ldw	r2,-12(fp)
  2138a8:	1004d43a 	srli	r2,r2,16
  2138ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  2138b0:	00001406 	br	213904 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  2138b4:	e0bffc17 	ldw	r2,-16(fp)
  2138b8:	e0fffb17 	ldw	r3,-20(fp)
  2138bc:	18c00d17 	ldw	r3,52(r3)
  2138c0:	e13ffb17 	ldw	r4,-20(fp)
  2138c4:	20c7883a 	add	r3,r4,r3
  2138c8:	18c20e04 	addi	r3,r3,2104
  2138cc:	18c00003 	ldbu	r3,0(r3)
  2138d0:	18c03fcc 	andi	r3,r3,255
  2138d4:	18c0201c 	xori	r3,r3,128
  2138d8:	18ffe004 	addi	r3,r3,-128
  2138dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2138e0:	e0bffb17 	ldw	r2,-20(fp)
  2138e4:	10800d17 	ldw	r2,52(r2)
  2138e8:	10800044 	addi	r2,r2,1
  2138ec:	10c1ffcc 	andi	r3,r2,2047
  2138f0:	e0bffb17 	ldw	r2,-20(fp)
  2138f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  2138f8:	e0bffa17 	ldw	r2,-24(fp)
  2138fc:	10bfffc4 	addi	r2,r2,-1
  213900:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  213904:	e0bffa17 	ldw	r2,-24(fp)
  213908:	10000526 	beq	r2,zero,213920 <altera_avalon_jtag_uart_irq+0x1a8>
  21390c:	e0bffb17 	ldw	r2,-20(fp)
  213910:	10c00d17 	ldw	r3,52(r2)
  213914:	e0bffb17 	ldw	r2,-20(fp)
  213918:	10800c17 	ldw	r2,48(r2)
  21391c:	18bfe51e 	bne	r3,r2,2138b4 <_gp+0xffe01ca0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  213920:	e0bffa17 	ldw	r2,-24(fp)
  213924:	103f9d26 	beq	r2,zero,21379c <_gp+0xffe01b88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  213928:	e0bffb17 	ldw	r2,-20(fp)
  21392c:	10c00817 	ldw	r3,32(r2)
  213930:	00bfff44 	movi	r2,-3
  213934:	1886703a 	and	r3,r3,r2
  213938:	e0bffb17 	ldw	r2,-20(fp)
  21393c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213940:	e0bffb17 	ldw	r2,-20(fp)
  213944:	10800017 	ldw	r2,0(r2)
  213948:	10800104 	addi	r2,r2,4
  21394c:	1007883a 	mov	r3,r2
  213950:	e0bffb17 	ldw	r2,-20(fp)
  213954:	10800817 	ldw	r2,32(r2)
  213958:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  21395c:	e0bffc17 	ldw	r2,-16(fp)
  213960:	10800104 	addi	r2,r2,4
  213964:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  213968:	003f8c06 	br	21379c <_gp+0xffe01b88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  21396c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  213970:	0001883a 	nop
  213974:	e037883a 	mov	sp,fp
  213978:	df000017 	ldw	fp,0(sp)
  21397c:	dec00104 	addi	sp,sp,4
  213980:	f800283a 	ret

00213984 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  213984:	defff804 	addi	sp,sp,-32
  213988:	df000715 	stw	fp,28(sp)
  21398c:	df000704 	addi	fp,sp,28
  213990:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  213994:	e0bffb17 	ldw	r2,-20(fp)
  213998:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  21399c:	e0bff917 	ldw	r2,-28(fp)
  2139a0:	10800017 	ldw	r2,0(r2)
  2139a4:	10800104 	addi	r2,r2,4
  2139a8:	10800037 	ldwio	r2,0(r2)
  2139ac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  2139b0:	e0bffa17 	ldw	r2,-24(fp)
  2139b4:	1081000c 	andi	r2,r2,1024
  2139b8:	10000b26 	beq	r2,zero,2139e8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  2139bc:	e0bff917 	ldw	r2,-28(fp)
  2139c0:	10800017 	ldw	r2,0(r2)
  2139c4:	10800104 	addi	r2,r2,4
  2139c8:	1007883a 	mov	r3,r2
  2139cc:	e0bff917 	ldw	r2,-28(fp)
  2139d0:	10800817 	ldw	r2,32(r2)
  2139d4:	10810014 	ori	r2,r2,1024
  2139d8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  2139dc:	e0bff917 	ldw	r2,-28(fp)
  2139e0:	10000915 	stw	zero,36(r2)
  2139e4:	00000a06 	br	213a10 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  2139e8:	e0bff917 	ldw	r2,-28(fp)
  2139ec:	10c00917 	ldw	r3,36(r2)
  2139f0:	00a00034 	movhi	r2,32768
  2139f4:	10bfff04 	addi	r2,r2,-4
  2139f8:	10c00536 	bltu	r2,r3,213a10 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  2139fc:	e0bff917 	ldw	r2,-28(fp)
  213a00:	10800917 	ldw	r2,36(r2)
  213a04:	10c00044 	addi	r3,r2,1
  213a08:	e0bff917 	ldw	r2,-28(fp)
  213a0c:	10c00915 	stw	r3,36(r2)
  213a10:	d0a02a17 	ldw	r2,-32600(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  213a14:	e037883a 	mov	sp,fp
  213a18:	df000017 	ldw	fp,0(sp)
  213a1c:	dec00104 	addi	sp,sp,4
  213a20:	f800283a 	ret

00213a24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  213a24:	defffd04 	addi	sp,sp,-12
  213a28:	df000215 	stw	fp,8(sp)
  213a2c:	df000204 	addi	fp,sp,8
  213a30:	e13ffe15 	stw	r4,-8(fp)
  213a34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  213a38:	00000506 	br	213a50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  213a3c:	e0bfff17 	ldw	r2,-4(fp)
  213a40:	1090000c 	andi	r2,r2,16384
  213a44:	10000226 	beq	r2,zero,213a50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  213a48:	00bffd44 	movi	r2,-11
  213a4c:	00000b06 	br	213a7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  213a50:	e0bffe17 	ldw	r2,-8(fp)
  213a54:	10c00d17 	ldw	r3,52(r2)
  213a58:	e0bffe17 	ldw	r2,-8(fp)
  213a5c:	10800c17 	ldw	r2,48(r2)
  213a60:	18800526 	beq	r3,r2,213a78 <altera_avalon_jtag_uart_close+0x54>
  213a64:	e0bffe17 	ldw	r2,-8(fp)
  213a68:	10c00917 	ldw	r3,36(r2)
  213a6c:	e0bffe17 	ldw	r2,-8(fp)
  213a70:	10800117 	ldw	r2,4(r2)
  213a74:	18bff136 	bltu	r3,r2,213a3c <_gp+0xffe01e28>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  213a78:	0005883a 	mov	r2,zero
}
  213a7c:	e037883a 	mov	sp,fp
  213a80:	df000017 	ldw	fp,0(sp)
  213a84:	dec00104 	addi	sp,sp,4
  213a88:	f800283a 	ret

00213a8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  213a8c:	defffa04 	addi	sp,sp,-24
  213a90:	df000515 	stw	fp,20(sp)
  213a94:	df000504 	addi	fp,sp,20
  213a98:	e13ffd15 	stw	r4,-12(fp)
  213a9c:	e17ffe15 	stw	r5,-8(fp)
  213aa0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  213aa4:	00bff9c4 	movi	r2,-25
  213aa8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  213aac:	e0bffe17 	ldw	r2,-8(fp)
  213ab0:	10da8060 	cmpeqi	r3,r2,27137
  213ab4:	1800031e 	bne	r3,zero,213ac4 <altera_avalon_jtag_uart_ioctl+0x38>
  213ab8:	109a80a0 	cmpeqi	r2,r2,27138
  213abc:	1000181e 	bne	r2,zero,213b20 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  213ac0:	00002906 	br	213b68 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  213ac4:	e0bffd17 	ldw	r2,-12(fp)
  213ac8:	10c00117 	ldw	r3,4(r2)
  213acc:	00a00034 	movhi	r2,32768
  213ad0:	10bfffc4 	addi	r2,r2,-1
  213ad4:	18802126 	beq	r3,r2,213b5c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  213ad8:	e0bfff17 	ldw	r2,-4(fp)
  213adc:	10800017 	ldw	r2,0(r2)
  213ae0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  213ae4:	e0bffc17 	ldw	r2,-16(fp)
  213ae8:	10800090 	cmplti	r2,r2,2
  213aec:	1000061e 	bne	r2,zero,213b08 <altera_avalon_jtag_uart_ioctl+0x7c>
  213af0:	e0fffc17 	ldw	r3,-16(fp)
  213af4:	00a00034 	movhi	r2,32768
  213af8:	10bfffc4 	addi	r2,r2,-1
  213afc:	18800226 	beq	r3,r2,213b08 <altera_avalon_jtag_uart_ioctl+0x7c>
  213b00:	e0bffc17 	ldw	r2,-16(fp)
  213b04:	00000206 	br	213b10 <altera_avalon_jtag_uart_ioctl+0x84>
  213b08:	00a00034 	movhi	r2,32768
  213b0c:	10bfff84 	addi	r2,r2,-2
  213b10:	e0fffd17 	ldw	r3,-12(fp)
  213b14:	18800115 	stw	r2,4(r3)
      rc = 0;
  213b18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  213b1c:	00000f06 	br	213b5c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  213b20:	e0bffd17 	ldw	r2,-12(fp)
  213b24:	10c00117 	ldw	r3,4(r2)
  213b28:	00a00034 	movhi	r2,32768
  213b2c:	10bfffc4 	addi	r2,r2,-1
  213b30:	18800c26 	beq	r3,r2,213b64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  213b34:	e0bffd17 	ldw	r2,-12(fp)
  213b38:	10c00917 	ldw	r3,36(r2)
  213b3c:	e0bffd17 	ldw	r2,-12(fp)
  213b40:	10800117 	ldw	r2,4(r2)
  213b44:	1885803a 	cmpltu	r2,r3,r2
  213b48:	10c03fcc 	andi	r3,r2,255
  213b4c:	e0bfff17 	ldw	r2,-4(fp)
  213b50:	10c00015 	stw	r3,0(r2)
      rc = 0;
  213b54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  213b58:	00000206 	br	213b64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  213b5c:	0001883a 	nop
  213b60:	00000106 	br	213b68 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  213b64:	0001883a 	nop

  default:
    break;
  }

  return rc;
  213b68:	e0bffb17 	ldw	r2,-20(fp)
}
  213b6c:	e037883a 	mov	sp,fp
  213b70:	df000017 	ldw	fp,0(sp)
  213b74:	dec00104 	addi	sp,sp,4
  213b78:	f800283a 	ret

00213b7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  213b7c:	defff304 	addi	sp,sp,-52
  213b80:	dfc00c15 	stw	ra,48(sp)
  213b84:	df000b15 	stw	fp,44(sp)
  213b88:	df000b04 	addi	fp,sp,44
  213b8c:	e13ffc15 	stw	r4,-16(fp)
  213b90:	e17ffd15 	stw	r5,-12(fp)
  213b94:	e1bffe15 	stw	r6,-8(fp)
  213b98:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  213b9c:	e0bffd17 	ldw	r2,-12(fp)
  213ba0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  213ba4:	00004706 	br	213cc4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  213ba8:	e0bffc17 	ldw	r2,-16(fp)
  213bac:	10800a17 	ldw	r2,40(r2)
  213bb0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  213bb4:	e0bffc17 	ldw	r2,-16(fp)
  213bb8:	10800b17 	ldw	r2,44(r2)
  213bbc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  213bc0:	e0fff717 	ldw	r3,-36(fp)
  213bc4:	e0bff817 	ldw	r2,-32(fp)
  213bc8:	18800536 	bltu	r3,r2,213be0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  213bcc:	e0fff717 	ldw	r3,-36(fp)
  213bd0:	e0bff817 	ldw	r2,-32(fp)
  213bd4:	1885c83a 	sub	r2,r3,r2
  213bd8:	e0bff615 	stw	r2,-40(fp)
  213bdc:	00000406 	br	213bf0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  213be0:	00c20004 	movi	r3,2048
  213be4:	e0bff817 	ldw	r2,-32(fp)
  213be8:	1885c83a 	sub	r2,r3,r2
  213bec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  213bf0:	e0bff617 	ldw	r2,-40(fp)
  213bf4:	10001e26 	beq	r2,zero,213c70 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  213bf8:	e0fffe17 	ldw	r3,-8(fp)
  213bfc:	e0bff617 	ldw	r2,-40(fp)
  213c00:	1880022e 	bgeu	r3,r2,213c0c <altera_avalon_jtag_uart_read+0x90>
        n = space;
  213c04:	e0bffe17 	ldw	r2,-8(fp)
  213c08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  213c0c:	e0bffc17 	ldw	r2,-16(fp)
  213c10:	10c00e04 	addi	r3,r2,56
  213c14:	e0bff817 	ldw	r2,-32(fp)
  213c18:	1885883a 	add	r2,r3,r2
  213c1c:	e1bff617 	ldw	r6,-40(fp)
  213c20:	100b883a 	mov	r5,r2
  213c24:	e13ff517 	ldw	r4,-44(fp)
  213c28:	0209a740 	call	209a74 <memcpy>
      ptr   += n;
  213c2c:	e0fff517 	ldw	r3,-44(fp)
  213c30:	e0bff617 	ldw	r2,-40(fp)
  213c34:	1885883a 	add	r2,r3,r2
  213c38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  213c3c:	e0fffe17 	ldw	r3,-8(fp)
  213c40:	e0bff617 	ldw	r2,-40(fp)
  213c44:	1885c83a 	sub	r2,r3,r2
  213c48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  213c4c:	e0fff817 	ldw	r3,-32(fp)
  213c50:	e0bff617 	ldw	r2,-40(fp)
  213c54:	1885883a 	add	r2,r3,r2
  213c58:	10c1ffcc 	andi	r3,r2,2047
  213c5c:	e0bffc17 	ldw	r2,-16(fp)
  213c60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  213c64:	e0bffe17 	ldw	r2,-8(fp)
  213c68:	00bfcf16 	blt	zero,r2,213ba8 <_gp+0xffe01f94>
  213c6c:	00000106 	br	213c74 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  213c70:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  213c74:	e0fff517 	ldw	r3,-44(fp)
  213c78:	e0bffd17 	ldw	r2,-12(fp)
  213c7c:	1880141e 	bne	r3,r2,213cd0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  213c80:	e0bfff17 	ldw	r2,-4(fp)
  213c84:	1090000c 	andi	r2,r2,16384
  213c88:	1000131e 	bne	r2,zero,213cd8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  213c8c:	0001883a 	nop
  213c90:	e0bffc17 	ldw	r2,-16(fp)
  213c94:	10c00a17 	ldw	r3,40(r2)
  213c98:	e0bff717 	ldw	r2,-36(fp)
  213c9c:	1880051e 	bne	r3,r2,213cb4 <altera_avalon_jtag_uart_read+0x138>
  213ca0:	e0bffc17 	ldw	r2,-16(fp)
  213ca4:	10c00917 	ldw	r3,36(r2)
  213ca8:	e0bffc17 	ldw	r2,-16(fp)
  213cac:	10800117 	ldw	r2,4(r2)
  213cb0:	18bff736 	bltu	r3,r2,213c90 <_gp+0xffe0207c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  213cb4:	e0bffc17 	ldw	r2,-16(fp)
  213cb8:	10c00a17 	ldw	r3,40(r2)
  213cbc:	e0bff717 	ldw	r2,-36(fp)
  213cc0:	18800726 	beq	r3,r2,213ce0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  213cc4:	e0bffe17 	ldw	r2,-8(fp)
  213cc8:	00bfb716 	blt	zero,r2,213ba8 <_gp+0xffe01f94>
  213ccc:	00000506 	br	213ce4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  213cd0:	0001883a 	nop
  213cd4:	00000306 	br	213ce4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  213cd8:	0001883a 	nop
  213cdc:	00000106 	br	213ce4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  213ce0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  213ce4:	e0fff517 	ldw	r3,-44(fp)
  213ce8:	e0bffd17 	ldw	r2,-12(fp)
  213cec:	18801826 	beq	r3,r2,213d50 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  213cf0:	0005303a 	rdctl	r2,status
  213cf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213cf8:	e0fffb17 	ldw	r3,-20(fp)
  213cfc:	00bfff84 	movi	r2,-2
  213d00:	1884703a 	and	r2,r3,r2
  213d04:	1001703a 	wrctl	status,r2
  
  return context;
  213d08:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  213d0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  213d10:	e0bffc17 	ldw	r2,-16(fp)
  213d14:	10800817 	ldw	r2,32(r2)
  213d18:	10c00054 	ori	r3,r2,1
  213d1c:	e0bffc17 	ldw	r2,-16(fp)
  213d20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213d24:	e0bffc17 	ldw	r2,-16(fp)
  213d28:	10800017 	ldw	r2,0(r2)
  213d2c:	10800104 	addi	r2,r2,4
  213d30:	1007883a 	mov	r3,r2
  213d34:	e0bffc17 	ldw	r2,-16(fp)
  213d38:	10800817 	ldw	r2,32(r2)
  213d3c:	18800035 	stwio	r2,0(r3)
  213d40:	e0bffa17 	ldw	r2,-24(fp)
  213d44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  213d48:	e0bff917 	ldw	r2,-28(fp)
  213d4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  213d50:	e0fff517 	ldw	r3,-44(fp)
  213d54:	e0bffd17 	ldw	r2,-12(fp)
  213d58:	18800426 	beq	r3,r2,213d6c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  213d5c:	e0fff517 	ldw	r3,-44(fp)
  213d60:	e0bffd17 	ldw	r2,-12(fp)
  213d64:	1885c83a 	sub	r2,r3,r2
  213d68:	00000606 	br	213d84 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  213d6c:	e0bfff17 	ldw	r2,-4(fp)
  213d70:	1090000c 	andi	r2,r2,16384
  213d74:	10000226 	beq	r2,zero,213d80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  213d78:	00bffd44 	movi	r2,-11
  213d7c:	00000106 	br	213d84 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  213d80:	00bffec4 	movi	r2,-5
}
  213d84:	e037883a 	mov	sp,fp
  213d88:	dfc00117 	ldw	ra,4(sp)
  213d8c:	df000017 	ldw	fp,0(sp)
  213d90:	dec00204 	addi	sp,sp,8
  213d94:	f800283a 	ret

00213d98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  213d98:	defff304 	addi	sp,sp,-52
  213d9c:	dfc00c15 	stw	ra,48(sp)
  213da0:	df000b15 	stw	fp,44(sp)
  213da4:	df000b04 	addi	fp,sp,44
  213da8:	e13ffc15 	stw	r4,-16(fp)
  213dac:	e17ffd15 	stw	r5,-12(fp)
  213db0:	e1bffe15 	stw	r6,-8(fp)
  213db4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  213db8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  213dbc:	e0bffd17 	ldw	r2,-12(fp)
  213dc0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  213dc4:	00003706 	br	213ea4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  213dc8:	e0bffc17 	ldw	r2,-16(fp)
  213dcc:	10800c17 	ldw	r2,48(r2)
  213dd0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  213dd4:	e0bffc17 	ldw	r2,-16(fp)
  213dd8:	10800d17 	ldw	r2,52(r2)
  213ddc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  213de0:	e0fff917 	ldw	r3,-28(fp)
  213de4:	e0bff517 	ldw	r2,-44(fp)
  213de8:	1880062e 	bgeu	r3,r2,213e04 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  213dec:	e0fff517 	ldw	r3,-44(fp)
  213df0:	e0bff917 	ldw	r2,-28(fp)
  213df4:	1885c83a 	sub	r2,r3,r2
  213df8:	10bfffc4 	addi	r2,r2,-1
  213dfc:	e0bff615 	stw	r2,-40(fp)
  213e00:	00000b06 	br	213e30 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  213e04:	e0bff517 	ldw	r2,-44(fp)
  213e08:	10000526 	beq	r2,zero,213e20 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  213e0c:	00c20004 	movi	r3,2048
  213e10:	e0bff917 	ldw	r2,-28(fp)
  213e14:	1885c83a 	sub	r2,r3,r2
  213e18:	e0bff615 	stw	r2,-40(fp)
  213e1c:	00000406 	br	213e30 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  213e20:	00c1ffc4 	movi	r3,2047
  213e24:	e0bff917 	ldw	r2,-28(fp)
  213e28:	1885c83a 	sub	r2,r3,r2
  213e2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  213e30:	e0bff617 	ldw	r2,-40(fp)
  213e34:	10001e26 	beq	r2,zero,213eb0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  213e38:	e0fffe17 	ldw	r3,-8(fp)
  213e3c:	e0bff617 	ldw	r2,-40(fp)
  213e40:	1880022e 	bgeu	r3,r2,213e4c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  213e44:	e0bffe17 	ldw	r2,-8(fp)
  213e48:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  213e4c:	e0bffc17 	ldw	r2,-16(fp)
  213e50:	10c20e04 	addi	r3,r2,2104
  213e54:	e0bff917 	ldw	r2,-28(fp)
  213e58:	1885883a 	add	r2,r3,r2
  213e5c:	e1bff617 	ldw	r6,-40(fp)
  213e60:	e17ffd17 	ldw	r5,-12(fp)
  213e64:	1009883a 	mov	r4,r2
  213e68:	0209a740 	call	209a74 <memcpy>
      ptr   += n;
  213e6c:	e0fffd17 	ldw	r3,-12(fp)
  213e70:	e0bff617 	ldw	r2,-40(fp)
  213e74:	1885883a 	add	r2,r3,r2
  213e78:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  213e7c:	e0fffe17 	ldw	r3,-8(fp)
  213e80:	e0bff617 	ldw	r2,-40(fp)
  213e84:	1885c83a 	sub	r2,r3,r2
  213e88:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  213e8c:	e0fff917 	ldw	r3,-28(fp)
  213e90:	e0bff617 	ldw	r2,-40(fp)
  213e94:	1885883a 	add	r2,r3,r2
  213e98:	10c1ffcc 	andi	r3,r2,2047
  213e9c:	e0bffc17 	ldw	r2,-16(fp)
  213ea0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  213ea4:	e0bffe17 	ldw	r2,-8(fp)
  213ea8:	00bfc716 	blt	zero,r2,213dc8 <_gp+0xffe021b4>
  213eac:	00000106 	br	213eb4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  213eb0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  213eb4:	0005303a 	rdctl	r2,status
  213eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213ebc:	e0fffb17 	ldw	r3,-20(fp)
  213ec0:	00bfff84 	movi	r2,-2
  213ec4:	1884703a 	and	r2,r3,r2
  213ec8:	1001703a 	wrctl	status,r2
  
  return context;
  213ecc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  213ed0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  213ed4:	e0bffc17 	ldw	r2,-16(fp)
  213ed8:	10800817 	ldw	r2,32(r2)
  213edc:	10c00094 	ori	r3,r2,2
  213ee0:	e0bffc17 	ldw	r2,-16(fp)
  213ee4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213ee8:	e0bffc17 	ldw	r2,-16(fp)
  213eec:	10800017 	ldw	r2,0(r2)
  213ef0:	10800104 	addi	r2,r2,4
  213ef4:	1007883a 	mov	r3,r2
  213ef8:	e0bffc17 	ldw	r2,-16(fp)
  213efc:	10800817 	ldw	r2,32(r2)
  213f00:	18800035 	stwio	r2,0(r3)
  213f04:	e0bffa17 	ldw	r2,-24(fp)
  213f08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  213f0c:	e0bff817 	ldw	r2,-32(fp)
  213f10:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  213f14:	e0bffe17 	ldw	r2,-8(fp)
  213f18:	0080100e 	bge	zero,r2,213f5c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  213f1c:	e0bfff17 	ldw	r2,-4(fp)
  213f20:	1090000c 	andi	r2,r2,16384
  213f24:	1000101e 	bne	r2,zero,213f68 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  213f28:	0001883a 	nop
  213f2c:	e0bffc17 	ldw	r2,-16(fp)
  213f30:	10c00d17 	ldw	r3,52(r2)
  213f34:	e0bff517 	ldw	r2,-44(fp)
  213f38:	1880051e 	bne	r3,r2,213f50 <altera_avalon_jtag_uart_write+0x1b8>
  213f3c:	e0bffc17 	ldw	r2,-16(fp)
  213f40:	10c00917 	ldw	r3,36(r2)
  213f44:	e0bffc17 	ldw	r2,-16(fp)
  213f48:	10800117 	ldw	r2,4(r2)
  213f4c:	18bff736 	bltu	r3,r2,213f2c <_gp+0xffe02318>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  213f50:	e0bffc17 	ldw	r2,-16(fp)
  213f54:	10800917 	ldw	r2,36(r2)
  213f58:	1000051e 	bne	r2,zero,213f70 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  213f5c:	e0bffe17 	ldw	r2,-8(fp)
  213f60:	00bfd016 	blt	zero,r2,213ea4 <_gp+0xffe02290>
  213f64:	00000306 	br	213f74 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  213f68:	0001883a 	nop
  213f6c:	00000106 	br	213f74 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  213f70:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  213f74:	e0fffd17 	ldw	r3,-12(fp)
  213f78:	e0bff717 	ldw	r2,-36(fp)
  213f7c:	18800426 	beq	r3,r2,213f90 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  213f80:	e0fffd17 	ldw	r3,-12(fp)
  213f84:	e0bff717 	ldw	r2,-36(fp)
  213f88:	1885c83a 	sub	r2,r3,r2
  213f8c:	00000606 	br	213fa8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  213f90:	e0bfff17 	ldw	r2,-4(fp)
  213f94:	1090000c 	andi	r2,r2,16384
  213f98:	10000226 	beq	r2,zero,213fa4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  213f9c:	00bffd44 	movi	r2,-11
  213fa0:	00000106 	br	213fa8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  213fa4:	00bffec4 	movi	r2,-5
}
  213fa8:	e037883a 	mov	sp,fp
  213fac:	dfc00117 	ldw	ra,4(sp)
  213fb0:	df000017 	ldw	fp,0(sp)
  213fb4:	dec00204 	addi	sp,sp,8
  213fb8:	f800283a 	ret

00213fbc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  213fbc:	defff404 	addi	sp,sp,-48
  213fc0:	df000b15 	stw	fp,44(sp)
  213fc4:	df000b04 	addi	fp,sp,44
  213fc8:	e13ffc15 	stw	r4,-16(fp)
  213fcc:	e17ffd15 	stw	r5,-12(fp)
  213fd0:	e1bffe15 	stw	r6,-8(fp)
  213fd4:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  213fd8:	e0ffff17 	ldw	r3,-4(fp)
  213fdc:	e0bffe17 	ldw	r2,-8(fp)
  213fe0:	1885883a 	add	r2,r3,r2
  213fe4:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  213fe8:	e0c00217 	ldw	r3,8(fp)
  213fec:	e0800117 	ldw	r2,4(fp)
  213ff0:	1885883a 	add	r2,r3,r2
  213ff4:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  213ff8:	e0800117 	ldw	r2,4(fp)
  213ffc:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  214000:	e0bffe17 	ldw	r2,-8(fp)
  214004:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  214008:	00800044 	movi	r2,1
  21400c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  214010:	e0bffc17 	ldw	r2,-16(fp)
  214014:	10800504 	addi	r2,r2,20
  214018:	1009883a 	mov	r4,r2
  21401c:	00c00044 	movi	r3,1
  214020:	e0bffd17 	ldw	r2,-12(fp)
  214024:	1884983a 	sll	r2,r3,r2
  214028:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  21402c:	e0800317 	ldw	r2,12(fp)
  214030:	1080008c 	andi	r2,r2,2
  214034:	1000051e 	bne	r2,zero,21404c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  214038:	e0bffc17 	ldw	r2,-16(fp)
  21403c:	10800304 	addi	r2,r2,12
  214040:	1007883a 	mov	r3,r2
  214044:	00810004 	movi	r2,1024
  214048:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  21404c:	e0bffc17 	ldw	r2,-16(fp)
  214050:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  214054:	e0bffc17 	ldw	r2,-16(fp)
  214058:	10800204 	addi	r2,r2,8
  21405c:	10800037 	ldwio	r2,0(r2)
  214060:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214064:	e0bffa17 	ldw	r2,-24(fp)
  214068:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  21406c:	10000226 	beq	r2,zero,214078 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214070:	e0bff717 	ldw	r2,-36(fp)
  214074:	1000031e 	bne	r2,zero,214084 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  214078:	e0bffa17 	ldw	r2,-24(fp)
  21407c:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214080:	103ff426 	beq	r2,zero,214054 <_gp+0xffe02440>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  214084:	e0bffa17 	ldw	r2,-24(fp)
  214088:	1080100c 	andi	r2,r2,64
  21408c:	10001e26 	beq	r2,zero,214108 <alt_avalon_spi_command+0x14c>
  214090:	e0bff717 	ldw	r2,-36(fp)
  214094:	00801c0e 	bge	zero,r2,214108 <alt_avalon_spi_command+0x14c>
    {
      credits--;
  214098:	e0bff717 	ldw	r2,-36(fp)
  21409c:	10bfffc4 	addi	r2,r2,-1
  2140a0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  2140a4:	e0ffff17 	ldw	r3,-4(fp)
  2140a8:	e0bff817 	ldw	r2,-32(fp)
  2140ac:	18800a2e 	bgeu	r3,r2,2140d8 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  2140b0:	e0bffc17 	ldw	r2,-16(fp)
  2140b4:	10800104 	addi	r2,r2,4
  2140b8:	1009883a 	mov	r4,r2
  2140bc:	e0bfff17 	ldw	r2,-4(fp)
  2140c0:	10c00044 	addi	r3,r2,1
  2140c4:	e0ffff15 	stw	r3,-4(fp)
  2140c8:	10800003 	ldbu	r2,0(r2)
  2140cc:	10803fcc 	andi	r2,r2,255
  2140d0:	20800035 	stwio	r2,0(r4)
  2140d4:	00000c06 	br	214108 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  2140d8:	e0bff517 	ldw	r2,-44(fp)
  2140dc:	10000826 	beq	r2,zero,214100 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  2140e0:	e0bff517 	ldw	r2,-44(fp)
  2140e4:	10bfffc4 	addi	r2,r2,-1
  2140e8:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  2140ec:	e0bffc17 	ldw	r2,-16(fp)
  2140f0:	10800104 	addi	r2,r2,4
  2140f4:	0007883a 	mov	r3,zero
  2140f8:	10c00035 	stwio	r3,0(r2)
  2140fc:	00000206 	br	214108 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  214100:	00bf0004 	movi	r2,-1024
  214104:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  214108:	e0bffa17 	ldw	r2,-24(fp)
  21410c:	1080200c 	andi	r2,r2,128
  214110:	103fd026 	beq	r2,zero,214054 <_gp+0xffe02440>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  214114:	e0bffc17 	ldw	r2,-16(fp)
  214118:	10800037 	ldwio	r2,0(r2)
  21411c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  214120:	e0bff617 	ldw	r2,-40(fp)
  214124:	10000426 	beq	r2,zero,214138 <alt_avalon_spi_command+0x17c>
        read_ignore--;
  214128:	e0bff617 	ldw	r2,-40(fp)
  21412c:	10bfffc4 	addi	r2,r2,-1
  214130:	e0bff615 	stw	r2,-40(fp)
  214134:	00000506 	br	21414c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  214138:	e0800217 	ldw	r2,8(fp)
  21413c:	10c00044 	addi	r3,r2,1
  214140:	e0c00215 	stw	r3,8(fp)
  214144:	e0fffb17 	ldw	r3,-20(fp)
  214148:	10c00005 	stb	r3,0(r2)
      credits++;
  21414c:	e0bff717 	ldw	r2,-36(fp)
  214150:	10800044 	addi	r2,r2,1
  214154:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  214158:	e0bff617 	ldw	r2,-40(fp)
  21415c:	103fbd1e 	bne	r2,zero,214054 <_gp+0xffe02440>
  214160:	e0c00217 	ldw	r3,8(fp)
  214164:	e0bff917 	ldw	r2,-28(fp)
  214168:	18bfba1e 	bne	r3,r2,214054 <_gp+0xffe02440>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  21416c:	e0bffc17 	ldw	r2,-16(fp)
  214170:	10800204 	addi	r2,r2,8
  214174:	10800037 	ldwio	r2,0(r2)
  214178:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  21417c:	e0bffa17 	ldw	r2,-24(fp)
  214180:	1080080c 	andi	r2,r2,32
  214184:	103ff926 	beq	r2,zero,21416c <_gp+0xffe02558>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  214188:	e0800317 	ldw	r2,12(fp)
  21418c:	1080004c 	andi	r2,r2,1
  214190:	1000041e 	bne	r2,zero,2141a4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  214194:	e0bffc17 	ldw	r2,-16(fp)
  214198:	10800304 	addi	r2,r2,12
  21419c:	0007883a 	mov	r3,zero
  2141a0:	10c00035 	stwio	r3,0(r2)

  return read_length;
  2141a4:	e0800117 	ldw	r2,4(fp)
}
  2141a8:	e037883a 	mov	sp,fp
  2141ac:	df000017 	ldw	fp,0(sp)
  2141b0:	dec00104 	addi	sp,sp,4
  2141b4:	f800283a 	ret

002141b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  2141b8:	defffa04 	addi	sp,sp,-24
  2141bc:	dfc00515 	stw	ra,20(sp)
  2141c0:	df000415 	stw	fp,16(sp)
  2141c4:	df000404 	addi	fp,sp,16
  2141c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  2141cc:	0007883a 	mov	r3,zero
  2141d0:	e0bfff17 	ldw	r2,-4(fp)
  2141d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  2141d8:	e0bfff17 	ldw	r2,-4(fp)
  2141dc:	10800104 	addi	r2,r2,4
  2141e0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2141e4:	0005303a 	rdctl	r2,status
  2141e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2141ec:	e0fffd17 	ldw	r3,-12(fp)
  2141f0:	00bfff84 	movi	r2,-2
  2141f4:	1884703a 	and	r2,r3,r2
  2141f8:	1001703a 	wrctl	status,r2
  
  return context;
  2141fc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  214200:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  214204:	02115dc0 	call	2115dc <alt_tick>
  214208:	e0bffc17 	ldw	r2,-16(fp)
  21420c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  214210:	e0bffe17 	ldw	r2,-8(fp)
  214214:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  214218:	0001883a 	nop
  21421c:	e037883a 	mov	sp,fp
  214220:	dfc00117 	ldw	ra,4(sp)
  214224:	df000017 	ldw	fp,0(sp)
  214228:	dec00204 	addi	sp,sp,8
  21422c:	f800283a 	ret

00214230 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  214230:	defff804 	addi	sp,sp,-32
  214234:	dfc00715 	stw	ra,28(sp)
  214238:	df000615 	stw	fp,24(sp)
  21423c:	df000604 	addi	fp,sp,24
  214240:	e13ffc15 	stw	r4,-16(fp)
  214244:	e17ffd15 	stw	r5,-12(fp)
  214248:	e1bffe15 	stw	r6,-8(fp)
  21424c:	e1ffff15 	stw	r7,-4(fp)
  214250:	e0bfff17 	ldw	r2,-4(fp)
  214254:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  214258:	d0a02a17 	ldw	r2,-32600(gp)
  21425c:	1000021e 	bne	r2,zero,214268 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  214260:	e0bffb17 	ldw	r2,-20(fp)
  214264:	d0a02a15 	stw	r2,-32600(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  214268:	e0bffc17 	ldw	r2,-16(fp)
  21426c:	10800104 	addi	r2,r2,4
  214270:	00c001c4 	movi	r3,7
  214274:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  214278:	d8000015 	stw	zero,0(sp)
  21427c:	e1fffc17 	ldw	r7,-16(fp)
  214280:	01800874 	movhi	r6,33
  214284:	31906e04 	addi	r6,r6,16824
  214288:	e17ffe17 	ldw	r5,-8(fp)
  21428c:	e13ffd17 	ldw	r4,-12(fp)
  214290:	02157c40 	call	2157c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  214294:	0001883a 	nop
  214298:	e037883a 	mov	sp,fp
  21429c:	dfc00117 	ldw	ra,4(sp)
  2142a0:	df000017 	ldw	fp,0(sp)
  2142a4:	dec00204 	addi	sp,sp,8
  2142a8:	f800283a 	ret

002142ac <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  2142ac:	defffd04 	addi	sp,sp,-12
  2142b0:	dfc00215 	stw	ra,8(sp)
  2142b4:	df000115 	stw	fp,4(sp)
  2142b8:	df000104 	addi	fp,sp,4
  2142bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  2142c0:	d1601704 	addi	r5,gp,-32676
  2142c4:	e13fff17 	ldw	r4,-4(fp)
  2142c8:	02154f40 	call	2154f4 <alt_dev_llist_insert>
}
  2142cc:	e037883a 	mov	sp,fp
  2142d0:	dfc00117 	ldw	ra,4(sp)
  2142d4:	df000017 	ldw	fp,0(sp)
  2142d8:	dec00204 	addi	sp,sp,8
  2142dc:	f800283a 	ret

002142e0 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  2142e0:	defff704 	addi	sp,sp,-36
  2142e4:	dfc00815 	stw	ra,32(sp)
  2142e8:	df000715 	stw	fp,28(sp)
  2142ec:	df000704 	addi	fp,sp,28
  2142f0:	e13ffc15 	stw	r4,-16(fp)
  2142f4:	e17ffd15 	stw	r5,-12(fp)
  2142f8:	e1bffe15 	stw	r6,-8(fp)
  2142fc:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  214300:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  214304:	e0bffc17 	ldw	r2,-16(fp)
  214308:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  21430c:	e0bffa17 	ldw	r2,-24(fp)
  214310:	10800b17 	ldw	r2,44(r2)
  214314:	e0fffd17 	ldw	r3,-12(fp)
  214318:	1880060e 	bge	r3,r2,214334 <alt_onchip_flash_read+0x54>
  21431c:	e0fffd17 	ldw	r3,-12(fp)
  214320:	e0bfff17 	ldw	r2,-4(fp)
  214324:	1885883a 	add	r2,r3,r2
  214328:	e0fffa17 	ldw	r3,-24(fp)
  21432c:	18c00b17 	ldw	r3,44(r3)
  214330:	1880020e 	bge	r3,r2,21433c <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  214334:	00bffc84 	movi	r2,-14
  214338:	00001706 	br	214398 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  21433c:	e0bffa17 	ldw	r2,-24(fp)
  214340:	10c00a17 	ldw	r3,40(r2)
  214344:	e0bffd17 	ldw	r2,-12(fp)
  214348:	1885883a 	add	r2,r3,r2
  21434c:	e0ffff17 	ldw	r3,-4(fp)
  214350:	180d883a 	mov	r6,r3
  214354:	100b883a 	mov	r5,r2
  214358:	e13ffe17 	ldw	r4,-8(fp)
  21435c:	0209a740 	call	209a74 <memcpy>

    if (NULL != flash->csr_base) {
  214360:	e0bffa17 	ldw	r2,-24(fp)
  214364:	10802f17 	ldw	r2,188(r2)
  214368:	10000a26 	beq	r2,zero,214394 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  21436c:	e0bffa17 	ldw	r2,-24(fp)
  214370:	10802f17 	ldw	r2,188(r2)
  214374:	10800037 	ldwio	r2,0(r2)
  214378:	1080010c 	andi	r2,r2,4
  21437c:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  214380:	e0bffb17 	ldw	r2,-20(fp)
  214384:	10800120 	cmpeqi	r2,r2,4
  214388:	1000021e 	bne	r2,zero,214394 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  21438c:	00bffec4 	movi	r2,-5
  214390:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  214394:	e0bff917 	ldw	r2,-28(fp)
}
  214398:	e037883a 	mov	sp,fp
  21439c:	dfc00117 	ldw	ra,4(sp)
  2143a0:	df000017 	ldw	fp,0(sp)
  2143a4:	dec00204 	addi	sp,sp,8
  2143a8:	f800283a 	ret

002143ac <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  2143ac:	defffa04 	addi	sp,sp,-24
  2143b0:	df000515 	stw	fp,20(sp)
  2143b4:	df000504 	addi	fp,sp,20
  2143b8:	e13ffd15 	stw	r4,-12(fp)
  2143bc:	e17ffe15 	stw	r5,-8(fp)
  2143c0:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  2143c4:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  2143c8:	e0bffd17 	ldw	r2,-12(fp)
  2143cc:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  2143d0:	e0bfff17 	ldw	r2,-4(fp)
  2143d4:	10000426 	beq	r2,zero,2143e8 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  2143d8:	e0bffc17 	ldw	r2,-16(fp)
  2143dc:	10c00c17 	ldw	r3,48(r2)
  2143e0:	e0bfff17 	ldw	r2,-4(fp)
  2143e4:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  2143e8:	e0bffc17 	ldw	r2,-16(fp)
  2143ec:	10800c17 	ldw	r2,48(r2)
  2143f0:	1000031e 	bne	r2,zero,214400 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  2143f4:	00bffd04 	movi	r2,-12
  2143f8:	e0bffb15 	stw	r2,-20(fp)
  2143fc:	00000d06 	br	214434 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  214400:	e0bffc17 	ldw	r2,-16(fp)
  214404:	10800c17 	ldw	r2,48(r2)
  214408:	10800250 	cmplti	r2,r2,9
  21440c:	1000031e 	bne	r2,zero,21441c <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  214410:	00bffc84 	movi	r2,-14
  214414:	e0bffb15 	stw	r2,-20(fp)
  214418:	00000606 	br	214434 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  21441c:	e0bffe17 	ldw	r2,-8(fp)
  214420:	10000426 	beq	r2,zero,214434 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  214424:	e0bffc17 	ldw	r2,-16(fp)
  214428:	10c00d04 	addi	r3,r2,52
  21442c:	e0bffe17 	ldw	r2,-8(fp)
  214430:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  214434:	e0bffb17 	ldw	r2,-20(fp)
}
  214438:	e037883a 	mov	sp,fp
  21443c:	df000017 	ldw	fp,0(sp)
  214440:	dec00104 	addi	sp,sp,4
  214444:	f800283a 	ret

00214448 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  214448:	defff904 	addi	sp,sp,-28
  21444c:	dfc00615 	stw	ra,24(sp)
  214450:	df000515 	stw	fp,20(sp)
  214454:	df000504 	addi	fp,sp,20
  214458:	e13ffe15 	stw	r4,-8(fp)
  21445c:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  214460:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  214464:	e0bffe17 	ldw	r2,-8(fp)
  214468:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  21446c:	e0bffc17 	ldw	r2,-16(fp)
  214470:	10800b17 	ldw	r2,44(r2)
  214474:	e0ffff17 	ldw	r3,-4(fp)
  214478:	18800216 	blt	r3,r2,214484 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  21447c:	00bffc84 	movi	r2,-14
  214480:	00004606 	br	21459c <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  214484:	e0bffc17 	ldw	r2,-16(fp)
  214488:	10802f17 	ldw	r2,188(r2)
  21448c:	10000326 	beq	r2,zero,21449c <alt_onchip_flash_erase_block+0x54>
  214490:	e0bffc17 	ldw	r2,-16(fp)
  214494:	10802e17 	ldw	r2,184(r2)
  214498:	10000226 	beq	r2,zero,2144a4 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  21449c:	00bffb44 	movi	r2,-19
  2144a0:	00003e06 	br	21459c <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  2144a4:	e0bffc17 	ldw	r2,-16(fp)
  2144a8:	10803f17 	ldw	r2,252(r2)
  2144ac:	10ffffc4 	addi	r3,r2,-1
  2144b0:	e0bfff17 	ldw	r2,-4(fp)
  2144b4:	1884703a 	and	r2,r3,r2
  2144b8:	10000226 	beq	r2,zero,2144c4 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  2144bc:	00bffa84 	movi	r2,-22
  2144c0:	00003606 	br	21459c <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  2144c4:	e13ffc17 	ldw	r4,-16(fp)
  2144c8:	021503c0 	call	21503c <alt_onchip_flash_poll_for_status_to_go_idle>
  2144cc:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  2144d0:	e0bffb17 	ldw	r2,-20(fp)
  2144d4:	10000226 	beq	r2,zero,2144e0 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  2144d8:	e0bffb17 	ldw	r2,-20(fp)
  2144dc:	00002f06 	br	21459c <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  2144e0:	e0bffc17 	ldw	r2,-16(fp)
  2144e4:	10802f17 	ldw	r2,188(r2)
  2144e8:	10c00104 	addi	r3,r2,4
  2144ec:	e0bffc17 	ldw	r2,-16(fp)
  2144f0:	10802f17 	ldw	r2,188(r2)
  2144f4:	10800104 	addi	r2,r2,4
  2144f8:	10800037 	ldwio	r2,0(r2)
  2144fc:	113c002c 	andhi	r4,r2,61440
  214500:	00802034 	movhi	r2,128
  214504:	10bfffc4 	addi	r2,r2,-1
  214508:	2084b03a 	or	r2,r4,r2
  21450c:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  214510:	e0bfff17 	ldw	r2,-4(fp)
  214514:	1000010e 	bge	r2,zero,21451c <alt_onchip_flash_erase_block+0xd4>
  214518:	108000c4 	addi	r2,r2,3
  21451c:	1005d0ba 	srai	r2,r2,2
  214520:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  214524:	e0bffc17 	ldw	r2,-16(fp)
  214528:	10802f17 	ldw	r2,188(r2)
  21452c:	10800104 	addi	r2,r2,4
  214530:	e0fffc17 	ldw	r3,-16(fp)
  214534:	18c02f17 	ldw	r3,188(r3)
  214538:	18c00104 	addi	r3,r3,4
  21453c:	18c00037 	ldwio	r3,0(r3)
  214540:	193c002c 	andhi	r4,r3,61440
  214544:	e0fffd17 	ldw	r3,-12(fp)
  214548:	18c01c34 	orhi	r3,r3,112
  21454c:	20c6b03a 	or	r3,r4,r3
  214550:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  214554:	e13ffc17 	ldw	r4,-16(fp)
  214558:	021503c0 	call	21503c <alt_onchip_flash_poll_for_status_to_go_idle>
  21455c:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  214560:	e13ffc17 	ldw	r4,-16(fp)
  214564:	02150cc0 	call	2150cc <alt_onchip_flash_poll_for_status_erase_passed>
  214568:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  21456c:	e0bffc17 	ldw	r2,-16(fp)
  214570:	10802f17 	ldw	r2,188(r2)
  214574:	10c00104 	addi	r3,r2,4
  214578:	e0bffc17 	ldw	r2,-16(fp)
  21457c:	10802f17 	ldw	r2,188(r2)
  214580:	10800104 	addi	r2,r2,4
  214584:	11000037 	ldwio	r4,0(r2)
  214588:	00840034 	movhi	r2,4096
  21458c:	10bfffc4 	addi	r2,r2,-1
  214590:	2084b03a 	or	r2,r4,r2
  214594:	18800035 	stwio	r2,0(r3)

    return ret_code;
  214598:	e0bffb17 	ldw	r2,-20(fp)
}
  21459c:	e037883a 	mov	sp,fp
  2145a0:	dfc00117 	ldw	ra,4(sp)
  2145a4:	df000017 	ldw	fp,0(sp)
  2145a8:	dec00204 	addi	sp,sp,8
  2145ac:	f800283a 	ret

002145b0 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  2145b0:	defff204 	addi	sp,sp,-56
  2145b4:	dfc00d15 	stw	ra,52(sp)
  2145b8:	df000c15 	stw	fp,48(sp)
  2145bc:	df000c04 	addi	fp,sp,48
  2145c0:	e13ffc15 	stw	r4,-16(fp)
  2145c4:	e17ffd15 	stw	r5,-12(fp)
  2145c8:	e1bffe15 	stw	r6,-8(fp)
  2145cc:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  2145d0:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  2145d4:	e0bffc17 	ldw	r2,-16(fp)
  2145d8:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  2145dc:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  2145e0:	e0bffe17 	ldw	r2,-8(fp)
  2145e4:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  2145e8:	e0bff817 	ldw	r2,-32(fp)
  2145ec:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  2145f0:	e0fffd17 	ldw	r3,-12(fp)
  2145f4:	18800a0e 	bge	r3,r2,214620 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  2145f8:	e0bff817 	ldw	r2,-32(fp)
  2145fc:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  214600:	e0fffe17 	ldw	r3,-8(fp)
  214604:	1880060e 	bge	r3,r2,214620 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  214608:	e0bff817 	ldw	r2,-32(fp)
  21460c:	10c00b17 	ldw	r3,44(r2)
  214610:	e0bffe17 	ldw	r2,-8(fp)
  214614:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  214618:	e0800217 	ldw	r2,8(fp)
  21461c:	1880020e 	bge	r3,r2,214628 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  214620:	00bffc84 	movi	r2,-14
  214624:	00009306 	br	214874 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  214628:	e0bff817 	ldw	r2,-32(fp)
  21462c:	10802f17 	ldw	r2,188(r2)
  214630:	10000326 	beq	r2,zero,214640 <alt_onchip_flash_write_block+0x90>
  214634:	e0bff817 	ldw	r2,-32(fp)
  214638:	10802e17 	ldw	r2,184(r2)
  21463c:	10000226 	beq	r2,zero,214648 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  214640:	00bffb44 	movi	r2,-19
  214644:	00008b06 	br	214874 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  214648:	e13ff817 	ldw	r4,-32(fp)
  21464c:	021503c0 	call	21503c <alt_onchip_flash_poll_for_status_to_go_idle>
  214650:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  214654:	e0bff417 	ldw	r2,-48(fp)
  214658:	10000226 	beq	r2,zero,214664 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  21465c:	e0bff417 	ldw	r2,-48(fp)
  214660:	00008406 	br	214874 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  214664:	e0bff817 	ldw	r2,-32(fp)
  214668:	10802f17 	ldw	r2,188(r2)
  21466c:	10c00104 	addi	r3,r2,4
  214670:	e0bff817 	ldw	r2,-32(fp)
  214674:	10802f17 	ldw	r2,188(r2)
  214678:	10800104 	addi	r2,r2,4
  21467c:	10800037 	ldwio	r2,0(r2)
  214680:	113c002c 	andhi	r4,r2,61440
  214684:	00802034 	movhi	r2,128
  214688:	10bfffc4 	addi	r2,r2,-1
  21468c:	2084b03a 	or	r2,r4,r2
  214690:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  214694:	00006506 	br	21482c <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  214698:	00bfffc4 	movi	r2,-1
  21469c:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  2146a0:	e0bff617 	ldw	r2,-40(fp)
  2146a4:	108000cc 	andi	r2,r2,3
  2146a8:	10001e1e 	bne	r2,zero,214724 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  2146ac:	e0bff617 	ldw	r2,-40(fp)
  2146b0:	10c00104 	addi	r3,r2,4
  2146b4:	00bfff04 	movi	r2,-4
  2146b8:	1884703a 	and	r2,r3,r2
  2146bc:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  2146c0:	e0fff717 	ldw	r3,-36(fp)
  2146c4:	e0bff617 	ldw	r2,-40(fp)
  2146c8:	1885c83a 	sub	r2,r3,r2
  2146cc:	e0c00217 	ldw	r3,8(fp)
  2146d0:	1880010e 	bge	r3,r2,2146d8 <alt_onchip_flash_write_block+0x128>
  2146d4:	1805883a 	mov	r2,r3
  2146d8:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  2146dc:	e0bff517 	ldw	r2,-44(fp)
  2146e0:	e0ffff17 	ldw	r3,-4(fp)
  2146e4:	1887883a 	add	r3,r3,r2
  2146e8:	e13ff917 	ldw	r4,-28(fp)
  2146ec:	e0bffb04 	addi	r2,fp,-20
  2146f0:	200d883a 	mov	r6,r4
  2146f4:	180b883a 	mov	r5,r3
  2146f8:	1009883a 	mov	r4,r2
  2146fc:	0209a740 	call	209a74 <memcpy>
            buffer_offset += length_of_current_write;
  214700:	e0fff517 	ldw	r3,-44(fp)
  214704:	e0bff917 	ldw	r2,-28(fp)
  214708:	1885883a 	add	r2,r3,r2
  21470c:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  214710:	e0c00217 	ldw	r3,8(fp)
  214714:	e0bff917 	ldw	r2,-28(fp)
  214718:	1885c83a 	sub	r2,r3,r2
  21471c:	e0800215 	stw	r2,8(fp)
  214720:	00003006 	br	2147e4 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  214724:	e0bff617 	ldw	r2,-40(fp)
  214728:	108000cc 	andi	r2,r2,3
  21472c:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  214730:	e0fff617 	ldw	r3,-40(fp)
  214734:	e0bffa17 	ldw	r2,-24(fp)
  214738:	1885c83a 	sub	r2,r3,r2
  21473c:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  214740:	e0bff617 	ldw	r2,-40(fp)
  214744:	10c00104 	addi	r3,r2,4
  214748:	00bfff04 	movi	r2,-4
  21474c:	1884703a 	and	r2,r3,r2
  214750:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  214754:	e0fff717 	ldw	r3,-36(fp)
  214758:	e0bff617 	ldw	r2,-40(fp)
  21475c:	1889c83a 	sub	r4,r3,r2
  214760:	e0c00217 	ldw	r3,8(fp)
  214764:	e0bffa17 	ldw	r2,-24(fp)
  214768:	1887883a 	add	r3,r3,r2
  21476c:	2005883a 	mov	r2,r4
  214770:	1880010e 	bge	r3,r2,214778 <alt_onchip_flash_write_block+0x1c8>
  214774:	1805883a 	mov	r2,r3
  214778:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  21477c:	e0fffb04 	addi	r3,fp,-20
  214780:	e0bffa17 	ldw	r2,-24(fp)
  214784:	1885883a 	add	r2,r3,r2
  214788:	100f883a 	mov	r7,r2
  21478c:	e0bff517 	ldw	r2,-44(fp)
  214790:	e0ffff17 	ldw	r3,-4(fp)
  214794:	1889883a 	add	r4,r3,r2
  214798:	e0fff917 	ldw	r3,-28(fp)
  21479c:	e0bffa17 	ldw	r2,-24(fp)
  2147a0:	1885c83a 	sub	r2,r3,r2
  2147a4:	100d883a 	mov	r6,r2
  2147a8:	200b883a 	mov	r5,r4
  2147ac:	3809883a 	mov	r4,r7
  2147b0:	0209a740 	call	209a74 <memcpy>
            buffer_offset += length_of_current_write - padding;
  2147b4:	e0fff917 	ldw	r3,-28(fp)
  2147b8:	e0bffa17 	ldw	r2,-24(fp)
  2147bc:	1885c83a 	sub	r2,r3,r2
  2147c0:	e0fff517 	ldw	r3,-44(fp)
  2147c4:	1885883a 	add	r2,r3,r2
  2147c8:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  2147cc:	e0fff917 	ldw	r3,-28(fp)
  2147d0:	e0bffa17 	ldw	r2,-24(fp)
  2147d4:	1885c83a 	sub	r2,r3,r2
  2147d8:	e0c00217 	ldw	r3,8(fp)
  2147dc:	1885c83a 	sub	r2,r3,r2
  2147e0:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  2147e4:	e0bff817 	ldw	r2,-32(fp)
  2147e8:	10c00a17 	ldw	r3,40(r2)
  2147ec:	e0bff617 	ldw	r2,-40(fp)
  2147f0:	1885883a 	add	r2,r3,r2
  2147f4:	e0fffb17 	ldw	r3,-20(fp)
  2147f8:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  2147fc:	e13ff817 	ldw	r4,-32(fp)
  214800:	021503c0 	call	21503c <alt_onchip_flash_poll_for_status_to_go_idle>
  214804:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  214808:	e0bff417 	ldw	r2,-48(fp)
  21480c:	10000a1e 	bne	r2,zero,214838 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  214810:	e13ff817 	ldw	r4,-32(fp)
  214814:	021515c0 	call	21515c <alt_onchip_flash_poll_for_status_write_passed>
  214818:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  21481c:	e0bff417 	ldw	r2,-48(fp)
  214820:	1000071e 	bne	r2,zero,214840 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  214824:	e0bff717 	ldw	r2,-36(fp)
  214828:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  21482c:	e0800217 	ldw	r2,8(fp)
  214830:	103f991e 	bne	r2,zero,214698 <_gp+0xffe02a84>
  214834:	00000306 	br	214844 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  214838:	0001883a 	nop
  21483c:	00000106 	br	214844 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  214840:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  214844:	e0bff817 	ldw	r2,-32(fp)
  214848:	10802f17 	ldw	r2,188(r2)
  21484c:	10c00104 	addi	r3,r2,4
  214850:	e0bff817 	ldw	r2,-32(fp)
  214854:	10802f17 	ldw	r2,188(r2)
  214858:	10800104 	addi	r2,r2,4
  21485c:	11000037 	ldwio	r4,0(r2)
  214860:	00840034 	movhi	r2,4096
  214864:	10bfffc4 	addi	r2,r2,-1
  214868:	2084b03a 	or	r2,r4,r2
  21486c:	18800035 	stwio	r2,0(r3)

    return ret_code;
  214870:	e0bff417 	ldw	r2,-48(fp)
}
  214874:	e037883a 	mov	sp,fp
  214878:	dfc00117 	ldw	ra,4(sp)
  21487c:	df000017 	ldw	fp,0(sp)
  214880:	dec00204 	addi	sp,sp,8
  214884:	f800283a 	ret

00214888 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  214888:	defff104 	addi	sp,sp,-60
  21488c:	dfc00e15 	stw	ra,56(sp)
  214890:	df000d15 	stw	fp,52(sp)
  214894:	df000d04 	addi	fp,sp,52
  214898:	e13ffc15 	stw	r4,-16(fp)
  21489c:	e17ffd15 	stw	r5,-12(fp)
  2148a0:	e1bffe15 	stw	r6,-8(fp)
  2148a4:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  2148a8:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  2148ac:	e0bfff17 	ldw	r2,-4(fp)
  2148b0:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  2148b4:	e0bffd17 	ldw	r2,-12(fp)
  2148b8:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  2148bc:	e0bffc17 	ldw	r2,-16(fp)
  2148c0:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  2148c4:	e0bffa17 	ldw	r2,-24(fp)
  2148c8:	10800b17 	ldw	r2,44(r2)
  2148cc:	e0fffd17 	ldw	r3,-12(fp)
  2148d0:	1880060e 	bge	r3,r2,2148ec <alt_onchip_flash_write+0x64>
  2148d4:	e0bffa17 	ldw	r2,-24(fp)
  2148d8:	10c00b17 	ldw	r3,44(r2)
  2148dc:	e0bffd17 	ldw	r2,-12(fp)
  2148e0:	1887c83a 	sub	r3,r3,r2
  2148e4:	e0bfff17 	ldw	r2,-4(fp)
  2148e8:	1880020e 	bge	r3,r2,2148f4 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  2148ec:	00bffc84 	movi	r2,-14
  2148f0:	00009606 	br	214b4c <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  2148f4:	e03ff515 	stw	zero,-44(fp)
  2148f8:	00008706 	br	214b18 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  2148fc:	e0fffa17 	ldw	r3,-24(fp)
  214900:	e0bff517 	ldw	r2,-44(fp)
  214904:	1004913a 	slli	r2,r2,4
  214908:	1885883a 	add	r2,r3,r2
  21490c:	10800d04 	addi	r2,r2,52
  214910:	10800017 	ldw	r2,0(r2)
  214914:	e0fffd17 	ldw	r3,-12(fp)
  214918:	18807c16 	blt	r3,r2,214b0c <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  21491c:	e0fffa17 	ldw	r3,-24(fp)
  214920:	e0bff517 	ldw	r2,-44(fp)
  214924:	1004913a 	slli	r2,r2,4
  214928:	1885883a 	add	r2,r3,r2
  21492c:	10800d04 	addi	r2,r2,52
  214930:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  214934:	e13ffa17 	ldw	r4,-24(fp)
  214938:	e0bff517 	ldw	r2,-44(fp)
  21493c:	1004913a 	slli	r2,r2,4
  214940:	2085883a 	add	r2,r4,r2
  214944:	10800e04 	addi	r2,r2,56
  214948:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  21494c:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  214950:	e0fffd17 	ldw	r3,-12(fp)
  214954:	18806d0e 	bge	r3,r2,214b0c <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  214958:	e0fffa17 	ldw	r3,-24(fp)
  21495c:	e0bff517 	ldw	r2,-44(fp)
  214960:	1004913a 	slli	r2,r2,4
  214964:	1885883a 	add	r2,r3,r2
  214968:	10800d04 	addi	r2,r2,52
  21496c:	10800017 	ldw	r2,0(r2)
  214970:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  214974:	e03ff615 	stw	zero,-40(fp)
  214978:	00005c06 	br	214aec <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  21497c:	e0fffd17 	ldw	r3,-12(fp)
  214980:	e0bff717 	ldw	r2,-36(fp)
  214984:	18804d16 	blt	r3,r2,214abc <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  214988:	e0fffa17 	ldw	r3,-24(fp)
  21498c:	e0bff517 	ldw	r2,-44(fp)
  214990:	10800104 	addi	r2,r2,4
  214994:	1004913a 	slli	r2,r2,4
  214998:	1885883a 	add	r2,r3,r2
  21499c:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  2149a0:	e0bff717 	ldw	r2,-36(fp)
  2149a4:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  2149a8:	e0fffd17 	ldw	r3,-12(fp)
  2149ac:	1880430e 	bge	r3,r2,214abc <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  2149b0:	e0fffa17 	ldw	r3,-24(fp)
  2149b4:	e0bff517 	ldw	r2,-44(fp)
  2149b8:	10800104 	addi	r2,r2,4
  2149bc:	1004913a 	slli	r2,r2,4
  2149c0:	1885883a 	add	r2,r3,r2
  2149c4:	10c00017 	ldw	r3,0(r2)
  2149c8:	e0bff717 	ldw	r2,-36(fp)
  2149cc:	1887883a 	add	r3,r3,r2
  2149d0:	e0bffd17 	ldw	r2,-12(fp)
  2149d4:	1885c83a 	sub	r2,r3,r2
  2149d8:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  2149dc:	e0fffb17 	ldw	r3,-20(fp)
  2149e0:	e0bfff17 	ldw	r2,-4(fp)
  2149e4:	1880010e 	bge	r3,r2,2149ec <alt_onchip_flash_write+0x164>
  2149e8:	1805883a 	mov	r2,r3
  2149ec:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  2149f0:	e0bffa17 	ldw	r2,-24(fp)
  2149f4:	10c00a17 	ldw	r3,40(r2)
  2149f8:	e0bffd17 	ldw	r2,-12(fp)
  2149fc:	1885883a 	add	r2,r3,r2
  214a00:	e0fffb17 	ldw	r3,-20(fp)
  214a04:	180d883a 	mov	r6,r3
  214a08:	100b883a 	mov	r5,r2
  214a0c:	e13ffe17 	ldw	r4,-8(fp)
  214a10:	02163880 	call	216388 <memcmp>
  214a14:	10001326 	beq	r2,zero,214a64 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  214a18:	e0bffa17 	ldw	r2,-24(fp)
  214a1c:	10800817 	ldw	r2,32(r2)
  214a20:	e0fffa17 	ldw	r3,-24(fp)
  214a24:	e17ff717 	ldw	r5,-36(fp)
  214a28:	1809883a 	mov	r4,r3
  214a2c:	103ee83a 	callr	r2
  214a30:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  214a34:	e0bff417 	ldw	r2,-48(fp)
  214a38:	10000a1e 	bne	r2,zero,214a64 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  214a3c:	e0bffa17 	ldw	r2,-24(fp)
  214a40:	10800917 	ldw	r2,36(r2)
  214a44:	e13ffa17 	ldw	r4,-24(fp)
  214a48:	e0fffb17 	ldw	r3,-20(fp)
  214a4c:	d8c00015 	stw	r3,0(sp)
  214a50:	e1fffe17 	ldw	r7,-8(fp)
  214a54:	e1bffd17 	ldw	r6,-12(fp)
  214a58:	e17ff717 	ldw	r5,-36(fp)
  214a5c:	103ee83a 	callr	r2
  214a60:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  214a64:	e0ffff17 	ldw	r3,-4(fp)
  214a68:	e0bffb17 	ldw	r2,-20(fp)
  214a6c:	18802e26 	beq	r3,r2,214b28 <alt_onchip_flash_write+0x2a0>
  214a70:	e0bff417 	ldw	r2,-48(fp)
  214a74:	10002c1e 	bne	r2,zero,214b28 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  214a78:	e0ffff17 	ldw	r3,-4(fp)
  214a7c:	e0bffb17 	ldw	r2,-20(fp)
  214a80:	1885c83a 	sub	r2,r3,r2
  214a84:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  214a88:	e0fffa17 	ldw	r3,-24(fp)
  214a8c:	e0bff517 	ldw	r2,-44(fp)
  214a90:	10800104 	addi	r2,r2,4
  214a94:	1004913a 	slli	r2,r2,4
  214a98:	1885883a 	add	r2,r3,r2
  214a9c:	10c00017 	ldw	r3,0(r2)
  214aa0:	e0bff717 	ldw	r2,-36(fp)
  214aa4:	1885883a 	add	r2,r3,r2
  214aa8:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  214aac:	e0bffb17 	ldw	r2,-20(fp)
  214ab0:	e0fffe17 	ldw	r3,-8(fp)
  214ab4:	1885883a 	add	r2,r3,r2
  214ab8:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  214abc:	e0fffa17 	ldw	r3,-24(fp)
  214ac0:	e0bff517 	ldw	r2,-44(fp)
  214ac4:	10800104 	addi	r2,r2,4
  214ac8:	1004913a 	slli	r2,r2,4
  214acc:	1885883a 	add	r2,r3,r2
  214ad0:	10800017 	ldw	r2,0(r2)
  214ad4:	e0fff717 	ldw	r3,-36(fp)
  214ad8:	1885883a 	add	r2,r3,r2
  214adc:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  214ae0:	e0bff617 	ldw	r2,-40(fp)
  214ae4:	10800044 	addi	r2,r2,1
  214ae8:	e0bff615 	stw	r2,-40(fp)
  214aec:	e0fffa17 	ldw	r3,-24(fp)
  214af0:	e0bff517 	ldw	r2,-44(fp)
  214af4:	1004913a 	slli	r2,r2,4
  214af8:	1885883a 	add	r2,r3,r2
  214afc:	10800f04 	addi	r2,r2,60
  214b00:	10800017 	ldw	r2,0(r2)
  214b04:	e0fff617 	ldw	r3,-40(fp)
  214b08:	18bf9c16 	blt	r3,r2,21497c <_gp+0xffe02d68>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  214b0c:	e0bff517 	ldw	r2,-44(fp)
  214b10:	10800044 	addi	r2,r2,1
  214b14:	e0bff515 	stw	r2,-44(fp)
  214b18:	e0bffa17 	ldw	r2,-24(fp)
  214b1c:	10800c17 	ldw	r2,48(r2)
  214b20:	e0fff517 	ldw	r3,-44(fp)
  214b24:	18bf7516 	blt	r3,r2,2148fc <_gp+0xffe02ce8>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  214b28:	e0bffa17 	ldw	r2,-24(fp)
  214b2c:	10c00a17 	ldw	r3,40(r2)
  214b30:	e0bff917 	ldw	r2,-28(fp)
  214b34:	1885883a 	add	r2,r3,r2
  214b38:	e0fff817 	ldw	r3,-32(fp)
  214b3c:	180b883a 	mov	r5,r3
  214b40:	1009883a 	mov	r4,r2
  214b44:	02154700 	call	215470 <alt_dcache_flush>
    return ret_code;
  214b48:	e0bff417 	ldw	r2,-48(fp)
}
  214b4c:	e037883a 	mov	sp,fp
  214b50:	dfc00117 	ldw	ra,4(sp)
  214b54:	df000017 	ldw	fp,0(sp)
  214b58:	dec00204 	addi	sp,sp,8
  214b5c:	f800283a 	ret

00214b60 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  214b60:	defff504 	addi	sp,sp,-44
  214b64:	dfc00a15 	stw	ra,40(sp)
  214b68:	df000915 	stw	fp,36(sp)
  214b6c:	dc000815 	stw	r16,32(sp)
  214b70:	df000904 	addi	fp,sp,36
  214b74:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  214b78:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  214b7c:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  214b80:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  214b84:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  214b88:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  214b8c:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  214b90:	e0bffe17 	ldw	r2,-8(fp)
  214b94:	10800d04 	addi	r2,r2,52
  214b98:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  214b9c:	e0bffe17 	ldw	r2,-8(fp)
  214ba0:	10802f17 	ldw	r2,188(r2)
  214ba4:	10001926 	beq	r2,zero,214c0c <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  214ba8:	e0bffe17 	ldw	r2,-8(fp)
  214bac:	10802f17 	ldw	r2,188(r2)
  214bb0:	10800037 	ldwio	r2,0(r2)
  214bb4:	1080080c 	andi	r2,r2,32
  214bb8:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  214bbc:	e0bffe17 	ldw	r2,-8(fp)
  214bc0:	10802f17 	ldw	r2,188(r2)
  214bc4:	10800037 	ldwio	r2,0(r2)
  214bc8:	1080100c 	andi	r2,r2,64
  214bcc:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  214bd0:	e0bffe17 	ldw	r2,-8(fp)
  214bd4:	10802f17 	ldw	r2,188(r2)
  214bd8:	10800037 	ldwio	r2,0(r2)
  214bdc:	1080200c 	andi	r2,r2,128
  214be0:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  214be4:	e0bffe17 	ldw	r2,-8(fp)
  214be8:	10802f17 	ldw	r2,188(r2)
  214bec:	10800037 	ldwio	r2,0(r2)
  214bf0:	1080400c 	andi	r2,r2,256
  214bf4:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  214bf8:	e0bffe17 	ldw	r2,-8(fp)
  214bfc:	10802f17 	ldw	r2,188(r2)
  214c00:	10800037 	ldwio	r2,0(r2)
  214c04:	1080800c 	andi	r2,r2,512
  214c08:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  214c0c:	e0bffe17 	ldw	r2,-8(fp)
  214c10:	10803017 	ldw	r2,192(r2)
  214c14:	10800058 	cmpnei	r2,r2,1
  214c18:	10002f1e 	bne	r2,zero,214cd8 <altera_onchip_flash_init+0x178>
  214c1c:	e0bff817 	ldw	r2,-32(fp)
  214c20:	10800820 	cmpeqi	r2,r2,32
  214c24:	10002c1e 	bne	r2,zero,214cd8 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  214c28:	e0bff717 	ldw	r2,-36(fp)
  214c2c:	1004913a 	slli	r2,r2,4
  214c30:	e0fffd17 	ldw	r3,-12(fp)
  214c34:	1885883a 	add	r2,r3,r2
  214c38:	e0fffe17 	ldw	r3,-8(fp)
  214c3c:	18c03117 	ldw	r3,196(r3)
  214c40:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  214c44:	e0bff717 	ldw	r2,-36(fp)
  214c48:	1004913a 	slli	r2,r2,4
  214c4c:	e0fffd17 	ldw	r3,-12(fp)
  214c50:	1885883a 	add	r2,r3,r2
  214c54:	e0fffe17 	ldw	r3,-8(fp)
  214c58:	19003217 	ldw	r4,200(r3)
  214c5c:	e0fffe17 	ldw	r3,-8(fp)
  214c60:	18c03117 	ldw	r3,196(r3)
  214c64:	20c7c83a 	sub	r3,r4,r3
  214c68:	18c00044 	addi	r3,r3,1
  214c6c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214c70:	e0bff717 	ldw	r2,-36(fp)
  214c74:	1004913a 	slli	r2,r2,4
  214c78:	e0fffd17 	ldw	r3,-12(fp)
  214c7c:	18a1883a 	add	r16,r3,r2
  214c80:	e0fffe17 	ldw	r3,-8(fp)
  214c84:	e0bff717 	ldw	r2,-36(fp)
  214c88:	1004913a 	slli	r2,r2,4
  214c8c:	1885883a 	add	r2,r3,r2
  214c90:	10800e04 	addi	r2,r2,56
  214c94:	10c00017 	ldw	r3,0(r2)
  214c98:	e0bffe17 	ldw	r2,-8(fp)
  214c9c:	10803f17 	ldw	r2,252(r2)
  214ca0:	100b883a 	mov	r5,r2
  214ca4:	1809883a 	mov	r4,r3
  214ca8:	02030f00 	call	2030f0 <__divsi3>
  214cac:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214cb0:	e0bff717 	ldw	r2,-36(fp)
  214cb4:	1004913a 	slli	r2,r2,4
  214cb8:	e0fffd17 	ldw	r3,-12(fp)
  214cbc:	1885883a 	add	r2,r3,r2
  214cc0:	e0fffe17 	ldw	r3,-8(fp)
  214cc4:	18c03f17 	ldw	r3,252(r3)
  214cc8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214ccc:	e0bff717 	ldw	r2,-36(fp)
  214cd0:	10800044 	addi	r2,r2,1
  214cd4:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  214cd8:	e0bffe17 	ldw	r2,-8(fp)
  214cdc:	10803317 	ldw	r2,204(r2)
  214ce0:	10800058 	cmpnei	r2,r2,1
  214ce4:	10002f1e 	bne	r2,zero,214da4 <altera_onchip_flash_init+0x244>
  214ce8:	e0bff917 	ldw	r2,-28(fp)
  214cec:	10801020 	cmpeqi	r2,r2,64
  214cf0:	10002c1e 	bne	r2,zero,214da4 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  214cf4:	e0bff717 	ldw	r2,-36(fp)
  214cf8:	1004913a 	slli	r2,r2,4
  214cfc:	e0fffd17 	ldw	r3,-12(fp)
  214d00:	1885883a 	add	r2,r3,r2
  214d04:	e0fffe17 	ldw	r3,-8(fp)
  214d08:	18c03417 	ldw	r3,208(r3)
  214d0c:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  214d10:	e0bff717 	ldw	r2,-36(fp)
  214d14:	1004913a 	slli	r2,r2,4
  214d18:	e0fffd17 	ldw	r3,-12(fp)
  214d1c:	1885883a 	add	r2,r3,r2
  214d20:	e0fffe17 	ldw	r3,-8(fp)
  214d24:	19003517 	ldw	r4,212(r3)
  214d28:	e0fffe17 	ldw	r3,-8(fp)
  214d2c:	18c03417 	ldw	r3,208(r3)
  214d30:	20c7c83a 	sub	r3,r4,r3
  214d34:	18c00044 	addi	r3,r3,1
  214d38:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214d3c:	e0bff717 	ldw	r2,-36(fp)
  214d40:	1004913a 	slli	r2,r2,4
  214d44:	e0fffd17 	ldw	r3,-12(fp)
  214d48:	18a1883a 	add	r16,r3,r2
  214d4c:	e0fffe17 	ldw	r3,-8(fp)
  214d50:	e0bff717 	ldw	r2,-36(fp)
  214d54:	1004913a 	slli	r2,r2,4
  214d58:	1885883a 	add	r2,r3,r2
  214d5c:	10800e04 	addi	r2,r2,56
  214d60:	10c00017 	ldw	r3,0(r2)
  214d64:	e0bffe17 	ldw	r2,-8(fp)
  214d68:	10803f17 	ldw	r2,252(r2)
  214d6c:	100b883a 	mov	r5,r2
  214d70:	1809883a 	mov	r4,r3
  214d74:	02030f00 	call	2030f0 <__divsi3>
  214d78:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214d7c:	e0bff717 	ldw	r2,-36(fp)
  214d80:	1004913a 	slli	r2,r2,4
  214d84:	e0fffd17 	ldw	r3,-12(fp)
  214d88:	1885883a 	add	r2,r3,r2
  214d8c:	e0fffe17 	ldw	r3,-8(fp)
  214d90:	18c03f17 	ldw	r3,252(r3)
  214d94:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214d98:	e0bff717 	ldw	r2,-36(fp)
  214d9c:	10800044 	addi	r2,r2,1
  214da0:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  214da4:	e0bffe17 	ldw	r2,-8(fp)
  214da8:	10803617 	ldw	r2,216(r2)
  214dac:	10800058 	cmpnei	r2,r2,1
  214db0:	10002f1e 	bne	r2,zero,214e70 <altera_onchip_flash_init+0x310>
  214db4:	e0bffa17 	ldw	r2,-24(fp)
  214db8:	10802020 	cmpeqi	r2,r2,128
  214dbc:	10002c1e 	bne	r2,zero,214e70 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  214dc0:	e0bff717 	ldw	r2,-36(fp)
  214dc4:	1004913a 	slli	r2,r2,4
  214dc8:	e0fffd17 	ldw	r3,-12(fp)
  214dcc:	1885883a 	add	r2,r3,r2
  214dd0:	e0fffe17 	ldw	r3,-8(fp)
  214dd4:	18c03717 	ldw	r3,220(r3)
  214dd8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  214ddc:	e0bff717 	ldw	r2,-36(fp)
  214de0:	1004913a 	slli	r2,r2,4
  214de4:	e0fffd17 	ldw	r3,-12(fp)
  214de8:	1885883a 	add	r2,r3,r2
  214dec:	e0fffe17 	ldw	r3,-8(fp)
  214df0:	19003817 	ldw	r4,224(r3)
  214df4:	e0fffe17 	ldw	r3,-8(fp)
  214df8:	18c03717 	ldw	r3,220(r3)
  214dfc:	20c7c83a 	sub	r3,r4,r3
  214e00:	18c00044 	addi	r3,r3,1
  214e04:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214e08:	e0bff717 	ldw	r2,-36(fp)
  214e0c:	1004913a 	slli	r2,r2,4
  214e10:	e0fffd17 	ldw	r3,-12(fp)
  214e14:	18a1883a 	add	r16,r3,r2
  214e18:	e0fffe17 	ldw	r3,-8(fp)
  214e1c:	e0bff717 	ldw	r2,-36(fp)
  214e20:	1004913a 	slli	r2,r2,4
  214e24:	1885883a 	add	r2,r3,r2
  214e28:	10800e04 	addi	r2,r2,56
  214e2c:	10c00017 	ldw	r3,0(r2)
  214e30:	e0bffe17 	ldw	r2,-8(fp)
  214e34:	10803f17 	ldw	r2,252(r2)
  214e38:	100b883a 	mov	r5,r2
  214e3c:	1809883a 	mov	r4,r3
  214e40:	02030f00 	call	2030f0 <__divsi3>
  214e44:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214e48:	e0bff717 	ldw	r2,-36(fp)
  214e4c:	1004913a 	slli	r2,r2,4
  214e50:	e0fffd17 	ldw	r3,-12(fp)
  214e54:	1885883a 	add	r2,r3,r2
  214e58:	e0fffe17 	ldw	r3,-8(fp)
  214e5c:	18c03f17 	ldw	r3,252(r3)
  214e60:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214e64:	e0bff717 	ldw	r2,-36(fp)
  214e68:	10800044 	addi	r2,r2,1
  214e6c:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  214e70:	e0bffe17 	ldw	r2,-8(fp)
  214e74:	10803917 	ldw	r2,228(r2)
  214e78:	10800058 	cmpnei	r2,r2,1
  214e7c:	10002f1e 	bne	r2,zero,214f3c <altera_onchip_flash_init+0x3dc>
  214e80:	e0bffb17 	ldw	r2,-20(fp)
  214e84:	10804020 	cmpeqi	r2,r2,256
  214e88:	10002c1e 	bne	r2,zero,214f3c <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  214e8c:	e0bff717 	ldw	r2,-36(fp)
  214e90:	1004913a 	slli	r2,r2,4
  214e94:	e0fffd17 	ldw	r3,-12(fp)
  214e98:	1885883a 	add	r2,r3,r2
  214e9c:	e0fffe17 	ldw	r3,-8(fp)
  214ea0:	18c03a17 	ldw	r3,232(r3)
  214ea4:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  214ea8:	e0bff717 	ldw	r2,-36(fp)
  214eac:	1004913a 	slli	r2,r2,4
  214eb0:	e0fffd17 	ldw	r3,-12(fp)
  214eb4:	1885883a 	add	r2,r3,r2
  214eb8:	e0fffe17 	ldw	r3,-8(fp)
  214ebc:	19003b17 	ldw	r4,236(r3)
  214ec0:	e0fffe17 	ldw	r3,-8(fp)
  214ec4:	18c03a17 	ldw	r3,232(r3)
  214ec8:	20c7c83a 	sub	r3,r4,r3
  214ecc:	18c00044 	addi	r3,r3,1
  214ed0:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214ed4:	e0bff717 	ldw	r2,-36(fp)
  214ed8:	1004913a 	slli	r2,r2,4
  214edc:	e0fffd17 	ldw	r3,-12(fp)
  214ee0:	18a1883a 	add	r16,r3,r2
  214ee4:	e0fffe17 	ldw	r3,-8(fp)
  214ee8:	e0bff717 	ldw	r2,-36(fp)
  214eec:	1004913a 	slli	r2,r2,4
  214ef0:	1885883a 	add	r2,r3,r2
  214ef4:	10800e04 	addi	r2,r2,56
  214ef8:	10c00017 	ldw	r3,0(r2)
  214efc:	e0bffe17 	ldw	r2,-8(fp)
  214f00:	10803f17 	ldw	r2,252(r2)
  214f04:	100b883a 	mov	r5,r2
  214f08:	1809883a 	mov	r4,r3
  214f0c:	02030f00 	call	2030f0 <__divsi3>
  214f10:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214f14:	e0bff717 	ldw	r2,-36(fp)
  214f18:	1004913a 	slli	r2,r2,4
  214f1c:	e0fffd17 	ldw	r3,-12(fp)
  214f20:	1885883a 	add	r2,r3,r2
  214f24:	e0fffe17 	ldw	r3,-8(fp)
  214f28:	18c03f17 	ldw	r3,252(r3)
  214f2c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214f30:	e0bff717 	ldw	r2,-36(fp)
  214f34:	10800044 	addi	r2,r2,1
  214f38:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  214f3c:	e0bffe17 	ldw	r2,-8(fp)
  214f40:	10803c17 	ldw	r2,240(r2)
  214f44:	10800058 	cmpnei	r2,r2,1
  214f48:	10002f1e 	bne	r2,zero,215008 <altera_onchip_flash_init+0x4a8>
  214f4c:	e0bffc17 	ldw	r2,-16(fp)
  214f50:	10808020 	cmpeqi	r2,r2,512
  214f54:	10002c1e 	bne	r2,zero,215008 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  214f58:	e0bff717 	ldw	r2,-36(fp)
  214f5c:	1004913a 	slli	r2,r2,4
  214f60:	e0fffd17 	ldw	r3,-12(fp)
  214f64:	1885883a 	add	r2,r3,r2
  214f68:	e0fffe17 	ldw	r3,-8(fp)
  214f6c:	18c03d17 	ldw	r3,244(r3)
  214f70:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  214f74:	e0bff717 	ldw	r2,-36(fp)
  214f78:	1004913a 	slli	r2,r2,4
  214f7c:	e0fffd17 	ldw	r3,-12(fp)
  214f80:	1885883a 	add	r2,r3,r2
  214f84:	e0fffe17 	ldw	r3,-8(fp)
  214f88:	19003e17 	ldw	r4,248(r3)
  214f8c:	e0fffe17 	ldw	r3,-8(fp)
  214f90:	18c03d17 	ldw	r3,244(r3)
  214f94:	20c7c83a 	sub	r3,r4,r3
  214f98:	18c00044 	addi	r3,r3,1
  214f9c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214fa0:	e0bff717 	ldw	r2,-36(fp)
  214fa4:	1004913a 	slli	r2,r2,4
  214fa8:	e0fffd17 	ldw	r3,-12(fp)
  214fac:	18a1883a 	add	r16,r3,r2
  214fb0:	e0fffe17 	ldw	r3,-8(fp)
  214fb4:	e0bff717 	ldw	r2,-36(fp)
  214fb8:	1004913a 	slli	r2,r2,4
  214fbc:	1885883a 	add	r2,r3,r2
  214fc0:	10800e04 	addi	r2,r2,56
  214fc4:	10c00017 	ldw	r3,0(r2)
  214fc8:	e0bffe17 	ldw	r2,-8(fp)
  214fcc:	10803f17 	ldw	r2,252(r2)
  214fd0:	100b883a 	mov	r5,r2
  214fd4:	1809883a 	mov	r4,r3
  214fd8:	02030f00 	call	2030f0 <__divsi3>
  214fdc:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214fe0:	e0bff717 	ldw	r2,-36(fp)
  214fe4:	1004913a 	slli	r2,r2,4
  214fe8:	e0fffd17 	ldw	r3,-12(fp)
  214fec:	1885883a 	add	r2,r3,r2
  214ff0:	e0fffe17 	ldw	r3,-8(fp)
  214ff4:	18c03f17 	ldw	r3,252(r3)
  214ff8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214ffc:	e0bff717 	ldw	r2,-36(fp)
  215000:	10800044 	addi	r2,r2,1
  215004:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  215008:	e0bffe17 	ldw	r2,-8(fp)
  21500c:	e0fff717 	ldw	r3,-36(fp)
  215010:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  215014:	e0bffe17 	ldw	r2,-8(fp)
  215018:	1009883a 	mov	r4,r2
  21501c:	02142ac0 	call	2142ac <alt_flash_device_register>
}
  215020:	0001883a 	nop
  215024:	e6ffff04 	addi	sp,fp,-4
  215028:	dfc00217 	ldw	ra,8(sp)
  21502c:	df000117 	ldw	fp,4(sp)
  215030:	dc000017 	ldw	r16,0(sp)
  215034:	dec00304 	addi	sp,sp,12
  215038:	f800283a 	ret

0021503c <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  21503c:	defffa04 	addi	sp,sp,-24
  215040:	dfc00515 	stw	ra,20(sp)
  215044:	df000415 	stw	fp,16(sp)
  215048:	df000404 	addi	fp,sp,16
  21504c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  215050:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215054:	008002f4 	movhi	r2,11
  215058:	10ab9804 	addi	r2,r2,-20896
  21505c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215060:	008002f4 	movhi	r2,11
  215064:	10ab9804 	addi	r2,r2,-20896
  215068:	e0bffd15 	stw	r2,-12(fp)

    while (
  21506c:	00000c06 	br	2150a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  215070:	01000044 	movi	r4,1
  215074:	02153180 	call	215318 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  215078:	e0bffe17 	ldw	r2,-8(fp)
  21507c:	10000826 	beq	r2,zero,2150a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  215080:	e0bffd17 	ldw	r2,-12(fp)
  215084:	10bfffc4 	addi	r2,r2,-1
  215088:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  21508c:	e0bffd17 	ldw	r2,-12(fp)
  215090:	1000031e 	bne	r2,zero,2150a0 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  215094:	00bfe304 	movi	r2,-116
  215098:	e0bffc15 	stw	r2,-16(fp)
                break;
  21509c:	00000506 	br	2150b4 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  2150a0:	e0bfff17 	ldw	r2,-4(fp)
  2150a4:	10802f17 	ldw	r2,188(r2)
  2150a8:	10800037 	ldwio	r2,0(r2)
  2150ac:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  2150b0:	103fef1e 	bne	r2,zero,215070 <_gp+0xffe0345c>
                break;
            }
        }
    }

    return ret_code;
  2150b4:	e0bffc17 	ldw	r2,-16(fp)
}
  2150b8:	e037883a 	mov	sp,fp
  2150bc:	dfc00117 	ldw	ra,4(sp)
  2150c0:	df000017 	ldw	fp,0(sp)
  2150c4:	dec00204 	addi	sp,sp,8
  2150c8:	f800283a 	ret

002150cc <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  2150cc:	defffa04 	addi	sp,sp,-24
  2150d0:	dfc00515 	stw	ra,20(sp)
  2150d4:	df000415 	stw	fp,16(sp)
  2150d8:	df000404 	addi	fp,sp,16
  2150dc:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  2150e0:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2150e4:	008002f4 	movhi	r2,11
  2150e8:	10ab9804 	addi	r2,r2,-20896
  2150ec:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2150f0:	008002f4 	movhi	r2,11
  2150f4:	10ab9804 	addi	r2,r2,-20896
  2150f8:	e0bffd15 	stw	r2,-12(fp)

    while (
  2150fc:	00000c06 	br	215130 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  215100:	01000044 	movi	r4,1
  215104:	02153180 	call	215318 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  215108:	e0bffe17 	ldw	r2,-8(fp)
  21510c:	10000826 	beq	r2,zero,215130 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  215110:	e0bffd17 	ldw	r2,-12(fp)
  215114:	10bfffc4 	addi	r2,r2,-1
  215118:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  21511c:	e0bffd17 	ldw	r2,-12(fp)
  215120:	1000031e 	bne	r2,zero,215130 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  215124:	00bfe304 	movi	r2,-116
  215128:	e0bffc15 	stw	r2,-16(fp)
                break;
  21512c:	00000506 	br	215144 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  215130:	e0bfff17 	ldw	r2,-4(fp)
  215134:	10802f17 	ldw	r2,188(r2)
  215138:	10800037 	ldwio	r2,0(r2)
  21513c:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  215140:	103fef26 	beq	r2,zero,215100 <_gp+0xffe034ec>
                break;
            }
        }
    }

    return ret_code;
  215144:	e0bffc17 	ldw	r2,-16(fp)
}
  215148:	e037883a 	mov	sp,fp
  21514c:	dfc00117 	ldw	ra,4(sp)
  215150:	df000017 	ldw	fp,0(sp)
  215154:	dec00204 	addi	sp,sp,8
  215158:	f800283a 	ret

0021515c <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  21515c:	defffa04 	addi	sp,sp,-24
  215160:	dfc00515 	stw	ra,20(sp)
  215164:	df000415 	stw	fp,16(sp)
  215168:	df000404 	addi	fp,sp,16
  21516c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  215170:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215174:	008002f4 	movhi	r2,11
  215178:	10ab9804 	addi	r2,r2,-20896
  21517c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215180:	008002f4 	movhi	r2,11
  215184:	10ab9804 	addi	r2,r2,-20896
  215188:	e0bffd15 	stw	r2,-12(fp)

    while (
  21518c:	00000c06 	br	2151c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  215190:	01000044 	movi	r4,1
  215194:	02153180 	call	215318 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  215198:	e0bffe17 	ldw	r2,-8(fp)
  21519c:	10000826 	beq	r2,zero,2151c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  2151a0:	e0bffd17 	ldw	r2,-12(fp)
  2151a4:	10bfffc4 	addi	r2,r2,-1
  2151a8:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2151ac:	e0bffd17 	ldw	r2,-12(fp)
  2151b0:	1000031e 	bne	r2,zero,2151c0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2151b4:	00bfe304 	movi	r2,-116
  2151b8:	e0bffc15 	stw	r2,-16(fp)
                break;
  2151bc:	00000506 	br	2151d4 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  2151c0:	e0bfff17 	ldw	r2,-4(fp)
  2151c4:	10802f17 	ldw	r2,188(r2)
  2151c8:	10800037 	ldwio	r2,0(r2)
  2151cc:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  2151d0:	103fef26 	beq	r2,zero,215190 <_gp+0xffe0357c>
                break;
            }
        }
    }

    return ret_code;
  2151d4:	e0bffc17 	ldw	r2,-16(fp)
}
  2151d8:	e037883a 	mov	sp,fp
  2151dc:	dfc00117 	ldw	ra,4(sp)
  2151e0:	df000017 	ldw	fp,0(sp)
  2151e4:	dec00204 	addi	sp,sp,8
  2151e8:	f800283a 	ret

002151ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  2151ec:	defff504 	addi	sp,sp,-44
  2151f0:	df000a15 	stw	fp,40(sp)
  2151f4:	df000a04 	addi	fp,sp,40
  2151f8:	e13ffc15 	stw	r4,-16(fp)
  2151fc:	e17ffd15 	stw	r5,-12(fp)
  215200:	e1bffe15 	stw	r6,-8(fp)
  215204:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  215208:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  21520c:	d0a02a17 	ldw	r2,-32600(gp)
  
  if (alt_ticks_per_second ())
  215210:	10003c26 	beq	r2,zero,215304 <alt_alarm_start+0x118>
  {
    if (alarm)
  215214:	e0bffc17 	ldw	r2,-16(fp)
  215218:	10003826 	beq	r2,zero,2152fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  21521c:	e0bffc17 	ldw	r2,-16(fp)
  215220:	e0fffe17 	ldw	r3,-8(fp)
  215224:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  215228:	e0bffc17 	ldw	r2,-16(fp)
  21522c:	e0ffff17 	ldw	r3,-4(fp)
  215230:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  215234:	0005303a 	rdctl	r2,status
  215238:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21523c:	e0fff917 	ldw	r3,-28(fp)
  215240:	00bfff84 	movi	r2,-2
  215244:	1884703a 	and	r2,r3,r2
  215248:	1001703a 	wrctl	status,r2
  
  return context;
  21524c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  215250:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  215254:	d0a02b17 	ldw	r2,-32596(gp)
      
      current_nticks = alt_nticks();
  215258:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  21525c:	e0fffd17 	ldw	r3,-12(fp)
  215260:	e0bff617 	ldw	r2,-40(fp)
  215264:	1885883a 	add	r2,r3,r2
  215268:	10c00044 	addi	r3,r2,1
  21526c:	e0bffc17 	ldw	r2,-16(fp)
  215270:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  215274:	e0bffc17 	ldw	r2,-16(fp)
  215278:	10c00217 	ldw	r3,8(r2)
  21527c:	e0bff617 	ldw	r2,-40(fp)
  215280:	1880042e 	bgeu	r3,r2,215294 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  215284:	e0bffc17 	ldw	r2,-16(fp)
  215288:	00c00044 	movi	r3,1
  21528c:	10c00405 	stb	r3,16(r2)
  215290:	00000206 	br	21529c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  215294:	e0bffc17 	ldw	r2,-16(fp)
  215298:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  21529c:	e0bffc17 	ldw	r2,-16(fp)
  2152a0:	d0e01104 	addi	r3,gp,-32700
  2152a4:	e0fffa15 	stw	r3,-24(fp)
  2152a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2152ac:	e0bffb17 	ldw	r2,-20(fp)
  2152b0:	e0fffa17 	ldw	r3,-24(fp)
  2152b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2152b8:	e0bffa17 	ldw	r2,-24(fp)
  2152bc:	10c00017 	ldw	r3,0(r2)
  2152c0:	e0bffb17 	ldw	r2,-20(fp)
  2152c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2152c8:	e0bffa17 	ldw	r2,-24(fp)
  2152cc:	10800017 	ldw	r2,0(r2)
  2152d0:	e0fffb17 	ldw	r3,-20(fp)
  2152d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  2152d8:	e0bffa17 	ldw	r2,-24(fp)
  2152dc:	e0fffb17 	ldw	r3,-20(fp)
  2152e0:	10c00015 	stw	r3,0(r2)
  2152e4:	e0bff817 	ldw	r2,-32(fp)
  2152e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2152ec:	e0bff717 	ldw	r2,-36(fp)
  2152f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  2152f4:	0005883a 	mov	r2,zero
  2152f8:	00000306 	br	215308 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  2152fc:	00bffa84 	movi	r2,-22
  215300:	00000106 	br	215308 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  215304:	00bfde84 	movi	r2,-134
  }
}
  215308:	e037883a 	mov	sp,fp
  21530c:	df000017 	ldw	fp,0(sp)
  215310:	dec00104 	addi	sp,sp,4
  215314:	f800283a 	ret

00215318 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  215318:	defffa04 	addi	sp,sp,-24
  21531c:	dfc00515 	stw	ra,20(sp)
  215320:	df000415 	stw	fp,16(sp)
  215324:	df000404 	addi	fp,sp,16
  215328:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  21532c:	00800244 	movi	r2,9
  215330:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  215334:	014003f4 	movhi	r5,15
  215338:	29509004 	addi	r5,r5,16960
  21533c:	e13ffd17 	ldw	r4,-12(fp)
  215340:	02032a40 	call	2032a4 <__mulsi3>
  215344:	100b883a 	mov	r5,r2
  215348:	0100bef4 	movhi	r4,763
  21534c:	213c2004 	addi	r4,r4,-3968
  215350:	02031e80 	call	2031e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  215354:	100b883a 	mov	r5,r2
  215358:	01200034 	movhi	r4,32768
  21535c:	213fffc4 	addi	r4,r4,-1
  215360:	02031e80 	call	2031e8 <__udivsi3>
  215364:	100b883a 	mov	r5,r2
  215368:	e13fff17 	ldw	r4,-4(fp)
  21536c:	02031e80 	call	2031e8 <__udivsi3>
  215370:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  215374:	e0bffe17 	ldw	r2,-8(fp)
  215378:	10002a26 	beq	r2,zero,215424 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  21537c:	e03ffc15 	stw	zero,-16(fp)
  215380:	00001706 	br	2153e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  215384:	00a00034 	movhi	r2,32768
  215388:	10bfffc4 	addi	r2,r2,-1
  21538c:	10bfffc4 	addi	r2,r2,-1
  215390:	103ffe1e 	bne	r2,zero,21538c <_gp+0xffe03778>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  215394:	014003f4 	movhi	r5,15
  215398:	29509004 	addi	r5,r5,16960
  21539c:	e13ffd17 	ldw	r4,-12(fp)
  2153a0:	02032a40 	call	2032a4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  2153a4:	100b883a 	mov	r5,r2
  2153a8:	0100bef4 	movhi	r4,763
  2153ac:	213c2004 	addi	r4,r4,-3968
  2153b0:	02031e80 	call	2031e8 <__udivsi3>
  2153b4:	100b883a 	mov	r5,r2
  2153b8:	01200034 	movhi	r4,32768
  2153bc:	213fffc4 	addi	r4,r4,-1
  2153c0:	02031e80 	call	2031e8 <__udivsi3>
  2153c4:	1007883a 	mov	r3,r2
  2153c8:	e0bfff17 	ldw	r2,-4(fp)
  2153cc:	10c5c83a 	sub	r2,r2,r3
  2153d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  2153d4:	e0bffc17 	ldw	r2,-16(fp)
  2153d8:	10800044 	addi	r2,r2,1
  2153dc:	e0bffc15 	stw	r2,-16(fp)
  2153e0:	e0fffc17 	ldw	r3,-16(fp)
  2153e4:	e0bffe17 	ldw	r2,-8(fp)
  2153e8:	18bfe616 	blt	r3,r2,215384 <_gp+0xffe03770>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  2153ec:	014003f4 	movhi	r5,15
  2153f0:	29509004 	addi	r5,r5,16960
  2153f4:	e13ffd17 	ldw	r4,-12(fp)
  2153f8:	02032a40 	call	2032a4 <__mulsi3>
  2153fc:	100b883a 	mov	r5,r2
  215400:	0100bef4 	movhi	r4,763
  215404:	213c2004 	addi	r4,r4,-3968
  215408:	02031e80 	call	2031e8 <__udivsi3>
  21540c:	e17fff17 	ldw	r5,-4(fp)
  215410:	1009883a 	mov	r4,r2
  215414:	02032a40 	call	2032a4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  215418:	10bfffc4 	addi	r2,r2,-1
  21541c:	103ffe1e 	bne	r2,zero,215418 <_gp+0xffe03804>
  215420:	00000d06 	br	215458 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  215424:	014003f4 	movhi	r5,15
  215428:	29509004 	addi	r5,r5,16960
  21542c:	e13ffd17 	ldw	r4,-12(fp)
  215430:	02032a40 	call	2032a4 <__mulsi3>
  215434:	100b883a 	mov	r5,r2
  215438:	0100bef4 	movhi	r4,763
  21543c:	213c2004 	addi	r4,r4,-3968
  215440:	02031e80 	call	2031e8 <__udivsi3>
  215444:	e17fff17 	ldw	r5,-4(fp)
  215448:	1009883a 	mov	r4,r2
  21544c:	02032a40 	call	2032a4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  215450:	10bfffc4 	addi	r2,r2,-1
  215454:	00bffe16 	blt	zero,r2,215450 <_gp+0xffe0383c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  215458:	0005883a 	mov	r2,zero
}
  21545c:	e037883a 	mov	sp,fp
  215460:	dfc00117 	ldw	ra,4(sp)
  215464:	df000017 	ldw	fp,0(sp)
  215468:	dec00204 	addi	sp,sp,8
  21546c:	f800283a 	ret

00215470 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  215470:	defffd04 	addi	sp,sp,-12
  215474:	df000215 	stw	fp,8(sp)
  215478:	df000204 	addi	fp,sp,8
  21547c:	e13ffe15 	stw	r4,-8(fp)
  215480:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  215484:	0001883a 	nop
  215488:	e037883a 	mov	sp,fp
  21548c:	df000017 	ldw	fp,0(sp)
  215490:	dec00104 	addi	sp,sp,4
  215494:	f800283a 	ret

00215498 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  215498:	deffff04 	addi	sp,sp,-4
  21549c:	df000015 	stw	fp,0(sp)
  2154a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2154a4:	0001883a 	nop
  2154a8:	e037883a 	mov	sp,fp
  2154ac:	df000017 	ldw	fp,0(sp)
  2154b0:	dec00104 	addi	sp,sp,4
  2154b4:	f800283a 	ret

002154b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2154b8:	defffe04 	addi	sp,sp,-8
  2154bc:	dfc00115 	stw	ra,4(sp)
  2154c0:	df000015 	stw	fp,0(sp)
  2154c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2154c8:	d0a00f17 	ldw	r2,-32708(gp)
  2154cc:	10000326 	beq	r2,zero,2154dc <alt_get_errno+0x24>
  2154d0:	d0a00f17 	ldw	r2,-32708(gp)
  2154d4:	103ee83a 	callr	r2
  2154d8:	00000106 	br	2154e0 <alt_get_errno+0x28>
  2154dc:	d0a02604 	addi	r2,gp,-32616
}
  2154e0:	e037883a 	mov	sp,fp
  2154e4:	dfc00117 	ldw	ra,4(sp)
  2154e8:	df000017 	ldw	fp,0(sp)
  2154ec:	dec00204 	addi	sp,sp,8
  2154f0:	f800283a 	ret

002154f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  2154f4:	defffa04 	addi	sp,sp,-24
  2154f8:	dfc00515 	stw	ra,20(sp)
  2154fc:	df000415 	stw	fp,16(sp)
  215500:	df000404 	addi	fp,sp,16
  215504:	e13ffe15 	stw	r4,-8(fp)
  215508:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  21550c:	e0bffe17 	ldw	r2,-8(fp)
  215510:	10000326 	beq	r2,zero,215520 <alt_dev_llist_insert+0x2c>
  215514:	e0bffe17 	ldw	r2,-8(fp)
  215518:	10800217 	ldw	r2,8(r2)
  21551c:	1000061e 	bne	r2,zero,215538 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  215520:	02154b80 	call	2154b8 <alt_get_errno>
  215524:	1007883a 	mov	r3,r2
  215528:	00800584 	movi	r2,22
  21552c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  215530:	00bffa84 	movi	r2,-22
  215534:	00001306 	br	215584 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  215538:	e0bffe17 	ldw	r2,-8(fp)
  21553c:	e0ffff17 	ldw	r3,-4(fp)
  215540:	e0fffc15 	stw	r3,-16(fp)
  215544:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  215548:	e0bffd17 	ldw	r2,-12(fp)
  21554c:	e0fffc17 	ldw	r3,-16(fp)
  215550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  215554:	e0bffc17 	ldw	r2,-16(fp)
  215558:	10c00017 	ldw	r3,0(r2)
  21555c:	e0bffd17 	ldw	r2,-12(fp)
  215560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  215564:	e0bffc17 	ldw	r2,-16(fp)
  215568:	10800017 	ldw	r2,0(r2)
  21556c:	e0fffd17 	ldw	r3,-12(fp)
  215570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  215574:	e0bffc17 	ldw	r2,-16(fp)
  215578:	e0fffd17 	ldw	r3,-12(fp)
  21557c:	10c00015 	stw	r3,0(r2)

  return 0;  
  215580:	0005883a 	mov	r2,zero
}
  215584:	e037883a 	mov	sp,fp
  215588:	dfc00117 	ldw	ra,4(sp)
  21558c:	df000017 	ldw	fp,0(sp)
  215590:	dec00204 	addi	sp,sp,8
  215594:	f800283a 	ret

00215598 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  215598:	defffd04 	addi	sp,sp,-12
  21559c:	dfc00215 	stw	ra,8(sp)
  2155a0:	df000115 	stw	fp,4(sp)
  2155a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  2155a8:	00800874 	movhi	r2,33
  2155ac:	1099b304 	addi	r2,r2,26316
  2155b0:	e0bfff15 	stw	r2,-4(fp)
  2155b4:	00000606 	br	2155d0 <_do_ctors+0x38>
        (*ctor) (); 
  2155b8:	e0bfff17 	ldw	r2,-4(fp)
  2155bc:	10800017 	ldw	r2,0(r2)
  2155c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  2155c4:	e0bfff17 	ldw	r2,-4(fp)
  2155c8:	10bfff04 	addi	r2,r2,-4
  2155cc:	e0bfff15 	stw	r2,-4(fp)
  2155d0:	e0ffff17 	ldw	r3,-4(fp)
  2155d4:	00800874 	movhi	r2,33
  2155d8:	1099b404 	addi	r2,r2,26320
  2155dc:	18bff62e 	bgeu	r3,r2,2155b8 <_gp+0xffe039a4>
        (*ctor) (); 
}
  2155e0:	0001883a 	nop
  2155e4:	e037883a 	mov	sp,fp
  2155e8:	dfc00117 	ldw	ra,4(sp)
  2155ec:	df000017 	ldw	fp,0(sp)
  2155f0:	dec00204 	addi	sp,sp,8
  2155f4:	f800283a 	ret

002155f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  2155f8:	defffd04 	addi	sp,sp,-12
  2155fc:	dfc00215 	stw	ra,8(sp)
  215600:	df000115 	stw	fp,4(sp)
  215604:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  215608:	00800874 	movhi	r2,33
  21560c:	1099b304 	addi	r2,r2,26316
  215610:	e0bfff15 	stw	r2,-4(fp)
  215614:	00000606 	br	215630 <_do_dtors+0x38>
        (*dtor) (); 
  215618:	e0bfff17 	ldw	r2,-4(fp)
  21561c:	10800017 	ldw	r2,0(r2)
  215620:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  215624:	e0bfff17 	ldw	r2,-4(fp)
  215628:	10bfff04 	addi	r2,r2,-4
  21562c:	e0bfff15 	stw	r2,-4(fp)
  215630:	e0ffff17 	ldw	r3,-4(fp)
  215634:	00800874 	movhi	r2,33
  215638:	1099b404 	addi	r2,r2,26320
  21563c:	18bff62e 	bgeu	r3,r2,215618 <_gp+0xffe03a04>
        (*dtor) (); 
}
  215640:	0001883a 	nop
  215644:	e037883a 	mov	sp,fp
  215648:	dfc00117 	ldw	ra,4(sp)
  21564c:	df000017 	ldw	fp,0(sp)
  215650:	dec00204 	addi	sp,sp,8
  215654:	f800283a 	ret

00215658 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  215658:	defffa04 	addi	sp,sp,-24
  21565c:	dfc00515 	stw	ra,20(sp)
  215660:	df000415 	stw	fp,16(sp)
  215664:	df000404 	addi	fp,sp,16
  215668:	e13ffe15 	stw	r4,-8(fp)
  21566c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  215670:	e0bfff17 	ldw	r2,-4(fp)
  215674:	10800017 	ldw	r2,0(r2)
  215678:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  21567c:	e13ffe17 	ldw	r4,-8(fp)
  215680:	0203fc00 	call	203fc0 <strlen>
  215684:	10800044 	addi	r2,r2,1
  215688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  21568c:	00000d06 	br	2156c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  215690:	e0bffc17 	ldw	r2,-16(fp)
  215694:	10800217 	ldw	r2,8(r2)
  215698:	e0fffd17 	ldw	r3,-12(fp)
  21569c:	180d883a 	mov	r6,r3
  2156a0:	e17ffe17 	ldw	r5,-8(fp)
  2156a4:	1009883a 	mov	r4,r2
  2156a8:	02163880 	call	216388 <memcmp>
  2156ac:	1000021e 	bne	r2,zero,2156b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  2156b0:	e0bffc17 	ldw	r2,-16(fp)
  2156b4:	00000706 	br	2156d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  2156b8:	e0bffc17 	ldw	r2,-16(fp)
  2156bc:	10800017 	ldw	r2,0(r2)
  2156c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  2156c4:	e0fffc17 	ldw	r3,-16(fp)
  2156c8:	e0bfff17 	ldw	r2,-4(fp)
  2156cc:	18bff01e 	bne	r3,r2,215690 <_gp+0xffe03a7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  2156d0:	0005883a 	mov	r2,zero
}
  2156d4:	e037883a 	mov	sp,fp
  2156d8:	dfc00117 	ldw	ra,4(sp)
  2156dc:	df000017 	ldw	fp,0(sp)
  2156e0:	dec00204 	addi	sp,sp,8
  2156e4:	f800283a 	ret

002156e8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  2156e8:	defffc04 	addi	sp,sp,-16
  2156ec:	dfc00315 	stw	ra,12(sp)
  2156f0:	df000215 	stw	fp,8(sp)
  2156f4:	df000204 	addi	fp,sp,8
  2156f8:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  2156fc:	d1601704 	addi	r5,gp,-32676
  215700:	e13fff17 	ldw	r4,-4(fp)
  215704:	02156580 	call	215658 <alt_find_dev>
  215708:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  21570c:	e0bffe17 	ldw	r2,-8(fp)
  215710:	10000926 	beq	r2,zero,215738 <alt_flash_open_dev+0x50>
  215714:	e0bffe17 	ldw	r2,-8(fp)
  215718:	10800317 	ldw	r2,12(r2)
  21571c:	10000626 	beq	r2,zero,215738 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  215720:	e0bffe17 	ldw	r2,-8(fp)
  215724:	10800317 	ldw	r2,12(r2)
  215728:	e17fff17 	ldw	r5,-4(fp)
  21572c:	e13ffe17 	ldw	r4,-8(fp)
  215730:	103ee83a 	callr	r2
  215734:	00000106 	br	21573c <alt_flash_open_dev+0x54>
  }

  return dev;
  215738:	e0bffe17 	ldw	r2,-8(fp)
}
  21573c:	e037883a 	mov	sp,fp
  215740:	dfc00117 	ldw	ra,4(sp)
  215744:	df000017 	ldw	fp,0(sp)
  215748:	dec00204 	addi	sp,sp,8
  21574c:	f800283a 	ret

00215750 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  215750:	defffd04 	addi	sp,sp,-12
  215754:	dfc00215 	stw	ra,8(sp)
  215758:	df000115 	stw	fp,4(sp)
  21575c:	df000104 	addi	fp,sp,4
  215760:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  215764:	e0bfff17 	ldw	r2,-4(fp)
  215768:	10000826 	beq	r2,zero,21578c <alt_flash_close_dev+0x3c>
  21576c:	e0bfff17 	ldw	r2,-4(fp)
  215770:	10800417 	ldw	r2,16(r2)
  215774:	10000526 	beq	r2,zero,21578c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  215778:	e0bfff17 	ldw	r2,-4(fp)
  21577c:	10800417 	ldw	r2,16(r2)
  215780:	e13fff17 	ldw	r4,-4(fp)
  215784:	103ee83a 	callr	r2
  }
  return;
  215788:	0001883a 	nop
  21578c:	0001883a 	nop
}
  215790:	e037883a 	mov	sp,fp
  215794:	dfc00117 	ldw	ra,4(sp)
  215798:	df000017 	ldw	fp,0(sp)
  21579c:	dec00204 	addi	sp,sp,8
  2157a0:	f800283a 	ret

002157a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  2157a4:	deffff04 	addi	sp,sp,-4
  2157a8:	df000015 	stw	fp,0(sp)
  2157ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  2157b0:	0001883a 	nop
  2157b4:	e037883a 	mov	sp,fp
  2157b8:	df000017 	ldw	fp,0(sp)
  2157bc:	dec00104 	addi	sp,sp,4
  2157c0:	f800283a 	ret

002157c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  2157c4:	defff904 	addi	sp,sp,-28
  2157c8:	dfc00615 	stw	ra,24(sp)
  2157cc:	df000515 	stw	fp,20(sp)
  2157d0:	df000504 	addi	fp,sp,20
  2157d4:	e13ffc15 	stw	r4,-16(fp)
  2157d8:	e17ffd15 	stw	r5,-12(fp)
  2157dc:	e1bffe15 	stw	r6,-8(fp)
  2157e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  2157e4:	e0800217 	ldw	r2,8(fp)
  2157e8:	d8800015 	stw	r2,0(sp)
  2157ec:	e1ffff17 	ldw	r7,-4(fp)
  2157f0:	e1bffe17 	ldw	r6,-8(fp)
  2157f4:	e17ffd17 	ldw	r5,-12(fp)
  2157f8:	e13ffc17 	ldw	r4,-16(fp)
  2157fc:	02159740 	call	215974 <alt_iic_isr_register>
}  
  215800:	e037883a 	mov	sp,fp
  215804:	dfc00117 	ldw	ra,4(sp)
  215808:	df000017 	ldw	fp,0(sp)
  21580c:	dec00204 	addi	sp,sp,8
  215810:	f800283a 	ret

00215814 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  215814:	defff904 	addi	sp,sp,-28
  215818:	df000615 	stw	fp,24(sp)
  21581c:	df000604 	addi	fp,sp,24
  215820:	e13ffe15 	stw	r4,-8(fp)
  215824:	e17fff15 	stw	r5,-4(fp)
  215828:	e0bfff17 	ldw	r2,-4(fp)
  21582c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  215830:	0005303a 	rdctl	r2,status
  215834:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  215838:	e0fffb17 	ldw	r3,-20(fp)
  21583c:	00bfff84 	movi	r2,-2
  215840:	1884703a 	and	r2,r3,r2
  215844:	1001703a 	wrctl	status,r2
  
  return context;
  215848:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  21584c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  215850:	00c00044 	movi	r3,1
  215854:	e0bffa17 	ldw	r2,-24(fp)
  215858:	1884983a 	sll	r2,r3,r2
  21585c:	1007883a 	mov	r3,r2
  215860:	d0a02c17 	ldw	r2,-32592(gp)
  215864:	1884b03a 	or	r2,r3,r2
  215868:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  21586c:	d0a02c17 	ldw	r2,-32592(gp)
  215870:	100170fa 	wrctl	ienable,r2
  215874:	e0bffc17 	ldw	r2,-16(fp)
  215878:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  21587c:	e0bffd17 	ldw	r2,-12(fp)
  215880:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  215884:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  215888:	0001883a 	nop
}
  21588c:	e037883a 	mov	sp,fp
  215890:	df000017 	ldw	fp,0(sp)
  215894:	dec00104 	addi	sp,sp,4
  215898:	f800283a 	ret

0021589c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  21589c:	defff904 	addi	sp,sp,-28
  2158a0:	df000615 	stw	fp,24(sp)
  2158a4:	df000604 	addi	fp,sp,24
  2158a8:	e13ffe15 	stw	r4,-8(fp)
  2158ac:	e17fff15 	stw	r5,-4(fp)
  2158b0:	e0bfff17 	ldw	r2,-4(fp)
  2158b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2158b8:	0005303a 	rdctl	r2,status
  2158bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2158c0:	e0fffb17 	ldw	r3,-20(fp)
  2158c4:	00bfff84 	movi	r2,-2
  2158c8:	1884703a 	and	r2,r3,r2
  2158cc:	1001703a 	wrctl	status,r2
  
  return context;
  2158d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  2158d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  2158d8:	00c00044 	movi	r3,1
  2158dc:	e0bffa17 	ldw	r2,-24(fp)
  2158e0:	1884983a 	sll	r2,r3,r2
  2158e4:	0084303a 	nor	r2,zero,r2
  2158e8:	1007883a 	mov	r3,r2
  2158ec:	d0a02c17 	ldw	r2,-32592(gp)
  2158f0:	1884703a 	and	r2,r3,r2
  2158f4:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  2158f8:	d0a02c17 	ldw	r2,-32592(gp)
  2158fc:	100170fa 	wrctl	ienable,r2
  215900:	e0bffc17 	ldw	r2,-16(fp)
  215904:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  215908:	e0bffd17 	ldw	r2,-12(fp)
  21590c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  215910:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  215914:	0001883a 	nop
}
  215918:	e037883a 	mov	sp,fp
  21591c:	df000017 	ldw	fp,0(sp)
  215920:	dec00104 	addi	sp,sp,4
  215924:	f800283a 	ret

00215928 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  215928:	defffc04 	addi	sp,sp,-16
  21592c:	df000315 	stw	fp,12(sp)
  215930:	df000304 	addi	fp,sp,12
  215934:	e13ffe15 	stw	r4,-8(fp)
  215938:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  21593c:	000530fa 	rdctl	r2,ienable
  215940:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  215944:	00c00044 	movi	r3,1
  215948:	e0bfff17 	ldw	r2,-4(fp)
  21594c:	1884983a 	sll	r2,r3,r2
  215950:	1007883a 	mov	r3,r2
  215954:	e0bffd17 	ldw	r2,-12(fp)
  215958:	1884703a 	and	r2,r3,r2
  21595c:	1004c03a 	cmpne	r2,r2,zero
  215960:	10803fcc 	andi	r2,r2,255
}
  215964:	e037883a 	mov	sp,fp
  215968:	df000017 	ldw	fp,0(sp)
  21596c:	dec00104 	addi	sp,sp,4
  215970:	f800283a 	ret

00215974 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  215974:	defff504 	addi	sp,sp,-44
  215978:	dfc00a15 	stw	ra,40(sp)
  21597c:	df000915 	stw	fp,36(sp)
  215980:	df000904 	addi	fp,sp,36
  215984:	e13ffc15 	stw	r4,-16(fp)
  215988:	e17ffd15 	stw	r5,-12(fp)
  21598c:	e1bffe15 	stw	r6,-8(fp)
  215990:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  215994:	00bffa84 	movi	r2,-22
  215998:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  21599c:	e0bffd17 	ldw	r2,-12(fp)
  2159a0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  2159a4:	e0bff817 	ldw	r2,-32(fp)
  2159a8:	10800808 	cmpgei	r2,r2,32
  2159ac:	1000271e 	bne	r2,zero,215a4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2159b0:	0005303a 	rdctl	r2,status
  2159b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2159b8:	e0fffb17 	ldw	r3,-20(fp)
  2159bc:	00bfff84 	movi	r2,-2
  2159c0:	1884703a 	and	r2,r3,r2
  2159c4:	1001703a 	wrctl	status,r2
  
  return context;
  2159c8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  2159cc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  2159d0:	00801074 	movhi	r2,65
  2159d4:	10a79904 	addi	r2,r2,-24988
  2159d8:	e0fff817 	ldw	r3,-32(fp)
  2159dc:	180690fa 	slli	r3,r3,3
  2159e0:	10c5883a 	add	r2,r2,r3
  2159e4:	e0fffe17 	ldw	r3,-8(fp)
  2159e8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  2159ec:	00801074 	movhi	r2,65
  2159f0:	10a79904 	addi	r2,r2,-24988
  2159f4:	e0fff817 	ldw	r3,-32(fp)
  2159f8:	180690fa 	slli	r3,r3,3
  2159fc:	10c5883a 	add	r2,r2,r3
  215a00:	10800104 	addi	r2,r2,4
  215a04:	e0ffff17 	ldw	r3,-4(fp)
  215a08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  215a0c:	e0bffe17 	ldw	r2,-8(fp)
  215a10:	10000526 	beq	r2,zero,215a28 <alt_iic_isr_register+0xb4>
  215a14:	e0bff817 	ldw	r2,-32(fp)
  215a18:	100b883a 	mov	r5,r2
  215a1c:	e13ffc17 	ldw	r4,-16(fp)
  215a20:	02158140 	call	215814 <alt_ic_irq_enable>
  215a24:	00000406 	br	215a38 <alt_iic_isr_register+0xc4>
  215a28:	e0bff817 	ldw	r2,-32(fp)
  215a2c:	100b883a 	mov	r5,r2
  215a30:	e13ffc17 	ldw	r4,-16(fp)
  215a34:	021589c0 	call	21589c <alt_ic_irq_disable>
  215a38:	e0bff715 	stw	r2,-36(fp)
  215a3c:	e0bffa17 	ldw	r2,-24(fp)
  215a40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  215a44:	e0bff917 	ldw	r2,-28(fp)
  215a48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  215a4c:	e0bff717 	ldw	r2,-36(fp)
}
  215a50:	e037883a 	mov	sp,fp
  215a54:	dfc00117 	ldw	ra,4(sp)
  215a58:	df000017 	ldw	fp,0(sp)
  215a5c:	dec00204 	addi	sp,sp,8
  215a60:	f800283a 	ret

00215a64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  215a64:	defff804 	addi	sp,sp,-32
  215a68:	dfc00715 	stw	ra,28(sp)
  215a6c:	df000615 	stw	fp,24(sp)
  215a70:	dc000515 	stw	r16,20(sp)
  215a74:	df000604 	addi	fp,sp,24
  215a78:	e13ffb15 	stw	r4,-20(fp)
  215a7c:	e17ffc15 	stw	r5,-16(fp)
  215a80:	e1bffd15 	stw	r6,-12(fp)
  215a84:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  215a88:	e1bffe17 	ldw	r6,-8(fp)
  215a8c:	e17ffd17 	ldw	r5,-12(fp)
  215a90:	e13ffc17 	ldw	r4,-16(fp)
  215a94:	0215cec0 	call	215cec <open>
  215a98:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  215a9c:	e0bffa17 	ldw	r2,-24(fp)
  215aa0:	10002216 	blt	r2,zero,215b2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  215aa4:	04001074 	movhi	r16,65
  215aa8:	84223f04 	addi	r16,r16,-30468
  215aac:	e0bffa17 	ldw	r2,-24(fp)
  215ab0:	01400304 	movi	r5,12
  215ab4:	1009883a 	mov	r4,r2
  215ab8:	02032a40 	call	2032a4 <__mulsi3>
  215abc:	8085883a 	add	r2,r16,r2
  215ac0:	10c00017 	ldw	r3,0(r2)
  215ac4:	e0bffb17 	ldw	r2,-20(fp)
  215ac8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  215acc:	04001074 	movhi	r16,65
  215ad0:	84223f04 	addi	r16,r16,-30468
  215ad4:	e0bffa17 	ldw	r2,-24(fp)
  215ad8:	01400304 	movi	r5,12
  215adc:	1009883a 	mov	r4,r2
  215ae0:	02032a40 	call	2032a4 <__mulsi3>
  215ae4:	8085883a 	add	r2,r16,r2
  215ae8:	10800104 	addi	r2,r2,4
  215aec:	10c00017 	ldw	r3,0(r2)
  215af0:	e0bffb17 	ldw	r2,-20(fp)
  215af4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  215af8:	04001074 	movhi	r16,65
  215afc:	84223f04 	addi	r16,r16,-30468
  215b00:	e0bffa17 	ldw	r2,-24(fp)
  215b04:	01400304 	movi	r5,12
  215b08:	1009883a 	mov	r4,r2
  215b0c:	02032a40 	call	2032a4 <__mulsi3>
  215b10:	8085883a 	add	r2,r16,r2
  215b14:	10800204 	addi	r2,r2,8
  215b18:	10c00017 	ldw	r3,0(r2)
  215b1c:	e0bffb17 	ldw	r2,-20(fp)
  215b20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  215b24:	e13ffa17 	ldw	r4,-24(fp)
  215b28:	021140c0 	call	21140c <alt_release_fd>
  }
} 
  215b2c:	0001883a 	nop
  215b30:	e6ffff04 	addi	sp,fp,-4
  215b34:	dfc00217 	ldw	ra,8(sp)
  215b38:	df000117 	ldw	fp,4(sp)
  215b3c:	dc000017 	ldw	r16,0(sp)
  215b40:	dec00304 	addi	sp,sp,12
  215b44:	f800283a 	ret

00215b48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  215b48:	defffb04 	addi	sp,sp,-20
  215b4c:	dfc00415 	stw	ra,16(sp)
  215b50:	df000315 	stw	fp,12(sp)
  215b54:	df000304 	addi	fp,sp,12
  215b58:	e13ffd15 	stw	r4,-12(fp)
  215b5c:	e17ffe15 	stw	r5,-8(fp)
  215b60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  215b64:	01c07fc4 	movi	r7,511
  215b68:	01800044 	movi	r6,1
  215b6c:	e17ffd17 	ldw	r5,-12(fp)
  215b70:	01001074 	movhi	r4,65
  215b74:	21224204 	addi	r4,r4,-30456
  215b78:	0215a640 	call	215a64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  215b7c:	01c07fc4 	movi	r7,511
  215b80:	000d883a 	mov	r6,zero
  215b84:	e17ffe17 	ldw	r5,-8(fp)
  215b88:	01001074 	movhi	r4,65
  215b8c:	21223f04 	addi	r4,r4,-30468
  215b90:	0215a640 	call	215a64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  215b94:	01c07fc4 	movi	r7,511
  215b98:	01800044 	movi	r6,1
  215b9c:	e17fff17 	ldw	r5,-4(fp)
  215ba0:	01001074 	movhi	r4,65
  215ba4:	21224504 	addi	r4,r4,-30444
  215ba8:	0215a640 	call	215a64 <alt_open_fd>
}  
  215bac:	0001883a 	nop
  215bb0:	e037883a 	mov	sp,fp
  215bb4:	dfc00117 	ldw	ra,4(sp)
  215bb8:	df000017 	ldw	fp,0(sp)
  215bbc:	dec00204 	addi	sp,sp,8
  215bc0:	f800283a 	ret

00215bc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  215bc4:	defffe04 	addi	sp,sp,-8
  215bc8:	dfc00115 	stw	ra,4(sp)
  215bcc:	df000015 	stw	fp,0(sp)
  215bd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  215bd4:	d0a00f17 	ldw	r2,-32708(gp)
  215bd8:	10000326 	beq	r2,zero,215be8 <alt_get_errno+0x24>
  215bdc:	d0a00f17 	ldw	r2,-32708(gp)
  215be0:	103ee83a 	callr	r2
  215be4:	00000106 	br	215bec <alt_get_errno+0x28>
  215be8:	d0a02604 	addi	r2,gp,-32616
}
  215bec:	e037883a 	mov	sp,fp
  215bf0:	dfc00117 	ldw	ra,4(sp)
  215bf4:	df000017 	ldw	fp,0(sp)
  215bf8:	dec00204 	addi	sp,sp,8
  215bfc:	f800283a 	ret

00215c00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  215c00:	defffb04 	addi	sp,sp,-20
  215c04:	dfc00415 	stw	ra,16(sp)
  215c08:	df000315 	stw	fp,12(sp)
  215c0c:	dc000215 	stw	r16,8(sp)
  215c10:	df000304 	addi	fp,sp,12
  215c14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  215c18:	e0bffe17 	ldw	r2,-8(fp)
  215c1c:	10800217 	ldw	r2,8(r2)
  215c20:	10d00034 	orhi	r3,r2,16384
  215c24:	e0bffe17 	ldw	r2,-8(fp)
  215c28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  215c2c:	e03ffd15 	stw	zero,-12(fp)
  215c30:	00002306 	br	215cc0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  215c34:	04001074 	movhi	r16,65
  215c38:	84223f04 	addi	r16,r16,-30468
  215c3c:	e0bffd17 	ldw	r2,-12(fp)
  215c40:	01400304 	movi	r5,12
  215c44:	1009883a 	mov	r4,r2
  215c48:	02032a40 	call	2032a4 <__mulsi3>
  215c4c:	8085883a 	add	r2,r16,r2
  215c50:	10c00017 	ldw	r3,0(r2)
  215c54:	e0bffe17 	ldw	r2,-8(fp)
  215c58:	10800017 	ldw	r2,0(r2)
  215c5c:	1880151e 	bne	r3,r2,215cb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  215c60:	04001074 	movhi	r16,65
  215c64:	84223f04 	addi	r16,r16,-30468
  215c68:	e0bffd17 	ldw	r2,-12(fp)
  215c6c:	01400304 	movi	r5,12
  215c70:	1009883a 	mov	r4,r2
  215c74:	02032a40 	call	2032a4 <__mulsi3>
  215c78:	8085883a 	add	r2,r16,r2
  215c7c:	10800204 	addi	r2,r2,8
  215c80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  215c84:	10000b0e 	bge	r2,zero,215cb4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  215c88:	01400304 	movi	r5,12
  215c8c:	e13ffd17 	ldw	r4,-12(fp)
  215c90:	02032a40 	call	2032a4 <__mulsi3>
  215c94:	1007883a 	mov	r3,r2
  215c98:	00801074 	movhi	r2,65
  215c9c:	10a23f04 	addi	r2,r2,-30468
  215ca0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  215ca4:	e0bffe17 	ldw	r2,-8(fp)
  215ca8:	18800226 	beq	r3,r2,215cb4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  215cac:	00bffcc4 	movi	r2,-13
  215cb0:	00000806 	br	215cd4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  215cb4:	e0bffd17 	ldw	r2,-12(fp)
  215cb8:	10800044 	addi	r2,r2,1
  215cbc:	e0bffd15 	stw	r2,-12(fp)
  215cc0:	d0a00e17 	ldw	r2,-32712(gp)
  215cc4:	1007883a 	mov	r3,r2
  215cc8:	e0bffd17 	ldw	r2,-12(fp)
  215ccc:	18bfd92e 	bgeu	r3,r2,215c34 <_gp+0xffe04020>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  215cd0:	0005883a 	mov	r2,zero
}
  215cd4:	e6ffff04 	addi	sp,fp,-4
  215cd8:	dfc00217 	ldw	ra,8(sp)
  215cdc:	df000117 	ldw	fp,4(sp)
  215ce0:	dc000017 	ldw	r16,0(sp)
  215ce4:	dec00304 	addi	sp,sp,12
  215ce8:	f800283a 	ret

00215cec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  215cec:	defff604 	addi	sp,sp,-40
  215cf0:	dfc00915 	stw	ra,36(sp)
  215cf4:	df000815 	stw	fp,32(sp)
  215cf8:	df000804 	addi	fp,sp,32
  215cfc:	e13ffd15 	stw	r4,-12(fp)
  215d00:	e17ffe15 	stw	r5,-8(fp)
  215d04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  215d08:	00bfffc4 	movi	r2,-1
  215d0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  215d10:	00bffb44 	movi	r2,-19
  215d14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  215d18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  215d1c:	d1600c04 	addi	r5,gp,-32720
  215d20:	e13ffd17 	ldw	r4,-12(fp)
  215d24:	02156580 	call	215658 <alt_find_dev>
  215d28:	e0bff815 	stw	r2,-32(fp)
  215d2c:	e0bff817 	ldw	r2,-32(fp)
  215d30:	1000051e 	bne	r2,zero,215d48 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  215d34:	e13ffd17 	ldw	r4,-12(fp)
  215d38:	02160d40 	call	2160d4 <alt_find_file>
  215d3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  215d40:	00800044 	movi	r2,1
  215d44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  215d48:	e0bff817 	ldw	r2,-32(fp)
  215d4c:	10002b26 	beq	r2,zero,215dfc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  215d50:	e13ff817 	ldw	r4,-32(fp)
  215d54:	02161dc0 	call	2161dc <alt_get_fd>
  215d58:	e0bff915 	stw	r2,-28(fp)
  215d5c:	e0bff917 	ldw	r2,-28(fp)
  215d60:	1000030e 	bge	r2,zero,215d70 <open+0x84>
    {
      status = index;
  215d64:	e0bff917 	ldw	r2,-28(fp)
  215d68:	e0bffa15 	stw	r2,-24(fp)
  215d6c:	00002506 	br	215e04 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  215d70:	01400304 	movi	r5,12
  215d74:	e13ff917 	ldw	r4,-28(fp)
  215d78:	02032a40 	call	2032a4 <__mulsi3>
  215d7c:	1007883a 	mov	r3,r2
  215d80:	00801074 	movhi	r2,65
  215d84:	10a23f04 	addi	r2,r2,-30468
  215d88:	1885883a 	add	r2,r3,r2
  215d8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  215d90:	e0fffe17 	ldw	r3,-8(fp)
  215d94:	00900034 	movhi	r2,16384
  215d98:	10bfffc4 	addi	r2,r2,-1
  215d9c:	1886703a 	and	r3,r3,r2
  215da0:	e0bffc17 	ldw	r2,-16(fp)
  215da4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  215da8:	e0bffb17 	ldw	r2,-20(fp)
  215dac:	1000051e 	bne	r2,zero,215dc4 <open+0xd8>
  215db0:	e13ffc17 	ldw	r4,-16(fp)
  215db4:	0215c000 	call	215c00 <alt_file_locked>
  215db8:	e0bffa15 	stw	r2,-24(fp)
  215dbc:	e0bffa17 	ldw	r2,-24(fp)
  215dc0:	10001016 	blt	r2,zero,215e04 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  215dc4:	e0bff817 	ldw	r2,-32(fp)
  215dc8:	10800317 	ldw	r2,12(r2)
  215dcc:	10000826 	beq	r2,zero,215df0 <open+0x104>
  215dd0:	e0bff817 	ldw	r2,-32(fp)
  215dd4:	10800317 	ldw	r2,12(r2)
  215dd8:	e1ffff17 	ldw	r7,-4(fp)
  215ddc:	e1bffe17 	ldw	r6,-8(fp)
  215de0:	e17ffd17 	ldw	r5,-12(fp)
  215de4:	e13ffc17 	ldw	r4,-16(fp)
  215de8:	103ee83a 	callr	r2
  215dec:	00000106 	br	215df4 <open+0x108>
  215df0:	0005883a 	mov	r2,zero
  215df4:	e0bffa15 	stw	r2,-24(fp)
  215df8:	00000206 	br	215e04 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  215dfc:	00bffb44 	movi	r2,-19
  215e00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  215e04:	e0bffa17 	ldw	r2,-24(fp)
  215e08:	1000090e 	bge	r2,zero,215e30 <open+0x144>
  {
    alt_release_fd (index);  
  215e0c:	e13ff917 	ldw	r4,-28(fp)
  215e10:	021140c0 	call	21140c <alt_release_fd>
    ALT_ERRNO = -status;
  215e14:	0215bc40 	call	215bc4 <alt_get_errno>
  215e18:	1007883a 	mov	r3,r2
  215e1c:	e0bffa17 	ldw	r2,-24(fp)
  215e20:	0085c83a 	sub	r2,zero,r2
  215e24:	18800015 	stw	r2,0(r3)
    return -1;
  215e28:	00bfffc4 	movi	r2,-1
  215e2c:	00000106 	br	215e34 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  215e30:	e0bff917 	ldw	r2,-28(fp)
}
  215e34:	e037883a 	mov	sp,fp
  215e38:	dfc00117 	ldw	ra,4(sp)
  215e3c:	df000017 	ldw	fp,0(sp)
  215e40:	dec00204 	addi	sp,sp,8
  215e44:	f800283a 	ret

00215e48 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  215e48:	defff204 	addi	sp,sp,-56
  215e4c:	dfc00a15 	stw	ra,40(sp)
  215e50:	df000915 	stw	fp,36(sp)
  215e54:	df000904 	addi	fp,sp,36
  215e58:	e13fff15 	stw	r4,-4(fp)
  215e5c:	e1400215 	stw	r5,8(fp)
  215e60:	e1800315 	stw	r6,12(fp)
  215e64:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  215e68:	e0800204 	addi	r2,fp,8
  215e6c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  215e70:	e0bfff17 	ldw	r2,-4(fp)
  215e74:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  215e78:	00006f06 	br	216038 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  215e7c:	e0bff807 	ldb	r2,-32(fp)
  215e80:	10800960 	cmpeqi	r2,r2,37
  215e84:	1000041e 	bne	r2,zero,215e98 <alt_printf+0x50>
        {
            alt_putchar(c);
  215e88:	e0bff807 	ldb	r2,-32(fp)
  215e8c:	1009883a 	mov	r4,r2
  215e90:	02160740 	call	216074 <alt_putchar>
  215e94:	00006806 	br	216038 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  215e98:	e0bff717 	ldw	r2,-36(fp)
  215e9c:	10c00044 	addi	r3,r2,1
  215ea0:	e0fff715 	stw	r3,-36(fp)
  215ea4:	10800003 	ldbu	r2,0(r2)
  215ea8:	e0bff805 	stb	r2,-32(fp)
  215eac:	e0bff807 	ldb	r2,-32(fp)
  215eb0:	10006926 	beq	r2,zero,216058 <alt_printf+0x210>
            {
                if (c == '%')
  215eb4:	e0bff807 	ldb	r2,-32(fp)
  215eb8:	10800958 	cmpnei	r2,r2,37
  215ebc:	1000041e 	bne	r2,zero,215ed0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  215ec0:	e0bff807 	ldb	r2,-32(fp)
  215ec4:	1009883a 	mov	r4,r2
  215ec8:	02160740 	call	216074 <alt_putchar>
  215ecc:	00005a06 	br	216038 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  215ed0:	e0bff807 	ldb	r2,-32(fp)
  215ed4:	108018d8 	cmpnei	r2,r2,99
  215ed8:	1000081e 	bne	r2,zero,215efc <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  215edc:	e0bffe17 	ldw	r2,-8(fp)
  215ee0:	10c00104 	addi	r3,r2,4
  215ee4:	e0fffe15 	stw	r3,-8(fp)
  215ee8:	10800017 	ldw	r2,0(r2)
  215eec:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  215ef0:	e13ffd17 	ldw	r4,-12(fp)
  215ef4:	02160740 	call	216074 <alt_putchar>
  215ef8:	00004f06 	br	216038 <alt_printf+0x1f0>
                }
                else if (c == 'x')
  215efc:	e0bff807 	ldb	r2,-32(fp)
  215f00:	10801e18 	cmpnei	r2,r2,120
  215f04:	1000341e 	bne	r2,zero,215fd8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  215f08:	e0bffe17 	ldw	r2,-8(fp)
  215f0c:	10c00104 	addi	r3,r2,4
  215f10:	e0fffe15 	stw	r3,-8(fp)
  215f14:	10800017 	ldw	r2,0(r2)
  215f18:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  215f1c:	e0bffb17 	ldw	r2,-20(fp)
  215f20:	1000031e 	bne	r2,zero,215f30 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  215f24:	01000c04 	movi	r4,48
  215f28:	02160740 	call	216074 <alt_putchar>
                        continue;
  215f2c:	00004206 	br	216038 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  215f30:	00800704 	movi	r2,28
  215f34:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  215f38:	00000306 	br	215f48 <alt_printf+0x100>
                        digit_shift -= 4;
  215f3c:	e0bff917 	ldw	r2,-28(fp)
  215f40:	10bfff04 	addi	r2,r2,-4
  215f44:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  215f48:	00c003c4 	movi	r3,15
  215f4c:	e0bff917 	ldw	r2,-28(fp)
  215f50:	1884983a 	sll	r2,r3,r2
  215f54:	1007883a 	mov	r3,r2
  215f58:	e0bffb17 	ldw	r2,-20(fp)
  215f5c:	1884703a 	and	r2,r3,r2
  215f60:	103ff626 	beq	r2,zero,215f3c <_gp+0xffe04328>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  215f64:	00001906 	br	215fcc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  215f68:	00c003c4 	movi	r3,15
  215f6c:	e0bff917 	ldw	r2,-28(fp)
  215f70:	1884983a 	sll	r2,r3,r2
  215f74:	1007883a 	mov	r3,r2
  215f78:	e0bffb17 	ldw	r2,-20(fp)
  215f7c:	1886703a 	and	r3,r3,r2
  215f80:	e0bff917 	ldw	r2,-28(fp)
  215f84:	1884d83a 	srl	r2,r3,r2
  215f88:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  215f8c:	e0bffc17 	ldw	r2,-16(fp)
  215f90:	108002a8 	cmpgeui	r2,r2,10
  215f94:	1000041e 	bne	r2,zero,215fa8 <alt_printf+0x160>
                            c = '0' + digit;
  215f98:	e0bffc17 	ldw	r2,-16(fp)
  215f9c:	10800c04 	addi	r2,r2,48
  215fa0:	e0bff805 	stb	r2,-32(fp)
  215fa4:	00000306 	br	215fb4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  215fa8:	e0bffc17 	ldw	r2,-16(fp)
  215fac:	108015c4 	addi	r2,r2,87
  215fb0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  215fb4:	e0bff807 	ldb	r2,-32(fp)
  215fb8:	1009883a 	mov	r4,r2
  215fbc:	02160740 	call	216074 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  215fc0:	e0bff917 	ldw	r2,-28(fp)
  215fc4:	10bfff04 	addi	r2,r2,-4
  215fc8:	e0bff915 	stw	r2,-28(fp)
  215fcc:	e0bff917 	ldw	r2,-28(fp)
  215fd0:	103fe50e 	bge	r2,zero,215f68 <_gp+0xffe04354>
  215fd4:	00001806 	br	216038 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  215fd8:	e0bff807 	ldb	r2,-32(fp)
  215fdc:	10801cd8 	cmpnei	r2,r2,115
  215fe0:	1000151e 	bne	r2,zero,216038 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  215fe4:	e0bffe17 	ldw	r2,-8(fp)
  215fe8:	10c00104 	addi	r3,r2,4
  215fec:	e0fffe15 	stw	r3,-8(fp)
  215ff0:	10800017 	ldw	r2,0(r2)
  215ff4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  215ff8:	00000906 	br	216020 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  215ffc:	e0bffa17 	ldw	r2,-24(fp)
  216000:	10c00044 	addi	r3,r2,1
  216004:	e0fffa15 	stw	r3,-24(fp)
  216008:	10800003 	ldbu	r2,0(r2)
  21600c:	10803fcc 	andi	r2,r2,255
  216010:	1080201c 	xori	r2,r2,128
  216014:	10bfe004 	addi	r2,r2,-128
  216018:	1009883a 	mov	r4,r2
  21601c:	02160740 	call	216074 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  216020:	e0bffa17 	ldw	r2,-24(fp)
  216024:	10800003 	ldbu	r2,0(r2)
  216028:	10803fcc 	andi	r2,r2,255
  21602c:	1080201c 	xori	r2,r2,128
  216030:	10bfe004 	addi	r2,r2,-128
  216034:	103ff11e 	bne	r2,zero,215ffc <_gp+0xffe043e8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  216038:	e0bff717 	ldw	r2,-36(fp)
  21603c:	10c00044 	addi	r3,r2,1
  216040:	e0fff715 	stw	r3,-36(fp)
  216044:	10800003 	ldbu	r2,0(r2)
  216048:	e0bff805 	stb	r2,-32(fp)
  21604c:	e0bff807 	ldb	r2,-32(fp)
  216050:	103f8a1e 	bne	r2,zero,215e7c <_gp+0xffe04268>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  216054:	00000106 	br	21605c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  216058:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  21605c:	0001883a 	nop
  216060:	e037883a 	mov	sp,fp
  216064:	dfc00117 	ldw	ra,4(sp)
  216068:	df000017 	ldw	fp,0(sp)
  21606c:	dec00504 	addi	sp,sp,20
  216070:	f800283a 	ret

00216074 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  216074:	defffd04 	addi	sp,sp,-12
  216078:	dfc00215 	stw	ra,8(sp)
  21607c:	df000115 	stw	fp,4(sp)
  216080:	df000104 	addi	fp,sp,4
  216084:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  216088:	d0a00517 	ldw	r2,-32748(gp)
  21608c:	10800217 	ldw	r2,8(r2)
  216090:	100b883a 	mov	r5,r2
  216094:	e13fff17 	ldw	r4,-4(fp)
  216098:	020af980 	call	20af98 <putc>
#endif
#endif
}
  21609c:	e037883a 	mov	sp,fp
  2160a0:	dfc00117 	ldw	ra,4(sp)
  2160a4:	df000017 	ldw	fp,0(sp)
  2160a8:	dec00204 	addi	sp,sp,8
  2160ac:	f800283a 	ret

002160b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  2160b0:	deffff04 	addi	sp,sp,-4
  2160b4:	df000015 	stw	fp,0(sp)
  2160b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  2160bc:	000170fa 	wrctl	ienable,zero
}
  2160c0:	0001883a 	nop
  2160c4:	e037883a 	mov	sp,fp
  2160c8:	df000017 	ldw	fp,0(sp)
  2160cc:	dec00104 	addi	sp,sp,4
  2160d0:	f800283a 	ret

002160d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  2160d4:	defffb04 	addi	sp,sp,-20
  2160d8:	dfc00415 	stw	ra,16(sp)
  2160dc:	df000315 	stw	fp,12(sp)
  2160e0:	df000304 	addi	fp,sp,12
  2160e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2160e8:	d0a00a17 	ldw	r2,-32728(gp)
  2160ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2160f0:	00003106 	br	2161b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2160f4:	e0bffd17 	ldw	r2,-12(fp)
  2160f8:	10800217 	ldw	r2,8(r2)
  2160fc:	1009883a 	mov	r4,r2
  216100:	0203fc00 	call	203fc0 <strlen>
  216104:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  216108:	e0bffd17 	ldw	r2,-12(fp)
  21610c:	10c00217 	ldw	r3,8(r2)
  216110:	e0bffe17 	ldw	r2,-8(fp)
  216114:	10bfffc4 	addi	r2,r2,-1
  216118:	1885883a 	add	r2,r3,r2
  21611c:	10800003 	ldbu	r2,0(r2)
  216120:	10803fcc 	andi	r2,r2,255
  216124:	1080201c 	xori	r2,r2,128
  216128:	10bfe004 	addi	r2,r2,-128
  21612c:	10800bd8 	cmpnei	r2,r2,47
  216130:	1000031e 	bne	r2,zero,216140 <alt_find_file+0x6c>
    {
      len -= 1;
  216134:	e0bffe17 	ldw	r2,-8(fp)
  216138:	10bfffc4 	addi	r2,r2,-1
  21613c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  216140:	e0bffe17 	ldw	r2,-8(fp)
  216144:	e0ffff17 	ldw	r3,-4(fp)
  216148:	1885883a 	add	r2,r3,r2
  21614c:	10800003 	ldbu	r2,0(r2)
  216150:	10803fcc 	andi	r2,r2,255
  216154:	1080201c 	xori	r2,r2,128
  216158:	10bfe004 	addi	r2,r2,-128
  21615c:	10800be0 	cmpeqi	r2,r2,47
  216160:	1000081e 	bne	r2,zero,216184 <alt_find_file+0xb0>
  216164:	e0bffe17 	ldw	r2,-8(fp)
  216168:	e0ffff17 	ldw	r3,-4(fp)
  21616c:	1885883a 	add	r2,r3,r2
  216170:	10800003 	ldbu	r2,0(r2)
  216174:	10803fcc 	andi	r2,r2,255
  216178:	1080201c 	xori	r2,r2,128
  21617c:	10bfe004 	addi	r2,r2,-128
  216180:	10000a1e 	bne	r2,zero,2161ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  216184:	e0bffd17 	ldw	r2,-12(fp)
  216188:	10800217 	ldw	r2,8(r2)
  21618c:	e0fffe17 	ldw	r3,-8(fp)
  216190:	180d883a 	mov	r6,r3
  216194:	e17fff17 	ldw	r5,-4(fp)
  216198:	1009883a 	mov	r4,r2
  21619c:	02163880 	call	216388 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  2161a0:	1000021e 	bne	r2,zero,2161ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  2161a4:	e0bffd17 	ldw	r2,-12(fp)
  2161a8:	00000706 	br	2161c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  2161ac:	e0bffd17 	ldw	r2,-12(fp)
  2161b0:	10800017 	ldw	r2,0(r2)
  2161b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2161b8:	e0fffd17 	ldw	r3,-12(fp)
  2161bc:	d0a00a04 	addi	r2,gp,-32728
  2161c0:	18bfcc1e 	bne	r3,r2,2160f4 <_gp+0xffe044e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  2161c4:	0005883a 	mov	r2,zero
}
  2161c8:	e037883a 	mov	sp,fp
  2161cc:	dfc00117 	ldw	ra,4(sp)
  2161d0:	df000017 	ldw	fp,0(sp)
  2161d4:	dec00204 	addi	sp,sp,8
  2161d8:	f800283a 	ret

002161dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2161dc:	defffa04 	addi	sp,sp,-24
  2161e0:	dfc00515 	stw	ra,20(sp)
  2161e4:	df000415 	stw	fp,16(sp)
  2161e8:	dc000315 	stw	r16,12(sp)
  2161ec:	df000404 	addi	fp,sp,16
  2161f0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  2161f4:	00bffa04 	movi	r2,-24
  2161f8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2161fc:	e03ffc15 	stw	zero,-16(fp)
  216200:	00001d06 	br	216278 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  216204:	04001074 	movhi	r16,65
  216208:	84223f04 	addi	r16,r16,-30468
  21620c:	e0bffc17 	ldw	r2,-16(fp)
  216210:	01400304 	movi	r5,12
  216214:	1009883a 	mov	r4,r2
  216218:	02032a40 	call	2032a4 <__mulsi3>
  21621c:	8085883a 	add	r2,r16,r2
  216220:	10800017 	ldw	r2,0(r2)
  216224:	1000111e 	bne	r2,zero,21626c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  216228:	04001074 	movhi	r16,65
  21622c:	84223f04 	addi	r16,r16,-30468
  216230:	e0bffc17 	ldw	r2,-16(fp)
  216234:	01400304 	movi	r5,12
  216238:	1009883a 	mov	r4,r2
  21623c:	02032a40 	call	2032a4 <__mulsi3>
  216240:	8085883a 	add	r2,r16,r2
  216244:	e0fffe17 	ldw	r3,-8(fp)
  216248:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  21624c:	d0e00e17 	ldw	r3,-32712(gp)
  216250:	e0bffc17 	ldw	r2,-16(fp)
  216254:	1880020e 	bge	r3,r2,216260 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  216258:	e0bffc17 	ldw	r2,-16(fp)
  21625c:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
  216260:	e0bffc17 	ldw	r2,-16(fp)
  216264:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  216268:	00000606 	br	216284 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  21626c:	e0bffc17 	ldw	r2,-16(fp)
  216270:	10800044 	addi	r2,r2,1
  216274:	e0bffc15 	stw	r2,-16(fp)
  216278:	e0bffc17 	ldw	r2,-16(fp)
  21627c:	10800810 	cmplti	r2,r2,32
  216280:	103fe01e 	bne	r2,zero,216204 <_gp+0xffe045f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  216284:	e0bffd17 	ldw	r2,-12(fp)
}
  216288:	e6ffff04 	addi	sp,fp,-4
  21628c:	dfc00217 	ldw	ra,8(sp)
  216290:	df000117 	ldw	fp,4(sp)
  216294:	dc000017 	ldw	r16,0(sp)
  216298:	dec00304 	addi	sp,sp,12
  21629c:	f800283a 	ret

002162a0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  2162a0:	defffe04 	addi	sp,sp,-8
  2162a4:	df000115 	stw	fp,4(sp)
  2162a8:	df000104 	addi	fp,sp,4
  2162ac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  2162b0:	e0bfff17 	ldw	r2,-4(fp)
  2162b4:	10bffe84 	addi	r2,r2,-6
  2162b8:	10c00428 	cmpgeui	r3,r2,16
  2162bc:	18001a1e 	bne	r3,zero,216328 <alt_exception_cause_generated_bad_addr+0x88>
  2162c0:	100690ba 	slli	r3,r2,2
  2162c4:	00800874 	movhi	r2,33
  2162c8:	1098b604 	addi	r2,r2,25304
  2162cc:	1885883a 	add	r2,r3,r2
  2162d0:	10800017 	ldw	r2,0(r2)
  2162d4:	1000683a 	jmp	r2
  2162d8:	00216318 	cmpnei	zero,zero,-31348
  2162dc:	00216318 	cmpnei	zero,zero,-31348
  2162e0:	00216328 	cmpgeui	zero,zero,34188
  2162e4:	00216328 	cmpgeui	zero,zero,34188
  2162e8:	00216328 	cmpgeui	zero,zero,34188
  2162ec:	00216318 	cmpnei	zero,zero,-31348
  2162f0:	00216320 	cmpeqi	zero,zero,-31348
  2162f4:	00216328 	cmpgeui	zero,zero,34188
  2162f8:	00216318 	cmpnei	zero,zero,-31348
  2162fc:	00216318 	cmpnei	zero,zero,-31348
  216300:	00216328 	cmpgeui	zero,zero,34188
  216304:	00216318 	cmpnei	zero,zero,-31348
  216308:	00216320 	cmpeqi	zero,zero,-31348
  21630c:	00216328 	cmpgeui	zero,zero,34188
  216310:	00216328 	cmpgeui	zero,zero,34188
  216314:	00216318 	cmpnei	zero,zero,-31348
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  216318:	00800044 	movi	r2,1
  21631c:	00000306 	br	21632c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  216320:	0005883a 	mov	r2,zero
  216324:	00000106 	br	21632c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  216328:	0005883a 	mov	r2,zero
  }
}
  21632c:	e037883a 	mov	sp,fp
  216330:	df000017 	ldw	fp,0(sp)
  216334:	dec00104 	addi	sp,sp,4
  216338:	f800283a 	ret

0021633c <atexit>:
  21633c:	200b883a 	mov	r5,r4
  216340:	000f883a 	mov	r7,zero
  216344:	000d883a 	mov	r6,zero
  216348:	0009883a 	mov	r4,zero
  21634c:	02164041 	jmpi	216404 <__register_exitproc>

00216350 <exit>:
  216350:	defffe04 	addi	sp,sp,-8
  216354:	000b883a 	mov	r5,zero
  216358:	dc000015 	stw	r16,0(sp)
  21635c:	dfc00115 	stw	ra,4(sp)
  216360:	2021883a 	mov	r16,r4
  216364:	021651c0 	call	21651c <__call_exitprocs>
  216368:	00801074 	movhi	r2,65
  21636c:	10a70904 	addi	r2,r2,-25564
  216370:	11000017 	ldw	r4,0(r2)
  216374:	20800f17 	ldw	r2,60(r4)
  216378:	10000126 	beq	r2,zero,216380 <exit+0x30>
  21637c:	103ee83a 	callr	r2
  216380:	8009883a 	mov	r4,r16
  216384:	021669c0 	call	21669c <_exit>

00216388 <memcmp>:
  216388:	01c000c4 	movi	r7,3
  21638c:	3980192e 	bgeu	r7,r6,2163f4 <memcmp+0x6c>
  216390:	2144b03a 	or	r2,r4,r5
  216394:	11c4703a 	and	r2,r2,r7
  216398:	10000f26 	beq	r2,zero,2163d8 <memcmp+0x50>
  21639c:	20800003 	ldbu	r2,0(r4)
  2163a0:	28c00003 	ldbu	r3,0(r5)
  2163a4:	10c0151e 	bne	r2,r3,2163fc <memcmp+0x74>
  2163a8:	31bfff84 	addi	r6,r6,-2
  2163ac:	01ffffc4 	movi	r7,-1
  2163b0:	00000406 	br	2163c4 <memcmp+0x3c>
  2163b4:	20800003 	ldbu	r2,0(r4)
  2163b8:	28c00003 	ldbu	r3,0(r5)
  2163bc:	31bfffc4 	addi	r6,r6,-1
  2163c0:	10c00e1e 	bne	r2,r3,2163fc <memcmp+0x74>
  2163c4:	21000044 	addi	r4,r4,1
  2163c8:	29400044 	addi	r5,r5,1
  2163cc:	31fff91e 	bne	r6,r7,2163b4 <_gp+0xffe047a0>
  2163d0:	0005883a 	mov	r2,zero
  2163d4:	f800283a 	ret
  2163d8:	20c00017 	ldw	r3,0(r4)
  2163dc:	28800017 	ldw	r2,0(r5)
  2163e0:	18bfee1e 	bne	r3,r2,21639c <_gp+0xffe04788>
  2163e4:	31bfff04 	addi	r6,r6,-4
  2163e8:	21000104 	addi	r4,r4,4
  2163ec:	29400104 	addi	r5,r5,4
  2163f0:	39bff936 	bltu	r7,r6,2163d8 <_gp+0xffe047c4>
  2163f4:	303fe91e 	bne	r6,zero,21639c <_gp+0xffe04788>
  2163f8:	003ff506 	br	2163d0 <_gp+0xffe047bc>
  2163fc:	10c5c83a 	sub	r2,r2,r3
  216400:	f800283a 	ret

00216404 <__register_exitproc>:
  216404:	defffa04 	addi	sp,sp,-24
  216408:	dc000315 	stw	r16,12(sp)
  21640c:	04001074 	movhi	r16,65
  216410:	84270904 	addi	r16,r16,-25564
  216414:	80c00017 	ldw	r3,0(r16)
  216418:	dc400415 	stw	r17,16(sp)
  21641c:	dfc00515 	stw	ra,20(sp)
  216420:	18805217 	ldw	r2,328(r3)
  216424:	2023883a 	mov	r17,r4
  216428:	10003726 	beq	r2,zero,216508 <__register_exitproc+0x104>
  21642c:	10c00117 	ldw	r3,4(r2)
  216430:	010007c4 	movi	r4,31
  216434:	20c00e16 	blt	r4,r3,216470 <__register_exitproc+0x6c>
  216438:	1a000044 	addi	r8,r3,1
  21643c:	8800221e 	bne	r17,zero,2164c8 <__register_exitproc+0xc4>
  216440:	18c00084 	addi	r3,r3,2
  216444:	18c7883a 	add	r3,r3,r3
  216448:	18c7883a 	add	r3,r3,r3
  21644c:	12000115 	stw	r8,4(r2)
  216450:	10c7883a 	add	r3,r2,r3
  216454:	19400015 	stw	r5,0(r3)
  216458:	0005883a 	mov	r2,zero
  21645c:	dfc00517 	ldw	ra,20(sp)
  216460:	dc400417 	ldw	r17,16(sp)
  216464:	dc000317 	ldw	r16,12(sp)
  216468:	dec00604 	addi	sp,sp,24
  21646c:	f800283a 	ret
  216470:	00800034 	movhi	r2,0
  216474:	10800004 	addi	r2,r2,0
  216478:	10002626 	beq	r2,zero,216514 <__register_exitproc+0x110>
  21647c:	01006404 	movi	r4,400
  216480:	d9400015 	stw	r5,0(sp)
  216484:	d9800115 	stw	r6,4(sp)
  216488:	d9c00215 	stw	r7,8(sp)
  21648c:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  216490:	d9400017 	ldw	r5,0(sp)
  216494:	d9800117 	ldw	r6,4(sp)
  216498:	d9c00217 	ldw	r7,8(sp)
  21649c:	10001d26 	beq	r2,zero,216514 <__register_exitproc+0x110>
  2164a0:	81000017 	ldw	r4,0(r16)
  2164a4:	10000115 	stw	zero,4(r2)
  2164a8:	02000044 	movi	r8,1
  2164ac:	22405217 	ldw	r9,328(r4)
  2164b0:	0007883a 	mov	r3,zero
  2164b4:	12400015 	stw	r9,0(r2)
  2164b8:	20805215 	stw	r2,328(r4)
  2164bc:	10006215 	stw	zero,392(r2)
  2164c0:	10006315 	stw	zero,396(r2)
  2164c4:	883fde26 	beq	r17,zero,216440 <_gp+0xffe0482c>
  2164c8:	18c9883a 	add	r4,r3,r3
  2164cc:	2109883a 	add	r4,r4,r4
  2164d0:	1109883a 	add	r4,r2,r4
  2164d4:	21802215 	stw	r6,136(r4)
  2164d8:	01800044 	movi	r6,1
  2164dc:	12406217 	ldw	r9,392(r2)
  2164e0:	30cc983a 	sll	r6,r6,r3
  2164e4:	4992b03a 	or	r9,r9,r6
  2164e8:	12406215 	stw	r9,392(r2)
  2164ec:	21c04215 	stw	r7,264(r4)
  2164f0:	01000084 	movi	r4,2
  2164f4:	893fd21e 	bne	r17,r4,216440 <_gp+0xffe0482c>
  2164f8:	11006317 	ldw	r4,396(r2)
  2164fc:	218cb03a 	or	r6,r4,r6
  216500:	11806315 	stw	r6,396(r2)
  216504:	003fce06 	br	216440 <_gp+0xffe0482c>
  216508:	18805304 	addi	r2,r3,332
  21650c:	18805215 	stw	r2,328(r3)
  216510:	003fc606 	br	21642c <_gp+0xffe04818>
  216514:	00bfffc4 	movi	r2,-1
  216518:	003fd006 	br	21645c <_gp+0xffe04848>

0021651c <__call_exitprocs>:
  21651c:	defff504 	addi	sp,sp,-44
  216520:	df000915 	stw	fp,36(sp)
  216524:	dd400615 	stw	r21,24(sp)
  216528:	dc800315 	stw	r18,12(sp)
  21652c:	dfc00a15 	stw	ra,40(sp)
  216530:	ddc00815 	stw	r23,32(sp)
  216534:	dd800715 	stw	r22,28(sp)
  216538:	dd000515 	stw	r20,20(sp)
  21653c:	dcc00415 	stw	r19,16(sp)
  216540:	dc400215 	stw	r17,8(sp)
  216544:	dc000115 	stw	r16,4(sp)
  216548:	d9000015 	stw	r4,0(sp)
  21654c:	2839883a 	mov	fp,r5
  216550:	04800044 	movi	r18,1
  216554:	057fffc4 	movi	r21,-1
  216558:	00801074 	movhi	r2,65
  21655c:	10a70904 	addi	r2,r2,-25564
  216560:	12000017 	ldw	r8,0(r2)
  216564:	45005217 	ldw	r20,328(r8)
  216568:	44c05204 	addi	r19,r8,328
  21656c:	a0001c26 	beq	r20,zero,2165e0 <__call_exitprocs+0xc4>
  216570:	a0800117 	ldw	r2,4(r20)
  216574:	15ffffc4 	addi	r23,r2,-1
  216578:	b8000d16 	blt	r23,zero,2165b0 <__call_exitprocs+0x94>
  21657c:	14000044 	addi	r16,r2,1
  216580:	8421883a 	add	r16,r16,r16
  216584:	8421883a 	add	r16,r16,r16
  216588:	84402004 	addi	r17,r16,128
  21658c:	a463883a 	add	r17,r20,r17
  216590:	a421883a 	add	r16,r20,r16
  216594:	e0001e26 	beq	fp,zero,216610 <__call_exitprocs+0xf4>
  216598:	80804017 	ldw	r2,256(r16)
  21659c:	e0801c26 	beq	fp,r2,216610 <__call_exitprocs+0xf4>
  2165a0:	bdffffc4 	addi	r23,r23,-1
  2165a4:	843fff04 	addi	r16,r16,-4
  2165a8:	8c7fff04 	addi	r17,r17,-4
  2165ac:	bd7ff91e 	bne	r23,r21,216594 <_gp+0xffe04980>
  2165b0:	00800034 	movhi	r2,0
  2165b4:	10800004 	addi	r2,r2,0
  2165b8:	10000926 	beq	r2,zero,2165e0 <__call_exitprocs+0xc4>
  2165bc:	a0800117 	ldw	r2,4(r20)
  2165c0:	1000301e 	bne	r2,zero,216684 <__call_exitprocs+0x168>
  2165c4:	a0800017 	ldw	r2,0(r20)
  2165c8:	10003226 	beq	r2,zero,216694 <__call_exitprocs+0x178>
  2165cc:	a009883a 	mov	r4,r20
  2165d0:	98800015 	stw	r2,0(r19)
  2165d4:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  2165d8:	9d000017 	ldw	r20,0(r19)
  2165dc:	a03fe41e 	bne	r20,zero,216570 <_gp+0xffe0495c>
  2165e0:	dfc00a17 	ldw	ra,40(sp)
  2165e4:	df000917 	ldw	fp,36(sp)
  2165e8:	ddc00817 	ldw	r23,32(sp)
  2165ec:	dd800717 	ldw	r22,28(sp)
  2165f0:	dd400617 	ldw	r21,24(sp)
  2165f4:	dd000517 	ldw	r20,20(sp)
  2165f8:	dcc00417 	ldw	r19,16(sp)
  2165fc:	dc800317 	ldw	r18,12(sp)
  216600:	dc400217 	ldw	r17,8(sp)
  216604:	dc000117 	ldw	r16,4(sp)
  216608:	dec00b04 	addi	sp,sp,44
  21660c:	f800283a 	ret
  216610:	a0800117 	ldw	r2,4(r20)
  216614:	80c00017 	ldw	r3,0(r16)
  216618:	10bfffc4 	addi	r2,r2,-1
  21661c:	15c01426 	beq	r2,r23,216670 <__call_exitprocs+0x154>
  216620:	80000015 	stw	zero,0(r16)
  216624:	183fde26 	beq	r3,zero,2165a0 <_gp+0xffe0498c>
  216628:	95c8983a 	sll	r4,r18,r23
  21662c:	a0806217 	ldw	r2,392(r20)
  216630:	a5800117 	ldw	r22,4(r20)
  216634:	2084703a 	and	r2,r4,r2
  216638:	10000b26 	beq	r2,zero,216668 <__call_exitprocs+0x14c>
  21663c:	a0806317 	ldw	r2,396(r20)
  216640:	2088703a 	and	r4,r4,r2
  216644:	20000c1e 	bne	r4,zero,216678 <__call_exitprocs+0x15c>
  216648:	89400017 	ldw	r5,0(r17)
  21664c:	d9000017 	ldw	r4,0(sp)
  216650:	183ee83a 	callr	r3
  216654:	a0800117 	ldw	r2,4(r20)
  216658:	15bfbf1e 	bne	r2,r22,216558 <_gp+0xffe04944>
  21665c:	98800017 	ldw	r2,0(r19)
  216660:	153fcf26 	beq	r2,r20,2165a0 <_gp+0xffe0498c>
  216664:	003fbc06 	br	216558 <_gp+0xffe04944>
  216668:	183ee83a 	callr	r3
  21666c:	003ff906 	br	216654 <_gp+0xffe04a40>
  216670:	a5c00115 	stw	r23,4(r20)
  216674:	003feb06 	br	216624 <_gp+0xffe04a10>
  216678:	89000017 	ldw	r4,0(r17)
  21667c:	183ee83a 	callr	r3
  216680:	003ff406 	br	216654 <_gp+0xffe04a40>
  216684:	a0800017 	ldw	r2,0(r20)
  216688:	a027883a 	mov	r19,r20
  21668c:	1029883a 	mov	r20,r2
  216690:	003fb606 	br	21656c <_gp+0xffe04958>
  216694:	0005883a 	mov	r2,zero
  216698:	003ffb06 	br	216688 <_gp+0xffe04a74>

0021669c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  21669c:	defffd04 	addi	sp,sp,-12
  2166a0:	df000215 	stw	fp,8(sp)
  2166a4:	df000204 	addi	fp,sp,8
  2166a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  2166ac:	0001883a 	nop
  2166b0:	e0bfff17 	ldw	r2,-4(fp)
  2166b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  2166b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  2166bc:	10000226 	beq	r2,zero,2166c8 <_exit+0x2c>
    ALT_SIM_FAIL();
  2166c0:	002af070 	cmpltui	zero,zero,43969
  2166c4:	00000106 	br	2166cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  2166c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  2166cc:	003fff06 	br	2166cc <_gp+0xffe04ab8>
