
initializer.elf:     file format elf32-littlenios2
initializer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200230

Program Header:
    LOAD off    0x00001000 vaddr 0x00200000 paddr 0x00200000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00200020 paddr 0x00200020 align 2**12
         filesz 0x00016e0c memsz 0x00016e0c flags r-x
    LOAD off    0x00018000 vaddr 0x00408000 paddr 0x00216e2c align 2**12
         filesz 0x00001c7c memsz 0x00001f64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00200000  00200000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00200020  00200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016474  00200230  00200230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  002166a4  002166a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c7c  00408000  00216e2c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  00409c7c  00218aa8  00019c7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_0_data 00000000  00218aa8  00218aa8  00019c7c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00409f64  00409f64  00019c7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019c7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011a8  00000000  00000000  00019ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a5a3  00000000  00000000  0001ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ad6c  00000000  00000000  000453eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d686  00000000  00000000  00050157  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000330c  00000000  00000000  0005d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000054ba  00000000  00000000  00060aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001910f  00000000  00000000  00065fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007f0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c30  00000000  00000000  0007f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00085356  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00085359  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00085365  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00085366  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00085367  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008536b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008536f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00085373  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008537e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00085389  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00085394  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000028  00000000  00000000  0008539e  2**0
                  CONTENTS, READONLY
 30 .jdi          00006645  00000000  00000000  000853c6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00086953  00000000  00000000  0008ba0b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00200000 l    d  .entry	00000000 .entry
00200020 l    d  .exceptions	00000000 .exceptions
00200230 l    d  .text	00000000 .text
002166a4 l    d  .rodata	00000000 .rodata
00408000 l    d  .rwdata	00000000 .rwdata
00409c7c l    d  .bss	00000000 .bss
00218aa8 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00409f64 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../initializer_bsp//obj/HAL/src/crt0.o
00200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 TRUEmain.c
00000000 l    df *ABS*	00000000 main.c
00409c14 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
00409c8c l     O .bss	00000004 usb_delay.2608
00409c90 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00216c2a l     O .rodata	00000010 zeroes.4404
00206324 l     F .text	000000bc __sbprintf
00216c3a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00206534 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0020808c l     F .text	00000008 __fp_unlock
002080a0 l     F .text	0000019c __sinit.part.1
0020823c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00408030 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00408474 l     O .rwdata	00000020 lc_ctype_charset
00408454 l     O .rwdata	00000020 lc_message_charset
00408494 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00216c6c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0020b878 l     F .text	000000fc __sprint_r.part.0
00216d90 l     O .rodata	00000010 zeroes.4349
0020ceb4 l     F .text	000000bc __sbprintf
00216da0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00210cbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00210dd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00210dfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00210ef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00210fd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
002110c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
002112a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00409c54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
002116e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00211824 l     F .text	00000034 alt_dev_reg
00408a7c l     O .rwdata	00000038 i2c_0
00408ab4 l     O .rwdata	00001060 jtag_uart_0
00409b14 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00211910 l     F .text	00000110 optional_irq_callback
00211a70 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0021374c l     F .text	0000020c altera_avalon_jtag_uart_irq
00213958 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0021418c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00214280 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0021548c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00215a38 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00215b98 l     F .text	0000003c alt_get_errno
00215bd4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00409cc8 g     O .bss	00000004 alt_instruction_exception_handler
00203ea8 g     F .text	00000018 putchar
0020ad54 g     F .text	00000074 _mprec_log10
0020ae40 g     F .text	0000008c __any_on
0020d5c0 g     F .text	00000054 _isatty_r
00216c78 g     O .rodata	00000028 __mprec_tinytens
002111dc g     F .text	0000007c alt_main
00409c18 g     O .rwdata	00000008 ctrl_xfers
00203ec0 g     F .text	000000c0 _puts_r
00409e64 g     O .bss	00000100 alt_irq
0020050c g     F .text	0000044c usb_set
0020d614 g     F .text	00000060 _lseek_r
00202818 g     F .text	00000644 USB_Task
00216e2c g       *ABS*	00000000 __flash_rwdata_start
0020f6f8 g     F .text	00000088 .hidden __eqdf2
00409f64 g       *ABS*	00000000 __alt_heap_start
00203e64 g     F .text	0000003c printf
0020d6d4 g     F .text	0000009c _wcrtomb_r
00201990 g     F .text	00000088 kbdPoll
0020b738 g     F .text	0000005c __sseek
002083ec g     F .text	00000010 __sinit
0020cf70 g     F .text	00000140 __swbuf_r
00208ec0 g     F .text	0000007c _setlocale_r
00208244 g     F .text	00000078 __sfmoreglue
00212168 g     F .text	000000a8 alt_avalon_i2c_rx_read
0021127c g     F .text	00000024 __malloc_unlock
002002ac g     F .text	000001f0 GetDriverandReport
00213380 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00211eec g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00209b90 g     F .text	0000015c memmove
002083d4 g     F .text	00000018 _cleanup
00212bd0 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
00209e14 g     F .text	000000a8 _Balloc
00203c70 g     F .text	00000070 .hidden __fixsfsi
00201ae4 g     F .text	00000080 MAXreg_wr
00408000 g     O .rwdata	00000030 ClientDriverTable
0020f780 g     F .text	000000dc .hidden __gtdf2
00216084 g     F .text	00000024 altera_nios2_gen2_irq_init
00202e5c g     F .text	0000002c MSDProbe
00200000 g     F .entry	0000000c __reset
00202318 g     F .text	000000e8 XferCtrlData
00200020 g       *ABS*	00000000 __flash_exceptions_start
00409ccc g     O .bss	00000010 hid_ep
0020d564 g     F .text	0000005c _fstat_r
00409cac g     O .bss	00000004 errno
0020b6b4 g     F .text	00000008 __seofread
00409cb4 g     O .bss	00000004 alt_argv
00411c14 g       *ABS*	00000000 _gp
002116b8 g     F .text	00000030 usleep
002133c4 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
00201c24 g     F .text	000000ac MAXreg_rd
0020378c g     F .text	000004e4 .hidden __subsf3
00215130 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0021207c g     F .text	00000044 alt_avalon_i2c_is_busy
004088fc g     O .rwdata	00000180 alt_fd_list
002018c8 g     F .text	00000040 HID_init
00203ea0 g     F .text	00000008 _putchar_r
00211e20 g     F .text	000000cc alt_avalon_i2c_master_config_set
0021562c g     F .text	00000090 alt_find_dev
00209a48 g     F .text	00000148 memcpy
00200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
00208094 g     F .text	0000000c _cleanup_r
00210b38 g     F .text	000000dc .hidden __floatsidf
00215b1c g     F .text	0000007c alt_io_redirect
0020f85c g     F .text	000000f4 .hidden __ltdf2
002166a4 g       *ABS*	00000000 __DTOR_END__
00212a10 g     F .text	000001c0 alt_avalon_i2c_master_transmit
00203f80 g     F .text	00000014 puts
00216274 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0020b598 g     F .text	00000074 __fpclassifyd
0020acb0 g     F .text	000000a4 __ratio
0020ce98 g     F .text	0000001c __vfiprintf_internal
00213b50 g     F .text	0000021c altera_avalon_jtag_uart_read
00203e34 g     F .text	00000030 _printf_r
00408000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
002031bc g     F .text	00000064 .hidden __udivsi3
00210f2c g     F .text	000000ac isatty
002150a0 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
00216cc8 g     O .rodata	000000c8 __mprec_tens
00208f3c g     F .text	0000000c __locale_charset
00211c8c g     F .text	00000098 alt_avalon_i2c_enable
00409ca8 g     O .bss	00000004 __malloc_top_pad
00409c68 g     O .rwdata	00000008 altera_onchip_flash_list
002132b4 g     F .text	00000068 alt_avalon_i2c_int_disable
00409c20 g     O .rwdata	00000001 usb_task_state
00409c2c g     O .rwdata	00000004 __mb_cur_max
00208f6c g     F .text	0000000c _localeconv_r
0020a248 g     F .text	0000003c __i2b
00208870 g     F .text	000004c8 __sfvwrite_r
0020b60c g     F .text	00000054 _sbrk_r
0020d674 g     F .text	00000060 _read_r
00201fa4 g     F .text	000000bc MAX3421E_init
0020049c g     F .text	00000038 setKeycode
00215444 g     F .text	00000028 alt_dcache_flush
0021441c g     F .text	00000168 alt_onchip_flash_erase_block
00200958 g     F .text	000000b4 SGTL5000_Reg_Rd
00409c4c g     O .rwdata	00000004 alt_max_fd
0020d258 g     F .text	000000f0 _fclose_r
0020805c g     F .text	00000030 fflush
00409ca4 g     O .bss	00000004 __malloc_max_sbrked_mem
00212ddc g     F .text	00000210 alt_avalon_i2c_master_receive
0020e47c g     F .text	000008ac .hidden __adddf3
0020aa58 g     F .text	0000010c __b2d
0020deb8 g     F .text	000005c4 .hidden __umoddi3
00211100 g     F .text	000000dc lseek
0021331c g     F .text	00000064 alt_avalon_i2c_int_enable
00409c24 g     O .rwdata	00000004 _global_impure_ptr
0020b034 g     F .text	00000564 _realloc_r
00409f64 g       *ABS*	00000000 __bss_end
00215948 g     F .text	000000f0 alt_iic_isr_register
002115b0 g     F .text	00000108 alt_tick
0020d8bc g     F .text	000005fc .hidden __udivdi3
002131dc g     F .text	00000058 alt_avalon_i2c_int_status_get
0020d4c0 g     F .text	00000024 _fputwc_r
00216ca0 g     O .rodata	00000028 __mprec_bigtens
0020a02c g     F .text	00000104 __s2b
00210c14 g     F .text	000000a8 .hidden __floatunsidf
0020a798 g     F .text	00000060 __mcmp
0020840c g     F .text	00000018 __fp_lock_all
002158fc g     F .text	0000004c alt_ic_irq_enabled
00211514 g     F .text	0000009c alt_alarm_stop
00211b0c g     F .text	00000054 alt_avalon_i2c_register_callback
00409cc4 g     O .bss	00000004 alt_irq_active
00211b60 g     F .text	000000ec alt_avalon_i2c_init
00202f24 g     F .text	0000002c DummyProbe
002000fc g     F .exceptions	000000d4 alt_irq_handler
004088d4 g     O .rwdata	00000028 alt_dev_null
00201908 g     F .text	00000088 mousePoll
00201df8 g     F .text	00000024 Vbus_power
0021546c g     F .text	00000020 alt_dcache_flush_all
0020a130 g     F .text	00000068 __hi0bits
00210ab8 g     F .text	00000080 .hidden __fixdfsi
00409c7c g       *ABS*	00000000 __ram_rwdata_end
00409c44 g     O .rwdata	00000008 alt_dev_list
00211724 g     F .text	00000100 write
0020aecc g     F .text	000000a0 _putc_r
0021249c g     F .text	0000004c alt_avalon_i2c_check_arblost
002032a0 g     F .text	000000bc .hidden __gtsf2
00213278 g     F .text	0000003c alt_avalon_i2c_int_clear
00216e2c g       *ABS*	00000000 __ram_rodata_end
00409c91 g     O .bss	00000001 usb_error
00210e38 g     F .text	000000b8 fstat
0020f85c g     F .text	000000f4 .hidden __ledf2
00409c60 g     O .rwdata	00000008 alt_avalon_i2c_list
0020a510 g     F .text	00000140 __pow5mult
0020b98c g     F .text	0000150c ___vfiprintf_internal_r
00409c9c g     O .bss	00000004 __nlocale_changed
00203220 g     F .text	00000058 .hidden __umodsi3
00409f64 g       *ABS*	00000000 end
0021368c g     F .text	000000c0 altera_avalon_jtag_uart_init
002001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00211c4c g     F .text	00000040 alt_avalon_i2c_open
00202474 g     F .text	0000017c XferDispatchPkt
002166a4 g       *ABS*	00000000 __CTOR_LIST__
00410000 g       *ABS*	00000000 __alt_stack_pointer
00212624 g     F .text	000000e8 alt_avalon_i2c_master_tx
00214204 g     F .text	0000007c alt_avalon_timer_sc_init
00203dd0 g     F .text	00000064 .hidden __clzsi2
00213d6c g     F .text	00000224 altera_avalon_jtag_uart_write
002083fc g     F .text	00000004 __sfp_lock_acquire
00209964 g     F .text	000000e4 memchr
0020402c g     F .text	000022dc ___vfprintf_internal_r
00202198 g     F .text	00000034 MaxGpxHandler
00214380 g     F .text	0000009c alt_onchip_flash_get_info
00208560 g     F .text	00000310 _free_r
00215e1c g     F .text	0000022c alt_printf
00208f48 g     F .text	00000010 __locale_mb_cur_max
002164f0 g     F .text	00000180 __call_exitprocs
00409c98 g     O .bss	00000004 __mlocale_changed
00211a20 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
00409c30 g     O .rwdata	00000004 __malloc_sbrk_base
00200230 g     F .text	0000003c _start
00409cbc g     O .bss	00000004 _alt_tick_rate
00201cd0 g     F .text	00000080 MAXbytes_rd
00212fec g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
00213410 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0020a650 g     F .text	00000148 __lshift
00213f90 g     F .text	000001fc alt_avalon_spi_command
00409cc0 g     O .bss	00000004 _alt_nticks
002112dc g     F .text	00000104 read
00211890 g     F .text	00000080 alt_sys_init
00409e1c g     O .bss	00000048 devtable
002163d8 g     F .text	00000118 __register_exitproc
002014c0 g     F .text	00000408 HIDKProbe
00409cdc g     O .bss	00000018 msd_ep
00212848 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0020a284 g     F .text	0000028c __multiply
002139f8 g     F .text	00000068 altera_avalon_jtag_uart_close
00202780 g     F .text	00000098 USB_init
00203278 g     F .text	00000028 .hidden __mulsi3
00409d1c g     O .bss	00000100 bigbuf
00408000 g       *ABS*	00000000 __ram_rwdata_start
002166a4 g       *ABS*	00000000 __ram_rodata_start
00409cf4 g     O .bss	00000028 __malloc_current_mallinfo
00409c88 g     O .bss	00000001 last_usb_task_state
0020ab64 g     F .text	0000014c __d2b
00409c80 g     O .bss	00000008 dev0ep
00200af8 g     F .text	00000050 clearLED
00213528 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
002161b0 g     F .text	000000c4 alt_get_fd
002152ec g     F .text	00000158 alt_busy_sleep
00202e88 g     F .text	00000038 MSDEventHandler
0020d128 g     F .text	00000054 _close_r
0021635c g     F .text	0000007c memcmp
002120c0 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
002135e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00409f64 g       *ABS*	00000000 __alt_stack_base
00213638 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
002063e0 g     F .text	00000154 __swsetup_r
0020ed28 g     F .text	000009d0 .hidden __divdf3
002142b4 g     F .text	000000cc alt_onchip_flash_read
002082bc g     F .text	00000118 __sfp
0020adc8 g     F .text	00000078 __copybits
004084cc g     O .rwdata	00000408 __malloc_av_
00208408 g     F .text	00000004 __sinit_lock_release
00202eec g     F .text	00000038 CDCEventHandler
0020f950 g     F .text	0000086c .hidden __muldf3
00202f50 g     F .text	00000038 DummyEventHandler
0020b660 g     F .text	00000054 __sread
002160a8 g     F .text	00000108 alt_find_file
002154c8 g     F .text	000000a4 alt_dev_llist_insert
00211258 g     F .text	00000024 __malloc_lock
00211464 g     F .text	000000b0 sbrk
002124e8 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
00212450 g     F .text	0000004c alt_avalon_i2c_check_nack
00208000 g     F .text	0000005c _fflush_r
0020d17c g     F .text	000000dc _calloc_r
00409c70 g     O .rwdata	00000008 alt_flash_dev_list
00409c7c g       *ABS*	00000000 __bss_start
00201e1c g     F .text	00000188 MAX_busprobe
00409c7c g     O .bss	00000002 hid_device
00209cec g     F .text	00000128 memset
0020026c g     F .text	00000040 main
00202060 g     F .text	0000006c MAX3421E_Task
0021241c g     F .text	00000034 alt_avalon_i2c_master_target_set
00409cb8 g     O .bss	00000004 alt_envp
00409ca0 g     O .bss	00000004 __malloc_max_total_mem
00213588 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0020d0b0 g     F .text	00000018 __swbuf
00202fe0 g     F .text	00000084 ConvUTF8ToStr
00213234 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0020b794 g     F .text	00000008 __sclose
00410000 g       *ABS*	00000000 __alt_heap_limit
0020d348 g     F .text	00000014 fclose
0020675c g     F .text	00001688 _dtoa_r
00209158 g     F .text	0000080c _malloc_r
0020d830 g     F .text	00000030 __ascii_wctomb
00409c50 g     O .rwdata	00000004 alt_errno
00215010 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
00208d38 g     F .text	000000c4 _fwalk
0020af6c g     F .text	000000c8 putc
002030c4 g     F .text	00000084 .hidden __divsi3
002025f0 g     F .text	00000190 XferInTransfer
00200c68 g     F .text	00000140 printSignedHex1
0020843c g     F .text	00000124 _malloc_trim_r
002166a4 g       *ABS*	00000000 __CTOR_END__
00214b34 g     F .text	000004dc altera_onchip_flash_init
0020335c g     F .text	00000430 .hidden __mulsf3
00202fa8 g     F .text	00000038 GetDevtable
0020b79c g     F .text	000000dc strcmp
002166a4 g       *ABS*	00000000 __flash_rodata_start
002166a4 g       *ABS*	00000000 __DTOR_LIST__
00202400 g     F .text	00000074 XferCtrlND
00200a0c g     F .text	000000a0 SGTL5000_Reg_Wr
0020f6f8 g     F .text	00000088 .hidden __nedf2
00201d50 g     F .text	000000a8 MAX3421E_reset
00211858 g     F .text	00000038 alt_irq_init
002113e0 g     F .text	00000084 alt_release_fd
00216ae4 g     O .rodata	00000100 .hidden __clz_tab
00409c94 g     O .bss	00000004 _PathLocale
002004d4 g     F .text	00000038 setdfjk
00216310 g     F .text	00000014 atexit
002032a0 g     F .text	000000bc .hidden __gesf2
0020d0c8 g     F .text	00000060 _write_r
00208f78 g     F .text	00000018 setlocale
00409c28 g     O .rwdata	00000004 _impure_ptr
00409cb0 g     O .bss	00000004 alt_argc
00207de4 g     F .text	0000021c __sflush_r
002155cc g     F .text	00000060 _do_dtors
00208f64 g     F .text	00000008 __locale_cjk_lang
002123e4 g     F .text	00000038 alt_avalon_i2c_master_target_get
002122f4 g     F .text	000000f0 alt_avalon_i2c_send_address
00201b64 g     F .text	000000c0 MAXbytes_wr
00200020 g       .exceptions	00000000 alt_irq_entry
0020a9f4 g     F .text	00000064 __ulp
00208424 g     F .text	00000018 __fp_unlock_all
00409c3c g     O .rwdata	00000008 alt_fs_list
00214584 g     F .text	000002d8 alt_onchip_flash_write_block
00202ec0 g     F .text	0000002c CDCProbe
00200020 g       *ABS*	00000000 __ram_exceptions_start
00208f90 g     F .text	0000000c localeconv
00200aac g     F .text	0000004c setLED
00202f88 g     F .text	00000020 GetUsbTaskState
002134c0 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00215798 g     F .text	00000050 alt_ic_isr_register
00211d24 g     F .text	0000004c alt_avalon_i2c_disable
002166e0 g     O .rodata	00000010 devclasses
00409c7c g       *ABS*	00000000 _edata
00201a50 g     F .text	00000038 HIDKEventHandler
0021485c g     F .text	000002d8 alt_onchip_flash_write
00200da8 g     F .text	00000310 setup_i2c
00409f64 g       *ABS*	00000000 _end
002156bc g     F .text	00000068 alt_flash_open_dev
002020cc g     F .text	000000cc MaxIntHandler
0020d35c g     F .text	00000164 __fputwc
00200230 g       *ABS*	00000000 __ram_exceptions_end
00213a60 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00211d70 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00201a88 g     F .text	00000034 SPI_init
00215870 g     F .text	0000008c alt_ic_irq_disable
0020b6bc g     F .text	0000007c __swrite
00409c34 g     O .rwdata	00000004 __malloc_trim_threshold
00208f58 g     F .text	0000000c __locale_msgcharset
00216324 g     F .text	00000038 exit
00208dfc g     F .text	000000c4 _fwalk_reent
00203ce0 g     F .text	000000f0 .hidden __floatunsisf
0020a7f8 g     F .text	000001fc __mdiff
00215724 g     F .text	00000054 alt_flash_close_dev
00203148 g     F .text	00000074 .hidden __modsi3
00410000 g       *ABS*	00000000 __alt_data_end
00200020 g     F .exceptions	00000000 alt_exception
00208400 g     F .text	00000004 __sfp_lock_release
00211f80 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00212210 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00203064 g     F .text	00000060 .hidden __fixunssfsi
00201a18 g     F .text	00000038 HIDMEventHandler
00216670 g     F .text	00000034 _exit
002151c0 g     F .text	0000012c alt_alarm_start
00200b48 g     F .text	00000120 printSignedHex0
00208f9c g     F .text	000001bc __smakebuf_r
00203f94 g     F .text	00000098 strlen
00215cc0 g     F .text	0000015c open
0020f780 g     F .text	000000dc .hidden __gedf2
00216048 g     F .text	0000003c alt_putchar
00409c38 g     O .rwdata	00000004 __wctomb
0020b974 g     F .text	00000018 __sprint_r
00215778 g     F .text	00000020 alt_icache_flush_all
00409c78 g     O .rwdata	00000004 alt_priority_mask
002157e8 g     F .text	00000088 alt_ic_irq_enable
00206308 g     F .text	0000001c __vfprintf_internal
002010b8 g     F .text	00000408 HIDMProbe
0020d860 g     F .text	0000005c _wctomb_r
00201abc g     F .text	00000028 SPI_wr
002101bc g     F .text	000008fc .hidden __subdf3
0020a198 g     F .text	000000b0 __lo0bits
00409c58 g     O .rwdata	00000008 alt_alarm_list
0021556c g     F .text	00000060 _do_ctors
0020d770 g     F .text	000000c0 wcrtomb
00210cf8 g     F .text	000000d8 close
00213474 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00211040 g     F .text	00000084 alt_load
0021270c g     F .text	0000013c alt_avalon_i2c_master_rx
0020d4e4 g     F .text	00000080 fputwc
00208404 g     F .text	00000004 __sinit_lock_acquire
002021cc g     F .text	0000014c XferCtrlReq
00209ee4 g     F .text	00000148 __multadd
00209ebc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00200000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  200000:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  200004:	08408c14 	ori	at,at,560
    jmp r1
  200008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  20002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  20003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  20004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  20005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  20006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  20007c:	10000326 	beq	r2,zero,20008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  200080:	20000226 	beq	r4,zero,20008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  200084:	02000fc0 	call	2000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  200088:	00000706 	br	2000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  20008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  200098:	02001d00 	call	2001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  20009c:	1000021e 	bne	r2,zero,2000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  2000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  2000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  2000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  2000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  2000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  2000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2000f8:	ef80083a 	eret

002000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2000fc:	defff904 	addi	sp,sp,-28
  200100:	dfc00615 	stw	ra,24(sp)
  200104:	df000515 	stw	fp,20(sp)
  200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  20010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  200110:	0005313a 	rdctl	r2,ipending
  200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  20011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  200124:	00800044 	movi	r2,1
  200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  20012c:	e0fffb17 	ldw	r3,-20(fp)
  200130:	e0bffc17 	ldw	r2,-16(fp)
  200134:	1884703a 	and	r2,r3,r2
  200138:	10001426 	beq	r2,zero,20018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  20013c:	00801074 	movhi	r2,65
  200140:	10a79904 	addi	r2,r2,-24988
  200144:	e0fffd17 	ldw	r3,-12(fp)
  200148:	180690fa 	slli	r3,r3,3
  20014c:	10c5883a 	add	r2,r2,r3
  200150:	10c00017 	ldw	r3,0(r2)
  200154:	00801074 	movhi	r2,65
  200158:	10a79904 	addi	r2,r2,-24988
  20015c:	e13ffd17 	ldw	r4,-12(fp)
  200160:	200890fa 	slli	r4,r4,3
  200164:	1105883a 	add	r2,r2,r4
  200168:	10800104 	addi	r2,r2,4
  20016c:	10800017 	ldw	r2,0(r2)
  200170:	1009883a 	mov	r4,r2
  200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  20017c:	0005313a 	rdctl	r2,ipending
  200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  200184:	e0bfff17 	ldw	r2,-4(fp)
  200188:	00000706 	br	2001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  20018c:	e0bffc17 	ldw	r2,-16(fp)
  200190:	1085883a 	add	r2,r2,r2
  200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  200198:	e0bffd17 	ldw	r2,-12(fp)
  20019c:	10800044 	addi	r2,r2,1
  2001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2001a4:	003fe106 	br	20012c <_gp+0xffdee518>

    active = alt_irq_pending ();
  2001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  2001ac:	e0bffb17 	ldw	r2,-20(fp)
  2001b0:	103fdb1e 	bne	r2,zero,200120 <_gp+0xffdee50c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  2001b4:	0001883a 	nop
}
  2001b8:	0001883a 	nop
  2001bc:	e037883a 	mov	sp,fp
  2001c0:	dfc00117 	ldw	ra,4(sp)
  2001c4:	df000017 	ldw	fp,0(sp)
  2001c8:	dec00204 	addi	sp,sp,8
  2001cc:	f800283a 	ret

002001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  2001d0:	defffb04 	addi	sp,sp,-20
  2001d4:	dfc00415 	stw	ra,16(sp)
  2001d8:	df000315 	stw	fp,12(sp)
  2001dc:	df000304 	addi	fp,sp,12
  2001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  2001e4:	00bfffc4 	movi	r2,-1
  2001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  2001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  2001f0:	d0a02d17 	ldw	r2,-32588(gp)
  2001f4:	10000726 	beq	r2,zero,200214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  2001f8:	d0a02d17 	ldw	r2,-32588(gp)
  2001fc:	e0fffd17 	ldw	r3,-12(fp)
  200200:	e1bffe17 	ldw	r6,-8(fp)
  200204:	e17fff17 	ldw	r5,-4(fp)
  200208:	1809883a 	mov	r4,r3
  20020c:	103ee83a 	callr	r2
  200210:	00000206 	br	20021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  200214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  200218:	0005883a 	mov	r2,zero
}
  20021c:	e037883a 	mov	sp,fp
  200220:	dfc00117 	ldw	ra,4(sp)
  200224:	df000017 	ldw	fp,0(sp)
  200228:	dec00204 	addi	sp,sp,8
  20022c:	f800283a 	ret

Disassembly of section .text:

00200230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200230:	06c01074 	movhi	sp,65
    ori sp, sp, %lo(__alt_stack_pointer)
  200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  200238:	06801074 	movhi	gp,65
    ori gp, gp, %lo(_gp)
  20023c:	d6870514 	ori	gp,gp,7188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200240:	00801034 	movhi	r2,64
    ori r2, r2, %lo(__bss_start)
  200244:	10a71f14 	ori	r2,r2,40060

    movhi r3, %hi(__bss_end)
  200248:	00c01034 	movhi	r3,64
    ori r3, r3, %lo(__bss_end)
  20024c:	18e7d914 	ori	r3,r3,40804

    beq r2, r3, 1f
  200250:	10c00326 	beq	r2,r3,200260 <_start+0x30>

0:
    stw zero, (r2)
  200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20025c:	10fffd36 	bltu	r2,r3,200254 <_gp+0xffdee640>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200260:	02110400 	call	211040 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200264:	02111dc0 	call	2111dc <alt_main>

00200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200268:	003fff06 	br	200268 <_gp+0xffdee654>

0020026c <main>:
#include "main.h"

int main(){
  20026c:	defffe04 	addi	sp,sp,-8
  200270:	dfc00115 	stw	ra,4(sp)
  200274:	df000015 	stw	fp,0(sp)
  200278:	d839883a 	mov	fp,sp
	setup_i2c();
  20027c:	0200da80 	call	200da8 <setup_i2c>
	*(volatile unsigned int*)LEDS_PIO_BASE=0xFFFF;
  200280:	00801074 	movhi	r2,65
  200284:	10843004 	addi	r2,r2,4288
  200288:	00ffffd4 	movui	r3,65535
  20028c:	10c00015 	stw	r3,0(r2)
	usb_set();
  200290:	020050c0 	call	20050c <usb_set>
//	while(1)
//	{
//		usleep(1000000);
//		printf("hahahaha\n");
//	}
return 0;
  200294:	0005883a 	mov	r2,zero
}
  200298:	e037883a 	mov	sp,fp
  20029c:	dfc00117 	ldw	ra,4(sp)
  2002a0:	df000017 	ldw	fp,0(sp)
  2002a4:	dec00204 	addi	sp,sp,8
  2002a8:	f800283a 	ret

002002ac <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
  2002ac:	defff604 	addi	sp,sp,-40
  2002b0:	dfc00915 	stw	ra,36(sp)
  2002b4:	df000815 	stw	fp,32(sp)
  2002b8:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
  2002bc:	00bfffc4 	movi	r2,-1
  2002c0:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
  2002c4:	01000874 	movhi	r4,33
  2002c8:	2119bc04 	addi	r4,r4,26352
  2002cc:	0203f800 	call	203f80 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
  2002d0:	00800044 	movi	r2,1
  2002d4:	e0bffd05 	stb	r2,-12(fp)
  2002d8:	00001f06 	br	200358 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
  2002dc:	e0bffd03 	ldbu	r2,-12(fp)
  2002e0:	1009883a 	mov	r4,r2
  2002e4:	0202fa80 	call	202fa8 <GetDevtable>
  2002e8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
  2002ec:	e0bffe17 	ldw	r2,-8(fp)
  2002f0:	10800017 	ldw	r2,0(r2)
  2002f4:	10001526 	beq	r2,zero,20034c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
  2002f8:	e0bffd03 	ldbu	r2,-12(fp)
  2002fc:	100b883a 	mov	r5,r2
  200300:	01000874 	movhi	r4,33
  200304:	2119c504 	addi	r4,r4,26388
  200308:	0203e640 	call	203e64 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
  20030c:	e0bffe17 	ldw	r2,-8(fp)
  200310:	10800103 	ldbu	r2,4(r2)
  200314:	10c03fcc 	andi	r3,r2,255
  200318:	00800874 	movhi	r2,33
  20031c:	1099b804 	addi	r2,r2,26336
  200320:	18c7883a 	add	r3,r3,r3
  200324:	18c7883a 	add	r3,r3,r3
  200328:	10c5883a 	add	r2,r2,r3
  20032c:	10800017 	ldw	r2,0(r2)
  200330:	100b883a 	mov	r5,r2
  200334:	01000874 	movhi	r4,33
  200338:	2119c804 	addi	r4,r4,26400
  20033c:	0203e640 	call	203e64 <printf>
			device = tpl_ptr->devclass;
  200340:	e0bffe17 	ldw	r2,-8(fp)
  200344:	10800103 	ldbu	r2,4(r2)
  200348:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
  20034c:	e0bffd03 	ldbu	r2,-12(fp)
  200350:	10800044 	addi	r2,r2,1
  200354:	e0bffd05 	stb	r2,-12(fp)
  200358:	e0bffd03 	ldbu	r2,-12(fp)
  20035c:	10800230 	cmpltui	r2,r2,8
  200360:	103fde1e 	bne	r2,zero,2002dc <_gp+0xffdee6c8>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
  200364:	d0a00003 	ldbu	r2,-32768(gp)
  200368:	11003fcc 	andi	r4,r2,255
  20036c:	d0a01a43 	ldbu	r2,-32663(gp)
  200370:	10803fcc 	andi	r2,r2,255
  200374:	e0ffff44 	addi	r3,fp,-3
  200378:	d8c00415 	stw	r3,16(sp)
  20037c:	00c00044 	movi	r3,1
  200380:	d8c00315 	stw	r3,12(sp)
  200384:	d8800215 	stw	r2,8(sp)
  200388:	d8000115 	stw	zero,4(sp)
  20038c:	d8000015 	stw	zero,0(sp)
  200390:	01c00084 	movi	r7,2
  200394:	01802844 	movi	r6,161
  200398:	000b883a 	mov	r5,zero
  20039c:	02021cc0 	call	2021cc <XferCtrlReq>
  2003a0:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
  2003a4:	e0bfff03 	ldbu	r2,-4(fp)
  2003a8:	10000926 	beq	r2,zero,2003d0 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
  2003ac:	01000874 	movhi	r4,33
  2003b0:	2119ca04 	addi	r4,r4,26408
  2003b4:	0203e640 	call	203e64 <printf>
		printf("%x \n", rcode);
  2003b8:	e0bfff03 	ldbu	r2,-4(fp)
  2003bc:	100b883a 	mov	r5,r2
  2003c0:	01000874 	movhi	r4,33
  2003c4:	2119d104 	addi	r4,r4,26436
  2003c8:	0203e640 	call	203e64 <printf>
  2003cc:	00000906 	br	2003f4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
  2003d0:	01000874 	movhi	r4,33
  2003d4:	2119d304 	addi	r4,r4,26444
  2003d8:	0203e640 	call	203e64 <printf>
		printf("%x \n", tmpbyte);
  2003dc:	e0bfff43 	ldbu	r2,-3(fp)
  2003e0:	10803fcc 	andi	r2,r2,255
  2003e4:	100b883a 	mov	r5,r2
  2003e8:	01000874 	movhi	r4,33
  2003ec:	2119d104 	addi	r4,r4,26436
  2003f0:	0203e640 	call	203e64 <printf>
	}
	printf("Protocol: ");
  2003f4:	01000874 	movhi	r4,33
  2003f8:	2119d704 	addi	r4,r4,26460
  2003fc:	0203e640 	call	203e64 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
  200400:	d0a00003 	ldbu	r2,-32768(gp)
  200404:	11003fcc 	andi	r4,r2,255
  200408:	d0a01a43 	ldbu	r2,-32663(gp)
  20040c:	10803fcc 	andi	r2,r2,255
  200410:	e0ffff44 	addi	r3,fp,-3
  200414:	d8c00415 	stw	r3,16(sp)
  200418:	00c00044 	movi	r3,1
  20041c:	d8c00315 	stw	r3,12(sp)
  200420:	d8800215 	stw	r2,8(sp)
  200424:	d8000115 	stw	zero,4(sp)
  200428:	d8000015 	stw	zero,0(sp)
  20042c:	01c000c4 	movi	r7,3
  200430:	01802844 	movi	r6,161
  200434:	000b883a 	mov	r5,zero
  200438:	02021cc0 	call	2021cc <XferCtrlReq>
  20043c:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
  200440:	e0bfff03 	ldbu	r2,-4(fp)
  200444:	10000926 	beq	r2,zero,20046c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
  200448:	01000874 	movhi	r4,33
  20044c:	2119da04 	addi	r4,r4,26472
  200450:	0203e640 	call	203e64 <printf>
		printf("%x \n", rcode);
  200454:	e0bfff03 	ldbu	r2,-4(fp)
  200458:	100b883a 	mov	r5,r2
  20045c:	01000874 	movhi	r4,33
  200460:	2119d104 	addi	r4,r4,26436
  200464:	0203e640 	call	203e64 <printf>
  200468:	00000606 	br	200484 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
  20046c:	e0bfff43 	ldbu	r2,-3(fp)
  200470:	10803fcc 	andi	r2,r2,255
  200474:	100b883a 	mov	r5,r2
  200478:	01000874 	movhi	r4,33
  20047c:	2119e104 	addi	r4,r4,26500
  200480:	0203e640 	call	203e64 <printf>
	}
	return device;
  200484:	e0bffd43 	ldbu	r2,-11(fp)
}
  200488:	e037883a 	mov	sp,fp
  20048c:	dfc00117 	ldw	ra,4(sp)
  200490:	df000017 	ldw	fp,0(sp)
  200494:	dec00204 	addi	sp,sp,8
  200498:	f800283a 	ret

0020049c <setKeycode>:

void setKeycode(WORD keycode)
{
  20049c:	defffe04 	addi	sp,sp,-8
  2004a0:	df000115 	stw	fp,4(sp)
  2004a4:	df000104 	addi	fp,sp,4
  2004a8:	2005883a 	mov	r2,r4
  2004ac:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
  2004b0:	e0ffff0b 	ldhu	r3,-4(fp)
  2004b4:	00801074 	movhi	r2,65
  2004b8:	10843804 	addi	r2,r2,4320
  2004bc:	10c00035 	stwio	r3,0(r2)
}
  2004c0:	0001883a 	nop
  2004c4:	e037883a 	mov	sp,fp
  2004c8:	df000017 	ldw	fp,0(sp)
  2004cc:	dec00104 	addi	sp,sp,4
  2004d0:	f800283a 	ret

002004d4 <setdfjk>:
void setdfjk(BYTE keycode)
{
  2004d4:	defffe04 	addi	sp,sp,-8
  2004d8:	df000115 	stw	fp,4(sp)
  2004dc:	df000104 	addi	fp,sp,4
  2004e0:	2005883a 	mov	r2,r4
  2004e4:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DFJK_BASE, keycode);
  2004e8:	e0ffff03 	ldbu	r3,-4(fp)
  2004ec:	00801074 	movhi	r2,65
  2004f0:	10842804 	addi	r2,r2,4256
  2004f4:	10c00035 	stwio	r3,0(r2)
}
  2004f8:	0001883a 	nop
  2004fc:	e037883a 	mov	sp,fp
  200500:	df000017 	ldw	fp,0(sp)
  200504:	dec00104 	addi	sp,sp,4
  200508:	f800283a 	ret

0020050c <usb_set>:
int usb_set() {
  20050c:	defff604 	addi	sp,sp,-40
  200510:	dfc00915 	stw	ra,36(sp)
  200514:	df000815 	stw	fp,32(sp)
  200518:	df000804 	addi	fp,sp,32
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
  20051c:	e03ff805 	stb	zero,-32(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
  200520:	e03ff845 	stb	zero,-31(fp)
	BYTE device;
	BYTE dfjk = 0;
  200524:	e03ff8c5 	stb	zero,-29(fp)
	WORD temp_keycode=0;
  200528:	e03ff90d 	sth	zero,-28(fp)
	printf("initializing MAX3421E...\n");
  20052c:	01000874 	movhi	r4,33
  200530:	2119e304 	addi	r4,r4,26508
  200534:	0203f800 	call	203f80 <puts>
	MAX3421E_init();
  200538:	0201fa40 	call	201fa4 <MAX3421E_init>
	printf("initializing USB...\n");
  20053c:	01000874 	movhi	r4,33
  200540:	2119ea04 	addi	r4,r4,26536
  200544:	0203f800 	call	203f80 <puts>
	USB_init();
  200548:	02027800 	call	202780 <USB_init>
	while (1) {
		MAX3421E_Task();
  20054c:	02020600 	call	202060 <MAX3421E_Task>
		USB_Task();
  200550:	02028180 	call	202818 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
  200554:	0202f880 	call	202f88 <GetUsbTaskState>
  200558:	10803fcc 	andi	r2,r2,255
  20055c:	10801018 	cmpnei	r2,r2,64
  200560:	1000d91e 	bne	r2,zero,2008c8 <usb_set+0x3bc>
			if (!runningdebugflag) {
  200564:	e0bff803 	ldbu	r2,-32(fp)
  200568:	1000071e 	bne	r2,zero,200588 <usb_set+0x7c>
				runningdebugflag = 1;
  20056c:	00800044 	movi	r2,1
  200570:	e0bff805 	stb	r2,-32(fp)
				setLED(9);
  200574:	01000244 	movi	r4,9
  200578:	0200aac0 	call	200aac <setLED>
				device = GetDriverandReport();
  20057c:	02002ac0 	call	2002ac <GetDriverandReport>
  200580:	e0bff885 	stb	r2,-30(fp)
  200584:	003ff106 	br	20054c <_gp+0xffdee938>
			} else if (device == 1) {
  200588:	e0bff883 	ldbu	r2,-30(fp)
  20058c:	10800058 	cmpnei	r2,r2,1
  200590:	1000711e 	bne	r2,zero,200758 <usb_set+0x24c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
  200594:	e0bffd44 	addi	r2,fp,-11
  200598:	1009883a 	mov	r4,r2
  20059c:	02019900 	call	201990 <kbdPoll>
  2005a0:	e0bffb05 	stb	r2,-20(fp)
		printf(".");
  2005a4:	01000b84 	movi	r4,46
  2005a8:	0203ea80 	call	203ea8 <putchar>
				if (rcode == hrNAK) {
  2005ac:	e0bffb03 	ldbu	r2,-20(fp)
  2005b0:	10800118 	cmpnei	r2,r2,4
  2005b4:	1000e426 	beq	r2,zero,200948 <usb_set+0x43c>
					continue; //NAK means no new data
				} else if (rcode) {
  2005b8:	e0bffb03 	ldbu	r2,-20(fp)
  2005bc:	10000926 	beq	r2,zero,2005e4 <usb_set+0xd8>
					printf("Rcode: ");
  2005c0:	01000874 	movhi	r4,33
  2005c4:	2119ef04 	addi	r4,r4,26556
  2005c8:	0203e640 	call	203e64 <printf>
					printf("%x \n", rcode);
  2005cc:	e0bffb03 	ldbu	r2,-20(fp)
  2005d0:	100b883a 	mov	r5,r2
  2005d4:	01000874 	movhi	r4,33
  2005d8:	2119d104 	addi	r4,r4,26436
  2005dc:	0203e640 	call	203e64 <printf>
					continue;
  2005e0:	0000dc06 	br	200954 <usb_set+0x448>
				}
				printf("dfjk: ");
  2005e4:	01000874 	movhi	r4,33
  2005e8:	2119f104 	addi	r4,r4,26564
  2005ec:	0203e640 	call	203e64 <printf>
				for (int i = 0; i < 6; i++) {
  2005f0:	e03ffa15 	stw	zero,-24(fp)
  2005f4:	00003c06 	br	2006e8 <usb_set+0x1dc>
					if (kbdbuf.keycode[i] == 0x7 )
  2005f8:	e0fffdc4 	addi	r3,fp,-9
  2005fc:	e0bffa17 	ldw	r2,-24(fp)
  200600:	1885883a 	add	r2,r3,r2
  200604:	10800003 	ldbu	r2,0(r2)
  200608:	10803fcc 	andi	r2,r2,255
  20060c:	108001d8 	cmpnei	r2,r2,7
  200610:	1000051e 	bne	r2,zero,200628 <usb_set+0x11c>
					{
						dfjk |= 1<<7;
  200614:	e0fff8c3 	ldbu	r3,-29(fp)
  200618:	00bfe004 	movi	r2,-128
  20061c:	1884b03a 	or	r2,r3,r2
  200620:	e0bff8c5 	stb	r2,-29(fp)
  200624:	00002d06 	br	2006dc <usb_set+0x1d0>
					}
					else if (kbdbuf.keycode[i] == 0x9)
  200628:	e0fffdc4 	addi	r3,fp,-9
  20062c:	e0bffa17 	ldw	r2,-24(fp)
  200630:	1885883a 	add	r2,r3,r2
  200634:	10800003 	ldbu	r2,0(r2)
  200638:	10803fcc 	andi	r2,r2,255
  20063c:	10800258 	cmpnei	r2,r2,9
  200640:	1000041e 	bne	r2,zero,200654 <usb_set+0x148>
					{
						dfjk |= 1<<6;
  200644:	e0bff8c3 	ldbu	r2,-29(fp)
  200648:	10801014 	ori	r2,r2,64
  20064c:	e0bff8c5 	stb	r2,-29(fp)
  200650:	00002206 	br	2006dc <usb_set+0x1d0>

					}
					else if(kbdbuf.keycode[i] == 0x19)
  200654:	e0fffdc4 	addi	r3,fp,-9
  200658:	e0bffa17 	ldw	r2,-24(fp)
  20065c:	1885883a 	add	r2,r3,r2
  200660:	10800003 	ldbu	r2,0(r2)
  200664:	10803fcc 	andi	r2,r2,255
  200668:	10800658 	cmpnei	r2,r2,25
  20066c:	1000041e 	bne	r2,zero,200680 <usb_set+0x174>
					{
						dfjk |= 1<<5;
  200670:	e0bff8c3 	ldbu	r2,-29(fp)
  200674:	10800814 	ori	r2,r2,32
  200678:	e0bff8c5 	stb	r2,-29(fp)
  20067c:	00001706 	br	2006dc <usb_set+0x1d0>
						
					}
					else if(kbdbuf.keycode[i] == 0x1A)
  200680:	e0fffdc4 	addi	r3,fp,-9
  200684:	e0bffa17 	ldw	r2,-24(fp)
  200688:	1885883a 	add	r2,r3,r2
  20068c:	10800003 	ldbu	r2,0(r2)
  200690:	10803fcc 	andi	r2,r2,255
  200694:	10800698 	cmpnei	r2,r2,26
  200698:	1000041e 	bne	r2,zero,2006ac <usb_set+0x1a0>
					{
						dfjk |= 1<<4;
  20069c:	e0bff8c3 	ldbu	r2,-29(fp)
  2006a0:	10800414 	ori	r2,r2,16
  2006a4:	e0bff8c5 	stb	r2,-29(fp)
  2006a8:	00000c06 	br	2006dc <usb_set+0x1d0>
					}
					else if(kbdbuf.keycode[i]!=0)
  2006ac:	e0fffdc4 	addi	r3,fp,-9
  2006b0:	e0bffa17 	ldw	r2,-24(fp)
  2006b4:	1885883a 	add	r2,r3,r2
  2006b8:	10800003 	ldbu	r2,0(r2)
  2006bc:	10803fcc 	andi	r2,r2,255
  2006c0:	10000626 	beq	r2,zero,2006dc <usb_set+0x1d0>
					{
						temp_keycode = kbdbuf.keycode[i];
  2006c4:	e0fffdc4 	addi	r3,fp,-9
  2006c8:	e0bffa17 	ldw	r2,-24(fp)
  2006cc:	1885883a 	add	r2,r3,r2
  2006d0:	10800003 	ldbu	r2,0(r2)
  2006d4:	10803fcc 	andi	r2,r2,255
  2006d8:	e0bff90d 	sth	r2,-28(fp)
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("dfjk: ");
				for (int i = 0; i < 6; i++) {
  2006dc:	e0bffa17 	ldw	r2,-24(fp)
  2006e0:	10800044 	addi	r2,r2,1
  2006e4:	e0bffa15 	stw	r2,-24(fp)
  2006e8:	e0bffa17 	ldw	r2,-24(fp)
  2006ec:	10800190 	cmplti	r2,r2,6
  2006f0:	103fc11e 	bne	r2,zero,2005f8 <_gp+0xffdee9e4>
					else if(kbdbuf.keycode[i]!=0)
					{
						temp_keycode = kbdbuf.keycode[i];
					}
				}
				setdfjk(dfjk);
  2006f4:	e0bff8c3 	ldbu	r2,-29(fp)
  2006f8:	1009883a 	mov	r4,r2
  2006fc:	02004d40 	call	2004d4 <setdfjk>
				printf("%x \n", dfjk);
  200700:	e0bff8c3 	ldbu	r2,-29(fp)
  200704:	100b883a 	mov	r5,r2
  200708:	01000874 	movhi	r4,33
  20070c:	2119d104 	addi	r4,r4,26436
  200710:	0203e640 	call	203e64 <printf>
				setKeycode(temp_keycode);
  200714:	e0bff90b 	ldhu	r2,-28(fp)
  200718:	1009883a 	mov	r4,r2
  20071c:	020049c0 	call	20049c <setKeycode>
				if(kbdbuf.keycode[0])
  200720:	e0bffdc3 	ldbu	r2,-9(fp)
  200724:	10803fcc 	andi	r2,r2,255
  200728:	10000426 	beq	r2,zero,20073c <usb_set+0x230>
				printSignedHex0(kbdbuf.keycode[0]);
  20072c:	e0bffdc3 	ldbu	r2,-9(fp)
  200730:	10803fcc 	andi	r2,r2,255
  200734:	1009883a 	mov	r4,r2
  200738:	0200b480 	call	200b48 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
  20073c:	e0bffe03 	ldbu	r2,-8(fp)
  200740:	10803fcc 	andi	r2,r2,255
  200744:	1009883a 	mov	r4,r2
  200748:	0200c680 	call	200c68 <printSignedHex1>
				printf("\n");
  20074c:	01000284 	movi	r4,10
  200750:	0203ea80 	call	203ea8 <putchar>
  200754:	003f7d06 	br	20054c <_gp+0xffdee938>
			}

			else if (device == 2) {
  200758:	e0bff883 	ldbu	r2,-30(fp)
  20075c:	10800098 	cmpnei	r2,r2,2
  200760:	103f7a1e 	bne	r2,zero,20054c <_gp+0xffdee938>
				rcode = mousePoll(&buf);
  200764:	e0bffb44 	addi	r2,fp,-19
  200768:	1009883a 	mov	r4,r2
  20076c:	02019080 	call	201908 <mousePoll>
  200770:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
  200774:	e0bffb03 	ldbu	r2,-20(fp)
  200778:	10800118 	cmpnei	r2,r2,4
  20077c:	10007426 	beq	r2,zero,200950 <usb_set+0x444>
					//NAK means no new data
					continue;
				} else if (rcode) {
  200780:	e0bffb03 	ldbu	r2,-20(fp)
  200784:	10000926 	beq	r2,zero,2007ac <usb_set+0x2a0>
					printf("Rcode: ");
  200788:	01000874 	movhi	r4,33
  20078c:	2119ef04 	addi	r4,r4,26556
  200790:	0203e640 	call	203e64 <printf>
					printf("%x \n", rcode);
  200794:	e0bffb03 	ldbu	r2,-20(fp)
  200798:	100b883a 	mov	r5,r2
  20079c:	01000874 	movhi	r4,33
  2007a0:	2119d104 	addi	r4,r4,26436
  2007a4:	0203e640 	call	203e64 <printf>
					continue;
  2007a8:	00006a06 	br	200954 <usb_set+0x448>
				}
				printf("X displacement: ");
  2007ac:	01000874 	movhi	r4,33
  2007b0:	2119f304 	addi	r4,r4,26572
  2007b4:	0203e640 	call	203e64 <printf>
				printf("%d ", (signed char) buf.Xdispl);
  2007b8:	e0bffb83 	ldbu	r2,-18(fp)
  2007bc:	10803fcc 	andi	r2,r2,255
  2007c0:	1080201c 	xori	r2,r2,128
  2007c4:	10bfe004 	addi	r2,r2,-128
  2007c8:	100b883a 	mov	r5,r2
  2007cc:	01000874 	movhi	r4,33
  2007d0:	2119f804 	addi	r4,r4,26592
  2007d4:	0203e640 	call	203e64 <printf>
				printSignedHex0((signed char) buf.Xdispl);
  2007d8:	e0bffb83 	ldbu	r2,-18(fp)
  2007dc:	10803fcc 	andi	r2,r2,255
  2007e0:	1080201c 	xori	r2,r2,128
  2007e4:	10bfe004 	addi	r2,r2,-128
  2007e8:	1009883a 	mov	r4,r2
  2007ec:	0200b480 	call	200b48 <printSignedHex0>
				printf("Y displacement: ");
  2007f0:	01000874 	movhi	r4,33
  2007f4:	2119f904 	addi	r4,r4,26596
  2007f8:	0203e640 	call	203e64 <printf>
				printf("%d ", (signed char) buf.Ydispl);
  2007fc:	e0bffbc3 	ldbu	r2,-17(fp)
  200800:	10803fcc 	andi	r2,r2,255
  200804:	1080201c 	xori	r2,r2,128
  200808:	10bfe004 	addi	r2,r2,-128
  20080c:	100b883a 	mov	r5,r2
  200810:	01000874 	movhi	r4,33
  200814:	2119f804 	addi	r4,r4,26592
  200818:	0203e640 	call	203e64 <printf>
				printSignedHex1((signed char) buf.Ydispl);
  20081c:	e0bffbc3 	ldbu	r2,-17(fp)
  200820:	10803fcc 	andi	r2,r2,255
  200824:	1080201c 	xori	r2,r2,128
  200828:	10bfe004 	addi	r2,r2,-128
  20082c:	1009883a 	mov	r4,r2
  200830:	0200c680 	call	200c68 <printSignedHex1>
				printf("Buttons: ");
  200834:	01000874 	movhi	r4,33
  200838:	2119fe04 	addi	r4,r4,26616
  20083c:	0203e640 	call	203e64 <printf>
				printf("%x\n", buf.button);
  200840:	e0bffb43 	ldbu	r2,-19(fp)
  200844:	10803fcc 	andi	r2,r2,255
  200848:	100b883a 	mov	r5,r2
  20084c:	01000874 	movhi	r4,33
  200850:	211a0104 	addi	r4,r4,26628
  200854:	0203e640 	call	203e64 <printf>
				if (buf.button & 0x04)
  200858:	e0bffb43 	ldbu	r2,-19(fp)
  20085c:	10803fcc 	andi	r2,r2,255
  200860:	1080010c 	andi	r2,r2,4
  200864:	10000326 	beq	r2,zero,200874 <usb_set+0x368>
					setLED(2);
  200868:	01000084 	movi	r4,2
  20086c:	0200aac0 	call	200aac <setLED>
  200870:	00000206 	br	20087c <usb_set+0x370>
				else
					clearLED(2);
  200874:	01000084 	movi	r4,2
  200878:	0200af80 	call	200af8 <clearLED>
				if (buf.button & 0x02)
  20087c:	e0bffb43 	ldbu	r2,-19(fp)
  200880:	10803fcc 	andi	r2,r2,255
  200884:	1080008c 	andi	r2,r2,2
  200888:	10000326 	beq	r2,zero,200898 <usb_set+0x38c>
					setLED(1);
  20088c:	01000044 	movi	r4,1
  200890:	0200aac0 	call	200aac <setLED>
  200894:	00000206 	br	2008a0 <usb_set+0x394>
				else
					clearLED(1);
  200898:	01000044 	movi	r4,1
  20089c:	0200af80 	call	200af8 <clearLED>
				if (buf.button & 0x01)
  2008a0:	e0bffb43 	ldbu	r2,-19(fp)
  2008a4:	10803fcc 	andi	r2,r2,255
  2008a8:	1080004c 	andi	r2,r2,1
  2008ac:	10000326 	beq	r2,zero,2008bc <usb_set+0x3b0>
					setLED(0);
  2008b0:	0009883a 	mov	r4,zero
  2008b4:	0200aac0 	call	200aac <setLED>
  2008b8:	003f2406 	br	20054c <_gp+0xffdee938>
				else
					clearLED(0);
  2008bc:	0009883a 	mov	r4,zero
  2008c0:	0200af80 	call	200af8 <clearLED>
  2008c4:	003f2106 	br	20054c <_gp+0xffdee938>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
  2008c8:	0202f880 	call	202f88 <GetUsbTaskState>
  2008cc:	10803fcc 	andi	r2,r2,255
  2008d0:	10803fd8 	cmpnei	r2,r2,255
  2008d4:	10000a1e 	bne	r2,zero,200900 <usb_set+0x3f4>
			if (!errorflag) {
  2008d8:	e0bff843 	ldbu	r2,-31(fp)
  2008dc:	103f1b1e 	bne	r2,zero,20054c <_gp+0xffdee938>
				errorflag = 1;
  2008e0:	00800044 	movi	r2,1
  2008e4:	e0bff845 	stb	r2,-31(fp)
				clearLED(9);
  2008e8:	01000244 	movi	r4,9
  2008ec:	0200af80 	call	200af8 <clearLED>
				printf("USB Error State\n");
  2008f0:	01000874 	movhi	r4,33
  2008f4:	211a0204 	addi	r4,r4,26632
  2008f8:	0203f800 	call	203f80 <puts>
  2008fc:	003f1306 	br	20054c <_gp+0xffdee938>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
  200900:	01000874 	movhi	r4,33
  200904:	211a0604 	addi	r4,r4,26648
  200908:	0203e640 	call	203e64 <printf>
			printf("%x\n", GetUsbTaskState());
  20090c:	0202f880 	call	202f88 <GetUsbTaskState>
  200910:	10803fcc 	andi	r2,r2,255
  200914:	100b883a 	mov	r5,r2
  200918:	01000874 	movhi	r4,33
  20091c:	211a0104 	addi	r4,r4,26628
  200920:	0203e640 	call	203e64 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
  200924:	e0bff803 	ldbu	r2,-32(fp)
  200928:	10000326 	beq	r2,zero,200938 <usb_set+0x42c>
				runningdebugflag = 0;
  20092c:	e03ff805 	stb	zero,-32(fp)
				MAX3421E_init();
  200930:	0201fa40 	call	201fa4 <MAX3421E_init>
				USB_init();
  200934:	02027800 	call	202780 <USB_init>
			}
			errorflag = 0;
  200938:	e03ff845 	stb	zero,-31(fp)
			clearLED(9);
  20093c:	01000244 	movi	r4,9
  200940:	0200af80 	call	200af8 <clearLED>
  200944:	003f0106 	br	20054c <_gp+0xffdee938>
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
		printf(".");
				if (rcode == hrNAK) {
					continue; //NAK means no new data
  200948:	0001883a 	nop
  20094c:	003eff06 	br	20054c <_gp+0xffdee938>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
  200950:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
  200954:	003efd06 	br	20054c <_gp+0xffdee938>

00200958 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
  200958:	defff804 	addi	sp,sp,-32
  20095c:	dfc00715 	stw	ra,28(sp)
  200960:	df000615 	stw	fp,24(sp)
  200964:	df000604 	addi	fp,sp,24
  200968:	e13ffe15 	stw	r4,-8(fp)
  20096c:	2805883a 	mov	r2,r5
  200970:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
  200974:	e0bfff0b 	ldhu	r2,-4(fp)
  200978:	1004d23a 	srli	r2,r2,8
  20097c:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
  200980:	e0bfff0b 	ldhu	r2,-4(fp)
  200984:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
  200988:	e13ffd84 	addi	r4,fp,-10
  20098c:	e0fffd84 	addi	r3,fp,-10
  200990:	d8000115 	stw	zero,4(sp)
  200994:	00800084 	movi	r2,2
  200998:	d8800015 	stw	r2,0(sp)
  20099c:	200f883a 	mov	r7,r4
  2009a0:	01800084 	movi	r6,2
  2009a4:	180b883a 	mov	r5,r3
  2009a8:	e13ffe17 	ldw	r4,-8(fp)
  2009ac:	02128480 	call	212848 <alt_avalon_i2c_master_tx_rx>
  2009b0:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  2009b4:	e0bffc17 	ldw	r2,-16(fp)
  2009b8:	10000626 	beq	r2,zero,2009d4 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  2009bc:	e0bfff0b 	ldhu	r2,-4(fp)
  2009c0:	100b883a 	mov	r5,r2
  2009c4:	01000874 	movhi	r4,33
  2009c8:	211a0b04 	addi	r4,r4,26668
  2009cc:	0203e640 	call	203e64 <printf>
		while (1)
		{
			//hang here
		}
  2009d0:	003fff06 	br	2009d0 <_gp+0xffdeedbc>
	}
	value = (buffer[0] << 8) | buffer[1];
  2009d4:	e0bffd83 	ldbu	r2,-10(fp)
  2009d8:	10803fcc 	andi	r2,r2,255
  2009dc:	1004923a 	slli	r2,r2,8
  2009e0:	1007883a 	mov	r3,r2
  2009e4:	e0bffdc3 	ldbu	r2,-9(fp)
  2009e8:	10803fcc 	andi	r2,r2,255
  2009ec:	1884b03a 	or	r2,r3,r2
  2009f0:	e0bffd0d 	sth	r2,-12(fp)
	return value;
  2009f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
  2009f8:	e037883a 	mov	sp,fp
  2009fc:	dfc00117 	ldw	ra,4(sp)
  200a00:	df000017 	ldw	fp,0(sp)
  200a04:	dec00204 	addi	sp,sp,8
  200a08:	f800283a 	ret

00200a0c <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
  200a0c:	defff904 	addi	sp,sp,-28
  200a10:	dfc00615 	stw	ra,24(sp)
  200a14:	df000515 	stw	fp,20(sp)
  200a18:	df000504 	addi	fp,sp,20
  200a1c:	e13ffd15 	stw	r4,-12(fp)
  200a20:	2807883a 	mov	r3,r5
  200a24:	3005883a 	mov	r2,r6
  200a28:	e0fffe0d 	sth	r3,-8(fp)
  200a2c:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
  200a30:	e0bffe0b 	ldhu	r2,-8(fp)
  200a34:	1004d23a 	srli	r2,r2,8
  200a38:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
  200a3c:	e0bffe0b 	ldhu	r2,-8(fp)
  200a40:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
  200a44:	e0bfff0b 	ldhu	r2,-4(fp)
  200a48:	1004d23a 	srli	r2,r2,8
  200a4c:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
  200a50:	e0bfff0b 	ldhu	r2,-4(fp)
  200a54:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
  200a58:	e0bffc04 	addi	r2,fp,-16
  200a5c:	000f883a 	mov	r7,zero
  200a60:	01800104 	movi	r6,4
  200a64:	100b883a 	mov	r5,r2
  200a68:	e13ffd17 	ldw	r4,-12(fp)
  200a6c:	02126240 	call	212624 <alt_avalon_i2c_master_tx>
  200a70:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
  200a74:	e0bffb17 	ldw	r2,-20(fp)
  200a78:	10000626 	beq	r2,zero,200a94 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
  200a7c:	e0bffe0b 	ldhu	r2,-8(fp)
  200a80:	100b883a 	mov	r5,r2
  200a84:	01000874 	movhi	r4,33
  200a88:	211a0b04 	addi	r4,r4,26668
  200a8c:	0203e640 	call	203e64 <printf>
		while (1)
		{
			//hang here
		}
  200a90:	003fff06 	br	200a90 <_gp+0xffdeee7c>
	}
	return DATA;
  200a94:	e0bfff0b 	ldhu	r2,-4(fp)
}
  200a98:	e037883a 	mov	sp,fp
  200a9c:	dfc00117 	ldw	ra,4(sp)
  200aa0:	df000017 	ldw	fp,0(sp)
  200aa4:	dec00204 	addi	sp,sp,8
  200aa8:	f800283a 	ret

00200aac <setLED>:
#include "sgtl5000/GenericTypeDefs.h"
#include "sgtl5000/sgtl5000.h"


void setLED(int LED)
{
  200aac:	defffe04 	addi	sp,sp,-8
  200ab0:	df000115 	stw	fp,4(sp)
  200ab4:	df000104 	addi	fp,sp,4
  200ab8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
  200abc:	00801074 	movhi	r2,65
  200ac0:	10843004 	addi	r2,r2,4288
  200ac4:	10c00037 	ldwio	r3,0(r2)
  200ac8:	01000044 	movi	r4,1
  200acc:	e0bfff17 	ldw	r2,-4(fp)
  200ad0:	2084983a 	sll	r2,r4,r2
  200ad4:	1886b03a 	or	r3,r3,r2
  200ad8:	00801074 	movhi	r2,65
  200adc:	10843004 	addi	r2,r2,4288
  200ae0:	10c00035 	stwio	r3,0(r2)
}
  200ae4:	0001883a 	nop
  200ae8:	e037883a 	mov	sp,fp
  200aec:	df000017 	ldw	fp,0(sp)
  200af0:	dec00104 	addi	sp,sp,4
  200af4:	f800283a 	ret

00200af8 <clearLED>:

void clearLED(int LED)
{
  200af8:	defffe04 	addi	sp,sp,-8
  200afc:	df000115 	stw	fp,4(sp)
  200b00:	df000104 	addi	fp,sp,4
  200b04:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
  200b08:	00801074 	movhi	r2,65
  200b0c:	10843004 	addi	r2,r2,4288
  200b10:	10c00037 	ldwio	r3,0(r2)
  200b14:	01000044 	movi	r4,1
  200b18:	e0bfff17 	ldw	r2,-4(fp)
  200b1c:	2084983a 	sll	r2,r4,r2
  200b20:	0084303a 	nor	r2,zero,r2
  200b24:	1886703a 	and	r3,r3,r2
  200b28:	00801074 	movhi	r2,65
  200b2c:	10843004 	addi	r2,r2,4288
  200b30:	10c00035 	stwio	r3,0(r2)

}
  200b34:	0001883a 	nop
  200b38:	e037883a 	mov	sp,fp
  200b3c:	df000017 	ldw	fp,0(sp)
  200b40:	dec00104 	addi	sp,sp,4
  200b44:	f800283a 	ret

00200b48 <printSignedHex0>:

void printSignedHex0(signed char value)
{
  200b48:	defffc04 	addi	sp,sp,-16
  200b4c:	dfc00315 	stw	ra,12(sp)
  200b50:	df000215 	stw	fp,8(sp)
  200b54:	df000204 	addi	fp,sp,8
  200b58:	2005883a 	mov	r2,r4
  200b5c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  200b60:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
  200b64:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  200b68:	00801074 	movhi	r2,65
  200b6c:	10843404 	addi	r2,r2,4304
  200b70:	10800037 	ldwio	r2,0(r2)
  200b74:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
  200b78:	e0bfff07 	ldb	r2,-4(fp)
  200b7c:	1000060e 	bge	r2,zero,200b98 <printSignedHex0+0x50>
	{
		setLED(11);
  200b80:	010002c4 	movi	r4,11
  200b84:	0200aac0 	call	200aac <setLED>
		value = -value;
  200b88:	e0bfff03 	ldbu	r2,-4(fp)
  200b8c:	0085c83a 	sub	r2,zero,r2
  200b90:	e0bfff05 	stb	r2,-4(fp)
  200b94:	00000206 	br	200ba0 <printSignedHex0+0x58>
	}
	else
	{
		clearLED(11);
  200b98:	010002c4 	movi	r4,11
  200b9c:	0200af80 	call	200af8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  200ba0:	e0bfff03 	ldbu	r2,-4(fp)
  200ba4:	108018c4 	addi	r2,r2,99
  200ba8:	10803fcc 	andi	r2,r2,255
  200bac:	108031f0 	cmpltui	r2,r2,199
  200bb0:	1000031e 	bne	r2,zero,200bc0 <printSignedHex0+0x78>
		setLED(13);
  200bb4:	01000344 	movi	r4,13
  200bb8:	0200aac0 	call	200aac <setLED>
  200bbc:	00000206 	br	200bc8 <printSignedHex0+0x80>
	else
		clearLED(13);
  200bc0:	01000344 	movi	r4,13
  200bc4:	0200af80 	call	200af8 <clearLED>

	value = value % 100;
  200bc8:	e0bfff07 	ldb	r2,-4(fp)
  200bcc:	01401904 	movi	r5,100
  200bd0:	1009883a 	mov	r4,r2
  200bd4:	02031480 	call	203148 <__modsi3>
  200bd8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200bdc:	e0bfff07 	ldb	r2,-4(fp)
  200be0:	01400284 	movi	r5,10
  200be4:	1009883a 	mov	r4,r2
  200be8:	02030c40 	call	2030c4 <__divsi3>
  200bec:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
  200bf0:	e0bfff07 	ldb	r2,-4(fp)
  200bf4:	01400284 	movi	r5,10
  200bf8:	1009883a 	mov	r4,r2
  200bfc:	02031480 	call	203148 <__modsi3>
  200c00:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
  200c04:	e0bffe8b 	ldhu	r2,-6(fp)
  200c08:	10803fcc 	andi	r2,r2,255
  200c0c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
  200c10:	e0bffe03 	ldbu	r2,-8(fp)
  200c14:	1004933a 	slli	r2,r2,12
  200c18:	1007883a 	mov	r3,r2
  200c1c:	e0bffe8b 	ldhu	r2,-6(fp)
  200c20:	1884b03a 	or	r2,r3,r2
  200c24:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
  200c28:	e0bffe43 	ldbu	r2,-7(fp)
  200c2c:	1004923a 	slli	r2,r2,8
  200c30:	1007883a 	mov	r3,r2
  200c34:	e0bffe8b 	ldhu	r2,-6(fp)
  200c38:	1884b03a 	or	r2,r3,r2
  200c3c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  200c40:	e0fffe8b 	ldhu	r3,-6(fp)
  200c44:	00801074 	movhi	r2,65
  200c48:	10843404 	addi	r2,r2,4304
  200c4c:	10c00035 	stwio	r3,0(r2)
}
  200c50:	0001883a 	nop
  200c54:	e037883a 	mov	sp,fp
  200c58:	dfc00117 	ldw	ra,4(sp)
  200c5c:	df000017 	ldw	fp,0(sp)
  200c60:	dec00204 	addi	sp,sp,8
  200c64:	f800283a 	ret

00200c68 <printSignedHex1>:

void printSignedHex1(signed char value)
{
  200c68:	defffb04 	addi	sp,sp,-20
  200c6c:	dfc00415 	stw	ra,16(sp)
  200c70:	df000315 	stw	fp,12(sp)
  200c74:	df000304 	addi	fp,sp,12
  200c78:	2005883a 	mov	r2,r4
  200c7c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
  200c80:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
  200c84:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
  200c88:	00801074 	movhi	r2,65
  200c8c:	10843404 	addi	r2,r2,4304
  200c90:	10800037 	ldwio	r2,0(r2)
  200c94:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
  200c98:	e0bfff07 	ldb	r2,-4(fp)
  200c9c:	1000060e 	bge	r2,zero,200cb8 <printSignedHex1+0x50>
	{
		setLED(10);
  200ca0:	01000284 	movi	r4,10
  200ca4:	0200aac0 	call	200aac <setLED>
		value = -value;
  200ca8:	e0bfff03 	ldbu	r2,-4(fp)
  200cac:	0085c83a 	sub	r2,zero,r2
  200cb0:	e0bfff05 	stb	r2,-4(fp)
  200cb4:	00000206 	br	200cc0 <printSignedHex1+0x58>
	}
	else
	{
		clearLED(10);
  200cb8:	01000284 	movi	r4,10
  200cbc:	0200af80 	call	200af8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
  200cc0:	e0bfff03 	ldbu	r2,-4(fp)
  200cc4:	108018c4 	addi	r2,r2,99
  200cc8:	10803fcc 	andi	r2,r2,255
  200ccc:	108031f0 	cmpltui	r2,r2,199
  200cd0:	1000031e 	bne	r2,zero,200ce0 <printSignedHex1+0x78>
		setLED(12);
  200cd4:	01000304 	movi	r4,12
  200cd8:	0200aac0 	call	200aac <setLED>
  200cdc:	00000206 	br	200ce8 <printSignedHex1+0x80>
	else
		clearLED(12);
  200ce0:	01000304 	movi	r4,12
  200ce4:	0200af80 	call	200af8 <clearLED>

	value = value % 100;
  200ce8:	e0bfff07 	ldb	r2,-4(fp)
  200cec:	01401904 	movi	r5,100
  200cf0:	1009883a 	mov	r4,r2
  200cf4:	02031480 	call	203148 <__modsi3>
  200cf8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
  200cfc:	e0bfff07 	ldb	r2,-4(fp)
  200d00:	01400284 	movi	r5,10
  200d04:	1009883a 	mov	r4,r2
  200d08:	02030c40 	call	2030c4 <__divsi3>
  200d0c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200d10:	e0bfff07 	ldb	r2,-4(fp)
  200d14:	01400284 	movi	r5,10
  200d18:	1009883a 	mov	r4,r2
  200d1c:	02031480 	call	203148 <__modsi3>
  200d20:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
  200d24:	e0bfff07 	ldb	r2,-4(fp)
  200d28:	01400284 	movi	r5,10
  200d2c:	1009883a 	mov	r4,r2
  200d30:	02030c40 	call	2030c4 <__divsi3>
  200d34:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
  200d38:	e0bfff07 	ldb	r2,-4(fp)
  200d3c:	01400284 	movi	r5,10
  200d40:	1009883a 	mov	r4,r2
  200d44:	02031480 	call	203148 <__modsi3>
  200d48:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
  200d4c:	e0bffe17 	ldw	r2,-8(fp)
  200d50:	10bfc00c 	andi	r2,r2,65280
  200d54:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
  200d58:	e0bffd03 	ldbu	r2,-12(fp)
  200d5c:	1004913a 	slli	r2,r2,4
  200d60:	1007883a 	mov	r3,r2
  200d64:	e0bffe17 	ldw	r2,-8(fp)
  200d68:	10c4b03a 	or	r2,r2,r3
  200d6c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
  200d70:	e0bffd43 	ldbu	r2,-11(fp)
  200d74:	e0fffe17 	ldw	r3,-8(fp)
  200d78:	1884b03a 	or	r2,r3,r2
  200d7c:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
  200d80:	e0fffe17 	ldw	r3,-8(fp)
  200d84:	00801074 	movhi	r2,65
  200d88:	10843404 	addi	r2,r2,4304
  200d8c:	10c00035 	stwio	r3,0(r2)
}
  200d90:	0001883a 	nop
  200d94:	e037883a 	mov	sp,fp
  200d98:	dfc00117 	ldw	ra,4(sp)
  200d9c:	df000017 	ldw	fp,0(sp)
  200da0:	dec00204 	addi	sp,sp,8
  200da4:	f800283a 	ret

00200da8 <setup_i2c>:


int setup_i2c()
{
  200da8:	defffc04 	addi	sp,sp,-16
  200dac:	dfc00315 	stw	ra,12(sp)
  200db0:	df000215 	stw	fp,8(sp)
  200db4:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
  200db8:	01000874 	movhi	r4,33
  200dbc:	211a1304 	addi	r4,r4,26700
  200dc0:	0211c4c0 	call	211c4c <alt_avalon_i2c_open>
  200dc4:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
  200dc8:	e0bffe17 	ldw	r2,-8(fp)
  200dcc:	1000051e 	bne	r2,zero,200de4 <setup_i2c+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
  200dd0:	01000874 	movhi	r4,33
  200dd4:	211a1604 	addi	r4,r4,26712
  200dd8:	0203f800 	call	203f80 <puts>
		return 1;
  200ddc:	00800044 	movi	r2,1
  200de0:	0000b006 	br	2010a4 <setup_i2c+0x2fc>
	}
	printf ("I2C Test Program\n");
  200de4:	01000874 	movhi	r4,33
  200de8:	211a1e04 	addi	r4,r4,26744
  200dec:	0203f800 	call	203f80 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
  200df0:	01400284 	movi	r5,10
  200df4:	e13ffe17 	ldw	r4,-8(fp)
  200df8:	021241c0 	call	21241c <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
  200dfc:	000b883a 	mov	r5,zero
  200e00:	e13ffe17 	ldw	r4,-8(fp)
  200e04:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200e08:	10bfffcc 	andi	r2,r2,65535
  200e0c:	100b883a 	mov	r5,r2
  200e10:	01000874 	movhi	r4,33
  200e14:	211a2304 	addi	r4,r4,26764
  200e18:	0203e640 	call	203e64 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 196608000/12500000;
  200e1c:	008003c4 	movi	r2,15
  200e20:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
  200e24:	e0bfff03 	ldbu	r2,-4(fp)
  200e28:	1009883a 	mov	r4,r2
  200e2c:	0203ce00 	call	203ce0 <__floatunsisf>
  200e30:	1007883a 	mov	r3,r2
  200e34:	180b883a 	mov	r5,r3
  200e38:	01105f34 	movhi	r4,16764
  200e3c:	212a2084 	addi	r4,r4,-22398
  200e40:	020378c0 	call	20378c <__subsf3>
  200e44:	1007883a 	mov	r3,r2
  200e48:	1805883a 	mov	r2,r3
  200e4c:	01514034 	movhi	r5,17664
  200e50:	1009883a 	mov	r4,r2
  200e54:	020335c0 	call	20335c <__mulsf3>
  200e58:	1007883a 	mov	r3,r2
  200e5c:	1805883a 	mov	r2,r3
  200e60:	1009883a 	mov	r4,r2
  200e64:	02030640 	call	203064 <__fixunssfsi>
  200e68:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
  200e6c:	e0bfff03 	ldbu	r2,-4(fp)
  200e70:	e0ffff8b 	ldhu	r3,-2(fp)
  200e74:	180d883a 	mov	r6,r3
  200e78:	100b883a 	mov	r5,r2
  200e7c:	01000874 	movhi	r4,33
  200e80:	211a2904 	addi	r4,r4,26788
  200e84:	0203e640 	call	203e64 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
  200e88:	e0bfff03 	ldbu	r2,-4(fp)
  200e8c:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 196608000/12500000;
	WORD frac_divisor = (WORD)(((196608000.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
  200e90:	1007883a 	mov	r3,r2
  200e94:	e0bfff8b 	ldhu	r2,-2(fp)
  200e98:	1884b03a 	or	r2,r3,r2
  200e9c:	10bfffcc 	andi	r2,r2,65535
  200ea0:	100d883a 	mov	r6,r2
  200ea4:	01400c84 	movi	r5,50
  200ea8:	e13ffe17 	ldw	r4,-8(fp)
  200eac:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
  200eb0:	01400c84 	movi	r5,50
  200eb4:	e13ffe17 	ldw	r4,-8(fp)
  200eb8:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200ebc:	10bfffcc 	andi	r2,r2,65535
  200ec0:	100b883a 	mov	r5,r2
  200ec4:	01000874 	movhi	r4,33
  200ec8:	211a3a04 	addi	r4,r4,26856
  200ecc:	0203e640 	call	203e64 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
  200ed0:	01917f84 	movi	r6,17918
  200ed4:	01400c04 	movi	r5,48
  200ed8:	e13ffe17 	ldw	r4,-8(fp)
  200edc:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
  200ee0:	01400c04 	movi	r5,48
  200ee4:	e13ffe17 	ldw	r4,-8(fp)
  200ee8:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200eec:	10bfffcc 	andi	r2,r2,65535
  200ef0:	100b883a 	mov	r5,r2
  200ef4:	01000874 	movhi	r4,33
  200ef8:	211a4104 	addi	r4,r4,26884
  200efc:	0203e640 	call	203e64 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
  200f00:	01801384 	movi	r6,78
  200f04:	01400a04 	movi	r5,40
  200f08:	e13ffe17 	ldw	r4,-8(fp)
  200f0c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
  200f10:	01400a04 	movi	r5,40
  200f14:	e13ffe17 	ldw	r4,-8(fp)
  200f18:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200f1c:	10bfffcc 	andi	r2,r2,65535
  200f20:	100b883a 	mov	r5,r2
  200f24:	01000874 	movhi	r4,33
  200f28:	211a4904 	addi	r4,r4,26916
  200f2c:	0203e640 	call	203e64 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
  200f30:	018018c4 	movi	r6,99
  200f34:	01400084 	movi	r5,2
  200f38:	e13ffe17 	ldw	r4,-8(fp)
  200f3c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
  200f40:	01400084 	movi	r5,2
  200f44:	e13ffe17 	ldw	r4,-8(fp)
  200f48:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200f4c:	10bfffcc 	andi	r2,r2,65535
  200f50:	100b883a 	mov	r5,r2
  200f54:	01000874 	movhi	r4,33
  200f58:	211a5004 	addi	r4,r4,26944
  200f5c:	0203e640 	call	203e64 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
  200f60:	018002c4 	movi	r6,11
  200f64:	01400104 	movi	r5,4
  200f68:	e13ffe17 	ldw	r4,-8(fp)
  200f6c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_48k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
  200f70:	01400104 	movi	r5,4
  200f74:	e13ffe17 	ldw	r4,-8(fp)
  200f78:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200f7c:	10bfffcc 	andi	r2,r2,65535
  200f80:	100b883a 	mov	r5,r2
  200f84:	01000874 	movhi	r4,33
  200f88:	211a5804 	addi	r4,r4,26976
  200f8c:	0203e640 	call	203e64 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, (SGTL5000_I2S_MASTER));
  200f90:	01802004 	movi	r6,128
  200f94:	01400184 	movi	r5,6
  200f98:	e13ffe17 	ldw	r4,-8(fp)
  200f9c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
  200fa0:	01400184 	movi	r5,6
  200fa4:	e13ffe17 	ldw	r4,-8(fp)
  200fa8:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200fac:	10bfffcc 	andi	r2,r2,65535
  200fb0:	100b883a 	mov	r5,r2
  200fb4:	01000874 	movhi	r4,33
  200fb8:	211a5f04 	addi	r4,r4,27004
  200fbc:	0203e640 	call	203e64 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
  200fc0:	01800104 	movi	r6,4
  200fc4:	01400904 	movi	r5,36
  200fc8:	e13ffe17 	ldw	r4,-8(fp)
  200fcc:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  200fd0:	01400904 	movi	r5,36
  200fd4:	e13ffe17 	ldw	r4,-8(fp)
  200fd8:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  200fdc:	10bfffcc 	andi	r2,r2,65535
  200fe0:	100b883a 	mov	r5,r2
  200fe4:	01000874 	movhi	r4,33
  200fe8:	211a6604 	addi	r4,r4,27032
  200fec:	0203e640 	call	203e64 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
  200ff0:	01800404 	movi	r6,16
  200ff4:	01400284 	movi	r5,10
  200ff8:	e13ffe17 	ldw	r4,-8(fp)
  200ffc:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
  201000:	01400284 	movi	r5,10
  201004:	e13ffe17 	ldw	r4,-8(fp)
  201008:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  20100c:	10bfffcc 	andi	r2,r2,65535
  201010:	100b883a 	mov	r5,r2
  201014:	01000874 	movhi	r4,33
  201018:	211a6d04 	addi	r4,r4,27060
  20101c:	0203e640 	call	203e64 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
  201020:	01400904 	movi	r5,36
  201024:	e13ffe17 	ldw	r4,-8(fp)
  201028:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  20102c:	10bfffcc 	andi	r2,r2,65535
  201030:	100b883a 	mov	r5,r2
  201034:	01000874 	movhi	r4,33
  201038:	211a6604 	addi	r4,r4,27032
  20103c:	0203e640 	call	203e64 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
  201040:	000d883a 	mov	r6,zero
  201044:	01400384 	movi	r5,14
  201048:	e13ffe17 	ldw	r4,-8(fp)
  20104c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
  201050:	01400384 	movi	r5,14
  201054:	e13ffe17 	ldw	r4,-8(fp)
  201058:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  20105c:	10bfffcc 	andi	r2,r2,65535
  201060:	100b883a 	mov	r5,r2
  201064:	01000874 	movhi	r4,33
  201068:	211a7404 	addi	r4,r4,27088
  20106c:	0203e640 	call	203e64 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
  201070:	01400504 	movi	r5,20
  201074:	e13ffe17 	ldw	r4,-8(fp)
  201078:	02009580 	call	200958 <SGTL5000_Reg_Rd>
  20107c:	10bfffcc 	andi	r2,r2,65535
  201080:	100b883a 	mov	r5,r2
  201084:	01000874 	movhi	r4,33
  201088:	211a7c04 	addi	r4,r4,27120
  20108c:	0203e640 	call	203e64 <printf>

	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_HP_CTRL, ((0x0028<<8)|0x0028));
  201090:	018a0a04 	movi	r6,10280
  201094:	01400884 	movi	r5,34
  201098:	e13ffe17 	ldw	r4,-8(fp)
  20109c:	0200a0c0 	call	200a0c <SGTL5000_Reg_Wr>



	return 0;
  2010a0:	0005883a 	mov	r2,zero
}
  2010a4:	e037883a 	mov	sp,fp
  2010a8:	dfc00117 	ldw	ra,4(sp)
  2010ac:	df000017 	ldw	fp,0(sp)
  2010b0:	dec00204 	addi	sp,sp,8
  2010b4:	f800283a 	ret

002010b8 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
  2010b8:	defff204 	addi	sp,sp,-56
  2010bc:	dfc00d15 	stw	ra,52(sp)
  2010c0:	df000c15 	stw	fp,48(sp)
  2010c4:	df000c04 	addi	fp,sp,48
  2010c8:	2005883a 	mov	r2,r4
  2010cc:	e17fff15 	stw	r5,-4(fp)
  2010d0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  2010d4:	00801074 	movhi	r2,65
  2010d8:	10a74704 	addi	r2,r2,-25316
  2010dc:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
  2010e0:	00801074 	movhi	r2,65
  2010e4:	10a74704 	addi	r2,r2,-25316
  2010e8:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  2010ec:	e0fffe03 	ldbu	r3,-8(fp)
  2010f0:	00801074 	movhi	r2,65
  2010f4:	10a74704 	addi	r2,r2,-25316
  2010f8:	d8800415 	stw	r2,16(sp)
  2010fc:	00800244 	movi	r2,9
  201100:	d8800315 	stw	r2,12(sp)
  201104:	d8000215 	stw	zero,8(sp)
  201108:	00800084 	movi	r2,2
  20110c:	d8800115 	stw	r2,4(sp)
  201110:	d8000015 	stw	zero,0(sp)
  201114:	01c00184 	movi	r7,6
  201118:	01802004 	movi	r6,128
  20111c:	000b883a 	mov	r5,zero
  201120:	1809883a 	mov	r4,r3
  201124:	02021cc0 	call	2021cc <XferCtrlReq>
  201128:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  20112c:	e0bffc03 	ldbu	r2,-16(fp)
  201130:	10000226 	beq	r2,zero,20113c <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
  201134:	0005883a 	mov	r2,zero
  201138:	0000dc06 	br	2014ac <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  20113c:	e0bffa17 	ldw	r2,-24(fp)
  201140:	1080008b 	ldhu	r2,2(r2)
  201144:	10bfffcc 	andi	r2,r2,65535
  201148:	10804070 	cmpltui	r2,r2,257
  20114c:	1000031e 	bne	r2,zero,20115c <HIDMProbe+0xa4>
		total_length = 256;
  201150:	00804004 	movi	r2,256
  201154:	e0bff90d 	sth	r2,-28(fp)
  201158:	00000306 	br	201168 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  20115c:	e0bffa17 	ldw	r2,-24(fp)
  201160:	1080008b 	ldhu	r2,2(r2)
  201164:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  201168:	e13ffe03 	ldbu	r4,-8(fp)
  20116c:	e0fff90b 	ldhu	r3,-28(fp)
  201170:	00801074 	movhi	r2,65
  201174:	10a74704 	addi	r2,r2,-25316
  201178:	d8800415 	stw	r2,16(sp)
  20117c:	d8c00315 	stw	r3,12(sp)
  201180:	d8000215 	stw	zero,8(sp)
  201184:	00800084 	movi	r2,2
  201188:	d8800115 	stw	r2,4(sp)
  20118c:	d8000015 	stw	zero,0(sp)
  201190:	01c00184 	movi	r7,6
  201194:	01802004 	movi	r6,128
  201198:	000b883a 	mov	r5,zero
  20119c:	02021cc0 	call	2021cc <XferCtrlReq>
  2011a0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  2011a4:	e0bffc03 	ldbu	r2,-16(fp)
  2011a8:	10000226 	beq	r2,zero,2011b4 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
  2011ac:	0005883a 	mov	r2,zero
  2011b0:	0000be06 	br	2014ac <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
  2011b4:	e0bffa17 	ldw	r2,-24(fp)
  2011b8:	10800143 	ldbu	r2,5(r2)
  2011bc:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
  2011c0:	0000b306 	br	201490 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
  2011c4:	e0bffa17 	ldw	r2,-24(fp)
  2011c8:	10800043 	ldbu	r2,1(r2)
  2011cc:	10803fcc 	andi	r2,r2,255
  2011d0:	10800120 	cmpeqi	r2,r2,4
  2011d4:	1000091e 	bne	r2,zero,2011fc <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  2011d8:	e0bffa17 	ldw	r2,-24(fp)
  2011dc:	10800003 	ldbu	r2,0(r2)
  2011e0:	10803fcc 	andi	r2,r2,255
  2011e4:	e0fffb17 	ldw	r3,-20(fp)
  2011e8:	1885883a 	add	r2,r3,r2
  2011ec:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  2011f0:	e0bffb17 	ldw	r2,-20(fp)
  2011f4:	e0bffa15 	stw	r2,-24(fp)
  2011f8:	0000a506 	br	201490 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  2011fc:	e0bffa17 	ldw	r2,-24(fp)
  201200:	10800143 	ldbu	r2,5(r2)
  201204:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  201208:	e0bffa17 	ldw	r2,-24(fp)
  20120c:	10800183 	ldbu	r2,6(r2)
  201210:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  201214:	e0bffa17 	ldw	r2,-24(fp)
  201218:	108001c3 	ldbu	r2,7(r2)
  20121c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  201220:	e0bffc83 	ldbu	r2,-14(fp)
  201224:	108000d8 	cmpnei	r2,r2,3
  201228:	1000971e 	bne	r2,zero,201488 <HIDMProbe+0x3d0>
  20122c:	e0bffcc3 	ldbu	r2,-13(fp)
  201230:	10800058 	cmpnei	r2,r2,1
  201234:	1000941e 	bne	r2,zero,201488 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
  201238:	e0bffd03 	ldbu	r2,-12(fp)
  20123c:	10800098 	cmpnei	r2,r2,2
  201240:	1000911e 	bne	r2,zero,201488 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
  201244:	e0fffe03 	ldbu	r3,-8(fp)
  201248:	00801074 	movhi	r2,65
  20124c:	10a78704 	addi	r2,r2,-25060
  201250:	180690fa 	slli	r3,r3,3
  201254:	10c5883a 	add	r2,r2,r3
  201258:	10800104 	addi	r2,r2,4
  20125c:	00c00084 	movi	r3,2
  201260:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
  201264:	e0fffe03 	ldbu	r3,-8(fp)
  201268:	00801074 	movhi	r2,65
  20126c:	10a78704 	addi	r2,r2,-25060
  201270:	180690fa 	slli	r3,r3,3
  201274:	10c5883a 	add	r2,r2,r3
  201278:	10800017 	ldw	r2,0(r2)
  20127c:	1080008b 	ldhu	r2,2(r2)
  201280:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
  201284:	02018c80 	call	2018c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  201288:	e0fffe03 	ldbu	r3,-8(fp)
  20128c:	00801074 	movhi	r2,65
  201290:	10a78704 	addi	r2,r2,-25060
  201294:	180690fa 	slli	r3,r3,3
  201298:	10c7883a 	add	r3,r2,r3
  20129c:	00801074 	movhi	r2,65
  2012a0:	10a73304 	addi	r2,r2,-25396
  2012a4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
  2012a8:	e0fffe03 	ldbu	r3,-8(fp)
  2012ac:	00801074 	movhi	r2,65
  2012b0:	10a78704 	addi	r2,r2,-25060
  2012b4:	180690fa 	slli	r3,r3,3
  2012b8:	10c5883a 	add	r2,r2,r3
  2012bc:	10800017 	ldw	r2,0(r2)
  2012c0:	e0fffd43 	ldbu	r3,-11(fp)
  2012c4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
  2012c8:	e0bffa17 	ldw	r2,-24(fp)
  2012cc:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
  2012d0:	d0a01a45 	stb	r2,-32663(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
  2012d4:	e0bffe03 	ldbu	r2,-8(fp)
  2012d8:	d0a01a05 	stb	r2,-32664(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  2012dc:	e0bffa17 	ldw	r2,-24(fp)
  2012e0:	10800003 	ldbu	r2,0(r2)
  2012e4:	10803fcc 	andi	r2,r2,255
  2012e8:	e0fffb17 	ldw	r3,-20(fp)
  2012ec:	1885883a 	add	r2,r3,r2
  2012f0:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  2012f4:	e0bffb17 	ldw	r2,-20(fp)
  2012f8:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
  2012fc:	00005b06 	br	20146c <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
  201300:	e0bffa17 	ldw	r2,-24(fp)
  201304:	10800043 	ldbu	r2,1(r2)
  201308:	10803fcc 	andi	r2,r2,255
  20130c:	10800160 	cmpeqi	r2,r2,5
  201310:	1000091e 	bne	r2,zero,201338 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  201314:	e0bffa17 	ldw	r2,-24(fp)
  201318:	10800003 	ldbu	r2,0(r2)
  20131c:	10803fcc 	andi	r2,r2,255
  201320:	e0fffb17 	ldw	r3,-20(fp)
  201324:	1885883a 	add	r2,r3,r2
  201328:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  20132c:	e0bffb17 	ldw	r2,-20(fp)
  201330:	e0bffa15 	stw	r2,-24(fp)
  201334:	00004d06 	br	20146c <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201338:	e0fffe03 	ldbu	r3,-8(fp)
  20133c:	00801074 	movhi	r2,65
  201340:	10a78704 	addi	r2,r2,-25060
  201344:	180690fa 	slli	r3,r3,3
  201348:	10c5883a 	add	r2,r2,r3
  20134c:	10800017 	ldw	r2,0(r2)
  201350:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  201354:	e0fffa17 	ldw	r3,-24(fp)
  201358:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  20135c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  201360:	e0fffe03 	ldbu	r3,-8(fp)
  201364:	00801074 	movhi	r2,65
  201368:	10a78704 	addi	r2,r2,-25060
  20136c:	180690fa 	slli	r3,r3,3
  201370:	10c5883a 	add	r2,r2,r3
  201374:	10800017 	ldw	r2,0(r2)
  201378:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  20137c:	e0fffa17 	ldw	r3,-24(fp)
  201380:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  201384:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  201388:	e0fffe03 	ldbu	r3,-8(fp)
  20138c:	00801074 	movhi	r2,65
  201390:	10a78704 	addi	r2,r2,-25060
  201394:	180690fa 	slli	r3,r3,3
  201398:	10c5883a 	add	r2,r2,r3
  20139c:	10800017 	ldw	r2,0(r2)
  2013a0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  2013a4:	e0fffa17 	ldw	r3,-24(fp)
  2013a8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2013ac:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2013b0:	e0fffe03 	ldbu	r3,-8(fp)
  2013b4:	00801074 	movhi	r2,65
  2013b8:	10a78704 	addi	r2,r2,-25060
  2013bc:	180690fa 	slli	r3,r3,3
  2013c0:	10c5883a 	add	r2,r2,r3
  2013c4:	10800017 	ldw	r2,0(r2)
  2013c8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  2013cc:	e0fffa17 	ldw	r3,-24(fp)
  2013d0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2013d4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  2013d8:	e0fffe03 	ldbu	r3,-8(fp)
  2013dc:	e0bffc43 	ldbu	r2,-15(fp)
  2013e0:	d8000415 	stw	zero,16(sp)
  2013e4:	d8000315 	stw	zero,12(sp)
  2013e8:	d8000215 	stw	zero,8(sp)
  2013ec:	d8000115 	stw	zero,4(sp)
  2013f0:	d8800015 	stw	r2,0(sp)
  2013f4:	01c00244 	movi	r7,9
  2013f8:	000d883a 	mov	r6,zero
  2013fc:	000b883a 	mov	r5,zero
  201400:	1809883a 	mov	r4,r3
  201404:	02021cc0 	call	2021cc <XferCtrlReq>
  201408:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
  20140c:	e0bffc03 	ldbu	r2,-16(fp)
  201410:	10000226 	beq	r2,zero,20141c <HIDMProbe+0x364>
							return (FALSE);
  201414:	0005883a 	mov	r2,zero
  201418:	00002406 	br	2014ac <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  20141c:	e0fffe03 	ldbu	r3,-8(fp)
  201420:	d0a01a43 	ldbu	r2,-32663(gp)
  201424:	10803fcc 	andi	r2,r2,255
  201428:	d8000415 	stw	zero,16(sp)
  20142c:	d8000315 	stw	zero,12(sp)
  201430:	d8800215 	stw	r2,8(sp)
  201434:	d8000115 	stw	zero,4(sp)
  201438:	d8000015 	stw	zero,0(sp)
  20143c:	01c002c4 	movi	r7,11
  201440:	01800844 	movi	r6,33
  201444:	000b883a 	mov	r5,zero
  201448:	1809883a 	mov	r4,r3
  20144c:	02021cc0 	call	2021cc <XferCtrlReq>
  201450:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  201454:	e0bffc03 	ldbu	r2,-16(fp)
  201458:	10000226 	beq	r2,zero,201464 <HIDMProbe+0x3ac>
							return (FALSE);
  20145c:	0005883a 	mov	r2,zero
  201460:	00001206 	br	2014ac <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
  201464:	00800044 	movi	r2,1
  201468:	00001006 	br	2014ac <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
  20146c:	e0fff90b 	ldhu	r3,-28(fp)
  201470:	00801074 	movhi	r2,65
  201474:	10a74704 	addi	r2,r2,-25316
  201478:	1885883a 	add	r2,r3,r2
  20147c:	e0fffb17 	ldw	r3,-20(fp)
  201480:	18bf9f36 	bltu	r3,r2,201300 <_gp+0xffdef6ec>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  201484:	00000206 	br	201490 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
  201488:	0005883a 	mov	r2,zero
  20148c:	00000706 	br	2014ac <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
  201490:	e0fff90b 	ldhu	r3,-28(fp)
  201494:	00801074 	movhi	r2,65
  201498:	10a74704 	addi	r2,r2,-25316
  20149c:	1885883a 	add	r2,r3,r2
  2014a0:	e0fffb17 	ldw	r3,-20(fp)
  2014a4:	18bf4736 	bltu	r3,r2,2011c4 <_gp+0xffdef5b0>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  2014a8:	0005883a 	mov	r2,zero
}
  2014ac:	e037883a 	mov	sp,fp
  2014b0:	dfc00117 	ldw	ra,4(sp)
  2014b4:	df000017 	ldw	fp,0(sp)
  2014b8:	dec00204 	addi	sp,sp,8
  2014bc:	f800283a 	ret

002014c0 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
  2014c0:	defff204 	addi	sp,sp,-56
  2014c4:	dfc00d15 	stw	ra,52(sp)
  2014c8:	df000c15 	stw	fp,48(sp)
  2014cc:	df000c04 	addi	fp,sp,48
  2014d0:	2005883a 	mov	r2,r4
  2014d4:	e17fff15 	stw	r5,-4(fp)
  2014d8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
  2014dc:	00801074 	movhi	r2,65
  2014e0:	10a74704 	addi	r2,r2,-25316
  2014e4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
  2014e8:	00801074 	movhi	r2,65
  2014ec:	10a74704 	addi	r2,r2,-25316
  2014f0:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
  2014f4:	e0fffe03 	ldbu	r3,-8(fp)
  2014f8:	00801074 	movhi	r2,65
  2014fc:	10a74704 	addi	r2,r2,-25316
  201500:	d8800415 	stw	r2,16(sp)
  201504:	00800244 	movi	r2,9
  201508:	d8800315 	stw	r2,12(sp)
  20150c:	d8000215 	stw	zero,8(sp)
  201510:	00800084 	movi	r2,2
  201514:	d8800115 	stw	r2,4(sp)
  201518:	d8000015 	stw	zero,0(sp)
  20151c:	01c00184 	movi	r7,6
  201520:	01802004 	movi	r6,128
  201524:	000b883a 	mov	r5,zero
  201528:	1809883a 	mov	r4,r3
  20152c:	02021cc0 	call	2021cc <XferCtrlReq>
  201530:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
  201534:	e0bffc03 	ldbu	r2,-16(fp)
  201538:	10000226 	beq	r2,zero,201544 <HIDKProbe+0x84>
		return (FALSE);
  20153c:	0005883a 	mov	r2,zero
  201540:	0000dc06 	br	2018b4 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
  201544:	e0bffa17 	ldw	r2,-24(fp)
  201548:	1080008b 	ldhu	r2,2(r2)
  20154c:	10bfffcc 	andi	r2,r2,65535
  201550:	10804070 	cmpltui	r2,r2,257
  201554:	1000031e 	bne	r2,zero,201564 <HIDKProbe+0xa4>
		total_length = 256;
  201558:	00804004 	movi	r2,256
  20155c:	e0bff90d 	sth	r2,-28(fp)
  201560:	00000306 	br	201570 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
  201564:	e0bffa17 	ldw	r2,-24(fp)
  201568:	1080008b 	ldhu	r2,2(r2)
  20156c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
  201570:	e13ffe03 	ldbu	r4,-8(fp)
  201574:	e0fff90b 	ldhu	r3,-28(fp)
  201578:	00801074 	movhi	r2,65
  20157c:	10a74704 	addi	r2,r2,-25316
  201580:	d8800415 	stw	r2,16(sp)
  201584:	d8c00315 	stw	r3,12(sp)
  201588:	d8000215 	stw	zero,8(sp)
  20158c:	00800084 	movi	r2,2
  201590:	d8800115 	stw	r2,4(sp)
  201594:	d8000015 	stw	zero,0(sp)
  201598:	01c00184 	movi	r7,6
  20159c:	01802004 	movi	r6,128
  2015a0:	000b883a 	mov	r5,zero
  2015a4:	02021cc0 	call	2021cc <XferCtrlReq>
  2015a8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
  2015ac:	e0bffc03 	ldbu	r2,-16(fp)
  2015b0:	10000226 	beq	r2,zero,2015bc <HIDKProbe+0xfc>
		return (FALSE);
  2015b4:	0005883a 	mov	r2,zero
  2015b8:	0000be06 	br	2018b4 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
  2015bc:	e0bffa17 	ldw	r2,-24(fp)
  2015c0:	10800143 	ldbu	r2,5(r2)
  2015c4:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  2015c8:	0000b306 	br	201898 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
  2015cc:	e0bffa17 	ldw	r2,-24(fp)
  2015d0:	10800043 	ldbu	r2,1(r2)
  2015d4:	10803fcc 	andi	r2,r2,255
  2015d8:	10800120 	cmpeqi	r2,r2,4
  2015dc:	1000091e 	bne	r2,zero,201604 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  2015e0:	e0bffa17 	ldw	r2,-24(fp)
  2015e4:	10800003 	ldbu	r2,0(r2)
  2015e8:	10803fcc 	andi	r2,r2,255
  2015ec:	e0fffb17 	ldw	r3,-20(fp)
  2015f0:	1885883a 	add	r2,r3,r2
  2015f4:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
  2015f8:	e0bffb17 	ldw	r2,-20(fp)
  2015fc:	e0bffa15 	stw	r2,-24(fp)
  201600:	0000a506 	br	201898 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
  201604:	e0bffa17 	ldw	r2,-24(fp)
  201608:	10800143 	ldbu	r2,5(r2)
  20160c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
  201610:	e0bffa17 	ldw	r2,-24(fp)
  201614:	10800183 	ldbu	r2,6(r2)
  201618:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
  20161c:	e0bffa17 	ldw	r2,-24(fp)
  201620:	108001c3 	ldbu	r2,7(r2)
  201624:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  201628:	e0bffc83 	ldbu	r2,-14(fp)
  20162c:	108000d8 	cmpnei	r2,r2,3
  201630:	1000971e 	bne	r2,zero,201890 <HIDKProbe+0x3d0>
  201634:	e0bffcc3 	ldbu	r2,-13(fp)
  201638:	10800058 	cmpnei	r2,r2,1
  20163c:	1000941e 	bne	r2,zero,201890 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
  201640:	e0bffd03 	ldbu	r2,-12(fp)
  201644:	10800058 	cmpnei	r2,r2,1
  201648:	1000911e 	bne	r2,zero,201890 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
  20164c:	e0fffe03 	ldbu	r3,-8(fp)
  201650:	00801074 	movhi	r2,65
  201654:	10a78704 	addi	r2,r2,-25060
  201658:	180690fa 	slli	r3,r3,3
  20165c:	10c5883a 	add	r2,r2,r3
  201660:	10800104 	addi	r2,r2,4
  201664:	00c00044 	movi	r3,1
  201668:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
  20166c:	e0fffe03 	ldbu	r3,-8(fp)
  201670:	00801074 	movhi	r2,65
  201674:	10a78704 	addi	r2,r2,-25060
  201678:	180690fa 	slli	r3,r3,3
  20167c:	10c5883a 	add	r2,r2,r3
  201680:	10800017 	ldw	r2,0(r2)
  201684:	1080008b 	ldhu	r2,2(r2)
  201688:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
  20168c:	02018c80 	call	2018c8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
  201690:	e0fffe03 	ldbu	r3,-8(fp)
  201694:	00801074 	movhi	r2,65
  201698:	10a78704 	addi	r2,r2,-25060
  20169c:	180690fa 	slli	r3,r3,3
  2016a0:	10c7883a 	add	r3,r2,r3
  2016a4:	00801074 	movhi	r2,65
  2016a8:	10a73304 	addi	r2,r2,-25396
  2016ac:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
  2016b0:	e0fffe03 	ldbu	r3,-8(fp)
  2016b4:	00801074 	movhi	r2,65
  2016b8:	10a78704 	addi	r2,r2,-25060
  2016bc:	180690fa 	slli	r3,r3,3
  2016c0:	10c5883a 	add	r2,r2,r3
  2016c4:	10800017 	ldw	r2,0(r2)
  2016c8:	e0fffd43 	ldbu	r3,-11(fp)
  2016cc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
  2016d0:	e0bffa17 	ldw	r2,-24(fp)
  2016d4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
  2016d8:	d0a01a45 	stb	r2,-32663(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
  2016dc:	e0bffe03 	ldbu	r2,-8(fp)
  2016e0:	d0a01a05 	stb	r2,-32664(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
  2016e4:	e0bffa17 	ldw	r2,-24(fp)
  2016e8:	10800003 	ldbu	r2,0(r2)
  2016ec:	10803fcc 	andi	r2,r2,255
  2016f0:	e0fffb17 	ldw	r3,-20(fp)
  2016f4:	1885883a 	add	r2,r3,r2
  2016f8:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
  2016fc:	e0bffb17 	ldw	r2,-20(fp)
  201700:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
  201704:	00005b06 	br	201874 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
  201708:	e0bffa17 	ldw	r2,-24(fp)
  20170c:	10800043 	ldbu	r2,1(r2)
  201710:	10803fcc 	andi	r2,r2,255
  201714:	10800160 	cmpeqi	r2,r2,5
  201718:	1000091e 	bne	r2,zero,201740 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
  20171c:	e0bffa17 	ldw	r2,-24(fp)
  201720:	10800003 	ldbu	r2,0(r2)
  201724:	10803fcc 	andi	r2,r2,255
  201728:	e0fffb17 	ldw	r3,-20(fp)
  20172c:	1885883a 	add	r2,r3,r2
  201730:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
  201734:	e0bffb17 	ldw	r2,-20(fp)
  201738:	e0bffa15 	stw	r2,-24(fp)
  20173c:	00004d06 	br	201874 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201740:	e0fffe03 	ldbu	r3,-8(fp)
  201744:	00801074 	movhi	r2,65
  201748:	10a78704 	addi	r2,r2,-25060
  20174c:	180690fa 	slli	r3,r3,3
  201750:	10c5883a 	add	r2,r2,r3
  201754:	10800017 	ldw	r2,0(r2)
  201758:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
  20175c:	e0fffa17 	ldw	r3,-24(fp)
  201760:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
  201764:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  201768:	e0fffe03 	ldbu	r3,-8(fp)
  20176c:	00801074 	movhi	r2,65
  201770:	10a78704 	addi	r2,r2,-25060
  201774:	180690fa 	slli	r3,r3,3
  201778:	10c5883a 	add	r2,r2,r3
  20177c:	10800017 	ldw	r2,0(r2)
  201780:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
  201784:	e0fffa17 	ldw	r3,-24(fp)
  201788:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
  20178c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  201790:	e0fffe03 	ldbu	r3,-8(fp)
  201794:	00801074 	movhi	r2,65
  201798:	10a78704 	addi	r2,r2,-25060
  20179c:	180690fa 	slli	r3,r3,3
  2017a0:	10c5883a 	add	r2,r2,r3
  2017a4:	10800017 	ldw	r2,0(r2)
  2017a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
  2017ac:	e0fffa17 	ldw	r3,-24(fp)
  2017b0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
  2017b4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2017b8:	e0fffe03 	ldbu	r3,-8(fp)
  2017bc:	00801074 	movhi	r2,65
  2017c0:	10a78704 	addi	r2,r2,-25060
  2017c4:	180690fa 	slli	r3,r3,3
  2017c8:	10c5883a 	add	r2,r2,r3
  2017cc:	10800017 	ldw	r2,0(r2)
  2017d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
  2017d4:	e0fffa17 	ldw	r3,-24(fp)
  2017d8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
  2017dc:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
  2017e0:	e0fffe03 	ldbu	r3,-8(fp)
  2017e4:	e0bffc43 	ldbu	r2,-15(fp)
  2017e8:	d8000415 	stw	zero,16(sp)
  2017ec:	d8000315 	stw	zero,12(sp)
  2017f0:	d8000215 	stw	zero,8(sp)
  2017f4:	d8000115 	stw	zero,4(sp)
  2017f8:	d8800015 	stw	r2,0(sp)
  2017fc:	01c00244 	movi	r7,9
  201800:	000d883a 	mov	r6,zero
  201804:	000b883a 	mov	r5,zero
  201808:	1809883a 	mov	r4,r3
  20180c:	02021cc0 	call	2021cc <XferCtrlReq>
  201810:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
  201814:	e0bffc03 	ldbu	r2,-16(fp)
  201818:	10000226 	beq	r2,zero,201824 <HIDKProbe+0x364>
							return (FALSE);
  20181c:	0005883a 	mov	r2,zero
  201820:	00002406 	br	2018b4 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
  201824:	e0fffe03 	ldbu	r3,-8(fp)
  201828:	d0a01a43 	ldbu	r2,-32663(gp)
  20182c:	10803fcc 	andi	r2,r2,255
  201830:	d8000415 	stw	zero,16(sp)
  201834:	d8000315 	stw	zero,12(sp)
  201838:	d8800215 	stw	r2,8(sp)
  20183c:	d8000115 	stw	zero,4(sp)
  201840:	d8000015 	stw	zero,0(sp)
  201844:	01c002c4 	movi	r7,11
  201848:	01800844 	movi	r6,33
  20184c:	000b883a 	mov	r5,zero
  201850:	1809883a 	mov	r4,r3
  201854:	02021cc0 	call	2021cc <XferCtrlReq>
  201858:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
  20185c:	e0bffc03 	ldbu	r2,-16(fp)
  201860:	10000226 	beq	r2,zero,20186c <HIDKProbe+0x3ac>
							return (FALSE);
  201864:	0005883a 	mov	r2,zero
  201868:	00001206 	br	2018b4 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
  20186c:	00800044 	movi	r2,1
  201870:	00001006 	br	2018b4 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
  201874:	e0fff90b 	ldhu	r3,-28(fp)
  201878:	00801074 	movhi	r2,65
  20187c:	10a74704 	addi	r2,r2,-25316
  201880:	1885883a 	add	r2,r3,r2
  201884:	e0fffb17 	ldw	r3,-20(fp)
  201888:	18bf9f36 	bltu	r3,r2,201708 <_gp+0xffdefaf4>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
  20188c:	00000206 	br	201898 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
  201890:	0005883a 	mov	r2,zero
  201894:	00000706 	br	2018b4 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
  201898:	e0fff90b 	ldhu	r3,-28(fp)
  20189c:	00801074 	movhi	r2,65
  2018a0:	10a74704 	addi	r2,r2,-25316
  2018a4:	1885883a 	add	r2,r3,r2
  2018a8:	e0fffb17 	ldw	r3,-20(fp)
  2018ac:	18bf4736 	bltu	r3,r2,2015cc <_gp+0xffdef9b8>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
  2018b0:	0005883a 	mov	r2,zero
}
  2018b4:	e037883a 	mov	sp,fp
  2018b8:	dfc00117 	ldw	ra,4(sp)
  2018bc:	df000017 	ldw	fp,0(sp)
  2018c0:	dec00204 	addi	sp,sp,8
  2018c4:	f800283a 	ret

002018c8 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
  2018c8:	deffff04 	addi	sp,sp,-4
  2018cc:	df000015 	stw	fp,0(sp)
  2018d0:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
  2018d4:	00801074 	movhi	r2,65
  2018d8:	10a73304 	addi	r2,r2,-25396
  2018dc:	00c01004 	movi	r3,64
  2018e0:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
  2018e4:	00801074 	movhi	r2,65
  2018e8:	10a73304 	addi	r2,r2,-25396
  2018ec:	00c00404 	movi	r3,16
  2018f0:	10c00385 	stb	r3,14(r2)
}
  2018f4:	0001883a 	nop
  2018f8:	e037883a 	mov	sp,fp
  2018fc:	df000017 	ldw	fp,0(sp)
  201900:	dec00104 	addi	sp,sp,4
  201904:	f800283a 	ret

00201908 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
  201908:	defffb04 	addi	sp,sp,-20
  20190c:	dfc00415 	stw	ra,16(sp)
  201910:	df000315 	stw	fp,12(sp)
  201914:	df000304 	addi	fp,sp,12
  201918:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  20191c:	d0a01a03 	ldbu	r2,-32664(gp)
  201920:	10803fcc 	andi	r2,r2,255
  201924:	100b883a 	mov	r5,r2
  201928:	01003804 	movi	r4,224
  20192c:	0201ae40 	call	201ae4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  201930:	d0a01a03 	ldbu	r2,-32664(gp)
  201934:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  201938:	d0a01a03 	ldbu	r2,-32664(gp)
  20193c:	10c03fcc 	andi	r3,r2,255
  201940:	00801074 	movhi	r2,65
  201944:	10a78704 	addi	r2,r2,-25060
  201948:	180690fa 	slli	r3,r3,3
  20194c:	10c5883a 	add	r2,r2,r3
  201950:	10800017 	ldw	r2,0(r2)
  201954:	10800204 	addi	r2,r2,8
  201958:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  20195c:	10803fcc 	andi	r2,r2,255
  201960:	d8800015 	stw	r2,0(sp)
  201964:	e1ffff17 	ldw	r7,-4(fp)
  201968:	01800204 	movi	r6,8
  20196c:	01400044 	movi	r5,1
  201970:	02025f00 	call	2025f0 <XferInTransfer>
  201974:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
  201978:	e0bffe03 	ldbu	r2,-8(fp)
}
  20197c:	e037883a 	mov	sp,fp
  201980:	dfc00117 	ldw	ra,4(sp)
  201984:	df000017 	ldw	fp,0(sp)
  201988:	dec00204 	addi	sp,sp,8
  20198c:	f800283a 	ret

00201990 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
  201990:	defffb04 	addi	sp,sp,-20
  201994:	dfc00415 	stw	ra,16(sp)
  201998:	df000315 	stw	fp,12(sp)
  20199c:	df000304 	addi	fp,sp,12
  2019a0:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
  2019a4:	d0a01a03 	ldbu	r2,-32664(gp)
  2019a8:	10803fcc 	andi	r2,r2,255
  2019ac:	100b883a 	mov	r5,r2
  2019b0:	01003804 	movi	r4,224
  2019b4:	0201ae40 	call	201ae4 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  2019b8:	d0a01a03 	ldbu	r2,-32664(gp)
  2019bc:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
  2019c0:	d0a01a03 	ldbu	r2,-32664(gp)
  2019c4:	10c03fcc 	andi	r3,r2,255
  2019c8:	00801074 	movhi	r2,65
  2019cc:	10a78704 	addi	r2,r2,-25060
  2019d0:	180690fa 	slli	r3,r3,3
  2019d4:	10c5883a 	add	r2,r2,r3
  2019d8:	10800017 	ldw	r2,0(r2)
  2019dc:	10800204 	addi	r2,r2,8
  2019e0:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
  2019e4:	10803fcc 	andi	r2,r2,255
  2019e8:	d8800015 	stw	r2,0(sp)
  2019ec:	e1ffff17 	ldw	r7,-4(fp)
  2019f0:	01800204 	movi	r6,8
  2019f4:	01400044 	movi	r5,1
  2019f8:	02025f00 	call	2025f0 <XferInTransfer>
  2019fc:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
  201a00:	e0bffe03 	ldbu	r2,-8(fp)
}
  201a04:	e037883a 	mov	sp,fp
  201a08:	dfc00117 	ldw	ra,4(sp)
  201a0c:	df000017 	ldw	fp,0(sp)
  201a10:	dec00204 	addi	sp,sp,8
  201a14:	f800283a 	ret

00201a18 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  201a18:	defffb04 	addi	sp,sp,-20
  201a1c:	df000415 	stw	fp,16(sp)
  201a20:	df000404 	addi	fp,sp,16
  201a24:	2007883a 	mov	r3,r4
  201a28:	2805883a 	mov	r2,r5
  201a2c:	e1bffe15 	stw	r6,-8(fp)
  201a30:	e1ffff15 	stw	r7,-4(fp)
  201a34:	e0fffc05 	stb	r3,-16(fp)
  201a38:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
  201a3c:	0005883a 	mov	r2,zero
}
  201a40:	e037883a 	mov	sp,fp
  201a44:	df000017 	ldw	fp,0(sp)
  201a48:	dec00104 	addi	sp,sp,4
  201a4c:	f800283a 	ret

00201a50 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
  201a50:	defffb04 	addi	sp,sp,-20
  201a54:	df000415 	stw	fp,16(sp)
  201a58:	df000404 	addi	fp,sp,16
  201a5c:	2007883a 	mov	r3,r4
  201a60:	2805883a 	mov	r2,r5
  201a64:	e1bffe15 	stw	r6,-8(fp)
  201a68:	e1ffff15 	stw	r7,-4(fp)
  201a6c:	e0fffc05 	stb	r3,-16(fp)
  201a70:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
  201a74:	0005883a 	mov	r2,zero
}
  201a78:	e037883a 	mov	sp,fp
  201a7c:	df000017 	ldw	fp,0(sp)
  201a80:	dec00104 	addi	sp,sp,4
  201a84:	f800283a 	ret

00201a88 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
  201a88:	defffc04 	addi	sp,sp,-16
  201a8c:	df000315 	stw	fp,12(sp)
  201a90:	df000304 	addi	fp,sp,12
  201a94:	2807883a 	mov	r3,r5
  201a98:	3005883a 	mov	r2,r6
  201a9c:	e13ffd05 	stb	r4,-12(fp)
  201aa0:	e0fffe05 	stb	r3,-8(fp)
  201aa4:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
  201aa8:	0001883a 	nop
  201aac:	e037883a 	mov	sp,fp
  201ab0:	df000017 	ldw	fp,0(sp)
  201ab4:	dec00104 	addi	sp,sp,4
  201ab8:	f800283a 	ret

00201abc <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
  201abc:	defffe04 	addi	sp,sp,-8
  201ac0:	df000115 	stw	fp,4(sp)
  201ac4:	df000104 	addi	fp,sp,4
  201ac8:	2005883a 	mov	r2,r4
  201acc:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
  201ad0:	0001883a 	nop
  201ad4:	e037883a 	mov	sp,fp
  201ad8:	df000017 	ldw	fp,0(sp)
  201adc:	dec00104 	addi	sp,sp,4
  201ae0:	f800283a 	ret

00201ae4 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
  201ae4:	defff804 	addi	sp,sp,-32
  201ae8:	dfc00715 	stw	ra,28(sp)
  201aec:	df000615 	stw	fp,24(sp)
  201af0:	df000604 	addi	fp,sp,24
  201af4:	2007883a 	mov	r3,r4
  201af8:	2805883a 	mov	r2,r5
  201afc:	e0fffe05 	stb	r3,-8(fp)
  201b00:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE temp[2];
	temp[0]=reg+2;
  201b04:	e0bffe03 	ldbu	r2,-8(fp)
  201b08:	10800084 	addi	r2,r2,2
  201b0c:	e0bffd05 	stb	r2,-12(fp)
	temp[1]=val;
  201b10:	e0bfff03 	ldbu	r2,-4(fp)
  201b14:	e0bffd45 	stb	r2,-11(fp)
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,2,temp,0,0,0)){
  201b18:	d8000215 	stw	zero,8(sp)
  201b1c:	d8000115 	stw	zero,4(sp)
  201b20:	d8000015 	stw	zero,0(sp)
  201b24:	e1fffd04 	addi	r7,fp,-12
  201b28:	01800084 	movi	r6,2
  201b2c:	000b883a 	mov	r5,zero
  201b30:	01001074 	movhi	r4,65
  201b34:	21042004 	addi	r4,r4,4224
  201b38:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201b3c:	1000030e 	bge	r2,zero,201b4c <MAXreg_wr+0x68>
		printf("Error 1\n");
  201b40:	01000874 	movhi	r4,33
  201b44:	211a8404 	addi	r4,r4,27152
  201b48:	0203f800 	call	203f80 <puts>
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
  201b4c:	0001883a 	nop
  201b50:	e037883a 	mov	sp,fp
  201b54:	dfc00117 	ldw	ra,4(sp)
  201b58:	df000017 	ldw	fp,0(sp)
  201b5c:	dec00204 	addi	sp,sp,8
  201b60:	f800283a 	ret

00201b64 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
  201b64:	defff804 	addi	sp,sp,-32
  201b68:	dfc00715 	stw	ra,28(sp)
  201b6c:	df000615 	stw	fp,24(sp)
  201b70:	df000604 	addi	fp,sp,24
  201b74:	2007883a 	mov	r3,r4
  201b78:	2805883a 	mov	r2,r5
  201b7c:	e1bfff15 	stw	r6,-4(fp)
  201b80:	e0fffd05 	stb	r3,-12(fp)
  201b84:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg + 2 via SPI
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	reg+=2;
  201b88:	e0bffd03 	ldbu	r2,-12(fp)
  201b8c:	10800084 	addi	r2,r2,2
  201b90:	e0bffd05 	stb	r2,-12(fp)
//	temp[0]=reg;
//	int i;
//	for (i=0;i<nbytes;i++){
//		temp[i+1]=data[i];
//	}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,0,0,1)){
  201b94:	00800044 	movi	r2,1
  201b98:	d8800215 	stw	r2,8(sp)
  201b9c:	d8000115 	stw	zero,4(sp)
  201ba0:	d8000015 	stw	zero,0(sp)
  201ba4:	e1fffd04 	addi	r7,fp,-12
  201ba8:	01800044 	movi	r6,1
  201bac:	000b883a 	mov	r5,zero
  201bb0:	01001074 	movhi	r4,65
  201bb4:	21042004 	addi	r4,r4,4224
  201bb8:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201bbc:	1000030e 	bge	r2,zero,201bcc <MAXbytes_wr+0x68>
			printf("Error 2_1\n");
  201bc0:	01000874 	movhi	r4,33
  201bc4:	211a8604 	addi	r4,r4,27160
  201bc8:	0203f800 	call	203f80 <puts>
		}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,nbytes,data,0,0,0 )){
  201bcc:	e0bffe03 	ldbu	r2,-8(fp)
  201bd0:	d8000215 	stw	zero,8(sp)
  201bd4:	d8000115 	stw	zero,4(sp)
  201bd8:	d8000015 	stw	zero,0(sp)
  201bdc:	e1ffff17 	ldw	r7,-4(fp)
  201be0:	100d883a 	mov	r6,r2
  201be4:	000b883a 	mov	r5,zero
  201be8:	01001074 	movhi	r4,65
  201bec:	21042004 	addi	r4,r4,4224
  201bf0:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201bf4:	1000030e 	bge	r2,zero,201c04 <MAXbytes_wr+0xa0>
			printf("Error 2_2\n");
  201bf8:	01000874 	movhi	r4,33
  201bfc:	211a8904 	addi	r4,r4,27172
  201c00:	0203f800 	call	203f80 <puts>
		}
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
  201c04:	e0bffe03 	ldbu	r2,-8(fp)
  201c08:	e0ffff17 	ldw	r3,-4(fp)
  201c0c:	1885883a 	add	r2,r3,r2
}
  201c10:	e037883a 	mov	sp,fp
  201c14:	dfc00117 	ldw	ra,4(sp)
  201c18:	df000017 	ldw	fp,0(sp)
  201c1c:	dec00204 	addi	sp,sp,8
  201c20:	f800283a 	ret

00201c24 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
  201c24:	defff904 	addi	sp,sp,-28
  201c28:	dfc00615 	stw	ra,24(sp)
  201c2c:	df000515 	stw	fp,20(sp)
  201c30:	df000504 	addi	fp,sp,20
  201c34:	2005883a 	mov	r2,r4
  201c38:	e0bfff05 	stb	r2,-4(fp)
	//psuedocode:

	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE temp[1];
	temp[0]=0;
  201c3c:	e03ffe05 	stb	zero,-8(fp)
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,0,0,1)){
  201c40:	e0ffff04 	addi	r3,fp,-4
  201c44:	00800044 	movi	r2,1
  201c48:	d8800215 	stw	r2,8(sp)
  201c4c:	d8000115 	stw	zero,4(sp)
  201c50:	d8000015 	stw	zero,0(sp)
  201c54:	180f883a 	mov	r7,r3
  201c58:	01800044 	movi	r6,1
  201c5c:	000b883a 	mov	r5,zero
  201c60:	01001074 	movhi	r4,65
  201c64:	21042004 	addi	r4,r4,4224
  201c68:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201c6c:	1000030e 	bge	r2,zero,201c7c <MAXreg_rd+0x58>
				printf("Error 3\n");
  201c70:	01000874 	movhi	r4,33
  201c74:	211a8c04 	addi	r4,r4,27184
  201c78:	0203f800 	call	203f80 <puts>
			}
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,0,0,1,temp,0)){
  201c7c:	d8000215 	stw	zero,8(sp)
  201c80:	e0bffe04 	addi	r2,fp,-8
  201c84:	d8800115 	stw	r2,4(sp)
  201c88:	00800044 	movi	r2,1
  201c8c:	d8800015 	stw	r2,0(sp)
  201c90:	000f883a 	mov	r7,zero
  201c94:	000d883a 	mov	r6,zero
  201c98:	000b883a 	mov	r5,zero
  201c9c:	01001074 	movhi	r4,65
  201ca0:	21042004 	addi	r4,r4,4224
  201ca4:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201ca8:	1000030e 	bge	r2,zero,201cb8 <MAXreg_rd+0x94>
				printf("Error 3\n");
  201cac:	01000874 	movhi	r4,33
  201cb0:	211a8c04 	addi	r4,r4,27184
  201cb4:	0203f800 	call	203f80 <puts>
			}
	return temp[0];
  201cb8:	e0bffe03 	ldbu	r2,-8(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
//	return val
}
  201cbc:	e037883a 	mov	sp,fp
  201cc0:	dfc00117 	ldw	ra,4(sp)
  201cc4:	df000017 	ldw	fp,0(sp)
  201cc8:	dec00204 	addi	sp,sp,8
  201ccc:	f800283a 	ret

00201cd0 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
  201cd0:	defff804 	addi	sp,sp,-32
  201cd4:	dfc00715 	stw	ra,28(sp)
  201cd8:	df000615 	stw	fp,24(sp)
  201cdc:	df000604 	addi	fp,sp,24
  201ce0:	2007883a 	mov	r3,r4
  201ce4:	2805883a 	mov	r2,r5
  201ce8:	e1bfff15 	stw	r6,-4(fp)
  201cec:	e0fffd05 	stb	r3,-12(fp)
  201cf0:	e0bffe05 	stb	r2,-8(fp)
	//psuedocode:
	//select MAX3421E (may not be necessary if you are using SPI peripheral)
	//write reg via SPI
	if(0>alt_avalon_spi_command(SPI_0_BASE,0,1,&reg,nbytes,data,0)){
  201cf4:	e0bffe03 	ldbu	r2,-8(fp)
  201cf8:	d8000215 	stw	zero,8(sp)
  201cfc:	e0ffff17 	ldw	r3,-4(fp)
  201d00:	d8c00115 	stw	r3,4(sp)
  201d04:	d8800015 	stw	r2,0(sp)
  201d08:	e1fffd04 	addi	r7,fp,-12
  201d0c:	01800044 	movi	r6,1
  201d10:	000b883a 	mov	r5,zero
  201d14:	01001074 	movhi	r4,65
  201d18:	21042004 	addi	r4,r4,4224
  201d1c:	0213f900 	call	213f90 <alt_avalon_spi_command>
  201d20:	1000030e 	bge	r2,zero,201d30 <MAXbytes_rd+0x60>
			printf("Error 4\n");
  201d24:	01000874 	movhi	r4,33
  201d28:	211a8e04 	addi	r4,r4,27192
  201d2c:	0203f800 	call	203f80 <puts>

	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	return (data + nbytes);
  201d30:	e0bffe03 	ldbu	r2,-8(fp)
  201d34:	e0ffff17 	ldw	r3,-4(fp)
  201d38:	1885883a 	add	r2,r3,r2
}
  201d3c:	e037883a 	mov	sp,fp
  201d40:	dfc00117 	ldw	ra,4(sp)
  201d44:	df000017 	ldw	fp,0(sp)
  201d48:	dec00204 	addi	sp,sp,8
  201d4c:	f800283a 	ret

00201d50 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
  201d50:	defffd04 	addi	sp,sp,-12
  201d54:	dfc00215 	stw	ra,8(sp)
  201d58:	df000115 	stw	fp,4(sp)
  201d5c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
  201d60:	0007883a 	mov	r3,zero
  201d64:	00801074 	movhi	r2,65
  201d68:	10843c04 	addi	r2,r2,4336
  201d6c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
  201d70:	010003f4 	movhi	r4,15
  201d74:	21109004 	addi	r4,r4,16960
  201d78:	02116b80 	call	2116b8 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
  201d7c:	00c00044 	movi	r3,1
  201d80:	00801074 	movhi	r2,65
  201d84:	10843c04 	addi	r2,r2,4336
  201d88:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
  201d8c:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
  201d90:	01400804 	movi	r5,32
  201d94:	01001e04 	movi	r4,120
  201d98:	0201ae40 	call	201ae4 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
  201d9c:	000b883a 	mov	r5,zero
  201da0:	01001e04 	movi	r4,120
  201da4:	0201ae40 	call	201ae4 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  201da8:	00000806 	br	201dcc <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
  201dac:	e0bfff03 	ldbu	r2,-4(fp)
  201db0:	10800044 	addi	r2,r2,1
  201db4:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
  201db8:	e0bfff03 	ldbu	r2,-4(fp)
  201dbc:	1000031e 	bne	r2,zero,201dcc <MAX3421E_reset+0x7c>
			printf("reset timeout!");
  201dc0:	01000874 	movhi	r4,33
  201dc4:	211a9004 	addi	r4,r4,27200
  201dc8:	0203e640 	call	203e64 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
  201dcc:	01001a04 	movi	r4,104
  201dd0:	0201c240 	call	201c24 <MAXreg_rd>
  201dd4:	10803fcc 	andi	r2,r2,255
  201dd8:	1080004c 	andi	r2,r2,1
  201ddc:	103ff326 	beq	r2,zero,201dac <_gp+0xffdf0198>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
  201de0:	0001883a 	nop
  201de4:	e037883a 	mov	sp,fp
  201de8:	dfc00117 	ldw	ra,4(sp)
  201dec:	df000017 	ldw	fp,0(sp)
  201df0:	dec00204 	addi	sp,sp,8
  201df4:	f800283a 	ret

00201df8 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
  201df8:	defffe04 	addi	sp,sp,-8
  201dfc:	df000115 	stw	fp,4(sp)
  201e00:	df000104 	addi	fp,sp,4
  201e04:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
  201e08:	00800044 	movi	r2,1
}
  201e0c:	e037883a 	mov	sp,fp
  201e10:	df000017 	ldw	fp,0(sp)
  201e14:	dec00104 	addi	sp,sp,4
  201e18:	f800283a 	ret

00201e1c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
  201e1c:	defffd04 	addi	sp,sp,-12
  201e20:	dfc00215 	stw	ra,8(sp)
  201e24:	df000115 	stw	fp,4(sp)
  201e28:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
  201e2c:	01003e04 	movi	r4,248
  201e30:	0201c240 	call	201c24 <MAXreg_rd>
  201e34:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
  201e38:	e0ffff03 	ldbu	r3,-4(fp)
  201e3c:	00bff004 	movi	r2,-64
  201e40:	1884703a 	and	r2,r3,r2
  201e44:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
  201e48:	e0bfff03 	ldbu	r2,-4(fp)
  201e4c:	10c01020 	cmpeqi	r3,r2,64
  201e50:	1800221e 	bne	r3,zero,201edc <MAX_busprobe+0xc0>
  201e54:	10c01048 	cmpgei	r3,r2,65
  201e58:	1800021e 	bne	r3,zero,201e64 <MAX_busprobe+0x48>
  201e5c:	10003b26 	beq	r2,zero,201f4c <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201e60:	00004a06 	br	201f8c <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
  201e64:	10c02020 	cmpeqi	r3,r2,128
  201e68:	1800031e 	bne	r3,zero,201e78 <MAX_busprobe+0x5c>
  201e6c:	10803020 	cmpeqi	r2,r2,192
  201e70:	1000331e 	bne	r2,zero,201f40 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201e74:	00004506 	br	201f8c <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  201e78:	d0a00303 	ldbu	r2,-32756(gp)
  201e7c:	10803fcc 	andi	r2,r2,255
  201e80:	108004e0 	cmpeqi	r2,r2,19
  201e84:	10003e1e 	bne	r2,zero,201f80 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  201e88:	01003604 	movi	r4,216
  201e8c:	0201c240 	call	201c24 <MAXreg_rd>
  201e90:	10803fcc 	andi	r2,r2,255
  201e94:	1080008c 	andi	r2,r2,2
  201e98:	1000071e 	bne	r2,zero,201eb8 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  201e9c:	01403244 	movi	r5,201
  201ea0:	01003604 	movi	r4,216
  201ea4:	0201ae40 	call	201ae4 <MAXreg_wr>
				printf("Starting in full speed\n");
  201ea8:	01000874 	movhi	r4,33
  201eac:	211a9404 	addi	r4,r4,27216
  201eb0:	0203f800 	call	203f80 <puts>
  201eb4:	00000606 	br	201ed0 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
  201eb8:	014032c4 	movi	r5,203
  201ebc:	01003604 	movi	r4,216
  201ec0:	0201ae40 	call	201ae4 <MAXreg_wr>
				printf("Starting in low speed\n");
  201ec4:	01000874 	movhi	r4,33
  201ec8:	211a9a04 	addi	r4,r4,27240
  201ecc:	0203f800 	call	203f80 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  201ed0:	00800404 	movi	r2,16
  201ed4:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201ed8:	00002906 	br	201f80 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
  201edc:	d0a00303 	ldbu	r2,-32756(gp)
  201ee0:	10803fcc 	andi	r2,r2,255
  201ee4:	108004e0 	cmpeqi	r2,r2,19
  201ee8:	1000271e 	bne	r2,zero,201f88 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
  201eec:	01003604 	movi	r4,216
  201ef0:	0201c240 	call	201c24 <MAXreg_rd>
  201ef4:	10803fcc 	andi	r2,r2,255
  201ef8:	1080008c 	andi	r2,r2,2
  201efc:	1000071e 	bne	r2,zero,201f1c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
  201f00:	014032c4 	movi	r5,203
  201f04:	01003604 	movi	r4,216
  201f08:	0201ae40 	call	201ae4 <MAXreg_wr>
				printf("Starting in low speed\n");
  201f0c:	01000874 	movhi	r4,33
  201f10:	211a9a04 	addi	r4,r4,27240
  201f14:	0203f800 	call	203f80 <puts>
  201f18:	00000606 	br	201f34 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
  201f1c:	01403244 	movi	r5,201
  201f20:	01003604 	movi	r4,216
  201f24:	0201ae40 	call	201ae4 <MAXreg_wr>
				printf("Starting in full speed\n");
  201f28:	01000874 	movhi	r4,33
  201f2c:	211a9404 	addi	r4,r4,27216
  201f30:	0203f800 	call	203f80 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
  201f34:	00800404 	movi	r2,16
  201f38:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201f3c:	00001206 	br	201f88 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
  201f40:	00800104 	movi	r2,4
  201f44:	d0a00305 	stb	r2,-32756(gp)
		break;
  201f48:	00001006 	br	201f8c <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
  201f4c:	d0a00303 	ldbu	r2,-32756(gp)
  201f50:	10803fcc 	andi	r2,r2,255
  201f54:	10803c0c 	andi	r2,r2,240
  201f58:	10000326 	beq	r2,zero,201f68 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
  201f5c:	00800044 	movi	r2,1
  201f60:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
  201f64:	00000906 	br	201f8c <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
  201f68:	01403244 	movi	r5,201
  201f6c:	01003604 	movi	r4,216
  201f70:	0201ae40 	call	201ae4 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
  201f74:	008000c4 	movi	r2,3
  201f78:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
  201f7c:	00000306 	br	201f8c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
  201f80:	0001883a 	nop
  201f84:	00000106 	br	201f8c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
  201f88:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
  201f8c:	0001883a 	nop
  201f90:	e037883a 	mov	sp,fp
  201f94:	dfc00117 	ldw	ra,4(sp)
  201f98:	df000017 	ldw	fp,0(sp)
  201f9c:	dec00204 	addi	sp,sp,8
  201fa0:	f800283a 	ret

00201fa4 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
  201fa4:	defffd04 	addi	sp,sp,-12
  201fa8:	dfc00215 	stw	ra,8(sp)
  201fac:	df000115 	stw	fp,4(sp)
  201fb0:	df000104 	addi	fp,sp,4
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
  201fb4:	01400684 	movi	r5,26
  201fb8:	01002204 	movi	r4,136
  201fbc:	0201ae40 	call	201ae4 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
  201fc0:	0201d500 	call	201d50 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
  201fc4:	0009883a 	mov	r4,zero
  201fc8:	0201df80 	call	201df8 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
  201fcc:	01402004 	movi	r5,128
  201fd0:	01002e04 	movi	r4,184
  201fd4:	0201ae40 	call	201ae4 <MAXreg_wr>
	Vbus_power( ON);
  201fd8:	01000044 	movi	r4,1
  201fdc:	0201df80 	call	201df8 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
  201fe0:	01403444 	movi	r5,209
  201fe4:	01003604 	movi	r4,216
  201fe8:	0201ae40 	call	201ae4 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
  201fec:	01400804 	movi	r5,32
  201ff0:	01003404 	movi	r4,208
  201ff4:	0201ae40 	call	201ae4 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
  201ff8:	01400104 	movi	r5,4
  201ffc:	01003a04 	movi	r4,232
  202000:	0201ae40 	call	201ae4 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
  202004:	0201e1c0 	call	201e1c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
  202008:	01400804 	movi	r5,32
  20200c:	01003204 	movi	r4,200
  202010:	0201ae40 	call	201ae4 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
  202014:	01400044 	movi	r5,1
  202018:	01002004 	movi	r4,128
  20201c:	0201ae40 	call	201ae4 <MAXreg_wr>
	BYTE testbyte=0x12;
  202020:	00800484 	movi	r2,18
  202024:	e0bfff05 	stb	r2,-4(fp)
	printf("\n%x\n",MAXreg_rd(testbyte));
  202028:	e0bfff03 	ldbu	r2,-4(fp)
  20202c:	1009883a 	mov	r4,r2
  202030:	0201c240 	call	201c24 <MAXreg_rd>
  202034:	10803fcc 	andi	r2,r2,255
  202038:	100b883a 	mov	r5,r2
  20203c:	01000874 	movhi	r4,33
  202040:	211aa004 	addi	r4,r4,27264
  202044:	0203e640 	call	203e64 <printf>
}
  202048:	0001883a 	nop
  20204c:	e037883a 	mov	sp,fp
  202050:	dfc00117 	ldw	ra,4(sp)
  202054:	df000017 	ldw	fp,0(sp)
  202058:	dec00204 	addi	sp,sp,8
  20205c:	f800283a 	ret

00202060 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
  202060:	defffe04 	addi	sp,sp,-8
  202064:	dfc00115 	stw	ra,4(sp)
  202068:	df000015 	stw	fp,0(sp)
  20206c:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
  202070:	00801074 	movhi	r2,65
  202074:	10844004 	addi	r2,r2,4352
  202078:	10800037 	ldwio	r2,0(r2)
  20207c:	1000041e 	bne	r2,zero,202090 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
  202080:	01000874 	movhi	r4,33
  202084:	211aa204 	addi	r4,r4,27272
  202088:	0203e640 	call	203e64 <printf>
		MaxIntHandler();
  20208c:	02020cc0 	call	2020cc <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
  202090:	00801074 	movhi	r2,65
  202094:	10844404 	addi	r2,r2,4368
  202098:	10800037 	ldwio	r2,0(r2)
  20209c:	10800058 	cmpnei	r2,r2,1
  2020a0:	1000041e 	bne	r2,zero,2020b4 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
  2020a4:	01000874 	movhi	r4,33
  2020a8:	211aa604 	addi	r4,r4,27288
  2020ac:	0203e640 	call	203e64 <printf>
		MaxGpxHandler();
  2020b0:	02021980 	call	202198 <MaxGpxHandler>
	}
}
  2020b4:	0001883a 	nop
  2020b8:	e037883a 	mov	sp,fp
  2020bc:	dfc00117 	ldw	ra,4(sp)
  2020c0:	df000017 	ldw	fp,0(sp)
  2020c4:	dec00204 	addi	sp,sp,8
  2020c8:	f800283a 	ret

002020cc <MaxIntHandler>:

void MaxIntHandler(void) {
  2020cc:	defffd04 	addi	sp,sp,-12
  2020d0:	dfc00215 	stw	ra,8(sp)
  2020d4:	df000115 	stw	fp,4(sp)
  2020d8:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
  2020dc:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
  2020e0:	01003204 	movi	r4,200
  2020e4:	0201c240 	call	201c24 <MAXreg_rd>
  2020e8:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
  2020ec:	e0bfff43 	ldbu	r2,-3(fp)
  2020f0:	100b883a 	mov	r5,r2
  2020f4:	01000874 	movhi	r4,33
  2020f8:	211aaa04 	addi	r4,r4,27304
  2020fc:	0203e640 	call	203e64 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
  202100:	e0bfff43 	ldbu	r2,-3(fp)
  202104:	1080100c 	andi	r2,r2,64
  202108:	10000326 	beq	r2,zero,202118 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
  20210c:	e0bfff03 	ldbu	r2,-4(fp)
  202110:	10801014 	ori	r2,r2,64
  202114:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
  202118:	e0bfff43 	ldbu	r2,-3(fp)
  20211c:	1080080c 	andi	r2,r2,32
  202120:	10000426 	beq	r2,zero,202134 <MaxIntHandler+0x68>
		MAX_busprobe();
  202124:	0201e1c0 	call	201e1c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
  202128:	e0bfff03 	ldbu	r2,-4(fp)
  20212c:	10800814 	ori	r2,r2,32
  202130:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
  202134:	e0bfff43 	ldbu	r2,-3(fp)
  202138:	1080020c 	andi	r2,r2,8
  20213c:	10000326 	beq	r2,zero,20214c <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
  202140:	000b883a 	mov	r5,zero
  202144:	01000e04 	movi	r4,56
  202148:	0201ae40 	call	201ae4 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
  20214c:	e0bfff43 	ldbu	r2,-3(fp)
  202150:	1080004c 	andi	r2,r2,1
  202154:	10000626 	beq	r2,zero,202170 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
  202158:	d0a00303 	ldbu	r2,-32756(gp)
  20215c:	10800044 	addi	r2,r2,1
  202160:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
  202164:	e0bfff03 	ldbu	r2,-4(fp)
  202168:	10800054 	ori	r2,r2,1
  20216c:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
  202170:	e0bfff03 	ldbu	r2,-4(fp)
  202174:	100b883a 	mov	r5,r2
  202178:	01003204 	movi	r4,200
  20217c:	0201ae40 	call	201ae4 <MAXreg_wr>
}
  202180:	0001883a 	nop
  202184:	e037883a 	mov	sp,fp
  202188:	dfc00117 	ldw	ra,4(sp)
  20218c:	df000017 	ldw	fp,0(sp)
  202190:	dec00204 	addi	sp,sp,8
  202194:	f800283a 	ret

00202198 <MaxGpxHandler>:

void MaxGpxHandler(void) {
  202198:	defffd04 	addi	sp,sp,-12
  20219c:	dfc00215 	stw	ra,8(sp)
  2021a0:	df000115 	stw	fp,4(sp)
  2021a4:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
  2021a8:	01002c04 	movi	r4,176
  2021ac:	0201c240 	call	201c24 <MAXreg_rd>
  2021b0:	e0bfff05 	stb	r2,-4(fp)
}
  2021b4:	0001883a 	nop
  2021b8:	e037883a 	mov	sp,fp
  2021bc:	dfc00117 	ldw	ra,4(sp)
  2021c0:	df000017 	ldw	fp,0(sp)
  2021c4:	dec00204 	addi	sp,sp,8
  2021c8:	f800283a 	ret

002021cc <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
  2021cc:	defff104 	addi	sp,sp,-60
  2021d0:	dfc00e15 	stw	ra,56(sp)
  2021d4:	df000d15 	stw	fp,52(sp)
  2021d8:	df000d04 	addi	fp,sp,52
  2021dc:	2015883a 	mov	r10,r4
  2021e0:	2813883a 	mov	r9,r5
  2021e4:	3011883a 	mov	r8,r6
  2021e8:	380d883a 	mov	r6,r7
  2021ec:	e1400217 	ldw	r5,8(fp)
  2021f0:	e1000317 	ldw	r4,12(fp)
  2021f4:	e0c00417 	ldw	r3,16(fp)
  2021f8:	e0800517 	ldw	r2,20(fp)
  2021fc:	e2bff805 	stb	r10,-32(fp)
  202200:	e27ff905 	stb	r9,-28(fp)
  202204:	e23ffa05 	stb	r8,-24(fp)
  202208:	e1bffb05 	stb	r6,-20(fp)
  20220c:	e17ffc05 	stb	r5,-16(fp)
  202210:	e13ffd05 	stb	r4,-12(fp)
  202214:	e0fffe0d 	sth	r3,-8(fp)
  202218:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
  20221c:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
  202220:	00800044 	movi	r2,1
  202224:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
  202228:	e0800617 	ldw	r2,24(fp)
  20222c:	1000011e 	bne	r2,zero,202234 <XferCtrlReq+0x68>
        datastage = 0;
  202230:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
  202234:	e0bff803 	ldbu	r2,-32(fp)
  202238:	100b883a 	mov	r5,r2
  20223c:	01003804 	movi	r4,224
  202240:	0201ae40 	call	201ae4 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
  202244:	e0bffa03 	ldbu	r2,-24(fp)
  202248:	10803fcc 	andi	r2,r2,255
  20224c:	1080201c 	xori	r2,r2,128
  202250:	10bfe004 	addi	r2,r2,-128
  202254:	1000020e 	bge	r2,zero,202260 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
  202258:	00800044 	movi	r2,1
  20225c:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
  202260:	e0bffa03 	ldbu	r2,-24(fp)
  202264:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
  202268:	e0bffb03 	ldbu	r2,-20(fp)
  20226c:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
  202270:	e0bffc03 	ldbu	r2,-16(fp)
  202274:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
  202278:	e0bffd03 	ldbu	r2,-12(fp)
  20227c:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
  202280:	e0bffe0b 	ldhu	r2,-8(fp)
  202284:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
  202288:	e0bfff0b 	ldhu	r2,-4(fp)
  20228c:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
  202290:	e0bff584 	addi	r2,fp,-42
  202294:	100d883a 	mov	r6,r2
  202298:	01400204 	movi	r5,8
  20229c:	01000804 	movi	r4,32
  2022a0:	0201b640 	call	201b64 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
  2022a4:	e0bff903 	ldbu	r2,-28(fp)
  2022a8:	100b883a 	mov	r5,r2
  2022ac:	01000404 	movi	r4,16
  2022b0:	02024740 	call	202474 <XferDispatchPkt>
  2022b4:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
  2022b8:	e0bff543 	ldbu	r2,-43(fp)
  2022bc:	10000226 	beq	r2,zero,2022c8 <XferCtrlReq+0xfc>
        return( rcode );
  2022c0:	e0bff543 	ldbu	r2,-43(fp)
  2022c4:	00000f06 	br	202304 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
  2022c8:	e0bff503 	ldbu	r2,-44(fp)
  2022cc:	1085883a 	add	r2,r2,r2
  2022d0:	1087883a 	add	r3,r2,r2
  2022d4:	d0a00104 	addi	r2,gp,-32764
  2022d8:	1885883a 	add	r2,r3,r2
  2022dc:	10800017 	ldw	r2,0(r2)
  2022e0:	e13ff803 	ldbu	r4,-32(fp)
  2022e4:	e17ff903 	ldbu	r5,-28(fp)
  2022e8:	e1bfff0b 	ldhu	r6,-4(fp)
  2022ec:	e0fff417 	ldw	r3,-48(fp)
  2022f0:	d8c00015 	stw	r3,0(sp)
  2022f4:	e1c00617 	ldw	r7,24(fp)
  2022f8:	103ee83a 	callr	r2
  2022fc:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
  202300:	e0bff543 	ldbu	r2,-43(fp)
}
  202304:	e037883a 	mov	sp,fp
  202308:	dfc00117 	ldw	ra,4(sp)
  20230c:	df000017 	ldw	fp,0(sp)
  202310:	dec00204 	addi	sp,sp,8
  202314:	f800283a 	ret

00202318 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  202318:	defff804 	addi	sp,sp,-32
  20231c:	dfc00715 	stw	ra,28(sp)
  202320:	df000615 	stw	fp,24(sp)
  202324:	df000604 	addi	fp,sp,24
  202328:	2807883a 	mov	r3,r5
  20232c:	3005883a 	mov	r2,r6
  202330:	e1ffff15 	stw	r7,-4(fp)
  202334:	e13ffc05 	stb	r4,-16(fp)
  202338:	e0fffd05 	stb	r3,-12(fp)
  20233c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
  202340:	e0800217 	ldw	r2,8(fp)
  202344:	10002826 	beq	r2,zero,2023e8 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  202348:	e0fffc03 	ldbu	r3,-16(fp)
  20234c:	00801074 	movhi	r2,65
  202350:	10a78704 	addi	r2,r2,-25060
  202354:	180690fa 	slli	r3,r3,3
  202358:	10c5883a 	add	r2,r2,r3
  20235c:	10c00017 	ldw	r3,0(r2)
  202360:	e0bffd03 	ldbu	r2,-12(fp)
  202364:	100490fa 	slli	r2,r2,3
  202368:	1885883a 	add	r2,r3,r2
  20236c:	00c00804 	movi	r3,32
  202370:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
  202374:	e13ffc03 	ldbu	r4,-16(fp)
  202378:	e17ffd03 	ldbu	r5,-12(fp)
  20237c:	e1bffe0b 	ldhu	r6,-8(fp)
  202380:	e0fffc03 	ldbu	r3,-16(fp)
  202384:	00801074 	movhi	r2,65
  202388:	10a78704 	addi	r2,r2,-25060
  20238c:	180690fa 	slli	r3,r3,3
  202390:	10c5883a 	add	r2,r2,r3
  202394:	10c00017 	ldw	r3,0(r2)
  202398:	e0bffd03 	ldbu	r2,-12(fp)
  20239c:	100490fa 	slli	r2,r2,3
  2023a0:	1885883a 	add	r2,r3,r2
  2023a4:	1080008b 	ldhu	r2,2(r2)
  2023a8:	10803fcc 	andi	r2,r2,255
  2023ac:	d8800015 	stw	r2,0(sp)
  2023b0:	e1ffff17 	ldw	r7,-4(fp)
  2023b4:	02025f00 	call	2025f0 <XferInTransfer>
  2023b8:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
  2023bc:	e0bffb03 	ldbu	r2,-20(fp)
  2023c0:	10000226 	beq	r2,zero,2023cc <XferCtrlData+0xb4>
        return( rcode );
  2023c4:	e0bffb03 	ldbu	r2,-20(fp)
  2023c8:	00000806 	br	2023ec <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
  2023cc:	e0bffd03 	ldbu	r2,-12(fp)
  2023d0:	100b883a 	mov	r5,r2
  2023d4:	01002804 	movi	r4,160
  2023d8:	02024740 	call	202474 <XferDispatchPkt>
  2023dc:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
  2023e0:	e0bffb03 	ldbu	r2,-20(fp)
  2023e4:	00000106 	br	2023ec <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
  2023e8:	00bfffc4 	movi	r2,-1
    }
}
  2023ec:	e037883a 	mov	sp,fp
  2023f0:	dfc00117 	ldw	ra,4(sp)
  2023f4:	df000017 	ldw	fp,0(sp)
  2023f8:	dec00204 	addi	sp,sp,8
  2023fc:	f800283a 	ret

00202400 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
  202400:	defff904 	addi	sp,sp,-28
  202404:	dfc00615 	stw	ra,24(sp)
  202408:	df000515 	stw	fp,20(sp)
  20240c:	df000504 	addi	fp,sp,20
  202410:	2807883a 	mov	r3,r5
  202414:	3005883a 	mov	r2,r6
  202418:	e1ffff15 	stw	r7,-4(fp)
  20241c:	e13ffc05 	stb	r4,-16(fp)
  202420:	e0fffd05 	stb	r3,-12(fp)
  202424:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
  202428:	e0800217 	ldw	r2,8(fp)
  20242c:	10000626 	beq	r2,zero,202448 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
  202430:	e0bffd03 	ldbu	r2,-12(fp)
  202434:	100b883a 	mov	r5,r2
  202438:	01002804 	movi	r4,160
  20243c:	02024740 	call	202474 <XferDispatchPkt>
  202440:	e0bffb05 	stb	r2,-20(fp)
  202444:	00000506 	br	20245c <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
  202448:	e0bffd03 	ldbu	r2,-12(fp)
  20244c:	100b883a 	mov	r5,r2
  202450:	01002004 	movi	r4,128
  202454:	02024740 	call	202474 <XferDispatchPkt>
  202458:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
  20245c:	e0bffb03 	ldbu	r2,-20(fp)
}
  202460:	e037883a 	mov	sp,fp
  202464:	dfc00117 	ldw	ra,4(sp)
  202468:	df000017 	ldw	fp,0(sp)
  20246c:	dec00204 	addi	sp,sp,8
  202470:	f800283a 	ret

00202474 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
  202474:	defff904 	addi	sp,sp,-28
  202478:	dfc00615 	stw	ra,24(sp)
  20247c:	df000515 	stw	fp,20(sp)
  202480:	df000504 	addi	fp,sp,20
  202484:	2007883a 	mov	r3,r4
  202488:	2805883a 	mov	r2,r5
  20248c:	e0fffe05 	stb	r3,-8(fp)
  202490:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202494:	d0a02b17 	ldw	r2,-32596(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
  202498:	0140fa04 	movi	r5,1000
  20249c:	1009883a 	mov	r4,r2
  2024a0:	02032780 	call	203278 <__mulsi3>
  2024a4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  2024a8:	d0a02a17 	ldw	r2,-32600(gp)
  2024ac:	100b883a 	mov	r5,r2
  2024b0:	1809883a 	mov	r4,r3
  2024b4:	02031bc0 	call	2031bc <__udivsi3>
  2024b8:	1084e204 	addi	r2,r2,5000
  2024bc:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
  2024c0:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
  2024c4:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
  2024c8:	e0fffe03 	ldbu	r3,-8(fp)
  2024cc:	e0bfff03 	ldbu	r2,-4(fp)
  2024d0:	1884b03a 	or	r2,r3,r2
  2024d4:	10803fcc 	andi	r2,r2,255
  2024d8:	100b883a 	mov	r5,r2
  2024dc:	01003c04 	movi	r4,240
  2024e0:	0201ae40 	call	201ae4 <MAXreg_wr>
        rcode = 0xff;
  2024e4:	00bfffc4 	movi	r2,-1
  2024e8:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  2024ec:	00000d06 	br	202524 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
  2024f0:	01003204 	movi	r4,200
  2024f4:	0201c240 	call	201c24 <MAXreg_rd>
  2024f8:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
  2024fc:	e0bffd03 	ldbu	r2,-12(fp)
  202500:	10803fcc 	andi	r2,r2,255
  202504:	1080201c 	xori	r2,r2,128
  202508:	10bfe004 	addi	r2,r2,-128
  20250c:	1000050e 	bge	r2,zero,202524 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
  202510:	01402004 	movi	r5,128
  202514:	01003204 	movi	r4,200
  202518:	0201ae40 	call	201ae4 <MAXreg_wr>
                rcode = 0x00;
  20251c:	e03ffb05 	stb	zero,-20(fp)
                break;
  202520:	00000c06 	br	202554 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202524:	d0a02b17 	ldw	r2,-32596(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
  202528:	0140fa04 	movi	r5,1000
  20252c:	1009883a 	mov	r4,r2
  202530:	02032780 	call	203278 <__mulsi3>
  202534:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  202538:	d0a02a17 	ldw	r2,-32600(gp)
  20253c:	100b883a 	mov	r5,r2
  202540:	1809883a 	mov	r4,r3
  202544:	02031bc0 	call	2031bc <__udivsi3>
  202548:	1007883a 	mov	r3,r2
  20254c:	e0bffc17 	ldw	r2,-16(fp)
  202550:	18bfe736 	bltu	r3,r2,2024f0 <_gp+0xffdf08dc>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
  202554:	e0bffb03 	ldbu	r2,-20(fp)
  202558:	10000226 	beq	r2,zero,202564 <XferDispatchPkt+0xf0>
            return( rcode );
  20255c:	e0bffb03 	ldbu	r2,-20(fp)
  202560:	00001e06 	br	2025dc <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
  202564:	01003e04 	movi	r4,248
  202568:	0201c240 	call	201c24 <MAXreg_rd>
  20256c:	108003cc 	andi	r2,r2,15
  202570:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
  202574:	e0bffb03 	ldbu	r2,-20(fp)
  202578:	10800118 	cmpnei	r2,r2,4
  20257c:	1000071e 	bne	r2,zero,20259c <XferDispatchPkt+0x128>
            nak_count++;
  202580:	e0bffb83 	ldbu	r2,-18(fp)
  202584:	10800044 	addi	r2,r2,1
  202588:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
  20258c:	e0bffb83 	ldbu	r2,-18(fp)
  202590:	10803218 	cmpnei	r2,r2,200
  202594:	10000b1e 	bne	r2,zero,2025c4 <XferDispatchPkt+0x150>
                break;
  202598:	00000f06 	br	2025d8 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
  20259c:	e0bffb03 	ldbu	r2,-20(fp)
  2025a0:	10800398 	cmpnei	r2,r2,14
  2025a4:	1000091e 	bne	r2,zero,2025cc <XferDispatchPkt+0x158>
            retry_count++;
  2025a8:	e0bffb43 	ldbu	r2,-19(fp)
  2025ac:	10800044 	addi	r2,r2,1
  2025b0:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
  2025b4:	e0bffb47 	ldb	r2,-19(fp)
  2025b8:	108000d8 	cmpnei	r2,r2,3
  2025bc:	10000526 	beq	r2,zero,2025d4 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
  2025c0:	00000106 	br	2025c8 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
  2025c4:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
  2025c8:	003fbf06 	br	2024c8 <_gp+0xffdf08b4>
            }
            else {
                continue;
            }
        }
        else break;
  2025cc:	0001883a 	nop
  2025d0:	00000106 	br	2025d8 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
  2025d4:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
  2025d8:	e0bffb03 	ldbu	r2,-20(fp)
}
  2025dc:	e037883a 	mov	sp,fp
  2025e0:	dfc00117 	ldw	ra,4(sp)
  2025e4:	df000017 	ldw	fp,0(sp)
  2025e8:	dec00204 	addi	sp,sp,8
  2025ec:	f800283a 	ret

002025f0 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
  2025f0:	defff804 	addi	sp,sp,-32
  2025f4:	dfc00715 	stw	ra,28(sp)
  2025f8:	df000615 	stw	fp,24(sp)
  2025fc:	df000604 	addi	fp,sp,24
  202600:	2011883a 	mov	r8,r4
  202604:	2809883a 	mov	r4,r5
  202608:	3007883a 	mov	r3,r6
  20260c:	e1fffe15 	stw	r7,-8(fp)
  202610:	e0800217 	ldw	r2,8(fp)
  202614:	e23ffb05 	stb	r8,-20(fp)
  202618:	e13ffc05 	stb	r4,-16(fp)
  20261c:	e0fffd0d 	sth	r3,-12(fp)
  202620:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
  202624:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
  202628:	e0fffb03 	ldbu	r3,-20(fp)
  20262c:	00801074 	movhi	r2,65
  202630:	10a78704 	addi	r2,r2,-25060
  202634:	180690fa 	slli	r3,r3,3
  202638:	10c5883a 	add	r2,r2,r3
  20263c:	10c00017 	ldw	r3,0(r2)
  202640:	e0bffc03 	ldbu	r2,-16(fp)
  202644:	100490fa 	slli	r2,r2,3
  202648:	1885883a 	add	r2,r3,r2
  20264c:	10800183 	ldbu	r2,6(r2)
  202650:	10803fcc 	andi	r2,r2,255
  202654:	100b883a 	mov	r5,r2
  202658:	01003a04 	movi	r4,232
  20265c:	0201ae40 	call	201ae4 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
  202660:	e0bffc03 	ldbu	r2,-16(fp)
  202664:	100b883a 	mov	r5,r2
  202668:	0009883a 	mov	r4,zero
  20266c:	02024740 	call	202474 <XferDispatchPkt>
  202670:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
  202674:	e0bffa83 	ldbu	r2,-22(fp)
  202678:	10000226 	beq	r2,zero,202684 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
  20267c:	e0bffa83 	ldbu	r2,-22(fp)
  202680:	00003a06 	br	20276c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
  202684:	01003204 	movi	r4,200
  202688:	0201c240 	call	201c24 <MAXreg_rd>
  20268c:	10803fcc 	andi	r2,r2,255
  202690:	1080010c 	andi	r2,r2,4
  202694:	1000021e 	bne	r2,zero,2026a0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
  202698:	00bffc04 	movi	r2,-16
  20269c:	00003306 	br	20276c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
  2026a0:	01000c04 	movi	r4,48
  2026a4:	0201c240 	call	201c24 <MAXreg_rd>
  2026a8:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
  2026ac:	e0bffac3 	ldbu	r2,-21(fp)
  2026b0:	e1bffe17 	ldw	r6,-8(fp)
  2026b4:	100b883a 	mov	r5,r2
  2026b8:	01000204 	movi	r4,8
  2026bc:	0201cd00 	call	201cd0 <MAXbytes_rd>
  2026c0:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
  2026c4:	01400104 	movi	r5,4
  2026c8:	01003204 	movi	r4,200
  2026cc:	0201ae40 	call	201ae4 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
  2026d0:	e0fffac3 	ldbu	r3,-21(fp)
  2026d4:	e0bffa0b 	ldhu	r2,-24(fp)
  2026d8:	1885883a 	add	r2,r3,r2
  2026dc:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
  2026e0:	e0fffac3 	ldbu	r3,-21(fp)
  2026e4:	e0bfff03 	ldbu	r2,-4(fp)
  2026e8:	18800336 	bltu	r3,r2,2026f8 <XferInTransfer+0x108>
  2026ec:	e0fffa0b 	ldhu	r3,-24(fp)
  2026f0:	e0bffd0b 	ldhu	r2,-12(fp)
  2026f4:	18bfda36 	bltu	r3,r2,202660 <_gp+0xffdf0a4c>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
  2026f8:	01003e04 	movi	r4,248
  2026fc:	0201c240 	call	201c24 <MAXreg_rd>
  202700:	10803fcc 	andi	r2,r2,255
  202704:	1080040c 	andi	r2,r2,16
  202708:	10000c26 	beq	r2,zero,20273c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
  20270c:	e0fffb03 	ldbu	r3,-20(fp)
  202710:	00801074 	movhi	r2,65
  202714:	10a78704 	addi	r2,r2,-25060
  202718:	180690fa 	slli	r3,r3,3
  20271c:	10c5883a 	add	r2,r2,r3
  202720:	10c00017 	ldw	r3,0(r2)
  202724:	e0bffc03 	ldbu	r2,-16(fp)
  202728:	100490fa 	slli	r2,r2,3
  20272c:	1885883a 	add	r2,r3,r2
  202730:	00c00804 	movi	r3,32
  202734:	10c00185 	stb	r3,6(r2)
  202738:	00000b06 	br	202768 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
  20273c:	e0fffb03 	ldbu	r3,-20(fp)
  202740:	00801074 	movhi	r2,65
  202744:	10a78704 	addi	r2,r2,-25060
  202748:	180690fa 	slli	r3,r3,3
  20274c:	10c5883a 	add	r2,r2,r3
  202750:	10c00017 	ldw	r3,0(r2)
  202754:	e0bffc03 	ldbu	r2,-16(fp)
  202758:	100490fa 	slli	r2,r2,3
  20275c:	1885883a 	add	r2,r3,r2
  202760:	00c00404 	movi	r3,16
  202764:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
  202768:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
  20276c:	e037883a 	mov	sp,fp
  202770:	dfc00117 	ldw	ra,4(sp)
  202774:	df000017 	ldw	fp,0(sp)
  202778:	dec00204 	addi	sp,sp,8
  20277c:	f800283a 	ret

00202780 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
  202780:	defffe04 	addi	sp,sp,-8
  202784:	df000115 	stw	fp,4(sp)
  202788:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  20278c:	e03fff05 	stb	zero,-4(fp)
  202790:	00001006 	br	2027d4 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
  202794:	e0ffff03 	ldbu	r3,-4(fp)
  202798:	00801074 	movhi	r2,65
  20279c:	10a78704 	addi	r2,r2,-25060
  2027a0:	180690fa 	slli	r3,r3,3
  2027a4:	10c5883a 	add	r2,r2,r3
  2027a8:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
  2027ac:	e0ffff03 	ldbu	r3,-4(fp)
  2027b0:	00801074 	movhi	r2,65
  2027b4:	10a78704 	addi	r2,r2,-25060
  2027b8:	180690fa 	slli	r3,r3,3
  2027bc:	10c5883a 	add	r2,r2,r3
  2027c0:	10800104 	addi	r2,r2,4
  2027c4:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
  2027c8:	e0bfff03 	ldbu	r2,-4(fp)
  2027cc:	10800044 	addi	r2,r2,1
  2027d0:	e0bfff05 	stb	r2,-4(fp)
  2027d4:	e0bfff03 	ldbu	r2,-4(fp)
  2027d8:	10800270 	cmpltui	r2,r2,9
  2027dc:	103fed1e 	bne	r2,zero,202794 <_gp+0xffdf0b80>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
  2027e0:	00801074 	movhi	r2,65
  2027e4:	10a78704 	addi	r2,r2,-25060
  2027e8:	d0e01b04 	addi	r3,gp,-32660
  2027ec:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
  2027f0:	d0201b8d 	sth	zero,-32658(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
  2027f4:	00801004 	movi	r2,64
  2027f8:	d0a01c45 	stb	r2,-32655(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
  2027fc:	00800404 	movi	r2,16
  202800:	d0a01c85 	stb	r2,-32654(gp)
}
  202804:	0001883a 	nop
  202808:	e037883a 	mov	sp,fp
  20280c:	df000017 	ldw	fp,0(sp)
  202810:	dec00104 	addi	sp,sp,4
  202814:	f800283a 	ret

00202818 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
  202818:	deffb204 	addi	sp,sp,-312
  20281c:	dfc04d15 	stw	ra,308(sp)
  202820:	df004c15 	stw	fp,304(sp)
  202824:	dc004b15 	stw	r16,300(sp)
  202828:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
  20282c:	d0a00303 	ldbu	r2,-32756(gp)
  202830:	10803fcc 	andi	r2,r2,255
  202834:	10803c0c 	andi	r2,r2,240
  202838:	10c00820 	cmpeqi	r3,r2,32
  20283c:	1801121e 	bne	r3,zero,202c88 <USB_Task+0x470>
  202840:	10c00848 	cmpgei	r3,r2,33
  202844:	1800041e 	bne	r3,zero,202858 <USB_Task+0x40>
  202848:	10000a26 	beq	r2,zero,202874 <USB_Task+0x5c>
  20284c:	10800420 	cmpeqi	r2,r2,16
  202850:	10001b1e 	bne	r2,zero,2028c0 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
  202854:	00017a06 	br	202e40 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
  202858:	10c01020 	cmpeqi	r3,r2,64
  20285c:	18016f1e 	bne	r3,zero,202e1c <USB_Task+0x604>
  202860:	10c03fe0 	cmpeqi	r3,r2,255
  202864:	18016f1e 	bne	r3,zero,202e24 <USB_Task+0x60c>
  202868:	10800c20 	cmpeqi	r2,r2,48
  20286c:	1001441e 	bne	r2,zero,202d80 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
  202870:	00017306 	br	202e40 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
  202874:	d0a00303 	ldbu	r2,-32756(gp)
  202878:	10803fcc 	andi	r2,r2,255
  20287c:	10c000e0 	cmpeqi	r3,r2,3
  202880:	1800091e 	bne	r3,zero,2028a8 <USB_Task+0x90>
  202884:	10c00120 	cmpeqi	r3,r2,4
  202888:	18000b1e 	bne	r3,zero,2028b8 <USB_Task+0xa0>
  20288c:	10800060 	cmpeqi	r2,r2,1
  202890:	1000011e 	bne	r2,zero,202898 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
  202894:	00016a06 	br	202e40 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
  202898:	02027800 	call	202780 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
  20289c:	008000c4 	movi	r2,3
  2028a0:	d0a00305 	stb	r2,-32756(gp)
                    break;
  2028a4:	00000506 	br	2028bc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
  2028a8:	01400104 	movi	r5,4
  2028ac:	01003a04 	movi	r4,232
  2028b0:	0201ae40 	call	201ae4 <MAXreg_wr>
                    break;
  2028b4:	00000106 	br	2028bc <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
  2028b8:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
  2028bc:	00016006 	br	202e40 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
  2028c0:	d0a00303 	ldbu	r2,-32756(gp)
  2028c4:	10803fcc 	andi	r2,r2,255
  2028c8:	10bffc04 	addi	r2,r2,-16
  2028cc:	10c001a8 	cmpgeui	r3,r2,6
  2028d0:	1801561e 	bne	r3,zero,202e2c <USB_Task+0x614>
  2028d4:	100690ba 	slli	r3,r2,2
  2028d8:	00800834 	movhi	r2,32
  2028dc:	108a3b04 	addi	r2,r2,10476
  2028e0:	1885883a 	add	r2,r3,r2
  2028e4:	10800017 	ldw	r2,0(r2)
  2028e8:	1000683a 	jmp	r2
  2028ec:	00202904 	movi	zero,-32604
  2028f0:	0020293c 	xorhi	zero,zero,32932
  2028f4:	00202978 	rdprs	zero,zero,-32603
  2028f8:	0020299c 	xori	zero,zero,32934
  2028fc:	002029dc 	xori	zero,zero,32935
  202900:	002029f0 	cmpltui	zero,zero,32935
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  202904:	d0a02b17 	ldw	r2,-32596(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
  202908:	0140fa04 	movi	r5,1000
  20290c:	1009883a 	mov	r4,r2
  202910:	02032780 	call	203278 <__mulsi3>
  202914:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  202918:	d0a02a17 	ldw	r2,-32600(gp)
  20291c:	100b883a 	mov	r5,r2
  202920:	1809883a 	mov	r4,r3
  202924:	02031bc0 	call	2031bc <__udivsi3>
  202928:	10803204 	addi	r2,r2,200
  20292c:	d0a01e15 	stw	r2,-32648(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
  202930:	00800444 	movi	r2,17
  202934:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
  202938:	0000d206 	br	202c84 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  20293c:	d0a02b17 	ldw	r2,-32596(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
  202940:	0140fa04 	movi	r5,1000
  202944:	1009883a 	mov	r4,r2
  202948:	02032780 	call	203278 <__mulsi3>
  20294c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  202950:	d0a02a17 	ldw	r2,-32600(gp)
  202954:	100b883a 	mov	r5,r2
  202958:	1809883a 	mov	r4,r3
  20295c:	02031bc0 	call	2031bc <__udivsi3>
  202960:	1007883a 	mov	r3,r2
  202964:	d0a01e17 	ldw	r2,-32648(gp)
  202968:	10c0c32e 	bgeu	r2,r3,202c78 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
  20296c:	00800484 	movi	r2,18
  202970:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  202974:	0000c006 	br	202c78 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
  202978:	01400044 	movi	r5,1
  20297c:	01003204 	movi	r4,200
  202980:	0201ae40 	call	201ae4 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
  202984:	01400044 	movi	r5,1
  202988:	01003a04 	movi	r4,232
  20298c:	0201ae40 	call	201ae4 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
  202990:	008004c4 	movi	r2,19
  202994:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
  202998:	0000ba06 	br	202c84 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
  20299c:	01003a04 	movi	r4,232
  2029a0:	0201c240 	call	201c24 <MAXreg_rd>
  2029a4:	10803fcc 	andi	r2,r2,255
  2029a8:	1080004c 	andi	r2,r2,1
  2029ac:	1000b41e 	bne	r2,zero,202c80 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
  2029b0:	01003604 	movi	r4,216
  2029b4:	0201c240 	call	201c24 <MAXreg_rd>
  2029b8:	10800214 	ori	r2,r2,8
  2029bc:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
  2029c0:	e0bfb943 	ldbu	r2,-283(fp)
  2029c4:	100b883a 	mov	r5,r2
  2029c8:	01003604 	movi	r4,216
  2029cc:	0201ae40 	call	201ae4 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
  2029d0:	00800504 	movi	r2,20
  2029d4:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  2029d8:	0000a906 	br	202c80 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
  2029dc:	01003204 	movi	r4,200
  2029e0:	0201c240 	call	201c24 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
  2029e4:	00800544 	movi	r2,21
  2029e8:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
  2029ec:	0000a506 	br	202c84 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
  2029f0:	00801074 	movhi	r2,65
  2029f4:	10a78704 	addi	r2,r2,-25060
  2029f8:	10800017 	ldw	r2,0(r2)
  2029fc:	00c00204 	movi	r3,8
  202a00:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
  202a04:	e0bfba04 	addi	r2,fp,-280
  202a08:	d8800415 	stw	r2,16(sp)
  202a0c:	00800204 	movi	r2,8
  202a10:	d8800315 	stw	r2,12(sp)
  202a14:	d8000215 	stw	zero,8(sp)
  202a18:	00800044 	movi	r2,1
  202a1c:	d8800115 	stw	r2,4(sp)
  202a20:	d8000015 	stw	zero,0(sp)
  202a24:	01c00184 	movi	r7,6
  202a28:	01802004 	movi	r6,128
  202a2c:	000b883a 	mov	r5,zero
  202a30:	0009883a 	mov	r4,zero
  202a34:	02021cc0 	call	2021cc <XferCtrlReq>
  202a38:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
  202a3c:	e0bfb983 	ldbu	r2,-282(fp)
  202a40:	1000861e 	bne	r2,zero,202c5c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
  202a44:	00801074 	movhi	r2,65
  202a48:	10a78704 	addi	r2,r2,-25060
  202a4c:	10800017 	ldw	r2,0(r2)
  202a50:	e0ffbbc3 	ldbu	r3,-273(fp)
  202a54:	18c03fcc 	andi	r3,r3,255
  202a58:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
  202a5c:	e0bfba03 	ldbu	r2,-280(fp)
  202a60:	10803fcc 	andi	r2,r2,255
  202a64:	e0ffba04 	addi	r3,fp,-280
  202a68:	d8c00415 	stw	r3,16(sp)
  202a6c:	d8800315 	stw	r2,12(sp)
  202a70:	d8000215 	stw	zero,8(sp)
  202a74:	00800044 	movi	r2,1
  202a78:	d8800115 	stw	r2,4(sp)
  202a7c:	d8000015 	stw	zero,0(sp)
  202a80:	01c00184 	movi	r7,6
  202a84:	01802004 	movi	r6,128
  202a88:	000b883a 	mov	r5,zero
  202a8c:	0009883a 	mov	r4,zero
  202a90:	02021cc0 	call	2021cc <XferCtrlReq>
  202a94:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
  202a98:	e0bfbd83 	ldbu	r2,-266(fp)
  202a9c:	10803fcc 	andi	r2,r2,255
  202aa0:	10003426 	beq	r2,zero,202b74 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  202aa4:	e0bfbd83 	ldbu	r2,-266(fp)
  202aa8:	10803fcc 	andi	r2,r2,255
  202aac:	e0ffbe84 	addi	r3,fp,-262
  202ab0:	d8c00415 	stw	r3,16(sp)
  202ab4:	00c00084 	movi	r3,2
  202ab8:	d8c00315 	stw	r3,12(sp)
  202abc:	00c10244 	movi	r3,1033
  202ac0:	d8c00215 	stw	r3,8(sp)
  202ac4:	00c000c4 	movi	r3,3
  202ac8:	d8c00115 	stw	r3,4(sp)
  202acc:	d8800015 	stw	r2,0(sp)
  202ad0:	01c00184 	movi	r7,6
  202ad4:	01802004 	movi	r6,128
  202ad8:	000b883a 	mov	r5,zero
  202adc:	0009883a 	mov	r4,zero
  202ae0:	02021cc0 	call	2021cc <XferCtrlReq>
  202ae4:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
  202ae8:	e0bfbd83 	ldbu	r2,-266(fp)
  202aec:	10803fcc 	andi	r2,r2,255
  202af0:	e0ffbe83 	ldbu	r3,-262(fp)
  202af4:	18c03fcc 	andi	r3,r3,255
  202af8:	e13fbe84 	addi	r4,fp,-262
  202afc:	d9000415 	stw	r4,16(sp)
  202b00:	d8c00315 	stw	r3,12(sp)
  202b04:	00c10244 	movi	r3,1033
  202b08:	d8c00215 	stw	r3,8(sp)
  202b0c:	00c000c4 	movi	r3,3
  202b10:	d8c00115 	stw	r3,4(sp)
  202b14:	d8800015 	stw	r2,0(sp)
  202b18:	01c00184 	movi	r7,6
  202b1c:	01802004 	movi	r6,128
  202b20:	000b883a 	mov	r5,zero
  202b24:	0009883a 	mov	r4,zero
  202b28:	02021cc0 	call	2021cc <XferCtrlReq>
  202b2c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  202b30:	e0bfbd83 	ldbu	r2,-266(fp)
  202b34:	14003fcc 	andi	r16,r2,255
  202b38:	e0bfbe83 	ldbu	r2,-262(fp)
  202b3c:	10803fcc 	andi	r2,r2,255
  202b40:	1004d07a 	srli	r2,r2,1
  202b44:	10bfffc4 	addi	r2,r2,-1
  202b48:	10c03fcc 	andi	r3,r2,255
  202b4c:	e0bfbe84 	addi	r2,fp,-262
  202b50:	10800084 	addi	r2,r2,2
  202b54:	180b883a 	mov	r5,r3
  202b58:	1009883a 	mov	r4,r2
  202b5c:	0202fe00 	call	202fe0 <ConvUTF8ToStr>
  202b60:	100d883a 	mov	r6,r2
  202b64:	800b883a 	mov	r5,r16
  202b68:	01000874 	movhi	r4,33
  202b6c:	211aad04 	addi	r4,r4,27316
  202b70:	0203e640 	call	203e64 <printf>
                		}
                		if (buf.iProduct != 0)
  202b74:	e0bfbdc3 	ldbu	r2,-265(fp)
  202b78:	10803fcc 	andi	r2,r2,255
  202b7c:	10003426 	beq	r2,zero,202c50 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  202b80:	e0bfbdc3 	ldbu	r2,-265(fp)
  202b84:	10803fcc 	andi	r2,r2,255
  202b88:	e0ffbe84 	addi	r3,fp,-262
  202b8c:	d8c00415 	stw	r3,16(sp)
  202b90:	00c00084 	movi	r3,2
  202b94:	d8c00315 	stw	r3,12(sp)
  202b98:	00c10244 	movi	r3,1033
  202b9c:	d8c00215 	stw	r3,8(sp)
  202ba0:	00c000c4 	movi	r3,3
  202ba4:	d8c00115 	stw	r3,4(sp)
  202ba8:	d8800015 	stw	r2,0(sp)
  202bac:	01c00184 	movi	r7,6
  202bb0:	01802004 	movi	r6,128
  202bb4:	000b883a 	mov	r5,zero
  202bb8:	0009883a 	mov	r4,zero
  202bbc:	02021cc0 	call	2021cc <XferCtrlReq>
  202bc0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
  202bc4:	e0bfbdc3 	ldbu	r2,-265(fp)
  202bc8:	10803fcc 	andi	r2,r2,255
  202bcc:	e0ffbe83 	ldbu	r3,-262(fp)
  202bd0:	18c03fcc 	andi	r3,r3,255
  202bd4:	e13fbe84 	addi	r4,fp,-262
  202bd8:	d9000415 	stw	r4,16(sp)
  202bdc:	d8c00315 	stw	r3,12(sp)
  202be0:	00c10244 	movi	r3,1033
  202be4:	d8c00215 	stw	r3,8(sp)
  202be8:	00c000c4 	movi	r3,3
  202bec:	d8c00115 	stw	r3,4(sp)
  202bf0:	d8800015 	stw	r2,0(sp)
  202bf4:	01c00184 	movi	r7,6
  202bf8:	01802004 	movi	r6,128
  202bfc:	000b883a 	mov	r5,zero
  202c00:	0009883a 	mov	r4,zero
  202c04:	02021cc0 	call	2021cc <XferCtrlReq>
  202c08:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
  202c0c:	e0bfbdc3 	ldbu	r2,-265(fp)
  202c10:	14003fcc 	andi	r16,r2,255
  202c14:	e0bfbe83 	ldbu	r2,-262(fp)
  202c18:	10803fcc 	andi	r2,r2,255
  202c1c:	1004d07a 	srli	r2,r2,1
  202c20:	10bfffc4 	addi	r2,r2,-1
  202c24:	10c03fcc 	andi	r3,r2,255
  202c28:	e0bfbe84 	addi	r2,fp,-262
  202c2c:	10800084 	addi	r2,r2,2
  202c30:	180b883a 	mov	r5,r3
  202c34:	1009883a 	mov	r4,r2
  202c38:	0202fe00 	call	202fe0 <ConvUTF8ToStr>
  202c3c:	100d883a 	mov	r6,r2
  202c40:	800b883a 	mov	r5,r16
  202c44:	01000874 	movhi	r4,33
  202c48:	211ab304 	addi	r4,r4,27340
  202c4c:	0203e640 	call	203e64 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
  202c50:	00800804 	movi	r2,32
  202c54:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  202c58:	00000a06 	br	202c84 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
  202c5c:	e0bfb983 	ldbu	r2,-282(fp)
  202c60:	d0a01f45 	stb	r2,-32643(gp)
                        last_usb_task_state = usb_task_state;
  202c64:	d0a00303 	ldbu	r2,-32756(gp)
  202c68:	d0a01d05 	stb	r2,-32652(gp)
                        usb_task_state = USB_STATE_ERROR;
  202c6c:	00bfffc4 	movi	r2,-1
  202c70:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
  202c74:	00000306 	br	202c84 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
  202c78:	0001883a 	nop
  202c7c:	00006b06 	br	202e2c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
  202c80:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
  202c84:	00006906 	br	202e2c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  202c88:	00800044 	movi	r2,1
  202c8c:	e0bfb905 	stb	r2,-284(fp)
  202c90:	00002d06 	br	202d48 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
  202c94:	e0ffb903 	ldbu	r3,-284(fp)
  202c98:	00801074 	movhi	r2,65
  202c9c:	10a78704 	addi	r2,r2,-25060
  202ca0:	180690fa 	slli	r3,r3,3
  202ca4:	10c5883a 	add	r2,r2,r3
  202ca8:	10800017 	ldw	r2,0(r2)
  202cac:	1000231e 	bne	r2,zero,202d3c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
  202cb0:	e13fb903 	ldbu	r4,-284(fp)
  202cb4:	00801074 	movhi	r2,65
  202cb8:	10a78704 	addi	r2,r2,-25060
  202cbc:	10c00017 	ldw	r3,0(r2)
  202cc0:	00801074 	movhi	r2,65
  202cc4:	10a78704 	addi	r2,r2,-25060
  202cc8:	200890fa 	slli	r4,r4,3
  202ccc:	1105883a 	add	r2,r2,r4
  202cd0:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
  202cd4:	e0bfb903 	ldbu	r2,-284(fp)
  202cd8:	d8000415 	stw	zero,16(sp)
  202cdc:	d8000315 	stw	zero,12(sp)
  202ce0:	d8000215 	stw	zero,8(sp)
  202ce4:	d8000115 	stw	zero,4(sp)
  202ce8:	d8800015 	stw	r2,0(sp)
  202cec:	01c00144 	movi	r7,5
  202cf0:	000d883a 	mov	r6,zero
  202cf4:	000b883a 	mov	r5,zero
  202cf8:	0009883a 	mov	r4,zero
  202cfc:	02021cc0 	call	2021cc <XferCtrlReq>
  202d00:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
  202d04:	e0bfb983 	ldbu	r2,-282(fp)
  202d08:	1000051e 	bne	r2,zero,202d20 <USB_Task+0x508>
                        tmp_addr = i;
  202d0c:	e0bfb903 	ldbu	r2,-284(fp)
  202d10:	d0a01f05 	stb	r2,-32644(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
  202d14:	00800c04 	movi	r2,48
  202d18:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
  202d1c:	00000d06 	br	202d54 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
  202d20:	e0bfb983 	ldbu	r2,-282(fp)
  202d24:	d0a01f45 	stb	r2,-32643(gp)
                        last_usb_task_state = usb_task_state;
  202d28:	d0a00303 	ldbu	r2,-32756(gp)
  202d2c:	d0a01d05 	stb	r2,-32652(gp)
                        usb_task_state = USB_STATE_ERROR;
  202d30:	00bfffc4 	movi	r2,-1
  202d34:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
  202d38:	00000606 	br	202d54 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
  202d3c:	e0bfb903 	ldbu	r2,-284(fp)
  202d40:	10800044 	addi	r2,r2,1
  202d44:	e0bfb905 	stb	r2,-284(fp)
  202d48:	e0bfb903 	ldbu	r2,-284(fp)
  202d4c:	10800230 	cmpltui	r2,r2,8
  202d50:	103fd01e 	bne	r2,zero,202c94 <_gp+0xffdf1080>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
  202d54:	d0a00303 	ldbu	r2,-32756(gp)
  202d58:	10803fcc 	andi	r2,r2,255
  202d5c:	10800818 	cmpnei	r2,r2,32
  202d60:	1000341e 	bne	r2,zero,202e34 <USB_Task+0x61c>
                usb_error = 0xfe;
  202d64:	00bfff84 	movi	r2,-2
  202d68:	d0a01f45 	stb	r2,-32643(gp)
                last_usb_task_state = usb_task_state;
  202d6c:	d0a00303 	ldbu	r2,-32756(gp)
  202d70:	d0a01d05 	stb	r2,-32652(gp)
                usb_task_state = USB_STATE_ERROR;
  202d74:	00bfffc4 	movi	r2,-1
  202d78:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
  202d7c:	00002d06 	br	202e34 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  202d80:	e03fb905 	stb	zero,-284(fp)
  202d84:	00001706 	br	202de4 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
  202d88:	e0bfb903 	ldbu	r2,-284(fp)
  202d8c:	04001074 	movhi	r16,65
  202d90:	84200004 	addi	r16,r16,-32768
  202d94:	01400304 	movi	r5,12
  202d98:	1009883a 	mov	r4,r2
  202d9c:	02032780 	call	203278 <__mulsi3>
  202da0:	8085883a 	add	r2,r16,r2
  202da4:	10800017 	ldw	r2,0(r2)
  202da8:	d0e01f03 	ldbu	r3,-32644(gp)
  202dac:	18c03fcc 	andi	r3,r3,255
  202db0:	000b883a 	mov	r5,zero
  202db4:	1809883a 	mov	r4,r3
  202db8:	103ee83a 	callr	r2
  202dbc:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
  202dc0:	e0bfb983 	ldbu	r2,-282(fp)
  202dc4:	10800058 	cmpnei	r2,r2,1
  202dc8:	1000031e 	bne	r2,zero,202dd8 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
  202dcc:	00801004 	movi	r2,64
  202dd0:	d0a00305 	stb	r2,-32756(gp)
                    break;
  202dd4:	00000606 	br	202df0 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
  202dd8:	e0bfb903 	ldbu	r2,-284(fp)
  202ddc:	10800044 	addi	r2,r2,1
  202de0:	e0bfb905 	stb	r2,-284(fp)
  202de4:	e0bfb903 	ldbu	r2,-284(fp)
  202de8:	10800130 	cmpltui	r2,r2,4
  202dec:	103fe61e 	bne	r2,zero,202d88 <_gp+0xffdf1174>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
  202df0:	d0a00303 	ldbu	r2,-32756(gp)
  202df4:	10803fcc 	andi	r2,r2,255
  202df8:	10800c18 	cmpnei	r2,r2,48
  202dfc:	10000f1e 	bne	r2,zero,202e3c <USB_Task+0x624>
                usb_error = 0xfd;
  202e00:	00bfff44 	movi	r2,-3
  202e04:	d0a01f45 	stb	r2,-32643(gp)
                last_usb_task_state = usb_task_state;
  202e08:	d0a00303 	ldbu	r2,-32756(gp)
  202e0c:	d0a01d05 	stb	r2,-32652(gp)
                usb_task_state = USB_STATE_ERROR;
  202e10:	00bfffc4 	movi	r2,-1
  202e14:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
  202e18:	00000806 	br	202e3c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
  202e1c:	0001883a 	nop
  202e20:	00000706 	br	202e40 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
  202e24:	0001883a 	nop
  202e28:	00000506 	br	202e40 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
  202e2c:	0001883a 	nop
  202e30:	00000306 	br	202e40 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
  202e34:	0001883a 	nop
  202e38:	00000106 	br	202e40 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
  202e3c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
  202e40:	0001883a 	nop
  202e44:	e6ffff04 	addi	sp,fp,-4
  202e48:	dfc00217 	ldw	ra,8(sp)
  202e4c:	df000117 	ldw	fp,4(sp)
  202e50:	dc000017 	ldw	r16,0(sp)
  202e54:	dec00304 	addi	sp,sp,12
  202e58:	f800283a 	ret

00202e5c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
  202e5c:	defffd04 	addi	sp,sp,-12
  202e60:	df000215 	stw	fp,8(sp)
  202e64:	df000204 	addi	fp,sp,8
  202e68:	2005883a 	mov	r2,r4
  202e6c:	e17fff15 	stw	r5,-4(fp)
  202e70:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
  202e74:	0005883a 	mov	r2,zero
}
  202e78:	e037883a 	mov	sp,fp
  202e7c:	df000017 	ldw	fp,0(sp)
  202e80:	dec00104 	addi	sp,sp,4
  202e84:	f800283a 	ret

00202e88 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202e88:	defffb04 	addi	sp,sp,-20
  202e8c:	df000415 	stw	fp,16(sp)
  202e90:	df000404 	addi	fp,sp,16
  202e94:	2007883a 	mov	r3,r4
  202e98:	2805883a 	mov	r2,r5
  202e9c:	e1bffe15 	stw	r6,-8(fp)
  202ea0:	e1ffff15 	stw	r7,-4(fp)
  202ea4:	e0fffc05 	stb	r3,-16(fp)
  202ea8:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
  202eac:	0005883a 	mov	r2,zero

}
  202eb0:	e037883a 	mov	sp,fp
  202eb4:	df000017 	ldw	fp,0(sp)
  202eb8:	dec00104 	addi	sp,sp,4
  202ebc:	f800283a 	ret

00202ec0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
  202ec0:	defffd04 	addi	sp,sp,-12
  202ec4:	df000215 	stw	fp,8(sp)
  202ec8:	df000204 	addi	fp,sp,8
  202ecc:	2005883a 	mov	r2,r4
  202ed0:	e17fff15 	stw	r5,-4(fp)
  202ed4:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
  202ed8:	0005883a 	mov	r2,zero

}
  202edc:	e037883a 	mov	sp,fp
  202ee0:	df000017 	ldw	fp,0(sp)
  202ee4:	dec00104 	addi	sp,sp,4
  202ee8:	f800283a 	ret

00202eec <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202eec:	defffb04 	addi	sp,sp,-20
  202ef0:	df000415 	stw	fp,16(sp)
  202ef4:	df000404 	addi	fp,sp,16
  202ef8:	2007883a 	mov	r3,r4
  202efc:	2805883a 	mov	r2,r5
  202f00:	e1bffe15 	stw	r6,-8(fp)
  202f04:	e1ffff15 	stw	r7,-4(fp)
  202f08:	e0fffc05 	stb	r3,-16(fp)
  202f0c:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
  202f10:	0005883a 	mov	r2,zero
}
  202f14:	e037883a 	mov	sp,fp
  202f18:	df000017 	ldw	fp,0(sp)
  202f1c:	dec00104 	addi	sp,sp,4
  202f20:	f800283a 	ret

00202f24 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
  202f24:	defffd04 	addi	sp,sp,-12
  202f28:	df000215 	stw	fp,8(sp)
  202f2c:	df000204 	addi	fp,sp,8
  202f30:	2005883a 	mov	r2,r4
  202f34:	e17fff15 	stw	r5,-4(fp)
  202f38:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
  202f3c:	0005883a 	mov	r2,zero
}
  202f40:	e037883a 	mov	sp,fp
  202f44:	df000017 	ldw	fp,0(sp)
  202f48:	dec00104 	addi	sp,sp,4
  202f4c:	f800283a 	ret

00202f50 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
  202f50:	defffb04 	addi	sp,sp,-20
  202f54:	df000415 	stw	fp,16(sp)
  202f58:	df000404 	addi	fp,sp,16
  202f5c:	2007883a 	mov	r3,r4
  202f60:	2805883a 	mov	r2,r5
  202f64:	e1bffe15 	stw	r6,-8(fp)
  202f68:	e1ffff15 	stw	r7,-4(fp)
  202f6c:	e0fffc05 	stb	r3,-16(fp)
  202f70:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
  202f74:	0005883a 	mov	r2,zero
}
  202f78:	e037883a 	mov	sp,fp
  202f7c:	df000017 	ldw	fp,0(sp)
  202f80:	dec00104 	addi	sp,sp,4
  202f84:	f800283a 	ret

00202f88 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
  202f88:	deffff04 	addi	sp,sp,-4
  202f8c:	df000015 	stw	fp,0(sp)
  202f90:	d839883a 	mov	fp,sp
    return( usb_task_state );
  202f94:	d0a00303 	ldbu	r2,-32756(gp)
}
  202f98:	e037883a 	mov	sp,fp
  202f9c:	df000017 	ldw	fp,0(sp)
  202fa0:	dec00104 	addi	sp,sp,4
  202fa4:	f800283a 	ret

00202fa8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
  202fa8:	defffe04 	addi	sp,sp,-8
  202fac:	df000115 	stw	fp,4(sp)
  202fb0:	df000104 	addi	fp,sp,4
  202fb4:	2005883a 	mov	r2,r4
  202fb8:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
  202fbc:	e0bfff03 	ldbu	r2,-4(fp)
  202fc0:	100690fa 	slli	r3,r2,3
  202fc4:	00801074 	movhi	r2,65
  202fc8:	10a78704 	addi	r2,r2,-25060
  202fcc:	1885883a 	add	r2,r3,r2
}
  202fd0:	e037883a 	mov	sp,fp
  202fd4:	df000017 	ldw	fp,0(sp)
  202fd8:	dec00104 	addi	sp,sp,4
  202fdc:	f800283a 	ret

00202fe0 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
  202fe0:	defffc04 	addi	sp,sp,-16
  202fe4:	df000315 	stw	fp,12(sp)
  202fe8:	df000304 	addi	fp,sp,12
  202fec:	e13ffe15 	stw	r4,-8(fp)
  202ff0:	2805883a 	mov	r2,r5
  202ff4:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
  202ff8:	e03ffd05 	stb	zero,-12(fp)
  202ffc:	00000d06 	br	203034 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
  203000:	e0bffd03 	ldbu	r2,-12(fp)
  203004:	e0fffe17 	ldw	r3,-8(fp)
  203008:	1887883a 	add	r3,r3,r2
  20300c:	e0bffd03 	ldbu	r2,-12(fp)
  203010:	1085883a 	add	r2,r2,r2
  203014:	1009883a 	mov	r4,r2
  203018:	e0bffe17 	ldw	r2,-8(fp)
  20301c:	1105883a 	add	r2,r2,r4
  203020:	10800003 	ldbu	r2,0(r2)
  203024:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
  203028:	e0bffd03 	ldbu	r2,-12(fp)
  20302c:	10800044 	addi	r2,r2,1
  203030:	e0bffd05 	stb	r2,-12(fp)
  203034:	e0fffd03 	ldbu	r3,-12(fp)
  203038:	e0bfff03 	ldbu	r2,-4(fp)
  20303c:	18bff036 	bltu	r3,r2,203000 <_gp+0xffdf13ec>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
  203040:	e0bfff03 	ldbu	r2,-4(fp)
  203044:	e0fffe17 	ldw	r3,-8(fp)
  203048:	1885883a 	add	r2,r3,r2
  20304c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
  203050:	e0bffe17 	ldw	r2,-8(fp)
}
  203054:	e037883a 	mov	sp,fp
  203058:	df000017 	ldw	fp,0(sp)
  20305c:	dec00104 	addi	sp,sp,4
  203060:	f800283a 	ret

00203064 <__fixunssfsi>:
  203064:	defffd04 	addi	sp,sp,-12
  203068:	dc000015 	stw	r16,0(sp)
  20306c:	0413c034 	movhi	r16,20224
  203070:	800b883a 	mov	r5,r16
  203074:	dc400115 	stw	r17,4(sp)
  203078:	dfc00215 	stw	ra,8(sp)
  20307c:	2023883a 	mov	r17,r4
  203080:	02032a00 	call	2032a0 <__gesf2>
  203084:	1000070e 	bge	r2,zero,2030a4 <__fixunssfsi+0x40>
  203088:	8809883a 	mov	r4,r17
  20308c:	0203c700 	call	203c70 <__fixsfsi>
  203090:	dfc00217 	ldw	ra,8(sp)
  203094:	dc400117 	ldw	r17,4(sp)
  203098:	dc000017 	ldw	r16,0(sp)
  20309c:	dec00304 	addi	sp,sp,12
  2030a0:	f800283a 	ret
  2030a4:	800b883a 	mov	r5,r16
  2030a8:	8809883a 	mov	r4,r17
  2030ac:	020378c0 	call	20378c <__subsf3>
  2030b0:	1009883a 	mov	r4,r2
  2030b4:	0203c700 	call	203c70 <__fixsfsi>
  2030b8:	00e00034 	movhi	r3,32768
  2030bc:	10c5883a 	add	r2,r2,r3
  2030c0:	003ff306 	br	203090 <_gp+0xffdf147c>

002030c4 <__divsi3>:
  2030c4:	20001b16 	blt	r4,zero,203134 <__divsi3+0x70>
  2030c8:	000f883a 	mov	r7,zero
  2030cc:	28001616 	blt	r5,zero,203128 <__divsi3+0x64>
  2030d0:	200d883a 	mov	r6,r4
  2030d4:	29001a2e 	bgeu	r5,r4,203140 <__divsi3+0x7c>
  2030d8:	00800804 	movi	r2,32
  2030dc:	00c00044 	movi	r3,1
  2030e0:	00000106 	br	2030e8 <__divsi3+0x24>
  2030e4:	10000d26 	beq	r2,zero,20311c <__divsi3+0x58>
  2030e8:	294b883a 	add	r5,r5,r5
  2030ec:	10bfffc4 	addi	r2,r2,-1
  2030f0:	18c7883a 	add	r3,r3,r3
  2030f4:	293ffb36 	bltu	r5,r4,2030e4 <_gp+0xffdf14d0>
  2030f8:	0005883a 	mov	r2,zero
  2030fc:	18000726 	beq	r3,zero,20311c <__divsi3+0x58>
  203100:	0005883a 	mov	r2,zero
  203104:	31400236 	bltu	r6,r5,203110 <__divsi3+0x4c>
  203108:	314dc83a 	sub	r6,r6,r5
  20310c:	10c4b03a 	or	r2,r2,r3
  203110:	1806d07a 	srli	r3,r3,1
  203114:	280ad07a 	srli	r5,r5,1
  203118:	183ffa1e 	bne	r3,zero,203104 <_gp+0xffdf14f0>
  20311c:	38000126 	beq	r7,zero,203124 <__divsi3+0x60>
  203120:	0085c83a 	sub	r2,zero,r2
  203124:	f800283a 	ret
  203128:	014bc83a 	sub	r5,zero,r5
  20312c:	39c0005c 	xori	r7,r7,1
  203130:	003fe706 	br	2030d0 <_gp+0xffdf14bc>
  203134:	0109c83a 	sub	r4,zero,r4
  203138:	01c00044 	movi	r7,1
  20313c:	003fe306 	br	2030cc <_gp+0xffdf14b8>
  203140:	00c00044 	movi	r3,1
  203144:	003fee06 	br	203100 <_gp+0xffdf14ec>

00203148 <__modsi3>:
  203148:	20001716 	blt	r4,zero,2031a8 <__modsi3+0x60>
  20314c:	000f883a 	mov	r7,zero
  203150:	2005883a 	mov	r2,r4
  203154:	28001216 	blt	r5,zero,2031a0 <__modsi3+0x58>
  203158:	2900162e 	bgeu	r5,r4,2031b4 <__modsi3+0x6c>
  20315c:	01800804 	movi	r6,32
  203160:	00c00044 	movi	r3,1
  203164:	00000106 	br	20316c <__modsi3+0x24>
  203168:	30000a26 	beq	r6,zero,203194 <__modsi3+0x4c>
  20316c:	294b883a 	add	r5,r5,r5
  203170:	31bfffc4 	addi	r6,r6,-1
  203174:	18c7883a 	add	r3,r3,r3
  203178:	293ffb36 	bltu	r5,r4,203168 <_gp+0xffdf1554>
  20317c:	18000526 	beq	r3,zero,203194 <__modsi3+0x4c>
  203180:	1806d07a 	srli	r3,r3,1
  203184:	11400136 	bltu	r2,r5,20318c <__modsi3+0x44>
  203188:	1145c83a 	sub	r2,r2,r5
  20318c:	280ad07a 	srli	r5,r5,1
  203190:	183ffb1e 	bne	r3,zero,203180 <_gp+0xffdf156c>
  203194:	38000126 	beq	r7,zero,20319c <__modsi3+0x54>
  203198:	0085c83a 	sub	r2,zero,r2
  20319c:	f800283a 	ret
  2031a0:	014bc83a 	sub	r5,zero,r5
  2031a4:	003fec06 	br	203158 <_gp+0xffdf1544>
  2031a8:	0109c83a 	sub	r4,zero,r4
  2031ac:	01c00044 	movi	r7,1
  2031b0:	003fe706 	br	203150 <_gp+0xffdf153c>
  2031b4:	00c00044 	movi	r3,1
  2031b8:	003ff106 	br	203180 <_gp+0xffdf156c>

002031bc <__udivsi3>:
  2031bc:	200d883a 	mov	r6,r4
  2031c0:	2900152e 	bgeu	r5,r4,203218 <__udivsi3+0x5c>
  2031c4:	28001416 	blt	r5,zero,203218 <__udivsi3+0x5c>
  2031c8:	00800804 	movi	r2,32
  2031cc:	00c00044 	movi	r3,1
  2031d0:	00000206 	br	2031dc <__udivsi3+0x20>
  2031d4:	10000e26 	beq	r2,zero,203210 <__udivsi3+0x54>
  2031d8:	28000516 	blt	r5,zero,2031f0 <__udivsi3+0x34>
  2031dc:	294b883a 	add	r5,r5,r5
  2031e0:	10bfffc4 	addi	r2,r2,-1
  2031e4:	18c7883a 	add	r3,r3,r3
  2031e8:	293ffa36 	bltu	r5,r4,2031d4 <_gp+0xffdf15c0>
  2031ec:	18000826 	beq	r3,zero,203210 <__udivsi3+0x54>
  2031f0:	0005883a 	mov	r2,zero
  2031f4:	31400236 	bltu	r6,r5,203200 <__udivsi3+0x44>
  2031f8:	314dc83a 	sub	r6,r6,r5
  2031fc:	10c4b03a 	or	r2,r2,r3
  203200:	1806d07a 	srli	r3,r3,1
  203204:	280ad07a 	srli	r5,r5,1
  203208:	183ffa1e 	bne	r3,zero,2031f4 <_gp+0xffdf15e0>
  20320c:	f800283a 	ret
  203210:	0005883a 	mov	r2,zero
  203214:	f800283a 	ret
  203218:	00c00044 	movi	r3,1
  20321c:	003ff406 	br	2031f0 <_gp+0xffdf15dc>

00203220 <__umodsi3>:
  203220:	2005883a 	mov	r2,r4
  203224:	2900122e 	bgeu	r5,r4,203270 <__umodsi3+0x50>
  203228:	28001116 	blt	r5,zero,203270 <__umodsi3+0x50>
  20322c:	01800804 	movi	r6,32
  203230:	00c00044 	movi	r3,1
  203234:	00000206 	br	203240 <__umodsi3+0x20>
  203238:	30000c26 	beq	r6,zero,20326c <__umodsi3+0x4c>
  20323c:	28000516 	blt	r5,zero,203254 <__umodsi3+0x34>
  203240:	294b883a 	add	r5,r5,r5
  203244:	31bfffc4 	addi	r6,r6,-1
  203248:	18c7883a 	add	r3,r3,r3
  20324c:	293ffa36 	bltu	r5,r4,203238 <_gp+0xffdf1624>
  203250:	18000626 	beq	r3,zero,20326c <__umodsi3+0x4c>
  203254:	1806d07a 	srli	r3,r3,1
  203258:	11400136 	bltu	r2,r5,203260 <__umodsi3+0x40>
  20325c:	1145c83a 	sub	r2,r2,r5
  203260:	280ad07a 	srli	r5,r5,1
  203264:	183ffb1e 	bne	r3,zero,203254 <_gp+0xffdf1640>
  203268:	f800283a 	ret
  20326c:	f800283a 	ret
  203270:	00c00044 	movi	r3,1
  203274:	003ff706 	br	203254 <_gp+0xffdf1640>

00203278 <__mulsi3>:
  203278:	0005883a 	mov	r2,zero
  20327c:	20000726 	beq	r4,zero,20329c <__mulsi3+0x24>
  203280:	20c0004c 	andi	r3,r4,1
  203284:	2008d07a 	srli	r4,r4,1
  203288:	18000126 	beq	r3,zero,203290 <__mulsi3+0x18>
  20328c:	1145883a 	add	r2,r2,r5
  203290:	294b883a 	add	r5,r5,r5
  203294:	203ffa1e 	bne	r4,zero,203280 <_gp+0xffdf166c>
  203298:	f800283a 	ret
  20329c:	f800283a 	ret

002032a0 <__gesf2>:
  2032a0:	2004d5fa 	srli	r2,r4,23
  2032a4:	2806d5fa 	srli	r3,r5,23
  2032a8:	01802034 	movhi	r6,128
  2032ac:	31bfffc4 	addi	r6,r6,-1
  2032b0:	10803fcc 	andi	r2,r2,255
  2032b4:	01c03fc4 	movi	r7,255
  2032b8:	3110703a 	and	r8,r6,r4
  2032bc:	18c03fcc 	andi	r3,r3,255
  2032c0:	314c703a 	and	r6,r6,r5
  2032c4:	2008d7fa 	srli	r4,r4,31
  2032c8:	280ad7fa 	srli	r5,r5,31
  2032cc:	11c01926 	beq	r2,r7,203334 <__gesf2+0x94>
  2032d0:	01c03fc4 	movi	r7,255
  2032d4:	19c00f26 	beq	r3,r7,203314 <__gesf2+0x74>
  2032d8:	1000061e 	bne	r2,zero,2032f4 <__gesf2+0x54>
  2032dc:	400f003a 	cmpeq	r7,r8,zero
  2032e0:	1800071e 	bne	r3,zero,203300 <__gesf2+0x60>
  2032e4:	3000061e 	bne	r6,zero,203300 <__gesf2+0x60>
  2032e8:	0005883a 	mov	r2,zero
  2032ec:	40000e1e 	bne	r8,zero,203328 <__gesf2+0x88>
  2032f0:	f800283a 	ret
  2032f4:	18000a1e 	bne	r3,zero,203320 <__gesf2+0x80>
  2032f8:	30000b26 	beq	r6,zero,203328 <__gesf2+0x88>
  2032fc:	000f883a 	mov	r7,zero
  203300:	29403fcc 	andi	r5,r5,255
  203304:	38000726 	beq	r7,zero,203324 <__gesf2+0x84>
  203308:	28000826 	beq	r5,zero,20332c <__gesf2+0x8c>
  20330c:	00800044 	movi	r2,1
  203310:	f800283a 	ret
  203314:	303ff026 	beq	r6,zero,2032d8 <_gp+0xffdf16c4>
  203318:	00bfff84 	movi	r2,-2
  20331c:	f800283a 	ret
  203320:	29403fcc 	andi	r5,r5,255
  203324:	21400526 	beq	r4,r5,20333c <__gesf2+0x9c>
  203328:	203ff826 	beq	r4,zero,20330c <_gp+0xffdf16f8>
  20332c:	00bfffc4 	movi	r2,-1
  203330:	f800283a 	ret
  203334:	403fe626 	beq	r8,zero,2032d0 <_gp+0xffdf16bc>
  203338:	003ff706 	br	203318 <_gp+0xffdf1704>
  20333c:	18bffa16 	blt	r3,r2,203328 <_gp+0xffdf1714>
  203340:	10c00216 	blt	r2,r3,20334c <__gesf2+0xac>
  203344:	323ff836 	bltu	r6,r8,203328 <_gp+0xffdf1714>
  203348:	4180022e 	bgeu	r8,r6,203354 <__gesf2+0xb4>
  20334c:	203fef1e 	bne	r4,zero,20330c <_gp+0xffdf16f8>
  203350:	003ff606 	br	20332c <_gp+0xffdf1718>
  203354:	0005883a 	mov	r2,zero
  203358:	f800283a 	ret

0020335c <__mulsf3>:
  20335c:	defff504 	addi	sp,sp,-44
  203360:	dc000115 	stw	r16,4(sp)
  203364:	2020d5fa 	srli	r16,r4,23
  203368:	dd400615 	stw	r21,24(sp)
  20336c:	202ad7fa 	srli	r21,r4,31
  203370:	dc800315 	stw	r18,12(sp)
  203374:	04802034 	movhi	r18,128
  203378:	df000915 	stw	fp,36(sp)
  20337c:	dd000515 	stw	r20,20(sp)
  203380:	94bfffc4 	addi	r18,r18,-1
  203384:	dfc00a15 	stw	ra,40(sp)
  203388:	ddc00815 	stw	r23,32(sp)
  20338c:	dd800715 	stw	r22,28(sp)
  203390:	dcc00415 	stw	r19,16(sp)
  203394:	dc400215 	stw	r17,8(sp)
  203398:	84003fcc 	andi	r16,r16,255
  20339c:	9124703a 	and	r18,r18,r4
  2033a0:	a829883a 	mov	r20,r21
  2033a4:	af003fcc 	andi	fp,r21,255
  2033a8:	80005426 	beq	r16,zero,2034fc <__mulsf3+0x1a0>
  2033ac:	00803fc4 	movi	r2,255
  2033b0:	80802f26 	beq	r16,r2,203470 <__mulsf3+0x114>
  2033b4:	91002034 	orhi	r4,r18,128
  2033b8:	202490fa 	slli	r18,r4,3
  2033bc:	843fe044 	addi	r16,r16,-127
  2033c0:	0023883a 	mov	r17,zero
  2033c4:	002f883a 	mov	r23,zero
  2033c8:	2804d5fa 	srli	r2,r5,23
  2033cc:	282cd7fa 	srli	r22,r5,31
  2033d0:	01002034 	movhi	r4,128
  2033d4:	213fffc4 	addi	r4,r4,-1
  2033d8:	10803fcc 	andi	r2,r2,255
  2033dc:	2166703a 	and	r19,r4,r5
  2033e0:	b1803fcc 	andi	r6,r22,255
  2033e4:	10004c26 	beq	r2,zero,203518 <__mulsf3+0x1bc>
  2033e8:	00c03fc4 	movi	r3,255
  2033ec:	10c04726 	beq	r2,r3,20350c <__mulsf3+0x1b0>
  2033f0:	99002034 	orhi	r4,r19,128
  2033f4:	202690fa 	slli	r19,r4,3
  2033f8:	10bfe044 	addi	r2,r2,-127
  2033fc:	0007883a 	mov	r3,zero
  203400:	80a1883a 	add	r16,r16,r2
  203404:	010003c4 	movi	r4,15
  203408:	1c44b03a 	or	r2,r3,r17
  20340c:	b56af03a 	xor	r21,r22,r21
  203410:	81c00044 	addi	r7,r16,1
  203414:	20806b36 	bltu	r4,r2,2035c4 <__mulsf3+0x268>
  203418:	100490ba 	slli	r2,r2,2
  20341c:	01000834 	movhi	r4,32
  203420:	210d0c04 	addi	r4,r4,13360
  203424:	1105883a 	add	r2,r2,r4
  203428:	10800017 	ldw	r2,0(r2)
  20342c:	1000683a 	jmp	r2
  203430:	002035c4 	movi	zero,-32553
  203434:	00203484 	movi	zero,-32558
  203438:	00203484 	movi	zero,-32558
  20343c:	00203480 	call	20348 <__alt_mem_onchip_flash_0_data-0x1dfcb8>
  203440:	002035a8 	cmpgeui	zero,zero,32982
  203444:	002035a8 	cmpgeui	zero,zero,32982
  203448:	00203594 	movui	zero,32982
  20344c:	00203480 	call	20348 <__alt_mem_onchip_flash_0_data-0x1dfcb8>
  203450:	002035a8 	cmpgeui	zero,zero,32982
  203454:	00203594 	movui	zero,32982
  203458:	002035a8 	cmpgeui	zero,zero,32982
  20345c:	00203480 	call	20348 <__alt_mem_onchip_flash_0_data-0x1dfcb8>
  203460:	002035b4 	movhi	zero,32982
  203464:	002035b4 	movhi	zero,32982
  203468:	002035b4 	movhi	zero,32982
  20346c:	002036c4 	movi	zero,-32549
  203470:	90003b1e 	bne	r18,zero,203560 <__mulsf3+0x204>
  203474:	04400204 	movi	r17,8
  203478:	05c00084 	movi	r23,2
  20347c:	003fd206 	br	2033c8 <_gp+0xffdf17b4>
  203480:	302b883a 	mov	r21,r6
  203484:	00800084 	movi	r2,2
  203488:	18802626 	beq	r3,r2,203524 <__mulsf3+0x1c8>
  20348c:	008000c4 	movi	r2,3
  203490:	1880b826 	beq	r3,r2,203774 <__mulsf3+0x418>
  203494:	00800044 	movi	r2,1
  203498:	1880af1e 	bne	r3,r2,203758 <__mulsf3+0x3fc>
  20349c:	a829883a 	mov	r20,r21
  2034a0:	0007883a 	mov	r3,zero
  2034a4:	0009883a 	mov	r4,zero
  2034a8:	18803fcc 	andi	r2,r3,255
  2034ac:	100695fa 	slli	r3,r2,23
  2034b0:	a0803fcc 	andi	r2,r20,255
  2034b4:	100a97fa 	slli	r5,r2,31
  2034b8:	00802034 	movhi	r2,128
  2034bc:	10bfffc4 	addi	r2,r2,-1
  2034c0:	2084703a 	and	r2,r4,r2
  2034c4:	10c4b03a 	or	r2,r2,r3
  2034c8:	1144b03a 	or	r2,r2,r5
  2034cc:	dfc00a17 	ldw	ra,40(sp)
  2034d0:	df000917 	ldw	fp,36(sp)
  2034d4:	ddc00817 	ldw	r23,32(sp)
  2034d8:	dd800717 	ldw	r22,28(sp)
  2034dc:	dd400617 	ldw	r21,24(sp)
  2034e0:	dd000517 	ldw	r20,20(sp)
  2034e4:	dcc00417 	ldw	r19,16(sp)
  2034e8:	dc800317 	ldw	r18,12(sp)
  2034ec:	dc400217 	ldw	r17,8(sp)
  2034f0:	dc000117 	ldw	r16,4(sp)
  2034f4:	dec00b04 	addi	sp,sp,44
  2034f8:	f800283a 	ret
  2034fc:	90000d1e 	bne	r18,zero,203534 <__mulsf3+0x1d8>
  203500:	04400104 	movi	r17,4
  203504:	05c00044 	movi	r23,1
  203508:	003faf06 	br	2033c8 <_gp+0xffdf17b4>
  20350c:	9806c03a 	cmpne	r3,r19,zero
  203510:	18c00084 	addi	r3,r3,2
  203514:	003fba06 	br	203400 <_gp+0xffdf17ec>
  203518:	9800141e 	bne	r19,zero,20356c <__mulsf3+0x210>
  20351c:	00c00044 	movi	r3,1
  203520:	003fb706 	br	203400 <_gp+0xffdf17ec>
  203524:	a829883a 	mov	r20,r21
  203528:	00ffffc4 	movi	r3,-1
  20352c:	0009883a 	mov	r4,zero
  203530:	003fdd06 	br	2034a8 <_gp+0xffdf1894>
  203534:	9009883a 	mov	r4,r18
  203538:	d9400015 	stw	r5,0(sp)
  20353c:	0203dd00 	call	203dd0 <__clzsi2>
  203540:	10fffec4 	addi	r3,r2,-5
  203544:	10801d84 	addi	r2,r2,118
  203548:	90e4983a 	sll	r18,r18,r3
  20354c:	00a1c83a 	sub	r16,zero,r2
  203550:	0023883a 	mov	r17,zero
  203554:	002f883a 	mov	r23,zero
  203558:	d9400017 	ldw	r5,0(sp)
  20355c:	003f9a06 	br	2033c8 <_gp+0xffdf17b4>
  203560:	04400304 	movi	r17,12
  203564:	05c000c4 	movi	r23,3
  203568:	003f9706 	br	2033c8 <_gp+0xffdf17b4>
  20356c:	9809883a 	mov	r4,r19
  203570:	d9800015 	stw	r6,0(sp)
  203574:	0203dd00 	call	203dd0 <__clzsi2>
  203578:	10fffec4 	addi	r3,r2,-5
  20357c:	10801d84 	addi	r2,r2,118
  203580:	98e6983a 	sll	r19,r19,r3
  203584:	0085c83a 	sub	r2,zero,r2
  203588:	0007883a 	mov	r3,zero
  20358c:	d9800017 	ldw	r6,0(sp)
  203590:	003f9b06 	br	203400 <_gp+0xffdf17ec>
  203594:	01002034 	movhi	r4,128
  203598:	0029883a 	mov	r20,zero
  20359c:	213fffc4 	addi	r4,r4,-1
  2035a0:	00ffffc4 	movi	r3,-1
  2035a4:	003fc006 	br	2034a8 <_gp+0xffdf1894>
  2035a8:	9027883a 	mov	r19,r18
  2035ac:	b807883a 	mov	r3,r23
  2035b0:	003fb406 	br	203484 <_gp+0xffdf1870>
  2035b4:	9027883a 	mov	r19,r18
  2035b8:	e02b883a 	mov	r21,fp
  2035bc:	b807883a 	mov	r3,r23
  2035c0:	003fb006 	br	203484 <_gp+0xffdf1870>
  2035c4:	9028d43a 	srli	r20,r18,16
  2035c8:	982cd43a 	srli	r22,r19,16
  2035cc:	94bfffcc 	andi	r18,r18,65535
  2035d0:	9cffffcc 	andi	r19,r19,65535
  2035d4:	980b883a 	mov	r5,r19
  2035d8:	9009883a 	mov	r4,r18
  2035dc:	d9c00015 	stw	r7,0(sp)
  2035e0:	02032780 	call	203278 <__mulsi3>
  2035e4:	a00b883a 	mov	r5,r20
  2035e8:	9809883a 	mov	r4,r19
  2035ec:	1023883a 	mov	r17,r2
  2035f0:	02032780 	call	203278 <__mulsi3>
  2035f4:	a009883a 	mov	r4,r20
  2035f8:	b00b883a 	mov	r5,r22
  2035fc:	1027883a 	mov	r19,r2
  203600:	02032780 	call	203278 <__mulsi3>
  203604:	b00b883a 	mov	r5,r22
  203608:	9009883a 	mov	r4,r18
  20360c:	1029883a 	mov	r20,r2
  203610:	02032780 	call	203278 <__mulsi3>
  203614:	8806d43a 	srli	r3,r17,16
  203618:	14c5883a 	add	r2,r2,r19
  20361c:	d9c00017 	ldw	r7,0(sp)
  203620:	1885883a 	add	r2,r3,r2
  203624:	14c0022e 	bgeu	r2,r19,203630 <__mulsf3+0x2d4>
  203628:	00c00074 	movhi	r3,1
  20362c:	a0e9883a 	add	r20,r20,r3
  203630:	1026943a 	slli	r19,r2,16
  203634:	8c7fffcc 	andi	r17,r17,65535
  203638:	1004d43a 	srli	r2,r2,16
  20363c:	9c63883a 	add	r17,r19,r17
  203640:	882691ba 	slli	r19,r17,6
  203644:	1505883a 	add	r2,r2,r20
  203648:	8822d6ba 	srli	r17,r17,26
  20364c:	100891ba 	slli	r4,r2,6
  203650:	9826c03a 	cmpne	r19,r19,zero
  203654:	9c62b03a 	or	r17,r19,r17
  203658:	8926b03a 	or	r19,r17,r4
  20365c:	9882002c 	andhi	r2,r19,2048
  203660:	10000426 	beq	r2,zero,203674 <__mulsf3+0x318>
  203664:	9804d07a 	srli	r2,r19,1
  203668:	9900004c 	andi	r4,r19,1
  20366c:	3821883a 	mov	r16,r7
  203670:	1126b03a 	or	r19,r2,r4
  203674:	80c01fc4 	addi	r3,r16,127
  203678:	00c0210e 	bge	zero,r3,203700 <__mulsf3+0x3a4>
  20367c:	988001cc 	andi	r2,r19,7
  203680:	10000426 	beq	r2,zero,203694 <__mulsf3+0x338>
  203684:	988003cc 	andi	r2,r19,15
  203688:	01000104 	movi	r4,4
  20368c:	11000126 	beq	r2,r4,203694 <__mulsf3+0x338>
  203690:	9927883a 	add	r19,r19,r4
  203694:	9882002c 	andhi	r2,r19,2048
  203698:	10000426 	beq	r2,zero,2036ac <__mulsf3+0x350>
  20369c:	00be0034 	movhi	r2,63488
  2036a0:	10bfffc4 	addi	r2,r2,-1
  2036a4:	80c02004 	addi	r3,r16,128
  2036a8:	98a6703a 	and	r19,r19,r2
  2036ac:	00803f84 	movi	r2,254
  2036b0:	10ff9c16 	blt	r2,r3,203524 <_gp+0xffdf1910>
  2036b4:	980891ba 	slli	r4,r19,6
  2036b8:	a829883a 	mov	r20,r21
  2036bc:	2008d27a 	srli	r4,r4,9
  2036c0:	003f7906 	br	2034a8 <_gp+0xffdf1894>
  2036c4:	9080102c 	andhi	r2,r18,64
  2036c8:	10000826 	beq	r2,zero,2036ec <__mulsf3+0x390>
  2036cc:	9880102c 	andhi	r2,r19,64
  2036d0:	1000061e 	bne	r2,zero,2036ec <__mulsf3+0x390>
  2036d4:	00802034 	movhi	r2,128
  2036d8:	99001034 	orhi	r4,r19,64
  2036dc:	10bfffc4 	addi	r2,r2,-1
  2036e0:	b029883a 	mov	r20,r22
  2036e4:	2088703a 	and	r4,r4,r2
  2036e8:	003fad06 	br	2035a0 <_gp+0xffdf198c>
  2036ec:	00802034 	movhi	r2,128
  2036f0:	91001034 	orhi	r4,r18,64
  2036f4:	10bfffc4 	addi	r2,r2,-1
  2036f8:	2088703a 	and	r4,r4,r2
  2036fc:	003fa806 	br	2035a0 <_gp+0xffdf198c>
  203700:	00800044 	movi	r2,1
  203704:	10c7c83a 	sub	r3,r2,r3
  203708:	008006c4 	movi	r2,27
  20370c:	10ff6316 	blt	r2,r3,20349c <_gp+0xffdf1888>
  203710:	00800804 	movi	r2,32
  203714:	10c5c83a 	sub	r2,r2,r3
  203718:	9884983a 	sll	r2,r19,r2
  20371c:	98c6d83a 	srl	r3,r19,r3
  203720:	1004c03a 	cmpne	r2,r2,zero
  203724:	1884b03a 	or	r2,r3,r2
  203728:	10c001cc 	andi	r3,r2,7
  20372c:	18000426 	beq	r3,zero,203740 <__mulsf3+0x3e4>
  203730:	10c003cc 	andi	r3,r2,15
  203734:	01000104 	movi	r4,4
  203738:	19000126 	beq	r3,r4,203740 <__mulsf3+0x3e4>
  20373c:	1105883a 	add	r2,r2,r4
  203740:	10c1002c 	andhi	r3,r2,1024
  203744:	18000626 	beq	r3,zero,203760 <__mulsf3+0x404>
  203748:	a829883a 	mov	r20,r21
  20374c:	00c00044 	movi	r3,1
  203750:	0009883a 	mov	r4,zero
  203754:	003f5406 	br	2034a8 <_gp+0xffdf1894>
  203758:	3821883a 	mov	r16,r7
  20375c:	003fc506 	br	203674 <_gp+0xffdf1a60>
  203760:	100491ba 	slli	r2,r2,6
  203764:	a829883a 	mov	r20,r21
  203768:	0007883a 	mov	r3,zero
  20376c:	1008d27a 	srli	r4,r2,9
  203770:	003f4d06 	br	2034a8 <_gp+0xffdf1894>
  203774:	00802034 	movhi	r2,128
  203778:	99001034 	orhi	r4,r19,64
  20377c:	10bfffc4 	addi	r2,r2,-1
  203780:	a829883a 	mov	r20,r21
  203784:	2088703a 	and	r4,r4,r2
  203788:	003f8506 	br	2035a0 <_gp+0xffdf198c>

0020378c <__subsf3>:
  20378c:	defffc04 	addi	sp,sp,-16
  203790:	280cd5fa 	srli	r6,r5,23
  203794:	dc000015 	stw	r16,0(sp)
  203798:	01c02034 	movhi	r7,128
  20379c:	2020d5fa 	srli	r16,r4,23
  2037a0:	39ffffc4 	addi	r7,r7,-1
  2037a4:	3906703a 	and	r3,r7,r4
  2037a8:	dc400115 	stw	r17,4(sp)
  2037ac:	394e703a 	and	r7,r7,r5
  2037b0:	2022d7fa 	srli	r17,r4,31
  2037b4:	dfc00315 	stw	ra,12(sp)
  2037b8:	dc800215 	stw	r18,8(sp)
  2037bc:	31803fcc 	andi	r6,r6,255
  2037c0:	01003fc4 	movi	r4,255
  2037c4:	84003fcc 	andi	r16,r16,255
  2037c8:	180690fa 	slli	r3,r3,3
  2037cc:	2804d7fa 	srli	r2,r5,31
  2037d0:	380e90fa 	slli	r7,r7,3
  2037d4:	31006d26 	beq	r6,r4,20398c <__subsf3+0x200>
  2037d8:	1080005c 	xori	r2,r2,1
  2037dc:	8189c83a 	sub	r4,r16,r6
  2037e0:	14404f26 	beq	r2,r17,203920 <__subsf3+0x194>
  2037e4:	0100770e 	bge	zero,r4,2039c4 <__subsf3+0x238>
  2037e8:	30001e1e 	bne	r6,zero,203864 <__subsf3+0xd8>
  2037ec:	38006a1e 	bne	r7,zero,203998 <__subsf3+0x20c>
  2037f0:	188001cc 	andi	r2,r3,7
  2037f4:	10000426 	beq	r2,zero,203808 <__subsf3+0x7c>
  2037f8:	188003cc 	andi	r2,r3,15
  2037fc:	01000104 	movi	r4,4
  203800:	11000126 	beq	r2,r4,203808 <__subsf3+0x7c>
  203804:	1907883a 	add	r3,r3,r4
  203808:	1881002c 	andhi	r2,r3,1024
  20380c:	10003926 	beq	r2,zero,2038f4 <__subsf3+0x168>
  203810:	84000044 	addi	r16,r16,1
  203814:	00803fc4 	movi	r2,255
  203818:	80807526 	beq	r16,r2,2039f0 <__subsf3+0x264>
  20381c:	180691ba 	slli	r3,r3,6
  203820:	8880004c 	andi	r2,r17,1
  203824:	180ad27a 	srli	r5,r3,9
  203828:	84003fcc 	andi	r16,r16,255
  20382c:	800695fa 	slli	r3,r16,23
  203830:	10803fcc 	andi	r2,r2,255
  203834:	01002034 	movhi	r4,128
  203838:	213fffc4 	addi	r4,r4,-1
  20383c:	100497fa 	slli	r2,r2,31
  203840:	2920703a 	and	r16,r5,r4
  203844:	80e0b03a 	or	r16,r16,r3
  203848:	8084b03a 	or	r2,r16,r2
  20384c:	dfc00317 	ldw	ra,12(sp)
  203850:	dc800217 	ldw	r18,8(sp)
  203854:	dc400117 	ldw	r17,4(sp)
  203858:	dc000017 	ldw	r16,0(sp)
  20385c:	dec00404 	addi	sp,sp,16
  203860:	f800283a 	ret
  203864:	00803fc4 	movi	r2,255
  203868:	80bfe126 	beq	r16,r2,2037f0 <_gp+0xffdf1bdc>
  20386c:	39c10034 	orhi	r7,r7,1024
  203870:	008006c4 	movi	r2,27
  203874:	11007416 	blt	r2,r4,203a48 <__subsf3+0x2bc>
  203878:	00800804 	movi	r2,32
  20387c:	1105c83a 	sub	r2,r2,r4
  203880:	3884983a 	sll	r2,r7,r2
  203884:	390ed83a 	srl	r7,r7,r4
  203888:	1008c03a 	cmpne	r4,r2,zero
  20388c:	390eb03a 	or	r7,r7,r4
  203890:	19c7c83a 	sub	r3,r3,r7
  203894:	1881002c 	andhi	r2,r3,1024
  203898:	10001426 	beq	r2,zero,2038ec <__subsf3+0x160>
  20389c:	04810034 	movhi	r18,1024
  2038a0:	94bfffc4 	addi	r18,r18,-1
  2038a4:	1ca4703a 	and	r18,r3,r18
  2038a8:	9009883a 	mov	r4,r18
  2038ac:	0203dd00 	call	203dd0 <__clzsi2>
  2038b0:	10bffec4 	addi	r2,r2,-5
  2038b4:	90a4983a 	sll	r18,r18,r2
  2038b8:	14005116 	blt	r2,r16,203a00 <__subsf3+0x274>
  2038bc:	1405c83a 	sub	r2,r2,r16
  2038c0:	10c00044 	addi	r3,r2,1
  2038c4:	00800804 	movi	r2,32
  2038c8:	10c5c83a 	sub	r2,r2,r3
  2038cc:	9084983a 	sll	r2,r18,r2
  2038d0:	90e4d83a 	srl	r18,r18,r3
  2038d4:	0021883a 	mov	r16,zero
  2038d8:	1006c03a 	cmpne	r3,r2,zero
  2038dc:	90c6b03a 	or	r3,r18,r3
  2038e0:	003fc306 	br	2037f0 <_gp+0xffdf1bdc>
  2038e4:	2000e026 	beq	r4,zero,203c68 <__subsf3+0x4dc>
  2038e8:	2007883a 	mov	r3,r4
  2038ec:	188001cc 	andi	r2,r3,7
  2038f0:	103fc11e 	bne	r2,zero,2037f8 <_gp+0xffdf1be4>
  2038f4:	180ad0fa 	srli	r5,r3,3
  2038f8:	00c03fc4 	movi	r3,255
  2038fc:	8880004c 	andi	r2,r17,1
  203900:	80c0031e 	bne	r16,r3,203910 <__subsf3+0x184>
  203904:	28006d26 	beq	r5,zero,203abc <__subsf3+0x330>
  203908:	29401034 	orhi	r5,r5,64
  20390c:	043fffc4 	movi	r16,-1
  203910:	00c02034 	movhi	r3,128
  203914:	18ffffc4 	addi	r3,r3,-1
  203918:	28ca703a 	and	r5,r5,r3
  20391c:	003fc206 	br	203828 <_gp+0xffdf1c14>
  203920:	01003c0e 	bge	zero,r4,203a14 <__subsf3+0x288>
  203924:	30002126 	beq	r6,zero,2039ac <__subsf3+0x220>
  203928:	01403fc4 	movi	r5,255
  20392c:	817fb026 	beq	r16,r5,2037f0 <_gp+0xffdf1bdc>
  203930:	39c10034 	orhi	r7,r7,1024
  203934:	014006c4 	movi	r5,27
  203938:	29007416 	blt	r5,r4,203b0c <__subsf3+0x380>
  20393c:	01400804 	movi	r5,32
  203940:	290bc83a 	sub	r5,r5,r4
  203944:	394a983a 	sll	r5,r7,r5
  203948:	390ed83a 	srl	r7,r7,r4
  20394c:	2808c03a 	cmpne	r4,r5,zero
  203950:	390eb03a 	or	r7,r7,r4
  203954:	19c7883a 	add	r3,r3,r7
  203958:	1901002c 	andhi	r4,r3,1024
  20395c:	20003826 	beq	r4,zero,203a40 <__subsf3+0x2b4>
  203960:	84000044 	addi	r16,r16,1
  203964:	01003fc4 	movi	r4,255
  203968:	81005426 	beq	r16,r4,203abc <__subsf3+0x330>
  20396c:	1023883a 	mov	r17,r2
  203970:	00bf0034 	movhi	r2,64512
  203974:	10bfffc4 	addi	r2,r2,-1
  203978:	1900004c 	andi	r4,r3,1
  20397c:	1886703a 	and	r3,r3,r2
  203980:	1806d07a 	srli	r3,r3,1
  203984:	1906b03a 	or	r3,r3,r4
  203988:	003f9906 	br	2037f0 <_gp+0xffdf1bdc>
  20398c:	383f9226 	beq	r7,zero,2037d8 <_gp+0xffdf1bc4>
  203990:	10803fcc 	andi	r2,r2,255
  203994:	003f9106 	br	2037dc <_gp+0xffdf1bc8>
  203998:	213fffc4 	addi	r4,r4,-1
  20399c:	203fbc26 	beq	r4,zero,203890 <_gp+0xffdf1c7c>
  2039a0:	00803fc4 	movi	r2,255
  2039a4:	80bfb21e 	bne	r16,r2,203870 <_gp+0xffdf1c5c>
  2039a8:	003f9106 	br	2037f0 <_gp+0xffdf1bdc>
  2039ac:	383f9026 	beq	r7,zero,2037f0 <_gp+0xffdf1bdc>
  2039b0:	213fffc4 	addi	r4,r4,-1
  2039b4:	203fe726 	beq	r4,zero,203954 <_gp+0xffdf1d40>
  2039b8:	01403fc4 	movi	r5,255
  2039bc:	817fdd1e 	bne	r16,r5,203934 <_gp+0xffdf1d20>
  2039c0:	003f8b06 	br	2037f0 <_gp+0xffdf1bdc>
  2039c4:	2000221e 	bne	r4,zero,203a50 <__subsf3+0x2c4>
  2039c8:	81000044 	addi	r4,r16,1
  2039cc:	21003fcc 	andi	r4,r4,255
  2039d0:	01400044 	movi	r5,1
  2039d4:	2900470e 	bge	r5,r4,203af4 <__subsf3+0x368>
  2039d8:	19e5c83a 	sub	r18,r3,r7
  2039dc:	9141002c 	andhi	r5,r18,1024
  2039e0:	28002d26 	beq	r5,zero,203a98 <__subsf3+0x30c>
  2039e4:	38e5c83a 	sub	r18,r7,r3
  2039e8:	1023883a 	mov	r17,r2
  2039ec:	003fae06 	br	2038a8 <_gp+0xffdf1c94>
  2039f0:	8880004c 	andi	r2,r17,1
  2039f4:	043fffc4 	movi	r16,-1
  2039f8:	000b883a 	mov	r5,zero
  2039fc:	003f8a06 	br	203828 <_gp+0xffdf1c14>
  203a00:	00ff0034 	movhi	r3,64512
  203a04:	18ffffc4 	addi	r3,r3,-1
  203a08:	80a1c83a 	sub	r16,r16,r2
  203a0c:	90c6703a 	and	r3,r18,r3
  203a10:	003f7706 	br	2037f0 <_gp+0xffdf1bdc>
  203a14:	2000431e 	bne	r4,zero,203b24 <__subsf3+0x398>
  203a18:	81000044 	addi	r4,r16,1
  203a1c:	21803fcc 	andi	r6,r4,255
  203a20:	01400044 	movi	r5,1
  203a24:	2980280e 	bge	r5,r6,203ac8 <__subsf3+0x33c>
  203a28:	01403fc4 	movi	r5,255
  203a2c:	21402326 	beq	r4,r5,203abc <__subsf3+0x330>
  203a30:	19c7883a 	add	r3,r3,r7
  203a34:	1806d07a 	srli	r3,r3,1
  203a38:	2021883a 	mov	r16,r4
  203a3c:	003f6c06 	br	2037f0 <_gp+0xffdf1bdc>
  203a40:	1023883a 	mov	r17,r2
  203a44:	003fa906 	br	2038ec <_gp+0xffdf1cd8>
  203a48:	01c00044 	movi	r7,1
  203a4c:	003f9006 	br	203890 <_gp+0xffdf1c7c>
  203a50:	8000151e 	bne	r16,zero,203aa8 <__subsf3+0x31c>
  203a54:	18002f26 	beq	r3,zero,203b14 <__subsf3+0x388>
  203a58:	0108303a 	nor	r4,zero,r4
  203a5c:	20000a26 	beq	r4,zero,203a88 <__subsf3+0x2fc>
  203a60:	01403fc4 	movi	r5,255
  203a64:	31402b26 	beq	r6,r5,203b14 <__subsf3+0x388>
  203a68:	014006c4 	movi	r5,27
  203a6c:	29006e16 	blt	r5,r4,203c28 <__subsf3+0x49c>
  203a70:	01400804 	movi	r5,32
  203a74:	290bc83a 	sub	r5,r5,r4
  203a78:	194a983a 	sll	r5,r3,r5
  203a7c:	1908d83a 	srl	r4,r3,r4
  203a80:	2806c03a 	cmpne	r3,r5,zero
  203a84:	20c6b03a 	or	r3,r4,r3
  203a88:	38c7c83a 	sub	r3,r7,r3
  203a8c:	3021883a 	mov	r16,r6
  203a90:	1023883a 	mov	r17,r2
  203a94:	003f7f06 	br	203894 <_gp+0xffdf1c80>
  203a98:	903f831e 	bne	r18,zero,2038a8 <_gp+0xffdf1c94>
  203a9c:	0005883a 	mov	r2,zero
  203aa0:	0021883a 	mov	r16,zero
  203aa4:	003f9a06 	br	203910 <_gp+0xffdf1cfc>
  203aa8:	01403fc4 	movi	r5,255
  203aac:	31401926 	beq	r6,r5,203b14 <__subsf3+0x388>
  203ab0:	0109c83a 	sub	r4,zero,r4
  203ab4:	18c10034 	orhi	r3,r3,1024
  203ab8:	003feb06 	br	203a68 <_gp+0xffdf1e54>
  203abc:	043fffc4 	movi	r16,-1
  203ac0:	000b883a 	mov	r5,zero
  203ac4:	003f5806 	br	203828 <_gp+0xffdf1c14>
  203ac8:	8000481e 	bne	r16,zero,203bec <__subsf3+0x460>
  203acc:	18006226 	beq	r3,zero,203c58 <__subsf3+0x4cc>
  203ad0:	383f4726 	beq	r7,zero,2037f0 <_gp+0xffdf1bdc>
  203ad4:	19c7883a 	add	r3,r3,r7
  203ad8:	1881002c 	andhi	r2,r3,1024
  203adc:	103f8326 	beq	r2,zero,2038ec <_gp+0xffdf1cd8>
  203ae0:	00bf0034 	movhi	r2,64512
  203ae4:	10bfffc4 	addi	r2,r2,-1
  203ae8:	2821883a 	mov	r16,r5
  203aec:	1886703a 	and	r3,r3,r2
  203af0:	003f3f06 	br	2037f0 <_gp+0xffdf1bdc>
  203af4:	80001c1e 	bne	r16,zero,203b68 <__subsf3+0x3dc>
  203af8:	1800261e 	bne	r3,zero,203b94 <__subsf3+0x408>
  203afc:	38004c26 	beq	r7,zero,203c30 <__subsf3+0x4a4>
  203b00:	3807883a 	mov	r3,r7
  203b04:	1023883a 	mov	r17,r2
  203b08:	003f3906 	br	2037f0 <_gp+0xffdf1bdc>
  203b0c:	01c00044 	movi	r7,1
  203b10:	003f9006 	br	203954 <_gp+0xffdf1d40>
  203b14:	3807883a 	mov	r3,r7
  203b18:	3021883a 	mov	r16,r6
  203b1c:	1023883a 	mov	r17,r2
  203b20:	003f3306 	br	2037f0 <_gp+0xffdf1bdc>
  203b24:	8000161e 	bne	r16,zero,203b80 <__subsf3+0x3f4>
  203b28:	18002d26 	beq	r3,zero,203be0 <__subsf3+0x454>
  203b2c:	0108303a 	nor	r4,zero,r4
  203b30:	20000a26 	beq	r4,zero,203b5c <__subsf3+0x3d0>
  203b34:	01403fc4 	movi	r5,255
  203b38:	31402926 	beq	r6,r5,203be0 <__subsf3+0x454>
  203b3c:	014006c4 	movi	r5,27
  203b40:	29004716 	blt	r5,r4,203c60 <__subsf3+0x4d4>
  203b44:	01400804 	movi	r5,32
  203b48:	290bc83a 	sub	r5,r5,r4
  203b4c:	194a983a 	sll	r5,r3,r5
  203b50:	1908d83a 	srl	r4,r3,r4
  203b54:	2806c03a 	cmpne	r3,r5,zero
  203b58:	20c6b03a 	or	r3,r4,r3
  203b5c:	19c7883a 	add	r3,r3,r7
  203b60:	3021883a 	mov	r16,r6
  203b64:	003f7c06 	br	203958 <_gp+0xffdf1d44>
  203b68:	1800111e 	bne	r3,zero,203bb0 <__subsf3+0x424>
  203b6c:	38003326 	beq	r7,zero,203c3c <__subsf3+0x4b0>
  203b70:	3807883a 	mov	r3,r7
  203b74:	1023883a 	mov	r17,r2
  203b78:	04003fc4 	movi	r16,255
  203b7c:	003f1c06 	br	2037f0 <_gp+0xffdf1bdc>
  203b80:	01403fc4 	movi	r5,255
  203b84:	31401626 	beq	r6,r5,203be0 <__subsf3+0x454>
  203b88:	0109c83a 	sub	r4,zero,r4
  203b8c:	18c10034 	orhi	r3,r3,1024
  203b90:	003fea06 	br	203b3c <_gp+0xffdf1f28>
  203b94:	383f1626 	beq	r7,zero,2037f0 <_gp+0xffdf1bdc>
  203b98:	19c9c83a 	sub	r4,r3,r7
  203b9c:	2141002c 	andhi	r5,r4,1024
  203ba0:	283f5026 	beq	r5,zero,2038e4 <_gp+0xffdf1cd0>
  203ba4:	38c7c83a 	sub	r3,r7,r3
  203ba8:	1023883a 	mov	r17,r2
  203bac:	003f1006 	br	2037f0 <_gp+0xffdf1bdc>
  203bb0:	38001b26 	beq	r7,zero,203c20 <__subsf3+0x494>
  203bb4:	1806d0fa 	srli	r3,r3,3
  203bb8:	1900102c 	andhi	r4,r3,64
  203bbc:	20000526 	beq	r4,zero,203bd4 <__subsf3+0x448>
  203bc0:	380ed0fa 	srli	r7,r7,3
  203bc4:	3900102c 	andhi	r4,r7,64
  203bc8:	2000021e 	bne	r4,zero,203bd4 <__subsf3+0x448>
  203bcc:	3807883a 	mov	r3,r7
  203bd0:	1023883a 	mov	r17,r2
  203bd4:	180690fa 	slli	r3,r3,3
  203bd8:	04003fc4 	movi	r16,255
  203bdc:	003f0406 	br	2037f0 <_gp+0xffdf1bdc>
  203be0:	3807883a 	mov	r3,r7
  203be4:	3021883a 	mov	r16,r6
  203be8:	003f0106 	br	2037f0 <_gp+0xffdf1bdc>
  203bec:	18001726 	beq	r3,zero,203c4c <__subsf3+0x4c0>
  203bf0:	38000b26 	beq	r7,zero,203c20 <__subsf3+0x494>
  203bf4:	1806d0fa 	srli	r3,r3,3
  203bf8:	1900102c 	andhi	r4,r3,64
  203bfc:	20000426 	beq	r4,zero,203c10 <__subsf3+0x484>
  203c00:	380ed0fa 	srli	r7,r7,3
  203c04:	3900102c 	andhi	r4,r7,64
  203c08:	2000011e 	bne	r4,zero,203c10 <__subsf3+0x484>
  203c0c:	3807883a 	mov	r3,r7
  203c10:	180690fa 	slli	r3,r3,3
  203c14:	1023883a 	mov	r17,r2
  203c18:	04003fc4 	movi	r16,255
  203c1c:	003ef406 	br	2037f0 <_gp+0xffdf1bdc>
  203c20:	04003fc4 	movi	r16,255
  203c24:	003ef206 	br	2037f0 <_gp+0xffdf1bdc>
  203c28:	00c00044 	movi	r3,1
  203c2c:	003f9606 	br	203a88 <_gp+0xffdf1e74>
  203c30:	000b883a 	mov	r5,zero
  203c34:	0005883a 	mov	r2,zero
  203c38:	003f3506 	br	203910 <_gp+0xffdf1cfc>
  203c3c:	01402034 	movhi	r5,128
  203c40:	297fffc4 	addi	r5,r5,-1
  203c44:	0005883a 	mov	r2,zero
  203c48:	003f2f06 	br	203908 <_gp+0xffdf1cf4>
  203c4c:	3807883a 	mov	r3,r7
  203c50:	04003fc4 	movi	r16,255
  203c54:	003ee606 	br	2037f0 <_gp+0xffdf1bdc>
  203c58:	3807883a 	mov	r3,r7
  203c5c:	003ee406 	br	2037f0 <_gp+0xffdf1bdc>
  203c60:	00c00044 	movi	r3,1
  203c64:	003fbd06 	br	203b5c <_gp+0xffdf1f48>
  203c68:	0005883a 	mov	r2,zero
  203c6c:	003f2806 	br	203910 <_gp+0xffdf1cfc>

00203c70 <__fixsfsi>:
  203c70:	200ad5fa 	srli	r5,r4,23
  203c74:	00c02034 	movhi	r3,128
  203c78:	18ffffc4 	addi	r3,r3,-1
  203c7c:	29403fcc 	andi	r5,r5,255
  203c80:	00801f84 	movi	r2,126
  203c84:	1906703a 	and	r3,r3,r4
  203c88:	2008d7fa 	srli	r4,r4,31
  203c8c:	11400e0e 	bge	r2,r5,203cc8 <__fixsfsi+0x58>
  203c90:	00802744 	movi	r2,157
  203c94:	11400816 	blt	r2,r5,203cb8 <__fixsfsi+0x48>
  203c98:	00802544 	movi	r2,149
  203c9c:	18c02034 	orhi	r3,r3,128
  203ca0:	11400b0e 	bge	r2,r5,203cd0 <__fixsfsi+0x60>
  203ca4:	28bfda84 	addi	r2,r5,-150
  203ca8:	1884983a 	sll	r2,r3,r2
  203cac:	20000726 	beq	r4,zero,203ccc <__fixsfsi+0x5c>
  203cb0:	0085c83a 	sub	r2,zero,r2
  203cb4:	f800283a 	ret
  203cb8:	00a00034 	movhi	r2,32768
  203cbc:	10bfffc4 	addi	r2,r2,-1
  203cc0:	2085883a 	add	r2,r4,r2
  203cc4:	f800283a 	ret
  203cc8:	0005883a 	mov	r2,zero
  203ccc:	f800283a 	ret
  203cd0:	00802584 	movi	r2,150
  203cd4:	1145c83a 	sub	r2,r2,r5
  203cd8:	1884d83a 	srl	r2,r3,r2
  203cdc:	003ff306 	br	203cac <_gp+0xffdf2098>

00203ce0 <__floatunsisf>:
  203ce0:	defffe04 	addi	sp,sp,-8
  203ce4:	dfc00115 	stw	ra,4(sp)
  203ce8:	dc000015 	stw	r16,0(sp)
  203cec:	20002c26 	beq	r4,zero,203da0 <__floatunsisf+0xc0>
  203cf0:	2021883a 	mov	r16,r4
  203cf4:	0203dd00 	call	203dd0 <__clzsi2>
  203cf8:	00c02784 	movi	r3,158
  203cfc:	1887c83a 	sub	r3,r3,r2
  203d00:	01002584 	movi	r4,150
  203d04:	20c00f16 	blt	r4,r3,203d44 <__floatunsisf+0x64>
  203d08:	20c9c83a 	sub	r4,r4,r3
  203d0c:	8108983a 	sll	r4,r16,r4
  203d10:	00802034 	movhi	r2,128
  203d14:	10bfffc4 	addi	r2,r2,-1
  203d18:	2088703a 	and	r4,r4,r2
  203d1c:	18803fcc 	andi	r2,r3,255
  203d20:	100695fa 	slli	r3,r2,23
  203d24:	00802034 	movhi	r2,128
  203d28:	10bfffc4 	addi	r2,r2,-1
  203d2c:	2084703a 	and	r2,r4,r2
  203d30:	10c4b03a 	or	r2,r2,r3
  203d34:	dfc00117 	ldw	ra,4(sp)
  203d38:	dc000017 	ldw	r16,0(sp)
  203d3c:	dec00204 	addi	sp,sp,8
  203d40:	f800283a 	ret
  203d44:	01002644 	movi	r4,153
  203d48:	20c01816 	blt	r4,r3,203dac <__floatunsisf+0xcc>
  203d4c:	20c9c83a 	sub	r4,r4,r3
  203d50:	8108983a 	sll	r4,r16,r4
  203d54:	017f0034 	movhi	r5,64512
  203d58:	297fffc4 	addi	r5,r5,-1
  203d5c:	218001cc 	andi	r6,r4,7
  203d60:	214a703a 	and	r5,r4,r5
  203d64:	30000426 	beq	r6,zero,203d78 <__floatunsisf+0x98>
  203d68:	210003cc 	andi	r4,r4,15
  203d6c:	01800104 	movi	r6,4
  203d70:	21800126 	beq	r4,r6,203d78 <__floatunsisf+0x98>
  203d74:	298b883a 	add	r5,r5,r6
  203d78:	2901002c 	andhi	r4,r5,1024
  203d7c:	20000526 	beq	r4,zero,203d94 <__floatunsisf+0xb4>
  203d80:	00c027c4 	movi	r3,159
  203d84:	1887c83a 	sub	r3,r3,r2
  203d88:	00bf0034 	movhi	r2,64512
  203d8c:	10bfffc4 	addi	r2,r2,-1
  203d90:	288a703a 	and	r5,r5,r2
  203d94:	280891ba 	slli	r4,r5,6
  203d98:	2008d27a 	srli	r4,r4,9
  203d9c:	003fdf06 	br	203d1c <_gp+0xffdf2108>
  203da0:	0007883a 	mov	r3,zero
  203da4:	0009883a 	mov	r4,zero
  203da8:	003fdc06 	br	203d1c <_gp+0xffdf2108>
  203dac:	01402e44 	movi	r5,185
  203db0:	28cbc83a 	sub	r5,r5,r3
  203db4:	01000144 	movi	r4,5
  203db8:	2089c83a 	sub	r4,r4,r2
  203dbc:	814a983a 	sll	r5,r16,r5
  203dc0:	8108d83a 	srl	r4,r16,r4
  203dc4:	2820c03a 	cmpne	r16,r5,zero
  203dc8:	2408b03a 	or	r4,r4,r16
  203dcc:	003fe106 	br	203d54 <_gp+0xffdf2140>

00203dd0 <__clzsi2>:
  203dd0:	00bfffd4 	movui	r2,65535
  203dd4:	11000536 	bltu	r2,r4,203dec <__clzsi2+0x1c>
  203dd8:	00803fc4 	movi	r2,255
  203ddc:	11000f36 	bltu	r2,r4,203e1c <__clzsi2+0x4c>
  203de0:	00800804 	movi	r2,32
  203de4:	0007883a 	mov	r3,zero
  203de8:	00000506 	br	203e00 <__clzsi2+0x30>
  203dec:	00804034 	movhi	r2,256
  203df0:	10bfffc4 	addi	r2,r2,-1
  203df4:	11000c2e 	bgeu	r2,r4,203e28 <__clzsi2+0x58>
  203df8:	00800204 	movi	r2,8
  203dfc:	00c00604 	movi	r3,24
  203e00:	20c8d83a 	srl	r4,r4,r3
  203e04:	00c00874 	movhi	r3,33
  203e08:	18dab904 	addi	r3,r3,27364
  203e0c:	1909883a 	add	r4,r3,r4
  203e10:	20c00003 	ldbu	r3,0(r4)
  203e14:	10c5c83a 	sub	r2,r2,r3
  203e18:	f800283a 	ret
  203e1c:	00800604 	movi	r2,24
  203e20:	00c00204 	movi	r3,8
  203e24:	003ff606 	br	203e00 <_gp+0xffdf21ec>
  203e28:	00800404 	movi	r2,16
  203e2c:	1007883a 	mov	r3,r2
  203e30:	003ff306 	br	203e00 <_gp+0xffdf21ec>

00203e34 <_printf_r>:
  203e34:	defffd04 	addi	sp,sp,-12
  203e38:	2805883a 	mov	r2,r5
  203e3c:	dfc00015 	stw	ra,0(sp)
  203e40:	d9800115 	stw	r6,4(sp)
  203e44:	d9c00215 	stw	r7,8(sp)
  203e48:	21400217 	ldw	r5,8(r4)
  203e4c:	d9c00104 	addi	r7,sp,4
  203e50:	100d883a 	mov	r6,r2
  203e54:	020402c0 	call	20402c <___vfprintf_internal_r>
  203e58:	dfc00017 	ldw	ra,0(sp)
  203e5c:	dec00304 	addi	sp,sp,12
  203e60:	f800283a 	ret

00203e64 <printf>:
  203e64:	defffc04 	addi	sp,sp,-16
  203e68:	dfc00015 	stw	ra,0(sp)
  203e6c:	d9400115 	stw	r5,4(sp)
  203e70:	d9800215 	stw	r6,8(sp)
  203e74:	d9c00315 	stw	r7,12(sp)
  203e78:	00801074 	movhi	r2,65
  203e7c:	10a70a04 	addi	r2,r2,-25560
  203e80:	10800017 	ldw	r2,0(r2)
  203e84:	200b883a 	mov	r5,r4
  203e88:	d9800104 	addi	r6,sp,4
  203e8c:	11000217 	ldw	r4,8(r2)
  203e90:	02063080 	call	206308 <__vfprintf_internal>
  203e94:	dfc00017 	ldw	ra,0(sp)
  203e98:	dec00404 	addi	sp,sp,16
  203e9c:	f800283a 	ret

00203ea0 <_putchar_r>:
  203ea0:	21800217 	ldw	r6,8(r4)
  203ea4:	020aecc1 	jmpi	20aecc <_putc_r>

00203ea8 <putchar>:
  203ea8:	00801074 	movhi	r2,65
  203eac:	10a70a04 	addi	r2,r2,-25560
  203eb0:	200b883a 	mov	r5,r4
  203eb4:	11000017 	ldw	r4,0(r2)
  203eb8:	21800217 	ldw	r6,8(r4)
  203ebc:	020aecc1 	jmpi	20aecc <_putc_r>

00203ec0 <_puts_r>:
  203ec0:	defff604 	addi	sp,sp,-40
  203ec4:	dc000715 	stw	r16,28(sp)
  203ec8:	2021883a 	mov	r16,r4
  203ecc:	2809883a 	mov	r4,r5
  203ed0:	dc400815 	stw	r17,32(sp)
  203ed4:	dfc00915 	stw	ra,36(sp)
  203ed8:	2823883a 	mov	r17,r5
  203edc:	0203f940 	call	203f94 <strlen>
  203ee0:	10c00044 	addi	r3,r2,1
  203ee4:	d8800115 	stw	r2,4(sp)
  203ee8:	00800874 	movhi	r2,33
  203eec:	109af904 	addi	r2,r2,27620
  203ef0:	d8800215 	stw	r2,8(sp)
  203ef4:	00800044 	movi	r2,1
  203ef8:	d8800315 	stw	r2,12(sp)
  203efc:	00800084 	movi	r2,2
  203f00:	dc400015 	stw	r17,0(sp)
  203f04:	d8c00615 	stw	r3,24(sp)
  203f08:	dec00415 	stw	sp,16(sp)
  203f0c:	d8800515 	stw	r2,20(sp)
  203f10:	80000226 	beq	r16,zero,203f1c <_puts_r+0x5c>
  203f14:	80800e17 	ldw	r2,56(r16)
  203f18:	10001426 	beq	r2,zero,203f6c <_puts_r+0xac>
  203f1c:	81400217 	ldw	r5,8(r16)
  203f20:	2880030b 	ldhu	r2,12(r5)
  203f24:	10c8000c 	andi	r3,r2,8192
  203f28:	1800061e 	bne	r3,zero,203f44 <_puts_r+0x84>
  203f2c:	29001917 	ldw	r4,100(r5)
  203f30:	00f7ffc4 	movi	r3,-8193
  203f34:	10880014 	ori	r2,r2,8192
  203f38:	20c6703a 	and	r3,r4,r3
  203f3c:	2880030d 	sth	r2,12(r5)
  203f40:	28c01915 	stw	r3,100(r5)
  203f44:	d9800404 	addi	r6,sp,16
  203f48:	8009883a 	mov	r4,r16
  203f4c:	02088700 	call	208870 <__sfvwrite_r>
  203f50:	1000091e 	bne	r2,zero,203f78 <_puts_r+0xb8>
  203f54:	00800284 	movi	r2,10
  203f58:	dfc00917 	ldw	ra,36(sp)
  203f5c:	dc400817 	ldw	r17,32(sp)
  203f60:	dc000717 	ldw	r16,28(sp)
  203f64:	dec00a04 	addi	sp,sp,40
  203f68:	f800283a 	ret
  203f6c:	8009883a 	mov	r4,r16
  203f70:	02083ec0 	call	2083ec <__sinit>
  203f74:	003fe906 	br	203f1c <_gp+0xffdf2308>
  203f78:	00bfffc4 	movi	r2,-1
  203f7c:	003ff606 	br	203f58 <_gp+0xffdf2344>

00203f80 <puts>:
  203f80:	00801074 	movhi	r2,65
  203f84:	10a70a04 	addi	r2,r2,-25560
  203f88:	200b883a 	mov	r5,r4
  203f8c:	11000017 	ldw	r4,0(r2)
  203f90:	0203ec01 	jmpi	203ec0 <_puts_r>

00203f94 <strlen>:
  203f94:	208000cc 	andi	r2,r4,3
  203f98:	10002026 	beq	r2,zero,20401c <strlen+0x88>
  203f9c:	20800007 	ldb	r2,0(r4)
  203fa0:	10002026 	beq	r2,zero,204024 <strlen+0x90>
  203fa4:	2005883a 	mov	r2,r4
  203fa8:	00000206 	br	203fb4 <strlen+0x20>
  203fac:	10c00007 	ldb	r3,0(r2)
  203fb0:	18001826 	beq	r3,zero,204014 <strlen+0x80>
  203fb4:	10800044 	addi	r2,r2,1
  203fb8:	10c000cc 	andi	r3,r2,3
  203fbc:	183ffb1e 	bne	r3,zero,203fac <_gp+0xffdf2398>
  203fc0:	10c00017 	ldw	r3,0(r2)
  203fc4:	01ffbff4 	movhi	r7,65279
  203fc8:	39ffbfc4 	addi	r7,r7,-257
  203fcc:	00ca303a 	nor	r5,zero,r3
  203fd0:	01a02074 	movhi	r6,32897
  203fd4:	19c7883a 	add	r3,r3,r7
  203fd8:	31a02004 	addi	r6,r6,-32640
  203fdc:	1946703a 	and	r3,r3,r5
  203fe0:	1986703a 	and	r3,r3,r6
  203fe4:	1800091e 	bne	r3,zero,20400c <strlen+0x78>
  203fe8:	10800104 	addi	r2,r2,4
  203fec:	10c00017 	ldw	r3,0(r2)
  203ff0:	19cb883a 	add	r5,r3,r7
  203ff4:	00c6303a 	nor	r3,zero,r3
  203ff8:	28c6703a 	and	r3,r5,r3
  203ffc:	1986703a 	and	r3,r3,r6
  204000:	183ff926 	beq	r3,zero,203fe8 <_gp+0xffdf23d4>
  204004:	00000106 	br	20400c <strlen+0x78>
  204008:	10800044 	addi	r2,r2,1
  20400c:	10c00007 	ldb	r3,0(r2)
  204010:	183ffd1e 	bne	r3,zero,204008 <_gp+0xffdf23f4>
  204014:	1105c83a 	sub	r2,r2,r4
  204018:	f800283a 	ret
  20401c:	2005883a 	mov	r2,r4
  204020:	003fe706 	br	203fc0 <_gp+0xffdf23ac>
  204024:	0005883a 	mov	r2,zero
  204028:	f800283a 	ret

0020402c <___vfprintf_internal_r>:
  20402c:	deffb804 	addi	sp,sp,-288
  204030:	dfc04715 	stw	ra,284(sp)
  204034:	ddc04515 	stw	r23,276(sp)
  204038:	dd404315 	stw	r21,268(sp)
  20403c:	d9002d15 	stw	r4,180(sp)
  204040:	282f883a 	mov	r23,r5
  204044:	302b883a 	mov	r21,r6
  204048:	d9c02e15 	stw	r7,184(sp)
  20404c:	df004615 	stw	fp,280(sp)
  204050:	dd804415 	stw	r22,272(sp)
  204054:	dd004215 	stw	r20,264(sp)
  204058:	dcc04115 	stw	r19,260(sp)
  20405c:	dc804015 	stw	r18,256(sp)
  204060:	dc403f15 	stw	r17,252(sp)
  204064:	dc003e15 	stw	r16,248(sp)
  204068:	0208f6c0 	call	208f6c <_localeconv_r>
  20406c:	10800017 	ldw	r2,0(r2)
  204070:	1009883a 	mov	r4,r2
  204074:	d8803415 	stw	r2,208(sp)
  204078:	0203f940 	call	203f94 <strlen>
  20407c:	d8803715 	stw	r2,220(sp)
  204080:	d8802d17 	ldw	r2,180(sp)
  204084:	10000226 	beq	r2,zero,204090 <___vfprintf_internal_r+0x64>
  204088:	10800e17 	ldw	r2,56(r2)
  20408c:	1000fb26 	beq	r2,zero,20447c <___vfprintf_internal_r+0x450>
  204090:	b880030b 	ldhu	r2,12(r23)
  204094:	10c8000c 	andi	r3,r2,8192
  204098:	1800061e 	bne	r3,zero,2040b4 <___vfprintf_internal_r+0x88>
  20409c:	b9001917 	ldw	r4,100(r23)
  2040a0:	00f7ffc4 	movi	r3,-8193
  2040a4:	10880014 	ori	r2,r2,8192
  2040a8:	20c6703a 	and	r3,r4,r3
  2040ac:	b880030d 	sth	r2,12(r23)
  2040b0:	b8c01915 	stw	r3,100(r23)
  2040b4:	10c0020c 	andi	r3,r2,8
  2040b8:	1800c326 	beq	r3,zero,2043c8 <___vfprintf_internal_r+0x39c>
  2040bc:	b8c00417 	ldw	r3,16(r23)
  2040c0:	1800c126 	beq	r3,zero,2043c8 <___vfprintf_internal_r+0x39c>
  2040c4:	1080068c 	andi	r2,r2,26
  2040c8:	00c00284 	movi	r3,10
  2040cc:	10c0c626 	beq	r2,r3,2043e8 <___vfprintf_internal_r+0x3bc>
  2040d0:	d8c00404 	addi	r3,sp,16
  2040d4:	05000874 	movhi	r20,33
  2040d8:	d9001e04 	addi	r4,sp,120
  2040dc:	a51b0a84 	addi	r20,r20,27690
  2040e0:	d8c01e15 	stw	r3,120(sp)
  2040e4:	d8002015 	stw	zero,128(sp)
  2040e8:	d8001f15 	stw	zero,124(sp)
  2040ec:	d8003315 	stw	zero,204(sp)
  2040f0:	d8003615 	stw	zero,216(sp)
  2040f4:	d8003815 	stw	zero,224(sp)
  2040f8:	1811883a 	mov	r8,r3
  2040fc:	d8003915 	stw	zero,228(sp)
  204100:	d8003a15 	stw	zero,232(sp)
  204104:	d8002f15 	stw	zero,188(sp)
  204108:	d9002815 	stw	r4,160(sp)
  20410c:	a8800007 	ldb	r2,0(r21)
  204110:	10028b26 	beq	r2,zero,204b40 <___vfprintf_internal_r+0xb14>
  204114:	00c00944 	movi	r3,37
  204118:	a823883a 	mov	r17,r21
  20411c:	10c0021e 	bne	r2,r3,204128 <___vfprintf_internal_r+0xfc>
  204120:	00001406 	br	204174 <___vfprintf_internal_r+0x148>
  204124:	10c00326 	beq	r2,r3,204134 <___vfprintf_internal_r+0x108>
  204128:	8c400044 	addi	r17,r17,1
  20412c:	88800007 	ldb	r2,0(r17)
  204130:	103ffc1e 	bne	r2,zero,204124 <_gp+0xffdf2510>
  204134:	8d61c83a 	sub	r16,r17,r21
  204138:	80000e26 	beq	r16,zero,204174 <___vfprintf_internal_r+0x148>
  20413c:	d8c02017 	ldw	r3,128(sp)
  204140:	d8801f17 	ldw	r2,124(sp)
  204144:	45400015 	stw	r21,0(r8)
  204148:	1c07883a 	add	r3,r3,r16
  20414c:	10800044 	addi	r2,r2,1
  204150:	d8c02015 	stw	r3,128(sp)
  204154:	44000115 	stw	r16,4(r8)
  204158:	d8801f15 	stw	r2,124(sp)
  20415c:	00c001c4 	movi	r3,7
  204160:	1880a916 	blt	r3,r2,204408 <___vfprintf_internal_r+0x3dc>
  204164:	42000204 	addi	r8,r8,8
  204168:	d9402f17 	ldw	r5,188(sp)
  20416c:	2c0b883a 	add	r5,r5,r16
  204170:	d9402f15 	stw	r5,188(sp)
  204174:	88800007 	ldb	r2,0(r17)
  204178:	1000aa26 	beq	r2,zero,204424 <___vfprintf_internal_r+0x3f8>
  20417c:	8d400044 	addi	r21,r17,1
  204180:	8c400047 	ldb	r17,1(r17)
  204184:	0021883a 	mov	r16,zero
  204188:	00bfffc4 	movi	r2,-1
  20418c:	0025883a 	mov	r18,zero
  204190:	dc002905 	stb	r16,164(sp)
  204194:	d8002785 	stb	zero,158(sp)
  204198:	d8002b05 	stb	zero,172(sp)
  20419c:	d8802a15 	stw	r2,168(sp)
  2041a0:	d8003115 	stw	zero,196(sp)
  2041a4:	04c01604 	movi	r19,88
  2041a8:	05800244 	movi	r22,9
  2041ac:	9021883a 	mov	r16,r18
  2041b0:	4039883a 	mov	fp,r8
  2041b4:	ad400044 	addi	r21,r21,1
  2041b8:	88bff804 	addi	r2,r17,-32
  2041bc:	98833236 	bltu	r19,r2,204e88 <___vfprintf_internal_r+0xe5c>
  2041c0:	100490ba 	slli	r2,r2,2
  2041c4:	00c00834 	movhi	r3,32
  2041c8:	18d07604 	addi	r3,r3,16856
  2041cc:	10c5883a 	add	r2,r2,r3
  2041d0:	10800017 	ldw	r2,0(r2)
  2041d4:	1000683a 	jmp	r2
  2041d8:	00204d80 	call	204d8 <__alt_mem_onchip_flash_0_data-0x1dfb28>
  2041dc:	00204e88 	cmpgei	zero,zero,-32454
  2041e0:	00204e88 	cmpgei	zero,zero,-32454
  2041e4:	00204da0 	cmpeqi	zero,zero,-32458
  2041e8:	00204e88 	cmpgei	zero,zero,-32454
  2041ec:	00204e88 	cmpgei	zero,zero,-32454
  2041f0:	00204e88 	cmpgei	zero,zero,-32454
  2041f4:	00204e88 	cmpgei	zero,zero,-32454
  2041f8:	00204e88 	cmpgei	zero,zero,-32454
  2041fc:	00204e88 	cmpgei	zero,zero,-32454
  204200:	00204488 	cmpgei	zero,zero,-32494
  204204:	00204c90 	cmplti	zero,zero,-32462
  204208:	00204e88 	cmpgei	zero,zero,-32454
  20420c:	0020434c 	andi	zero,zero,33037
  204210:	002044ac 	andhi	zero,zero,33042
  204214:	00204e88 	cmpgei	zero,zero,-32454
  204218:	002044fc 	xorhi	zero,zero,33043
  20421c:	00204508 	cmpgei	zero,zero,-32492
  204220:	00204508 	cmpgei	zero,zero,-32492
  204224:	00204508 	cmpgei	zero,zero,-32492
  204228:	00204508 	cmpgei	zero,zero,-32492
  20422c:	00204508 	cmpgei	zero,zero,-32492
  204230:	00204508 	cmpgei	zero,zero,-32492
  204234:	00204508 	cmpgei	zero,zero,-32492
  204238:	00204508 	cmpgei	zero,zero,-32492
  20423c:	00204508 	cmpgei	zero,zero,-32492
  204240:	00204e88 	cmpgei	zero,zero,-32454
  204244:	00204e88 	cmpgei	zero,zero,-32454
  204248:	00204e88 	cmpgei	zero,zero,-32454
  20424c:	00204e88 	cmpgei	zero,zero,-32454
  204250:	00204e88 	cmpgei	zero,zero,-32454
  204254:	00204e88 	cmpgei	zero,zero,-32454
  204258:	00204e88 	cmpgei	zero,zero,-32454
  20425c:	00204e88 	cmpgei	zero,zero,-32454
  204260:	00204e88 	cmpgei	zero,zero,-32454
  204264:	00204e88 	cmpgei	zero,zero,-32454
  204268:	00204544 	movi	zero,-32491
  20426c:	0020460c 	andi	zero,zero,33048
  204270:	00204e88 	cmpgei	zero,zero,-32454
  204274:	0020460c 	andi	zero,zero,33048
  204278:	00204e88 	cmpgei	zero,zero,-32454
  20427c:	00204e88 	cmpgei	zero,zero,-32454
  204280:	00204e88 	cmpgei	zero,zero,-32454
  204284:	00204e88 	cmpgei	zero,zero,-32454
  204288:	002046b8 	rdprs	zero,zero,-32486
  20428c:	00204e88 	cmpgei	zero,zero,-32454
  204290:	00204e88 	cmpgei	zero,zero,-32454
  204294:	002046c4 	movi	zero,-32485
  204298:	00204e88 	cmpgei	zero,zero,-32454
  20429c:	00204e88 	cmpgei	zero,zero,-32454
  2042a0:	00204e88 	cmpgei	zero,zero,-32454
  2042a4:	00204e88 	cmpgei	zero,zero,-32454
  2042a8:	00204e88 	cmpgei	zero,zero,-32454
  2042ac:	00204b48 	cmpgei	zero,zero,-32467
  2042b0:	00204e88 	cmpgei	zero,zero,-32454
  2042b4:	00204e88 	cmpgei	zero,zero,-32454
  2042b8:	00204bb4 	movhi	zero,33070
  2042bc:	00204e88 	cmpgei	zero,zero,-32454
  2042c0:	00204e88 	cmpgei	zero,zero,-32454
  2042c4:	00204e88 	cmpgei	zero,zero,-32454
  2042c8:	00204e88 	cmpgei	zero,zero,-32454
  2042cc:	00204e88 	cmpgei	zero,zero,-32454
  2042d0:	00204e88 	cmpgei	zero,zero,-32454
  2042d4:	00204e88 	cmpgei	zero,zero,-32454
  2042d8:	00204e88 	cmpgei	zero,zero,-32454
  2042dc:	00204e88 	cmpgei	zero,zero,-32454
  2042e0:	00204e88 	cmpgei	zero,zero,-32454
  2042e4:	00204e2c 	andhi	zero,zero,33080
  2042e8:	00204dac 	andhi	zero,zero,33078
  2042ec:	0020460c 	andi	zero,zero,33048
  2042f0:	0020460c 	andi	zero,zero,33048
  2042f4:	0020460c 	andi	zero,zero,33048
  2042f8:	00204dcc 	andi	zero,zero,33079
  2042fc:	00204dac 	andhi	zero,zero,33078
  204300:	00204e88 	cmpgei	zero,zero,-32454
  204304:	00204e88 	cmpgei	zero,zero,-32454
  204308:	00204dd8 	cmpnei	zero,zero,-32457
  20430c:	00204e88 	cmpgei	zero,zero,-32454
  204310:	00204dec 	andhi	zero,zero,33079
  204314:	00204c70 	cmpltui	zero,zero,33073
  204318:	00204358 	cmpnei	zero,zero,-32499
  20431c:	00204ca8 	cmpgeui	zero,zero,33074
  204320:	00204e88 	cmpgei	zero,zero,-32454
  204324:	00204cb4 	movhi	zero,33074
  204328:	00204e88 	cmpgei	zero,zero,-32454
  20432c:	00204d18 	cmpnei	zero,zero,-32460
  204330:	00204e88 	cmpgei	zero,zero,-32454
  204334:	00204e88 	cmpgei	zero,zero,-32454
  204338:	00204d38 	rdprs	zero,zero,-32460
  20433c:	d8c03117 	ldw	r3,196(sp)
  204340:	d8802e15 	stw	r2,184(sp)
  204344:	00c7c83a 	sub	r3,zero,r3
  204348:	d8c03115 	stw	r3,196(sp)
  20434c:	84000114 	ori	r16,r16,4
  204350:	ac400007 	ldb	r17,0(r21)
  204354:	003f9706 	br	2041b4 <_gp+0xffdf25a0>
  204358:	00800c04 	movi	r2,48
  20435c:	d8802705 	stb	r2,156(sp)
  204360:	00801e04 	movi	r2,120
  204364:	d8802745 	stb	r2,157(sp)
  204368:	d9002a17 	ldw	r4,168(sp)
  20436c:	d8802e17 	ldw	r2,184(sp)
  204370:	d8002785 	stb	zero,158(sp)
  204374:	e011883a 	mov	r8,fp
  204378:	10c00104 	addi	r3,r2,4
  20437c:	14c00017 	ldw	r19,0(r2)
  204380:	002d883a 	mov	r22,zero
  204384:	80800094 	ori	r2,r16,2
  204388:	2002ca16 	blt	r4,zero,204eb4 <___vfprintf_internal_r+0xe88>
  20438c:	00bfdfc4 	movi	r2,-129
  204390:	80a4703a 	and	r18,r16,r2
  204394:	d8c02e15 	stw	r3,184(sp)
  204398:	94800094 	ori	r18,r18,2
  20439c:	9802b41e 	bne	r19,zero,204e70 <___vfprintf_internal_r+0xe44>
  2043a0:	01400874 	movhi	r5,33
  2043a4:	295b0304 	addi	r5,r5,27660
  2043a8:	d9403915 	stw	r5,228(sp)
  2043ac:	04401e04 	movi	r17,120
  2043b0:	d8802a17 	ldw	r2,168(sp)
  2043b4:	0039883a 	mov	fp,zero
  2043b8:	1001fa26 	beq	r2,zero,204ba4 <___vfprintf_internal_r+0xb78>
  2043bc:	0027883a 	mov	r19,zero
  2043c0:	002d883a 	mov	r22,zero
  2043c4:	00021906 	br	204c2c <___vfprintf_internal_r+0xc00>
  2043c8:	d9002d17 	ldw	r4,180(sp)
  2043cc:	b80b883a 	mov	r5,r23
  2043d0:	02063e00 	call	2063e0 <__swsetup_r>
  2043d4:	1005dc1e 	bne	r2,zero,205b48 <___vfprintf_internal_r+0x1b1c>
  2043d8:	b880030b 	ldhu	r2,12(r23)
  2043dc:	00c00284 	movi	r3,10
  2043e0:	1080068c 	andi	r2,r2,26
  2043e4:	10ff3a1e 	bne	r2,r3,2040d0 <_gp+0xffdf24bc>
  2043e8:	b880038f 	ldh	r2,14(r23)
  2043ec:	103f3816 	blt	r2,zero,2040d0 <_gp+0xffdf24bc>
  2043f0:	d9c02e17 	ldw	r7,184(sp)
  2043f4:	d9002d17 	ldw	r4,180(sp)
  2043f8:	a80d883a 	mov	r6,r21
  2043fc:	b80b883a 	mov	r5,r23
  204400:	02063240 	call	206324 <__sbprintf>
  204404:	00001106 	br	20444c <___vfprintf_internal_r+0x420>
  204408:	d9002d17 	ldw	r4,180(sp)
  20440c:	d9801e04 	addi	r6,sp,120
  204410:	b80b883a 	mov	r5,r23
  204414:	020b9740 	call	20b974 <__sprint_r>
  204418:	1000081e 	bne	r2,zero,20443c <___vfprintf_internal_r+0x410>
  20441c:	da000404 	addi	r8,sp,16
  204420:	003f5106 	br	204168 <_gp+0xffdf2554>
  204424:	d8802017 	ldw	r2,128(sp)
  204428:	10000426 	beq	r2,zero,20443c <___vfprintf_internal_r+0x410>
  20442c:	d9002d17 	ldw	r4,180(sp)
  204430:	d9801e04 	addi	r6,sp,120
  204434:	b80b883a 	mov	r5,r23
  204438:	020b9740 	call	20b974 <__sprint_r>
  20443c:	b880030b 	ldhu	r2,12(r23)
  204440:	1080100c 	andi	r2,r2,64
  204444:	1005c01e 	bne	r2,zero,205b48 <___vfprintf_internal_r+0x1b1c>
  204448:	d8802f17 	ldw	r2,188(sp)
  20444c:	dfc04717 	ldw	ra,284(sp)
  204450:	df004617 	ldw	fp,280(sp)
  204454:	ddc04517 	ldw	r23,276(sp)
  204458:	dd804417 	ldw	r22,272(sp)
  20445c:	dd404317 	ldw	r21,268(sp)
  204460:	dd004217 	ldw	r20,264(sp)
  204464:	dcc04117 	ldw	r19,260(sp)
  204468:	dc804017 	ldw	r18,256(sp)
  20446c:	dc403f17 	ldw	r17,252(sp)
  204470:	dc003e17 	ldw	r16,248(sp)
  204474:	dec04804 	addi	sp,sp,288
  204478:	f800283a 	ret
  20447c:	d9002d17 	ldw	r4,180(sp)
  204480:	02083ec0 	call	2083ec <__sinit>
  204484:	003f0206 	br	204090 <_gp+0xffdf247c>
  204488:	d9002e17 	ldw	r4,184(sp)
  20448c:	d9402e17 	ldw	r5,184(sp)
  204490:	21000017 	ldw	r4,0(r4)
  204494:	28800104 	addi	r2,r5,4
  204498:	d9003115 	stw	r4,196(sp)
  20449c:	203fa716 	blt	r4,zero,20433c <_gp+0xffdf2728>
  2044a0:	d8802e15 	stw	r2,184(sp)
  2044a4:	ac400007 	ldb	r17,0(r21)
  2044a8:	003f4206 	br	2041b4 <_gp+0xffdf25a0>
  2044ac:	ac400007 	ldb	r17,0(r21)
  2044b0:	01000a84 	movi	r4,42
  2044b4:	a8c00044 	addi	r3,r21,1
  2044b8:	89075826 	beq	r17,r4,20621c <___vfprintf_internal_r+0x21f0>
  2044bc:	8cbff404 	addi	r18,r17,-48
  2044c0:	b486ae36 	bltu	r22,r18,205f7c <___vfprintf_internal_r+0x1f50>
  2044c4:	0009883a 	mov	r4,zero
  2044c8:	1823883a 	mov	r17,r3
  2044cc:	01400284 	movi	r5,10
  2044d0:	02032780 	call	203278 <__mulsi3>
  2044d4:	88c00007 	ldb	r3,0(r17)
  2044d8:	1489883a 	add	r4,r2,r18
  2044dc:	8d400044 	addi	r21,r17,1
  2044e0:	1cbff404 	addi	r18,r3,-48
  2044e4:	a823883a 	mov	r17,r21
  2044e8:	b4bff82e 	bgeu	r22,r18,2044cc <_gp+0xffdf28b8>
  2044ec:	1823883a 	mov	r17,r3
  2044f0:	2005f616 	blt	r4,zero,205ccc <___vfprintf_internal_r+0x1ca0>
  2044f4:	d9002a15 	stw	r4,168(sp)
  2044f8:	003f2f06 	br	2041b8 <_gp+0xffdf25a4>
  2044fc:	84002014 	ori	r16,r16,128
  204500:	ac400007 	ldb	r17,0(r21)
  204504:	003f2b06 	br	2041b4 <_gp+0xffdf25a0>
  204508:	8cbff404 	addi	r18,r17,-48
  20450c:	d8003115 	stw	zero,196(sp)
  204510:	0009883a 	mov	r4,zero
  204514:	a823883a 	mov	r17,r21
  204518:	01400284 	movi	r5,10
  20451c:	02032780 	call	203278 <__mulsi3>
  204520:	88c00007 	ldb	r3,0(r17)
  204524:	9089883a 	add	r4,r18,r2
  204528:	ad400044 	addi	r21,r21,1
  20452c:	1cbff404 	addi	r18,r3,-48
  204530:	a823883a 	mov	r17,r21
  204534:	b4bff82e 	bgeu	r22,r18,204518 <_gp+0xffdf2904>
  204538:	1823883a 	mov	r17,r3
  20453c:	d9003115 	stw	r4,196(sp)
  204540:	003f1d06 	br	2041b8 <_gp+0xffdf25a4>
  204544:	8025883a 	mov	r18,r16
  204548:	dc002903 	ldbu	r16,164(sp)
  20454c:	e011883a 	mov	r8,fp
  204550:	84003fcc 	andi	r16,r16,255
  204554:	8007531e 	bne	r16,zero,2062a4 <___vfprintf_internal_r+0x2278>
  204558:	94800414 	ori	r18,r18,16
  20455c:	9080080c 	andi	r2,r18,32
  204560:	1003a326 	beq	r2,zero,2053f0 <___vfprintf_internal_r+0x13c4>
  204564:	d9002e17 	ldw	r4,184(sp)
  204568:	20800117 	ldw	r2,4(r4)
  20456c:	24c00017 	ldw	r19,0(r4)
  204570:	21000204 	addi	r4,r4,8
  204574:	d9002e15 	stw	r4,184(sp)
  204578:	102d883a 	mov	r22,r2
  20457c:	10047316 	blt	r2,zero,20574c <___vfprintf_internal_r+0x1720>
  204580:	d9002a17 	ldw	r4,168(sp)
  204584:	df002783 	ldbu	fp,158(sp)
  204588:	2003e416 	blt	r4,zero,20551c <___vfprintf_internal_r+0x14f0>
  20458c:	00ffdfc4 	movi	r3,-129
  204590:	9d84b03a 	or	r2,r19,r22
  204594:	90e4703a 	and	r18,r18,r3
  204598:	10018026 	beq	r2,zero,204b9c <___vfprintf_internal_r+0xb70>
  20459c:	b003ab26 	beq	r22,zero,20544c <___vfprintf_internal_r+0x1420>
  2045a0:	dc402915 	stw	r17,164(sp)
  2045a4:	dc001e04 	addi	r16,sp,120
  2045a8:	b023883a 	mov	r17,r22
  2045ac:	402d883a 	mov	r22,r8
  2045b0:	9809883a 	mov	r4,r19
  2045b4:	880b883a 	mov	r5,r17
  2045b8:	01800284 	movi	r6,10
  2045bc:	000f883a 	mov	r7,zero
  2045c0:	020deb80 	call	20deb8 <__umoddi3>
  2045c4:	10800c04 	addi	r2,r2,48
  2045c8:	843fffc4 	addi	r16,r16,-1
  2045cc:	9809883a 	mov	r4,r19
  2045d0:	880b883a 	mov	r5,r17
  2045d4:	80800005 	stb	r2,0(r16)
  2045d8:	01800284 	movi	r6,10
  2045dc:	000f883a 	mov	r7,zero
  2045e0:	020d8bc0 	call	20d8bc <__udivdi3>
  2045e4:	1027883a 	mov	r19,r2
  2045e8:	10c4b03a 	or	r2,r2,r3
  2045ec:	1823883a 	mov	r17,r3
  2045f0:	103fef1e 	bne	r2,zero,2045b0 <_gp+0xffdf299c>
  2045f4:	d8c02817 	ldw	r3,160(sp)
  2045f8:	dc402917 	ldw	r17,164(sp)
  2045fc:	b011883a 	mov	r8,r22
  204600:	1c07c83a 	sub	r3,r3,r16
  204604:	d8c02b15 	stw	r3,172(sp)
  204608:	00005f06 	br	204788 <___vfprintf_internal_r+0x75c>
  20460c:	8025883a 	mov	r18,r16
  204610:	dc002903 	ldbu	r16,164(sp)
  204614:	e011883a 	mov	r8,fp
  204618:	84003fcc 	andi	r16,r16,255
  20461c:	80071e1e 	bne	r16,zero,206298 <___vfprintf_internal_r+0x226c>
  204620:	9080020c 	andi	r2,r18,8
  204624:	1004af26 	beq	r2,zero,2058e4 <___vfprintf_internal_r+0x18b8>
  204628:	d9002e17 	ldw	r4,184(sp)
  20462c:	d9402e17 	ldw	r5,184(sp)
  204630:	d8802e17 	ldw	r2,184(sp)
  204634:	21000017 	ldw	r4,0(r4)
  204638:	29400117 	ldw	r5,4(r5)
  20463c:	10800204 	addi	r2,r2,8
  204640:	d9003615 	stw	r4,216(sp)
  204644:	d9403815 	stw	r5,224(sp)
  204648:	d8802e15 	stw	r2,184(sp)
  20464c:	d9003617 	ldw	r4,216(sp)
  204650:	d9403817 	ldw	r5,224(sp)
  204654:	da003d15 	stw	r8,244(sp)
  204658:	04000044 	movi	r16,1
  20465c:	020b5980 	call	20b598 <__fpclassifyd>
  204660:	da003d17 	ldw	r8,244(sp)
  204664:	1404441e 	bne	r2,r16,205778 <___vfprintf_internal_r+0x174c>
  204668:	d9003617 	ldw	r4,216(sp)
  20466c:	d9403817 	ldw	r5,224(sp)
  204670:	000d883a 	mov	r6,zero
  204674:	000f883a 	mov	r7,zero
  204678:	020f85c0 	call	20f85c <__ledf2>
  20467c:	da003d17 	ldw	r8,244(sp)
  204680:	1005e316 	blt	r2,zero,205e10 <___vfprintf_internal_r+0x1de4>
  204684:	df002783 	ldbu	fp,158(sp)
  204688:	008011c4 	movi	r2,71
  20468c:	1445580e 	bge	r2,r17,205bf0 <___vfprintf_internal_r+0x1bc4>
  204690:	04000874 	movhi	r16,33
  204694:	841afb04 	addi	r16,r16,27628
  204698:	00c000c4 	movi	r3,3
  20469c:	00bfdfc4 	movi	r2,-129
  2046a0:	d8c02915 	stw	r3,164(sp)
  2046a4:	90a4703a 	and	r18,r18,r2
  2046a8:	d8c02b15 	stw	r3,172(sp)
  2046ac:	d8002a15 	stw	zero,168(sp)
  2046b0:	d8003215 	stw	zero,200(sp)
  2046b4:	00003a06 	br	2047a0 <___vfprintf_internal_r+0x774>
  2046b8:	84000214 	ori	r16,r16,8
  2046bc:	ac400007 	ldb	r17,0(r21)
  2046c0:	003ebc06 	br	2041b4 <_gp+0xffdf25a0>
  2046c4:	8025883a 	mov	r18,r16
  2046c8:	dc002903 	ldbu	r16,164(sp)
  2046cc:	e011883a 	mov	r8,fp
  2046d0:	84003fcc 	andi	r16,r16,255
  2046d4:	8007001e 	bne	r16,zero,2062d8 <___vfprintf_internal_r+0x22ac>
  2046d8:	94800414 	ori	r18,r18,16
  2046dc:	9080080c 	andi	r2,r18,32
  2046e0:	1002fa26 	beq	r2,zero,2052cc <___vfprintf_internal_r+0x12a0>
  2046e4:	d9002e17 	ldw	r4,184(sp)
  2046e8:	d9402a17 	ldw	r5,168(sp)
  2046ec:	d8002785 	stb	zero,158(sp)
  2046f0:	20800204 	addi	r2,r4,8
  2046f4:	24c00017 	ldw	r19,0(r4)
  2046f8:	25800117 	ldw	r22,4(r4)
  2046fc:	2804b116 	blt	r5,zero,2059c4 <___vfprintf_internal_r+0x1998>
  204700:	013fdfc4 	movi	r4,-129
  204704:	9d86b03a 	or	r3,r19,r22
  204708:	d8802e15 	stw	r2,184(sp)
  20470c:	9124703a 	and	r18,r18,r4
  204710:	1802fb1e 	bne	r3,zero,205300 <___vfprintf_internal_r+0x12d4>
  204714:	d8c02a17 	ldw	r3,168(sp)
  204718:	0039883a 	mov	fp,zero
  20471c:	1805e526 	beq	r3,zero,205eb4 <___vfprintf_internal_r+0x1e88>
  204720:	0027883a 	mov	r19,zero
  204724:	002d883a 	mov	r22,zero
  204728:	dc001e04 	addi	r16,sp,120
  20472c:	9806d0fa 	srli	r3,r19,3
  204730:	b008977a 	slli	r4,r22,29
  204734:	b02cd0fa 	srli	r22,r22,3
  204738:	9cc001cc 	andi	r19,r19,7
  20473c:	98800c04 	addi	r2,r19,48
  204740:	843fffc4 	addi	r16,r16,-1
  204744:	20e6b03a 	or	r19,r4,r3
  204748:	80800005 	stb	r2,0(r16)
  20474c:	9d86b03a 	or	r3,r19,r22
  204750:	183ff61e 	bne	r3,zero,20472c <_gp+0xffdf2b18>
  204754:	90c0004c 	andi	r3,r18,1
  204758:	18014126 	beq	r3,zero,204c60 <___vfprintf_internal_r+0xc34>
  20475c:	10803fcc 	andi	r2,r2,255
  204760:	1080201c 	xori	r2,r2,128
  204764:	10bfe004 	addi	r2,r2,-128
  204768:	00c00c04 	movi	r3,48
  20476c:	10c13c26 	beq	r2,r3,204c60 <___vfprintf_internal_r+0xc34>
  204770:	80ffffc5 	stb	r3,-1(r16)
  204774:	d8c02817 	ldw	r3,160(sp)
  204778:	80bfffc4 	addi	r2,r16,-1
  20477c:	1021883a 	mov	r16,r2
  204780:	1887c83a 	sub	r3,r3,r2
  204784:	d8c02b15 	stw	r3,172(sp)
  204788:	d8802b17 	ldw	r2,172(sp)
  20478c:	d9002a17 	ldw	r4,168(sp)
  204790:	1100010e 	bge	r2,r4,204798 <___vfprintf_internal_r+0x76c>
  204794:	2005883a 	mov	r2,r4
  204798:	d8802915 	stw	r2,164(sp)
  20479c:	d8003215 	stw	zero,200(sp)
  2047a0:	e7003fcc 	andi	fp,fp,255
  2047a4:	e700201c 	xori	fp,fp,128
  2047a8:	e73fe004 	addi	fp,fp,-128
  2047ac:	e0000326 	beq	fp,zero,2047bc <___vfprintf_internal_r+0x790>
  2047b0:	d8c02917 	ldw	r3,164(sp)
  2047b4:	18c00044 	addi	r3,r3,1
  2047b8:	d8c02915 	stw	r3,164(sp)
  2047bc:	90c0008c 	andi	r3,r18,2
  2047c0:	d8c02c15 	stw	r3,176(sp)
  2047c4:	18000326 	beq	r3,zero,2047d4 <___vfprintf_internal_r+0x7a8>
  2047c8:	d8c02917 	ldw	r3,164(sp)
  2047cc:	18c00084 	addi	r3,r3,2
  2047d0:	d8c02915 	stw	r3,164(sp)
  2047d4:	90c0210c 	andi	r3,r18,132
  2047d8:	d8c03015 	stw	r3,192(sp)
  2047dc:	1801c51e 	bne	r3,zero,204ef4 <___vfprintf_internal_r+0xec8>
  2047e0:	d9003117 	ldw	r4,196(sp)
  2047e4:	d8c02917 	ldw	r3,164(sp)
  2047e8:	20e7c83a 	sub	r19,r4,r3
  2047ec:	04c1c10e 	bge	zero,r19,204ef4 <___vfprintf_internal_r+0xec8>
  2047f0:	02400404 	movi	r9,16
  2047f4:	d8c02017 	ldw	r3,128(sp)
  2047f8:	d8801f17 	ldw	r2,124(sp)
  2047fc:	4cc52f0e 	bge	r9,r19,205cbc <___vfprintf_internal_r+0x1c90>
  204800:	01400874 	movhi	r5,33
  204804:	295b0e84 	addi	r5,r5,27706
  204808:	dc403b15 	stw	r17,236(sp)
  20480c:	d9403515 	stw	r5,212(sp)
  204810:	9823883a 	mov	r17,r19
  204814:	482d883a 	mov	r22,r9
  204818:	9027883a 	mov	r19,r18
  20481c:	070001c4 	movi	fp,7
  204820:	8025883a 	mov	r18,r16
  204824:	dc002d17 	ldw	r16,180(sp)
  204828:	00000306 	br	204838 <___vfprintf_internal_r+0x80c>
  20482c:	8c7ffc04 	addi	r17,r17,-16
  204830:	42000204 	addi	r8,r8,8
  204834:	b440130e 	bge	r22,r17,204884 <___vfprintf_internal_r+0x858>
  204838:	01000874 	movhi	r4,33
  20483c:	18c00404 	addi	r3,r3,16
  204840:	10800044 	addi	r2,r2,1
  204844:	211b0e84 	addi	r4,r4,27706
  204848:	41000015 	stw	r4,0(r8)
  20484c:	45800115 	stw	r22,4(r8)
  204850:	d8c02015 	stw	r3,128(sp)
  204854:	d8801f15 	stw	r2,124(sp)
  204858:	e0bff40e 	bge	fp,r2,20482c <_gp+0xffdf2c18>
  20485c:	d9801e04 	addi	r6,sp,120
  204860:	b80b883a 	mov	r5,r23
  204864:	8009883a 	mov	r4,r16
  204868:	020b9740 	call	20b974 <__sprint_r>
  20486c:	103ef31e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  204870:	8c7ffc04 	addi	r17,r17,-16
  204874:	d8c02017 	ldw	r3,128(sp)
  204878:	d8801f17 	ldw	r2,124(sp)
  20487c:	da000404 	addi	r8,sp,16
  204880:	b47fed16 	blt	r22,r17,204838 <_gp+0xffdf2c24>
  204884:	9021883a 	mov	r16,r18
  204888:	9825883a 	mov	r18,r19
  20488c:	8827883a 	mov	r19,r17
  204890:	dc403b17 	ldw	r17,236(sp)
  204894:	d9403517 	ldw	r5,212(sp)
  204898:	98c7883a 	add	r3,r19,r3
  20489c:	10800044 	addi	r2,r2,1
  2048a0:	41400015 	stw	r5,0(r8)
  2048a4:	44c00115 	stw	r19,4(r8)
  2048a8:	d8c02015 	stw	r3,128(sp)
  2048ac:	d8801f15 	stw	r2,124(sp)
  2048b0:	010001c4 	movi	r4,7
  2048b4:	2082c516 	blt	r4,r2,2053cc <___vfprintf_internal_r+0x13a0>
  2048b8:	df002787 	ldb	fp,158(sp)
  2048bc:	42000204 	addi	r8,r8,8
  2048c0:	e0000c26 	beq	fp,zero,2048f4 <___vfprintf_internal_r+0x8c8>
  2048c4:	d8801f17 	ldw	r2,124(sp)
  2048c8:	d9002784 	addi	r4,sp,158
  2048cc:	18c00044 	addi	r3,r3,1
  2048d0:	10800044 	addi	r2,r2,1
  2048d4:	41000015 	stw	r4,0(r8)
  2048d8:	01000044 	movi	r4,1
  2048dc:	41000115 	stw	r4,4(r8)
  2048e0:	d8c02015 	stw	r3,128(sp)
  2048e4:	d8801f15 	stw	r2,124(sp)
  2048e8:	010001c4 	movi	r4,7
  2048ec:	20825e16 	blt	r4,r2,205268 <___vfprintf_internal_r+0x123c>
  2048f0:	42000204 	addi	r8,r8,8
  2048f4:	d8802c17 	ldw	r2,176(sp)
  2048f8:	10000c26 	beq	r2,zero,20492c <___vfprintf_internal_r+0x900>
  2048fc:	d8801f17 	ldw	r2,124(sp)
  204900:	d9002704 	addi	r4,sp,156
  204904:	18c00084 	addi	r3,r3,2
  204908:	10800044 	addi	r2,r2,1
  20490c:	41000015 	stw	r4,0(r8)
  204910:	01000084 	movi	r4,2
  204914:	41000115 	stw	r4,4(r8)
  204918:	d8c02015 	stw	r3,128(sp)
  20491c:	d8801f15 	stw	r2,124(sp)
  204920:	010001c4 	movi	r4,7
  204924:	20825816 	blt	r4,r2,205288 <___vfprintf_internal_r+0x125c>
  204928:	42000204 	addi	r8,r8,8
  20492c:	d9003017 	ldw	r4,192(sp)
  204930:	00802004 	movi	r2,128
  204934:	2081bb26 	beq	r4,r2,205024 <___vfprintf_internal_r+0xff8>
  204938:	d9402a17 	ldw	r5,168(sp)
  20493c:	d8802b17 	ldw	r2,172(sp)
  204940:	28adc83a 	sub	r22,r5,r2
  204944:	0580310e 	bge	zero,r22,204a0c <___vfprintf_internal_r+0x9e0>
  204948:	07000404 	movi	fp,16
  20494c:	d8801f17 	ldw	r2,124(sp)
  204950:	e584360e 	bge	fp,r22,205a2c <___vfprintf_internal_r+0x1a00>
  204954:	01400874 	movhi	r5,33
  204958:	295b0a84 	addi	r5,r5,27690
  20495c:	dc402a15 	stw	r17,168(sp)
  204960:	d9402c15 	stw	r5,176(sp)
  204964:	b023883a 	mov	r17,r22
  204968:	04c001c4 	movi	r19,7
  20496c:	a82d883a 	mov	r22,r21
  204970:	902b883a 	mov	r21,r18
  204974:	8025883a 	mov	r18,r16
  204978:	dc002d17 	ldw	r16,180(sp)
  20497c:	00000306 	br	20498c <___vfprintf_internal_r+0x960>
  204980:	8c7ffc04 	addi	r17,r17,-16
  204984:	42000204 	addi	r8,r8,8
  204988:	e440110e 	bge	fp,r17,2049d0 <___vfprintf_internal_r+0x9a4>
  20498c:	18c00404 	addi	r3,r3,16
  204990:	10800044 	addi	r2,r2,1
  204994:	45000015 	stw	r20,0(r8)
  204998:	47000115 	stw	fp,4(r8)
  20499c:	d8c02015 	stw	r3,128(sp)
  2049a0:	d8801f15 	stw	r2,124(sp)
  2049a4:	98bff60e 	bge	r19,r2,204980 <_gp+0xffdf2d6c>
  2049a8:	d9801e04 	addi	r6,sp,120
  2049ac:	b80b883a 	mov	r5,r23
  2049b0:	8009883a 	mov	r4,r16
  2049b4:	020b9740 	call	20b974 <__sprint_r>
  2049b8:	103ea01e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2049bc:	8c7ffc04 	addi	r17,r17,-16
  2049c0:	d8c02017 	ldw	r3,128(sp)
  2049c4:	d8801f17 	ldw	r2,124(sp)
  2049c8:	da000404 	addi	r8,sp,16
  2049cc:	e47fef16 	blt	fp,r17,20498c <_gp+0xffdf2d78>
  2049d0:	9021883a 	mov	r16,r18
  2049d4:	a825883a 	mov	r18,r21
  2049d8:	b02b883a 	mov	r21,r22
  2049dc:	882d883a 	mov	r22,r17
  2049e0:	dc402a17 	ldw	r17,168(sp)
  2049e4:	d9002c17 	ldw	r4,176(sp)
  2049e8:	1d87883a 	add	r3,r3,r22
  2049ec:	10800044 	addi	r2,r2,1
  2049f0:	41000015 	stw	r4,0(r8)
  2049f4:	45800115 	stw	r22,4(r8)
  2049f8:	d8c02015 	stw	r3,128(sp)
  2049fc:	d8801f15 	stw	r2,124(sp)
  204a00:	010001c4 	movi	r4,7
  204a04:	20821016 	blt	r4,r2,205248 <___vfprintf_internal_r+0x121c>
  204a08:	42000204 	addi	r8,r8,8
  204a0c:	9080400c 	andi	r2,r18,256
  204a10:	10013a1e 	bne	r2,zero,204efc <___vfprintf_internal_r+0xed0>
  204a14:	d9402b17 	ldw	r5,172(sp)
  204a18:	d8801f17 	ldw	r2,124(sp)
  204a1c:	44000015 	stw	r16,0(r8)
  204a20:	1947883a 	add	r3,r3,r5
  204a24:	10800044 	addi	r2,r2,1
  204a28:	41400115 	stw	r5,4(r8)
  204a2c:	d8c02015 	stw	r3,128(sp)
  204a30:	d8801f15 	stw	r2,124(sp)
  204a34:	010001c4 	movi	r4,7
  204a38:	2081f516 	blt	r4,r2,205210 <___vfprintf_internal_r+0x11e4>
  204a3c:	42000204 	addi	r8,r8,8
  204a40:	9480010c 	andi	r18,r18,4
  204a44:	90003226 	beq	r18,zero,204b10 <___vfprintf_internal_r+0xae4>
  204a48:	d9403117 	ldw	r5,196(sp)
  204a4c:	d8802917 	ldw	r2,164(sp)
  204a50:	28a1c83a 	sub	r16,r5,r2
  204a54:	04002e0e 	bge	zero,r16,204b10 <___vfprintf_internal_r+0xae4>
  204a58:	04400404 	movi	r17,16
  204a5c:	d8801f17 	ldw	r2,124(sp)
  204a60:	8c04c40e 	bge	r17,r16,205d74 <___vfprintf_internal_r+0x1d48>
  204a64:	01400874 	movhi	r5,33
  204a68:	295b0e84 	addi	r5,r5,27706
  204a6c:	d9403515 	stw	r5,212(sp)
  204a70:	048001c4 	movi	r18,7
  204a74:	dcc02d17 	ldw	r19,180(sp)
  204a78:	00000306 	br	204a88 <___vfprintf_internal_r+0xa5c>
  204a7c:	843ffc04 	addi	r16,r16,-16
  204a80:	42000204 	addi	r8,r8,8
  204a84:	8c00130e 	bge	r17,r16,204ad4 <___vfprintf_internal_r+0xaa8>
  204a88:	01000874 	movhi	r4,33
  204a8c:	18c00404 	addi	r3,r3,16
  204a90:	10800044 	addi	r2,r2,1
  204a94:	211b0e84 	addi	r4,r4,27706
  204a98:	41000015 	stw	r4,0(r8)
  204a9c:	44400115 	stw	r17,4(r8)
  204aa0:	d8c02015 	stw	r3,128(sp)
  204aa4:	d8801f15 	stw	r2,124(sp)
  204aa8:	90bff40e 	bge	r18,r2,204a7c <_gp+0xffdf2e68>
  204aac:	d9801e04 	addi	r6,sp,120
  204ab0:	b80b883a 	mov	r5,r23
  204ab4:	9809883a 	mov	r4,r19
  204ab8:	020b9740 	call	20b974 <__sprint_r>
  204abc:	103e5f1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  204ac0:	843ffc04 	addi	r16,r16,-16
  204ac4:	d8c02017 	ldw	r3,128(sp)
  204ac8:	d8801f17 	ldw	r2,124(sp)
  204acc:	da000404 	addi	r8,sp,16
  204ad0:	8c3fed16 	blt	r17,r16,204a88 <_gp+0xffdf2e74>
  204ad4:	d9403517 	ldw	r5,212(sp)
  204ad8:	1c07883a 	add	r3,r3,r16
  204adc:	10800044 	addi	r2,r2,1
  204ae0:	41400015 	stw	r5,0(r8)
  204ae4:	44000115 	stw	r16,4(r8)
  204ae8:	d8c02015 	stw	r3,128(sp)
  204aec:	d8801f15 	stw	r2,124(sp)
  204af0:	010001c4 	movi	r4,7
  204af4:	2080060e 	bge	r4,r2,204b10 <___vfprintf_internal_r+0xae4>
  204af8:	d9002d17 	ldw	r4,180(sp)
  204afc:	d9801e04 	addi	r6,sp,120
  204b00:	b80b883a 	mov	r5,r23
  204b04:	020b9740 	call	20b974 <__sprint_r>
  204b08:	103e4c1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  204b0c:	d8c02017 	ldw	r3,128(sp)
  204b10:	d8803117 	ldw	r2,196(sp)
  204b14:	d9002917 	ldw	r4,164(sp)
  204b18:	1100010e 	bge	r2,r4,204b20 <___vfprintf_internal_r+0xaf4>
  204b1c:	2005883a 	mov	r2,r4
  204b20:	d9402f17 	ldw	r5,188(sp)
  204b24:	288b883a 	add	r5,r5,r2
  204b28:	d9402f15 	stw	r5,188(sp)
  204b2c:	1801c01e 	bne	r3,zero,205230 <___vfprintf_internal_r+0x1204>
  204b30:	a8800007 	ldb	r2,0(r21)
  204b34:	d8001f15 	stw	zero,124(sp)
  204b38:	da000404 	addi	r8,sp,16
  204b3c:	103d751e 	bne	r2,zero,204114 <_gp+0xffdf2500>
  204b40:	a823883a 	mov	r17,r21
  204b44:	003d8b06 	br	204174 <_gp+0xffdf2560>
  204b48:	8025883a 	mov	r18,r16
  204b4c:	dc002903 	ldbu	r16,164(sp)
  204b50:	e011883a 	mov	r8,fp
  204b54:	84003fcc 	andi	r16,r16,255
  204b58:	8005e51e 	bne	r16,zero,2062f0 <___vfprintf_internal_r+0x22c4>
  204b5c:	94800414 	ori	r18,r18,16
  204b60:	9080080c 	andi	r2,r18,32
  204b64:	10022b26 	beq	r2,zero,205414 <___vfprintf_internal_r+0x13e8>
  204b68:	d9002e17 	ldw	r4,184(sp)
  204b6c:	d9402a17 	ldw	r5,168(sp)
  204b70:	d8002785 	stb	zero,158(sp)
  204b74:	20c00204 	addi	r3,r4,8
  204b78:	24c00017 	ldw	r19,0(r4)
  204b7c:	25800117 	ldw	r22,4(r4)
  204b80:	28042e16 	blt	r5,zero,205c3c <___vfprintf_internal_r+0x1c10>
  204b84:	013fdfc4 	movi	r4,-129
  204b88:	9d84b03a 	or	r2,r19,r22
  204b8c:	d8c02e15 	stw	r3,184(sp)
  204b90:	9124703a 	and	r18,r18,r4
  204b94:	0039883a 	mov	fp,zero
  204b98:	103e801e 	bne	r2,zero,20459c <_gp+0xffdf2988>
  204b9c:	d9002a17 	ldw	r4,168(sp)
  204ba0:	2002e01e 	bne	r4,zero,205724 <___vfprintf_internal_r+0x16f8>
  204ba4:	d8002a15 	stw	zero,168(sp)
  204ba8:	d8002b15 	stw	zero,172(sp)
  204bac:	dc001e04 	addi	r16,sp,120
  204bb0:	003ef506 	br	204788 <_gp+0xffdf2b74>
  204bb4:	8025883a 	mov	r18,r16
  204bb8:	dc002903 	ldbu	r16,164(sp)
  204bbc:	e011883a 	mov	r8,fp
  204bc0:	84003fcc 	andi	r16,r16,255
  204bc4:	8005ba1e 	bne	r16,zero,2062b0 <___vfprintf_internal_r+0x2284>
  204bc8:	01000874 	movhi	r4,33
  204bcc:	211afe04 	addi	r4,r4,27640
  204bd0:	d9003915 	stw	r4,228(sp)
  204bd4:	9080080c 	andi	r2,r18,32
  204bd8:	10006126 	beq	r2,zero,204d60 <___vfprintf_internal_r+0xd34>
  204bdc:	d9402e17 	ldw	r5,184(sp)
  204be0:	2cc00017 	ldw	r19,0(r5)
  204be4:	2d800117 	ldw	r22,4(r5)
  204be8:	29400204 	addi	r5,r5,8
  204bec:	d9402e15 	stw	r5,184(sp)
  204bf0:	9080004c 	andi	r2,r18,1
  204bf4:	1001ac26 	beq	r2,zero,2052a8 <___vfprintf_internal_r+0x127c>
  204bf8:	9d84b03a 	or	r2,r19,r22
  204bfc:	10038526 	beq	r2,zero,205a14 <___vfprintf_internal_r+0x19e8>
  204c00:	d8c02a17 	ldw	r3,168(sp)
  204c04:	00800c04 	movi	r2,48
  204c08:	d8802705 	stb	r2,156(sp)
  204c0c:	dc402745 	stb	r17,157(sp)
  204c10:	d8002785 	stb	zero,158(sp)
  204c14:	90800094 	ori	r2,r18,2
  204c18:	18047916 	blt	r3,zero,205e00 <___vfprintf_internal_r+0x1dd4>
  204c1c:	00bfdfc4 	movi	r2,-129
  204c20:	90a4703a 	and	r18,r18,r2
  204c24:	94800094 	ori	r18,r18,2
  204c28:	0039883a 	mov	fp,zero
  204c2c:	d9003917 	ldw	r4,228(sp)
  204c30:	dc001e04 	addi	r16,sp,120
  204c34:	988003cc 	andi	r2,r19,15
  204c38:	b006973a 	slli	r3,r22,28
  204c3c:	2085883a 	add	r2,r4,r2
  204c40:	9826d13a 	srli	r19,r19,4
  204c44:	10800003 	ldbu	r2,0(r2)
  204c48:	b02cd13a 	srli	r22,r22,4
  204c4c:	843fffc4 	addi	r16,r16,-1
  204c50:	1ce6b03a 	or	r19,r3,r19
  204c54:	80800005 	stb	r2,0(r16)
  204c58:	9d84b03a 	or	r2,r19,r22
  204c5c:	103ff51e 	bne	r2,zero,204c34 <_gp+0xffdf3020>
  204c60:	d8c02817 	ldw	r3,160(sp)
  204c64:	1c07c83a 	sub	r3,r3,r16
  204c68:	d8c02b15 	stw	r3,172(sp)
  204c6c:	003ec606 	br	204788 <_gp+0xffdf2b74>
  204c70:	8025883a 	mov	r18,r16
  204c74:	dc002903 	ldbu	r16,164(sp)
  204c78:	e011883a 	mov	r8,fp
  204c7c:	84003fcc 	andi	r16,r16,255
  204c80:	803e9626 	beq	r16,zero,2046dc <_gp+0xffdf2ac8>
  204c84:	d8c02b03 	ldbu	r3,172(sp)
  204c88:	d8c02785 	stb	r3,158(sp)
  204c8c:	003e9306 	br	2046dc <_gp+0xffdf2ac8>
  204c90:	00c00044 	movi	r3,1
  204c94:	d8c02905 	stb	r3,164(sp)
  204c98:	00c00ac4 	movi	r3,43
  204c9c:	d8c02b05 	stb	r3,172(sp)
  204ca0:	ac400007 	ldb	r17,0(r21)
  204ca4:	003d4306 	br	2041b4 <_gp+0xffdf25a0>
  204ca8:	84000814 	ori	r16,r16,32
  204cac:	ac400007 	ldb	r17,0(r21)
  204cb0:	003d4006 	br	2041b4 <_gp+0xffdf25a0>
  204cb4:	d8802e17 	ldw	r2,184(sp)
  204cb8:	8025883a 	mov	r18,r16
  204cbc:	d8002785 	stb	zero,158(sp)
  204cc0:	14000017 	ldw	r16,0(r2)
  204cc4:	e011883a 	mov	r8,fp
  204cc8:	14c00104 	addi	r19,r2,4
  204ccc:	80042d26 	beq	r16,zero,205d84 <___vfprintf_internal_r+0x1d58>
  204cd0:	d8c02a17 	ldw	r3,168(sp)
  204cd4:	1803e416 	blt	r3,zero,205c68 <___vfprintf_internal_r+0x1c3c>
  204cd8:	180d883a 	mov	r6,r3
  204cdc:	000b883a 	mov	r5,zero
  204ce0:	8009883a 	mov	r4,r16
  204ce4:	df003d15 	stw	fp,244(sp)
  204ce8:	02099640 	call	209964 <memchr>
  204cec:	da003d17 	ldw	r8,244(sp)
  204cf0:	10046826 	beq	r2,zero,205e94 <___vfprintf_internal_r+0x1e68>
  204cf4:	1405c83a 	sub	r2,r2,r16
  204cf8:	d8802b15 	stw	r2,172(sp)
  204cfc:	1003e016 	blt	r2,zero,205c80 <___vfprintf_internal_r+0x1c54>
  204d00:	df002783 	ldbu	fp,158(sp)
  204d04:	d8802915 	stw	r2,164(sp)
  204d08:	dcc02e15 	stw	r19,184(sp)
  204d0c:	d8002a15 	stw	zero,168(sp)
  204d10:	d8003215 	stw	zero,200(sp)
  204d14:	003ea206 	br	2047a0 <_gp+0xffdf2b8c>
  204d18:	8025883a 	mov	r18,r16
  204d1c:	dc002903 	ldbu	r16,164(sp)
  204d20:	e011883a 	mov	r8,fp
  204d24:	84003fcc 	andi	r16,r16,255
  204d28:	803f8d26 	beq	r16,zero,204b60 <_gp+0xffdf2f4c>
  204d2c:	d8c02b03 	ldbu	r3,172(sp)
  204d30:	d8c02785 	stb	r3,158(sp)
  204d34:	003f8a06 	br	204b60 <_gp+0xffdf2f4c>
  204d38:	8025883a 	mov	r18,r16
  204d3c:	dc002903 	ldbu	r16,164(sp)
  204d40:	e011883a 	mov	r8,fp
  204d44:	84003fcc 	andi	r16,r16,255
  204d48:	8005661e 	bne	r16,zero,2062e4 <___vfprintf_internal_r+0x22b8>
  204d4c:	01000874 	movhi	r4,33
  204d50:	211b0304 	addi	r4,r4,27660
  204d54:	d9003915 	stw	r4,228(sp)
  204d58:	9080080c 	andi	r2,r18,32
  204d5c:	103f9f1e 	bne	r2,zero,204bdc <_gp+0xffdf2fc8>
  204d60:	9080040c 	andi	r2,r18,16
  204d64:	1002eb26 	beq	r2,zero,205914 <___vfprintf_internal_r+0x18e8>
  204d68:	d8802e17 	ldw	r2,184(sp)
  204d6c:	002d883a 	mov	r22,zero
  204d70:	14c00017 	ldw	r19,0(r2)
  204d74:	10800104 	addi	r2,r2,4
  204d78:	d8802e15 	stw	r2,184(sp)
  204d7c:	003f9c06 	br	204bf0 <_gp+0xffdf2fdc>
  204d80:	d8802b07 	ldb	r2,172(sp)
  204d84:	1002e11e 	bne	r2,zero,20590c <___vfprintf_internal_r+0x18e0>
  204d88:	00c00044 	movi	r3,1
  204d8c:	d8c02905 	stb	r3,164(sp)
  204d90:	00c00804 	movi	r3,32
  204d94:	d8c02b05 	stb	r3,172(sp)
  204d98:	ac400007 	ldb	r17,0(r21)
  204d9c:	003d0506 	br	2041b4 <_gp+0xffdf25a0>
  204da0:	84000054 	ori	r16,r16,1
  204da4:	ac400007 	ldb	r17,0(r21)
  204da8:	003d0206 	br	2041b4 <_gp+0xffdf25a0>
  204dac:	8025883a 	mov	r18,r16
  204db0:	dc002903 	ldbu	r16,164(sp)
  204db4:	e011883a 	mov	r8,fp
  204db8:	84003fcc 	andi	r16,r16,255
  204dbc:	803de726 	beq	r16,zero,20455c <_gp+0xffdf2948>
  204dc0:	d8c02b03 	ldbu	r3,172(sp)
  204dc4:	d8c02785 	stb	r3,158(sp)
  204dc8:	003de406 	br	20455c <_gp+0xffdf2948>
  204dcc:	84001014 	ori	r16,r16,64
  204dd0:	ac400007 	ldb	r17,0(r21)
  204dd4:	003cf706 	br	2041b4 <_gp+0xffdf25a0>
  204dd8:	ac400007 	ldb	r17,0(r21)
  204ddc:	00801b04 	movi	r2,108
  204de0:	88838f26 	beq	r17,r2,205c20 <___vfprintf_internal_r+0x1bf4>
  204de4:	84000414 	ori	r16,r16,16
  204de8:	003cf206 	br	2041b4 <_gp+0xffdf25a0>
  204dec:	8025883a 	mov	r18,r16
  204df0:	dc002903 	ldbu	r16,164(sp)
  204df4:	e011883a 	mov	r8,fp
  204df8:	84003fcc 	andi	r16,r16,255
  204dfc:	80053f1e 	bne	r16,zero,2062fc <___vfprintf_internal_r+0x22d0>
  204e00:	9080080c 	andi	r2,r18,32
  204e04:	1002d226 	beq	r2,zero,205950 <___vfprintf_internal_r+0x1924>
  204e08:	d9002e17 	ldw	r4,184(sp)
  204e0c:	d9402f17 	ldw	r5,188(sp)
  204e10:	20800017 	ldw	r2,0(r4)
  204e14:	2807d7fa 	srai	r3,r5,31
  204e18:	21000104 	addi	r4,r4,4
  204e1c:	d9002e15 	stw	r4,184(sp)
  204e20:	11400015 	stw	r5,0(r2)
  204e24:	10c00115 	stw	r3,4(r2)
  204e28:	003cb806 	br	20410c <_gp+0xffdf24f8>
  204e2c:	d8c02e17 	ldw	r3,184(sp)
  204e30:	d9002e17 	ldw	r4,184(sp)
  204e34:	8025883a 	mov	r18,r16
  204e38:	18800017 	ldw	r2,0(r3)
  204e3c:	21000104 	addi	r4,r4,4
  204e40:	00c00044 	movi	r3,1
  204e44:	e011883a 	mov	r8,fp
  204e48:	d8c02915 	stw	r3,164(sp)
  204e4c:	d8002785 	stb	zero,158(sp)
  204e50:	d8801405 	stb	r2,80(sp)
  204e54:	d9002e15 	stw	r4,184(sp)
  204e58:	d8c02b15 	stw	r3,172(sp)
  204e5c:	d8002a15 	stw	zero,168(sp)
  204e60:	d8003215 	stw	zero,200(sp)
  204e64:	dc001404 	addi	r16,sp,80
  204e68:	0039883a 	mov	fp,zero
  204e6c:	003e5306 	br	2047bc <_gp+0xffdf2ba8>
  204e70:	01000874 	movhi	r4,33
  204e74:	211b0304 	addi	r4,r4,27660
  204e78:	0039883a 	mov	fp,zero
  204e7c:	d9003915 	stw	r4,228(sp)
  204e80:	04401e04 	movi	r17,120
  204e84:	003f6906 	br	204c2c <_gp+0xffdf3018>
  204e88:	8025883a 	mov	r18,r16
  204e8c:	dc002903 	ldbu	r16,164(sp)
  204e90:	e011883a 	mov	r8,fp
  204e94:	84003fcc 	andi	r16,r16,255
  204e98:	8005081e 	bne	r16,zero,2062bc <___vfprintf_internal_r+0x2290>
  204e9c:	883d6126 	beq	r17,zero,204424 <_gp+0xffdf2810>
  204ea0:	00c00044 	movi	r3,1
  204ea4:	d8c02915 	stw	r3,164(sp)
  204ea8:	dc401405 	stb	r17,80(sp)
  204eac:	d8002785 	stb	zero,158(sp)
  204eb0:	003fe906 	br	204e58 <_gp+0xffdf3244>
  204eb4:	01400874 	movhi	r5,33
  204eb8:	295b0304 	addi	r5,r5,27660
  204ebc:	d9403915 	stw	r5,228(sp)
  204ec0:	d8c02e15 	stw	r3,184(sp)
  204ec4:	1025883a 	mov	r18,r2
  204ec8:	04401e04 	movi	r17,120
  204ecc:	9d84b03a 	or	r2,r19,r22
  204ed0:	1000fc1e 	bne	r2,zero,2052c4 <___vfprintf_internal_r+0x1298>
  204ed4:	0039883a 	mov	fp,zero
  204ed8:	00800084 	movi	r2,2
  204edc:	10803fcc 	andi	r2,r2,255
  204ee0:	00c00044 	movi	r3,1
  204ee4:	10c20f26 	beq	r2,r3,205724 <___vfprintf_internal_r+0x16f8>
  204ee8:	00c00084 	movi	r3,2
  204eec:	10fd3326 	beq	r2,r3,2043bc <_gp+0xffdf27a8>
  204ef0:	003e0b06 	br	204720 <_gp+0xffdf2b0c>
  204ef4:	d8c02017 	ldw	r3,128(sp)
  204ef8:	003e7106 	br	2048c0 <_gp+0xffdf2cac>
  204efc:	00801944 	movi	r2,101
  204f00:	14407e0e 	bge	r2,r17,2050fc <___vfprintf_internal_r+0x10d0>
  204f04:	d9003617 	ldw	r4,216(sp)
  204f08:	d9403817 	ldw	r5,224(sp)
  204f0c:	000d883a 	mov	r6,zero
  204f10:	000f883a 	mov	r7,zero
  204f14:	d8c03c15 	stw	r3,240(sp)
  204f18:	da003d15 	stw	r8,244(sp)
  204f1c:	020f6f80 	call	20f6f8 <__eqdf2>
  204f20:	d8c03c17 	ldw	r3,240(sp)
  204f24:	da003d17 	ldw	r8,244(sp)
  204f28:	1000f71e 	bne	r2,zero,205308 <___vfprintf_internal_r+0x12dc>
  204f2c:	d8801f17 	ldw	r2,124(sp)
  204f30:	01000874 	movhi	r4,33
  204f34:	211b0a04 	addi	r4,r4,27688
  204f38:	18c00044 	addi	r3,r3,1
  204f3c:	10800044 	addi	r2,r2,1
  204f40:	41000015 	stw	r4,0(r8)
  204f44:	01000044 	movi	r4,1
  204f48:	41000115 	stw	r4,4(r8)
  204f4c:	d8c02015 	stw	r3,128(sp)
  204f50:	d8801f15 	stw	r2,124(sp)
  204f54:	010001c4 	movi	r4,7
  204f58:	2082b816 	blt	r4,r2,205a3c <___vfprintf_internal_r+0x1a10>
  204f5c:	42000204 	addi	r8,r8,8
  204f60:	d8802617 	ldw	r2,152(sp)
  204f64:	d9403317 	ldw	r5,204(sp)
  204f68:	11400216 	blt	r2,r5,204f74 <___vfprintf_internal_r+0xf48>
  204f6c:	9080004c 	andi	r2,r18,1
  204f70:	103eb326 	beq	r2,zero,204a40 <_gp+0xffdf2e2c>
  204f74:	d8803717 	ldw	r2,220(sp)
  204f78:	d9003417 	ldw	r4,208(sp)
  204f7c:	d9403717 	ldw	r5,220(sp)
  204f80:	1887883a 	add	r3,r3,r2
  204f84:	d8801f17 	ldw	r2,124(sp)
  204f88:	41000015 	stw	r4,0(r8)
  204f8c:	41400115 	stw	r5,4(r8)
  204f90:	10800044 	addi	r2,r2,1
  204f94:	d8c02015 	stw	r3,128(sp)
  204f98:	d8801f15 	stw	r2,124(sp)
  204f9c:	010001c4 	movi	r4,7
  204fa0:	20832916 	blt	r4,r2,205c48 <___vfprintf_internal_r+0x1c1c>
  204fa4:	42000204 	addi	r8,r8,8
  204fa8:	d8803317 	ldw	r2,204(sp)
  204fac:	143fffc4 	addi	r16,r2,-1
  204fb0:	043ea30e 	bge	zero,r16,204a40 <_gp+0xffdf2e2c>
  204fb4:	04400404 	movi	r17,16
  204fb8:	d8801f17 	ldw	r2,124(sp)
  204fbc:	8c00880e 	bge	r17,r16,2051e0 <___vfprintf_internal_r+0x11b4>
  204fc0:	01400874 	movhi	r5,33
  204fc4:	295b0a84 	addi	r5,r5,27690
  204fc8:	d9402c15 	stw	r5,176(sp)
  204fcc:	058001c4 	movi	r22,7
  204fd0:	dcc02d17 	ldw	r19,180(sp)
  204fd4:	00000306 	br	204fe4 <___vfprintf_internal_r+0xfb8>
  204fd8:	42000204 	addi	r8,r8,8
  204fdc:	843ffc04 	addi	r16,r16,-16
  204fe0:	8c00820e 	bge	r17,r16,2051ec <___vfprintf_internal_r+0x11c0>
  204fe4:	18c00404 	addi	r3,r3,16
  204fe8:	10800044 	addi	r2,r2,1
  204fec:	45000015 	stw	r20,0(r8)
  204ff0:	44400115 	stw	r17,4(r8)
  204ff4:	d8c02015 	stw	r3,128(sp)
  204ff8:	d8801f15 	stw	r2,124(sp)
  204ffc:	b0bff60e 	bge	r22,r2,204fd8 <_gp+0xffdf33c4>
  205000:	d9801e04 	addi	r6,sp,120
  205004:	b80b883a 	mov	r5,r23
  205008:	9809883a 	mov	r4,r19
  20500c:	020b9740 	call	20b974 <__sprint_r>
  205010:	103d0a1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205014:	d8c02017 	ldw	r3,128(sp)
  205018:	d8801f17 	ldw	r2,124(sp)
  20501c:	da000404 	addi	r8,sp,16
  205020:	003fee06 	br	204fdc <_gp+0xffdf33c8>
  205024:	d9403117 	ldw	r5,196(sp)
  205028:	d8802917 	ldw	r2,164(sp)
  20502c:	28adc83a 	sub	r22,r5,r2
  205030:	05be410e 	bge	zero,r22,204938 <_gp+0xffdf2d24>
  205034:	07000404 	movi	fp,16
  205038:	d8801f17 	ldw	r2,124(sp)
  20503c:	e5838f0e 	bge	fp,r22,205e7c <___vfprintf_internal_r+0x1e50>
  205040:	01400874 	movhi	r5,33
  205044:	295b0a84 	addi	r5,r5,27690
  205048:	dc403015 	stw	r17,192(sp)
  20504c:	d9402c15 	stw	r5,176(sp)
  205050:	b023883a 	mov	r17,r22
  205054:	04c001c4 	movi	r19,7
  205058:	a82d883a 	mov	r22,r21
  20505c:	902b883a 	mov	r21,r18
  205060:	8025883a 	mov	r18,r16
  205064:	dc002d17 	ldw	r16,180(sp)
  205068:	00000306 	br	205078 <___vfprintf_internal_r+0x104c>
  20506c:	8c7ffc04 	addi	r17,r17,-16
  205070:	42000204 	addi	r8,r8,8
  205074:	e440110e 	bge	fp,r17,2050bc <___vfprintf_internal_r+0x1090>
  205078:	18c00404 	addi	r3,r3,16
  20507c:	10800044 	addi	r2,r2,1
  205080:	45000015 	stw	r20,0(r8)
  205084:	47000115 	stw	fp,4(r8)
  205088:	d8c02015 	stw	r3,128(sp)
  20508c:	d8801f15 	stw	r2,124(sp)
  205090:	98bff60e 	bge	r19,r2,20506c <_gp+0xffdf3458>
  205094:	d9801e04 	addi	r6,sp,120
  205098:	b80b883a 	mov	r5,r23
  20509c:	8009883a 	mov	r4,r16
  2050a0:	020b9740 	call	20b974 <__sprint_r>
  2050a4:	103ce51e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2050a8:	8c7ffc04 	addi	r17,r17,-16
  2050ac:	d8c02017 	ldw	r3,128(sp)
  2050b0:	d8801f17 	ldw	r2,124(sp)
  2050b4:	da000404 	addi	r8,sp,16
  2050b8:	e47fef16 	blt	fp,r17,205078 <_gp+0xffdf3464>
  2050bc:	9021883a 	mov	r16,r18
  2050c0:	a825883a 	mov	r18,r21
  2050c4:	b02b883a 	mov	r21,r22
  2050c8:	882d883a 	mov	r22,r17
  2050cc:	dc403017 	ldw	r17,192(sp)
  2050d0:	d9002c17 	ldw	r4,176(sp)
  2050d4:	1d87883a 	add	r3,r3,r22
  2050d8:	10800044 	addi	r2,r2,1
  2050dc:	41000015 	stw	r4,0(r8)
  2050e0:	45800115 	stw	r22,4(r8)
  2050e4:	d8c02015 	stw	r3,128(sp)
  2050e8:	d8801f15 	stw	r2,124(sp)
  2050ec:	010001c4 	movi	r4,7
  2050f0:	20818e16 	blt	r4,r2,20572c <___vfprintf_internal_r+0x1700>
  2050f4:	42000204 	addi	r8,r8,8
  2050f8:	003e0f06 	br	204938 <_gp+0xffdf2d24>
  2050fc:	d9403317 	ldw	r5,204(sp)
  205100:	00800044 	movi	r2,1
  205104:	18c00044 	addi	r3,r3,1
  205108:	1141530e 	bge	r2,r5,205658 <___vfprintf_internal_r+0x162c>
  20510c:	dc401f17 	ldw	r17,124(sp)
  205110:	00800044 	movi	r2,1
  205114:	40800115 	stw	r2,4(r8)
  205118:	8c400044 	addi	r17,r17,1
  20511c:	44000015 	stw	r16,0(r8)
  205120:	d8c02015 	stw	r3,128(sp)
  205124:	dc401f15 	stw	r17,124(sp)
  205128:	008001c4 	movi	r2,7
  20512c:	14416b16 	blt	r2,r17,2056dc <___vfprintf_internal_r+0x16b0>
  205130:	42000204 	addi	r8,r8,8
  205134:	d8803717 	ldw	r2,220(sp)
  205138:	d9003417 	ldw	r4,208(sp)
  20513c:	8c400044 	addi	r17,r17,1
  205140:	10c7883a 	add	r3,r2,r3
  205144:	40800115 	stw	r2,4(r8)
  205148:	41000015 	stw	r4,0(r8)
  20514c:	d8c02015 	stw	r3,128(sp)
  205150:	dc401f15 	stw	r17,124(sp)
  205154:	008001c4 	movi	r2,7
  205158:	14416916 	blt	r2,r17,205700 <___vfprintf_internal_r+0x16d4>
  20515c:	45800204 	addi	r22,r8,8
  205160:	d9003617 	ldw	r4,216(sp)
  205164:	d9403817 	ldw	r5,224(sp)
  205168:	000d883a 	mov	r6,zero
  20516c:	000f883a 	mov	r7,zero
  205170:	d8c03c15 	stw	r3,240(sp)
  205174:	020f6f80 	call	20f6f8 <__eqdf2>
  205178:	d8c03c17 	ldw	r3,240(sp)
  20517c:	1000bc26 	beq	r2,zero,205470 <___vfprintf_internal_r+0x1444>
  205180:	d9403317 	ldw	r5,204(sp)
  205184:	84000044 	addi	r16,r16,1
  205188:	8c400044 	addi	r17,r17,1
  20518c:	28bfffc4 	addi	r2,r5,-1
  205190:	1887883a 	add	r3,r3,r2
  205194:	b0800115 	stw	r2,4(r22)
  205198:	b4000015 	stw	r16,0(r22)
  20519c:	d8c02015 	stw	r3,128(sp)
  2051a0:	dc401f15 	stw	r17,124(sp)
  2051a4:	008001c4 	movi	r2,7
  2051a8:	14414316 	blt	r2,r17,2056b8 <___vfprintf_internal_r+0x168c>
  2051ac:	b5800204 	addi	r22,r22,8
  2051b0:	d9003a17 	ldw	r4,232(sp)
  2051b4:	df0022c4 	addi	fp,sp,139
  2051b8:	8c400044 	addi	r17,r17,1
  2051bc:	20c7883a 	add	r3,r4,r3
  2051c0:	b7000015 	stw	fp,0(r22)
  2051c4:	b1000115 	stw	r4,4(r22)
  2051c8:	d8c02015 	stw	r3,128(sp)
  2051cc:	dc401f15 	stw	r17,124(sp)
  2051d0:	008001c4 	movi	r2,7
  2051d4:	14400e16 	blt	r2,r17,205210 <___vfprintf_internal_r+0x11e4>
  2051d8:	b2000204 	addi	r8,r22,8
  2051dc:	003e1806 	br	204a40 <_gp+0xffdf2e2c>
  2051e0:	01000874 	movhi	r4,33
  2051e4:	211b0a84 	addi	r4,r4,27690
  2051e8:	d9002c15 	stw	r4,176(sp)
  2051ec:	d9002c17 	ldw	r4,176(sp)
  2051f0:	1c07883a 	add	r3,r3,r16
  2051f4:	44000115 	stw	r16,4(r8)
  2051f8:	41000015 	stw	r4,0(r8)
  2051fc:	10800044 	addi	r2,r2,1
  205200:	d8c02015 	stw	r3,128(sp)
  205204:	d8801f15 	stw	r2,124(sp)
  205208:	010001c4 	movi	r4,7
  20520c:	20be0b0e 	bge	r4,r2,204a3c <_gp+0xffdf2e28>
  205210:	d9002d17 	ldw	r4,180(sp)
  205214:	d9801e04 	addi	r6,sp,120
  205218:	b80b883a 	mov	r5,r23
  20521c:	020b9740 	call	20b974 <__sprint_r>
  205220:	103c861e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205224:	d8c02017 	ldw	r3,128(sp)
  205228:	da000404 	addi	r8,sp,16
  20522c:	003e0406 	br	204a40 <_gp+0xffdf2e2c>
  205230:	d9002d17 	ldw	r4,180(sp)
  205234:	d9801e04 	addi	r6,sp,120
  205238:	b80b883a 	mov	r5,r23
  20523c:	020b9740 	call	20b974 <__sprint_r>
  205240:	103e3b26 	beq	r2,zero,204b30 <_gp+0xffdf2f1c>
  205244:	003c7d06 	br	20443c <_gp+0xffdf2828>
  205248:	d9002d17 	ldw	r4,180(sp)
  20524c:	d9801e04 	addi	r6,sp,120
  205250:	b80b883a 	mov	r5,r23
  205254:	020b9740 	call	20b974 <__sprint_r>
  205258:	103c781e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  20525c:	d8c02017 	ldw	r3,128(sp)
  205260:	da000404 	addi	r8,sp,16
  205264:	003de906 	br	204a0c <_gp+0xffdf2df8>
  205268:	d9002d17 	ldw	r4,180(sp)
  20526c:	d9801e04 	addi	r6,sp,120
  205270:	b80b883a 	mov	r5,r23
  205274:	020b9740 	call	20b974 <__sprint_r>
  205278:	103c701e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  20527c:	d8c02017 	ldw	r3,128(sp)
  205280:	da000404 	addi	r8,sp,16
  205284:	003d9b06 	br	2048f4 <_gp+0xffdf2ce0>
  205288:	d9002d17 	ldw	r4,180(sp)
  20528c:	d9801e04 	addi	r6,sp,120
  205290:	b80b883a 	mov	r5,r23
  205294:	020b9740 	call	20b974 <__sprint_r>
  205298:	103c681e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  20529c:	d8c02017 	ldw	r3,128(sp)
  2052a0:	da000404 	addi	r8,sp,16
  2052a4:	003da106 	br	20492c <_gp+0xffdf2d18>
  2052a8:	d9402a17 	ldw	r5,168(sp)
  2052ac:	d8002785 	stb	zero,158(sp)
  2052b0:	283f0616 	blt	r5,zero,204ecc <_gp+0xffdf32b8>
  2052b4:	00ffdfc4 	movi	r3,-129
  2052b8:	9d84b03a 	or	r2,r19,r22
  2052bc:	90e4703a 	and	r18,r18,r3
  2052c0:	103c3b26 	beq	r2,zero,2043b0 <_gp+0xffdf279c>
  2052c4:	0039883a 	mov	fp,zero
  2052c8:	003e5806 	br	204c2c <_gp+0xffdf3018>
  2052cc:	9080040c 	andi	r2,r18,16
  2052d0:	1001b326 	beq	r2,zero,2059a0 <___vfprintf_internal_r+0x1974>
  2052d4:	d8c02e17 	ldw	r3,184(sp)
  2052d8:	d9002a17 	ldw	r4,168(sp)
  2052dc:	d8002785 	stb	zero,158(sp)
  2052e0:	18800104 	addi	r2,r3,4
  2052e4:	1cc00017 	ldw	r19,0(r3)
  2052e8:	002d883a 	mov	r22,zero
  2052ec:	2001b516 	blt	r4,zero,2059c4 <___vfprintf_internal_r+0x1998>
  2052f0:	00ffdfc4 	movi	r3,-129
  2052f4:	d8802e15 	stw	r2,184(sp)
  2052f8:	90e4703a 	and	r18,r18,r3
  2052fc:	983d0526 	beq	r19,zero,204714 <_gp+0xffdf2b00>
  205300:	0039883a 	mov	fp,zero
  205304:	003d0806 	br	204728 <_gp+0xffdf2b14>
  205308:	dc402617 	ldw	r17,152(sp)
  20530c:	0441d30e 	bge	zero,r17,205a5c <___vfprintf_internal_r+0x1a30>
  205310:	dc403217 	ldw	r17,200(sp)
  205314:	d8803317 	ldw	r2,204(sp)
  205318:	1440010e 	bge	r2,r17,205320 <___vfprintf_internal_r+0x12f4>
  20531c:	1023883a 	mov	r17,r2
  205320:	04400a0e 	bge	zero,r17,20534c <___vfprintf_internal_r+0x1320>
  205324:	d8801f17 	ldw	r2,124(sp)
  205328:	1c47883a 	add	r3,r3,r17
  20532c:	44000015 	stw	r16,0(r8)
  205330:	10800044 	addi	r2,r2,1
  205334:	44400115 	stw	r17,4(r8)
  205338:	d8c02015 	stw	r3,128(sp)
  20533c:	d8801f15 	stw	r2,124(sp)
  205340:	010001c4 	movi	r4,7
  205344:	20826516 	blt	r4,r2,205cdc <___vfprintf_internal_r+0x1cb0>
  205348:	42000204 	addi	r8,r8,8
  20534c:	88026116 	blt	r17,zero,205cd4 <___vfprintf_internal_r+0x1ca8>
  205350:	d9003217 	ldw	r4,200(sp)
  205354:	2463c83a 	sub	r17,r4,r17
  205358:	04407b0e 	bge	zero,r17,205548 <___vfprintf_internal_r+0x151c>
  20535c:	05800404 	movi	r22,16
  205360:	d8801f17 	ldw	r2,124(sp)
  205364:	b4419d0e 	bge	r22,r17,2059dc <___vfprintf_internal_r+0x19b0>
  205368:	01000874 	movhi	r4,33
  20536c:	211b0a84 	addi	r4,r4,27690
  205370:	d9002c15 	stw	r4,176(sp)
  205374:	070001c4 	movi	fp,7
  205378:	dcc02d17 	ldw	r19,180(sp)
  20537c:	00000306 	br	20538c <___vfprintf_internal_r+0x1360>
  205380:	42000204 	addi	r8,r8,8
  205384:	8c7ffc04 	addi	r17,r17,-16
  205388:	b441970e 	bge	r22,r17,2059e8 <___vfprintf_internal_r+0x19bc>
  20538c:	18c00404 	addi	r3,r3,16
  205390:	10800044 	addi	r2,r2,1
  205394:	45000015 	stw	r20,0(r8)
  205398:	45800115 	stw	r22,4(r8)
  20539c:	d8c02015 	stw	r3,128(sp)
  2053a0:	d8801f15 	stw	r2,124(sp)
  2053a4:	e0bff60e 	bge	fp,r2,205380 <_gp+0xffdf376c>
  2053a8:	d9801e04 	addi	r6,sp,120
  2053ac:	b80b883a 	mov	r5,r23
  2053b0:	9809883a 	mov	r4,r19
  2053b4:	020b9740 	call	20b974 <__sprint_r>
  2053b8:	103c201e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2053bc:	d8c02017 	ldw	r3,128(sp)
  2053c0:	d8801f17 	ldw	r2,124(sp)
  2053c4:	da000404 	addi	r8,sp,16
  2053c8:	003fee06 	br	205384 <_gp+0xffdf3770>
  2053cc:	d9002d17 	ldw	r4,180(sp)
  2053d0:	d9801e04 	addi	r6,sp,120
  2053d4:	b80b883a 	mov	r5,r23
  2053d8:	020b9740 	call	20b974 <__sprint_r>
  2053dc:	103c171e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2053e0:	d8c02017 	ldw	r3,128(sp)
  2053e4:	df002787 	ldb	fp,158(sp)
  2053e8:	da000404 	addi	r8,sp,16
  2053ec:	003d3406 	br	2048c0 <_gp+0xffdf2cac>
  2053f0:	9080040c 	andi	r2,r18,16
  2053f4:	10016126 	beq	r2,zero,20597c <___vfprintf_internal_r+0x1950>
  2053f8:	d9402e17 	ldw	r5,184(sp)
  2053fc:	2cc00017 	ldw	r19,0(r5)
  205400:	29400104 	addi	r5,r5,4
  205404:	d9402e15 	stw	r5,184(sp)
  205408:	982dd7fa 	srai	r22,r19,31
  20540c:	b005883a 	mov	r2,r22
  205410:	003c5a06 	br	20457c <_gp+0xffdf2968>
  205414:	9080040c 	andi	r2,r18,16
  205418:	10003526 	beq	r2,zero,2054f0 <___vfprintf_internal_r+0x14c4>
  20541c:	d8c02e17 	ldw	r3,184(sp)
  205420:	d9002a17 	ldw	r4,168(sp)
  205424:	d8002785 	stb	zero,158(sp)
  205428:	18800104 	addi	r2,r3,4
  20542c:	1cc00017 	ldw	r19,0(r3)
  205430:	002d883a 	mov	r22,zero
  205434:	20003716 	blt	r4,zero,205514 <___vfprintf_internal_r+0x14e8>
  205438:	00ffdfc4 	movi	r3,-129
  20543c:	d8802e15 	stw	r2,184(sp)
  205440:	90e4703a 	and	r18,r18,r3
  205444:	0039883a 	mov	fp,zero
  205448:	983dd426 	beq	r19,zero,204b9c <_gp+0xffdf2f88>
  20544c:	00800244 	movi	r2,9
  205450:	14fc5336 	bltu	r2,r19,2045a0 <_gp+0xffdf298c>
  205454:	d8c02817 	ldw	r3,160(sp)
  205458:	dc001dc4 	addi	r16,sp,119
  20545c:	9cc00c04 	addi	r19,r19,48
  205460:	1c07c83a 	sub	r3,r3,r16
  205464:	dcc01dc5 	stb	r19,119(sp)
  205468:	d8c02b15 	stw	r3,172(sp)
  20546c:	003cc606 	br	204788 <_gp+0xffdf2b74>
  205470:	d8803317 	ldw	r2,204(sp)
  205474:	143fffc4 	addi	r16,r2,-1
  205478:	043f4d0e 	bge	zero,r16,2051b0 <_gp+0xffdf359c>
  20547c:	07000404 	movi	fp,16
  205480:	e400810e 	bge	fp,r16,205688 <___vfprintf_internal_r+0x165c>
  205484:	01400874 	movhi	r5,33
  205488:	295b0a84 	addi	r5,r5,27690
  20548c:	d9402c15 	stw	r5,176(sp)
  205490:	01c001c4 	movi	r7,7
  205494:	dcc02d17 	ldw	r19,180(sp)
  205498:	00000306 	br	2054a8 <___vfprintf_internal_r+0x147c>
  20549c:	b5800204 	addi	r22,r22,8
  2054a0:	843ffc04 	addi	r16,r16,-16
  2054a4:	e4007b0e 	bge	fp,r16,205694 <___vfprintf_internal_r+0x1668>
  2054a8:	18c00404 	addi	r3,r3,16
  2054ac:	8c400044 	addi	r17,r17,1
  2054b0:	b5000015 	stw	r20,0(r22)
  2054b4:	b7000115 	stw	fp,4(r22)
  2054b8:	d8c02015 	stw	r3,128(sp)
  2054bc:	dc401f15 	stw	r17,124(sp)
  2054c0:	3c7ff60e 	bge	r7,r17,20549c <_gp+0xffdf3888>
  2054c4:	d9801e04 	addi	r6,sp,120
  2054c8:	b80b883a 	mov	r5,r23
  2054cc:	9809883a 	mov	r4,r19
  2054d0:	d9c03c15 	stw	r7,240(sp)
  2054d4:	020b9740 	call	20b974 <__sprint_r>
  2054d8:	d9c03c17 	ldw	r7,240(sp)
  2054dc:	103bd71e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2054e0:	d8c02017 	ldw	r3,128(sp)
  2054e4:	dc401f17 	ldw	r17,124(sp)
  2054e8:	dd800404 	addi	r22,sp,16
  2054ec:	003fec06 	br	2054a0 <_gp+0xffdf388c>
  2054f0:	9080100c 	andi	r2,r18,64
  2054f4:	d8002785 	stb	zero,158(sp)
  2054f8:	10010e26 	beq	r2,zero,205934 <___vfprintf_internal_r+0x1908>
  2054fc:	d9402e17 	ldw	r5,184(sp)
  205500:	d8c02a17 	ldw	r3,168(sp)
  205504:	002d883a 	mov	r22,zero
  205508:	28800104 	addi	r2,r5,4
  20550c:	2cc0000b 	ldhu	r19,0(r5)
  205510:	183fc90e 	bge	r3,zero,205438 <_gp+0xffdf3824>
  205514:	d8802e15 	stw	r2,184(sp)
  205518:	0039883a 	mov	fp,zero
  20551c:	9d84b03a 	or	r2,r19,r22
  205520:	103c1e1e 	bne	r2,zero,20459c <_gp+0xffdf2988>
  205524:	00800044 	movi	r2,1
  205528:	003e6c06 	br	204edc <_gp+0xffdf32c8>
  20552c:	d9002d17 	ldw	r4,180(sp)
  205530:	d9801e04 	addi	r6,sp,120
  205534:	b80b883a 	mov	r5,r23
  205538:	020b9740 	call	20b974 <__sprint_r>
  20553c:	103bbf1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205540:	d8c02017 	ldw	r3,128(sp)
  205544:	da000404 	addi	r8,sp,16
  205548:	d9003217 	ldw	r4,200(sp)
  20554c:	d8802617 	ldw	r2,152(sp)
  205550:	d9403317 	ldw	r5,204(sp)
  205554:	8123883a 	add	r17,r16,r4
  205558:	11400216 	blt	r2,r5,205564 <___vfprintf_internal_r+0x1538>
  20555c:	9100004c 	andi	r4,r18,1
  205560:	20000d26 	beq	r4,zero,205598 <___vfprintf_internal_r+0x156c>
  205564:	d9003717 	ldw	r4,220(sp)
  205568:	d9403417 	ldw	r5,208(sp)
  20556c:	1907883a 	add	r3,r3,r4
  205570:	d9001f17 	ldw	r4,124(sp)
  205574:	41400015 	stw	r5,0(r8)
  205578:	d9403717 	ldw	r5,220(sp)
  20557c:	21000044 	addi	r4,r4,1
  205580:	d8c02015 	stw	r3,128(sp)
  205584:	41400115 	stw	r5,4(r8)
  205588:	d9001f15 	stw	r4,124(sp)
  20558c:	014001c4 	movi	r5,7
  205590:	2901e816 	blt	r5,r4,205d34 <___vfprintf_internal_r+0x1d08>
  205594:	42000204 	addi	r8,r8,8
  205598:	d9003317 	ldw	r4,204(sp)
  20559c:	8121883a 	add	r16,r16,r4
  2055a0:	2085c83a 	sub	r2,r4,r2
  2055a4:	8461c83a 	sub	r16,r16,r17
  2055a8:	1400010e 	bge	r2,r16,2055b0 <___vfprintf_internal_r+0x1584>
  2055ac:	1021883a 	mov	r16,r2
  2055b0:	04000a0e 	bge	zero,r16,2055dc <___vfprintf_internal_r+0x15b0>
  2055b4:	d9001f17 	ldw	r4,124(sp)
  2055b8:	1c07883a 	add	r3,r3,r16
  2055bc:	44400015 	stw	r17,0(r8)
  2055c0:	21000044 	addi	r4,r4,1
  2055c4:	44000115 	stw	r16,4(r8)
  2055c8:	d8c02015 	stw	r3,128(sp)
  2055cc:	d9001f15 	stw	r4,124(sp)
  2055d0:	014001c4 	movi	r5,7
  2055d4:	2901fb16 	blt	r5,r4,205dc4 <___vfprintf_internal_r+0x1d98>
  2055d8:	42000204 	addi	r8,r8,8
  2055dc:	8001f716 	blt	r16,zero,205dbc <___vfprintf_internal_r+0x1d90>
  2055e0:	1421c83a 	sub	r16,r2,r16
  2055e4:	043d160e 	bge	zero,r16,204a40 <_gp+0xffdf2e2c>
  2055e8:	04400404 	movi	r17,16
  2055ec:	d8801f17 	ldw	r2,124(sp)
  2055f0:	8c3efb0e 	bge	r17,r16,2051e0 <_gp+0xffdf35cc>
  2055f4:	01400874 	movhi	r5,33
  2055f8:	295b0a84 	addi	r5,r5,27690
  2055fc:	d9402c15 	stw	r5,176(sp)
  205600:	058001c4 	movi	r22,7
  205604:	dcc02d17 	ldw	r19,180(sp)
  205608:	00000306 	br	205618 <___vfprintf_internal_r+0x15ec>
  20560c:	42000204 	addi	r8,r8,8
  205610:	843ffc04 	addi	r16,r16,-16
  205614:	8c3ef50e 	bge	r17,r16,2051ec <_gp+0xffdf35d8>
  205618:	18c00404 	addi	r3,r3,16
  20561c:	10800044 	addi	r2,r2,1
  205620:	45000015 	stw	r20,0(r8)
  205624:	44400115 	stw	r17,4(r8)
  205628:	d8c02015 	stw	r3,128(sp)
  20562c:	d8801f15 	stw	r2,124(sp)
  205630:	b0bff60e 	bge	r22,r2,20560c <_gp+0xffdf39f8>
  205634:	d9801e04 	addi	r6,sp,120
  205638:	b80b883a 	mov	r5,r23
  20563c:	9809883a 	mov	r4,r19
  205640:	020b9740 	call	20b974 <__sprint_r>
  205644:	103b7d1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205648:	d8c02017 	ldw	r3,128(sp)
  20564c:	d8801f17 	ldw	r2,124(sp)
  205650:	da000404 	addi	r8,sp,16
  205654:	003fee06 	br	205610 <_gp+0xffdf39fc>
  205658:	9088703a 	and	r4,r18,r2
  20565c:	203eab1e 	bne	r4,zero,20510c <_gp+0xffdf34f8>
  205660:	dc401f17 	ldw	r17,124(sp)
  205664:	40800115 	stw	r2,4(r8)
  205668:	44000015 	stw	r16,0(r8)
  20566c:	8c400044 	addi	r17,r17,1
  205670:	d8c02015 	stw	r3,128(sp)
  205674:	dc401f15 	stw	r17,124(sp)
  205678:	008001c4 	movi	r2,7
  20567c:	14400e16 	blt	r2,r17,2056b8 <___vfprintf_internal_r+0x168c>
  205680:	45800204 	addi	r22,r8,8
  205684:	003eca06 	br	2051b0 <_gp+0xffdf359c>
  205688:	01000874 	movhi	r4,33
  20568c:	211b0a84 	addi	r4,r4,27690
  205690:	d9002c15 	stw	r4,176(sp)
  205694:	d8802c17 	ldw	r2,176(sp)
  205698:	1c07883a 	add	r3,r3,r16
  20569c:	8c400044 	addi	r17,r17,1
  2056a0:	b0800015 	stw	r2,0(r22)
  2056a4:	b4000115 	stw	r16,4(r22)
  2056a8:	d8c02015 	stw	r3,128(sp)
  2056ac:	dc401f15 	stw	r17,124(sp)
  2056b0:	008001c4 	movi	r2,7
  2056b4:	147ebd0e 	bge	r2,r17,2051ac <_gp+0xffdf3598>
  2056b8:	d9002d17 	ldw	r4,180(sp)
  2056bc:	d9801e04 	addi	r6,sp,120
  2056c0:	b80b883a 	mov	r5,r23
  2056c4:	020b9740 	call	20b974 <__sprint_r>
  2056c8:	103b5c1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2056cc:	d8c02017 	ldw	r3,128(sp)
  2056d0:	dc401f17 	ldw	r17,124(sp)
  2056d4:	dd800404 	addi	r22,sp,16
  2056d8:	003eb506 	br	2051b0 <_gp+0xffdf359c>
  2056dc:	d9002d17 	ldw	r4,180(sp)
  2056e0:	d9801e04 	addi	r6,sp,120
  2056e4:	b80b883a 	mov	r5,r23
  2056e8:	020b9740 	call	20b974 <__sprint_r>
  2056ec:	103b531e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  2056f0:	d8c02017 	ldw	r3,128(sp)
  2056f4:	dc401f17 	ldw	r17,124(sp)
  2056f8:	da000404 	addi	r8,sp,16
  2056fc:	003e8d06 	br	205134 <_gp+0xffdf3520>
  205700:	d9002d17 	ldw	r4,180(sp)
  205704:	d9801e04 	addi	r6,sp,120
  205708:	b80b883a 	mov	r5,r23
  20570c:	020b9740 	call	20b974 <__sprint_r>
  205710:	103b4a1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205714:	d8c02017 	ldw	r3,128(sp)
  205718:	dc401f17 	ldw	r17,124(sp)
  20571c:	dd800404 	addi	r22,sp,16
  205720:	003e8f06 	br	205160 <_gp+0xffdf354c>
  205724:	0027883a 	mov	r19,zero
  205728:	003f4a06 	br	205454 <_gp+0xffdf3840>
  20572c:	d9002d17 	ldw	r4,180(sp)
  205730:	d9801e04 	addi	r6,sp,120
  205734:	b80b883a 	mov	r5,r23
  205738:	020b9740 	call	20b974 <__sprint_r>
  20573c:	103b3f1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205740:	d8c02017 	ldw	r3,128(sp)
  205744:	da000404 	addi	r8,sp,16
  205748:	003c7b06 	br	204938 <_gp+0xffdf2d24>
  20574c:	d9402a17 	ldw	r5,168(sp)
  205750:	04e7c83a 	sub	r19,zero,r19
  205754:	07000b44 	movi	fp,45
  205758:	9804c03a 	cmpne	r2,r19,zero
  20575c:	05adc83a 	sub	r22,zero,r22
  205760:	df002785 	stb	fp,158(sp)
  205764:	b0adc83a 	sub	r22,r22,r2
  205768:	28017b16 	blt	r5,zero,205d58 <___vfprintf_internal_r+0x1d2c>
  20576c:	00bfdfc4 	movi	r2,-129
  205770:	90a4703a 	and	r18,r18,r2
  205774:	003b8906 	br	20459c <_gp+0xffdf2988>
  205778:	d9003617 	ldw	r4,216(sp)
  20577c:	d9403817 	ldw	r5,224(sp)
  205780:	da003d15 	stw	r8,244(sp)
  205784:	020b5980 	call	20b598 <__fpclassifyd>
  205788:	da003d17 	ldw	r8,244(sp)
  20578c:	1000f026 	beq	r2,zero,205b50 <___vfprintf_internal_r+0x1b24>
  205790:	d9002a17 	ldw	r4,168(sp)
  205794:	05bff7c4 	movi	r22,-33
  205798:	00bfffc4 	movi	r2,-1
  20579c:	8dac703a 	and	r22,r17,r22
  2057a0:	20820026 	beq	r4,r2,205fa4 <___vfprintf_internal_r+0x1f78>
  2057a4:	008011c4 	movi	r2,71
  2057a8:	b081f726 	beq	r22,r2,205f88 <___vfprintf_internal_r+0x1f5c>
  2057ac:	d9003817 	ldw	r4,224(sp)
  2057b0:	90c04014 	ori	r3,r18,256
  2057b4:	d8c02c15 	stw	r3,176(sp)
  2057b8:	20021516 	blt	r4,zero,206010 <___vfprintf_internal_r+0x1fe4>
  2057bc:	dcc03817 	ldw	r19,224(sp)
  2057c0:	d8002905 	stb	zero,164(sp)
  2057c4:	00801984 	movi	r2,102
  2057c8:	8881f926 	beq	r17,r2,205fb0 <___vfprintf_internal_r+0x1f84>
  2057cc:	00801184 	movi	r2,70
  2057d0:	88821c26 	beq	r17,r2,206044 <___vfprintf_internal_r+0x2018>
  2057d4:	00801144 	movi	r2,69
  2057d8:	b081ef26 	beq	r22,r2,205f98 <___vfprintf_internal_r+0x1f6c>
  2057dc:	d8c02a17 	ldw	r3,168(sp)
  2057e0:	d8802104 	addi	r2,sp,132
  2057e4:	d8800315 	stw	r2,12(sp)
  2057e8:	d9403617 	ldw	r5,216(sp)
  2057ec:	d8802504 	addi	r2,sp,148
  2057f0:	d9002d17 	ldw	r4,180(sp)
  2057f4:	d8800215 	stw	r2,8(sp)
  2057f8:	d8802604 	addi	r2,sp,152
  2057fc:	d8c00015 	stw	r3,0(sp)
  205800:	d8800115 	stw	r2,4(sp)
  205804:	01c00084 	movi	r7,2
  205808:	980d883a 	mov	r6,r19
  20580c:	d8c03c15 	stw	r3,240(sp)
  205810:	da003d15 	stw	r8,244(sp)
  205814:	020675c0 	call	20675c <_dtoa_r>
  205818:	1021883a 	mov	r16,r2
  20581c:	008019c4 	movi	r2,103
  205820:	d8c03c17 	ldw	r3,240(sp)
  205824:	da003d17 	ldw	r8,244(sp)
  205828:	88817126 	beq	r17,r2,205df0 <___vfprintf_internal_r+0x1dc4>
  20582c:	008011c4 	movi	r2,71
  205830:	88829126 	beq	r17,r2,206278 <___vfprintf_internal_r+0x224c>
  205834:	80f9883a 	add	fp,r16,r3
  205838:	d9003617 	ldw	r4,216(sp)
  20583c:	000d883a 	mov	r6,zero
  205840:	000f883a 	mov	r7,zero
  205844:	980b883a 	mov	r5,r19
  205848:	da003d15 	stw	r8,244(sp)
  20584c:	020f6f80 	call	20f6f8 <__eqdf2>
  205850:	da003d17 	ldw	r8,244(sp)
  205854:	10018d26 	beq	r2,zero,205e8c <___vfprintf_internal_r+0x1e60>
  205858:	d8802117 	ldw	r2,132(sp)
  20585c:	1700062e 	bgeu	r2,fp,205878 <___vfprintf_internal_r+0x184c>
  205860:	01000c04 	movi	r4,48
  205864:	10c00044 	addi	r3,r2,1
  205868:	d8c02115 	stw	r3,132(sp)
  20586c:	11000005 	stb	r4,0(r2)
  205870:	d8802117 	ldw	r2,132(sp)
  205874:	173ffb36 	bltu	r2,fp,205864 <_gp+0xffdf3c50>
  205878:	1405c83a 	sub	r2,r2,r16
  20587c:	d8803315 	stw	r2,204(sp)
  205880:	008011c4 	movi	r2,71
  205884:	b0817626 	beq	r22,r2,205e60 <___vfprintf_internal_r+0x1e34>
  205888:	00801944 	movi	r2,101
  20588c:	1442800e 	bge	r2,r17,206290 <___vfprintf_internal_r+0x2264>
  205890:	d8c02617 	ldw	r3,152(sp)
  205894:	00801984 	movi	r2,102
  205898:	d8c03215 	stw	r3,200(sp)
  20589c:	8881fe26 	beq	r17,r2,206098 <___vfprintf_internal_r+0x206c>
  2058a0:	d8c03217 	ldw	r3,200(sp)
  2058a4:	d9003317 	ldw	r4,204(sp)
  2058a8:	1901dd16 	blt	r3,r4,206020 <___vfprintf_internal_r+0x1ff4>
  2058ac:	9480004c 	andi	r18,r18,1
  2058b0:	90022b1e 	bne	r18,zero,206160 <___vfprintf_internal_r+0x2134>
  2058b4:	1805883a 	mov	r2,r3
  2058b8:	18028316 	blt	r3,zero,2062c8 <___vfprintf_internal_r+0x229c>
  2058bc:	d8c03217 	ldw	r3,200(sp)
  2058c0:	044019c4 	movi	r17,103
  2058c4:	d8c02b15 	stw	r3,172(sp)
  2058c8:	df002907 	ldb	fp,164(sp)
  2058cc:	e001531e 	bne	fp,zero,205e1c <___vfprintf_internal_r+0x1df0>
  2058d0:	df002783 	ldbu	fp,158(sp)
  2058d4:	d8802915 	stw	r2,164(sp)
  2058d8:	dc802c17 	ldw	r18,176(sp)
  2058dc:	d8002a15 	stw	zero,168(sp)
  2058e0:	003baf06 	br	2047a0 <_gp+0xffdf2b8c>
  2058e4:	d8c02e17 	ldw	r3,184(sp)
  2058e8:	d9002e17 	ldw	r4,184(sp)
  2058ec:	d9402e17 	ldw	r5,184(sp)
  2058f0:	18c00017 	ldw	r3,0(r3)
  2058f4:	21000117 	ldw	r4,4(r4)
  2058f8:	29400204 	addi	r5,r5,8
  2058fc:	d8c03615 	stw	r3,216(sp)
  205900:	d9003815 	stw	r4,224(sp)
  205904:	d9402e15 	stw	r5,184(sp)
  205908:	003b5006 	br	20464c <_gp+0xffdf2a38>
  20590c:	ac400007 	ldb	r17,0(r21)
  205910:	003a2806 	br	2041b4 <_gp+0xffdf25a0>
  205914:	9080100c 	andi	r2,r18,64
  205918:	1000a826 	beq	r2,zero,205bbc <___vfprintf_internal_r+0x1b90>
  20591c:	d8c02e17 	ldw	r3,184(sp)
  205920:	002d883a 	mov	r22,zero
  205924:	1cc0000b 	ldhu	r19,0(r3)
  205928:	18c00104 	addi	r3,r3,4
  20592c:	d8c02e15 	stw	r3,184(sp)
  205930:	003caf06 	br	204bf0 <_gp+0xffdf2fdc>
  205934:	d9002e17 	ldw	r4,184(sp)
  205938:	d9402a17 	ldw	r5,168(sp)
  20593c:	002d883a 	mov	r22,zero
  205940:	20800104 	addi	r2,r4,4
  205944:	24c00017 	ldw	r19,0(r4)
  205948:	283ebb0e 	bge	r5,zero,205438 <_gp+0xffdf3824>
  20594c:	003ef106 	br	205514 <_gp+0xffdf3900>
  205950:	9080040c 	andi	r2,r18,16
  205954:	1000921e 	bne	r2,zero,205ba0 <___vfprintf_internal_r+0x1b74>
  205958:	9480100c 	andi	r18,r18,64
  20595c:	90013926 	beq	r18,zero,205e44 <___vfprintf_internal_r+0x1e18>
  205960:	d9402e17 	ldw	r5,184(sp)
  205964:	d8c02f17 	ldw	r3,188(sp)
  205968:	28800017 	ldw	r2,0(r5)
  20596c:	29400104 	addi	r5,r5,4
  205970:	d9402e15 	stw	r5,184(sp)
  205974:	10c0000d 	sth	r3,0(r2)
  205978:	0039e406 	br	20410c <_gp+0xffdf24f8>
  20597c:	9080100c 	andi	r2,r18,64
  205980:	10008026 	beq	r2,zero,205b84 <___vfprintf_internal_r+0x1b58>
  205984:	d8802e17 	ldw	r2,184(sp)
  205988:	14c0000f 	ldh	r19,0(r2)
  20598c:	10800104 	addi	r2,r2,4
  205990:	d8802e15 	stw	r2,184(sp)
  205994:	982dd7fa 	srai	r22,r19,31
  205998:	b005883a 	mov	r2,r22
  20599c:	003af706 	br	20457c <_gp+0xffdf2968>
  2059a0:	9080100c 	andi	r2,r18,64
  2059a4:	d8002785 	stb	zero,158(sp)
  2059a8:	10008a1e 	bne	r2,zero,205bd4 <___vfprintf_internal_r+0x1ba8>
  2059ac:	d9002e17 	ldw	r4,184(sp)
  2059b0:	d9402a17 	ldw	r5,168(sp)
  2059b4:	002d883a 	mov	r22,zero
  2059b8:	20800104 	addi	r2,r4,4
  2059bc:	24c00017 	ldw	r19,0(r4)
  2059c0:	283e4b0e 	bge	r5,zero,2052f0 <_gp+0xffdf36dc>
  2059c4:	9d86b03a 	or	r3,r19,r22
  2059c8:	d8802e15 	stw	r2,184(sp)
  2059cc:	183e4c1e 	bne	r3,zero,205300 <_gp+0xffdf36ec>
  2059d0:	0039883a 	mov	fp,zero
  2059d4:	0005883a 	mov	r2,zero
  2059d8:	003d4006 	br	204edc <_gp+0xffdf32c8>
  2059dc:	01400874 	movhi	r5,33
  2059e0:	295b0a84 	addi	r5,r5,27690
  2059e4:	d9402c15 	stw	r5,176(sp)
  2059e8:	d9402c17 	ldw	r5,176(sp)
  2059ec:	1c47883a 	add	r3,r3,r17
  2059f0:	10800044 	addi	r2,r2,1
  2059f4:	41400015 	stw	r5,0(r8)
  2059f8:	44400115 	stw	r17,4(r8)
  2059fc:	d8c02015 	stw	r3,128(sp)
  205a00:	d8801f15 	stw	r2,124(sp)
  205a04:	010001c4 	movi	r4,7
  205a08:	20bec816 	blt	r4,r2,20552c <_gp+0xffdf3918>
  205a0c:	42000204 	addi	r8,r8,8
  205a10:	003ecd06 	br	205548 <_gp+0xffdf3934>
  205a14:	d9002a17 	ldw	r4,168(sp)
  205a18:	d8002785 	stb	zero,158(sp)
  205a1c:	203d2d16 	blt	r4,zero,204ed4 <_gp+0xffdf32c0>
  205a20:	00bfdfc4 	movi	r2,-129
  205a24:	90a4703a 	and	r18,r18,r2
  205a28:	003a6106 	br	2043b0 <_gp+0xffdf279c>
  205a2c:	01000874 	movhi	r4,33
  205a30:	211b0a84 	addi	r4,r4,27690
  205a34:	d9002c15 	stw	r4,176(sp)
  205a38:	003bea06 	br	2049e4 <_gp+0xffdf2dd0>
  205a3c:	d9002d17 	ldw	r4,180(sp)
  205a40:	d9801e04 	addi	r6,sp,120
  205a44:	b80b883a 	mov	r5,r23
  205a48:	020b9740 	call	20b974 <__sprint_r>
  205a4c:	103a7b1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205a50:	d8c02017 	ldw	r3,128(sp)
  205a54:	da000404 	addi	r8,sp,16
  205a58:	003d4106 	br	204f60 <_gp+0xffdf334c>
  205a5c:	d8801f17 	ldw	r2,124(sp)
  205a60:	01400874 	movhi	r5,33
  205a64:	01000044 	movi	r4,1
  205a68:	18c00044 	addi	r3,r3,1
  205a6c:	10800044 	addi	r2,r2,1
  205a70:	295b0a04 	addi	r5,r5,27688
  205a74:	41000115 	stw	r4,4(r8)
  205a78:	41400015 	stw	r5,0(r8)
  205a7c:	d8c02015 	stw	r3,128(sp)
  205a80:	d8801f15 	stw	r2,124(sp)
  205a84:	010001c4 	movi	r4,7
  205a88:	20805c16 	blt	r4,r2,205bfc <___vfprintf_internal_r+0x1bd0>
  205a8c:	42000204 	addi	r8,r8,8
  205a90:	8800041e 	bne	r17,zero,205aa4 <___vfprintf_internal_r+0x1a78>
  205a94:	d8803317 	ldw	r2,204(sp)
  205a98:	1000021e 	bne	r2,zero,205aa4 <___vfprintf_internal_r+0x1a78>
  205a9c:	9080004c 	andi	r2,r18,1
  205aa0:	103be726 	beq	r2,zero,204a40 <_gp+0xffdf2e2c>
  205aa4:	d9003717 	ldw	r4,220(sp)
  205aa8:	d8801f17 	ldw	r2,124(sp)
  205aac:	d9403417 	ldw	r5,208(sp)
  205ab0:	20c7883a 	add	r3,r4,r3
  205ab4:	10800044 	addi	r2,r2,1
  205ab8:	41000115 	stw	r4,4(r8)
  205abc:	41400015 	stw	r5,0(r8)
  205ac0:	d8c02015 	stw	r3,128(sp)
  205ac4:	d8801f15 	stw	r2,124(sp)
  205ac8:	010001c4 	movi	r4,7
  205acc:	20812116 	blt	r4,r2,205f54 <___vfprintf_internal_r+0x1f28>
  205ad0:	42000204 	addi	r8,r8,8
  205ad4:	0463c83a 	sub	r17,zero,r17
  205ad8:	0440730e 	bge	zero,r17,205ca8 <___vfprintf_internal_r+0x1c7c>
  205adc:	05800404 	movi	r22,16
  205ae0:	b440860e 	bge	r22,r17,205cfc <___vfprintf_internal_r+0x1cd0>
  205ae4:	01400874 	movhi	r5,33
  205ae8:	295b0a84 	addi	r5,r5,27690
  205aec:	d9402c15 	stw	r5,176(sp)
  205af0:	070001c4 	movi	fp,7
  205af4:	dcc02d17 	ldw	r19,180(sp)
  205af8:	00000306 	br	205b08 <___vfprintf_internal_r+0x1adc>
  205afc:	42000204 	addi	r8,r8,8
  205b00:	8c7ffc04 	addi	r17,r17,-16
  205b04:	b440800e 	bge	r22,r17,205d08 <___vfprintf_internal_r+0x1cdc>
  205b08:	18c00404 	addi	r3,r3,16
  205b0c:	10800044 	addi	r2,r2,1
  205b10:	45000015 	stw	r20,0(r8)
  205b14:	45800115 	stw	r22,4(r8)
  205b18:	d8c02015 	stw	r3,128(sp)
  205b1c:	d8801f15 	stw	r2,124(sp)
  205b20:	e0bff60e 	bge	fp,r2,205afc <_gp+0xffdf3ee8>
  205b24:	d9801e04 	addi	r6,sp,120
  205b28:	b80b883a 	mov	r5,r23
  205b2c:	9809883a 	mov	r4,r19
  205b30:	020b9740 	call	20b974 <__sprint_r>
  205b34:	103a411e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205b38:	d8c02017 	ldw	r3,128(sp)
  205b3c:	d8801f17 	ldw	r2,124(sp)
  205b40:	da000404 	addi	r8,sp,16
  205b44:	003fee06 	br	205b00 <_gp+0xffdf3eec>
  205b48:	00bfffc4 	movi	r2,-1
  205b4c:	003a3f06 	br	20444c <_gp+0xffdf2838>
  205b50:	008011c4 	movi	r2,71
  205b54:	1440b816 	blt	r2,r17,205e38 <___vfprintf_internal_r+0x1e0c>
  205b58:	04000874 	movhi	r16,33
  205b5c:	841afc04 	addi	r16,r16,27632
  205b60:	00c000c4 	movi	r3,3
  205b64:	00bfdfc4 	movi	r2,-129
  205b68:	d8c02915 	stw	r3,164(sp)
  205b6c:	90a4703a 	and	r18,r18,r2
  205b70:	df002783 	ldbu	fp,158(sp)
  205b74:	d8c02b15 	stw	r3,172(sp)
  205b78:	d8002a15 	stw	zero,168(sp)
  205b7c:	d8003215 	stw	zero,200(sp)
  205b80:	003b0706 	br	2047a0 <_gp+0xffdf2b8c>
  205b84:	d8c02e17 	ldw	r3,184(sp)
  205b88:	1cc00017 	ldw	r19,0(r3)
  205b8c:	18c00104 	addi	r3,r3,4
  205b90:	d8c02e15 	stw	r3,184(sp)
  205b94:	982dd7fa 	srai	r22,r19,31
  205b98:	b005883a 	mov	r2,r22
  205b9c:	003a7706 	br	20457c <_gp+0xffdf2968>
  205ba0:	d8c02e17 	ldw	r3,184(sp)
  205ba4:	d9002f17 	ldw	r4,188(sp)
  205ba8:	18800017 	ldw	r2,0(r3)
  205bac:	18c00104 	addi	r3,r3,4
  205bb0:	d8c02e15 	stw	r3,184(sp)
  205bb4:	11000015 	stw	r4,0(r2)
  205bb8:	00395406 	br	20410c <_gp+0xffdf24f8>
  205bbc:	d9002e17 	ldw	r4,184(sp)
  205bc0:	002d883a 	mov	r22,zero
  205bc4:	24c00017 	ldw	r19,0(r4)
  205bc8:	21000104 	addi	r4,r4,4
  205bcc:	d9002e15 	stw	r4,184(sp)
  205bd0:	003c0706 	br	204bf0 <_gp+0xffdf2fdc>
  205bd4:	d9402e17 	ldw	r5,184(sp)
  205bd8:	d8c02a17 	ldw	r3,168(sp)
  205bdc:	002d883a 	mov	r22,zero
  205be0:	28800104 	addi	r2,r5,4
  205be4:	2cc0000b 	ldhu	r19,0(r5)
  205be8:	183dc10e 	bge	r3,zero,2052f0 <_gp+0xffdf36dc>
  205bec:	003f7506 	br	2059c4 <_gp+0xffdf3db0>
  205bf0:	04000874 	movhi	r16,33
  205bf4:	841afa04 	addi	r16,r16,27624
  205bf8:	003aa706 	br	204698 <_gp+0xffdf2a84>
  205bfc:	d9002d17 	ldw	r4,180(sp)
  205c00:	d9801e04 	addi	r6,sp,120
  205c04:	b80b883a 	mov	r5,r23
  205c08:	020b9740 	call	20b974 <__sprint_r>
  205c0c:	103a0b1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205c10:	dc402617 	ldw	r17,152(sp)
  205c14:	d8c02017 	ldw	r3,128(sp)
  205c18:	da000404 	addi	r8,sp,16
  205c1c:	003f9c06 	br	205a90 <_gp+0xffdf3e7c>
  205c20:	ac400043 	ldbu	r17,1(r21)
  205c24:	84000814 	ori	r16,r16,32
  205c28:	ad400044 	addi	r21,r21,1
  205c2c:	8c403fcc 	andi	r17,r17,255
  205c30:	8c40201c 	xori	r17,r17,128
  205c34:	8c7fe004 	addi	r17,r17,-128
  205c38:	00395e06 	br	2041b4 <_gp+0xffdf25a0>
  205c3c:	d8c02e15 	stw	r3,184(sp)
  205c40:	0039883a 	mov	fp,zero
  205c44:	003e3506 	br	20551c <_gp+0xffdf3908>
  205c48:	d9002d17 	ldw	r4,180(sp)
  205c4c:	d9801e04 	addi	r6,sp,120
  205c50:	b80b883a 	mov	r5,r23
  205c54:	020b9740 	call	20b974 <__sprint_r>
  205c58:	1039f81e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205c5c:	d8c02017 	ldw	r3,128(sp)
  205c60:	da000404 	addi	r8,sp,16
  205c64:	003cd006 	br	204fa8 <_gp+0xffdf3394>
  205c68:	8009883a 	mov	r4,r16
  205c6c:	df003d15 	stw	fp,244(sp)
  205c70:	0203f940 	call	203f94 <strlen>
  205c74:	d8802b15 	stw	r2,172(sp)
  205c78:	da003d17 	ldw	r8,244(sp)
  205c7c:	103c200e 	bge	r2,zero,204d00 <_gp+0xffdf30ec>
  205c80:	0005883a 	mov	r2,zero
  205c84:	003c1e06 	br	204d00 <_gp+0xffdf30ec>
  205c88:	d9002d17 	ldw	r4,180(sp)
  205c8c:	d9801e04 	addi	r6,sp,120
  205c90:	b80b883a 	mov	r5,r23
  205c94:	020b9740 	call	20b974 <__sprint_r>
  205c98:	1039e81e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205c9c:	d8c02017 	ldw	r3,128(sp)
  205ca0:	d8801f17 	ldw	r2,124(sp)
  205ca4:	da000404 	addi	r8,sp,16
  205ca8:	d9403317 	ldw	r5,204(sp)
  205cac:	10800044 	addi	r2,r2,1
  205cb0:	44000015 	stw	r16,0(r8)
  205cb4:	28c7883a 	add	r3,r5,r3
  205cb8:	003b5b06 	br	204a28 <_gp+0xffdf2e14>
  205cbc:	01000874 	movhi	r4,33
  205cc0:	211b0e84 	addi	r4,r4,27706
  205cc4:	d9003515 	stw	r4,212(sp)
  205cc8:	003af206 	br	204894 <_gp+0xffdf2c80>
  205ccc:	013fffc4 	movi	r4,-1
  205cd0:	003a0806 	br	2044f4 <_gp+0xffdf28e0>
  205cd4:	0023883a 	mov	r17,zero
  205cd8:	003d9d06 	br	205350 <_gp+0xffdf373c>
  205cdc:	d9002d17 	ldw	r4,180(sp)
  205ce0:	d9801e04 	addi	r6,sp,120
  205ce4:	b80b883a 	mov	r5,r23
  205ce8:	020b9740 	call	20b974 <__sprint_r>
  205cec:	1039d31e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205cf0:	d8c02017 	ldw	r3,128(sp)
  205cf4:	da000404 	addi	r8,sp,16
  205cf8:	003d9406 	br	20534c <_gp+0xffdf3738>
  205cfc:	01000874 	movhi	r4,33
  205d00:	211b0a84 	addi	r4,r4,27690
  205d04:	d9002c15 	stw	r4,176(sp)
  205d08:	d9002c17 	ldw	r4,176(sp)
  205d0c:	1c47883a 	add	r3,r3,r17
  205d10:	10800044 	addi	r2,r2,1
  205d14:	41000015 	stw	r4,0(r8)
  205d18:	44400115 	stw	r17,4(r8)
  205d1c:	d8c02015 	stw	r3,128(sp)
  205d20:	d8801f15 	stw	r2,124(sp)
  205d24:	010001c4 	movi	r4,7
  205d28:	20bfd716 	blt	r4,r2,205c88 <_gp+0xffdf4074>
  205d2c:	42000204 	addi	r8,r8,8
  205d30:	003fdd06 	br	205ca8 <_gp+0xffdf4094>
  205d34:	d9002d17 	ldw	r4,180(sp)
  205d38:	d9801e04 	addi	r6,sp,120
  205d3c:	b80b883a 	mov	r5,r23
  205d40:	020b9740 	call	20b974 <__sprint_r>
  205d44:	1039bd1e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205d48:	d8802617 	ldw	r2,152(sp)
  205d4c:	d8c02017 	ldw	r3,128(sp)
  205d50:	da000404 	addi	r8,sp,16
  205d54:	003e1006 	br	205598 <_gp+0xffdf3984>
  205d58:	00800044 	movi	r2,1
  205d5c:	10803fcc 	andi	r2,r2,255
  205d60:	00c00044 	movi	r3,1
  205d64:	10fa0d26 	beq	r2,r3,20459c <_gp+0xffdf2988>
  205d68:	00c00084 	movi	r3,2
  205d6c:	10fbaf26 	beq	r2,r3,204c2c <_gp+0xffdf3018>
  205d70:	003a6d06 	br	204728 <_gp+0xffdf2b14>
  205d74:	01000874 	movhi	r4,33
  205d78:	211b0e84 	addi	r4,r4,27706
  205d7c:	d9003515 	stw	r4,212(sp)
  205d80:	003b5406 	br	204ad4 <_gp+0xffdf2ec0>
  205d84:	d8802a17 	ldw	r2,168(sp)
  205d88:	00c00184 	movi	r3,6
  205d8c:	1880012e 	bgeu	r3,r2,205d94 <___vfprintf_internal_r+0x1d68>
  205d90:	1805883a 	mov	r2,r3
  205d94:	d8802b15 	stw	r2,172(sp)
  205d98:	1000ef16 	blt	r2,zero,206158 <___vfprintf_internal_r+0x212c>
  205d9c:	04000874 	movhi	r16,33
  205da0:	d8802915 	stw	r2,164(sp)
  205da4:	dcc02e15 	stw	r19,184(sp)
  205da8:	d8002a15 	stw	zero,168(sp)
  205dac:	d8003215 	stw	zero,200(sp)
  205db0:	841b0804 	addi	r16,r16,27680
  205db4:	0039883a 	mov	fp,zero
  205db8:	003a8006 	br	2047bc <_gp+0xffdf2ba8>
  205dbc:	0021883a 	mov	r16,zero
  205dc0:	003e0706 	br	2055e0 <_gp+0xffdf39cc>
  205dc4:	d9002d17 	ldw	r4,180(sp)
  205dc8:	d9801e04 	addi	r6,sp,120
  205dcc:	b80b883a 	mov	r5,r23
  205dd0:	020b9740 	call	20b974 <__sprint_r>
  205dd4:	1039991e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205dd8:	d8802617 	ldw	r2,152(sp)
  205ddc:	d9403317 	ldw	r5,204(sp)
  205de0:	d8c02017 	ldw	r3,128(sp)
  205de4:	da000404 	addi	r8,sp,16
  205de8:	2885c83a 	sub	r2,r5,r2
  205dec:	003dfb06 	br	2055dc <_gp+0xffdf39c8>
  205df0:	9080004c 	andi	r2,r18,1
  205df4:	103e8f1e 	bne	r2,zero,205834 <_gp+0xffdf3c20>
  205df8:	d8802117 	ldw	r2,132(sp)
  205dfc:	003e9e06 	br	205878 <_gp+0xffdf3c64>
  205e00:	1025883a 	mov	r18,r2
  205e04:	0039883a 	mov	fp,zero
  205e08:	00800084 	movi	r2,2
  205e0c:	003fd306 	br	205d5c <_gp+0xffdf4148>
  205e10:	07000b44 	movi	fp,45
  205e14:	df002785 	stb	fp,158(sp)
  205e18:	003a1b06 	br	204688 <_gp+0xffdf2a74>
  205e1c:	00c00b44 	movi	r3,45
  205e20:	d8c02785 	stb	r3,158(sp)
  205e24:	d8802915 	stw	r2,164(sp)
  205e28:	dc802c17 	ldw	r18,176(sp)
  205e2c:	d8002a15 	stw	zero,168(sp)
  205e30:	07000b44 	movi	fp,45
  205e34:	003a5e06 	br	2047b0 <_gp+0xffdf2b9c>
  205e38:	04000874 	movhi	r16,33
  205e3c:	841afd04 	addi	r16,r16,27636
  205e40:	003f4706 	br	205b60 <_gp+0xffdf3f4c>
  205e44:	d9002e17 	ldw	r4,184(sp)
  205e48:	d9402f17 	ldw	r5,188(sp)
  205e4c:	20800017 	ldw	r2,0(r4)
  205e50:	21000104 	addi	r4,r4,4
  205e54:	d9002e15 	stw	r4,184(sp)
  205e58:	11400015 	stw	r5,0(r2)
  205e5c:	0038ab06 	br	20410c <_gp+0xffdf24f8>
  205e60:	dd802617 	ldw	r22,152(sp)
  205e64:	00bfff44 	movi	r2,-3
  205e68:	b0801c16 	blt	r22,r2,205edc <___vfprintf_internal_r+0x1eb0>
  205e6c:	d9402a17 	ldw	r5,168(sp)
  205e70:	2d801a16 	blt	r5,r22,205edc <___vfprintf_internal_r+0x1eb0>
  205e74:	dd803215 	stw	r22,200(sp)
  205e78:	003e8906 	br	2058a0 <_gp+0xffdf3c8c>
  205e7c:	01000874 	movhi	r4,33
  205e80:	211b0a84 	addi	r4,r4,27690
  205e84:	d9002c15 	stw	r4,176(sp)
  205e88:	003c9106 	br	2050d0 <_gp+0xffdf34bc>
  205e8c:	e005883a 	mov	r2,fp
  205e90:	003e7906 	br	205878 <_gp+0xffdf3c64>
  205e94:	d9002a17 	ldw	r4,168(sp)
  205e98:	df002783 	ldbu	fp,158(sp)
  205e9c:	dcc02e15 	stw	r19,184(sp)
  205ea0:	d9002915 	stw	r4,164(sp)
  205ea4:	d9002b15 	stw	r4,172(sp)
  205ea8:	d8002a15 	stw	zero,168(sp)
  205eac:	d8003215 	stw	zero,200(sp)
  205eb0:	003a3b06 	br	2047a0 <_gp+0xffdf2b8c>
  205eb4:	9080004c 	andi	r2,r18,1
  205eb8:	0039883a 	mov	fp,zero
  205ebc:	10000426 	beq	r2,zero,205ed0 <___vfprintf_internal_r+0x1ea4>
  205ec0:	00800c04 	movi	r2,48
  205ec4:	dc001dc4 	addi	r16,sp,119
  205ec8:	d8801dc5 	stb	r2,119(sp)
  205ecc:	003b6406 	br	204c60 <_gp+0xffdf304c>
  205ed0:	d8002b15 	stw	zero,172(sp)
  205ed4:	dc001e04 	addi	r16,sp,120
  205ed8:	003a2b06 	br	204788 <_gp+0xffdf2b74>
  205edc:	8c7fff84 	addi	r17,r17,-2
  205ee0:	b5bfffc4 	addi	r22,r22,-1
  205ee4:	dd802615 	stw	r22,152(sp)
  205ee8:	dc4022c5 	stb	r17,139(sp)
  205eec:	b000bf16 	blt	r22,zero,2061ec <___vfprintf_internal_r+0x21c0>
  205ef0:	00800ac4 	movi	r2,43
  205ef4:	d8802305 	stb	r2,140(sp)
  205ef8:	00800244 	movi	r2,9
  205efc:	15807016 	blt	r2,r22,2060c0 <___vfprintf_internal_r+0x2094>
  205f00:	00800c04 	movi	r2,48
  205f04:	b5800c04 	addi	r22,r22,48
  205f08:	d8802345 	stb	r2,141(sp)
  205f0c:	dd802385 	stb	r22,142(sp)
  205f10:	d88023c4 	addi	r2,sp,143
  205f14:	df0022c4 	addi	fp,sp,139
  205f18:	d8c03317 	ldw	r3,204(sp)
  205f1c:	1739c83a 	sub	fp,r2,fp
  205f20:	d9003317 	ldw	r4,204(sp)
  205f24:	e0c7883a 	add	r3,fp,r3
  205f28:	df003a15 	stw	fp,232(sp)
  205f2c:	d8c02b15 	stw	r3,172(sp)
  205f30:	00800044 	movi	r2,1
  205f34:	1100b30e 	bge	r2,r4,206204 <___vfprintf_internal_r+0x21d8>
  205f38:	d8c02b17 	ldw	r3,172(sp)
  205f3c:	18c00044 	addi	r3,r3,1
  205f40:	d8c02b15 	stw	r3,172(sp)
  205f44:	1805883a 	mov	r2,r3
  205f48:	1800ac16 	blt	r3,zero,2061fc <___vfprintf_internal_r+0x21d0>
  205f4c:	d8003215 	stw	zero,200(sp)
  205f50:	003e5d06 	br	2058c8 <_gp+0xffdf3cb4>
  205f54:	d9002d17 	ldw	r4,180(sp)
  205f58:	d9801e04 	addi	r6,sp,120
  205f5c:	b80b883a 	mov	r5,r23
  205f60:	020b9740 	call	20b974 <__sprint_r>
  205f64:	1039351e 	bne	r2,zero,20443c <_gp+0xffdf2828>
  205f68:	dc402617 	ldw	r17,152(sp)
  205f6c:	d8c02017 	ldw	r3,128(sp)
  205f70:	d8801f17 	ldw	r2,124(sp)
  205f74:	da000404 	addi	r8,sp,16
  205f78:	003ed606 	br	205ad4 <_gp+0xffdf3ec0>
  205f7c:	182b883a 	mov	r21,r3
  205f80:	d8002a15 	stw	zero,168(sp)
  205f84:	00388c06 	br	2041b8 <_gp+0xffdf25a4>
  205f88:	d8802a17 	ldw	r2,168(sp)
  205f8c:	103e071e 	bne	r2,zero,2057ac <_gp+0xffdf3b98>
  205f90:	dc002a15 	stw	r16,168(sp)
  205f94:	003e0506 	br	2057ac <_gp+0xffdf3b98>
  205f98:	d9002a17 	ldw	r4,168(sp)
  205f9c:	20c00044 	addi	r3,r4,1
  205fa0:	003e0f06 	br	2057e0 <_gp+0xffdf3bcc>
  205fa4:	01400184 	movi	r5,6
  205fa8:	d9402a15 	stw	r5,168(sp)
  205fac:	003dff06 	br	2057ac <_gp+0xffdf3b98>
  205fb0:	d8802104 	addi	r2,sp,132
  205fb4:	d8800315 	stw	r2,12(sp)
  205fb8:	d8802504 	addi	r2,sp,148
  205fbc:	d8800215 	stw	r2,8(sp)
  205fc0:	d8802604 	addi	r2,sp,152
  205fc4:	d8800115 	stw	r2,4(sp)
  205fc8:	d8802a17 	ldw	r2,168(sp)
  205fcc:	d9403617 	ldw	r5,216(sp)
  205fd0:	d9002d17 	ldw	r4,180(sp)
  205fd4:	d8800015 	stw	r2,0(sp)
  205fd8:	01c000c4 	movi	r7,3
  205fdc:	980d883a 	mov	r6,r19
  205fe0:	da003d15 	stw	r8,244(sp)
  205fe4:	020675c0 	call	20675c <_dtoa_r>
  205fe8:	d8c02a17 	ldw	r3,168(sp)
  205fec:	da003d17 	ldw	r8,244(sp)
  205ff0:	1021883a 	mov	r16,r2
  205ff4:	10f9883a 	add	fp,r2,r3
  205ff8:	81000007 	ldb	r4,0(r16)
  205ffc:	00800c04 	movi	r2,48
  206000:	20805e26 	beq	r4,r2,20617c <___vfprintf_internal_r+0x2150>
  206004:	d8c02617 	ldw	r3,152(sp)
  206008:	e0f9883a 	add	fp,fp,r3
  20600c:	003e0a06 	br	205838 <_gp+0xffdf3c24>
  206010:	00c00b44 	movi	r3,45
  206014:	24e0003c 	xorhi	r19,r4,32768
  206018:	d8c02905 	stb	r3,164(sp)
  20601c:	003de906 	br	2057c4 <_gp+0xffdf3bb0>
  206020:	d8c03217 	ldw	r3,200(sp)
  206024:	00c07a0e 	bge	zero,r3,206210 <___vfprintf_internal_r+0x21e4>
  206028:	00800044 	movi	r2,1
  20602c:	d9003317 	ldw	r4,204(sp)
  206030:	1105883a 	add	r2,r2,r4
  206034:	d8802b15 	stw	r2,172(sp)
  206038:	10004e16 	blt	r2,zero,206174 <___vfprintf_internal_r+0x2148>
  20603c:	044019c4 	movi	r17,103
  206040:	003e2106 	br	2058c8 <_gp+0xffdf3cb4>
  206044:	d9002a17 	ldw	r4,168(sp)
  206048:	d8802104 	addi	r2,sp,132
  20604c:	d8800315 	stw	r2,12(sp)
  206050:	d9000015 	stw	r4,0(sp)
  206054:	d8802504 	addi	r2,sp,148
  206058:	d9403617 	ldw	r5,216(sp)
  20605c:	d9002d17 	ldw	r4,180(sp)
  206060:	d8800215 	stw	r2,8(sp)
  206064:	d8802604 	addi	r2,sp,152
  206068:	d8800115 	stw	r2,4(sp)
  20606c:	01c000c4 	movi	r7,3
  206070:	980d883a 	mov	r6,r19
  206074:	da003d15 	stw	r8,244(sp)
  206078:	020675c0 	call	20675c <_dtoa_r>
  20607c:	d8c02a17 	ldw	r3,168(sp)
  206080:	da003d17 	ldw	r8,244(sp)
  206084:	1021883a 	mov	r16,r2
  206088:	00801184 	movi	r2,70
  20608c:	80f9883a 	add	fp,r16,r3
  206090:	88bfd926 	beq	r17,r2,205ff8 <_gp+0xffdf43e4>
  206094:	003de806 	br	205838 <_gp+0xffdf3c24>
  206098:	d9002a17 	ldw	r4,168(sp)
  20609c:	00c04d0e 	bge	zero,r3,2061d4 <___vfprintf_internal_r+0x21a8>
  2060a0:	2000441e 	bne	r4,zero,2061b4 <___vfprintf_internal_r+0x2188>
  2060a4:	9480004c 	andi	r18,r18,1
  2060a8:	9000421e 	bne	r18,zero,2061b4 <___vfprintf_internal_r+0x2188>
  2060ac:	1805883a 	mov	r2,r3
  2060b0:	18006f16 	blt	r3,zero,206270 <___vfprintf_internal_r+0x2244>
  2060b4:	d8c03217 	ldw	r3,200(sp)
  2060b8:	d8c02b15 	stw	r3,172(sp)
  2060bc:	003e0206 	br	2058c8 <_gp+0xffdf3cb4>
  2060c0:	df0022c4 	addi	fp,sp,139
  2060c4:	dc002a15 	stw	r16,168(sp)
  2060c8:	4027883a 	mov	r19,r8
  2060cc:	e021883a 	mov	r16,fp
  2060d0:	b009883a 	mov	r4,r22
  2060d4:	01400284 	movi	r5,10
  2060d8:	02031480 	call	203148 <__modsi3>
  2060dc:	10800c04 	addi	r2,r2,48
  2060e0:	843fffc4 	addi	r16,r16,-1
  2060e4:	b009883a 	mov	r4,r22
  2060e8:	01400284 	movi	r5,10
  2060ec:	80800005 	stb	r2,0(r16)
  2060f0:	02030c40 	call	2030c4 <__divsi3>
  2060f4:	102d883a 	mov	r22,r2
  2060f8:	00800244 	movi	r2,9
  2060fc:	15bff416 	blt	r2,r22,2060d0 <_gp+0xffdf44bc>
  206100:	9811883a 	mov	r8,r19
  206104:	b0800c04 	addi	r2,r22,48
  206108:	8027883a 	mov	r19,r16
  20610c:	997fffc4 	addi	r5,r19,-1
  206110:	98bfffc5 	stb	r2,-1(r19)
  206114:	dc002a17 	ldw	r16,168(sp)
  206118:	2f006d2e 	bgeu	r5,fp,2062d0 <___vfprintf_internal_r+0x22a4>
  20611c:	d9c02384 	addi	r7,sp,142
  206120:	3ccfc83a 	sub	r7,r7,r19
  206124:	d9002344 	addi	r4,sp,141
  206128:	e1cf883a 	add	r7,fp,r7
  20612c:	00000106 	br	206134 <___vfprintf_internal_r+0x2108>
  206130:	28800003 	ldbu	r2,0(r5)
  206134:	20800005 	stb	r2,0(r4)
  206138:	21000044 	addi	r4,r4,1
  20613c:	29400044 	addi	r5,r5,1
  206140:	393ffb1e 	bne	r7,r4,206130 <_gp+0xffdf451c>
  206144:	d8802304 	addi	r2,sp,140
  206148:	14c5c83a 	sub	r2,r2,r19
  20614c:	d8c02344 	addi	r3,sp,141
  206150:	1885883a 	add	r2,r3,r2
  206154:	003f7006 	br	205f18 <_gp+0xffdf4304>
  206158:	0005883a 	mov	r2,zero
  20615c:	003f0f06 	br	205d9c <_gp+0xffdf4188>
  206160:	d8c03217 	ldw	r3,200(sp)
  206164:	18c00044 	addi	r3,r3,1
  206168:	d8c02b15 	stw	r3,172(sp)
  20616c:	1805883a 	mov	r2,r3
  206170:	183fb20e 	bge	r3,zero,20603c <_gp+0xffdf4428>
  206174:	0005883a 	mov	r2,zero
  206178:	003fb006 	br	20603c <_gp+0xffdf4428>
  20617c:	d9003617 	ldw	r4,216(sp)
  206180:	000d883a 	mov	r6,zero
  206184:	000f883a 	mov	r7,zero
  206188:	980b883a 	mov	r5,r19
  20618c:	d8c03c15 	stw	r3,240(sp)
  206190:	da003d15 	stw	r8,244(sp)
  206194:	020f6f80 	call	20f6f8 <__eqdf2>
  206198:	d8c03c17 	ldw	r3,240(sp)
  20619c:	da003d17 	ldw	r8,244(sp)
  2061a0:	103f9826 	beq	r2,zero,206004 <_gp+0xffdf43f0>
  2061a4:	00800044 	movi	r2,1
  2061a8:	10c7c83a 	sub	r3,r2,r3
  2061ac:	d8c02615 	stw	r3,152(sp)
  2061b0:	003f9506 	br	206008 <_gp+0xffdf43f4>
  2061b4:	d9002a17 	ldw	r4,168(sp)
  2061b8:	d8c03217 	ldw	r3,200(sp)
  2061bc:	20800044 	addi	r2,r4,1
  2061c0:	1885883a 	add	r2,r3,r2
  2061c4:	d8802b15 	stw	r2,172(sp)
  2061c8:	103dbf0e 	bge	r2,zero,2058c8 <_gp+0xffdf3cb4>
  2061cc:	0005883a 	mov	r2,zero
  2061d0:	003dbd06 	br	2058c8 <_gp+0xffdf3cb4>
  2061d4:	2000201e 	bne	r4,zero,206258 <___vfprintf_internal_r+0x222c>
  2061d8:	9480004c 	andi	r18,r18,1
  2061dc:	90001e1e 	bne	r18,zero,206258 <___vfprintf_internal_r+0x222c>
  2061e0:	00800044 	movi	r2,1
  2061e4:	d8802b15 	stw	r2,172(sp)
  2061e8:	003db706 	br	2058c8 <_gp+0xffdf3cb4>
  2061ec:	00800b44 	movi	r2,45
  2061f0:	05adc83a 	sub	r22,zero,r22
  2061f4:	d8802305 	stb	r2,140(sp)
  2061f8:	003f3f06 	br	205ef8 <_gp+0xffdf42e4>
  2061fc:	0005883a 	mov	r2,zero
  206200:	003f5206 	br	205f4c <_gp+0xffdf4338>
  206204:	90a4703a 	and	r18,r18,r2
  206208:	903f4e26 	beq	r18,zero,205f44 <_gp+0xffdf4330>
  20620c:	003f4a06 	br	205f38 <_gp+0xffdf4324>
  206210:	00800084 	movi	r2,2
  206214:	10c5c83a 	sub	r2,r2,r3
  206218:	003f8406 	br	20602c <_gp+0xffdf4418>
  20621c:	d9402e17 	ldw	r5,184(sp)
  206220:	d9002e17 	ldw	r4,184(sp)
  206224:	ac400043 	ldbu	r17,1(r21)
  206228:	29400017 	ldw	r5,0(r5)
  20622c:	20800104 	addi	r2,r4,4
  206230:	d8802e15 	stw	r2,184(sp)
  206234:	d9402a15 	stw	r5,168(sp)
  206238:	182b883a 	mov	r21,r3
  20623c:	283e7b0e 	bge	r5,zero,205c2c <_gp+0xffdf4018>
  206240:	8c403fcc 	andi	r17,r17,255
  206244:	017fffc4 	movi	r5,-1
  206248:	8c40201c 	xori	r17,r17,128
  20624c:	d9402a15 	stw	r5,168(sp)
  206250:	8c7fe004 	addi	r17,r17,-128
  206254:	0037d706 	br	2041b4 <_gp+0xffdf25a0>
  206258:	d8c02a17 	ldw	r3,168(sp)
  20625c:	18c00084 	addi	r3,r3,2
  206260:	d8c02b15 	stw	r3,172(sp)
  206264:	1805883a 	mov	r2,r3
  206268:	183d970e 	bge	r3,zero,2058c8 <_gp+0xffdf3cb4>
  20626c:	003fd706 	br	2061cc <_gp+0xffdf45b8>
  206270:	0005883a 	mov	r2,zero
  206274:	003f8f06 	br	2060b4 <_gp+0xffdf44a0>
  206278:	9080004c 	andi	r2,r18,1
  20627c:	103f821e 	bne	r2,zero,206088 <_gp+0xffdf4474>
  206280:	d8802117 	ldw	r2,132(sp)
  206284:	1405c83a 	sub	r2,r2,r16
  206288:	d8803315 	stw	r2,204(sp)
  20628c:	b47ef426 	beq	r22,r17,205e60 <_gp+0xffdf424c>
  206290:	dd802617 	ldw	r22,152(sp)
  206294:	003f1206 	br	205ee0 <_gp+0xffdf42cc>
  206298:	d8c02b03 	ldbu	r3,172(sp)
  20629c:	d8c02785 	stb	r3,158(sp)
  2062a0:	0038df06 	br	204620 <_gp+0xffdf2a0c>
  2062a4:	d8c02b03 	ldbu	r3,172(sp)
  2062a8:	d8c02785 	stb	r3,158(sp)
  2062ac:	0038aa06 	br	204558 <_gp+0xffdf2944>
  2062b0:	d8c02b03 	ldbu	r3,172(sp)
  2062b4:	d8c02785 	stb	r3,158(sp)
  2062b8:	003a4306 	br	204bc8 <_gp+0xffdf2fb4>
  2062bc:	d8c02b03 	ldbu	r3,172(sp)
  2062c0:	d8c02785 	stb	r3,158(sp)
  2062c4:	003af506 	br	204e9c <_gp+0xffdf3288>
  2062c8:	0005883a 	mov	r2,zero
  2062cc:	003d7b06 	br	2058bc <_gp+0xffdf3ca8>
  2062d0:	d8802344 	addi	r2,sp,141
  2062d4:	003f1006 	br	205f18 <_gp+0xffdf4304>
  2062d8:	d8c02b03 	ldbu	r3,172(sp)
  2062dc:	d8c02785 	stb	r3,158(sp)
  2062e0:	0038fd06 	br	2046d8 <_gp+0xffdf2ac4>
  2062e4:	d8c02b03 	ldbu	r3,172(sp)
  2062e8:	d8c02785 	stb	r3,158(sp)
  2062ec:	003a9706 	br	204d4c <_gp+0xffdf3138>
  2062f0:	d8c02b03 	ldbu	r3,172(sp)
  2062f4:	d8c02785 	stb	r3,158(sp)
  2062f8:	003a1806 	br	204b5c <_gp+0xffdf2f48>
  2062fc:	d8c02b03 	ldbu	r3,172(sp)
  206300:	d8c02785 	stb	r3,158(sp)
  206304:	003abe06 	br	204e00 <_gp+0xffdf31ec>

00206308 <__vfprintf_internal>:
  206308:	00801074 	movhi	r2,65
  20630c:	10a70a04 	addi	r2,r2,-25560
  206310:	300f883a 	mov	r7,r6
  206314:	280d883a 	mov	r6,r5
  206318:	200b883a 	mov	r5,r4
  20631c:	11000017 	ldw	r4,0(r2)
  206320:	020402c1 	jmpi	20402c <___vfprintf_internal_r>

00206324 <__sbprintf>:
  206324:	2880030b 	ldhu	r2,12(r5)
  206328:	2ac01917 	ldw	r11,100(r5)
  20632c:	2a80038b 	ldhu	r10,14(r5)
  206330:	2a400717 	ldw	r9,28(r5)
  206334:	2a000917 	ldw	r8,36(r5)
  206338:	defee204 	addi	sp,sp,-1144
  20633c:	00c10004 	movi	r3,1024
  206340:	dc011a15 	stw	r16,1128(sp)
  206344:	10bfff4c 	andi	r2,r2,65533
  206348:	2821883a 	mov	r16,r5
  20634c:	d8cb883a 	add	r5,sp,r3
  206350:	dc811c15 	stw	r18,1136(sp)
  206354:	dc411b15 	stw	r17,1132(sp)
  206358:	dfc11d15 	stw	ra,1140(sp)
  20635c:	2025883a 	mov	r18,r4
  206360:	d881030d 	sth	r2,1036(sp)
  206364:	dac11915 	stw	r11,1124(sp)
  206368:	da81038d 	sth	r10,1038(sp)
  20636c:	da410715 	stw	r9,1052(sp)
  206370:	da010915 	stw	r8,1060(sp)
  206374:	dec10015 	stw	sp,1024(sp)
  206378:	dec10415 	stw	sp,1040(sp)
  20637c:	d8c10215 	stw	r3,1032(sp)
  206380:	d8c10515 	stw	r3,1044(sp)
  206384:	d8010615 	stw	zero,1048(sp)
  206388:	020402c0 	call	20402c <___vfprintf_internal_r>
  20638c:	1023883a 	mov	r17,r2
  206390:	10000416 	blt	r2,zero,2063a4 <__sbprintf+0x80>
  206394:	d9410004 	addi	r5,sp,1024
  206398:	9009883a 	mov	r4,r18
  20639c:	02080000 	call	208000 <_fflush_r>
  2063a0:	10000d1e 	bne	r2,zero,2063d8 <__sbprintf+0xb4>
  2063a4:	d881030b 	ldhu	r2,1036(sp)
  2063a8:	1080100c 	andi	r2,r2,64
  2063ac:	10000326 	beq	r2,zero,2063bc <__sbprintf+0x98>
  2063b0:	8080030b 	ldhu	r2,12(r16)
  2063b4:	10801014 	ori	r2,r2,64
  2063b8:	8080030d 	sth	r2,12(r16)
  2063bc:	8805883a 	mov	r2,r17
  2063c0:	dfc11d17 	ldw	ra,1140(sp)
  2063c4:	dc811c17 	ldw	r18,1136(sp)
  2063c8:	dc411b17 	ldw	r17,1132(sp)
  2063cc:	dc011a17 	ldw	r16,1128(sp)
  2063d0:	dec11e04 	addi	sp,sp,1144
  2063d4:	f800283a 	ret
  2063d8:	047fffc4 	movi	r17,-1
  2063dc:	003ff106 	br	2063a4 <_gp+0xffdf4790>

002063e0 <__swsetup_r>:
  2063e0:	00801074 	movhi	r2,65
  2063e4:	defffd04 	addi	sp,sp,-12
  2063e8:	10a70a04 	addi	r2,r2,-25560
  2063ec:	dc400115 	stw	r17,4(sp)
  2063f0:	2023883a 	mov	r17,r4
  2063f4:	11000017 	ldw	r4,0(r2)
  2063f8:	dc000015 	stw	r16,0(sp)
  2063fc:	dfc00215 	stw	ra,8(sp)
  206400:	2821883a 	mov	r16,r5
  206404:	20000226 	beq	r4,zero,206410 <__swsetup_r+0x30>
  206408:	20800e17 	ldw	r2,56(r4)
  20640c:	10003126 	beq	r2,zero,2064d4 <__swsetup_r+0xf4>
  206410:	8080030b 	ldhu	r2,12(r16)
  206414:	10c0020c 	andi	r3,r2,8
  206418:	1009883a 	mov	r4,r2
  20641c:	18000f26 	beq	r3,zero,20645c <__swsetup_r+0x7c>
  206420:	80c00417 	ldw	r3,16(r16)
  206424:	18001526 	beq	r3,zero,20647c <__swsetup_r+0x9c>
  206428:	1100004c 	andi	r4,r2,1
  20642c:	20001c1e 	bne	r4,zero,2064a0 <__swsetup_r+0xc0>
  206430:	1080008c 	andi	r2,r2,2
  206434:	1000291e 	bne	r2,zero,2064dc <__swsetup_r+0xfc>
  206438:	80800517 	ldw	r2,20(r16)
  20643c:	80800215 	stw	r2,8(r16)
  206440:	18001c26 	beq	r3,zero,2064b4 <__swsetup_r+0xd4>
  206444:	0005883a 	mov	r2,zero
  206448:	dfc00217 	ldw	ra,8(sp)
  20644c:	dc400117 	ldw	r17,4(sp)
  206450:	dc000017 	ldw	r16,0(sp)
  206454:	dec00304 	addi	sp,sp,12
  206458:	f800283a 	ret
  20645c:	2080040c 	andi	r2,r4,16
  206460:	10002e26 	beq	r2,zero,20651c <__swsetup_r+0x13c>
  206464:	2080010c 	andi	r2,r4,4
  206468:	10001e1e 	bne	r2,zero,2064e4 <__swsetup_r+0x104>
  20646c:	80c00417 	ldw	r3,16(r16)
  206470:	20800214 	ori	r2,r4,8
  206474:	8080030d 	sth	r2,12(r16)
  206478:	183feb1e 	bne	r3,zero,206428 <_gp+0xffdf4814>
  20647c:	1100a00c 	andi	r4,r2,640
  206480:	01408004 	movi	r5,512
  206484:	217fe826 	beq	r4,r5,206428 <_gp+0xffdf4814>
  206488:	800b883a 	mov	r5,r16
  20648c:	8809883a 	mov	r4,r17
  206490:	0208f9c0 	call	208f9c <__smakebuf_r>
  206494:	8080030b 	ldhu	r2,12(r16)
  206498:	80c00417 	ldw	r3,16(r16)
  20649c:	003fe206 	br	206428 <_gp+0xffdf4814>
  2064a0:	80800517 	ldw	r2,20(r16)
  2064a4:	80000215 	stw	zero,8(r16)
  2064a8:	0085c83a 	sub	r2,zero,r2
  2064ac:	80800615 	stw	r2,24(r16)
  2064b0:	183fe41e 	bne	r3,zero,206444 <_gp+0xffdf4830>
  2064b4:	80c0030b 	ldhu	r3,12(r16)
  2064b8:	0005883a 	mov	r2,zero
  2064bc:	1900200c 	andi	r4,r3,128
  2064c0:	203fe126 	beq	r4,zero,206448 <_gp+0xffdf4834>
  2064c4:	18c01014 	ori	r3,r3,64
  2064c8:	80c0030d 	sth	r3,12(r16)
  2064cc:	00bfffc4 	movi	r2,-1
  2064d0:	003fdd06 	br	206448 <_gp+0xffdf4834>
  2064d4:	02083ec0 	call	2083ec <__sinit>
  2064d8:	003fcd06 	br	206410 <_gp+0xffdf47fc>
  2064dc:	0005883a 	mov	r2,zero
  2064e0:	003fd606 	br	20643c <_gp+0xffdf4828>
  2064e4:	81400c17 	ldw	r5,48(r16)
  2064e8:	28000626 	beq	r5,zero,206504 <__swsetup_r+0x124>
  2064ec:	80801004 	addi	r2,r16,64
  2064f0:	28800326 	beq	r5,r2,206500 <__swsetup_r+0x120>
  2064f4:	8809883a 	mov	r4,r17
  2064f8:	02085600 	call	208560 <_free_r>
  2064fc:	8100030b 	ldhu	r4,12(r16)
  206500:	80000c15 	stw	zero,48(r16)
  206504:	80c00417 	ldw	r3,16(r16)
  206508:	00bff6c4 	movi	r2,-37
  20650c:	1108703a 	and	r4,r2,r4
  206510:	80000115 	stw	zero,4(r16)
  206514:	80c00015 	stw	r3,0(r16)
  206518:	003fd506 	br	206470 <_gp+0xffdf485c>
  20651c:	00800244 	movi	r2,9
  206520:	88800015 	stw	r2,0(r17)
  206524:	20801014 	ori	r2,r4,64
  206528:	8080030d 	sth	r2,12(r16)
  20652c:	00bfffc4 	movi	r2,-1
  206530:	003fc506 	br	206448 <_gp+0xffdf4834>

00206534 <quorem>:
  206534:	defff204 	addi	sp,sp,-56
  206538:	ddc00b15 	stw	r23,44(sp)
  20653c:	20800417 	ldw	r2,16(r4)
  206540:	2dc00417 	ldw	r23,16(r5)
  206544:	dfc00d15 	stw	ra,52(sp)
  206548:	df000c15 	stw	fp,48(sp)
  20654c:	dd800a15 	stw	r22,40(sp)
  206550:	dd400915 	stw	r21,36(sp)
  206554:	dd000815 	stw	r20,32(sp)
  206558:	dcc00715 	stw	r19,28(sp)
  20655c:	dc800615 	stw	r18,24(sp)
  206560:	dc400515 	stw	r17,20(sp)
  206564:	dc000415 	stw	r16,16(sp)
  206568:	15c07a16 	blt	r2,r23,206754 <quorem+0x220>
  20656c:	bdffffc4 	addi	r23,r23,-1
  206570:	bde9883a 	add	r20,r23,r23
  206574:	28c00504 	addi	r3,r5,20
  206578:	a529883a 	add	r20,r20,r20
  20657c:	1d39883a 	add	fp,r3,r20
  206580:	24c00504 	addi	r19,r4,20
  206584:	d9400215 	stw	r5,8(sp)
  206588:	9d29883a 	add	r20,r19,r20
  20658c:	e1400017 	ldw	r5,0(fp)
  206590:	d9000015 	stw	r4,0(sp)
  206594:	a1000017 	ldw	r4,0(r20)
  206598:	29400044 	addi	r5,r5,1
  20659c:	d8c00115 	stw	r3,4(sp)
  2065a0:	dd000315 	stw	r20,12(sp)
  2065a4:	02031bc0 	call	2031bc <__udivsi3>
  2065a8:	1025883a 	mov	r18,r2
  2065ac:	10003026 	beq	r2,zero,206670 <quorem+0x13c>
  2065b0:	dc400117 	ldw	r17,4(sp)
  2065b4:	9829883a 	mov	r20,r19
  2065b8:	002d883a 	mov	r22,zero
  2065bc:	0021883a 	mov	r16,zero
  2065c0:	8d400017 	ldw	r21,0(r17)
  2065c4:	900b883a 	mov	r5,r18
  2065c8:	8c400104 	addi	r17,r17,4
  2065cc:	a93fffcc 	andi	r4,r21,65535
  2065d0:	02032780 	call	203278 <__mulsi3>
  2065d4:	a808d43a 	srli	r4,r21,16
  2065d8:	900b883a 	mov	r5,r18
  2065dc:	15ad883a 	add	r22,r2,r22
  2065e0:	02032780 	call	203278 <__mulsi3>
  2065e4:	a1000017 	ldw	r4,0(r20)
  2065e8:	b00cd43a 	srli	r6,r22,16
  2065ec:	b0ffffcc 	andi	r3,r22,65535
  2065f0:	217fffcc 	andi	r5,r4,65535
  2065f4:	2c21883a 	add	r16,r5,r16
  2065f8:	80c7c83a 	sub	r3,r16,r3
  2065fc:	2008d43a 	srli	r4,r4,16
  206600:	1185883a 	add	r2,r2,r6
  206604:	1821d43a 	srai	r16,r3,16
  206608:	117fffcc 	andi	r5,r2,65535
  20660c:	2149c83a 	sub	r4,r4,r5
  206610:	2421883a 	add	r16,r4,r16
  206614:	8008943a 	slli	r4,r16,16
  206618:	18ffffcc 	andi	r3,r3,65535
  20661c:	102cd43a 	srli	r22,r2,16
  206620:	20c8b03a 	or	r4,r4,r3
  206624:	a1000015 	stw	r4,0(r20)
  206628:	8021d43a 	srai	r16,r16,16
  20662c:	a5000104 	addi	r20,r20,4
  206630:	e47fe32e 	bgeu	fp,r17,2065c0 <_gp+0xffdf49ac>
  206634:	d8c00317 	ldw	r3,12(sp)
  206638:	18800017 	ldw	r2,0(r3)
  20663c:	10000c1e 	bne	r2,zero,206670 <quorem+0x13c>
  206640:	18bfff04 	addi	r2,r3,-4
  206644:	9880082e 	bgeu	r19,r2,206668 <quorem+0x134>
  206648:	18ffff17 	ldw	r3,-4(r3)
  20664c:	18000326 	beq	r3,zero,20665c <quorem+0x128>
  206650:	00000506 	br	206668 <quorem+0x134>
  206654:	10c00017 	ldw	r3,0(r2)
  206658:	1800031e 	bne	r3,zero,206668 <quorem+0x134>
  20665c:	10bfff04 	addi	r2,r2,-4
  206660:	bdffffc4 	addi	r23,r23,-1
  206664:	98bffb36 	bltu	r19,r2,206654 <_gp+0xffdf4a40>
  206668:	d8c00017 	ldw	r3,0(sp)
  20666c:	1dc00415 	stw	r23,16(r3)
  206670:	d9400217 	ldw	r5,8(sp)
  206674:	d9000017 	ldw	r4,0(sp)
  206678:	020a7980 	call	20a798 <__mcmp>
  20667c:	10002816 	blt	r2,zero,206720 <quorem+0x1ec>
  206680:	dc400117 	ldw	r17,4(sp)
  206684:	94800044 	addi	r18,r18,1
  206688:	980d883a 	mov	r6,r19
  20668c:	0007883a 	mov	r3,zero
  206690:	31000017 	ldw	r4,0(r6)
  206694:	89400017 	ldw	r5,0(r17)
  206698:	31800104 	addi	r6,r6,4
  20669c:	20bfffcc 	andi	r2,r4,65535
  2066a0:	10c7883a 	add	r3,r2,r3
  2066a4:	28bfffcc 	andi	r2,r5,65535
  2066a8:	1885c83a 	sub	r2,r3,r2
  2066ac:	280ad43a 	srli	r5,r5,16
  2066b0:	2008d43a 	srli	r4,r4,16
  2066b4:	1007d43a 	srai	r3,r2,16
  2066b8:	10bfffcc 	andi	r2,r2,65535
  2066bc:	2149c83a 	sub	r4,r4,r5
  2066c0:	20c9883a 	add	r4,r4,r3
  2066c4:	200a943a 	slli	r5,r4,16
  2066c8:	8c400104 	addi	r17,r17,4
  2066cc:	2007d43a 	srai	r3,r4,16
  2066d0:	2884b03a 	or	r2,r5,r2
  2066d4:	30bfff15 	stw	r2,-4(r6)
  2066d8:	e47fed2e 	bgeu	fp,r17,206690 <_gp+0xffdf4a7c>
  2066dc:	bdc5883a 	add	r2,r23,r23
  2066e0:	1085883a 	add	r2,r2,r2
  2066e4:	9887883a 	add	r3,r19,r2
  2066e8:	18800017 	ldw	r2,0(r3)
  2066ec:	10000c1e 	bne	r2,zero,206720 <quorem+0x1ec>
  2066f0:	18bfff04 	addi	r2,r3,-4
  2066f4:	9880082e 	bgeu	r19,r2,206718 <quorem+0x1e4>
  2066f8:	18ffff17 	ldw	r3,-4(r3)
  2066fc:	18000326 	beq	r3,zero,20670c <quorem+0x1d8>
  206700:	00000506 	br	206718 <quorem+0x1e4>
  206704:	10c00017 	ldw	r3,0(r2)
  206708:	1800031e 	bne	r3,zero,206718 <quorem+0x1e4>
  20670c:	10bfff04 	addi	r2,r2,-4
  206710:	bdffffc4 	addi	r23,r23,-1
  206714:	98bffb36 	bltu	r19,r2,206704 <_gp+0xffdf4af0>
  206718:	d8c00017 	ldw	r3,0(sp)
  20671c:	1dc00415 	stw	r23,16(r3)
  206720:	9005883a 	mov	r2,r18
  206724:	dfc00d17 	ldw	ra,52(sp)
  206728:	df000c17 	ldw	fp,48(sp)
  20672c:	ddc00b17 	ldw	r23,44(sp)
  206730:	dd800a17 	ldw	r22,40(sp)
  206734:	dd400917 	ldw	r21,36(sp)
  206738:	dd000817 	ldw	r20,32(sp)
  20673c:	dcc00717 	ldw	r19,28(sp)
  206740:	dc800617 	ldw	r18,24(sp)
  206744:	dc400517 	ldw	r17,20(sp)
  206748:	dc000417 	ldw	r16,16(sp)
  20674c:	dec00e04 	addi	sp,sp,56
  206750:	f800283a 	ret
  206754:	0005883a 	mov	r2,zero
  206758:	003ff206 	br	206724 <_gp+0xffdf4b10>

0020675c <_dtoa_r>:
  20675c:	20801017 	ldw	r2,64(r4)
  206760:	deffde04 	addi	sp,sp,-136
  206764:	df002015 	stw	fp,128(sp)
  206768:	dcc01b15 	stw	r19,108(sp)
  20676c:	dc801a15 	stw	r18,104(sp)
  206770:	dc401915 	stw	r17,100(sp)
  206774:	dc001815 	stw	r16,96(sp)
  206778:	dfc02115 	stw	ra,132(sp)
  20677c:	ddc01f15 	stw	r23,124(sp)
  206780:	dd801e15 	stw	r22,120(sp)
  206784:	dd401d15 	stw	r21,116(sp)
  206788:	dd001c15 	stw	r20,112(sp)
  20678c:	d9c00315 	stw	r7,12(sp)
  206790:	2039883a 	mov	fp,r4
  206794:	3023883a 	mov	r17,r6
  206798:	2825883a 	mov	r18,r5
  20679c:	dc002417 	ldw	r16,144(sp)
  2067a0:	3027883a 	mov	r19,r6
  2067a4:	10000826 	beq	r2,zero,2067c8 <_dtoa_r+0x6c>
  2067a8:	21801117 	ldw	r6,68(r4)
  2067ac:	00c00044 	movi	r3,1
  2067b0:	100b883a 	mov	r5,r2
  2067b4:	1986983a 	sll	r3,r3,r6
  2067b8:	11800115 	stw	r6,4(r2)
  2067bc:	10c00215 	stw	r3,8(r2)
  2067c0:	0209ebc0 	call	209ebc <_Bfree>
  2067c4:	e0001015 	stw	zero,64(fp)
  2067c8:	88002e16 	blt	r17,zero,206884 <_dtoa_r+0x128>
  2067cc:	80000015 	stw	zero,0(r16)
  2067d0:	889ffc2c 	andhi	r2,r17,32752
  2067d4:	00dffc34 	movhi	r3,32752
  2067d8:	10c01c26 	beq	r2,r3,20684c <_dtoa_r+0xf0>
  2067dc:	000d883a 	mov	r6,zero
  2067e0:	000f883a 	mov	r7,zero
  2067e4:	9009883a 	mov	r4,r18
  2067e8:	980b883a 	mov	r5,r19
  2067ec:	020f6f80 	call	20f6f8 <__eqdf2>
  2067f0:	10002b1e 	bne	r2,zero,2068a0 <_dtoa_r+0x144>
  2067f4:	d9c02317 	ldw	r7,140(sp)
  2067f8:	00800044 	movi	r2,1
  2067fc:	38800015 	stw	r2,0(r7)
  206800:	d8802517 	ldw	r2,148(sp)
  206804:	10019e26 	beq	r2,zero,206e80 <_dtoa_r+0x724>
  206808:	d8c02517 	ldw	r3,148(sp)
  20680c:	00800874 	movhi	r2,33
  206810:	109b0a44 	addi	r2,r2,27689
  206814:	18800015 	stw	r2,0(r3)
  206818:	10bfffc4 	addi	r2,r2,-1
  20681c:	dfc02117 	ldw	ra,132(sp)
  206820:	df002017 	ldw	fp,128(sp)
  206824:	ddc01f17 	ldw	r23,124(sp)
  206828:	dd801e17 	ldw	r22,120(sp)
  20682c:	dd401d17 	ldw	r21,116(sp)
  206830:	dd001c17 	ldw	r20,112(sp)
  206834:	dcc01b17 	ldw	r19,108(sp)
  206838:	dc801a17 	ldw	r18,104(sp)
  20683c:	dc401917 	ldw	r17,100(sp)
  206840:	dc001817 	ldw	r16,96(sp)
  206844:	dec02204 	addi	sp,sp,136
  206848:	f800283a 	ret
  20684c:	d8c02317 	ldw	r3,140(sp)
  206850:	0089c3c4 	movi	r2,9999
  206854:	18800015 	stw	r2,0(r3)
  206858:	90017726 	beq	r18,zero,206e38 <_dtoa_r+0x6dc>
  20685c:	00800874 	movhi	r2,33
  206860:	109b1604 	addi	r2,r2,27736
  206864:	d9002517 	ldw	r4,148(sp)
  206868:	203fec26 	beq	r4,zero,20681c <_gp+0xffdf4c08>
  20686c:	10c000c7 	ldb	r3,3(r2)
  206870:	1801781e 	bne	r3,zero,206e54 <_dtoa_r+0x6f8>
  206874:	10c000c4 	addi	r3,r2,3
  206878:	d9802517 	ldw	r6,148(sp)
  20687c:	30c00015 	stw	r3,0(r6)
  206880:	003fe606 	br	20681c <_gp+0xffdf4c08>
  206884:	04e00034 	movhi	r19,32768
  206888:	9cffffc4 	addi	r19,r19,-1
  20688c:	00800044 	movi	r2,1
  206890:	8ce6703a 	and	r19,r17,r19
  206894:	80800015 	stw	r2,0(r16)
  206898:	9823883a 	mov	r17,r19
  20689c:	003fcc06 	br	2067d0 <_gp+0xffdf4bbc>
  2068a0:	d8800204 	addi	r2,sp,8
  2068a4:	d8800015 	stw	r2,0(sp)
  2068a8:	d9c00104 	addi	r7,sp,4
  2068ac:	900b883a 	mov	r5,r18
  2068b0:	980d883a 	mov	r6,r19
  2068b4:	e009883a 	mov	r4,fp
  2068b8:	8820d53a 	srli	r16,r17,20
  2068bc:	020ab640 	call	20ab64 <__d2b>
  2068c0:	d8800915 	stw	r2,36(sp)
  2068c4:	8001651e 	bne	r16,zero,206e5c <_dtoa_r+0x700>
  2068c8:	dd800217 	ldw	r22,8(sp)
  2068cc:	dc000117 	ldw	r16,4(sp)
  2068d0:	00800804 	movi	r2,32
  2068d4:	b421883a 	add	r16,r22,r16
  2068d8:	80c10c84 	addi	r3,r16,1074
  2068dc:	10c2d10e 	bge	r2,r3,207424 <_dtoa_r+0xcc8>
  2068e0:	00801004 	movi	r2,64
  2068e4:	81010484 	addi	r4,r16,1042
  2068e8:	10c7c83a 	sub	r3,r2,r3
  2068ec:	9108d83a 	srl	r4,r18,r4
  2068f0:	88e2983a 	sll	r17,r17,r3
  2068f4:	2448b03a 	or	r4,r4,r17
  2068f8:	0210c140 	call	210c14 <__floatunsidf>
  2068fc:	017f8434 	movhi	r5,65040
  206900:	01800044 	movi	r6,1
  206904:	1009883a 	mov	r4,r2
  206908:	194b883a 	add	r5,r3,r5
  20690c:	843fffc4 	addi	r16,r16,-1
  206910:	d9801115 	stw	r6,68(sp)
  206914:	000d883a 	mov	r6,zero
  206918:	01cffe34 	movhi	r7,16376
  20691c:	02101bc0 	call	2101bc <__subdf3>
  206920:	0198dbf4 	movhi	r6,25455
  206924:	01cff4f4 	movhi	r7,16339
  206928:	3190d844 	addi	r6,r6,17249
  20692c:	39e1e9c4 	addi	r7,r7,-30809
  206930:	1009883a 	mov	r4,r2
  206934:	180b883a 	mov	r5,r3
  206938:	020f9500 	call	20f950 <__muldf3>
  20693c:	01a2d874 	movhi	r6,35681
  206940:	01cff1f4 	movhi	r7,16327
  206944:	31b22cc4 	addi	r6,r6,-14157
  206948:	39e28a04 	addi	r7,r7,-30168
  20694c:	180b883a 	mov	r5,r3
  206950:	1009883a 	mov	r4,r2
  206954:	020e47c0 	call	20e47c <__adddf3>
  206958:	8009883a 	mov	r4,r16
  20695c:	1029883a 	mov	r20,r2
  206960:	1823883a 	mov	r17,r3
  206964:	0210b380 	call	210b38 <__floatsidf>
  206968:	019427f4 	movhi	r6,20639
  20696c:	01cff4f4 	movhi	r7,16339
  206970:	319e7ec4 	addi	r6,r6,31227
  206974:	39d104c4 	addi	r7,r7,17427
  206978:	1009883a 	mov	r4,r2
  20697c:	180b883a 	mov	r5,r3
  206980:	020f9500 	call	20f950 <__muldf3>
  206984:	100d883a 	mov	r6,r2
  206988:	180f883a 	mov	r7,r3
  20698c:	a009883a 	mov	r4,r20
  206990:	880b883a 	mov	r5,r17
  206994:	020e47c0 	call	20e47c <__adddf3>
  206998:	1009883a 	mov	r4,r2
  20699c:	180b883a 	mov	r5,r3
  2069a0:	1029883a 	mov	r20,r2
  2069a4:	1823883a 	mov	r17,r3
  2069a8:	0210ab80 	call	210ab8 <__fixdfsi>
  2069ac:	000d883a 	mov	r6,zero
  2069b0:	000f883a 	mov	r7,zero
  2069b4:	a009883a 	mov	r4,r20
  2069b8:	880b883a 	mov	r5,r17
  2069bc:	d8800515 	stw	r2,20(sp)
  2069c0:	020f85c0 	call	20f85c <__ledf2>
  2069c4:	10028716 	blt	r2,zero,2073e4 <_dtoa_r+0xc88>
  2069c8:	d8c00517 	ldw	r3,20(sp)
  2069cc:	00800584 	movi	r2,22
  2069d0:	10c27536 	bltu	r2,r3,2073a8 <_dtoa_r+0xc4c>
  2069d4:	180490fa 	slli	r2,r3,3
  2069d8:	00c00874 	movhi	r3,33
  2069dc:	18db3204 	addi	r3,r3,27848
  2069e0:	1885883a 	add	r2,r3,r2
  2069e4:	11000017 	ldw	r4,0(r2)
  2069e8:	11400117 	ldw	r5,4(r2)
  2069ec:	900d883a 	mov	r6,r18
  2069f0:	980f883a 	mov	r7,r19
  2069f4:	020f7800 	call	20f780 <__gedf2>
  2069f8:	00828d0e 	bge	zero,r2,207430 <_dtoa_r+0xcd4>
  2069fc:	d9000517 	ldw	r4,20(sp)
  206a00:	d8000e15 	stw	zero,56(sp)
  206a04:	213fffc4 	addi	r4,r4,-1
  206a08:	d9000515 	stw	r4,20(sp)
  206a0c:	b42dc83a 	sub	r22,r22,r16
  206a10:	b5bfffc4 	addi	r22,r22,-1
  206a14:	b0026f16 	blt	r22,zero,2073d4 <_dtoa_r+0xc78>
  206a18:	d8000815 	stw	zero,32(sp)
  206a1c:	d9c00517 	ldw	r7,20(sp)
  206a20:	38026416 	blt	r7,zero,2073b4 <_dtoa_r+0xc58>
  206a24:	b1ed883a 	add	r22,r22,r7
  206a28:	d9c00d15 	stw	r7,52(sp)
  206a2c:	d8000a15 	stw	zero,40(sp)
  206a30:	d9800317 	ldw	r6,12(sp)
  206a34:	00800244 	movi	r2,9
  206a38:	11811436 	bltu	r2,r6,206e8c <_dtoa_r+0x730>
  206a3c:	00800144 	movi	r2,5
  206a40:	1184e10e 	bge	r2,r6,207dc8 <_dtoa_r+0x166c>
  206a44:	31bfff04 	addi	r6,r6,-4
  206a48:	d9800315 	stw	r6,12(sp)
  206a4c:	0023883a 	mov	r17,zero
  206a50:	d9800317 	ldw	r6,12(sp)
  206a54:	008000c4 	movi	r2,3
  206a58:	30836726 	beq	r6,r2,2077f8 <_dtoa_r+0x109c>
  206a5c:	1183410e 	bge	r2,r6,207764 <_dtoa_r+0x1008>
  206a60:	d9c00317 	ldw	r7,12(sp)
  206a64:	00800104 	movi	r2,4
  206a68:	38827c26 	beq	r7,r2,20745c <_dtoa_r+0xd00>
  206a6c:	00800144 	movi	r2,5
  206a70:	3884c41e 	bne	r7,r2,207d84 <_dtoa_r+0x1628>
  206a74:	00800044 	movi	r2,1
  206a78:	d8800b15 	stw	r2,44(sp)
  206a7c:	d8c00517 	ldw	r3,20(sp)
  206a80:	d9002217 	ldw	r4,136(sp)
  206a84:	1907883a 	add	r3,r3,r4
  206a88:	19800044 	addi	r6,r3,1
  206a8c:	d8c00c15 	stw	r3,48(sp)
  206a90:	d9800615 	stw	r6,24(sp)
  206a94:	0183a40e 	bge	zero,r6,207928 <_dtoa_r+0x11cc>
  206a98:	d9800617 	ldw	r6,24(sp)
  206a9c:	3021883a 	mov	r16,r6
  206aa0:	e0001115 	stw	zero,68(fp)
  206aa4:	008005c4 	movi	r2,23
  206aa8:	1184c92e 	bgeu	r2,r6,207dd0 <_dtoa_r+0x1674>
  206aac:	00c00044 	movi	r3,1
  206ab0:	00800104 	movi	r2,4
  206ab4:	1085883a 	add	r2,r2,r2
  206ab8:	11000504 	addi	r4,r2,20
  206abc:	180b883a 	mov	r5,r3
  206ac0:	18c00044 	addi	r3,r3,1
  206ac4:	313ffb2e 	bgeu	r6,r4,206ab4 <_gp+0xffdf4ea0>
  206ac8:	e1401115 	stw	r5,68(fp)
  206acc:	e009883a 	mov	r4,fp
  206ad0:	0209e140 	call	209e14 <_Balloc>
  206ad4:	d8800715 	stw	r2,28(sp)
  206ad8:	e0801015 	stw	r2,64(fp)
  206adc:	00800384 	movi	r2,14
  206ae0:	1400f736 	bltu	r2,r16,206ec0 <_dtoa_r+0x764>
  206ae4:	8800f626 	beq	r17,zero,206ec0 <_dtoa_r+0x764>
  206ae8:	d9c00517 	ldw	r7,20(sp)
  206aec:	01c39a0e 	bge	zero,r7,207958 <_dtoa_r+0x11fc>
  206af0:	388003cc 	andi	r2,r7,15
  206af4:	100490fa 	slli	r2,r2,3
  206af8:	382bd13a 	srai	r21,r7,4
  206afc:	00c00874 	movhi	r3,33
  206b00:	18db3204 	addi	r3,r3,27848
  206b04:	1885883a 	add	r2,r3,r2
  206b08:	a8c0040c 	andi	r3,r21,16
  206b0c:	12400017 	ldw	r9,0(r2)
  206b10:	12000117 	ldw	r8,4(r2)
  206b14:	18037926 	beq	r3,zero,2078fc <_dtoa_r+0x11a0>
  206b18:	00800874 	movhi	r2,33
  206b1c:	109b2804 	addi	r2,r2,27808
  206b20:	11800817 	ldw	r6,32(r2)
  206b24:	11c00917 	ldw	r7,36(r2)
  206b28:	9009883a 	mov	r4,r18
  206b2c:	980b883a 	mov	r5,r19
  206b30:	da001715 	stw	r8,92(sp)
  206b34:	da401615 	stw	r9,88(sp)
  206b38:	020ed280 	call	20ed28 <__divdf3>
  206b3c:	da001717 	ldw	r8,92(sp)
  206b40:	da401617 	ldw	r9,88(sp)
  206b44:	ad4003cc 	andi	r21,r21,15
  206b48:	040000c4 	movi	r16,3
  206b4c:	1023883a 	mov	r17,r2
  206b50:	1829883a 	mov	r20,r3
  206b54:	a8001126 	beq	r21,zero,206b9c <_dtoa_r+0x440>
  206b58:	05c00874 	movhi	r23,33
  206b5c:	bddb2804 	addi	r23,r23,27808
  206b60:	4805883a 	mov	r2,r9
  206b64:	4007883a 	mov	r3,r8
  206b68:	a980004c 	andi	r6,r21,1
  206b6c:	1009883a 	mov	r4,r2
  206b70:	a82bd07a 	srai	r21,r21,1
  206b74:	180b883a 	mov	r5,r3
  206b78:	30000426 	beq	r6,zero,206b8c <_dtoa_r+0x430>
  206b7c:	b9800017 	ldw	r6,0(r23)
  206b80:	b9c00117 	ldw	r7,4(r23)
  206b84:	84000044 	addi	r16,r16,1
  206b88:	020f9500 	call	20f950 <__muldf3>
  206b8c:	bdc00204 	addi	r23,r23,8
  206b90:	a83ff51e 	bne	r21,zero,206b68 <_gp+0xffdf4f54>
  206b94:	1013883a 	mov	r9,r2
  206b98:	1811883a 	mov	r8,r3
  206b9c:	480d883a 	mov	r6,r9
  206ba0:	400f883a 	mov	r7,r8
  206ba4:	8809883a 	mov	r4,r17
  206ba8:	a00b883a 	mov	r5,r20
  206bac:	020ed280 	call	20ed28 <__divdf3>
  206bb0:	d8800f15 	stw	r2,60(sp)
  206bb4:	d8c01015 	stw	r3,64(sp)
  206bb8:	d8c00e17 	ldw	r3,56(sp)
  206bbc:	18000626 	beq	r3,zero,206bd8 <_dtoa_r+0x47c>
  206bc0:	d9000f17 	ldw	r4,60(sp)
  206bc4:	d9401017 	ldw	r5,64(sp)
  206bc8:	000d883a 	mov	r6,zero
  206bcc:	01cffc34 	movhi	r7,16368
  206bd0:	020f85c0 	call	20f85c <__ledf2>
  206bd4:	10040b16 	blt	r2,zero,207c04 <_dtoa_r+0x14a8>
  206bd8:	8009883a 	mov	r4,r16
  206bdc:	0210b380 	call	210b38 <__floatsidf>
  206be0:	d9800f17 	ldw	r6,60(sp)
  206be4:	d9c01017 	ldw	r7,64(sp)
  206be8:	1009883a 	mov	r4,r2
  206bec:	180b883a 	mov	r5,r3
  206bf0:	020f9500 	call	20f950 <__muldf3>
  206bf4:	000d883a 	mov	r6,zero
  206bf8:	01d00734 	movhi	r7,16412
  206bfc:	1009883a 	mov	r4,r2
  206c00:	180b883a 	mov	r5,r3
  206c04:	020e47c0 	call	20e47c <__adddf3>
  206c08:	1021883a 	mov	r16,r2
  206c0c:	d8800617 	ldw	r2,24(sp)
  206c10:	047f3034 	movhi	r17,64704
  206c14:	1c63883a 	add	r17,r3,r17
  206c18:	10031826 	beq	r2,zero,20787c <_dtoa_r+0x1120>
  206c1c:	d8c00517 	ldw	r3,20(sp)
  206c20:	db000617 	ldw	r12,24(sp)
  206c24:	d8c01315 	stw	r3,76(sp)
  206c28:	d9000b17 	ldw	r4,44(sp)
  206c2c:	20038f26 	beq	r4,zero,207a6c <_dtoa_r+0x1310>
  206c30:	60bfffc4 	addi	r2,r12,-1
  206c34:	100490fa 	slli	r2,r2,3
  206c38:	00c00874 	movhi	r3,33
  206c3c:	18db3204 	addi	r3,r3,27848
  206c40:	1885883a 	add	r2,r3,r2
  206c44:	11800017 	ldw	r6,0(r2)
  206c48:	11c00117 	ldw	r7,4(r2)
  206c4c:	d8800717 	ldw	r2,28(sp)
  206c50:	0009883a 	mov	r4,zero
  206c54:	014ff834 	movhi	r5,16352
  206c58:	db001615 	stw	r12,88(sp)
  206c5c:	15c00044 	addi	r23,r2,1
  206c60:	020ed280 	call	20ed28 <__divdf3>
  206c64:	800d883a 	mov	r6,r16
  206c68:	880f883a 	mov	r7,r17
  206c6c:	1009883a 	mov	r4,r2
  206c70:	180b883a 	mov	r5,r3
  206c74:	02101bc0 	call	2101bc <__subdf3>
  206c78:	d9401017 	ldw	r5,64(sp)
  206c7c:	d9000f17 	ldw	r4,60(sp)
  206c80:	102b883a 	mov	r21,r2
  206c84:	d8c01215 	stw	r3,72(sp)
  206c88:	0210ab80 	call	210ab8 <__fixdfsi>
  206c8c:	1009883a 	mov	r4,r2
  206c90:	1029883a 	mov	r20,r2
  206c94:	0210b380 	call	210b38 <__floatsidf>
  206c98:	d9000f17 	ldw	r4,60(sp)
  206c9c:	d9401017 	ldw	r5,64(sp)
  206ca0:	100d883a 	mov	r6,r2
  206ca4:	180f883a 	mov	r7,r3
  206ca8:	02101bc0 	call	2101bc <__subdf3>
  206cac:	1823883a 	mov	r17,r3
  206cb0:	d8c00717 	ldw	r3,28(sp)
  206cb4:	d9401217 	ldw	r5,72(sp)
  206cb8:	a2000c04 	addi	r8,r20,48
  206cbc:	1021883a 	mov	r16,r2
  206cc0:	1a000005 	stb	r8,0(r3)
  206cc4:	800d883a 	mov	r6,r16
  206cc8:	880f883a 	mov	r7,r17
  206ccc:	a809883a 	mov	r4,r21
  206cd0:	4029883a 	mov	r20,r8
  206cd4:	020f7800 	call	20f780 <__gedf2>
  206cd8:	00841d16 	blt	zero,r2,207d50 <_dtoa_r+0x15f4>
  206cdc:	800d883a 	mov	r6,r16
  206ce0:	880f883a 	mov	r7,r17
  206ce4:	0009883a 	mov	r4,zero
  206ce8:	014ffc34 	movhi	r5,16368
  206cec:	02101bc0 	call	2101bc <__subdf3>
  206cf0:	d9401217 	ldw	r5,72(sp)
  206cf4:	100d883a 	mov	r6,r2
  206cf8:	180f883a 	mov	r7,r3
  206cfc:	a809883a 	mov	r4,r21
  206d00:	020f7800 	call	20f780 <__gedf2>
  206d04:	db001617 	ldw	r12,88(sp)
  206d08:	00840e16 	blt	zero,r2,207d44 <_dtoa_r+0x15e8>
  206d0c:	00800044 	movi	r2,1
  206d10:	13006b0e 	bge	r2,r12,206ec0 <_dtoa_r+0x764>
  206d14:	d9000717 	ldw	r4,28(sp)
  206d18:	dd800f15 	stw	r22,60(sp)
  206d1c:	dcc01015 	stw	r19,64(sp)
  206d20:	2319883a 	add	r12,r4,r12
  206d24:	dcc01217 	ldw	r19,72(sp)
  206d28:	602d883a 	mov	r22,r12
  206d2c:	dc801215 	stw	r18,72(sp)
  206d30:	b825883a 	mov	r18,r23
  206d34:	00000906 	br	206d5c <_dtoa_r+0x600>
  206d38:	02101bc0 	call	2101bc <__subdf3>
  206d3c:	a80d883a 	mov	r6,r21
  206d40:	980f883a 	mov	r7,r19
  206d44:	1009883a 	mov	r4,r2
  206d48:	180b883a 	mov	r5,r3
  206d4c:	020f85c0 	call	20f85c <__ledf2>
  206d50:	1003e816 	blt	r2,zero,207cf4 <_dtoa_r+0x1598>
  206d54:	b825883a 	mov	r18,r23
  206d58:	bd83e926 	beq	r23,r22,207d00 <_dtoa_r+0x15a4>
  206d5c:	a809883a 	mov	r4,r21
  206d60:	980b883a 	mov	r5,r19
  206d64:	000d883a 	mov	r6,zero
  206d68:	01d00934 	movhi	r7,16420
  206d6c:	020f9500 	call	20f950 <__muldf3>
  206d70:	000d883a 	mov	r6,zero
  206d74:	01d00934 	movhi	r7,16420
  206d78:	8009883a 	mov	r4,r16
  206d7c:	880b883a 	mov	r5,r17
  206d80:	102b883a 	mov	r21,r2
  206d84:	1827883a 	mov	r19,r3
  206d88:	020f9500 	call	20f950 <__muldf3>
  206d8c:	180b883a 	mov	r5,r3
  206d90:	1009883a 	mov	r4,r2
  206d94:	1821883a 	mov	r16,r3
  206d98:	1023883a 	mov	r17,r2
  206d9c:	0210ab80 	call	210ab8 <__fixdfsi>
  206da0:	1009883a 	mov	r4,r2
  206da4:	1029883a 	mov	r20,r2
  206da8:	0210b380 	call	210b38 <__floatsidf>
  206dac:	8809883a 	mov	r4,r17
  206db0:	800b883a 	mov	r5,r16
  206db4:	100d883a 	mov	r6,r2
  206db8:	180f883a 	mov	r7,r3
  206dbc:	02101bc0 	call	2101bc <__subdf3>
  206dc0:	a5000c04 	addi	r20,r20,48
  206dc4:	a80d883a 	mov	r6,r21
  206dc8:	980f883a 	mov	r7,r19
  206dcc:	1009883a 	mov	r4,r2
  206dd0:	180b883a 	mov	r5,r3
  206dd4:	95000005 	stb	r20,0(r18)
  206dd8:	1021883a 	mov	r16,r2
  206ddc:	1823883a 	mov	r17,r3
  206de0:	020f85c0 	call	20f85c <__ledf2>
  206de4:	bdc00044 	addi	r23,r23,1
  206de8:	800d883a 	mov	r6,r16
  206dec:	880f883a 	mov	r7,r17
  206df0:	0009883a 	mov	r4,zero
  206df4:	014ffc34 	movhi	r5,16368
  206df8:	103fcf0e 	bge	r2,zero,206d38 <_gp+0xffdf5124>
  206dfc:	d8c01317 	ldw	r3,76(sp)
  206e00:	d8c00515 	stw	r3,20(sp)
  206e04:	d9400917 	ldw	r5,36(sp)
  206e08:	e009883a 	mov	r4,fp
  206e0c:	0209ebc0 	call	209ebc <_Bfree>
  206e10:	d9000517 	ldw	r4,20(sp)
  206e14:	d9802317 	ldw	r6,140(sp)
  206e18:	d9c02517 	ldw	r7,148(sp)
  206e1c:	b8000005 	stb	zero,0(r23)
  206e20:	20800044 	addi	r2,r4,1
  206e24:	30800015 	stw	r2,0(r6)
  206e28:	3802aa26 	beq	r7,zero,2078d4 <_dtoa_r+0x1178>
  206e2c:	3dc00015 	stw	r23,0(r7)
  206e30:	d8800717 	ldw	r2,28(sp)
  206e34:	003e7906 	br	20681c <_gp+0xffdf4c08>
  206e38:	00800434 	movhi	r2,16
  206e3c:	10bfffc4 	addi	r2,r2,-1
  206e40:	88a2703a 	and	r17,r17,r2
  206e44:	883e851e 	bne	r17,zero,20685c <_gp+0xffdf4c48>
  206e48:	00800874 	movhi	r2,33
  206e4c:	109b1304 	addi	r2,r2,27724
  206e50:	003e8406 	br	206864 <_gp+0xffdf4c50>
  206e54:	10c00204 	addi	r3,r2,8
  206e58:	003e8706 	br	206878 <_gp+0xffdf4c64>
  206e5c:	01400434 	movhi	r5,16
  206e60:	297fffc4 	addi	r5,r5,-1
  206e64:	994a703a 	and	r5,r19,r5
  206e68:	9009883a 	mov	r4,r18
  206e6c:	843f0044 	addi	r16,r16,-1023
  206e70:	294ffc34 	orhi	r5,r5,16368
  206e74:	dd800217 	ldw	r22,8(sp)
  206e78:	d8001115 	stw	zero,68(sp)
  206e7c:	003ea506 	br	206914 <_gp+0xffdf4d00>
  206e80:	00800874 	movhi	r2,33
  206e84:	109b0a04 	addi	r2,r2,27688
  206e88:	003e6406 	br	20681c <_gp+0xffdf4c08>
  206e8c:	e0001115 	stw	zero,68(fp)
  206e90:	000b883a 	mov	r5,zero
  206e94:	e009883a 	mov	r4,fp
  206e98:	0209e140 	call	209e14 <_Balloc>
  206e9c:	01bfffc4 	movi	r6,-1
  206ea0:	01c00044 	movi	r7,1
  206ea4:	d8800715 	stw	r2,28(sp)
  206ea8:	d9800c15 	stw	r6,48(sp)
  206eac:	e0801015 	stw	r2,64(fp)
  206eb0:	d8000315 	stw	zero,12(sp)
  206eb4:	d9c00b15 	stw	r7,44(sp)
  206eb8:	d9800615 	stw	r6,24(sp)
  206ebc:	d8002215 	stw	zero,136(sp)
  206ec0:	d8800117 	ldw	r2,4(sp)
  206ec4:	10008916 	blt	r2,zero,2070ec <_dtoa_r+0x990>
  206ec8:	d9000517 	ldw	r4,20(sp)
  206ecc:	00c00384 	movi	r3,14
  206ed0:	19008616 	blt	r3,r4,2070ec <_dtoa_r+0x990>
  206ed4:	200490fa 	slli	r2,r4,3
  206ed8:	00c00874 	movhi	r3,33
  206edc:	d9802217 	ldw	r6,136(sp)
  206ee0:	18db3204 	addi	r3,r3,27848
  206ee4:	1885883a 	add	r2,r3,r2
  206ee8:	14000017 	ldw	r16,0(r2)
  206eec:	14400117 	ldw	r17,4(r2)
  206ef0:	30016316 	blt	r6,zero,207480 <_dtoa_r+0xd24>
  206ef4:	800d883a 	mov	r6,r16
  206ef8:	880f883a 	mov	r7,r17
  206efc:	9009883a 	mov	r4,r18
  206f00:	980b883a 	mov	r5,r19
  206f04:	020ed280 	call	20ed28 <__divdf3>
  206f08:	180b883a 	mov	r5,r3
  206f0c:	1009883a 	mov	r4,r2
  206f10:	0210ab80 	call	210ab8 <__fixdfsi>
  206f14:	1009883a 	mov	r4,r2
  206f18:	102b883a 	mov	r21,r2
  206f1c:	0210b380 	call	210b38 <__floatsidf>
  206f20:	800d883a 	mov	r6,r16
  206f24:	880f883a 	mov	r7,r17
  206f28:	1009883a 	mov	r4,r2
  206f2c:	180b883a 	mov	r5,r3
  206f30:	020f9500 	call	20f950 <__muldf3>
  206f34:	100d883a 	mov	r6,r2
  206f38:	180f883a 	mov	r7,r3
  206f3c:	9009883a 	mov	r4,r18
  206f40:	980b883a 	mov	r5,r19
  206f44:	02101bc0 	call	2101bc <__subdf3>
  206f48:	d9c00717 	ldw	r7,28(sp)
  206f4c:	1009883a 	mov	r4,r2
  206f50:	a8800c04 	addi	r2,r21,48
  206f54:	38800005 	stb	r2,0(r7)
  206f58:	3dc00044 	addi	r23,r7,1
  206f5c:	d9c00617 	ldw	r7,24(sp)
  206f60:	01800044 	movi	r6,1
  206f64:	180b883a 	mov	r5,r3
  206f68:	2005883a 	mov	r2,r4
  206f6c:	39803826 	beq	r7,r6,207050 <_dtoa_r+0x8f4>
  206f70:	000d883a 	mov	r6,zero
  206f74:	01d00934 	movhi	r7,16420
  206f78:	020f9500 	call	20f950 <__muldf3>
  206f7c:	000d883a 	mov	r6,zero
  206f80:	000f883a 	mov	r7,zero
  206f84:	1009883a 	mov	r4,r2
  206f88:	180b883a 	mov	r5,r3
  206f8c:	1025883a 	mov	r18,r2
  206f90:	1827883a 	mov	r19,r3
  206f94:	020f6f80 	call	20f6f8 <__eqdf2>
  206f98:	103f9a26 	beq	r2,zero,206e04 <_gp+0xffdf51f0>
  206f9c:	d9c00617 	ldw	r7,24(sp)
  206fa0:	d8c00717 	ldw	r3,28(sp)
  206fa4:	b829883a 	mov	r20,r23
  206fa8:	38bfffc4 	addi	r2,r7,-1
  206fac:	18ad883a 	add	r22,r3,r2
  206fb0:	00000a06 	br	206fdc <_dtoa_r+0x880>
  206fb4:	020f9500 	call	20f950 <__muldf3>
  206fb8:	000d883a 	mov	r6,zero
  206fbc:	000f883a 	mov	r7,zero
  206fc0:	1009883a 	mov	r4,r2
  206fc4:	180b883a 	mov	r5,r3
  206fc8:	1025883a 	mov	r18,r2
  206fcc:	1827883a 	mov	r19,r3
  206fd0:	b829883a 	mov	r20,r23
  206fd4:	020f6f80 	call	20f6f8 <__eqdf2>
  206fd8:	103f8a26 	beq	r2,zero,206e04 <_gp+0xffdf51f0>
  206fdc:	800d883a 	mov	r6,r16
  206fe0:	880f883a 	mov	r7,r17
  206fe4:	9009883a 	mov	r4,r18
  206fe8:	980b883a 	mov	r5,r19
  206fec:	020ed280 	call	20ed28 <__divdf3>
  206ff0:	180b883a 	mov	r5,r3
  206ff4:	1009883a 	mov	r4,r2
  206ff8:	0210ab80 	call	210ab8 <__fixdfsi>
  206ffc:	1009883a 	mov	r4,r2
  207000:	102b883a 	mov	r21,r2
  207004:	0210b380 	call	210b38 <__floatsidf>
  207008:	800d883a 	mov	r6,r16
  20700c:	880f883a 	mov	r7,r17
  207010:	1009883a 	mov	r4,r2
  207014:	180b883a 	mov	r5,r3
  207018:	020f9500 	call	20f950 <__muldf3>
  20701c:	100d883a 	mov	r6,r2
  207020:	180f883a 	mov	r7,r3
  207024:	9009883a 	mov	r4,r18
  207028:	980b883a 	mov	r5,r19
  20702c:	02101bc0 	call	2101bc <__subdf3>
  207030:	aa000c04 	addi	r8,r21,48
  207034:	a2000005 	stb	r8,0(r20)
  207038:	000d883a 	mov	r6,zero
  20703c:	01d00934 	movhi	r7,16420
  207040:	1009883a 	mov	r4,r2
  207044:	180b883a 	mov	r5,r3
  207048:	a5c00044 	addi	r23,r20,1
  20704c:	b53fd91e 	bne	r22,r20,206fb4 <_gp+0xffdf53a0>
  207050:	100d883a 	mov	r6,r2
  207054:	180f883a 	mov	r7,r3
  207058:	1009883a 	mov	r4,r2
  20705c:	180b883a 	mov	r5,r3
  207060:	020e47c0 	call	20e47c <__adddf3>
  207064:	100d883a 	mov	r6,r2
  207068:	180f883a 	mov	r7,r3
  20706c:	8009883a 	mov	r4,r16
  207070:	880b883a 	mov	r5,r17
  207074:	1027883a 	mov	r19,r2
  207078:	1825883a 	mov	r18,r3
  20707c:	020f85c0 	call	20f85c <__ledf2>
  207080:	10000816 	blt	r2,zero,2070a4 <_dtoa_r+0x948>
  207084:	980d883a 	mov	r6,r19
  207088:	900f883a 	mov	r7,r18
  20708c:	8009883a 	mov	r4,r16
  207090:	880b883a 	mov	r5,r17
  207094:	020f6f80 	call	20f6f8 <__eqdf2>
  207098:	103f5a1e 	bne	r2,zero,206e04 <_gp+0xffdf51f0>
  20709c:	ad40004c 	andi	r21,r21,1
  2070a0:	a83f5826 	beq	r21,zero,206e04 <_gp+0xffdf51f0>
  2070a4:	bd3fffc3 	ldbu	r20,-1(r23)
  2070a8:	b8bfffc4 	addi	r2,r23,-1
  2070ac:	1007883a 	mov	r3,r2
  2070b0:	01400e44 	movi	r5,57
  2070b4:	d9800717 	ldw	r6,28(sp)
  2070b8:	00000506 	br	2070d0 <_dtoa_r+0x974>
  2070bc:	18ffffc4 	addi	r3,r3,-1
  2070c0:	11824726 	beq	r2,r6,2079e0 <_dtoa_r+0x1284>
  2070c4:	1d000003 	ldbu	r20,0(r3)
  2070c8:	102f883a 	mov	r23,r2
  2070cc:	10bfffc4 	addi	r2,r2,-1
  2070d0:	a1003fcc 	andi	r4,r20,255
  2070d4:	2100201c 	xori	r4,r4,128
  2070d8:	213fe004 	addi	r4,r4,-128
  2070dc:	217ff726 	beq	r4,r5,2070bc <_gp+0xffdf54a8>
  2070e0:	a2000044 	addi	r8,r20,1
  2070e4:	12000005 	stb	r8,0(r2)
  2070e8:	003f4606 	br	206e04 <_gp+0xffdf51f0>
  2070ec:	d9000b17 	ldw	r4,44(sp)
  2070f0:	2000c826 	beq	r4,zero,207414 <_dtoa_r+0xcb8>
  2070f4:	d9800317 	ldw	r6,12(sp)
  2070f8:	00c00044 	movi	r3,1
  2070fc:	1980f90e 	bge	r3,r6,2074e4 <_dtoa_r+0xd88>
  207100:	d8800617 	ldw	r2,24(sp)
  207104:	d8c00a17 	ldw	r3,40(sp)
  207108:	157fffc4 	addi	r21,r2,-1
  20710c:	1d41f316 	blt	r3,r21,2078dc <_dtoa_r+0x1180>
  207110:	1d6bc83a 	sub	r21,r3,r21
  207114:	d9c00617 	ldw	r7,24(sp)
  207118:	3802aa16 	blt	r7,zero,207bc4 <_dtoa_r+0x1468>
  20711c:	dd000817 	ldw	r20,32(sp)
  207120:	d8800617 	ldw	r2,24(sp)
  207124:	d8c00817 	ldw	r3,32(sp)
  207128:	01400044 	movi	r5,1
  20712c:	e009883a 	mov	r4,fp
  207130:	1887883a 	add	r3,r3,r2
  207134:	d8c00815 	stw	r3,32(sp)
  207138:	b0ad883a 	add	r22,r22,r2
  20713c:	020a2480 	call	20a248 <__i2b>
  207140:	1023883a 	mov	r17,r2
  207144:	a0000826 	beq	r20,zero,207168 <_dtoa_r+0xa0c>
  207148:	0580070e 	bge	zero,r22,207168 <_dtoa_r+0xa0c>
  20714c:	a005883a 	mov	r2,r20
  207150:	b500b916 	blt	r22,r20,207438 <_dtoa_r+0xcdc>
  207154:	d9000817 	ldw	r4,32(sp)
  207158:	a0a9c83a 	sub	r20,r20,r2
  20715c:	b0adc83a 	sub	r22,r22,r2
  207160:	2089c83a 	sub	r4,r4,r2
  207164:	d9000815 	stw	r4,32(sp)
  207168:	d9800a17 	ldw	r6,40(sp)
  20716c:	0181810e 	bge	zero,r6,207774 <_dtoa_r+0x1018>
  207170:	d9c00b17 	ldw	r7,44(sp)
  207174:	3800b326 	beq	r7,zero,207444 <_dtoa_r+0xce8>
  207178:	a800b226 	beq	r21,zero,207444 <_dtoa_r+0xce8>
  20717c:	880b883a 	mov	r5,r17
  207180:	a80d883a 	mov	r6,r21
  207184:	e009883a 	mov	r4,fp
  207188:	020a5100 	call	20a510 <__pow5mult>
  20718c:	d9800917 	ldw	r6,36(sp)
  207190:	100b883a 	mov	r5,r2
  207194:	e009883a 	mov	r4,fp
  207198:	1023883a 	mov	r17,r2
  20719c:	020a2840 	call	20a284 <__multiply>
  2071a0:	1021883a 	mov	r16,r2
  2071a4:	d8800a17 	ldw	r2,40(sp)
  2071a8:	d9400917 	ldw	r5,36(sp)
  2071ac:	e009883a 	mov	r4,fp
  2071b0:	1545c83a 	sub	r2,r2,r21
  2071b4:	d8800a15 	stw	r2,40(sp)
  2071b8:	0209ebc0 	call	209ebc <_Bfree>
  2071bc:	d8c00a17 	ldw	r3,40(sp)
  2071c0:	18009f1e 	bne	r3,zero,207440 <_dtoa_r+0xce4>
  2071c4:	05c00044 	movi	r23,1
  2071c8:	e009883a 	mov	r4,fp
  2071cc:	b80b883a 	mov	r5,r23
  2071d0:	020a2480 	call	20a248 <__i2b>
  2071d4:	d9000d17 	ldw	r4,52(sp)
  2071d8:	102b883a 	mov	r21,r2
  2071dc:	2000ce26 	beq	r4,zero,207518 <_dtoa_r+0xdbc>
  2071e0:	200d883a 	mov	r6,r4
  2071e4:	100b883a 	mov	r5,r2
  2071e8:	e009883a 	mov	r4,fp
  2071ec:	020a5100 	call	20a510 <__pow5mult>
  2071f0:	d9800317 	ldw	r6,12(sp)
  2071f4:	102b883a 	mov	r21,r2
  2071f8:	b981810e 	bge	r23,r6,207800 <_dtoa_r+0x10a4>
  2071fc:	0027883a 	mov	r19,zero
  207200:	a8800417 	ldw	r2,16(r21)
  207204:	05c00804 	movi	r23,32
  207208:	10800104 	addi	r2,r2,4
  20720c:	1085883a 	add	r2,r2,r2
  207210:	1085883a 	add	r2,r2,r2
  207214:	a885883a 	add	r2,r21,r2
  207218:	11000017 	ldw	r4,0(r2)
  20721c:	020a1300 	call	20a130 <__hi0bits>
  207220:	b885c83a 	sub	r2,r23,r2
  207224:	1585883a 	add	r2,r2,r22
  207228:	108007cc 	andi	r2,r2,31
  20722c:	1000b326 	beq	r2,zero,2074fc <_dtoa_r+0xda0>
  207230:	00c00804 	movi	r3,32
  207234:	1887c83a 	sub	r3,r3,r2
  207238:	01000104 	movi	r4,4
  20723c:	20c2cd0e 	bge	r4,r3,207d74 <_dtoa_r+0x1618>
  207240:	00c00704 	movi	r3,28
  207244:	1885c83a 	sub	r2,r3,r2
  207248:	d8c00817 	ldw	r3,32(sp)
  20724c:	a0a9883a 	add	r20,r20,r2
  207250:	b0ad883a 	add	r22,r22,r2
  207254:	1887883a 	add	r3,r3,r2
  207258:	d8c00815 	stw	r3,32(sp)
  20725c:	d9800817 	ldw	r6,32(sp)
  207260:	0180040e 	bge	zero,r6,207274 <_dtoa_r+0xb18>
  207264:	800b883a 	mov	r5,r16
  207268:	e009883a 	mov	r4,fp
  20726c:	020a6500 	call	20a650 <__lshift>
  207270:	1021883a 	mov	r16,r2
  207274:	0580050e 	bge	zero,r22,20728c <_dtoa_r+0xb30>
  207278:	a80b883a 	mov	r5,r21
  20727c:	b00d883a 	mov	r6,r22
  207280:	e009883a 	mov	r4,fp
  207284:	020a6500 	call	20a650 <__lshift>
  207288:	102b883a 	mov	r21,r2
  20728c:	d9c00e17 	ldw	r7,56(sp)
  207290:	3801211e 	bne	r7,zero,207718 <_dtoa_r+0xfbc>
  207294:	d9800617 	ldw	r6,24(sp)
  207298:	0181380e 	bge	zero,r6,20777c <_dtoa_r+0x1020>
  20729c:	d8c00b17 	ldw	r3,44(sp)
  2072a0:	1800ab1e 	bne	r3,zero,207550 <_dtoa_r+0xdf4>
  2072a4:	dc800717 	ldw	r18,28(sp)
  2072a8:	dcc00617 	ldw	r19,24(sp)
  2072ac:	9029883a 	mov	r20,r18
  2072b0:	00000206 	br	2072bc <_dtoa_r+0xb60>
  2072b4:	0209ee40 	call	209ee4 <__multadd>
  2072b8:	1021883a 	mov	r16,r2
  2072bc:	a80b883a 	mov	r5,r21
  2072c0:	8009883a 	mov	r4,r16
  2072c4:	02065340 	call	206534 <quorem>
  2072c8:	10800c04 	addi	r2,r2,48
  2072cc:	90800005 	stb	r2,0(r18)
  2072d0:	94800044 	addi	r18,r18,1
  2072d4:	9507c83a 	sub	r3,r18,r20
  2072d8:	000f883a 	mov	r7,zero
  2072dc:	01800284 	movi	r6,10
  2072e0:	800b883a 	mov	r5,r16
  2072e4:	e009883a 	mov	r4,fp
  2072e8:	1cfff216 	blt	r3,r19,2072b4 <_gp+0xffdf56a0>
  2072ec:	1011883a 	mov	r8,r2
  2072f0:	d8800617 	ldw	r2,24(sp)
  2072f4:	0082370e 	bge	zero,r2,207bd4 <_dtoa_r+0x1478>
  2072f8:	d9000717 	ldw	r4,28(sp)
  2072fc:	0025883a 	mov	r18,zero
  207300:	20af883a 	add	r23,r4,r2
  207304:	01800044 	movi	r6,1
  207308:	800b883a 	mov	r5,r16
  20730c:	e009883a 	mov	r4,fp
  207310:	da001715 	stw	r8,92(sp)
  207314:	020a6500 	call	20a650 <__lshift>
  207318:	a80b883a 	mov	r5,r21
  20731c:	1009883a 	mov	r4,r2
  207320:	d8800915 	stw	r2,36(sp)
  207324:	020a7980 	call	20a798 <__mcmp>
  207328:	da001717 	ldw	r8,92(sp)
  20732c:	0081800e 	bge	zero,r2,207930 <_dtoa_r+0x11d4>
  207330:	b93fffc3 	ldbu	r4,-1(r23)
  207334:	b8bfffc4 	addi	r2,r23,-1
  207338:	1007883a 	mov	r3,r2
  20733c:	01800e44 	movi	r6,57
  207340:	d9c00717 	ldw	r7,28(sp)
  207344:	00000506 	br	20735c <_dtoa_r+0xc00>
  207348:	18ffffc4 	addi	r3,r3,-1
  20734c:	11c12326 	beq	r2,r7,2077dc <_dtoa_r+0x1080>
  207350:	19000003 	ldbu	r4,0(r3)
  207354:	102f883a 	mov	r23,r2
  207358:	10bfffc4 	addi	r2,r2,-1
  20735c:	21403fcc 	andi	r5,r4,255
  207360:	2940201c 	xori	r5,r5,128
  207364:	297fe004 	addi	r5,r5,-128
  207368:	29bff726 	beq	r5,r6,207348 <_gp+0xffdf5734>
  20736c:	21000044 	addi	r4,r4,1
  207370:	11000005 	stb	r4,0(r2)
  207374:	a80b883a 	mov	r5,r21
  207378:	e009883a 	mov	r4,fp
  20737c:	0209ebc0 	call	209ebc <_Bfree>
  207380:	883ea026 	beq	r17,zero,206e04 <_gp+0xffdf51f0>
  207384:	90000426 	beq	r18,zero,207398 <_dtoa_r+0xc3c>
  207388:	94400326 	beq	r18,r17,207398 <_dtoa_r+0xc3c>
  20738c:	900b883a 	mov	r5,r18
  207390:	e009883a 	mov	r4,fp
  207394:	0209ebc0 	call	209ebc <_Bfree>
  207398:	880b883a 	mov	r5,r17
  20739c:	e009883a 	mov	r4,fp
  2073a0:	0209ebc0 	call	209ebc <_Bfree>
  2073a4:	003e9706 	br	206e04 <_gp+0xffdf51f0>
  2073a8:	01800044 	movi	r6,1
  2073ac:	d9800e15 	stw	r6,56(sp)
  2073b0:	003d9606 	br	206a0c <_gp+0xffdf4df8>
  2073b4:	d8800817 	ldw	r2,32(sp)
  2073b8:	d8c00517 	ldw	r3,20(sp)
  2073bc:	d8000d15 	stw	zero,52(sp)
  2073c0:	10c5c83a 	sub	r2,r2,r3
  2073c4:	00c9c83a 	sub	r4,zero,r3
  2073c8:	d8800815 	stw	r2,32(sp)
  2073cc:	d9000a15 	stw	r4,40(sp)
  2073d0:	003d9706 	br	206a30 <_gp+0xffdf4e1c>
  2073d4:	05adc83a 	sub	r22,zero,r22
  2073d8:	dd800815 	stw	r22,32(sp)
  2073dc:	002d883a 	mov	r22,zero
  2073e0:	003d8e06 	br	206a1c <_gp+0xffdf4e08>
  2073e4:	d9000517 	ldw	r4,20(sp)
  2073e8:	0210b380 	call	210b38 <__floatsidf>
  2073ec:	100d883a 	mov	r6,r2
  2073f0:	180f883a 	mov	r7,r3
  2073f4:	a009883a 	mov	r4,r20
  2073f8:	880b883a 	mov	r5,r17
  2073fc:	020f6f80 	call	20f6f8 <__eqdf2>
  207400:	103d7126 	beq	r2,zero,2069c8 <_gp+0xffdf4db4>
  207404:	d9c00517 	ldw	r7,20(sp)
  207408:	39ffffc4 	addi	r7,r7,-1
  20740c:	d9c00515 	stw	r7,20(sp)
  207410:	003d6d06 	br	2069c8 <_gp+0xffdf4db4>
  207414:	dd400a17 	ldw	r21,40(sp)
  207418:	dd000817 	ldw	r20,32(sp)
  20741c:	0023883a 	mov	r17,zero
  207420:	003f4806 	br	207144 <_gp+0xffdf5530>
  207424:	10e3c83a 	sub	r17,r2,r3
  207428:	9448983a 	sll	r4,r18,r17
  20742c:	003d3206 	br	2068f8 <_gp+0xffdf4ce4>
  207430:	d8000e15 	stw	zero,56(sp)
  207434:	003d7506 	br	206a0c <_gp+0xffdf4df8>
  207438:	b005883a 	mov	r2,r22
  20743c:	003f4506 	br	207154 <_gp+0xffdf5540>
  207440:	dc000915 	stw	r16,36(sp)
  207444:	d9800a17 	ldw	r6,40(sp)
  207448:	d9400917 	ldw	r5,36(sp)
  20744c:	e009883a 	mov	r4,fp
  207450:	020a5100 	call	20a510 <__pow5mult>
  207454:	1021883a 	mov	r16,r2
  207458:	003f5a06 	br	2071c4 <_gp+0xffdf55b0>
  20745c:	01c00044 	movi	r7,1
  207460:	d9c00b15 	stw	r7,44(sp)
  207464:	d8802217 	ldw	r2,136(sp)
  207468:	0081280e 	bge	zero,r2,20790c <_dtoa_r+0x11b0>
  20746c:	100d883a 	mov	r6,r2
  207470:	1021883a 	mov	r16,r2
  207474:	d8800c15 	stw	r2,48(sp)
  207478:	d8800615 	stw	r2,24(sp)
  20747c:	003d8806 	br	206aa0 <_gp+0xffdf4e8c>
  207480:	d8800617 	ldw	r2,24(sp)
  207484:	00be9b16 	blt	zero,r2,206ef4 <_gp+0xffdf52e0>
  207488:	10010f1e 	bne	r2,zero,2078c8 <_dtoa_r+0x116c>
  20748c:	880b883a 	mov	r5,r17
  207490:	000d883a 	mov	r6,zero
  207494:	01d00534 	movhi	r7,16404
  207498:	8009883a 	mov	r4,r16
  20749c:	020f9500 	call	20f950 <__muldf3>
  2074a0:	900d883a 	mov	r6,r18
  2074a4:	980f883a 	mov	r7,r19
  2074a8:	1009883a 	mov	r4,r2
  2074ac:	180b883a 	mov	r5,r3
  2074b0:	020f7800 	call	20f780 <__gedf2>
  2074b4:	002b883a 	mov	r21,zero
  2074b8:	0023883a 	mov	r17,zero
  2074bc:	1000bf16 	blt	r2,zero,2077bc <_dtoa_r+0x1060>
  2074c0:	d9802217 	ldw	r6,136(sp)
  2074c4:	ddc00717 	ldw	r23,28(sp)
  2074c8:	018c303a 	nor	r6,zero,r6
  2074cc:	d9800515 	stw	r6,20(sp)
  2074d0:	a80b883a 	mov	r5,r21
  2074d4:	e009883a 	mov	r4,fp
  2074d8:	0209ebc0 	call	209ebc <_Bfree>
  2074dc:	883e4926 	beq	r17,zero,206e04 <_gp+0xffdf51f0>
  2074e0:	003fad06 	br	207398 <_gp+0xffdf5784>
  2074e4:	d9c01117 	ldw	r7,68(sp)
  2074e8:	3801bc26 	beq	r7,zero,207bdc <_dtoa_r+0x1480>
  2074ec:	10810cc4 	addi	r2,r2,1075
  2074f0:	dd400a17 	ldw	r21,40(sp)
  2074f4:	dd000817 	ldw	r20,32(sp)
  2074f8:	003f0a06 	br	207124 <_gp+0xffdf5510>
  2074fc:	00800704 	movi	r2,28
  207500:	d9000817 	ldw	r4,32(sp)
  207504:	a0a9883a 	add	r20,r20,r2
  207508:	b0ad883a 	add	r22,r22,r2
  20750c:	2089883a 	add	r4,r4,r2
  207510:	d9000815 	stw	r4,32(sp)
  207514:	003f5106 	br	20725c <_gp+0xffdf5648>
  207518:	d8c00317 	ldw	r3,12(sp)
  20751c:	b8c1fc0e 	bge	r23,r3,207d10 <_dtoa_r+0x15b4>
  207520:	0027883a 	mov	r19,zero
  207524:	b805883a 	mov	r2,r23
  207528:	003f3e06 	br	207224 <_gp+0xffdf5610>
  20752c:	880b883a 	mov	r5,r17
  207530:	e009883a 	mov	r4,fp
  207534:	000f883a 	mov	r7,zero
  207538:	01800284 	movi	r6,10
  20753c:	0209ee40 	call	209ee4 <__multadd>
  207540:	d9000c17 	ldw	r4,48(sp)
  207544:	1023883a 	mov	r17,r2
  207548:	0102040e 	bge	zero,r4,207d5c <_dtoa_r+0x1600>
  20754c:	d9000615 	stw	r4,24(sp)
  207550:	0500050e 	bge	zero,r20,207568 <_dtoa_r+0xe0c>
  207554:	880b883a 	mov	r5,r17
  207558:	a00d883a 	mov	r6,r20
  20755c:	e009883a 	mov	r4,fp
  207560:	020a6500 	call	20a650 <__lshift>
  207564:	1023883a 	mov	r17,r2
  207568:	9801241e 	bne	r19,zero,2079fc <_dtoa_r+0x12a0>
  20756c:	8829883a 	mov	r20,r17
  207570:	d9000617 	ldw	r4,24(sp)
  207574:	dcc00717 	ldw	r19,28(sp)
  207578:	9480004c 	andi	r18,r18,1
  20757c:	20bfffc4 	addi	r2,r4,-1
  207580:	9885883a 	add	r2,r19,r2
  207584:	d8800415 	stw	r2,16(sp)
  207588:	dc800615 	stw	r18,24(sp)
  20758c:	a80b883a 	mov	r5,r21
  207590:	8009883a 	mov	r4,r16
  207594:	02065340 	call	206534 <quorem>
  207598:	880b883a 	mov	r5,r17
  20759c:	8009883a 	mov	r4,r16
  2075a0:	102f883a 	mov	r23,r2
  2075a4:	020a7980 	call	20a798 <__mcmp>
  2075a8:	a80b883a 	mov	r5,r21
  2075ac:	a00d883a 	mov	r6,r20
  2075b0:	e009883a 	mov	r4,fp
  2075b4:	102d883a 	mov	r22,r2
  2075b8:	020a7f80 	call	20a7f8 <__mdiff>
  2075bc:	1007883a 	mov	r3,r2
  2075c0:	10800317 	ldw	r2,12(r2)
  2075c4:	bc800c04 	addi	r18,r23,48
  2075c8:	180b883a 	mov	r5,r3
  2075cc:	10004e1e 	bne	r2,zero,207708 <_dtoa_r+0xfac>
  2075d0:	8009883a 	mov	r4,r16
  2075d4:	d8c01615 	stw	r3,88(sp)
  2075d8:	020a7980 	call	20a798 <__mcmp>
  2075dc:	d8c01617 	ldw	r3,88(sp)
  2075e0:	e009883a 	mov	r4,fp
  2075e4:	d8801615 	stw	r2,88(sp)
  2075e8:	180b883a 	mov	r5,r3
  2075ec:	0209ebc0 	call	209ebc <_Bfree>
  2075f0:	d8801617 	ldw	r2,88(sp)
  2075f4:	1000041e 	bne	r2,zero,207608 <_dtoa_r+0xeac>
  2075f8:	d9800317 	ldw	r6,12(sp)
  2075fc:	3000021e 	bne	r6,zero,207608 <_dtoa_r+0xeac>
  207600:	d8c00617 	ldw	r3,24(sp)
  207604:	18003726 	beq	r3,zero,2076e4 <_dtoa_r+0xf88>
  207608:	b0002016 	blt	r22,zero,20768c <_dtoa_r+0xf30>
  20760c:	b000041e 	bne	r22,zero,207620 <_dtoa_r+0xec4>
  207610:	d9000317 	ldw	r4,12(sp)
  207614:	2000021e 	bne	r4,zero,207620 <_dtoa_r+0xec4>
  207618:	d8c00617 	ldw	r3,24(sp)
  20761c:	18001b26 	beq	r3,zero,20768c <_dtoa_r+0xf30>
  207620:	00810716 	blt	zero,r2,207a40 <_dtoa_r+0x12e4>
  207624:	d8c00417 	ldw	r3,16(sp)
  207628:	9d800044 	addi	r22,r19,1
  20762c:	9c800005 	stb	r18,0(r19)
  207630:	b02f883a 	mov	r23,r22
  207634:	98c10626 	beq	r19,r3,207a50 <_dtoa_r+0x12f4>
  207638:	800b883a 	mov	r5,r16
  20763c:	000f883a 	mov	r7,zero
  207640:	01800284 	movi	r6,10
  207644:	e009883a 	mov	r4,fp
  207648:	0209ee40 	call	209ee4 <__multadd>
  20764c:	1021883a 	mov	r16,r2
  207650:	000f883a 	mov	r7,zero
  207654:	01800284 	movi	r6,10
  207658:	880b883a 	mov	r5,r17
  20765c:	e009883a 	mov	r4,fp
  207660:	8d002526 	beq	r17,r20,2076f8 <_dtoa_r+0xf9c>
  207664:	0209ee40 	call	209ee4 <__multadd>
  207668:	a00b883a 	mov	r5,r20
  20766c:	000f883a 	mov	r7,zero
  207670:	01800284 	movi	r6,10
  207674:	e009883a 	mov	r4,fp
  207678:	1023883a 	mov	r17,r2
  20767c:	0209ee40 	call	209ee4 <__multadd>
  207680:	1029883a 	mov	r20,r2
  207684:	b027883a 	mov	r19,r22
  207688:	003fc006 	br	20758c <_gp+0xffdf5978>
  20768c:	9011883a 	mov	r8,r18
  207690:	00800e0e 	bge	zero,r2,2076cc <_dtoa_r+0xf70>
  207694:	800b883a 	mov	r5,r16
  207698:	01800044 	movi	r6,1
  20769c:	e009883a 	mov	r4,fp
  2076a0:	da001715 	stw	r8,92(sp)
  2076a4:	020a6500 	call	20a650 <__lshift>
  2076a8:	a80b883a 	mov	r5,r21
  2076ac:	1009883a 	mov	r4,r2
  2076b0:	1021883a 	mov	r16,r2
  2076b4:	020a7980 	call	20a798 <__mcmp>
  2076b8:	da001717 	ldw	r8,92(sp)
  2076bc:	0081960e 	bge	zero,r2,207d18 <_dtoa_r+0x15bc>
  2076c0:	00800e44 	movi	r2,57
  2076c4:	40817026 	beq	r8,r2,207c88 <_dtoa_r+0x152c>
  2076c8:	ba000c44 	addi	r8,r23,49
  2076cc:	8825883a 	mov	r18,r17
  2076d0:	9dc00044 	addi	r23,r19,1
  2076d4:	9a000005 	stb	r8,0(r19)
  2076d8:	a023883a 	mov	r17,r20
  2076dc:	dc000915 	stw	r16,36(sp)
  2076e0:	003f2406 	br	207374 <_gp+0xffdf5760>
  2076e4:	00800e44 	movi	r2,57
  2076e8:	9011883a 	mov	r8,r18
  2076ec:	90816626 	beq	r18,r2,207c88 <_dtoa_r+0x152c>
  2076f0:	05bff516 	blt	zero,r22,2076c8 <_gp+0xffdf5ab4>
  2076f4:	003ff506 	br	2076cc <_gp+0xffdf5ab8>
  2076f8:	0209ee40 	call	209ee4 <__multadd>
  2076fc:	1023883a 	mov	r17,r2
  207700:	1029883a 	mov	r20,r2
  207704:	003fdf06 	br	207684 <_gp+0xffdf5a70>
  207708:	e009883a 	mov	r4,fp
  20770c:	0209ebc0 	call	209ebc <_Bfree>
  207710:	00800044 	movi	r2,1
  207714:	003fbc06 	br	207608 <_gp+0xffdf59f4>
  207718:	a80b883a 	mov	r5,r21
  20771c:	8009883a 	mov	r4,r16
  207720:	020a7980 	call	20a798 <__mcmp>
  207724:	103edb0e 	bge	r2,zero,207294 <_gp+0xffdf5680>
  207728:	800b883a 	mov	r5,r16
  20772c:	000f883a 	mov	r7,zero
  207730:	01800284 	movi	r6,10
  207734:	e009883a 	mov	r4,fp
  207738:	0209ee40 	call	209ee4 <__multadd>
  20773c:	1021883a 	mov	r16,r2
  207740:	d8800517 	ldw	r2,20(sp)
  207744:	d8c00b17 	ldw	r3,44(sp)
  207748:	10bfffc4 	addi	r2,r2,-1
  20774c:	d8800515 	stw	r2,20(sp)
  207750:	183f761e 	bne	r3,zero,20752c <_gp+0xffdf5918>
  207754:	d9000c17 	ldw	r4,48(sp)
  207758:	0101730e 	bge	zero,r4,207d28 <_dtoa_r+0x15cc>
  20775c:	d9000615 	stw	r4,24(sp)
  207760:	003ed006 	br	2072a4 <_gp+0xffdf5690>
  207764:	00800084 	movi	r2,2
  207768:	3081861e 	bne	r6,r2,207d84 <_dtoa_r+0x1628>
  20776c:	d8000b15 	stw	zero,44(sp)
  207770:	003f3c06 	br	207464 <_gp+0xffdf5850>
  207774:	dc000917 	ldw	r16,36(sp)
  207778:	003e9206 	br	2071c4 <_gp+0xffdf55b0>
  20777c:	d9c00317 	ldw	r7,12(sp)
  207780:	00800084 	movi	r2,2
  207784:	11fec50e 	bge	r2,r7,20729c <_gp+0xffdf5688>
  207788:	d9000617 	ldw	r4,24(sp)
  20778c:	20013c1e 	bne	r4,zero,207c80 <_dtoa_r+0x1524>
  207790:	a80b883a 	mov	r5,r21
  207794:	000f883a 	mov	r7,zero
  207798:	01800144 	movi	r6,5
  20779c:	e009883a 	mov	r4,fp
  2077a0:	0209ee40 	call	209ee4 <__multadd>
  2077a4:	100b883a 	mov	r5,r2
  2077a8:	8009883a 	mov	r4,r16
  2077ac:	102b883a 	mov	r21,r2
  2077b0:	020a7980 	call	20a798 <__mcmp>
  2077b4:	dc000915 	stw	r16,36(sp)
  2077b8:	00bf410e 	bge	zero,r2,2074c0 <_gp+0xffdf58ac>
  2077bc:	d9c00717 	ldw	r7,28(sp)
  2077c0:	00800c44 	movi	r2,49
  2077c4:	38800005 	stb	r2,0(r7)
  2077c8:	d8800517 	ldw	r2,20(sp)
  2077cc:	3dc00044 	addi	r23,r7,1
  2077d0:	10800044 	addi	r2,r2,1
  2077d4:	d8800515 	stw	r2,20(sp)
  2077d8:	003f3d06 	br	2074d0 <_gp+0xffdf58bc>
  2077dc:	d9800517 	ldw	r6,20(sp)
  2077e0:	d9c00717 	ldw	r7,28(sp)
  2077e4:	00800c44 	movi	r2,49
  2077e8:	31800044 	addi	r6,r6,1
  2077ec:	d9800515 	stw	r6,20(sp)
  2077f0:	38800005 	stb	r2,0(r7)
  2077f4:	003edf06 	br	207374 <_gp+0xffdf5760>
  2077f8:	d8000b15 	stw	zero,44(sp)
  2077fc:	003c9f06 	br	206a7c <_gp+0xffdf4e68>
  207800:	903e7e1e 	bne	r18,zero,2071fc <_gp+0xffdf55e8>
  207804:	00800434 	movhi	r2,16
  207808:	10bfffc4 	addi	r2,r2,-1
  20780c:	9884703a 	and	r2,r19,r2
  207810:	1000ea1e 	bne	r2,zero,207bbc <_dtoa_r+0x1460>
  207814:	9cdffc2c 	andhi	r19,r19,32752
  207818:	9800e826 	beq	r19,zero,207bbc <_dtoa_r+0x1460>
  20781c:	d9c00817 	ldw	r7,32(sp)
  207820:	b5800044 	addi	r22,r22,1
  207824:	04c00044 	movi	r19,1
  207828:	39c00044 	addi	r7,r7,1
  20782c:	d9c00815 	stw	r7,32(sp)
  207830:	d8800d17 	ldw	r2,52(sp)
  207834:	103e721e 	bne	r2,zero,207200 <_gp+0xffdf55ec>
  207838:	00800044 	movi	r2,1
  20783c:	003e7906 	br	207224 <_gp+0xffdf5610>
  207840:	8009883a 	mov	r4,r16
  207844:	0210b380 	call	210b38 <__floatsidf>
  207848:	d9800f17 	ldw	r6,60(sp)
  20784c:	d9c01017 	ldw	r7,64(sp)
  207850:	1009883a 	mov	r4,r2
  207854:	180b883a 	mov	r5,r3
  207858:	020f9500 	call	20f950 <__muldf3>
  20785c:	000d883a 	mov	r6,zero
  207860:	01d00734 	movhi	r7,16412
  207864:	1009883a 	mov	r4,r2
  207868:	180b883a 	mov	r5,r3
  20786c:	020e47c0 	call	20e47c <__adddf3>
  207870:	047f3034 	movhi	r17,64704
  207874:	1021883a 	mov	r16,r2
  207878:	1c63883a 	add	r17,r3,r17
  20787c:	d9000f17 	ldw	r4,60(sp)
  207880:	d9401017 	ldw	r5,64(sp)
  207884:	000d883a 	mov	r6,zero
  207888:	01d00534 	movhi	r7,16404
  20788c:	02101bc0 	call	2101bc <__subdf3>
  207890:	800d883a 	mov	r6,r16
  207894:	880f883a 	mov	r7,r17
  207898:	1009883a 	mov	r4,r2
  20789c:	180b883a 	mov	r5,r3
  2078a0:	102b883a 	mov	r21,r2
  2078a4:	1829883a 	mov	r20,r3
  2078a8:	020f7800 	call	20f780 <__gedf2>
  2078ac:	00806c16 	blt	zero,r2,207a60 <_dtoa_r+0x1304>
  2078b0:	89e0003c 	xorhi	r7,r17,32768
  2078b4:	800d883a 	mov	r6,r16
  2078b8:	a809883a 	mov	r4,r21
  2078bc:	a00b883a 	mov	r5,r20
  2078c0:	020f85c0 	call	20f85c <__ledf2>
  2078c4:	103d7e0e 	bge	r2,zero,206ec0 <_gp+0xffdf52ac>
  2078c8:	002b883a 	mov	r21,zero
  2078cc:	0023883a 	mov	r17,zero
  2078d0:	003efb06 	br	2074c0 <_gp+0xffdf58ac>
  2078d4:	d8800717 	ldw	r2,28(sp)
  2078d8:	003bd006 	br	20681c <_gp+0xffdf4c08>
  2078dc:	d9000a17 	ldw	r4,40(sp)
  2078e0:	d9800d17 	ldw	r6,52(sp)
  2078e4:	dd400a15 	stw	r21,40(sp)
  2078e8:	a905c83a 	sub	r2,r21,r4
  2078ec:	308d883a 	add	r6,r6,r2
  2078f0:	d9800d15 	stw	r6,52(sp)
  2078f4:	002b883a 	mov	r21,zero
  2078f8:	003e0606 	br	207114 <_gp+0xffdf5500>
  2078fc:	9023883a 	mov	r17,r18
  207900:	9829883a 	mov	r20,r19
  207904:	04000084 	movi	r16,2
  207908:	003c9206 	br	206b54 <_gp+0xffdf4f40>
  20790c:	04000044 	movi	r16,1
  207910:	dc000c15 	stw	r16,48(sp)
  207914:	dc000615 	stw	r16,24(sp)
  207918:	dc002215 	stw	r16,136(sp)
  20791c:	e0001115 	stw	zero,68(fp)
  207920:	000b883a 	mov	r5,zero
  207924:	003c6906 	br	206acc <_gp+0xffdf4eb8>
  207928:	3021883a 	mov	r16,r6
  20792c:	003ffb06 	br	20791c <_gp+0xffdf5d08>
  207930:	1000021e 	bne	r2,zero,20793c <_dtoa_r+0x11e0>
  207934:	4200004c 	andi	r8,r8,1
  207938:	403e7d1e 	bne	r8,zero,207330 <_gp+0xffdf571c>
  20793c:	01000c04 	movi	r4,48
  207940:	00000106 	br	207948 <_dtoa_r+0x11ec>
  207944:	102f883a 	mov	r23,r2
  207948:	b8bfffc4 	addi	r2,r23,-1
  20794c:	10c00007 	ldb	r3,0(r2)
  207950:	193ffc26 	beq	r3,r4,207944 <_gp+0xffdf5d30>
  207954:	003e8706 	br	207374 <_gp+0xffdf5760>
  207958:	d8800517 	ldw	r2,20(sp)
  20795c:	00a3c83a 	sub	r17,zero,r2
  207960:	8800a426 	beq	r17,zero,207bf4 <_dtoa_r+0x1498>
  207964:	888003cc 	andi	r2,r17,15
  207968:	100490fa 	slli	r2,r2,3
  20796c:	00c00874 	movhi	r3,33
  207970:	18db3204 	addi	r3,r3,27848
  207974:	1885883a 	add	r2,r3,r2
  207978:	11800017 	ldw	r6,0(r2)
  20797c:	11c00117 	ldw	r7,4(r2)
  207980:	9009883a 	mov	r4,r18
  207984:	980b883a 	mov	r5,r19
  207988:	8823d13a 	srai	r17,r17,4
  20798c:	020f9500 	call	20f950 <__muldf3>
  207990:	d8800f15 	stw	r2,60(sp)
  207994:	d8c01015 	stw	r3,64(sp)
  207998:	8800e826 	beq	r17,zero,207d3c <_dtoa_r+0x15e0>
  20799c:	05000874 	movhi	r20,33
  2079a0:	a51b2804 	addi	r20,r20,27808
  2079a4:	04000084 	movi	r16,2
  2079a8:	8980004c 	andi	r6,r17,1
  2079ac:	1009883a 	mov	r4,r2
  2079b0:	8823d07a 	srai	r17,r17,1
  2079b4:	180b883a 	mov	r5,r3
  2079b8:	30000426 	beq	r6,zero,2079cc <_dtoa_r+0x1270>
  2079bc:	a1800017 	ldw	r6,0(r20)
  2079c0:	a1c00117 	ldw	r7,4(r20)
  2079c4:	84000044 	addi	r16,r16,1
  2079c8:	020f9500 	call	20f950 <__muldf3>
  2079cc:	a5000204 	addi	r20,r20,8
  2079d0:	883ff51e 	bne	r17,zero,2079a8 <_gp+0xffdf5d94>
  2079d4:	d8800f15 	stw	r2,60(sp)
  2079d8:	d8c01015 	stw	r3,64(sp)
  2079dc:	003c7606 	br	206bb8 <_gp+0xffdf4fa4>
  2079e0:	00c00c04 	movi	r3,48
  2079e4:	10c00005 	stb	r3,0(r2)
  2079e8:	d8c00517 	ldw	r3,20(sp)
  2079ec:	bd3fffc3 	ldbu	r20,-1(r23)
  2079f0:	18c00044 	addi	r3,r3,1
  2079f4:	d8c00515 	stw	r3,20(sp)
  2079f8:	003db906 	br	2070e0 <_gp+0xffdf54cc>
  2079fc:	89400117 	ldw	r5,4(r17)
  207a00:	e009883a 	mov	r4,fp
  207a04:	0209e140 	call	209e14 <_Balloc>
  207a08:	89800417 	ldw	r6,16(r17)
  207a0c:	89400304 	addi	r5,r17,12
  207a10:	11000304 	addi	r4,r2,12
  207a14:	31800084 	addi	r6,r6,2
  207a18:	318d883a 	add	r6,r6,r6
  207a1c:	318d883a 	add	r6,r6,r6
  207a20:	1027883a 	mov	r19,r2
  207a24:	0209a480 	call	209a48 <memcpy>
  207a28:	01800044 	movi	r6,1
  207a2c:	980b883a 	mov	r5,r19
  207a30:	e009883a 	mov	r4,fp
  207a34:	020a6500 	call	20a650 <__lshift>
  207a38:	1029883a 	mov	r20,r2
  207a3c:	003ecc06 	br	207570 <_gp+0xffdf595c>
  207a40:	00800e44 	movi	r2,57
  207a44:	90809026 	beq	r18,r2,207c88 <_dtoa_r+0x152c>
  207a48:	92000044 	addi	r8,r18,1
  207a4c:	003f1f06 	br	2076cc <_gp+0xffdf5ab8>
  207a50:	9011883a 	mov	r8,r18
  207a54:	8825883a 	mov	r18,r17
  207a58:	a023883a 	mov	r17,r20
  207a5c:	003e2906 	br	207304 <_gp+0xffdf56f0>
  207a60:	002b883a 	mov	r21,zero
  207a64:	0023883a 	mov	r17,zero
  207a68:	003f5406 	br	2077bc <_gp+0xffdf5ba8>
  207a6c:	61bfffc4 	addi	r6,r12,-1
  207a70:	300490fa 	slli	r2,r6,3
  207a74:	00c00874 	movhi	r3,33
  207a78:	18db3204 	addi	r3,r3,27848
  207a7c:	1885883a 	add	r2,r3,r2
  207a80:	11000017 	ldw	r4,0(r2)
  207a84:	11400117 	ldw	r5,4(r2)
  207a88:	d8800717 	ldw	r2,28(sp)
  207a8c:	880f883a 	mov	r7,r17
  207a90:	d9801215 	stw	r6,72(sp)
  207a94:	800d883a 	mov	r6,r16
  207a98:	db001615 	stw	r12,88(sp)
  207a9c:	15c00044 	addi	r23,r2,1
  207aa0:	020f9500 	call	20f950 <__muldf3>
  207aa4:	d9401017 	ldw	r5,64(sp)
  207aa8:	d9000f17 	ldw	r4,60(sp)
  207aac:	d8c01515 	stw	r3,84(sp)
  207ab0:	d8801415 	stw	r2,80(sp)
  207ab4:	0210ab80 	call	210ab8 <__fixdfsi>
  207ab8:	1009883a 	mov	r4,r2
  207abc:	1021883a 	mov	r16,r2
  207ac0:	0210b380 	call	210b38 <__floatsidf>
  207ac4:	d9000f17 	ldw	r4,60(sp)
  207ac8:	d9401017 	ldw	r5,64(sp)
  207acc:	100d883a 	mov	r6,r2
  207ad0:	180f883a 	mov	r7,r3
  207ad4:	02101bc0 	call	2101bc <__subdf3>
  207ad8:	1829883a 	mov	r20,r3
  207adc:	d8c00717 	ldw	r3,28(sp)
  207ae0:	84000c04 	addi	r16,r16,48
  207ae4:	1023883a 	mov	r17,r2
  207ae8:	1c000005 	stb	r16,0(r3)
  207aec:	db001617 	ldw	r12,88(sp)
  207af0:	00800044 	movi	r2,1
  207af4:	60802226 	beq	r12,r2,207b80 <_dtoa_r+0x1424>
  207af8:	d9c00717 	ldw	r7,28(sp)
  207afc:	8805883a 	mov	r2,r17
  207b00:	b82b883a 	mov	r21,r23
  207b04:	3b19883a 	add	r12,r7,r12
  207b08:	6023883a 	mov	r17,r12
  207b0c:	a007883a 	mov	r3,r20
  207b10:	dc800f15 	stw	r18,60(sp)
  207b14:	000d883a 	mov	r6,zero
  207b18:	01d00934 	movhi	r7,16420
  207b1c:	1009883a 	mov	r4,r2
  207b20:	180b883a 	mov	r5,r3
  207b24:	020f9500 	call	20f950 <__muldf3>
  207b28:	180b883a 	mov	r5,r3
  207b2c:	1009883a 	mov	r4,r2
  207b30:	1829883a 	mov	r20,r3
  207b34:	1025883a 	mov	r18,r2
  207b38:	0210ab80 	call	210ab8 <__fixdfsi>
  207b3c:	1009883a 	mov	r4,r2
  207b40:	1021883a 	mov	r16,r2
  207b44:	0210b380 	call	210b38 <__floatsidf>
  207b48:	100d883a 	mov	r6,r2
  207b4c:	180f883a 	mov	r7,r3
  207b50:	9009883a 	mov	r4,r18
  207b54:	a00b883a 	mov	r5,r20
  207b58:	84000c04 	addi	r16,r16,48
  207b5c:	02101bc0 	call	2101bc <__subdf3>
  207b60:	ad400044 	addi	r21,r21,1
  207b64:	ac3fffc5 	stb	r16,-1(r21)
  207b68:	ac7fea1e 	bne	r21,r17,207b14 <_gp+0xffdf5f00>
  207b6c:	1023883a 	mov	r17,r2
  207b70:	d8801217 	ldw	r2,72(sp)
  207b74:	dc800f17 	ldw	r18,60(sp)
  207b78:	1829883a 	mov	r20,r3
  207b7c:	b8af883a 	add	r23,r23,r2
  207b80:	d9001417 	ldw	r4,80(sp)
  207b84:	d9401517 	ldw	r5,84(sp)
  207b88:	000d883a 	mov	r6,zero
  207b8c:	01cff834 	movhi	r7,16352
  207b90:	020e47c0 	call	20e47c <__adddf3>
  207b94:	880d883a 	mov	r6,r17
  207b98:	a00f883a 	mov	r7,r20
  207b9c:	1009883a 	mov	r4,r2
  207ba0:	180b883a 	mov	r5,r3
  207ba4:	020f85c0 	call	20f85c <__ledf2>
  207ba8:	10003e0e 	bge	r2,zero,207ca4 <_dtoa_r+0x1548>
  207bac:	d9001317 	ldw	r4,76(sp)
  207bb0:	bd3fffc3 	ldbu	r20,-1(r23)
  207bb4:	d9000515 	stw	r4,20(sp)
  207bb8:	003d3b06 	br	2070a8 <_gp+0xffdf5494>
  207bbc:	0027883a 	mov	r19,zero
  207bc0:	003f1b06 	br	207830 <_gp+0xffdf5c1c>
  207bc4:	d8800817 	ldw	r2,32(sp)
  207bc8:	11e9c83a 	sub	r20,r2,r7
  207bcc:	0005883a 	mov	r2,zero
  207bd0:	003d5406 	br	207124 <_gp+0xffdf5510>
  207bd4:	00800044 	movi	r2,1
  207bd8:	003dc706 	br	2072f8 <_gp+0xffdf56e4>
  207bdc:	d8c00217 	ldw	r3,8(sp)
  207be0:	00800d84 	movi	r2,54
  207be4:	dd400a17 	ldw	r21,40(sp)
  207be8:	10c5c83a 	sub	r2,r2,r3
  207bec:	dd000817 	ldw	r20,32(sp)
  207bf0:	003d4c06 	br	207124 <_gp+0xffdf5510>
  207bf4:	dc800f15 	stw	r18,60(sp)
  207bf8:	dcc01015 	stw	r19,64(sp)
  207bfc:	04000084 	movi	r16,2
  207c00:	003bed06 	br	206bb8 <_gp+0xffdf4fa4>
  207c04:	d9000617 	ldw	r4,24(sp)
  207c08:	203f0d26 	beq	r4,zero,207840 <_gp+0xffdf5c2c>
  207c0c:	d9800c17 	ldw	r6,48(sp)
  207c10:	01bcab0e 	bge	zero,r6,206ec0 <_gp+0xffdf52ac>
  207c14:	d9401017 	ldw	r5,64(sp)
  207c18:	d9000f17 	ldw	r4,60(sp)
  207c1c:	000d883a 	mov	r6,zero
  207c20:	01d00934 	movhi	r7,16420
  207c24:	020f9500 	call	20f950 <__muldf3>
  207c28:	81000044 	addi	r4,r16,1
  207c2c:	d8800f15 	stw	r2,60(sp)
  207c30:	d8c01015 	stw	r3,64(sp)
  207c34:	0210b380 	call	210b38 <__floatsidf>
  207c38:	d9800f17 	ldw	r6,60(sp)
  207c3c:	d9c01017 	ldw	r7,64(sp)
  207c40:	1009883a 	mov	r4,r2
  207c44:	180b883a 	mov	r5,r3
  207c48:	020f9500 	call	20f950 <__muldf3>
  207c4c:	01d00734 	movhi	r7,16412
  207c50:	000d883a 	mov	r6,zero
  207c54:	1009883a 	mov	r4,r2
  207c58:	180b883a 	mov	r5,r3
  207c5c:	020e47c0 	call	20e47c <__adddf3>
  207c60:	d9c00517 	ldw	r7,20(sp)
  207c64:	047f3034 	movhi	r17,64704
  207c68:	1021883a 	mov	r16,r2
  207c6c:	39ffffc4 	addi	r7,r7,-1
  207c70:	d9c01315 	stw	r7,76(sp)
  207c74:	1c63883a 	add	r17,r3,r17
  207c78:	db000c17 	ldw	r12,48(sp)
  207c7c:	003bea06 	br	206c28 <_gp+0xffdf5014>
  207c80:	dc000915 	stw	r16,36(sp)
  207c84:	003e0e06 	br	2074c0 <_gp+0xffdf58ac>
  207c88:	01000e44 	movi	r4,57
  207c8c:	8825883a 	mov	r18,r17
  207c90:	9dc00044 	addi	r23,r19,1
  207c94:	99000005 	stb	r4,0(r19)
  207c98:	a023883a 	mov	r17,r20
  207c9c:	dc000915 	stw	r16,36(sp)
  207ca0:	003da406 	br	207334 <_gp+0xffdf5720>
  207ca4:	d9801417 	ldw	r6,80(sp)
  207ca8:	d9c01517 	ldw	r7,84(sp)
  207cac:	0009883a 	mov	r4,zero
  207cb0:	014ff834 	movhi	r5,16352
  207cb4:	02101bc0 	call	2101bc <__subdf3>
  207cb8:	880d883a 	mov	r6,r17
  207cbc:	a00f883a 	mov	r7,r20
  207cc0:	1009883a 	mov	r4,r2
  207cc4:	180b883a 	mov	r5,r3
  207cc8:	020f7800 	call	20f780 <__gedf2>
  207ccc:	00bc7c0e 	bge	zero,r2,206ec0 <_gp+0xffdf52ac>
  207cd0:	01000c04 	movi	r4,48
  207cd4:	00000106 	br	207cdc <_dtoa_r+0x1580>
  207cd8:	102f883a 	mov	r23,r2
  207cdc:	b8bfffc4 	addi	r2,r23,-1
  207ce0:	10c00007 	ldb	r3,0(r2)
  207ce4:	193ffc26 	beq	r3,r4,207cd8 <_gp+0xffdf60c4>
  207ce8:	d9801317 	ldw	r6,76(sp)
  207cec:	d9800515 	stw	r6,20(sp)
  207cf0:	003c4406 	br	206e04 <_gp+0xffdf51f0>
  207cf4:	d9801317 	ldw	r6,76(sp)
  207cf8:	d9800515 	stw	r6,20(sp)
  207cfc:	003cea06 	br	2070a8 <_gp+0xffdf5494>
  207d00:	dd800f17 	ldw	r22,60(sp)
  207d04:	dcc01017 	ldw	r19,64(sp)
  207d08:	dc801217 	ldw	r18,72(sp)
  207d0c:	003c6c06 	br	206ec0 <_gp+0xffdf52ac>
  207d10:	903e031e 	bne	r18,zero,207520 <_gp+0xffdf590c>
  207d14:	003ebb06 	br	207804 <_gp+0xffdf5bf0>
  207d18:	103e6c1e 	bne	r2,zero,2076cc <_gp+0xffdf5ab8>
  207d1c:	4080004c 	andi	r2,r8,1
  207d20:	103e6a26 	beq	r2,zero,2076cc <_gp+0xffdf5ab8>
  207d24:	003e6606 	br	2076c0 <_gp+0xffdf5aac>
  207d28:	d8c00317 	ldw	r3,12(sp)
  207d2c:	00800084 	movi	r2,2
  207d30:	10c02916 	blt	r2,r3,207dd8 <_dtoa_r+0x167c>
  207d34:	d9000c17 	ldw	r4,48(sp)
  207d38:	003e8806 	br	20775c <_gp+0xffdf5b48>
  207d3c:	04000084 	movi	r16,2
  207d40:	003b9d06 	br	206bb8 <_gp+0xffdf4fa4>
  207d44:	d9001317 	ldw	r4,76(sp)
  207d48:	d9000515 	stw	r4,20(sp)
  207d4c:	003cd606 	br	2070a8 <_gp+0xffdf5494>
  207d50:	d8801317 	ldw	r2,76(sp)
  207d54:	d8800515 	stw	r2,20(sp)
  207d58:	003c2a06 	br	206e04 <_gp+0xffdf51f0>
  207d5c:	d9800317 	ldw	r6,12(sp)
  207d60:	00800084 	movi	r2,2
  207d64:	11801516 	blt	r2,r6,207dbc <_dtoa_r+0x1660>
  207d68:	d9c00c17 	ldw	r7,48(sp)
  207d6c:	d9c00615 	stw	r7,24(sp)
  207d70:	003df706 	br	207550 <_gp+0xffdf593c>
  207d74:	193d3926 	beq	r3,r4,20725c <_gp+0xffdf5648>
  207d78:	00c00f04 	movi	r3,60
  207d7c:	1885c83a 	sub	r2,r3,r2
  207d80:	003ddf06 	br	207500 <_gp+0xffdf58ec>
  207d84:	e009883a 	mov	r4,fp
  207d88:	e0001115 	stw	zero,68(fp)
  207d8c:	000b883a 	mov	r5,zero
  207d90:	0209e140 	call	209e14 <_Balloc>
  207d94:	d8800715 	stw	r2,28(sp)
  207d98:	d8c00717 	ldw	r3,28(sp)
  207d9c:	00bfffc4 	movi	r2,-1
  207da0:	01000044 	movi	r4,1
  207da4:	d8800c15 	stw	r2,48(sp)
  207da8:	e0c01015 	stw	r3,64(fp)
  207dac:	d9000b15 	stw	r4,44(sp)
  207db0:	d8800615 	stw	r2,24(sp)
  207db4:	d8002215 	stw	zero,136(sp)
  207db8:	003c4106 	br	206ec0 <_gp+0xffdf52ac>
  207dbc:	d8c00c17 	ldw	r3,48(sp)
  207dc0:	d8c00615 	stw	r3,24(sp)
  207dc4:	003e7006 	br	207788 <_gp+0xffdf5b74>
  207dc8:	04400044 	movi	r17,1
  207dcc:	003b2006 	br	206a50 <_gp+0xffdf4e3c>
  207dd0:	000b883a 	mov	r5,zero
  207dd4:	003b3d06 	br	206acc <_gp+0xffdf4eb8>
  207dd8:	d8800c17 	ldw	r2,48(sp)
  207ddc:	d8800615 	stw	r2,24(sp)
  207de0:	003e6906 	br	207788 <_gp+0xffdf5b74>

00207de4 <__sflush_r>:
  207de4:	2880030b 	ldhu	r2,12(r5)
  207de8:	defffb04 	addi	sp,sp,-20
  207dec:	dcc00315 	stw	r19,12(sp)
  207df0:	dc400115 	stw	r17,4(sp)
  207df4:	dfc00415 	stw	ra,16(sp)
  207df8:	dc800215 	stw	r18,8(sp)
  207dfc:	dc000015 	stw	r16,0(sp)
  207e00:	10c0020c 	andi	r3,r2,8
  207e04:	2823883a 	mov	r17,r5
  207e08:	2027883a 	mov	r19,r4
  207e0c:	1800311e 	bne	r3,zero,207ed4 <__sflush_r+0xf0>
  207e10:	28c00117 	ldw	r3,4(r5)
  207e14:	10820014 	ori	r2,r2,2048
  207e18:	2880030d 	sth	r2,12(r5)
  207e1c:	00c04b0e 	bge	zero,r3,207f4c <__sflush_r+0x168>
  207e20:	8a000a17 	ldw	r8,40(r17)
  207e24:	40002326 	beq	r8,zero,207eb4 <__sflush_r+0xd0>
  207e28:	9c000017 	ldw	r16,0(r19)
  207e2c:	10c4000c 	andi	r3,r2,4096
  207e30:	98000015 	stw	zero,0(r19)
  207e34:	18004826 	beq	r3,zero,207f58 <__sflush_r+0x174>
  207e38:	89801417 	ldw	r6,80(r17)
  207e3c:	10c0010c 	andi	r3,r2,4
  207e40:	18000626 	beq	r3,zero,207e5c <__sflush_r+0x78>
  207e44:	88c00117 	ldw	r3,4(r17)
  207e48:	88800c17 	ldw	r2,48(r17)
  207e4c:	30cdc83a 	sub	r6,r6,r3
  207e50:	10000226 	beq	r2,zero,207e5c <__sflush_r+0x78>
  207e54:	88800f17 	ldw	r2,60(r17)
  207e58:	308dc83a 	sub	r6,r6,r2
  207e5c:	89400717 	ldw	r5,28(r17)
  207e60:	000f883a 	mov	r7,zero
  207e64:	9809883a 	mov	r4,r19
  207e68:	403ee83a 	callr	r8
  207e6c:	00ffffc4 	movi	r3,-1
  207e70:	10c04426 	beq	r2,r3,207f84 <__sflush_r+0x1a0>
  207e74:	88c0030b 	ldhu	r3,12(r17)
  207e78:	89000417 	ldw	r4,16(r17)
  207e7c:	88000115 	stw	zero,4(r17)
  207e80:	197dffcc 	andi	r5,r3,63487
  207e84:	8940030d 	sth	r5,12(r17)
  207e88:	89000015 	stw	r4,0(r17)
  207e8c:	18c4000c 	andi	r3,r3,4096
  207e90:	18002c1e 	bne	r3,zero,207f44 <__sflush_r+0x160>
  207e94:	89400c17 	ldw	r5,48(r17)
  207e98:	9c000015 	stw	r16,0(r19)
  207e9c:	28000526 	beq	r5,zero,207eb4 <__sflush_r+0xd0>
  207ea0:	88801004 	addi	r2,r17,64
  207ea4:	28800226 	beq	r5,r2,207eb0 <__sflush_r+0xcc>
  207ea8:	9809883a 	mov	r4,r19
  207eac:	02085600 	call	208560 <_free_r>
  207eb0:	88000c15 	stw	zero,48(r17)
  207eb4:	0005883a 	mov	r2,zero
  207eb8:	dfc00417 	ldw	ra,16(sp)
  207ebc:	dcc00317 	ldw	r19,12(sp)
  207ec0:	dc800217 	ldw	r18,8(sp)
  207ec4:	dc400117 	ldw	r17,4(sp)
  207ec8:	dc000017 	ldw	r16,0(sp)
  207ecc:	dec00504 	addi	sp,sp,20
  207ed0:	f800283a 	ret
  207ed4:	2c800417 	ldw	r18,16(r5)
  207ed8:	903ff626 	beq	r18,zero,207eb4 <_gp+0xffdf62a0>
  207edc:	2c000017 	ldw	r16,0(r5)
  207ee0:	108000cc 	andi	r2,r2,3
  207ee4:	2c800015 	stw	r18,0(r5)
  207ee8:	84a1c83a 	sub	r16,r16,r18
  207eec:	1000131e 	bne	r2,zero,207f3c <__sflush_r+0x158>
  207ef0:	28800517 	ldw	r2,20(r5)
  207ef4:	88800215 	stw	r2,8(r17)
  207ef8:	04000316 	blt	zero,r16,207f08 <__sflush_r+0x124>
  207efc:	003fed06 	br	207eb4 <_gp+0xffdf62a0>
  207f00:	90a5883a 	add	r18,r18,r2
  207f04:	043feb0e 	bge	zero,r16,207eb4 <_gp+0xffdf62a0>
  207f08:	88800917 	ldw	r2,36(r17)
  207f0c:	89400717 	ldw	r5,28(r17)
  207f10:	800f883a 	mov	r7,r16
  207f14:	900d883a 	mov	r6,r18
  207f18:	9809883a 	mov	r4,r19
  207f1c:	103ee83a 	callr	r2
  207f20:	80a1c83a 	sub	r16,r16,r2
  207f24:	00bff616 	blt	zero,r2,207f00 <_gp+0xffdf62ec>
  207f28:	88c0030b 	ldhu	r3,12(r17)
  207f2c:	00bfffc4 	movi	r2,-1
  207f30:	18c01014 	ori	r3,r3,64
  207f34:	88c0030d 	sth	r3,12(r17)
  207f38:	003fdf06 	br	207eb8 <_gp+0xffdf62a4>
  207f3c:	0005883a 	mov	r2,zero
  207f40:	003fec06 	br	207ef4 <_gp+0xffdf62e0>
  207f44:	88801415 	stw	r2,80(r17)
  207f48:	003fd206 	br	207e94 <_gp+0xffdf6280>
  207f4c:	28c00f17 	ldw	r3,60(r5)
  207f50:	00ffb316 	blt	zero,r3,207e20 <_gp+0xffdf620c>
  207f54:	003fd706 	br	207eb4 <_gp+0xffdf62a0>
  207f58:	89400717 	ldw	r5,28(r17)
  207f5c:	000d883a 	mov	r6,zero
  207f60:	01c00044 	movi	r7,1
  207f64:	9809883a 	mov	r4,r19
  207f68:	403ee83a 	callr	r8
  207f6c:	100d883a 	mov	r6,r2
  207f70:	00bfffc4 	movi	r2,-1
  207f74:	30801426 	beq	r6,r2,207fc8 <__sflush_r+0x1e4>
  207f78:	8880030b 	ldhu	r2,12(r17)
  207f7c:	8a000a17 	ldw	r8,40(r17)
  207f80:	003fae06 	br	207e3c <_gp+0xffdf6228>
  207f84:	98c00017 	ldw	r3,0(r19)
  207f88:	183fba26 	beq	r3,zero,207e74 <_gp+0xffdf6260>
  207f8c:	01000744 	movi	r4,29
  207f90:	19000626 	beq	r3,r4,207fac <__sflush_r+0x1c8>
  207f94:	01000584 	movi	r4,22
  207f98:	19000426 	beq	r3,r4,207fac <__sflush_r+0x1c8>
  207f9c:	88c0030b 	ldhu	r3,12(r17)
  207fa0:	18c01014 	ori	r3,r3,64
  207fa4:	88c0030d 	sth	r3,12(r17)
  207fa8:	003fc306 	br	207eb8 <_gp+0xffdf62a4>
  207fac:	8880030b 	ldhu	r2,12(r17)
  207fb0:	88c00417 	ldw	r3,16(r17)
  207fb4:	88000115 	stw	zero,4(r17)
  207fb8:	10bdffcc 	andi	r2,r2,63487
  207fbc:	8880030d 	sth	r2,12(r17)
  207fc0:	88c00015 	stw	r3,0(r17)
  207fc4:	003fb306 	br	207e94 <_gp+0xffdf6280>
  207fc8:	98800017 	ldw	r2,0(r19)
  207fcc:	103fea26 	beq	r2,zero,207f78 <_gp+0xffdf6364>
  207fd0:	00c00744 	movi	r3,29
  207fd4:	10c00226 	beq	r2,r3,207fe0 <__sflush_r+0x1fc>
  207fd8:	00c00584 	movi	r3,22
  207fdc:	10c0031e 	bne	r2,r3,207fec <__sflush_r+0x208>
  207fe0:	9c000015 	stw	r16,0(r19)
  207fe4:	0005883a 	mov	r2,zero
  207fe8:	003fb306 	br	207eb8 <_gp+0xffdf62a4>
  207fec:	88c0030b 	ldhu	r3,12(r17)
  207ff0:	3005883a 	mov	r2,r6
  207ff4:	18c01014 	ori	r3,r3,64
  207ff8:	88c0030d 	sth	r3,12(r17)
  207ffc:	003fae06 	br	207eb8 <_gp+0xffdf62a4>

00208000 <_fflush_r>:
  208000:	defffd04 	addi	sp,sp,-12
  208004:	dc000115 	stw	r16,4(sp)
  208008:	dfc00215 	stw	ra,8(sp)
  20800c:	2021883a 	mov	r16,r4
  208010:	20000226 	beq	r4,zero,20801c <_fflush_r+0x1c>
  208014:	20800e17 	ldw	r2,56(r4)
  208018:	10000c26 	beq	r2,zero,20804c <_fflush_r+0x4c>
  20801c:	2880030f 	ldh	r2,12(r5)
  208020:	1000051e 	bne	r2,zero,208038 <_fflush_r+0x38>
  208024:	0005883a 	mov	r2,zero
  208028:	dfc00217 	ldw	ra,8(sp)
  20802c:	dc000117 	ldw	r16,4(sp)
  208030:	dec00304 	addi	sp,sp,12
  208034:	f800283a 	ret
  208038:	8009883a 	mov	r4,r16
  20803c:	dfc00217 	ldw	ra,8(sp)
  208040:	dc000117 	ldw	r16,4(sp)
  208044:	dec00304 	addi	sp,sp,12
  208048:	0207de41 	jmpi	207de4 <__sflush_r>
  20804c:	d9400015 	stw	r5,0(sp)
  208050:	02083ec0 	call	2083ec <__sinit>
  208054:	d9400017 	ldw	r5,0(sp)
  208058:	003ff006 	br	20801c <_gp+0xffdf6408>

0020805c <fflush>:
  20805c:	20000526 	beq	r4,zero,208074 <fflush+0x18>
  208060:	00801074 	movhi	r2,65
  208064:	10a70a04 	addi	r2,r2,-25560
  208068:	200b883a 	mov	r5,r4
  20806c:	11000017 	ldw	r4,0(r2)
  208070:	02080001 	jmpi	208000 <_fflush_r>
  208074:	00801074 	movhi	r2,65
  208078:	10a70904 	addi	r2,r2,-25564
  20807c:	11000017 	ldw	r4,0(r2)
  208080:	01400874 	movhi	r5,33
  208084:	29600004 	addi	r5,r5,-32768
  208088:	0208dfc1 	jmpi	208dfc <_fwalk_reent>

0020808c <__fp_unlock>:
  20808c:	0005883a 	mov	r2,zero
  208090:	f800283a 	ret

00208094 <_cleanup_r>:
  208094:	01400874 	movhi	r5,33
  208098:	29749604 	addi	r5,r5,-11688
  20809c:	0208dfc1 	jmpi	208dfc <_fwalk_reent>

002080a0 <__sinit.part.1>:
  2080a0:	defff704 	addi	sp,sp,-36
  2080a4:	00c00874 	movhi	r3,33
  2080a8:	dfc00815 	stw	ra,32(sp)
  2080ac:	ddc00715 	stw	r23,28(sp)
  2080b0:	dd800615 	stw	r22,24(sp)
  2080b4:	dd400515 	stw	r21,20(sp)
  2080b8:	dd000415 	stw	r20,16(sp)
  2080bc:	dcc00315 	stw	r19,12(sp)
  2080c0:	dc800215 	stw	r18,8(sp)
  2080c4:	dc400115 	stw	r17,4(sp)
  2080c8:	dc000015 	stw	r16,0(sp)
  2080cc:	18e02504 	addi	r3,r3,-32620
  2080d0:	24000117 	ldw	r16,4(r4)
  2080d4:	20c00f15 	stw	r3,60(r4)
  2080d8:	2080bb04 	addi	r2,r4,748
  2080dc:	00c000c4 	movi	r3,3
  2080e0:	20c0b915 	stw	r3,740(r4)
  2080e4:	2080ba15 	stw	r2,744(r4)
  2080e8:	2000b815 	stw	zero,736(r4)
  2080ec:	05c00204 	movi	r23,8
  2080f0:	00800104 	movi	r2,4
  2080f4:	2025883a 	mov	r18,r4
  2080f8:	b80d883a 	mov	r6,r23
  2080fc:	81001704 	addi	r4,r16,92
  208100:	000b883a 	mov	r5,zero
  208104:	80000015 	stw	zero,0(r16)
  208108:	80000115 	stw	zero,4(r16)
  20810c:	80000215 	stw	zero,8(r16)
  208110:	8080030d 	sth	r2,12(r16)
  208114:	80001915 	stw	zero,100(r16)
  208118:	8000038d 	sth	zero,14(r16)
  20811c:	80000415 	stw	zero,16(r16)
  208120:	80000515 	stw	zero,20(r16)
  208124:	80000615 	stw	zero,24(r16)
  208128:	0209cec0 	call	209cec <memset>
  20812c:	05800874 	movhi	r22,33
  208130:	94400217 	ldw	r17,8(r18)
  208134:	05400874 	movhi	r21,33
  208138:	05000874 	movhi	r20,33
  20813c:	04c00874 	movhi	r19,33
  208140:	b5ad9804 	addi	r22,r22,-18848
  208144:	ad6daf04 	addi	r21,r21,-18756
  208148:	a52dce04 	addi	r20,r20,-18632
  20814c:	9cede504 	addi	r19,r19,-18540
  208150:	85800815 	stw	r22,32(r16)
  208154:	85400915 	stw	r21,36(r16)
  208158:	85000a15 	stw	r20,40(r16)
  20815c:	84c00b15 	stw	r19,44(r16)
  208160:	84000715 	stw	r16,28(r16)
  208164:	00800284 	movi	r2,10
  208168:	8880030d 	sth	r2,12(r17)
  20816c:	00800044 	movi	r2,1
  208170:	b80d883a 	mov	r6,r23
  208174:	89001704 	addi	r4,r17,92
  208178:	000b883a 	mov	r5,zero
  20817c:	88000015 	stw	zero,0(r17)
  208180:	88000115 	stw	zero,4(r17)
  208184:	88000215 	stw	zero,8(r17)
  208188:	88001915 	stw	zero,100(r17)
  20818c:	8880038d 	sth	r2,14(r17)
  208190:	88000415 	stw	zero,16(r17)
  208194:	88000515 	stw	zero,20(r17)
  208198:	88000615 	stw	zero,24(r17)
  20819c:	0209cec0 	call	209cec <memset>
  2081a0:	94000317 	ldw	r16,12(r18)
  2081a4:	00800484 	movi	r2,18
  2081a8:	8c400715 	stw	r17,28(r17)
  2081ac:	8d800815 	stw	r22,32(r17)
  2081b0:	8d400915 	stw	r21,36(r17)
  2081b4:	8d000a15 	stw	r20,40(r17)
  2081b8:	8cc00b15 	stw	r19,44(r17)
  2081bc:	8080030d 	sth	r2,12(r16)
  2081c0:	00800084 	movi	r2,2
  2081c4:	80000015 	stw	zero,0(r16)
  2081c8:	80000115 	stw	zero,4(r16)
  2081cc:	80000215 	stw	zero,8(r16)
  2081d0:	80001915 	stw	zero,100(r16)
  2081d4:	8080038d 	sth	r2,14(r16)
  2081d8:	80000415 	stw	zero,16(r16)
  2081dc:	80000515 	stw	zero,20(r16)
  2081e0:	80000615 	stw	zero,24(r16)
  2081e4:	b80d883a 	mov	r6,r23
  2081e8:	000b883a 	mov	r5,zero
  2081ec:	81001704 	addi	r4,r16,92
  2081f0:	0209cec0 	call	209cec <memset>
  2081f4:	00800044 	movi	r2,1
  2081f8:	84000715 	stw	r16,28(r16)
  2081fc:	85800815 	stw	r22,32(r16)
  208200:	85400915 	stw	r21,36(r16)
  208204:	85000a15 	stw	r20,40(r16)
  208208:	84c00b15 	stw	r19,44(r16)
  20820c:	90800e15 	stw	r2,56(r18)
  208210:	dfc00817 	ldw	ra,32(sp)
  208214:	ddc00717 	ldw	r23,28(sp)
  208218:	dd800617 	ldw	r22,24(sp)
  20821c:	dd400517 	ldw	r21,20(sp)
  208220:	dd000417 	ldw	r20,16(sp)
  208224:	dcc00317 	ldw	r19,12(sp)
  208228:	dc800217 	ldw	r18,8(sp)
  20822c:	dc400117 	ldw	r17,4(sp)
  208230:	dc000017 	ldw	r16,0(sp)
  208234:	dec00904 	addi	sp,sp,36
  208238:	f800283a 	ret

0020823c <__fp_lock>:
  20823c:	0005883a 	mov	r2,zero
  208240:	f800283a 	ret

00208244 <__sfmoreglue>:
  208244:	defffc04 	addi	sp,sp,-16
  208248:	dc800215 	stw	r18,8(sp)
  20824c:	2825883a 	mov	r18,r5
  208250:	dc000015 	stw	r16,0(sp)
  208254:	01401a04 	movi	r5,104
  208258:	2021883a 	mov	r16,r4
  20825c:	913fffc4 	addi	r4,r18,-1
  208260:	dfc00315 	stw	ra,12(sp)
  208264:	dc400115 	stw	r17,4(sp)
  208268:	02032780 	call	203278 <__mulsi3>
  20826c:	8009883a 	mov	r4,r16
  208270:	11401d04 	addi	r5,r2,116
  208274:	1023883a 	mov	r17,r2
  208278:	02091580 	call	209158 <_malloc_r>
  20827c:	1021883a 	mov	r16,r2
  208280:	10000726 	beq	r2,zero,2082a0 <__sfmoreglue+0x5c>
  208284:	11000304 	addi	r4,r2,12
  208288:	10000015 	stw	zero,0(r2)
  20828c:	14800115 	stw	r18,4(r2)
  208290:	11000215 	stw	r4,8(r2)
  208294:	89801a04 	addi	r6,r17,104
  208298:	000b883a 	mov	r5,zero
  20829c:	0209cec0 	call	209cec <memset>
  2082a0:	8005883a 	mov	r2,r16
  2082a4:	dfc00317 	ldw	ra,12(sp)
  2082a8:	dc800217 	ldw	r18,8(sp)
  2082ac:	dc400117 	ldw	r17,4(sp)
  2082b0:	dc000017 	ldw	r16,0(sp)
  2082b4:	dec00404 	addi	sp,sp,16
  2082b8:	f800283a 	ret

002082bc <__sfp>:
  2082bc:	defffb04 	addi	sp,sp,-20
  2082c0:	dc000015 	stw	r16,0(sp)
  2082c4:	04001074 	movhi	r16,65
  2082c8:	84270904 	addi	r16,r16,-25564
  2082cc:	dcc00315 	stw	r19,12(sp)
  2082d0:	2027883a 	mov	r19,r4
  2082d4:	81000017 	ldw	r4,0(r16)
  2082d8:	dfc00415 	stw	ra,16(sp)
  2082dc:	dc800215 	stw	r18,8(sp)
  2082e0:	20800e17 	ldw	r2,56(r4)
  2082e4:	dc400115 	stw	r17,4(sp)
  2082e8:	1000021e 	bne	r2,zero,2082f4 <__sfp+0x38>
  2082ec:	02080a00 	call	2080a0 <__sinit.part.1>
  2082f0:	81000017 	ldw	r4,0(r16)
  2082f4:	2480b804 	addi	r18,r4,736
  2082f8:	047fffc4 	movi	r17,-1
  2082fc:	91000117 	ldw	r4,4(r18)
  208300:	94000217 	ldw	r16,8(r18)
  208304:	213fffc4 	addi	r4,r4,-1
  208308:	20000a16 	blt	r4,zero,208334 <__sfp+0x78>
  20830c:	8080030f 	ldh	r2,12(r16)
  208310:	10000c26 	beq	r2,zero,208344 <__sfp+0x88>
  208314:	80c01d04 	addi	r3,r16,116
  208318:	00000206 	br	208324 <__sfp+0x68>
  20831c:	18bfe60f 	ldh	r2,-104(r3)
  208320:	10000826 	beq	r2,zero,208344 <__sfp+0x88>
  208324:	213fffc4 	addi	r4,r4,-1
  208328:	1c3ffd04 	addi	r16,r3,-12
  20832c:	18c01a04 	addi	r3,r3,104
  208330:	247ffa1e 	bne	r4,r17,20831c <_gp+0xffdf6708>
  208334:	90800017 	ldw	r2,0(r18)
  208338:	10001d26 	beq	r2,zero,2083b0 <__sfp+0xf4>
  20833c:	1025883a 	mov	r18,r2
  208340:	003fee06 	br	2082fc <_gp+0xffdf66e8>
  208344:	00bfffc4 	movi	r2,-1
  208348:	8080038d 	sth	r2,14(r16)
  20834c:	00800044 	movi	r2,1
  208350:	8080030d 	sth	r2,12(r16)
  208354:	80001915 	stw	zero,100(r16)
  208358:	80000015 	stw	zero,0(r16)
  20835c:	80000215 	stw	zero,8(r16)
  208360:	80000115 	stw	zero,4(r16)
  208364:	80000415 	stw	zero,16(r16)
  208368:	80000515 	stw	zero,20(r16)
  20836c:	80000615 	stw	zero,24(r16)
  208370:	01800204 	movi	r6,8
  208374:	000b883a 	mov	r5,zero
  208378:	81001704 	addi	r4,r16,92
  20837c:	0209cec0 	call	209cec <memset>
  208380:	8005883a 	mov	r2,r16
  208384:	80000c15 	stw	zero,48(r16)
  208388:	80000d15 	stw	zero,52(r16)
  20838c:	80001115 	stw	zero,68(r16)
  208390:	80001215 	stw	zero,72(r16)
  208394:	dfc00417 	ldw	ra,16(sp)
  208398:	dcc00317 	ldw	r19,12(sp)
  20839c:	dc800217 	ldw	r18,8(sp)
  2083a0:	dc400117 	ldw	r17,4(sp)
  2083a4:	dc000017 	ldw	r16,0(sp)
  2083a8:	dec00504 	addi	sp,sp,20
  2083ac:	f800283a 	ret
  2083b0:	01400104 	movi	r5,4
  2083b4:	9809883a 	mov	r4,r19
  2083b8:	02082440 	call	208244 <__sfmoreglue>
  2083bc:	90800015 	stw	r2,0(r18)
  2083c0:	103fde1e 	bne	r2,zero,20833c <_gp+0xffdf6728>
  2083c4:	00800304 	movi	r2,12
  2083c8:	98800015 	stw	r2,0(r19)
  2083cc:	0005883a 	mov	r2,zero
  2083d0:	003ff006 	br	208394 <_gp+0xffdf6780>

002083d4 <_cleanup>:
  2083d4:	00801074 	movhi	r2,65
  2083d8:	10a70904 	addi	r2,r2,-25564
  2083dc:	11000017 	ldw	r4,0(r2)
  2083e0:	01400874 	movhi	r5,33
  2083e4:	29749604 	addi	r5,r5,-11688
  2083e8:	0208dfc1 	jmpi	208dfc <_fwalk_reent>

002083ec <__sinit>:
  2083ec:	20800e17 	ldw	r2,56(r4)
  2083f0:	10000126 	beq	r2,zero,2083f8 <__sinit+0xc>
  2083f4:	f800283a 	ret
  2083f8:	02080a01 	jmpi	2080a0 <__sinit.part.1>

002083fc <__sfp_lock_acquire>:
  2083fc:	f800283a 	ret

00208400 <__sfp_lock_release>:
  208400:	f800283a 	ret

00208404 <__sinit_lock_acquire>:
  208404:	f800283a 	ret

00208408 <__sinit_lock_release>:
  208408:	f800283a 	ret

0020840c <__fp_lock_all>:
  20840c:	00801074 	movhi	r2,65
  208410:	10a70a04 	addi	r2,r2,-25560
  208414:	11000017 	ldw	r4,0(r2)
  208418:	01400874 	movhi	r5,33
  20841c:	29608f04 	addi	r5,r5,-32196
  208420:	0208d381 	jmpi	208d38 <_fwalk>

00208424 <__fp_unlock_all>:
  208424:	00801074 	movhi	r2,65
  208428:	10a70a04 	addi	r2,r2,-25560
  20842c:	11000017 	ldw	r4,0(r2)
  208430:	01400874 	movhi	r5,33
  208434:	29602304 	addi	r5,r5,-32628
  208438:	0208d381 	jmpi	208d38 <_fwalk>

0020843c <_malloc_trim_r>:
  20843c:	defffb04 	addi	sp,sp,-20
  208440:	dcc00315 	stw	r19,12(sp)
  208444:	04c01074 	movhi	r19,65
  208448:	dc800215 	stw	r18,8(sp)
  20844c:	dc400115 	stw	r17,4(sp)
  208450:	dc000015 	stw	r16,0(sp)
  208454:	dfc00415 	stw	ra,16(sp)
  208458:	2821883a 	mov	r16,r5
  20845c:	9ce13304 	addi	r19,r19,-31540
  208460:	2025883a 	mov	r18,r4
  208464:	02112580 	call	211258 <__malloc_lock>
  208468:	98800217 	ldw	r2,8(r19)
  20846c:	14400117 	ldw	r17,4(r2)
  208470:	00bfff04 	movi	r2,-4
  208474:	88a2703a 	and	r17,r17,r2
  208478:	8c21c83a 	sub	r16,r17,r16
  20847c:	8403fbc4 	addi	r16,r16,4079
  208480:	8020d33a 	srli	r16,r16,12
  208484:	0083ffc4 	movi	r2,4095
  208488:	843fffc4 	addi	r16,r16,-1
  20848c:	8020933a 	slli	r16,r16,12
  208490:	1400060e 	bge	r2,r16,2084ac <_malloc_trim_r+0x70>
  208494:	000b883a 	mov	r5,zero
  208498:	9009883a 	mov	r4,r18
  20849c:	020b60c0 	call	20b60c <_sbrk_r>
  2084a0:	98c00217 	ldw	r3,8(r19)
  2084a4:	1c47883a 	add	r3,r3,r17
  2084a8:	10c00a26 	beq	r2,r3,2084d4 <_malloc_trim_r+0x98>
  2084ac:	9009883a 	mov	r4,r18
  2084b0:	021127c0 	call	21127c <__malloc_unlock>
  2084b4:	0005883a 	mov	r2,zero
  2084b8:	dfc00417 	ldw	ra,16(sp)
  2084bc:	dcc00317 	ldw	r19,12(sp)
  2084c0:	dc800217 	ldw	r18,8(sp)
  2084c4:	dc400117 	ldw	r17,4(sp)
  2084c8:	dc000017 	ldw	r16,0(sp)
  2084cc:	dec00504 	addi	sp,sp,20
  2084d0:	f800283a 	ret
  2084d4:	040bc83a 	sub	r5,zero,r16
  2084d8:	9009883a 	mov	r4,r18
  2084dc:	020b60c0 	call	20b60c <_sbrk_r>
  2084e0:	00ffffc4 	movi	r3,-1
  2084e4:	10c00d26 	beq	r2,r3,20851c <_malloc_trim_r+0xe0>
  2084e8:	00c01074 	movhi	r3,65
  2084ec:	18e73d04 	addi	r3,r3,-25356
  2084f0:	18800017 	ldw	r2,0(r3)
  2084f4:	99000217 	ldw	r4,8(r19)
  2084f8:	8c23c83a 	sub	r17,r17,r16
  2084fc:	8c400054 	ori	r17,r17,1
  208500:	1421c83a 	sub	r16,r2,r16
  208504:	24400115 	stw	r17,4(r4)
  208508:	9009883a 	mov	r4,r18
  20850c:	1c000015 	stw	r16,0(r3)
  208510:	021127c0 	call	21127c <__malloc_unlock>
  208514:	00800044 	movi	r2,1
  208518:	003fe706 	br	2084b8 <_gp+0xffdf68a4>
  20851c:	000b883a 	mov	r5,zero
  208520:	9009883a 	mov	r4,r18
  208524:	020b60c0 	call	20b60c <_sbrk_r>
  208528:	99000217 	ldw	r4,8(r19)
  20852c:	014003c4 	movi	r5,15
  208530:	1107c83a 	sub	r3,r2,r4
  208534:	28ffdd0e 	bge	r5,r3,2084ac <_gp+0xffdf6898>
  208538:	01401074 	movhi	r5,65
  20853c:	29670c04 	addi	r5,r5,-25552
  208540:	29400017 	ldw	r5,0(r5)
  208544:	18c00054 	ori	r3,r3,1
  208548:	20c00115 	stw	r3,4(r4)
  20854c:	00c01074 	movhi	r3,65
  208550:	1145c83a 	sub	r2,r2,r5
  208554:	18e73d04 	addi	r3,r3,-25356
  208558:	18800015 	stw	r2,0(r3)
  20855c:	003fd306 	br	2084ac <_gp+0xffdf6898>

00208560 <_free_r>:
  208560:	28004126 	beq	r5,zero,208668 <_free_r+0x108>
  208564:	defffd04 	addi	sp,sp,-12
  208568:	dc400115 	stw	r17,4(sp)
  20856c:	dc000015 	stw	r16,0(sp)
  208570:	2023883a 	mov	r17,r4
  208574:	2821883a 	mov	r16,r5
  208578:	dfc00215 	stw	ra,8(sp)
  20857c:	02112580 	call	211258 <__malloc_lock>
  208580:	81ffff17 	ldw	r7,-4(r16)
  208584:	00bfff84 	movi	r2,-2
  208588:	01001074 	movhi	r4,65
  20858c:	81bffe04 	addi	r6,r16,-8
  208590:	3884703a 	and	r2,r7,r2
  208594:	21213304 	addi	r4,r4,-31540
  208598:	308b883a 	add	r5,r6,r2
  20859c:	2a400117 	ldw	r9,4(r5)
  2085a0:	22000217 	ldw	r8,8(r4)
  2085a4:	00ffff04 	movi	r3,-4
  2085a8:	48c6703a 	and	r3,r9,r3
  2085ac:	2a005726 	beq	r5,r8,20870c <_free_r+0x1ac>
  2085b0:	28c00115 	stw	r3,4(r5)
  2085b4:	39c0004c 	andi	r7,r7,1
  2085b8:	3800091e 	bne	r7,zero,2085e0 <_free_r+0x80>
  2085bc:	823ffe17 	ldw	r8,-8(r16)
  2085c0:	22400204 	addi	r9,r4,8
  2085c4:	320dc83a 	sub	r6,r6,r8
  2085c8:	31c00217 	ldw	r7,8(r6)
  2085cc:	1205883a 	add	r2,r2,r8
  2085d0:	3a406526 	beq	r7,r9,208768 <_free_r+0x208>
  2085d4:	32000317 	ldw	r8,12(r6)
  2085d8:	3a000315 	stw	r8,12(r7)
  2085dc:	41c00215 	stw	r7,8(r8)
  2085e0:	28cf883a 	add	r7,r5,r3
  2085e4:	39c00117 	ldw	r7,4(r7)
  2085e8:	39c0004c 	andi	r7,r7,1
  2085ec:	38003a26 	beq	r7,zero,2086d8 <_free_r+0x178>
  2085f0:	10c00054 	ori	r3,r2,1
  2085f4:	30c00115 	stw	r3,4(r6)
  2085f8:	3087883a 	add	r3,r6,r2
  2085fc:	18800015 	stw	r2,0(r3)
  208600:	00c07fc4 	movi	r3,511
  208604:	18801936 	bltu	r3,r2,20866c <_free_r+0x10c>
  208608:	1004d0fa 	srli	r2,r2,3
  20860c:	01c00044 	movi	r7,1
  208610:	21400117 	ldw	r5,4(r4)
  208614:	10c00044 	addi	r3,r2,1
  208618:	18c7883a 	add	r3,r3,r3
  20861c:	1005d0ba 	srai	r2,r2,2
  208620:	18c7883a 	add	r3,r3,r3
  208624:	18c7883a 	add	r3,r3,r3
  208628:	1907883a 	add	r3,r3,r4
  20862c:	3884983a 	sll	r2,r7,r2
  208630:	19c00017 	ldw	r7,0(r3)
  208634:	1a3ffe04 	addi	r8,r3,-8
  208638:	1144b03a 	or	r2,r2,r5
  20863c:	32000315 	stw	r8,12(r6)
  208640:	31c00215 	stw	r7,8(r6)
  208644:	20800115 	stw	r2,4(r4)
  208648:	19800015 	stw	r6,0(r3)
  20864c:	39800315 	stw	r6,12(r7)
  208650:	8809883a 	mov	r4,r17
  208654:	dfc00217 	ldw	ra,8(sp)
  208658:	dc400117 	ldw	r17,4(sp)
  20865c:	dc000017 	ldw	r16,0(sp)
  208660:	dec00304 	addi	sp,sp,12
  208664:	021127c1 	jmpi	21127c <__malloc_unlock>
  208668:	f800283a 	ret
  20866c:	100ad27a 	srli	r5,r2,9
  208670:	00c00104 	movi	r3,4
  208674:	19404a36 	bltu	r3,r5,2087a0 <_free_r+0x240>
  208678:	100ad1ba 	srli	r5,r2,6
  20867c:	28c00e44 	addi	r3,r5,57
  208680:	18c7883a 	add	r3,r3,r3
  208684:	29400e04 	addi	r5,r5,56
  208688:	18c7883a 	add	r3,r3,r3
  20868c:	18c7883a 	add	r3,r3,r3
  208690:	1909883a 	add	r4,r3,r4
  208694:	20c00017 	ldw	r3,0(r4)
  208698:	01c01074 	movhi	r7,65
  20869c:	213ffe04 	addi	r4,r4,-8
  2086a0:	39e13304 	addi	r7,r7,-31540
  2086a4:	20c04426 	beq	r4,r3,2087b8 <_free_r+0x258>
  2086a8:	01ffff04 	movi	r7,-4
  2086ac:	19400117 	ldw	r5,4(r3)
  2086b0:	29ca703a 	and	r5,r5,r7
  2086b4:	1140022e 	bgeu	r2,r5,2086c0 <_free_r+0x160>
  2086b8:	18c00217 	ldw	r3,8(r3)
  2086bc:	20fffb1e 	bne	r4,r3,2086ac <_gp+0xffdf6a98>
  2086c0:	19000317 	ldw	r4,12(r3)
  2086c4:	31000315 	stw	r4,12(r6)
  2086c8:	30c00215 	stw	r3,8(r6)
  2086cc:	21800215 	stw	r6,8(r4)
  2086d0:	19800315 	stw	r6,12(r3)
  2086d4:	003fde06 	br	208650 <_gp+0xffdf6a3c>
  2086d8:	29c00217 	ldw	r7,8(r5)
  2086dc:	10c5883a 	add	r2,r2,r3
  2086e0:	00c01074 	movhi	r3,65
  2086e4:	18e13504 	addi	r3,r3,-31532
  2086e8:	38c03b26 	beq	r7,r3,2087d8 <_free_r+0x278>
  2086ec:	2a000317 	ldw	r8,12(r5)
  2086f0:	11400054 	ori	r5,r2,1
  2086f4:	3087883a 	add	r3,r6,r2
  2086f8:	3a000315 	stw	r8,12(r7)
  2086fc:	41c00215 	stw	r7,8(r8)
  208700:	31400115 	stw	r5,4(r6)
  208704:	18800015 	stw	r2,0(r3)
  208708:	003fbd06 	br	208600 <_gp+0xffdf69ec>
  20870c:	39c0004c 	andi	r7,r7,1
  208710:	10c5883a 	add	r2,r2,r3
  208714:	3800071e 	bne	r7,zero,208734 <_free_r+0x1d4>
  208718:	81fffe17 	ldw	r7,-8(r16)
  20871c:	31cdc83a 	sub	r6,r6,r7
  208720:	30c00317 	ldw	r3,12(r6)
  208724:	31400217 	ldw	r5,8(r6)
  208728:	11c5883a 	add	r2,r2,r7
  20872c:	28c00315 	stw	r3,12(r5)
  208730:	19400215 	stw	r5,8(r3)
  208734:	10c00054 	ori	r3,r2,1
  208738:	30c00115 	stw	r3,4(r6)
  20873c:	00c01074 	movhi	r3,65
  208740:	18e70d04 	addi	r3,r3,-25548
  208744:	18c00017 	ldw	r3,0(r3)
  208748:	21800215 	stw	r6,8(r4)
  20874c:	10ffc036 	bltu	r2,r3,208650 <_gp+0xffdf6a3c>
  208750:	00801074 	movhi	r2,65
  208754:	10a72a04 	addi	r2,r2,-25432
  208758:	11400017 	ldw	r5,0(r2)
  20875c:	8809883a 	mov	r4,r17
  208760:	020843c0 	call	20843c <_malloc_trim_r>
  208764:	003fba06 	br	208650 <_gp+0xffdf6a3c>
  208768:	28c9883a 	add	r4,r5,r3
  20876c:	21000117 	ldw	r4,4(r4)
  208770:	2100004c 	andi	r4,r4,1
  208774:	2000391e 	bne	r4,zero,20885c <_free_r+0x2fc>
  208778:	29c00217 	ldw	r7,8(r5)
  20877c:	29000317 	ldw	r4,12(r5)
  208780:	1885883a 	add	r2,r3,r2
  208784:	10c00054 	ori	r3,r2,1
  208788:	39000315 	stw	r4,12(r7)
  20878c:	21c00215 	stw	r7,8(r4)
  208790:	30c00115 	stw	r3,4(r6)
  208794:	308d883a 	add	r6,r6,r2
  208798:	30800015 	stw	r2,0(r6)
  20879c:	003fac06 	br	208650 <_gp+0xffdf6a3c>
  2087a0:	00c00504 	movi	r3,20
  2087a4:	19401536 	bltu	r3,r5,2087fc <_free_r+0x29c>
  2087a8:	28c01704 	addi	r3,r5,92
  2087ac:	18c7883a 	add	r3,r3,r3
  2087b0:	294016c4 	addi	r5,r5,91
  2087b4:	003fb406 	br	208688 <_gp+0xffdf6a74>
  2087b8:	280bd0ba 	srai	r5,r5,2
  2087bc:	00c00044 	movi	r3,1
  2087c0:	38800117 	ldw	r2,4(r7)
  2087c4:	194a983a 	sll	r5,r3,r5
  2087c8:	2007883a 	mov	r3,r4
  2087cc:	2884b03a 	or	r2,r5,r2
  2087d0:	38800115 	stw	r2,4(r7)
  2087d4:	003fbb06 	br	2086c4 <_gp+0xffdf6ab0>
  2087d8:	21800515 	stw	r6,20(r4)
  2087dc:	21800415 	stw	r6,16(r4)
  2087e0:	10c00054 	ori	r3,r2,1
  2087e4:	31c00315 	stw	r7,12(r6)
  2087e8:	31c00215 	stw	r7,8(r6)
  2087ec:	30c00115 	stw	r3,4(r6)
  2087f0:	308d883a 	add	r6,r6,r2
  2087f4:	30800015 	stw	r2,0(r6)
  2087f8:	003f9506 	br	208650 <_gp+0xffdf6a3c>
  2087fc:	00c01504 	movi	r3,84
  208800:	19400536 	bltu	r3,r5,208818 <_free_r+0x2b8>
  208804:	100ad33a 	srli	r5,r2,12
  208808:	28c01bc4 	addi	r3,r5,111
  20880c:	18c7883a 	add	r3,r3,r3
  208810:	29401b84 	addi	r5,r5,110
  208814:	003f9c06 	br	208688 <_gp+0xffdf6a74>
  208818:	00c05504 	movi	r3,340
  20881c:	19400536 	bltu	r3,r5,208834 <_free_r+0x2d4>
  208820:	100ad3fa 	srli	r5,r2,15
  208824:	28c01e04 	addi	r3,r5,120
  208828:	18c7883a 	add	r3,r3,r3
  20882c:	29401dc4 	addi	r5,r5,119
  208830:	003f9506 	br	208688 <_gp+0xffdf6a74>
  208834:	00c15504 	movi	r3,1364
  208838:	19400536 	bltu	r3,r5,208850 <_free_r+0x2f0>
  20883c:	100ad4ba 	srli	r5,r2,18
  208840:	28c01f44 	addi	r3,r5,125
  208844:	18c7883a 	add	r3,r3,r3
  208848:	29401f04 	addi	r5,r5,124
  20884c:	003f8e06 	br	208688 <_gp+0xffdf6a74>
  208850:	00c03f84 	movi	r3,254
  208854:	01401f84 	movi	r5,126
  208858:	003f8b06 	br	208688 <_gp+0xffdf6a74>
  20885c:	10c00054 	ori	r3,r2,1
  208860:	30c00115 	stw	r3,4(r6)
  208864:	308d883a 	add	r6,r6,r2
  208868:	30800015 	stw	r2,0(r6)
  20886c:	003f7806 	br	208650 <_gp+0xffdf6a3c>

00208870 <__sfvwrite_r>:
  208870:	30800217 	ldw	r2,8(r6)
  208874:	10006726 	beq	r2,zero,208a14 <__sfvwrite_r+0x1a4>
  208878:	28c0030b 	ldhu	r3,12(r5)
  20887c:	defff404 	addi	sp,sp,-48
  208880:	dd400715 	stw	r21,28(sp)
  208884:	dd000615 	stw	r20,24(sp)
  208888:	dc000215 	stw	r16,8(sp)
  20888c:	dfc00b15 	stw	ra,44(sp)
  208890:	df000a15 	stw	fp,40(sp)
  208894:	ddc00915 	stw	r23,36(sp)
  208898:	dd800815 	stw	r22,32(sp)
  20889c:	dcc00515 	stw	r19,20(sp)
  2088a0:	dc800415 	stw	r18,16(sp)
  2088a4:	dc400315 	stw	r17,12(sp)
  2088a8:	1880020c 	andi	r2,r3,8
  2088ac:	2821883a 	mov	r16,r5
  2088b0:	202b883a 	mov	r21,r4
  2088b4:	3029883a 	mov	r20,r6
  2088b8:	10002726 	beq	r2,zero,208958 <__sfvwrite_r+0xe8>
  2088bc:	28800417 	ldw	r2,16(r5)
  2088c0:	10002526 	beq	r2,zero,208958 <__sfvwrite_r+0xe8>
  2088c4:	1880008c 	andi	r2,r3,2
  2088c8:	a4400017 	ldw	r17,0(r20)
  2088cc:	10002a26 	beq	r2,zero,208978 <__sfvwrite_r+0x108>
  2088d0:	05a00034 	movhi	r22,32768
  2088d4:	0027883a 	mov	r19,zero
  2088d8:	0025883a 	mov	r18,zero
  2088dc:	b5bf0004 	addi	r22,r22,-1024
  2088e0:	980d883a 	mov	r6,r19
  2088e4:	a809883a 	mov	r4,r21
  2088e8:	90004626 	beq	r18,zero,208a04 <__sfvwrite_r+0x194>
  2088ec:	900f883a 	mov	r7,r18
  2088f0:	b480022e 	bgeu	r22,r18,2088fc <__sfvwrite_r+0x8c>
  2088f4:	01e00034 	movhi	r7,32768
  2088f8:	39ff0004 	addi	r7,r7,-1024
  2088fc:	80800917 	ldw	r2,36(r16)
  208900:	81400717 	ldw	r5,28(r16)
  208904:	103ee83a 	callr	r2
  208908:	00805a0e 	bge	zero,r2,208a74 <__sfvwrite_r+0x204>
  20890c:	a0c00217 	ldw	r3,8(r20)
  208910:	98a7883a 	add	r19,r19,r2
  208914:	90a5c83a 	sub	r18,r18,r2
  208918:	1885c83a 	sub	r2,r3,r2
  20891c:	a0800215 	stw	r2,8(r20)
  208920:	103fef1e 	bne	r2,zero,2088e0 <_gp+0xffdf6ccc>
  208924:	0005883a 	mov	r2,zero
  208928:	dfc00b17 	ldw	ra,44(sp)
  20892c:	df000a17 	ldw	fp,40(sp)
  208930:	ddc00917 	ldw	r23,36(sp)
  208934:	dd800817 	ldw	r22,32(sp)
  208938:	dd400717 	ldw	r21,28(sp)
  20893c:	dd000617 	ldw	r20,24(sp)
  208940:	dcc00517 	ldw	r19,20(sp)
  208944:	dc800417 	ldw	r18,16(sp)
  208948:	dc400317 	ldw	r17,12(sp)
  20894c:	dc000217 	ldw	r16,8(sp)
  208950:	dec00c04 	addi	sp,sp,48
  208954:	f800283a 	ret
  208958:	800b883a 	mov	r5,r16
  20895c:	a809883a 	mov	r4,r21
  208960:	02063e00 	call	2063e0 <__swsetup_r>
  208964:	1000ee1e 	bne	r2,zero,208d20 <__sfvwrite_r+0x4b0>
  208968:	80c0030b 	ldhu	r3,12(r16)
  20896c:	a4400017 	ldw	r17,0(r20)
  208970:	1880008c 	andi	r2,r3,2
  208974:	103fd61e 	bne	r2,zero,2088d0 <_gp+0xffdf6cbc>
  208978:	1880004c 	andi	r2,r3,1
  20897c:	1000421e 	bne	r2,zero,208a88 <__sfvwrite_r+0x218>
  208980:	0039883a 	mov	fp,zero
  208984:	0025883a 	mov	r18,zero
  208988:	90001a26 	beq	r18,zero,2089f4 <__sfvwrite_r+0x184>
  20898c:	1880800c 	andi	r2,r3,512
  208990:	84c00217 	ldw	r19,8(r16)
  208994:	10002126 	beq	r2,zero,208a1c <__sfvwrite_r+0x1ac>
  208998:	982f883a 	mov	r23,r19
  20899c:	94c09636 	bltu	r18,r19,208bf8 <__sfvwrite_r+0x388>
  2089a0:	1881200c 	andi	r2,r3,1152
  2089a4:	1000a11e 	bne	r2,zero,208c2c <__sfvwrite_r+0x3bc>
  2089a8:	81000017 	ldw	r4,0(r16)
  2089ac:	b80d883a 	mov	r6,r23
  2089b0:	e00b883a 	mov	r5,fp
  2089b4:	0209b900 	call	209b90 <memmove>
  2089b8:	80c00217 	ldw	r3,8(r16)
  2089bc:	81000017 	ldw	r4,0(r16)
  2089c0:	9005883a 	mov	r2,r18
  2089c4:	1ce7c83a 	sub	r19,r3,r19
  2089c8:	25cf883a 	add	r7,r4,r23
  2089cc:	84c00215 	stw	r19,8(r16)
  2089d0:	81c00015 	stw	r7,0(r16)
  2089d4:	a0c00217 	ldw	r3,8(r20)
  2089d8:	e0b9883a 	add	fp,fp,r2
  2089dc:	90a5c83a 	sub	r18,r18,r2
  2089e0:	18a7c83a 	sub	r19,r3,r2
  2089e4:	a4c00215 	stw	r19,8(r20)
  2089e8:	983fce26 	beq	r19,zero,208924 <_gp+0xffdf6d10>
  2089ec:	80c0030b 	ldhu	r3,12(r16)
  2089f0:	903fe61e 	bne	r18,zero,20898c <_gp+0xffdf6d78>
  2089f4:	8f000017 	ldw	fp,0(r17)
  2089f8:	8c800117 	ldw	r18,4(r17)
  2089fc:	8c400204 	addi	r17,r17,8
  208a00:	003fe106 	br	208988 <_gp+0xffdf6d74>
  208a04:	8cc00017 	ldw	r19,0(r17)
  208a08:	8c800117 	ldw	r18,4(r17)
  208a0c:	8c400204 	addi	r17,r17,8
  208a10:	003fb306 	br	2088e0 <_gp+0xffdf6ccc>
  208a14:	0005883a 	mov	r2,zero
  208a18:	f800283a 	ret
  208a1c:	81000017 	ldw	r4,0(r16)
  208a20:	80800417 	ldw	r2,16(r16)
  208a24:	11005a36 	bltu	r2,r4,208b90 <__sfvwrite_r+0x320>
  208a28:	85c00517 	ldw	r23,20(r16)
  208a2c:	95c05836 	bltu	r18,r23,208b90 <__sfvwrite_r+0x320>
  208a30:	00a00034 	movhi	r2,32768
  208a34:	10bfffc4 	addi	r2,r2,-1
  208a38:	9009883a 	mov	r4,r18
  208a3c:	1480012e 	bgeu	r2,r18,208a44 <__sfvwrite_r+0x1d4>
  208a40:	1009883a 	mov	r4,r2
  208a44:	b80b883a 	mov	r5,r23
  208a48:	02030c40 	call	2030c4 <__divsi3>
  208a4c:	b80b883a 	mov	r5,r23
  208a50:	1009883a 	mov	r4,r2
  208a54:	02032780 	call	203278 <__mulsi3>
  208a58:	81400717 	ldw	r5,28(r16)
  208a5c:	80c00917 	ldw	r3,36(r16)
  208a60:	100f883a 	mov	r7,r2
  208a64:	e00d883a 	mov	r6,fp
  208a68:	a809883a 	mov	r4,r21
  208a6c:	183ee83a 	callr	r3
  208a70:	00bfd816 	blt	zero,r2,2089d4 <_gp+0xffdf6dc0>
  208a74:	8080030b 	ldhu	r2,12(r16)
  208a78:	10801014 	ori	r2,r2,64
  208a7c:	8080030d 	sth	r2,12(r16)
  208a80:	00bfffc4 	movi	r2,-1
  208a84:	003fa806 	br	208928 <_gp+0xffdf6d14>
  208a88:	0027883a 	mov	r19,zero
  208a8c:	0011883a 	mov	r8,zero
  208a90:	0039883a 	mov	fp,zero
  208a94:	0025883a 	mov	r18,zero
  208a98:	90001f26 	beq	r18,zero,208b18 <__sfvwrite_r+0x2a8>
  208a9c:	40005a26 	beq	r8,zero,208c08 <__sfvwrite_r+0x398>
  208aa0:	982d883a 	mov	r22,r19
  208aa4:	94c0012e 	bgeu	r18,r19,208aac <__sfvwrite_r+0x23c>
  208aa8:	902d883a 	mov	r22,r18
  208aac:	81000017 	ldw	r4,0(r16)
  208ab0:	80800417 	ldw	r2,16(r16)
  208ab4:	b02f883a 	mov	r23,r22
  208ab8:	81c00517 	ldw	r7,20(r16)
  208abc:	1100032e 	bgeu	r2,r4,208acc <__sfvwrite_r+0x25c>
  208ac0:	80c00217 	ldw	r3,8(r16)
  208ac4:	38c7883a 	add	r3,r7,r3
  208ac8:	1d801816 	blt	r3,r22,208b2c <__sfvwrite_r+0x2bc>
  208acc:	b1c03e16 	blt	r22,r7,208bc8 <__sfvwrite_r+0x358>
  208ad0:	80800917 	ldw	r2,36(r16)
  208ad4:	81400717 	ldw	r5,28(r16)
  208ad8:	e00d883a 	mov	r6,fp
  208adc:	da000115 	stw	r8,4(sp)
  208ae0:	a809883a 	mov	r4,r21
  208ae4:	103ee83a 	callr	r2
  208ae8:	102f883a 	mov	r23,r2
  208aec:	da000117 	ldw	r8,4(sp)
  208af0:	00bfe00e 	bge	zero,r2,208a74 <_gp+0xffdf6e60>
  208af4:	9de7c83a 	sub	r19,r19,r23
  208af8:	98001f26 	beq	r19,zero,208b78 <__sfvwrite_r+0x308>
  208afc:	a0800217 	ldw	r2,8(r20)
  208b00:	e5f9883a 	add	fp,fp,r23
  208b04:	95e5c83a 	sub	r18,r18,r23
  208b08:	15efc83a 	sub	r23,r2,r23
  208b0c:	a5c00215 	stw	r23,8(r20)
  208b10:	b83f8426 	beq	r23,zero,208924 <_gp+0xffdf6d10>
  208b14:	903fe11e 	bne	r18,zero,208a9c <_gp+0xffdf6e88>
  208b18:	8f000017 	ldw	fp,0(r17)
  208b1c:	8c800117 	ldw	r18,4(r17)
  208b20:	0011883a 	mov	r8,zero
  208b24:	8c400204 	addi	r17,r17,8
  208b28:	003fdb06 	br	208a98 <_gp+0xffdf6e84>
  208b2c:	180d883a 	mov	r6,r3
  208b30:	e00b883a 	mov	r5,fp
  208b34:	da000115 	stw	r8,4(sp)
  208b38:	d8c00015 	stw	r3,0(sp)
  208b3c:	0209b900 	call	209b90 <memmove>
  208b40:	d8c00017 	ldw	r3,0(sp)
  208b44:	80800017 	ldw	r2,0(r16)
  208b48:	800b883a 	mov	r5,r16
  208b4c:	a809883a 	mov	r4,r21
  208b50:	10c5883a 	add	r2,r2,r3
  208b54:	80800015 	stw	r2,0(r16)
  208b58:	d8c00015 	stw	r3,0(sp)
  208b5c:	02080000 	call	208000 <_fflush_r>
  208b60:	d8c00017 	ldw	r3,0(sp)
  208b64:	da000117 	ldw	r8,4(sp)
  208b68:	103fc21e 	bne	r2,zero,208a74 <_gp+0xffdf6e60>
  208b6c:	182f883a 	mov	r23,r3
  208b70:	9de7c83a 	sub	r19,r19,r23
  208b74:	983fe11e 	bne	r19,zero,208afc <_gp+0xffdf6ee8>
  208b78:	800b883a 	mov	r5,r16
  208b7c:	a809883a 	mov	r4,r21
  208b80:	02080000 	call	208000 <_fflush_r>
  208b84:	103fbb1e 	bne	r2,zero,208a74 <_gp+0xffdf6e60>
  208b88:	0011883a 	mov	r8,zero
  208b8c:	003fdb06 	br	208afc <_gp+0xffdf6ee8>
  208b90:	94c0012e 	bgeu	r18,r19,208b98 <__sfvwrite_r+0x328>
  208b94:	9027883a 	mov	r19,r18
  208b98:	980d883a 	mov	r6,r19
  208b9c:	e00b883a 	mov	r5,fp
  208ba0:	0209b900 	call	209b90 <memmove>
  208ba4:	80800217 	ldw	r2,8(r16)
  208ba8:	80c00017 	ldw	r3,0(r16)
  208bac:	14c5c83a 	sub	r2,r2,r19
  208bb0:	1cc7883a 	add	r3,r3,r19
  208bb4:	80800215 	stw	r2,8(r16)
  208bb8:	80c00015 	stw	r3,0(r16)
  208bbc:	10004326 	beq	r2,zero,208ccc <__sfvwrite_r+0x45c>
  208bc0:	9805883a 	mov	r2,r19
  208bc4:	003f8306 	br	2089d4 <_gp+0xffdf6dc0>
  208bc8:	b00d883a 	mov	r6,r22
  208bcc:	e00b883a 	mov	r5,fp
  208bd0:	da000115 	stw	r8,4(sp)
  208bd4:	0209b900 	call	209b90 <memmove>
  208bd8:	80800217 	ldw	r2,8(r16)
  208bdc:	80c00017 	ldw	r3,0(r16)
  208be0:	da000117 	ldw	r8,4(sp)
  208be4:	1585c83a 	sub	r2,r2,r22
  208be8:	1dad883a 	add	r22,r3,r22
  208bec:	80800215 	stw	r2,8(r16)
  208bf0:	85800015 	stw	r22,0(r16)
  208bf4:	003fbf06 	br	208af4 <_gp+0xffdf6ee0>
  208bf8:	81000017 	ldw	r4,0(r16)
  208bfc:	9027883a 	mov	r19,r18
  208c00:	902f883a 	mov	r23,r18
  208c04:	003f6906 	br	2089ac <_gp+0xffdf6d98>
  208c08:	900d883a 	mov	r6,r18
  208c0c:	01400284 	movi	r5,10
  208c10:	e009883a 	mov	r4,fp
  208c14:	02099640 	call	209964 <memchr>
  208c18:	10003e26 	beq	r2,zero,208d14 <__sfvwrite_r+0x4a4>
  208c1c:	10800044 	addi	r2,r2,1
  208c20:	1727c83a 	sub	r19,r2,fp
  208c24:	02000044 	movi	r8,1
  208c28:	003f9d06 	br	208aa0 <_gp+0xffdf6e8c>
  208c2c:	80800517 	ldw	r2,20(r16)
  208c30:	81400417 	ldw	r5,16(r16)
  208c34:	81c00017 	ldw	r7,0(r16)
  208c38:	10a7883a 	add	r19,r2,r2
  208c3c:	9885883a 	add	r2,r19,r2
  208c40:	1026d7fa 	srli	r19,r2,31
  208c44:	396dc83a 	sub	r22,r7,r5
  208c48:	b1000044 	addi	r4,r22,1
  208c4c:	9885883a 	add	r2,r19,r2
  208c50:	1027d07a 	srai	r19,r2,1
  208c54:	2485883a 	add	r2,r4,r18
  208c58:	980d883a 	mov	r6,r19
  208c5c:	9880022e 	bgeu	r19,r2,208c68 <__sfvwrite_r+0x3f8>
  208c60:	1027883a 	mov	r19,r2
  208c64:	100d883a 	mov	r6,r2
  208c68:	18c1000c 	andi	r3,r3,1024
  208c6c:	18001c26 	beq	r3,zero,208ce0 <__sfvwrite_r+0x470>
  208c70:	300b883a 	mov	r5,r6
  208c74:	a809883a 	mov	r4,r21
  208c78:	02091580 	call	209158 <_malloc_r>
  208c7c:	102f883a 	mov	r23,r2
  208c80:	10002926 	beq	r2,zero,208d28 <__sfvwrite_r+0x4b8>
  208c84:	81400417 	ldw	r5,16(r16)
  208c88:	b00d883a 	mov	r6,r22
  208c8c:	1009883a 	mov	r4,r2
  208c90:	0209a480 	call	209a48 <memcpy>
  208c94:	8080030b 	ldhu	r2,12(r16)
  208c98:	00fedfc4 	movi	r3,-1153
  208c9c:	10c4703a 	and	r2,r2,r3
  208ca0:	10802014 	ori	r2,r2,128
  208ca4:	8080030d 	sth	r2,12(r16)
  208ca8:	bd89883a 	add	r4,r23,r22
  208cac:	9d8fc83a 	sub	r7,r19,r22
  208cb0:	85c00415 	stw	r23,16(r16)
  208cb4:	84c00515 	stw	r19,20(r16)
  208cb8:	81000015 	stw	r4,0(r16)
  208cbc:	9027883a 	mov	r19,r18
  208cc0:	81c00215 	stw	r7,8(r16)
  208cc4:	902f883a 	mov	r23,r18
  208cc8:	003f3806 	br	2089ac <_gp+0xffdf6d98>
  208ccc:	800b883a 	mov	r5,r16
  208cd0:	a809883a 	mov	r4,r21
  208cd4:	02080000 	call	208000 <_fflush_r>
  208cd8:	103fb926 	beq	r2,zero,208bc0 <_gp+0xffdf6fac>
  208cdc:	003f6506 	br	208a74 <_gp+0xffdf6e60>
  208ce0:	a809883a 	mov	r4,r21
  208ce4:	020b0340 	call	20b034 <_realloc_r>
  208ce8:	102f883a 	mov	r23,r2
  208cec:	103fee1e 	bne	r2,zero,208ca8 <_gp+0xffdf7094>
  208cf0:	81400417 	ldw	r5,16(r16)
  208cf4:	a809883a 	mov	r4,r21
  208cf8:	02085600 	call	208560 <_free_r>
  208cfc:	8080030b 	ldhu	r2,12(r16)
  208d00:	00ffdfc4 	movi	r3,-129
  208d04:	1884703a 	and	r2,r3,r2
  208d08:	00c00304 	movi	r3,12
  208d0c:	a8c00015 	stw	r3,0(r21)
  208d10:	003f5906 	br	208a78 <_gp+0xffdf6e64>
  208d14:	94c00044 	addi	r19,r18,1
  208d18:	02000044 	movi	r8,1
  208d1c:	003f6006 	br	208aa0 <_gp+0xffdf6e8c>
  208d20:	00bfffc4 	movi	r2,-1
  208d24:	003f0006 	br	208928 <_gp+0xffdf6d14>
  208d28:	00800304 	movi	r2,12
  208d2c:	a8800015 	stw	r2,0(r21)
  208d30:	8080030b 	ldhu	r2,12(r16)
  208d34:	003f5006 	br	208a78 <_gp+0xffdf6e64>

00208d38 <_fwalk>:
  208d38:	defff704 	addi	sp,sp,-36
  208d3c:	dd000415 	stw	r20,16(sp)
  208d40:	dfc00815 	stw	ra,32(sp)
  208d44:	ddc00715 	stw	r23,28(sp)
  208d48:	dd800615 	stw	r22,24(sp)
  208d4c:	dd400515 	stw	r21,20(sp)
  208d50:	dcc00315 	stw	r19,12(sp)
  208d54:	dc800215 	stw	r18,8(sp)
  208d58:	dc400115 	stw	r17,4(sp)
  208d5c:	dc000015 	stw	r16,0(sp)
  208d60:	2500b804 	addi	r20,r4,736
  208d64:	a0002326 	beq	r20,zero,208df4 <_fwalk+0xbc>
  208d68:	282b883a 	mov	r21,r5
  208d6c:	002f883a 	mov	r23,zero
  208d70:	05800044 	movi	r22,1
  208d74:	04ffffc4 	movi	r19,-1
  208d78:	a4400117 	ldw	r17,4(r20)
  208d7c:	a4800217 	ldw	r18,8(r20)
  208d80:	8c7fffc4 	addi	r17,r17,-1
  208d84:	88000d16 	blt	r17,zero,208dbc <_fwalk+0x84>
  208d88:	94000304 	addi	r16,r18,12
  208d8c:	94800384 	addi	r18,r18,14
  208d90:	8080000b 	ldhu	r2,0(r16)
  208d94:	8c7fffc4 	addi	r17,r17,-1
  208d98:	813ffd04 	addi	r4,r16,-12
  208d9c:	b080042e 	bgeu	r22,r2,208db0 <_fwalk+0x78>
  208da0:	9080000f 	ldh	r2,0(r18)
  208da4:	14c00226 	beq	r2,r19,208db0 <_fwalk+0x78>
  208da8:	a83ee83a 	callr	r21
  208dac:	b8aeb03a 	or	r23,r23,r2
  208db0:	84001a04 	addi	r16,r16,104
  208db4:	94801a04 	addi	r18,r18,104
  208db8:	8cfff51e 	bne	r17,r19,208d90 <_gp+0xffdf717c>
  208dbc:	a5000017 	ldw	r20,0(r20)
  208dc0:	a03fed1e 	bne	r20,zero,208d78 <_gp+0xffdf7164>
  208dc4:	b805883a 	mov	r2,r23
  208dc8:	dfc00817 	ldw	ra,32(sp)
  208dcc:	ddc00717 	ldw	r23,28(sp)
  208dd0:	dd800617 	ldw	r22,24(sp)
  208dd4:	dd400517 	ldw	r21,20(sp)
  208dd8:	dd000417 	ldw	r20,16(sp)
  208ddc:	dcc00317 	ldw	r19,12(sp)
  208de0:	dc800217 	ldw	r18,8(sp)
  208de4:	dc400117 	ldw	r17,4(sp)
  208de8:	dc000017 	ldw	r16,0(sp)
  208dec:	dec00904 	addi	sp,sp,36
  208df0:	f800283a 	ret
  208df4:	002f883a 	mov	r23,zero
  208df8:	003ff206 	br	208dc4 <_gp+0xffdf71b0>

00208dfc <_fwalk_reent>:
  208dfc:	defff704 	addi	sp,sp,-36
  208e00:	dd000415 	stw	r20,16(sp)
  208e04:	dfc00815 	stw	ra,32(sp)
  208e08:	ddc00715 	stw	r23,28(sp)
  208e0c:	dd800615 	stw	r22,24(sp)
  208e10:	dd400515 	stw	r21,20(sp)
  208e14:	dcc00315 	stw	r19,12(sp)
  208e18:	dc800215 	stw	r18,8(sp)
  208e1c:	dc400115 	stw	r17,4(sp)
  208e20:	dc000015 	stw	r16,0(sp)
  208e24:	2500b804 	addi	r20,r4,736
  208e28:	a0002326 	beq	r20,zero,208eb8 <_fwalk_reent+0xbc>
  208e2c:	282b883a 	mov	r21,r5
  208e30:	2027883a 	mov	r19,r4
  208e34:	002f883a 	mov	r23,zero
  208e38:	05800044 	movi	r22,1
  208e3c:	04bfffc4 	movi	r18,-1
  208e40:	a4400117 	ldw	r17,4(r20)
  208e44:	a4000217 	ldw	r16,8(r20)
  208e48:	8c7fffc4 	addi	r17,r17,-1
  208e4c:	88000c16 	blt	r17,zero,208e80 <_fwalk_reent+0x84>
  208e50:	84000304 	addi	r16,r16,12
  208e54:	8080000b 	ldhu	r2,0(r16)
  208e58:	8c7fffc4 	addi	r17,r17,-1
  208e5c:	817ffd04 	addi	r5,r16,-12
  208e60:	b080052e 	bgeu	r22,r2,208e78 <_fwalk_reent+0x7c>
  208e64:	8080008f 	ldh	r2,2(r16)
  208e68:	9809883a 	mov	r4,r19
  208e6c:	14800226 	beq	r2,r18,208e78 <_fwalk_reent+0x7c>
  208e70:	a83ee83a 	callr	r21
  208e74:	b8aeb03a 	or	r23,r23,r2
  208e78:	84001a04 	addi	r16,r16,104
  208e7c:	8cbff51e 	bne	r17,r18,208e54 <_gp+0xffdf7240>
  208e80:	a5000017 	ldw	r20,0(r20)
  208e84:	a03fee1e 	bne	r20,zero,208e40 <_gp+0xffdf722c>
  208e88:	b805883a 	mov	r2,r23
  208e8c:	dfc00817 	ldw	ra,32(sp)
  208e90:	ddc00717 	ldw	r23,28(sp)
  208e94:	dd800617 	ldw	r22,24(sp)
  208e98:	dd400517 	ldw	r21,20(sp)
  208e9c:	dd000417 	ldw	r20,16(sp)
  208ea0:	dcc00317 	ldw	r19,12(sp)
  208ea4:	dc800217 	ldw	r18,8(sp)
  208ea8:	dc400117 	ldw	r17,4(sp)
  208eac:	dc000017 	ldw	r16,0(sp)
  208eb0:	dec00904 	addi	sp,sp,36
  208eb4:	f800283a 	ret
  208eb8:	002f883a 	mov	r23,zero
  208ebc:	003ff206 	br	208e88 <_gp+0xffdf7274>

00208ec0 <_setlocale_r>:
  208ec0:	30001b26 	beq	r6,zero,208f30 <_setlocale_r+0x70>
  208ec4:	01400874 	movhi	r5,33
  208ec8:	defffe04 	addi	sp,sp,-8
  208ecc:	295b1804 	addi	r5,r5,27744
  208ed0:	3009883a 	mov	r4,r6
  208ed4:	dc000015 	stw	r16,0(sp)
  208ed8:	dfc00115 	stw	ra,4(sp)
  208edc:	3021883a 	mov	r16,r6
  208ee0:	020b79c0 	call	20b79c <strcmp>
  208ee4:	1000061e 	bne	r2,zero,208f00 <_setlocale_r+0x40>
  208ee8:	00800874 	movhi	r2,33
  208eec:	109b1704 	addi	r2,r2,27740
  208ef0:	dfc00117 	ldw	ra,4(sp)
  208ef4:	dc000017 	ldw	r16,0(sp)
  208ef8:	dec00204 	addi	sp,sp,8
  208efc:	f800283a 	ret
  208f00:	01400874 	movhi	r5,33
  208f04:	295b1704 	addi	r5,r5,27740
  208f08:	8009883a 	mov	r4,r16
  208f0c:	020b79c0 	call	20b79c <strcmp>
  208f10:	103ff526 	beq	r2,zero,208ee8 <_gp+0xffdf72d4>
  208f14:	01400874 	movhi	r5,33
  208f18:	295b0204 	addi	r5,r5,27656
  208f1c:	8009883a 	mov	r4,r16
  208f20:	020b79c0 	call	20b79c <strcmp>
  208f24:	103ff026 	beq	r2,zero,208ee8 <_gp+0xffdf72d4>
  208f28:	0005883a 	mov	r2,zero
  208f2c:	003ff006 	br	208ef0 <_gp+0xffdf72dc>
  208f30:	00800874 	movhi	r2,33
  208f34:	109b1704 	addi	r2,r2,27740
  208f38:	f800283a 	ret

00208f3c <__locale_charset>:
  208f3c:	00801074 	movhi	r2,65
  208f40:	10a11d04 	addi	r2,r2,-31628
  208f44:	f800283a 	ret

00208f48 <__locale_mb_cur_max>:
  208f48:	00801074 	movhi	r2,65
  208f4c:	10a70b04 	addi	r2,r2,-25556
  208f50:	10800017 	ldw	r2,0(r2)
  208f54:	f800283a 	ret

00208f58 <__locale_msgcharset>:
  208f58:	00801074 	movhi	r2,65
  208f5c:	10a11504 	addi	r2,r2,-31660
  208f60:	f800283a 	ret

00208f64 <__locale_cjk_lang>:
  208f64:	0005883a 	mov	r2,zero
  208f68:	f800283a 	ret

00208f6c <_localeconv_r>:
  208f6c:	00801074 	movhi	r2,65
  208f70:	10a12504 	addi	r2,r2,-31596
  208f74:	f800283a 	ret

00208f78 <setlocale>:
  208f78:	00801074 	movhi	r2,65
  208f7c:	10a70a04 	addi	r2,r2,-25560
  208f80:	280d883a 	mov	r6,r5
  208f84:	200b883a 	mov	r5,r4
  208f88:	11000017 	ldw	r4,0(r2)
  208f8c:	0208ec01 	jmpi	208ec0 <_setlocale_r>

00208f90 <localeconv>:
  208f90:	00801074 	movhi	r2,65
  208f94:	10a12504 	addi	r2,r2,-31596
  208f98:	f800283a 	ret

00208f9c <__smakebuf_r>:
  208f9c:	2880030b 	ldhu	r2,12(r5)
  208fa0:	10c0008c 	andi	r3,r2,2
  208fa4:	1800411e 	bne	r3,zero,2090ac <__smakebuf_r+0x110>
  208fa8:	deffec04 	addi	sp,sp,-80
  208fac:	dc000f15 	stw	r16,60(sp)
  208fb0:	2821883a 	mov	r16,r5
  208fb4:	2940038f 	ldh	r5,14(r5)
  208fb8:	dc401015 	stw	r17,64(sp)
  208fbc:	dfc01315 	stw	ra,76(sp)
  208fc0:	dcc01215 	stw	r19,72(sp)
  208fc4:	dc801115 	stw	r18,68(sp)
  208fc8:	2023883a 	mov	r17,r4
  208fcc:	28001c16 	blt	r5,zero,209040 <__smakebuf_r+0xa4>
  208fd0:	d80d883a 	mov	r6,sp
  208fd4:	020d5640 	call	20d564 <_fstat_r>
  208fd8:	10001816 	blt	r2,zero,20903c <__smakebuf_r+0xa0>
  208fdc:	d8800117 	ldw	r2,4(sp)
  208fe0:	00e00014 	movui	r3,32768
  208fe4:	10bc000c 	andi	r2,r2,61440
  208fe8:	14c80020 	cmpeqi	r19,r2,8192
  208fec:	10c03726 	beq	r2,r3,2090cc <__smakebuf_r+0x130>
  208ff0:	80c0030b 	ldhu	r3,12(r16)
  208ff4:	18c20014 	ori	r3,r3,2048
  208ff8:	80c0030d 	sth	r3,12(r16)
  208ffc:	00c80004 	movi	r3,8192
  209000:	10c0521e 	bne	r2,r3,20914c <__smakebuf_r+0x1b0>
  209004:	8140038f 	ldh	r5,14(r16)
  209008:	8809883a 	mov	r4,r17
  20900c:	020d5c00 	call	20d5c0 <_isatty_r>
  209010:	10004c26 	beq	r2,zero,209144 <__smakebuf_r+0x1a8>
  209014:	8080030b 	ldhu	r2,12(r16)
  209018:	80c010c4 	addi	r3,r16,67
  20901c:	80c00015 	stw	r3,0(r16)
  209020:	10800054 	ori	r2,r2,1
  209024:	8080030d 	sth	r2,12(r16)
  209028:	00800044 	movi	r2,1
  20902c:	80c00415 	stw	r3,16(r16)
  209030:	80800515 	stw	r2,20(r16)
  209034:	04810004 	movi	r18,1024
  209038:	00000706 	br	209058 <__smakebuf_r+0xbc>
  20903c:	8080030b 	ldhu	r2,12(r16)
  209040:	10c0200c 	andi	r3,r2,128
  209044:	18001f1e 	bne	r3,zero,2090c4 <__smakebuf_r+0x128>
  209048:	04810004 	movi	r18,1024
  20904c:	10820014 	ori	r2,r2,2048
  209050:	8080030d 	sth	r2,12(r16)
  209054:	0027883a 	mov	r19,zero
  209058:	900b883a 	mov	r5,r18
  20905c:	8809883a 	mov	r4,r17
  209060:	02091580 	call	209158 <_malloc_r>
  209064:	10002c26 	beq	r2,zero,209118 <__smakebuf_r+0x17c>
  209068:	80c0030b 	ldhu	r3,12(r16)
  20906c:	01000874 	movhi	r4,33
  209070:	21202504 	addi	r4,r4,-32620
  209074:	89000f15 	stw	r4,60(r17)
  209078:	18c02014 	ori	r3,r3,128
  20907c:	80c0030d 	sth	r3,12(r16)
  209080:	80800015 	stw	r2,0(r16)
  209084:	80800415 	stw	r2,16(r16)
  209088:	84800515 	stw	r18,20(r16)
  20908c:	98001a1e 	bne	r19,zero,2090f8 <__smakebuf_r+0x15c>
  209090:	dfc01317 	ldw	ra,76(sp)
  209094:	dcc01217 	ldw	r19,72(sp)
  209098:	dc801117 	ldw	r18,68(sp)
  20909c:	dc401017 	ldw	r17,64(sp)
  2090a0:	dc000f17 	ldw	r16,60(sp)
  2090a4:	dec01404 	addi	sp,sp,80
  2090a8:	f800283a 	ret
  2090ac:	288010c4 	addi	r2,r5,67
  2090b0:	28800015 	stw	r2,0(r5)
  2090b4:	28800415 	stw	r2,16(r5)
  2090b8:	00800044 	movi	r2,1
  2090bc:	28800515 	stw	r2,20(r5)
  2090c0:	f800283a 	ret
  2090c4:	04801004 	movi	r18,64
  2090c8:	003fe006 	br	20904c <_gp+0xffdf7438>
  2090cc:	81000a17 	ldw	r4,40(r16)
  2090d0:	00c00874 	movhi	r3,33
  2090d4:	18edce04 	addi	r3,r3,-18632
  2090d8:	20ffc51e 	bne	r4,r3,208ff0 <_gp+0xffdf73dc>
  2090dc:	8080030b 	ldhu	r2,12(r16)
  2090e0:	04810004 	movi	r18,1024
  2090e4:	84801315 	stw	r18,76(r16)
  2090e8:	1484b03a 	or	r2,r2,r18
  2090ec:	8080030d 	sth	r2,12(r16)
  2090f0:	0027883a 	mov	r19,zero
  2090f4:	003fd806 	br	209058 <_gp+0xffdf7444>
  2090f8:	8140038f 	ldh	r5,14(r16)
  2090fc:	8809883a 	mov	r4,r17
  209100:	020d5c00 	call	20d5c0 <_isatty_r>
  209104:	103fe226 	beq	r2,zero,209090 <_gp+0xffdf747c>
  209108:	8080030b 	ldhu	r2,12(r16)
  20910c:	10800054 	ori	r2,r2,1
  209110:	8080030d 	sth	r2,12(r16)
  209114:	003fde06 	br	209090 <_gp+0xffdf747c>
  209118:	8080030b 	ldhu	r2,12(r16)
  20911c:	10c0800c 	andi	r3,r2,512
  209120:	183fdb1e 	bne	r3,zero,209090 <_gp+0xffdf747c>
  209124:	10800094 	ori	r2,r2,2
  209128:	80c010c4 	addi	r3,r16,67
  20912c:	8080030d 	sth	r2,12(r16)
  209130:	00800044 	movi	r2,1
  209134:	80c00015 	stw	r3,0(r16)
  209138:	80c00415 	stw	r3,16(r16)
  20913c:	80800515 	stw	r2,20(r16)
  209140:	003fd306 	br	209090 <_gp+0xffdf747c>
  209144:	04810004 	movi	r18,1024
  209148:	003fc306 	br	209058 <_gp+0xffdf7444>
  20914c:	0027883a 	mov	r19,zero
  209150:	04810004 	movi	r18,1024
  209154:	003fc006 	br	209058 <_gp+0xffdf7444>

00209158 <_malloc_r>:
  209158:	defff504 	addi	sp,sp,-44
  20915c:	dc800315 	stw	r18,12(sp)
  209160:	dfc00a15 	stw	ra,40(sp)
  209164:	df000915 	stw	fp,36(sp)
  209168:	ddc00815 	stw	r23,32(sp)
  20916c:	dd800715 	stw	r22,28(sp)
  209170:	dd400615 	stw	r21,24(sp)
  209174:	dd000515 	stw	r20,20(sp)
  209178:	dcc00415 	stw	r19,16(sp)
  20917c:	dc400215 	stw	r17,8(sp)
  209180:	dc000115 	stw	r16,4(sp)
  209184:	288002c4 	addi	r2,r5,11
  209188:	00c00584 	movi	r3,22
  20918c:	2025883a 	mov	r18,r4
  209190:	18807f2e 	bgeu	r3,r2,209390 <_malloc_r+0x238>
  209194:	047ffe04 	movi	r17,-8
  209198:	1462703a 	and	r17,r2,r17
  20919c:	8800a316 	blt	r17,zero,20942c <_malloc_r+0x2d4>
  2091a0:	8940a236 	bltu	r17,r5,20942c <_malloc_r+0x2d4>
  2091a4:	02112580 	call	211258 <__malloc_lock>
  2091a8:	00807dc4 	movi	r2,503
  2091ac:	1441e92e 	bgeu	r2,r17,209954 <_malloc_r+0x7fc>
  2091b0:	8804d27a 	srli	r2,r17,9
  2091b4:	1000a126 	beq	r2,zero,20943c <_malloc_r+0x2e4>
  2091b8:	00c00104 	movi	r3,4
  2091bc:	18811e36 	bltu	r3,r2,209638 <_malloc_r+0x4e0>
  2091c0:	8804d1ba 	srli	r2,r17,6
  2091c4:	12000e44 	addi	r8,r2,57
  2091c8:	11c00e04 	addi	r7,r2,56
  2091cc:	4209883a 	add	r4,r8,r8
  2091d0:	04c01074 	movhi	r19,65
  2091d4:	2109883a 	add	r4,r4,r4
  2091d8:	9ce13304 	addi	r19,r19,-31540
  2091dc:	2109883a 	add	r4,r4,r4
  2091e0:	9909883a 	add	r4,r19,r4
  2091e4:	24000117 	ldw	r16,4(r4)
  2091e8:	213ffe04 	addi	r4,r4,-8
  2091ec:	24009726 	beq	r4,r16,20944c <_malloc_r+0x2f4>
  2091f0:	80800117 	ldw	r2,4(r16)
  2091f4:	01bfff04 	movi	r6,-4
  2091f8:	014003c4 	movi	r5,15
  2091fc:	1184703a 	and	r2,r2,r6
  209200:	1447c83a 	sub	r3,r2,r17
  209204:	28c00716 	blt	r5,r3,209224 <_malloc_r+0xcc>
  209208:	1800920e 	bge	r3,zero,209454 <_malloc_r+0x2fc>
  20920c:	84000317 	ldw	r16,12(r16)
  209210:	24008e26 	beq	r4,r16,20944c <_malloc_r+0x2f4>
  209214:	80800117 	ldw	r2,4(r16)
  209218:	1184703a 	and	r2,r2,r6
  20921c:	1447c83a 	sub	r3,r2,r17
  209220:	28fff90e 	bge	r5,r3,209208 <_gp+0xffdf75f4>
  209224:	3809883a 	mov	r4,r7
  209228:	01801074 	movhi	r6,65
  20922c:	9c000417 	ldw	r16,16(r19)
  209230:	31a13304 	addi	r6,r6,-31540
  209234:	32000204 	addi	r8,r6,8
  209238:	82013426 	beq	r16,r8,20970c <_malloc_r+0x5b4>
  20923c:	80c00117 	ldw	r3,4(r16)
  209240:	00bfff04 	movi	r2,-4
  209244:	188e703a 	and	r7,r3,r2
  209248:	3c45c83a 	sub	r2,r7,r17
  20924c:	00c003c4 	movi	r3,15
  209250:	18811f16 	blt	r3,r2,2096d0 <_malloc_r+0x578>
  209254:	32000515 	stw	r8,20(r6)
  209258:	32000415 	stw	r8,16(r6)
  20925c:	10007f0e 	bge	r2,zero,20945c <_malloc_r+0x304>
  209260:	00807fc4 	movi	r2,511
  209264:	11c0fd36 	bltu	r2,r7,20965c <_malloc_r+0x504>
  209268:	3806d0fa 	srli	r3,r7,3
  20926c:	01c00044 	movi	r7,1
  209270:	30800117 	ldw	r2,4(r6)
  209274:	19400044 	addi	r5,r3,1
  209278:	294b883a 	add	r5,r5,r5
  20927c:	1807d0ba 	srai	r3,r3,2
  209280:	294b883a 	add	r5,r5,r5
  209284:	294b883a 	add	r5,r5,r5
  209288:	298b883a 	add	r5,r5,r6
  20928c:	38c6983a 	sll	r3,r7,r3
  209290:	29c00017 	ldw	r7,0(r5)
  209294:	2a7ffe04 	addi	r9,r5,-8
  209298:	1886b03a 	or	r3,r3,r2
  20929c:	82400315 	stw	r9,12(r16)
  2092a0:	81c00215 	stw	r7,8(r16)
  2092a4:	30c00115 	stw	r3,4(r6)
  2092a8:	2c000015 	stw	r16,0(r5)
  2092ac:	3c000315 	stw	r16,12(r7)
  2092b0:	2005d0ba 	srai	r2,r4,2
  2092b4:	01400044 	movi	r5,1
  2092b8:	288a983a 	sll	r5,r5,r2
  2092bc:	19406f36 	bltu	r3,r5,20947c <_malloc_r+0x324>
  2092c0:	28c4703a 	and	r2,r5,r3
  2092c4:	10000a1e 	bne	r2,zero,2092f0 <_malloc_r+0x198>
  2092c8:	00bfff04 	movi	r2,-4
  2092cc:	294b883a 	add	r5,r5,r5
  2092d0:	2088703a 	and	r4,r4,r2
  2092d4:	28c4703a 	and	r2,r5,r3
  2092d8:	21000104 	addi	r4,r4,4
  2092dc:	1000041e 	bne	r2,zero,2092f0 <_malloc_r+0x198>
  2092e0:	294b883a 	add	r5,r5,r5
  2092e4:	28c4703a 	and	r2,r5,r3
  2092e8:	21000104 	addi	r4,r4,4
  2092ec:	103ffc26 	beq	r2,zero,2092e0 <_gp+0xffdf76cc>
  2092f0:	02bfff04 	movi	r10,-4
  2092f4:	024003c4 	movi	r9,15
  2092f8:	21800044 	addi	r6,r4,1
  2092fc:	318d883a 	add	r6,r6,r6
  209300:	318d883a 	add	r6,r6,r6
  209304:	318d883a 	add	r6,r6,r6
  209308:	998d883a 	add	r6,r19,r6
  20930c:	333ffe04 	addi	r12,r6,-8
  209310:	2017883a 	mov	r11,r4
  209314:	31800104 	addi	r6,r6,4
  209318:	34000017 	ldw	r16,0(r6)
  20931c:	31fffd04 	addi	r7,r6,-12
  209320:	81c0041e 	bne	r16,r7,209334 <_malloc_r+0x1dc>
  209324:	0000fb06 	br	209714 <_malloc_r+0x5bc>
  209328:	1801030e 	bge	r3,zero,209738 <_malloc_r+0x5e0>
  20932c:	84000317 	ldw	r16,12(r16)
  209330:	81c0f826 	beq	r16,r7,209714 <_malloc_r+0x5bc>
  209334:	80800117 	ldw	r2,4(r16)
  209338:	1284703a 	and	r2,r2,r10
  20933c:	1447c83a 	sub	r3,r2,r17
  209340:	48fff90e 	bge	r9,r3,209328 <_gp+0xffdf7714>
  209344:	80800317 	ldw	r2,12(r16)
  209348:	81000217 	ldw	r4,8(r16)
  20934c:	89400054 	ori	r5,r17,1
  209350:	81400115 	stw	r5,4(r16)
  209354:	20800315 	stw	r2,12(r4)
  209358:	11000215 	stw	r4,8(r2)
  20935c:	8463883a 	add	r17,r16,r17
  209360:	9c400515 	stw	r17,20(r19)
  209364:	9c400415 	stw	r17,16(r19)
  209368:	18800054 	ori	r2,r3,1
  20936c:	88800115 	stw	r2,4(r17)
  209370:	8a000315 	stw	r8,12(r17)
  209374:	8a000215 	stw	r8,8(r17)
  209378:	88e3883a 	add	r17,r17,r3
  20937c:	88c00015 	stw	r3,0(r17)
  209380:	9009883a 	mov	r4,r18
  209384:	021127c0 	call	21127c <__malloc_unlock>
  209388:	80800204 	addi	r2,r16,8
  20938c:	00001b06 	br	2093fc <_malloc_r+0x2a4>
  209390:	04400404 	movi	r17,16
  209394:	89402536 	bltu	r17,r5,20942c <_malloc_r+0x2d4>
  209398:	02112580 	call	211258 <__malloc_lock>
  20939c:	00800184 	movi	r2,6
  2093a0:	01000084 	movi	r4,2
  2093a4:	04c01074 	movhi	r19,65
  2093a8:	1085883a 	add	r2,r2,r2
  2093ac:	9ce13304 	addi	r19,r19,-31540
  2093b0:	1085883a 	add	r2,r2,r2
  2093b4:	9885883a 	add	r2,r19,r2
  2093b8:	14000117 	ldw	r16,4(r2)
  2093bc:	10fffe04 	addi	r3,r2,-8
  2093c0:	80c0d926 	beq	r16,r3,209728 <_malloc_r+0x5d0>
  2093c4:	80c00117 	ldw	r3,4(r16)
  2093c8:	81000317 	ldw	r4,12(r16)
  2093cc:	00bfff04 	movi	r2,-4
  2093d0:	1884703a 	and	r2,r3,r2
  2093d4:	81400217 	ldw	r5,8(r16)
  2093d8:	8085883a 	add	r2,r16,r2
  2093dc:	10c00117 	ldw	r3,4(r2)
  2093e0:	29000315 	stw	r4,12(r5)
  2093e4:	21400215 	stw	r5,8(r4)
  2093e8:	18c00054 	ori	r3,r3,1
  2093ec:	10c00115 	stw	r3,4(r2)
  2093f0:	9009883a 	mov	r4,r18
  2093f4:	021127c0 	call	21127c <__malloc_unlock>
  2093f8:	80800204 	addi	r2,r16,8
  2093fc:	dfc00a17 	ldw	ra,40(sp)
  209400:	df000917 	ldw	fp,36(sp)
  209404:	ddc00817 	ldw	r23,32(sp)
  209408:	dd800717 	ldw	r22,28(sp)
  20940c:	dd400617 	ldw	r21,24(sp)
  209410:	dd000517 	ldw	r20,20(sp)
  209414:	dcc00417 	ldw	r19,16(sp)
  209418:	dc800317 	ldw	r18,12(sp)
  20941c:	dc400217 	ldw	r17,8(sp)
  209420:	dc000117 	ldw	r16,4(sp)
  209424:	dec00b04 	addi	sp,sp,44
  209428:	f800283a 	ret
  20942c:	00800304 	movi	r2,12
  209430:	90800015 	stw	r2,0(r18)
  209434:	0005883a 	mov	r2,zero
  209438:	003ff006 	br	2093fc <_gp+0xffdf77e8>
  20943c:	01002004 	movi	r4,128
  209440:	02001004 	movi	r8,64
  209444:	01c00fc4 	movi	r7,63
  209448:	003f6106 	br	2091d0 <_gp+0xffdf75bc>
  20944c:	4009883a 	mov	r4,r8
  209450:	003f7506 	br	209228 <_gp+0xffdf7614>
  209454:	81000317 	ldw	r4,12(r16)
  209458:	003fde06 	br	2093d4 <_gp+0xffdf77c0>
  20945c:	81c5883a 	add	r2,r16,r7
  209460:	11400117 	ldw	r5,4(r2)
  209464:	9009883a 	mov	r4,r18
  209468:	29400054 	ori	r5,r5,1
  20946c:	11400115 	stw	r5,4(r2)
  209470:	021127c0 	call	21127c <__malloc_unlock>
  209474:	80800204 	addi	r2,r16,8
  209478:	003fe006 	br	2093fc <_gp+0xffdf77e8>
  20947c:	9c000217 	ldw	r16,8(r19)
  209480:	00bfff04 	movi	r2,-4
  209484:	85800117 	ldw	r22,4(r16)
  209488:	b0ac703a 	and	r22,r22,r2
  20948c:	b4400336 	bltu	r22,r17,20949c <_malloc_r+0x344>
  209490:	b445c83a 	sub	r2,r22,r17
  209494:	00c003c4 	movi	r3,15
  209498:	18805d16 	blt	r3,r2,209610 <_malloc_r+0x4b8>
  20949c:	05c01074 	movhi	r23,65
  2094a0:	00801074 	movhi	r2,65
  2094a4:	10a72a04 	addi	r2,r2,-25432
  2094a8:	bde70c04 	addi	r23,r23,-25552
  2094ac:	15400017 	ldw	r21,0(r2)
  2094b0:	b8c00017 	ldw	r3,0(r23)
  2094b4:	00bfffc4 	movi	r2,-1
  2094b8:	858d883a 	add	r6,r16,r22
  2094bc:	8d6b883a 	add	r21,r17,r21
  2094c0:	1880ea26 	beq	r3,r2,20986c <_malloc_r+0x714>
  2094c4:	ad4403c4 	addi	r21,r21,4111
  2094c8:	00bc0004 	movi	r2,-4096
  2094cc:	a8aa703a 	and	r21,r21,r2
  2094d0:	a80b883a 	mov	r5,r21
  2094d4:	9009883a 	mov	r4,r18
  2094d8:	d9800015 	stw	r6,0(sp)
  2094dc:	020b60c0 	call	20b60c <_sbrk_r>
  2094e0:	1029883a 	mov	r20,r2
  2094e4:	00bfffc4 	movi	r2,-1
  2094e8:	d9800017 	ldw	r6,0(sp)
  2094ec:	a080e826 	beq	r20,r2,209890 <_malloc_r+0x738>
  2094f0:	a180a636 	bltu	r20,r6,20978c <_malloc_r+0x634>
  2094f4:	07001074 	movhi	fp,65
  2094f8:	e7273d04 	addi	fp,fp,-25356
  2094fc:	e0800017 	ldw	r2,0(fp)
  209500:	a887883a 	add	r3,r21,r2
  209504:	e0c00015 	stw	r3,0(fp)
  209508:	3500e626 	beq	r6,r20,2098a4 <_malloc_r+0x74c>
  20950c:	b9000017 	ldw	r4,0(r23)
  209510:	00bfffc4 	movi	r2,-1
  209514:	2080ee26 	beq	r4,r2,2098d0 <_malloc_r+0x778>
  209518:	a185c83a 	sub	r2,r20,r6
  20951c:	10c5883a 	add	r2,r2,r3
  209520:	e0800015 	stw	r2,0(fp)
  209524:	a0c001cc 	andi	r3,r20,7
  209528:	1800bc26 	beq	r3,zero,20981c <_malloc_r+0x6c4>
  20952c:	a0e9c83a 	sub	r20,r20,r3
  209530:	00840204 	movi	r2,4104
  209534:	a5000204 	addi	r20,r20,8
  209538:	10c7c83a 	sub	r3,r2,r3
  20953c:	a545883a 	add	r2,r20,r21
  209540:	1083ffcc 	andi	r2,r2,4095
  209544:	18abc83a 	sub	r21,r3,r2
  209548:	a80b883a 	mov	r5,r21
  20954c:	9009883a 	mov	r4,r18
  209550:	020b60c0 	call	20b60c <_sbrk_r>
  209554:	00ffffc4 	movi	r3,-1
  209558:	10c0e126 	beq	r2,r3,2098e0 <_malloc_r+0x788>
  20955c:	1505c83a 	sub	r2,r2,r20
  209560:	1545883a 	add	r2,r2,r21
  209564:	10800054 	ori	r2,r2,1
  209568:	e0c00017 	ldw	r3,0(fp)
  20956c:	9d000215 	stw	r20,8(r19)
  209570:	a0800115 	stw	r2,4(r20)
  209574:	a8c7883a 	add	r3,r21,r3
  209578:	e0c00015 	stw	r3,0(fp)
  20957c:	84c00e26 	beq	r16,r19,2095b8 <_malloc_r+0x460>
  209580:	018003c4 	movi	r6,15
  209584:	3580a72e 	bgeu	r6,r22,209824 <_malloc_r+0x6cc>
  209588:	81400117 	ldw	r5,4(r16)
  20958c:	013ffe04 	movi	r4,-8
  209590:	b0bffd04 	addi	r2,r22,-12
  209594:	1104703a 	and	r2,r2,r4
  209598:	2900004c 	andi	r4,r5,1
  20959c:	2088b03a 	or	r4,r4,r2
  2095a0:	81000115 	stw	r4,4(r16)
  2095a4:	01400144 	movi	r5,5
  2095a8:	8089883a 	add	r4,r16,r2
  2095ac:	21400115 	stw	r5,4(r4)
  2095b0:	21400215 	stw	r5,8(r4)
  2095b4:	3080cd36 	bltu	r6,r2,2098ec <_malloc_r+0x794>
  2095b8:	00801074 	movhi	r2,65
  2095bc:	10a72904 	addi	r2,r2,-25436
  2095c0:	11000017 	ldw	r4,0(r2)
  2095c4:	20c0012e 	bgeu	r4,r3,2095cc <_malloc_r+0x474>
  2095c8:	10c00015 	stw	r3,0(r2)
  2095cc:	00801074 	movhi	r2,65
  2095d0:	10a72804 	addi	r2,r2,-25440
  2095d4:	11000017 	ldw	r4,0(r2)
  2095d8:	9c000217 	ldw	r16,8(r19)
  2095dc:	20c0012e 	bgeu	r4,r3,2095e4 <_malloc_r+0x48c>
  2095e0:	10c00015 	stw	r3,0(r2)
  2095e4:	80c00117 	ldw	r3,4(r16)
  2095e8:	00bfff04 	movi	r2,-4
  2095ec:	1886703a 	and	r3,r3,r2
  2095f0:	1c45c83a 	sub	r2,r3,r17
  2095f4:	1c400236 	bltu	r3,r17,209600 <_malloc_r+0x4a8>
  2095f8:	00c003c4 	movi	r3,15
  2095fc:	18800416 	blt	r3,r2,209610 <_malloc_r+0x4b8>
  209600:	9009883a 	mov	r4,r18
  209604:	021127c0 	call	21127c <__malloc_unlock>
  209608:	0005883a 	mov	r2,zero
  20960c:	003f7b06 	br	2093fc <_gp+0xffdf77e8>
  209610:	88c00054 	ori	r3,r17,1
  209614:	80c00115 	stw	r3,4(r16)
  209618:	8463883a 	add	r17,r16,r17
  20961c:	10800054 	ori	r2,r2,1
  209620:	9c400215 	stw	r17,8(r19)
  209624:	88800115 	stw	r2,4(r17)
  209628:	9009883a 	mov	r4,r18
  20962c:	021127c0 	call	21127c <__malloc_unlock>
  209630:	80800204 	addi	r2,r16,8
  209634:	003f7106 	br	2093fc <_gp+0xffdf77e8>
  209638:	00c00504 	movi	r3,20
  20963c:	18804a2e 	bgeu	r3,r2,209768 <_malloc_r+0x610>
  209640:	00c01504 	movi	r3,84
  209644:	18806e36 	bltu	r3,r2,209800 <_malloc_r+0x6a8>
  209648:	8804d33a 	srli	r2,r17,12
  20964c:	12001bc4 	addi	r8,r2,111
  209650:	11c01b84 	addi	r7,r2,110
  209654:	4209883a 	add	r4,r8,r8
  209658:	003edd06 	br	2091d0 <_gp+0xffdf75bc>
  20965c:	3804d27a 	srli	r2,r7,9
  209660:	00c00104 	movi	r3,4
  209664:	1880442e 	bgeu	r3,r2,209778 <_malloc_r+0x620>
  209668:	00c00504 	movi	r3,20
  20966c:	18808136 	bltu	r3,r2,209874 <_malloc_r+0x71c>
  209670:	11401704 	addi	r5,r2,92
  209674:	10c016c4 	addi	r3,r2,91
  209678:	294b883a 	add	r5,r5,r5
  20967c:	294b883a 	add	r5,r5,r5
  209680:	294b883a 	add	r5,r5,r5
  209684:	994b883a 	add	r5,r19,r5
  209688:	28800017 	ldw	r2,0(r5)
  20968c:	01801074 	movhi	r6,65
  209690:	297ffe04 	addi	r5,r5,-8
  209694:	31a13304 	addi	r6,r6,-31540
  209698:	28806526 	beq	r5,r2,209830 <_malloc_r+0x6d8>
  20969c:	01bfff04 	movi	r6,-4
  2096a0:	10c00117 	ldw	r3,4(r2)
  2096a4:	1986703a 	and	r3,r3,r6
  2096a8:	38c0022e 	bgeu	r7,r3,2096b4 <_malloc_r+0x55c>
  2096ac:	10800217 	ldw	r2,8(r2)
  2096b0:	28bffb1e 	bne	r5,r2,2096a0 <_gp+0xffdf7a8c>
  2096b4:	11400317 	ldw	r5,12(r2)
  2096b8:	98c00117 	ldw	r3,4(r19)
  2096bc:	81400315 	stw	r5,12(r16)
  2096c0:	80800215 	stw	r2,8(r16)
  2096c4:	2c000215 	stw	r16,8(r5)
  2096c8:	14000315 	stw	r16,12(r2)
  2096cc:	003ef806 	br	2092b0 <_gp+0xffdf769c>
  2096d0:	88c00054 	ori	r3,r17,1
  2096d4:	80c00115 	stw	r3,4(r16)
  2096d8:	8463883a 	add	r17,r16,r17
  2096dc:	34400515 	stw	r17,20(r6)
  2096e0:	34400415 	stw	r17,16(r6)
  2096e4:	10c00054 	ori	r3,r2,1
  2096e8:	8a000315 	stw	r8,12(r17)
  2096ec:	8a000215 	stw	r8,8(r17)
  2096f0:	88c00115 	stw	r3,4(r17)
  2096f4:	88a3883a 	add	r17,r17,r2
  2096f8:	88800015 	stw	r2,0(r17)
  2096fc:	9009883a 	mov	r4,r18
  209700:	021127c0 	call	21127c <__malloc_unlock>
  209704:	80800204 	addi	r2,r16,8
  209708:	003f3c06 	br	2093fc <_gp+0xffdf77e8>
  20970c:	30c00117 	ldw	r3,4(r6)
  209710:	003ee706 	br	2092b0 <_gp+0xffdf769c>
  209714:	5ac00044 	addi	r11,r11,1
  209718:	588000cc 	andi	r2,r11,3
  20971c:	31800204 	addi	r6,r6,8
  209720:	103efd1e 	bne	r2,zero,209318 <_gp+0xffdf7704>
  209724:	00002406 	br	2097b8 <_malloc_r+0x660>
  209728:	14000317 	ldw	r16,12(r2)
  20972c:	143f251e 	bne	r2,r16,2093c4 <_gp+0xffdf77b0>
  209730:	21000084 	addi	r4,r4,2
  209734:	003ebc06 	br	209228 <_gp+0xffdf7614>
  209738:	8085883a 	add	r2,r16,r2
  20973c:	10c00117 	ldw	r3,4(r2)
  209740:	81000317 	ldw	r4,12(r16)
  209744:	81400217 	ldw	r5,8(r16)
  209748:	18c00054 	ori	r3,r3,1
  20974c:	10c00115 	stw	r3,4(r2)
  209750:	29000315 	stw	r4,12(r5)
  209754:	21400215 	stw	r5,8(r4)
  209758:	9009883a 	mov	r4,r18
  20975c:	021127c0 	call	21127c <__malloc_unlock>
  209760:	80800204 	addi	r2,r16,8
  209764:	003f2506 	br	2093fc <_gp+0xffdf77e8>
  209768:	12001704 	addi	r8,r2,92
  20976c:	11c016c4 	addi	r7,r2,91
  209770:	4209883a 	add	r4,r8,r8
  209774:	003e9606 	br	2091d0 <_gp+0xffdf75bc>
  209778:	3804d1ba 	srli	r2,r7,6
  20977c:	11400e44 	addi	r5,r2,57
  209780:	10c00e04 	addi	r3,r2,56
  209784:	294b883a 	add	r5,r5,r5
  209788:	003fbc06 	br	20967c <_gp+0xffdf7a68>
  20978c:	84ff5926 	beq	r16,r19,2094f4 <_gp+0xffdf78e0>
  209790:	00801074 	movhi	r2,65
  209794:	10a13304 	addi	r2,r2,-31540
  209798:	14000217 	ldw	r16,8(r2)
  20979c:	00bfff04 	movi	r2,-4
  2097a0:	80c00117 	ldw	r3,4(r16)
  2097a4:	1886703a 	and	r3,r3,r2
  2097a8:	003f9106 	br	2095f0 <_gp+0xffdf79dc>
  2097ac:	60800217 	ldw	r2,8(r12)
  2097b0:	213fffc4 	addi	r4,r4,-1
  2097b4:	1300651e 	bne	r2,r12,20994c <_malloc_r+0x7f4>
  2097b8:	208000cc 	andi	r2,r4,3
  2097bc:	633ffe04 	addi	r12,r12,-8
  2097c0:	103ffa1e 	bne	r2,zero,2097ac <_gp+0xffdf7b98>
  2097c4:	98800117 	ldw	r2,4(r19)
  2097c8:	0146303a 	nor	r3,zero,r5
  2097cc:	1884703a 	and	r2,r3,r2
  2097d0:	98800115 	stw	r2,4(r19)
  2097d4:	294b883a 	add	r5,r5,r5
  2097d8:	117f2836 	bltu	r2,r5,20947c <_gp+0xffdf7868>
  2097dc:	283f2726 	beq	r5,zero,20947c <_gp+0xffdf7868>
  2097e0:	2886703a 	and	r3,r5,r2
  2097e4:	5809883a 	mov	r4,r11
  2097e8:	183ec31e 	bne	r3,zero,2092f8 <_gp+0xffdf76e4>
  2097ec:	294b883a 	add	r5,r5,r5
  2097f0:	2886703a 	and	r3,r5,r2
  2097f4:	21000104 	addi	r4,r4,4
  2097f8:	183ffc26 	beq	r3,zero,2097ec <_gp+0xffdf7bd8>
  2097fc:	003ebe06 	br	2092f8 <_gp+0xffdf76e4>
  209800:	00c05504 	movi	r3,340
  209804:	18801236 	bltu	r3,r2,209850 <_malloc_r+0x6f8>
  209808:	8804d3fa 	srli	r2,r17,15
  20980c:	12001e04 	addi	r8,r2,120
  209810:	11c01dc4 	addi	r7,r2,119
  209814:	4209883a 	add	r4,r8,r8
  209818:	003e6d06 	br	2091d0 <_gp+0xffdf75bc>
  20981c:	00c40004 	movi	r3,4096
  209820:	003f4606 	br	20953c <_gp+0xffdf7928>
  209824:	00800044 	movi	r2,1
  209828:	a0800115 	stw	r2,4(r20)
  20982c:	003f7406 	br	209600 <_gp+0xffdf79ec>
  209830:	1805d0ba 	srai	r2,r3,2
  209834:	01c00044 	movi	r7,1
  209838:	30c00117 	ldw	r3,4(r6)
  20983c:	388e983a 	sll	r7,r7,r2
  209840:	2805883a 	mov	r2,r5
  209844:	38c6b03a 	or	r3,r7,r3
  209848:	30c00115 	stw	r3,4(r6)
  20984c:	003f9b06 	br	2096bc <_gp+0xffdf7aa8>
  209850:	00c15504 	movi	r3,1364
  209854:	18801a36 	bltu	r3,r2,2098c0 <_malloc_r+0x768>
  209858:	8804d4ba 	srli	r2,r17,18
  20985c:	12001f44 	addi	r8,r2,125
  209860:	11c01f04 	addi	r7,r2,124
  209864:	4209883a 	add	r4,r8,r8
  209868:	003e5906 	br	2091d0 <_gp+0xffdf75bc>
  20986c:	ad400404 	addi	r21,r21,16
  209870:	003f1706 	br	2094d0 <_gp+0xffdf78bc>
  209874:	00c01504 	movi	r3,84
  209878:	18802336 	bltu	r3,r2,209908 <_malloc_r+0x7b0>
  20987c:	3804d33a 	srli	r2,r7,12
  209880:	11401bc4 	addi	r5,r2,111
  209884:	10c01b84 	addi	r3,r2,110
  209888:	294b883a 	add	r5,r5,r5
  20988c:	003f7b06 	br	20967c <_gp+0xffdf7a68>
  209890:	9c000217 	ldw	r16,8(r19)
  209894:	00bfff04 	movi	r2,-4
  209898:	80c00117 	ldw	r3,4(r16)
  20989c:	1886703a 	and	r3,r3,r2
  2098a0:	003f5306 	br	2095f0 <_gp+0xffdf79dc>
  2098a4:	3083ffcc 	andi	r2,r6,4095
  2098a8:	103f181e 	bne	r2,zero,20950c <_gp+0xffdf78f8>
  2098ac:	99000217 	ldw	r4,8(r19)
  2098b0:	b545883a 	add	r2,r22,r21
  2098b4:	10800054 	ori	r2,r2,1
  2098b8:	20800115 	stw	r2,4(r4)
  2098bc:	003f3e06 	br	2095b8 <_gp+0xffdf79a4>
  2098c0:	01003f84 	movi	r4,254
  2098c4:	02001fc4 	movi	r8,127
  2098c8:	01c01f84 	movi	r7,126
  2098cc:	003e4006 	br	2091d0 <_gp+0xffdf75bc>
  2098d0:	00801074 	movhi	r2,65
  2098d4:	10a70c04 	addi	r2,r2,-25552
  2098d8:	15000015 	stw	r20,0(r2)
  2098dc:	003f1106 	br	209524 <_gp+0xffdf7910>
  2098e0:	00800044 	movi	r2,1
  2098e4:	002b883a 	mov	r21,zero
  2098e8:	003f1f06 	br	209568 <_gp+0xffdf7954>
  2098ec:	81400204 	addi	r5,r16,8
  2098f0:	9009883a 	mov	r4,r18
  2098f4:	02085600 	call	208560 <_free_r>
  2098f8:	00801074 	movhi	r2,65
  2098fc:	10a73d04 	addi	r2,r2,-25356
  209900:	10c00017 	ldw	r3,0(r2)
  209904:	003f2c06 	br	2095b8 <_gp+0xffdf79a4>
  209908:	00c05504 	movi	r3,340
  20990c:	18800536 	bltu	r3,r2,209924 <_malloc_r+0x7cc>
  209910:	3804d3fa 	srli	r2,r7,15
  209914:	11401e04 	addi	r5,r2,120
  209918:	10c01dc4 	addi	r3,r2,119
  20991c:	294b883a 	add	r5,r5,r5
  209920:	003f5606 	br	20967c <_gp+0xffdf7a68>
  209924:	00c15504 	movi	r3,1364
  209928:	18800536 	bltu	r3,r2,209940 <_malloc_r+0x7e8>
  20992c:	3804d4ba 	srli	r2,r7,18
  209930:	11401f44 	addi	r5,r2,125
  209934:	10c01f04 	addi	r3,r2,124
  209938:	294b883a 	add	r5,r5,r5
  20993c:	003f4f06 	br	20967c <_gp+0xffdf7a68>
  209940:	01403f84 	movi	r5,254
  209944:	00c01f84 	movi	r3,126
  209948:	003f4c06 	br	20967c <_gp+0xffdf7a68>
  20994c:	98800117 	ldw	r2,4(r19)
  209950:	003fa006 	br	2097d4 <_gp+0xffdf7bc0>
  209954:	8808d0fa 	srli	r4,r17,3
  209958:	20800044 	addi	r2,r4,1
  20995c:	1085883a 	add	r2,r2,r2
  209960:	003e9006 	br	2093a4 <_gp+0xffdf7790>

00209964 <memchr>:
  209964:	208000cc 	andi	r2,r4,3
  209968:	280f883a 	mov	r7,r5
  20996c:	10003426 	beq	r2,zero,209a40 <memchr+0xdc>
  209970:	30bfffc4 	addi	r2,r6,-1
  209974:	30001a26 	beq	r6,zero,2099e0 <memchr+0x7c>
  209978:	20c00003 	ldbu	r3,0(r4)
  20997c:	29803fcc 	andi	r6,r5,255
  209980:	30c0051e 	bne	r6,r3,209998 <memchr+0x34>
  209984:	00001806 	br	2099e8 <memchr+0x84>
  209988:	10001526 	beq	r2,zero,2099e0 <memchr+0x7c>
  20998c:	20c00003 	ldbu	r3,0(r4)
  209990:	10bfffc4 	addi	r2,r2,-1
  209994:	30c01426 	beq	r6,r3,2099e8 <memchr+0x84>
  209998:	21000044 	addi	r4,r4,1
  20999c:	20c000cc 	andi	r3,r4,3
  2099a0:	183ff91e 	bne	r3,zero,209988 <_gp+0xffdf7d74>
  2099a4:	020000c4 	movi	r8,3
  2099a8:	40801136 	bltu	r8,r2,2099f0 <memchr+0x8c>
  2099ac:	10000c26 	beq	r2,zero,2099e0 <memchr+0x7c>
  2099b0:	20c00003 	ldbu	r3,0(r4)
  2099b4:	29403fcc 	andi	r5,r5,255
  2099b8:	28c00b26 	beq	r5,r3,2099e8 <memchr+0x84>
  2099bc:	20c00044 	addi	r3,r4,1
  2099c0:	39803fcc 	andi	r6,r7,255
  2099c4:	2089883a 	add	r4,r4,r2
  2099c8:	00000306 	br	2099d8 <memchr+0x74>
  2099cc:	18c00044 	addi	r3,r3,1
  2099d0:	197fffc3 	ldbu	r5,-1(r3)
  2099d4:	31400526 	beq	r6,r5,2099ec <memchr+0x88>
  2099d8:	1805883a 	mov	r2,r3
  2099dc:	20fffb1e 	bne	r4,r3,2099cc <_gp+0xffdf7db8>
  2099e0:	0005883a 	mov	r2,zero
  2099e4:	f800283a 	ret
  2099e8:	2005883a 	mov	r2,r4
  2099ec:	f800283a 	ret
  2099f0:	28c03fcc 	andi	r3,r5,255
  2099f4:	1812923a 	slli	r9,r3,8
  2099f8:	02ffbff4 	movhi	r11,65279
  2099fc:	02a02074 	movhi	r10,32897
  209a00:	48d2b03a 	or	r9,r9,r3
  209a04:	4806943a 	slli	r3,r9,16
  209a08:	5affbfc4 	addi	r11,r11,-257
  209a0c:	52a02004 	addi	r10,r10,-32640
  209a10:	48d2b03a 	or	r9,r9,r3
  209a14:	20c00017 	ldw	r3,0(r4)
  209a18:	48c6f03a 	xor	r3,r9,r3
  209a1c:	1acd883a 	add	r6,r3,r11
  209a20:	00c6303a 	nor	r3,zero,r3
  209a24:	30c6703a 	and	r3,r6,r3
  209a28:	1a86703a 	and	r3,r3,r10
  209a2c:	183fe01e 	bne	r3,zero,2099b0 <_gp+0xffdf7d9c>
  209a30:	10bfff04 	addi	r2,r2,-4
  209a34:	21000104 	addi	r4,r4,4
  209a38:	40bff636 	bltu	r8,r2,209a14 <_gp+0xffdf7e00>
  209a3c:	003fdb06 	br	2099ac <_gp+0xffdf7d98>
  209a40:	3005883a 	mov	r2,r6
  209a44:	003fd706 	br	2099a4 <_gp+0xffdf7d90>

00209a48 <memcpy>:
  209a48:	defffd04 	addi	sp,sp,-12
  209a4c:	dfc00215 	stw	ra,8(sp)
  209a50:	dc400115 	stw	r17,4(sp)
  209a54:	dc000015 	stw	r16,0(sp)
  209a58:	00c003c4 	movi	r3,15
  209a5c:	2005883a 	mov	r2,r4
  209a60:	1980452e 	bgeu	r3,r6,209b78 <memcpy+0x130>
  209a64:	2906b03a 	or	r3,r5,r4
  209a68:	18c000cc 	andi	r3,r3,3
  209a6c:	1800441e 	bne	r3,zero,209b80 <memcpy+0x138>
  209a70:	347ffc04 	addi	r17,r6,-16
  209a74:	8822d13a 	srli	r17,r17,4
  209a78:	28c00104 	addi	r3,r5,4
  209a7c:	23400104 	addi	r13,r4,4
  209a80:	8820913a 	slli	r16,r17,4
  209a84:	2b000204 	addi	r12,r5,8
  209a88:	22c00204 	addi	r11,r4,8
  209a8c:	84000504 	addi	r16,r16,20
  209a90:	2a800304 	addi	r10,r5,12
  209a94:	22400304 	addi	r9,r4,12
  209a98:	2c21883a 	add	r16,r5,r16
  209a9c:	2811883a 	mov	r8,r5
  209aa0:	200f883a 	mov	r7,r4
  209aa4:	41000017 	ldw	r4,0(r8)
  209aa8:	1fc00017 	ldw	ra,0(r3)
  209aac:	63c00017 	ldw	r15,0(r12)
  209ab0:	39000015 	stw	r4,0(r7)
  209ab4:	53800017 	ldw	r14,0(r10)
  209ab8:	6fc00015 	stw	ra,0(r13)
  209abc:	5bc00015 	stw	r15,0(r11)
  209ac0:	4b800015 	stw	r14,0(r9)
  209ac4:	18c00404 	addi	r3,r3,16
  209ac8:	39c00404 	addi	r7,r7,16
  209acc:	42000404 	addi	r8,r8,16
  209ad0:	6b400404 	addi	r13,r13,16
  209ad4:	63000404 	addi	r12,r12,16
  209ad8:	5ac00404 	addi	r11,r11,16
  209adc:	52800404 	addi	r10,r10,16
  209ae0:	4a400404 	addi	r9,r9,16
  209ae4:	1c3fef1e 	bne	r3,r16,209aa4 <_gp+0xffdf7e90>
  209ae8:	89c00044 	addi	r7,r17,1
  209aec:	380e913a 	slli	r7,r7,4
  209af0:	310003cc 	andi	r4,r6,15
  209af4:	02c000c4 	movi	r11,3
  209af8:	11c7883a 	add	r3,r2,r7
  209afc:	29cb883a 	add	r5,r5,r7
  209b00:	5900212e 	bgeu	r11,r4,209b88 <memcpy+0x140>
  209b04:	1813883a 	mov	r9,r3
  209b08:	2811883a 	mov	r8,r5
  209b0c:	200f883a 	mov	r7,r4
  209b10:	42800017 	ldw	r10,0(r8)
  209b14:	4a400104 	addi	r9,r9,4
  209b18:	39ffff04 	addi	r7,r7,-4
  209b1c:	4abfff15 	stw	r10,-4(r9)
  209b20:	42000104 	addi	r8,r8,4
  209b24:	59fffa36 	bltu	r11,r7,209b10 <_gp+0xffdf7efc>
  209b28:	213fff04 	addi	r4,r4,-4
  209b2c:	2008d0ba 	srli	r4,r4,2
  209b30:	318000cc 	andi	r6,r6,3
  209b34:	21000044 	addi	r4,r4,1
  209b38:	2109883a 	add	r4,r4,r4
  209b3c:	2109883a 	add	r4,r4,r4
  209b40:	1907883a 	add	r3,r3,r4
  209b44:	290b883a 	add	r5,r5,r4
  209b48:	30000626 	beq	r6,zero,209b64 <memcpy+0x11c>
  209b4c:	198d883a 	add	r6,r3,r6
  209b50:	29c00003 	ldbu	r7,0(r5)
  209b54:	18c00044 	addi	r3,r3,1
  209b58:	29400044 	addi	r5,r5,1
  209b5c:	19ffffc5 	stb	r7,-1(r3)
  209b60:	19bffb1e 	bne	r3,r6,209b50 <_gp+0xffdf7f3c>
  209b64:	dfc00217 	ldw	ra,8(sp)
  209b68:	dc400117 	ldw	r17,4(sp)
  209b6c:	dc000017 	ldw	r16,0(sp)
  209b70:	dec00304 	addi	sp,sp,12
  209b74:	f800283a 	ret
  209b78:	2007883a 	mov	r3,r4
  209b7c:	003ff206 	br	209b48 <_gp+0xffdf7f34>
  209b80:	2007883a 	mov	r3,r4
  209b84:	003ff106 	br	209b4c <_gp+0xffdf7f38>
  209b88:	200d883a 	mov	r6,r4
  209b8c:	003fee06 	br	209b48 <_gp+0xffdf7f34>

00209b90 <memmove>:
  209b90:	2005883a 	mov	r2,r4
  209b94:	29000b2e 	bgeu	r5,r4,209bc4 <memmove+0x34>
  209b98:	298f883a 	add	r7,r5,r6
  209b9c:	21c0092e 	bgeu	r4,r7,209bc4 <memmove+0x34>
  209ba0:	2187883a 	add	r3,r4,r6
  209ba4:	198bc83a 	sub	r5,r3,r6
  209ba8:	30004826 	beq	r6,zero,209ccc <memmove+0x13c>
  209bac:	39ffffc4 	addi	r7,r7,-1
  209bb0:	39000003 	ldbu	r4,0(r7)
  209bb4:	18ffffc4 	addi	r3,r3,-1
  209bb8:	19000005 	stb	r4,0(r3)
  209bbc:	28fffb1e 	bne	r5,r3,209bac <_gp+0xffdf7f98>
  209bc0:	f800283a 	ret
  209bc4:	00c003c4 	movi	r3,15
  209bc8:	1980412e 	bgeu	r3,r6,209cd0 <memmove+0x140>
  209bcc:	2886b03a 	or	r3,r5,r2
  209bd0:	18c000cc 	andi	r3,r3,3
  209bd4:	1800401e 	bne	r3,zero,209cd8 <memmove+0x148>
  209bd8:	33fffc04 	addi	r15,r6,-16
  209bdc:	781ed13a 	srli	r15,r15,4
  209be0:	28c00104 	addi	r3,r5,4
  209be4:	13400104 	addi	r13,r2,4
  209be8:	781c913a 	slli	r14,r15,4
  209bec:	2b000204 	addi	r12,r5,8
  209bf0:	12c00204 	addi	r11,r2,8
  209bf4:	73800504 	addi	r14,r14,20
  209bf8:	2a800304 	addi	r10,r5,12
  209bfc:	12400304 	addi	r9,r2,12
  209c00:	2b9d883a 	add	r14,r5,r14
  209c04:	2811883a 	mov	r8,r5
  209c08:	100f883a 	mov	r7,r2
  209c0c:	41000017 	ldw	r4,0(r8)
  209c10:	39c00404 	addi	r7,r7,16
  209c14:	18c00404 	addi	r3,r3,16
  209c18:	393ffc15 	stw	r4,-16(r7)
  209c1c:	193ffc17 	ldw	r4,-16(r3)
  209c20:	6b400404 	addi	r13,r13,16
  209c24:	5ac00404 	addi	r11,r11,16
  209c28:	693ffc15 	stw	r4,-16(r13)
  209c2c:	61000017 	ldw	r4,0(r12)
  209c30:	4a400404 	addi	r9,r9,16
  209c34:	42000404 	addi	r8,r8,16
  209c38:	593ffc15 	stw	r4,-16(r11)
  209c3c:	51000017 	ldw	r4,0(r10)
  209c40:	63000404 	addi	r12,r12,16
  209c44:	52800404 	addi	r10,r10,16
  209c48:	493ffc15 	stw	r4,-16(r9)
  209c4c:	1bbfef1e 	bne	r3,r14,209c0c <_gp+0xffdf7ff8>
  209c50:	79000044 	addi	r4,r15,1
  209c54:	2008913a 	slli	r4,r4,4
  209c58:	328003cc 	andi	r10,r6,15
  209c5c:	02c000c4 	movi	r11,3
  209c60:	1107883a 	add	r3,r2,r4
  209c64:	290b883a 	add	r5,r5,r4
  209c68:	5a801e2e 	bgeu	r11,r10,209ce4 <memmove+0x154>
  209c6c:	1813883a 	mov	r9,r3
  209c70:	2811883a 	mov	r8,r5
  209c74:	500f883a 	mov	r7,r10
  209c78:	41000017 	ldw	r4,0(r8)
  209c7c:	4a400104 	addi	r9,r9,4
  209c80:	39ffff04 	addi	r7,r7,-4
  209c84:	493fff15 	stw	r4,-4(r9)
  209c88:	42000104 	addi	r8,r8,4
  209c8c:	59fffa36 	bltu	r11,r7,209c78 <_gp+0xffdf8064>
  209c90:	513fff04 	addi	r4,r10,-4
  209c94:	2008d0ba 	srli	r4,r4,2
  209c98:	318000cc 	andi	r6,r6,3
  209c9c:	21000044 	addi	r4,r4,1
  209ca0:	2109883a 	add	r4,r4,r4
  209ca4:	2109883a 	add	r4,r4,r4
  209ca8:	1907883a 	add	r3,r3,r4
  209cac:	290b883a 	add	r5,r5,r4
  209cb0:	30000b26 	beq	r6,zero,209ce0 <memmove+0x150>
  209cb4:	198d883a 	add	r6,r3,r6
  209cb8:	29c00003 	ldbu	r7,0(r5)
  209cbc:	18c00044 	addi	r3,r3,1
  209cc0:	29400044 	addi	r5,r5,1
  209cc4:	19ffffc5 	stb	r7,-1(r3)
  209cc8:	19bffb1e 	bne	r3,r6,209cb8 <_gp+0xffdf80a4>
  209ccc:	f800283a 	ret
  209cd0:	1007883a 	mov	r3,r2
  209cd4:	003ff606 	br	209cb0 <_gp+0xffdf809c>
  209cd8:	1007883a 	mov	r3,r2
  209cdc:	003ff506 	br	209cb4 <_gp+0xffdf80a0>
  209ce0:	f800283a 	ret
  209ce4:	500d883a 	mov	r6,r10
  209ce8:	003ff106 	br	209cb0 <_gp+0xffdf809c>

00209cec <memset>:
  209cec:	20c000cc 	andi	r3,r4,3
  209cf0:	2005883a 	mov	r2,r4
  209cf4:	18004426 	beq	r3,zero,209e08 <memset+0x11c>
  209cf8:	31ffffc4 	addi	r7,r6,-1
  209cfc:	30004026 	beq	r6,zero,209e00 <memset+0x114>
  209d00:	2813883a 	mov	r9,r5
  209d04:	200d883a 	mov	r6,r4
  209d08:	2007883a 	mov	r3,r4
  209d0c:	00000406 	br	209d20 <memset+0x34>
  209d10:	3a3fffc4 	addi	r8,r7,-1
  209d14:	31800044 	addi	r6,r6,1
  209d18:	38003926 	beq	r7,zero,209e00 <memset+0x114>
  209d1c:	400f883a 	mov	r7,r8
  209d20:	18c00044 	addi	r3,r3,1
  209d24:	32400005 	stb	r9,0(r6)
  209d28:	1a0000cc 	andi	r8,r3,3
  209d2c:	403ff81e 	bne	r8,zero,209d10 <_gp+0xffdf80fc>
  209d30:	010000c4 	movi	r4,3
  209d34:	21c02d2e 	bgeu	r4,r7,209dec <memset+0x100>
  209d38:	29003fcc 	andi	r4,r5,255
  209d3c:	200c923a 	slli	r6,r4,8
  209d40:	3108b03a 	or	r4,r6,r4
  209d44:	200c943a 	slli	r6,r4,16
  209d48:	218cb03a 	or	r6,r4,r6
  209d4c:	010003c4 	movi	r4,15
  209d50:	21c0182e 	bgeu	r4,r7,209db4 <memset+0xc8>
  209d54:	3b3ffc04 	addi	r12,r7,-16
  209d58:	6018d13a 	srli	r12,r12,4
  209d5c:	1a000104 	addi	r8,r3,4
  209d60:	1ac00204 	addi	r11,r3,8
  209d64:	6008913a 	slli	r4,r12,4
  209d68:	1a800304 	addi	r10,r3,12
  209d6c:	1813883a 	mov	r9,r3
  209d70:	21000504 	addi	r4,r4,20
  209d74:	1909883a 	add	r4,r3,r4
  209d78:	49800015 	stw	r6,0(r9)
  209d7c:	41800015 	stw	r6,0(r8)
  209d80:	59800015 	stw	r6,0(r11)
  209d84:	51800015 	stw	r6,0(r10)
  209d88:	42000404 	addi	r8,r8,16
  209d8c:	4a400404 	addi	r9,r9,16
  209d90:	5ac00404 	addi	r11,r11,16
  209d94:	52800404 	addi	r10,r10,16
  209d98:	413ff71e 	bne	r8,r4,209d78 <_gp+0xffdf8164>
  209d9c:	63000044 	addi	r12,r12,1
  209da0:	6018913a 	slli	r12,r12,4
  209da4:	39c003cc 	andi	r7,r7,15
  209da8:	010000c4 	movi	r4,3
  209dac:	1b07883a 	add	r3,r3,r12
  209db0:	21c00e2e 	bgeu	r4,r7,209dec <memset+0x100>
  209db4:	1813883a 	mov	r9,r3
  209db8:	3811883a 	mov	r8,r7
  209dbc:	010000c4 	movi	r4,3
  209dc0:	49800015 	stw	r6,0(r9)
  209dc4:	423fff04 	addi	r8,r8,-4
  209dc8:	4a400104 	addi	r9,r9,4
  209dcc:	223ffc36 	bltu	r4,r8,209dc0 <_gp+0xffdf81ac>
  209dd0:	393fff04 	addi	r4,r7,-4
  209dd4:	2008d0ba 	srli	r4,r4,2
  209dd8:	39c000cc 	andi	r7,r7,3
  209ddc:	21000044 	addi	r4,r4,1
  209de0:	2109883a 	add	r4,r4,r4
  209de4:	2109883a 	add	r4,r4,r4
  209de8:	1907883a 	add	r3,r3,r4
  209dec:	38000526 	beq	r7,zero,209e04 <memset+0x118>
  209df0:	19cf883a 	add	r7,r3,r7
  209df4:	19400005 	stb	r5,0(r3)
  209df8:	18c00044 	addi	r3,r3,1
  209dfc:	38fffd1e 	bne	r7,r3,209df4 <_gp+0xffdf81e0>
  209e00:	f800283a 	ret
  209e04:	f800283a 	ret
  209e08:	2007883a 	mov	r3,r4
  209e0c:	300f883a 	mov	r7,r6
  209e10:	003fc706 	br	209d30 <_gp+0xffdf811c>

00209e14 <_Balloc>:
  209e14:	20801317 	ldw	r2,76(r4)
  209e18:	defffc04 	addi	sp,sp,-16
  209e1c:	dc400115 	stw	r17,4(sp)
  209e20:	dc000015 	stw	r16,0(sp)
  209e24:	dfc00315 	stw	ra,12(sp)
  209e28:	dc800215 	stw	r18,8(sp)
  209e2c:	2023883a 	mov	r17,r4
  209e30:	2821883a 	mov	r16,r5
  209e34:	10000f26 	beq	r2,zero,209e74 <_Balloc+0x60>
  209e38:	8407883a 	add	r3,r16,r16
  209e3c:	18c7883a 	add	r3,r3,r3
  209e40:	10c7883a 	add	r3,r2,r3
  209e44:	18800017 	ldw	r2,0(r3)
  209e48:	10001126 	beq	r2,zero,209e90 <_Balloc+0x7c>
  209e4c:	11000017 	ldw	r4,0(r2)
  209e50:	19000015 	stw	r4,0(r3)
  209e54:	10000415 	stw	zero,16(r2)
  209e58:	10000315 	stw	zero,12(r2)
  209e5c:	dfc00317 	ldw	ra,12(sp)
  209e60:	dc800217 	ldw	r18,8(sp)
  209e64:	dc400117 	ldw	r17,4(sp)
  209e68:	dc000017 	ldw	r16,0(sp)
  209e6c:	dec00404 	addi	sp,sp,16
  209e70:	f800283a 	ret
  209e74:	01800844 	movi	r6,33
  209e78:	01400104 	movi	r5,4
  209e7c:	020d17c0 	call	20d17c <_calloc_r>
  209e80:	88801315 	stw	r2,76(r17)
  209e84:	103fec1e 	bne	r2,zero,209e38 <_gp+0xffdf8224>
  209e88:	0005883a 	mov	r2,zero
  209e8c:	003ff306 	br	209e5c <_gp+0xffdf8248>
  209e90:	01400044 	movi	r5,1
  209e94:	2c24983a 	sll	r18,r5,r16
  209e98:	8809883a 	mov	r4,r17
  209e9c:	91800144 	addi	r6,r18,5
  209ea0:	318d883a 	add	r6,r6,r6
  209ea4:	318d883a 	add	r6,r6,r6
  209ea8:	020d17c0 	call	20d17c <_calloc_r>
  209eac:	103ff626 	beq	r2,zero,209e88 <_gp+0xffdf8274>
  209eb0:	14000115 	stw	r16,4(r2)
  209eb4:	14800215 	stw	r18,8(r2)
  209eb8:	003fe606 	br	209e54 <_gp+0xffdf8240>

00209ebc <_Bfree>:
  209ebc:	28000826 	beq	r5,zero,209ee0 <_Bfree+0x24>
  209ec0:	28c00117 	ldw	r3,4(r5)
  209ec4:	20801317 	ldw	r2,76(r4)
  209ec8:	18c7883a 	add	r3,r3,r3
  209ecc:	18c7883a 	add	r3,r3,r3
  209ed0:	10c5883a 	add	r2,r2,r3
  209ed4:	10c00017 	ldw	r3,0(r2)
  209ed8:	28c00015 	stw	r3,0(r5)
  209edc:	11400015 	stw	r5,0(r2)
  209ee0:	f800283a 	ret

00209ee4 <__multadd>:
  209ee4:	defff704 	addi	sp,sp,-36
  209ee8:	dc800215 	stw	r18,8(sp)
  209eec:	2c800417 	ldw	r18,16(r5)
  209ef0:	dd800615 	stw	r22,24(sp)
  209ef4:	dd400515 	stw	r21,20(sp)
  209ef8:	dd000415 	stw	r20,16(sp)
  209efc:	dcc00315 	stw	r19,12(sp)
  209f00:	dc400115 	stw	r17,4(sp)
  209f04:	dc000015 	stw	r16,0(sp)
  209f08:	dfc00815 	stw	ra,32(sp)
  209f0c:	ddc00715 	stw	r23,28(sp)
  209f10:	2827883a 	mov	r19,r5
  209f14:	2029883a 	mov	r20,r4
  209f18:	3023883a 	mov	r17,r6
  209f1c:	3821883a 	mov	r16,r7
  209f20:	2d400504 	addi	r21,r5,20
  209f24:	002d883a 	mov	r22,zero
  209f28:	adc00017 	ldw	r23,0(r21)
  209f2c:	880b883a 	mov	r5,r17
  209f30:	ad400104 	addi	r21,r21,4
  209f34:	b93fffcc 	andi	r4,r23,65535
  209f38:	02032780 	call	203278 <__mulsi3>
  209f3c:	b808d43a 	srli	r4,r23,16
  209f40:	880b883a 	mov	r5,r17
  209f44:	1421883a 	add	r16,r2,r16
  209f48:	02032780 	call	203278 <__mulsi3>
  209f4c:	800ed43a 	srli	r7,r16,16
  209f50:	80ffffcc 	andi	r3,r16,65535
  209f54:	b5800044 	addi	r22,r22,1
  209f58:	11c5883a 	add	r2,r2,r7
  209f5c:	100e943a 	slli	r7,r2,16
  209f60:	1020d43a 	srli	r16,r2,16
  209f64:	38c7883a 	add	r3,r7,r3
  209f68:	a8ffff15 	stw	r3,-4(r21)
  209f6c:	b4bfee16 	blt	r22,r18,209f28 <_gp+0xffdf8314>
  209f70:	80000926 	beq	r16,zero,209f98 <__multadd+0xb4>
  209f74:	98800217 	ldw	r2,8(r19)
  209f78:	9080130e 	bge	r18,r2,209fc8 <__multadd+0xe4>
  209f7c:	90800144 	addi	r2,r18,5
  209f80:	1085883a 	add	r2,r2,r2
  209f84:	1085883a 	add	r2,r2,r2
  209f88:	9885883a 	add	r2,r19,r2
  209f8c:	14000015 	stw	r16,0(r2)
  209f90:	94800044 	addi	r18,r18,1
  209f94:	9c800415 	stw	r18,16(r19)
  209f98:	9805883a 	mov	r2,r19
  209f9c:	dfc00817 	ldw	ra,32(sp)
  209fa0:	ddc00717 	ldw	r23,28(sp)
  209fa4:	dd800617 	ldw	r22,24(sp)
  209fa8:	dd400517 	ldw	r21,20(sp)
  209fac:	dd000417 	ldw	r20,16(sp)
  209fb0:	dcc00317 	ldw	r19,12(sp)
  209fb4:	dc800217 	ldw	r18,8(sp)
  209fb8:	dc400117 	ldw	r17,4(sp)
  209fbc:	dc000017 	ldw	r16,0(sp)
  209fc0:	dec00904 	addi	sp,sp,36
  209fc4:	f800283a 	ret
  209fc8:	99400117 	ldw	r5,4(r19)
  209fcc:	a009883a 	mov	r4,r20
  209fd0:	29400044 	addi	r5,r5,1
  209fd4:	0209e140 	call	209e14 <_Balloc>
  209fd8:	99800417 	ldw	r6,16(r19)
  209fdc:	99400304 	addi	r5,r19,12
  209fe0:	11000304 	addi	r4,r2,12
  209fe4:	31800084 	addi	r6,r6,2
  209fe8:	318d883a 	add	r6,r6,r6
  209fec:	318d883a 	add	r6,r6,r6
  209ff0:	1023883a 	mov	r17,r2
  209ff4:	0209a480 	call	209a48 <memcpy>
  209ff8:	98000a26 	beq	r19,zero,20a024 <__multadd+0x140>
  209ffc:	98c00117 	ldw	r3,4(r19)
  20a000:	a0801317 	ldw	r2,76(r20)
  20a004:	18c7883a 	add	r3,r3,r3
  20a008:	18c7883a 	add	r3,r3,r3
  20a00c:	10c5883a 	add	r2,r2,r3
  20a010:	10c00017 	ldw	r3,0(r2)
  20a014:	98c00015 	stw	r3,0(r19)
  20a018:	14c00015 	stw	r19,0(r2)
  20a01c:	8827883a 	mov	r19,r17
  20a020:	003fd606 	br	209f7c <_gp+0xffdf8368>
  20a024:	8827883a 	mov	r19,r17
  20a028:	003fd406 	br	209f7c <_gp+0xffdf8368>

0020a02c <__s2b>:
  20a02c:	defff904 	addi	sp,sp,-28
  20a030:	dc400115 	stw	r17,4(sp)
  20a034:	dc000015 	stw	r16,0(sp)
  20a038:	2023883a 	mov	r17,r4
  20a03c:	2821883a 	mov	r16,r5
  20a040:	39000204 	addi	r4,r7,8
  20a044:	01400244 	movi	r5,9
  20a048:	dcc00315 	stw	r19,12(sp)
  20a04c:	dc800215 	stw	r18,8(sp)
  20a050:	dfc00615 	stw	ra,24(sp)
  20a054:	dd400515 	stw	r21,20(sp)
  20a058:	dd000415 	stw	r20,16(sp)
  20a05c:	3825883a 	mov	r18,r7
  20a060:	3027883a 	mov	r19,r6
  20a064:	02030c40 	call	2030c4 <__divsi3>
  20a068:	00c00044 	movi	r3,1
  20a06c:	000b883a 	mov	r5,zero
  20a070:	1880030e 	bge	r3,r2,20a080 <__s2b+0x54>
  20a074:	18c7883a 	add	r3,r3,r3
  20a078:	29400044 	addi	r5,r5,1
  20a07c:	18bffd16 	blt	r3,r2,20a074 <_gp+0xffdf8460>
  20a080:	8809883a 	mov	r4,r17
  20a084:	0209e140 	call	209e14 <_Balloc>
  20a088:	d8c00717 	ldw	r3,28(sp)
  20a08c:	10c00515 	stw	r3,20(r2)
  20a090:	00c00044 	movi	r3,1
  20a094:	10c00415 	stw	r3,16(r2)
  20a098:	00c00244 	movi	r3,9
  20a09c:	1cc0210e 	bge	r3,r19,20a124 <__s2b+0xf8>
  20a0a0:	80eb883a 	add	r21,r16,r3
  20a0a4:	a829883a 	mov	r20,r21
  20a0a8:	84e1883a 	add	r16,r16,r19
  20a0ac:	a1c00007 	ldb	r7,0(r20)
  20a0b0:	01800284 	movi	r6,10
  20a0b4:	a5000044 	addi	r20,r20,1
  20a0b8:	100b883a 	mov	r5,r2
  20a0bc:	39fff404 	addi	r7,r7,-48
  20a0c0:	8809883a 	mov	r4,r17
  20a0c4:	0209ee40 	call	209ee4 <__multadd>
  20a0c8:	a43ff81e 	bne	r20,r16,20a0ac <_gp+0xffdf8498>
  20a0cc:	ace1883a 	add	r16,r21,r19
  20a0d0:	843ffe04 	addi	r16,r16,-8
  20a0d4:	9c800a0e 	bge	r19,r18,20a100 <__s2b+0xd4>
  20a0d8:	94e5c83a 	sub	r18,r18,r19
  20a0dc:	84a5883a 	add	r18,r16,r18
  20a0e0:	81c00007 	ldb	r7,0(r16)
  20a0e4:	01800284 	movi	r6,10
  20a0e8:	84000044 	addi	r16,r16,1
  20a0ec:	100b883a 	mov	r5,r2
  20a0f0:	39fff404 	addi	r7,r7,-48
  20a0f4:	8809883a 	mov	r4,r17
  20a0f8:	0209ee40 	call	209ee4 <__multadd>
  20a0fc:	84bff81e 	bne	r16,r18,20a0e0 <_gp+0xffdf84cc>
  20a100:	dfc00617 	ldw	ra,24(sp)
  20a104:	dd400517 	ldw	r21,20(sp)
  20a108:	dd000417 	ldw	r20,16(sp)
  20a10c:	dcc00317 	ldw	r19,12(sp)
  20a110:	dc800217 	ldw	r18,8(sp)
  20a114:	dc400117 	ldw	r17,4(sp)
  20a118:	dc000017 	ldw	r16,0(sp)
  20a11c:	dec00704 	addi	sp,sp,28
  20a120:	f800283a 	ret
  20a124:	84000284 	addi	r16,r16,10
  20a128:	1827883a 	mov	r19,r3
  20a12c:	003fe906 	br	20a0d4 <_gp+0xffdf84c0>

0020a130 <__hi0bits>:
  20a130:	20bfffec 	andhi	r2,r4,65535
  20a134:	1000141e 	bne	r2,zero,20a188 <__hi0bits+0x58>
  20a138:	2008943a 	slli	r4,r4,16
  20a13c:	00800404 	movi	r2,16
  20a140:	20ffc02c 	andhi	r3,r4,65280
  20a144:	1800021e 	bne	r3,zero,20a150 <__hi0bits+0x20>
  20a148:	2008923a 	slli	r4,r4,8
  20a14c:	10800204 	addi	r2,r2,8
  20a150:	20fc002c 	andhi	r3,r4,61440
  20a154:	1800021e 	bne	r3,zero,20a160 <__hi0bits+0x30>
  20a158:	2008913a 	slli	r4,r4,4
  20a15c:	10800104 	addi	r2,r2,4
  20a160:	20f0002c 	andhi	r3,r4,49152
  20a164:	1800031e 	bne	r3,zero,20a174 <__hi0bits+0x44>
  20a168:	2109883a 	add	r4,r4,r4
  20a16c:	10800084 	addi	r2,r2,2
  20a170:	2109883a 	add	r4,r4,r4
  20a174:	20000316 	blt	r4,zero,20a184 <__hi0bits+0x54>
  20a178:	2110002c 	andhi	r4,r4,16384
  20a17c:	2000041e 	bne	r4,zero,20a190 <__hi0bits+0x60>
  20a180:	00800804 	movi	r2,32
  20a184:	f800283a 	ret
  20a188:	0005883a 	mov	r2,zero
  20a18c:	003fec06 	br	20a140 <_gp+0xffdf852c>
  20a190:	10800044 	addi	r2,r2,1
  20a194:	f800283a 	ret

0020a198 <__lo0bits>:
  20a198:	20c00017 	ldw	r3,0(r4)
  20a19c:	188001cc 	andi	r2,r3,7
  20a1a0:	10000826 	beq	r2,zero,20a1c4 <__lo0bits+0x2c>
  20a1a4:	1880004c 	andi	r2,r3,1
  20a1a8:	1000211e 	bne	r2,zero,20a230 <__lo0bits+0x98>
  20a1ac:	1880008c 	andi	r2,r3,2
  20a1b0:	1000211e 	bne	r2,zero,20a238 <__lo0bits+0xa0>
  20a1b4:	1806d0ba 	srli	r3,r3,2
  20a1b8:	00800084 	movi	r2,2
  20a1bc:	20c00015 	stw	r3,0(r4)
  20a1c0:	f800283a 	ret
  20a1c4:	18bfffcc 	andi	r2,r3,65535
  20a1c8:	10001326 	beq	r2,zero,20a218 <__lo0bits+0x80>
  20a1cc:	0005883a 	mov	r2,zero
  20a1d0:	19403fcc 	andi	r5,r3,255
  20a1d4:	2800021e 	bne	r5,zero,20a1e0 <__lo0bits+0x48>
  20a1d8:	1806d23a 	srli	r3,r3,8
  20a1dc:	10800204 	addi	r2,r2,8
  20a1e0:	194003cc 	andi	r5,r3,15
  20a1e4:	2800021e 	bne	r5,zero,20a1f0 <__lo0bits+0x58>
  20a1e8:	1806d13a 	srli	r3,r3,4
  20a1ec:	10800104 	addi	r2,r2,4
  20a1f0:	194000cc 	andi	r5,r3,3
  20a1f4:	2800021e 	bne	r5,zero,20a200 <__lo0bits+0x68>
  20a1f8:	1806d0ba 	srli	r3,r3,2
  20a1fc:	10800084 	addi	r2,r2,2
  20a200:	1940004c 	andi	r5,r3,1
  20a204:	2800081e 	bne	r5,zero,20a228 <__lo0bits+0x90>
  20a208:	1806d07a 	srli	r3,r3,1
  20a20c:	1800051e 	bne	r3,zero,20a224 <__lo0bits+0x8c>
  20a210:	00800804 	movi	r2,32
  20a214:	f800283a 	ret
  20a218:	1806d43a 	srli	r3,r3,16
  20a21c:	00800404 	movi	r2,16
  20a220:	003feb06 	br	20a1d0 <_gp+0xffdf85bc>
  20a224:	10800044 	addi	r2,r2,1
  20a228:	20c00015 	stw	r3,0(r4)
  20a22c:	f800283a 	ret
  20a230:	0005883a 	mov	r2,zero
  20a234:	f800283a 	ret
  20a238:	1806d07a 	srli	r3,r3,1
  20a23c:	00800044 	movi	r2,1
  20a240:	20c00015 	stw	r3,0(r4)
  20a244:	f800283a 	ret

0020a248 <__i2b>:
  20a248:	defffd04 	addi	sp,sp,-12
  20a24c:	dc000015 	stw	r16,0(sp)
  20a250:	04000044 	movi	r16,1
  20a254:	dc400115 	stw	r17,4(sp)
  20a258:	2823883a 	mov	r17,r5
  20a25c:	800b883a 	mov	r5,r16
  20a260:	dfc00215 	stw	ra,8(sp)
  20a264:	0209e140 	call	209e14 <_Balloc>
  20a268:	14400515 	stw	r17,20(r2)
  20a26c:	14000415 	stw	r16,16(r2)
  20a270:	dfc00217 	ldw	ra,8(sp)
  20a274:	dc400117 	ldw	r17,4(sp)
  20a278:	dc000017 	ldw	r16,0(sp)
  20a27c:	dec00304 	addi	sp,sp,12
  20a280:	f800283a 	ret

0020a284 <__multiply>:
  20a284:	deffef04 	addi	sp,sp,-68
  20a288:	dc400815 	stw	r17,32(sp)
  20a28c:	dc000715 	stw	r16,28(sp)
  20a290:	34400417 	ldw	r17,16(r6)
  20a294:	2c000417 	ldw	r16,16(r5)
  20a298:	dd800d15 	stw	r22,52(sp)
  20a29c:	dc800915 	stw	r18,36(sp)
  20a2a0:	dfc01015 	stw	ra,64(sp)
  20a2a4:	df000f15 	stw	fp,60(sp)
  20a2a8:	ddc00e15 	stw	r23,56(sp)
  20a2ac:	dd400c15 	stw	r21,48(sp)
  20a2b0:	dd000b15 	stw	r20,44(sp)
  20a2b4:	dcc00a15 	stw	r19,40(sp)
  20a2b8:	2825883a 	mov	r18,r5
  20a2bc:	302d883a 	mov	r22,r6
  20a2c0:	8440050e 	bge	r16,r17,20a2d8 <__multiply+0x54>
  20a2c4:	8007883a 	mov	r3,r16
  20a2c8:	3025883a 	mov	r18,r6
  20a2cc:	8821883a 	mov	r16,r17
  20a2d0:	282d883a 	mov	r22,r5
  20a2d4:	1823883a 	mov	r17,r3
  20a2d8:	90800217 	ldw	r2,8(r18)
  20a2dc:	8447883a 	add	r3,r16,r17
  20a2e0:	d8c00215 	stw	r3,8(sp)
  20a2e4:	91400117 	ldw	r5,4(r18)
  20a2e8:	10c0010e 	bge	r2,r3,20a2f0 <__multiply+0x6c>
  20a2ec:	29400044 	addi	r5,r5,1
  20a2f0:	0209e140 	call	209e14 <_Balloc>
  20a2f4:	d8c00217 	ldw	r3,8(sp)
  20a2f8:	d8800615 	stw	r2,24(sp)
  20a2fc:	18eb883a 	add	r21,r3,r3
  20a300:	ad6b883a 	add	r21,r21,r21
  20a304:	10c00504 	addi	r3,r2,20
  20a308:	1d6b883a 	add	r21,r3,r21
  20a30c:	d8c00115 	stw	r3,4(sp)
  20a310:	dd400315 	stw	r21,12(sp)
  20a314:	1805883a 	mov	r2,r3
  20a318:	1d40042e 	bgeu	r3,r21,20a32c <__multiply+0xa8>
  20a31c:	d8c00317 	ldw	r3,12(sp)
  20a320:	10000015 	stw	zero,0(r2)
  20a324:	10800104 	addi	r2,r2,4
  20a328:	10fffc36 	bltu	r2,r3,20a31c <_gp+0xffdf8708>
  20a32c:	8c63883a 	add	r17,r17,r17
  20a330:	b5800504 	addi	r22,r22,20
  20a334:	8c63883a 	add	r17,r17,r17
  20a338:	94800504 	addi	r18,r18,20
  20a33c:	8421883a 	add	r16,r16,r16
  20a340:	b463883a 	add	r17,r22,r17
  20a344:	8421883a 	add	r16,r16,r16
  20a348:	dd800015 	stw	r22,0(sp)
  20a34c:	dc800415 	stw	r18,16(sp)
  20a350:	dc400515 	stw	r17,20(sp)
  20a354:	9429883a 	add	r20,r18,r16
  20a358:	b4404f2e 	bgeu	r22,r17,20a498 <__multiply+0x214>
  20a35c:	d8c00017 	ldw	r3,0(sp)
  20a360:	1c800017 	ldw	r18,0(r3)
  20a364:	947fffcc 	andi	r17,r18,65535
  20a368:	88001e26 	beq	r17,zero,20a3e4 <__multiply+0x160>
  20a36c:	dd800117 	ldw	r22,4(sp)
  20a370:	dd400417 	ldw	r21,16(sp)
  20a374:	0027883a 	mov	r19,zero
  20a378:	ac800017 	ldw	r18,0(r21)
  20a37c:	b4000017 	ldw	r16,0(r22)
  20a380:	880b883a 	mov	r5,r17
  20a384:	913fffcc 	andi	r4,r18,65535
  20a388:	02032780 	call	203278 <__mulsi3>
  20a38c:	9008d43a 	srli	r4,r18,16
  20a390:	84bfffcc 	andi	r18,r16,65535
  20a394:	1485883a 	add	r2,r2,r18
  20a398:	14e5883a 	add	r18,r2,r19
  20a39c:	8020d43a 	srli	r16,r16,16
  20a3a0:	9026d43a 	srli	r19,r18,16
  20a3a4:	880b883a 	mov	r5,r17
  20a3a8:	02032780 	call	203278 <__mulsi3>
  20a3ac:	1405883a 	add	r2,r2,r16
  20a3b0:	14e1883a 	add	r16,r2,r19
  20a3b4:	90ffffcc 	andi	r3,r18,65535
  20a3b8:	8024943a 	slli	r18,r16,16
  20a3bc:	ad400104 	addi	r21,r21,4
  20a3c0:	b005883a 	mov	r2,r22
  20a3c4:	90c6b03a 	or	r3,r18,r3
  20a3c8:	b0c00015 	stw	r3,0(r22)
  20a3cc:	8026d43a 	srli	r19,r16,16
  20a3d0:	b5800104 	addi	r22,r22,4
  20a3d4:	ad3fe836 	bltu	r21,r20,20a378 <_gp+0xffdf8764>
  20a3d8:	d8c00017 	ldw	r3,0(sp)
  20a3dc:	14c00115 	stw	r19,4(r2)
  20a3e0:	1c800017 	ldw	r18,0(r3)
  20a3e4:	9024d43a 	srli	r18,r18,16
  20a3e8:	90002226 	beq	r18,zero,20a474 <__multiply+0x1f0>
  20a3ec:	d8c00117 	ldw	r3,4(sp)
  20a3f0:	dd800417 	ldw	r22,16(sp)
  20a3f4:	002f883a 	mov	r23,zero
  20a3f8:	1f000017 	ldw	fp,0(r3)
  20a3fc:	1823883a 	mov	r17,r3
  20a400:	182b883a 	mov	r21,r3
  20a404:	e021883a 	mov	r16,fp
  20a408:	00000106 	br	20a410 <__multiply+0x18c>
  20a40c:	982b883a 	mov	r21,r19
  20a410:	b100000b 	ldhu	r4,0(r22)
  20a414:	8020d43a 	srli	r16,r16,16
  20a418:	900b883a 	mov	r5,r18
  20a41c:	02032780 	call	203278 <__mulsi3>
  20a420:	1405883a 	add	r2,r2,r16
  20a424:	15ef883a 	add	r23,r2,r23
  20a428:	b804943a 	slli	r2,r23,16
  20a42c:	e0ffffcc 	andi	r3,fp,65535
  20a430:	8c400104 	addi	r17,r17,4
  20a434:	10c6b03a 	or	r3,r2,r3
  20a438:	88ffff15 	stw	r3,-4(r17)
  20a43c:	b5800104 	addi	r22,r22,4
  20a440:	b13fff17 	ldw	r4,-4(r22)
  20a444:	acc00104 	addi	r19,r21,4
  20a448:	900b883a 	mov	r5,r18
  20a44c:	2008d43a 	srli	r4,r4,16
  20a450:	9c000017 	ldw	r16,0(r19)
  20a454:	02032780 	call	203278 <__mulsi3>
  20a458:	b806d43a 	srli	r3,r23,16
  20a45c:	813fffcc 	andi	r4,r16,65535
  20a460:	1105883a 	add	r2,r2,r4
  20a464:	10f9883a 	add	fp,r2,r3
  20a468:	e02ed43a 	srli	r23,fp,16
  20a46c:	b53fe736 	bltu	r22,r20,20a40c <_gp+0xffdf87f8>
  20a470:	af000115 	stw	fp,4(r21)
  20a474:	d8c00017 	ldw	r3,0(sp)
  20a478:	d9000517 	ldw	r4,20(sp)
  20a47c:	18c00104 	addi	r3,r3,4
  20a480:	d8c00015 	stw	r3,0(sp)
  20a484:	d8c00117 	ldw	r3,4(sp)
  20a488:	18c00104 	addi	r3,r3,4
  20a48c:	d8c00115 	stw	r3,4(sp)
  20a490:	d8c00017 	ldw	r3,0(sp)
  20a494:	193fb136 	bltu	r3,r4,20a35c <_gp+0xffdf8748>
  20a498:	d8c00217 	ldw	r3,8(sp)
  20a49c:	00c00c0e 	bge	zero,r3,20a4d0 <__multiply+0x24c>
  20a4a0:	d8c00317 	ldw	r3,12(sp)
  20a4a4:	18bfff17 	ldw	r2,-4(r3)
  20a4a8:	1d7fff04 	addi	r21,r3,-4
  20a4ac:	10000326 	beq	r2,zero,20a4bc <__multiply+0x238>
  20a4b0:	00000706 	br	20a4d0 <__multiply+0x24c>
  20a4b4:	a8800017 	ldw	r2,0(r21)
  20a4b8:	1000051e 	bne	r2,zero,20a4d0 <__multiply+0x24c>
  20a4bc:	d8c00217 	ldw	r3,8(sp)
  20a4c0:	ad7fff04 	addi	r21,r21,-4
  20a4c4:	18ffffc4 	addi	r3,r3,-1
  20a4c8:	d8c00215 	stw	r3,8(sp)
  20a4cc:	183ff91e 	bne	r3,zero,20a4b4 <_gp+0xffdf88a0>
  20a4d0:	d8c00617 	ldw	r3,24(sp)
  20a4d4:	d9000217 	ldw	r4,8(sp)
  20a4d8:	1805883a 	mov	r2,r3
  20a4dc:	19000415 	stw	r4,16(r3)
  20a4e0:	dfc01017 	ldw	ra,64(sp)
  20a4e4:	df000f17 	ldw	fp,60(sp)
  20a4e8:	ddc00e17 	ldw	r23,56(sp)
  20a4ec:	dd800d17 	ldw	r22,52(sp)
  20a4f0:	dd400c17 	ldw	r21,48(sp)
  20a4f4:	dd000b17 	ldw	r20,44(sp)
  20a4f8:	dcc00a17 	ldw	r19,40(sp)
  20a4fc:	dc800917 	ldw	r18,36(sp)
  20a500:	dc400817 	ldw	r17,32(sp)
  20a504:	dc000717 	ldw	r16,28(sp)
  20a508:	dec01104 	addi	sp,sp,68
  20a50c:	f800283a 	ret

0020a510 <__pow5mult>:
  20a510:	defffa04 	addi	sp,sp,-24
  20a514:	dcc00315 	stw	r19,12(sp)
  20a518:	dc000015 	stw	r16,0(sp)
  20a51c:	dfc00515 	stw	ra,20(sp)
  20a520:	dd000415 	stw	r20,16(sp)
  20a524:	dc800215 	stw	r18,8(sp)
  20a528:	dc400115 	stw	r17,4(sp)
  20a52c:	308000cc 	andi	r2,r6,3
  20a530:	3021883a 	mov	r16,r6
  20a534:	2027883a 	mov	r19,r4
  20a538:	10002f1e 	bne	r2,zero,20a5f8 <__pow5mult+0xe8>
  20a53c:	2825883a 	mov	r18,r5
  20a540:	8021d0ba 	srai	r16,r16,2
  20a544:	80001a26 	beq	r16,zero,20a5b0 <__pow5mult+0xa0>
  20a548:	9c401217 	ldw	r17,72(r19)
  20a54c:	8800061e 	bne	r17,zero,20a568 <__pow5mult+0x58>
  20a550:	00003406 	br	20a624 <__pow5mult+0x114>
  20a554:	8021d07a 	srai	r16,r16,1
  20a558:	80001526 	beq	r16,zero,20a5b0 <__pow5mult+0xa0>
  20a55c:	88800017 	ldw	r2,0(r17)
  20a560:	10001c26 	beq	r2,zero,20a5d4 <__pow5mult+0xc4>
  20a564:	1023883a 	mov	r17,r2
  20a568:	8080004c 	andi	r2,r16,1
  20a56c:	103ff926 	beq	r2,zero,20a554 <_gp+0xffdf8940>
  20a570:	880d883a 	mov	r6,r17
  20a574:	900b883a 	mov	r5,r18
  20a578:	9809883a 	mov	r4,r19
  20a57c:	020a2840 	call	20a284 <__multiply>
  20a580:	90001b26 	beq	r18,zero,20a5f0 <__pow5mult+0xe0>
  20a584:	91000117 	ldw	r4,4(r18)
  20a588:	98c01317 	ldw	r3,76(r19)
  20a58c:	8021d07a 	srai	r16,r16,1
  20a590:	2109883a 	add	r4,r4,r4
  20a594:	2109883a 	add	r4,r4,r4
  20a598:	1907883a 	add	r3,r3,r4
  20a59c:	19000017 	ldw	r4,0(r3)
  20a5a0:	91000015 	stw	r4,0(r18)
  20a5a4:	1c800015 	stw	r18,0(r3)
  20a5a8:	1025883a 	mov	r18,r2
  20a5ac:	803feb1e 	bne	r16,zero,20a55c <_gp+0xffdf8948>
  20a5b0:	9005883a 	mov	r2,r18
  20a5b4:	dfc00517 	ldw	ra,20(sp)
  20a5b8:	dd000417 	ldw	r20,16(sp)
  20a5bc:	dcc00317 	ldw	r19,12(sp)
  20a5c0:	dc800217 	ldw	r18,8(sp)
  20a5c4:	dc400117 	ldw	r17,4(sp)
  20a5c8:	dc000017 	ldw	r16,0(sp)
  20a5cc:	dec00604 	addi	sp,sp,24
  20a5d0:	f800283a 	ret
  20a5d4:	880d883a 	mov	r6,r17
  20a5d8:	880b883a 	mov	r5,r17
  20a5dc:	9809883a 	mov	r4,r19
  20a5e0:	020a2840 	call	20a284 <__multiply>
  20a5e4:	88800015 	stw	r2,0(r17)
  20a5e8:	10000015 	stw	zero,0(r2)
  20a5ec:	003fdd06 	br	20a564 <_gp+0xffdf8950>
  20a5f0:	1025883a 	mov	r18,r2
  20a5f4:	003fd706 	br	20a554 <_gp+0xffdf8940>
  20a5f8:	10bfffc4 	addi	r2,r2,-1
  20a5fc:	1085883a 	add	r2,r2,r2
  20a600:	00c00874 	movhi	r3,33
  20a604:	18db1b04 	addi	r3,r3,27756
  20a608:	1085883a 	add	r2,r2,r2
  20a60c:	1885883a 	add	r2,r3,r2
  20a610:	11800017 	ldw	r6,0(r2)
  20a614:	000f883a 	mov	r7,zero
  20a618:	0209ee40 	call	209ee4 <__multadd>
  20a61c:	1025883a 	mov	r18,r2
  20a620:	003fc706 	br	20a540 <_gp+0xffdf892c>
  20a624:	05000044 	movi	r20,1
  20a628:	a00b883a 	mov	r5,r20
  20a62c:	9809883a 	mov	r4,r19
  20a630:	0209e140 	call	209e14 <_Balloc>
  20a634:	1023883a 	mov	r17,r2
  20a638:	00809c44 	movi	r2,625
  20a63c:	88800515 	stw	r2,20(r17)
  20a640:	8d000415 	stw	r20,16(r17)
  20a644:	9c401215 	stw	r17,72(r19)
  20a648:	88000015 	stw	zero,0(r17)
  20a64c:	003fc606 	br	20a568 <_gp+0xffdf8954>

0020a650 <__lshift>:
  20a650:	defff904 	addi	sp,sp,-28
  20a654:	dd400515 	stw	r21,20(sp)
  20a658:	dcc00315 	stw	r19,12(sp)
  20a65c:	302bd17a 	srai	r21,r6,5
  20a660:	2cc00417 	ldw	r19,16(r5)
  20a664:	28800217 	ldw	r2,8(r5)
  20a668:	dd000415 	stw	r20,16(sp)
  20a66c:	ace7883a 	add	r19,r21,r19
  20a670:	dc800215 	stw	r18,8(sp)
  20a674:	dc400115 	stw	r17,4(sp)
  20a678:	dc000015 	stw	r16,0(sp)
  20a67c:	dfc00615 	stw	ra,24(sp)
  20a680:	9c000044 	addi	r16,r19,1
  20a684:	2823883a 	mov	r17,r5
  20a688:	3029883a 	mov	r20,r6
  20a68c:	2025883a 	mov	r18,r4
  20a690:	29400117 	ldw	r5,4(r5)
  20a694:	1400030e 	bge	r2,r16,20a6a4 <__lshift+0x54>
  20a698:	1085883a 	add	r2,r2,r2
  20a69c:	29400044 	addi	r5,r5,1
  20a6a0:	143ffd16 	blt	r2,r16,20a698 <_gp+0xffdf8a84>
  20a6a4:	9009883a 	mov	r4,r18
  20a6a8:	0209e140 	call	209e14 <_Balloc>
  20a6ac:	10c00504 	addi	r3,r2,20
  20a6b0:	0540070e 	bge	zero,r21,20a6d0 <__lshift+0x80>
  20a6b4:	ad6b883a 	add	r21,r21,r21
  20a6b8:	ad6b883a 	add	r21,r21,r21
  20a6bc:	1809883a 	mov	r4,r3
  20a6c0:	1d47883a 	add	r3,r3,r21
  20a6c4:	20000015 	stw	zero,0(r4)
  20a6c8:	21000104 	addi	r4,r4,4
  20a6cc:	193ffd1e 	bne	r3,r4,20a6c4 <_gp+0xffdf8ab0>
  20a6d0:	8a000417 	ldw	r8,16(r17)
  20a6d4:	89000504 	addi	r4,r17,20
  20a6d8:	a18007cc 	andi	r6,r20,31
  20a6dc:	4211883a 	add	r8,r8,r8
  20a6e0:	4211883a 	add	r8,r8,r8
  20a6e4:	2211883a 	add	r8,r4,r8
  20a6e8:	30002326 	beq	r6,zero,20a778 <__lshift+0x128>
  20a6ec:	02400804 	movi	r9,32
  20a6f0:	4993c83a 	sub	r9,r9,r6
  20a6f4:	000b883a 	mov	r5,zero
  20a6f8:	21c00017 	ldw	r7,0(r4)
  20a6fc:	1815883a 	mov	r10,r3
  20a700:	18c00104 	addi	r3,r3,4
  20a704:	398e983a 	sll	r7,r7,r6
  20a708:	21000104 	addi	r4,r4,4
  20a70c:	394ab03a 	or	r5,r7,r5
  20a710:	197fff15 	stw	r5,-4(r3)
  20a714:	217fff17 	ldw	r5,-4(r4)
  20a718:	2a4ad83a 	srl	r5,r5,r9
  20a71c:	223ff636 	bltu	r4,r8,20a6f8 <_gp+0xffdf8ae4>
  20a720:	51400115 	stw	r5,4(r10)
  20a724:	28001a1e 	bne	r5,zero,20a790 <__lshift+0x140>
  20a728:	843fffc4 	addi	r16,r16,-1
  20a72c:	14000415 	stw	r16,16(r2)
  20a730:	88000826 	beq	r17,zero,20a754 <__lshift+0x104>
  20a734:	89000117 	ldw	r4,4(r17)
  20a738:	90c01317 	ldw	r3,76(r18)
  20a73c:	2109883a 	add	r4,r4,r4
  20a740:	2109883a 	add	r4,r4,r4
  20a744:	1907883a 	add	r3,r3,r4
  20a748:	19000017 	ldw	r4,0(r3)
  20a74c:	89000015 	stw	r4,0(r17)
  20a750:	1c400015 	stw	r17,0(r3)
  20a754:	dfc00617 	ldw	ra,24(sp)
  20a758:	dd400517 	ldw	r21,20(sp)
  20a75c:	dd000417 	ldw	r20,16(sp)
  20a760:	dcc00317 	ldw	r19,12(sp)
  20a764:	dc800217 	ldw	r18,8(sp)
  20a768:	dc400117 	ldw	r17,4(sp)
  20a76c:	dc000017 	ldw	r16,0(sp)
  20a770:	dec00704 	addi	sp,sp,28
  20a774:	f800283a 	ret
  20a778:	21400017 	ldw	r5,0(r4)
  20a77c:	18c00104 	addi	r3,r3,4
  20a780:	21000104 	addi	r4,r4,4
  20a784:	197fff15 	stw	r5,-4(r3)
  20a788:	223ffb36 	bltu	r4,r8,20a778 <_gp+0xffdf8b64>
  20a78c:	003fe606 	br	20a728 <_gp+0xffdf8b14>
  20a790:	9c000084 	addi	r16,r19,2
  20a794:	003fe406 	br	20a728 <_gp+0xffdf8b14>

0020a798 <__mcmp>:
  20a798:	20800417 	ldw	r2,16(r4)
  20a79c:	28c00417 	ldw	r3,16(r5)
  20a7a0:	10c5c83a 	sub	r2,r2,r3
  20a7a4:	1000111e 	bne	r2,zero,20a7ec <__mcmp+0x54>
  20a7a8:	18c7883a 	add	r3,r3,r3
  20a7ac:	18c7883a 	add	r3,r3,r3
  20a7b0:	21000504 	addi	r4,r4,20
  20a7b4:	29400504 	addi	r5,r5,20
  20a7b8:	20c5883a 	add	r2,r4,r3
  20a7bc:	28cb883a 	add	r5,r5,r3
  20a7c0:	00000106 	br	20a7c8 <__mcmp+0x30>
  20a7c4:	20800a2e 	bgeu	r4,r2,20a7f0 <__mcmp+0x58>
  20a7c8:	10bfff04 	addi	r2,r2,-4
  20a7cc:	297fff04 	addi	r5,r5,-4
  20a7d0:	11800017 	ldw	r6,0(r2)
  20a7d4:	28c00017 	ldw	r3,0(r5)
  20a7d8:	30fffa26 	beq	r6,r3,20a7c4 <_gp+0xffdf8bb0>
  20a7dc:	30c00236 	bltu	r6,r3,20a7e8 <__mcmp+0x50>
  20a7e0:	00800044 	movi	r2,1
  20a7e4:	f800283a 	ret
  20a7e8:	00bfffc4 	movi	r2,-1
  20a7ec:	f800283a 	ret
  20a7f0:	0005883a 	mov	r2,zero
  20a7f4:	f800283a 	ret

0020a7f8 <__mdiff>:
  20a7f8:	28c00417 	ldw	r3,16(r5)
  20a7fc:	30800417 	ldw	r2,16(r6)
  20a800:	defffa04 	addi	sp,sp,-24
  20a804:	dcc00315 	stw	r19,12(sp)
  20a808:	dc800215 	stw	r18,8(sp)
  20a80c:	dfc00515 	stw	ra,20(sp)
  20a810:	dd000415 	stw	r20,16(sp)
  20a814:	dc400115 	stw	r17,4(sp)
  20a818:	dc000015 	stw	r16,0(sp)
  20a81c:	1887c83a 	sub	r3,r3,r2
  20a820:	2825883a 	mov	r18,r5
  20a824:	3027883a 	mov	r19,r6
  20a828:	1800141e 	bne	r3,zero,20a87c <__mdiff+0x84>
  20a82c:	1085883a 	add	r2,r2,r2
  20a830:	1085883a 	add	r2,r2,r2
  20a834:	2a000504 	addi	r8,r5,20
  20a838:	34000504 	addi	r16,r6,20
  20a83c:	4087883a 	add	r3,r8,r2
  20a840:	8085883a 	add	r2,r16,r2
  20a844:	00000106 	br	20a84c <__mdiff+0x54>
  20a848:	40c0592e 	bgeu	r8,r3,20a9b0 <__mdiff+0x1b8>
  20a84c:	18ffff04 	addi	r3,r3,-4
  20a850:	10bfff04 	addi	r2,r2,-4
  20a854:	19c00017 	ldw	r7,0(r3)
  20a858:	11400017 	ldw	r5,0(r2)
  20a85c:	397ffa26 	beq	r7,r5,20a848 <_gp+0xffdf8c34>
  20a860:	3940592e 	bgeu	r7,r5,20a9c8 <__mdiff+0x1d0>
  20a864:	9005883a 	mov	r2,r18
  20a868:	4023883a 	mov	r17,r8
  20a86c:	9825883a 	mov	r18,r19
  20a870:	05000044 	movi	r20,1
  20a874:	1027883a 	mov	r19,r2
  20a878:	00000406 	br	20a88c <__mdiff+0x94>
  20a87c:	18005616 	blt	r3,zero,20a9d8 <__mdiff+0x1e0>
  20a880:	34400504 	addi	r17,r6,20
  20a884:	2c000504 	addi	r16,r5,20
  20a888:	0029883a 	mov	r20,zero
  20a88c:	91400117 	ldw	r5,4(r18)
  20a890:	0209e140 	call	209e14 <_Balloc>
  20a894:	92400417 	ldw	r9,16(r18)
  20a898:	9b000417 	ldw	r12,16(r19)
  20a89c:	12c00504 	addi	r11,r2,20
  20a8a0:	4a51883a 	add	r8,r9,r9
  20a8a4:	6319883a 	add	r12,r12,r12
  20a8a8:	4211883a 	add	r8,r8,r8
  20a8ac:	6319883a 	add	r12,r12,r12
  20a8b0:	15000315 	stw	r20,12(r2)
  20a8b4:	8211883a 	add	r8,r16,r8
  20a8b8:	8b19883a 	add	r12,r17,r12
  20a8bc:	0007883a 	mov	r3,zero
  20a8c0:	81400017 	ldw	r5,0(r16)
  20a8c4:	89c00017 	ldw	r7,0(r17)
  20a8c8:	59800104 	addi	r6,r11,4
  20a8cc:	293fffcc 	andi	r4,r5,65535
  20a8d0:	20c7883a 	add	r3,r4,r3
  20a8d4:	393fffcc 	andi	r4,r7,65535
  20a8d8:	1909c83a 	sub	r4,r3,r4
  20a8dc:	280ad43a 	srli	r5,r5,16
  20a8e0:	380ed43a 	srli	r7,r7,16
  20a8e4:	2007d43a 	srai	r3,r4,16
  20a8e8:	213fffcc 	andi	r4,r4,65535
  20a8ec:	29cbc83a 	sub	r5,r5,r7
  20a8f0:	28c7883a 	add	r3,r5,r3
  20a8f4:	180a943a 	slli	r5,r3,16
  20a8f8:	8c400104 	addi	r17,r17,4
  20a8fc:	84000104 	addi	r16,r16,4
  20a900:	2908b03a 	or	r4,r5,r4
  20a904:	59000015 	stw	r4,0(r11)
  20a908:	1807d43a 	srai	r3,r3,16
  20a90c:	3015883a 	mov	r10,r6
  20a910:	3017883a 	mov	r11,r6
  20a914:	8b3fea36 	bltu	r17,r12,20a8c0 <_gp+0xffdf8cac>
  20a918:	8200162e 	bgeu	r16,r8,20a974 <__mdiff+0x17c>
  20a91c:	8017883a 	mov	r11,r16
  20a920:	59400017 	ldw	r5,0(r11)
  20a924:	31800104 	addi	r6,r6,4
  20a928:	5ac00104 	addi	r11,r11,4
  20a92c:	293fffcc 	andi	r4,r5,65535
  20a930:	20c7883a 	add	r3,r4,r3
  20a934:	280ed43a 	srli	r7,r5,16
  20a938:	180bd43a 	srai	r5,r3,16
  20a93c:	193fffcc 	andi	r4,r3,65535
  20a940:	3947883a 	add	r3,r7,r5
  20a944:	180a943a 	slli	r5,r3,16
  20a948:	1807d43a 	srai	r3,r3,16
  20a94c:	2908b03a 	or	r4,r5,r4
  20a950:	313fff15 	stw	r4,-4(r6)
  20a954:	5a3ff236 	bltu	r11,r8,20a920 <_gp+0xffdf8d0c>
  20a958:	0406303a 	nor	r3,zero,r16
  20a95c:	1a07883a 	add	r3,r3,r8
  20a960:	1806d0ba 	srli	r3,r3,2
  20a964:	18c00044 	addi	r3,r3,1
  20a968:	18c7883a 	add	r3,r3,r3
  20a96c:	18c7883a 	add	r3,r3,r3
  20a970:	50d5883a 	add	r10,r10,r3
  20a974:	50ffff04 	addi	r3,r10,-4
  20a978:	2000041e 	bne	r4,zero,20a98c <__mdiff+0x194>
  20a97c:	18ffff04 	addi	r3,r3,-4
  20a980:	19000017 	ldw	r4,0(r3)
  20a984:	4a7fffc4 	addi	r9,r9,-1
  20a988:	203ffc26 	beq	r4,zero,20a97c <_gp+0xffdf8d68>
  20a98c:	12400415 	stw	r9,16(r2)
  20a990:	dfc00517 	ldw	ra,20(sp)
  20a994:	dd000417 	ldw	r20,16(sp)
  20a998:	dcc00317 	ldw	r19,12(sp)
  20a99c:	dc800217 	ldw	r18,8(sp)
  20a9a0:	dc400117 	ldw	r17,4(sp)
  20a9a4:	dc000017 	ldw	r16,0(sp)
  20a9a8:	dec00604 	addi	sp,sp,24
  20a9ac:	f800283a 	ret
  20a9b0:	000b883a 	mov	r5,zero
  20a9b4:	0209e140 	call	209e14 <_Balloc>
  20a9b8:	00c00044 	movi	r3,1
  20a9bc:	10c00415 	stw	r3,16(r2)
  20a9c0:	10000515 	stw	zero,20(r2)
  20a9c4:	003ff206 	br	20a990 <_gp+0xffdf8d7c>
  20a9c8:	8023883a 	mov	r17,r16
  20a9cc:	0029883a 	mov	r20,zero
  20a9d0:	4021883a 	mov	r16,r8
  20a9d4:	003fad06 	br	20a88c <_gp+0xffdf8c78>
  20a9d8:	9005883a 	mov	r2,r18
  20a9dc:	94400504 	addi	r17,r18,20
  20a9e0:	9c000504 	addi	r16,r19,20
  20a9e4:	9825883a 	mov	r18,r19
  20a9e8:	05000044 	movi	r20,1
  20a9ec:	1027883a 	mov	r19,r2
  20a9f0:	003fa606 	br	20a88c <_gp+0xffdf8c78>

0020a9f4 <__ulp>:
  20a9f4:	295ffc2c 	andhi	r5,r5,32752
  20a9f8:	00bf3034 	movhi	r2,64704
  20a9fc:	2887883a 	add	r3,r5,r2
  20aa00:	00c0020e 	bge	zero,r3,20aa0c <__ulp+0x18>
  20aa04:	0005883a 	mov	r2,zero
  20aa08:	f800283a 	ret
  20aa0c:	00c7c83a 	sub	r3,zero,r3
  20aa10:	1807d53a 	srai	r3,r3,20
  20aa14:	008004c4 	movi	r2,19
  20aa18:	10c00b0e 	bge	r2,r3,20aa48 <__ulp+0x54>
  20aa1c:	18bffb04 	addi	r2,r3,-20
  20aa20:	01000784 	movi	r4,30
  20aa24:	0007883a 	mov	r3,zero
  20aa28:	20800516 	blt	r4,r2,20aa40 <__ulp+0x4c>
  20aa2c:	010007c4 	movi	r4,31
  20aa30:	2089c83a 	sub	r4,r4,r2
  20aa34:	00800044 	movi	r2,1
  20aa38:	1104983a 	sll	r2,r2,r4
  20aa3c:	f800283a 	ret
  20aa40:	00800044 	movi	r2,1
  20aa44:	f800283a 	ret
  20aa48:	01400234 	movhi	r5,8
  20aa4c:	28c7d83a 	sra	r3,r5,r3
  20aa50:	0005883a 	mov	r2,zero
  20aa54:	f800283a 	ret

0020aa58 <__b2d>:
  20aa58:	defffa04 	addi	sp,sp,-24
  20aa5c:	dc000015 	stw	r16,0(sp)
  20aa60:	24000417 	ldw	r16,16(r4)
  20aa64:	dc400115 	stw	r17,4(sp)
  20aa68:	24400504 	addi	r17,r4,20
  20aa6c:	8421883a 	add	r16,r16,r16
  20aa70:	8421883a 	add	r16,r16,r16
  20aa74:	8c21883a 	add	r16,r17,r16
  20aa78:	dc800215 	stw	r18,8(sp)
  20aa7c:	84bfff17 	ldw	r18,-4(r16)
  20aa80:	dd000415 	stw	r20,16(sp)
  20aa84:	dcc00315 	stw	r19,12(sp)
  20aa88:	9009883a 	mov	r4,r18
  20aa8c:	2829883a 	mov	r20,r5
  20aa90:	dfc00515 	stw	ra,20(sp)
  20aa94:	020a1300 	call	20a130 <__hi0bits>
  20aa98:	00c00804 	movi	r3,32
  20aa9c:	1889c83a 	sub	r4,r3,r2
  20aaa0:	a1000015 	stw	r4,0(r20)
  20aaa4:	01000284 	movi	r4,10
  20aaa8:	84ffff04 	addi	r19,r16,-4
  20aaac:	20801216 	blt	r4,r2,20aaf8 <__b2d+0xa0>
  20aab0:	018002c4 	movi	r6,11
  20aab4:	308dc83a 	sub	r6,r6,r2
  20aab8:	9186d83a 	srl	r3,r18,r6
  20aabc:	18cffc34 	orhi	r3,r3,16368
  20aac0:	8cc0212e 	bgeu	r17,r19,20ab48 <__b2d+0xf0>
  20aac4:	813ffe17 	ldw	r4,-8(r16)
  20aac8:	218cd83a 	srl	r6,r4,r6
  20aacc:	10800544 	addi	r2,r2,21
  20aad0:	9084983a 	sll	r2,r18,r2
  20aad4:	1184b03a 	or	r2,r2,r6
  20aad8:	dfc00517 	ldw	ra,20(sp)
  20aadc:	dd000417 	ldw	r20,16(sp)
  20aae0:	dcc00317 	ldw	r19,12(sp)
  20aae4:	dc800217 	ldw	r18,8(sp)
  20aae8:	dc400117 	ldw	r17,4(sp)
  20aaec:	dc000017 	ldw	r16,0(sp)
  20aaf0:	dec00604 	addi	sp,sp,24
  20aaf4:	f800283a 	ret
  20aaf8:	8cc00f2e 	bgeu	r17,r19,20ab38 <__b2d+0xe0>
  20aafc:	117ffd44 	addi	r5,r2,-11
  20ab00:	80bffe17 	ldw	r2,-8(r16)
  20ab04:	28000e26 	beq	r5,zero,20ab40 <__b2d+0xe8>
  20ab08:	1949c83a 	sub	r4,r3,r5
  20ab0c:	9164983a 	sll	r18,r18,r5
  20ab10:	1106d83a 	srl	r3,r2,r4
  20ab14:	81bffe04 	addi	r6,r16,-8
  20ab18:	948ffc34 	orhi	r18,r18,16368
  20ab1c:	90c6b03a 	or	r3,r18,r3
  20ab20:	89800e2e 	bgeu	r17,r6,20ab5c <__b2d+0x104>
  20ab24:	81bffd17 	ldw	r6,-12(r16)
  20ab28:	1144983a 	sll	r2,r2,r5
  20ab2c:	310ad83a 	srl	r5,r6,r4
  20ab30:	2884b03a 	or	r2,r5,r2
  20ab34:	003fe806 	br	20aad8 <_gp+0xffdf8ec4>
  20ab38:	10bffd44 	addi	r2,r2,-11
  20ab3c:	1000041e 	bne	r2,zero,20ab50 <__b2d+0xf8>
  20ab40:	90cffc34 	orhi	r3,r18,16368
  20ab44:	003fe406 	br	20aad8 <_gp+0xffdf8ec4>
  20ab48:	000d883a 	mov	r6,zero
  20ab4c:	003fdf06 	br	20aacc <_gp+0xffdf8eb8>
  20ab50:	90a4983a 	sll	r18,r18,r2
  20ab54:	0005883a 	mov	r2,zero
  20ab58:	003ff906 	br	20ab40 <_gp+0xffdf8f2c>
  20ab5c:	1144983a 	sll	r2,r2,r5
  20ab60:	003fdd06 	br	20aad8 <_gp+0xffdf8ec4>

0020ab64 <__d2b>:
  20ab64:	defff804 	addi	sp,sp,-32
  20ab68:	dc000215 	stw	r16,8(sp)
  20ab6c:	3021883a 	mov	r16,r6
  20ab70:	dc400315 	stw	r17,12(sp)
  20ab74:	8022907a 	slli	r17,r16,1
  20ab78:	dd000615 	stw	r20,24(sp)
  20ab7c:	2829883a 	mov	r20,r5
  20ab80:	01400044 	movi	r5,1
  20ab84:	dcc00515 	stw	r19,20(sp)
  20ab88:	dc800415 	stw	r18,16(sp)
  20ab8c:	dfc00715 	stw	ra,28(sp)
  20ab90:	3825883a 	mov	r18,r7
  20ab94:	8822d57a 	srli	r17,r17,21
  20ab98:	0209e140 	call	209e14 <_Balloc>
  20ab9c:	1027883a 	mov	r19,r2
  20aba0:	00800434 	movhi	r2,16
  20aba4:	10bfffc4 	addi	r2,r2,-1
  20aba8:	808c703a 	and	r6,r16,r2
  20abac:	88000126 	beq	r17,zero,20abb4 <__d2b+0x50>
  20abb0:	31800434 	orhi	r6,r6,16
  20abb4:	d9800015 	stw	r6,0(sp)
  20abb8:	a0002426 	beq	r20,zero,20ac4c <__d2b+0xe8>
  20abbc:	d9000104 	addi	r4,sp,4
  20abc0:	dd000115 	stw	r20,4(sp)
  20abc4:	020a1980 	call	20a198 <__lo0bits>
  20abc8:	d8c00017 	ldw	r3,0(sp)
  20abcc:	10002f1e 	bne	r2,zero,20ac8c <__d2b+0x128>
  20abd0:	d9000117 	ldw	r4,4(sp)
  20abd4:	99000515 	stw	r4,20(r19)
  20abd8:	1821003a 	cmpeq	r16,r3,zero
  20abdc:	01000084 	movi	r4,2
  20abe0:	2421c83a 	sub	r16,r4,r16
  20abe4:	98c00615 	stw	r3,24(r19)
  20abe8:	9c000415 	stw	r16,16(r19)
  20abec:	88001f1e 	bne	r17,zero,20ac6c <__d2b+0x108>
  20abf0:	10bef384 	addi	r2,r2,-1074
  20abf4:	90800015 	stw	r2,0(r18)
  20abf8:	00900034 	movhi	r2,16384
  20abfc:	10bfffc4 	addi	r2,r2,-1
  20ac00:	8085883a 	add	r2,r16,r2
  20ac04:	1085883a 	add	r2,r2,r2
  20ac08:	1085883a 	add	r2,r2,r2
  20ac0c:	9885883a 	add	r2,r19,r2
  20ac10:	11000517 	ldw	r4,20(r2)
  20ac14:	8020917a 	slli	r16,r16,5
  20ac18:	020a1300 	call	20a130 <__hi0bits>
  20ac1c:	d8c00817 	ldw	r3,32(sp)
  20ac20:	8085c83a 	sub	r2,r16,r2
  20ac24:	18800015 	stw	r2,0(r3)
  20ac28:	9805883a 	mov	r2,r19
  20ac2c:	dfc00717 	ldw	ra,28(sp)
  20ac30:	dd000617 	ldw	r20,24(sp)
  20ac34:	dcc00517 	ldw	r19,20(sp)
  20ac38:	dc800417 	ldw	r18,16(sp)
  20ac3c:	dc400317 	ldw	r17,12(sp)
  20ac40:	dc000217 	ldw	r16,8(sp)
  20ac44:	dec00804 	addi	sp,sp,32
  20ac48:	f800283a 	ret
  20ac4c:	d809883a 	mov	r4,sp
  20ac50:	020a1980 	call	20a198 <__lo0bits>
  20ac54:	d8c00017 	ldw	r3,0(sp)
  20ac58:	04000044 	movi	r16,1
  20ac5c:	9c000415 	stw	r16,16(r19)
  20ac60:	98c00515 	stw	r3,20(r19)
  20ac64:	10800804 	addi	r2,r2,32
  20ac68:	883fe126 	beq	r17,zero,20abf0 <_gp+0xffdf8fdc>
  20ac6c:	00c00d44 	movi	r3,53
  20ac70:	8c7ef344 	addi	r17,r17,-1075
  20ac74:	88a3883a 	add	r17,r17,r2
  20ac78:	1885c83a 	sub	r2,r3,r2
  20ac7c:	d8c00817 	ldw	r3,32(sp)
  20ac80:	94400015 	stw	r17,0(r18)
  20ac84:	18800015 	stw	r2,0(r3)
  20ac88:	003fe706 	br	20ac28 <_gp+0xffdf9014>
  20ac8c:	01000804 	movi	r4,32
  20ac90:	2089c83a 	sub	r4,r4,r2
  20ac94:	1908983a 	sll	r4,r3,r4
  20ac98:	d9400117 	ldw	r5,4(sp)
  20ac9c:	1886d83a 	srl	r3,r3,r2
  20aca0:	2148b03a 	or	r4,r4,r5
  20aca4:	99000515 	stw	r4,20(r19)
  20aca8:	d8c00015 	stw	r3,0(sp)
  20acac:	003fca06 	br	20abd8 <_gp+0xffdf8fc4>

0020acb0 <__ratio>:
  20acb0:	defff904 	addi	sp,sp,-28
  20acb4:	dc400315 	stw	r17,12(sp)
  20acb8:	2823883a 	mov	r17,r5
  20acbc:	d9400104 	addi	r5,sp,4
  20acc0:	dfc00615 	stw	ra,24(sp)
  20acc4:	dcc00515 	stw	r19,20(sp)
  20acc8:	dc800415 	stw	r18,16(sp)
  20accc:	2027883a 	mov	r19,r4
  20acd0:	dc000215 	stw	r16,8(sp)
  20acd4:	020aa580 	call	20aa58 <__b2d>
  20acd8:	d80b883a 	mov	r5,sp
  20acdc:	8809883a 	mov	r4,r17
  20ace0:	1025883a 	mov	r18,r2
  20ace4:	1821883a 	mov	r16,r3
  20ace8:	020aa580 	call	20aa58 <__b2d>
  20acec:	8a000417 	ldw	r8,16(r17)
  20acf0:	99000417 	ldw	r4,16(r19)
  20acf4:	d9400117 	ldw	r5,4(sp)
  20acf8:	2209c83a 	sub	r4,r4,r8
  20acfc:	2010917a 	slli	r8,r4,5
  20ad00:	d9000017 	ldw	r4,0(sp)
  20ad04:	2909c83a 	sub	r4,r5,r4
  20ad08:	4109883a 	add	r4,r8,r4
  20ad0c:	01000e0e 	bge	zero,r4,20ad48 <__ratio+0x98>
  20ad10:	2008953a 	slli	r4,r4,20
  20ad14:	2421883a 	add	r16,r4,r16
  20ad18:	100d883a 	mov	r6,r2
  20ad1c:	180f883a 	mov	r7,r3
  20ad20:	9009883a 	mov	r4,r18
  20ad24:	800b883a 	mov	r5,r16
  20ad28:	020ed280 	call	20ed28 <__divdf3>
  20ad2c:	dfc00617 	ldw	ra,24(sp)
  20ad30:	dcc00517 	ldw	r19,20(sp)
  20ad34:	dc800417 	ldw	r18,16(sp)
  20ad38:	dc400317 	ldw	r17,12(sp)
  20ad3c:	dc000217 	ldw	r16,8(sp)
  20ad40:	dec00704 	addi	sp,sp,28
  20ad44:	f800283a 	ret
  20ad48:	2008953a 	slli	r4,r4,20
  20ad4c:	1907c83a 	sub	r3,r3,r4
  20ad50:	003ff106 	br	20ad18 <_gp+0xffdf9104>

0020ad54 <_mprec_log10>:
  20ad54:	defffe04 	addi	sp,sp,-8
  20ad58:	dc000015 	stw	r16,0(sp)
  20ad5c:	dfc00115 	stw	ra,4(sp)
  20ad60:	008005c4 	movi	r2,23
  20ad64:	2021883a 	mov	r16,r4
  20ad68:	11000d0e 	bge	r2,r4,20ada0 <_mprec_log10+0x4c>
  20ad6c:	0005883a 	mov	r2,zero
  20ad70:	00cffc34 	movhi	r3,16368
  20ad74:	843fffc4 	addi	r16,r16,-1
  20ad78:	000d883a 	mov	r6,zero
  20ad7c:	01d00934 	movhi	r7,16420
  20ad80:	1009883a 	mov	r4,r2
  20ad84:	180b883a 	mov	r5,r3
  20ad88:	020f9500 	call	20f950 <__muldf3>
  20ad8c:	803ff91e 	bne	r16,zero,20ad74 <_gp+0xffdf9160>
  20ad90:	dfc00117 	ldw	ra,4(sp)
  20ad94:	dc000017 	ldw	r16,0(sp)
  20ad98:	dec00204 	addi	sp,sp,8
  20ad9c:	f800283a 	ret
  20ada0:	202090fa 	slli	r16,r4,3
  20ada4:	00800874 	movhi	r2,33
  20ada8:	109b3204 	addi	r2,r2,27848
  20adac:	1421883a 	add	r16,r2,r16
  20adb0:	80800017 	ldw	r2,0(r16)
  20adb4:	80c00117 	ldw	r3,4(r16)
  20adb8:	dfc00117 	ldw	ra,4(sp)
  20adbc:	dc000017 	ldw	r16,0(sp)
  20adc0:	dec00204 	addi	sp,sp,8
  20adc4:	f800283a 	ret

0020adc8 <__copybits>:
  20adc8:	297fffc4 	addi	r5,r5,-1
  20adcc:	280fd17a 	srai	r7,r5,5
  20add0:	30c00417 	ldw	r3,16(r6)
  20add4:	30800504 	addi	r2,r6,20
  20add8:	39c00044 	addi	r7,r7,1
  20addc:	18c7883a 	add	r3,r3,r3
  20ade0:	39cf883a 	add	r7,r7,r7
  20ade4:	18c7883a 	add	r3,r3,r3
  20ade8:	39cf883a 	add	r7,r7,r7
  20adec:	10c7883a 	add	r3,r2,r3
  20adf0:	21cf883a 	add	r7,r4,r7
  20adf4:	10c00d2e 	bgeu	r2,r3,20ae2c <__copybits+0x64>
  20adf8:	200b883a 	mov	r5,r4
  20adfc:	12000017 	ldw	r8,0(r2)
  20ae00:	29400104 	addi	r5,r5,4
  20ae04:	10800104 	addi	r2,r2,4
  20ae08:	2a3fff15 	stw	r8,-4(r5)
  20ae0c:	10fffb36 	bltu	r2,r3,20adfc <_gp+0xffdf91e8>
  20ae10:	1985c83a 	sub	r2,r3,r6
  20ae14:	10bffac4 	addi	r2,r2,-21
  20ae18:	1004d0ba 	srli	r2,r2,2
  20ae1c:	10800044 	addi	r2,r2,1
  20ae20:	1085883a 	add	r2,r2,r2
  20ae24:	1085883a 	add	r2,r2,r2
  20ae28:	2089883a 	add	r4,r4,r2
  20ae2c:	21c0032e 	bgeu	r4,r7,20ae3c <__copybits+0x74>
  20ae30:	20000015 	stw	zero,0(r4)
  20ae34:	21000104 	addi	r4,r4,4
  20ae38:	21fffd36 	bltu	r4,r7,20ae30 <_gp+0xffdf921c>
  20ae3c:	f800283a 	ret

0020ae40 <__any_on>:
  20ae40:	20c00417 	ldw	r3,16(r4)
  20ae44:	2805d17a 	srai	r2,r5,5
  20ae48:	21000504 	addi	r4,r4,20
  20ae4c:	18800d0e 	bge	r3,r2,20ae84 <__any_on+0x44>
  20ae50:	18c7883a 	add	r3,r3,r3
  20ae54:	18c7883a 	add	r3,r3,r3
  20ae58:	20c7883a 	add	r3,r4,r3
  20ae5c:	20c0192e 	bgeu	r4,r3,20aec4 <__any_on+0x84>
  20ae60:	18bfff17 	ldw	r2,-4(r3)
  20ae64:	18ffff04 	addi	r3,r3,-4
  20ae68:	1000041e 	bne	r2,zero,20ae7c <__any_on+0x3c>
  20ae6c:	20c0142e 	bgeu	r4,r3,20aec0 <__any_on+0x80>
  20ae70:	18ffff04 	addi	r3,r3,-4
  20ae74:	19400017 	ldw	r5,0(r3)
  20ae78:	283ffc26 	beq	r5,zero,20ae6c <_gp+0xffdf9258>
  20ae7c:	00800044 	movi	r2,1
  20ae80:	f800283a 	ret
  20ae84:	10c00a0e 	bge	r2,r3,20aeb0 <__any_on+0x70>
  20ae88:	1085883a 	add	r2,r2,r2
  20ae8c:	1085883a 	add	r2,r2,r2
  20ae90:	294007cc 	andi	r5,r5,31
  20ae94:	2087883a 	add	r3,r4,r2
  20ae98:	283ff026 	beq	r5,zero,20ae5c <_gp+0xffdf9248>
  20ae9c:	19800017 	ldw	r6,0(r3)
  20aea0:	3144d83a 	srl	r2,r6,r5
  20aea4:	114a983a 	sll	r5,r2,r5
  20aea8:	317ff41e 	bne	r6,r5,20ae7c <_gp+0xffdf9268>
  20aeac:	003feb06 	br	20ae5c <_gp+0xffdf9248>
  20aeb0:	1085883a 	add	r2,r2,r2
  20aeb4:	1085883a 	add	r2,r2,r2
  20aeb8:	2087883a 	add	r3,r4,r2
  20aebc:	003fe706 	br	20ae5c <_gp+0xffdf9248>
  20aec0:	f800283a 	ret
  20aec4:	0005883a 	mov	r2,zero
  20aec8:	f800283a 	ret

0020aecc <_putc_r>:
  20aecc:	defffc04 	addi	sp,sp,-16
  20aed0:	dc000215 	stw	r16,8(sp)
  20aed4:	dfc00315 	stw	ra,12(sp)
  20aed8:	2021883a 	mov	r16,r4
  20aedc:	20000226 	beq	r4,zero,20aee8 <_putc_r+0x1c>
  20aee0:	20800e17 	ldw	r2,56(r4)
  20aee4:	10001b26 	beq	r2,zero,20af54 <_putc_r+0x88>
  20aee8:	30800217 	ldw	r2,8(r6)
  20aeec:	10bfffc4 	addi	r2,r2,-1
  20aef0:	30800215 	stw	r2,8(r6)
  20aef4:	10000a16 	blt	r2,zero,20af20 <_putc_r+0x54>
  20aef8:	30800017 	ldw	r2,0(r6)
  20aefc:	11400005 	stb	r5,0(r2)
  20af00:	30800017 	ldw	r2,0(r6)
  20af04:	10c00044 	addi	r3,r2,1
  20af08:	30c00015 	stw	r3,0(r6)
  20af0c:	10800003 	ldbu	r2,0(r2)
  20af10:	dfc00317 	ldw	ra,12(sp)
  20af14:	dc000217 	ldw	r16,8(sp)
  20af18:	dec00404 	addi	sp,sp,16
  20af1c:	f800283a 	ret
  20af20:	30c00617 	ldw	r3,24(r6)
  20af24:	10c00616 	blt	r2,r3,20af40 <_putc_r+0x74>
  20af28:	30800017 	ldw	r2,0(r6)
  20af2c:	00c00284 	movi	r3,10
  20af30:	11400005 	stb	r5,0(r2)
  20af34:	30800017 	ldw	r2,0(r6)
  20af38:	11400003 	ldbu	r5,0(r2)
  20af3c:	28fff11e 	bne	r5,r3,20af04 <_gp+0xffdf92f0>
  20af40:	8009883a 	mov	r4,r16
  20af44:	dfc00317 	ldw	ra,12(sp)
  20af48:	dc000217 	ldw	r16,8(sp)
  20af4c:	dec00404 	addi	sp,sp,16
  20af50:	020cf701 	jmpi	20cf70 <__swbuf_r>
  20af54:	d9400015 	stw	r5,0(sp)
  20af58:	d9800115 	stw	r6,4(sp)
  20af5c:	02083ec0 	call	2083ec <__sinit>
  20af60:	d9800117 	ldw	r6,4(sp)
  20af64:	d9400017 	ldw	r5,0(sp)
  20af68:	003fdf06 	br	20aee8 <_gp+0xffdf92d4>

0020af6c <putc>:
  20af6c:	00801074 	movhi	r2,65
  20af70:	defffc04 	addi	sp,sp,-16
  20af74:	10a70a04 	addi	r2,r2,-25560
  20af78:	dc000115 	stw	r16,4(sp)
  20af7c:	14000017 	ldw	r16,0(r2)
  20af80:	dc400215 	stw	r17,8(sp)
  20af84:	dfc00315 	stw	ra,12(sp)
  20af88:	2023883a 	mov	r17,r4
  20af8c:	80000226 	beq	r16,zero,20af98 <putc+0x2c>
  20af90:	80800e17 	ldw	r2,56(r16)
  20af94:	10001a26 	beq	r2,zero,20b000 <putc+0x94>
  20af98:	28800217 	ldw	r2,8(r5)
  20af9c:	10bfffc4 	addi	r2,r2,-1
  20afa0:	28800215 	stw	r2,8(r5)
  20afa4:	10000b16 	blt	r2,zero,20afd4 <putc+0x68>
  20afa8:	28800017 	ldw	r2,0(r5)
  20afac:	14400005 	stb	r17,0(r2)
  20afb0:	28800017 	ldw	r2,0(r5)
  20afb4:	10c00044 	addi	r3,r2,1
  20afb8:	28c00015 	stw	r3,0(r5)
  20afbc:	10800003 	ldbu	r2,0(r2)
  20afc0:	dfc00317 	ldw	ra,12(sp)
  20afc4:	dc400217 	ldw	r17,8(sp)
  20afc8:	dc000117 	ldw	r16,4(sp)
  20afcc:	dec00404 	addi	sp,sp,16
  20afd0:	f800283a 	ret
  20afd4:	28c00617 	ldw	r3,24(r5)
  20afd8:	10c00e16 	blt	r2,r3,20b014 <putc+0xa8>
  20afdc:	28800017 	ldw	r2,0(r5)
  20afe0:	01000284 	movi	r4,10
  20afe4:	14400005 	stb	r17,0(r2)
  20afe8:	28800017 	ldw	r2,0(r5)
  20afec:	10c00003 	ldbu	r3,0(r2)
  20aff0:	193ff01e 	bne	r3,r4,20afb4 <_gp+0xffdf93a0>
  20aff4:	280d883a 	mov	r6,r5
  20aff8:	180b883a 	mov	r5,r3
  20affc:	00000706 	br	20b01c <putc+0xb0>
  20b000:	8009883a 	mov	r4,r16
  20b004:	d9400015 	stw	r5,0(sp)
  20b008:	02083ec0 	call	2083ec <__sinit>
  20b00c:	d9400017 	ldw	r5,0(sp)
  20b010:	003fe106 	br	20af98 <_gp+0xffdf9384>
  20b014:	280d883a 	mov	r6,r5
  20b018:	880b883a 	mov	r5,r17
  20b01c:	8009883a 	mov	r4,r16
  20b020:	dfc00317 	ldw	ra,12(sp)
  20b024:	dc400217 	ldw	r17,8(sp)
  20b028:	dc000117 	ldw	r16,4(sp)
  20b02c:	dec00404 	addi	sp,sp,16
  20b030:	020cf701 	jmpi	20cf70 <__swbuf_r>

0020b034 <_realloc_r>:
  20b034:	defff604 	addi	sp,sp,-40
  20b038:	dc800215 	stw	r18,8(sp)
  20b03c:	dfc00915 	stw	ra,36(sp)
  20b040:	df000815 	stw	fp,32(sp)
  20b044:	ddc00715 	stw	r23,28(sp)
  20b048:	dd800615 	stw	r22,24(sp)
  20b04c:	dd400515 	stw	r21,20(sp)
  20b050:	dd000415 	stw	r20,16(sp)
  20b054:	dcc00315 	stw	r19,12(sp)
  20b058:	dc400115 	stw	r17,4(sp)
  20b05c:	dc000015 	stw	r16,0(sp)
  20b060:	3025883a 	mov	r18,r6
  20b064:	2800b726 	beq	r5,zero,20b344 <_realloc_r+0x310>
  20b068:	282b883a 	mov	r21,r5
  20b06c:	2029883a 	mov	r20,r4
  20b070:	02112580 	call	211258 <__malloc_lock>
  20b074:	a8bfff17 	ldw	r2,-4(r21)
  20b078:	043fff04 	movi	r16,-4
  20b07c:	90c002c4 	addi	r3,r18,11
  20b080:	01000584 	movi	r4,22
  20b084:	acfffe04 	addi	r19,r21,-8
  20b088:	1420703a 	and	r16,r2,r16
  20b08c:	20c0332e 	bgeu	r4,r3,20b15c <_realloc_r+0x128>
  20b090:	047ffe04 	movi	r17,-8
  20b094:	1c62703a 	and	r17,r3,r17
  20b098:	8807883a 	mov	r3,r17
  20b09c:	88005816 	blt	r17,zero,20b200 <_realloc_r+0x1cc>
  20b0a0:	8c805736 	bltu	r17,r18,20b200 <_realloc_r+0x1cc>
  20b0a4:	80c0300e 	bge	r16,r3,20b168 <_realloc_r+0x134>
  20b0a8:	07001074 	movhi	fp,65
  20b0ac:	e7213304 	addi	fp,fp,-31540
  20b0b0:	e1c00217 	ldw	r7,8(fp)
  20b0b4:	9c09883a 	add	r4,r19,r16
  20b0b8:	22000117 	ldw	r8,4(r4)
  20b0bc:	21c06326 	beq	r4,r7,20b24c <_realloc_r+0x218>
  20b0c0:	017fff84 	movi	r5,-2
  20b0c4:	414a703a 	and	r5,r8,r5
  20b0c8:	214b883a 	add	r5,r4,r5
  20b0cc:	29800117 	ldw	r6,4(r5)
  20b0d0:	3180004c 	andi	r6,r6,1
  20b0d4:	30003f26 	beq	r6,zero,20b1d4 <_realloc_r+0x1a0>
  20b0d8:	1080004c 	andi	r2,r2,1
  20b0dc:	10008326 	beq	r2,zero,20b2ec <_realloc_r+0x2b8>
  20b0e0:	900b883a 	mov	r5,r18
  20b0e4:	a009883a 	mov	r4,r20
  20b0e8:	02091580 	call	209158 <_malloc_r>
  20b0ec:	1025883a 	mov	r18,r2
  20b0f0:	10011e26 	beq	r2,zero,20b56c <_realloc_r+0x538>
  20b0f4:	a93fff17 	ldw	r4,-4(r21)
  20b0f8:	10fffe04 	addi	r3,r2,-8
  20b0fc:	00bfff84 	movi	r2,-2
  20b100:	2084703a 	and	r2,r4,r2
  20b104:	9885883a 	add	r2,r19,r2
  20b108:	1880ee26 	beq	r3,r2,20b4c4 <_realloc_r+0x490>
  20b10c:	81bfff04 	addi	r6,r16,-4
  20b110:	00800904 	movi	r2,36
  20b114:	1180b836 	bltu	r2,r6,20b3f8 <_realloc_r+0x3c4>
  20b118:	00c004c4 	movi	r3,19
  20b11c:	19809636 	bltu	r3,r6,20b378 <_realloc_r+0x344>
  20b120:	9005883a 	mov	r2,r18
  20b124:	a807883a 	mov	r3,r21
  20b128:	19000017 	ldw	r4,0(r3)
  20b12c:	11000015 	stw	r4,0(r2)
  20b130:	19000117 	ldw	r4,4(r3)
  20b134:	11000115 	stw	r4,4(r2)
  20b138:	18c00217 	ldw	r3,8(r3)
  20b13c:	10c00215 	stw	r3,8(r2)
  20b140:	a80b883a 	mov	r5,r21
  20b144:	a009883a 	mov	r4,r20
  20b148:	02085600 	call	208560 <_free_r>
  20b14c:	a009883a 	mov	r4,r20
  20b150:	021127c0 	call	21127c <__malloc_unlock>
  20b154:	9005883a 	mov	r2,r18
  20b158:	00001206 	br	20b1a4 <_realloc_r+0x170>
  20b15c:	00c00404 	movi	r3,16
  20b160:	1823883a 	mov	r17,r3
  20b164:	003fce06 	br	20b0a0 <_gp+0xffdf948c>
  20b168:	a825883a 	mov	r18,r21
  20b16c:	8445c83a 	sub	r2,r16,r17
  20b170:	00c003c4 	movi	r3,15
  20b174:	18802636 	bltu	r3,r2,20b210 <_realloc_r+0x1dc>
  20b178:	99800117 	ldw	r6,4(r19)
  20b17c:	9c07883a 	add	r3,r19,r16
  20b180:	3180004c 	andi	r6,r6,1
  20b184:	3420b03a 	or	r16,r6,r16
  20b188:	9c000115 	stw	r16,4(r19)
  20b18c:	18800117 	ldw	r2,4(r3)
  20b190:	10800054 	ori	r2,r2,1
  20b194:	18800115 	stw	r2,4(r3)
  20b198:	a009883a 	mov	r4,r20
  20b19c:	021127c0 	call	21127c <__malloc_unlock>
  20b1a0:	9005883a 	mov	r2,r18
  20b1a4:	dfc00917 	ldw	ra,36(sp)
  20b1a8:	df000817 	ldw	fp,32(sp)
  20b1ac:	ddc00717 	ldw	r23,28(sp)
  20b1b0:	dd800617 	ldw	r22,24(sp)
  20b1b4:	dd400517 	ldw	r21,20(sp)
  20b1b8:	dd000417 	ldw	r20,16(sp)
  20b1bc:	dcc00317 	ldw	r19,12(sp)
  20b1c0:	dc800217 	ldw	r18,8(sp)
  20b1c4:	dc400117 	ldw	r17,4(sp)
  20b1c8:	dc000017 	ldw	r16,0(sp)
  20b1cc:	dec00a04 	addi	sp,sp,40
  20b1d0:	f800283a 	ret
  20b1d4:	017fff04 	movi	r5,-4
  20b1d8:	414a703a 	and	r5,r8,r5
  20b1dc:	814d883a 	add	r6,r16,r5
  20b1e0:	30c01f16 	blt	r6,r3,20b260 <_realloc_r+0x22c>
  20b1e4:	20800317 	ldw	r2,12(r4)
  20b1e8:	20c00217 	ldw	r3,8(r4)
  20b1ec:	a825883a 	mov	r18,r21
  20b1f0:	3021883a 	mov	r16,r6
  20b1f4:	18800315 	stw	r2,12(r3)
  20b1f8:	10c00215 	stw	r3,8(r2)
  20b1fc:	003fdb06 	br	20b16c <_gp+0xffdf9558>
  20b200:	00800304 	movi	r2,12
  20b204:	a0800015 	stw	r2,0(r20)
  20b208:	0005883a 	mov	r2,zero
  20b20c:	003fe506 	br	20b1a4 <_gp+0xffdf9590>
  20b210:	98c00117 	ldw	r3,4(r19)
  20b214:	9c4b883a 	add	r5,r19,r17
  20b218:	11000054 	ori	r4,r2,1
  20b21c:	18c0004c 	andi	r3,r3,1
  20b220:	1c62b03a 	or	r17,r3,r17
  20b224:	9c400115 	stw	r17,4(r19)
  20b228:	29000115 	stw	r4,4(r5)
  20b22c:	2885883a 	add	r2,r5,r2
  20b230:	10c00117 	ldw	r3,4(r2)
  20b234:	29400204 	addi	r5,r5,8
  20b238:	a009883a 	mov	r4,r20
  20b23c:	18c00054 	ori	r3,r3,1
  20b240:	10c00115 	stw	r3,4(r2)
  20b244:	02085600 	call	208560 <_free_r>
  20b248:	003fd306 	br	20b198 <_gp+0xffdf9584>
  20b24c:	017fff04 	movi	r5,-4
  20b250:	414a703a 	and	r5,r8,r5
  20b254:	89800404 	addi	r6,r17,16
  20b258:	8151883a 	add	r8,r16,r5
  20b25c:	4180590e 	bge	r8,r6,20b3c4 <_realloc_r+0x390>
  20b260:	1080004c 	andi	r2,r2,1
  20b264:	103f9e1e 	bne	r2,zero,20b0e0 <_gp+0xffdf94cc>
  20b268:	adbffe17 	ldw	r22,-8(r21)
  20b26c:	00bfff04 	movi	r2,-4
  20b270:	9dadc83a 	sub	r22,r19,r22
  20b274:	b1800117 	ldw	r6,4(r22)
  20b278:	3084703a 	and	r2,r6,r2
  20b27c:	20002026 	beq	r4,zero,20b300 <_realloc_r+0x2cc>
  20b280:	80af883a 	add	r23,r16,r2
  20b284:	b96f883a 	add	r23,r23,r5
  20b288:	21c05f26 	beq	r4,r7,20b408 <_realloc_r+0x3d4>
  20b28c:	b8c01c16 	blt	r23,r3,20b300 <_realloc_r+0x2cc>
  20b290:	20800317 	ldw	r2,12(r4)
  20b294:	20c00217 	ldw	r3,8(r4)
  20b298:	81bfff04 	addi	r6,r16,-4
  20b29c:	01000904 	movi	r4,36
  20b2a0:	18800315 	stw	r2,12(r3)
  20b2a4:	10c00215 	stw	r3,8(r2)
  20b2a8:	b0c00217 	ldw	r3,8(r22)
  20b2ac:	b0800317 	ldw	r2,12(r22)
  20b2b0:	b4800204 	addi	r18,r22,8
  20b2b4:	18800315 	stw	r2,12(r3)
  20b2b8:	10c00215 	stw	r3,8(r2)
  20b2bc:	21801b36 	bltu	r4,r6,20b32c <_realloc_r+0x2f8>
  20b2c0:	008004c4 	movi	r2,19
  20b2c4:	1180352e 	bgeu	r2,r6,20b39c <_realloc_r+0x368>
  20b2c8:	a8800017 	ldw	r2,0(r21)
  20b2cc:	b0800215 	stw	r2,8(r22)
  20b2d0:	a8800117 	ldw	r2,4(r21)
  20b2d4:	b0800315 	stw	r2,12(r22)
  20b2d8:	008006c4 	movi	r2,27
  20b2dc:	11807f36 	bltu	r2,r6,20b4dc <_realloc_r+0x4a8>
  20b2e0:	b0800404 	addi	r2,r22,16
  20b2e4:	ad400204 	addi	r21,r21,8
  20b2e8:	00002d06 	br	20b3a0 <_realloc_r+0x36c>
  20b2ec:	adbffe17 	ldw	r22,-8(r21)
  20b2f0:	00bfff04 	movi	r2,-4
  20b2f4:	9dadc83a 	sub	r22,r19,r22
  20b2f8:	b1000117 	ldw	r4,4(r22)
  20b2fc:	2084703a 	and	r2,r4,r2
  20b300:	b03f7726 	beq	r22,zero,20b0e0 <_gp+0xffdf94cc>
  20b304:	80af883a 	add	r23,r16,r2
  20b308:	b8ff7516 	blt	r23,r3,20b0e0 <_gp+0xffdf94cc>
  20b30c:	b0800317 	ldw	r2,12(r22)
  20b310:	b0c00217 	ldw	r3,8(r22)
  20b314:	81bfff04 	addi	r6,r16,-4
  20b318:	01000904 	movi	r4,36
  20b31c:	18800315 	stw	r2,12(r3)
  20b320:	10c00215 	stw	r3,8(r2)
  20b324:	b4800204 	addi	r18,r22,8
  20b328:	21bfe52e 	bgeu	r4,r6,20b2c0 <_gp+0xffdf96ac>
  20b32c:	a80b883a 	mov	r5,r21
  20b330:	9009883a 	mov	r4,r18
  20b334:	0209b900 	call	209b90 <memmove>
  20b338:	b821883a 	mov	r16,r23
  20b33c:	b027883a 	mov	r19,r22
  20b340:	003f8a06 	br	20b16c <_gp+0xffdf9558>
  20b344:	300b883a 	mov	r5,r6
  20b348:	dfc00917 	ldw	ra,36(sp)
  20b34c:	df000817 	ldw	fp,32(sp)
  20b350:	ddc00717 	ldw	r23,28(sp)
  20b354:	dd800617 	ldw	r22,24(sp)
  20b358:	dd400517 	ldw	r21,20(sp)
  20b35c:	dd000417 	ldw	r20,16(sp)
  20b360:	dcc00317 	ldw	r19,12(sp)
  20b364:	dc800217 	ldw	r18,8(sp)
  20b368:	dc400117 	ldw	r17,4(sp)
  20b36c:	dc000017 	ldw	r16,0(sp)
  20b370:	dec00a04 	addi	sp,sp,40
  20b374:	02091581 	jmpi	209158 <_malloc_r>
  20b378:	a8c00017 	ldw	r3,0(r21)
  20b37c:	90c00015 	stw	r3,0(r18)
  20b380:	a8c00117 	ldw	r3,4(r21)
  20b384:	90c00115 	stw	r3,4(r18)
  20b388:	00c006c4 	movi	r3,27
  20b38c:	19804536 	bltu	r3,r6,20b4a4 <_realloc_r+0x470>
  20b390:	90800204 	addi	r2,r18,8
  20b394:	a8c00204 	addi	r3,r21,8
  20b398:	003f6306 	br	20b128 <_gp+0xffdf9514>
  20b39c:	9005883a 	mov	r2,r18
  20b3a0:	a8c00017 	ldw	r3,0(r21)
  20b3a4:	b821883a 	mov	r16,r23
  20b3a8:	b027883a 	mov	r19,r22
  20b3ac:	10c00015 	stw	r3,0(r2)
  20b3b0:	a8c00117 	ldw	r3,4(r21)
  20b3b4:	10c00115 	stw	r3,4(r2)
  20b3b8:	a8c00217 	ldw	r3,8(r21)
  20b3bc:	10c00215 	stw	r3,8(r2)
  20b3c0:	003f6a06 	br	20b16c <_gp+0xffdf9558>
  20b3c4:	9c67883a 	add	r19,r19,r17
  20b3c8:	4445c83a 	sub	r2,r8,r17
  20b3cc:	e4c00215 	stw	r19,8(fp)
  20b3d0:	10800054 	ori	r2,r2,1
  20b3d4:	98800115 	stw	r2,4(r19)
  20b3d8:	a8bfff17 	ldw	r2,-4(r21)
  20b3dc:	a009883a 	mov	r4,r20
  20b3e0:	1080004c 	andi	r2,r2,1
  20b3e4:	1462b03a 	or	r17,r2,r17
  20b3e8:	ac7fff15 	stw	r17,-4(r21)
  20b3ec:	021127c0 	call	21127c <__malloc_unlock>
  20b3f0:	a805883a 	mov	r2,r21
  20b3f4:	003f6b06 	br	20b1a4 <_gp+0xffdf9590>
  20b3f8:	a80b883a 	mov	r5,r21
  20b3fc:	9009883a 	mov	r4,r18
  20b400:	0209b900 	call	209b90 <memmove>
  20b404:	003f4e06 	br	20b140 <_gp+0xffdf952c>
  20b408:	89000404 	addi	r4,r17,16
  20b40c:	b93fbc16 	blt	r23,r4,20b300 <_gp+0xffdf96ec>
  20b410:	b0800317 	ldw	r2,12(r22)
  20b414:	b0c00217 	ldw	r3,8(r22)
  20b418:	81bfff04 	addi	r6,r16,-4
  20b41c:	01000904 	movi	r4,36
  20b420:	18800315 	stw	r2,12(r3)
  20b424:	10c00215 	stw	r3,8(r2)
  20b428:	b4800204 	addi	r18,r22,8
  20b42c:	21804336 	bltu	r4,r6,20b53c <_realloc_r+0x508>
  20b430:	008004c4 	movi	r2,19
  20b434:	11803f2e 	bgeu	r2,r6,20b534 <_realloc_r+0x500>
  20b438:	a8800017 	ldw	r2,0(r21)
  20b43c:	b0800215 	stw	r2,8(r22)
  20b440:	a8800117 	ldw	r2,4(r21)
  20b444:	b0800315 	stw	r2,12(r22)
  20b448:	008006c4 	movi	r2,27
  20b44c:	11803f36 	bltu	r2,r6,20b54c <_realloc_r+0x518>
  20b450:	b0800404 	addi	r2,r22,16
  20b454:	ad400204 	addi	r21,r21,8
  20b458:	a8c00017 	ldw	r3,0(r21)
  20b45c:	10c00015 	stw	r3,0(r2)
  20b460:	a8c00117 	ldw	r3,4(r21)
  20b464:	10c00115 	stw	r3,4(r2)
  20b468:	a8c00217 	ldw	r3,8(r21)
  20b46c:	10c00215 	stw	r3,8(r2)
  20b470:	b447883a 	add	r3,r22,r17
  20b474:	bc45c83a 	sub	r2,r23,r17
  20b478:	e0c00215 	stw	r3,8(fp)
  20b47c:	10800054 	ori	r2,r2,1
  20b480:	18800115 	stw	r2,4(r3)
  20b484:	b0800117 	ldw	r2,4(r22)
  20b488:	a009883a 	mov	r4,r20
  20b48c:	1080004c 	andi	r2,r2,1
  20b490:	1462b03a 	or	r17,r2,r17
  20b494:	b4400115 	stw	r17,4(r22)
  20b498:	021127c0 	call	21127c <__malloc_unlock>
  20b49c:	9005883a 	mov	r2,r18
  20b4a0:	003f4006 	br	20b1a4 <_gp+0xffdf9590>
  20b4a4:	a8c00217 	ldw	r3,8(r21)
  20b4a8:	90c00215 	stw	r3,8(r18)
  20b4ac:	a8c00317 	ldw	r3,12(r21)
  20b4b0:	90c00315 	stw	r3,12(r18)
  20b4b4:	30801126 	beq	r6,r2,20b4fc <_realloc_r+0x4c8>
  20b4b8:	90800404 	addi	r2,r18,16
  20b4bc:	a8c00404 	addi	r3,r21,16
  20b4c0:	003f1906 	br	20b128 <_gp+0xffdf9514>
  20b4c4:	90ffff17 	ldw	r3,-4(r18)
  20b4c8:	00bfff04 	movi	r2,-4
  20b4cc:	a825883a 	mov	r18,r21
  20b4d0:	1884703a 	and	r2,r3,r2
  20b4d4:	80a1883a 	add	r16,r16,r2
  20b4d8:	003f2406 	br	20b16c <_gp+0xffdf9558>
  20b4dc:	a8800217 	ldw	r2,8(r21)
  20b4e0:	b0800415 	stw	r2,16(r22)
  20b4e4:	a8800317 	ldw	r2,12(r21)
  20b4e8:	b0800515 	stw	r2,20(r22)
  20b4ec:	31000a26 	beq	r6,r4,20b518 <_realloc_r+0x4e4>
  20b4f0:	b0800604 	addi	r2,r22,24
  20b4f4:	ad400404 	addi	r21,r21,16
  20b4f8:	003fa906 	br	20b3a0 <_gp+0xffdf978c>
  20b4fc:	a9000417 	ldw	r4,16(r21)
  20b500:	90800604 	addi	r2,r18,24
  20b504:	a8c00604 	addi	r3,r21,24
  20b508:	91000415 	stw	r4,16(r18)
  20b50c:	a9000517 	ldw	r4,20(r21)
  20b510:	91000515 	stw	r4,20(r18)
  20b514:	003f0406 	br	20b128 <_gp+0xffdf9514>
  20b518:	a8c00417 	ldw	r3,16(r21)
  20b51c:	ad400604 	addi	r21,r21,24
  20b520:	b0800804 	addi	r2,r22,32
  20b524:	b0c00615 	stw	r3,24(r22)
  20b528:	a8ffff17 	ldw	r3,-4(r21)
  20b52c:	b0c00715 	stw	r3,28(r22)
  20b530:	003f9b06 	br	20b3a0 <_gp+0xffdf978c>
  20b534:	9005883a 	mov	r2,r18
  20b538:	003fc706 	br	20b458 <_gp+0xffdf9844>
  20b53c:	a80b883a 	mov	r5,r21
  20b540:	9009883a 	mov	r4,r18
  20b544:	0209b900 	call	209b90 <memmove>
  20b548:	003fc906 	br	20b470 <_gp+0xffdf985c>
  20b54c:	a8800217 	ldw	r2,8(r21)
  20b550:	b0800415 	stw	r2,16(r22)
  20b554:	a8800317 	ldw	r2,12(r21)
  20b558:	b0800515 	stw	r2,20(r22)
  20b55c:	31000726 	beq	r6,r4,20b57c <_realloc_r+0x548>
  20b560:	b0800604 	addi	r2,r22,24
  20b564:	ad400404 	addi	r21,r21,16
  20b568:	003fbb06 	br	20b458 <_gp+0xffdf9844>
  20b56c:	a009883a 	mov	r4,r20
  20b570:	021127c0 	call	21127c <__malloc_unlock>
  20b574:	0005883a 	mov	r2,zero
  20b578:	003f0a06 	br	20b1a4 <_gp+0xffdf9590>
  20b57c:	a8c00417 	ldw	r3,16(r21)
  20b580:	ad400604 	addi	r21,r21,24
  20b584:	b0800804 	addi	r2,r22,32
  20b588:	b0c00615 	stw	r3,24(r22)
  20b58c:	a8ffff17 	ldw	r3,-4(r21)
  20b590:	b0c00715 	stw	r3,28(r22)
  20b594:	003fb006 	br	20b458 <_gp+0xffdf9844>

0020b598 <__fpclassifyd>:
  20b598:	00a00034 	movhi	r2,32768
  20b59c:	10bfffc4 	addi	r2,r2,-1
  20b5a0:	2884703a 	and	r2,r5,r2
  20b5a4:	10000726 	beq	r2,zero,20b5c4 <__fpclassifyd+0x2c>
  20b5a8:	00fffc34 	movhi	r3,65520
  20b5ac:	019ff834 	movhi	r6,32736
  20b5b0:	28c7883a 	add	r3,r5,r3
  20b5b4:	31bfffc4 	addi	r6,r6,-1
  20b5b8:	30c00536 	bltu	r6,r3,20b5d0 <__fpclassifyd+0x38>
  20b5bc:	00800104 	movi	r2,4
  20b5c0:	f800283a 	ret
  20b5c4:	2000021e 	bne	r4,zero,20b5d0 <__fpclassifyd+0x38>
  20b5c8:	00800084 	movi	r2,2
  20b5cc:	f800283a 	ret
  20b5d0:	00dffc34 	movhi	r3,32752
  20b5d4:	019ff834 	movhi	r6,32736
  20b5d8:	28cb883a 	add	r5,r5,r3
  20b5dc:	31bfffc4 	addi	r6,r6,-1
  20b5e0:	317ff62e 	bgeu	r6,r5,20b5bc <_gp+0xffdf99a8>
  20b5e4:	01400434 	movhi	r5,16
  20b5e8:	297fffc4 	addi	r5,r5,-1
  20b5ec:	28800236 	bltu	r5,r2,20b5f8 <__fpclassifyd+0x60>
  20b5f0:	008000c4 	movi	r2,3
  20b5f4:	f800283a 	ret
  20b5f8:	10c00226 	beq	r2,r3,20b604 <__fpclassifyd+0x6c>
  20b5fc:	0005883a 	mov	r2,zero
  20b600:	f800283a 	ret
  20b604:	2005003a 	cmpeq	r2,r4,zero
  20b608:	f800283a 	ret

0020b60c <_sbrk_r>:
  20b60c:	defffd04 	addi	sp,sp,-12
  20b610:	dc000015 	stw	r16,0(sp)
  20b614:	04001074 	movhi	r16,65
  20b618:	dc400115 	stw	r17,4(sp)
  20b61c:	84272b04 	addi	r16,r16,-25428
  20b620:	2023883a 	mov	r17,r4
  20b624:	2809883a 	mov	r4,r5
  20b628:	dfc00215 	stw	ra,8(sp)
  20b62c:	80000015 	stw	zero,0(r16)
  20b630:	02114640 	call	211464 <sbrk>
  20b634:	00ffffc4 	movi	r3,-1
  20b638:	10c00526 	beq	r2,r3,20b650 <_sbrk_r+0x44>
  20b63c:	dfc00217 	ldw	ra,8(sp)
  20b640:	dc400117 	ldw	r17,4(sp)
  20b644:	dc000017 	ldw	r16,0(sp)
  20b648:	dec00304 	addi	sp,sp,12
  20b64c:	f800283a 	ret
  20b650:	80c00017 	ldw	r3,0(r16)
  20b654:	183ff926 	beq	r3,zero,20b63c <_gp+0xffdf9a28>
  20b658:	88c00015 	stw	r3,0(r17)
  20b65c:	003ff706 	br	20b63c <_gp+0xffdf9a28>

0020b660 <__sread>:
  20b660:	defffe04 	addi	sp,sp,-8
  20b664:	dc000015 	stw	r16,0(sp)
  20b668:	2821883a 	mov	r16,r5
  20b66c:	2940038f 	ldh	r5,14(r5)
  20b670:	dfc00115 	stw	ra,4(sp)
  20b674:	020d6740 	call	20d674 <_read_r>
  20b678:	10000716 	blt	r2,zero,20b698 <__sread+0x38>
  20b67c:	80c01417 	ldw	r3,80(r16)
  20b680:	1887883a 	add	r3,r3,r2
  20b684:	80c01415 	stw	r3,80(r16)
  20b688:	dfc00117 	ldw	ra,4(sp)
  20b68c:	dc000017 	ldw	r16,0(sp)
  20b690:	dec00204 	addi	sp,sp,8
  20b694:	f800283a 	ret
  20b698:	80c0030b 	ldhu	r3,12(r16)
  20b69c:	18fbffcc 	andi	r3,r3,61439
  20b6a0:	80c0030d 	sth	r3,12(r16)
  20b6a4:	dfc00117 	ldw	ra,4(sp)
  20b6a8:	dc000017 	ldw	r16,0(sp)
  20b6ac:	dec00204 	addi	sp,sp,8
  20b6b0:	f800283a 	ret

0020b6b4 <__seofread>:
  20b6b4:	0005883a 	mov	r2,zero
  20b6b8:	f800283a 	ret

0020b6bc <__swrite>:
  20b6bc:	2880030b 	ldhu	r2,12(r5)
  20b6c0:	defffb04 	addi	sp,sp,-20
  20b6c4:	dcc00315 	stw	r19,12(sp)
  20b6c8:	dc800215 	stw	r18,8(sp)
  20b6cc:	dc400115 	stw	r17,4(sp)
  20b6d0:	dc000015 	stw	r16,0(sp)
  20b6d4:	dfc00415 	stw	ra,16(sp)
  20b6d8:	10c0400c 	andi	r3,r2,256
  20b6dc:	2821883a 	mov	r16,r5
  20b6e0:	2023883a 	mov	r17,r4
  20b6e4:	3025883a 	mov	r18,r6
  20b6e8:	3827883a 	mov	r19,r7
  20b6ec:	18000526 	beq	r3,zero,20b704 <__swrite+0x48>
  20b6f0:	2940038f 	ldh	r5,14(r5)
  20b6f4:	01c00084 	movi	r7,2
  20b6f8:	000d883a 	mov	r6,zero
  20b6fc:	020d6140 	call	20d614 <_lseek_r>
  20b700:	8080030b 	ldhu	r2,12(r16)
  20b704:	8140038f 	ldh	r5,14(r16)
  20b708:	10bbffcc 	andi	r2,r2,61439
  20b70c:	980f883a 	mov	r7,r19
  20b710:	900d883a 	mov	r6,r18
  20b714:	8809883a 	mov	r4,r17
  20b718:	8080030d 	sth	r2,12(r16)
  20b71c:	dfc00417 	ldw	ra,16(sp)
  20b720:	dcc00317 	ldw	r19,12(sp)
  20b724:	dc800217 	ldw	r18,8(sp)
  20b728:	dc400117 	ldw	r17,4(sp)
  20b72c:	dc000017 	ldw	r16,0(sp)
  20b730:	dec00504 	addi	sp,sp,20
  20b734:	020d0c81 	jmpi	20d0c8 <_write_r>

0020b738 <__sseek>:
  20b738:	defffe04 	addi	sp,sp,-8
  20b73c:	dc000015 	stw	r16,0(sp)
  20b740:	2821883a 	mov	r16,r5
  20b744:	2940038f 	ldh	r5,14(r5)
  20b748:	dfc00115 	stw	ra,4(sp)
  20b74c:	020d6140 	call	20d614 <_lseek_r>
  20b750:	00ffffc4 	movi	r3,-1
  20b754:	10c00826 	beq	r2,r3,20b778 <__sseek+0x40>
  20b758:	80c0030b 	ldhu	r3,12(r16)
  20b75c:	80801415 	stw	r2,80(r16)
  20b760:	18c40014 	ori	r3,r3,4096
  20b764:	80c0030d 	sth	r3,12(r16)
  20b768:	dfc00117 	ldw	ra,4(sp)
  20b76c:	dc000017 	ldw	r16,0(sp)
  20b770:	dec00204 	addi	sp,sp,8
  20b774:	f800283a 	ret
  20b778:	80c0030b 	ldhu	r3,12(r16)
  20b77c:	18fbffcc 	andi	r3,r3,61439
  20b780:	80c0030d 	sth	r3,12(r16)
  20b784:	dfc00117 	ldw	ra,4(sp)
  20b788:	dc000017 	ldw	r16,0(sp)
  20b78c:	dec00204 	addi	sp,sp,8
  20b790:	f800283a 	ret

0020b794 <__sclose>:
  20b794:	2940038f 	ldh	r5,14(r5)
  20b798:	020d1281 	jmpi	20d128 <_close_r>

0020b79c <strcmp>:
  20b79c:	2144b03a 	or	r2,r4,r5
  20b7a0:	108000cc 	andi	r2,r2,3
  20b7a4:	1000171e 	bne	r2,zero,20b804 <strcmp+0x68>
  20b7a8:	20800017 	ldw	r2,0(r4)
  20b7ac:	28c00017 	ldw	r3,0(r5)
  20b7b0:	10c0141e 	bne	r2,r3,20b804 <strcmp+0x68>
  20b7b4:	027fbff4 	movhi	r9,65279
  20b7b8:	4a7fbfc4 	addi	r9,r9,-257
  20b7bc:	0086303a 	nor	r3,zero,r2
  20b7c0:	02202074 	movhi	r8,32897
  20b7c4:	1245883a 	add	r2,r2,r9
  20b7c8:	42202004 	addi	r8,r8,-32640
  20b7cc:	10c4703a 	and	r2,r2,r3
  20b7d0:	1204703a 	and	r2,r2,r8
  20b7d4:	10000226 	beq	r2,zero,20b7e0 <strcmp+0x44>
  20b7d8:	00002306 	br	20b868 <strcmp+0xcc>
  20b7dc:	1000221e 	bne	r2,zero,20b868 <strcmp+0xcc>
  20b7e0:	21000104 	addi	r4,r4,4
  20b7e4:	20c00017 	ldw	r3,0(r4)
  20b7e8:	29400104 	addi	r5,r5,4
  20b7ec:	29800017 	ldw	r6,0(r5)
  20b7f0:	1a4f883a 	add	r7,r3,r9
  20b7f4:	00c4303a 	nor	r2,zero,r3
  20b7f8:	3884703a 	and	r2,r7,r2
  20b7fc:	1204703a 	and	r2,r2,r8
  20b800:	19bff626 	beq	r3,r6,20b7dc <_gp+0xffdf9bc8>
  20b804:	20800003 	ldbu	r2,0(r4)
  20b808:	10c03fcc 	andi	r3,r2,255
  20b80c:	18c0201c 	xori	r3,r3,128
  20b810:	18ffe004 	addi	r3,r3,-128
  20b814:	18000c26 	beq	r3,zero,20b848 <strcmp+0xac>
  20b818:	29800007 	ldb	r6,0(r5)
  20b81c:	19800326 	beq	r3,r6,20b82c <strcmp+0x90>
  20b820:	00001306 	br	20b870 <strcmp+0xd4>
  20b824:	29800007 	ldb	r6,0(r5)
  20b828:	11800b1e 	bne	r2,r6,20b858 <strcmp+0xbc>
  20b82c:	21000044 	addi	r4,r4,1
  20b830:	20c00003 	ldbu	r3,0(r4)
  20b834:	29400044 	addi	r5,r5,1
  20b838:	18803fcc 	andi	r2,r3,255
  20b83c:	1080201c 	xori	r2,r2,128
  20b840:	10bfe004 	addi	r2,r2,-128
  20b844:	103ff71e 	bne	r2,zero,20b824 <_gp+0xffdf9c10>
  20b848:	0007883a 	mov	r3,zero
  20b84c:	28800003 	ldbu	r2,0(r5)
  20b850:	1885c83a 	sub	r2,r3,r2
  20b854:	f800283a 	ret
  20b858:	28800003 	ldbu	r2,0(r5)
  20b85c:	18c03fcc 	andi	r3,r3,255
  20b860:	1885c83a 	sub	r2,r3,r2
  20b864:	f800283a 	ret
  20b868:	0005883a 	mov	r2,zero
  20b86c:	f800283a 	ret
  20b870:	10c03fcc 	andi	r3,r2,255
  20b874:	003ff506 	br	20b84c <_gp+0xffdf9c38>

0020b878 <__sprint_r.part.0>:
  20b878:	28801917 	ldw	r2,100(r5)
  20b87c:	defff604 	addi	sp,sp,-40
  20b880:	dd400515 	stw	r21,20(sp)
  20b884:	dfc00915 	stw	ra,36(sp)
  20b888:	df000815 	stw	fp,32(sp)
  20b88c:	ddc00715 	stw	r23,28(sp)
  20b890:	dd800615 	stw	r22,24(sp)
  20b894:	dd000415 	stw	r20,16(sp)
  20b898:	dcc00315 	stw	r19,12(sp)
  20b89c:	dc800215 	stw	r18,8(sp)
  20b8a0:	dc400115 	stw	r17,4(sp)
  20b8a4:	dc000015 	stw	r16,0(sp)
  20b8a8:	1088000c 	andi	r2,r2,8192
  20b8ac:	302b883a 	mov	r21,r6
  20b8b0:	10002e26 	beq	r2,zero,20b96c <__sprint_r.part.0+0xf4>
  20b8b4:	30800217 	ldw	r2,8(r6)
  20b8b8:	35800017 	ldw	r22,0(r6)
  20b8bc:	10002926 	beq	r2,zero,20b964 <__sprint_r.part.0+0xec>
  20b8c0:	2827883a 	mov	r19,r5
  20b8c4:	2029883a 	mov	r20,r4
  20b8c8:	b5c00104 	addi	r23,r22,4
  20b8cc:	04bfffc4 	movi	r18,-1
  20b8d0:	bc400017 	ldw	r17,0(r23)
  20b8d4:	b4000017 	ldw	r16,0(r22)
  20b8d8:	0039883a 	mov	fp,zero
  20b8dc:	8822d0ba 	srli	r17,r17,2
  20b8e0:	8800031e 	bne	r17,zero,20b8f0 <__sprint_r.part.0+0x78>
  20b8e4:	00001806 	br	20b948 <__sprint_r.part.0+0xd0>
  20b8e8:	84000104 	addi	r16,r16,4
  20b8ec:	8f001526 	beq	r17,fp,20b944 <__sprint_r.part.0+0xcc>
  20b8f0:	81400017 	ldw	r5,0(r16)
  20b8f4:	980d883a 	mov	r6,r19
  20b8f8:	a009883a 	mov	r4,r20
  20b8fc:	020d4c00 	call	20d4c0 <_fputwc_r>
  20b900:	e7000044 	addi	fp,fp,1
  20b904:	14bff81e 	bne	r2,r18,20b8e8 <_gp+0xffdf9cd4>
  20b908:	9005883a 	mov	r2,r18
  20b90c:	a8000215 	stw	zero,8(r21)
  20b910:	a8000115 	stw	zero,4(r21)
  20b914:	dfc00917 	ldw	ra,36(sp)
  20b918:	df000817 	ldw	fp,32(sp)
  20b91c:	ddc00717 	ldw	r23,28(sp)
  20b920:	dd800617 	ldw	r22,24(sp)
  20b924:	dd400517 	ldw	r21,20(sp)
  20b928:	dd000417 	ldw	r20,16(sp)
  20b92c:	dcc00317 	ldw	r19,12(sp)
  20b930:	dc800217 	ldw	r18,8(sp)
  20b934:	dc400117 	ldw	r17,4(sp)
  20b938:	dc000017 	ldw	r16,0(sp)
  20b93c:	dec00a04 	addi	sp,sp,40
  20b940:	f800283a 	ret
  20b944:	a8800217 	ldw	r2,8(r21)
  20b948:	8c63883a 	add	r17,r17,r17
  20b94c:	8c63883a 	add	r17,r17,r17
  20b950:	1445c83a 	sub	r2,r2,r17
  20b954:	a8800215 	stw	r2,8(r21)
  20b958:	b5800204 	addi	r22,r22,8
  20b95c:	bdc00204 	addi	r23,r23,8
  20b960:	103fdb1e 	bne	r2,zero,20b8d0 <_gp+0xffdf9cbc>
  20b964:	0005883a 	mov	r2,zero
  20b968:	003fe806 	br	20b90c <_gp+0xffdf9cf8>
  20b96c:	02088700 	call	208870 <__sfvwrite_r>
  20b970:	003fe606 	br	20b90c <_gp+0xffdf9cf8>

0020b974 <__sprint_r>:
  20b974:	30c00217 	ldw	r3,8(r6)
  20b978:	18000126 	beq	r3,zero,20b980 <__sprint_r+0xc>
  20b97c:	020b8781 	jmpi	20b878 <__sprint_r.part.0>
  20b980:	30000115 	stw	zero,4(r6)
  20b984:	0005883a 	mov	r2,zero
  20b988:	f800283a 	ret

0020b98c <___vfiprintf_internal_r>:
  20b98c:	deffca04 	addi	sp,sp,-216
  20b990:	dd403115 	stw	r21,196(sp)
  20b994:	dfc03515 	stw	ra,212(sp)
  20b998:	df003415 	stw	fp,208(sp)
  20b99c:	ddc03315 	stw	r23,204(sp)
  20b9a0:	dd803215 	stw	r22,200(sp)
  20b9a4:	dd003015 	stw	r20,192(sp)
  20b9a8:	dcc02f15 	stw	r19,188(sp)
  20b9ac:	dc802e15 	stw	r18,184(sp)
  20b9b0:	dc402d15 	stw	r17,180(sp)
  20b9b4:	dc002c15 	stw	r16,176(sp)
  20b9b8:	d9002115 	stw	r4,132(sp)
  20b9bc:	d9402015 	stw	r5,128(sp)
  20b9c0:	d9c02215 	stw	r7,136(sp)
  20b9c4:	302b883a 	mov	r21,r6
  20b9c8:	20000226 	beq	r4,zero,20b9d4 <___vfiprintf_internal_r+0x48>
  20b9cc:	20800e17 	ldw	r2,56(r4)
  20b9d0:	1000cf26 	beq	r2,zero,20bd10 <___vfiprintf_internal_r+0x384>
  20b9d4:	d8c02017 	ldw	r3,128(sp)
  20b9d8:	1880030b 	ldhu	r2,12(r3)
  20b9dc:	10c8000c 	andi	r3,r2,8192
  20b9e0:	1800071e 	bne	r3,zero,20ba00 <___vfiprintf_internal_r+0x74>
  20b9e4:	d9402017 	ldw	r5,128(sp)
  20b9e8:	00f7ffc4 	movi	r3,-8193
  20b9ec:	10880014 	ori	r2,r2,8192
  20b9f0:	29001917 	ldw	r4,100(r5)
  20b9f4:	2880030d 	sth	r2,12(r5)
  20b9f8:	20c6703a 	and	r3,r4,r3
  20b9fc:	28c01915 	stw	r3,100(r5)
  20ba00:	10c0020c 	andi	r3,r2,8
  20ba04:	1800a526 	beq	r3,zero,20bc9c <___vfiprintf_internal_r+0x310>
  20ba08:	d9002017 	ldw	r4,128(sp)
  20ba0c:	20c00417 	ldw	r3,16(r4)
  20ba10:	1800a226 	beq	r3,zero,20bc9c <___vfiprintf_internal_r+0x310>
  20ba14:	1080068c 	andi	r2,r2,26
  20ba18:	00c00284 	movi	r3,10
  20ba1c:	10c0a826 	beq	r2,r3,20bcc0 <___vfiprintf_internal_r+0x334>
  20ba20:	d9001a04 	addi	r4,sp,104
  20ba24:	d94019c4 	addi	r5,sp,103
  20ba28:	04800874 	movhi	r18,33
  20ba2c:	2145c83a 	sub	r2,r4,r5
  20ba30:	949b6404 	addi	r18,r18,28048
  20ba34:	d9001e15 	stw	r4,120(sp)
  20ba38:	d9401f15 	stw	r5,124(sp)
  20ba3c:	dec01a15 	stw	sp,104(sp)
  20ba40:	d8001c15 	stw	zero,112(sp)
  20ba44:	d8001b15 	stw	zero,108(sp)
  20ba48:	d811883a 	mov	r8,sp
  20ba4c:	d8002615 	stw	zero,152(sp)
  20ba50:	d8002415 	stw	zero,144(sp)
  20ba54:	d8802815 	stw	r2,160(sp)
  20ba58:	a82d883a 	mov	r22,r21
  20ba5c:	b0800007 	ldb	r2,0(r22)
  20ba60:	10040d26 	beq	r2,zero,20ca98 <___vfiprintf_internal_r+0x110c>
  20ba64:	00c00944 	movi	r3,37
  20ba68:	b029883a 	mov	r20,r22
  20ba6c:	10c0021e 	bne	r2,r3,20ba78 <___vfiprintf_internal_r+0xec>
  20ba70:	00001606 	br	20bacc <___vfiprintf_internal_r+0x140>
  20ba74:	10c00326 	beq	r2,r3,20ba84 <___vfiprintf_internal_r+0xf8>
  20ba78:	a5000044 	addi	r20,r20,1
  20ba7c:	a0800007 	ldb	r2,0(r20)
  20ba80:	103ffc1e 	bne	r2,zero,20ba74 <_gp+0xffdf9e60>
  20ba84:	a5a1c83a 	sub	r16,r20,r22
  20ba88:	80001026 	beq	r16,zero,20bacc <___vfiprintf_internal_r+0x140>
  20ba8c:	d8c01c17 	ldw	r3,112(sp)
  20ba90:	d8801b17 	ldw	r2,108(sp)
  20ba94:	45800015 	stw	r22,0(r8)
  20ba98:	80c7883a 	add	r3,r16,r3
  20ba9c:	10800044 	addi	r2,r2,1
  20baa0:	44000115 	stw	r16,4(r8)
  20baa4:	d8c01c15 	stw	r3,112(sp)
  20baa8:	d8801b15 	stw	r2,108(sp)
  20baac:	010001c4 	movi	r4,7
  20bab0:	2080750e 	bge	r4,r2,20bc88 <___vfiprintf_internal_r+0x2fc>
  20bab4:	1803951e 	bne	r3,zero,20c90c <___vfiprintf_internal_r+0xf80>
  20bab8:	d8c02417 	ldw	r3,144(sp)
  20babc:	d8001b15 	stw	zero,108(sp)
  20bac0:	d811883a 	mov	r8,sp
  20bac4:	1c07883a 	add	r3,r3,r16
  20bac8:	d8c02415 	stw	r3,144(sp)
  20bacc:	a0800007 	ldb	r2,0(r20)
  20bad0:	1002e026 	beq	r2,zero,20c654 <___vfiprintf_internal_r+0xcc8>
  20bad4:	a5800044 	addi	r22,r20,1
  20bad8:	a0c00047 	ldb	r3,1(r20)
  20badc:	d8001d85 	stb	zero,118(sp)
  20bae0:	0027883a 	mov	r19,zero
  20bae4:	d8002305 	stb	zero,140(sp)
  20bae8:	043fffc4 	movi	r16,-1
  20baec:	d8002515 	stw	zero,148(sp)
  20baf0:	0023883a 	mov	r17,zero
  20baf4:	05001604 	movi	r20,88
  20baf8:	05400244 	movi	r21,9
  20bafc:	402f883a 	mov	r23,r8
  20bb00:	b5800044 	addi	r22,r22,1
  20bb04:	18bff804 	addi	r2,r3,-32
  20bb08:	a0827736 	bltu	r20,r2,20c4e8 <___vfiprintf_internal_r+0xb5c>
  20bb0c:	100490ba 	slli	r2,r2,2
  20bb10:	01000874 	movhi	r4,33
  20bb14:	212ec904 	addi	r4,r4,-17628
  20bb18:	1105883a 	add	r2,r2,r4
  20bb1c:	10800017 	ldw	r2,0(r2)
  20bb20:	1000683a 	jmp	r2
  20bb24:	0020c1e8 	cmpgeui	zero,zero,33543
  20bb28:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb2c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb30:	0020c204 	movi	zero,-31992
  20bb34:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb38:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb3c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb40:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb44:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb48:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb4c:	0020c40c 	andi	zero,zero,33552
  20bb50:	0020c430 	cmpltui	zero,zero,33552
  20bb54:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb58:	0020bd28 	cmpgeui	zero,zero,33524
  20bb5c:	0020c444 	movi	zero,-31983
  20bb60:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb64:	0020c210 	cmplti	zero,zero,-31992
  20bb68:	0020c21c 	xori	zero,zero,33544
  20bb6c:	0020c21c 	xori	zero,zero,33544
  20bb70:	0020c21c 	xori	zero,zero,33544
  20bb74:	0020c21c 	xori	zero,zero,33544
  20bb78:	0020c21c 	xori	zero,zero,33544
  20bb7c:	0020c21c 	xori	zero,zero,33544
  20bb80:	0020c21c 	xori	zero,zero,33544
  20bb84:	0020c21c 	xori	zero,zero,33544
  20bb88:	0020c21c 	xori	zero,zero,33544
  20bb8c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb90:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb94:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb98:	0020c4e8 	cmpgeui	zero,zero,33555
  20bb9c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bba0:	0020c4e8 	cmpgeui	zero,zero,33555
  20bba4:	0020c4e8 	cmpgeui	zero,zero,33555
  20bba8:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbac:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbb0:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbb4:	0020c25c 	xori	zero,zero,33545
  20bbb8:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbbc:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbc0:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbc4:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbc8:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbcc:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbd0:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbd4:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbd8:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbdc:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbe0:	0020c298 	cmpnei	zero,zero,-31990
  20bbe4:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbe8:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbec:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbf0:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbf4:	0020c4e8 	cmpgeui	zero,zero,33555
  20bbf8:	0020c2f4 	movhi	zero,33547
  20bbfc:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc00:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc04:	0020c368 	cmpgeui	zero,zero,33549
  20bc08:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc0c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc10:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc14:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc18:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc1c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc20:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc24:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc28:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc2c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc30:	0020c110 	cmplti	zero,zero,-31996
  20bc34:	0020c140 	call	20c14 <__alt_mem_onchip_flash_0_data-0x1df3ec>
  20bc38:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc3c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc40:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc44:	0020c490 	cmplti	zero,zero,-31982
  20bc48:	0020c140 	call	20c14 <__alt_mem_onchip_flash_0_data-0x1df3ec>
  20bc4c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc50:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc54:	0020bfe8 	cmpgeui	zero,zero,33535
  20bc58:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc5c:	0020bffc 	xorhi	zero,zero,33535
  20bc60:	0020c034 	movhi	zero,33536
  20bc64:	0020bd34 	movhi	zero,33524
  20bc68:	0020bfdc 	xori	zero,zero,33535
  20bc6c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc70:	0020c3a8 	cmpgeui	zero,zero,33550
  20bc74:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc78:	0020c3f4 	movhi	zero,33551
  20bc7c:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc80:	0020c4e8 	cmpgeui	zero,zero,33555
  20bc84:	0020c0b8 	rdprs	zero,zero,-31998
  20bc88:	42000204 	addi	r8,r8,8
  20bc8c:	d8c02417 	ldw	r3,144(sp)
  20bc90:	1c07883a 	add	r3,r3,r16
  20bc94:	d8c02415 	stw	r3,144(sp)
  20bc98:	003f8c06 	br	20bacc <_gp+0xffdf9eb8>
  20bc9c:	d9402017 	ldw	r5,128(sp)
  20bca0:	d9002117 	ldw	r4,132(sp)
  20bca4:	02063e00 	call	2063e0 <__swsetup_r>
  20bca8:	1003c11e 	bne	r2,zero,20cbb0 <___vfiprintf_internal_r+0x1224>
  20bcac:	d9402017 	ldw	r5,128(sp)
  20bcb0:	00c00284 	movi	r3,10
  20bcb4:	2880030b 	ldhu	r2,12(r5)
  20bcb8:	1080068c 	andi	r2,r2,26
  20bcbc:	10ff581e 	bne	r2,r3,20ba20 <_gp+0xffdf9e0c>
  20bcc0:	d8c02017 	ldw	r3,128(sp)
  20bcc4:	1880038f 	ldh	r2,14(r3)
  20bcc8:	103f5516 	blt	r2,zero,20ba20 <_gp+0xffdf9e0c>
  20bccc:	d9c02217 	ldw	r7,136(sp)
  20bcd0:	d9002117 	ldw	r4,132(sp)
  20bcd4:	a80d883a 	mov	r6,r21
  20bcd8:	180b883a 	mov	r5,r3
  20bcdc:	020ceb40 	call	20ceb4 <__sbprintf>
  20bce0:	dfc03517 	ldw	ra,212(sp)
  20bce4:	df003417 	ldw	fp,208(sp)
  20bce8:	ddc03317 	ldw	r23,204(sp)
  20bcec:	dd803217 	ldw	r22,200(sp)
  20bcf0:	dd403117 	ldw	r21,196(sp)
  20bcf4:	dd003017 	ldw	r20,192(sp)
  20bcf8:	dcc02f17 	ldw	r19,188(sp)
  20bcfc:	dc802e17 	ldw	r18,184(sp)
  20bd00:	dc402d17 	ldw	r17,180(sp)
  20bd04:	dc002c17 	ldw	r16,176(sp)
  20bd08:	dec03604 	addi	sp,sp,216
  20bd0c:	f800283a 	ret
  20bd10:	02083ec0 	call	2083ec <__sinit>
  20bd14:	003f2f06 	br	20b9d4 <_gp+0xffdf9dc0>
  20bd18:	d8c02517 	ldw	r3,148(sp)
  20bd1c:	d8802215 	stw	r2,136(sp)
  20bd20:	00c7c83a 	sub	r3,zero,r3
  20bd24:	d8c02515 	stw	r3,148(sp)
  20bd28:	8c400114 	ori	r17,r17,4
  20bd2c:	b0c00007 	ldb	r3,0(r22)
  20bd30:	003f7306 	br	20bb00 <_gp+0xffdf9eec>
  20bd34:	00800c04 	movi	r2,48
  20bd38:	d9402217 	ldw	r5,136(sp)
  20bd3c:	d8801d05 	stb	r2,116(sp)
  20bd40:	00801e04 	movi	r2,120
  20bd44:	d8801d45 	stb	r2,117(sp)
  20bd48:	d8001d85 	stb	zero,118(sp)
  20bd4c:	b811883a 	mov	r8,r23
  20bd50:	28c00104 	addi	r3,r5,4
  20bd54:	2cc00017 	ldw	r19,0(r5)
  20bd58:	0029883a 	mov	r20,zero
  20bd5c:	88800094 	ori	r2,r17,2
  20bd60:	80032516 	blt	r16,zero,20c9f8 <___vfiprintf_internal_r+0x106c>
  20bd64:	00bfdfc4 	movi	r2,-129
  20bd68:	88a2703a 	and	r17,r17,r2
  20bd6c:	d8c02215 	stw	r3,136(sp)
  20bd70:	8c400094 	ori	r17,r17,2
  20bd74:	98032a1e 	bne	r19,zero,20ca20 <___vfiprintf_internal_r+0x1094>
  20bd78:	00800874 	movhi	r2,33
  20bd7c:	109b0304 	addi	r2,r2,27660
  20bd80:	d8802615 	stw	r2,152(sp)
  20bd84:	002b883a 	mov	r21,zero
  20bd88:	8001741e 	bne	r16,zero,20c35c <___vfiprintf_internal_r+0x9d0>
  20bd8c:	0021883a 	mov	r16,zero
  20bd90:	0029883a 	mov	r20,zero
  20bd94:	ddc01a04 	addi	r23,sp,104
  20bd98:	8027883a 	mov	r19,r16
  20bd9c:	8500010e 	bge	r16,r20,20bda4 <___vfiprintf_internal_r+0x418>
  20bda0:	a027883a 	mov	r19,r20
  20bda4:	ad403fcc 	andi	r21,r21,255
  20bda8:	ad40201c 	xori	r21,r21,128
  20bdac:	ad7fe004 	addi	r21,r21,-128
  20bdb0:	a8000126 	beq	r21,zero,20bdb8 <___vfiprintf_internal_r+0x42c>
  20bdb4:	9cc00044 	addi	r19,r19,1
  20bdb8:	89c0008c 	andi	r7,r17,2
  20bdbc:	38000126 	beq	r7,zero,20bdc4 <___vfiprintf_internal_r+0x438>
  20bdc0:	9cc00084 	addi	r19,r19,2
  20bdc4:	88c0210c 	andi	r3,r17,132
  20bdc8:	1801dd1e 	bne	r3,zero,20c540 <___vfiprintf_internal_r+0xbb4>
  20bdcc:	d9402517 	ldw	r5,148(sp)
  20bdd0:	2cebc83a 	sub	r21,r5,r19
  20bdd4:	0541da0e 	bge	zero,r21,20c540 <___vfiprintf_internal_r+0xbb4>
  20bdd8:	07000404 	movi	fp,16
  20bddc:	d8801c17 	ldw	r2,112(sp)
  20bde0:	e543be0e 	bge	fp,r21,20ccdc <___vfiprintf_internal_r+0x1350>
  20bde4:	01400874 	movhi	r5,33
  20bde8:	295b6804 	addi	r5,r5,28064
  20bdec:	dc002715 	stw	r16,156(sp)
  20bdf0:	d9801b17 	ldw	r6,108(sp)
  20bdf4:	a821883a 	mov	r16,r21
  20bdf8:	d9402315 	stw	r5,140(sp)
  20bdfc:	028001c4 	movi	r10,7
  20be00:	d9c02915 	stw	r7,164(sp)
  20be04:	182b883a 	mov	r21,r3
  20be08:	00000506 	br	20be20 <___vfiprintf_internal_r+0x494>
  20be0c:	31000084 	addi	r4,r6,2
  20be10:	42000204 	addi	r8,r8,8
  20be14:	180d883a 	mov	r6,r3
  20be18:	843ffc04 	addi	r16,r16,-16
  20be1c:	e4000f0e 	bge	fp,r16,20be5c <___vfiprintf_internal_r+0x4d0>
  20be20:	01000874 	movhi	r4,33
  20be24:	10800404 	addi	r2,r2,16
  20be28:	30c00044 	addi	r3,r6,1
  20be2c:	211b6804 	addi	r4,r4,28064
  20be30:	41000015 	stw	r4,0(r8)
  20be34:	47000115 	stw	fp,4(r8)
  20be38:	d8801c15 	stw	r2,112(sp)
  20be3c:	d8c01b15 	stw	r3,108(sp)
  20be40:	50fff20e 	bge	r10,r3,20be0c <_gp+0xffdfa1f8>
  20be44:	1001b21e 	bne	r2,zero,20c510 <___vfiprintf_internal_r+0xb84>
  20be48:	843ffc04 	addi	r16,r16,-16
  20be4c:	000d883a 	mov	r6,zero
  20be50:	01000044 	movi	r4,1
  20be54:	d811883a 	mov	r8,sp
  20be58:	e43ff116 	blt	fp,r16,20be20 <_gp+0xffdfa20c>
  20be5c:	a807883a 	mov	r3,r21
  20be60:	d9c02917 	ldw	r7,164(sp)
  20be64:	802b883a 	mov	r21,r16
  20be68:	dc002717 	ldw	r16,156(sp)
  20be6c:	d9402317 	ldw	r5,140(sp)
  20be70:	a885883a 	add	r2,r21,r2
  20be74:	45400115 	stw	r21,4(r8)
  20be78:	41400015 	stw	r5,0(r8)
  20be7c:	d8801c15 	stw	r2,112(sp)
  20be80:	d9001b15 	stw	r4,108(sp)
  20be84:	014001c4 	movi	r5,7
  20be88:	29026216 	blt	r5,r4,20c814 <___vfiprintf_internal_r+0xe88>
  20be8c:	d9801d87 	ldb	r6,118(sp)
  20be90:	42000204 	addi	r8,r8,8
  20be94:	21400044 	addi	r5,r4,1
  20be98:	3001ae1e 	bne	r6,zero,20c554 <___vfiprintf_internal_r+0xbc8>
  20be9c:	3801bb26 	beq	r7,zero,20c58c <___vfiprintf_internal_r+0xc00>
  20bea0:	d9001d04 	addi	r4,sp,116
  20bea4:	10800084 	addi	r2,r2,2
  20bea8:	41000015 	stw	r4,0(r8)
  20beac:	01000084 	movi	r4,2
  20beb0:	41000115 	stw	r4,4(r8)
  20beb4:	d8801c15 	stw	r2,112(sp)
  20beb8:	d9401b15 	stw	r5,108(sp)
  20bebc:	010001c4 	movi	r4,7
  20bec0:	2142680e 	bge	r4,r5,20c864 <___vfiprintf_internal_r+0xed8>
  20bec4:	1002b11e 	bne	r2,zero,20c98c <___vfiprintf_internal_r+0x1000>
  20bec8:	01802004 	movi	r6,128
  20becc:	01400044 	movi	r5,1
  20bed0:	0009883a 	mov	r4,zero
  20bed4:	d811883a 	mov	r8,sp
  20bed8:	1981ae1e 	bne	r3,r6,20c594 <___vfiprintf_internal_r+0xc08>
  20bedc:	d8c02517 	ldw	r3,148(sp)
  20bee0:	1cf9c83a 	sub	fp,r3,r19
  20bee4:	0701ab0e 	bge	zero,fp,20c594 <___vfiprintf_internal_r+0xc08>
  20bee8:	05400404 	movi	r21,16
  20beec:	af03a90e 	bge	r21,fp,20cd94 <___vfiprintf_internal_r+0x1408>
  20bef0:	01400874 	movhi	r5,33
  20bef4:	295b6404 	addi	r5,r5,28048
  20bef8:	d9402315 	stw	r5,140(sp)
  20befc:	01c001c4 	movi	r7,7
  20bf00:	00000506 	br	20bf18 <___vfiprintf_internal_r+0x58c>
  20bf04:	21800084 	addi	r6,r4,2
  20bf08:	42000204 	addi	r8,r8,8
  20bf0c:	1809883a 	mov	r4,r3
  20bf10:	e73ffc04 	addi	fp,fp,-16
  20bf14:	af000d0e 	bge	r21,fp,20bf4c <___vfiprintf_internal_r+0x5c0>
  20bf18:	10800404 	addi	r2,r2,16
  20bf1c:	20c00044 	addi	r3,r4,1
  20bf20:	44800015 	stw	r18,0(r8)
  20bf24:	45400115 	stw	r21,4(r8)
  20bf28:	d8801c15 	stw	r2,112(sp)
  20bf2c:	d8c01b15 	stw	r3,108(sp)
  20bf30:	38fff40e 	bge	r7,r3,20bf04 <_gp+0xffdfa2f0>
  20bf34:	10022b1e 	bne	r2,zero,20c7e4 <___vfiprintf_internal_r+0xe58>
  20bf38:	e73ffc04 	addi	fp,fp,-16
  20bf3c:	01800044 	movi	r6,1
  20bf40:	0009883a 	mov	r4,zero
  20bf44:	d811883a 	mov	r8,sp
  20bf48:	af3ff316 	blt	r21,fp,20bf18 <_gp+0xffdfa304>
  20bf4c:	d8c02317 	ldw	r3,140(sp)
  20bf50:	1705883a 	add	r2,r2,fp
  20bf54:	47000115 	stw	fp,4(r8)
  20bf58:	40c00015 	stw	r3,0(r8)
  20bf5c:	d8801c15 	stw	r2,112(sp)
  20bf60:	d9801b15 	stw	r6,108(sp)
  20bf64:	00c001c4 	movi	r3,7
  20bf68:	19829416 	blt	r3,r6,20c9bc <___vfiprintf_internal_r+0x1030>
  20bf6c:	8521c83a 	sub	r16,r16,r20
  20bf70:	42000204 	addi	r8,r8,8
  20bf74:	31400044 	addi	r5,r6,1
  20bf78:	3009883a 	mov	r4,r6
  20bf7c:	04018716 	blt	zero,r16,20c59c <___vfiprintf_internal_r+0xc10>
  20bf80:	a085883a 	add	r2,r20,r2
  20bf84:	45c00015 	stw	r23,0(r8)
  20bf88:	45000115 	stw	r20,4(r8)
  20bf8c:	d8801c15 	stw	r2,112(sp)
  20bf90:	d9401b15 	stw	r5,108(sp)
  20bf94:	00c001c4 	movi	r3,7
  20bf98:	1941c20e 	bge	r3,r5,20c6a4 <___vfiprintf_internal_r+0xd18>
  20bf9c:	1002531e 	bne	r2,zero,20c8ec <___vfiprintf_internal_r+0xf60>
  20bfa0:	d8001b15 	stw	zero,108(sp)
  20bfa4:	8c40010c 	andi	r17,r17,4
  20bfa8:	88023226 	beq	r17,zero,20c874 <___vfiprintf_internal_r+0xee8>
  20bfac:	d9002517 	ldw	r4,148(sp)
  20bfb0:	24e3c83a 	sub	r17,r4,r19
  20bfb4:	04432916 	blt	zero,r17,20cc5c <___vfiprintf_internal_r+0x12d0>
  20bfb8:	d8802517 	ldw	r2,148(sp)
  20bfbc:	14c0010e 	bge	r2,r19,20bfc4 <___vfiprintf_internal_r+0x638>
  20bfc0:	9805883a 	mov	r2,r19
  20bfc4:	d8c02417 	ldw	r3,144(sp)
  20bfc8:	1887883a 	add	r3,r3,r2
  20bfcc:	d8c02415 	stw	r3,144(sp)
  20bfd0:	d8001b15 	stw	zero,108(sp)
  20bfd4:	d811883a 	mov	r8,sp
  20bfd8:	003ea006 	br	20ba5c <_gp+0xffdf9e48>
  20bfdc:	8c400814 	ori	r17,r17,32
  20bfe0:	b0c00007 	ldb	r3,0(r22)
  20bfe4:	003ec606 	br	20bb00 <_gp+0xffdf9eec>
  20bfe8:	b0c00007 	ldb	r3,0(r22)
  20bfec:	00801b04 	movi	r2,108
  20bff0:	18832026 	beq	r3,r2,20cc74 <___vfiprintf_internal_r+0x12e8>
  20bff4:	8c400414 	ori	r17,r17,16
  20bff8:	003ec106 	br	20bb00 <_gp+0xffdf9eec>
  20bffc:	9cc03fcc 	andi	r19,r19,255
  20c000:	b811883a 	mov	r8,r23
  20c004:	9803981e 	bne	r19,zero,20ce68 <___vfiprintf_internal_r+0x14dc>
  20c008:	8880080c 	andi	r2,r17,32
  20c00c:	1002be26 	beq	r2,zero,20cb08 <___vfiprintf_internal_r+0x117c>
  20c010:	d9002217 	ldw	r4,136(sp)
  20c014:	d9402417 	ldw	r5,144(sp)
  20c018:	20800017 	ldw	r2,0(r4)
  20c01c:	2807d7fa 	srai	r3,r5,31
  20c020:	21000104 	addi	r4,r4,4
  20c024:	d9002215 	stw	r4,136(sp)
  20c028:	11400015 	stw	r5,0(r2)
  20c02c:	10c00115 	stw	r3,4(r2)
  20c030:	003e8a06 	br	20ba5c <_gp+0xffdf9e48>
  20c034:	9cc03fcc 	andi	r19,r19,255
  20c038:	b811883a 	mov	r8,r23
  20c03c:	9803871e 	bne	r19,zero,20ce5c <___vfiprintf_internal_r+0x14d0>
  20c040:	8880080c 	andi	r2,r17,32
  20c044:	10009a26 	beq	r2,zero,20c2b0 <___vfiprintf_internal_r+0x924>
  20c048:	d9002217 	ldw	r4,136(sp)
  20c04c:	d8001d85 	stb	zero,118(sp)
  20c050:	20800204 	addi	r2,r4,8
  20c054:	24c00017 	ldw	r19,0(r4)
  20c058:	25000117 	ldw	r20,4(r4)
  20c05c:	8002a416 	blt	r16,zero,20caf0 <___vfiprintf_internal_r+0x1164>
  20c060:	013fdfc4 	movi	r4,-129
  20c064:	9d06b03a 	or	r3,r19,r20
  20c068:	d8802215 	stw	r2,136(sp)
  20c06c:	8922703a 	and	r17,r17,r4
  20c070:	18009b26 	beq	r3,zero,20c2e0 <___vfiprintf_internal_r+0x954>
  20c074:	002b883a 	mov	r21,zero
  20c078:	ddc01a04 	addi	r23,sp,104
  20c07c:	9806d0fa 	srli	r3,r19,3
  20c080:	a008977a 	slli	r4,r20,29
  20c084:	a028d0fa 	srli	r20,r20,3
  20c088:	9cc001cc 	andi	r19,r19,7
  20c08c:	98800c04 	addi	r2,r19,48
  20c090:	bdffffc4 	addi	r23,r23,-1
  20c094:	20e6b03a 	or	r19,r4,r3
  20c098:	b8800005 	stb	r2,0(r23)
  20c09c:	9d06b03a 	or	r3,r19,r20
  20c0a0:	183ff61e 	bne	r3,zero,20c07c <_gp+0xffdfa468>
  20c0a4:	88c0004c 	andi	r3,r17,1
  20c0a8:	18021f1e 	bne	r3,zero,20c928 <___vfiprintf_internal_r+0xf9c>
  20c0ac:	d9401e17 	ldw	r5,120(sp)
  20c0b0:	2de9c83a 	sub	r20,r5,r23
  20c0b4:	003f3806 	br	20bd98 <_gp+0xffdfa184>
  20c0b8:	9cc03fcc 	andi	r19,r19,255
  20c0bc:	b811883a 	mov	r8,r23
  20c0c0:	98034f1e 	bne	r19,zero,20ce00 <___vfiprintf_internal_r+0x1474>
  20c0c4:	00800874 	movhi	r2,33
  20c0c8:	109b0304 	addi	r2,r2,27660
  20c0cc:	d8802615 	stw	r2,152(sp)
  20c0d0:	8880080c 	andi	r2,r17,32
  20c0d4:	1000ac26 	beq	r2,zero,20c388 <___vfiprintf_internal_r+0x9fc>
  20c0d8:	d9002217 	ldw	r4,136(sp)
  20c0dc:	24c00017 	ldw	r19,0(r4)
  20c0e0:	25000117 	ldw	r20,4(r4)
  20c0e4:	21000204 	addi	r4,r4,8
  20c0e8:	d9002215 	stw	r4,136(sp)
  20c0ec:	8880004c 	andi	r2,r17,1
  20c0f0:	1001e726 	beq	r2,zero,20c890 <___vfiprintf_internal_r+0xf04>
  20c0f4:	9d04b03a 	or	r2,r19,r20
  20c0f8:	10025c1e 	bne	r2,zero,20ca6c <___vfiprintf_internal_r+0x10e0>
  20c0fc:	d8001d85 	stb	zero,118(sp)
  20c100:	80024416 	blt	r16,zero,20ca14 <___vfiprintf_internal_r+0x1088>
  20c104:	00bfdfc4 	movi	r2,-129
  20c108:	88a2703a 	and	r17,r17,r2
  20c10c:	003f1d06 	br	20bd84 <_gp+0xffdfa170>
  20c110:	d8c02217 	ldw	r3,136(sp)
  20c114:	04c00044 	movi	r19,1
  20c118:	b811883a 	mov	r8,r23
  20c11c:	18800017 	ldw	r2,0(r3)
  20c120:	18c00104 	addi	r3,r3,4
  20c124:	d8001d85 	stb	zero,118(sp)
  20c128:	d8801005 	stb	r2,64(sp)
  20c12c:	d8c02215 	stw	r3,136(sp)
  20c130:	9829883a 	mov	r20,r19
  20c134:	ddc01004 	addi	r23,sp,64
  20c138:	0021883a 	mov	r16,zero
  20c13c:	003f1e06 	br	20bdb8 <_gp+0xffdfa1a4>
  20c140:	9cc03fcc 	andi	r19,r19,255
  20c144:	b811883a 	mov	r8,r23
  20c148:	9803331e 	bne	r19,zero,20ce18 <___vfiprintf_internal_r+0x148c>
  20c14c:	8880080c 	andi	r2,r17,32
  20c150:	10004826 	beq	r2,zero,20c274 <___vfiprintf_internal_r+0x8e8>
  20c154:	d9002217 	ldw	r4,136(sp)
  20c158:	20800117 	ldw	r2,4(r4)
  20c15c:	24c00017 	ldw	r19,0(r4)
  20c160:	21000204 	addi	r4,r4,8
  20c164:	d9002215 	stw	r4,136(sp)
  20c168:	1029883a 	mov	r20,r2
  20c16c:	10024c16 	blt	r2,zero,20caa0 <___vfiprintf_internal_r+0x1114>
  20c170:	dd401d83 	ldbu	r21,118(sp)
  20c174:	80007116 	blt	r16,zero,20c33c <___vfiprintf_internal_r+0x9b0>
  20c178:	00ffdfc4 	movi	r3,-129
  20c17c:	9d04b03a 	or	r2,r19,r20
  20c180:	88e2703a 	and	r17,r17,r3
  20c184:	1000d126 	beq	r2,zero,20c4cc <___vfiprintf_internal_r+0xb40>
  20c188:	a0023526 	beq	r20,zero,20ca60 <___vfiprintf_internal_r+0x10d4>
  20c18c:	ddc01a04 	addi	r23,sp,104
  20c190:	4039883a 	mov	fp,r8
  20c194:	9809883a 	mov	r4,r19
  20c198:	a00b883a 	mov	r5,r20
  20c19c:	01800284 	movi	r6,10
  20c1a0:	000f883a 	mov	r7,zero
  20c1a4:	020deb80 	call	20deb8 <__umoddi3>
  20c1a8:	10800c04 	addi	r2,r2,48
  20c1ac:	bdffffc4 	addi	r23,r23,-1
  20c1b0:	9809883a 	mov	r4,r19
  20c1b4:	a00b883a 	mov	r5,r20
  20c1b8:	b8800005 	stb	r2,0(r23)
  20c1bc:	01800284 	movi	r6,10
  20c1c0:	000f883a 	mov	r7,zero
  20c1c4:	020d8bc0 	call	20d8bc <__udivdi3>
  20c1c8:	1027883a 	mov	r19,r2
  20c1cc:	10c4b03a 	or	r2,r2,r3
  20c1d0:	1829883a 	mov	r20,r3
  20c1d4:	103fef1e 	bne	r2,zero,20c194 <_gp+0xffdfa580>
  20c1d8:	d9001e17 	ldw	r4,120(sp)
  20c1dc:	e011883a 	mov	r8,fp
  20c1e0:	25e9c83a 	sub	r20,r4,r23
  20c1e4:	003eec06 	br	20bd98 <_gp+0xffdfa184>
  20c1e8:	d8802307 	ldb	r2,140(sp)
  20c1ec:	1002361e 	bne	r2,zero,20cac8 <___vfiprintf_internal_r+0x113c>
  20c1f0:	00c00804 	movi	r3,32
  20c1f4:	d8c02305 	stb	r3,140(sp)
  20c1f8:	04c00044 	movi	r19,1
  20c1fc:	b0c00007 	ldb	r3,0(r22)
  20c200:	003e3f06 	br	20bb00 <_gp+0xffdf9eec>
  20c204:	8c400054 	ori	r17,r17,1
  20c208:	b0c00007 	ldb	r3,0(r22)
  20c20c:	003e3c06 	br	20bb00 <_gp+0xffdf9eec>
  20c210:	8c402014 	ori	r17,r17,128
  20c214:	b0c00007 	ldb	r3,0(r22)
  20c218:	003e3906 	br	20bb00 <_gp+0xffdf9eec>
  20c21c:	dc002715 	stw	r16,156(sp)
  20c220:	d8002515 	stw	zero,148(sp)
  20c224:	1f3ff404 	addi	fp,r3,-48
  20c228:	0009883a 	mov	r4,zero
  20c22c:	b021883a 	mov	r16,r22
  20c230:	01400284 	movi	r5,10
  20c234:	02032780 	call	203278 <__mulsi3>
  20c238:	80c00007 	ldb	r3,0(r16)
  20c23c:	e089883a 	add	r4,fp,r2
  20c240:	b5800044 	addi	r22,r22,1
  20c244:	1f3ff404 	addi	fp,r3,-48
  20c248:	b021883a 	mov	r16,r22
  20c24c:	af3ff82e 	bgeu	r21,fp,20c230 <_gp+0xffdfa61c>
  20c250:	d9002515 	stw	r4,148(sp)
  20c254:	dc002717 	ldw	r16,156(sp)
  20c258:	003e2a06 	br	20bb04 <_gp+0xffdf9ef0>
  20c25c:	9cc03fcc 	andi	r19,r19,255
  20c260:	b811883a 	mov	r8,r23
  20c264:	9802e91e 	bne	r19,zero,20ce0c <___vfiprintf_internal_r+0x1480>
  20c268:	8c400414 	ori	r17,r17,16
  20c26c:	8880080c 	andi	r2,r17,32
  20c270:	103fb81e 	bne	r2,zero,20c154 <_gp+0xffdfa540>
  20c274:	8880040c 	andi	r2,r17,16
  20c278:	10022e26 	beq	r2,zero,20cb34 <___vfiprintf_internal_r+0x11a8>
  20c27c:	d9402217 	ldw	r5,136(sp)
  20c280:	2cc00017 	ldw	r19,0(r5)
  20c284:	29400104 	addi	r5,r5,4
  20c288:	d9402215 	stw	r5,136(sp)
  20c28c:	9829d7fa 	srai	r20,r19,31
  20c290:	a005883a 	mov	r2,r20
  20c294:	003fb506 	br	20c16c <_gp+0xffdfa558>
  20c298:	9cc03fcc 	andi	r19,r19,255
  20c29c:	b811883a 	mov	r8,r23
  20c2a0:	9802fa1e 	bne	r19,zero,20ce8c <___vfiprintf_internal_r+0x1500>
  20c2a4:	8c400414 	ori	r17,r17,16
  20c2a8:	8880080c 	andi	r2,r17,32
  20c2ac:	103f661e 	bne	r2,zero,20c048 <_gp+0xffdfa434>
  20c2b0:	8880040c 	andi	r2,r17,16
  20c2b4:	10020626 	beq	r2,zero,20cad0 <___vfiprintf_internal_r+0x1144>
  20c2b8:	d9402217 	ldw	r5,136(sp)
  20c2bc:	d8001d85 	stb	zero,118(sp)
  20c2c0:	0029883a 	mov	r20,zero
  20c2c4:	28800104 	addi	r2,r5,4
  20c2c8:	2cc00017 	ldw	r19,0(r5)
  20c2cc:	80020816 	blt	r16,zero,20caf0 <___vfiprintf_internal_r+0x1164>
  20c2d0:	00ffdfc4 	movi	r3,-129
  20c2d4:	d8802215 	stw	r2,136(sp)
  20c2d8:	88e2703a 	and	r17,r17,r3
  20c2dc:	983f651e 	bne	r19,zero,20c074 <_gp+0xffdfa460>
  20c2e0:	002b883a 	mov	r21,zero
  20c2e4:	8002cf26 	beq	r16,zero,20ce24 <___vfiprintf_internal_r+0x1498>
  20c2e8:	0027883a 	mov	r19,zero
  20c2ec:	0029883a 	mov	r20,zero
  20c2f0:	003f6106 	br	20c078 <_gp+0xffdfa464>
  20c2f4:	9cc03fcc 	andi	r19,r19,255
  20c2f8:	b811883a 	mov	r8,r23
  20c2fc:	9802e01e 	bne	r19,zero,20ce80 <___vfiprintf_internal_r+0x14f4>
  20c300:	8c400414 	ori	r17,r17,16
  20c304:	8880080c 	andi	r2,r17,32
  20c308:	1000641e 	bne	r2,zero,20c49c <___vfiprintf_internal_r+0xb10>
  20c30c:	8880040c 	andi	r2,r17,16
  20c310:	1001c81e 	bne	r2,zero,20ca34 <___vfiprintf_internal_r+0x10a8>
  20c314:	8880100c 	andi	r2,r17,64
  20c318:	d8001d85 	stb	zero,118(sp)
  20c31c:	1002281e 	bne	r2,zero,20cbc0 <___vfiprintf_internal_r+0x1234>
  20c320:	d9002217 	ldw	r4,136(sp)
  20c324:	0029883a 	mov	r20,zero
  20c328:	20800104 	addi	r2,r4,4
  20c32c:	24c00017 	ldw	r19,0(r4)
  20c330:	8001c60e 	bge	r16,zero,20ca4c <___vfiprintf_internal_r+0x10c0>
  20c334:	d8802215 	stw	r2,136(sp)
  20c338:	002b883a 	mov	r21,zero
  20c33c:	9d04b03a 	or	r2,r19,r20
  20c340:	103f911e 	bne	r2,zero,20c188 <_gp+0xffdfa574>
  20c344:	00800044 	movi	r2,1
  20c348:	10803fcc 	andi	r2,r2,255
  20c34c:	00c00044 	movi	r3,1
  20c350:	10c05f26 	beq	r2,r3,20c4d0 <___vfiprintf_internal_r+0xb44>
  20c354:	00c00084 	movi	r3,2
  20c358:	10ffe31e 	bne	r2,r3,20c2e8 <_gp+0xffdfa6d4>
  20c35c:	0027883a 	mov	r19,zero
  20c360:	0029883a 	mov	r20,zero
  20c364:	00015106 	br	20c8ac <___vfiprintf_internal_r+0xf20>
  20c368:	9cc03fcc 	andi	r19,r19,255
  20c36c:	b811883a 	mov	r8,r23
  20c370:	9802c01e 	bne	r19,zero,20ce74 <___vfiprintf_internal_r+0x14e8>
  20c374:	01400874 	movhi	r5,33
  20c378:	295afe04 	addi	r5,r5,27640
  20c37c:	d9402615 	stw	r5,152(sp)
  20c380:	8880080c 	andi	r2,r17,32
  20c384:	103f541e 	bne	r2,zero,20c0d8 <_gp+0xffdfa4c4>
  20c388:	8880040c 	andi	r2,r17,16
  20c38c:	1001f226 	beq	r2,zero,20cb58 <___vfiprintf_internal_r+0x11cc>
  20c390:	d9402217 	ldw	r5,136(sp)
  20c394:	0029883a 	mov	r20,zero
  20c398:	2cc00017 	ldw	r19,0(r5)
  20c39c:	29400104 	addi	r5,r5,4
  20c3a0:	d9402215 	stw	r5,136(sp)
  20c3a4:	003f5106 	br	20c0ec <_gp+0xffdfa4d8>
  20c3a8:	d8c02217 	ldw	r3,136(sp)
  20c3ac:	b811883a 	mov	r8,r23
  20c3b0:	d8001d85 	stb	zero,118(sp)
  20c3b4:	1dc00017 	ldw	r23,0(r3)
  20c3b8:	1f000104 	addi	fp,r3,4
  20c3bc:	b8025926 	beq	r23,zero,20cd24 <___vfiprintf_internal_r+0x1398>
  20c3c0:	80023316 	blt	r16,zero,20cc90 <___vfiprintf_internal_r+0x1304>
  20c3c4:	800d883a 	mov	r6,r16
  20c3c8:	000b883a 	mov	r5,zero
  20c3cc:	b809883a 	mov	r4,r23
  20c3d0:	da002a15 	stw	r8,168(sp)
  20c3d4:	02099640 	call	209964 <memchr>
  20c3d8:	da002a17 	ldw	r8,168(sp)
  20c3dc:	10026826 	beq	r2,zero,20cd80 <___vfiprintf_internal_r+0x13f4>
  20c3e0:	15e9c83a 	sub	r20,r2,r23
  20c3e4:	dd401d83 	ldbu	r21,118(sp)
  20c3e8:	df002215 	stw	fp,136(sp)
  20c3ec:	0021883a 	mov	r16,zero
  20c3f0:	003e6906 	br	20bd98 <_gp+0xffdfa184>
  20c3f4:	9cc03fcc 	andi	r19,r19,255
  20c3f8:	b811883a 	mov	r8,r23
  20c3fc:	983fc126 	beq	r19,zero,20c304 <_gp+0xffdfa6f0>
  20c400:	d8c02303 	ldbu	r3,140(sp)
  20c404:	d8c01d85 	stb	r3,118(sp)
  20c408:	003fbe06 	br	20c304 <_gp+0xffdfa6f0>
  20c40c:	d9002217 	ldw	r4,136(sp)
  20c410:	d9402217 	ldw	r5,136(sp)
  20c414:	21000017 	ldw	r4,0(r4)
  20c418:	28800104 	addi	r2,r5,4
  20c41c:	d9002515 	stw	r4,148(sp)
  20c420:	203e3d16 	blt	r4,zero,20bd18 <_gp+0xffdfa104>
  20c424:	d8802215 	stw	r2,136(sp)
  20c428:	b0c00007 	ldb	r3,0(r22)
  20c42c:	003db406 	br	20bb00 <_gp+0xffdf9eec>
  20c430:	00c00ac4 	movi	r3,43
  20c434:	d8c02305 	stb	r3,140(sp)
  20c438:	04c00044 	movi	r19,1
  20c43c:	b0c00007 	ldb	r3,0(r22)
  20c440:	003daf06 	br	20bb00 <_gp+0xffdf9eec>
  20c444:	b0c00007 	ldb	r3,0(r22)
  20c448:	01000a84 	movi	r4,42
  20c44c:	b4000044 	addi	r16,r22,1
  20c450:	19025e26 	beq	r3,r4,20cdcc <___vfiprintf_internal_r+0x1440>
  20c454:	1f3ff404 	addi	fp,r3,-48
  20c458:	0009883a 	mov	r4,zero
  20c45c:	af025236 	bltu	r21,fp,20cda8 <___vfiprintf_internal_r+0x141c>
  20c460:	01400284 	movi	r5,10
  20c464:	02032780 	call	203278 <__mulsi3>
  20c468:	80c00007 	ldb	r3,0(r16)
  20c46c:	1709883a 	add	r4,r2,fp
  20c470:	85800044 	addi	r22,r16,1
  20c474:	1f3ff404 	addi	fp,r3,-48
  20c478:	b021883a 	mov	r16,r22
  20c47c:	af3ff82e 	bgeu	r21,fp,20c460 <_gp+0xffdfa84c>
  20c480:	2021883a 	mov	r16,r4
  20c484:	203d9f0e 	bge	r4,zero,20bb04 <_gp+0xffdf9ef0>
  20c488:	043fffc4 	movi	r16,-1
  20c48c:	003d9d06 	br	20bb04 <_gp+0xffdf9ef0>
  20c490:	8c401014 	ori	r17,r17,64
  20c494:	b0c00007 	ldb	r3,0(r22)
  20c498:	003d9906 	br	20bb00 <_gp+0xffdf9eec>
  20c49c:	d9002217 	ldw	r4,136(sp)
  20c4a0:	d8001d85 	stb	zero,118(sp)
  20c4a4:	20c00204 	addi	r3,r4,8
  20c4a8:	24c00017 	ldw	r19,0(r4)
  20c4ac:	25000117 	ldw	r20,4(r4)
  20c4b0:	8001e716 	blt	r16,zero,20cc50 <___vfiprintf_internal_r+0x12c4>
  20c4b4:	013fdfc4 	movi	r4,-129
  20c4b8:	9d04b03a 	or	r2,r19,r20
  20c4bc:	d8c02215 	stw	r3,136(sp)
  20c4c0:	8922703a 	and	r17,r17,r4
  20c4c4:	002b883a 	mov	r21,zero
  20c4c8:	103f2f1e 	bne	r2,zero,20c188 <_gp+0xffdfa574>
  20c4cc:	803e2f26 	beq	r16,zero,20bd8c <_gp+0xffdfa178>
  20c4d0:	0027883a 	mov	r19,zero
  20c4d4:	9cc00c04 	addi	r19,r19,48
  20c4d8:	dcc019c5 	stb	r19,103(sp)
  20c4dc:	dd002817 	ldw	r20,160(sp)
  20c4e0:	ddc019c4 	addi	r23,sp,103
  20c4e4:	003e2c06 	br	20bd98 <_gp+0xffdfa184>
  20c4e8:	9cc03fcc 	andi	r19,r19,255
  20c4ec:	b811883a 	mov	r8,r23
  20c4f0:	9802571e 	bne	r19,zero,20ce50 <___vfiprintf_internal_r+0x14c4>
  20c4f4:	18005726 	beq	r3,zero,20c654 <___vfiprintf_internal_r+0xcc8>
  20c4f8:	04c00044 	movi	r19,1
  20c4fc:	d8c01005 	stb	r3,64(sp)
  20c500:	d8001d85 	stb	zero,118(sp)
  20c504:	9829883a 	mov	r20,r19
  20c508:	ddc01004 	addi	r23,sp,64
  20c50c:	003f0a06 	br	20c138 <_gp+0xffdfa524>
  20c510:	d9402017 	ldw	r5,128(sp)
  20c514:	d9002117 	ldw	r4,132(sp)
  20c518:	d9801a04 	addi	r6,sp,104
  20c51c:	da802a15 	stw	r10,168(sp)
  20c520:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c524:	da802a17 	ldw	r10,168(sp)
  20c528:	1000501e 	bne	r2,zero,20c66c <___vfiprintf_internal_r+0xce0>
  20c52c:	d9801b17 	ldw	r6,108(sp)
  20c530:	d8801c17 	ldw	r2,112(sp)
  20c534:	d811883a 	mov	r8,sp
  20c538:	31000044 	addi	r4,r6,1
  20c53c:	003e3606 	br	20be18 <_gp+0xffdfa204>
  20c540:	d9001b17 	ldw	r4,108(sp)
  20c544:	d8801c17 	ldw	r2,112(sp)
  20c548:	21400044 	addi	r5,r4,1
  20c54c:	d9801d87 	ldb	r6,118(sp)
  20c550:	303e5226 	beq	r6,zero,20be9c <_gp+0xffdfa288>
  20c554:	01800044 	movi	r6,1
  20c558:	d9001d84 	addi	r4,sp,118
  20c55c:	1185883a 	add	r2,r2,r6
  20c560:	41000015 	stw	r4,0(r8)
  20c564:	41800115 	stw	r6,4(r8)
  20c568:	d8801c15 	stw	r2,112(sp)
  20c56c:	d9401b15 	stw	r5,108(sp)
  20c570:	010001c4 	movi	r4,7
  20c574:	2140b00e 	bge	r4,r5,20c838 <___vfiprintf_internal_r+0xeac>
  20c578:	1000f61e 	bne	r2,zero,20c954 <___vfiprintf_internal_r+0xfc8>
  20c57c:	3800b31e 	bne	r7,zero,20c84c <___vfiprintf_internal_r+0xec0>
  20c580:	0009883a 	mov	r4,zero
  20c584:	300b883a 	mov	r5,r6
  20c588:	d811883a 	mov	r8,sp
  20c58c:	01802004 	movi	r6,128
  20c590:	19be5226 	beq	r3,r6,20bedc <_gp+0xffdfa2c8>
  20c594:	8521c83a 	sub	r16,r16,r20
  20c598:	043e790e 	bge	zero,r16,20bf80 <_gp+0xffdfa36c>
  20c59c:	05400404 	movi	r21,16
  20c5a0:	ac01b00e 	bge	r21,r16,20cc64 <___vfiprintf_internal_r+0x12d8>
  20c5a4:	01400874 	movhi	r5,33
  20c5a8:	295b6404 	addi	r5,r5,28048
  20c5ac:	d9402315 	stw	r5,140(sp)
  20c5b0:	070001c4 	movi	fp,7
  20c5b4:	00000506 	br	20c5cc <___vfiprintf_internal_r+0xc40>
  20c5b8:	21400084 	addi	r5,r4,2
  20c5bc:	42000204 	addi	r8,r8,8
  20c5c0:	1809883a 	mov	r4,r3
  20c5c4:	843ffc04 	addi	r16,r16,-16
  20c5c8:	ac000d0e 	bge	r21,r16,20c600 <___vfiprintf_internal_r+0xc74>
  20c5cc:	10800404 	addi	r2,r2,16
  20c5d0:	20c00044 	addi	r3,r4,1
  20c5d4:	44800015 	stw	r18,0(r8)
  20c5d8:	45400115 	stw	r21,4(r8)
  20c5dc:	d8801c15 	stw	r2,112(sp)
  20c5e0:	d8c01b15 	stw	r3,108(sp)
  20c5e4:	e0fff40e 	bge	fp,r3,20c5b8 <_gp+0xffdfa9a4>
  20c5e8:	1000101e 	bne	r2,zero,20c62c <___vfiprintf_internal_r+0xca0>
  20c5ec:	843ffc04 	addi	r16,r16,-16
  20c5f0:	01400044 	movi	r5,1
  20c5f4:	0009883a 	mov	r4,zero
  20c5f8:	d811883a 	mov	r8,sp
  20c5fc:	ac3ff316 	blt	r21,r16,20c5cc <_gp+0xffdfa9b8>
  20c600:	d8c02317 	ldw	r3,140(sp)
  20c604:	1405883a 	add	r2,r2,r16
  20c608:	44000115 	stw	r16,4(r8)
  20c60c:	40c00015 	stw	r3,0(r8)
  20c610:	d8801c15 	stw	r2,112(sp)
  20c614:	d9401b15 	stw	r5,108(sp)
  20c618:	00c001c4 	movi	r3,7
  20c61c:	19401916 	blt	r3,r5,20c684 <___vfiprintf_internal_r+0xcf8>
  20c620:	42000204 	addi	r8,r8,8
  20c624:	29400044 	addi	r5,r5,1
  20c628:	003e5506 	br	20bf80 <_gp+0xffdfa36c>
  20c62c:	d9402017 	ldw	r5,128(sp)
  20c630:	d9002117 	ldw	r4,132(sp)
  20c634:	d9801a04 	addi	r6,sp,104
  20c638:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c63c:	10000b1e 	bne	r2,zero,20c66c <___vfiprintf_internal_r+0xce0>
  20c640:	d9001b17 	ldw	r4,108(sp)
  20c644:	d8801c17 	ldw	r2,112(sp)
  20c648:	d811883a 	mov	r8,sp
  20c64c:	21400044 	addi	r5,r4,1
  20c650:	003fdc06 	br	20c5c4 <_gp+0xffdfa9b0>
  20c654:	d8801c17 	ldw	r2,112(sp)
  20c658:	10000426 	beq	r2,zero,20c66c <___vfiprintf_internal_r+0xce0>
  20c65c:	d9402017 	ldw	r5,128(sp)
  20c660:	d9002117 	ldw	r4,132(sp)
  20c664:	d9801a04 	addi	r6,sp,104
  20c668:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c66c:	d9402017 	ldw	r5,128(sp)
  20c670:	2880030b 	ldhu	r2,12(r5)
  20c674:	1080100c 	andi	r2,r2,64
  20c678:	10014d1e 	bne	r2,zero,20cbb0 <___vfiprintf_internal_r+0x1224>
  20c67c:	d8802417 	ldw	r2,144(sp)
  20c680:	003d9706 	br	20bce0 <_gp+0xffdfa0cc>
  20c684:	1000d21e 	bne	r2,zero,20c9d0 <___vfiprintf_internal_r+0x1044>
  20c688:	00c00044 	movi	r3,1
  20c68c:	a005883a 	mov	r2,r20
  20c690:	ddc00015 	stw	r23,0(sp)
  20c694:	dd000115 	stw	r20,4(sp)
  20c698:	dd001c15 	stw	r20,112(sp)
  20c69c:	d8c01b15 	stw	r3,108(sp)
  20c6a0:	d811883a 	mov	r8,sp
  20c6a4:	42000204 	addi	r8,r8,8
  20c6a8:	8c40010c 	andi	r17,r17,4
  20c6ac:	88004026 	beq	r17,zero,20c7b0 <___vfiprintf_internal_r+0xe24>
  20c6b0:	d9002517 	ldw	r4,148(sp)
  20c6b4:	24e3c83a 	sub	r17,r4,r19
  20c6b8:	04403d0e 	bge	zero,r17,20c7b0 <___vfiprintf_internal_r+0xe24>
  20c6bc:	04000404 	movi	r16,16
  20c6c0:	8441a90e 	bge	r16,r17,20cd68 <___vfiprintf_internal_r+0x13dc>
  20c6c4:	00c00874 	movhi	r3,33
  20c6c8:	18db6804 	addi	r3,r3,28064
  20c6cc:	d9001b17 	ldw	r4,108(sp)
  20c6d0:	d8c02315 	stw	r3,140(sp)
  20c6d4:	050001c4 	movi	r20,7
  20c6d8:	dd402117 	ldw	r21,132(sp)
  20c6dc:	ddc02017 	ldw	r23,128(sp)
  20c6e0:	00000506 	br	20c6f8 <___vfiprintf_internal_r+0xd6c>
  20c6e4:	21400084 	addi	r5,r4,2
  20c6e8:	42000204 	addi	r8,r8,8
  20c6ec:	1809883a 	mov	r4,r3
  20c6f0:	8c7ffc04 	addi	r17,r17,-16
  20c6f4:	84400f0e 	bge	r16,r17,20c734 <___vfiprintf_internal_r+0xda8>
  20c6f8:	01400874 	movhi	r5,33
  20c6fc:	10800404 	addi	r2,r2,16
  20c700:	20c00044 	addi	r3,r4,1
  20c704:	295b6804 	addi	r5,r5,28064
  20c708:	41400015 	stw	r5,0(r8)
  20c70c:	44000115 	stw	r16,4(r8)
  20c710:	d8801c15 	stw	r2,112(sp)
  20c714:	d8c01b15 	stw	r3,108(sp)
  20c718:	a0fff20e 	bge	r20,r3,20c6e4 <_gp+0xffdfaad0>
  20c71c:	1000141e 	bne	r2,zero,20c770 <___vfiprintf_internal_r+0xde4>
  20c720:	8c7ffc04 	addi	r17,r17,-16
  20c724:	01400044 	movi	r5,1
  20c728:	0009883a 	mov	r4,zero
  20c72c:	d811883a 	mov	r8,sp
  20c730:	847ff116 	blt	r16,r17,20c6f8 <_gp+0xffdfaae4>
  20c734:	d8c02317 	ldw	r3,140(sp)
  20c738:	1445883a 	add	r2,r2,r17
  20c73c:	44400115 	stw	r17,4(r8)
  20c740:	40c00015 	stw	r3,0(r8)
  20c744:	d8801c15 	stw	r2,112(sp)
  20c748:	d9401b15 	stw	r5,108(sp)
  20c74c:	00c001c4 	movi	r3,7
  20c750:	1940170e 	bge	r3,r5,20c7b0 <___vfiprintf_internal_r+0xe24>
  20c754:	1000101e 	bne	r2,zero,20c798 <___vfiprintf_internal_r+0xe0c>
  20c758:	d8802517 	ldw	r2,148(sp)
  20c75c:	14c11616 	blt	r2,r19,20cbb8 <___vfiprintf_internal_r+0x122c>
  20c760:	d9002417 	ldw	r4,144(sp)
  20c764:	2089883a 	add	r4,r4,r2
  20c768:	d9002415 	stw	r4,144(sp)
  20c76c:	003e1806 	br	20bfd0 <_gp+0xffdfa3bc>
  20c770:	d9801a04 	addi	r6,sp,104
  20c774:	b80b883a 	mov	r5,r23
  20c778:	a809883a 	mov	r4,r21
  20c77c:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c780:	103fba1e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c784:	d9001b17 	ldw	r4,108(sp)
  20c788:	d8801c17 	ldw	r2,112(sp)
  20c78c:	d811883a 	mov	r8,sp
  20c790:	21400044 	addi	r5,r4,1
  20c794:	003fd606 	br	20c6f0 <_gp+0xffdfaadc>
  20c798:	d9402017 	ldw	r5,128(sp)
  20c79c:	d9002117 	ldw	r4,132(sp)
  20c7a0:	d9801a04 	addi	r6,sp,104
  20c7a4:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c7a8:	103fb01e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c7ac:	d8801c17 	ldw	r2,112(sp)
  20c7b0:	d8c02517 	ldw	r3,148(sp)
  20c7b4:	1cc0010e 	bge	r3,r19,20c7bc <___vfiprintf_internal_r+0xe30>
  20c7b8:	9807883a 	mov	r3,r19
  20c7bc:	d9002417 	ldw	r4,144(sp)
  20c7c0:	20c9883a 	add	r4,r4,r3
  20c7c4:	d9002415 	stw	r4,144(sp)
  20c7c8:	103e0126 	beq	r2,zero,20bfd0 <_gp+0xffdfa3bc>
  20c7cc:	d9402017 	ldw	r5,128(sp)
  20c7d0:	d9002117 	ldw	r4,132(sp)
  20c7d4:	d9801a04 	addi	r6,sp,104
  20c7d8:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c7dc:	103dfc26 	beq	r2,zero,20bfd0 <_gp+0xffdfa3bc>
  20c7e0:	003fa206 	br	20c66c <_gp+0xffdfaa58>
  20c7e4:	d9402017 	ldw	r5,128(sp)
  20c7e8:	d9002117 	ldw	r4,132(sp)
  20c7ec:	d9801a04 	addi	r6,sp,104
  20c7f0:	d9c02b15 	stw	r7,172(sp)
  20c7f4:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c7f8:	d9c02b17 	ldw	r7,172(sp)
  20c7fc:	103f9b1e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c800:	d9001b17 	ldw	r4,108(sp)
  20c804:	d8801c17 	ldw	r2,112(sp)
  20c808:	d811883a 	mov	r8,sp
  20c80c:	21800044 	addi	r6,r4,1
  20c810:	003dbf06 	br	20bf10 <_gp+0xffdfa2fc>
  20c814:	1000d81e 	bne	r2,zero,20cb78 <___vfiprintf_internal_r+0x11ec>
  20c818:	d9001d87 	ldb	r4,118(sp)
  20c81c:	20000a26 	beq	r4,zero,20c848 <___vfiprintf_internal_r+0xebc>
  20c820:	00800044 	movi	r2,1
  20c824:	d9001d84 	addi	r4,sp,118
  20c828:	100b883a 	mov	r5,r2
  20c82c:	d9000015 	stw	r4,0(sp)
  20c830:	d8800115 	stw	r2,4(sp)
  20c834:	d811883a 	mov	r8,sp
  20c838:	2809883a 	mov	r4,r5
  20c83c:	42000204 	addi	r8,r8,8
  20c840:	29400044 	addi	r5,r5,1
  20c844:	003d9506 	br	20be9c <_gp+0xffdfa288>
  20c848:	3800fd26 	beq	r7,zero,20cc40 <___vfiprintf_internal_r+0x12b4>
  20c84c:	00800084 	movi	r2,2
  20c850:	d9001d04 	addi	r4,sp,116
  20c854:	d9000015 	stw	r4,0(sp)
  20c858:	d8800115 	stw	r2,4(sp)
  20c85c:	01400044 	movi	r5,1
  20c860:	d811883a 	mov	r8,sp
  20c864:	2809883a 	mov	r4,r5
  20c868:	42000204 	addi	r8,r8,8
  20c86c:	29400044 	addi	r5,r5,1
  20c870:	003f4606 	br	20c58c <_gp+0xffdfa978>
  20c874:	d8802517 	ldw	r2,148(sp)
  20c878:	14c0010e 	bge	r2,r19,20c880 <___vfiprintf_internal_r+0xef4>
  20c87c:	9805883a 	mov	r2,r19
  20c880:	d9402417 	ldw	r5,144(sp)
  20c884:	288b883a 	add	r5,r5,r2
  20c888:	d9402415 	stw	r5,144(sp)
  20c88c:	003dd006 	br	20bfd0 <_gp+0xffdfa3bc>
  20c890:	d8001d85 	stb	zero,118(sp)
  20c894:	80005d16 	blt	r16,zero,20ca0c <___vfiprintf_internal_r+0x1080>
  20c898:	00ffdfc4 	movi	r3,-129
  20c89c:	9d04b03a 	or	r2,r19,r20
  20c8a0:	88e2703a 	and	r17,r17,r3
  20c8a4:	103d3726 	beq	r2,zero,20bd84 <_gp+0xffdfa170>
  20c8a8:	002b883a 	mov	r21,zero
  20c8ac:	d9002617 	ldw	r4,152(sp)
  20c8b0:	ddc01a04 	addi	r23,sp,104
  20c8b4:	988003cc 	andi	r2,r19,15
  20c8b8:	a006973a 	slli	r3,r20,28
  20c8bc:	2085883a 	add	r2,r4,r2
  20c8c0:	9826d13a 	srli	r19,r19,4
  20c8c4:	10800003 	ldbu	r2,0(r2)
  20c8c8:	a028d13a 	srli	r20,r20,4
  20c8cc:	bdffffc4 	addi	r23,r23,-1
  20c8d0:	1ce6b03a 	or	r19,r3,r19
  20c8d4:	b8800005 	stb	r2,0(r23)
  20c8d8:	9d04b03a 	or	r2,r19,r20
  20c8dc:	103ff51e 	bne	r2,zero,20c8b4 <_gp+0xffdfaca0>
  20c8e0:	d8801e17 	ldw	r2,120(sp)
  20c8e4:	15e9c83a 	sub	r20,r2,r23
  20c8e8:	003d2b06 	br	20bd98 <_gp+0xffdfa184>
  20c8ec:	d9402017 	ldw	r5,128(sp)
  20c8f0:	d9002117 	ldw	r4,132(sp)
  20c8f4:	d9801a04 	addi	r6,sp,104
  20c8f8:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c8fc:	103f5b1e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c900:	d8801c17 	ldw	r2,112(sp)
  20c904:	d811883a 	mov	r8,sp
  20c908:	003f6706 	br	20c6a8 <_gp+0xffdfaa94>
  20c90c:	d9402017 	ldw	r5,128(sp)
  20c910:	d9002117 	ldw	r4,132(sp)
  20c914:	d9801a04 	addi	r6,sp,104
  20c918:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c91c:	103f531e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c920:	d811883a 	mov	r8,sp
  20c924:	003cd906 	br	20bc8c <_gp+0xffdfa078>
  20c928:	10803fcc 	andi	r2,r2,255
  20c92c:	1080201c 	xori	r2,r2,128
  20c930:	10bfe004 	addi	r2,r2,-128
  20c934:	00c00c04 	movi	r3,48
  20c938:	10ffe926 	beq	r2,r3,20c8e0 <_gp+0xffdfaccc>
  20c93c:	b8ffffc5 	stb	r3,-1(r23)
  20c940:	d8c01e17 	ldw	r3,120(sp)
  20c944:	b8bfffc4 	addi	r2,r23,-1
  20c948:	102f883a 	mov	r23,r2
  20c94c:	18a9c83a 	sub	r20,r3,r2
  20c950:	003d1106 	br	20bd98 <_gp+0xffdfa184>
  20c954:	d9402017 	ldw	r5,128(sp)
  20c958:	d9002117 	ldw	r4,132(sp)
  20c95c:	d9801a04 	addi	r6,sp,104
  20c960:	d8c02a15 	stw	r3,168(sp)
  20c964:	d9c02b15 	stw	r7,172(sp)
  20c968:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c96c:	d8c02a17 	ldw	r3,168(sp)
  20c970:	d9c02b17 	ldw	r7,172(sp)
  20c974:	103f3d1e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c978:	d9001b17 	ldw	r4,108(sp)
  20c97c:	d8801c17 	ldw	r2,112(sp)
  20c980:	d811883a 	mov	r8,sp
  20c984:	21400044 	addi	r5,r4,1
  20c988:	003d4406 	br	20be9c <_gp+0xffdfa288>
  20c98c:	d9402017 	ldw	r5,128(sp)
  20c990:	d9002117 	ldw	r4,132(sp)
  20c994:	d9801a04 	addi	r6,sp,104
  20c998:	d8c02a15 	stw	r3,168(sp)
  20c99c:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c9a0:	d8c02a17 	ldw	r3,168(sp)
  20c9a4:	103f311e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c9a8:	d9001b17 	ldw	r4,108(sp)
  20c9ac:	d8801c17 	ldw	r2,112(sp)
  20c9b0:	d811883a 	mov	r8,sp
  20c9b4:	21400044 	addi	r5,r4,1
  20c9b8:	003ef406 	br	20c58c <_gp+0xffdfa978>
  20c9bc:	1000bd1e 	bne	r2,zero,20ccb4 <___vfiprintf_internal_r+0x1328>
  20c9c0:	01400044 	movi	r5,1
  20c9c4:	0009883a 	mov	r4,zero
  20c9c8:	d811883a 	mov	r8,sp
  20c9cc:	003ef106 	br	20c594 <_gp+0xffdfa980>
  20c9d0:	d9402017 	ldw	r5,128(sp)
  20c9d4:	d9002117 	ldw	r4,132(sp)
  20c9d8:	d9801a04 	addi	r6,sp,104
  20c9dc:	020b8780 	call	20b878 <__sprint_r.part.0>
  20c9e0:	103f221e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20c9e4:	d9401b17 	ldw	r5,108(sp)
  20c9e8:	d8801c17 	ldw	r2,112(sp)
  20c9ec:	d811883a 	mov	r8,sp
  20c9f0:	29400044 	addi	r5,r5,1
  20c9f4:	003d6206 	br	20bf80 <_gp+0xffdfa36c>
  20c9f8:	01400874 	movhi	r5,33
  20c9fc:	295b0304 	addi	r5,r5,27660
  20ca00:	d9402615 	stw	r5,152(sp)
  20ca04:	d8c02215 	stw	r3,136(sp)
  20ca08:	1023883a 	mov	r17,r2
  20ca0c:	9d04b03a 	or	r2,r19,r20
  20ca10:	103fa51e 	bne	r2,zero,20c8a8 <_gp+0xffdfac94>
  20ca14:	002b883a 	mov	r21,zero
  20ca18:	00800084 	movi	r2,2
  20ca1c:	003e4a06 	br	20c348 <_gp+0xffdfa734>
  20ca20:	01400874 	movhi	r5,33
  20ca24:	295b0304 	addi	r5,r5,27660
  20ca28:	002b883a 	mov	r21,zero
  20ca2c:	d9402615 	stw	r5,152(sp)
  20ca30:	003f9e06 	br	20c8ac <_gp+0xffdfac98>
  20ca34:	d9402217 	ldw	r5,136(sp)
  20ca38:	d8001d85 	stb	zero,118(sp)
  20ca3c:	0029883a 	mov	r20,zero
  20ca40:	28800104 	addi	r2,r5,4
  20ca44:	2cc00017 	ldw	r19,0(r5)
  20ca48:	803e3a16 	blt	r16,zero,20c334 <_gp+0xffdfa720>
  20ca4c:	00ffdfc4 	movi	r3,-129
  20ca50:	d8802215 	stw	r2,136(sp)
  20ca54:	88e2703a 	and	r17,r17,r3
  20ca58:	002b883a 	mov	r21,zero
  20ca5c:	983e9b26 	beq	r19,zero,20c4cc <_gp+0xffdfa8b8>
  20ca60:	00800244 	movi	r2,9
  20ca64:	14fdc936 	bltu	r2,r19,20c18c <_gp+0xffdfa578>
  20ca68:	003e9a06 	br	20c4d4 <_gp+0xffdfa8c0>
  20ca6c:	00800c04 	movi	r2,48
  20ca70:	d8c01d45 	stb	r3,117(sp)
  20ca74:	d8801d05 	stb	r2,116(sp)
  20ca78:	d8001d85 	stb	zero,118(sp)
  20ca7c:	88c00094 	ori	r3,r17,2
  20ca80:	80009c16 	blt	r16,zero,20ccf4 <___vfiprintf_internal_r+0x1368>
  20ca84:	00bfdfc4 	movi	r2,-129
  20ca88:	88a2703a 	and	r17,r17,r2
  20ca8c:	8c400094 	ori	r17,r17,2
  20ca90:	002b883a 	mov	r21,zero
  20ca94:	003f8506 	br	20c8ac <_gp+0xffdfac98>
  20ca98:	b029883a 	mov	r20,r22
  20ca9c:	003c0b06 	br	20bacc <_gp+0xffdf9eb8>
  20caa0:	04e7c83a 	sub	r19,zero,r19
  20caa4:	05400b44 	movi	r21,45
  20caa8:	9804c03a 	cmpne	r2,r19,zero
  20caac:	0529c83a 	sub	r20,zero,r20
  20cab0:	dd401d85 	stb	r21,118(sp)
  20cab4:	a0a9c83a 	sub	r20,r20,r2
  20cab8:	80009716 	blt	r16,zero,20cd18 <___vfiprintf_internal_r+0x138c>
  20cabc:	00bfdfc4 	movi	r2,-129
  20cac0:	88a2703a 	and	r17,r17,r2
  20cac4:	003db006 	br	20c188 <_gp+0xffdfa574>
  20cac8:	b0c00007 	ldb	r3,0(r22)
  20cacc:	003c0c06 	br	20bb00 <_gp+0xffdf9eec>
  20cad0:	8880100c 	andi	r2,r17,64
  20cad4:	d8001d85 	stb	zero,118(sp)
  20cad8:	1000461e 	bne	r2,zero,20cbf4 <___vfiprintf_internal_r+0x1268>
  20cadc:	d9002217 	ldw	r4,136(sp)
  20cae0:	0029883a 	mov	r20,zero
  20cae4:	20800104 	addi	r2,r4,4
  20cae8:	24c00017 	ldw	r19,0(r4)
  20caec:	803df80e 	bge	r16,zero,20c2d0 <_gp+0xffdfa6bc>
  20caf0:	9d06b03a 	or	r3,r19,r20
  20caf4:	d8802215 	stw	r2,136(sp)
  20caf8:	183d5e1e 	bne	r3,zero,20c074 <_gp+0xffdfa460>
  20cafc:	002b883a 	mov	r21,zero
  20cb00:	0005883a 	mov	r2,zero
  20cb04:	003e1006 	br	20c348 <_gp+0xffdfa734>
  20cb08:	8880040c 	andi	r2,r17,16
  20cb0c:	1000321e 	bne	r2,zero,20cbd8 <___vfiprintf_internal_r+0x124c>
  20cb10:	8c40100c 	andi	r17,r17,64
  20cb14:	88008d26 	beq	r17,zero,20cd4c <___vfiprintf_internal_r+0x13c0>
  20cb18:	d9402217 	ldw	r5,136(sp)
  20cb1c:	d8c02417 	ldw	r3,144(sp)
  20cb20:	28800017 	ldw	r2,0(r5)
  20cb24:	29400104 	addi	r5,r5,4
  20cb28:	d9402215 	stw	r5,136(sp)
  20cb2c:	10c0000d 	sth	r3,0(r2)
  20cb30:	003bca06 	br	20ba5c <_gp+0xffdf9e48>
  20cb34:	8880100c 	andi	r2,r17,64
  20cb38:	10003a26 	beq	r2,zero,20cc24 <___vfiprintf_internal_r+0x1298>
  20cb3c:	d8802217 	ldw	r2,136(sp)
  20cb40:	14c0000f 	ldh	r19,0(r2)
  20cb44:	10800104 	addi	r2,r2,4
  20cb48:	d8802215 	stw	r2,136(sp)
  20cb4c:	9829d7fa 	srai	r20,r19,31
  20cb50:	a005883a 	mov	r2,r20
  20cb54:	003d8506 	br	20c16c <_gp+0xffdfa558>
  20cb58:	8880100c 	andi	r2,r17,64
  20cb5c:	10002b26 	beq	r2,zero,20cc0c <___vfiprintf_internal_r+0x1280>
  20cb60:	d8802217 	ldw	r2,136(sp)
  20cb64:	0029883a 	mov	r20,zero
  20cb68:	14c0000b 	ldhu	r19,0(r2)
  20cb6c:	10800104 	addi	r2,r2,4
  20cb70:	d8802215 	stw	r2,136(sp)
  20cb74:	003d5d06 	br	20c0ec <_gp+0xffdfa4d8>
  20cb78:	d9402017 	ldw	r5,128(sp)
  20cb7c:	d9002117 	ldw	r4,132(sp)
  20cb80:	d9801a04 	addi	r6,sp,104
  20cb84:	d8c02a15 	stw	r3,168(sp)
  20cb88:	d9c02b15 	stw	r7,172(sp)
  20cb8c:	020b8780 	call	20b878 <__sprint_r.part.0>
  20cb90:	d8c02a17 	ldw	r3,168(sp)
  20cb94:	d9c02b17 	ldw	r7,172(sp)
  20cb98:	103eb41e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20cb9c:	d9001b17 	ldw	r4,108(sp)
  20cba0:	d8801c17 	ldw	r2,112(sp)
  20cba4:	d811883a 	mov	r8,sp
  20cba8:	21400044 	addi	r5,r4,1
  20cbac:	003e6706 	br	20c54c <_gp+0xffdfa938>
  20cbb0:	00bfffc4 	movi	r2,-1
  20cbb4:	003c4a06 	br	20bce0 <_gp+0xffdfa0cc>
  20cbb8:	9805883a 	mov	r2,r19
  20cbbc:	003ee806 	br	20c760 <_gp+0xffdfab4c>
  20cbc0:	d8c02217 	ldw	r3,136(sp)
  20cbc4:	0029883a 	mov	r20,zero
  20cbc8:	18800104 	addi	r2,r3,4
  20cbcc:	1cc0000b 	ldhu	r19,0(r3)
  20cbd0:	803f9e0e 	bge	r16,zero,20ca4c <_gp+0xffdfae38>
  20cbd4:	003dd706 	br	20c334 <_gp+0xffdfa720>
  20cbd8:	d8c02217 	ldw	r3,136(sp)
  20cbdc:	d9002417 	ldw	r4,144(sp)
  20cbe0:	18800017 	ldw	r2,0(r3)
  20cbe4:	18c00104 	addi	r3,r3,4
  20cbe8:	d8c02215 	stw	r3,136(sp)
  20cbec:	11000015 	stw	r4,0(r2)
  20cbf0:	003b9a06 	br	20ba5c <_gp+0xffdf9e48>
  20cbf4:	d8c02217 	ldw	r3,136(sp)
  20cbf8:	0029883a 	mov	r20,zero
  20cbfc:	18800104 	addi	r2,r3,4
  20cc00:	1cc0000b 	ldhu	r19,0(r3)
  20cc04:	803db20e 	bge	r16,zero,20c2d0 <_gp+0xffdfa6bc>
  20cc08:	003fb906 	br	20caf0 <_gp+0xffdfaedc>
  20cc0c:	d9002217 	ldw	r4,136(sp)
  20cc10:	0029883a 	mov	r20,zero
  20cc14:	24c00017 	ldw	r19,0(r4)
  20cc18:	21000104 	addi	r4,r4,4
  20cc1c:	d9002215 	stw	r4,136(sp)
  20cc20:	003d3206 	br	20c0ec <_gp+0xffdfa4d8>
  20cc24:	d8c02217 	ldw	r3,136(sp)
  20cc28:	1cc00017 	ldw	r19,0(r3)
  20cc2c:	18c00104 	addi	r3,r3,4
  20cc30:	d8c02215 	stw	r3,136(sp)
  20cc34:	9829d7fa 	srai	r20,r19,31
  20cc38:	a005883a 	mov	r2,r20
  20cc3c:	003d4b06 	br	20c16c <_gp+0xffdfa558>
  20cc40:	0009883a 	mov	r4,zero
  20cc44:	01400044 	movi	r5,1
  20cc48:	d811883a 	mov	r8,sp
  20cc4c:	003e4f06 	br	20c58c <_gp+0xffdfa978>
  20cc50:	d8c02215 	stw	r3,136(sp)
  20cc54:	002b883a 	mov	r21,zero
  20cc58:	003db806 	br	20c33c <_gp+0xffdfa728>
  20cc5c:	d811883a 	mov	r8,sp
  20cc60:	003e9606 	br	20c6bc <_gp+0xffdfaaa8>
  20cc64:	01000874 	movhi	r4,33
  20cc68:	211b6404 	addi	r4,r4,28048
  20cc6c:	d9002315 	stw	r4,140(sp)
  20cc70:	003e6306 	br	20c600 <_gp+0xffdfa9ec>
  20cc74:	b0c00043 	ldbu	r3,1(r22)
  20cc78:	8c400814 	ori	r17,r17,32
  20cc7c:	b5800044 	addi	r22,r22,1
  20cc80:	18c03fcc 	andi	r3,r3,255
  20cc84:	18c0201c 	xori	r3,r3,128
  20cc88:	18ffe004 	addi	r3,r3,-128
  20cc8c:	003b9c06 	br	20bb00 <_gp+0xffdf9eec>
  20cc90:	b809883a 	mov	r4,r23
  20cc94:	da002a15 	stw	r8,168(sp)
  20cc98:	0203f940 	call	203f94 <strlen>
  20cc9c:	1029883a 	mov	r20,r2
  20cca0:	dd401d83 	ldbu	r21,118(sp)
  20cca4:	df002215 	stw	fp,136(sp)
  20cca8:	0021883a 	mov	r16,zero
  20ccac:	da002a17 	ldw	r8,168(sp)
  20ccb0:	003c3906 	br	20bd98 <_gp+0xffdfa184>
  20ccb4:	d9402017 	ldw	r5,128(sp)
  20ccb8:	d9002117 	ldw	r4,132(sp)
  20ccbc:	d9801a04 	addi	r6,sp,104
  20ccc0:	020b8780 	call	20b878 <__sprint_r.part.0>
  20ccc4:	103e691e 	bne	r2,zero,20c66c <_gp+0xffdfaa58>
  20ccc8:	d9001b17 	ldw	r4,108(sp)
  20cccc:	d8801c17 	ldw	r2,112(sp)
  20ccd0:	d811883a 	mov	r8,sp
  20ccd4:	21400044 	addi	r5,r4,1
  20ccd8:	003e2e06 	br	20c594 <_gp+0xffdfa980>
  20ccdc:	01000874 	movhi	r4,33
  20cce0:	211b6804 	addi	r4,r4,28064
  20cce4:	d9002315 	stw	r4,140(sp)
  20cce8:	d9001b17 	ldw	r4,108(sp)
  20ccec:	21000044 	addi	r4,r4,1
  20ccf0:	003c5e06 	br	20be6c <_gp+0xffdfa258>
  20ccf4:	002b883a 	mov	r21,zero
  20ccf8:	00800084 	movi	r2,2
  20ccfc:	10803fcc 	andi	r2,r2,255
  20cd00:	01000044 	movi	r4,1
  20cd04:	11002b26 	beq	r2,r4,20cdb4 <___vfiprintf_internal_r+0x1428>
  20cd08:	01000084 	movi	r4,2
  20cd0c:	11002b1e 	bne	r2,r4,20cdbc <___vfiprintf_internal_r+0x1430>
  20cd10:	1823883a 	mov	r17,r3
  20cd14:	003ee506 	br	20c8ac <_gp+0xffdfac98>
  20cd18:	8807883a 	mov	r3,r17
  20cd1c:	00800044 	movi	r2,1
  20cd20:	003ff606 	br	20ccfc <_gp+0xffdfb0e8>
  20cd24:	00800184 	movi	r2,6
  20cd28:	1400012e 	bgeu	r2,r16,20cd30 <___vfiprintf_internal_r+0x13a4>
  20cd2c:	1021883a 	mov	r16,r2
  20cd30:	8029883a 	mov	r20,r16
  20cd34:	8027883a 	mov	r19,r16
  20cd38:	80002216 	blt	r16,zero,20cdc4 <___vfiprintf_internal_r+0x1438>
  20cd3c:	05c00874 	movhi	r23,33
  20cd40:	df002215 	stw	fp,136(sp)
  20cd44:	bddb0804 	addi	r23,r23,27680
  20cd48:	003cfb06 	br	20c138 <_gp+0xffdfa524>
  20cd4c:	d9002217 	ldw	r4,136(sp)
  20cd50:	d9402417 	ldw	r5,144(sp)
  20cd54:	20800017 	ldw	r2,0(r4)
  20cd58:	21000104 	addi	r4,r4,4
  20cd5c:	d9002215 	stw	r4,136(sp)
  20cd60:	11400015 	stw	r5,0(r2)
  20cd64:	003b3d06 	br	20ba5c <_gp+0xffdf9e48>
  20cd68:	01400874 	movhi	r5,33
  20cd6c:	295b6804 	addi	r5,r5,28064
  20cd70:	d9402315 	stw	r5,140(sp)
  20cd74:	d9401b17 	ldw	r5,108(sp)
  20cd78:	29400044 	addi	r5,r5,1
  20cd7c:	003e6d06 	br	20c734 <_gp+0xffdfab20>
  20cd80:	8029883a 	mov	r20,r16
  20cd84:	dd401d83 	ldbu	r21,118(sp)
  20cd88:	df002215 	stw	fp,136(sp)
  20cd8c:	0021883a 	mov	r16,zero
  20cd90:	003c0106 	br	20bd98 <_gp+0xffdfa184>
  20cd94:	00c00874 	movhi	r3,33
  20cd98:	18db6404 	addi	r3,r3,28048
  20cd9c:	d8c02315 	stw	r3,140(sp)
  20cda0:	280d883a 	mov	r6,r5
  20cda4:	003c6906 	br	20bf4c <_gp+0xffdfa338>
  20cda8:	802d883a 	mov	r22,r16
  20cdac:	0021883a 	mov	r16,zero
  20cdb0:	003b5406 	br	20bb04 <_gp+0xffdf9ef0>
  20cdb4:	1823883a 	mov	r17,r3
  20cdb8:	003cf306 	br	20c188 <_gp+0xffdfa574>
  20cdbc:	1823883a 	mov	r17,r3
  20cdc0:	003cad06 	br	20c078 <_gp+0xffdfa464>
  20cdc4:	0027883a 	mov	r19,zero
  20cdc8:	003fdc06 	br	20cd3c <_gp+0xffdfb128>
  20cdcc:	d9402217 	ldw	r5,136(sp)
  20cdd0:	8005883a 	mov	r2,r16
  20cdd4:	b0c00043 	ldbu	r3,1(r22)
  20cdd8:	2c000017 	ldw	r16,0(r5)
  20cddc:	29000104 	addi	r4,r5,4
  20cde0:	d9002215 	stw	r4,136(sp)
  20cde4:	102d883a 	mov	r22,r2
  20cde8:	803fa50e 	bge	r16,zero,20cc80 <_gp+0xffdfb06c>
  20cdec:	18c03fcc 	andi	r3,r3,255
  20cdf0:	18c0201c 	xori	r3,r3,128
  20cdf4:	043fffc4 	movi	r16,-1
  20cdf8:	18ffe004 	addi	r3,r3,-128
  20cdfc:	003b4006 	br	20bb00 <_gp+0xffdf9eec>
  20ce00:	d9402303 	ldbu	r5,140(sp)
  20ce04:	d9401d85 	stb	r5,118(sp)
  20ce08:	003cae06 	br	20c0c4 <_gp+0xffdfa4b0>
  20ce0c:	d8c02303 	ldbu	r3,140(sp)
  20ce10:	d8c01d85 	stb	r3,118(sp)
  20ce14:	003d1406 	br	20c268 <_gp+0xffdfa654>
  20ce18:	d8c02303 	ldbu	r3,140(sp)
  20ce1c:	d8c01d85 	stb	r3,118(sp)
  20ce20:	003cca06 	br	20c14c <_gp+0xffdfa538>
  20ce24:	8880004c 	andi	r2,r17,1
  20ce28:	002b883a 	mov	r21,zero
  20ce2c:	10000526 	beq	r2,zero,20ce44 <___vfiprintf_internal_r+0x14b8>
  20ce30:	00800c04 	movi	r2,48
  20ce34:	d88019c5 	stb	r2,103(sp)
  20ce38:	dd002817 	ldw	r20,160(sp)
  20ce3c:	ddc019c4 	addi	r23,sp,103
  20ce40:	003bd506 	br	20bd98 <_gp+0xffdfa184>
  20ce44:	0029883a 	mov	r20,zero
  20ce48:	ddc01a04 	addi	r23,sp,104
  20ce4c:	003bd206 	br	20bd98 <_gp+0xffdfa184>
  20ce50:	d9002303 	ldbu	r4,140(sp)
  20ce54:	d9001d85 	stb	r4,118(sp)
  20ce58:	003da606 	br	20c4f4 <_gp+0xffdfa8e0>
  20ce5c:	d8c02303 	ldbu	r3,140(sp)
  20ce60:	d8c01d85 	stb	r3,118(sp)
  20ce64:	003c7606 	br	20c040 <_gp+0xffdfa42c>
  20ce68:	d8c02303 	ldbu	r3,140(sp)
  20ce6c:	d8c01d85 	stb	r3,118(sp)
  20ce70:	003c6506 	br	20c008 <_gp+0xffdfa3f4>
  20ce74:	d9002303 	ldbu	r4,140(sp)
  20ce78:	d9001d85 	stb	r4,118(sp)
  20ce7c:	003d3d06 	br	20c374 <_gp+0xffdfa760>
  20ce80:	d8c02303 	ldbu	r3,140(sp)
  20ce84:	d8c01d85 	stb	r3,118(sp)
  20ce88:	003d1d06 	br	20c300 <_gp+0xffdfa6ec>
  20ce8c:	d8c02303 	ldbu	r3,140(sp)
  20ce90:	d8c01d85 	stb	r3,118(sp)
  20ce94:	003d0306 	br	20c2a4 <_gp+0xffdfa690>

0020ce98 <__vfiprintf_internal>:
  20ce98:	00801074 	movhi	r2,65
  20ce9c:	10a70a04 	addi	r2,r2,-25560
  20cea0:	300f883a 	mov	r7,r6
  20cea4:	280d883a 	mov	r6,r5
  20cea8:	200b883a 	mov	r5,r4
  20ceac:	11000017 	ldw	r4,0(r2)
  20ceb0:	020b98c1 	jmpi	20b98c <___vfiprintf_internal_r>

0020ceb4 <__sbprintf>:
  20ceb4:	2880030b 	ldhu	r2,12(r5)
  20ceb8:	2ac01917 	ldw	r11,100(r5)
  20cebc:	2a80038b 	ldhu	r10,14(r5)
  20cec0:	2a400717 	ldw	r9,28(r5)
  20cec4:	2a000917 	ldw	r8,36(r5)
  20cec8:	defee204 	addi	sp,sp,-1144
  20cecc:	00c10004 	movi	r3,1024
  20ced0:	dc011a15 	stw	r16,1128(sp)
  20ced4:	10bfff4c 	andi	r2,r2,65533
  20ced8:	2821883a 	mov	r16,r5
  20cedc:	d8cb883a 	add	r5,sp,r3
  20cee0:	dc811c15 	stw	r18,1136(sp)
  20cee4:	dc411b15 	stw	r17,1132(sp)
  20cee8:	dfc11d15 	stw	ra,1140(sp)
  20ceec:	2025883a 	mov	r18,r4
  20cef0:	d881030d 	sth	r2,1036(sp)
  20cef4:	dac11915 	stw	r11,1124(sp)
  20cef8:	da81038d 	sth	r10,1038(sp)
  20cefc:	da410715 	stw	r9,1052(sp)
  20cf00:	da010915 	stw	r8,1060(sp)
  20cf04:	dec10015 	stw	sp,1024(sp)
  20cf08:	dec10415 	stw	sp,1040(sp)
  20cf0c:	d8c10215 	stw	r3,1032(sp)
  20cf10:	d8c10515 	stw	r3,1044(sp)
  20cf14:	d8010615 	stw	zero,1048(sp)
  20cf18:	020b98c0 	call	20b98c <___vfiprintf_internal_r>
  20cf1c:	1023883a 	mov	r17,r2
  20cf20:	10000416 	blt	r2,zero,20cf34 <__sbprintf+0x80>
  20cf24:	d9410004 	addi	r5,sp,1024
  20cf28:	9009883a 	mov	r4,r18
  20cf2c:	02080000 	call	208000 <_fflush_r>
  20cf30:	10000d1e 	bne	r2,zero,20cf68 <__sbprintf+0xb4>
  20cf34:	d881030b 	ldhu	r2,1036(sp)
  20cf38:	1080100c 	andi	r2,r2,64
  20cf3c:	10000326 	beq	r2,zero,20cf4c <__sbprintf+0x98>
  20cf40:	8080030b 	ldhu	r2,12(r16)
  20cf44:	10801014 	ori	r2,r2,64
  20cf48:	8080030d 	sth	r2,12(r16)
  20cf4c:	8805883a 	mov	r2,r17
  20cf50:	dfc11d17 	ldw	ra,1140(sp)
  20cf54:	dc811c17 	ldw	r18,1136(sp)
  20cf58:	dc411b17 	ldw	r17,1132(sp)
  20cf5c:	dc011a17 	ldw	r16,1128(sp)
  20cf60:	dec11e04 	addi	sp,sp,1144
  20cf64:	f800283a 	ret
  20cf68:	047fffc4 	movi	r17,-1
  20cf6c:	003ff106 	br	20cf34 <_gp+0xffdfb320>

0020cf70 <__swbuf_r>:
  20cf70:	defffb04 	addi	sp,sp,-20
  20cf74:	dcc00315 	stw	r19,12(sp)
  20cf78:	dc800215 	stw	r18,8(sp)
  20cf7c:	dc000015 	stw	r16,0(sp)
  20cf80:	dfc00415 	stw	ra,16(sp)
  20cf84:	dc400115 	stw	r17,4(sp)
  20cf88:	2025883a 	mov	r18,r4
  20cf8c:	2827883a 	mov	r19,r5
  20cf90:	3021883a 	mov	r16,r6
  20cf94:	20000226 	beq	r4,zero,20cfa0 <__swbuf_r+0x30>
  20cf98:	20800e17 	ldw	r2,56(r4)
  20cf9c:	10004226 	beq	r2,zero,20d0a8 <__swbuf_r+0x138>
  20cfa0:	80800617 	ldw	r2,24(r16)
  20cfa4:	8100030b 	ldhu	r4,12(r16)
  20cfa8:	80800215 	stw	r2,8(r16)
  20cfac:	2080020c 	andi	r2,r4,8
  20cfb0:	10003626 	beq	r2,zero,20d08c <__swbuf_r+0x11c>
  20cfb4:	80c00417 	ldw	r3,16(r16)
  20cfb8:	18003426 	beq	r3,zero,20d08c <__swbuf_r+0x11c>
  20cfbc:	2088000c 	andi	r2,r4,8192
  20cfc0:	9c403fcc 	andi	r17,r19,255
  20cfc4:	10001a26 	beq	r2,zero,20d030 <__swbuf_r+0xc0>
  20cfc8:	80800017 	ldw	r2,0(r16)
  20cfcc:	81000517 	ldw	r4,20(r16)
  20cfd0:	10c7c83a 	sub	r3,r2,r3
  20cfd4:	1900200e 	bge	r3,r4,20d058 <__swbuf_r+0xe8>
  20cfd8:	18c00044 	addi	r3,r3,1
  20cfdc:	81000217 	ldw	r4,8(r16)
  20cfe0:	11400044 	addi	r5,r2,1
  20cfe4:	81400015 	stw	r5,0(r16)
  20cfe8:	213fffc4 	addi	r4,r4,-1
  20cfec:	81000215 	stw	r4,8(r16)
  20cff0:	14c00005 	stb	r19,0(r2)
  20cff4:	80800517 	ldw	r2,20(r16)
  20cff8:	10c01e26 	beq	r2,r3,20d074 <__swbuf_r+0x104>
  20cffc:	8080030b 	ldhu	r2,12(r16)
  20d000:	1080004c 	andi	r2,r2,1
  20d004:	10000226 	beq	r2,zero,20d010 <__swbuf_r+0xa0>
  20d008:	00800284 	movi	r2,10
  20d00c:	88801926 	beq	r17,r2,20d074 <__swbuf_r+0x104>
  20d010:	8805883a 	mov	r2,r17
  20d014:	dfc00417 	ldw	ra,16(sp)
  20d018:	dcc00317 	ldw	r19,12(sp)
  20d01c:	dc800217 	ldw	r18,8(sp)
  20d020:	dc400117 	ldw	r17,4(sp)
  20d024:	dc000017 	ldw	r16,0(sp)
  20d028:	dec00504 	addi	sp,sp,20
  20d02c:	f800283a 	ret
  20d030:	81401917 	ldw	r5,100(r16)
  20d034:	00b7ffc4 	movi	r2,-8193
  20d038:	21080014 	ori	r4,r4,8192
  20d03c:	2884703a 	and	r2,r5,r2
  20d040:	80801915 	stw	r2,100(r16)
  20d044:	80800017 	ldw	r2,0(r16)
  20d048:	8100030d 	sth	r4,12(r16)
  20d04c:	81000517 	ldw	r4,20(r16)
  20d050:	10c7c83a 	sub	r3,r2,r3
  20d054:	193fe016 	blt	r3,r4,20cfd8 <_gp+0xffdfb3c4>
  20d058:	800b883a 	mov	r5,r16
  20d05c:	9009883a 	mov	r4,r18
  20d060:	02080000 	call	208000 <_fflush_r>
  20d064:	1000071e 	bne	r2,zero,20d084 <__swbuf_r+0x114>
  20d068:	80800017 	ldw	r2,0(r16)
  20d06c:	00c00044 	movi	r3,1
  20d070:	003fda06 	br	20cfdc <_gp+0xffdfb3c8>
  20d074:	800b883a 	mov	r5,r16
  20d078:	9009883a 	mov	r4,r18
  20d07c:	02080000 	call	208000 <_fflush_r>
  20d080:	103fe326 	beq	r2,zero,20d010 <_gp+0xffdfb3fc>
  20d084:	00bfffc4 	movi	r2,-1
  20d088:	003fe206 	br	20d014 <_gp+0xffdfb400>
  20d08c:	800b883a 	mov	r5,r16
  20d090:	9009883a 	mov	r4,r18
  20d094:	02063e00 	call	2063e0 <__swsetup_r>
  20d098:	103ffa1e 	bne	r2,zero,20d084 <_gp+0xffdfb470>
  20d09c:	8100030b 	ldhu	r4,12(r16)
  20d0a0:	80c00417 	ldw	r3,16(r16)
  20d0a4:	003fc506 	br	20cfbc <_gp+0xffdfb3a8>
  20d0a8:	02083ec0 	call	2083ec <__sinit>
  20d0ac:	003fbc06 	br	20cfa0 <_gp+0xffdfb38c>

0020d0b0 <__swbuf>:
  20d0b0:	00801074 	movhi	r2,65
  20d0b4:	10a70a04 	addi	r2,r2,-25560
  20d0b8:	280d883a 	mov	r6,r5
  20d0bc:	200b883a 	mov	r5,r4
  20d0c0:	11000017 	ldw	r4,0(r2)
  20d0c4:	020cf701 	jmpi	20cf70 <__swbuf_r>

0020d0c8 <_write_r>:
  20d0c8:	defffd04 	addi	sp,sp,-12
  20d0cc:	2805883a 	mov	r2,r5
  20d0d0:	dc000015 	stw	r16,0(sp)
  20d0d4:	04001074 	movhi	r16,65
  20d0d8:	dc400115 	stw	r17,4(sp)
  20d0dc:	300b883a 	mov	r5,r6
  20d0e0:	84272b04 	addi	r16,r16,-25428
  20d0e4:	2023883a 	mov	r17,r4
  20d0e8:	380d883a 	mov	r6,r7
  20d0ec:	1009883a 	mov	r4,r2
  20d0f0:	dfc00215 	stw	ra,8(sp)
  20d0f4:	80000015 	stw	zero,0(r16)
  20d0f8:	02117240 	call	211724 <write>
  20d0fc:	00ffffc4 	movi	r3,-1
  20d100:	10c00526 	beq	r2,r3,20d118 <_write_r+0x50>
  20d104:	dfc00217 	ldw	ra,8(sp)
  20d108:	dc400117 	ldw	r17,4(sp)
  20d10c:	dc000017 	ldw	r16,0(sp)
  20d110:	dec00304 	addi	sp,sp,12
  20d114:	f800283a 	ret
  20d118:	80c00017 	ldw	r3,0(r16)
  20d11c:	183ff926 	beq	r3,zero,20d104 <_gp+0xffdfb4f0>
  20d120:	88c00015 	stw	r3,0(r17)
  20d124:	003ff706 	br	20d104 <_gp+0xffdfb4f0>

0020d128 <_close_r>:
  20d128:	defffd04 	addi	sp,sp,-12
  20d12c:	dc000015 	stw	r16,0(sp)
  20d130:	04001074 	movhi	r16,65
  20d134:	dc400115 	stw	r17,4(sp)
  20d138:	84272b04 	addi	r16,r16,-25428
  20d13c:	2023883a 	mov	r17,r4
  20d140:	2809883a 	mov	r4,r5
  20d144:	dfc00215 	stw	ra,8(sp)
  20d148:	80000015 	stw	zero,0(r16)
  20d14c:	0210cf80 	call	210cf8 <close>
  20d150:	00ffffc4 	movi	r3,-1
  20d154:	10c00526 	beq	r2,r3,20d16c <_close_r+0x44>
  20d158:	dfc00217 	ldw	ra,8(sp)
  20d15c:	dc400117 	ldw	r17,4(sp)
  20d160:	dc000017 	ldw	r16,0(sp)
  20d164:	dec00304 	addi	sp,sp,12
  20d168:	f800283a 	ret
  20d16c:	80c00017 	ldw	r3,0(r16)
  20d170:	183ff926 	beq	r3,zero,20d158 <_gp+0xffdfb544>
  20d174:	88c00015 	stw	r3,0(r17)
  20d178:	003ff706 	br	20d158 <_gp+0xffdfb544>

0020d17c <_calloc_r>:
  20d17c:	defffe04 	addi	sp,sp,-8
  20d180:	2805883a 	mov	r2,r5
  20d184:	dc000015 	stw	r16,0(sp)
  20d188:	300b883a 	mov	r5,r6
  20d18c:	2021883a 	mov	r16,r4
  20d190:	1009883a 	mov	r4,r2
  20d194:	dfc00115 	stw	ra,4(sp)
  20d198:	02032780 	call	203278 <__mulsi3>
  20d19c:	100b883a 	mov	r5,r2
  20d1a0:	8009883a 	mov	r4,r16
  20d1a4:	02091580 	call	209158 <_malloc_r>
  20d1a8:	10002926 	beq	r2,zero,20d250 <_calloc_r+0xd4>
  20d1ac:	11bfff17 	ldw	r6,-4(r2)
  20d1b0:	1021883a 	mov	r16,r2
  20d1b4:	00bfff04 	movi	r2,-4
  20d1b8:	308c703a 	and	r6,r6,r2
  20d1bc:	00c00904 	movi	r3,36
  20d1c0:	308d883a 	add	r6,r6,r2
  20d1c4:	19801636 	bltu	r3,r6,20d220 <_calloc_r+0xa4>
  20d1c8:	008004c4 	movi	r2,19
  20d1cc:	11800b2e 	bgeu	r2,r6,20d1fc <_calloc_r+0x80>
  20d1d0:	80000015 	stw	zero,0(r16)
  20d1d4:	80000115 	stw	zero,4(r16)
  20d1d8:	008006c4 	movi	r2,27
  20d1dc:	11801a2e 	bgeu	r2,r6,20d248 <_calloc_r+0xcc>
  20d1e0:	80000215 	stw	zero,8(r16)
  20d1e4:	80000315 	stw	zero,12(r16)
  20d1e8:	30c0151e 	bne	r6,r3,20d240 <_calloc_r+0xc4>
  20d1ec:	80000415 	stw	zero,16(r16)
  20d1f0:	80800604 	addi	r2,r16,24
  20d1f4:	80000515 	stw	zero,20(r16)
  20d1f8:	00000106 	br	20d200 <_calloc_r+0x84>
  20d1fc:	8005883a 	mov	r2,r16
  20d200:	10000015 	stw	zero,0(r2)
  20d204:	10000115 	stw	zero,4(r2)
  20d208:	10000215 	stw	zero,8(r2)
  20d20c:	8005883a 	mov	r2,r16
  20d210:	dfc00117 	ldw	ra,4(sp)
  20d214:	dc000017 	ldw	r16,0(sp)
  20d218:	dec00204 	addi	sp,sp,8
  20d21c:	f800283a 	ret
  20d220:	000b883a 	mov	r5,zero
  20d224:	8009883a 	mov	r4,r16
  20d228:	0209cec0 	call	209cec <memset>
  20d22c:	8005883a 	mov	r2,r16
  20d230:	dfc00117 	ldw	ra,4(sp)
  20d234:	dc000017 	ldw	r16,0(sp)
  20d238:	dec00204 	addi	sp,sp,8
  20d23c:	f800283a 	ret
  20d240:	80800404 	addi	r2,r16,16
  20d244:	003fee06 	br	20d200 <_gp+0xffdfb5ec>
  20d248:	80800204 	addi	r2,r16,8
  20d24c:	003fec06 	br	20d200 <_gp+0xffdfb5ec>
  20d250:	0005883a 	mov	r2,zero
  20d254:	003fee06 	br	20d210 <_gp+0xffdfb5fc>

0020d258 <_fclose_r>:
  20d258:	28003926 	beq	r5,zero,20d340 <_fclose_r+0xe8>
  20d25c:	defffc04 	addi	sp,sp,-16
  20d260:	dc400115 	stw	r17,4(sp)
  20d264:	dc000015 	stw	r16,0(sp)
  20d268:	dfc00315 	stw	ra,12(sp)
  20d26c:	dc800215 	stw	r18,8(sp)
  20d270:	2023883a 	mov	r17,r4
  20d274:	2821883a 	mov	r16,r5
  20d278:	20000226 	beq	r4,zero,20d284 <_fclose_r+0x2c>
  20d27c:	20800e17 	ldw	r2,56(r4)
  20d280:	10002726 	beq	r2,zero,20d320 <_fclose_r+0xc8>
  20d284:	8080030f 	ldh	r2,12(r16)
  20d288:	1000071e 	bne	r2,zero,20d2a8 <_fclose_r+0x50>
  20d28c:	0005883a 	mov	r2,zero
  20d290:	dfc00317 	ldw	ra,12(sp)
  20d294:	dc800217 	ldw	r18,8(sp)
  20d298:	dc400117 	ldw	r17,4(sp)
  20d29c:	dc000017 	ldw	r16,0(sp)
  20d2a0:	dec00404 	addi	sp,sp,16
  20d2a4:	f800283a 	ret
  20d2a8:	800b883a 	mov	r5,r16
  20d2ac:	8809883a 	mov	r4,r17
  20d2b0:	0207de40 	call	207de4 <__sflush_r>
  20d2b4:	1025883a 	mov	r18,r2
  20d2b8:	80800b17 	ldw	r2,44(r16)
  20d2bc:	10000426 	beq	r2,zero,20d2d0 <_fclose_r+0x78>
  20d2c0:	81400717 	ldw	r5,28(r16)
  20d2c4:	8809883a 	mov	r4,r17
  20d2c8:	103ee83a 	callr	r2
  20d2cc:	10001616 	blt	r2,zero,20d328 <_fclose_r+0xd0>
  20d2d0:	8080030b 	ldhu	r2,12(r16)
  20d2d4:	1080200c 	andi	r2,r2,128
  20d2d8:	1000151e 	bne	r2,zero,20d330 <_fclose_r+0xd8>
  20d2dc:	81400c17 	ldw	r5,48(r16)
  20d2e0:	28000526 	beq	r5,zero,20d2f8 <_fclose_r+0xa0>
  20d2e4:	80801004 	addi	r2,r16,64
  20d2e8:	28800226 	beq	r5,r2,20d2f4 <_fclose_r+0x9c>
  20d2ec:	8809883a 	mov	r4,r17
  20d2f0:	02085600 	call	208560 <_free_r>
  20d2f4:	80000c15 	stw	zero,48(r16)
  20d2f8:	81401117 	ldw	r5,68(r16)
  20d2fc:	28000326 	beq	r5,zero,20d30c <_fclose_r+0xb4>
  20d300:	8809883a 	mov	r4,r17
  20d304:	02085600 	call	208560 <_free_r>
  20d308:	80001115 	stw	zero,68(r16)
  20d30c:	02083fc0 	call	2083fc <__sfp_lock_acquire>
  20d310:	8000030d 	sth	zero,12(r16)
  20d314:	02084000 	call	208400 <__sfp_lock_release>
  20d318:	9005883a 	mov	r2,r18
  20d31c:	003fdc06 	br	20d290 <_gp+0xffdfb67c>
  20d320:	02083ec0 	call	2083ec <__sinit>
  20d324:	003fd706 	br	20d284 <_gp+0xffdfb670>
  20d328:	04bfffc4 	movi	r18,-1
  20d32c:	003fe806 	br	20d2d0 <_gp+0xffdfb6bc>
  20d330:	81400417 	ldw	r5,16(r16)
  20d334:	8809883a 	mov	r4,r17
  20d338:	02085600 	call	208560 <_free_r>
  20d33c:	003fe706 	br	20d2dc <_gp+0xffdfb6c8>
  20d340:	0005883a 	mov	r2,zero
  20d344:	f800283a 	ret

0020d348 <fclose>:
  20d348:	00801074 	movhi	r2,65
  20d34c:	10a70a04 	addi	r2,r2,-25560
  20d350:	200b883a 	mov	r5,r4
  20d354:	11000017 	ldw	r4,0(r2)
  20d358:	020d2581 	jmpi	20d258 <_fclose_r>

0020d35c <__fputwc>:
  20d35c:	defff804 	addi	sp,sp,-32
  20d360:	dcc00415 	stw	r19,16(sp)
  20d364:	dc800315 	stw	r18,12(sp)
  20d368:	dc000115 	stw	r16,4(sp)
  20d36c:	dfc00715 	stw	ra,28(sp)
  20d370:	dd400615 	stw	r21,24(sp)
  20d374:	dd000515 	stw	r20,20(sp)
  20d378:	dc400215 	stw	r17,8(sp)
  20d37c:	2027883a 	mov	r19,r4
  20d380:	2825883a 	mov	r18,r5
  20d384:	3021883a 	mov	r16,r6
  20d388:	0208f480 	call	208f48 <__locale_mb_cur_max>
  20d38c:	00c00044 	movi	r3,1
  20d390:	10c03e26 	beq	r2,r3,20d48c <__fputwc+0x130>
  20d394:	81c01704 	addi	r7,r16,92
  20d398:	900d883a 	mov	r6,r18
  20d39c:	d80b883a 	mov	r5,sp
  20d3a0:	9809883a 	mov	r4,r19
  20d3a4:	020d6d40 	call	20d6d4 <_wcrtomb_r>
  20d3a8:	1029883a 	mov	r20,r2
  20d3ac:	00bfffc4 	movi	r2,-1
  20d3b0:	a0802026 	beq	r20,r2,20d434 <__fputwc+0xd8>
  20d3b4:	d9400003 	ldbu	r5,0(sp)
  20d3b8:	a0001c26 	beq	r20,zero,20d42c <__fputwc+0xd0>
  20d3bc:	0023883a 	mov	r17,zero
  20d3c0:	05400284 	movi	r21,10
  20d3c4:	00000906 	br	20d3ec <__fputwc+0x90>
  20d3c8:	80800017 	ldw	r2,0(r16)
  20d3cc:	11400005 	stb	r5,0(r2)
  20d3d0:	80c00017 	ldw	r3,0(r16)
  20d3d4:	18c00044 	addi	r3,r3,1
  20d3d8:	80c00015 	stw	r3,0(r16)
  20d3dc:	8c400044 	addi	r17,r17,1
  20d3e0:	dc45883a 	add	r2,sp,r17
  20d3e4:	8d00112e 	bgeu	r17,r20,20d42c <__fputwc+0xd0>
  20d3e8:	11400003 	ldbu	r5,0(r2)
  20d3ec:	80c00217 	ldw	r3,8(r16)
  20d3f0:	18ffffc4 	addi	r3,r3,-1
  20d3f4:	80c00215 	stw	r3,8(r16)
  20d3f8:	183ff30e 	bge	r3,zero,20d3c8 <_gp+0xffdfb7b4>
  20d3fc:	80800617 	ldw	r2,24(r16)
  20d400:	18801916 	blt	r3,r2,20d468 <__fputwc+0x10c>
  20d404:	80800017 	ldw	r2,0(r16)
  20d408:	11400005 	stb	r5,0(r2)
  20d40c:	80800017 	ldw	r2,0(r16)
  20d410:	10c00003 	ldbu	r3,0(r2)
  20d414:	10800044 	addi	r2,r2,1
  20d418:	1d402326 	beq	r3,r21,20d4a8 <__fputwc+0x14c>
  20d41c:	80800015 	stw	r2,0(r16)
  20d420:	8c400044 	addi	r17,r17,1
  20d424:	dc45883a 	add	r2,sp,r17
  20d428:	8d3fef36 	bltu	r17,r20,20d3e8 <_gp+0xffdfb7d4>
  20d42c:	9005883a 	mov	r2,r18
  20d430:	00000406 	br	20d444 <__fputwc+0xe8>
  20d434:	80c0030b 	ldhu	r3,12(r16)
  20d438:	a005883a 	mov	r2,r20
  20d43c:	18c01014 	ori	r3,r3,64
  20d440:	80c0030d 	sth	r3,12(r16)
  20d444:	dfc00717 	ldw	ra,28(sp)
  20d448:	dd400617 	ldw	r21,24(sp)
  20d44c:	dd000517 	ldw	r20,20(sp)
  20d450:	dcc00417 	ldw	r19,16(sp)
  20d454:	dc800317 	ldw	r18,12(sp)
  20d458:	dc400217 	ldw	r17,8(sp)
  20d45c:	dc000117 	ldw	r16,4(sp)
  20d460:	dec00804 	addi	sp,sp,32
  20d464:	f800283a 	ret
  20d468:	800d883a 	mov	r6,r16
  20d46c:	29403fcc 	andi	r5,r5,255
  20d470:	9809883a 	mov	r4,r19
  20d474:	020cf700 	call	20cf70 <__swbuf_r>
  20d478:	10bfffe0 	cmpeqi	r2,r2,-1
  20d47c:	10803fcc 	andi	r2,r2,255
  20d480:	103fd626 	beq	r2,zero,20d3dc <_gp+0xffdfb7c8>
  20d484:	00bfffc4 	movi	r2,-1
  20d488:	003fee06 	br	20d444 <_gp+0xffdfb830>
  20d48c:	90ffffc4 	addi	r3,r18,-1
  20d490:	01003f84 	movi	r4,254
  20d494:	20ffbf36 	bltu	r4,r3,20d394 <_gp+0xffdfb780>
  20d498:	900b883a 	mov	r5,r18
  20d49c:	dc800005 	stb	r18,0(sp)
  20d4a0:	1029883a 	mov	r20,r2
  20d4a4:	003fc506 	br	20d3bc <_gp+0xffdfb7a8>
  20d4a8:	800d883a 	mov	r6,r16
  20d4ac:	a80b883a 	mov	r5,r21
  20d4b0:	9809883a 	mov	r4,r19
  20d4b4:	020cf700 	call	20cf70 <__swbuf_r>
  20d4b8:	10bfffe0 	cmpeqi	r2,r2,-1
  20d4bc:	003fef06 	br	20d47c <_gp+0xffdfb868>

0020d4c0 <_fputwc_r>:
  20d4c0:	3080030b 	ldhu	r2,12(r6)
  20d4c4:	10c8000c 	andi	r3,r2,8192
  20d4c8:	1800051e 	bne	r3,zero,20d4e0 <_fputwc_r+0x20>
  20d4cc:	30c01917 	ldw	r3,100(r6)
  20d4d0:	10880014 	ori	r2,r2,8192
  20d4d4:	3080030d 	sth	r2,12(r6)
  20d4d8:	18880014 	ori	r2,r3,8192
  20d4dc:	30801915 	stw	r2,100(r6)
  20d4e0:	020d35c1 	jmpi	20d35c <__fputwc>

0020d4e4 <fputwc>:
  20d4e4:	00801074 	movhi	r2,65
  20d4e8:	defffc04 	addi	sp,sp,-16
  20d4ec:	10a70a04 	addi	r2,r2,-25560
  20d4f0:	dc000115 	stw	r16,4(sp)
  20d4f4:	14000017 	ldw	r16,0(r2)
  20d4f8:	dc400215 	stw	r17,8(sp)
  20d4fc:	dfc00315 	stw	ra,12(sp)
  20d500:	2023883a 	mov	r17,r4
  20d504:	80000226 	beq	r16,zero,20d510 <fputwc+0x2c>
  20d508:	80800e17 	ldw	r2,56(r16)
  20d50c:	10001026 	beq	r2,zero,20d550 <fputwc+0x6c>
  20d510:	2880030b 	ldhu	r2,12(r5)
  20d514:	10c8000c 	andi	r3,r2,8192
  20d518:	1800051e 	bne	r3,zero,20d530 <fputwc+0x4c>
  20d51c:	28c01917 	ldw	r3,100(r5)
  20d520:	10880014 	ori	r2,r2,8192
  20d524:	2880030d 	sth	r2,12(r5)
  20d528:	18880014 	ori	r2,r3,8192
  20d52c:	28801915 	stw	r2,100(r5)
  20d530:	280d883a 	mov	r6,r5
  20d534:	8009883a 	mov	r4,r16
  20d538:	880b883a 	mov	r5,r17
  20d53c:	dfc00317 	ldw	ra,12(sp)
  20d540:	dc400217 	ldw	r17,8(sp)
  20d544:	dc000117 	ldw	r16,4(sp)
  20d548:	dec00404 	addi	sp,sp,16
  20d54c:	020d35c1 	jmpi	20d35c <__fputwc>
  20d550:	8009883a 	mov	r4,r16
  20d554:	d9400015 	stw	r5,0(sp)
  20d558:	02083ec0 	call	2083ec <__sinit>
  20d55c:	d9400017 	ldw	r5,0(sp)
  20d560:	003feb06 	br	20d510 <_gp+0xffdfb8fc>

0020d564 <_fstat_r>:
  20d564:	defffd04 	addi	sp,sp,-12
  20d568:	2805883a 	mov	r2,r5
  20d56c:	dc000015 	stw	r16,0(sp)
  20d570:	04001074 	movhi	r16,65
  20d574:	dc400115 	stw	r17,4(sp)
  20d578:	84272b04 	addi	r16,r16,-25428
  20d57c:	2023883a 	mov	r17,r4
  20d580:	300b883a 	mov	r5,r6
  20d584:	1009883a 	mov	r4,r2
  20d588:	dfc00215 	stw	ra,8(sp)
  20d58c:	80000015 	stw	zero,0(r16)
  20d590:	0210e380 	call	210e38 <fstat>
  20d594:	00ffffc4 	movi	r3,-1
  20d598:	10c00526 	beq	r2,r3,20d5b0 <_fstat_r+0x4c>
  20d59c:	dfc00217 	ldw	ra,8(sp)
  20d5a0:	dc400117 	ldw	r17,4(sp)
  20d5a4:	dc000017 	ldw	r16,0(sp)
  20d5a8:	dec00304 	addi	sp,sp,12
  20d5ac:	f800283a 	ret
  20d5b0:	80c00017 	ldw	r3,0(r16)
  20d5b4:	183ff926 	beq	r3,zero,20d59c <_gp+0xffdfb988>
  20d5b8:	88c00015 	stw	r3,0(r17)
  20d5bc:	003ff706 	br	20d59c <_gp+0xffdfb988>

0020d5c0 <_isatty_r>:
  20d5c0:	defffd04 	addi	sp,sp,-12
  20d5c4:	dc000015 	stw	r16,0(sp)
  20d5c8:	04001074 	movhi	r16,65
  20d5cc:	dc400115 	stw	r17,4(sp)
  20d5d0:	84272b04 	addi	r16,r16,-25428
  20d5d4:	2023883a 	mov	r17,r4
  20d5d8:	2809883a 	mov	r4,r5
  20d5dc:	dfc00215 	stw	ra,8(sp)
  20d5e0:	80000015 	stw	zero,0(r16)
  20d5e4:	0210f2c0 	call	210f2c <isatty>
  20d5e8:	00ffffc4 	movi	r3,-1
  20d5ec:	10c00526 	beq	r2,r3,20d604 <_isatty_r+0x44>
  20d5f0:	dfc00217 	ldw	ra,8(sp)
  20d5f4:	dc400117 	ldw	r17,4(sp)
  20d5f8:	dc000017 	ldw	r16,0(sp)
  20d5fc:	dec00304 	addi	sp,sp,12
  20d600:	f800283a 	ret
  20d604:	80c00017 	ldw	r3,0(r16)
  20d608:	183ff926 	beq	r3,zero,20d5f0 <_gp+0xffdfb9dc>
  20d60c:	88c00015 	stw	r3,0(r17)
  20d610:	003ff706 	br	20d5f0 <_gp+0xffdfb9dc>

0020d614 <_lseek_r>:
  20d614:	defffd04 	addi	sp,sp,-12
  20d618:	2805883a 	mov	r2,r5
  20d61c:	dc000015 	stw	r16,0(sp)
  20d620:	04001074 	movhi	r16,65
  20d624:	dc400115 	stw	r17,4(sp)
  20d628:	300b883a 	mov	r5,r6
  20d62c:	84272b04 	addi	r16,r16,-25428
  20d630:	2023883a 	mov	r17,r4
  20d634:	380d883a 	mov	r6,r7
  20d638:	1009883a 	mov	r4,r2
  20d63c:	dfc00215 	stw	ra,8(sp)
  20d640:	80000015 	stw	zero,0(r16)
  20d644:	02111000 	call	211100 <lseek>
  20d648:	00ffffc4 	movi	r3,-1
  20d64c:	10c00526 	beq	r2,r3,20d664 <_lseek_r+0x50>
  20d650:	dfc00217 	ldw	ra,8(sp)
  20d654:	dc400117 	ldw	r17,4(sp)
  20d658:	dc000017 	ldw	r16,0(sp)
  20d65c:	dec00304 	addi	sp,sp,12
  20d660:	f800283a 	ret
  20d664:	80c00017 	ldw	r3,0(r16)
  20d668:	183ff926 	beq	r3,zero,20d650 <_gp+0xffdfba3c>
  20d66c:	88c00015 	stw	r3,0(r17)
  20d670:	003ff706 	br	20d650 <_gp+0xffdfba3c>

0020d674 <_read_r>:
  20d674:	defffd04 	addi	sp,sp,-12
  20d678:	2805883a 	mov	r2,r5
  20d67c:	dc000015 	stw	r16,0(sp)
  20d680:	04001074 	movhi	r16,65
  20d684:	dc400115 	stw	r17,4(sp)
  20d688:	300b883a 	mov	r5,r6
  20d68c:	84272b04 	addi	r16,r16,-25428
  20d690:	2023883a 	mov	r17,r4
  20d694:	380d883a 	mov	r6,r7
  20d698:	1009883a 	mov	r4,r2
  20d69c:	dfc00215 	stw	ra,8(sp)
  20d6a0:	80000015 	stw	zero,0(r16)
  20d6a4:	02112dc0 	call	2112dc <read>
  20d6a8:	00ffffc4 	movi	r3,-1
  20d6ac:	10c00526 	beq	r2,r3,20d6c4 <_read_r+0x50>
  20d6b0:	dfc00217 	ldw	ra,8(sp)
  20d6b4:	dc400117 	ldw	r17,4(sp)
  20d6b8:	dc000017 	ldw	r16,0(sp)
  20d6bc:	dec00304 	addi	sp,sp,12
  20d6c0:	f800283a 	ret
  20d6c4:	80c00017 	ldw	r3,0(r16)
  20d6c8:	183ff926 	beq	r3,zero,20d6b0 <_gp+0xffdfba9c>
  20d6cc:	88c00015 	stw	r3,0(r17)
  20d6d0:	003ff706 	br	20d6b0 <_gp+0xffdfba9c>

0020d6d4 <_wcrtomb_r>:
  20d6d4:	defff604 	addi	sp,sp,-40
  20d6d8:	00801074 	movhi	r2,65
  20d6dc:	dc800815 	stw	r18,32(sp)
  20d6e0:	dc400715 	stw	r17,28(sp)
  20d6e4:	dc000615 	stw	r16,24(sp)
  20d6e8:	10a70e04 	addi	r2,r2,-25544
  20d6ec:	dfc00915 	stw	ra,36(sp)
  20d6f0:	2021883a 	mov	r16,r4
  20d6f4:	3823883a 	mov	r17,r7
  20d6f8:	14800017 	ldw	r18,0(r2)
  20d6fc:	28001426 	beq	r5,zero,20d750 <_wcrtomb_r+0x7c>
  20d700:	d9400415 	stw	r5,16(sp)
  20d704:	d9800515 	stw	r6,20(sp)
  20d708:	0208f3c0 	call	208f3c <__locale_charset>
  20d70c:	d9800517 	ldw	r6,20(sp)
  20d710:	d9400417 	ldw	r5,16(sp)
  20d714:	100f883a 	mov	r7,r2
  20d718:	dc400015 	stw	r17,0(sp)
  20d71c:	8009883a 	mov	r4,r16
  20d720:	903ee83a 	callr	r18
  20d724:	00ffffc4 	movi	r3,-1
  20d728:	10c0031e 	bne	r2,r3,20d738 <_wcrtomb_r+0x64>
  20d72c:	88000015 	stw	zero,0(r17)
  20d730:	00c02284 	movi	r3,138
  20d734:	80c00015 	stw	r3,0(r16)
  20d738:	dfc00917 	ldw	ra,36(sp)
  20d73c:	dc800817 	ldw	r18,32(sp)
  20d740:	dc400717 	ldw	r17,28(sp)
  20d744:	dc000617 	ldw	r16,24(sp)
  20d748:	dec00a04 	addi	sp,sp,40
  20d74c:	f800283a 	ret
  20d750:	0208f3c0 	call	208f3c <__locale_charset>
  20d754:	100f883a 	mov	r7,r2
  20d758:	dc400015 	stw	r17,0(sp)
  20d75c:	000d883a 	mov	r6,zero
  20d760:	d9400104 	addi	r5,sp,4
  20d764:	8009883a 	mov	r4,r16
  20d768:	903ee83a 	callr	r18
  20d76c:	003fed06 	br	20d724 <_gp+0xffdfbb10>

0020d770 <wcrtomb>:
  20d770:	defff604 	addi	sp,sp,-40
  20d774:	00801074 	movhi	r2,65
  20d778:	dc800615 	stw	r18,24(sp)
  20d77c:	dc400515 	stw	r17,20(sp)
  20d780:	10a70a04 	addi	r2,r2,-25560
  20d784:	dfc00915 	stw	ra,36(sp)
  20d788:	dd000815 	stw	r20,32(sp)
  20d78c:	dcc00715 	stw	r19,28(sp)
  20d790:	dc000415 	stw	r16,16(sp)
  20d794:	3025883a 	mov	r18,r6
  20d798:	14400017 	ldw	r17,0(r2)
  20d79c:	20001926 	beq	r4,zero,20d804 <wcrtomb+0x94>
  20d7a0:	00801074 	movhi	r2,65
  20d7a4:	10a70e04 	addi	r2,r2,-25544
  20d7a8:	15000017 	ldw	r20,0(r2)
  20d7ac:	2021883a 	mov	r16,r4
  20d7b0:	2827883a 	mov	r19,r5
  20d7b4:	0208f3c0 	call	208f3c <__locale_charset>
  20d7b8:	100f883a 	mov	r7,r2
  20d7bc:	dc800015 	stw	r18,0(sp)
  20d7c0:	980d883a 	mov	r6,r19
  20d7c4:	800b883a 	mov	r5,r16
  20d7c8:	8809883a 	mov	r4,r17
  20d7cc:	a03ee83a 	callr	r20
  20d7d0:	00ffffc4 	movi	r3,-1
  20d7d4:	10c0031e 	bne	r2,r3,20d7e4 <wcrtomb+0x74>
  20d7d8:	90000015 	stw	zero,0(r18)
  20d7dc:	00c02284 	movi	r3,138
  20d7e0:	88c00015 	stw	r3,0(r17)
  20d7e4:	dfc00917 	ldw	ra,36(sp)
  20d7e8:	dd000817 	ldw	r20,32(sp)
  20d7ec:	dcc00717 	ldw	r19,28(sp)
  20d7f0:	dc800617 	ldw	r18,24(sp)
  20d7f4:	dc400517 	ldw	r17,20(sp)
  20d7f8:	dc000417 	ldw	r16,16(sp)
  20d7fc:	dec00a04 	addi	sp,sp,40
  20d800:	f800283a 	ret
  20d804:	00801074 	movhi	r2,65
  20d808:	10a70e04 	addi	r2,r2,-25544
  20d80c:	14000017 	ldw	r16,0(r2)
  20d810:	0208f3c0 	call	208f3c <__locale_charset>
  20d814:	100f883a 	mov	r7,r2
  20d818:	dc800015 	stw	r18,0(sp)
  20d81c:	000d883a 	mov	r6,zero
  20d820:	d9400104 	addi	r5,sp,4
  20d824:	8809883a 	mov	r4,r17
  20d828:	803ee83a 	callr	r16
  20d82c:	003fe806 	br	20d7d0 <_gp+0xffdfbbbc>

0020d830 <__ascii_wctomb>:
  20d830:	28000526 	beq	r5,zero,20d848 <__ascii_wctomb+0x18>
  20d834:	00803fc4 	movi	r2,255
  20d838:	11800536 	bltu	r2,r6,20d850 <__ascii_wctomb+0x20>
  20d83c:	29800005 	stb	r6,0(r5)
  20d840:	00800044 	movi	r2,1
  20d844:	f800283a 	ret
  20d848:	0005883a 	mov	r2,zero
  20d84c:	f800283a 	ret
  20d850:	00802284 	movi	r2,138
  20d854:	20800015 	stw	r2,0(r4)
  20d858:	00bfffc4 	movi	r2,-1
  20d85c:	f800283a 	ret

0020d860 <_wctomb_r>:
  20d860:	00801074 	movhi	r2,65
  20d864:	defff904 	addi	sp,sp,-28
  20d868:	10a70e04 	addi	r2,r2,-25544
  20d86c:	dfc00615 	stw	ra,24(sp)
  20d870:	dc400515 	stw	r17,20(sp)
  20d874:	dc000415 	stw	r16,16(sp)
  20d878:	3823883a 	mov	r17,r7
  20d87c:	14000017 	ldw	r16,0(r2)
  20d880:	d9000115 	stw	r4,4(sp)
  20d884:	d9400215 	stw	r5,8(sp)
  20d888:	d9800315 	stw	r6,12(sp)
  20d88c:	0208f3c0 	call	208f3c <__locale_charset>
  20d890:	d9800317 	ldw	r6,12(sp)
  20d894:	d9400217 	ldw	r5,8(sp)
  20d898:	d9000117 	ldw	r4,4(sp)
  20d89c:	100f883a 	mov	r7,r2
  20d8a0:	dc400015 	stw	r17,0(sp)
  20d8a4:	803ee83a 	callr	r16
  20d8a8:	dfc00617 	ldw	ra,24(sp)
  20d8ac:	dc400517 	ldw	r17,20(sp)
  20d8b0:	dc000417 	ldw	r16,16(sp)
  20d8b4:	dec00704 	addi	sp,sp,28
  20d8b8:	f800283a 	ret

0020d8bc <__udivdi3>:
  20d8bc:	defff404 	addi	sp,sp,-48
  20d8c0:	dcc00515 	stw	r19,20(sp)
  20d8c4:	dc000215 	stw	r16,8(sp)
  20d8c8:	dfc00b15 	stw	ra,44(sp)
  20d8cc:	df000a15 	stw	fp,40(sp)
  20d8d0:	ddc00915 	stw	r23,36(sp)
  20d8d4:	dd800815 	stw	r22,32(sp)
  20d8d8:	dd400715 	stw	r21,28(sp)
  20d8dc:	dd000615 	stw	r20,24(sp)
  20d8e0:	dc800415 	stw	r18,16(sp)
  20d8e4:	dc400315 	stw	r17,12(sp)
  20d8e8:	2027883a 	mov	r19,r4
  20d8ec:	2821883a 	mov	r16,r5
  20d8f0:	3800461e 	bne	r7,zero,20da0c <__udivdi3+0x150>
  20d8f4:	3023883a 	mov	r17,r6
  20d8f8:	2025883a 	mov	r18,r4
  20d8fc:	2980572e 	bgeu	r5,r6,20da5c <__udivdi3+0x1a0>
  20d900:	00bfffd4 	movui	r2,65535
  20d904:	282d883a 	mov	r22,r5
  20d908:	1180b236 	bltu	r2,r6,20dbd4 <__udivdi3+0x318>
  20d90c:	00803fc4 	movi	r2,255
  20d910:	1185803a 	cmpltu	r2,r2,r6
  20d914:	100490fa 	slli	r2,r2,3
  20d918:	3086d83a 	srl	r3,r6,r2
  20d91c:	01000874 	movhi	r4,33
  20d920:	211ab904 	addi	r4,r4,27364
  20d924:	20c7883a 	add	r3,r4,r3
  20d928:	18c00003 	ldbu	r3,0(r3)
  20d92c:	1885883a 	add	r2,r3,r2
  20d930:	00c00804 	movi	r3,32
  20d934:	1887c83a 	sub	r3,r3,r2
  20d938:	18000526 	beq	r3,zero,20d950 <__udivdi3+0x94>
  20d93c:	80e0983a 	sll	r16,r16,r3
  20d940:	9884d83a 	srl	r2,r19,r2
  20d944:	30e2983a 	sll	r17,r6,r3
  20d948:	98e4983a 	sll	r18,r19,r3
  20d94c:	142cb03a 	or	r22,r2,r16
  20d950:	882ad43a 	srli	r21,r17,16
  20d954:	b009883a 	mov	r4,r22
  20d958:	8d3fffcc 	andi	r20,r17,65535
  20d95c:	a80b883a 	mov	r5,r21
  20d960:	02032200 	call	203220 <__umodsi3>
  20d964:	b009883a 	mov	r4,r22
  20d968:	a80b883a 	mov	r5,r21
  20d96c:	1027883a 	mov	r19,r2
  20d970:	02031bc0 	call	2031bc <__udivsi3>
  20d974:	100b883a 	mov	r5,r2
  20d978:	a009883a 	mov	r4,r20
  20d97c:	102d883a 	mov	r22,r2
  20d980:	02032780 	call	203278 <__mulsi3>
  20d984:	9826943a 	slli	r19,r19,16
  20d988:	9006d43a 	srli	r3,r18,16
  20d98c:	1cc6b03a 	or	r3,r3,r19
  20d990:	1880052e 	bgeu	r3,r2,20d9a8 <__udivdi3+0xec>
  20d994:	1c47883a 	add	r3,r3,r17
  20d998:	b13fffc4 	addi	r4,r22,-1
  20d99c:	1c400136 	bltu	r3,r17,20d9a4 <__udivdi3+0xe8>
  20d9a0:	18814236 	bltu	r3,r2,20deac <__udivdi3+0x5f0>
  20d9a4:	202d883a 	mov	r22,r4
  20d9a8:	18a1c83a 	sub	r16,r3,r2
  20d9ac:	8009883a 	mov	r4,r16
  20d9b0:	a80b883a 	mov	r5,r21
  20d9b4:	02032200 	call	203220 <__umodsi3>
  20d9b8:	1027883a 	mov	r19,r2
  20d9bc:	8009883a 	mov	r4,r16
  20d9c0:	a80b883a 	mov	r5,r21
  20d9c4:	9826943a 	slli	r19,r19,16
  20d9c8:	02031bc0 	call	2031bc <__udivsi3>
  20d9cc:	100b883a 	mov	r5,r2
  20d9d0:	a009883a 	mov	r4,r20
  20d9d4:	94bfffcc 	andi	r18,r18,65535
  20d9d8:	1021883a 	mov	r16,r2
  20d9dc:	94e4b03a 	or	r18,r18,r19
  20d9e0:	02032780 	call	203278 <__mulsi3>
  20d9e4:	9080052e 	bgeu	r18,r2,20d9fc <__udivdi3+0x140>
  20d9e8:	8ca5883a 	add	r18,r17,r18
  20d9ec:	80ffffc4 	addi	r3,r16,-1
  20d9f0:	94410c36 	bltu	r18,r17,20de24 <__udivdi3+0x568>
  20d9f4:	90810b2e 	bgeu	r18,r2,20de24 <__udivdi3+0x568>
  20d9f8:	843fff84 	addi	r16,r16,-2
  20d9fc:	b004943a 	slli	r2,r22,16
  20da00:	0007883a 	mov	r3,zero
  20da04:	1404b03a 	or	r2,r2,r16
  20da08:	00005e06 	br	20db84 <__udivdi3+0x2c8>
  20da0c:	29c05b36 	bltu	r5,r7,20db7c <__udivdi3+0x2c0>
  20da10:	00bfffd4 	movui	r2,65535
  20da14:	11c0672e 	bgeu	r2,r7,20dbb4 <__udivdi3+0x2f8>
  20da18:	00804034 	movhi	r2,256
  20da1c:	10bfffc4 	addi	r2,r2,-1
  20da20:	11c10a36 	bltu	r2,r7,20de4c <__udivdi3+0x590>
  20da24:	00800404 	movi	r2,16
  20da28:	3886d83a 	srl	r3,r7,r2
  20da2c:	01000874 	movhi	r4,33
  20da30:	211ab904 	addi	r4,r4,27364
  20da34:	20c7883a 	add	r3,r4,r3
  20da38:	18c00003 	ldbu	r3,0(r3)
  20da3c:	05c00804 	movi	r23,32
  20da40:	1885883a 	add	r2,r3,r2
  20da44:	b8afc83a 	sub	r23,r23,r2
  20da48:	b800671e 	bne	r23,zero,20dbe8 <__udivdi3+0x32c>
  20da4c:	3c010536 	bltu	r7,r16,20de64 <__udivdi3+0x5a8>
  20da50:	9985403a 	cmpgeu	r2,r19,r6
  20da54:	0007883a 	mov	r3,zero
  20da58:	00004a06 	br	20db84 <__udivdi3+0x2c8>
  20da5c:	3000041e 	bne	r6,zero,20da70 <__udivdi3+0x1b4>
  20da60:	000b883a 	mov	r5,zero
  20da64:	01000044 	movi	r4,1
  20da68:	02031bc0 	call	2031bc <__udivsi3>
  20da6c:	1023883a 	mov	r17,r2
  20da70:	00bfffd4 	movui	r2,65535
  20da74:	1440532e 	bgeu	r2,r17,20dbc4 <__udivdi3+0x308>
  20da78:	00804034 	movhi	r2,256
  20da7c:	10bfffc4 	addi	r2,r2,-1
  20da80:	1440f436 	bltu	r2,r17,20de54 <__udivdi3+0x598>
  20da84:	00800404 	movi	r2,16
  20da88:	8886d83a 	srl	r3,r17,r2
  20da8c:	01000874 	movhi	r4,33
  20da90:	211ab904 	addi	r4,r4,27364
  20da94:	20c7883a 	add	r3,r4,r3
  20da98:	18c00003 	ldbu	r3,0(r3)
  20da9c:	1885883a 	add	r2,r3,r2
  20daa0:	00c00804 	movi	r3,32
  20daa4:	1887c83a 	sub	r3,r3,r2
  20daa8:	1800a51e 	bne	r3,zero,20dd40 <__udivdi3+0x484>
  20daac:	882ad43a 	srli	r21,r17,16
  20dab0:	8461c83a 	sub	r16,r16,r17
  20dab4:	8d3fffcc 	andi	r20,r17,65535
  20dab8:	00c00044 	movi	r3,1
  20dabc:	a80b883a 	mov	r5,r21
  20dac0:	8009883a 	mov	r4,r16
  20dac4:	d8c00115 	stw	r3,4(sp)
  20dac8:	02032200 	call	203220 <__umodsi3>
  20dacc:	a80b883a 	mov	r5,r21
  20dad0:	8009883a 	mov	r4,r16
  20dad4:	1027883a 	mov	r19,r2
  20dad8:	02031bc0 	call	2031bc <__udivsi3>
  20dadc:	a00b883a 	mov	r5,r20
  20dae0:	1009883a 	mov	r4,r2
  20dae4:	102d883a 	mov	r22,r2
  20dae8:	02032780 	call	203278 <__mulsi3>
  20daec:	9826943a 	slli	r19,r19,16
  20daf0:	900ed43a 	srli	r7,r18,16
  20daf4:	d8c00117 	ldw	r3,4(sp)
  20daf8:	3cceb03a 	or	r7,r7,r19
  20dafc:	3880052e 	bgeu	r7,r2,20db14 <__udivdi3+0x258>
  20db00:	3c4f883a 	add	r7,r7,r17
  20db04:	b13fffc4 	addi	r4,r22,-1
  20db08:	3c400136 	bltu	r7,r17,20db10 <__udivdi3+0x254>
  20db0c:	3880e436 	bltu	r7,r2,20dea0 <__udivdi3+0x5e4>
  20db10:	202d883a 	mov	r22,r4
  20db14:	38a1c83a 	sub	r16,r7,r2
  20db18:	8009883a 	mov	r4,r16
  20db1c:	a80b883a 	mov	r5,r21
  20db20:	d8c00115 	stw	r3,4(sp)
  20db24:	02032200 	call	203220 <__umodsi3>
  20db28:	1027883a 	mov	r19,r2
  20db2c:	8009883a 	mov	r4,r16
  20db30:	a80b883a 	mov	r5,r21
  20db34:	9826943a 	slli	r19,r19,16
  20db38:	02031bc0 	call	2031bc <__udivsi3>
  20db3c:	a00b883a 	mov	r5,r20
  20db40:	1009883a 	mov	r4,r2
  20db44:	94bfffcc 	andi	r18,r18,65535
  20db48:	1021883a 	mov	r16,r2
  20db4c:	94e4b03a 	or	r18,r18,r19
  20db50:	02032780 	call	203278 <__mulsi3>
  20db54:	d8c00117 	ldw	r3,4(sp)
  20db58:	9080052e 	bgeu	r18,r2,20db70 <__udivdi3+0x2b4>
  20db5c:	8ca5883a 	add	r18,r17,r18
  20db60:	813fffc4 	addi	r4,r16,-1
  20db64:	9440ad36 	bltu	r18,r17,20de1c <__udivdi3+0x560>
  20db68:	9080ac2e 	bgeu	r18,r2,20de1c <__udivdi3+0x560>
  20db6c:	843fff84 	addi	r16,r16,-2
  20db70:	b004943a 	slli	r2,r22,16
  20db74:	1404b03a 	or	r2,r2,r16
  20db78:	00000206 	br	20db84 <__udivdi3+0x2c8>
  20db7c:	0007883a 	mov	r3,zero
  20db80:	0005883a 	mov	r2,zero
  20db84:	dfc00b17 	ldw	ra,44(sp)
  20db88:	df000a17 	ldw	fp,40(sp)
  20db8c:	ddc00917 	ldw	r23,36(sp)
  20db90:	dd800817 	ldw	r22,32(sp)
  20db94:	dd400717 	ldw	r21,28(sp)
  20db98:	dd000617 	ldw	r20,24(sp)
  20db9c:	dcc00517 	ldw	r19,20(sp)
  20dba0:	dc800417 	ldw	r18,16(sp)
  20dba4:	dc400317 	ldw	r17,12(sp)
  20dba8:	dc000217 	ldw	r16,8(sp)
  20dbac:	dec00c04 	addi	sp,sp,48
  20dbb0:	f800283a 	ret
  20dbb4:	00803fc4 	movi	r2,255
  20dbb8:	11c5803a 	cmpltu	r2,r2,r7
  20dbbc:	100490fa 	slli	r2,r2,3
  20dbc0:	003f9906 	br	20da28 <_gp+0xffdfbe14>
  20dbc4:	00803fc4 	movi	r2,255
  20dbc8:	1445803a 	cmpltu	r2,r2,r17
  20dbcc:	100490fa 	slli	r2,r2,3
  20dbd0:	003fad06 	br	20da88 <_gp+0xffdfbe74>
  20dbd4:	00804034 	movhi	r2,256
  20dbd8:	10bfffc4 	addi	r2,r2,-1
  20dbdc:	11809f36 	bltu	r2,r6,20de5c <__udivdi3+0x5a0>
  20dbe0:	00800404 	movi	r2,16
  20dbe4:	003f4c06 	br	20d918 <_gp+0xffdfbd04>
  20dbe8:	3dce983a 	sll	r7,r7,r23
  20dbec:	30b8d83a 	srl	fp,r6,r2
  20dbf0:	80a2d83a 	srl	r17,r16,r2
  20dbf4:	35cc983a 	sll	r6,r6,r23
  20dbf8:	3f38b03a 	or	fp,r7,fp
  20dbfc:	e024d43a 	srli	r18,fp,16
  20dc00:	9884d83a 	srl	r2,r19,r2
  20dc04:	85e0983a 	sll	r16,r16,r23
  20dc08:	8809883a 	mov	r4,r17
  20dc0c:	900b883a 	mov	r5,r18
  20dc10:	d9800015 	stw	r6,0(sp)
  20dc14:	1420b03a 	or	r16,r2,r16
  20dc18:	02032200 	call	203220 <__umodsi3>
  20dc1c:	900b883a 	mov	r5,r18
  20dc20:	8809883a 	mov	r4,r17
  20dc24:	1029883a 	mov	r20,r2
  20dc28:	e5bfffcc 	andi	r22,fp,65535
  20dc2c:	02031bc0 	call	2031bc <__udivsi3>
  20dc30:	100b883a 	mov	r5,r2
  20dc34:	b009883a 	mov	r4,r22
  20dc38:	102b883a 	mov	r21,r2
  20dc3c:	02032780 	call	203278 <__mulsi3>
  20dc40:	a028943a 	slli	r20,r20,16
  20dc44:	8006d43a 	srli	r3,r16,16
  20dc48:	1d06b03a 	or	r3,r3,r20
  20dc4c:	1880042e 	bgeu	r3,r2,20dc60 <__udivdi3+0x3a4>
  20dc50:	1f07883a 	add	r3,r3,fp
  20dc54:	a93fffc4 	addi	r4,r21,-1
  20dc58:	1f00892e 	bgeu	r3,fp,20de80 <__udivdi3+0x5c4>
  20dc5c:	202b883a 	mov	r21,r4
  20dc60:	18a3c83a 	sub	r17,r3,r2
  20dc64:	8809883a 	mov	r4,r17
  20dc68:	900b883a 	mov	r5,r18
  20dc6c:	02032200 	call	203220 <__umodsi3>
  20dc70:	1029883a 	mov	r20,r2
  20dc74:	8809883a 	mov	r4,r17
  20dc78:	900b883a 	mov	r5,r18
  20dc7c:	a028943a 	slli	r20,r20,16
  20dc80:	02031bc0 	call	2031bc <__udivsi3>
  20dc84:	100b883a 	mov	r5,r2
  20dc88:	b009883a 	mov	r4,r22
  20dc8c:	843fffcc 	andi	r16,r16,65535
  20dc90:	1023883a 	mov	r17,r2
  20dc94:	8520b03a 	or	r16,r16,r20
  20dc98:	02032780 	call	203278 <__mulsi3>
  20dc9c:	8080042e 	bgeu	r16,r2,20dcb0 <__udivdi3+0x3f4>
  20dca0:	8721883a 	add	r16,r16,fp
  20dca4:	88ffffc4 	addi	r3,r17,-1
  20dca8:	8700712e 	bgeu	r16,fp,20de70 <__udivdi3+0x5b4>
  20dcac:	1823883a 	mov	r17,r3
  20dcb0:	a80e943a 	slli	r7,r21,16
  20dcb4:	d8c00017 	ldw	r3,0(sp)
  20dcb8:	80a1c83a 	sub	r16,r16,r2
  20dcbc:	3c64b03a 	or	r18,r7,r17
  20dcc0:	1d3fffcc 	andi	r20,r3,65535
  20dcc4:	9022d43a 	srli	r17,r18,16
  20dcc8:	95bfffcc 	andi	r22,r18,65535
  20dccc:	a00b883a 	mov	r5,r20
  20dcd0:	b009883a 	mov	r4,r22
  20dcd4:	182ad43a 	srli	r21,r3,16
  20dcd8:	02032780 	call	203278 <__mulsi3>
  20dcdc:	a00b883a 	mov	r5,r20
  20dce0:	8809883a 	mov	r4,r17
  20dce4:	1039883a 	mov	fp,r2
  20dce8:	02032780 	call	203278 <__mulsi3>
  20dcec:	8809883a 	mov	r4,r17
  20dcf0:	a80b883a 	mov	r5,r21
  20dcf4:	1029883a 	mov	r20,r2
  20dcf8:	02032780 	call	203278 <__mulsi3>
  20dcfc:	a80b883a 	mov	r5,r21
  20dd00:	b009883a 	mov	r4,r22
  20dd04:	1023883a 	mov	r17,r2
  20dd08:	02032780 	call	203278 <__mulsi3>
  20dd0c:	e006d43a 	srli	r3,fp,16
  20dd10:	1505883a 	add	r2,r2,r20
  20dd14:	1887883a 	add	r3,r3,r2
  20dd18:	1d00022e 	bgeu	r3,r20,20dd24 <__udivdi3+0x468>
  20dd1c:	00800074 	movhi	r2,1
  20dd20:	88a3883a 	add	r17,r17,r2
  20dd24:	1804d43a 	srli	r2,r3,16
  20dd28:	1463883a 	add	r17,r2,r17
  20dd2c:	84404436 	bltu	r16,r17,20de40 <__udivdi3+0x584>
  20dd30:	84403e26 	beq	r16,r17,20de2c <__udivdi3+0x570>
  20dd34:	9005883a 	mov	r2,r18
  20dd38:	0007883a 	mov	r3,zero
  20dd3c:	003f9106 	br	20db84 <_gp+0xffdfbf70>
  20dd40:	88e2983a 	sll	r17,r17,r3
  20dd44:	80aed83a 	srl	r23,r16,r2
  20dd48:	80e0983a 	sll	r16,r16,r3
  20dd4c:	882ad43a 	srli	r21,r17,16
  20dd50:	9884d83a 	srl	r2,r19,r2
  20dd54:	b809883a 	mov	r4,r23
  20dd58:	a80b883a 	mov	r5,r21
  20dd5c:	98e4983a 	sll	r18,r19,r3
  20dd60:	142cb03a 	or	r22,r2,r16
  20dd64:	02032200 	call	203220 <__umodsi3>
  20dd68:	b809883a 	mov	r4,r23
  20dd6c:	a80b883a 	mov	r5,r21
  20dd70:	1027883a 	mov	r19,r2
  20dd74:	8d3fffcc 	andi	r20,r17,65535
  20dd78:	02031bc0 	call	2031bc <__udivsi3>
  20dd7c:	a009883a 	mov	r4,r20
  20dd80:	100b883a 	mov	r5,r2
  20dd84:	102f883a 	mov	r23,r2
  20dd88:	02032780 	call	203278 <__mulsi3>
  20dd8c:	9826943a 	slli	r19,r19,16
  20dd90:	b008d43a 	srli	r4,r22,16
  20dd94:	24c8b03a 	or	r4,r4,r19
  20dd98:	2080062e 	bgeu	r4,r2,20ddb4 <__udivdi3+0x4f8>
  20dd9c:	2449883a 	add	r4,r4,r17
  20dda0:	b8ffffc4 	addi	r3,r23,-1
  20dda4:	24403c36 	bltu	r4,r17,20de98 <__udivdi3+0x5dc>
  20dda8:	20803b2e 	bgeu	r4,r2,20de98 <__udivdi3+0x5dc>
  20ddac:	bdffff84 	addi	r23,r23,-2
  20ddb0:	2449883a 	add	r4,r4,r17
  20ddb4:	20a1c83a 	sub	r16,r4,r2
  20ddb8:	a80b883a 	mov	r5,r21
  20ddbc:	8009883a 	mov	r4,r16
  20ddc0:	02032200 	call	203220 <__umodsi3>
  20ddc4:	a80b883a 	mov	r5,r21
  20ddc8:	8009883a 	mov	r4,r16
  20ddcc:	1027883a 	mov	r19,r2
  20ddd0:	02031bc0 	call	2031bc <__udivsi3>
  20ddd4:	a009883a 	mov	r4,r20
  20ddd8:	100b883a 	mov	r5,r2
  20dddc:	9826943a 	slli	r19,r19,16
  20dde0:	1039883a 	mov	fp,r2
  20dde4:	02032780 	call	203278 <__mulsi3>
  20dde8:	b13fffcc 	andi	r4,r22,65535
  20ddec:	24c8b03a 	or	r4,r4,r19
  20ddf0:	2080062e 	bgeu	r4,r2,20de0c <__udivdi3+0x550>
  20ddf4:	2449883a 	add	r4,r4,r17
  20ddf8:	e0ffffc4 	addi	r3,fp,-1
  20ddfc:	24402436 	bltu	r4,r17,20de90 <__udivdi3+0x5d4>
  20de00:	2080232e 	bgeu	r4,r2,20de90 <__udivdi3+0x5d4>
  20de04:	e73fff84 	addi	fp,fp,-2
  20de08:	2449883a 	add	r4,r4,r17
  20de0c:	b82e943a 	slli	r23,r23,16
  20de10:	20a1c83a 	sub	r16,r4,r2
  20de14:	bf06b03a 	or	r3,r23,fp
  20de18:	003f2806 	br	20dabc <_gp+0xffdfbea8>
  20de1c:	2021883a 	mov	r16,r4
  20de20:	003f5306 	br	20db70 <_gp+0xffdfbf5c>
  20de24:	1821883a 	mov	r16,r3
  20de28:	003ef406 	br	20d9fc <_gp+0xffdfbde8>
  20de2c:	1806943a 	slli	r3,r3,16
  20de30:	9de6983a 	sll	r19,r19,r23
  20de34:	e73fffcc 	andi	fp,fp,65535
  20de38:	1f07883a 	add	r3,r3,fp
  20de3c:	98ffbd2e 	bgeu	r19,r3,20dd34 <_gp+0xffdfc120>
  20de40:	90bfffc4 	addi	r2,r18,-1
  20de44:	0007883a 	mov	r3,zero
  20de48:	003f4e06 	br	20db84 <_gp+0xffdfbf70>
  20de4c:	00800604 	movi	r2,24
  20de50:	003ef506 	br	20da28 <_gp+0xffdfbe14>
  20de54:	00800604 	movi	r2,24
  20de58:	003f0b06 	br	20da88 <_gp+0xffdfbe74>
  20de5c:	00800604 	movi	r2,24
  20de60:	003ead06 	br	20d918 <_gp+0xffdfbd04>
  20de64:	0007883a 	mov	r3,zero
  20de68:	00800044 	movi	r2,1
  20de6c:	003f4506 	br	20db84 <_gp+0xffdfbf70>
  20de70:	80bf8e2e 	bgeu	r16,r2,20dcac <_gp+0xffdfc098>
  20de74:	8c7fff84 	addi	r17,r17,-2
  20de78:	8721883a 	add	r16,r16,fp
  20de7c:	003f8c06 	br	20dcb0 <_gp+0xffdfc09c>
  20de80:	18bf762e 	bgeu	r3,r2,20dc5c <_gp+0xffdfc048>
  20de84:	ad7fff84 	addi	r21,r21,-2
  20de88:	1f07883a 	add	r3,r3,fp
  20de8c:	003f7406 	br	20dc60 <_gp+0xffdfc04c>
  20de90:	1839883a 	mov	fp,r3
  20de94:	003fdd06 	br	20de0c <_gp+0xffdfc1f8>
  20de98:	182f883a 	mov	r23,r3
  20de9c:	003fc506 	br	20ddb4 <_gp+0xffdfc1a0>
  20dea0:	b5bfff84 	addi	r22,r22,-2
  20dea4:	3c4f883a 	add	r7,r7,r17
  20dea8:	003f1a06 	br	20db14 <_gp+0xffdfbf00>
  20deac:	b5bfff84 	addi	r22,r22,-2
  20deb0:	1c47883a 	add	r3,r3,r17
  20deb4:	003ebc06 	br	20d9a8 <_gp+0xffdfbd94>

0020deb8 <__umoddi3>:
  20deb8:	defff304 	addi	sp,sp,-52
  20debc:	df000b15 	stw	fp,44(sp)
  20dec0:	dc400415 	stw	r17,16(sp)
  20dec4:	dc000315 	stw	r16,12(sp)
  20dec8:	dfc00c15 	stw	ra,48(sp)
  20decc:	ddc00a15 	stw	r23,40(sp)
  20ded0:	dd800915 	stw	r22,36(sp)
  20ded4:	dd400815 	stw	r21,32(sp)
  20ded8:	dd000715 	stw	r20,28(sp)
  20dedc:	dcc00615 	stw	r19,24(sp)
  20dee0:	dc800515 	stw	r18,20(sp)
  20dee4:	2021883a 	mov	r16,r4
  20dee8:	2823883a 	mov	r17,r5
  20deec:	2839883a 	mov	fp,r5
  20def0:	3800401e 	bne	r7,zero,20dff4 <__umoddi3+0x13c>
  20def4:	3027883a 	mov	r19,r6
  20def8:	2029883a 	mov	r20,r4
  20defc:	2980552e 	bgeu	r5,r6,20e054 <__umoddi3+0x19c>
  20df00:	00bfffd4 	movui	r2,65535
  20df04:	1180a236 	bltu	r2,r6,20e190 <__umoddi3+0x2d8>
  20df08:	01003fc4 	movi	r4,255
  20df0c:	2189803a 	cmpltu	r4,r4,r6
  20df10:	200890fa 	slli	r4,r4,3
  20df14:	3104d83a 	srl	r2,r6,r4
  20df18:	00c00874 	movhi	r3,33
  20df1c:	18dab904 	addi	r3,r3,27364
  20df20:	1885883a 	add	r2,r3,r2
  20df24:	10c00003 	ldbu	r3,0(r2)
  20df28:	00800804 	movi	r2,32
  20df2c:	1909883a 	add	r4,r3,r4
  20df30:	1125c83a 	sub	r18,r2,r4
  20df34:	90000526 	beq	r18,zero,20df4c <__umoddi3+0x94>
  20df38:	8ca2983a 	sll	r17,r17,r18
  20df3c:	8108d83a 	srl	r4,r16,r4
  20df40:	34a6983a 	sll	r19,r6,r18
  20df44:	84a8983a 	sll	r20,r16,r18
  20df48:	2478b03a 	or	fp,r4,r17
  20df4c:	982cd43a 	srli	r22,r19,16
  20df50:	e009883a 	mov	r4,fp
  20df54:	9dffffcc 	andi	r23,r19,65535
  20df58:	b00b883a 	mov	r5,r22
  20df5c:	02032200 	call	203220 <__umodsi3>
  20df60:	b00b883a 	mov	r5,r22
  20df64:	e009883a 	mov	r4,fp
  20df68:	102b883a 	mov	r21,r2
  20df6c:	02031bc0 	call	2031bc <__udivsi3>
  20df70:	100b883a 	mov	r5,r2
  20df74:	b809883a 	mov	r4,r23
  20df78:	02032780 	call	203278 <__mulsi3>
  20df7c:	a82a943a 	slli	r21,r21,16
  20df80:	a006d43a 	srli	r3,r20,16
  20df84:	1d46b03a 	or	r3,r3,r21
  20df88:	1880032e 	bgeu	r3,r2,20df98 <__umoddi3+0xe0>
  20df8c:	1cc7883a 	add	r3,r3,r19
  20df90:	1cc00136 	bltu	r3,r19,20df98 <__umoddi3+0xe0>
  20df94:	18813136 	bltu	r3,r2,20e45c <__umoddi3+0x5a4>
  20df98:	18a1c83a 	sub	r16,r3,r2
  20df9c:	b00b883a 	mov	r5,r22
  20dfa0:	8009883a 	mov	r4,r16
  20dfa4:	02032200 	call	203220 <__umodsi3>
  20dfa8:	b00b883a 	mov	r5,r22
  20dfac:	8009883a 	mov	r4,r16
  20dfb0:	1023883a 	mov	r17,r2
  20dfb4:	02031bc0 	call	2031bc <__udivsi3>
  20dfb8:	100b883a 	mov	r5,r2
  20dfbc:	b809883a 	mov	r4,r23
  20dfc0:	8822943a 	slli	r17,r17,16
  20dfc4:	02032780 	call	203278 <__mulsi3>
  20dfc8:	a0ffffcc 	andi	r3,r20,65535
  20dfcc:	1c46b03a 	or	r3,r3,r17
  20dfd0:	1880042e 	bgeu	r3,r2,20dfe4 <__umoddi3+0x12c>
  20dfd4:	1cc7883a 	add	r3,r3,r19
  20dfd8:	1cc00236 	bltu	r3,r19,20dfe4 <__umoddi3+0x12c>
  20dfdc:	1880012e 	bgeu	r3,r2,20dfe4 <__umoddi3+0x12c>
  20dfe0:	1cc7883a 	add	r3,r3,r19
  20dfe4:	1885c83a 	sub	r2,r3,r2
  20dfe8:	1484d83a 	srl	r2,r2,r18
  20dfec:	0007883a 	mov	r3,zero
  20dff0:	00005306 	br	20e140 <__umoddi3+0x288>
  20dff4:	29c05036 	bltu	r5,r7,20e138 <__umoddi3+0x280>
  20dff8:	00bfffd4 	movui	r2,65535
  20dffc:	11c05c2e 	bgeu	r2,r7,20e170 <__umoddi3+0x2b8>
  20e000:	00804034 	movhi	r2,256
  20e004:	10bfffc4 	addi	r2,r2,-1
  20e008:	11c10636 	bltu	r2,r7,20e424 <__umoddi3+0x56c>
  20e00c:	01000404 	movi	r4,16
  20e010:	3904d83a 	srl	r2,r7,r4
  20e014:	00c00874 	movhi	r3,33
  20e018:	18dab904 	addi	r3,r3,27364
  20e01c:	1885883a 	add	r2,r3,r2
  20e020:	14c00003 	ldbu	r19,0(r2)
  20e024:	00c00804 	movi	r3,32
  20e028:	9927883a 	add	r19,r19,r4
  20e02c:	1ce9c83a 	sub	r20,r3,r19
  20e030:	a0005c1e 	bne	r20,zero,20e1a4 <__umoddi3+0x2ec>
  20e034:	3c400136 	bltu	r7,r17,20e03c <__umoddi3+0x184>
  20e038:	81810a36 	bltu	r16,r6,20e464 <__umoddi3+0x5ac>
  20e03c:	8185c83a 	sub	r2,r16,r6
  20e040:	89e3c83a 	sub	r17,r17,r7
  20e044:	8089803a 	cmpltu	r4,r16,r2
  20e048:	8939c83a 	sub	fp,r17,r4
  20e04c:	e007883a 	mov	r3,fp
  20e050:	00003b06 	br	20e140 <__umoddi3+0x288>
  20e054:	3000041e 	bne	r6,zero,20e068 <__umoddi3+0x1b0>
  20e058:	000b883a 	mov	r5,zero
  20e05c:	01000044 	movi	r4,1
  20e060:	02031bc0 	call	2031bc <__udivsi3>
  20e064:	1027883a 	mov	r19,r2
  20e068:	00bfffd4 	movui	r2,65535
  20e06c:	14c0442e 	bgeu	r2,r19,20e180 <__umoddi3+0x2c8>
  20e070:	00804034 	movhi	r2,256
  20e074:	10bfffc4 	addi	r2,r2,-1
  20e078:	14c0ec36 	bltu	r2,r19,20e42c <__umoddi3+0x574>
  20e07c:	00800404 	movi	r2,16
  20e080:	9886d83a 	srl	r3,r19,r2
  20e084:	01000874 	movhi	r4,33
  20e088:	211ab904 	addi	r4,r4,27364
  20e08c:	20c7883a 	add	r3,r4,r3
  20e090:	18c00003 	ldbu	r3,0(r3)
  20e094:	1887883a 	add	r3,r3,r2
  20e098:	00800804 	movi	r2,32
  20e09c:	10e5c83a 	sub	r18,r2,r3
  20e0a0:	9000ab1e 	bne	r18,zero,20e350 <__umoddi3+0x498>
  20e0a4:	982cd43a 	srli	r22,r19,16
  20e0a8:	8ce3c83a 	sub	r17,r17,r19
  20e0ac:	9dffffcc 	andi	r23,r19,65535
  20e0b0:	b00b883a 	mov	r5,r22
  20e0b4:	8809883a 	mov	r4,r17
  20e0b8:	02032200 	call	203220 <__umodsi3>
  20e0bc:	b00b883a 	mov	r5,r22
  20e0c0:	8809883a 	mov	r4,r17
  20e0c4:	102b883a 	mov	r21,r2
  20e0c8:	02031bc0 	call	2031bc <__udivsi3>
  20e0cc:	b80b883a 	mov	r5,r23
  20e0d0:	1009883a 	mov	r4,r2
  20e0d4:	02032780 	call	203278 <__mulsi3>
  20e0d8:	a82a943a 	slli	r21,r21,16
  20e0dc:	a006d43a 	srli	r3,r20,16
  20e0e0:	1d46b03a 	or	r3,r3,r21
  20e0e4:	1880042e 	bgeu	r3,r2,20e0f8 <__umoddi3+0x240>
  20e0e8:	1cc7883a 	add	r3,r3,r19
  20e0ec:	1cc00236 	bltu	r3,r19,20e0f8 <__umoddi3+0x240>
  20e0f0:	1880012e 	bgeu	r3,r2,20e0f8 <__umoddi3+0x240>
  20e0f4:	1cc7883a 	add	r3,r3,r19
  20e0f8:	18a1c83a 	sub	r16,r3,r2
  20e0fc:	b00b883a 	mov	r5,r22
  20e100:	8009883a 	mov	r4,r16
  20e104:	02032200 	call	203220 <__umodsi3>
  20e108:	1023883a 	mov	r17,r2
  20e10c:	b00b883a 	mov	r5,r22
  20e110:	8009883a 	mov	r4,r16
  20e114:	02031bc0 	call	2031bc <__udivsi3>
  20e118:	8822943a 	slli	r17,r17,16
  20e11c:	b80b883a 	mov	r5,r23
  20e120:	1009883a 	mov	r4,r2
  20e124:	02032780 	call	203278 <__mulsi3>
  20e128:	a53fffcc 	andi	r20,r20,65535
  20e12c:	a446b03a 	or	r3,r20,r17
  20e130:	18bfac2e 	bgeu	r3,r2,20dfe4 <_gp+0xffdfc3d0>
  20e134:	003fa706 	br	20dfd4 <_gp+0xffdfc3c0>
  20e138:	2005883a 	mov	r2,r4
  20e13c:	2807883a 	mov	r3,r5
  20e140:	dfc00c17 	ldw	ra,48(sp)
  20e144:	df000b17 	ldw	fp,44(sp)
  20e148:	ddc00a17 	ldw	r23,40(sp)
  20e14c:	dd800917 	ldw	r22,36(sp)
  20e150:	dd400817 	ldw	r21,32(sp)
  20e154:	dd000717 	ldw	r20,28(sp)
  20e158:	dcc00617 	ldw	r19,24(sp)
  20e15c:	dc800517 	ldw	r18,20(sp)
  20e160:	dc400417 	ldw	r17,16(sp)
  20e164:	dc000317 	ldw	r16,12(sp)
  20e168:	dec00d04 	addi	sp,sp,52
  20e16c:	f800283a 	ret
  20e170:	04c03fc4 	movi	r19,255
  20e174:	99c9803a 	cmpltu	r4,r19,r7
  20e178:	200890fa 	slli	r4,r4,3
  20e17c:	003fa406 	br	20e010 <_gp+0xffdfc3fc>
  20e180:	00803fc4 	movi	r2,255
  20e184:	14c5803a 	cmpltu	r2,r2,r19
  20e188:	100490fa 	slli	r2,r2,3
  20e18c:	003fbc06 	br	20e080 <_gp+0xffdfc46c>
  20e190:	00804034 	movhi	r2,256
  20e194:	10bfffc4 	addi	r2,r2,-1
  20e198:	1180a636 	bltu	r2,r6,20e434 <__umoddi3+0x57c>
  20e19c:	01000404 	movi	r4,16
  20e1a0:	003f5c06 	br	20df14 <_gp+0xffdfc300>
  20e1a4:	3d0e983a 	sll	r7,r7,r20
  20e1a8:	34ead83a 	srl	r21,r6,r19
  20e1ac:	8cc6d83a 	srl	r3,r17,r19
  20e1b0:	8d10983a 	sll	r8,r17,r20
  20e1b4:	3d6ab03a 	or	r21,r7,r21
  20e1b8:	a82cd43a 	srli	r22,r21,16
  20e1bc:	84e2d83a 	srl	r17,r16,r19
  20e1c0:	1809883a 	mov	r4,r3
  20e1c4:	b00b883a 	mov	r5,r22
  20e1c8:	8a22b03a 	or	r17,r17,r8
  20e1cc:	3524983a 	sll	r18,r6,r20
  20e1d0:	dc400015 	stw	r17,0(sp)
  20e1d4:	d8c00115 	stw	r3,4(sp)
  20e1d8:	02032200 	call	203220 <__umodsi3>
  20e1dc:	d8c00117 	ldw	r3,4(sp)
  20e1e0:	b00b883a 	mov	r5,r22
  20e1e4:	1039883a 	mov	fp,r2
  20e1e8:	1809883a 	mov	r4,r3
  20e1ec:	02031bc0 	call	2031bc <__udivsi3>
  20e1f0:	adffffcc 	andi	r23,r21,65535
  20e1f4:	100b883a 	mov	r5,r2
  20e1f8:	b809883a 	mov	r4,r23
  20e1fc:	1023883a 	mov	r17,r2
  20e200:	02032780 	call	203278 <__mulsi3>
  20e204:	d9400017 	ldw	r5,0(sp)
  20e208:	e008943a 	slli	r4,fp,16
  20e20c:	8520983a 	sll	r16,r16,r20
  20e210:	2806d43a 	srli	r3,r5,16
  20e214:	1906b03a 	or	r3,r3,r4
  20e218:	1880042e 	bgeu	r3,r2,20e22c <__umoddi3+0x374>
  20e21c:	1d47883a 	add	r3,r3,r21
  20e220:	893fffc4 	addi	r4,r17,-1
  20e224:	1d40892e 	bgeu	r3,r21,20e44c <__umoddi3+0x594>
  20e228:	2023883a 	mov	r17,r4
  20e22c:	18b9c83a 	sub	fp,r3,r2
  20e230:	b00b883a 	mov	r5,r22
  20e234:	e009883a 	mov	r4,fp
  20e238:	02032200 	call	203220 <__umodsi3>
  20e23c:	b00b883a 	mov	r5,r22
  20e240:	e009883a 	mov	r4,fp
  20e244:	d8800215 	stw	r2,8(sp)
  20e248:	02031bc0 	call	2031bc <__udivsi3>
  20e24c:	100b883a 	mov	r5,r2
  20e250:	b809883a 	mov	r4,r23
  20e254:	102d883a 	mov	r22,r2
  20e258:	02032780 	call	203278 <__mulsi3>
  20e25c:	d9800217 	ldw	r6,8(sp)
  20e260:	d8c00017 	ldw	r3,0(sp)
  20e264:	300c943a 	slli	r6,r6,16
  20e268:	1a3fffcc 	andi	r8,r3,65535
  20e26c:	4190b03a 	or	r8,r8,r6
  20e270:	4080042e 	bgeu	r8,r2,20e284 <__umoddi3+0x3cc>
  20e274:	4551883a 	add	r8,r8,r21
  20e278:	b0ffffc4 	addi	r3,r22,-1
  20e27c:	45406f2e 	bgeu	r8,r21,20e43c <__umoddi3+0x584>
  20e280:	182d883a 	mov	r22,r3
  20e284:	880e943a 	slli	r7,r17,16
  20e288:	9006d43a 	srli	r3,r18,16
  20e28c:	91bfffcc 	andi	r6,r18,65535
  20e290:	3dacb03a 	or	r22,r7,r22
  20e294:	b02ed43a 	srli	r23,r22,16
  20e298:	b5bfffcc 	andi	r22,r22,65535
  20e29c:	300b883a 	mov	r5,r6
  20e2a0:	b009883a 	mov	r4,r22
  20e2a4:	40a3c83a 	sub	r17,r8,r2
  20e2a8:	d8c00115 	stw	r3,4(sp)
  20e2ac:	d9800215 	stw	r6,8(sp)
  20e2b0:	02032780 	call	203278 <__mulsi3>
  20e2b4:	d9800217 	ldw	r6,8(sp)
  20e2b8:	b809883a 	mov	r4,r23
  20e2bc:	1039883a 	mov	fp,r2
  20e2c0:	300b883a 	mov	r5,r6
  20e2c4:	02032780 	call	203278 <__mulsi3>
  20e2c8:	d8c00117 	ldw	r3,4(sp)
  20e2cc:	b809883a 	mov	r4,r23
  20e2d0:	d8800215 	stw	r2,8(sp)
  20e2d4:	180b883a 	mov	r5,r3
  20e2d8:	02032780 	call	203278 <__mulsi3>
  20e2dc:	d8c00117 	ldw	r3,4(sp)
  20e2e0:	b009883a 	mov	r4,r22
  20e2e4:	102f883a 	mov	r23,r2
  20e2e8:	180b883a 	mov	r5,r3
  20e2ec:	02032780 	call	203278 <__mulsi3>
  20e2f0:	d9800217 	ldw	r6,8(sp)
  20e2f4:	e006d43a 	srli	r3,fp,16
  20e2f8:	1185883a 	add	r2,r2,r6
  20e2fc:	1885883a 	add	r2,r3,r2
  20e300:	1180022e 	bgeu	r2,r6,20e30c <__umoddi3+0x454>
  20e304:	00c00074 	movhi	r3,1
  20e308:	b8ef883a 	add	r23,r23,r3
  20e30c:	1006d43a 	srli	r3,r2,16
  20e310:	1004943a 	slli	r2,r2,16
  20e314:	e73fffcc 	andi	fp,fp,65535
  20e318:	1dc7883a 	add	r3,r3,r23
  20e31c:	1739883a 	add	fp,r2,fp
  20e320:	88c03a36 	bltu	r17,r3,20e40c <__umoddi3+0x554>
  20e324:	88c05126 	beq	r17,r3,20e46c <__umoddi3+0x5b4>
  20e328:	88c9c83a 	sub	r4,r17,r3
  20e32c:	e00f883a 	mov	r7,fp
  20e330:	81cfc83a 	sub	r7,r16,r7
  20e334:	81c7803a 	cmpltu	r3,r16,r7
  20e338:	20c7c83a 	sub	r3,r4,r3
  20e33c:	1cc4983a 	sll	r2,r3,r19
  20e340:	3d0ed83a 	srl	r7,r7,r20
  20e344:	1d06d83a 	srl	r3,r3,r20
  20e348:	11c4b03a 	or	r2,r2,r7
  20e34c:	003f7c06 	br	20e140 <_gp+0xffdfc52c>
  20e350:	9ca6983a 	sll	r19,r19,r18
  20e354:	88f8d83a 	srl	fp,r17,r3
  20e358:	80c4d83a 	srl	r2,r16,r3
  20e35c:	982cd43a 	srli	r22,r19,16
  20e360:	8ca2983a 	sll	r17,r17,r18
  20e364:	e009883a 	mov	r4,fp
  20e368:	b00b883a 	mov	r5,r22
  20e36c:	146ab03a 	or	r21,r2,r17
  20e370:	02032200 	call	203220 <__umodsi3>
  20e374:	b00b883a 	mov	r5,r22
  20e378:	e009883a 	mov	r4,fp
  20e37c:	1029883a 	mov	r20,r2
  20e380:	9dffffcc 	andi	r23,r19,65535
  20e384:	02031bc0 	call	2031bc <__udivsi3>
  20e388:	b809883a 	mov	r4,r23
  20e38c:	100b883a 	mov	r5,r2
  20e390:	02032780 	call	203278 <__mulsi3>
  20e394:	a008943a 	slli	r4,r20,16
  20e398:	a806d43a 	srli	r3,r21,16
  20e39c:	84a8983a 	sll	r20,r16,r18
  20e3a0:	1906b03a 	or	r3,r3,r4
  20e3a4:	1880042e 	bgeu	r3,r2,20e3b8 <__umoddi3+0x500>
  20e3a8:	1cc7883a 	add	r3,r3,r19
  20e3ac:	1cc00236 	bltu	r3,r19,20e3b8 <__umoddi3+0x500>
  20e3b0:	1880012e 	bgeu	r3,r2,20e3b8 <__umoddi3+0x500>
  20e3b4:	1cc7883a 	add	r3,r3,r19
  20e3b8:	18a3c83a 	sub	r17,r3,r2
  20e3bc:	b00b883a 	mov	r5,r22
  20e3c0:	8809883a 	mov	r4,r17
  20e3c4:	02032200 	call	203220 <__umodsi3>
  20e3c8:	b00b883a 	mov	r5,r22
  20e3cc:	8809883a 	mov	r4,r17
  20e3d0:	1021883a 	mov	r16,r2
  20e3d4:	02031bc0 	call	2031bc <__udivsi3>
  20e3d8:	100b883a 	mov	r5,r2
  20e3dc:	b809883a 	mov	r4,r23
  20e3e0:	8020943a 	slli	r16,r16,16
  20e3e4:	02032780 	call	203278 <__mulsi3>
  20e3e8:	a8ffffcc 	andi	r3,r21,65535
  20e3ec:	1c06b03a 	or	r3,r3,r16
  20e3f0:	1880042e 	bgeu	r3,r2,20e404 <__umoddi3+0x54c>
  20e3f4:	1cc7883a 	add	r3,r3,r19
  20e3f8:	1cc00236 	bltu	r3,r19,20e404 <__umoddi3+0x54c>
  20e3fc:	1880012e 	bgeu	r3,r2,20e404 <__umoddi3+0x54c>
  20e400:	1cc7883a 	add	r3,r3,r19
  20e404:	18a3c83a 	sub	r17,r3,r2
  20e408:	003f2906 	br	20e0b0 <_gp+0xffdfc49c>
  20e40c:	e48fc83a 	sub	r7,fp,r18
  20e410:	1d49c83a 	sub	r4,r3,r21
  20e414:	e1f9803a 	cmpltu	fp,fp,r7
  20e418:	2739c83a 	sub	fp,r4,fp
  20e41c:	8f09c83a 	sub	r4,r17,fp
  20e420:	003fc306 	br	20e330 <_gp+0xffdfc71c>
  20e424:	01000604 	movi	r4,24
  20e428:	003ef906 	br	20e010 <_gp+0xffdfc3fc>
  20e42c:	00800604 	movi	r2,24
  20e430:	003f1306 	br	20e080 <_gp+0xffdfc46c>
  20e434:	01000604 	movi	r4,24
  20e438:	003eb606 	br	20df14 <_gp+0xffdfc300>
  20e43c:	40bf902e 	bgeu	r8,r2,20e280 <_gp+0xffdfc66c>
  20e440:	b5bfff84 	addi	r22,r22,-2
  20e444:	4551883a 	add	r8,r8,r21
  20e448:	003f8e06 	br	20e284 <_gp+0xffdfc670>
  20e44c:	18bf762e 	bgeu	r3,r2,20e228 <_gp+0xffdfc614>
  20e450:	8c7fff84 	addi	r17,r17,-2
  20e454:	1d47883a 	add	r3,r3,r21
  20e458:	003f7406 	br	20e22c <_gp+0xffdfc618>
  20e45c:	1cc7883a 	add	r3,r3,r19
  20e460:	003ecd06 	br	20df98 <_gp+0xffdfc384>
  20e464:	8005883a 	mov	r2,r16
  20e468:	003ef806 	br	20e04c <_gp+0xffdfc438>
  20e46c:	873fe736 	bltu	r16,fp,20e40c <_gp+0xffdfc7f8>
  20e470:	e00f883a 	mov	r7,fp
  20e474:	0009883a 	mov	r4,zero
  20e478:	003fad06 	br	20e330 <_gp+0xffdfc71c>

0020e47c <__adddf3>:
  20e47c:	02c00434 	movhi	r11,16
  20e480:	5affffc4 	addi	r11,r11,-1
  20e484:	2806d7fa 	srli	r3,r5,31
  20e488:	2ad4703a 	and	r10,r5,r11
  20e48c:	3ad2703a 	and	r9,r7,r11
  20e490:	3804d53a 	srli	r2,r7,20
  20e494:	3018d77a 	srli	r12,r6,29
  20e498:	280ad53a 	srli	r5,r5,20
  20e49c:	501490fa 	slli	r10,r10,3
  20e4a0:	2010d77a 	srli	r8,r4,29
  20e4a4:	481290fa 	slli	r9,r9,3
  20e4a8:	380ed7fa 	srli	r7,r7,31
  20e4ac:	defffb04 	addi	sp,sp,-20
  20e4b0:	dc800215 	stw	r18,8(sp)
  20e4b4:	dc400115 	stw	r17,4(sp)
  20e4b8:	dc000015 	stw	r16,0(sp)
  20e4bc:	dfc00415 	stw	ra,16(sp)
  20e4c0:	dcc00315 	stw	r19,12(sp)
  20e4c4:	1c803fcc 	andi	r18,r3,255
  20e4c8:	2c01ffcc 	andi	r16,r5,2047
  20e4cc:	5210b03a 	or	r8,r10,r8
  20e4d0:	202290fa 	slli	r17,r4,3
  20e4d4:	1081ffcc 	andi	r2,r2,2047
  20e4d8:	4b12b03a 	or	r9,r9,r12
  20e4dc:	300c90fa 	slli	r6,r6,3
  20e4e0:	91c07526 	beq	r18,r7,20e6b8 <__adddf3+0x23c>
  20e4e4:	8087c83a 	sub	r3,r16,r2
  20e4e8:	00c0ab0e 	bge	zero,r3,20e798 <__adddf3+0x31c>
  20e4ec:	10002a1e 	bne	r2,zero,20e598 <__adddf3+0x11c>
  20e4f0:	4984b03a 	or	r2,r9,r6
  20e4f4:	1000961e 	bne	r2,zero,20e750 <__adddf3+0x2d4>
  20e4f8:	888001cc 	andi	r2,r17,7
  20e4fc:	10000726 	beq	r2,zero,20e51c <__adddf3+0xa0>
  20e500:	888003cc 	andi	r2,r17,15
  20e504:	00c00104 	movi	r3,4
  20e508:	10c00426 	beq	r2,r3,20e51c <__adddf3+0xa0>
  20e50c:	88c7883a 	add	r3,r17,r3
  20e510:	1c63803a 	cmpltu	r17,r3,r17
  20e514:	4451883a 	add	r8,r8,r17
  20e518:	1823883a 	mov	r17,r3
  20e51c:	4080202c 	andhi	r2,r8,128
  20e520:	10005926 	beq	r2,zero,20e688 <__adddf3+0x20c>
  20e524:	84000044 	addi	r16,r16,1
  20e528:	0081ffc4 	movi	r2,2047
  20e52c:	8080ba26 	beq	r16,r2,20e818 <__adddf3+0x39c>
  20e530:	00bfe034 	movhi	r2,65408
  20e534:	10bfffc4 	addi	r2,r2,-1
  20e538:	4090703a 	and	r8,r8,r2
  20e53c:	4004977a 	slli	r2,r8,29
  20e540:	4010927a 	slli	r8,r8,9
  20e544:	8822d0fa 	srli	r17,r17,3
  20e548:	8401ffcc 	andi	r16,r16,2047
  20e54c:	4010d33a 	srli	r8,r8,12
  20e550:	9007883a 	mov	r3,r18
  20e554:	1444b03a 	or	r2,r2,r17
  20e558:	8401ffcc 	andi	r16,r16,2047
  20e55c:	8020953a 	slli	r16,r16,20
  20e560:	18c03fcc 	andi	r3,r3,255
  20e564:	01000434 	movhi	r4,16
  20e568:	213fffc4 	addi	r4,r4,-1
  20e56c:	180697fa 	slli	r3,r3,31
  20e570:	4110703a 	and	r8,r8,r4
  20e574:	4410b03a 	or	r8,r8,r16
  20e578:	40c6b03a 	or	r3,r8,r3
  20e57c:	dfc00417 	ldw	ra,16(sp)
  20e580:	dcc00317 	ldw	r19,12(sp)
  20e584:	dc800217 	ldw	r18,8(sp)
  20e588:	dc400117 	ldw	r17,4(sp)
  20e58c:	dc000017 	ldw	r16,0(sp)
  20e590:	dec00504 	addi	sp,sp,20
  20e594:	f800283a 	ret
  20e598:	0081ffc4 	movi	r2,2047
  20e59c:	80bfd626 	beq	r16,r2,20e4f8 <_gp+0xffdfc8e4>
  20e5a0:	4a402034 	orhi	r9,r9,128
  20e5a4:	00800e04 	movi	r2,56
  20e5a8:	10c09f16 	blt	r2,r3,20e828 <__adddf3+0x3ac>
  20e5ac:	008007c4 	movi	r2,31
  20e5b0:	10c0c216 	blt	r2,r3,20e8bc <__adddf3+0x440>
  20e5b4:	00800804 	movi	r2,32
  20e5b8:	10c5c83a 	sub	r2,r2,r3
  20e5bc:	488a983a 	sll	r5,r9,r2
  20e5c0:	30c8d83a 	srl	r4,r6,r3
  20e5c4:	3084983a 	sll	r2,r6,r2
  20e5c8:	48c6d83a 	srl	r3,r9,r3
  20e5cc:	290cb03a 	or	r6,r5,r4
  20e5d0:	1004c03a 	cmpne	r2,r2,zero
  20e5d4:	308cb03a 	or	r6,r6,r2
  20e5d8:	898dc83a 	sub	r6,r17,r6
  20e5dc:	89a3803a 	cmpltu	r17,r17,r6
  20e5e0:	40d1c83a 	sub	r8,r8,r3
  20e5e4:	4451c83a 	sub	r8,r8,r17
  20e5e8:	3023883a 	mov	r17,r6
  20e5ec:	4080202c 	andhi	r2,r8,128
  20e5f0:	10002326 	beq	r2,zero,20e680 <__adddf3+0x204>
  20e5f4:	04c02034 	movhi	r19,128
  20e5f8:	9cffffc4 	addi	r19,r19,-1
  20e5fc:	44e6703a 	and	r19,r8,r19
  20e600:	98007626 	beq	r19,zero,20e7dc <__adddf3+0x360>
  20e604:	9809883a 	mov	r4,r19
  20e608:	0203dd00 	call	203dd0 <__clzsi2>
  20e60c:	10fffe04 	addi	r3,r2,-8
  20e610:	010007c4 	movi	r4,31
  20e614:	20c07716 	blt	r4,r3,20e7f4 <__adddf3+0x378>
  20e618:	00800804 	movi	r2,32
  20e61c:	10c5c83a 	sub	r2,r2,r3
  20e620:	8884d83a 	srl	r2,r17,r2
  20e624:	98d0983a 	sll	r8,r19,r3
  20e628:	88e2983a 	sll	r17,r17,r3
  20e62c:	1204b03a 	or	r2,r2,r8
  20e630:	1c007416 	blt	r3,r16,20e804 <__adddf3+0x388>
  20e634:	1c21c83a 	sub	r16,r3,r16
  20e638:	82000044 	addi	r8,r16,1
  20e63c:	00c007c4 	movi	r3,31
  20e640:	1a009116 	blt	r3,r8,20e888 <__adddf3+0x40c>
  20e644:	00c00804 	movi	r3,32
  20e648:	1a07c83a 	sub	r3,r3,r8
  20e64c:	8a08d83a 	srl	r4,r17,r8
  20e650:	88e2983a 	sll	r17,r17,r3
  20e654:	10c6983a 	sll	r3,r2,r3
  20e658:	1210d83a 	srl	r8,r2,r8
  20e65c:	8804c03a 	cmpne	r2,r17,zero
  20e660:	1906b03a 	or	r3,r3,r4
  20e664:	18a2b03a 	or	r17,r3,r2
  20e668:	0021883a 	mov	r16,zero
  20e66c:	003fa206 	br	20e4f8 <_gp+0xffdfc8e4>
  20e670:	1890b03a 	or	r8,r3,r2
  20e674:	40017d26 	beq	r8,zero,20ec6c <__adddf3+0x7f0>
  20e678:	1011883a 	mov	r8,r2
  20e67c:	1823883a 	mov	r17,r3
  20e680:	888001cc 	andi	r2,r17,7
  20e684:	103f9e1e 	bne	r2,zero,20e500 <_gp+0xffdfc8ec>
  20e688:	4004977a 	slli	r2,r8,29
  20e68c:	8822d0fa 	srli	r17,r17,3
  20e690:	4010d0fa 	srli	r8,r8,3
  20e694:	9007883a 	mov	r3,r18
  20e698:	1444b03a 	or	r2,r2,r17
  20e69c:	0101ffc4 	movi	r4,2047
  20e6a0:	81002426 	beq	r16,r4,20e734 <__adddf3+0x2b8>
  20e6a4:	8120703a 	and	r16,r16,r4
  20e6a8:	01000434 	movhi	r4,16
  20e6ac:	213fffc4 	addi	r4,r4,-1
  20e6b0:	4110703a 	and	r8,r8,r4
  20e6b4:	003fa806 	br	20e558 <_gp+0xffdfc944>
  20e6b8:	8089c83a 	sub	r4,r16,r2
  20e6bc:	01005e0e 	bge	zero,r4,20e838 <__adddf3+0x3bc>
  20e6c0:	10002b26 	beq	r2,zero,20e770 <__adddf3+0x2f4>
  20e6c4:	0081ffc4 	movi	r2,2047
  20e6c8:	80bf8b26 	beq	r16,r2,20e4f8 <_gp+0xffdfc8e4>
  20e6cc:	4a402034 	orhi	r9,r9,128
  20e6d0:	00800e04 	movi	r2,56
  20e6d4:	1100a40e 	bge	r2,r4,20e968 <__adddf3+0x4ec>
  20e6d8:	498cb03a 	or	r6,r9,r6
  20e6dc:	300ac03a 	cmpne	r5,r6,zero
  20e6e0:	0013883a 	mov	r9,zero
  20e6e4:	2c4b883a 	add	r5,r5,r17
  20e6e8:	2c63803a 	cmpltu	r17,r5,r17
  20e6ec:	4a11883a 	add	r8,r9,r8
  20e6f0:	8a11883a 	add	r8,r17,r8
  20e6f4:	2823883a 	mov	r17,r5
  20e6f8:	4080202c 	andhi	r2,r8,128
  20e6fc:	103fe026 	beq	r2,zero,20e680 <_gp+0xffdfca6c>
  20e700:	84000044 	addi	r16,r16,1
  20e704:	0081ffc4 	movi	r2,2047
  20e708:	8080d226 	beq	r16,r2,20ea54 <__adddf3+0x5d8>
  20e70c:	00bfe034 	movhi	r2,65408
  20e710:	10bfffc4 	addi	r2,r2,-1
  20e714:	4090703a 	and	r8,r8,r2
  20e718:	880ad07a 	srli	r5,r17,1
  20e71c:	400897fa 	slli	r4,r8,31
  20e720:	88c0004c 	andi	r3,r17,1
  20e724:	28e2b03a 	or	r17,r5,r3
  20e728:	4010d07a 	srli	r8,r8,1
  20e72c:	2462b03a 	or	r17,r4,r17
  20e730:	003f7106 	br	20e4f8 <_gp+0xffdfc8e4>
  20e734:	4088b03a 	or	r4,r8,r2
  20e738:	20014526 	beq	r4,zero,20ec50 <__adddf3+0x7d4>
  20e73c:	01000434 	movhi	r4,16
  20e740:	42000234 	orhi	r8,r8,8
  20e744:	213fffc4 	addi	r4,r4,-1
  20e748:	4110703a 	and	r8,r8,r4
  20e74c:	003f8206 	br	20e558 <_gp+0xffdfc944>
  20e750:	18ffffc4 	addi	r3,r3,-1
  20e754:	1800491e 	bne	r3,zero,20e87c <__adddf3+0x400>
  20e758:	898bc83a 	sub	r5,r17,r6
  20e75c:	8963803a 	cmpltu	r17,r17,r5
  20e760:	4251c83a 	sub	r8,r8,r9
  20e764:	4451c83a 	sub	r8,r8,r17
  20e768:	2823883a 	mov	r17,r5
  20e76c:	003f9f06 	br	20e5ec <_gp+0xffdfc9d8>
  20e770:	4984b03a 	or	r2,r9,r6
  20e774:	103f6026 	beq	r2,zero,20e4f8 <_gp+0xffdfc8e4>
  20e778:	213fffc4 	addi	r4,r4,-1
  20e77c:	2000931e 	bne	r4,zero,20e9cc <__adddf3+0x550>
  20e780:	898d883a 	add	r6,r17,r6
  20e784:	3463803a 	cmpltu	r17,r6,r17
  20e788:	4251883a 	add	r8,r8,r9
  20e78c:	8a11883a 	add	r8,r17,r8
  20e790:	3023883a 	mov	r17,r6
  20e794:	003fd806 	br	20e6f8 <_gp+0xffdfcae4>
  20e798:	1800541e 	bne	r3,zero,20e8ec <__adddf3+0x470>
  20e79c:	80800044 	addi	r2,r16,1
  20e7a0:	1081ffcc 	andi	r2,r2,2047
  20e7a4:	00c00044 	movi	r3,1
  20e7a8:	1880a00e 	bge	r3,r2,20ea2c <__adddf3+0x5b0>
  20e7ac:	8989c83a 	sub	r4,r17,r6
  20e7b0:	8905803a 	cmpltu	r2,r17,r4
  20e7b4:	4267c83a 	sub	r19,r8,r9
  20e7b8:	98a7c83a 	sub	r19,r19,r2
  20e7bc:	9880202c 	andhi	r2,r19,128
  20e7c0:	10006326 	beq	r2,zero,20e950 <__adddf3+0x4d4>
  20e7c4:	3463c83a 	sub	r17,r6,r17
  20e7c8:	4a07c83a 	sub	r3,r9,r8
  20e7cc:	344d803a 	cmpltu	r6,r6,r17
  20e7d0:	19a7c83a 	sub	r19,r3,r6
  20e7d4:	3825883a 	mov	r18,r7
  20e7d8:	983f8a1e 	bne	r19,zero,20e604 <_gp+0xffdfc9f0>
  20e7dc:	8809883a 	mov	r4,r17
  20e7e0:	0203dd00 	call	203dd0 <__clzsi2>
  20e7e4:	10800804 	addi	r2,r2,32
  20e7e8:	10fffe04 	addi	r3,r2,-8
  20e7ec:	010007c4 	movi	r4,31
  20e7f0:	20ff890e 	bge	r4,r3,20e618 <_gp+0xffdfca04>
  20e7f4:	10bff604 	addi	r2,r2,-40
  20e7f8:	8884983a 	sll	r2,r17,r2
  20e7fc:	0023883a 	mov	r17,zero
  20e800:	1c3f8c0e 	bge	r3,r16,20e634 <_gp+0xffdfca20>
  20e804:	023fe034 	movhi	r8,65408
  20e808:	423fffc4 	addi	r8,r8,-1
  20e80c:	80e1c83a 	sub	r16,r16,r3
  20e810:	1210703a 	and	r8,r2,r8
  20e814:	003f3806 	br	20e4f8 <_gp+0xffdfc8e4>
  20e818:	9007883a 	mov	r3,r18
  20e81c:	0011883a 	mov	r8,zero
  20e820:	0005883a 	mov	r2,zero
  20e824:	003f4c06 	br	20e558 <_gp+0xffdfc944>
  20e828:	498cb03a 	or	r6,r9,r6
  20e82c:	300cc03a 	cmpne	r6,r6,zero
  20e830:	0007883a 	mov	r3,zero
  20e834:	003f6806 	br	20e5d8 <_gp+0xffdfc9c4>
  20e838:	20009c1e 	bne	r4,zero,20eaac <__adddf3+0x630>
  20e83c:	80800044 	addi	r2,r16,1
  20e840:	1141ffcc 	andi	r5,r2,2047
  20e844:	01000044 	movi	r4,1
  20e848:	2140670e 	bge	r4,r5,20e9e8 <__adddf3+0x56c>
  20e84c:	0101ffc4 	movi	r4,2047
  20e850:	11007f26 	beq	r2,r4,20ea50 <__adddf3+0x5d4>
  20e854:	898d883a 	add	r6,r17,r6
  20e858:	4247883a 	add	r3,r8,r9
  20e85c:	3451803a 	cmpltu	r8,r6,r17
  20e860:	40d1883a 	add	r8,r8,r3
  20e864:	402297fa 	slli	r17,r8,31
  20e868:	300cd07a 	srli	r6,r6,1
  20e86c:	4010d07a 	srli	r8,r8,1
  20e870:	1021883a 	mov	r16,r2
  20e874:	89a2b03a 	or	r17,r17,r6
  20e878:	003f1f06 	br	20e4f8 <_gp+0xffdfc8e4>
  20e87c:	0081ffc4 	movi	r2,2047
  20e880:	80bf481e 	bne	r16,r2,20e5a4 <_gp+0xffdfc990>
  20e884:	003f1c06 	br	20e4f8 <_gp+0xffdfc8e4>
  20e888:	843ff844 	addi	r16,r16,-31
  20e88c:	01000804 	movi	r4,32
  20e890:	1406d83a 	srl	r3,r2,r16
  20e894:	41005026 	beq	r8,r4,20e9d8 <__adddf3+0x55c>
  20e898:	01001004 	movi	r4,64
  20e89c:	2211c83a 	sub	r8,r4,r8
  20e8a0:	1204983a 	sll	r2,r2,r8
  20e8a4:	88a2b03a 	or	r17,r17,r2
  20e8a8:	8822c03a 	cmpne	r17,r17,zero
  20e8ac:	1c62b03a 	or	r17,r3,r17
  20e8b0:	0011883a 	mov	r8,zero
  20e8b4:	0021883a 	mov	r16,zero
  20e8b8:	003f7106 	br	20e680 <_gp+0xffdfca6c>
  20e8bc:	193ff804 	addi	r4,r3,-32
  20e8c0:	00800804 	movi	r2,32
  20e8c4:	4908d83a 	srl	r4,r9,r4
  20e8c8:	18804526 	beq	r3,r2,20e9e0 <__adddf3+0x564>
  20e8cc:	00801004 	movi	r2,64
  20e8d0:	10c5c83a 	sub	r2,r2,r3
  20e8d4:	4886983a 	sll	r3,r9,r2
  20e8d8:	198cb03a 	or	r6,r3,r6
  20e8dc:	300cc03a 	cmpne	r6,r6,zero
  20e8e0:	218cb03a 	or	r6,r4,r6
  20e8e4:	0007883a 	mov	r3,zero
  20e8e8:	003f3b06 	br	20e5d8 <_gp+0xffdfc9c4>
  20e8ec:	80002a26 	beq	r16,zero,20e998 <__adddf3+0x51c>
  20e8f0:	0101ffc4 	movi	r4,2047
  20e8f4:	11006826 	beq	r2,r4,20ea98 <__adddf3+0x61c>
  20e8f8:	00c7c83a 	sub	r3,zero,r3
  20e8fc:	42002034 	orhi	r8,r8,128
  20e900:	01000e04 	movi	r4,56
  20e904:	20c07c16 	blt	r4,r3,20eaf8 <__adddf3+0x67c>
  20e908:	010007c4 	movi	r4,31
  20e90c:	20c0da16 	blt	r4,r3,20ec78 <__adddf3+0x7fc>
  20e910:	01000804 	movi	r4,32
  20e914:	20c9c83a 	sub	r4,r4,r3
  20e918:	4114983a 	sll	r10,r8,r4
  20e91c:	88cad83a 	srl	r5,r17,r3
  20e920:	8908983a 	sll	r4,r17,r4
  20e924:	40c6d83a 	srl	r3,r8,r3
  20e928:	5162b03a 	or	r17,r10,r5
  20e92c:	2008c03a 	cmpne	r4,r4,zero
  20e930:	8922b03a 	or	r17,r17,r4
  20e934:	3463c83a 	sub	r17,r6,r17
  20e938:	48c7c83a 	sub	r3,r9,r3
  20e93c:	344d803a 	cmpltu	r6,r6,r17
  20e940:	1991c83a 	sub	r8,r3,r6
  20e944:	1021883a 	mov	r16,r2
  20e948:	3825883a 	mov	r18,r7
  20e94c:	003f2706 	br	20e5ec <_gp+0xffdfc9d8>
  20e950:	24d0b03a 	or	r8,r4,r19
  20e954:	40001b1e 	bne	r8,zero,20e9c4 <__adddf3+0x548>
  20e958:	0005883a 	mov	r2,zero
  20e95c:	0007883a 	mov	r3,zero
  20e960:	0021883a 	mov	r16,zero
  20e964:	003f4d06 	br	20e69c <_gp+0xffdfca88>
  20e968:	008007c4 	movi	r2,31
  20e96c:	11003c16 	blt	r2,r4,20ea60 <__adddf3+0x5e4>
  20e970:	00800804 	movi	r2,32
  20e974:	1105c83a 	sub	r2,r2,r4
  20e978:	488e983a 	sll	r7,r9,r2
  20e97c:	310ad83a 	srl	r5,r6,r4
  20e980:	3084983a 	sll	r2,r6,r2
  20e984:	4912d83a 	srl	r9,r9,r4
  20e988:	394ab03a 	or	r5,r7,r5
  20e98c:	1004c03a 	cmpne	r2,r2,zero
  20e990:	288ab03a 	or	r5,r5,r2
  20e994:	003f5306 	br	20e6e4 <_gp+0xffdfcad0>
  20e998:	4448b03a 	or	r4,r8,r17
  20e99c:	20003e26 	beq	r4,zero,20ea98 <__adddf3+0x61c>
  20e9a0:	00c6303a 	nor	r3,zero,r3
  20e9a4:	18003a1e 	bne	r3,zero,20ea90 <__adddf3+0x614>
  20e9a8:	3463c83a 	sub	r17,r6,r17
  20e9ac:	4a07c83a 	sub	r3,r9,r8
  20e9b0:	344d803a 	cmpltu	r6,r6,r17
  20e9b4:	1991c83a 	sub	r8,r3,r6
  20e9b8:	1021883a 	mov	r16,r2
  20e9bc:	3825883a 	mov	r18,r7
  20e9c0:	003f0a06 	br	20e5ec <_gp+0xffdfc9d8>
  20e9c4:	2023883a 	mov	r17,r4
  20e9c8:	003f0d06 	br	20e600 <_gp+0xffdfc9ec>
  20e9cc:	0081ffc4 	movi	r2,2047
  20e9d0:	80bf3f1e 	bne	r16,r2,20e6d0 <_gp+0xffdfcabc>
  20e9d4:	003ec806 	br	20e4f8 <_gp+0xffdfc8e4>
  20e9d8:	0005883a 	mov	r2,zero
  20e9dc:	003fb106 	br	20e8a4 <_gp+0xffdfcc90>
  20e9e0:	0007883a 	mov	r3,zero
  20e9e4:	003fbc06 	br	20e8d8 <_gp+0xffdfccc4>
  20e9e8:	4444b03a 	or	r2,r8,r17
  20e9ec:	8000871e 	bne	r16,zero,20ec0c <__adddf3+0x790>
  20e9f0:	1000ba26 	beq	r2,zero,20ecdc <__adddf3+0x860>
  20e9f4:	4984b03a 	or	r2,r9,r6
  20e9f8:	103ebf26 	beq	r2,zero,20e4f8 <_gp+0xffdfc8e4>
  20e9fc:	8985883a 	add	r2,r17,r6
  20ea00:	4247883a 	add	r3,r8,r9
  20ea04:	1451803a 	cmpltu	r8,r2,r17
  20ea08:	40d1883a 	add	r8,r8,r3
  20ea0c:	40c0202c 	andhi	r3,r8,128
  20ea10:	1023883a 	mov	r17,r2
  20ea14:	183f1a26 	beq	r3,zero,20e680 <_gp+0xffdfca6c>
  20ea18:	00bfe034 	movhi	r2,65408
  20ea1c:	10bfffc4 	addi	r2,r2,-1
  20ea20:	2021883a 	mov	r16,r4
  20ea24:	4090703a 	and	r8,r8,r2
  20ea28:	003eb306 	br	20e4f8 <_gp+0xffdfc8e4>
  20ea2c:	4444b03a 	or	r2,r8,r17
  20ea30:	8000291e 	bne	r16,zero,20ead8 <__adddf3+0x65c>
  20ea34:	10004b1e 	bne	r2,zero,20eb64 <__adddf3+0x6e8>
  20ea38:	4990b03a 	or	r8,r9,r6
  20ea3c:	40008b26 	beq	r8,zero,20ec6c <__adddf3+0x7f0>
  20ea40:	4811883a 	mov	r8,r9
  20ea44:	3023883a 	mov	r17,r6
  20ea48:	3825883a 	mov	r18,r7
  20ea4c:	003eaa06 	br	20e4f8 <_gp+0xffdfc8e4>
  20ea50:	1021883a 	mov	r16,r2
  20ea54:	0011883a 	mov	r8,zero
  20ea58:	0005883a 	mov	r2,zero
  20ea5c:	003f0f06 	br	20e69c <_gp+0xffdfca88>
  20ea60:	217ff804 	addi	r5,r4,-32
  20ea64:	00800804 	movi	r2,32
  20ea68:	494ad83a 	srl	r5,r9,r5
  20ea6c:	20807d26 	beq	r4,r2,20ec64 <__adddf3+0x7e8>
  20ea70:	00801004 	movi	r2,64
  20ea74:	1109c83a 	sub	r4,r2,r4
  20ea78:	4912983a 	sll	r9,r9,r4
  20ea7c:	498cb03a 	or	r6,r9,r6
  20ea80:	300cc03a 	cmpne	r6,r6,zero
  20ea84:	298ab03a 	or	r5,r5,r6
  20ea88:	0013883a 	mov	r9,zero
  20ea8c:	003f1506 	br	20e6e4 <_gp+0xffdfcad0>
  20ea90:	0101ffc4 	movi	r4,2047
  20ea94:	113f9a1e 	bne	r2,r4,20e900 <_gp+0xffdfccec>
  20ea98:	4811883a 	mov	r8,r9
  20ea9c:	3023883a 	mov	r17,r6
  20eaa0:	1021883a 	mov	r16,r2
  20eaa4:	3825883a 	mov	r18,r7
  20eaa8:	003e9306 	br	20e4f8 <_gp+0xffdfc8e4>
  20eaac:	8000161e 	bne	r16,zero,20eb08 <__adddf3+0x68c>
  20eab0:	444ab03a 	or	r5,r8,r17
  20eab4:	28005126 	beq	r5,zero,20ebfc <__adddf3+0x780>
  20eab8:	0108303a 	nor	r4,zero,r4
  20eabc:	20004d1e 	bne	r4,zero,20ebf4 <__adddf3+0x778>
  20eac0:	89a3883a 	add	r17,r17,r6
  20eac4:	4253883a 	add	r9,r8,r9
  20eac8:	898d803a 	cmpltu	r6,r17,r6
  20eacc:	3251883a 	add	r8,r6,r9
  20ead0:	1021883a 	mov	r16,r2
  20ead4:	003f0806 	br	20e6f8 <_gp+0xffdfcae4>
  20ead8:	1000301e 	bne	r2,zero,20eb9c <__adddf3+0x720>
  20eadc:	4984b03a 	or	r2,r9,r6
  20eae0:	10007126 	beq	r2,zero,20eca8 <__adddf3+0x82c>
  20eae4:	4811883a 	mov	r8,r9
  20eae8:	3023883a 	mov	r17,r6
  20eaec:	3825883a 	mov	r18,r7
  20eaf0:	0401ffc4 	movi	r16,2047
  20eaf4:	003e8006 	br	20e4f8 <_gp+0xffdfc8e4>
  20eaf8:	4462b03a 	or	r17,r8,r17
  20eafc:	8822c03a 	cmpne	r17,r17,zero
  20eb00:	0007883a 	mov	r3,zero
  20eb04:	003f8b06 	br	20e934 <_gp+0xffdfcd20>
  20eb08:	0141ffc4 	movi	r5,2047
  20eb0c:	11403b26 	beq	r2,r5,20ebfc <__adddf3+0x780>
  20eb10:	0109c83a 	sub	r4,zero,r4
  20eb14:	42002034 	orhi	r8,r8,128
  20eb18:	01400e04 	movi	r5,56
  20eb1c:	29006716 	blt	r5,r4,20ecbc <__adddf3+0x840>
  20eb20:	014007c4 	movi	r5,31
  20eb24:	29007016 	blt	r5,r4,20ece8 <__adddf3+0x86c>
  20eb28:	01400804 	movi	r5,32
  20eb2c:	290bc83a 	sub	r5,r5,r4
  20eb30:	4154983a 	sll	r10,r8,r5
  20eb34:	890ed83a 	srl	r7,r17,r4
  20eb38:	894a983a 	sll	r5,r17,r5
  20eb3c:	4108d83a 	srl	r4,r8,r4
  20eb40:	51e2b03a 	or	r17,r10,r7
  20eb44:	280ac03a 	cmpne	r5,r5,zero
  20eb48:	8962b03a 	or	r17,r17,r5
  20eb4c:	89a3883a 	add	r17,r17,r6
  20eb50:	2253883a 	add	r9,r4,r9
  20eb54:	898d803a 	cmpltu	r6,r17,r6
  20eb58:	3251883a 	add	r8,r6,r9
  20eb5c:	1021883a 	mov	r16,r2
  20eb60:	003ee506 	br	20e6f8 <_gp+0xffdfcae4>
  20eb64:	4984b03a 	or	r2,r9,r6
  20eb68:	103e6326 	beq	r2,zero,20e4f8 <_gp+0xffdfc8e4>
  20eb6c:	8987c83a 	sub	r3,r17,r6
  20eb70:	88c9803a 	cmpltu	r4,r17,r3
  20eb74:	4245c83a 	sub	r2,r8,r9
  20eb78:	1105c83a 	sub	r2,r2,r4
  20eb7c:	1100202c 	andhi	r4,r2,128
  20eb80:	203ebb26 	beq	r4,zero,20e670 <_gp+0xffdfca5c>
  20eb84:	3463c83a 	sub	r17,r6,r17
  20eb88:	4a07c83a 	sub	r3,r9,r8
  20eb8c:	344d803a 	cmpltu	r6,r6,r17
  20eb90:	1991c83a 	sub	r8,r3,r6
  20eb94:	3825883a 	mov	r18,r7
  20eb98:	003e5706 	br	20e4f8 <_gp+0xffdfc8e4>
  20eb9c:	4984b03a 	or	r2,r9,r6
  20eba0:	10002e26 	beq	r2,zero,20ec5c <__adddf3+0x7e0>
  20eba4:	4004d0fa 	srli	r2,r8,3
  20eba8:	8822d0fa 	srli	r17,r17,3
  20ebac:	4010977a 	slli	r8,r8,29
  20ebb0:	10c0022c 	andhi	r3,r2,8
  20ebb4:	4462b03a 	or	r17,r8,r17
  20ebb8:	18000826 	beq	r3,zero,20ebdc <__adddf3+0x760>
  20ebbc:	4808d0fa 	srli	r4,r9,3
  20ebc0:	20c0022c 	andhi	r3,r4,8
  20ebc4:	1800051e 	bne	r3,zero,20ebdc <__adddf3+0x760>
  20ebc8:	300cd0fa 	srli	r6,r6,3
  20ebcc:	4806977a 	slli	r3,r9,29
  20ebd0:	2005883a 	mov	r2,r4
  20ebd4:	3825883a 	mov	r18,r7
  20ebd8:	19a2b03a 	or	r17,r3,r6
  20ebdc:	8810d77a 	srli	r8,r17,29
  20ebe0:	100490fa 	slli	r2,r2,3
  20ebe4:	882290fa 	slli	r17,r17,3
  20ebe8:	0401ffc4 	movi	r16,2047
  20ebec:	4090b03a 	or	r8,r8,r2
  20ebf0:	003e4106 	br	20e4f8 <_gp+0xffdfc8e4>
  20ebf4:	0141ffc4 	movi	r5,2047
  20ebf8:	117fc71e 	bne	r2,r5,20eb18 <_gp+0xffdfcf04>
  20ebfc:	4811883a 	mov	r8,r9
  20ec00:	3023883a 	mov	r17,r6
  20ec04:	1021883a 	mov	r16,r2
  20ec08:	003e3b06 	br	20e4f8 <_gp+0xffdfc8e4>
  20ec0c:	10002f26 	beq	r2,zero,20eccc <__adddf3+0x850>
  20ec10:	4984b03a 	or	r2,r9,r6
  20ec14:	10001126 	beq	r2,zero,20ec5c <__adddf3+0x7e0>
  20ec18:	4004d0fa 	srli	r2,r8,3
  20ec1c:	8822d0fa 	srli	r17,r17,3
  20ec20:	4010977a 	slli	r8,r8,29
  20ec24:	10c0022c 	andhi	r3,r2,8
  20ec28:	4462b03a 	or	r17,r8,r17
  20ec2c:	183feb26 	beq	r3,zero,20ebdc <_gp+0xffdfcfc8>
  20ec30:	4808d0fa 	srli	r4,r9,3
  20ec34:	20c0022c 	andhi	r3,r4,8
  20ec38:	183fe81e 	bne	r3,zero,20ebdc <_gp+0xffdfcfc8>
  20ec3c:	300cd0fa 	srli	r6,r6,3
  20ec40:	4806977a 	slli	r3,r9,29
  20ec44:	2005883a 	mov	r2,r4
  20ec48:	19a2b03a 	or	r17,r3,r6
  20ec4c:	003fe306 	br	20ebdc <_gp+0xffdfcfc8>
  20ec50:	0011883a 	mov	r8,zero
  20ec54:	0005883a 	mov	r2,zero
  20ec58:	003e3f06 	br	20e558 <_gp+0xffdfc944>
  20ec5c:	0401ffc4 	movi	r16,2047
  20ec60:	003e2506 	br	20e4f8 <_gp+0xffdfc8e4>
  20ec64:	0013883a 	mov	r9,zero
  20ec68:	003f8406 	br	20ea7c <_gp+0xffdfce68>
  20ec6c:	0005883a 	mov	r2,zero
  20ec70:	0007883a 	mov	r3,zero
  20ec74:	003e8906 	br	20e69c <_gp+0xffdfca88>
  20ec78:	197ff804 	addi	r5,r3,-32
  20ec7c:	01000804 	movi	r4,32
  20ec80:	414ad83a 	srl	r5,r8,r5
  20ec84:	19002426 	beq	r3,r4,20ed18 <__adddf3+0x89c>
  20ec88:	01001004 	movi	r4,64
  20ec8c:	20c7c83a 	sub	r3,r4,r3
  20ec90:	40c6983a 	sll	r3,r8,r3
  20ec94:	1c46b03a 	or	r3,r3,r17
  20ec98:	1806c03a 	cmpne	r3,r3,zero
  20ec9c:	28e2b03a 	or	r17,r5,r3
  20eca0:	0007883a 	mov	r3,zero
  20eca4:	003f2306 	br	20e934 <_gp+0xffdfcd20>
  20eca8:	0007883a 	mov	r3,zero
  20ecac:	5811883a 	mov	r8,r11
  20ecb0:	00bfffc4 	movi	r2,-1
  20ecb4:	0401ffc4 	movi	r16,2047
  20ecb8:	003e7806 	br	20e69c <_gp+0xffdfca88>
  20ecbc:	4462b03a 	or	r17,r8,r17
  20ecc0:	8822c03a 	cmpne	r17,r17,zero
  20ecc4:	0009883a 	mov	r4,zero
  20ecc8:	003fa006 	br	20eb4c <_gp+0xffdfcf38>
  20eccc:	4811883a 	mov	r8,r9
  20ecd0:	3023883a 	mov	r17,r6
  20ecd4:	0401ffc4 	movi	r16,2047
  20ecd8:	003e0706 	br	20e4f8 <_gp+0xffdfc8e4>
  20ecdc:	4811883a 	mov	r8,r9
  20ece0:	3023883a 	mov	r17,r6
  20ece4:	003e0406 	br	20e4f8 <_gp+0xffdfc8e4>
  20ece8:	21fff804 	addi	r7,r4,-32
  20ecec:	01400804 	movi	r5,32
  20ecf0:	41ced83a 	srl	r7,r8,r7
  20ecf4:	21400a26 	beq	r4,r5,20ed20 <__adddf3+0x8a4>
  20ecf8:	01401004 	movi	r5,64
  20ecfc:	2909c83a 	sub	r4,r5,r4
  20ed00:	4108983a 	sll	r4,r8,r4
  20ed04:	2448b03a 	or	r4,r4,r17
  20ed08:	2008c03a 	cmpne	r4,r4,zero
  20ed0c:	3922b03a 	or	r17,r7,r4
  20ed10:	0009883a 	mov	r4,zero
  20ed14:	003f8d06 	br	20eb4c <_gp+0xffdfcf38>
  20ed18:	0007883a 	mov	r3,zero
  20ed1c:	003fdd06 	br	20ec94 <_gp+0xffdfd080>
  20ed20:	0009883a 	mov	r4,zero
  20ed24:	003ff706 	br	20ed04 <_gp+0xffdfd0f0>

0020ed28 <__divdf3>:
  20ed28:	defff004 	addi	sp,sp,-64
  20ed2c:	dc800815 	stw	r18,32(sp)
  20ed30:	2824d53a 	srli	r18,r5,20
  20ed34:	dd800c15 	stw	r22,48(sp)
  20ed38:	282cd7fa 	srli	r22,r5,31
  20ed3c:	dc000615 	stw	r16,24(sp)
  20ed40:	04000434 	movhi	r16,16
  20ed44:	843fffc4 	addi	r16,r16,-1
  20ed48:	dfc00f15 	stw	ra,60(sp)
  20ed4c:	df000e15 	stw	fp,56(sp)
  20ed50:	ddc00d15 	stw	r23,52(sp)
  20ed54:	dd400b15 	stw	r21,44(sp)
  20ed58:	dd000a15 	stw	r20,40(sp)
  20ed5c:	dcc00915 	stw	r19,36(sp)
  20ed60:	dc400715 	stw	r17,28(sp)
  20ed64:	9481ffcc 	andi	r18,r18,2047
  20ed68:	2c20703a 	and	r16,r5,r16
  20ed6c:	b2003fcc 	andi	r8,r22,255
  20ed70:	90006126 	beq	r18,zero,20eef8 <__divdf3+0x1d0>
  20ed74:	0081ffc4 	movi	r2,2047
  20ed78:	202b883a 	mov	r21,r4
  20ed7c:	90803726 	beq	r18,r2,20ee5c <__divdf3+0x134>
  20ed80:	80800434 	orhi	r2,r16,16
  20ed84:	100490fa 	slli	r2,r2,3
  20ed88:	2020d77a 	srli	r16,r4,29
  20ed8c:	202a90fa 	slli	r21,r4,3
  20ed90:	94bf0044 	addi	r18,r18,-1023
  20ed94:	80a0b03a 	or	r16,r16,r2
  20ed98:	0013883a 	mov	r9,zero
  20ed9c:	000b883a 	mov	r5,zero
  20eda0:	3806d53a 	srli	r3,r7,20
  20eda4:	382ed7fa 	srli	r23,r7,31
  20eda8:	04400434 	movhi	r17,16
  20edac:	8c7fffc4 	addi	r17,r17,-1
  20edb0:	18c1ffcc 	andi	r3,r3,2047
  20edb4:	3029883a 	mov	r20,r6
  20edb8:	3c62703a 	and	r17,r7,r17
  20edbc:	bf003fcc 	andi	fp,r23,255
  20edc0:	18006e26 	beq	r3,zero,20ef7c <__divdf3+0x254>
  20edc4:	0081ffc4 	movi	r2,2047
  20edc8:	18806626 	beq	r3,r2,20ef64 <__divdf3+0x23c>
  20edcc:	88800434 	orhi	r2,r17,16
  20edd0:	100490fa 	slli	r2,r2,3
  20edd4:	3022d77a 	srli	r17,r6,29
  20edd8:	302890fa 	slli	r20,r6,3
  20eddc:	18ff0044 	addi	r3,r3,-1023
  20ede0:	88a2b03a 	or	r17,r17,r2
  20ede4:	000f883a 	mov	r7,zero
  20ede8:	b5e6f03a 	xor	r19,r22,r23
  20edec:	3a4cb03a 	or	r6,r7,r9
  20edf0:	008003c4 	movi	r2,15
  20edf4:	9809883a 	mov	r4,r19
  20edf8:	90c7c83a 	sub	r3,r18,r3
  20edfc:	9cc03fcc 	andi	r19,r19,255
  20ee00:	11809636 	bltu	r2,r6,20f05c <__divdf3+0x334>
  20ee04:	300c90ba 	slli	r6,r6,2
  20ee08:	00800874 	movhi	r2,33
  20ee0c:	10bb8704 	addi	r2,r2,-4580
  20ee10:	308d883a 	add	r6,r6,r2
  20ee14:	30800017 	ldw	r2,0(r6)
  20ee18:	1000683a 	jmp	r2
  20ee1c:	0020f05c 	xori	zero,zero,33729
  20ee20:	0020ee94 	movui	zero,33722
  20ee24:	0020f04c 	andi	zero,zero,33729
  20ee28:	0020ee88 	cmpgei	zero,zero,-31814
  20ee2c:	0020f04c 	andi	zero,zero,33729
  20ee30:	0020f020 	cmpeqi	zero,zero,-31808
  20ee34:	0020f04c 	andi	zero,zero,33729
  20ee38:	0020ee88 	cmpgei	zero,zero,-31814
  20ee3c:	0020ee94 	movui	zero,33722
  20ee40:	0020ee94 	movui	zero,33722
  20ee44:	0020f020 	cmpeqi	zero,zero,-31808
  20ee48:	0020ee88 	cmpgei	zero,zero,-31814
  20ee4c:	0020ee78 	rdprs	zero,zero,-31815
  20ee50:	0020ee78 	rdprs	zero,zero,-31815
  20ee54:	0020ee78 	rdprs	zero,zero,-31815
  20ee58:	0020f3e4 	muli	zero,zero,-31793
  20ee5c:	2404b03a 	or	r2,r4,r16
  20ee60:	10006c1e 	bne	r2,zero,20f014 <__divdf3+0x2ec>
  20ee64:	02400204 	movi	r9,8
  20ee68:	0021883a 	mov	r16,zero
  20ee6c:	002b883a 	mov	r21,zero
  20ee70:	01400084 	movi	r5,2
  20ee74:	003fca06 	br	20eda0 <_gp+0xffdfd18c>
  20ee78:	8023883a 	mov	r17,r16
  20ee7c:	a829883a 	mov	r20,r21
  20ee80:	4039883a 	mov	fp,r8
  20ee84:	280f883a 	mov	r7,r5
  20ee88:	00800084 	movi	r2,2
  20ee8c:	3881601e 	bne	r7,r2,20f410 <__divdf3+0x6e8>
  20ee90:	e027883a 	mov	r19,fp
  20ee94:	9900004c 	andi	r4,r19,1
  20ee98:	0081ffc4 	movi	r2,2047
  20ee9c:	0021883a 	mov	r16,zero
  20eea0:	002b883a 	mov	r21,zero
  20eea4:	1004953a 	slli	r2,r2,20
  20eea8:	20c03fcc 	andi	r3,r4,255
  20eeac:	01400434 	movhi	r5,16
  20eeb0:	297fffc4 	addi	r5,r5,-1
  20eeb4:	180697fa 	slli	r3,r3,31
  20eeb8:	8160703a 	and	r16,r16,r5
  20eebc:	80a0b03a 	or	r16,r16,r2
  20eec0:	80c6b03a 	or	r3,r16,r3
  20eec4:	a805883a 	mov	r2,r21
  20eec8:	dfc00f17 	ldw	ra,60(sp)
  20eecc:	df000e17 	ldw	fp,56(sp)
  20eed0:	ddc00d17 	ldw	r23,52(sp)
  20eed4:	dd800c17 	ldw	r22,48(sp)
  20eed8:	dd400b17 	ldw	r21,44(sp)
  20eedc:	dd000a17 	ldw	r20,40(sp)
  20eee0:	dcc00917 	ldw	r19,36(sp)
  20eee4:	dc800817 	ldw	r18,32(sp)
  20eee8:	dc400717 	ldw	r17,28(sp)
  20eeec:	dc000617 	ldw	r16,24(sp)
  20eef0:	dec01004 	addi	sp,sp,64
  20eef4:	f800283a 	ret
  20eef8:	2404b03a 	or	r2,r4,r16
  20eefc:	2023883a 	mov	r17,r4
  20ef00:	10003f26 	beq	r2,zero,20f000 <__divdf3+0x2d8>
  20ef04:	80015e26 	beq	r16,zero,20f480 <__divdf3+0x758>
  20ef08:	8009883a 	mov	r4,r16
  20ef0c:	d9800215 	stw	r6,8(sp)
  20ef10:	d9c00515 	stw	r7,20(sp)
  20ef14:	da000415 	stw	r8,16(sp)
  20ef18:	0203dd00 	call	203dd0 <__clzsi2>
  20ef1c:	d9800217 	ldw	r6,8(sp)
  20ef20:	d9c00517 	ldw	r7,20(sp)
  20ef24:	da000417 	ldw	r8,16(sp)
  20ef28:	113ffd44 	addi	r4,r2,-11
  20ef2c:	00c00704 	movi	r3,28
  20ef30:	19014f16 	blt	r3,r4,20f470 <__divdf3+0x748>
  20ef34:	00c00744 	movi	r3,29
  20ef38:	157ffe04 	addi	r21,r2,-8
  20ef3c:	1907c83a 	sub	r3,r3,r4
  20ef40:	8560983a 	sll	r16,r16,r21
  20ef44:	88c6d83a 	srl	r3,r17,r3
  20ef48:	8d6a983a 	sll	r21,r17,r21
  20ef4c:	1c20b03a 	or	r16,r3,r16
  20ef50:	1080fcc4 	addi	r2,r2,1011
  20ef54:	00a5c83a 	sub	r18,zero,r2
  20ef58:	0013883a 	mov	r9,zero
  20ef5c:	000b883a 	mov	r5,zero
  20ef60:	003f8f06 	br	20eda0 <_gp+0xffdfd18c>
  20ef64:	3444b03a 	or	r2,r6,r17
  20ef68:	1000231e 	bne	r2,zero,20eff8 <__divdf3+0x2d0>
  20ef6c:	0023883a 	mov	r17,zero
  20ef70:	0029883a 	mov	r20,zero
  20ef74:	01c00084 	movi	r7,2
  20ef78:	003f9b06 	br	20ede8 <_gp+0xffdfd1d4>
  20ef7c:	3444b03a 	or	r2,r6,r17
  20ef80:	10001926 	beq	r2,zero,20efe8 <__divdf3+0x2c0>
  20ef84:	88014b26 	beq	r17,zero,20f4b4 <__divdf3+0x78c>
  20ef88:	8809883a 	mov	r4,r17
  20ef8c:	d9400115 	stw	r5,4(sp)
  20ef90:	d9800215 	stw	r6,8(sp)
  20ef94:	da000415 	stw	r8,16(sp)
  20ef98:	da400315 	stw	r9,12(sp)
  20ef9c:	0203dd00 	call	203dd0 <__clzsi2>
  20efa0:	d9400117 	ldw	r5,4(sp)
  20efa4:	d9800217 	ldw	r6,8(sp)
  20efa8:	da000417 	ldw	r8,16(sp)
  20efac:	da400317 	ldw	r9,12(sp)
  20efb0:	113ffd44 	addi	r4,r2,-11
  20efb4:	00c00704 	movi	r3,28
  20efb8:	19013a16 	blt	r3,r4,20f4a4 <__divdf3+0x77c>
  20efbc:	00c00744 	movi	r3,29
  20efc0:	153ffe04 	addi	r20,r2,-8
  20efc4:	1907c83a 	sub	r3,r3,r4
  20efc8:	8d22983a 	sll	r17,r17,r20
  20efcc:	30c6d83a 	srl	r3,r6,r3
  20efd0:	3528983a 	sll	r20,r6,r20
  20efd4:	1c62b03a 	or	r17,r3,r17
  20efd8:	1080fcc4 	addi	r2,r2,1011
  20efdc:	0087c83a 	sub	r3,zero,r2
  20efe0:	000f883a 	mov	r7,zero
  20efe4:	003f8006 	br	20ede8 <_gp+0xffdfd1d4>
  20efe8:	0023883a 	mov	r17,zero
  20efec:	0029883a 	mov	r20,zero
  20eff0:	01c00044 	movi	r7,1
  20eff4:	003f7c06 	br	20ede8 <_gp+0xffdfd1d4>
  20eff8:	01c000c4 	movi	r7,3
  20effc:	003f7a06 	br	20ede8 <_gp+0xffdfd1d4>
  20f000:	02400104 	movi	r9,4
  20f004:	0021883a 	mov	r16,zero
  20f008:	002b883a 	mov	r21,zero
  20f00c:	01400044 	movi	r5,1
  20f010:	003f6306 	br	20eda0 <_gp+0xffdfd18c>
  20f014:	02400304 	movi	r9,12
  20f018:	014000c4 	movi	r5,3
  20f01c:	003f6006 	br	20eda0 <_gp+0xffdfd18c>
  20f020:	04000434 	movhi	r16,16
  20f024:	0009883a 	mov	r4,zero
  20f028:	843fffc4 	addi	r16,r16,-1
  20f02c:	057fffc4 	movi	r21,-1
  20f030:	0081ffc4 	movi	r2,2047
  20f034:	003f9b06 	br	20eea4 <_gp+0xffdfd290>
  20f038:	00c00044 	movi	r3,1
  20f03c:	1887c83a 	sub	r3,r3,r2
  20f040:	01000e04 	movi	r4,56
  20f044:	20c1530e 	bge	r4,r3,20f594 <__divdf3+0x86c>
  20f048:	9900004c 	andi	r4,r19,1
  20f04c:	0005883a 	mov	r2,zero
  20f050:	0021883a 	mov	r16,zero
  20f054:	002b883a 	mov	r21,zero
  20f058:	003f9206 	br	20eea4 <_gp+0xffdfd290>
  20f05c:	8c012e36 	bltu	r17,r16,20f518 <__divdf3+0x7f0>
  20f060:	84412c26 	beq	r16,r17,20f514 <__divdf3+0x7ec>
  20f064:	a82f883a 	mov	r23,r21
  20f068:	18ffffc4 	addi	r3,r3,-1
  20f06c:	002b883a 	mov	r21,zero
  20f070:	a004d63a 	srli	r2,r20,24
  20f074:	8822923a 	slli	r17,r17,8
  20f078:	a028923a 	slli	r20,r20,8
  20f07c:	8009883a 	mov	r4,r16
  20f080:	88acb03a 	or	r22,r17,r2
  20f084:	dd000015 	stw	r20,0(sp)
  20f088:	b028d43a 	srli	r20,r22,16
  20f08c:	d8c00215 	stw	r3,8(sp)
  20f090:	b4bfffcc 	andi	r18,r22,65535
  20f094:	a00b883a 	mov	r5,r20
  20f098:	02031bc0 	call	2031bc <__udivsi3>
  20f09c:	100b883a 	mov	r5,r2
  20f0a0:	9009883a 	mov	r4,r18
  20f0a4:	1023883a 	mov	r17,r2
  20f0a8:	02032780 	call	203278 <__mulsi3>
  20f0ac:	8009883a 	mov	r4,r16
  20f0b0:	a00b883a 	mov	r5,r20
  20f0b4:	1039883a 	mov	fp,r2
  20f0b8:	02032200 	call	203220 <__umodsi3>
  20f0bc:	1004943a 	slli	r2,r2,16
  20f0c0:	b808d43a 	srli	r4,r23,16
  20f0c4:	d8c00217 	ldw	r3,8(sp)
  20f0c8:	2084b03a 	or	r2,r4,r2
  20f0cc:	1700062e 	bgeu	r2,fp,20f0e8 <__divdf3+0x3c0>
  20f0d0:	1585883a 	add	r2,r2,r22
  20f0d4:	893fffc4 	addi	r4,r17,-1
  20f0d8:	15811d36 	bltu	r2,r22,20f550 <__divdf3+0x828>
  20f0dc:	17011c2e 	bgeu	r2,fp,20f550 <__divdf3+0x828>
  20f0e0:	8c7fff84 	addi	r17,r17,-2
  20f0e4:	1585883a 	add	r2,r2,r22
  20f0e8:	1739c83a 	sub	fp,r2,fp
  20f0ec:	a00b883a 	mov	r5,r20
  20f0f0:	e009883a 	mov	r4,fp
  20f0f4:	d8c00215 	stw	r3,8(sp)
  20f0f8:	02031bc0 	call	2031bc <__udivsi3>
  20f0fc:	100b883a 	mov	r5,r2
  20f100:	9009883a 	mov	r4,r18
  20f104:	1021883a 	mov	r16,r2
  20f108:	02032780 	call	203278 <__mulsi3>
  20f10c:	a00b883a 	mov	r5,r20
  20f110:	e009883a 	mov	r4,fp
  20f114:	d8800415 	stw	r2,16(sp)
  20f118:	02032200 	call	203220 <__umodsi3>
  20f11c:	1004943a 	slli	r2,r2,16
  20f120:	da000417 	ldw	r8,16(sp)
  20f124:	bdffffcc 	andi	r23,r23,65535
  20f128:	b884b03a 	or	r2,r23,r2
  20f12c:	d8c00217 	ldw	r3,8(sp)
  20f130:	1200062e 	bgeu	r2,r8,20f14c <__divdf3+0x424>
  20f134:	1585883a 	add	r2,r2,r22
  20f138:	813fffc4 	addi	r4,r16,-1
  20f13c:	15810236 	bltu	r2,r22,20f548 <__divdf3+0x820>
  20f140:	1201012e 	bgeu	r2,r8,20f548 <__divdf3+0x820>
  20f144:	843fff84 	addi	r16,r16,-2
  20f148:	1585883a 	add	r2,r2,r22
  20f14c:	8822943a 	slli	r17,r17,16
  20f150:	d9800017 	ldw	r6,0(sp)
  20f154:	1211c83a 	sub	r8,r2,r8
  20f158:	8c22b03a 	or	r17,r17,r16
  20f15c:	373fffcc 	andi	fp,r6,65535
  20f160:	8abfffcc 	andi	r10,r17,65535
  20f164:	8820d43a 	srli	r16,r17,16
  20f168:	5009883a 	mov	r4,r10
  20f16c:	e00b883a 	mov	r5,fp
  20f170:	302ed43a 	srli	r23,r6,16
  20f174:	d8c00215 	stw	r3,8(sp)
  20f178:	da000415 	stw	r8,16(sp)
  20f17c:	da800115 	stw	r10,4(sp)
  20f180:	02032780 	call	203278 <__mulsi3>
  20f184:	800b883a 	mov	r5,r16
  20f188:	e009883a 	mov	r4,fp
  20f18c:	d8800515 	stw	r2,20(sp)
  20f190:	02032780 	call	203278 <__mulsi3>
  20f194:	8009883a 	mov	r4,r16
  20f198:	b80b883a 	mov	r5,r23
  20f19c:	d8800315 	stw	r2,12(sp)
  20f1a0:	02032780 	call	203278 <__mulsi3>
  20f1a4:	da800117 	ldw	r10,4(sp)
  20f1a8:	b80b883a 	mov	r5,r23
  20f1ac:	1021883a 	mov	r16,r2
  20f1b0:	5009883a 	mov	r4,r10
  20f1b4:	02032780 	call	203278 <__mulsi3>
  20f1b8:	d9c00517 	ldw	r7,20(sp)
  20f1bc:	da400317 	ldw	r9,12(sp)
  20f1c0:	d8c00217 	ldw	r3,8(sp)
  20f1c4:	3808d43a 	srli	r4,r7,16
  20f1c8:	1245883a 	add	r2,r2,r9
  20f1cc:	da000417 	ldw	r8,16(sp)
  20f1d0:	2085883a 	add	r2,r4,r2
  20f1d4:	1240022e 	bgeu	r2,r9,20f1e0 <__divdf3+0x4b8>
  20f1d8:	01000074 	movhi	r4,1
  20f1dc:	8121883a 	add	r16,r16,r4
  20f1e0:	1008d43a 	srli	r4,r2,16
  20f1e4:	1004943a 	slli	r2,r2,16
  20f1e8:	39ffffcc 	andi	r7,r7,65535
  20f1ec:	2409883a 	add	r4,r4,r16
  20f1f0:	11c5883a 	add	r2,r2,r7
  20f1f4:	4100bb36 	bltu	r8,r4,20f4e4 <__divdf3+0x7bc>
  20f1f8:	4100d726 	beq	r8,r4,20f558 <__divdf3+0x830>
  20f1fc:	4109c83a 	sub	r4,r8,r4
  20f200:	a8a1c83a 	sub	r16,r21,r2
  20f204:	ac2b803a 	cmpltu	r21,r21,r16
  20f208:	256bc83a 	sub	r21,r4,r21
  20f20c:	b540d926 	beq	r22,r21,20f574 <__divdf3+0x84c>
  20f210:	a00b883a 	mov	r5,r20
  20f214:	a809883a 	mov	r4,r21
  20f218:	d8c00215 	stw	r3,8(sp)
  20f21c:	02031bc0 	call	2031bc <__udivsi3>
  20f220:	100b883a 	mov	r5,r2
  20f224:	9009883a 	mov	r4,r18
  20f228:	d8800515 	stw	r2,20(sp)
  20f22c:	02032780 	call	203278 <__mulsi3>
  20f230:	a809883a 	mov	r4,r21
  20f234:	a00b883a 	mov	r5,r20
  20f238:	d8800415 	stw	r2,16(sp)
  20f23c:	02032200 	call	203220 <__umodsi3>
  20f240:	1004943a 	slli	r2,r2,16
  20f244:	8008d43a 	srli	r4,r16,16
  20f248:	da000417 	ldw	r8,16(sp)
  20f24c:	d8c00217 	ldw	r3,8(sp)
  20f250:	2084b03a 	or	r2,r4,r2
  20f254:	d9c00517 	ldw	r7,20(sp)
  20f258:	1200062e 	bgeu	r2,r8,20f274 <__divdf3+0x54c>
  20f25c:	1585883a 	add	r2,r2,r22
  20f260:	393fffc4 	addi	r4,r7,-1
  20f264:	1580c536 	bltu	r2,r22,20f57c <__divdf3+0x854>
  20f268:	1200c42e 	bgeu	r2,r8,20f57c <__divdf3+0x854>
  20f26c:	39ffff84 	addi	r7,r7,-2
  20f270:	1585883a 	add	r2,r2,r22
  20f274:	122bc83a 	sub	r21,r2,r8
  20f278:	a00b883a 	mov	r5,r20
  20f27c:	a809883a 	mov	r4,r21
  20f280:	d8c00215 	stw	r3,8(sp)
  20f284:	d9c00515 	stw	r7,20(sp)
  20f288:	02031bc0 	call	2031bc <__udivsi3>
  20f28c:	9009883a 	mov	r4,r18
  20f290:	100b883a 	mov	r5,r2
  20f294:	d8800415 	stw	r2,16(sp)
  20f298:	02032780 	call	203278 <__mulsi3>
  20f29c:	a809883a 	mov	r4,r21
  20f2a0:	a00b883a 	mov	r5,r20
  20f2a4:	1025883a 	mov	r18,r2
  20f2a8:	02032200 	call	203220 <__umodsi3>
  20f2ac:	1004943a 	slli	r2,r2,16
  20f2b0:	813fffcc 	andi	r4,r16,65535
  20f2b4:	d8c00217 	ldw	r3,8(sp)
  20f2b8:	20a0b03a 	or	r16,r4,r2
  20f2bc:	d9c00517 	ldw	r7,20(sp)
  20f2c0:	da000417 	ldw	r8,16(sp)
  20f2c4:	8480062e 	bgeu	r16,r18,20f2e0 <__divdf3+0x5b8>
  20f2c8:	85a1883a 	add	r16,r16,r22
  20f2cc:	40bfffc4 	addi	r2,r8,-1
  20f2d0:	8580ac36 	bltu	r16,r22,20f584 <__divdf3+0x85c>
  20f2d4:	8480ab2e 	bgeu	r16,r18,20f584 <__divdf3+0x85c>
  20f2d8:	423fff84 	addi	r8,r8,-2
  20f2dc:	85a1883a 	add	r16,r16,r22
  20f2e0:	3804943a 	slli	r2,r7,16
  20f2e4:	84a1c83a 	sub	r16,r16,r18
  20f2e8:	e009883a 	mov	r4,fp
  20f2ec:	1228b03a 	or	r20,r2,r8
  20f2f0:	a1ffffcc 	andi	r7,r20,65535
  20f2f4:	a024d43a 	srli	r18,r20,16
  20f2f8:	380b883a 	mov	r5,r7
  20f2fc:	d8c00215 	stw	r3,8(sp)
  20f300:	d9c00515 	stw	r7,20(sp)
  20f304:	02032780 	call	203278 <__mulsi3>
  20f308:	900b883a 	mov	r5,r18
  20f30c:	e009883a 	mov	r4,fp
  20f310:	102b883a 	mov	r21,r2
  20f314:	02032780 	call	203278 <__mulsi3>
  20f318:	900b883a 	mov	r5,r18
  20f31c:	b809883a 	mov	r4,r23
  20f320:	1039883a 	mov	fp,r2
  20f324:	02032780 	call	203278 <__mulsi3>
  20f328:	d9c00517 	ldw	r7,20(sp)
  20f32c:	b80b883a 	mov	r5,r23
  20f330:	1025883a 	mov	r18,r2
  20f334:	3809883a 	mov	r4,r7
  20f338:	02032780 	call	203278 <__mulsi3>
  20f33c:	a808d43a 	srli	r4,r21,16
  20f340:	1705883a 	add	r2,r2,fp
  20f344:	d8c00217 	ldw	r3,8(sp)
  20f348:	2085883a 	add	r2,r4,r2
  20f34c:	1700022e 	bgeu	r2,fp,20f358 <__divdf3+0x630>
  20f350:	01000074 	movhi	r4,1
  20f354:	9125883a 	add	r18,r18,r4
  20f358:	1008d43a 	srli	r4,r2,16
  20f35c:	1004943a 	slli	r2,r2,16
  20f360:	ad7fffcc 	andi	r21,r21,65535
  20f364:	2489883a 	add	r4,r4,r18
  20f368:	1545883a 	add	r2,r2,r21
  20f36c:	81003836 	bltu	r16,r4,20f450 <__divdf3+0x728>
  20f370:	81003626 	beq	r16,r4,20f44c <__divdf3+0x724>
  20f374:	a5000054 	ori	r20,r20,1
  20f378:	1880ffc4 	addi	r2,r3,1023
  20f37c:	00bf2e0e 	bge	zero,r2,20f038 <_gp+0xffdfd424>
  20f380:	a10001cc 	andi	r4,r20,7
  20f384:	20000726 	beq	r4,zero,20f3a4 <__divdf3+0x67c>
  20f388:	a10003cc 	andi	r4,r20,15
  20f38c:	01400104 	movi	r5,4
  20f390:	21400426 	beq	r4,r5,20f3a4 <__divdf3+0x67c>
  20f394:	a149883a 	add	r4,r20,r5
  20f398:	2529803a 	cmpltu	r20,r4,r20
  20f39c:	8d23883a 	add	r17,r17,r20
  20f3a0:	2029883a 	mov	r20,r4
  20f3a4:	8900402c 	andhi	r4,r17,256
  20f3a8:	20000426 	beq	r4,zero,20f3bc <__divdf3+0x694>
  20f3ac:	18810004 	addi	r2,r3,1024
  20f3b0:	00ffc034 	movhi	r3,65280
  20f3b4:	18ffffc4 	addi	r3,r3,-1
  20f3b8:	88e2703a 	and	r17,r17,r3
  20f3bc:	00c1ff84 	movi	r3,2046
  20f3c0:	18beb416 	blt	r3,r2,20ee94 <_gp+0xffdfd280>
  20f3c4:	a028d0fa 	srli	r20,r20,3
  20f3c8:	882a977a 	slli	r21,r17,29
  20f3cc:	8820927a 	slli	r16,r17,9
  20f3d0:	1081ffcc 	andi	r2,r2,2047
  20f3d4:	ad2ab03a 	or	r21,r21,r20
  20f3d8:	8020d33a 	srli	r16,r16,12
  20f3dc:	9900004c 	andi	r4,r19,1
  20f3e0:	003eb006 	br	20eea4 <_gp+0xffdfd290>
  20f3e4:	8080022c 	andhi	r2,r16,8
  20f3e8:	10001226 	beq	r2,zero,20f434 <__divdf3+0x70c>
  20f3ec:	8880022c 	andhi	r2,r17,8
  20f3f0:	1000101e 	bne	r2,zero,20f434 <__divdf3+0x70c>
  20f3f4:	00800434 	movhi	r2,16
  20f3f8:	8c000234 	orhi	r16,r17,8
  20f3fc:	10bfffc4 	addi	r2,r2,-1
  20f400:	b809883a 	mov	r4,r23
  20f404:	80a0703a 	and	r16,r16,r2
  20f408:	a02b883a 	mov	r21,r20
  20f40c:	003f0806 	br	20f030 <_gp+0xffdfd41c>
  20f410:	008000c4 	movi	r2,3
  20f414:	3880b126 	beq	r7,r2,20f6dc <__divdf3+0x9b4>
  20f418:	00800044 	movi	r2,1
  20f41c:	38805b1e 	bne	r7,r2,20f58c <__divdf3+0x864>
  20f420:	e009883a 	mov	r4,fp
  20f424:	0005883a 	mov	r2,zero
  20f428:	0021883a 	mov	r16,zero
  20f42c:	002b883a 	mov	r21,zero
  20f430:	003e9c06 	br	20eea4 <_gp+0xffdfd290>
  20f434:	00800434 	movhi	r2,16
  20f438:	84000234 	orhi	r16,r16,8
  20f43c:	10bfffc4 	addi	r2,r2,-1
  20f440:	b009883a 	mov	r4,r22
  20f444:	80a0703a 	and	r16,r16,r2
  20f448:	003ef906 	br	20f030 <_gp+0xffdfd41c>
  20f44c:	103fca26 	beq	r2,zero,20f378 <_gp+0xffdfd764>
  20f450:	b421883a 	add	r16,r22,r16
  20f454:	a17fffc4 	addi	r5,r20,-1
  20f458:	8580422e 	bgeu	r16,r22,20f564 <__divdf3+0x83c>
  20f45c:	2829883a 	mov	r20,r5
  20f460:	813fc41e 	bne	r16,r4,20f374 <_gp+0xffdfd760>
  20f464:	d9800017 	ldw	r6,0(sp)
  20f468:	30bfc21e 	bne	r6,r2,20f374 <_gp+0xffdfd760>
  20f46c:	003fc206 	br	20f378 <_gp+0xffdfd764>
  20f470:	143ff604 	addi	r16,r2,-40
  20f474:	8c20983a 	sll	r16,r17,r16
  20f478:	002b883a 	mov	r21,zero
  20f47c:	003eb406 	br	20ef50 <_gp+0xffdfd33c>
  20f480:	d9800215 	stw	r6,8(sp)
  20f484:	d9c00515 	stw	r7,20(sp)
  20f488:	da000415 	stw	r8,16(sp)
  20f48c:	0203dd00 	call	203dd0 <__clzsi2>
  20f490:	10800804 	addi	r2,r2,32
  20f494:	da000417 	ldw	r8,16(sp)
  20f498:	d9c00517 	ldw	r7,20(sp)
  20f49c:	d9800217 	ldw	r6,8(sp)
  20f4a0:	003ea106 	br	20ef28 <_gp+0xffdfd314>
  20f4a4:	147ff604 	addi	r17,r2,-40
  20f4a8:	3462983a 	sll	r17,r6,r17
  20f4ac:	0029883a 	mov	r20,zero
  20f4b0:	003ec906 	br	20efd8 <_gp+0xffdfd3c4>
  20f4b4:	3009883a 	mov	r4,r6
  20f4b8:	d9400115 	stw	r5,4(sp)
  20f4bc:	d9800215 	stw	r6,8(sp)
  20f4c0:	da000415 	stw	r8,16(sp)
  20f4c4:	da400315 	stw	r9,12(sp)
  20f4c8:	0203dd00 	call	203dd0 <__clzsi2>
  20f4cc:	10800804 	addi	r2,r2,32
  20f4d0:	da400317 	ldw	r9,12(sp)
  20f4d4:	da000417 	ldw	r8,16(sp)
  20f4d8:	d9800217 	ldw	r6,8(sp)
  20f4dc:	d9400117 	ldw	r5,4(sp)
  20f4e0:	003eb306 	br	20efb0 <_gp+0xffdfd39c>
  20f4e4:	d9800017 	ldw	r6,0(sp)
  20f4e8:	a9ab883a 	add	r21,r21,r6
  20f4ec:	a98b803a 	cmpltu	r5,r21,r6
  20f4f0:	2d8b883a 	add	r5,r5,r22
  20f4f4:	2a11883a 	add	r8,r5,r8
  20f4f8:	897fffc4 	addi	r5,r17,-1
  20f4fc:	b2000c2e 	bgeu	r22,r8,20f530 <__divdf3+0x808>
  20f500:	41003f36 	bltu	r8,r4,20f600 <__divdf3+0x8d8>
  20f504:	22006c26 	beq	r4,r8,20f6b8 <__divdf3+0x990>
  20f508:	4109c83a 	sub	r4,r8,r4
  20f50c:	2823883a 	mov	r17,r5
  20f510:	003f3b06 	br	20f200 <_gp+0xffdfd5ec>
  20f514:	ad3ed336 	bltu	r21,r20,20f064 <_gp+0xffdfd450>
  20f518:	a804d07a 	srli	r2,r21,1
  20f51c:	802e97fa 	slli	r23,r16,31
  20f520:	a82a97fa 	slli	r21,r21,31
  20f524:	8020d07a 	srli	r16,r16,1
  20f528:	b8aeb03a 	or	r23,r23,r2
  20f52c:	003ed006 	br	20f070 <_gp+0xffdfd45c>
  20f530:	b23ff51e 	bne	r22,r8,20f508 <_gp+0xffdfd8f4>
  20f534:	d9800017 	ldw	r6,0(sp)
  20f538:	a9bff12e 	bgeu	r21,r6,20f500 <_gp+0xffdfd8ec>
  20f53c:	b109c83a 	sub	r4,r22,r4
  20f540:	2823883a 	mov	r17,r5
  20f544:	003f2e06 	br	20f200 <_gp+0xffdfd5ec>
  20f548:	2021883a 	mov	r16,r4
  20f54c:	003eff06 	br	20f14c <_gp+0xffdfd538>
  20f550:	2023883a 	mov	r17,r4
  20f554:	003ee406 	br	20f0e8 <_gp+0xffdfd4d4>
  20f558:	a8bfe236 	bltu	r21,r2,20f4e4 <_gp+0xffdfd8d0>
  20f55c:	0009883a 	mov	r4,zero
  20f560:	003f2706 	br	20f200 <_gp+0xffdfd5ec>
  20f564:	81002d36 	bltu	r16,r4,20f61c <__divdf3+0x8f4>
  20f568:	24005626 	beq	r4,r16,20f6c4 <__divdf3+0x99c>
  20f56c:	2829883a 	mov	r20,r5
  20f570:	003f8006 	br	20f374 <_gp+0xffdfd760>
  20f574:	053fffc4 	movi	r20,-1
  20f578:	003f7f06 	br	20f378 <_gp+0xffdfd764>
  20f57c:	200f883a 	mov	r7,r4
  20f580:	003f3c06 	br	20f274 <_gp+0xffdfd660>
  20f584:	1011883a 	mov	r8,r2
  20f588:	003f5506 	br	20f2e0 <_gp+0xffdfd6cc>
  20f58c:	e027883a 	mov	r19,fp
  20f590:	003f7906 	br	20f378 <_gp+0xffdfd764>
  20f594:	010007c4 	movi	r4,31
  20f598:	20c02816 	blt	r4,r3,20f63c <__divdf3+0x914>
  20f59c:	00800804 	movi	r2,32
  20f5a0:	10c5c83a 	sub	r2,r2,r3
  20f5a4:	888a983a 	sll	r5,r17,r2
  20f5a8:	a0c8d83a 	srl	r4,r20,r3
  20f5ac:	a084983a 	sll	r2,r20,r2
  20f5b0:	88e2d83a 	srl	r17,r17,r3
  20f5b4:	2906b03a 	or	r3,r5,r4
  20f5b8:	1004c03a 	cmpne	r2,r2,zero
  20f5bc:	1886b03a 	or	r3,r3,r2
  20f5c0:	188001cc 	andi	r2,r3,7
  20f5c4:	10000726 	beq	r2,zero,20f5e4 <__divdf3+0x8bc>
  20f5c8:	188003cc 	andi	r2,r3,15
  20f5cc:	01000104 	movi	r4,4
  20f5d0:	11000426 	beq	r2,r4,20f5e4 <__divdf3+0x8bc>
  20f5d4:	1805883a 	mov	r2,r3
  20f5d8:	10c00104 	addi	r3,r2,4
  20f5dc:	1885803a 	cmpltu	r2,r3,r2
  20f5e0:	88a3883a 	add	r17,r17,r2
  20f5e4:	8880202c 	andhi	r2,r17,128
  20f5e8:	10002926 	beq	r2,zero,20f690 <__divdf3+0x968>
  20f5ec:	9900004c 	andi	r4,r19,1
  20f5f0:	00800044 	movi	r2,1
  20f5f4:	0021883a 	mov	r16,zero
  20f5f8:	002b883a 	mov	r21,zero
  20f5fc:	003e2906 	br	20eea4 <_gp+0xffdfd290>
  20f600:	d9800017 	ldw	r6,0(sp)
  20f604:	8c7fff84 	addi	r17,r17,-2
  20f608:	a9ab883a 	add	r21,r21,r6
  20f60c:	a98b803a 	cmpltu	r5,r21,r6
  20f610:	2d8b883a 	add	r5,r5,r22
  20f614:	2a11883a 	add	r8,r5,r8
  20f618:	003ef806 	br	20f1fc <_gp+0xffdfd5e8>
  20f61c:	d9800017 	ldw	r6,0(sp)
  20f620:	318f883a 	add	r7,r6,r6
  20f624:	398b803a 	cmpltu	r5,r7,r6
  20f628:	2d8d883a 	add	r6,r5,r22
  20f62c:	81a1883a 	add	r16,r16,r6
  20f630:	a17fff84 	addi	r5,r20,-2
  20f634:	d9c00015 	stw	r7,0(sp)
  20f638:	003f8806 	br	20f45c <_gp+0xffdfd848>
  20f63c:	013ff844 	movi	r4,-31
  20f640:	2085c83a 	sub	r2,r4,r2
  20f644:	8888d83a 	srl	r4,r17,r2
  20f648:	00800804 	movi	r2,32
  20f64c:	18802126 	beq	r3,r2,20f6d4 <__divdf3+0x9ac>
  20f650:	04001004 	movi	r16,64
  20f654:	80c7c83a 	sub	r3,r16,r3
  20f658:	88e0983a 	sll	r16,r17,r3
  20f65c:	8504b03a 	or	r2,r16,r20
  20f660:	1004c03a 	cmpne	r2,r2,zero
  20f664:	2084b03a 	or	r2,r4,r2
  20f668:	144001cc 	andi	r17,r2,7
  20f66c:	88000d1e 	bne	r17,zero,20f6a4 <__divdf3+0x97c>
  20f670:	0021883a 	mov	r16,zero
  20f674:	102ad0fa 	srli	r21,r2,3
  20f678:	9900004c 	andi	r4,r19,1
  20f67c:	0005883a 	mov	r2,zero
  20f680:	ac6ab03a 	or	r21,r21,r17
  20f684:	003e0706 	br	20eea4 <_gp+0xffdfd290>
  20f688:	1007883a 	mov	r3,r2
  20f68c:	0023883a 	mov	r17,zero
  20f690:	8820927a 	slli	r16,r17,9
  20f694:	1805883a 	mov	r2,r3
  20f698:	8822977a 	slli	r17,r17,29
  20f69c:	8020d33a 	srli	r16,r16,12
  20f6a0:	003ff406 	br	20f674 <_gp+0xffdfda60>
  20f6a4:	10c003cc 	andi	r3,r2,15
  20f6a8:	01000104 	movi	r4,4
  20f6ac:	193ff626 	beq	r3,r4,20f688 <_gp+0xffdfda74>
  20f6b0:	0023883a 	mov	r17,zero
  20f6b4:	003fc806 	br	20f5d8 <_gp+0xffdfd9c4>
  20f6b8:	a8bfd136 	bltu	r21,r2,20f600 <_gp+0xffdfd9ec>
  20f6bc:	2823883a 	mov	r17,r5
  20f6c0:	003fa606 	br	20f55c <_gp+0xffdfd948>
  20f6c4:	d9800017 	ldw	r6,0(sp)
  20f6c8:	30bfd436 	bltu	r6,r2,20f61c <_gp+0xffdfda08>
  20f6cc:	2829883a 	mov	r20,r5
  20f6d0:	003f6406 	br	20f464 <_gp+0xffdfd850>
  20f6d4:	0021883a 	mov	r16,zero
  20f6d8:	003fe006 	br	20f65c <_gp+0xffdfda48>
  20f6dc:	00800434 	movhi	r2,16
  20f6e0:	8c000234 	orhi	r16,r17,8
  20f6e4:	10bfffc4 	addi	r2,r2,-1
  20f6e8:	e009883a 	mov	r4,fp
  20f6ec:	80a0703a 	and	r16,r16,r2
  20f6f0:	a02b883a 	mov	r21,r20
  20f6f4:	003e4e06 	br	20f030 <_gp+0xffdfd41c>

0020f6f8 <__eqdf2>:
  20f6f8:	2804d53a 	srli	r2,r5,20
  20f6fc:	3806d53a 	srli	r3,r7,20
  20f700:	02000434 	movhi	r8,16
  20f704:	423fffc4 	addi	r8,r8,-1
  20f708:	1081ffcc 	andi	r2,r2,2047
  20f70c:	0281ffc4 	movi	r10,2047
  20f710:	2a12703a 	and	r9,r5,r8
  20f714:	18c1ffcc 	andi	r3,r3,2047
  20f718:	3a10703a 	and	r8,r7,r8
  20f71c:	280ad7fa 	srli	r5,r5,31
  20f720:	380ed7fa 	srli	r7,r7,31
  20f724:	12801026 	beq	r2,r10,20f768 <__eqdf2+0x70>
  20f728:	0281ffc4 	movi	r10,2047
  20f72c:	1a800a26 	beq	r3,r10,20f758 <__eqdf2+0x60>
  20f730:	10c00226 	beq	r2,r3,20f73c <__eqdf2+0x44>
  20f734:	00800044 	movi	r2,1
  20f738:	f800283a 	ret
  20f73c:	4a3ffd1e 	bne	r9,r8,20f734 <_gp+0xffdfdb20>
  20f740:	21bffc1e 	bne	r4,r6,20f734 <_gp+0xffdfdb20>
  20f744:	29c00c26 	beq	r5,r7,20f778 <__eqdf2+0x80>
  20f748:	103ffa1e 	bne	r2,zero,20f734 <_gp+0xffdfdb20>
  20f74c:	2244b03a 	or	r2,r4,r9
  20f750:	1004c03a 	cmpne	r2,r2,zero
  20f754:	f800283a 	ret
  20f758:	3214b03a 	or	r10,r6,r8
  20f75c:	503ff426 	beq	r10,zero,20f730 <_gp+0xffdfdb1c>
  20f760:	00800044 	movi	r2,1
  20f764:	f800283a 	ret
  20f768:	2254b03a 	or	r10,r4,r9
  20f76c:	503fee26 	beq	r10,zero,20f728 <_gp+0xffdfdb14>
  20f770:	00800044 	movi	r2,1
  20f774:	f800283a 	ret
  20f778:	0005883a 	mov	r2,zero
  20f77c:	f800283a 	ret

0020f780 <__gedf2>:
  20f780:	2804d53a 	srli	r2,r5,20
  20f784:	3806d53a 	srli	r3,r7,20
  20f788:	02000434 	movhi	r8,16
  20f78c:	423fffc4 	addi	r8,r8,-1
  20f790:	1081ffcc 	andi	r2,r2,2047
  20f794:	0241ffc4 	movi	r9,2047
  20f798:	2a14703a 	and	r10,r5,r8
  20f79c:	18c1ffcc 	andi	r3,r3,2047
  20f7a0:	3a10703a 	and	r8,r7,r8
  20f7a4:	280ad7fa 	srli	r5,r5,31
  20f7a8:	380ed7fa 	srli	r7,r7,31
  20f7ac:	12401d26 	beq	r2,r9,20f824 <__gedf2+0xa4>
  20f7b0:	0241ffc4 	movi	r9,2047
  20f7b4:	1a401226 	beq	r3,r9,20f800 <__gedf2+0x80>
  20f7b8:	1000081e 	bne	r2,zero,20f7dc <__gedf2+0x5c>
  20f7bc:	2296b03a 	or	r11,r4,r10
  20f7c0:	5813003a 	cmpeq	r9,r11,zero
  20f7c4:	1800091e 	bne	r3,zero,20f7ec <__gedf2+0x6c>
  20f7c8:	3218b03a 	or	r12,r6,r8
  20f7cc:	6000071e 	bne	r12,zero,20f7ec <__gedf2+0x6c>
  20f7d0:	0005883a 	mov	r2,zero
  20f7d4:	5800101e 	bne	r11,zero,20f818 <__gedf2+0x98>
  20f7d8:	f800283a 	ret
  20f7dc:	18000c1e 	bne	r3,zero,20f810 <__gedf2+0x90>
  20f7e0:	3212b03a 	or	r9,r6,r8
  20f7e4:	48000c26 	beq	r9,zero,20f818 <__gedf2+0x98>
  20f7e8:	0013883a 	mov	r9,zero
  20f7ec:	39c03fcc 	andi	r7,r7,255
  20f7f0:	48000826 	beq	r9,zero,20f814 <__gedf2+0x94>
  20f7f4:	38000926 	beq	r7,zero,20f81c <__gedf2+0x9c>
  20f7f8:	00800044 	movi	r2,1
  20f7fc:	f800283a 	ret
  20f800:	3212b03a 	or	r9,r6,r8
  20f804:	483fec26 	beq	r9,zero,20f7b8 <_gp+0xffdfdba4>
  20f808:	00bfff84 	movi	r2,-2
  20f80c:	f800283a 	ret
  20f810:	39c03fcc 	andi	r7,r7,255
  20f814:	29c00626 	beq	r5,r7,20f830 <__gedf2+0xb0>
  20f818:	283ff726 	beq	r5,zero,20f7f8 <_gp+0xffdfdbe4>
  20f81c:	00bfffc4 	movi	r2,-1
  20f820:	f800283a 	ret
  20f824:	2292b03a 	or	r9,r4,r10
  20f828:	483fe126 	beq	r9,zero,20f7b0 <_gp+0xffdfdb9c>
  20f82c:	003ff606 	br	20f808 <_gp+0xffdfdbf4>
  20f830:	18bff916 	blt	r3,r2,20f818 <_gp+0xffdfdc04>
  20f834:	10c00316 	blt	r2,r3,20f844 <__gedf2+0xc4>
  20f838:	42bff736 	bltu	r8,r10,20f818 <_gp+0xffdfdc04>
  20f83c:	52000326 	beq	r10,r8,20f84c <__gedf2+0xcc>
  20f840:	5200042e 	bgeu	r10,r8,20f854 <__gedf2+0xd4>
  20f844:	283fec1e 	bne	r5,zero,20f7f8 <_gp+0xffdfdbe4>
  20f848:	003ff406 	br	20f81c <_gp+0xffdfdc08>
  20f84c:	313ff236 	bltu	r6,r4,20f818 <_gp+0xffdfdc04>
  20f850:	21bffc36 	bltu	r4,r6,20f844 <_gp+0xffdfdc30>
  20f854:	0005883a 	mov	r2,zero
  20f858:	f800283a 	ret

0020f85c <__ledf2>:
  20f85c:	2804d53a 	srli	r2,r5,20
  20f860:	3810d53a 	srli	r8,r7,20
  20f864:	00c00434 	movhi	r3,16
  20f868:	18ffffc4 	addi	r3,r3,-1
  20f86c:	1081ffcc 	andi	r2,r2,2047
  20f870:	0241ffc4 	movi	r9,2047
  20f874:	28d4703a 	and	r10,r5,r3
  20f878:	4201ffcc 	andi	r8,r8,2047
  20f87c:	38c6703a 	and	r3,r7,r3
  20f880:	280ad7fa 	srli	r5,r5,31
  20f884:	380ed7fa 	srli	r7,r7,31
  20f888:	12401f26 	beq	r2,r9,20f908 <__ledf2+0xac>
  20f88c:	0241ffc4 	movi	r9,2047
  20f890:	42401426 	beq	r8,r9,20f8e4 <__ledf2+0x88>
  20f894:	1000091e 	bne	r2,zero,20f8bc <__ledf2+0x60>
  20f898:	2296b03a 	or	r11,r4,r10
  20f89c:	5813003a 	cmpeq	r9,r11,zero
  20f8a0:	29403fcc 	andi	r5,r5,255
  20f8a4:	40000a1e 	bne	r8,zero,20f8d0 <__ledf2+0x74>
  20f8a8:	30d8b03a 	or	r12,r6,r3
  20f8ac:	6000081e 	bne	r12,zero,20f8d0 <__ledf2+0x74>
  20f8b0:	0005883a 	mov	r2,zero
  20f8b4:	5800111e 	bne	r11,zero,20f8fc <__ledf2+0xa0>
  20f8b8:	f800283a 	ret
  20f8bc:	29403fcc 	andi	r5,r5,255
  20f8c0:	40000c1e 	bne	r8,zero,20f8f4 <__ledf2+0x98>
  20f8c4:	30d2b03a 	or	r9,r6,r3
  20f8c8:	48000c26 	beq	r9,zero,20f8fc <__ledf2+0xa0>
  20f8cc:	0013883a 	mov	r9,zero
  20f8d0:	39c03fcc 	andi	r7,r7,255
  20f8d4:	48000826 	beq	r9,zero,20f8f8 <__ledf2+0x9c>
  20f8d8:	38001126 	beq	r7,zero,20f920 <__ledf2+0xc4>
  20f8dc:	00800044 	movi	r2,1
  20f8e0:	f800283a 	ret
  20f8e4:	30d2b03a 	or	r9,r6,r3
  20f8e8:	483fea26 	beq	r9,zero,20f894 <_gp+0xffdfdc80>
  20f8ec:	00800084 	movi	r2,2
  20f8f0:	f800283a 	ret
  20f8f4:	39c03fcc 	andi	r7,r7,255
  20f8f8:	39400726 	beq	r7,r5,20f918 <__ledf2+0xbc>
  20f8fc:	2800081e 	bne	r5,zero,20f920 <__ledf2+0xc4>
  20f900:	00800044 	movi	r2,1
  20f904:	f800283a 	ret
  20f908:	2292b03a 	or	r9,r4,r10
  20f90c:	483fdf26 	beq	r9,zero,20f88c <_gp+0xffdfdc78>
  20f910:	00800084 	movi	r2,2
  20f914:	f800283a 	ret
  20f918:	4080030e 	bge	r8,r2,20f928 <__ledf2+0xcc>
  20f91c:	383fef26 	beq	r7,zero,20f8dc <_gp+0xffdfdcc8>
  20f920:	00bfffc4 	movi	r2,-1
  20f924:	f800283a 	ret
  20f928:	123feb16 	blt	r2,r8,20f8d8 <_gp+0xffdfdcc4>
  20f92c:	1abff336 	bltu	r3,r10,20f8fc <_gp+0xffdfdce8>
  20f930:	50c00326 	beq	r10,r3,20f940 <__ledf2+0xe4>
  20f934:	50c0042e 	bgeu	r10,r3,20f948 <__ledf2+0xec>
  20f938:	283fe81e 	bne	r5,zero,20f8dc <_gp+0xffdfdcc8>
  20f93c:	003ff806 	br	20f920 <_gp+0xffdfdd0c>
  20f940:	313fee36 	bltu	r6,r4,20f8fc <_gp+0xffdfdce8>
  20f944:	21bffc36 	bltu	r4,r6,20f938 <_gp+0xffdfdd24>
  20f948:	0005883a 	mov	r2,zero
  20f94c:	f800283a 	ret

0020f950 <__muldf3>:
  20f950:	deffee04 	addi	sp,sp,-72
  20f954:	dd000c15 	stw	r20,48(sp)
  20f958:	2828d53a 	srli	r20,r5,20
  20f95c:	ddc00f15 	stw	r23,60(sp)
  20f960:	282ed7fa 	srli	r23,r5,31
  20f964:	dc000815 	stw	r16,32(sp)
  20f968:	04000434 	movhi	r16,16
  20f96c:	dcc00b15 	stw	r19,44(sp)
  20f970:	843fffc4 	addi	r16,r16,-1
  20f974:	dfc01115 	stw	ra,68(sp)
  20f978:	df001015 	stw	fp,64(sp)
  20f97c:	dd800e15 	stw	r22,56(sp)
  20f980:	dd400d15 	stw	r21,52(sp)
  20f984:	dc800a15 	stw	r18,40(sp)
  20f988:	dc400915 	stw	r17,36(sp)
  20f98c:	a501ffcc 	andi	r20,r20,2047
  20f990:	2c20703a 	and	r16,r5,r16
  20f994:	b827883a 	mov	r19,r23
  20f998:	ba403fcc 	andi	r9,r23,255
  20f99c:	a0006026 	beq	r20,zero,20fb20 <__muldf3+0x1d0>
  20f9a0:	0081ffc4 	movi	r2,2047
  20f9a4:	202d883a 	mov	r22,r4
  20f9a8:	a0803626 	beq	r20,r2,20fa84 <__muldf3+0x134>
  20f9ac:	84000434 	orhi	r16,r16,16
  20f9b0:	200ad77a 	srli	r5,r4,29
  20f9b4:	800490fa 	slli	r2,r16,3
  20f9b8:	202c90fa 	slli	r22,r4,3
  20f9bc:	a53f0044 	addi	r20,r20,-1023
  20f9c0:	28a0b03a 	or	r16,r5,r2
  20f9c4:	002b883a 	mov	r21,zero
  20f9c8:	000b883a 	mov	r5,zero
  20f9cc:	3804d53a 	srli	r2,r7,20
  20f9d0:	3838d7fa 	srli	fp,r7,31
  20f9d4:	04400434 	movhi	r17,16
  20f9d8:	8c7fffc4 	addi	r17,r17,-1
  20f9dc:	1081ffcc 	andi	r2,r2,2047
  20f9e0:	3025883a 	mov	r18,r6
  20f9e4:	3c62703a 	and	r17,r7,r17
  20f9e8:	e2803fcc 	andi	r10,fp,255
  20f9ec:	10006d26 	beq	r2,zero,20fba4 <__muldf3+0x254>
  20f9f0:	00c1ffc4 	movi	r3,2047
  20f9f4:	10c06526 	beq	r2,r3,20fb8c <__muldf3+0x23c>
  20f9f8:	8c400434 	orhi	r17,r17,16
  20f9fc:	300ed77a 	srli	r7,r6,29
  20fa00:	880690fa 	slli	r3,r17,3
  20fa04:	302490fa 	slli	r18,r6,3
  20fa08:	10bf0044 	addi	r2,r2,-1023
  20fa0c:	38e2b03a 	or	r17,r7,r3
  20fa10:	000f883a 	mov	r7,zero
  20fa14:	a087883a 	add	r3,r20,r2
  20fa18:	010003c4 	movi	r4,15
  20fa1c:	3d44b03a 	or	r2,r7,r21
  20fa20:	e5ccf03a 	xor	r6,fp,r23
  20fa24:	1a000044 	addi	r8,r3,1
  20fa28:	20809b36 	bltu	r4,r2,20fc98 <__muldf3+0x348>
  20fa2c:	100490ba 	slli	r2,r2,2
  20fa30:	01000874 	movhi	r4,33
  20fa34:	213e9104 	addi	r4,r4,-1468
  20fa38:	1105883a 	add	r2,r2,r4
  20fa3c:	10800017 	ldw	r2,0(r2)
  20fa40:	1000683a 	jmp	r2
  20fa44:	0020fc98 	cmpnei	zero,zero,-31758
  20fa48:	0020faa4 	muli	zero,zero,-31766
  20fa4c:	0020faa4 	muli	zero,zero,-31766
  20fa50:	0020faa0 	cmpeqi	zero,zero,-31766
  20fa54:	0020fc74 	movhi	zero,33777
  20fa58:	0020fc74 	movhi	zero,33777
  20fa5c:	0020fc5c 	xori	zero,zero,33777
  20fa60:	0020faa0 	cmpeqi	zero,zero,-31766
  20fa64:	0020fc74 	movhi	zero,33777
  20fa68:	0020fc5c 	xori	zero,zero,33777
  20fa6c:	0020fc74 	movhi	zero,33777
  20fa70:	0020faa0 	cmpeqi	zero,zero,-31766
  20fa74:	0020fc84 	movi	zero,-31758
  20fa78:	0020fc84 	movi	zero,-31758
  20fa7c:	0020fc84 	movi	zero,-31758
  20fa80:	0020ffe4 	muli	zero,zero,-31745
  20fa84:	2404b03a 	or	r2,r4,r16
  20fa88:	1000711e 	bne	r2,zero,20fc50 <__muldf3+0x300>
  20fa8c:	05400204 	movi	r21,8
  20fa90:	0021883a 	mov	r16,zero
  20fa94:	002d883a 	mov	r22,zero
  20fa98:	01400084 	movi	r5,2
  20fa9c:	003fcb06 	br	20f9cc <_gp+0xffdfddb8>
  20faa0:	500d883a 	mov	r6,r10
  20faa4:	00800084 	movi	r2,2
  20faa8:	38805926 	beq	r7,r2,20fc10 <__muldf3+0x2c0>
  20faac:	008000c4 	movi	r2,3
  20fab0:	3881bb26 	beq	r7,r2,2101a0 <__muldf3+0x850>
  20fab4:	00800044 	movi	r2,1
  20fab8:	3881961e 	bne	r7,r2,210114 <__muldf3+0x7c4>
  20fabc:	3027883a 	mov	r19,r6
  20fac0:	0005883a 	mov	r2,zero
  20fac4:	0021883a 	mov	r16,zero
  20fac8:	002d883a 	mov	r22,zero
  20facc:	1004953a 	slli	r2,r2,20
  20fad0:	98c03fcc 	andi	r3,r19,255
  20fad4:	04400434 	movhi	r17,16
  20fad8:	8c7fffc4 	addi	r17,r17,-1
  20fadc:	180697fa 	slli	r3,r3,31
  20fae0:	8460703a 	and	r16,r16,r17
  20fae4:	80a0b03a 	or	r16,r16,r2
  20fae8:	80c6b03a 	or	r3,r16,r3
  20faec:	b005883a 	mov	r2,r22
  20faf0:	dfc01117 	ldw	ra,68(sp)
  20faf4:	df001017 	ldw	fp,64(sp)
  20faf8:	ddc00f17 	ldw	r23,60(sp)
  20fafc:	dd800e17 	ldw	r22,56(sp)
  20fb00:	dd400d17 	ldw	r21,52(sp)
  20fb04:	dd000c17 	ldw	r20,48(sp)
  20fb08:	dcc00b17 	ldw	r19,44(sp)
  20fb0c:	dc800a17 	ldw	r18,40(sp)
  20fb10:	dc400917 	ldw	r17,36(sp)
  20fb14:	dc000817 	ldw	r16,32(sp)
  20fb18:	dec01204 	addi	sp,sp,72
  20fb1c:	f800283a 	ret
  20fb20:	2404b03a 	or	r2,r4,r16
  20fb24:	202b883a 	mov	r21,r4
  20fb28:	10004426 	beq	r2,zero,20fc3c <__muldf3+0x2ec>
  20fb2c:	80015126 	beq	r16,zero,210074 <__muldf3+0x724>
  20fb30:	8009883a 	mov	r4,r16
  20fb34:	d9800715 	stw	r6,28(sp)
  20fb38:	d9c00215 	stw	r7,8(sp)
  20fb3c:	da400415 	stw	r9,16(sp)
  20fb40:	0203dd00 	call	203dd0 <__clzsi2>
  20fb44:	d9800717 	ldw	r6,28(sp)
  20fb48:	d9c00217 	ldw	r7,8(sp)
  20fb4c:	da400417 	ldw	r9,16(sp)
  20fb50:	113ffd44 	addi	r4,r2,-11
  20fb54:	00c00704 	movi	r3,28
  20fb58:	19014216 	blt	r3,r4,210064 <__muldf3+0x714>
  20fb5c:	00c00744 	movi	r3,29
  20fb60:	15bffe04 	addi	r22,r2,-8
  20fb64:	1907c83a 	sub	r3,r3,r4
  20fb68:	85a0983a 	sll	r16,r16,r22
  20fb6c:	a8c6d83a 	srl	r3,r21,r3
  20fb70:	adac983a 	sll	r22,r21,r22
  20fb74:	1c20b03a 	or	r16,r3,r16
  20fb78:	1080fcc4 	addi	r2,r2,1011
  20fb7c:	00a9c83a 	sub	r20,zero,r2
  20fb80:	002b883a 	mov	r21,zero
  20fb84:	000b883a 	mov	r5,zero
  20fb88:	003f9006 	br	20f9cc <_gp+0xffdfddb8>
  20fb8c:	3446b03a 	or	r3,r6,r17
  20fb90:	1800281e 	bne	r3,zero,20fc34 <__muldf3+0x2e4>
  20fb94:	0023883a 	mov	r17,zero
  20fb98:	0025883a 	mov	r18,zero
  20fb9c:	01c00084 	movi	r7,2
  20fba0:	003f9c06 	br	20fa14 <_gp+0xffdfde00>
  20fba4:	3446b03a 	or	r3,r6,r17
  20fba8:	18001e26 	beq	r3,zero,20fc24 <__muldf3+0x2d4>
  20fbac:	88012126 	beq	r17,zero,210034 <__muldf3+0x6e4>
  20fbb0:	8809883a 	mov	r4,r17
  20fbb4:	d9400215 	stw	r5,8(sp)
  20fbb8:	d9800715 	stw	r6,28(sp)
  20fbbc:	da400415 	stw	r9,16(sp)
  20fbc0:	da800315 	stw	r10,12(sp)
  20fbc4:	0203dd00 	call	203dd0 <__clzsi2>
  20fbc8:	d9400217 	ldw	r5,8(sp)
  20fbcc:	d9800717 	ldw	r6,28(sp)
  20fbd0:	da400417 	ldw	r9,16(sp)
  20fbd4:	da800317 	ldw	r10,12(sp)
  20fbd8:	113ffd44 	addi	r4,r2,-11
  20fbdc:	00c00704 	movi	r3,28
  20fbe0:	19011016 	blt	r3,r4,210024 <__muldf3+0x6d4>
  20fbe4:	00c00744 	movi	r3,29
  20fbe8:	14bffe04 	addi	r18,r2,-8
  20fbec:	1907c83a 	sub	r3,r3,r4
  20fbf0:	8ca2983a 	sll	r17,r17,r18
  20fbf4:	30c6d83a 	srl	r3,r6,r3
  20fbf8:	34a4983a 	sll	r18,r6,r18
  20fbfc:	1c62b03a 	or	r17,r3,r17
  20fc00:	1080fcc4 	addi	r2,r2,1011
  20fc04:	0085c83a 	sub	r2,zero,r2
  20fc08:	000f883a 	mov	r7,zero
  20fc0c:	003f8106 	br	20fa14 <_gp+0xffdfde00>
  20fc10:	3027883a 	mov	r19,r6
  20fc14:	0081ffc4 	movi	r2,2047
  20fc18:	0021883a 	mov	r16,zero
  20fc1c:	002d883a 	mov	r22,zero
  20fc20:	003faa06 	br	20facc <_gp+0xffdfdeb8>
  20fc24:	0023883a 	mov	r17,zero
  20fc28:	0025883a 	mov	r18,zero
  20fc2c:	01c00044 	movi	r7,1
  20fc30:	003f7806 	br	20fa14 <_gp+0xffdfde00>
  20fc34:	01c000c4 	movi	r7,3
  20fc38:	003f7606 	br	20fa14 <_gp+0xffdfde00>
  20fc3c:	05400104 	movi	r21,4
  20fc40:	0021883a 	mov	r16,zero
  20fc44:	002d883a 	mov	r22,zero
  20fc48:	01400044 	movi	r5,1
  20fc4c:	003f5f06 	br	20f9cc <_gp+0xffdfddb8>
  20fc50:	05400304 	movi	r21,12
  20fc54:	014000c4 	movi	r5,3
  20fc58:	003f5c06 	br	20f9cc <_gp+0xffdfddb8>
  20fc5c:	04000434 	movhi	r16,16
  20fc60:	0027883a 	mov	r19,zero
  20fc64:	843fffc4 	addi	r16,r16,-1
  20fc68:	05bfffc4 	movi	r22,-1
  20fc6c:	0081ffc4 	movi	r2,2047
  20fc70:	003f9606 	br	20facc <_gp+0xffdfdeb8>
  20fc74:	8023883a 	mov	r17,r16
  20fc78:	b025883a 	mov	r18,r22
  20fc7c:	280f883a 	mov	r7,r5
  20fc80:	003f8806 	br	20faa4 <_gp+0xffdfde90>
  20fc84:	8023883a 	mov	r17,r16
  20fc88:	b025883a 	mov	r18,r22
  20fc8c:	480d883a 	mov	r6,r9
  20fc90:	280f883a 	mov	r7,r5
  20fc94:	003f8306 	br	20faa4 <_gp+0xffdfde90>
  20fc98:	b026d43a 	srli	r19,r22,16
  20fc9c:	902ed43a 	srli	r23,r18,16
  20fca0:	b5bfffcc 	andi	r22,r22,65535
  20fca4:	94bfffcc 	andi	r18,r18,65535
  20fca8:	b00b883a 	mov	r5,r22
  20fcac:	9009883a 	mov	r4,r18
  20fcb0:	d8c00515 	stw	r3,20(sp)
  20fcb4:	d9800715 	stw	r6,28(sp)
  20fcb8:	da000615 	stw	r8,24(sp)
  20fcbc:	02032780 	call	203278 <__mulsi3>
  20fcc0:	980b883a 	mov	r5,r19
  20fcc4:	9009883a 	mov	r4,r18
  20fcc8:	1029883a 	mov	r20,r2
  20fccc:	02032780 	call	203278 <__mulsi3>
  20fcd0:	b80b883a 	mov	r5,r23
  20fcd4:	9809883a 	mov	r4,r19
  20fcd8:	102b883a 	mov	r21,r2
  20fcdc:	02032780 	call	203278 <__mulsi3>
  20fce0:	b809883a 	mov	r4,r23
  20fce4:	b00b883a 	mov	r5,r22
  20fce8:	1039883a 	mov	fp,r2
  20fcec:	02032780 	call	203278 <__mulsi3>
  20fcf0:	a008d43a 	srli	r4,r20,16
  20fcf4:	1545883a 	add	r2,r2,r21
  20fcf8:	d8c00517 	ldw	r3,20(sp)
  20fcfc:	2085883a 	add	r2,r4,r2
  20fd00:	d9800717 	ldw	r6,28(sp)
  20fd04:	da000617 	ldw	r8,24(sp)
  20fd08:	1540022e 	bgeu	r2,r21,20fd14 <__muldf3+0x3c4>
  20fd0c:	01000074 	movhi	r4,1
  20fd10:	e139883a 	add	fp,fp,r4
  20fd14:	100e943a 	slli	r7,r2,16
  20fd18:	1004d43a 	srli	r2,r2,16
  20fd1c:	882ad43a 	srli	r21,r17,16
  20fd20:	a53fffcc 	andi	r20,r20,65535
  20fd24:	8c7fffcc 	andi	r17,r17,65535
  20fd28:	3d29883a 	add	r20,r7,r20
  20fd2c:	b00b883a 	mov	r5,r22
  20fd30:	8809883a 	mov	r4,r17
  20fd34:	d8c00515 	stw	r3,20(sp)
  20fd38:	d9800715 	stw	r6,28(sp)
  20fd3c:	da000615 	stw	r8,24(sp)
  20fd40:	dd000115 	stw	r20,4(sp)
  20fd44:	d8800015 	stw	r2,0(sp)
  20fd48:	02032780 	call	203278 <__mulsi3>
  20fd4c:	980b883a 	mov	r5,r19
  20fd50:	8809883a 	mov	r4,r17
  20fd54:	d8800215 	stw	r2,8(sp)
  20fd58:	02032780 	call	203278 <__mulsi3>
  20fd5c:	9809883a 	mov	r4,r19
  20fd60:	a80b883a 	mov	r5,r21
  20fd64:	1029883a 	mov	r20,r2
  20fd68:	02032780 	call	203278 <__mulsi3>
  20fd6c:	b00b883a 	mov	r5,r22
  20fd70:	a809883a 	mov	r4,r21
  20fd74:	d8800415 	stw	r2,16(sp)
  20fd78:	02032780 	call	203278 <__mulsi3>
  20fd7c:	d9c00217 	ldw	r7,8(sp)
  20fd80:	1505883a 	add	r2,r2,r20
  20fd84:	d8c00517 	ldw	r3,20(sp)
  20fd88:	3826d43a 	srli	r19,r7,16
  20fd8c:	d9800717 	ldw	r6,28(sp)
  20fd90:	da000617 	ldw	r8,24(sp)
  20fd94:	9885883a 	add	r2,r19,r2
  20fd98:	da400417 	ldw	r9,16(sp)
  20fd9c:	1500022e 	bgeu	r2,r20,20fda8 <__muldf3+0x458>
  20fda0:	01000074 	movhi	r4,1
  20fda4:	4913883a 	add	r9,r9,r4
  20fda8:	1028d43a 	srli	r20,r2,16
  20fdac:	1004943a 	slli	r2,r2,16
  20fdb0:	802cd43a 	srli	r22,r16,16
  20fdb4:	843fffcc 	andi	r16,r16,65535
  20fdb8:	3cffffcc 	andi	r19,r7,65535
  20fdbc:	9009883a 	mov	r4,r18
  20fdc0:	800b883a 	mov	r5,r16
  20fdc4:	a269883a 	add	r20,r20,r9
  20fdc8:	d8c00515 	stw	r3,20(sp)
  20fdcc:	d9800715 	stw	r6,28(sp)
  20fdd0:	da000615 	stw	r8,24(sp)
  20fdd4:	14e7883a 	add	r19,r2,r19
  20fdd8:	02032780 	call	203278 <__mulsi3>
  20fddc:	9009883a 	mov	r4,r18
  20fde0:	b00b883a 	mov	r5,r22
  20fde4:	d8800315 	stw	r2,12(sp)
  20fde8:	02032780 	call	203278 <__mulsi3>
  20fdec:	b809883a 	mov	r4,r23
  20fdf0:	b00b883a 	mov	r5,r22
  20fdf4:	d8800215 	stw	r2,8(sp)
  20fdf8:	02032780 	call	203278 <__mulsi3>
  20fdfc:	b80b883a 	mov	r5,r23
  20fe00:	8009883a 	mov	r4,r16
  20fe04:	d8800415 	stw	r2,16(sp)
  20fe08:	02032780 	call	203278 <__mulsi3>
  20fe0c:	da800317 	ldw	r10,12(sp)
  20fe10:	d9c00217 	ldw	r7,8(sp)
  20fe14:	d9000017 	ldw	r4,0(sp)
  20fe18:	502ed43a 	srli	r23,r10,16
  20fe1c:	11c5883a 	add	r2,r2,r7
  20fe20:	24e5883a 	add	r18,r4,r19
  20fe24:	b885883a 	add	r2,r23,r2
  20fe28:	d8c00517 	ldw	r3,20(sp)
  20fe2c:	d9800717 	ldw	r6,28(sp)
  20fe30:	da000617 	ldw	r8,24(sp)
  20fe34:	da400417 	ldw	r9,16(sp)
  20fe38:	11c0022e 	bgeu	r2,r7,20fe44 <__muldf3+0x4f4>
  20fe3c:	01000074 	movhi	r4,1
  20fe40:	4913883a 	add	r9,r9,r4
  20fe44:	100ed43a 	srli	r7,r2,16
  20fe48:	1004943a 	slli	r2,r2,16
  20fe4c:	55ffffcc 	andi	r23,r10,65535
  20fe50:	3a53883a 	add	r9,r7,r9
  20fe54:	8809883a 	mov	r4,r17
  20fe58:	800b883a 	mov	r5,r16
  20fe5c:	d8c00515 	stw	r3,20(sp)
  20fe60:	d9800715 	stw	r6,28(sp)
  20fe64:	da000615 	stw	r8,24(sp)
  20fe68:	da400415 	stw	r9,16(sp)
  20fe6c:	15ef883a 	add	r23,r2,r23
  20fe70:	02032780 	call	203278 <__mulsi3>
  20fe74:	8809883a 	mov	r4,r17
  20fe78:	b00b883a 	mov	r5,r22
  20fe7c:	d8800215 	stw	r2,8(sp)
  20fe80:	02032780 	call	203278 <__mulsi3>
  20fe84:	b00b883a 	mov	r5,r22
  20fe88:	a809883a 	mov	r4,r21
  20fe8c:	d8800315 	stw	r2,12(sp)
  20fe90:	02032780 	call	203278 <__mulsi3>
  20fe94:	8009883a 	mov	r4,r16
  20fe98:	a80b883a 	mov	r5,r21
  20fe9c:	1023883a 	mov	r17,r2
  20fea0:	02032780 	call	203278 <__mulsi3>
  20fea4:	d9c00217 	ldw	r7,8(sp)
  20fea8:	da800317 	ldw	r10,12(sp)
  20feac:	d8c00517 	ldw	r3,20(sp)
  20feb0:	3808d43a 	srli	r4,r7,16
  20feb4:	1285883a 	add	r2,r2,r10
  20feb8:	d9800717 	ldw	r6,28(sp)
  20febc:	2085883a 	add	r2,r4,r2
  20fec0:	da000617 	ldw	r8,24(sp)
  20fec4:	da400417 	ldw	r9,16(sp)
  20fec8:	1280022e 	bgeu	r2,r10,20fed4 <__muldf3+0x584>
  20fecc:	01000074 	movhi	r4,1
  20fed0:	8923883a 	add	r17,r17,r4
  20fed4:	1008943a 	slli	r4,r2,16
  20fed8:	39ffffcc 	andi	r7,r7,65535
  20fedc:	e4b9883a 	add	fp,fp,r18
  20fee0:	21cf883a 	add	r7,r4,r7
  20fee4:	e4e7803a 	cmpltu	r19,fp,r19
  20fee8:	3d0f883a 	add	r7,r7,r20
  20feec:	bf39883a 	add	fp,r23,fp
  20fef0:	99c9883a 	add	r4,r19,r7
  20fef4:	e5ef803a 	cmpltu	r23,fp,r23
  20fef8:	490b883a 	add	r5,r9,r4
  20fefc:	1004d43a 	srli	r2,r2,16
  20ff00:	b965883a 	add	r18,r23,r5
  20ff04:	24c9803a 	cmpltu	r4,r4,r19
  20ff08:	3d29803a 	cmpltu	r20,r7,r20
  20ff0c:	a128b03a 	or	r20,r20,r4
  20ff10:	95ef803a 	cmpltu	r23,r18,r23
  20ff14:	2a53803a 	cmpltu	r9,r5,r9
  20ff18:	a0a9883a 	add	r20,r20,r2
  20ff1c:	4deeb03a 	or	r23,r9,r23
  20ff20:	a5ef883a 	add	r23,r20,r23
  20ff24:	bc63883a 	add	r17,r23,r17
  20ff28:	e004927a 	slli	r2,fp,9
  20ff2c:	d9000117 	ldw	r4,4(sp)
  20ff30:	882e927a 	slli	r23,r17,9
  20ff34:	9022d5fa 	srli	r17,r18,23
  20ff38:	e038d5fa 	srli	fp,fp,23
  20ff3c:	1104b03a 	or	r2,r2,r4
  20ff40:	9024927a 	slli	r18,r18,9
  20ff44:	1004c03a 	cmpne	r2,r2,zero
  20ff48:	bc62b03a 	or	r17,r23,r17
  20ff4c:	1738b03a 	or	fp,r2,fp
  20ff50:	8880402c 	andhi	r2,r17,256
  20ff54:	e4a4b03a 	or	r18,fp,r18
  20ff58:	10000726 	beq	r2,zero,20ff78 <__muldf3+0x628>
  20ff5c:	9006d07a 	srli	r3,r18,1
  20ff60:	880497fa 	slli	r2,r17,31
  20ff64:	9480004c 	andi	r18,r18,1
  20ff68:	8822d07a 	srli	r17,r17,1
  20ff6c:	1ca4b03a 	or	r18,r3,r18
  20ff70:	14a4b03a 	or	r18,r2,r18
  20ff74:	4007883a 	mov	r3,r8
  20ff78:	1880ffc4 	addi	r2,r3,1023
  20ff7c:	0080460e 	bge	zero,r2,210098 <__muldf3+0x748>
  20ff80:	910001cc 	andi	r4,r18,7
  20ff84:	20000726 	beq	r4,zero,20ffa4 <__muldf3+0x654>
  20ff88:	910003cc 	andi	r4,r18,15
  20ff8c:	01400104 	movi	r5,4
  20ff90:	21400426 	beq	r4,r5,20ffa4 <__muldf3+0x654>
  20ff94:	9149883a 	add	r4,r18,r5
  20ff98:	24a5803a 	cmpltu	r18,r4,r18
  20ff9c:	8ca3883a 	add	r17,r17,r18
  20ffa0:	2025883a 	mov	r18,r4
  20ffa4:	8900402c 	andhi	r4,r17,256
  20ffa8:	20000426 	beq	r4,zero,20ffbc <__muldf3+0x66c>
  20ffac:	18810004 	addi	r2,r3,1024
  20ffb0:	00ffc034 	movhi	r3,65280
  20ffb4:	18ffffc4 	addi	r3,r3,-1
  20ffb8:	88e2703a 	and	r17,r17,r3
  20ffbc:	00c1ff84 	movi	r3,2046
  20ffc0:	18bf1316 	blt	r3,r2,20fc10 <_gp+0xffdfdffc>
  20ffc4:	882c977a 	slli	r22,r17,29
  20ffc8:	9024d0fa 	srli	r18,r18,3
  20ffcc:	8822927a 	slli	r17,r17,9
  20ffd0:	1081ffcc 	andi	r2,r2,2047
  20ffd4:	b4acb03a 	or	r22,r22,r18
  20ffd8:	8820d33a 	srli	r16,r17,12
  20ffdc:	3027883a 	mov	r19,r6
  20ffe0:	003eba06 	br	20facc <_gp+0xffdfdeb8>
  20ffe4:	8080022c 	andhi	r2,r16,8
  20ffe8:	10000926 	beq	r2,zero,210010 <__muldf3+0x6c0>
  20ffec:	8880022c 	andhi	r2,r17,8
  20fff0:	1000071e 	bne	r2,zero,210010 <__muldf3+0x6c0>
  20fff4:	00800434 	movhi	r2,16
  20fff8:	8c000234 	orhi	r16,r17,8
  20fffc:	10bfffc4 	addi	r2,r2,-1
  210000:	e027883a 	mov	r19,fp
  210004:	80a0703a 	and	r16,r16,r2
  210008:	902d883a 	mov	r22,r18
  21000c:	003f1706 	br	20fc6c <_gp+0xffdfe058>
  210010:	00800434 	movhi	r2,16
  210014:	84000234 	orhi	r16,r16,8
  210018:	10bfffc4 	addi	r2,r2,-1
  21001c:	80a0703a 	and	r16,r16,r2
  210020:	003f1206 	br	20fc6c <_gp+0xffdfe058>
  210024:	147ff604 	addi	r17,r2,-40
  210028:	3462983a 	sll	r17,r6,r17
  21002c:	0025883a 	mov	r18,zero
  210030:	003ef306 	br	20fc00 <_gp+0xffdfdfec>
  210034:	3009883a 	mov	r4,r6
  210038:	d9400215 	stw	r5,8(sp)
  21003c:	d9800715 	stw	r6,28(sp)
  210040:	da400415 	stw	r9,16(sp)
  210044:	da800315 	stw	r10,12(sp)
  210048:	0203dd00 	call	203dd0 <__clzsi2>
  21004c:	10800804 	addi	r2,r2,32
  210050:	da800317 	ldw	r10,12(sp)
  210054:	da400417 	ldw	r9,16(sp)
  210058:	d9800717 	ldw	r6,28(sp)
  21005c:	d9400217 	ldw	r5,8(sp)
  210060:	003edd06 	br	20fbd8 <_gp+0xffdfdfc4>
  210064:	143ff604 	addi	r16,r2,-40
  210068:	ac20983a 	sll	r16,r21,r16
  21006c:	002d883a 	mov	r22,zero
  210070:	003ec106 	br	20fb78 <_gp+0xffdfdf64>
  210074:	d9800715 	stw	r6,28(sp)
  210078:	d9c00215 	stw	r7,8(sp)
  21007c:	da400415 	stw	r9,16(sp)
  210080:	0203dd00 	call	203dd0 <__clzsi2>
  210084:	10800804 	addi	r2,r2,32
  210088:	da400417 	ldw	r9,16(sp)
  21008c:	d9c00217 	ldw	r7,8(sp)
  210090:	d9800717 	ldw	r6,28(sp)
  210094:	003eae06 	br	20fb50 <_gp+0xffdfdf3c>
  210098:	00c00044 	movi	r3,1
  21009c:	1887c83a 	sub	r3,r3,r2
  2100a0:	01000e04 	movi	r4,56
  2100a4:	20fe8516 	blt	r4,r3,20fabc <_gp+0xffdfdea8>
  2100a8:	010007c4 	movi	r4,31
  2100ac:	20c01b16 	blt	r4,r3,21011c <__muldf3+0x7cc>
  2100b0:	00800804 	movi	r2,32
  2100b4:	10c5c83a 	sub	r2,r2,r3
  2100b8:	888a983a 	sll	r5,r17,r2
  2100bc:	90c8d83a 	srl	r4,r18,r3
  2100c0:	9084983a 	sll	r2,r18,r2
  2100c4:	88e2d83a 	srl	r17,r17,r3
  2100c8:	2906b03a 	or	r3,r5,r4
  2100cc:	1004c03a 	cmpne	r2,r2,zero
  2100d0:	1886b03a 	or	r3,r3,r2
  2100d4:	188001cc 	andi	r2,r3,7
  2100d8:	10000726 	beq	r2,zero,2100f8 <__muldf3+0x7a8>
  2100dc:	188003cc 	andi	r2,r3,15
  2100e0:	01000104 	movi	r4,4
  2100e4:	11000426 	beq	r2,r4,2100f8 <__muldf3+0x7a8>
  2100e8:	1805883a 	mov	r2,r3
  2100ec:	10c00104 	addi	r3,r2,4
  2100f0:	1885803a 	cmpltu	r2,r3,r2
  2100f4:	88a3883a 	add	r17,r17,r2
  2100f8:	8880202c 	andhi	r2,r17,128
  2100fc:	10001c26 	beq	r2,zero,210170 <__muldf3+0x820>
  210100:	3027883a 	mov	r19,r6
  210104:	00800044 	movi	r2,1
  210108:	0021883a 	mov	r16,zero
  21010c:	002d883a 	mov	r22,zero
  210110:	003e6e06 	br	20facc <_gp+0xffdfdeb8>
  210114:	4007883a 	mov	r3,r8
  210118:	003f9706 	br	20ff78 <_gp+0xffdfe364>
  21011c:	017ff844 	movi	r5,-31
  210120:	2885c83a 	sub	r2,r5,r2
  210124:	888ad83a 	srl	r5,r17,r2
  210128:	00800804 	movi	r2,32
  21012c:	18801a26 	beq	r3,r2,210198 <__muldf3+0x848>
  210130:	01001004 	movi	r4,64
  210134:	20c7c83a 	sub	r3,r4,r3
  210138:	88e2983a 	sll	r17,r17,r3
  21013c:	8ca4b03a 	or	r18,r17,r18
  210140:	9004c03a 	cmpne	r2,r18,zero
  210144:	2884b03a 	or	r2,r5,r2
  210148:	144001cc 	andi	r17,r2,7
  21014c:	88000d1e 	bne	r17,zero,210184 <__muldf3+0x834>
  210150:	0021883a 	mov	r16,zero
  210154:	102cd0fa 	srli	r22,r2,3
  210158:	3027883a 	mov	r19,r6
  21015c:	0005883a 	mov	r2,zero
  210160:	b46cb03a 	or	r22,r22,r17
  210164:	003e5906 	br	20facc <_gp+0xffdfdeb8>
  210168:	1007883a 	mov	r3,r2
  21016c:	0023883a 	mov	r17,zero
  210170:	8820927a 	slli	r16,r17,9
  210174:	1805883a 	mov	r2,r3
  210178:	8822977a 	slli	r17,r17,29
  21017c:	8020d33a 	srli	r16,r16,12
  210180:	003ff406 	br	210154 <_gp+0xffdfe540>
  210184:	10c003cc 	andi	r3,r2,15
  210188:	01000104 	movi	r4,4
  21018c:	193ff626 	beq	r3,r4,210168 <_gp+0xffdfe554>
  210190:	0023883a 	mov	r17,zero
  210194:	003fd506 	br	2100ec <_gp+0xffdfe4d8>
  210198:	0023883a 	mov	r17,zero
  21019c:	003fe706 	br	21013c <_gp+0xffdfe528>
  2101a0:	00800434 	movhi	r2,16
  2101a4:	8c000234 	orhi	r16,r17,8
  2101a8:	10bfffc4 	addi	r2,r2,-1
  2101ac:	3027883a 	mov	r19,r6
  2101b0:	80a0703a 	and	r16,r16,r2
  2101b4:	902d883a 	mov	r22,r18
  2101b8:	003eac06 	br	20fc6c <_gp+0xffdfe058>

002101bc <__subdf3>:
  2101bc:	02000434 	movhi	r8,16
  2101c0:	423fffc4 	addi	r8,r8,-1
  2101c4:	defffb04 	addi	sp,sp,-20
  2101c8:	2a14703a 	and	r10,r5,r8
  2101cc:	3812d53a 	srli	r9,r7,20
  2101d0:	3a10703a 	and	r8,r7,r8
  2101d4:	2006d77a 	srli	r3,r4,29
  2101d8:	3004d77a 	srli	r2,r6,29
  2101dc:	dc000015 	stw	r16,0(sp)
  2101e0:	501490fa 	slli	r10,r10,3
  2101e4:	2820d53a 	srli	r16,r5,20
  2101e8:	401090fa 	slli	r8,r8,3
  2101ec:	dc800215 	stw	r18,8(sp)
  2101f0:	dc400115 	stw	r17,4(sp)
  2101f4:	dfc00415 	stw	ra,16(sp)
  2101f8:	202290fa 	slli	r17,r4,3
  2101fc:	dcc00315 	stw	r19,12(sp)
  210200:	4a41ffcc 	andi	r9,r9,2047
  210204:	0101ffc4 	movi	r4,2047
  210208:	2824d7fa 	srli	r18,r5,31
  21020c:	8401ffcc 	andi	r16,r16,2047
  210210:	50c6b03a 	or	r3,r10,r3
  210214:	380ed7fa 	srli	r7,r7,31
  210218:	408ab03a 	or	r5,r8,r2
  21021c:	300c90fa 	slli	r6,r6,3
  210220:	49009626 	beq	r9,r4,21047c <__subdf3+0x2c0>
  210224:	39c0005c 	xori	r7,r7,1
  210228:	8245c83a 	sub	r2,r16,r9
  21022c:	3c807426 	beq	r7,r18,210400 <__subdf3+0x244>
  210230:	0080af0e 	bge	zero,r2,2104f0 <__subdf3+0x334>
  210234:	48002a1e 	bne	r9,zero,2102e0 <__subdf3+0x124>
  210238:	2988b03a 	or	r4,r5,r6
  21023c:	20009a1e 	bne	r4,zero,2104a8 <__subdf3+0x2ec>
  210240:	888001cc 	andi	r2,r17,7
  210244:	10000726 	beq	r2,zero,210264 <__subdf3+0xa8>
  210248:	888003cc 	andi	r2,r17,15
  21024c:	01000104 	movi	r4,4
  210250:	11000426 	beq	r2,r4,210264 <__subdf3+0xa8>
  210254:	890b883a 	add	r5,r17,r4
  210258:	2c63803a 	cmpltu	r17,r5,r17
  21025c:	1c47883a 	add	r3,r3,r17
  210260:	2823883a 	mov	r17,r5
  210264:	1880202c 	andhi	r2,r3,128
  210268:	10005926 	beq	r2,zero,2103d0 <__subdf3+0x214>
  21026c:	84000044 	addi	r16,r16,1
  210270:	0081ffc4 	movi	r2,2047
  210274:	8080be26 	beq	r16,r2,210570 <__subdf3+0x3b4>
  210278:	017fe034 	movhi	r5,65408
  21027c:	297fffc4 	addi	r5,r5,-1
  210280:	1946703a 	and	r3,r3,r5
  210284:	1804977a 	slli	r2,r3,29
  210288:	1806927a 	slli	r3,r3,9
  21028c:	8822d0fa 	srli	r17,r17,3
  210290:	8401ffcc 	andi	r16,r16,2047
  210294:	180ad33a 	srli	r5,r3,12
  210298:	9100004c 	andi	r4,r18,1
  21029c:	1444b03a 	or	r2,r2,r17
  2102a0:	80c1ffcc 	andi	r3,r16,2047
  2102a4:	1820953a 	slli	r16,r3,20
  2102a8:	20c03fcc 	andi	r3,r4,255
  2102ac:	180897fa 	slli	r4,r3,31
  2102b0:	00c00434 	movhi	r3,16
  2102b4:	18ffffc4 	addi	r3,r3,-1
  2102b8:	28c6703a 	and	r3,r5,r3
  2102bc:	1c06b03a 	or	r3,r3,r16
  2102c0:	1906b03a 	or	r3,r3,r4
  2102c4:	dfc00417 	ldw	ra,16(sp)
  2102c8:	dcc00317 	ldw	r19,12(sp)
  2102cc:	dc800217 	ldw	r18,8(sp)
  2102d0:	dc400117 	ldw	r17,4(sp)
  2102d4:	dc000017 	ldw	r16,0(sp)
  2102d8:	dec00504 	addi	sp,sp,20
  2102dc:	f800283a 	ret
  2102e0:	0101ffc4 	movi	r4,2047
  2102e4:	813fd626 	beq	r16,r4,210240 <_gp+0xffdfe62c>
  2102e8:	29402034 	orhi	r5,r5,128
  2102ec:	01000e04 	movi	r4,56
  2102f0:	2080a316 	blt	r4,r2,210580 <__subdf3+0x3c4>
  2102f4:	010007c4 	movi	r4,31
  2102f8:	2080c616 	blt	r4,r2,210614 <__subdf3+0x458>
  2102fc:	01000804 	movi	r4,32
  210300:	2089c83a 	sub	r4,r4,r2
  210304:	2910983a 	sll	r8,r5,r4
  210308:	308ed83a 	srl	r7,r6,r2
  21030c:	3108983a 	sll	r4,r6,r4
  210310:	2884d83a 	srl	r2,r5,r2
  210314:	41ccb03a 	or	r6,r8,r7
  210318:	2008c03a 	cmpne	r4,r4,zero
  21031c:	310cb03a 	or	r6,r6,r4
  210320:	898dc83a 	sub	r6,r17,r6
  210324:	89a3803a 	cmpltu	r17,r17,r6
  210328:	1887c83a 	sub	r3,r3,r2
  21032c:	1c47c83a 	sub	r3,r3,r17
  210330:	3023883a 	mov	r17,r6
  210334:	1880202c 	andhi	r2,r3,128
  210338:	10002326 	beq	r2,zero,2103c8 <__subdf3+0x20c>
  21033c:	04c02034 	movhi	r19,128
  210340:	9cffffc4 	addi	r19,r19,-1
  210344:	1ce6703a 	and	r19,r3,r19
  210348:	98007a26 	beq	r19,zero,210534 <__subdf3+0x378>
  21034c:	9809883a 	mov	r4,r19
  210350:	0203dd00 	call	203dd0 <__clzsi2>
  210354:	113ffe04 	addi	r4,r2,-8
  210358:	00c007c4 	movi	r3,31
  21035c:	19007b16 	blt	r3,r4,21054c <__subdf3+0x390>
  210360:	00800804 	movi	r2,32
  210364:	1105c83a 	sub	r2,r2,r4
  210368:	8884d83a 	srl	r2,r17,r2
  21036c:	9906983a 	sll	r3,r19,r4
  210370:	8922983a 	sll	r17,r17,r4
  210374:	10c4b03a 	or	r2,r2,r3
  210378:	24007816 	blt	r4,r16,21055c <__subdf3+0x3a0>
  21037c:	2421c83a 	sub	r16,r4,r16
  210380:	80c00044 	addi	r3,r16,1
  210384:	010007c4 	movi	r4,31
  210388:	20c09516 	blt	r4,r3,2105e0 <__subdf3+0x424>
  21038c:	01400804 	movi	r5,32
  210390:	28cbc83a 	sub	r5,r5,r3
  210394:	88c8d83a 	srl	r4,r17,r3
  210398:	8962983a 	sll	r17,r17,r5
  21039c:	114a983a 	sll	r5,r2,r5
  2103a0:	10c6d83a 	srl	r3,r2,r3
  2103a4:	8804c03a 	cmpne	r2,r17,zero
  2103a8:	290ab03a 	or	r5,r5,r4
  2103ac:	28a2b03a 	or	r17,r5,r2
  2103b0:	0021883a 	mov	r16,zero
  2103b4:	003fa206 	br	210240 <_gp+0xffdfe62c>
  2103b8:	2090b03a 	or	r8,r4,r2
  2103bc:	40018e26 	beq	r8,zero,2109f8 <__subdf3+0x83c>
  2103c0:	1007883a 	mov	r3,r2
  2103c4:	2023883a 	mov	r17,r4
  2103c8:	888001cc 	andi	r2,r17,7
  2103cc:	103f9e1e 	bne	r2,zero,210248 <_gp+0xffdfe634>
  2103d0:	1804977a 	slli	r2,r3,29
  2103d4:	8822d0fa 	srli	r17,r17,3
  2103d8:	1810d0fa 	srli	r8,r3,3
  2103dc:	9100004c 	andi	r4,r18,1
  2103e0:	1444b03a 	or	r2,r2,r17
  2103e4:	00c1ffc4 	movi	r3,2047
  2103e8:	80c02826 	beq	r16,r3,21048c <__subdf3+0x2d0>
  2103ec:	01400434 	movhi	r5,16
  2103f0:	297fffc4 	addi	r5,r5,-1
  2103f4:	80e0703a 	and	r16,r16,r3
  2103f8:	414a703a 	and	r5,r8,r5
  2103fc:	003fa806 	br	2102a0 <_gp+0xffdfe68c>
  210400:	0080630e 	bge	zero,r2,210590 <__subdf3+0x3d4>
  210404:	48003026 	beq	r9,zero,2104c8 <__subdf3+0x30c>
  210408:	0101ffc4 	movi	r4,2047
  21040c:	813f8c26 	beq	r16,r4,210240 <_gp+0xffdfe62c>
  210410:	29402034 	orhi	r5,r5,128
  210414:	01000e04 	movi	r4,56
  210418:	2080a90e 	bge	r4,r2,2106c0 <__subdf3+0x504>
  21041c:	298cb03a 	or	r6,r5,r6
  210420:	3012c03a 	cmpne	r9,r6,zero
  210424:	0005883a 	mov	r2,zero
  210428:	4c53883a 	add	r9,r9,r17
  21042c:	4c63803a 	cmpltu	r17,r9,r17
  210430:	10c7883a 	add	r3,r2,r3
  210434:	88c7883a 	add	r3,r17,r3
  210438:	4823883a 	mov	r17,r9
  21043c:	1880202c 	andhi	r2,r3,128
  210440:	1000d026 	beq	r2,zero,210784 <__subdf3+0x5c8>
  210444:	84000044 	addi	r16,r16,1
  210448:	0081ffc4 	movi	r2,2047
  21044c:	8080fe26 	beq	r16,r2,210848 <__subdf3+0x68c>
  210450:	00bfe034 	movhi	r2,65408
  210454:	10bfffc4 	addi	r2,r2,-1
  210458:	1886703a 	and	r3,r3,r2
  21045c:	880ad07a 	srli	r5,r17,1
  210460:	180497fa 	slli	r2,r3,31
  210464:	8900004c 	andi	r4,r17,1
  210468:	2922b03a 	or	r17,r5,r4
  21046c:	1806d07a 	srli	r3,r3,1
  210470:	1462b03a 	or	r17,r2,r17
  210474:	3825883a 	mov	r18,r7
  210478:	003f7106 	br	210240 <_gp+0xffdfe62c>
  21047c:	2984b03a 	or	r2,r5,r6
  210480:	103f6826 	beq	r2,zero,210224 <_gp+0xffdfe610>
  210484:	39c03fcc 	andi	r7,r7,255
  210488:	003f6706 	br	210228 <_gp+0xffdfe614>
  21048c:	4086b03a 	or	r3,r8,r2
  210490:	18015226 	beq	r3,zero,2109dc <__subdf3+0x820>
  210494:	00c00434 	movhi	r3,16
  210498:	41400234 	orhi	r5,r8,8
  21049c:	18ffffc4 	addi	r3,r3,-1
  2104a0:	28ca703a 	and	r5,r5,r3
  2104a4:	003f7e06 	br	2102a0 <_gp+0xffdfe68c>
  2104a8:	10bfffc4 	addi	r2,r2,-1
  2104ac:	1000491e 	bne	r2,zero,2105d4 <__subdf3+0x418>
  2104b0:	898fc83a 	sub	r7,r17,r6
  2104b4:	89e3803a 	cmpltu	r17,r17,r7
  2104b8:	1947c83a 	sub	r3,r3,r5
  2104bc:	1c47c83a 	sub	r3,r3,r17
  2104c0:	3823883a 	mov	r17,r7
  2104c4:	003f9b06 	br	210334 <_gp+0xffdfe720>
  2104c8:	2988b03a 	or	r4,r5,r6
  2104cc:	203f5c26 	beq	r4,zero,210240 <_gp+0xffdfe62c>
  2104d0:	10bfffc4 	addi	r2,r2,-1
  2104d4:	1000931e 	bne	r2,zero,210724 <__subdf3+0x568>
  2104d8:	898d883a 	add	r6,r17,r6
  2104dc:	3463803a 	cmpltu	r17,r6,r17
  2104e0:	1947883a 	add	r3,r3,r5
  2104e4:	88c7883a 	add	r3,r17,r3
  2104e8:	3023883a 	mov	r17,r6
  2104ec:	003fd306 	br	21043c <_gp+0xffdfe828>
  2104f0:	1000541e 	bne	r2,zero,210644 <__subdf3+0x488>
  2104f4:	80800044 	addi	r2,r16,1
  2104f8:	1081ffcc 	andi	r2,r2,2047
  2104fc:	01000044 	movi	r4,1
  210500:	2080a20e 	bge	r4,r2,21078c <__subdf3+0x5d0>
  210504:	8989c83a 	sub	r4,r17,r6
  210508:	8905803a 	cmpltu	r2,r17,r4
  21050c:	1967c83a 	sub	r19,r3,r5
  210510:	98a7c83a 	sub	r19,r19,r2
  210514:	9880202c 	andhi	r2,r19,128
  210518:	10006326 	beq	r2,zero,2106a8 <__subdf3+0x4ec>
  21051c:	3463c83a 	sub	r17,r6,r17
  210520:	28c7c83a 	sub	r3,r5,r3
  210524:	344d803a 	cmpltu	r6,r6,r17
  210528:	19a7c83a 	sub	r19,r3,r6
  21052c:	3825883a 	mov	r18,r7
  210530:	983f861e 	bne	r19,zero,21034c <_gp+0xffdfe738>
  210534:	8809883a 	mov	r4,r17
  210538:	0203dd00 	call	203dd0 <__clzsi2>
  21053c:	10800804 	addi	r2,r2,32
  210540:	113ffe04 	addi	r4,r2,-8
  210544:	00c007c4 	movi	r3,31
  210548:	193f850e 	bge	r3,r4,210360 <_gp+0xffdfe74c>
  21054c:	10bff604 	addi	r2,r2,-40
  210550:	8884983a 	sll	r2,r17,r2
  210554:	0023883a 	mov	r17,zero
  210558:	243f880e 	bge	r4,r16,21037c <_gp+0xffdfe768>
  21055c:	00ffe034 	movhi	r3,65408
  210560:	18ffffc4 	addi	r3,r3,-1
  210564:	8121c83a 	sub	r16,r16,r4
  210568:	10c6703a 	and	r3,r2,r3
  21056c:	003f3406 	br	210240 <_gp+0xffdfe62c>
  210570:	9100004c 	andi	r4,r18,1
  210574:	000b883a 	mov	r5,zero
  210578:	0005883a 	mov	r2,zero
  21057c:	003f4806 	br	2102a0 <_gp+0xffdfe68c>
  210580:	298cb03a 	or	r6,r5,r6
  210584:	300cc03a 	cmpne	r6,r6,zero
  210588:	0005883a 	mov	r2,zero
  21058c:	003f6406 	br	210320 <_gp+0xffdfe70c>
  210590:	10009a1e 	bne	r2,zero,2107fc <__subdf3+0x640>
  210594:	82400044 	addi	r9,r16,1
  210598:	4881ffcc 	andi	r2,r9,2047
  21059c:	02800044 	movi	r10,1
  2105a0:	5080670e 	bge	r10,r2,210740 <__subdf3+0x584>
  2105a4:	0081ffc4 	movi	r2,2047
  2105a8:	4880af26 	beq	r9,r2,210868 <__subdf3+0x6ac>
  2105ac:	898d883a 	add	r6,r17,r6
  2105b0:	1945883a 	add	r2,r3,r5
  2105b4:	3447803a 	cmpltu	r3,r6,r17
  2105b8:	1887883a 	add	r3,r3,r2
  2105bc:	182297fa 	slli	r17,r3,31
  2105c0:	300cd07a 	srli	r6,r6,1
  2105c4:	1806d07a 	srli	r3,r3,1
  2105c8:	4821883a 	mov	r16,r9
  2105cc:	89a2b03a 	or	r17,r17,r6
  2105d0:	003f1b06 	br	210240 <_gp+0xffdfe62c>
  2105d4:	0101ffc4 	movi	r4,2047
  2105d8:	813f441e 	bne	r16,r4,2102ec <_gp+0xffdfe6d8>
  2105dc:	003f1806 	br	210240 <_gp+0xffdfe62c>
  2105e0:	843ff844 	addi	r16,r16,-31
  2105e4:	01400804 	movi	r5,32
  2105e8:	1408d83a 	srl	r4,r2,r16
  2105ec:	19405026 	beq	r3,r5,210730 <__subdf3+0x574>
  2105f0:	01401004 	movi	r5,64
  2105f4:	28c7c83a 	sub	r3,r5,r3
  2105f8:	10c4983a 	sll	r2,r2,r3
  2105fc:	88a2b03a 	or	r17,r17,r2
  210600:	8822c03a 	cmpne	r17,r17,zero
  210604:	2462b03a 	or	r17,r4,r17
  210608:	0007883a 	mov	r3,zero
  21060c:	0021883a 	mov	r16,zero
  210610:	003f6d06 	br	2103c8 <_gp+0xffdfe7b4>
  210614:	11fff804 	addi	r7,r2,-32
  210618:	01000804 	movi	r4,32
  21061c:	29ced83a 	srl	r7,r5,r7
  210620:	11004526 	beq	r2,r4,210738 <__subdf3+0x57c>
  210624:	01001004 	movi	r4,64
  210628:	2089c83a 	sub	r4,r4,r2
  21062c:	2904983a 	sll	r2,r5,r4
  210630:	118cb03a 	or	r6,r2,r6
  210634:	300cc03a 	cmpne	r6,r6,zero
  210638:	398cb03a 	or	r6,r7,r6
  21063c:	0005883a 	mov	r2,zero
  210640:	003f3706 	br	210320 <_gp+0xffdfe70c>
  210644:	80002a26 	beq	r16,zero,2106f0 <__subdf3+0x534>
  210648:	0101ffc4 	movi	r4,2047
  21064c:	49006626 	beq	r9,r4,2107e8 <__subdf3+0x62c>
  210650:	0085c83a 	sub	r2,zero,r2
  210654:	18c02034 	orhi	r3,r3,128
  210658:	01000e04 	movi	r4,56
  21065c:	20807e16 	blt	r4,r2,210858 <__subdf3+0x69c>
  210660:	010007c4 	movi	r4,31
  210664:	2080e716 	blt	r4,r2,210a04 <__subdf3+0x848>
  210668:	01000804 	movi	r4,32
  21066c:	2089c83a 	sub	r4,r4,r2
  210670:	1914983a 	sll	r10,r3,r4
  210674:	8890d83a 	srl	r8,r17,r2
  210678:	8908983a 	sll	r4,r17,r4
  21067c:	1884d83a 	srl	r2,r3,r2
  210680:	5222b03a 	or	r17,r10,r8
  210684:	2006c03a 	cmpne	r3,r4,zero
  210688:	88e2b03a 	or	r17,r17,r3
  21068c:	3463c83a 	sub	r17,r6,r17
  210690:	2885c83a 	sub	r2,r5,r2
  210694:	344d803a 	cmpltu	r6,r6,r17
  210698:	1187c83a 	sub	r3,r2,r6
  21069c:	4821883a 	mov	r16,r9
  2106a0:	3825883a 	mov	r18,r7
  2106a4:	003f2306 	br	210334 <_gp+0xffdfe720>
  2106a8:	24d0b03a 	or	r8,r4,r19
  2106ac:	40001b1e 	bne	r8,zero,21071c <__subdf3+0x560>
  2106b0:	0005883a 	mov	r2,zero
  2106b4:	0009883a 	mov	r4,zero
  2106b8:	0021883a 	mov	r16,zero
  2106bc:	003f4906 	br	2103e4 <_gp+0xffdfe7d0>
  2106c0:	010007c4 	movi	r4,31
  2106c4:	20803a16 	blt	r4,r2,2107b0 <__subdf3+0x5f4>
  2106c8:	01000804 	movi	r4,32
  2106cc:	2089c83a 	sub	r4,r4,r2
  2106d0:	2912983a 	sll	r9,r5,r4
  2106d4:	3090d83a 	srl	r8,r6,r2
  2106d8:	3108983a 	sll	r4,r6,r4
  2106dc:	2884d83a 	srl	r2,r5,r2
  2106e0:	4a12b03a 	or	r9,r9,r8
  2106e4:	2008c03a 	cmpne	r4,r4,zero
  2106e8:	4912b03a 	or	r9,r9,r4
  2106ec:	003f4e06 	br	210428 <_gp+0xffdfe814>
  2106f0:	1c48b03a 	or	r4,r3,r17
  2106f4:	20003c26 	beq	r4,zero,2107e8 <__subdf3+0x62c>
  2106f8:	0084303a 	nor	r2,zero,r2
  2106fc:	1000381e 	bne	r2,zero,2107e0 <__subdf3+0x624>
  210700:	3463c83a 	sub	r17,r6,r17
  210704:	28c5c83a 	sub	r2,r5,r3
  210708:	344d803a 	cmpltu	r6,r6,r17
  21070c:	1187c83a 	sub	r3,r2,r6
  210710:	4821883a 	mov	r16,r9
  210714:	3825883a 	mov	r18,r7
  210718:	003f0606 	br	210334 <_gp+0xffdfe720>
  21071c:	2023883a 	mov	r17,r4
  210720:	003f0906 	br	210348 <_gp+0xffdfe734>
  210724:	0101ffc4 	movi	r4,2047
  210728:	813f3a1e 	bne	r16,r4,210414 <_gp+0xffdfe800>
  21072c:	003ec406 	br	210240 <_gp+0xffdfe62c>
  210730:	0005883a 	mov	r2,zero
  210734:	003fb106 	br	2105fc <_gp+0xffdfe9e8>
  210738:	0005883a 	mov	r2,zero
  21073c:	003fbc06 	br	210630 <_gp+0xffdfea1c>
  210740:	1c44b03a 	or	r2,r3,r17
  210744:	80008e1e 	bne	r16,zero,210980 <__subdf3+0x7c4>
  210748:	1000c826 	beq	r2,zero,210a6c <__subdf3+0x8b0>
  21074c:	2984b03a 	or	r2,r5,r6
  210750:	103ebb26 	beq	r2,zero,210240 <_gp+0xffdfe62c>
  210754:	8989883a 	add	r4,r17,r6
  210758:	1945883a 	add	r2,r3,r5
  21075c:	2447803a 	cmpltu	r3,r4,r17
  210760:	1887883a 	add	r3,r3,r2
  210764:	1880202c 	andhi	r2,r3,128
  210768:	2023883a 	mov	r17,r4
  21076c:	103f1626 	beq	r2,zero,2103c8 <_gp+0xffdfe7b4>
  210770:	00bfe034 	movhi	r2,65408
  210774:	10bfffc4 	addi	r2,r2,-1
  210778:	5021883a 	mov	r16,r10
  21077c:	1886703a 	and	r3,r3,r2
  210780:	003eaf06 	br	210240 <_gp+0xffdfe62c>
  210784:	3825883a 	mov	r18,r7
  210788:	003f0f06 	br	2103c8 <_gp+0xffdfe7b4>
  21078c:	1c44b03a 	or	r2,r3,r17
  210790:	8000251e 	bne	r16,zero,210828 <__subdf3+0x66c>
  210794:	1000661e 	bne	r2,zero,210930 <__subdf3+0x774>
  210798:	2990b03a 	or	r8,r5,r6
  21079c:	40009626 	beq	r8,zero,2109f8 <__subdf3+0x83c>
  2107a0:	2807883a 	mov	r3,r5
  2107a4:	3023883a 	mov	r17,r6
  2107a8:	3825883a 	mov	r18,r7
  2107ac:	003ea406 	br	210240 <_gp+0xffdfe62c>
  2107b0:	127ff804 	addi	r9,r2,-32
  2107b4:	01000804 	movi	r4,32
  2107b8:	2a52d83a 	srl	r9,r5,r9
  2107bc:	11008c26 	beq	r2,r4,2109f0 <__subdf3+0x834>
  2107c0:	01001004 	movi	r4,64
  2107c4:	2085c83a 	sub	r2,r4,r2
  2107c8:	2884983a 	sll	r2,r5,r2
  2107cc:	118cb03a 	or	r6,r2,r6
  2107d0:	300cc03a 	cmpne	r6,r6,zero
  2107d4:	4992b03a 	or	r9,r9,r6
  2107d8:	0005883a 	mov	r2,zero
  2107dc:	003f1206 	br	210428 <_gp+0xffdfe814>
  2107e0:	0101ffc4 	movi	r4,2047
  2107e4:	493f9c1e 	bne	r9,r4,210658 <_gp+0xffdfea44>
  2107e8:	2807883a 	mov	r3,r5
  2107ec:	3023883a 	mov	r17,r6
  2107f0:	4821883a 	mov	r16,r9
  2107f4:	3825883a 	mov	r18,r7
  2107f8:	003e9106 	br	210240 <_gp+0xffdfe62c>
  2107fc:	80001f1e 	bne	r16,zero,21087c <__subdf3+0x6c0>
  210800:	1c48b03a 	or	r4,r3,r17
  210804:	20005a26 	beq	r4,zero,210970 <__subdf3+0x7b4>
  210808:	0084303a 	nor	r2,zero,r2
  21080c:	1000561e 	bne	r2,zero,210968 <__subdf3+0x7ac>
  210810:	89a3883a 	add	r17,r17,r6
  210814:	1945883a 	add	r2,r3,r5
  210818:	898d803a 	cmpltu	r6,r17,r6
  21081c:	3087883a 	add	r3,r6,r2
  210820:	4821883a 	mov	r16,r9
  210824:	003f0506 	br	21043c <_gp+0xffdfe828>
  210828:	10002b1e 	bne	r2,zero,2108d8 <__subdf3+0x71c>
  21082c:	2984b03a 	or	r2,r5,r6
  210830:	10008026 	beq	r2,zero,210a34 <__subdf3+0x878>
  210834:	2807883a 	mov	r3,r5
  210838:	3023883a 	mov	r17,r6
  21083c:	3825883a 	mov	r18,r7
  210840:	0401ffc4 	movi	r16,2047
  210844:	003e7e06 	br	210240 <_gp+0xffdfe62c>
  210848:	3809883a 	mov	r4,r7
  21084c:	0011883a 	mov	r8,zero
  210850:	0005883a 	mov	r2,zero
  210854:	003ee306 	br	2103e4 <_gp+0xffdfe7d0>
  210858:	1c62b03a 	or	r17,r3,r17
  21085c:	8822c03a 	cmpne	r17,r17,zero
  210860:	0005883a 	mov	r2,zero
  210864:	003f8906 	br	21068c <_gp+0xffdfea78>
  210868:	3809883a 	mov	r4,r7
  21086c:	4821883a 	mov	r16,r9
  210870:	0011883a 	mov	r8,zero
  210874:	0005883a 	mov	r2,zero
  210878:	003eda06 	br	2103e4 <_gp+0xffdfe7d0>
  21087c:	0101ffc4 	movi	r4,2047
  210880:	49003b26 	beq	r9,r4,210970 <__subdf3+0x7b4>
  210884:	0085c83a 	sub	r2,zero,r2
  210888:	18c02034 	orhi	r3,r3,128
  21088c:	01000e04 	movi	r4,56
  210890:	20806e16 	blt	r4,r2,210a4c <__subdf3+0x890>
  210894:	010007c4 	movi	r4,31
  210898:	20807716 	blt	r4,r2,210a78 <__subdf3+0x8bc>
  21089c:	01000804 	movi	r4,32
  2108a0:	2089c83a 	sub	r4,r4,r2
  2108a4:	1914983a 	sll	r10,r3,r4
  2108a8:	8890d83a 	srl	r8,r17,r2
  2108ac:	8908983a 	sll	r4,r17,r4
  2108b0:	1884d83a 	srl	r2,r3,r2
  2108b4:	5222b03a 	or	r17,r10,r8
  2108b8:	2006c03a 	cmpne	r3,r4,zero
  2108bc:	88e2b03a 	or	r17,r17,r3
  2108c0:	89a3883a 	add	r17,r17,r6
  2108c4:	1145883a 	add	r2,r2,r5
  2108c8:	898d803a 	cmpltu	r6,r17,r6
  2108cc:	3087883a 	add	r3,r6,r2
  2108d0:	4821883a 	mov	r16,r9
  2108d4:	003ed906 	br	21043c <_gp+0xffdfe828>
  2108d8:	2984b03a 	or	r2,r5,r6
  2108dc:	10004226 	beq	r2,zero,2109e8 <__subdf3+0x82c>
  2108e0:	1808d0fa 	srli	r4,r3,3
  2108e4:	8822d0fa 	srli	r17,r17,3
  2108e8:	1806977a 	slli	r3,r3,29
  2108ec:	2080022c 	andhi	r2,r4,8
  2108f0:	1c62b03a 	or	r17,r3,r17
  2108f4:	10000826 	beq	r2,zero,210918 <__subdf3+0x75c>
  2108f8:	2812d0fa 	srli	r9,r5,3
  2108fc:	4880022c 	andhi	r2,r9,8
  210900:	1000051e 	bne	r2,zero,210918 <__subdf3+0x75c>
  210904:	300cd0fa 	srli	r6,r6,3
  210908:	2804977a 	slli	r2,r5,29
  21090c:	4809883a 	mov	r4,r9
  210910:	3825883a 	mov	r18,r7
  210914:	11a2b03a 	or	r17,r2,r6
  210918:	8806d77a 	srli	r3,r17,29
  21091c:	200890fa 	slli	r4,r4,3
  210920:	882290fa 	slli	r17,r17,3
  210924:	0401ffc4 	movi	r16,2047
  210928:	1906b03a 	or	r3,r3,r4
  21092c:	003e4406 	br	210240 <_gp+0xffdfe62c>
  210930:	2984b03a 	or	r2,r5,r6
  210934:	103e4226 	beq	r2,zero,210240 <_gp+0xffdfe62c>
  210938:	8989c83a 	sub	r4,r17,r6
  21093c:	8911803a 	cmpltu	r8,r17,r4
  210940:	1945c83a 	sub	r2,r3,r5
  210944:	1205c83a 	sub	r2,r2,r8
  210948:	1200202c 	andhi	r8,r2,128
  21094c:	403e9a26 	beq	r8,zero,2103b8 <_gp+0xffdfe7a4>
  210950:	3463c83a 	sub	r17,r6,r17
  210954:	28c5c83a 	sub	r2,r5,r3
  210958:	344d803a 	cmpltu	r6,r6,r17
  21095c:	1187c83a 	sub	r3,r2,r6
  210960:	3825883a 	mov	r18,r7
  210964:	003e3606 	br	210240 <_gp+0xffdfe62c>
  210968:	0101ffc4 	movi	r4,2047
  21096c:	493fc71e 	bne	r9,r4,21088c <_gp+0xffdfec78>
  210970:	2807883a 	mov	r3,r5
  210974:	3023883a 	mov	r17,r6
  210978:	4821883a 	mov	r16,r9
  21097c:	003e3006 	br	210240 <_gp+0xffdfe62c>
  210980:	10003626 	beq	r2,zero,210a5c <__subdf3+0x8a0>
  210984:	2984b03a 	or	r2,r5,r6
  210988:	10001726 	beq	r2,zero,2109e8 <__subdf3+0x82c>
  21098c:	1808d0fa 	srli	r4,r3,3
  210990:	8822d0fa 	srli	r17,r17,3
  210994:	1806977a 	slli	r3,r3,29
  210998:	2080022c 	andhi	r2,r4,8
  21099c:	1c62b03a 	or	r17,r3,r17
  2109a0:	10000726 	beq	r2,zero,2109c0 <__subdf3+0x804>
  2109a4:	2812d0fa 	srli	r9,r5,3
  2109a8:	4880022c 	andhi	r2,r9,8
  2109ac:	1000041e 	bne	r2,zero,2109c0 <__subdf3+0x804>
  2109b0:	300cd0fa 	srli	r6,r6,3
  2109b4:	2804977a 	slli	r2,r5,29
  2109b8:	4809883a 	mov	r4,r9
  2109bc:	11a2b03a 	or	r17,r2,r6
  2109c0:	8806d77a 	srli	r3,r17,29
  2109c4:	200890fa 	slli	r4,r4,3
  2109c8:	882290fa 	slli	r17,r17,3
  2109cc:	3825883a 	mov	r18,r7
  2109d0:	1906b03a 	or	r3,r3,r4
  2109d4:	0401ffc4 	movi	r16,2047
  2109d8:	003e1906 	br	210240 <_gp+0xffdfe62c>
  2109dc:	000b883a 	mov	r5,zero
  2109e0:	0005883a 	mov	r2,zero
  2109e4:	003e2e06 	br	2102a0 <_gp+0xffdfe68c>
  2109e8:	0401ffc4 	movi	r16,2047
  2109ec:	003e1406 	br	210240 <_gp+0xffdfe62c>
  2109f0:	0005883a 	mov	r2,zero
  2109f4:	003f7506 	br	2107cc <_gp+0xffdfebb8>
  2109f8:	0005883a 	mov	r2,zero
  2109fc:	0009883a 	mov	r4,zero
  210a00:	003e7806 	br	2103e4 <_gp+0xffdfe7d0>
  210a04:	123ff804 	addi	r8,r2,-32
  210a08:	01000804 	movi	r4,32
  210a0c:	1a10d83a 	srl	r8,r3,r8
  210a10:	11002526 	beq	r2,r4,210aa8 <__subdf3+0x8ec>
  210a14:	01001004 	movi	r4,64
  210a18:	2085c83a 	sub	r2,r4,r2
  210a1c:	1884983a 	sll	r2,r3,r2
  210a20:	1444b03a 	or	r2,r2,r17
  210a24:	1004c03a 	cmpne	r2,r2,zero
  210a28:	40a2b03a 	or	r17,r8,r2
  210a2c:	0005883a 	mov	r2,zero
  210a30:	003f1606 	br	21068c <_gp+0xffdfea78>
  210a34:	02000434 	movhi	r8,16
  210a38:	0009883a 	mov	r4,zero
  210a3c:	423fffc4 	addi	r8,r8,-1
  210a40:	00bfffc4 	movi	r2,-1
  210a44:	0401ffc4 	movi	r16,2047
  210a48:	003e6606 	br	2103e4 <_gp+0xffdfe7d0>
  210a4c:	1c62b03a 	or	r17,r3,r17
  210a50:	8822c03a 	cmpne	r17,r17,zero
  210a54:	0005883a 	mov	r2,zero
  210a58:	003f9906 	br	2108c0 <_gp+0xffdfecac>
  210a5c:	2807883a 	mov	r3,r5
  210a60:	3023883a 	mov	r17,r6
  210a64:	0401ffc4 	movi	r16,2047
  210a68:	003df506 	br	210240 <_gp+0xffdfe62c>
  210a6c:	2807883a 	mov	r3,r5
  210a70:	3023883a 	mov	r17,r6
  210a74:	003df206 	br	210240 <_gp+0xffdfe62c>
  210a78:	123ff804 	addi	r8,r2,-32
  210a7c:	01000804 	movi	r4,32
  210a80:	1a10d83a 	srl	r8,r3,r8
  210a84:	11000a26 	beq	r2,r4,210ab0 <__subdf3+0x8f4>
  210a88:	01001004 	movi	r4,64
  210a8c:	2085c83a 	sub	r2,r4,r2
  210a90:	1884983a 	sll	r2,r3,r2
  210a94:	1444b03a 	or	r2,r2,r17
  210a98:	1004c03a 	cmpne	r2,r2,zero
  210a9c:	40a2b03a 	or	r17,r8,r2
  210aa0:	0005883a 	mov	r2,zero
  210aa4:	003f8606 	br	2108c0 <_gp+0xffdfecac>
  210aa8:	0005883a 	mov	r2,zero
  210aac:	003fdc06 	br	210a20 <_gp+0xffdfee0c>
  210ab0:	0005883a 	mov	r2,zero
  210ab4:	003ff706 	br	210a94 <_gp+0xffdfee80>

00210ab8 <__fixdfsi>:
  210ab8:	280cd53a 	srli	r6,r5,20
  210abc:	00c00434 	movhi	r3,16
  210ac0:	18ffffc4 	addi	r3,r3,-1
  210ac4:	3181ffcc 	andi	r6,r6,2047
  210ac8:	01c0ff84 	movi	r7,1022
  210acc:	28c6703a 	and	r3,r5,r3
  210ad0:	280ad7fa 	srli	r5,r5,31
  210ad4:	3980120e 	bge	r7,r6,210b20 <__fixdfsi+0x68>
  210ad8:	00810744 	movi	r2,1053
  210adc:	11800c16 	blt	r2,r6,210b10 <__fixdfsi+0x58>
  210ae0:	00810cc4 	movi	r2,1075
  210ae4:	1185c83a 	sub	r2,r2,r6
  210ae8:	01c007c4 	movi	r7,31
  210aec:	18c00434 	orhi	r3,r3,16
  210af0:	38800d16 	blt	r7,r2,210b28 <__fixdfsi+0x70>
  210af4:	31befb44 	addi	r6,r6,-1043
  210af8:	2084d83a 	srl	r2,r4,r2
  210afc:	1986983a 	sll	r3,r3,r6
  210b00:	1884b03a 	or	r2,r3,r2
  210b04:	28000726 	beq	r5,zero,210b24 <__fixdfsi+0x6c>
  210b08:	0085c83a 	sub	r2,zero,r2
  210b0c:	f800283a 	ret
  210b10:	00a00034 	movhi	r2,32768
  210b14:	10bfffc4 	addi	r2,r2,-1
  210b18:	2885883a 	add	r2,r5,r2
  210b1c:	f800283a 	ret
  210b20:	0005883a 	mov	r2,zero
  210b24:	f800283a 	ret
  210b28:	008104c4 	movi	r2,1043
  210b2c:	1185c83a 	sub	r2,r2,r6
  210b30:	1884d83a 	srl	r2,r3,r2
  210b34:	003ff306 	br	210b04 <_gp+0xffdfeef0>

00210b38 <__floatsidf>:
  210b38:	defffd04 	addi	sp,sp,-12
  210b3c:	dfc00215 	stw	ra,8(sp)
  210b40:	dc400115 	stw	r17,4(sp)
  210b44:	dc000015 	stw	r16,0(sp)
  210b48:	20002b26 	beq	r4,zero,210bf8 <__floatsidf+0xc0>
  210b4c:	2023883a 	mov	r17,r4
  210b50:	2020d7fa 	srli	r16,r4,31
  210b54:	20002d16 	blt	r4,zero,210c0c <__floatsidf+0xd4>
  210b58:	8809883a 	mov	r4,r17
  210b5c:	0203dd00 	call	203dd0 <__clzsi2>
  210b60:	01410784 	movi	r5,1054
  210b64:	288bc83a 	sub	r5,r5,r2
  210b68:	01010cc4 	movi	r4,1075
  210b6c:	2149c83a 	sub	r4,r4,r5
  210b70:	00c007c4 	movi	r3,31
  210b74:	1900160e 	bge	r3,r4,210bd0 <__floatsidf+0x98>
  210b78:	00c104c4 	movi	r3,1043
  210b7c:	1947c83a 	sub	r3,r3,r5
  210b80:	88c6983a 	sll	r3,r17,r3
  210b84:	00800434 	movhi	r2,16
  210b88:	10bfffc4 	addi	r2,r2,-1
  210b8c:	1886703a 	and	r3,r3,r2
  210b90:	2941ffcc 	andi	r5,r5,2047
  210b94:	800d883a 	mov	r6,r16
  210b98:	0005883a 	mov	r2,zero
  210b9c:	280a953a 	slli	r5,r5,20
  210ba0:	31803fcc 	andi	r6,r6,255
  210ba4:	01000434 	movhi	r4,16
  210ba8:	300c97fa 	slli	r6,r6,31
  210bac:	213fffc4 	addi	r4,r4,-1
  210bb0:	1906703a 	and	r3,r3,r4
  210bb4:	1946b03a 	or	r3,r3,r5
  210bb8:	1986b03a 	or	r3,r3,r6
  210bbc:	dfc00217 	ldw	ra,8(sp)
  210bc0:	dc400117 	ldw	r17,4(sp)
  210bc4:	dc000017 	ldw	r16,0(sp)
  210bc8:	dec00304 	addi	sp,sp,12
  210bcc:	f800283a 	ret
  210bd0:	00c002c4 	movi	r3,11
  210bd4:	1887c83a 	sub	r3,r3,r2
  210bd8:	88c6d83a 	srl	r3,r17,r3
  210bdc:	8904983a 	sll	r2,r17,r4
  210be0:	01000434 	movhi	r4,16
  210be4:	213fffc4 	addi	r4,r4,-1
  210be8:	2941ffcc 	andi	r5,r5,2047
  210bec:	1906703a 	and	r3,r3,r4
  210bf0:	800d883a 	mov	r6,r16
  210bf4:	003fe906 	br	210b9c <_gp+0xffdfef88>
  210bf8:	000d883a 	mov	r6,zero
  210bfc:	000b883a 	mov	r5,zero
  210c00:	0007883a 	mov	r3,zero
  210c04:	0005883a 	mov	r2,zero
  210c08:	003fe406 	br	210b9c <_gp+0xffdfef88>
  210c0c:	0123c83a 	sub	r17,zero,r4
  210c10:	003fd106 	br	210b58 <_gp+0xffdfef44>

00210c14 <__floatunsidf>:
  210c14:	defffe04 	addi	sp,sp,-8
  210c18:	dc000015 	stw	r16,0(sp)
  210c1c:	dfc00115 	stw	ra,4(sp)
  210c20:	2021883a 	mov	r16,r4
  210c24:	20002226 	beq	r4,zero,210cb0 <__floatunsidf+0x9c>
  210c28:	0203dd00 	call	203dd0 <__clzsi2>
  210c2c:	01010784 	movi	r4,1054
  210c30:	2089c83a 	sub	r4,r4,r2
  210c34:	01810cc4 	movi	r6,1075
  210c38:	310dc83a 	sub	r6,r6,r4
  210c3c:	00c007c4 	movi	r3,31
  210c40:	1980120e 	bge	r3,r6,210c8c <__floatunsidf+0x78>
  210c44:	00c104c4 	movi	r3,1043
  210c48:	1907c83a 	sub	r3,r3,r4
  210c4c:	80ca983a 	sll	r5,r16,r3
  210c50:	00800434 	movhi	r2,16
  210c54:	10bfffc4 	addi	r2,r2,-1
  210c58:	2101ffcc 	andi	r4,r4,2047
  210c5c:	0021883a 	mov	r16,zero
  210c60:	288a703a 	and	r5,r5,r2
  210c64:	2008953a 	slli	r4,r4,20
  210c68:	00c00434 	movhi	r3,16
  210c6c:	18ffffc4 	addi	r3,r3,-1
  210c70:	28c6703a 	and	r3,r5,r3
  210c74:	8005883a 	mov	r2,r16
  210c78:	1906b03a 	or	r3,r3,r4
  210c7c:	dfc00117 	ldw	ra,4(sp)
  210c80:	dc000017 	ldw	r16,0(sp)
  210c84:	dec00204 	addi	sp,sp,8
  210c88:	f800283a 	ret
  210c8c:	00c002c4 	movi	r3,11
  210c90:	188bc83a 	sub	r5,r3,r2
  210c94:	814ad83a 	srl	r5,r16,r5
  210c98:	00c00434 	movhi	r3,16
  210c9c:	18ffffc4 	addi	r3,r3,-1
  210ca0:	81a0983a 	sll	r16,r16,r6
  210ca4:	2101ffcc 	andi	r4,r4,2047
  210ca8:	28ca703a 	and	r5,r5,r3
  210cac:	003fed06 	br	210c64 <_gp+0xffdff050>
  210cb0:	0009883a 	mov	r4,zero
  210cb4:	000b883a 	mov	r5,zero
  210cb8:	003fea06 	br	210c64 <_gp+0xffdff050>

00210cbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210cbc:	defffe04 	addi	sp,sp,-8
  210cc0:	dfc00115 	stw	ra,4(sp)
  210cc4:	df000015 	stw	fp,0(sp)
  210cc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210ccc:	d0a00f17 	ldw	r2,-32708(gp)
  210cd0:	10000326 	beq	r2,zero,210ce0 <alt_get_errno+0x24>
  210cd4:	d0a00f17 	ldw	r2,-32708(gp)
  210cd8:	103ee83a 	callr	r2
  210cdc:	00000106 	br	210ce4 <alt_get_errno+0x28>
  210ce0:	d0a02604 	addi	r2,gp,-32616
}
  210ce4:	e037883a 	mov	sp,fp
  210ce8:	dfc00117 	ldw	ra,4(sp)
  210cec:	df000017 	ldw	fp,0(sp)
  210cf0:	dec00204 	addi	sp,sp,8
  210cf4:	f800283a 	ret

00210cf8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  210cf8:	defffb04 	addi	sp,sp,-20
  210cfc:	dfc00415 	stw	ra,16(sp)
  210d00:	df000315 	stw	fp,12(sp)
  210d04:	df000304 	addi	fp,sp,12
  210d08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  210d0c:	e0bfff17 	ldw	r2,-4(fp)
  210d10:	10000816 	blt	r2,zero,210d34 <close+0x3c>
  210d14:	01400304 	movi	r5,12
  210d18:	e13fff17 	ldw	r4,-4(fp)
  210d1c:	02032780 	call	203278 <__mulsi3>
  210d20:	1007883a 	mov	r3,r2
  210d24:	00801074 	movhi	r2,65
  210d28:	10a23f04 	addi	r2,r2,-30468
  210d2c:	1885883a 	add	r2,r3,r2
  210d30:	00000106 	br	210d38 <close+0x40>
  210d34:	0005883a 	mov	r2,zero
  210d38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  210d3c:	e0bffd17 	ldw	r2,-12(fp)
  210d40:	10001926 	beq	r2,zero,210da8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  210d44:	e0bffd17 	ldw	r2,-12(fp)
  210d48:	10800017 	ldw	r2,0(r2)
  210d4c:	10800417 	ldw	r2,16(r2)
  210d50:	10000626 	beq	r2,zero,210d6c <close+0x74>
  210d54:	e0bffd17 	ldw	r2,-12(fp)
  210d58:	10800017 	ldw	r2,0(r2)
  210d5c:	10800417 	ldw	r2,16(r2)
  210d60:	e13ffd17 	ldw	r4,-12(fp)
  210d64:	103ee83a 	callr	r2
  210d68:	00000106 	br	210d70 <close+0x78>
  210d6c:	0005883a 	mov	r2,zero
  210d70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  210d74:	e13fff17 	ldw	r4,-4(fp)
  210d78:	02113e00 	call	2113e0 <alt_release_fd>
    if (rval < 0)
  210d7c:	e0bffe17 	ldw	r2,-8(fp)
  210d80:	1000070e 	bge	r2,zero,210da0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  210d84:	0210cbc0 	call	210cbc <alt_get_errno>
  210d88:	1007883a 	mov	r3,r2
  210d8c:	e0bffe17 	ldw	r2,-8(fp)
  210d90:	0085c83a 	sub	r2,zero,r2
  210d94:	18800015 	stw	r2,0(r3)
      return -1;
  210d98:	00bfffc4 	movi	r2,-1
  210d9c:	00000706 	br	210dbc <close+0xc4>
    }
    return 0;
  210da0:	0005883a 	mov	r2,zero
  210da4:	00000506 	br	210dbc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210da8:	0210cbc0 	call	210cbc <alt_get_errno>
  210dac:	1007883a 	mov	r3,r2
  210db0:	00801444 	movi	r2,81
  210db4:	18800015 	stw	r2,0(r3)
    return -1;
  210db8:	00bfffc4 	movi	r2,-1
  }
}
  210dbc:	e037883a 	mov	sp,fp
  210dc0:	dfc00117 	ldw	ra,4(sp)
  210dc4:	df000017 	ldw	fp,0(sp)
  210dc8:	dec00204 	addi	sp,sp,8
  210dcc:	f800283a 	ret

00210dd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  210dd0:	defffc04 	addi	sp,sp,-16
  210dd4:	df000315 	stw	fp,12(sp)
  210dd8:	df000304 	addi	fp,sp,12
  210ddc:	e13ffd15 	stw	r4,-12(fp)
  210de0:	e17ffe15 	stw	r5,-8(fp)
  210de4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  210de8:	e0bfff17 	ldw	r2,-4(fp)
}
  210dec:	e037883a 	mov	sp,fp
  210df0:	df000017 	ldw	fp,0(sp)
  210df4:	dec00104 	addi	sp,sp,4
  210df8:	f800283a 	ret

00210dfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210dfc:	defffe04 	addi	sp,sp,-8
  210e00:	dfc00115 	stw	ra,4(sp)
  210e04:	df000015 	stw	fp,0(sp)
  210e08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210e0c:	d0a00f17 	ldw	r2,-32708(gp)
  210e10:	10000326 	beq	r2,zero,210e20 <alt_get_errno+0x24>
  210e14:	d0a00f17 	ldw	r2,-32708(gp)
  210e18:	103ee83a 	callr	r2
  210e1c:	00000106 	br	210e24 <alt_get_errno+0x28>
  210e20:	d0a02604 	addi	r2,gp,-32616
}
  210e24:	e037883a 	mov	sp,fp
  210e28:	dfc00117 	ldw	ra,4(sp)
  210e2c:	df000017 	ldw	fp,0(sp)
  210e30:	dec00204 	addi	sp,sp,8
  210e34:	f800283a 	ret

00210e38 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  210e38:	defffb04 	addi	sp,sp,-20
  210e3c:	dfc00415 	stw	ra,16(sp)
  210e40:	df000315 	stw	fp,12(sp)
  210e44:	df000304 	addi	fp,sp,12
  210e48:	e13ffe15 	stw	r4,-8(fp)
  210e4c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  210e50:	e0bffe17 	ldw	r2,-8(fp)
  210e54:	10000816 	blt	r2,zero,210e78 <fstat+0x40>
  210e58:	01400304 	movi	r5,12
  210e5c:	e13ffe17 	ldw	r4,-8(fp)
  210e60:	02032780 	call	203278 <__mulsi3>
  210e64:	1007883a 	mov	r3,r2
  210e68:	00801074 	movhi	r2,65
  210e6c:	10a23f04 	addi	r2,r2,-30468
  210e70:	1885883a 	add	r2,r3,r2
  210e74:	00000106 	br	210e7c <fstat+0x44>
  210e78:	0005883a 	mov	r2,zero
  210e7c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  210e80:	e0bffd17 	ldw	r2,-12(fp)
  210e84:	10001026 	beq	r2,zero,210ec8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  210e88:	e0bffd17 	ldw	r2,-12(fp)
  210e8c:	10800017 	ldw	r2,0(r2)
  210e90:	10800817 	ldw	r2,32(r2)
  210e94:	10000726 	beq	r2,zero,210eb4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  210e98:	e0bffd17 	ldw	r2,-12(fp)
  210e9c:	10800017 	ldw	r2,0(r2)
  210ea0:	10800817 	ldw	r2,32(r2)
  210ea4:	e17fff17 	ldw	r5,-4(fp)
  210ea8:	e13ffd17 	ldw	r4,-12(fp)
  210eac:	103ee83a 	callr	r2
  210eb0:	00000a06 	br	210edc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  210eb4:	e0bfff17 	ldw	r2,-4(fp)
  210eb8:	00c80004 	movi	r3,8192
  210ebc:	10c00115 	stw	r3,4(r2)
      return 0;
  210ec0:	0005883a 	mov	r2,zero
  210ec4:	00000506 	br	210edc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210ec8:	0210dfc0 	call	210dfc <alt_get_errno>
  210ecc:	1007883a 	mov	r3,r2
  210ed0:	00801444 	movi	r2,81
  210ed4:	18800015 	stw	r2,0(r3)
    return -1;
  210ed8:	00bfffc4 	movi	r2,-1
  }
}
  210edc:	e037883a 	mov	sp,fp
  210ee0:	dfc00117 	ldw	ra,4(sp)
  210ee4:	df000017 	ldw	fp,0(sp)
  210ee8:	dec00204 	addi	sp,sp,8
  210eec:	f800283a 	ret

00210ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  210ef0:	defffe04 	addi	sp,sp,-8
  210ef4:	dfc00115 	stw	ra,4(sp)
  210ef8:	df000015 	stw	fp,0(sp)
  210efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  210f00:	d0a00f17 	ldw	r2,-32708(gp)
  210f04:	10000326 	beq	r2,zero,210f14 <alt_get_errno+0x24>
  210f08:	d0a00f17 	ldw	r2,-32708(gp)
  210f0c:	103ee83a 	callr	r2
  210f10:	00000106 	br	210f18 <alt_get_errno+0x28>
  210f14:	d0a02604 	addi	r2,gp,-32616
}
  210f18:	e037883a 	mov	sp,fp
  210f1c:	dfc00117 	ldw	ra,4(sp)
  210f20:	df000017 	ldw	fp,0(sp)
  210f24:	dec00204 	addi	sp,sp,8
  210f28:	f800283a 	ret

00210f2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  210f2c:	deffed04 	addi	sp,sp,-76
  210f30:	dfc01215 	stw	ra,72(sp)
  210f34:	df001115 	stw	fp,68(sp)
  210f38:	df001104 	addi	fp,sp,68
  210f3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  210f40:	e0bfff17 	ldw	r2,-4(fp)
  210f44:	10000816 	blt	r2,zero,210f68 <isatty+0x3c>
  210f48:	01400304 	movi	r5,12
  210f4c:	e13fff17 	ldw	r4,-4(fp)
  210f50:	02032780 	call	203278 <__mulsi3>
  210f54:	1007883a 	mov	r3,r2
  210f58:	00801074 	movhi	r2,65
  210f5c:	10a23f04 	addi	r2,r2,-30468
  210f60:	1885883a 	add	r2,r3,r2
  210f64:	00000106 	br	210f6c <isatty+0x40>
  210f68:	0005883a 	mov	r2,zero
  210f6c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  210f70:	e0bfef17 	ldw	r2,-68(fp)
  210f74:	10000e26 	beq	r2,zero,210fb0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  210f78:	e0bfef17 	ldw	r2,-68(fp)
  210f7c:	10800017 	ldw	r2,0(r2)
  210f80:	10800817 	ldw	r2,32(r2)
  210f84:	1000021e 	bne	r2,zero,210f90 <isatty+0x64>
    {
      return 1;
  210f88:	00800044 	movi	r2,1
  210f8c:	00000d06 	br	210fc4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  210f90:	e0bff004 	addi	r2,fp,-64
  210f94:	100b883a 	mov	r5,r2
  210f98:	e13fff17 	ldw	r4,-4(fp)
  210f9c:	0210e380 	call	210e38 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  210fa0:	e0bff117 	ldw	r2,-60(fp)
  210fa4:	10880020 	cmpeqi	r2,r2,8192
  210fa8:	10803fcc 	andi	r2,r2,255
  210fac:	00000506 	br	210fc4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  210fb0:	0210ef00 	call	210ef0 <alt_get_errno>
  210fb4:	1007883a 	mov	r3,r2
  210fb8:	00801444 	movi	r2,81
  210fbc:	18800015 	stw	r2,0(r3)
    return 0;
  210fc0:	0005883a 	mov	r2,zero
  }
}
  210fc4:	e037883a 	mov	sp,fp
  210fc8:	dfc00117 	ldw	ra,4(sp)
  210fcc:	df000017 	ldw	fp,0(sp)
  210fd0:	dec00204 	addi	sp,sp,8
  210fd4:	f800283a 	ret

00210fd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  210fd8:	defffc04 	addi	sp,sp,-16
  210fdc:	df000315 	stw	fp,12(sp)
  210fe0:	df000304 	addi	fp,sp,12
  210fe4:	e13ffd15 	stw	r4,-12(fp)
  210fe8:	e17ffe15 	stw	r5,-8(fp)
  210fec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  210ff0:	e0fffe17 	ldw	r3,-8(fp)
  210ff4:	e0bffd17 	ldw	r2,-12(fp)
  210ff8:	18800c26 	beq	r3,r2,21102c <alt_load_section+0x54>
  {
    while( to != end )
  210ffc:	00000806 	br	211020 <alt_load_section+0x48>
    {
      *to++ = *from++;
  211000:	e0bffe17 	ldw	r2,-8(fp)
  211004:	10c00104 	addi	r3,r2,4
  211008:	e0fffe15 	stw	r3,-8(fp)
  21100c:	e0fffd17 	ldw	r3,-12(fp)
  211010:	19000104 	addi	r4,r3,4
  211014:	e13ffd15 	stw	r4,-12(fp)
  211018:	18c00017 	ldw	r3,0(r3)
  21101c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  211020:	e0fffe17 	ldw	r3,-8(fp)
  211024:	e0bfff17 	ldw	r2,-4(fp)
  211028:	18bff51e 	bne	r3,r2,211000 <_gp+0xffdff3ec>
    {
      *to++ = *from++;
    }
  }
}
  21102c:	0001883a 	nop
  211030:	e037883a 	mov	sp,fp
  211034:	df000017 	ldw	fp,0(sp)
  211038:	dec00104 	addi	sp,sp,4
  21103c:	f800283a 	ret

00211040 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  211040:	defffe04 	addi	sp,sp,-8
  211044:	dfc00115 	stw	ra,4(sp)
  211048:	df000015 	stw	fp,0(sp)
  21104c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  211050:	01801074 	movhi	r6,65
  211054:	31a71f04 	addi	r6,r6,-25476
  211058:	01401074 	movhi	r5,65
  21105c:	29600004 	addi	r5,r5,-32768
  211060:	01000874 	movhi	r4,33
  211064:	211b8b04 	addi	r4,r4,28204
  211068:	0210fd80 	call	210fd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  21106c:	01800834 	movhi	r6,32
  211070:	31808c04 	addi	r6,r6,560
  211074:	01400834 	movhi	r5,32
  211078:	29400804 	addi	r5,r5,32
  21107c:	01000834 	movhi	r4,32
  211080:	21000804 	addi	r4,r4,32
  211084:	0210fd80 	call	210fd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  211088:	01800874 	movhi	r6,33
  21108c:	319b8b04 	addi	r6,r6,28204
  211090:	01400874 	movhi	r5,33
  211094:	2959a904 	addi	r5,r5,26276
  211098:	01000874 	movhi	r4,33
  21109c:	2119a904 	addi	r4,r4,26276
  2110a0:	0210fd80 	call	210fd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  2110a4:	021546c0 	call	21546c <alt_dcache_flush_all>
  alt_icache_flush_all();
  2110a8:	02157780 	call	215778 <alt_icache_flush_all>
}
  2110ac:	0001883a 	nop
  2110b0:	e037883a 	mov	sp,fp
  2110b4:	dfc00117 	ldw	ra,4(sp)
  2110b8:	df000017 	ldw	fp,0(sp)
  2110bc:	dec00204 	addi	sp,sp,8
  2110c0:	f800283a 	ret

002110c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2110c4:	defffe04 	addi	sp,sp,-8
  2110c8:	dfc00115 	stw	ra,4(sp)
  2110cc:	df000015 	stw	fp,0(sp)
  2110d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2110d4:	d0a00f17 	ldw	r2,-32708(gp)
  2110d8:	10000326 	beq	r2,zero,2110e8 <alt_get_errno+0x24>
  2110dc:	d0a00f17 	ldw	r2,-32708(gp)
  2110e0:	103ee83a 	callr	r2
  2110e4:	00000106 	br	2110ec <alt_get_errno+0x28>
  2110e8:	d0a02604 	addi	r2,gp,-32616
}
  2110ec:	e037883a 	mov	sp,fp
  2110f0:	dfc00117 	ldw	ra,4(sp)
  2110f4:	df000017 	ldw	fp,0(sp)
  2110f8:	dec00204 	addi	sp,sp,8
  2110fc:	f800283a 	ret

00211100 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  211100:	defff904 	addi	sp,sp,-28
  211104:	dfc00615 	stw	ra,24(sp)
  211108:	df000515 	stw	fp,20(sp)
  21110c:	df000504 	addi	fp,sp,20
  211110:	e13ffd15 	stw	r4,-12(fp)
  211114:	e17ffe15 	stw	r5,-8(fp)
  211118:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  21111c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  211120:	e0bffd17 	ldw	r2,-12(fp)
  211124:	10000816 	blt	r2,zero,211148 <lseek+0x48>
  211128:	01400304 	movi	r5,12
  21112c:	e13ffd17 	ldw	r4,-12(fp)
  211130:	02032780 	call	203278 <__mulsi3>
  211134:	1007883a 	mov	r3,r2
  211138:	00801074 	movhi	r2,65
  21113c:	10a23f04 	addi	r2,r2,-30468
  211140:	1885883a 	add	r2,r3,r2
  211144:	00000106 	br	21114c <lseek+0x4c>
  211148:	0005883a 	mov	r2,zero
  21114c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  211150:	e0bffc17 	ldw	r2,-16(fp)
  211154:	10001026 	beq	r2,zero,211198 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  211158:	e0bffc17 	ldw	r2,-16(fp)
  21115c:	10800017 	ldw	r2,0(r2)
  211160:	10800717 	ldw	r2,28(r2)
  211164:	10000926 	beq	r2,zero,21118c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  211168:	e0bffc17 	ldw	r2,-16(fp)
  21116c:	10800017 	ldw	r2,0(r2)
  211170:	10800717 	ldw	r2,28(r2)
  211174:	e1bfff17 	ldw	r6,-4(fp)
  211178:	e17ffe17 	ldw	r5,-8(fp)
  21117c:	e13ffc17 	ldw	r4,-16(fp)
  211180:	103ee83a 	callr	r2
  211184:	e0bffb15 	stw	r2,-20(fp)
  211188:	00000506 	br	2111a0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  21118c:	00bfde84 	movi	r2,-134
  211190:	e0bffb15 	stw	r2,-20(fp)
  211194:	00000206 	br	2111a0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  211198:	00bfebc4 	movi	r2,-81
  21119c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  2111a0:	e0bffb17 	ldw	r2,-20(fp)
  2111a4:	1000070e 	bge	r2,zero,2111c4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  2111a8:	02110c40 	call	2110c4 <alt_get_errno>
  2111ac:	1007883a 	mov	r3,r2
  2111b0:	e0bffb17 	ldw	r2,-20(fp)
  2111b4:	0085c83a 	sub	r2,zero,r2
  2111b8:	18800015 	stw	r2,0(r3)
    rc = -1;
  2111bc:	00bfffc4 	movi	r2,-1
  2111c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  2111c4:	e0bffb17 	ldw	r2,-20(fp)
}
  2111c8:	e037883a 	mov	sp,fp
  2111cc:	dfc00117 	ldw	ra,4(sp)
  2111d0:	df000017 	ldw	fp,0(sp)
  2111d4:	dec00204 	addi	sp,sp,8
  2111d8:	f800283a 	ret

002111dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  2111dc:	defffd04 	addi	sp,sp,-12
  2111e0:	dfc00215 	stw	ra,8(sp)
  2111e4:	df000115 	stw	fp,4(sp)
  2111e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  2111ec:	0009883a 	mov	r4,zero
  2111f0:	02118580 	call	211858 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  2111f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  2111f8:	02118900 	call	211890 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  2111fc:	01800874 	movhi	r6,33
  211200:	319b6f04 	addi	r6,r6,28092
  211204:	01400874 	movhi	r5,33
  211208:	295b6f04 	addi	r5,r5,28092
  21120c:	01000874 	movhi	r4,33
  211210:	211b6f04 	addi	r4,r4,28092
  211214:	0215b1c0 	call	215b1c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  211218:	021556c0 	call	21556c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  21121c:	01000874 	movhi	r4,33
  211220:	21157304 	addi	r4,r4,21964
  211224:	02163100 	call	216310 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  211228:	d0a02717 	ldw	r2,-32612(gp)
  21122c:	d0e02817 	ldw	r3,-32608(gp)
  211230:	d1202917 	ldw	r4,-32604(gp)
  211234:	200d883a 	mov	r6,r4
  211238:	180b883a 	mov	r5,r3
  21123c:	1009883a 	mov	r4,r2
  211240:	020026c0 	call	20026c <main>
  211244:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  211248:	01000044 	movi	r4,1
  21124c:	0210cf80 	call	210cf8 <close>
  exit (result);
  211250:	e13fff17 	ldw	r4,-4(fp)
  211254:	02163240 	call	216324 <exit>

00211258 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  211258:	defffe04 	addi	sp,sp,-8
  21125c:	df000115 	stw	fp,4(sp)
  211260:	df000104 	addi	fp,sp,4
  211264:	e13fff15 	stw	r4,-4(fp)
}
  211268:	0001883a 	nop
  21126c:	e037883a 	mov	sp,fp
  211270:	df000017 	ldw	fp,0(sp)
  211274:	dec00104 	addi	sp,sp,4
  211278:	f800283a 	ret

0021127c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  21127c:	defffe04 	addi	sp,sp,-8
  211280:	df000115 	stw	fp,4(sp)
  211284:	df000104 	addi	fp,sp,4
  211288:	e13fff15 	stw	r4,-4(fp)
}
  21128c:	0001883a 	nop
  211290:	e037883a 	mov	sp,fp
  211294:	df000017 	ldw	fp,0(sp)
  211298:	dec00104 	addi	sp,sp,4
  21129c:	f800283a 	ret

002112a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2112a0:	defffe04 	addi	sp,sp,-8
  2112a4:	dfc00115 	stw	ra,4(sp)
  2112a8:	df000015 	stw	fp,0(sp)
  2112ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2112b0:	d0a00f17 	ldw	r2,-32708(gp)
  2112b4:	10000326 	beq	r2,zero,2112c4 <alt_get_errno+0x24>
  2112b8:	d0a00f17 	ldw	r2,-32708(gp)
  2112bc:	103ee83a 	callr	r2
  2112c0:	00000106 	br	2112c8 <alt_get_errno+0x28>
  2112c4:	d0a02604 	addi	r2,gp,-32616
}
  2112c8:	e037883a 	mov	sp,fp
  2112cc:	dfc00117 	ldw	ra,4(sp)
  2112d0:	df000017 	ldw	fp,0(sp)
  2112d4:	dec00204 	addi	sp,sp,8
  2112d8:	f800283a 	ret

002112dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  2112dc:	defff904 	addi	sp,sp,-28
  2112e0:	dfc00615 	stw	ra,24(sp)
  2112e4:	df000515 	stw	fp,20(sp)
  2112e8:	df000504 	addi	fp,sp,20
  2112ec:	e13ffd15 	stw	r4,-12(fp)
  2112f0:	e17ffe15 	stw	r5,-8(fp)
  2112f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2112f8:	e0bffd17 	ldw	r2,-12(fp)
  2112fc:	10000816 	blt	r2,zero,211320 <read+0x44>
  211300:	01400304 	movi	r5,12
  211304:	e13ffd17 	ldw	r4,-12(fp)
  211308:	02032780 	call	203278 <__mulsi3>
  21130c:	1007883a 	mov	r3,r2
  211310:	00801074 	movhi	r2,65
  211314:	10a23f04 	addi	r2,r2,-30468
  211318:	1885883a 	add	r2,r3,r2
  21131c:	00000106 	br	211324 <read+0x48>
  211320:	0005883a 	mov	r2,zero
  211324:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  211328:	e0bffb17 	ldw	r2,-20(fp)
  21132c:	10002226 	beq	r2,zero,2113b8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  211330:	e0bffb17 	ldw	r2,-20(fp)
  211334:	10800217 	ldw	r2,8(r2)
  211338:	108000cc 	andi	r2,r2,3
  21133c:	10800060 	cmpeqi	r2,r2,1
  211340:	1000181e 	bne	r2,zero,2113a4 <read+0xc8>
        (fd->dev->read))
  211344:	e0bffb17 	ldw	r2,-20(fp)
  211348:	10800017 	ldw	r2,0(r2)
  21134c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  211350:	10001426 	beq	r2,zero,2113a4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  211354:	e0bffb17 	ldw	r2,-20(fp)
  211358:	10800017 	ldw	r2,0(r2)
  21135c:	10800517 	ldw	r2,20(r2)
  211360:	e0ffff17 	ldw	r3,-4(fp)
  211364:	180d883a 	mov	r6,r3
  211368:	e17ffe17 	ldw	r5,-8(fp)
  21136c:	e13ffb17 	ldw	r4,-20(fp)
  211370:	103ee83a 	callr	r2
  211374:	e0bffc15 	stw	r2,-16(fp)
  211378:	e0bffc17 	ldw	r2,-16(fp)
  21137c:	1000070e 	bge	r2,zero,21139c <read+0xc0>
        {
          ALT_ERRNO = -rval;
  211380:	02112a00 	call	2112a0 <alt_get_errno>
  211384:	1007883a 	mov	r3,r2
  211388:	e0bffc17 	ldw	r2,-16(fp)
  21138c:	0085c83a 	sub	r2,zero,r2
  211390:	18800015 	stw	r2,0(r3)
          return -1;
  211394:	00bfffc4 	movi	r2,-1
  211398:	00000c06 	br	2113cc <read+0xf0>
        }
        return rval;
  21139c:	e0bffc17 	ldw	r2,-16(fp)
  2113a0:	00000a06 	br	2113cc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  2113a4:	02112a00 	call	2112a0 <alt_get_errno>
  2113a8:	1007883a 	mov	r3,r2
  2113ac:	00800344 	movi	r2,13
  2113b0:	18800015 	stw	r2,0(r3)
  2113b4:	00000406 	br	2113c8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  2113b8:	02112a00 	call	2112a0 <alt_get_errno>
  2113bc:	1007883a 	mov	r3,r2
  2113c0:	00801444 	movi	r2,81
  2113c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  2113c8:	00bfffc4 	movi	r2,-1
}
  2113cc:	e037883a 	mov	sp,fp
  2113d0:	dfc00117 	ldw	ra,4(sp)
  2113d4:	df000017 	ldw	fp,0(sp)
  2113d8:	dec00204 	addi	sp,sp,8
  2113dc:	f800283a 	ret

002113e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  2113e0:	defffc04 	addi	sp,sp,-16
  2113e4:	dfc00315 	stw	ra,12(sp)
  2113e8:	df000215 	stw	fp,8(sp)
  2113ec:	dc000115 	stw	r16,4(sp)
  2113f0:	df000204 	addi	fp,sp,8
  2113f4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  2113f8:	e0bffe17 	ldw	r2,-8(fp)
  2113fc:	108000d0 	cmplti	r2,r2,3
  211400:	1000111e 	bne	r2,zero,211448 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  211404:	04001074 	movhi	r16,65
  211408:	84223f04 	addi	r16,r16,-30468
  21140c:	e0bffe17 	ldw	r2,-8(fp)
  211410:	01400304 	movi	r5,12
  211414:	1009883a 	mov	r4,r2
  211418:	02032780 	call	203278 <__mulsi3>
  21141c:	8085883a 	add	r2,r16,r2
  211420:	10800204 	addi	r2,r2,8
  211424:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  211428:	04001074 	movhi	r16,65
  21142c:	84223f04 	addi	r16,r16,-30468
  211430:	e0bffe17 	ldw	r2,-8(fp)
  211434:	01400304 	movi	r5,12
  211438:	1009883a 	mov	r4,r2
  21143c:	02032780 	call	203278 <__mulsi3>
  211440:	8085883a 	add	r2,r16,r2
  211444:	10000015 	stw	zero,0(r2)
  }
}
  211448:	0001883a 	nop
  21144c:	e6ffff04 	addi	sp,fp,-4
  211450:	dfc00217 	ldw	ra,8(sp)
  211454:	df000117 	ldw	fp,4(sp)
  211458:	dc000017 	ldw	r16,0(sp)
  21145c:	dec00304 	addi	sp,sp,12
  211460:	f800283a 	ret

00211464 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  211464:	defff904 	addi	sp,sp,-28
  211468:	df000615 	stw	fp,24(sp)
  21146c:	df000604 	addi	fp,sp,24
  211470:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211474:	0005303a 	rdctl	r2,status
  211478:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21147c:	e0fffe17 	ldw	r3,-8(fp)
  211480:	00bfff84 	movi	r2,-2
  211484:	1884703a 	and	r2,r3,r2
  211488:	1001703a 	wrctl	status,r2
  
  return context;
  21148c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  211490:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  211494:	d0a01017 	ldw	r2,-32704(gp)
  211498:	10c000c4 	addi	r3,r2,3
  21149c:	00bfff04 	movi	r2,-4
  2114a0:	1884703a 	and	r2,r3,r2
  2114a4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  2114a8:	d0e01017 	ldw	r3,-32704(gp)
  2114ac:	e0bfff17 	ldw	r2,-4(fp)
  2114b0:	1887883a 	add	r3,r3,r2
  2114b4:	00801074 	movhi	r2,65
  2114b8:	10800004 	addi	r2,r2,0
  2114bc:	10c0062e 	bgeu	r2,r3,2114d8 <sbrk+0x74>
  2114c0:	e0bffb17 	ldw	r2,-20(fp)
  2114c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2114c8:	e0bffa17 	ldw	r2,-24(fp)
  2114cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  2114d0:	00bfffc4 	movi	r2,-1
  2114d4:	00000b06 	br	211504 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  2114d8:	d0a01017 	ldw	r2,-32704(gp)
  2114dc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  2114e0:	d0e01017 	ldw	r3,-32704(gp)
  2114e4:	e0bfff17 	ldw	r2,-4(fp)
  2114e8:	1885883a 	add	r2,r3,r2
  2114ec:	d0a01015 	stw	r2,-32704(gp)
  2114f0:	e0bffb17 	ldw	r2,-20(fp)
  2114f4:	e0bffc15 	stw	r2,-16(fp)
  2114f8:	e0bffc17 	ldw	r2,-16(fp)
  2114fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  211500:	e0bffd17 	ldw	r2,-12(fp)
} 
  211504:	e037883a 	mov	sp,fp
  211508:	df000017 	ldw	fp,0(sp)
  21150c:	dec00104 	addi	sp,sp,4
  211510:	f800283a 	ret

00211514 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  211514:	defffa04 	addi	sp,sp,-24
  211518:	df000515 	stw	fp,20(sp)
  21151c:	df000504 	addi	fp,sp,20
  211520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211524:	0005303a 	rdctl	r2,status
  211528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21152c:	e0fffc17 	ldw	r3,-16(fp)
  211530:	00bfff84 	movi	r2,-2
  211534:	1884703a 	and	r2,r3,r2
  211538:	1001703a 	wrctl	status,r2
  
  return context;
  21153c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  211540:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  211544:	e0bfff17 	ldw	r2,-4(fp)
  211548:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  21154c:	e0bffd17 	ldw	r2,-12(fp)
  211550:	10800017 	ldw	r2,0(r2)
  211554:	e0fffd17 	ldw	r3,-12(fp)
  211558:	18c00117 	ldw	r3,4(r3)
  21155c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  211560:	e0bffd17 	ldw	r2,-12(fp)
  211564:	10800117 	ldw	r2,4(r2)
  211568:	e0fffd17 	ldw	r3,-12(fp)
  21156c:	18c00017 	ldw	r3,0(r3)
  211570:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  211574:	e0bffd17 	ldw	r2,-12(fp)
  211578:	e0fffd17 	ldw	r3,-12(fp)
  21157c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  211580:	e0bffd17 	ldw	r2,-12(fp)
  211584:	e0fffd17 	ldw	r3,-12(fp)
  211588:	10c00015 	stw	r3,0(r2)
  21158c:	e0bffb17 	ldw	r2,-20(fp)
  211590:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211594:	e0bffe17 	ldw	r2,-8(fp)
  211598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  21159c:	0001883a 	nop
  2115a0:	e037883a 	mov	sp,fp
  2115a4:	df000017 	ldw	fp,0(sp)
  2115a8:	dec00104 	addi	sp,sp,4
  2115ac:	f800283a 	ret

002115b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  2115b0:	defffb04 	addi	sp,sp,-20
  2115b4:	dfc00415 	stw	ra,16(sp)
  2115b8:	df000315 	stw	fp,12(sp)
  2115bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  2115c0:	d0a01117 	ldw	r2,-32700(gp)
  2115c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  2115c8:	d0a02b17 	ldw	r2,-32596(gp)
  2115cc:	10800044 	addi	r2,r2,1
  2115d0:	d0a02b15 	stw	r2,-32596(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  2115d4:	00002e06 	br	211690 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  2115d8:	e0bffd17 	ldw	r2,-12(fp)
  2115dc:	10800017 	ldw	r2,0(r2)
  2115e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  2115e4:	e0bffd17 	ldw	r2,-12(fp)
  2115e8:	10800403 	ldbu	r2,16(r2)
  2115ec:	10803fcc 	andi	r2,r2,255
  2115f0:	10000426 	beq	r2,zero,211604 <alt_tick+0x54>
  2115f4:	d0a02b17 	ldw	r2,-32596(gp)
  2115f8:	1000021e 	bne	r2,zero,211604 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  2115fc:	e0bffd17 	ldw	r2,-12(fp)
  211600:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  211604:	e0bffd17 	ldw	r2,-12(fp)
  211608:	10800217 	ldw	r2,8(r2)
  21160c:	d0e02b17 	ldw	r3,-32596(gp)
  211610:	18801d36 	bltu	r3,r2,211688 <alt_tick+0xd8>
  211614:	e0bffd17 	ldw	r2,-12(fp)
  211618:	10800403 	ldbu	r2,16(r2)
  21161c:	10803fcc 	andi	r2,r2,255
  211620:	1000191e 	bne	r2,zero,211688 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  211624:	e0bffd17 	ldw	r2,-12(fp)
  211628:	10800317 	ldw	r2,12(r2)
  21162c:	e0fffd17 	ldw	r3,-12(fp)
  211630:	18c00517 	ldw	r3,20(r3)
  211634:	1809883a 	mov	r4,r3
  211638:	103ee83a 	callr	r2
  21163c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  211640:	e0bfff17 	ldw	r2,-4(fp)
  211644:	1000031e 	bne	r2,zero,211654 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  211648:	e13ffd17 	ldw	r4,-12(fp)
  21164c:	02115140 	call	211514 <alt_alarm_stop>
  211650:	00000d06 	br	211688 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  211654:	e0bffd17 	ldw	r2,-12(fp)
  211658:	10c00217 	ldw	r3,8(r2)
  21165c:	e0bfff17 	ldw	r2,-4(fp)
  211660:	1887883a 	add	r3,r3,r2
  211664:	e0bffd17 	ldw	r2,-12(fp)
  211668:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  21166c:	e0bffd17 	ldw	r2,-12(fp)
  211670:	10c00217 	ldw	r3,8(r2)
  211674:	d0a02b17 	ldw	r2,-32596(gp)
  211678:	1880032e 	bgeu	r3,r2,211688 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  21167c:	e0bffd17 	ldw	r2,-12(fp)
  211680:	00c00044 	movi	r3,1
  211684:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  211688:	e0bffe17 	ldw	r2,-8(fp)
  21168c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  211690:	e0fffd17 	ldw	r3,-12(fp)
  211694:	d0a01104 	addi	r2,gp,-32700
  211698:	18bfcf1e 	bne	r3,r2,2115d8 <_gp+0xffdff9c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  21169c:	0001883a 	nop
}
  2116a0:	0001883a 	nop
  2116a4:	e037883a 	mov	sp,fp
  2116a8:	dfc00117 	ldw	ra,4(sp)
  2116ac:	df000017 	ldw	fp,0(sp)
  2116b0:	dec00204 	addi	sp,sp,8
  2116b4:	f800283a 	ret

002116b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  2116b8:	defffd04 	addi	sp,sp,-12
  2116bc:	dfc00215 	stw	ra,8(sp)
  2116c0:	df000115 	stw	fp,4(sp)
  2116c4:	df000104 	addi	fp,sp,4
  2116c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  2116cc:	e13fff17 	ldw	r4,-4(fp)
  2116d0:	02152ec0 	call	2152ec <alt_busy_sleep>
}
  2116d4:	e037883a 	mov	sp,fp
  2116d8:	dfc00117 	ldw	ra,4(sp)
  2116dc:	df000017 	ldw	fp,0(sp)
  2116e0:	dec00204 	addi	sp,sp,8
  2116e4:	f800283a 	ret

002116e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2116e8:	defffe04 	addi	sp,sp,-8
  2116ec:	dfc00115 	stw	ra,4(sp)
  2116f0:	df000015 	stw	fp,0(sp)
  2116f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2116f8:	d0a00f17 	ldw	r2,-32708(gp)
  2116fc:	10000326 	beq	r2,zero,21170c <alt_get_errno+0x24>
  211700:	d0a00f17 	ldw	r2,-32708(gp)
  211704:	103ee83a 	callr	r2
  211708:	00000106 	br	211710 <alt_get_errno+0x28>
  21170c:	d0a02604 	addi	r2,gp,-32616
}
  211710:	e037883a 	mov	sp,fp
  211714:	dfc00117 	ldw	ra,4(sp)
  211718:	df000017 	ldw	fp,0(sp)
  21171c:	dec00204 	addi	sp,sp,8
  211720:	f800283a 	ret

00211724 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  211724:	defff904 	addi	sp,sp,-28
  211728:	dfc00615 	stw	ra,24(sp)
  21172c:	df000515 	stw	fp,20(sp)
  211730:	df000504 	addi	fp,sp,20
  211734:	e13ffd15 	stw	r4,-12(fp)
  211738:	e17ffe15 	stw	r5,-8(fp)
  21173c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  211740:	e0bffd17 	ldw	r2,-12(fp)
  211744:	10000816 	blt	r2,zero,211768 <write+0x44>
  211748:	01400304 	movi	r5,12
  21174c:	e13ffd17 	ldw	r4,-12(fp)
  211750:	02032780 	call	203278 <__mulsi3>
  211754:	1007883a 	mov	r3,r2
  211758:	00801074 	movhi	r2,65
  21175c:	10a23f04 	addi	r2,r2,-30468
  211760:	1885883a 	add	r2,r3,r2
  211764:	00000106 	br	21176c <write+0x48>
  211768:	0005883a 	mov	r2,zero
  21176c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  211770:	e0bffb17 	ldw	r2,-20(fp)
  211774:	10002126 	beq	r2,zero,2117fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  211778:	e0bffb17 	ldw	r2,-20(fp)
  21177c:	10800217 	ldw	r2,8(r2)
  211780:	108000cc 	andi	r2,r2,3
  211784:	10001826 	beq	r2,zero,2117e8 <write+0xc4>
  211788:	e0bffb17 	ldw	r2,-20(fp)
  21178c:	10800017 	ldw	r2,0(r2)
  211790:	10800617 	ldw	r2,24(r2)
  211794:	10001426 	beq	r2,zero,2117e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  211798:	e0bffb17 	ldw	r2,-20(fp)
  21179c:	10800017 	ldw	r2,0(r2)
  2117a0:	10800617 	ldw	r2,24(r2)
  2117a4:	e0ffff17 	ldw	r3,-4(fp)
  2117a8:	180d883a 	mov	r6,r3
  2117ac:	e17ffe17 	ldw	r5,-8(fp)
  2117b0:	e13ffb17 	ldw	r4,-20(fp)
  2117b4:	103ee83a 	callr	r2
  2117b8:	e0bffc15 	stw	r2,-16(fp)
  2117bc:	e0bffc17 	ldw	r2,-16(fp)
  2117c0:	1000070e 	bge	r2,zero,2117e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  2117c4:	02116e80 	call	2116e8 <alt_get_errno>
  2117c8:	1007883a 	mov	r3,r2
  2117cc:	e0bffc17 	ldw	r2,-16(fp)
  2117d0:	0085c83a 	sub	r2,zero,r2
  2117d4:	18800015 	stw	r2,0(r3)
        return -1;
  2117d8:	00bfffc4 	movi	r2,-1
  2117dc:	00000c06 	br	211810 <write+0xec>
      }
      return rval;
  2117e0:	e0bffc17 	ldw	r2,-16(fp)
  2117e4:	00000a06 	br	211810 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  2117e8:	02116e80 	call	2116e8 <alt_get_errno>
  2117ec:	1007883a 	mov	r3,r2
  2117f0:	00800344 	movi	r2,13
  2117f4:	18800015 	stw	r2,0(r3)
  2117f8:	00000406 	br	21180c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  2117fc:	02116e80 	call	2116e8 <alt_get_errno>
  211800:	1007883a 	mov	r3,r2
  211804:	00801444 	movi	r2,81
  211808:	18800015 	stw	r2,0(r3)
  }
  return -1;
  21180c:	00bfffc4 	movi	r2,-1
}
  211810:	e037883a 	mov	sp,fp
  211814:	dfc00117 	ldw	ra,4(sp)
  211818:	df000017 	ldw	fp,0(sp)
  21181c:	dec00204 	addi	sp,sp,8
  211820:	f800283a 	ret

00211824 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  211824:	defffd04 	addi	sp,sp,-12
  211828:	dfc00215 	stw	ra,8(sp)
  21182c:	df000115 	stw	fp,4(sp)
  211830:	df000104 	addi	fp,sp,4
  211834:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  211838:	d1600c04 	addi	r5,gp,-32720
  21183c:	e13fff17 	ldw	r4,-4(fp)
  211840:	02154c80 	call	2154c8 <alt_dev_llist_insert>
}
  211844:	e037883a 	mov	sp,fp
  211848:	dfc00117 	ldw	ra,4(sp)
  21184c:	df000017 	ldw	fp,0(sp)
  211850:	dec00204 	addi	sp,sp,8
  211854:	f800283a 	ret

00211858 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  211858:	defffd04 	addi	sp,sp,-12
  21185c:	dfc00215 	stw	ra,8(sp)
  211860:	df000115 	stw	fp,4(sp)
  211864:	df000104 	addi	fp,sp,4
  211868:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  21186c:	02160840 	call	216084 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  211870:	00800044 	movi	r2,1
  211874:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  211878:	0001883a 	nop
  21187c:	e037883a 	mov	sp,fp
  211880:	dfc00117 	ldw	ra,4(sp)
  211884:	df000017 	ldw	fp,0(sp)
  211888:	dec00204 	addi	sp,sp,8
  21188c:	f800283a 	ret

00211890 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  211890:	defffe04 	addi	sp,sp,-8
  211894:	dfc00115 	stw	ra,4(sp)
  211898:	df000015 	stw	fp,0(sp)
  21189c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  2118a0:	01c0fa04 	movi	r7,1000
  2118a4:	01800044 	movi	r6,1
  2118a8:	000b883a 	mov	r5,zero
  2118ac:	01001074 	movhi	r4,65
  2118b0:	21040004 	addi	r4,r4,4096
  2118b4:	02142040 	call	214204 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
  2118b8:	01001074 	movhi	r4,65
  2118bc:	21229f04 	addi	r4,r4,-30084
  2118c0:	0211b600 	call	211b60 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  2118c4:	000d883a 	mov	r6,zero
  2118c8:	000b883a 	mov	r5,zero
  2118cc:	01001074 	movhi	r4,65
  2118d0:	2122b704 	addi	r4,r4,-29988
  2118d4:	021368c0 	call	21368c <altera_avalon_jtag_uart_init>
  2118d8:	01001074 	movhi	r4,65
  2118dc:	2122ad04 	addi	r4,r4,-30028
  2118e0:	02118240 	call	211824 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
  2118e4:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  2118e8:	0001883a 	nop
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  2118ec:	01001074 	movhi	r4,65
  2118f0:	2126c504 	addi	r4,r4,-25836
  2118f4:	0214b340 	call	214b34 <altera_onchip_flash_init>
}
  2118f8:	0001883a 	nop
  2118fc:	e037883a 	mov	sp,fp
  211900:	dfc00117 	ldw	ra,4(sp)
  211904:	df000017 	ldw	fp,0(sp)
  211908:	dec00204 	addi	sp,sp,8
  21190c:	f800283a 	ret

00211910 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
  211910:	defff904 	addi	sp,sp,-28
  211914:	dfc00615 	stw	ra,24(sp)
  211918:	df000515 	stw	fp,20(sp)
  21191c:	df000504 	addi	fp,sp,20
  211920:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
  211924:	008000b4 	movhi	r2,2
  211928:	10a1a804 	addi	r2,r2,-31072
  21192c:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
  211930:	e0bfff17 	ldw	r2,-4(fp)
  211934:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
  211938:	e0bffc17 	ldw	r2,-16(fp)
  21193c:	10800717 	ldw	r2,28(r2)
  211940:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
  211944:	e0bffd17 	ldw	r2,-12(fp)
  211948:	10800217 	ldw	r2,8(r2)
  21194c:	10800098 	cmpnei	r2,r2,2
  211950:	1000251e 	bne	r2,zero,2119e8 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
  211954:	e0bffd17 	ldw	r2,-12(fp)
  211958:	10c00017 	ldw	r3,0(r2)
  21195c:	e0bffd17 	ldw	r2,-12(fp)
  211960:	10800117 	ldw	r2,4(r2)
  211964:	e13ffe04 	addi	r4,fp,-8
  211968:	200f883a 	mov	r7,r4
  21196c:	100d883a 	mov	r6,r2
  211970:	180b883a 	mov	r5,r3
  211974:	e13ffc17 	ldw	r4,-16(fp)
  211978:	02120c00 	call	2120c0 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
  21197c:	e0bffd17 	ldw	r2,-12(fp)
  211980:	10c00117 	ldw	r3,4(r2)
  211984:	e0bffe17 	ldw	r2,-8(fp)
  211988:	1887c83a 	sub	r3,r3,r2
  21198c:	e0bffd17 	ldw	r2,-12(fp)
  211990:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
  211994:	e0bffd17 	ldw	r2,-12(fp)
  211998:	10c00017 	ldw	r3,0(r2)
  21199c:	e0bffe17 	ldw	r2,-8(fp)
  2119a0:	1887883a 	add	r3,r3,r2
  2119a4:	e0bffd17 	ldw	r2,-12(fp)
  2119a8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
  2119ac:	e0bffd17 	ldw	r2,-12(fp)
  2119b0:	10800117 	ldw	r2,4(r2)
  2119b4:	10000c26 	beq	r2,zero,2119e8 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  2119b8:	01400704 	movi	r5,28
  2119bc:	e13ffc17 	ldw	r4,-16(fp)
  2119c0:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  2119c4:	01400084 	movi	r5,2
  2119c8:	e13ffc17 	ldw	r4,-16(fp)
  2119cc:	021331c0 	call	21331c <alt_avalon_i2c_int_enable>
  2119d0:	00000e06 	br	211a0c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
  2119d4:	e0bffb17 	ldw	r2,-20(fp)
  2119d8:	10bfffc4 	addi	r2,r2,-1
  2119dc:	e0bffb15 	stw	r2,-20(fp)
  2119e0:	e0bffb17 	ldw	r2,-20(fp)
  2119e4:	10000426 	beq	r2,zero,2119f8 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
  2119e8:	e13ffc17 	ldw	r4,-16(fp)
  2119ec:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  2119f0:	103ff81e 	bne	r2,zero,2119d4 <_gp+0xffdffdc0>
  2119f4:	00000106 	br	2119fc <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
  2119f8:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
  2119fc:	e13ffc17 	ldw	r4,-16(fp)
  211a00:	0211d240 	call	211d24 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
  211a04:	e0bffd17 	ldw	r2,-12(fp)
  211a08:	10000215 	stw	zero,8(r2)
}
  211a0c:	e037883a 	mov	sp,fp
  211a10:	dfc00117 	ldw	ra,4(sp)
  211a14:	df000017 	ldw	fp,0(sp)
  211a18:	dec00204 	addi	sp,sp,8
  211a1c:	f800283a 	ret

00211a20 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
  211a20:	defffc04 	addi	sp,sp,-16
  211a24:	dfc00315 	stw	ra,12(sp)
  211a28:	df000215 	stw	fp,8(sp)
  211a2c:	df000204 	addi	fp,sp,8
  211a30:	e13ffe15 	stw	r4,-8(fp)
  211a34:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
  211a38:	e0bfff17 	ldw	r2,-4(fp)
  211a3c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
  211a40:	e1ffff17 	ldw	r7,-4(fp)
  211a44:	000d883a 	mov	r6,zero
  211a48:	01400874 	movhi	r5,33
  211a4c:	29464404 	addi	r5,r5,6416
  211a50:	e13ffe17 	ldw	r4,-8(fp)
  211a54:	0211b0c0 	call	211b0c <alt_avalon_i2c_register_callback>
}
  211a58:	0001883a 	nop
  211a5c:	e037883a 	mov	sp,fp
  211a60:	dfc00117 	ldw	ra,4(sp)
  211a64:	df000017 	ldw	fp,0(sp)
  211a68:	dec00204 	addi	sp,sp,8
  211a6c:	f800283a 	ret

00211a70 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
  211a70:	defff904 	addi	sp,sp,-28
  211a74:	dfc00615 	stw	ra,24(sp)
  211a78:	df000515 	stw	fp,20(sp)
  211a7c:	df000504 	addi	fp,sp,20
  211a80:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
  211a84:	e0bfff17 	ldw	r2,-4(fp)
  211a88:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  211a8c:	014007c4 	movi	r5,31
  211a90:	e13ffb17 	ldw	r4,-20(fp)
  211a94:	02132b40 	call	2132b4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  211a98:	01400704 	movi	r5,28
  211a9c:	e13ffb17 	ldw	r4,-20(fp)
  211aa0:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
  211aa4:	e0bffb17 	ldw	r2,-20(fp)
  211aa8:	10800617 	ldw	r2,24(r2)
  211aac:	10001126 	beq	r2,zero,211af4 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  211ab0:	0005303a 	rdctl	r2,status
  211ab4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  211ab8:	e0fffd17 	ldw	r3,-12(fp)
  211abc:	00bfff84 	movi	r2,-2
  211ac0:	1884703a 	and	r2,r3,r2
  211ac4:	1001703a 	wrctl	status,r2
  
  return context;
  211ac8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
  211acc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
  211ad0:	e0bffb17 	ldw	r2,-20(fp)
  211ad4:	10800617 	ldw	r2,24(r2)
  211ad8:	e13ffb17 	ldw	r4,-20(fp)
  211adc:	103ee83a 	callr	r2
  211ae0:	e0bffc17 	ldw	r2,-16(fp)
  211ae4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  211ae8:	e0bffe17 	ldw	r2,-8(fp)
  211aec:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
  211af0:	0001883a 	nop
  211af4:	0001883a 	nop
}
  211af8:	e037883a 	mov	sp,fp
  211afc:	dfc00117 	ldw	ra,4(sp)
  211b00:	df000017 	ldw	fp,0(sp)
  211b04:	dec00204 	addi	sp,sp,8
  211b08:	f800283a 	ret

00211b0c <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
  211b0c:	defffb04 	addi	sp,sp,-20
  211b10:	df000415 	stw	fp,16(sp)
  211b14:	df000404 	addi	fp,sp,16
  211b18:	e13ffc15 	stw	r4,-16(fp)
  211b1c:	e17ffd15 	stw	r5,-12(fp)
  211b20:	e1bffe15 	stw	r6,-8(fp)
  211b24:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  211b28:	e0bffc17 	ldw	r2,-16(fp)
  211b2c:	e0fffd17 	ldw	r3,-12(fp)
  211b30:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
  211b34:	e0bffc17 	ldw	r2,-16(fp)
  211b38:	e0ffff17 	ldw	r3,-4(fp)
  211b3c:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
  211b40:	e0bffc17 	ldw	r2,-16(fp)
  211b44:	e0fffe17 	ldw	r3,-8(fp)
  211b48:	10c00815 	stw	r3,32(r2)

    return ;
  211b4c:	0001883a 	nop
}
  211b50:	e037883a 	mov	sp,fp
  211b54:	df000017 	ldw	fp,0(sp)
  211b58:	dec00104 	addi	sp,sp,4
  211b5c:	f800283a 	ret

00211b60 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
  211b60:	defff704 	addi	sp,sp,-36
  211b64:	dfc00815 	stw	ra,32(sp)
  211b68:	df000715 	stw	fp,28(sp)
  211b6c:	df000704 	addi	fp,sp,28
  211b70:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
  211b74:	e13fff17 	ldw	r4,-4(fp)
  211b78:	0211d240 	call	211d24 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
  211b7c:	014007c4 	movi	r5,31
  211b80:	e13fff17 	ldw	r4,-4(fp)
  211b84:	02132b40 	call	2132b4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  211b88:	01400704 	movi	r5,28
  211b8c:	e13fff17 	ldw	r4,-4(fp)
  211b90:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
  211b94:	014000c4 	movi	r5,3
  211b98:	e13fff17 	ldw	r4,-4(fp)
  211b9c:	02134c00 	call	2134c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
  211ba0:	014000c4 	movi	r5,3
  211ba4:	e13fff17 	ldw	r4,-4(fp)
  211ba8:	02134100 	call	213410 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
  211bac:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
  211bb0:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
  211bb4:	e0bffb04 	addi	r2,fp,-20
  211bb8:	018000b4 	movhi	r6,2
  211bbc:	31a1a804 	addi	r6,r6,-31072
  211bc0:	100b883a 	mov	r5,r2
  211bc4:	e13fff17 	ldw	r4,-4(fp)
  211bc8:	0211f800 	call	211f80 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
  211bcc:	e0bffb04 	addi	r2,fp,-20
  211bd0:	100b883a 	mov	r5,r2
  211bd4:	e13fff17 	ldw	r4,-4(fp)
  211bd8:	0211e200 	call	211e20 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
  211bdc:	d1601304 	addi	r5,gp,-32692
  211be0:	e13fff17 	ldw	r4,-4(fp)
  211be4:	02154c80 	call	2154c8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  211be8:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
  211bec:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
  211bf0:	e0bffa17 	ldw	r2,-24(fp)
  211bf4:	10000c1e 	bne	r2,zero,211c28 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
  211bf8:	e0bfff17 	ldw	r2,-4(fp)
  211bfc:	10c00417 	ldw	r3,16(r2)
  211c00:	e0bfff17 	ldw	r2,-4(fp)
  211c04:	10800517 	ldw	r2,20(r2)
  211c08:	d8000015 	stw	zero,0(sp)
  211c0c:	e1ffff17 	ldw	r7,-4(fp)
  211c10:	01800874 	movhi	r6,33
  211c14:	31869c04 	addi	r6,r6,6768
  211c18:	100b883a 	mov	r5,r2
  211c1c:	1809883a 	mov	r4,r3
  211c20:	02157980 	call	215798 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
  211c24:	00000406 	br	211c38 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
  211c28:	01000874 	movhi	r4,33
  211c2c:	211b8304 	addi	r4,r4,28172
  211c30:	0215e1c0 	call	215e1c <alt_printf>
    }

    return;
  211c34:	0001883a 	nop

}
  211c38:	e037883a 	mov	sp,fp
  211c3c:	dfc00117 	ldw	ra,4(sp)
  211c40:	df000017 	ldw	fp,0(sp)
  211c44:	dec00204 	addi	sp,sp,8
  211c48:	f800283a 	ret

00211c4c <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
  211c4c:	defffc04 	addi	sp,sp,-16
  211c50:	dfc00315 	stw	ra,12(sp)
  211c54:	df000215 	stw	fp,8(sp)
  211c58:	df000204 	addi	fp,sp,8
  211c5c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
  211c60:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
  211c64:	d1601304 	addi	r5,gp,-32692
  211c68:	e13fff17 	ldw	r4,-4(fp)
  211c6c:	021562c0 	call	21562c <alt_find_dev>
  211c70:	e0bffe15 	stw	r2,-8(fp)

    return dev;
  211c74:	e0bffe17 	ldw	r2,-8(fp)
}
  211c78:	e037883a 	mov	sp,fp
  211c7c:	dfc00117 	ldw	ra,4(sp)
  211c80:	df000017 	ldw	fp,0(sp)
  211c84:	dec00204 	addi	sp,sp,8
  211c88:	f800283a 	ret

00211c8c <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  211c8c:	defffc04 	addi	sp,sp,-16
  211c90:	df000315 	stw	fp,12(sp)
  211c94:	df000304 	addi	fp,sp,12
  211c98:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  211c9c:	e0bfff17 	ldw	r2,-4(fp)
  211ca0:	10800717 	ldw	r2,28(r2)
  211ca4:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
  211ca8:	e0bfff17 	ldw	r2,-4(fp)
  211cac:	10800317 	ldw	r2,12(r2)
  211cb0:	10800204 	addi	r2,r2,8
  211cb4:	10800037 	ldwio	r2,0(r2)
  211cb8:	1080004c 	andi	r2,r2,1
  211cbc:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
  211cc0:	e0bffe17 	ldw	r2,-8(fp)
  211cc4:	10000226 	beq	r2,zero,211cd0 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
  211cc8:	00bffe44 	movi	r2,-7
  211ccc:	00001106 	br	211d14 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
  211cd0:	e0bfff17 	ldw	r2,-4(fp)
  211cd4:	10c00617 	ldw	r3,24(r2)
  211cd8:	00800874 	movhi	r2,33
  211cdc:	10864404 	addi	r2,r2,6416
  211ce0:	1880021e 	bne	r3,r2,211cec <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
  211ce4:	e0bffd17 	ldw	r2,-12(fp)
  211ce8:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
  211cec:	e0bfff17 	ldw	r2,-4(fp)
  211cf0:	10800317 	ldw	r2,12(r2)
  211cf4:	10800204 	addi	r2,r2,8
  211cf8:	e0ffff17 	ldw	r3,-4(fp)
  211cfc:	18c00317 	ldw	r3,12(r3)
  211d00:	18c00204 	addi	r3,r3,8
  211d04:	18c00037 	ldwio	r3,0(r3)
  211d08:	18c00054 	ori	r3,r3,1
  211d0c:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  211d10:	0005883a 	mov	r2,zero
}
  211d14:	e037883a 	mov	sp,fp
  211d18:	df000017 	ldw	fp,0(sp)
  211d1c:	dec00104 	addi	sp,sp,4
  211d20:	f800283a 	ret

00211d24 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  211d24:	defffe04 	addi	sp,sp,-8
  211d28:	df000115 	stw	fp,4(sp)
  211d2c:	df000104 	addi	fp,sp,4
  211d30:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
  211d34:	e0bfff17 	ldw	r2,-4(fp)
  211d38:	10800317 	ldw	r2,12(r2)
  211d3c:	10800204 	addi	r2,r2,8
  211d40:	e0ffff17 	ldw	r3,-4(fp)
  211d44:	18c00317 	ldw	r3,12(r3)
  211d48:	18c00204 	addi	r3,r3,8
  211d4c:	19000037 	ldwio	r4,0(r3)
  211d50:	00ffff84 	movi	r3,-2
  211d54:	20c6703a 	and	r3,r4,r3
  211d58:	10c00035 	stwio	r3,0(r2)

}
  211d5c:	0001883a 	nop
  211d60:	e037883a 	mov	sp,fp
  211d64:	df000017 	ldw	fp,0(sp)
  211d68:	dec00104 	addi	sp,sp,4
  211d6c:	f800283a 	ret

00211d70 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  211d70:	defffd04 	addi	sp,sp,-12
  211d74:	df000215 	stw	fp,8(sp)
  211d78:	df000204 	addi	fp,sp,8
  211d7c:	e13ffe15 	stw	r4,-8(fp)
  211d80:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
  211d84:	e0bffe17 	ldw	r2,-8(fp)
  211d88:	10c00d17 	ldw	r3,52(r2)
  211d8c:	e0bfff17 	ldw	r2,-4(fp)
  211d90:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
  211d94:	e0bffe17 	ldw	r2,-8(fp)
  211d98:	10800317 	ldw	r2,12(r2)
  211d9c:	10800204 	addi	r2,r2,8
  211da0:	10800037 	ldwio	r2,0(r2)
  211da4:	1080008c 	andi	r2,r2,2
  211da8:	1005d07a 	srai	r2,r2,1
  211dac:	1007883a 	mov	r3,r2
  211db0:	e0bfff17 	ldw	r2,-4(fp)
  211db4:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
  211db8:	e0bffe17 	ldw	r2,-8(fp)
  211dbc:	10800317 	ldw	r2,12(r2)
  211dc0:	10800904 	addi	r2,r2,36
  211dc4:	10800037 	ldwio	r2,0(r2)
  211dc8:	1007883a 	mov	r3,r2
  211dcc:	e0bfff17 	ldw	r2,-4(fp)
  211dd0:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
  211dd4:	e0bffe17 	ldw	r2,-8(fp)
  211dd8:	10800317 	ldw	r2,12(r2)
  211ddc:	10800804 	addi	r2,r2,32
  211de0:	10800037 	ldwio	r2,0(r2)
  211de4:	1007883a 	mov	r3,r2
  211de8:	e0bfff17 	ldw	r2,-4(fp)
  211dec:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
  211df0:	e0bffe17 	ldw	r2,-8(fp)
  211df4:	10800317 	ldw	r2,12(r2)
  211df8:	10800a04 	addi	r2,r2,40
  211dfc:	10800037 	ldwio	r2,0(r2)
  211e00:	1007883a 	mov	r3,r2
  211e04:	e0bfff17 	ldw	r2,-4(fp)
  211e08:	10c0030d 	sth	r3,12(r2)
}
  211e0c:	0001883a 	nop
  211e10:	e037883a 	mov	sp,fp
  211e14:	df000017 	ldw	fp,0(sp)
  211e18:	dec00104 	addi	sp,sp,4
  211e1c:	f800283a 	ret

00211e20 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
  211e20:	defffd04 	addi	sp,sp,-12
  211e24:	df000215 	stw	fp,8(sp)
  211e28:	df000204 	addi	fp,sp,8
  211e2c:	e13ffe15 	stw	r4,-8(fp)
  211e30:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
  211e34:	e0bfff17 	ldw	r2,-4(fp)
  211e38:	10c00017 	ldw	r3,0(r2)
  211e3c:	e0bffe17 	ldw	r2,-8(fp)
  211e40:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
  211e44:	e0bffe17 	ldw	r2,-8(fp)
  211e48:	10800317 	ldw	r2,12(r2)
  211e4c:	10c00204 	addi	r3,r2,8
  211e50:	e0bffe17 	ldw	r2,-8(fp)
  211e54:	10800317 	ldw	r2,12(r2)
  211e58:	10800204 	addi	r2,r2,8
  211e5c:	10800037 	ldwio	r2,0(r2)
  211e60:	1009883a 	mov	r4,r2
  211e64:	00bfff44 	movi	r2,-3
  211e68:	2088703a 	and	r4,r4,r2
  211e6c:	e0bfff17 	ldw	r2,-4(fp)
  211e70:	10800117 	ldw	r2,4(r2)
  211e74:	1085883a 	add	r2,r2,r2
  211e78:	1080008c 	andi	r2,r2,2
  211e7c:	2084b03a 	or	r2,r4,r2
  211e80:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
  211e84:	e0bffe17 	ldw	r2,-8(fp)
  211e88:	10800317 	ldw	r2,12(r2)
  211e8c:	10800904 	addi	r2,r2,36
  211e90:	e0ffff17 	ldw	r3,-4(fp)
  211e94:	18c0020b 	ldhu	r3,8(r3)
  211e98:	18ffffcc 	andi	r3,r3,65535
  211e9c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
  211ea0:	e0bffe17 	ldw	r2,-8(fp)
  211ea4:	10800317 	ldw	r2,12(r2)
  211ea8:	10800804 	addi	r2,r2,32
  211eac:	e0ffff17 	ldw	r3,-4(fp)
  211eb0:	18c0028b 	ldhu	r3,10(r3)
  211eb4:	18ffffcc 	andi	r3,r3,65535
  211eb8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
  211ebc:	e0bffe17 	ldw	r2,-8(fp)
  211ec0:	10800317 	ldw	r2,12(r2)
  211ec4:	10800a04 	addi	r2,r2,40
  211ec8:	e0ffff17 	ldw	r3,-4(fp)
  211ecc:	18c0030b 	ldhu	r3,12(r3)
  211ed0:	18ffffcc 	andi	r3,r3,65535
  211ed4:	10c00035 	stwio	r3,0(r2)
}
  211ed8:	0001883a 	nop
  211edc:	e037883a 	mov	sp,fp
  211ee0:	df000017 	ldw	fp,0(sp)
  211ee4:	dec00104 	addi	sp,sp,4
  211ee8:	f800283a 	ret

00211eec <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
  211eec:	defffb04 	addi	sp,sp,-20
  211ef0:	dfc00415 	stw	ra,16(sp)
  211ef4:	df000315 	stw	fp,12(sp)
  211ef8:	df000304 	addi	fp,sp,12
  211efc:	e13ffd15 	stw	r4,-12(fp)
  211f00:	e17ffe15 	stw	r5,-8(fp)
  211f04:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
  211f08:	e0bffe17 	ldw	r2,-8(fp)
  211f0c:	1080028b 	ldhu	r2,10(r2)
  211f10:	10bfffcc 	andi	r2,r2,65535
  211f14:	10000426 	beq	r2,zero,211f28 <alt_avalon_i2c_master_config_speed_get+0x3c>
  211f18:	e0bffe17 	ldw	r2,-8(fp)
  211f1c:	1080020b 	ldhu	r2,8(r2)
  211f20:	10bfffcc 	andi	r2,r2,65535
  211f24:	1000021e 	bne	r2,zero,211f30 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
  211f28:	00bfff44 	movi	r2,-3
  211f2c:	00000f06 	br	211f6c <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
  211f30:	e0bffd17 	ldw	r2,-12(fp)
  211f34:	11000c17 	ldw	r4,48(r2)
  211f38:	e0bffe17 	ldw	r2,-8(fp)
  211f3c:	1080028b 	ldhu	r2,10(r2)
  211f40:	10ffffcc 	andi	r3,r2,65535
  211f44:	e0bffe17 	ldw	r2,-8(fp)
  211f48:	1080020b 	ldhu	r2,8(r2)
  211f4c:	10bfffcc 	andi	r2,r2,65535
  211f50:	1885883a 	add	r2,r3,r2
  211f54:	100b883a 	mov	r5,r2
  211f58:	02031bc0 	call	2031bc <__udivsi3>
  211f5c:	1007883a 	mov	r3,r2
  211f60:	e0bfff17 	ldw	r2,-4(fp)
  211f64:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
  211f68:	0005883a 	mov	r2,zero
}
  211f6c:	e037883a 	mov	sp,fp
  211f70:	dfc00117 	ldw	ra,4(sp)
  211f74:	df000017 	ldw	fp,0(sp)
  211f78:	dec00204 	addi	sp,sp,8
  211f7c:	f800283a 	ret

00211f80 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
  211f80:	defff904 	addi	sp,sp,-28
  211f84:	dfc00615 	stw	ra,24(sp)
  211f88:	df000515 	stw	fp,20(sp)
  211f8c:	df000504 	addi	fp,sp,20
  211f90:	e13ffd15 	stw	r4,-12(fp)
  211f94:	e17ffe15 	stw	r5,-8(fp)
  211f98:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
  211f9c:	e0ffff17 	ldw	r3,-4(fp)
  211fa0:	008001b4 	movhi	r2,6
  211fa4:	1086a004 	addi	r2,r2,6784
  211fa8:	10c00436 	bltu	r2,r3,211fbc <alt_avalon_i2c_master_config_speed_set+0x3c>
  211fac:	e0bfff17 	ldw	r2,-4(fp)
  211fb0:	10000226 	beq	r2,zero,211fbc <alt_avalon_i2c_master_config_speed_set+0x3c>
  211fb4:	e0bfff17 	ldw	r2,-4(fp)
  211fb8:	1000021e 	bne	r2,zero,211fc4 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
  211fbc:	00bfff04 	movi	r2,-4
  211fc0:	00002906 	br	212068 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
  211fc4:	e0bffd17 	ldw	r2,-12(fp)
  211fc8:	10c00c17 	ldw	r3,48(r2)
  211fcc:	e0bfff17 	ldw	r2,-4(fp)
  211fd0:	1085883a 	add	r2,r2,r2
  211fd4:	100b883a 	mov	r5,r2
  211fd8:	1809883a 	mov	r4,r3
  211fdc:	02031bc0 	call	2031bc <__udivsi3>
  211fe0:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  211fe4:	e0bffb17 	ldw	r2,-20(fp)
  211fe8:	10800f04 	addi	r2,r2,60
  211fec:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
  211ff0:	e0bffb17 	ldw	r2,-20(fp)
  211ff4:	10bff104 	addi	r2,r2,-60
  211ff8:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
  211ffc:	e0ffff17 	ldw	r3,-4(fp)
  212000:	008000b4 	movhi	r2,2
  212004:	10a1a804 	addi	r2,r2,-31072
  212008:	10c0042e 	bgeu	r2,r3,21201c <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
  21200c:	e0bffe17 	ldw	r2,-8(fp)
  212010:	00c00044 	movi	r3,1
  212014:	10c00115 	stw	r3,4(r2)
  212018:	00000206 	br	212024 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
  21201c:	e0bffe17 	ldw	r2,-8(fp)
  212020:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
  212024:	e0bffb17 	ldw	r2,-20(fp)
  212028:	1007883a 	mov	r3,r2
  21202c:	e0bffe17 	ldw	r2,-8(fp)
  212030:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
  212034:	e0bffc17 	ldw	r2,-16(fp)
  212038:	1007883a 	mov	r3,r2
  21203c:	e0bffe17 	ldw	r2,-8(fp)
  212040:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
  212044:	e0bffb17 	ldw	r2,-20(fp)
  212048:	1007883a 	mov	r3,r2
  21204c:	e0bffb17 	ldw	r2,-20(fp)
  212050:	1004d07a 	srli	r2,r2,1
  212054:	1885c83a 	sub	r2,r3,r2
  212058:	1007883a 	mov	r3,r2
  21205c:	e0bffe17 	ldw	r2,-8(fp)
  212060:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
  212064:	0005883a 	mov	r2,zero

}
  212068:	e037883a 	mov	sp,fp
  21206c:	dfc00117 	ldw	ra,4(sp)
  212070:	df000017 	ldw	fp,0(sp)
  212074:	dec00204 	addi	sp,sp,8
  212078:	f800283a 	ret

0021207c <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  21207c:	defffe04 	addi	sp,sp,-8
  212080:	df000115 	stw	fp,4(sp)
  212084:	df000104 	addi	fp,sp,4
  212088:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
  21208c:	e0bfff17 	ldw	r2,-4(fp)
  212090:	10800317 	ldw	r2,12(r2)
  212094:	10800504 	addi	r2,r2,20
  212098:	10800037 	ldwio	r2,0(r2)
  21209c:	1080004c 	andi	r2,r2,1
  2120a0:	10000226 	beq	r2,zero,2120ac <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
  2120a4:	00800044 	movi	r2,1
  2120a8:	00000106 	br	2120b0 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
  2120ac:	0005883a 	mov	r2,zero
}
  2120b0:	e037883a 	mov	sp,fp
  2120b4:	df000017 	ldw	fp,0(sp)
  2120b8:	dec00104 	addi	sp,sp,4
  2120bc:	f800283a 	ret

002120c0 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
  2120c0:	defffb04 	addi	sp,sp,-20
  2120c4:	df000415 	stw	fp,16(sp)
  2120c8:	df000404 	addi	fp,sp,16
  2120cc:	e13ffc15 	stw	r4,-16(fp)
  2120d0:	e17ffd15 	stw	r5,-12(fp)
  2120d4:	e1bffe15 	stw	r6,-8(fp)
  2120d8:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
  2120dc:	e0bfff17 	ldw	r2,-4(fp)
  2120e0:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  2120e4:	00001406 	br	212138 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  2120e8:	e0bfff17 	ldw	r2,-4(fp)
  2120ec:	10800017 	ldw	r2,0(r2)
  2120f0:	e0fffd17 	ldw	r3,-12(fp)
  2120f4:	1885883a 	add	r2,r3,r2
  2120f8:	e0fffc17 	ldw	r3,-16(fp)
  2120fc:	18c00317 	ldw	r3,12(r3)
  212100:	18c00104 	addi	r3,r3,4
  212104:	18c00037 	ldwio	r3,0(r3)
  212108:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
  21210c:	e0bfff17 	ldw	r2,-4(fp)
  212110:	10800017 	ldw	r2,0(r2)
  212114:	10c00044 	addi	r3,r2,1
  212118:	e0bfff17 	ldw	r2,-4(fp)
  21211c:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  212120:	e0bfff17 	ldw	r2,-4(fp)
  212124:	10c00017 	ldw	r3,0(r2)
  212128:	e0bffe17 	ldw	r2,-8(fp)
  21212c:	1880021e 	bne	r3,r2,212138 <alt_avalon_i2c_rx_read_available+0x78>
  212130:	e0bffe17 	ldw	r2,-8(fp)
  212134:	1000061e 	bne	r2,zero,212150 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
  212138:	e0bffc17 	ldw	r2,-16(fp)
  21213c:	10800317 	ldw	r2,12(r2)
  212140:	10800704 	addi	r2,r2,28
  212144:	10800037 	ldwio	r2,0(r2)
  212148:	103fe71e 	bne	r2,zero,2120e8 <_gp+0xffe004d4>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
  21214c:	00000106 	br	212154 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
  212150:	0001883a 	nop
    }
}
  212154:	0001883a 	nop
  212158:	e037883a 	mov	sp,fp
  21215c:	df000017 	ldw	fp,0(sp)
  212160:	dec00104 	addi	sp,sp,4
  212164:	f800283a 	ret

00212168 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
  212168:	defffa04 	addi	sp,sp,-24
  21216c:	dfc00515 	stw	ra,20(sp)
  212170:	df000415 	stw	fp,16(sp)
  212174:	df000404 	addi	fp,sp,16
  212178:	e13ffe15 	stw	r4,-8(fp)
  21217c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
  212180:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
  212184:	008000b4 	movhi	r2,2
  212188:	10a1a804 	addi	r2,r2,-31072
  21218c:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  212190:	00000d06 	br	2121c8 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
  212194:	e0bffd17 	ldw	r2,-12(fp)
  212198:	108002a8 	cmpgeui	r2,r2,10
  21219c:	1000021e 	bne	r2,zero,2121a8 <alt_avalon_i2c_rx_read+0x40>
  2121a0:	0109c404 	movi	r4,10000
  2121a4:	02152ec0 	call	2152ec <alt_busy_sleep>
      if (--timeout == 0)
  2121a8:	e0bffd17 	ldw	r2,-12(fp)
  2121ac:	10bfffc4 	addi	r2,r2,-1
  2121b0:	e0bffd15 	stw	r2,-12(fp)
  2121b4:	e0bffd17 	ldw	r2,-12(fp)
  2121b8:	1000031e 	bne	r2,zero,2121c8 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
  2121bc:	00bfff84 	movi	r2,-2
  2121c0:	e0bffc15 	stw	r2,-16(fp)
        break;
  2121c4:	00000506 	br	2121dc <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
  2121c8:	e0bffe17 	ldw	r2,-8(fp)
  2121cc:	10800317 	ldw	r2,12(r2)
  2121d0:	10800704 	addi	r2,r2,28
  2121d4:	10800037 	ldwio	r2,0(r2)
  2121d8:	103fee26 	beq	r2,zero,212194 <_gp+0xffe00580>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
  2121dc:	e0bffe17 	ldw	r2,-8(fp)
  2121e0:	10800317 	ldw	r2,12(r2)
  2121e4:	10800104 	addi	r2,r2,4
  2121e8:	10800037 	ldwio	r2,0(r2)
  2121ec:	1007883a 	mov	r3,r2
  2121f0:	e0bfff17 	ldw	r2,-4(fp)
  2121f4:	10c00005 	stb	r3,0(r2)
        
    return status;
  2121f8:	e0bffc17 	ldw	r2,-16(fp)
}
  2121fc:	e037883a 	mov	sp,fp
  212200:	dfc00117 	ldw	ra,4(sp)
  212204:	df000017 	ldw	fp,0(sp)
  212208:	dec00204 	addi	sp,sp,8
  21220c:	f800283a 	ret

00212210 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
  212210:	defff804 	addi	sp,sp,-32
  212214:	dfc00715 	stw	ra,28(sp)
  212218:	df000615 	stw	fp,24(sp)
  21221c:	df000604 	addi	fp,sp,24
  212220:	e13ffc15 	stw	r4,-16(fp)
  212224:	2809883a 	mov	r4,r5
  212228:	3007883a 	mov	r3,r6
  21222c:	3805883a 	mov	r2,r7
  212230:	e13ffd05 	stb	r4,-12(fp)
  212234:	e0fffe05 	stb	r3,-8(fp)
  212238:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
  21223c:	0089c404 	movi	r2,10000
  212240:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212244:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  212248:	00000c06 	br	21227c <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
  21224c:	e0bffa17 	ldw	r2,-24(fp)
  212250:	108002a8 	cmpgeui	r2,r2,10
  212254:	1000021e 	bne	r2,zero,212260 <alt_avalon_i2c_cmd_write+0x50>
  212258:	0109c404 	movi	r4,10000
  21225c:	02152ec0 	call	2152ec <alt_busy_sleep>
      if (--timeout == 0)
  212260:	e0bffa17 	ldw	r2,-24(fp)
  212264:	10bfffc4 	addi	r2,r2,-1
  212268:	e0bffa15 	stw	r2,-24(fp)
  21226c:	e0bffa17 	ldw	r2,-24(fp)
  212270:	1000021e 	bne	r2,zero,21227c <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
  212274:	00bfff84 	movi	r2,-2
  212278:	00001906 	br	2122e0 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
  21227c:	e0bffc17 	ldw	r2,-16(fp)
  212280:	10800317 	ldw	r2,12(r2)
  212284:	10800404 	addi	r2,r2,16
  212288:	10800037 	ldwio	r2,0(r2)
  21228c:	1080004c 	andi	r2,r2,1
  212290:	103fee26 	beq	r2,zero,21224c <_gp+0xffe00638>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
  212294:	e0bffc17 	ldw	r2,-16(fp)
  212298:	10800317 	ldw	r2,12(r2)
  21229c:	e13ffd03 	ldbu	r4,-12(fp)
  2122a0:	e0fffe03 	ldbu	r3,-8(fp)
  2122a4:	1806927a 	slli	r3,r3,9
  2122a8:	20c8b03a 	or	r4,r4,r3
  2122ac:	e0ffff03 	ldbu	r3,-4(fp)
  2122b0:	1806923a 	slli	r3,r3,8
  2122b4:	20c6b03a 	or	r3,r4,r3
  2122b8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  2122bc:	e0bffb04 	addi	r2,fp,-20
  2122c0:	100b883a 	mov	r5,r2
  2122c4:	e13ffc17 	ldw	r4,-16(fp)
  2122c8:	02124500 	call	212450 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
  2122cc:	e0bffb04 	addi	r2,fp,-20
  2122d0:	100b883a 	mov	r5,r2
  2122d4:	e13ffc17 	ldw	r4,-16(fp)
  2122d8:	021249c0 	call	21249c <alt_avalon_i2c_check_arblost>
    
    return status;
  2122dc:	e0bffb17 	ldw	r2,-20(fp)
}
  2122e0:	e037883a 	mov	sp,fp
  2122e4:	dfc00117 	ldw	ra,4(sp)
  2122e8:	df000017 	ldw	fp,0(sp)
  2122ec:	dec00204 	addi	sp,sp,8
  2122f0:	f800283a 	ret

002122f4 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
  2122f4:	defffa04 	addi	sp,sp,-24
  2122f8:	dfc00515 	stw	ra,20(sp)
  2122fc:	df000415 	stw	fp,16(sp)
  212300:	df000404 	addi	fp,sp,16
  212304:	e13ffd15 	stw	r4,-12(fp)
  212308:	e17ffe15 	stw	r5,-8(fp)
  21230c:	3005883a 	mov	r2,r6
  212310:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
  212314:	e0bffd17 	ldw	r2,-12(fp)
  212318:	10800d17 	ldw	r2,52(r2)
  21231c:	10800058 	cmpnei	r2,r2,1
  212320:	10001c1e 	bne	r2,zero,212394 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  212324:	e0bffd17 	ldw	r2,-12(fp)
  212328:	10800917 	ldw	r2,36(r2)
  21232c:	109e0014 	ori	r2,r2,30720
  212330:	1004d1fa 	srli	r2,r2,7
  212334:	1007883a 	mov	r3,r2
  212338:	00bfff84 	movi	r2,-2
  21233c:	1884703a 	and	r2,r3,r2
  212340:	1007883a 	mov	r3,r2
  212344:	e0bffe17 	ldw	r2,-8(fp)
  212348:	1884b03a 	or	r2,r3,r2
  21234c:	10803fcc 	andi	r2,r2,255
  212350:	e0ffff03 	ldbu	r3,-4(fp)
  212354:	000f883a 	mov	r7,zero
  212358:	180d883a 	mov	r6,r3
  21235c:	100b883a 	mov	r5,r2
  212360:	e13ffd17 	ldw	r4,-12(fp)
  212364:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212368:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
  21236c:	e0bffd17 	ldw	r2,-12(fp)
  212370:	10800917 	ldw	r2,36(r2)
  212374:	10803fcc 	andi	r2,r2,255
  212378:	000f883a 	mov	r7,zero
  21237c:	000d883a 	mov	r6,zero
  212380:	100b883a 	mov	r5,r2
  212384:	e13ffd17 	ldw	r4,-12(fp)
  212388:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  21238c:	e0bffc15 	stw	r2,-16(fp)
  212390:	00000e06 	br	2123cc <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
  212394:	e0bffd17 	ldw	r2,-12(fp)
  212398:	10800917 	ldw	r2,36(r2)
  21239c:	1085883a 	add	r2,r2,r2
  2123a0:	1007883a 	mov	r3,r2
  2123a4:	e0bffe17 	ldw	r2,-8(fp)
  2123a8:	1884b03a 	or	r2,r3,r2
  2123ac:	10803fcc 	andi	r2,r2,255
  2123b0:	e0ffff03 	ldbu	r3,-4(fp)
  2123b4:	000f883a 	mov	r7,zero
  2123b8:	180d883a 	mov	r6,r3
  2123bc:	100b883a 	mov	r5,r2
  2123c0:	e13ffd17 	ldw	r4,-12(fp)
  2123c4:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  2123c8:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
  2123cc:	e0bffc17 	ldw	r2,-16(fp)
}
  2123d0:	e037883a 	mov	sp,fp
  2123d4:	dfc00117 	ldw	ra,4(sp)
  2123d8:	df000017 	ldw	fp,0(sp)
  2123dc:	dec00204 	addi	sp,sp,8
  2123e0:	f800283a 	ret

002123e4 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
  2123e4:	defffd04 	addi	sp,sp,-12
  2123e8:	df000215 	stw	fp,8(sp)
  2123ec:	df000204 	addi	fp,sp,8
  2123f0:	e13ffe15 	stw	r4,-8(fp)
  2123f4:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
  2123f8:	e0bffe17 	ldw	r2,-8(fp)
  2123fc:	10c00917 	ldw	r3,36(r2)
  212400:	e0bfff17 	ldw	r2,-4(fp)
  212404:	10c00015 	stw	r3,0(r2)
}
  212408:	0001883a 	nop
  21240c:	e037883a 	mov	sp,fp
  212410:	df000017 	ldw	fp,0(sp)
  212414:	dec00104 	addi	sp,sp,4
  212418:	f800283a 	ret

0021241c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
  21241c:	defffd04 	addi	sp,sp,-12
  212420:	df000215 	stw	fp,8(sp)
  212424:	df000204 	addi	fp,sp,8
  212428:	e13ffe15 	stw	r4,-8(fp)
  21242c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
  212430:	e0bffe17 	ldw	r2,-8(fp)
  212434:	e0ffff17 	ldw	r3,-4(fp)
  212438:	10c00915 	stw	r3,36(r2)
}
  21243c:	0001883a 	nop
  212440:	e037883a 	mov	sp,fp
  212444:	df000017 	ldw	fp,0(sp)
  212448:	dec00104 	addi	sp,sp,4
  21244c:	f800283a 	ret

00212450 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
  212450:	defffd04 	addi	sp,sp,-12
  212454:	df000215 	stw	fp,8(sp)
  212458:	df000204 	addi	fp,sp,8
  21245c:	e13ffe15 	stw	r4,-8(fp)
  212460:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
  212464:	e0bffe17 	ldw	r2,-8(fp)
  212468:	10800317 	ldw	r2,12(r2)
  21246c:	10800404 	addi	r2,r2,16
  212470:	10800037 	ldwio	r2,0(r2)
  212474:	1080010c 	andi	r2,r2,4
  212478:	10000326 	beq	r2,zero,212488 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
  21247c:	e0bfff17 	ldw	r2,-4(fp)
  212480:	00fffec4 	movi	r3,-5
  212484:	10c00015 	stw	r3,0(r2)
    }
}
  212488:	0001883a 	nop
  21248c:	e037883a 	mov	sp,fp
  212490:	df000017 	ldw	fp,0(sp)
  212494:	dec00104 	addi	sp,sp,4
  212498:	f800283a 	ret

0021249c <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
  21249c:	defffd04 	addi	sp,sp,-12
  2124a0:	df000215 	stw	fp,8(sp)
  2124a4:	df000204 	addi	fp,sp,8
  2124a8:	e13ffe15 	stw	r4,-8(fp)
  2124ac:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
  2124b0:	e0bffe17 	ldw	r2,-8(fp)
  2124b4:	10800317 	ldw	r2,12(r2)
  2124b8:	10800404 	addi	r2,r2,16
  2124bc:	10800037 	ldwio	r2,0(r2)
  2124c0:	1080020c 	andi	r2,r2,8
  2124c4:	10000326 	beq	r2,zero,2124d4 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
  2124c8:	e0bfff17 	ldw	r2,-4(fp)
  2124cc:	00fffe84 	movi	r3,-6
  2124d0:	10c00015 	stw	r3,0(r2)
    }
}
  2124d4:	0001883a 	nop
  2124d8:	e037883a 	mov	sp,fp
  2124dc:	df000017 	ldw	fp,0(sp)
  2124e0:	dec00104 	addi	sp,sp,4
  2124e4:	f800283a 	ret

002124e8 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
  2124e8:	defff804 	addi	sp,sp,-32
  2124ec:	dfc00715 	stw	ra,28(sp)
  2124f0:	df000615 	stw	fp,24(sp)
  2124f4:	df000604 	addi	fp,sp,24
  2124f8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  2124fc:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
  212500:	e0bfff17 	ldw	r2,-4(fp)
  212504:	10800717 	ldw	r2,28(r2)
  212508:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
  21250c:	e0bffb17 	ldw	r2,-20(fp)
  212510:	10800117 	ldw	r2,4(r2)
  212514:	10800044 	addi	r2,r2,1
  212518:	0149c404 	movi	r5,10000
  21251c:	1009883a 	mov	r4,r2
  212520:	02032780 	call	203278 <__mulsi3>
  212524:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
  212528:	e0bffd04 	addi	r2,fp,-12
  21252c:	100b883a 	mov	r5,r2
  212530:	e13fff17 	ldw	r4,-4(fp)
  212534:	02133800 	call	213380 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
  212538:	e0bffd17 	ldw	r2,-12(fp)
  21253c:	100b883a 	mov	r5,r2
  212540:	e13fff17 	ldw	r4,-4(fp)
  212544:	02132b40 	call	2132b4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
  212548:	e0bffc04 	addi	r2,fp,-16
  21254c:	100b883a 	mov	r5,r2
  212550:	e13fff17 	ldw	r4,-4(fp)
  212554:	02124500 	call	212450 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
  212558:	e0bffc17 	ldw	r2,-16(fp)
  21255c:	10002226 	beq	r2,zero,2125e8 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
  212560:	e0bffb17 	ldw	r2,-20(fp)
  212564:	10800217 	ldw	r2,8(r2)
  212568:	10001d26 	beq	r2,zero,2125e0 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  21256c:	00000d06 	br	2125a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
  212570:	e0bffa17 	ldw	r2,-24(fp)
  212574:	108002a8 	cmpgeui	r2,r2,10
  212578:	1000021e 	bne	r2,zero,212584 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
  21257c:	0109c404 	movi	r4,10000
  212580:	02152ec0 	call	2152ec <alt_busy_sleep>
              if (--timeout == 0)
  212584:	e0bffa17 	ldw	r2,-24(fp)
  212588:	10bfffc4 	addi	r2,r2,-1
  21258c:	e0bffa15 	stw	r2,-24(fp)
  212590:	e0bffa17 	ldw	r2,-24(fp)
  212594:	1000031e 	bne	r2,zero,2125a4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
  212598:	00bfff84 	movi	r2,-2
  21259c:	e0bffc15 	stw	r2,-16(fp)
                 break;
  2125a0:	00000306 	br	2125b0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
  2125a4:	e13fff17 	ldw	r4,-4(fp)
  2125a8:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  2125ac:	103ff01e 	bne	r2,zero,212570 <_gp+0xffe0095c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
  2125b0:	e0bffb17 	ldw	r2,-20(fp)
  2125b4:	10800017 	ldw	r2,0(r2)
  2125b8:	e0fffe04 	addi	r3,fp,-8
  2125bc:	180f883a 	mov	r7,r3
  2125c0:	000d883a 	mov	r6,zero
  2125c4:	100b883a 	mov	r5,r2
  2125c8:	e13fff17 	ldw	r4,-4(fp)
  2125cc:	02120c00 	call	2120c0 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
  2125d0:	e13fff17 	ldw	r4,-4(fp)
  2125d4:	0211d240 	call	211d24 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
  2125d8:	e0bffb17 	ldw	r2,-20(fp)
  2125dc:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
  2125e0:	e0bffc17 	ldw	r2,-16(fp)
  2125e4:	00000a06 	br	212610 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
  2125e8:	e0bffb17 	ldw	r2,-20(fp)
  2125ec:	10800217 	ldw	r2,8(r2)
  2125f0:	10000626 	beq	r2,zero,21260c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
  2125f4:	e0bffd17 	ldw	r2,-12(fp)
  2125f8:	100b883a 	mov	r5,r2
  2125fc:	e13fff17 	ldw	r4,-4(fp)
  212600:	021331c0 	call	21331c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
  212604:	00bffe44 	movi	r2,-7
  212608:	00000106 	br	212610 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
  21260c:	0005883a 	mov	r2,zero
}
  212610:	e037883a 	mov	sp,fp
  212614:	dfc00117 	ldw	ra,4(sp)
  212618:	df000017 	ldw	fp,0(sp)
  21261c:	dec00204 	addi	sp,sp,8
  212620:	f800283a 	ret

00212624 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  212624:	defff704 	addi	sp,sp,-36
  212628:	dfc00815 	stw	ra,32(sp)
  21262c:	df000715 	stw	fp,28(sp)
  212630:	df000704 	addi	fp,sp,28
  212634:	e13ffc15 	stw	r4,-16(fp)
  212638:	e17ffd15 	stw	r5,-12(fp)
  21263c:	e1bffe15 	stw	r6,-8(fp)
  212640:	3805883a 	mov	r2,r7
  212644:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  212648:	0089c404 	movi	r2,10000
  21264c:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
  212650:	00002206 	br	2126dc <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
  212654:	e0bffb17 	ldw	r2,-20(fp)
  212658:	108002a8 	cmpgeui	r2,r2,10
  21265c:	1000021e 	bne	r2,zero,212668 <alt_avalon_i2c_master_tx+0x44>
  212660:	0109c404 	movi	r4,10000
  212664:	02152ec0 	call	2152ec <alt_busy_sleep>
      if (use_interrupts)
  212668:	e0bfff03 	ldbu	r2,-4(fp)
  21266c:	10000926 	beq	r2,zero,212694 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
  212670:	00800044 	movi	r2,1
  212674:	d8800015 	stw	r2,0(sp)
  212678:	000f883a 	mov	r7,zero
  21267c:	e1bffe17 	ldw	r6,-8(fp)
  212680:	e17ffd17 	ldw	r5,-12(fp)
  212684:	e13ffc17 	ldw	r4,-16(fp)
  212688:	0212bd00 	call	212bd0 <alt_avalon_i2c_master_transmit_using_interrupts>
  21268c:	e0bffa15 	stw	r2,-24(fp)
  212690:	00000806 	br	2126b4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
  212694:	00800044 	movi	r2,1
  212698:	d8800015 	stw	r2,0(sp)
  21269c:	000f883a 	mov	r7,zero
  2126a0:	e1bffe17 	ldw	r6,-8(fp)
  2126a4:	e17ffd17 	ldw	r5,-12(fp)
  2126a8:	e13ffc17 	ldw	r4,-16(fp)
  2126ac:	0212a100 	call	212a10 <alt_avalon_i2c_master_transmit>
  2126b0:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2126b4:	e0bffa17 	ldw	r2,-24(fp)
  2126b8:	10bffea0 	cmpeqi	r2,r2,-6
  2126bc:	1000061e 	bne	r2,zero,2126d8 <alt_avalon_i2c_master_tx+0xb4>
  2126c0:	e0bffa17 	ldw	r2,-24(fp)
  2126c4:	10bffee0 	cmpeqi	r2,r2,-5
  2126c8:	1000031e 	bne	r2,zero,2126d8 <alt_avalon_i2c_master_tx+0xb4>
  2126cc:	e0bffa17 	ldw	r2,-24(fp)
  2126d0:	10bffe58 	cmpnei	r2,r2,-7
  2126d4:	1000061e 	bne	r2,zero,2126f0 <alt_avalon_i2c_master_tx+0xcc>
  2126d8:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
  2126dc:	e0bffb17 	ldw	r2,-20(fp)
  2126e0:	10ffffc4 	addi	r3,r2,-1
  2126e4:	e0fffb15 	stw	r3,-20(fp)
  2126e8:	103fda1e 	bne	r2,zero,212654 <_gp+0xffe00a40>
  2126ec:	00000106 	br	2126f4 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
  2126f0:	0001883a 	nop
    }

    return status;
  2126f4:	e0bffa17 	ldw	r2,-24(fp)
}        
  2126f8:	e037883a 	mov	sp,fp
  2126fc:	dfc00117 	ldw	ra,4(sp)
  212700:	df000017 	ldw	fp,0(sp)
  212704:	dec00204 	addi	sp,sp,8
  212708:	f800283a 	ret

0021270c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
  21270c:	defff704 	addi	sp,sp,-36
  212710:	dfc00815 	stw	ra,32(sp)
  212714:	df000715 	stw	fp,28(sp)
  212718:	df000704 	addi	fp,sp,28
  21271c:	e13ffc15 	stw	r4,-16(fp)
  212720:	e17ffd15 	stw	r5,-12(fp)
  212724:	e1bffe15 	stw	r6,-8(fp)
  212728:	3805883a 	mov	r2,r7
  21272c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  212730:	0089c404 	movi	r2,10000
  212734:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
  212738:	e0bfff03 	ldbu	r2,-4(fp)
  21273c:	10003426 	beq	r2,zero,212810 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
  212740:	00001706 	br	2127a0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
  212744:	e0bffb17 	ldw	r2,-20(fp)
  212748:	108002a8 	cmpgeui	r2,r2,10
  21274c:	1000021e 	bne	r2,zero,212758 <alt_avalon_i2c_master_rx+0x4c>
  212750:	0109c404 	movi	r4,10000
  212754:	02152ec0 	call	2152ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  212758:	00800044 	movi	r2,1
  21275c:	d8800015 	stw	r2,0(sp)
  212760:	000f883a 	mov	r7,zero
  212764:	e1bffe17 	ldw	r6,-8(fp)
  212768:	e17ffd17 	ldw	r5,-12(fp)
  21276c:	e13ffc17 	ldw	r4,-16(fp)
  212770:	0212fec0 	call	212fec <alt_avalon_i2c_master_receive_using_interrupts>
  212774:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  212778:	e0bffa17 	ldw	r2,-24(fp)
  21277c:	10bffea0 	cmpeqi	r2,r2,-6
  212780:	1000061e 	bne	r2,zero,21279c <alt_avalon_i2c_master_rx+0x90>
  212784:	e0bffa17 	ldw	r2,-24(fp)
  212788:	10bffee0 	cmpeqi	r2,r2,-5
  21278c:	1000031e 	bne	r2,zero,21279c <alt_avalon_i2c_master_rx+0x90>
  212790:	e0bffa17 	ldw	r2,-24(fp)
  212794:	10bffe58 	cmpnei	r2,r2,-7
  212798:	1000221e 	bne	r2,zero,212824 <alt_avalon_i2c_master_rx+0x118>
  21279c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
  2127a0:	e0bffb17 	ldw	r2,-20(fp)
  2127a4:	10ffffc4 	addi	r3,r2,-1
  2127a8:	e0fffb15 	stw	r3,-20(fp)
  2127ac:	103fe51e 	bne	r2,zero,212744 <_gp+0xffe00b30>
  2127b0:	00001f06 	br	212830 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  2127b4:	e0bffb17 	ldw	r2,-20(fp)
  2127b8:	108002a8 	cmpgeui	r2,r2,10
  2127bc:	1000021e 	bne	r2,zero,2127c8 <alt_avalon_i2c_master_rx+0xbc>
  2127c0:	0109c404 	movi	r4,10000
  2127c4:	02152ec0 	call	2152ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
  2127c8:	00800044 	movi	r2,1
  2127cc:	d8800015 	stw	r2,0(sp)
  2127d0:	000f883a 	mov	r7,zero
  2127d4:	e1bffe17 	ldw	r6,-8(fp)
  2127d8:	e17ffd17 	ldw	r5,-12(fp)
  2127dc:	e13ffc17 	ldw	r4,-16(fp)
  2127e0:	0212ddc0 	call	212ddc <alt_avalon_i2c_master_receive>
  2127e4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2127e8:	e0bffa17 	ldw	r2,-24(fp)
  2127ec:	10bffea0 	cmpeqi	r2,r2,-6
  2127f0:	1000061e 	bne	r2,zero,21280c <alt_avalon_i2c_master_rx+0x100>
  2127f4:	e0bffa17 	ldw	r2,-24(fp)
  2127f8:	10bffee0 	cmpeqi	r2,r2,-5
  2127fc:	1000031e 	bne	r2,zero,21280c <alt_avalon_i2c_master_rx+0x100>
  212800:	e0bffa17 	ldw	r2,-24(fp)
  212804:	10bffe58 	cmpnei	r2,r2,-7
  212808:	1000081e 	bne	r2,zero,21282c <alt_avalon_i2c_master_rx+0x120>
  21280c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
  212810:	e0bffb17 	ldw	r2,-20(fp)
  212814:	10ffffc4 	addi	r3,r2,-1
  212818:	e0fffb15 	stw	r3,-20(fp)
  21281c:	103fe51e 	bne	r2,zero,2127b4 <_gp+0xffe00ba0>
  212820:	00000306 	br	212830 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  212824:	0001883a 	nop
  212828:	00000106 	br	212830 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
  21282c:	0001883a 	nop
      }
    }
    
    return status;
  212830:	e0bffa17 	ldw	r2,-24(fp)
}        
  212834:	e037883a 	mov	sp,fp
  212838:	dfc00117 	ldw	ra,4(sp)
  21283c:	df000017 	ldw	fp,0(sp)
  212840:	dec00204 	addi	sp,sp,8
  212844:	f800283a 	ret

00212848 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
  212848:	defff604 	addi	sp,sp,-40
  21284c:	dfc00915 	stw	ra,36(sp)
  212850:	df000815 	stw	fp,32(sp)
  212854:	df000804 	addi	fp,sp,32
  212858:	e13ffb15 	stw	r4,-20(fp)
  21285c:	e17ffc15 	stw	r5,-16(fp)
  212860:	e1bffd15 	stw	r6,-12(fp)
  212864:	e1fffe15 	stw	r7,-8(fp)
  212868:	e0800317 	ldw	r2,12(fp)
  21286c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
  212870:	0089c404 	movi	r2,10000
  212874:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
  212878:	e0bfff03 	ldbu	r2,-4(fp)
  21287c:	10005626 	beq	r2,zero,2129d8 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
  212880:	00002806 	br	212924 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
  212884:	e0bffa17 	ldw	r2,-24(fp)
  212888:	108002a8 	cmpgeui	r2,r2,10
  21288c:	1000021e 	bne	r2,zero,212898 <alt_avalon_i2c_master_tx_rx+0x50>
  212890:	0109c404 	movi	r4,10000
  212894:	02152ec0 	call	2152ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  212898:	d8000015 	stw	zero,0(sp)
  21289c:	000f883a 	mov	r7,zero
  2128a0:	e1bffd17 	ldw	r6,-12(fp)
  2128a4:	e17ffc17 	ldw	r5,-16(fp)
  2128a8:	e13ffb17 	ldw	r4,-20(fp)
  2128ac:	0212bd00 	call	212bd0 <alt_avalon_i2c_master_transmit_using_interrupts>
  2128b0:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2128b4:	e0bff917 	ldw	r2,-28(fp)
  2128b8:	10bffea0 	cmpeqi	r2,r2,-6
  2128bc:	1000191e 	bne	r2,zero,212924 <alt_avalon_i2c_master_tx_rx+0xdc>
  2128c0:	e0bff917 	ldw	r2,-28(fp)
  2128c4:	10bffee0 	cmpeqi	r2,r2,-5
  2128c8:	1000161e 	bne	r2,zero,212924 <alt_avalon_i2c_master_tx_rx+0xdc>
  2128cc:	e0bff917 	ldw	r2,-28(fp)
  2128d0:	10bffe58 	cmpnei	r2,r2,-7
  2128d4:	1000011e 	bne	r2,zero,2128dc <alt_avalon_i2c_master_tx_rx+0x94>
  2128d8:	00001206 	br	212924 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  2128dc:	00800044 	movi	r2,1
  2128e0:	d8800015 	stw	r2,0(sp)
  2128e4:	01c00044 	movi	r7,1
  2128e8:	e1800217 	ldw	r6,8(fp)
  2128ec:	e17ffe17 	ldw	r5,-8(fp)
  2128f0:	e13ffb17 	ldw	r4,-20(fp)
  2128f4:	0212fec0 	call	212fec <alt_avalon_i2c_master_receive_using_interrupts>
  2128f8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2128fc:	e0bff917 	ldw	r2,-28(fp)
  212900:	10bffea0 	cmpeqi	r2,r2,-6
  212904:	1000061e 	bne	r2,zero,212920 <alt_avalon_i2c_master_tx_rx+0xd8>
  212908:	e0bff917 	ldw	r2,-28(fp)
  21290c:	10bffee0 	cmpeqi	r2,r2,-5
  212910:	1000031e 	bne	r2,zero,212920 <alt_avalon_i2c_master_tx_rx+0xd8>
  212914:	e0bff917 	ldw	r2,-28(fp)
  212918:	10bffe58 	cmpnei	r2,r2,-7
  21291c:	1000331e 	bne	r2,zero,2129ec <alt_avalon_i2c_master_tx_rx+0x1a4>
  212920:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
  212924:	e0bffa17 	ldw	r2,-24(fp)
  212928:	10ffffc4 	addi	r3,r2,-1
  21292c:	e0fffa15 	stw	r3,-24(fp)
  212930:	103fd41e 	bne	r2,zero,212884 <_gp+0xffe00c70>
  212934:	00003006 	br	2129f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
  212938:	e0bffa17 	ldw	r2,-24(fp)
  21293c:	108002a8 	cmpgeui	r2,r2,10
  212940:	1000021e 	bne	r2,zero,21294c <alt_avalon_i2c_master_tx_rx+0x104>
  212944:	0109c404 	movi	r4,10000
  212948:	02152ec0 	call	2152ec <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
  21294c:	d8000015 	stw	zero,0(sp)
  212950:	000f883a 	mov	r7,zero
  212954:	e1bffd17 	ldw	r6,-12(fp)
  212958:	e17ffc17 	ldw	r5,-16(fp)
  21295c:	e13ffb17 	ldw	r4,-20(fp)
  212960:	0212a100 	call	212a10 <alt_avalon_i2c_master_transmit>
  212964:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  212968:	e0bff917 	ldw	r2,-28(fp)
  21296c:	10bffea0 	cmpeqi	r2,r2,-6
  212970:	1000191e 	bne	r2,zero,2129d8 <alt_avalon_i2c_master_tx_rx+0x190>
  212974:	e0bff917 	ldw	r2,-28(fp)
  212978:	10bffee0 	cmpeqi	r2,r2,-5
  21297c:	1000161e 	bne	r2,zero,2129d8 <alt_avalon_i2c_master_tx_rx+0x190>
  212980:	e0bff917 	ldw	r2,-28(fp)
  212984:	10bffe58 	cmpnei	r2,r2,-7
  212988:	1000011e 	bne	r2,zero,212990 <alt_avalon_i2c_master_tx_rx+0x148>
  21298c:	00001206 	br	2129d8 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
  212990:	00800044 	movi	r2,1
  212994:	d8800015 	stw	r2,0(sp)
  212998:	01c00044 	movi	r7,1
  21299c:	e1800217 	ldw	r6,8(fp)
  2129a0:	e17ffe17 	ldw	r5,-8(fp)
  2129a4:	e13ffb17 	ldw	r4,-20(fp)
  2129a8:	0212ddc0 	call	212ddc <alt_avalon_i2c_master_receive>
  2129ac:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  2129b0:	e0bff917 	ldw	r2,-28(fp)
  2129b4:	10bffea0 	cmpeqi	r2,r2,-6
  2129b8:	1000061e 	bne	r2,zero,2129d4 <alt_avalon_i2c_master_tx_rx+0x18c>
  2129bc:	e0bff917 	ldw	r2,-28(fp)
  2129c0:	10bffee0 	cmpeqi	r2,r2,-5
  2129c4:	1000031e 	bne	r2,zero,2129d4 <alt_avalon_i2c_master_tx_rx+0x18c>
  2129c8:	e0bff917 	ldw	r2,-28(fp)
  2129cc:	10bffe58 	cmpnei	r2,r2,-7
  2129d0:	1000081e 	bne	r2,zero,2129f4 <alt_avalon_i2c_master_tx_rx+0x1ac>
  2129d4:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
  2129d8:	e0bffa17 	ldw	r2,-24(fp)
  2129dc:	10ffffc4 	addi	r3,r2,-1
  2129e0:	e0fffa15 	stw	r3,-24(fp)
  2129e4:	103fd41e 	bne	r2,zero,212938 <_gp+0xffe00d24>
  2129e8:	00000306 	br	2129f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  2129ec:	0001883a 	nop
  2129f0:	00000106 	br	2129f8 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
  2129f4:	0001883a 	nop
      }
    }
    
    return status;
  2129f8:	e0bff917 	ldw	r2,-28(fp)
}                                       
  2129fc:	e037883a 	mov	sp,fp
  212a00:	dfc00117 	ldw	ra,4(sp)
  212a04:	df000017 	ldw	fp,0(sp)
  212a08:	dec00204 	addi	sp,sp,8
  212a0c:	f800283a 	ret

00212a10 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  212a10:	defff704 	addi	sp,sp,-36
  212a14:	dfc00815 	stw	ra,32(sp)
  212a18:	df000715 	stw	fp,28(sp)
  212a1c:	df000704 	addi	fp,sp,28
  212a20:	e13ffb15 	stw	r4,-20(fp)
  212a24:	e17ffc15 	stw	r5,-16(fp)
  212a28:	e1bffd15 	stw	r6,-12(fp)
  212a2c:	3807883a 	mov	r3,r7
  212a30:	e0800217 	ldw	r2,8(fp)
  212a34:	e0fffe05 	stb	r3,-8(fp)
  212a38:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212a3c:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
  212a40:	0149c404 	movi	r5,10000
  212a44:	e13ffd17 	ldw	r4,-12(fp)
  212a48:	02032780 	call	203278 <__mulsi3>
  212a4c:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
  212a50:	e0bffd17 	ldw	r2,-12(fp)
  212a54:	1000021e 	bne	r2,zero,212a60 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212a58:	0005883a 	mov	r2,zero
  212a5c:	00005706 	br	212bbc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212a60:	e0bffe03 	ldbu	r2,-8(fp)
  212a64:	10000a1e 	bne	r2,zero,212a90 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212a68:	e13ffb17 	ldw	r4,-20(fp)
  212a6c:	0211c8c0 	call	211c8c <alt_avalon_i2c_enable>
  212a70:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212a74:	e0bffa17 	ldw	r2,-24(fp)
  212a78:	10000226 	beq	r2,zero,212a84 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
  212a7c:	e0bffa17 	ldw	r2,-24(fp)
  212a80:	00004e06 	br	212bbc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212a84:	01400704 	movi	r5,28
  212a88:	e13ffb17 	ldw	r4,-20(fp)
  212a8c:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  212a90:	e0bffe03 	ldbu	r2,-8(fp)
  212a94:	100d883a 	mov	r6,r2
  212a98:	000b883a 	mov	r5,zero
  212a9c:	e13ffb17 	ldw	r4,-20(fp)
  212aa0:	02122f40 	call	2122f4 <alt_avalon_i2c_send_address>
  212aa4:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
  212aa8:	e0bffa17 	ldw	r2,-24(fp)
  212aac:	1000271e 	bne	r2,zero,212b4c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212ab0:	00000f06 	br	212af0 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212ab4:	e0bffc17 	ldw	r2,-16(fp)
  212ab8:	10800003 	ldbu	r2,0(r2)
  212abc:	10803fcc 	andi	r2,r2,255
  212ac0:	000f883a 	mov	r7,zero
  212ac4:	000d883a 	mov	r6,zero
  212ac8:	100b883a 	mov	r5,r2
  212acc:	e13ffb17 	ldw	r4,-20(fp)
  212ad0:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212ad4:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
  212ad8:	e0bffc17 	ldw	r2,-16(fp)
  212adc:	10800044 	addi	r2,r2,1
  212ae0:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212ae4:	e0bffd17 	ldw	r2,-12(fp)
  212ae8:	10bfffc4 	addi	r2,r2,-1
  212aec:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212af0:	e0bffd17 	ldw	r2,-12(fp)
  212af4:	108000b0 	cmpltui	r2,r2,2
  212af8:	1000021e 	bne	r2,zero,212b04 <alt_avalon_i2c_master_transmit+0xf4>
  212afc:	e0bffa17 	ldw	r2,-24(fp)
  212b00:	103fec26 	beq	r2,zero,212ab4 <_gp+0xffe00ea0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212b04:	e0bffa17 	ldw	r2,-24(fp)
  212b08:	1000101e 	bne	r2,zero,212b4c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212b0c:	e0bffc17 	ldw	r2,-16(fp)
  212b10:	10800003 	ldbu	r2,0(r2)
  212b14:	10803fcc 	andi	r2,r2,255
  212b18:	e0ffff03 	ldbu	r3,-4(fp)
  212b1c:	180f883a 	mov	r7,r3
  212b20:	000d883a 	mov	r6,zero
  212b24:	100b883a 	mov	r5,r2
  212b28:	e13ffb17 	ldw	r4,-20(fp)
  212b2c:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212b30:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
  212b34:	e0bffc17 	ldw	r2,-16(fp)
  212b38:	10800044 	addi	r2,r2,1
  212b3c:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212b40:	e0bffd17 	ldw	r2,-12(fp)
  212b44:	10bfffc4 	addi	r2,r2,-1
  212b48:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  212b4c:	e0bfff03 	ldbu	r2,-4(fp)
  212b50:	1000101e 	bne	r2,zero,212b94 <alt_avalon_i2c_master_transmit+0x184>
  212b54:	e0bffa17 	ldw	r2,-24(fp)
  212b58:	10001726 	beq	r2,zero,212bb8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212b5c:	00000d06 	br	212b94 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
  212b60:	e0bff917 	ldw	r2,-28(fp)
  212b64:	108002a8 	cmpgeui	r2,r2,10
  212b68:	1000021e 	bne	r2,zero,212b74 <alt_avalon_i2c_master_transmit+0x164>
  212b6c:	0109c404 	movi	r4,10000
  212b70:	02152ec0 	call	2152ec <alt_busy_sleep>
            if (--timeout == 0)
  212b74:	e0bff917 	ldw	r2,-28(fp)
  212b78:	10bfffc4 	addi	r2,r2,-1
  212b7c:	e0bff915 	stw	r2,-28(fp)
  212b80:	e0bff917 	ldw	r2,-28(fp)
  212b84:	1000031e 	bne	r2,zero,212b94 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212b88:	00bfff84 	movi	r2,-2
  212b8c:	e0bffa15 	stw	r2,-24(fp)
               break;
  212b90:	00000306 	br	212ba0 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212b94:	e13ffb17 	ldw	r4,-20(fp)
  212b98:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  212b9c:	103ff01e 	bne	r2,zero,212b60 <_gp+0xffe00f4c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
  212ba0:	e0bffa04 	addi	r2,fp,-24
  212ba4:	100b883a 	mov	r5,r2
  212ba8:	e13ffb17 	ldw	r4,-20(fp)
  212bac:	02124500 	call	212450 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212bb0:	e13ffb17 	ldw	r4,-20(fp)
  212bb4:	0211d240 	call	211d24 <alt_avalon_i2c_disable>
    }


    return status;
  212bb8:	e0bffa17 	ldw	r2,-24(fp)
}
  212bbc:	e037883a 	mov	sp,fp
  212bc0:	dfc00117 	ldw	ra,4(sp)
  212bc4:	df000017 	ldw	fp,0(sp)
  212bc8:	dec00204 	addi	sp,sp,8
  212bcc:	f800283a 	ret

00212bd0 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
  212bd0:	defff604 	addi	sp,sp,-40
  212bd4:	dfc00915 	stw	ra,36(sp)
  212bd8:	df000815 	stw	fp,32(sp)
  212bdc:	df000804 	addi	fp,sp,32
  212be0:	e13ffb15 	stw	r4,-20(fp)
  212be4:	e17ffc15 	stw	r5,-16(fp)
  212be8:	e1bffd15 	stw	r6,-12(fp)
  212bec:	3807883a 	mov	r3,r7
  212bf0:	e0800217 	ldw	r2,8(fp)
  212bf4:	e0fffe05 	stb	r3,-8(fp)
  212bf8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212bfc:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
  212c00:	0149c404 	movi	r5,10000
  212c04:	e13ffd17 	ldw	r4,-12(fp)
  212c08:	02032780 	call	203278 <__mulsi3>
  212c0c:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  212c10:	e0bffb17 	ldw	r2,-20(fp)
  212c14:	10800717 	ldw	r2,28(r2)
  212c18:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
  212c1c:	e0bffd17 	ldw	r2,-12(fp)
  212c20:	1000021e 	bne	r2,zero,212c2c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212c24:	0005883a 	mov	r2,zero
  212c28:	00006706 	br	212dc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  212c2c:	e0bffb17 	ldw	r2,-20(fp)
  212c30:	10c00617 	ldw	r3,24(r2)
  212c34:	00800874 	movhi	r2,33
  212c38:	10864404 	addi	r2,r2,6416
  212c3c:	18800226 	beq	r3,r2,212c48 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  212c40:	00bfff44 	movi	r2,-3
  212c44:	00006006 	br	212dc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212c48:	e0bffe03 	ldbu	r2,-8(fp)
  212c4c:	10000a1e 	bne	r2,zero,212c78 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212c50:	e13ffb17 	ldw	r4,-20(fp)
  212c54:	0211c8c0 	call	211c8c <alt_avalon_i2c_enable>
  212c58:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212c5c:	e0bff817 	ldw	r2,-32(fp)
  212c60:	10000226 	beq	r2,zero,212c6c <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
  212c64:	e0bff817 	ldw	r2,-32(fp)
  212c68:	00005706 	br	212dc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212c6c:	01400704 	movi	r5,28
  212c70:	e13ffb17 	ldw	r4,-20(fp)
  212c74:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
  212c78:	e0bffe03 	ldbu	r2,-8(fp)
  212c7c:	100d883a 	mov	r6,r2
  212c80:	000b883a 	mov	r5,zero
  212c84:	e13ffb17 	ldw	r4,-20(fp)
  212c88:	02122f40 	call	2122f4 <alt_avalon_i2c_send_address>
  212c8c:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
  212c90:	e0bff817 	ldw	r2,-32(fp)
  212c94:	1000271e 	bne	r2,zero,212d34 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212c98:	00000f06 	br	212cd8 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212c9c:	e0bffc17 	ldw	r2,-16(fp)
  212ca0:	10800003 	ldbu	r2,0(r2)
  212ca4:	10803fcc 	andi	r2,r2,255
  212ca8:	000f883a 	mov	r7,zero
  212cac:	000d883a 	mov	r6,zero
  212cb0:	100b883a 	mov	r5,r2
  212cb4:	e13ffb17 	ldw	r4,-20(fp)
  212cb8:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212cbc:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
  212cc0:	e0bffc17 	ldw	r2,-16(fp)
  212cc4:	10800044 	addi	r2,r2,1
  212cc8:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212ccc:	e0bffd17 	ldw	r2,-12(fp)
  212cd0:	10bfffc4 	addi	r2,r2,-1
  212cd4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
  212cd8:	e0bffd17 	ldw	r2,-12(fp)
  212cdc:	108000b0 	cmpltui	r2,r2,2
  212ce0:	1000021e 	bne	r2,zero,212cec <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
  212ce4:	e0bff817 	ldw	r2,-32(fp)
  212ce8:	103fec26 	beq	r2,zero,212c9c <_gp+0xffe01088>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212cec:	e0bff817 	ldw	r2,-32(fp)
  212cf0:	1000101e 	bne	r2,zero,212d34 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212cf4:	e0bffc17 	ldw	r2,-16(fp)
  212cf8:	10800003 	ldbu	r2,0(r2)
  212cfc:	10803fcc 	andi	r2,r2,255
  212d00:	e0ffff03 	ldbu	r3,-4(fp)
  212d04:	180f883a 	mov	r7,r3
  212d08:	000d883a 	mov	r6,zero
  212d0c:	100b883a 	mov	r5,r2
  212d10:	e13ffb17 	ldw	r4,-20(fp)
  212d14:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212d18:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
  212d1c:	e0bffc17 	ldw	r2,-16(fp)
  212d20:	10800044 	addi	r2,r2,1
  212d24:	e0bffc15 	stw	r2,-16(fp)
            --size;
  212d28:	e0bffd17 	ldw	r2,-12(fp)
  212d2c:	10bfffc4 	addi	r2,r2,-1
  212d30:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  212d34:	e0bff817 	ldw	r2,-32(fp)
  212d38:	10001426 	beq	r2,zero,212d8c <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212d3c:	00000d06 	br	212d74 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
  212d40:	e0bff917 	ldw	r2,-28(fp)
  212d44:	108002a8 	cmpgeui	r2,r2,10
  212d48:	1000021e 	bne	r2,zero,212d54 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
  212d4c:	0109c404 	movi	r4,10000
  212d50:	02152ec0 	call	2152ec <alt_busy_sleep>
            if (--timeout == 0)
  212d54:	e0bff917 	ldw	r2,-28(fp)
  212d58:	10bfffc4 	addi	r2,r2,-1
  212d5c:	e0bff915 	stw	r2,-28(fp)
  212d60:	e0bff917 	ldw	r2,-28(fp)
  212d64:	1000031e 	bne	r2,zero,212d74 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212d68:	00bfff84 	movi	r2,-2
  212d6c:	e0bff815 	stw	r2,-32(fp)
               break;
  212d70:	00000306 	br	212d80 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
  212d74:	e13ffb17 	ldw	r4,-20(fp)
  212d78:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  212d7c:	103ff01e 	bne	r2,zero,212d40 <_gp+0xffe0112c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212d80:	e13ffb17 	ldw	r4,-20(fp)
  212d84:	0211d240 	call	211d24 <alt_avalon_i2c_disable>
  212d88:	00000e06 	br	212dc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
  212d8c:	e0bfff03 	ldbu	r2,-4(fp)
  212d90:	10000c26 	beq	r2,zero,212dc4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212d94:	01400704 	movi	r5,28
  212d98:	e13ffb17 	ldw	r4,-20(fp)
  212d9c:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
  212da0:	000b883a 	mov	r5,zero
  212da4:	e13ffb17 	ldw	r4,-20(fp)
  212da8:	02134c00 	call	2134c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
  212dac:	e0bffa17 	ldw	r2,-24(fp)
  212db0:	00c00044 	movi	r3,1
  212db4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
  212db8:	01400044 	movi	r5,1
  212dbc:	e13ffb17 	ldw	r4,-20(fp)
  212dc0:	021331c0 	call	21331c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
  212dc4:	e0bff817 	ldw	r2,-32(fp)
}
  212dc8:	e037883a 	mov	sp,fp
  212dcc:	dfc00117 	ldw	ra,4(sp)
  212dd0:	df000017 	ldw	fp,0(sp)
  212dd4:	dec00204 	addi	sp,sp,8
  212dd8:	f800283a 	ret

00212ddc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  212ddc:	defff404 	addi	sp,sp,-48
  212de0:	dfc00b15 	stw	ra,44(sp)
  212de4:	df000a15 	stw	fp,40(sp)
  212de8:	df000a04 	addi	fp,sp,40
  212dec:	e13ffb15 	stw	r4,-20(fp)
  212df0:	e17ffc15 	stw	r5,-16(fp)
  212df4:	e1bffd15 	stw	r6,-12(fp)
  212df8:	3807883a 	mov	r3,r7
  212dfc:	e0800217 	ldw	r2,8(fp)
  212e00:	e0fffe05 	stb	r3,-8(fp)
  212e04:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  212e08:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
  212e0c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
  212e10:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
  212e14:	e0bffd17 	ldw	r2,-12(fp)
  212e18:	1000021e 	bne	r2,zero,212e24 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
  212e1c:	0005883a 	mov	r2,zero
  212e20:	00006d06 	br	212fd8 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  212e24:	e0bffe03 	ldbu	r2,-8(fp)
  212e28:	10000a1e 	bne	r2,zero,212e54 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  212e2c:	e13ffb17 	ldw	r4,-20(fp)
  212e30:	0211c8c0 	call	211c8c <alt_avalon_i2c_enable>
  212e34:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  212e38:	e0bff917 	ldw	r2,-28(fp)
  212e3c:	10000226 	beq	r2,zero,212e48 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
  212e40:	e0bff917 	ldw	r2,-28(fp)
  212e44:	00006406 	br	212fd8 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  212e48:	01400704 	movi	r5,28
  212e4c:	e13ffb17 	ldw	r4,-20(fp)
  212e50:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  212e54:	e0bffe03 	ldbu	r2,-8(fp)
  212e58:	100d883a 	mov	r6,r2
  212e5c:	01400044 	movi	r5,1
  212e60:	e13ffb17 	ldw	r4,-20(fp)
  212e64:	02122f40 	call	2122f4 <alt_avalon_i2c_send_address>
  212e68:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  212e6c:	e0bff917 	ldw	r2,-28(fp)
  212e70:	1000341e 	bne	r2,zero,212f44 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  212e74:	00001906 	br	212edc <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  212e78:	000f883a 	mov	r7,zero
  212e7c:	000d883a 	mov	r6,zero
  212e80:	000b883a 	mov	r5,zero
  212e84:	e13ffb17 	ldw	r4,-20(fp)
  212e88:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212e8c:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
  212e90:	e0bff817 	ldw	r2,-32(fp)
  212e94:	10800044 	addi	r2,r2,1
  212e98:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
  212e9c:	e0bff917 	ldw	r2,-28(fp)
  212ea0:	10000e1e 	bne	r2,zero,212edc <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
  212ea4:	e0bffa04 	addi	r2,fp,-24
  212ea8:	100f883a 	mov	r7,r2
  212eac:	000d883a 	mov	r6,zero
  212eb0:	e17ffc17 	ldw	r5,-16(fp)
  212eb4:	e13ffb17 	ldw	r4,-20(fp)
  212eb8:	02120c00 	call	2120c0 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
  212ebc:	e0bffa17 	ldw	r2,-24(fp)
  212ec0:	e0fffc17 	ldw	r3,-16(fp)
  212ec4:	1885883a 	add	r2,r3,r2
  212ec8:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
  212ecc:	e0bffa17 	ldw	r2,-24(fp)
  212ed0:	e0fff717 	ldw	r3,-36(fp)
  212ed4:	1885883a 	add	r2,r3,r2
  212ed8:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  212edc:	e0bffd17 	ldw	r2,-12(fp)
  212ee0:	10bfffc4 	addi	r2,r2,-1
  212ee4:	e0fff817 	ldw	r3,-32(fp)
  212ee8:	1880022e 	bgeu	r3,r2,212ef4 <alt_avalon_i2c_master_receive+0x118>
  212eec:	e0bff917 	ldw	r2,-28(fp)
  212ef0:	103fe126 	beq	r2,zero,212e78 <_gp+0xffe01264>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  212ef4:	e0bff917 	ldw	r2,-28(fp)
  212ef8:	1000121e 	bne	r2,zero,212f44 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  212efc:	e0bfff03 	ldbu	r2,-4(fp)
  212f00:	100f883a 	mov	r7,r2
  212f04:	000d883a 	mov	r6,zero
  212f08:	000b883a 	mov	r5,zero
  212f0c:	e13ffb17 	ldw	r4,-20(fp)
  212f10:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  212f14:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  212f18:	00000a06 	br	212f44 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
  212f1c:	e17ffc17 	ldw	r5,-16(fp)
  212f20:	e13ffb17 	ldw	r4,-20(fp)
  212f24:	02121680 	call	212168 <alt_avalon_i2c_rx_read>
  212f28:	e0bff915 	stw	r2,-28(fp)
        buffer++;
  212f2c:	e0bffc17 	ldw	r2,-16(fp)
  212f30:	10800044 	addi	r2,r2,1
  212f34:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
  212f38:	e0bff717 	ldw	r2,-36(fp)
  212f3c:	10800044 	addi	r2,r2,1
  212f40:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
  212f44:	e0fff717 	ldw	r3,-36(fp)
  212f48:	e0bffd17 	ldw	r2,-12(fp)
  212f4c:	1880022e 	bgeu	r3,r2,212f58 <alt_avalon_i2c_master_receive+0x17c>
  212f50:	e0bff917 	ldw	r2,-28(fp)
  212f54:	103ff126 	beq	r2,zero,212f1c <_gp+0xffe01308>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
  212f58:	e0bfff03 	ldbu	r2,-4(fp)
  212f5c:	1000021e 	bne	r2,zero,212f68 <alt_avalon_i2c_master_receive+0x18c>
  212f60:	e0bff917 	ldw	r2,-28(fp)
  212f64:	10001b26 	beq	r2,zero,212fd4 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
  212f68:	0149c404 	movi	r5,10000
  212f6c:	e13ffd17 	ldw	r4,-12(fp)
  212f70:	02032780 	call	203278 <__mulsi3>
  212f74:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  212f78:	00000d06 	br	212fb0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
  212f7c:	e0bff617 	ldw	r2,-40(fp)
  212f80:	108002a8 	cmpgeui	r2,r2,10
  212f84:	1000021e 	bne	r2,zero,212f90 <alt_avalon_i2c_master_receive+0x1b4>
  212f88:	0109c404 	movi	r4,10000
  212f8c:	02152ec0 	call	2152ec <alt_busy_sleep>
            if (--timeout == 0)
  212f90:	e0bff617 	ldw	r2,-40(fp)
  212f94:	10bfffc4 	addi	r2,r2,-1
  212f98:	e0bff615 	stw	r2,-40(fp)
  212f9c:	e0bff617 	ldw	r2,-40(fp)
  212fa0:	1000031e 	bne	r2,zero,212fb0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  212fa4:	00bfff84 	movi	r2,-2
  212fa8:	e0bff915 	stw	r2,-28(fp)
               break;
  212fac:	00000306 	br	212fbc <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  212fb0:	e13ffb17 	ldw	r4,-20(fp)
  212fb4:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  212fb8:	103ff01e 	bne	r2,zero,212f7c <_gp+0xffe01368>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
  212fbc:	e0bff904 	addi	r2,fp,-28
  212fc0:	100b883a 	mov	r5,r2
  212fc4:	e13ffb17 	ldw	r4,-20(fp)
  212fc8:	02124500 	call	212450 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  212fcc:	e13ffb17 	ldw	r4,-20(fp)
  212fd0:	0211d240 	call	211d24 <alt_avalon_i2c_disable>
    }

    return status;
  212fd4:	e0bff917 	ldw	r2,-28(fp)
}
  212fd8:	e037883a 	mov	sp,fp
  212fdc:	dfc00117 	ldw	ra,4(sp)
  212fe0:	df000017 	ldw	fp,0(sp)
  212fe4:	dec00204 	addi	sp,sp,8
  212fe8:	f800283a 	ret

00212fec <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
  212fec:	defff504 	addi	sp,sp,-44
  212ff0:	dfc00a15 	stw	ra,40(sp)
  212ff4:	df000915 	stw	fp,36(sp)
  212ff8:	df000904 	addi	fp,sp,36
  212ffc:	e13ffb15 	stw	r4,-20(fp)
  213000:	e17ffc15 	stw	r5,-16(fp)
  213004:	e1bffd15 	stw	r6,-12(fp)
  213008:	3807883a 	mov	r3,r7
  21300c:	e0800217 	ldw	r2,8(fp)
  213010:	e0fffe05 	stb	r3,-8(fp)
  213014:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
  213018:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
  21301c:	e0bffb17 	ldw	r2,-20(fp)
  213020:	10800717 	ldw	r2,28(r2)
  213024:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
  213028:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
  21302c:	e0bffd17 	ldw	r2,-12(fp)
  213030:	1000021e 	bne	r2,zero,21303c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
  213034:	0005883a 	mov	r2,zero
  213038:	00006306 	br	2131c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
  21303c:	e0bffb17 	ldw	r2,-20(fp)
  213040:	10c00617 	ldw	r3,24(r2)
  213044:	00800874 	movhi	r2,33
  213048:	10864404 	addi	r2,r2,6416
  21304c:	18800226 	beq	r3,r2,213058 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
  213050:	00bfff44 	movi	r2,-3
  213054:	00005c06 	br	2131c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
  213058:	e0bffe03 	ldbu	r2,-8(fp)
  21305c:	10000a1e 	bne	r2,zero,213088 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
  213060:	e13ffb17 	ldw	r4,-20(fp)
  213064:	0211c8c0 	call	211c8c <alt_avalon_i2c_enable>
  213068:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
  21306c:	e0bff717 	ldw	r2,-36(fp)
  213070:	10000226 	beq	r2,zero,21307c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
  213074:	e0bff717 	ldw	r2,-36(fp)
  213078:	00005306 	br	2131c8 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  21307c:	01400704 	movi	r5,28
  213080:	e13ffb17 	ldw	r4,-20(fp)
  213084:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
  213088:	e0bffe03 	ldbu	r2,-8(fp)
  21308c:	100d883a 	mov	r6,r2
  213090:	01400044 	movi	r5,1
  213094:	e13ffb17 	ldw	r4,-20(fp)
  213098:	02122f40 	call	2122f4 <alt_avalon_i2c_send_address>
  21309c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
  2130a0:	e0bff717 	ldw	r2,-36(fp)
  2130a4:	1000191e 	bne	r2,zero,21310c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2130a8:	00000906 	br	2130d0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
  2130ac:	000f883a 	mov	r7,zero
  2130b0:	000d883a 	mov	r6,zero
  2130b4:	000b883a 	mov	r5,zero
  2130b8:	e13ffb17 	ldw	r4,-20(fp)
  2130bc:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  2130c0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
  2130c4:	e0bff917 	ldw	r2,-28(fp)
  2130c8:	10800044 	addi	r2,r2,1
  2130cc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
  2130d0:	e0bffd17 	ldw	r2,-12(fp)
  2130d4:	10bfffc4 	addi	r2,r2,-1
  2130d8:	e0fff917 	ldw	r3,-28(fp)
  2130dc:	1880022e 	bgeu	r3,r2,2130e8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
  2130e0:	e0bff717 	ldw	r2,-36(fp)
  2130e4:	103ff126 	beq	r2,zero,2130ac <_gp+0xffe01498>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
  2130e8:	e0bff717 	ldw	r2,-36(fp)
  2130ec:	1000071e 	bne	r2,zero,21310c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
  2130f0:	e0bfff03 	ldbu	r2,-4(fp)
  2130f4:	100f883a 	mov	r7,r2
  2130f8:	000d883a 	mov	r6,zero
  2130fc:	000b883a 	mov	r5,zero
  213100:	e13ffb17 	ldw	r4,-20(fp)
  213104:	02122100 	call	212210 <alt_avalon_i2c_cmd_write>
  213108:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
  21310c:	e0bff717 	ldw	r2,-36(fp)
  213110:	10001826 	beq	r2,zero,213174 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
  213114:	0149c404 	movi	r5,10000
  213118:	e13ffd17 	ldw	r4,-12(fp)
  21311c:	02032780 	call	203278 <__mulsi3>
  213120:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
  213124:	00000d06 	br	21315c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
  213128:	e0bff817 	ldw	r2,-32(fp)
  21312c:	108002a8 	cmpgeui	r2,r2,10
  213130:	1000021e 	bne	r2,zero,21313c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
  213134:	0109c404 	movi	r4,10000
  213138:	02152ec0 	call	2152ec <alt_busy_sleep>
            if (--timeout == 0)
  21313c:	e0bff817 	ldw	r2,-32(fp)
  213140:	10bfffc4 	addi	r2,r2,-1
  213144:	e0bff815 	stw	r2,-32(fp)
  213148:	e0bff817 	ldw	r2,-32(fp)
  21314c:	1000031e 	bne	r2,zero,21315c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
  213150:	00bfff84 	movi	r2,-2
  213154:	e0bff715 	stw	r2,-36(fp)
               break;
  213158:	00000306 	br	213168 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
  21315c:	e13ffb17 	ldw	r4,-20(fp)
  213160:	021207c0 	call	21207c <alt_avalon_i2c_is_busy>
  213164:	103ff01e 	bne	r2,zero,213128 <_gp+0xffe01514>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
  213168:	e13ffb17 	ldw	r4,-20(fp)
  21316c:	0211d240 	call	211d24 <alt_avalon_i2c_disable>
  213170:	00001406 	br	2131c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
  213174:	e0bfff03 	ldbu	r2,-4(fp)
  213178:	10001226 	beq	r2,zero,2131c4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
  21317c:	01400704 	movi	r5,28
  213180:	e13ffb17 	ldw	r4,-20(fp)
  213184:	02132780 	call	213278 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
  213188:	000b883a 	mov	r5,zero
  21318c:	e13ffb17 	ldw	r4,-20(fp)
  213190:	02134100 	call	213410 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
  213194:	e0bffa17 	ldw	r2,-24(fp)
  213198:	00c00084 	movi	r3,2
  21319c:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
  2131a0:	e0bffa17 	ldw	r2,-24(fp)
  2131a4:	e0fffc17 	ldw	r3,-16(fp)
  2131a8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
  2131ac:	e0bffa17 	ldw	r2,-24(fp)
  2131b0:	e0fffd17 	ldw	r3,-12(fp)
  2131b4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
  2131b8:	01400084 	movi	r5,2
  2131bc:	e13ffb17 	ldw	r4,-20(fp)
  2131c0:	021331c0 	call	21331c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
  2131c4:	e0bff717 	ldw	r2,-36(fp)
}
  2131c8:	e037883a 	mov	sp,fp
  2131cc:	dfc00117 	ldw	ra,4(sp)
  2131d0:	df000017 	ldw	fp,0(sp)
  2131d4:	dec00204 	addi	sp,sp,8
  2131d8:	f800283a 	ret

002131dc <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
  2131dc:	defffd04 	addi	sp,sp,-12
  2131e0:	df000215 	stw	fp,8(sp)
  2131e4:	df000204 	addi	fp,sp,8
  2131e8:	e13ffe15 	stw	r4,-8(fp)
  2131ec:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
  2131f0:	e0bffe17 	ldw	r2,-8(fp)
  2131f4:	10800317 	ldw	r2,12(r2)
  2131f8:	10800404 	addi	r2,r2,16
  2131fc:	10c00037 	ldwio	r3,0(r2)
  213200:	e0bffe17 	ldw	r2,-8(fp)
  213204:	10800317 	ldw	r2,12(r2)
  213208:	10800304 	addi	r2,r2,12
  21320c:	10800037 	ldwio	r2,0(r2)
  213210:	1884703a 	and	r2,r3,r2
  213214:	1007883a 	mov	r3,r2
  213218:	e0bfff17 	ldw	r2,-4(fp)
  21321c:	10c00015 	stw	r3,0(r2)
}
  213220:	0001883a 	nop
  213224:	e037883a 	mov	sp,fp
  213228:	df000017 	ldw	fp,0(sp)
  21322c:	dec00104 	addi	sp,sp,4
  213230:	f800283a 	ret

00213234 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
  213234:	defffd04 	addi	sp,sp,-12
  213238:	df000215 	stw	fp,8(sp)
  21323c:	df000204 	addi	fp,sp,8
  213240:	e13ffe15 	stw	r4,-8(fp)
  213244:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
  213248:	e0bffe17 	ldw	r2,-8(fp)
  21324c:	10800317 	ldw	r2,12(r2)
  213250:	10800404 	addi	r2,r2,16
  213254:	10800037 	ldwio	r2,0(r2)
  213258:	1007883a 	mov	r3,r2
  21325c:	e0bfff17 	ldw	r2,-4(fp)
  213260:	10c00015 	stw	r3,0(r2)
}
  213264:	0001883a 	nop
  213268:	e037883a 	mov	sp,fp
  21326c:	df000017 	ldw	fp,0(sp)
  213270:	dec00104 	addi	sp,sp,4
  213274:	f800283a 	ret

00213278 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  213278:	defffd04 	addi	sp,sp,-12
  21327c:	df000215 	stw	fp,8(sp)
  213280:	df000204 	addi	fp,sp,8
  213284:	e13ffe15 	stw	r4,-8(fp)
  213288:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
  21328c:	e0bffe17 	ldw	r2,-8(fp)
  213290:	10800317 	ldw	r2,12(r2)
  213294:	10800404 	addi	r2,r2,16
  213298:	e0ffff17 	ldw	r3,-4(fp)
  21329c:	10c00035 	stwio	r3,0(r2)
}
  2132a0:	0001883a 	nop
  2132a4:	e037883a 	mov	sp,fp
  2132a8:	df000017 	ldw	fp,0(sp)
  2132ac:	dec00104 	addi	sp,sp,4
  2132b0:	f800283a 	ret

002132b4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  2132b4:	defffb04 	addi	sp,sp,-20
  2132b8:	dfc00415 	stw	ra,16(sp)
  2132bc:	df000315 	stw	fp,12(sp)
  2132c0:	df000304 	addi	fp,sp,12
  2132c4:	e13ffe15 	stw	r4,-8(fp)
  2132c8:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  2132cc:	e17ffd04 	addi	r5,fp,-12
  2132d0:	e13ffe17 	ldw	r4,-8(fp)
  2132d4:	02133800 	call	213380 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
  2132d8:	e0bfff17 	ldw	r2,-4(fp)
  2132dc:	0086303a 	nor	r3,zero,r2
  2132e0:	e0bffd17 	ldw	r2,-12(fp)
  2132e4:	1884703a 	and	r2,r3,r2
  2132e8:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  2132ec:	e0bffe17 	ldw	r2,-8(fp)
  2132f0:	10800317 	ldw	r2,12(r2)
  2132f4:	10800304 	addi	r2,r2,12
  2132f8:	e0fffd17 	ldw	r3,-12(fp)
  2132fc:	18c007cc 	andi	r3,r3,31
  213300:	10c00035 	stwio	r3,0(r2)
}
  213304:	0001883a 	nop
  213308:	e037883a 	mov	sp,fp
  21330c:	dfc00117 	ldw	ra,4(sp)
  213310:	df000017 	ldw	fp,0(sp)
  213314:	dec00204 	addi	sp,sp,8
  213318:	f800283a 	ret

0021331c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
  21331c:	defffb04 	addi	sp,sp,-20
  213320:	dfc00415 	stw	ra,16(sp)
  213324:	df000315 	stw	fp,12(sp)
  213328:	df000304 	addi	fp,sp,12
  21332c:	e13ffe15 	stw	r4,-8(fp)
  213330:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
  213334:	e17ffd04 	addi	r5,fp,-12
  213338:	e13ffe17 	ldw	r4,-8(fp)
  21333c:	02133800 	call	213380 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
  213340:	e0fffd17 	ldw	r3,-12(fp)
  213344:	e0bfff17 	ldw	r2,-4(fp)
  213348:	1884b03a 	or	r2,r3,r2
  21334c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
  213350:	e0bffe17 	ldw	r2,-8(fp)
  213354:	10800317 	ldw	r2,12(r2)
  213358:	10800304 	addi	r2,r2,12
  21335c:	e0fffd17 	ldw	r3,-12(fp)
  213360:	18c007cc 	andi	r3,r3,31
  213364:	10c00035 	stwio	r3,0(r2)
}
  213368:	0001883a 	nop
  21336c:	e037883a 	mov	sp,fp
  213370:	dfc00117 	ldw	ra,4(sp)
  213374:	df000017 	ldw	fp,0(sp)
  213378:	dec00204 	addi	sp,sp,8
  21337c:	f800283a 	ret

00213380 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
  213380:	defffd04 	addi	sp,sp,-12
  213384:	df000215 	stw	fp,8(sp)
  213388:	df000204 	addi	fp,sp,8
  21338c:	e13ffe15 	stw	r4,-8(fp)
  213390:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
  213394:	e0bffe17 	ldw	r2,-8(fp)
  213398:	10800317 	ldw	r2,12(r2)
  21339c:	10800304 	addi	r2,r2,12
  2133a0:	10800037 	ldwio	r2,0(r2)
  2133a4:	10c007cc 	andi	r3,r2,31
  2133a8:	e0bfff17 	ldw	r2,-4(fp)
  2133ac:	10c00015 	stw	r3,0(r2)
}
  2133b0:	0001883a 	nop
  2133b4:	e037883a 	mov	sp,fp
  2133b8:	df000017 	ldw	fp,0(sp)
  2133bc:	dec00104 	addi	sp,sp,4
  2133c0:	f800283a 	ret

002133c4 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
  2133c4:	defffd04 	addi	sp,sp,-12
  2133c8:	df000215 	stw	fp,8(sp)
  2133cc:	df000204 	addi	fp,sp,8
  2133d0:	e13ffe15 	stw	r4,-8(fp)
  2133d4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
  2133d8:	e0bffe17 	ldw	r2,-8(fp)
  2133dc:	10800317 	ldw	r2,12(r2)
  2133e0:	10800204 	addi	r2,r2,8
  2133e4:	10800037 	ldwio	r2,0(r2)
  2133e8:	10800c0c 	andi	r2,r2,48
  2133ec:	1005d13a 	srai	r2,r2,4
  2133f0:	1007883a 	mov	r3,r2
  2133f4:	e0bfff17 	ldw	r2,-4(fp)
  2133f8:	10c00015 	stw	r3,0(r2)
}
  2133fc:	0001883a 	nop
  213400:	e037883a 	mov	sp,fp
  213404:	df000017 	ldw	fp,0(sp)
  213408:	dec00104 	addi	sp,sp,4
  21340c:	f800283a 	ret

00213410 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
  213410:	defffd04 	addi	sp,sp,-12
  213414:	df000215 	stw	fp,8(sp)
  213418:	df000204 	addi	fp,sp,8
  21341c:	e13ffe15 	stw	r4,-8(fp)
  213420:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
  213424:	e0bffe17 	ldw	r2,-8(fp)
  213428:	10800317 	ldw	r2,12(r2)
  21342c:	10800204 	addi	r2,r2,8
  213430:	e0fffe17 	ldw	r3,-8(fp)
  213434:	18c00317 	ldw	r3,12(r3)
  213438:	18c00204 	addi	r3,r3,8
  21343c:	18c00037 	ldwio	r3,0(r3)
  213440:	1809883a 	mov	r4,r3
  213444:	00fff3c4 	movi	r3,-49
  213448:	20c8703a 	and	r4,r4,r3
  21344c:	e0ffff17 	ldw	r3,-4(fp)
  213450:	1806913a 	slli	r3,r3,4
  213454:	18c00c0c 	andi	r3,r3,48
  213458:	20c6b03a 	or	r3,r4,r3
  21345c:	10c00035 	stwio	r3,0(r2)
}
  213460:	0001883a 	nop
  213464:	e037883a 	mov	sp,fp
  213468:	df000017 	ldw	fp,0(sp)
  21346c:	dec00104 	addi	sp,sp,4
  213470:	f800283a 	ret

00213474 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
  213474:	defffd04 	addi	sp,sp,-12
  213478:	df000215 	stw	fp,8(sp)
  21347c:	df000204 	addi	fp,sp,8
  213480:	e13ffe15 	stw	r4,-8(fp)
  213484:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
  213488:	e0bffe17 	ldw	r2,-8(fp)
  21348c:	10800317 	ldw	r2,12(r2)
  213490:	10800204 	addi	r2,r2,8
  213494:	10800037 	ldwio	r2,0(r2)
  213498:	1080030c 	andi	r2,r2,12
  21349c:	1005d0ba 	srai	r2,r2,2
  2134a0:	1007883a 	mov	r3,r2
  2134a4:	e0bfff17 	ldw	r2,-4(fp)
  2134a8:	10c00015 	stw	r3,0(r2)
}
  2134ac:	0001883a 	nop
  2134b0:	e037883a 	mov	sp,fp
  2134b4:	df000017 	ldw	fp,0(sp)
  2134b8:	dec00104 	addi	sp,sp,4
  2134bc:	f800283a 	ret

002134c0 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  2134c0:	defffd04 	addi	sp,sp,-12
  2134c4:	df000215 	stw	fp,8(sp)
  2134c8:	df000204 	addi	fp,sp,8
  2134cc:	e13ffe15 	stw	r4,-8(fp)
  2134d0:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
  2134d4:	e0bffe17 	ldw	r2,-8(fp)
  2134d8:	10800317 	ldw	r2,12(r2)
  2134dc:	10c00204 	addi	r3,r2,8
  2134e0:	e0bffe17 	ldw	r2,-8(fp)
  2134e4:	10800317 	ldw	r2,12(r2)
  2134e8:	10800204 	addi	r2,r2,8
  2134ec:	10800037 	ldwio	r2,0(r2)
  2134f0:	1009883a 	mov	r4,r2
  2134f4:	00bffcc4 	movi	r2,-13
  2134f8:	2088703a 	and	r4,r4,r2
  2134fc:	e0bfff17 	ldw	r2,-4(fp)
  213500:	1085883a 	add	r2,r2,r2
  213504:	1085883a 	add	r2,r2,r2
  213508:	1080030c 	andi	r2,r2,12
  21350c:	2084b03a 	or	r2,r4,r2
  213510:	18800035 	stwio	r2,0(r3)
}
  213514:	0001883a 	nop
  213518:	e037883a 	mov	sp,fp
  21351c:	df000017 	ldw	fp,0(sp)
  213520:	dec00104 	addi	sp,sp,4
  213524:	f800283a 	ret

00213528 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  213528:	defffa04 	addi	sp,sp,-24
  21352c:	dfc00515 	stw	ra,20(sp)
  213530:	df000415 	stw	fp,16(sp)
  213534:	df000404 	addi	fp,sp,16
  213538:	e13ffd15 	stw	r4,-12(fp)
  21353c:	e17ffe15 	stw	r5,-8(fp)
  213540:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  213544:	e0bffd17 	ldw	r2,-12(fp)
  213548:	10800017 	ldw	r2,0(r2)
  21354c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  213550:	e0bffc17 	ldw	r2,-16(fp)
  213554:	10c00a04 	addi	r3,r2,40
  213558:	e0bffd17 	ldw	r2,-12(fp)
  21355c:	10800217 	ldw	r2,8(r2)
  213560:	100f883a 	mov	r7,r2
  213564:	e1bfff17 	ldw	r6,-4(fp)
  213568:	e17ffe17 	ldw	r5,-8(fp)
  21356c:	1809883a 	mov	r4,r3
  213570:	0213b500 	call	213b50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  213574:	e037883a 	mov	sp,fp
  213578:	dfc00117 	ldw	ra,4(sp)
  21357c:	df000017 	ldw	fp,0(sp)
  213580:	dec00204 	addi	sp,sp,8
  213584:	f800283a 	ret

00213588 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  213588:	defffa04 	addi	sp,sp,-24
  21358c:	dfc00515 	stw	ra,20(sp)
  213590:	df000415 	stw	fp,16(sp)
  213594:	df000404 	addi	fp,sp,16
  213598:	e13ffd15 	stw	r4,-12(fp)
  21359c:	e17ffe15 	stw	r5,-8(fp)
  2135a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  2135a4:	e0bffd17 	ldw	r2,-12(fp)
  2135a8:	10800017 	ldw	r2,0(r2)
  2135ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  2135b0:	e0bffc17 	ldw	r2,-16(fp)
  2135b4:	10c00a04 	addi	r3,r2,40
  2135b8:	e0bffd17 	ldw	r2,-12(fp)
  2135bc:	10800217 	ldw	r2,8(r2)
  2135c0:	100f883a 	mov	r7,r2
  2135c4:	e1bfff17 	ldw	r6,-4(fp)
  2135c8:	e17ffe17 	ldw	r5,-8(fp)
  2135cc:	1809883a 	mov	r4,r3
  2135d0:	0213d6c0 	call	213d6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  2135d4:	e037883a 	mov	sp,fp
  2135d8:	dfc00117 	ldw	ra,4(sp)
  2135dc:	df000017 	ldw	fp,0(sp)
  2135e0:	dec00204 	addi	sp,sp,8
  2135e4:	f800283a 	ret

002135e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  2135e8:	defffc04 	addi	sp,sp,-16
  2135ec:	dfc00315 	stw	ra,12(sp)
  2135f0:	df000215 	stw	fp,8(sp)
  2135f4:	df000204 	addi	fp,sp,8
  2135f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  2135fc:	e0bfff17 	ldw	r2,-4(fp)
  213600:	10800017 	ldw	r2,0(r2)
  213604:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  213608:	e0bffe17 	ldw	r2,-8(fp)
  21360c:	10c00a04 	addi	r3,r2,40
  213610:	e0bfff17 	ldw	r2,-4(fp)
  213614:	10800217 	ldw	r2,8(r2)
  213618:	100b883a 	mov	r5,r2
  21361c:	1809883a 	mov	r4,r3
  213620:	02139f80 	call	2139f8 <altera_avalon_jtag_uart_close>
}
  213624:	e037883a 	mov	sp,fp
  213628:	dfc00117 	ldw	ra,4(sp)
  21362c:	df000017 	ldw	fp,0(sp)
  213630:	dec00204 	addi	sp,sp,8
  213634:	f800283a 	ret

00213638 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  213638:	defffa04 	addi	sp,sp,-24
  21363c:	dfc00515 	stw	ra,20(sp)
  213640:	df000415 	stw	fp,16(sp)
  213644:	df000404 	addi	fp,sp,16
  213648:	e13ffd15 	stw	r4,-12(fp)
  21364c:	e17ffe15 	stw	r5,-8(fp)
  213650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  213654:	e0bffd17 	ldw	r2,-12(fp)
  213658:	10800017 	ldw	r2,0(r2)
  21365c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  213660:	e0bffc17 	ldw	r2,-16(fp)
  213664:	10800a04 	addi	r2,r2,40
  213668:	e1bfff17 	ldw	r6,-4(fp)
  21366c:	e17ffe17 	ldw	r5,-8(fp)
  213670:	1009883a 	mov	r4,r2
  213674:	0213a600 	call	213a60 <altera_avalon_jtag_uart_ioctl>
}
  213678:	e037883a 	mov	sp,fp
  21367c:	dfc00117 	ldw	ra,4(sp)
  213680:	df000017 	ldw	fp,0(sp)
  213684:	dec00204 	addi	sp,sp,8
  213688:	f800283a 	ret

0021368c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  21368c:	defffa04 	addi	sp,sp,-24
  213690:	dfc00515 	stw	ra,20(sp)
  213694:	df000415 	stw	fp,16(sp)
  213698:	df000404 	addi	fp,sp,16
  21369c:	e13ffd15 	stw	r4,-12(fp)
  2136a0:	e17ffe15 	stw	r5,-8(fp)
  2136a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  2136a8:	e0bffd17 	ldw	r2,-12(fp)
  2136ac:	00c00044 	movi	r3,1
  2136b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  2136b4:	e0bffd17 	ldw	r2,-12(fp)
  2136b8:	10800017 	ldw	r2,0(r2)
  2136bc:	10800104 	addi	r2,r2,4
  2136c0:	1007883a 	mov	r3,r2
  2136c4:	e0bffd17 	ldw	r2,-12(fp)
  2136c8:	10800817 	ldw	r2,32(r2)
  2136cc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  2136d0:	e0bffe17 	ldw	r2,-8(fp)
  2136d4:	e0ffff17 	ldw	r3,-4(fp)
  2136d8:	d8000015 	stw	zero,0(sp)
  2136dc:	e1fffd17 	ldw	r7,-12(fp)
  2136e0:	01800874 	movhi	r6,33
  2136e4:	318dd304 	addi	r6,r6,14156
  2136e8:	180b883a 	mov	r5,r3
  2136ec:	1009883a 	mov	r4,r2
  2136f0:	02157980 	call	215798 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  2136f4:	e0bffd17 	ldw	r2,-12(fp)
  2136f8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  2136fc:	e0bffd17 	ldw	r2,-12(fp)
  213700:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  213704:	d0e02a17 	ldw	r3,-32600(gp)
  213708:	e1fffd17 	ldw	r7,-12(fp)
  21370c:	01800874 	movhi	r6,33
  213710:	318e5604 	addi	r6,r6,14680
  213714:	180b883a 	mov	r5,r3
  213718:	1009883a 	mov	r4,r2
  21371c:	02151c00 	call	2151c0 <alt_alarm_start>
  213720:	1000040e 	bge	r2,zero,213734 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  213724:	e0fffd17 	ldw	r3,-12(fp)
  213728:	00a00034 	movhi	r2,32768
  21372c:	10bfffc4 	addi	r2,r2,-1
  213730:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  213734:	0001883a 	nop
  213738:	e037883a 	mov	sp,fp
  21373c:	dfc00117 	ldw	ra,4(sp)
  213740:	df000017 	ldw	fp,0(sp)
  213744:	dec00204 	addi	sp,sp,8
  213748:	f800283a 	ret

0021374c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  21374c:	defff804 	addi	sp,sp,-32
  213750:	df000715 	stw	fp,28(sp)
  213754:	df000704 	addi	fp,sp,28
  213758:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  21375c:	e0bfff17 	ldw	r2,-4(fp)
  213760:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  213764:	e0bffb17 	ldw	r2,-20(fp)
  213768:	10800017 	ldw	r2,0(r2)
  21376c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  213770:	e0bffc17 	ldw	r2,-16(fp)
  213774:	10800104 	addi	r2,r2,4
  213778:	10800037 	ldwio	r2,0(r2)
  21377c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  213780:	e0bffd17 	ldw	r2,-12(fp)
  213784:	1080c00c 	andi	r2,r2,768
  213788:	10006d26 	beq	r2,zero,213940 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  21378c:	e0bffd17 	ldw	r2,-12(fp)
  213790:	1080400c 	andi	r2,r2,256
  213794:	10003526 	beq	r2,zero,21386c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  213798:	00800074 	movhi	r2,1
  21379c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2137a0:	e0bffb17 	ldw	r2,-20(fp)
  2137a4:	10800a17 	ldw	r2,40(r2)
  2137a8:	10800044 	addi	r2,r2,1
  2137ac:	1081ffcc 	andi	r2,r2,2047
  2137b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  2137b4:	e0bffb17 	ldw	r2,-20(fp)
  2137b8:	10c00b17 	ldw	r3,44(r2)
  2137bc:	e0bffe17 	ldw	r2,-8(fp)
  2137c0:	18801526 	beq	r3,r2,213818 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  2137c4:	e0bffc17 	ldw	r2,-16(fp)
  2137c8:	10800037 	ldwio	r2,0(r2)
  2137cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  2137d0:	e0bff917 	ldw	r2,-28(fp)
  2137d4:	10a0000c 	andi	r2,r2,32768
  2137d8:	10001126 	beq	r2,zero,213820 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  2137dc:	e0bffb17 	ldw	r2,-20(fp)
  2137e0:	10800a17 	ldw	r2,40(r2)
  2137e4:	e0fff917 	ldw	r3,-28(fp)
  2137e8:	1809883a 	mov	r4,r3
  2137ec:	e0fffb17 	ldw	r3,-20(fp)
  2137f0:	1885883a 	add	r2,r3,r2
  2137f4:	10800e04 	addi	r2,r2,56
  2137f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2137fc:	e0bffb17 	ldw	r2,-20(fp)
  213800:	10800a17 	ldw	r2,40(r2)
  213804:	10800044 	addi	r2,r2,1
  213808:	10c1ffcc 	andi	r3,r2,2047
  21380c:	e0bffb17 	ldw	r2,-20(fp)
  213810:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  213814:	003fe206 	br	2137a0 <_gp+0xffe01b8c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  213818:	0001883a 	nop
  21381c:	00000106 	br	213824 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  213820:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  213824:	e0bff917 	ldw	r2,-28(fp)
  213828:	10bfffec 	andhi	r2,r2,65535
  21382c:	10000f26 	beq	r2,zero,21386c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  213830:	e0bffb17 	ldw	r2,-20(fp)
  213834:	10c00817 	ldw	r3,32(r2)
  213838:	00bfff84 	movi	r2,-2
  21383c:	1886703a 	and	r3,r3,r2
  213840:	e0bffb17 	ldw	r2,-20(fp)
  213844:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  213848:	e0bffc17 	ldw	r2,-16(fp)
  21384c:	10800104 	addi	r2,r2,4
  213850:	1007883a 	mov	r3,r2
  213854:	e0bffb17 	ldw	r2,-20(fp)
  213858:	10800817 	ldw	r2,32(r2)
  21385c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  213860:	e0bffc17 	ldw	r2,-16(fp)
  213864:	10800104 	addi	r2,r2,4
  213868:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  21386c:	e0bffd17 	ldw	r2,-12(fp)
  213870:	1080800c 	andi	r2,r2,512
  213874:	103fbe26 	beq	r2,zero,213770 <_gp+0xffe01b5c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  213878:	e0bffd17 	ldw	r2,-12(fp)
  21387c:	1004d43a 	srli	r2,r2,16
  213880:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  213884:	00001406 	br	2138d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  213888:	e0bffc17 	ldw	r2,-16(fp)
  21388c:	e0fffb17 	ldw	r3,-20(fp)
  213890:	18c00d17 	ldw	r3,52(r3)
  213894:	e13ffb17 	ldw	r4,-20(fp)
  213898:	20c7883a 	add	r3,r4,r3
  21389c:	18c20e04 	addi	r3,r3,2104
  2138a0:	18c00003 	ldbu	r3,0(r3)
  2138a4:	18c03fcc 	andi	r3,r3,255
  2138a8:	18c0201c 	xori	r3,r3,128
  2138ac:	18ffe004 	addi	r3,r3,-128
  2138b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2138b4:	e0bffb17 	ldw	r2,-20(fp)
  2138b8:	10800d17 	ldw	r2,52(r2)
  2138bc:	10800044 	addi	r2,r2,1
  2138c0:	10c1ffcc 	andi	r3,r2,2047
  2138c4:	e0bffb17 	ldw	r2,-20(fp)
  2138c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  2138cc:	e0bffa17 	ldw	r2,-24(fp)
  2138d0:	10bfffc4 	addi	r2,r2,-1
  2138d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  2138d8:	e0bffa17 	ldw	r2,-24(fp)
  2138dc:	10000526 	beq	r2,zero,2138f4 <altera_avalon_jtag_uart_irq+0x1a8>
  2138e0:	e0bffb17 	ldw	r2,-20(fp)
  2138e4:	10c00d17 	ldw	r3,52(r2)
  2138e8:	e0bffb17 	ldw	r2,-20(fp)
  2138ec:	10800c17 	ldw	r2,48(r2)
  2138f0:	18bfe51e 	bne	r3,r2,213888 <_gp+0xffe01c74>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  2138f4:	e0bffa17 	ldw	r2,-24(fp)
  2138f8:	103f9d26 	beq	r2,zero,213770 <_gp+0xffe01b5c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  2138fc:	e0bffb17 	ldw	r2,-20(fp)
  213900:	10c00817 	ldw	r3,32(r2)
  213904:	00bfff44 	movi	r2,-3
  213908:	1886703a 	and	r3,r3,r2
  21390c:	e0bffb17 	ldw	r2,-20(fp)
  213910:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213914:	e0bffb17 	ldw	r2,-20(fp)
  213918:	10800017 	ldw	r2,0(r2)
  21391c:	10800104 	addi	r2,r2,4
  213920:	1007883a 	mov	r3,r2
  213924:	e0bffb17 	ldw	r2,-20(fp)
  213928:	10800817 	ldw	r2,32(r2)
  21392c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  213930:	e0bffc17 	ldw	r2,-16(fp)
  213934:	10800104 	addi	r2,r2,4
  213938:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  21393c:	003f8c06 	br	213770 <_gp+0xffe01b5c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  213940:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  213944:	0001883a 	nop
  213948:	e037883a 	mov	sp,fp
  21394c:	df000017 	ldw	fp,0(sp)
  213950:	dec00104 	addi	sp,sp,4
  213954:	f800283a 	ret

00213958 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  213958:	defff804 	addi	sp,sp,-32
  21395c:	df000715 	stw	fp,28(sp)
  213960:	df000704 	addi	fp,sp,28
  213964:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  213968:	e0bffb17 	ldw	r2,-20(fp)
  21396c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  213970:	e0bff917 	ldw	r2,-28(fp)
  213974:	10800017 	ldw	r2,0(r2)
  213978:	10800104 	addi	r2,r2,4
  21397c:	10800037 	ldwio	r2,0(r2)
  213980:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  213984:	e0bffa17 	ldw	r2,-24(fp)
  213988:	1081000c 	andi	r2,r2,1024
  21398c:	10000b26 	beq	r2,zero,2139bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  213990:	e0bff917 	ldw	r2,-28(fp)
  213994:	10800017 	ldw	r2,0(r2)
  213998:	10800104 	addi	r2,r2,4
  21399c:	1007883a 	mov	r3,r2
  2139a0:	e0bff917 	ldw	r2,-28(fp)
  2139a4:	10800817 	ldw	r2,32(r2)
  2139a8:	10810014 	ori	r2,r2,1024
  2139ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  2139b0:	e0bff917 	ldw	r2,-28(fp)
  2139b4:	10000915 	stw	zero,36(r2)
  2139b8:	00000a06 	br	2139e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  2139bc:	e0bff917 	ldw	r2,-28(fp)
  2139c0:	10c00917 	ldw	r3,36(r2)
  2139c4:	00a00034 	movhi	r2,32768
  2139c8:	10bfff04 	addi	r2,r2,-4
  2139cc:	10c00536 	bltu	r2,r3,2139e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  2139d0:	e0bff917 	ldw	r2,-28(fp)
  2139d4:	10800917 	ldw	r2,36(r2)
  2139d8:	10c00044 	addi	r3,r2,1
  2139dc:	e0bff917 	ldw	r2,-28(fp)
  2139e0:	10c00915 	stw	r3,36(r2)
  2139e4:	d0a02a17 	ldw	r2,-32600(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  2139e8:	e037883a 	mov	sp,fp
  2139ec:	df000017 	ldw	fp,0(sp)
  2139f0:	dec00104 	addi	sp,sp,4
  2139f4:	f800283a 	ret

002139f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  2139f8:	defffd04 	addi	sp,sp,-12
  2139fc:	df000215 	stw	fp,8(sp)
  213a00:	df000204 	addi	fp,sp,8
  213a04:	e13ffe15 	stw	r4,-8(fp)
  213a08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  213a0c:	00000506 	br	213a24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  213a10:	e0bfff17 	ldw	r2,-4(fp)
  213a14:	1090000c 	andi	r2,r2,16384
  213a18:	10000226 	beq	r2,zero,213a24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  213a1c:	00bffd44 	movi	r2,-11
  213a20:	00000b06 	br	213a50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  213a24:	e0bffe17 	ldw	r2,-8(fp)
  213a28:	10c00d17 	ldw	r3,52(r2)
  213a2c:	e0bffe17 	ldw	r2,-8(fp)
  213a30:	10800c17 	ldw	r2,48(r2)
  213a34:	18800526 	beq	r3,r2,213a4c <altera_avalon_jtag_uart_close+0x54>
  213a38:	e0bffe17 	ldw	r2,-8(fp)
  213a3c:	10c00917 	ldw	r3,36(r2)
  213a40:	e0bffe17 	ldw	r2,-8(fp)
  213a44:	10800117 	ldw	r2,4(r2)
  213a48:	18bff136 	bltu	r3,r2,213a10 <_gp+0xffe01dfc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  213a4c:	0005883a 	mov	r2,zero
}
  213a50:	e037883a 	mov	sp,fp
  213a54:	df000017 	ldw	fp,0(sp)
  213a58:	dec00104 	addi	sp,sp,4
  213a5c:	f800283a 	ret

00213a60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  213a60:	defffa04 	addi	sp,sp,-24
  213a64:	df000515 	stw	fp,20(sp)
  213a68:	df000504 	addi	fp,sp,20
  213a6c:	e13ffd15 	stw	r4,-12(fp)
  213a70:	e17ffe15 	stw	r5,-8(fp)
  213a74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  213a78:	00bff9c4 	movi	r2,-25
  213a7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  213a80:	e0bffe17 	ldw	r2,-8(fp)
  213a84:	10da8060 	cmpeqi	r3,r2,27137
  213a88:	1800031e 	bne	r3,zero,213a98 <altera_avalon_jtag_uart_ioctl+0x38>
  213a8c:	109a80a0 	cmpeqi	r2,r2,27138
  213a90:	1000181e 	bne	r2,zero,213af4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  213a94:	00002906 	br	213b3c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  213a98:	e0bffd17 	ldw	r2,-12(fp)
  213a9c:	10c00117 	ldw	r3,4(r2)
  213aa0:	00a00034 	movhi	r2,32768
  213aa4:	10bfffc4 	addi	r2,r2,-1
  213aa8:	18802126 	beq	r3,r2,213b30 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  213aac:	e0bfff17 	ldw	r2,-4(fp)
  213ab0:	10800017 	ldw	r2,0(r2)
  213ab4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  213ab8:	e0bffc17 	ldw	r2,-16(fp)
  213abc:	10800090 	cmplti	r2,r2,2
  213ac0:	1000061e 	bne	r2,zero,213adc <altera_avalon_jtag_uart_ioctl+0x7c>
  213ac4:	e0fffc17 	ldw	r3,-16(fp)
  213ac8:	00a00034 	movhi	r2,32768
  213acc:	10bfffc4 	addi	r2,r2,-1
  213ad0:	18800226 	beq	r3,r2,213adc <altera_avalon_jtag_uart_ioctl+0x7c>
  213ad4:	e0bffc17 	ldw	r2,-16(fp)
  213ad8:	00000206 	br	213ae4 <altera_avalon_jtag_uart_ioctl+0x84>
  213adc:	00a00034 	movhi	r2,32768
  213ae0:	10bfff84 	addi	r2,r2,-2
  213ae4:	e0fffd17 	ldw	r3,-12(fp)
  213ae8:	18800115 	stw	r2,4(r3)
      rc = 0;
  213aec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  213af0:	00000f06 	br	213b30 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  213af4:	e0bffd17 	ldw	r2,-12(fp)
  213af8:	10c00117 	ldw	r3,4(r2)
  213afc:	00a00034 	movhi	r2,32768
  213b00:	10bfffc4 	addi	r2,r2,-1
  213b04:	18800c26 	beq	r3,r2,213b38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  213b08:	e0bffd17 	ldw	r2,-12(fp)
  213b0c:	10c00917 	ldw	r3,36(r2)
  213b10:	e0bffd17 	ldw	r2,-12(fp)
  213b14:	10800117 	ldw	r2,4(r2)
  213b18:	1885803a 	cmpltu	r2,r3,r2
  213b1c:	10c03fcc 	andi	r3,r2,255
  213b20:	e0bfff17 	ldw	r2,-4(fp)
  213b24:	10c00015 	stw	r3,0(r2)
      rc = 0;
  213b28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  213b2c:	00000206 	br	213b38 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  213b30:	0001883a 	nop
  213b34:	00000106 	br	213b3c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  213b38:	0001883a 	nop

  default:
    break;
  }

  return rc;
  213b3c:	e0bffb17 	ldw	r2,-20(fp)
}
  213b40:	e037883a 	mov	sp,fp
  213b44:	df000017 	ldw	fp,0(sp)
  213b48:	dec00104 	addi	sp,sp,4
  213b4c:	f800283a 	ret

00213b50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  213b50:	defff304 	addi	sp,sp,-52
  213b54:	dfc00c15 	stw	ra,48(sp)
  213b58:	df000b15 	stw	fp,44(sp)
  213b5c:	df000b04 	addi	fp,sp,44
  213b60:	e13ffc15 	stw	r4,-16(fp)
  213b64:	e17ffd15 	stw	r5,-12(fp)
  213b68:	e1bffe15 	stw	r6,-8(fp)
  213b6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  213b70:	e0bffd17 	ldw	r2,-12(fp)
  213b74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  213b78:	00004706 	br	213c98 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  213b7c:	e0bffc17 	ldw	r2,-16(fp)
  213b80:	10800a17 	ldw	r2,40(r2)
  213b84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  213b88:	e0bffc17 	ldw	r2,-16(fp)
  213b8c:	10800b17 	ldw	r2,44(r2)
  213b90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  213b94:	e0fff717 	ldw	r3,-36(fp)
  213b98:	e0bff817 	ldw	r2,-32(fp)
  213b9c:	18800536 	bltu	r3,r2,213bb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  213ba0:	e0fff717 	ldw	r3,-36(fp)
  213ba4:	e0bff817 	ldw	r2,-32(fp)
  213ba8:	1885c83a 	sub	r2,r3,r2
  213bac:	e0bff615 	stw	r2,-40(fp)
  213bb0:	00000406 	br	213bc4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  213bb4:	00c20004 	movi	r3,2048
  213bb8:	e0bff817 	ldw	r2,-32(fp)
  213bbc:	1885c83a 	sub	r2,r3,r2
  213bc0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  213bc4:	e0bff617 	ldw	r2,-40(fp)
  213bc8:	10001e26 	beq	r2,zero,213c44 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  213bcc:	e0fffe17 	ldw	r3,-8(fp)
  213bd0:	e0bff617 	ldw	r2,-40(fp)
  213bd4:	1880022e 	bgeu	r3,r2,213be0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  213bd8:	e0bffe17 	ldw	r2,-8(fp)
  213bdc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  213be0:	e0bffc17 	ldw	r2,-16(fp)
  213be4:	10c00e04 	addi	r3,r2,56
  213be8:	e0bff817 	ldw	r2,-32(fp)
  213bec:	1885883a 	add	r2,r3,r2
  213bf0:	e1bff617 	ldw	r6,-40(fp)
  213bf4:	100b883a 	mov	r5,r2
  213bf8:	e13ff517 	ldw	r4,-44(fp)
  213bfc:	0209a480 	call	209a48 <memcpy>
      ptr   += n;
  213c00:	e0fff517 	ldw	r3,-44(fp)
  213c04:	e0bff617 	ldw	r2,-40(fp)
  213c08:	1885883a 	add	r2,r3,r2
  213c0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  213c10:	e0fffe17 	ldw	r3,-8(fp)
  213c14:	e0bff617 	ldw	r2,-40(fp)
  213c18:	1885c83a 	sub	r2,r3,r2
  213c1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  213c20:	e0fff817 	ldw	r3,-32(fp)
  213c24:	e0bff617 	ldw	r2,-40(fp)
  213c28:	1885883a 	add	r2,r3,r2
  213c2c:	10c1ffcc 	andi	r3,r2,2047
  213c30:	e0bffc17 	ldw	r2,-16(fp)
  213c34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  213c38:	e0bffe17 	ldw	r2,-8(fp)
  213c3c:	00bfcf16 	blt	zero,r2,213b7c <_gp+0xffe01f68>
  213c40:	00000106 	br	213c48 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  213c44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  213c48:	e0fff517 	ldw	r3,-44(fp)
  213c4c:	e0bffd17 	ldw	r2,-12(fp)
  213c50:	1880141e 	bne	r3,r2,213ca4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  213c54:	e0bfff17 	ldw	r2,-4(fp)
  213c58:	1090000c 	andi	r2,r2,16384
  213c5c:	1000131e 	bne	r2,zero,213cac <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  213c60:	0001883a 	nop
  213c64:	e0bffc17 	ldw	r2,-16(fp)
  213c68:	10c00a17 	ldw	r3,40(r2)
  213c6c:	e0bff717 	ldw	r2,-36(fp)
  213c70:	1880051e 	bne	r3,r2,213c88 <altera_avalon_jtag_uart_read+0x138>
  213c74:	e0bffc17 	ldw	r2,-16(fp)
  213c78:	10c00917 	ldw	r3,36(r2)
  213c7c:	e0bffc17 	ldw	r2,-16(fp)
  213c80:	10800117 	ldw	r2,4(r2)
  213c84:	18bff736 	bltu	r3,r2,213c64 <_gp+0xffe02050>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  213c88:	e0bffc17 	ldw	r2,-16(fp)
  213c8c:	10c00a17 	ldw	r3,40(r2)
  213c90:	e0bff717 	ldw	r2,-36(fp)
  213c94:	18800726 	beq	r3,r2,213cb4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  213c98:	e0bffe17 	ldw	r2,-8(fp)
  213c9c:	00bfb716 	blt	zero,r2,213b7c <_gp+0xffe01f68>
  213ca0:	00000506 	br	213cb8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  213ca4:	0001883a 	nop
  213ca8:	00000306 	br	213cb8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  213cac:	0001883a 	nop
  213cb0:	00000106 	br	213cb8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  213cb4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  213cb8:	e0fff517 	ldw	r3,-44(fp)
  213cbc:	e0bffd17 	ldw	r2,-12(fp)
  213cc0:	18801826 	beq	r3,r2,213d24 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  213cc4:	0005303a 	rdctl	r2,status
  213cc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213ccc:	e0fffb17 	ldw	r3,-20(fp)
  213cd0:	00bfff84 	movi	r2,-2
  213cd4:	1884703a 	and	r2,r3,r2
  213cd8:	1001703a 	wrctl	status,r2
  
  return context;
  213cdc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  213ce0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  213ce4:	e0bffc17 	ldw	r2,-16(fp)
  213ce8:	10800817 	ldw	r2,32(r2)
  213cec:	10c00054 	ori	r3,r2,1
  213cf0:	e0bffc17 	ldw	r2,-16(fp)
  213cf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213cf8:	e0bffc17 	ldw	r2,-16(fp)
  213cfc:	10800017 	ldw	r2,0(r2)
  213d00:	10800104 	addi	r2,r2,4
  213d04:	1007883a 	mov	r3,r2
  213d08:	e0bffc17 	ldw	r2,-16(fp)
  213d0c:	10800817 	ldw	r2,32(r2)
  213d10:	18800035 	stwio	r2,0(r3)
  213d14:	e0bffa17 	ldw	r2,-24(fp)
  213d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  213d1c:	e0bff917 	ldw	r2,-28(fp)
  213d20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  213d24:	e0fff517 	ldw	r3,-44(fp)
  213d28:	e0bffd17 	ldw	r2,-12(fp)
  213d2c:	18800426 	beq	r3,r2,213d40 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  213d30:	e0fff517 	ldw	r3,-44(fp)
  213d34:	e0bffd17 	ldw	r2,-12(fp)
  213d38:	1885c83a 	sub	r2,r3,r2
  213d3c:	00000606 	br	213d58 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  213d40:	e0bfff17 	ldw	r2,-4(fp)
  213d44:	1090000c 	andi	r2,r2,16384
  213d48:	10000226 	beq	r2,zero,213d54 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  213d4c:	00bffd44 	movi	r2,-11
  213d50:	00000106 	br	213d58 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  213d54:	00bffec4 	movi	r2,-5
}
  213d58:	e037883a 	mov	sp,fp
  213d5c:	dfc00117 	ldw	ra,4(sp)
  213d60:	df000017 	ldw	fp,0(sp)
  213d64:	dec00204 	addi	sp,sp,8
  213d68:	f800283a 	ret

00213d6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  213d6c:	defff304 	addi	sp,sp,-52
  213d70:	dfc00c15 	stw	ra,48(sp)
  213d74:	df000b15 	stw	fp,44(sp)
  213d78:	df000b04 	addi	fp,sp,44
  213d7c:	e13ffc15 	stw	r4,-16(fp)
  213d80:	e17ffd15 	stw	r5,-12(fp)
  213d84:	e1bffe15 	stw	r6,-8(fp)
  213d88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  213d8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  213d90:	e0bffd17 	ldw	r2,-12(fp)
  213d94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  213d98:	00003706 	br	213e78 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  213d9c:	e0bffc17 	ldw	r2,-16(fp)
  213da0:	10800c17 	ldw	r2,48(r2)
  213da4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  213da8:	e0bffc17 	ldw	r2,-16(fp)
  213dac:	10800d17 	ldw	r2,52(r2)
  213db0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  213db4:	e0fff917 	ldw	r3,-28(fp)
  213db8:	e0bff517 	ldw	r2,-44(fp)
  213dbc:	1880062e 	bgeu	r3,r2,213dd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  213dc0:	e0fff517 	ldw	r3,-44(fp)
  213dc4:	e0bff917 	ldw	r2,-28(fp)
  213dc8:	1885c83a 	sub	r2,r3,r2
  213dcc:	10bfffc4 	addi	r2,r2,-1
  213dd0:	e0bff615 	stw	r2,-40(fp)
  213dd4:	00000b06 	br	213e04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  213dd8:	e0bff517 	ldw	r2,-44(fp)
  213ddc:	10000526 	beq	r2,zero,213df4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  213de0:	00c20004 	movi	r3,2048
  213de4:	e0bff917 	ldw	r2,-28(fp)
  213de8:	1885c83a 	sub	r2,r3,r2
  213dec:	e0bff615 	stw	r2,-40(fp)
  213df0:	00000406 	br	213e04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  213df4:	00c1ffc4 	movi	r3,2047
  213df8:	e0bff917 	ldw	r2,-28(fp)
  213dfc:	1885c83a 	sub	r2,r3,r2
  213e00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  213e04:	e0bff617 	ldw	r2,-40(fp)
  213e08:	10001e26 	beq	r2,zero,213e84 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  213e0c:	e0fffe17 	ldw	r3,-8(fp)
  213e10:	e0bff617 	ldw	r2,-40(fp)
  213e14:	1880022e 	bgeu	r3,r2,213e20 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  213e18:	e0bffe17 	ldw	r2,-8(fp)
  213e1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  213e20:	e0bffc17 	ldw	r2,-16(fp)
  213e24:	10c20e04 	addi	r3,r2,2104
  213e28:	e0bff917 	ldw	r2,-28(fp)
  213e2c:	1885883a 	add	r2,r3,r2
  213e30:	e1bff617 	ldw	r6,-40(fp)
  213e34:	e17ffd17 	ldw	r5,-12(fp)
  213e38:	1009883a 	mov	r4,r2
  213e3c:	0209a480 	call	209a48 <memcpy>
      ptr   += n;
  213e40:	e0fffd17 	ldw	r3,-12(fp)
  213e44:	e0bff617 	ldw	r2,-40(fp)
  213e48:	1885883a 	add	r2,r3,r2
  213e4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  213e50:	e0fffe17 	ldw	r3,-8(fp)
  213e54:	e0bff617 	ldw	r2,-40(fp)
  213e58:	1885c83a 	sub	r2,r3,r2
  213e5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  213e60:	e0fff917 	ldw	r3,-28(fp)
  213e64:	e0bff617 	ldw	r2,-40(fp)
  213e68:	1885883a 	add	r2,r3,r2
  213e6c:	10c1ffcc 	andi	r3,r2,2047
  213e70:	e0bffc17 	ldw	r2,-16(fp)
  213e74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  213e78:	e0bffe17 	ldw	r2,-8(fp)
  213e7c:	00bfc716 	blt	zero,r2,213d9c <_gp+0xffe02188>
  213e80:	00000106 	br	213e88 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  213e84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  213e88:	0005303a 	rdctl	r2,status
  213e8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  213e90:	e0fffb17 	ldw	r3,-20(fp)
  213e94:	00bfff84 	movi	r2,-2
  213e98:	1884703a 	and	r2,r3,r2
  213e9c:	1001703a 	wrctl	status,r2
  
  return context;
  213ea0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  213ea4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  213ea8:	e0bffc17 	ldw	r2,-16(fp)
  213eac:	10800817 	ldw	r2,32(r2)
  213eb0:	10c00094 	ori	r3,r2,2
  213eb4:	e0bffc17 	ldw	r2,-16(fp)
  213eb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  213ebc:	e0bffc17 	ldw	r2,-16(fp)
  213ec0:	10800017 	ldw	r2,0(r2)
  213ec4:	10800104 	addi	r2,r2,4
  213ec8:	1007883a 	mov	r3,r2
  213ecc:	e0bffc17 	ldw	r2,-16(fp)
  213ed0:	10800817 	ldw	r2,32(r2)
  213ed4:	18800035 	stwio	r2,0(r3)
  213ed8:	e0bffa17 	ldw	r2,-24(fp)
  213edc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  213ee0:	e0bff817 	ldw	r2,-32(fp)
  213ee4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  213ee8:	e0bffe17 	ldw	r2,-8(fp)
  213eec:	0080100e 	bge	zero,r2,213f30 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  213ef0:	e0bfff17 	ldw	r2,-4(fp)
  213ef4:	1090000c 	andi	r2,r2,16384
  213ef8:	1000101e 	bne	r2,zero,213f3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  213efc:	0001883a 	nop
  213f00:	e0bffc17 	ldw	r2,-16(fp)
  213f04:	10c00d17 	ldw	r3,52(r2)
  213f08:	e0bff517 	ldw	r2,-44(fp)
  213f0c:	1880051e 	bne	r3,r2,213f24 <altera_avalon_jtag_uart_write+0x1b8>
  213f10:	e0bffc17 	ldw	r2,-16(fp)
  213f14:	10c00917 	ldw	r3,36(r2)
  213f18:	e0bffc17 	ldw	r2,-16(fp)
  213f1c:	10800117 	ldw	r2,4(r2)
  213f20:	18bff736 	bltu	r3,r2,213f00 <_gp+0xffe022ec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  213f24:	e0bffc17 	ldw	r2,-16(fp)
  213f28:	10800917 	ldw	r2,36(r2)
  213f2c:	1000051e 	bne	r2,zero,213f44 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  213f30:	e0bffe17 	ldw	r2,-8(fp)
  213f34:	00bfd016 	blt	zero,r2,213e78 <_gp+0xffe02264>
  213f38:	00000306 	br	213f48 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  213f3c:	0001883a 	nop
  213f40:	00000106 	br	213f48 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  213f44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  213f48:	e0fffd17 	ldw	r3,-12(fp)
  213f4c:	e0bff717 	ldw	r2,-36(fp)
  213f50:	18800426 	beq	r3,r2,213f64 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  213f54:	e0fffd17 	ldw	r3,-12(fp)
  213f58:	e0bff717 	ldw	r2,-36(fp)
  213f5c:	1885c83a 	sub	r2,r3,r2
  213f60:	00000606 	br	213f7c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  213f64:	e0bfff17 	ldw	r2,-4(fp)
  213f68:	1090000c 	andi	r2,r2,16384
  213f6c:	10000226 	beq	r2,zero,213f78 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  213f70:	00bffd44 	movi	r2,-11
  213f74:	00000106 	br	213f7c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  213f78:	00bffec4 	movi	r2,-5
}
  213f7c:	e037883a 	mov	sp,fp
  213f80:	dfc00117 	ldw	ra,4(sp)
  213f84:	df000017 	ldw	fp,0(sp)
  213f88:	dec00204 	addi	sp,sp,8
  213f8c:	f800283a 	ret

00213f90 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  213f90:	defff404 	addi	sp,sp,-48
  213f94:	df000b15 	stw	fp,44(sp)
  213f98:	df000b04 	addi	fp,sp,44
  213f9c:	e13ffc15 	stw	r4,-16(fp)
  213fa0:	e17ffd15 	stw	r5,-12(fp)
  213fa4:	e1bffe15 	stw	r6,-8(fp)
  213fa8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
  213fac:	e0ffff17 	ldw	r3,-4(fp)
  213fb0:	e0bffe17 	ldw	r2,-8(fp)
  213fb4:	1885883a 	add	r2,r3,r2
  213fb8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
  213fbc:	e0c00217 	ldw	r3,8(fp)
  213fc0:	e0800117 	ldw	r2,4(fp)
  213fc4:	1885883a 	add	r2,r3,r2
  213fc8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
  213fcc:	e0800117 	ldw	r2,4(fp)
  213fd0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
  213fd4:	e0bffe17 	ldw	r2,-8(fp)
  213fd8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
  213fdc:	00800044 	movi	r2,1
  213fe0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  213fe4:	e0bffc17 	ldw	r2,-16(fp)
  213fe8:	10800504 	addi	r2,r2,20
  213fec:	1009883a 	mov	r4,r2
  213ff0:	00c00044 	movi	r3,1
  213ff4:	e0bffd17 	ldw	r2,-12(fp)
  213ff8:	1884983a 	sll	r2,r3,r2
  213ffc:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
  214000:	e0800317 	ldw	r2,12(fp)
  214004:	1080008c 	andi	r2,r2,2
  214008:	1000051e 	bne	r2,zero,214020 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  21400c:	e0bffc17 	ldw	r2,-16(fp)
  214010:	10800304 	addi	r2,r2,12
  214014:	1007883a 	mov	r3,r2
  214018:	00810004 	movi	r2,1024
  21401c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
  214020:	e0bffc17 	ldw	r2,-16(fp)
  214024:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  214028:	e0bffc17 	ldw	r2,-16(fp)
  21402c:	10800204 	addi	r2,r2,8
  214030:	10800037 	ldwio	r2,0(r2)
  214034:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214038:	e0bffa17 	ldw	r2,-24(fp)
  21403c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  214040:	10000226 	beq	r2,zero,21404c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214044:	e0bff717 	ldw	r2,-36(fp)
  214048:	1000031e 	bne	r2,zero,214058 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
  21404c:	e0bffa17 	ldw	r2,-24(fp)
  214050:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
  214054:	103ff426 	beq	r2,zero,214028 <_gp+0xffe02414>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
  214058:	e0bffa17 	ldw	r2,-24(fp)
  21405c:	1080100c 	andi	r2,r2,64
  214060:	10001e26 	beq	r2,zero,2140dc <alt_avalon_spi_command+0x14c>
  214064:	e0bff717 	ldw	r2,-36(fp)
  214068:	00801c0e 	bge	zero,r2,2140dc <alt_avalon_spi_command+0x14c>
    {
      credits--;
  21406c:	e0bff717 	ldw	r2,-36(fp)
  214070:	10bfffc4 	addi	r2,r2,-1
  214074:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
  214078:	e0ffff17 	ldw	r3,-4(fp)
  21407c:	e0bff817 	ldw	r2,-32(fp)
  214080:	18800a2e 	bgeu	r3,r2,2140ac <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
  214084:	e0bffc17 	ldw	r2,-16(fp)
  214088:	10800104 	addi	r2,r2,4
  21408c:	1009883a 	mov	r4,r2
  214090:	e0bfff17 	ldw	r2,-4(fp)
  214094:	10c00044 	addi	r3,r2,1
  214098:	e0ffff15 	stw	r3,-4(fp)
  21409c:	10800003 	ldbu	r2,0(r2)
  2140a0:	10803fcc 	andi	r2,r2,255
  2140a4:	20800035 	stwio	r2,0(r4)
  2140a8:	00000c06 	br	2140dc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
  2140ac:	e0bff517 	ldw	r2,-44(fp)
  2140b0:	10000826 	beq	r2,zero,2140d4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
  2140b4:	e0bff517 	ldw	r2,-44(fp)
  2140b8:	10bfffc4 	addi	r2,r2,-1
  2140bc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
  2140c0:	e0bffc17 	ldw	r2,-16(fp)
  2140c4:	10800104 	addi	r2,r2,4
  2140c8:	0007883a 	mov	r3,zero
  2140cc:	10c00035 	stwio	r3,0(r2)
  2140d0:	00000206 	br	2140dc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
  2140d4:	00bf0004 	movi	r2,-1024
  2140d8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
  2140dc:	e0bffa17 	ldw	r2,-24(fp)
  2140e0:	1080200c 	andi	r2,r2,128
  2140e4:	103fd026 	beq	r2,zero,214028 <_gp+0xffe02414>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
  2140e8:	e0bffc17 	ldw	r2,-16(fp)
  2140ec:	10800037 	ldwio	r2,0(r2)
  2140f0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
  2140f4:	e0bff617 	ldw	r2,-40(fp)
  2140f8:	10000426 	beq	r2,zero,21410c <alt_avalon_spi_command+0x17c>
        read_ignore--;
  2140fc:	e0bff617 	ldw	r2,-40(fp)
  214100:	10bfffc4 	addi	r2,r2,-1
  214104:	e0bff615 	stw	r2,-40(fp)
  214108:	00000506 	br	214120 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
  21410c:	e0800217 	ldw	r2,8(fp)
  214110:	10c00044 	addi	r3,r2,1
  214114:	e0c00215 	stw	r3,8(fp)
  214118:	e0fffb17 	ldw	r3,-20(fp)
  21411c:	10c00005 	stb	r3,0(r2)
      credits++;
  214120:	e0bff717 	ldw	r2,-36(fp)
  214124:	10800044 	addi	r2,r2,1
  214128:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
  21412c:	e0bff617 	ldw	r2,-40(fp)
  214130:	103fbd1e 	bne	r2,zero,214028 <_gp+0xffe02414>
  214134:	e0c00217 	ldw	r3,8(fp)
  214138:	e0bff917 	ldw	r2,-28(fp)
  21413c:	18bfba1e 	bne	r3,r2,214028 <_gp+0xffe02414>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
  214140:	e0bffc17 	ldw	r2,-16(fp)
  214144:	10800204 	addi	r2,r2,8
  214148:	10800037 	ldwio	r2,0(r2)
  21414c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
  214150:	e0bffa17 	ldw	r2,-24(fp)
  214154:	1080080c 	andi	r2,r2,32
  214158:	103ff926 	beq	r2,zero,214140 <_gp+0xffe0252c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
  21415c:	e0800317 	ldw	r2,12(fp)
  214160:	1080004c 	andi	r2,r2,1
  214164:	1000041e 	bne	r2,zero,214178 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
  214168:	e0bffc17 	ldw	r2,-16(fp)
  21416c:	10800304 	addi	r2,r2,12
  214170:	0007883a 	mov	r3,zero
  214174:	10c00035 	stwio	r3,0(r2)

  return read_length;
  214178:	e0800117 	ldw	r2,4(fp)
}
  21417c:	e037883a 	mov	sp,fp
  214180:	df000017 	ldw	fp,0(sp)
  214184:	dec00104 	addi	sp,sp,4
  214188:	f800283a 	ret

0021418c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  21418c:	defffa04 	addi	sp,sp,-24
  214190:	dfc00515 	stw	ra,20(sp)
  214194:	df000415 	stw	fp,16(sp)
  214198:	df000404 	addi	fp,sp,16
  21419c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  2141a0:	0007883a 	mov	r3,zero
  2141a4:	e0bfff17 	ldw	r2,-4(fp)
  2141a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  2141ac:	e0bfff17 	ldw	r2,-4(fp)
  2141b0:	10800104 	addi	r2,r2,4
  2141b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2141b8:	0005303a 	rdctl	r2,status
  2141bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2141c0:	e0fffd17 	ldw	r3,-12(fp)
  2141c4:	00bfff84 	movi	r2,-2
  2141c8:	1884703a 	and	r2,r3,r2
  2141cc:	1001703a 	wrctl	status,r2
  
  return context;
  2141d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  2141d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  2141d8:	02115b00 	call	2115b0 <alt_tick>
  2141dc:	e0bffc17 	ldw	r2,-16(fp)
  2141e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2141e4:	e0bffe17 	ldw	r2,-8(fp)
  2141e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  2141ec:	0001883a 	nop
  2141f0:	e037883a 	mov	sp,fp
  2141f4:	dfc00117 	ldw	ra,4(sp)
  2141f8:	df000017 	ldw	fp,0(sp)
  2141fc:	dec00204 	addi	sp,sp,8
  214200:	f800283a 	ret

00214204 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  214204:	defff804 	addi	sp,sp,-32
  214208:	dfc00715 	stw	ra,28(sp)
  21420c:	df000615 	stw	fp,24(sp)
  214210:	df000604 	addi	fp,sp,24
  214214:	e13ffc15 	stw	r4,-16(fp)
  214218:	e17ffd15 	stw	r5,-12(fp)
  21421c:	e1bffe15 	stw	r6,-8(fp)
  214220:	e1ffff15 	stw	r7,-4(fp)
  214224:	e0bfff17 	ldw	r2,-4(fp)
  214228:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  21422c:	d0a02a17 	ldw	r2,-32600(gp)
  214230:	1000021e 	bne	r2,zero,21423c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  214234:	e0bffb17 	ldw	r2,-20(fp)
  214238:	d0a02a15 	stw	r2,-32600(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  21423c:	e0bffc17 	ldw	r2,-16(fp)
  214240:	10800104 	addi	r2,r2,4
  214244:	00c001c4 	movi	r3,7
  214248:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  21424c:	d8000015 	stw	zero,0(sp)
  214250:	e1fffc17 	ldw	r7,-16(fp)
  214254:	01800874 	movhi	r6,33
  214258:	31906304 	addi	r6,r6,16780
  21425c:	e17ffe17 	ldw	r5,-8(fp)
  214260:	e13ffd17 	ldw	r4,-12(fp)
  214264:	02157980 	call	215798 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  214268:	0001883a 	nop
  21426c:	e037883a 	mov	sp,fp
  214270:	dfc00117 	ldw	ra,4(sp)
  214274:	df000017 	ldw	fp,0(sp)
  214278:	dec00204 	addi	sp,sp,8
  21427c:	f800283a 	ret

00214280 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  214280:	defffd04 	addi	sp,sp,-12
  214284:	dfc00215 	stw	ra,8(sp)
  214288:	df000115 	stw	fp,4(sp)
  21428c:	df000104 	addi	fp,sp,4
  214290:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  214294:	d1601704 	addi	r5,gp,-32676
  214298:	e13fff17 	ldw	r4,-4(fp)
  21429c:	02154c80 	call	2154c8 <alt_dev_llist_insert>
}
  2142a0:	e037883a 	mov	sp,fp
  2142a4:	dfc00117 	ldw	ra,4(sp)
  2142a8:	df000017 	ldw	fp,0(sp)
  2142ac:	dec00204 	addi	sp,sp,8
  2142b0:	f800283a 	ret

002142b4 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  2142b4:	defff704 	addi	sp,sp,-36
  2142b8:	dfc00815 	stw	ra,32(sp)
  2142bc:	df000715 	stw	fp,28(sp)
  2142c0:	df000704 	addi	fp,sp,28
  2142c4:	e13ffc15 	stw	r4,-16(fp)
  2142c8:	e17ffd15 	stw	r5,-12(fp)
  2142cc:	e1bffe15 	stw	r6,-8(fp)
  2142d0:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  2142d4:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  2142d8:	e0bffc17 	ldw	r2,-16(fp)
  2142dc:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  2142e0:	e0bffa17 	ldw	r2,-24(fp)
  2142e4:	10800b17 	ldw	r2,44(r2)
  2142e8:	e0fffd17 	ldw	r3,-12(fp)
  2142ec:	1880060e 	bge	r3,r2,214308 <alt_onchip_flash_read+0x54>
  2142f0:	e0fffd17 	ldw	r3,-12(fp)
  2142f4:	e0bfff17 	ldw	r2,-4(fp)
  2142f8:	1885883a 	add	r2,r3,r2
  2142fc:	e0fffa17 	ldw	r3,-24(fp)
  214300:	18c00b17 	ldw	r3,44(r3)
  214304:	1880020e 	bge	r3,r2,214310 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  214308:	00bffc84 	movi	r2,-14
  21430c:	00001706 	br	21436c <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  214310:	e0bffa17 	ldw	r2,-24(fp)
  214314:	10c00a17 	ldw	r3,40(r2)
  214318:	e0bffd17 	ldw	r2,-12(fp)
  21431c:	1885883a 	add	r2,r3,r2
  214320:	e0ffff17 	ldw	r3,-4(fp)
  214324:	180d883a 	mov	r6,r3
  214328:	100b883a 	mov	r5,r2
  21432c:	e13ffe17 	ldw	r4,-8(fp)
  214330:	0209a480 	call	209a48 <memcpy>

    if (NULL != flash->csr_base) {
  214334:	e0bffa17 	ldw	r2,-24(fp)
  214338:	10802f17 	ldw	r2,188(r2)
  21433c:	10000a26 	beq	r2,zero,214368 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  214340:	e0bffa17 	ldw	r2,-24(fp)
  214344:	10802f17 	ldw	r2,188(r2)
  214348:	10800037 	ldwio	r2,0(r2)
  21434c:	1080010c 	andi	r2,r2,4
  214350:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  214354:	e0bffb17 	ldw	r2,-20(fp)
  214358:	10800120 	cmpeqi	r2,r2,4
  21435c:	1000021e 	bne	r2,zero,214368 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  214360:	00bffec4 	movi	r2,-5
  214364:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  214368:	e0bff917 	ldw	r2,-28(fp)
}
  21436c:	e037883a 	mov	sp,fp
  214370:	dfc00117 	ldw	ra,4(sp)
  214374:	df000017 	ldw	fp,0(sp)
  214378:	dec00204 	addi	sp,sp,8
  21437c:	f800283a 	ret

00214380 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  214380:	defffa04 	addi	sp,sp,-24
  214384:	df000515 	stw	fp,20(sp)
  214388:	df000504 	addi	fp,sp,20
  21438c:	e13ffd15 	stw	r4,-12(fp)
  214390:	e17ffe15 	stw	r5,-8(fp)
  214394:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  214398:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  21439c:	e0bffd17 	ldw	r2,-12(fp)
  2143a0:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  2143a4:	e0bfff17 	ldw	r2,-4(fp)
  2143a8:	10000426 	beq	r2,zero,2143bc <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  2143ac:	e0bffc17 	ldw	r2,-16(fp)
  2143b0:	10c00c17 	ldw	r3,48(r2)
  2143b4:	e0bfff17 	ldw	r2,-4(fp)
  2143b8:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  2143bc:	e0bffc17 	ldw	r2,-16(fp)
  2143c0:	10800c17 	ldw	r2,48(r2)
  2143c4:	1000031e 	bne	r2,zero,2143d4 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  2143c8:	00bffd04 	movi	r2,-12
  2143cc:	e0bffb15 	stw	r2,-20(fp)
  2143d0:	00000d06 	br	214408 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  2143d4:	e0bffc17 	ldw	r2,-16(fp)
  2143d8:	10800c17 	ldw	r2,48(r2)
  2143dc:	10800250 	cmplti	r2,r2,9
  2143e0:	1000031e 	bne	r2,zero,2143f0 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  2143e4:	00bffc84 	movi	r2,-14
  2143e8:	e0bffb15 	stw	r2,-20(fp)
  2143ec:	00000606 	br	214408 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  2143f0:	e0bffe17 	ldw	r2,-8(fp)
  2143f4:	10000426 	beq	r2,zero,214408 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  2143f8:	e0bffc17 	ldw	r2,-16(fp)
  2143fc:	10c00d04 	addi	r3,r2,52
  214400:	e0bffe17 	ldw	r2,-8(fp)
  214404:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  214408:	e0bffb17 	ldw	r2,-20(fp)
}
  21440c:	e037883a 	mov	sp,fp
  214410:	df000017 	ldw	fp,0(sp)
  214414:	dec00104 	addi	sp,sp,4
  214418:	f800283a 	ret

0021441c <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  21441c:	defff904 	addi	sp,sp,-28
  214420:	dfc00615 	stw	ra,24(sp)
  214424:	df000515 	stw	fp,20(sp)
  214428:	df000504 	addi	fp,sp,20
  21442c:	e13ffe15 	stw	r4,-8(fp)
  214430:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  214434:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  214438:	e0bffe17 	ldw	r2,-8(fp)
  21443c:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  214440:	e0bffc17 	ldw	r2,-16(fp)
  214444:	10800b17 	ldw	r2,44(r2)
  214448:	e0ffff17 	ldw	r3,-4(fp)
  21444c:	18800216 	blt	r3,r2,214458 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  214450:	00bffc84 	movi	r2,-14
  214454:	00004606 	br	214570 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  214458:	e0bffc17 	ldw	r2,-16(fp)
  21445c:	10802f17 	ldw	r2,188(r2)
  214460:	10000326 	beq	r2,zero,214470 <alt_onchip_flash_erase_block+0x54>
  214464:	e0bffc17 	ldw	r2,-16(fp)
  214468:	10802e17 	ldw	r2,184(r2)
  21446c:	10000226 	beq	r2,zero,214478 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  214470:	00bffb44 	movi	r2,-19
  214474:	00003e06 	br	214570 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  214478:	e0bffc17 	ldw	r2,-16(fp)
  21447c:	10803f17 	ldw	r2,252(r2)
  214480:	10ffffc4 	addi	r3,r2,-1
  214484:	e0bfff17 	ldw	r2,-4(fp)
  214488:	1884703a 	and	r2,r3,r2
  21448c:	10000226 	beq	r2,zero,214498 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  214490:	00bffa84 	movi	r2,-22
  214494:	00003606 	br	214570 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  214498:	e13ffc17 	ldw	r4,-16(fp)
  21449c:	02150100 	call	215010 <alt_onchip_flash_poll_for_status_to_go_idle>
  2144a0:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  2144a4:	e0bffb17 	ldw	r2,-20(fp)
  2144a8:	10000226 	beq	r2,zero,2144b4 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  2144ac:	e0bffb17 	ldw	r2,-20(fp)
  2144b0:	00002f06 	br	214570 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  2144b4:	e0bffc17 	ldw	r2,-16(fp)
  2144b8:	10802f17 	ldw	r2,188(r2)
  2144bc:	10c00104 	addi	r3,r2,4
  2144c0:	e0bffc17 	ldw	r2,-16(fp)
  2144c4:	10802f17 	ldw	r2,188(r2)
  2144c8:	10800104 	addi	r2,r2,4
  2144cc:	10800037 	ldwio	r2,0(r2)
  2144d0:	113c002c 	andhi	r4,r2,61440
  2144d4:	00802034 	movhi	r2,128
  2144d8:	10bfffc4 	addi	r2,r2,-1
  2144dc:	2084b03a 	or	r2,r4,r2
  2144e0:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  2144e4:	e0bfff17 	ldw	r2,-4(fp)
  2144e8:	1000010e 	bge	r2,zero,2144f0 <alt_onchip_flash_erase_block+0xd4>
  2144ec:	108000c4 	addi	r2,r2,3
  2144f0:	1005d0ba 	srai	r2,r2,2
  2144f4:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  2144f8:	e0bffc17 	ldw	r2,-16(fp)
  2144fc:	10802f17 	ldw	r2,188(r2)
  214500:	10800104 	addi	r2,r2,4
  214504:	e0fffc17 	ldw	r3,-16(fp)
  214508:	18c02f17 	ldw	r3,188(r3)
  21450c:	18c00104 	addi	r3,r3,4
  214510:	18c00037 	ldwio	r3,0(r3)
  214514:	193c002c 	andhi	r4,r3,61440
  214518:	e0fffd17 	ldw	r3,-12(fp)
  21451c:	18c01c34 	orhi	r3,r3,112
  214520:	20c6b03a 	or	r3,r4,r3
  214524:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  214528:	e13ffc17 	ldw	r4,-16(fp)
  21452c:	02150100 	call	215010 <alt_onchip_flash_poll_for_status_to_go_idle>
  214530:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  214534:	e13ffc17 	ldw	r4,-16(fp)
  214538:	02150a00 	call	2150a0 <alt_onchip_flash_poll_for_status_erase_passed>
  21453c:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  214540:	e0bffc17 	ldw	r2,-16(fp)
  214544:	10802f17 	ldw	r2,188(r2)
  214548:	10c00104 	addi	r3,r2,4
  21454c:	e0bffc17 	ldw	r2,-16(fp)
  214550:	10802f17 	ldw	r2,188(r2)
  214554:	10800104 	addi	r2,r2,4
  214558:	11000037 	ldwio	r4,0(r2)
  21455c:	00840034 	movhi	r2,4096
  214560:	10bfffc4 	addi	r2,r2,-1
  214564:	2084b03a 	or	r2,r4,r2
  214568:	18800035 	stwio	r2,0(r3)

    return ret_code;
  21456c:	e0bffb17 	ldw	r2,-20(fp)
}
  214570:	e037883a 	mov	sp,fp
  214574:	dfc00117 	ldw	ra,4(sp)
  214578:	df000017 	ldw	fp,0(sp)
  21457c:	dec00204 	addi	sp,sp,8
  214580:	f800283a 	ret

00214584 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  214584:	defff204 	addi	sp,sp,-56
  214588:	dfc00d15 	stw	ra,52(sp)
  21458c:	df000c15 	stw	fp,48(sp)
  214590:	df000c04 	addi	fp,sp,48
  214594:	e13ffc15 	stw	r4,-16(fp)
  214598:	e17ffd15 	stw	r5,-12(fp)
  21459c:	e1bffe15 	stw	r6,-8(fp)
  2145a0:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  2145a4:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  2145a8:	e0bffc17 	ldw	r2,-16(fp)
  2145ac:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  2145b0:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  2145b4:	e0bffe17 	ldw	r2,-8(fp)
  2145b8:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  2145bc:	e0bff817 	ldw	r2,-32(fp)
  2145c0:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  2145c4:	e0fffd17 	ldw	r3,-12(fp)
  2145c8:	18800a0e 	bge	r3,r2,2145f4 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  2145cc:	e0bff817 	ldw	r2,-32(fp)
  2145d0:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  2145d4:	e0fffe17 	ldw	r3,-8(fp)
  2145d8:	1880060e 	bge	r3,r2,2145f4 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  2145dc:	e0bff817 	ldw	r2,-32(fp)
  2145e0:	10c00b17 	ldw	r3,44(r2)
  2145e4:	e0bffe17 	ldw	r2,-8(fp)
  2145e8:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  2145ec:	e0800217 	ldw	r2,8(fp)
  2145f0:	1880020e 	bge	r3,r2,2145fc <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  2145f4:	00bffc84 	movi	r2,-14
  2145f8:	00009306 	br	214848 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  2145fc:	e0bff817 	ldw	r2,-32(fp)
  214600:	10802f17 	ldw	r2,188(r2)
  214604:	10000326 	beq	r2,zero,214614 <alt_onchip_flash_write_block+0x90>
  214608:	e0bff817 	ldw	r2,-32(fp)
  21460c:	10802e17 	ldw	r2,184(r2)
  214610:	10000226 	beq	r2,zero,21461c <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  214614:	00bffb44 	movi	r2,-19
  214618:	00008b06 	br	214848 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  21461c:	e13ff817 	ldw	r4,-32(fp)
  214620:	02150100 	call	215010 <alt_onchip_flash_poll_for_status_to_go_idle>
  214624:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  214628:	e0bff417 	ldw	r2,-48(fp)
  21462c:	10000226 	beq	r2,zero,214638 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  214630:	e0bff417 	ldw	r2,-48(fp)
  214634:	00008406 	br	214848 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  214638:	e0bff817 	ldw	r2,-32(fp)
  21463c:	10802f17 	ldw	r2,188(r2)
  214640:	10c00104 	addi	r3,r2,4
  214644:	e0bff817 	ldw	r2,-32(fp)
  214648:	10802f17 	ldw	r2,188(r2)
  21464c:	10800104 	addi	r2,r2,4
  214650:	10800037 	ldwio	r2,0(r2)
  214654:	113c002c 	andhi	r4,r2,61440
  214658:	00802034 	movhi	r2,128
  21465c:	10bfffc4 	addi	r2,r2,-1
  214660:	2084b03a 	or	r2,r4,r2
  214664:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  214668:	00006506 	br	214800 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  21466c:	00bfffc4 	movi	r2,-1
  214670:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  214674:	e0bff617 	ldw	r2,-40(fp)
  214678:	108000cc 	andi	r2,r2,3
  21467c:	10001e1e 	bne	r2,zero,2146f8 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  214680:	e0bff617 	ldw	r2,-40(fp)
  214684:	10c00104 	addi	r3,r2,4
  214688:	00bfff04 	movi	r2,-4
  21468c:	1884703a 	and	r2,r3,r2
  214690:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  214694:	e0fff717 	ldw	r3,-36(fp)
  214698:	e0bff617 	ldw	r2,-40(fp)
  21469c:	1885c83a 	sub	r2,r3,r2
  2146a0:	e0c00217 	ldw	r3,8(fp)
  2146a4:	1880010e 	bge	r3,r2,2146ac <alt_onchip_flash_write_block+0x128>
  2146a8:	1805883a 	mov	r2,r3
  2146ac:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  2146b0:	e0bff517 	ldw	r2,-44(fp)
  2146b4:	e0ffff17 	ldw	r3,-4(fp)
  2146b8:	1887883a 	add	r3,r3,r2
  2146bc:	e13ff917 	ldw	r4,-28(fp)
  2146c0:	e0bffb04 	addi	r2,fp,-20
  2146c4:	200d883a 	mov	r6,r4
  2146c8:	180b883a 	mov	r5,r3
  2146cc:	1009883a 	mov	r4,r2
  2146d0:	0209a480 	call	209a48 <memcpy>
            buffer_offset += length_of_current_write;
  2146d4:	e0fff517 	ldw	r3,-44(fp)
  2146d8:	e0bff917 	ldw	r2,-28(fp)
  2146dc:	1885883a 	add	r2,r3,r2
  2146e0:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  2146e4:	e0c00217 	ldw	r3,8(fp)
  2146e8:	e0bff917 	ldw	r2,-28(fp)
  2146ec:	1885c83a 	sub	r2,r3,r2
  2146f0:	e0800215 	stw	r2,8(fp)
  2146f4:	00003006 	br	2147b8 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  2146f8:	e0bff617 	ldw	r2,-40(fp)
  2146fc:	108000cc 	andi	r2,r2,3
  214700:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  214704:	e0fff617 	ldw	r3,-40(fp)
  214708:	e0bffa17 	ldw	r2,-24(fp)
  21470c:	1885c83a 	sub	r2,r3,r2
  214710:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  214714:	e0bff617 	ldw	r2,-40(fp)
  214718:	10c00104 	addi	r3,r2,4
  21471c:	00bfff04 	movi	r2,-4
  214720:	1884703a 	and	r2,r3,r2
  214724:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  214728:	e0fff717 	ldw	r3,-36(fp)
  21472c:	e0bff617 	ldw	r2,-40(fp)
  214730:	1889c83a 	sub	r4,r3,r2
  214734:	e0c00217 	ldw	r3,8(fp)
  214738:	e0bffa17 	ldw	r2,-24(fp)
  21473c:	1887883a 	add	r3,r3,r2
  214740:	2005883a 	mov	r2,r4
  214744:	1880010e 	bge	r3,r2,21474c <alt_onchip_flash_write_block+0x1c8>
  214748:	1805883a 	mov	r2,r3
  21474c:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  214750:	e0fffb04 	addi	r3,fp,-20
  214754:	e0bffa17 	ldw	r2,-24(fp)
  214758:	1885883a 	add	r2,r3,r2
  21475c:	100f883a 	mov	r7,r2
  214760:	e0bff517 	ldw	r2,-44(fp)
  214764:	e0ffff17 	ldw	r3,-4(fp)
  214768:	1889883a 	add	r4,r3,r2
  21476c:	e0fff917 	ldw	r3,-28(fp)
  214770:	e0bffa17 	ldw	r2,-24(fp)
  214774:	1885c83a 	sub	r2,r3,r2
  214778:	100d883a 	mov	r6,r2
  21477c:	200b883a 	mov	r5,r4
  214780:	3809883a 	mov	r4,r7
  214784:	0209a480 	call	209a48 <memcpy>
            buffer_offset += length_of_current_write - padding;
  214788:	e0fff917 	ldw	r3,-28(fp)
  21478c:	e0bffa17 	ldw	r2,-24(fp)
  214790:	1885c83a 	sub	r2,r3,r2
  214794:	e0fff517 	ldw	r3,-44(fp)
  214798:	1885883a 	add	r2,r3,r2
  21479c:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  2147a0:	e0fff917 	ldw	r3,-28(fp)
  2147a4:	e0bffa17 	ldw	r2,-24(fp)
  2147a8:	1885c83a 	sub	r2,r3,r2
  2147ac:	e0c00217 	ldw	r3,8(fp)
  2147b0:	1885c83a 	sub	r2,r3,r2
  2147b4:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  2147b8:	e0bff817 	ldw	r2,-32(fp)
  2147bc:	10c00a17 	ldw	r3,40(r2)
  2147c0:	e0bff617 	ldw	r2,-40(fp)
  2147c4:	1885883a 	add	r2,r3,r2
  2147c8:	e0fffb17 	ldw	r3,-20(fp)
  2147cc:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  2147d0:	e13ff817 	ldw	r4,-32(fp)
  2147d4:	02150100 	call	215010 <alt_onchip_flash_poll_for_status_to_go_idle>
  2147d8:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  2147dc:	e0bff417 	ldw	r2,-48(fp)
  2147e0:	10000a1e 	bne	r2,zero,21480c <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  2147e4:	e13ff817 	ldw	r4,-32(fp)
  2147e8:	02151300 	call	215130 <alt_onchip_flash_poll_for_status_write_passed>
  2147ec:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  2147f0:	e0bff417 	ldw	r2,-48(fp)
  2147f4:	1000071e 	bne	r2,zero,214814 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  2147f8:	e0bff717 	ldw	r2,-36(fp)
  2147fc:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  214800:	e0800217 	ldw	r2,8(fp)
  214804:	103f991e 	bne	r2,zero,21466c <_gp+0xffe02a58>
  214808:	00000306 	br	214818 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  21480c:	0001883a 	nop
  214810:	00000106 	br	214818 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  214814:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  214818:	e0bff817 	ldw	r2,-32(fp)
  21481c:	10802f17 	ldw	r2,188(r2)
  214820:	10c00104 	addi	r3,r2,4
  214824:	e0bff817 	ldw	r2,-32(fp)
  214828:	10802f17 	ldw	r2,188(r2)
  21482c:	10800104 	addi	r2,r2,4
  214830:	11000037 	ldwio	r4,0(r2)
  214834:	00840034 	movhi	r2,4096
  214838:	10bfffc4 	addi	r2,r2,-1
  21483c:	2084b03a 	or	r2,r4,r2
  214840:	18800035 	stwio	r2,0(r3)

    return ret_code;
  214844:	e0bff417 	ldw	r2,-48(fp)
}
  214848:	e037883a 	mov	sp,fp
  21484c:	dfc00117 	ldw	ra,4(sp)
  214850:	df000017 	ldw	fp,0(sp)
  214854:	dec00204 	addi	sp,sp,8
  214858:	f800283a 	ret

0021485c <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  21485c:	defff104 	addi	sp,sp,-60
  214860:	dfc00e15 	stw	ra,56(sp)
  214864:	df000d15 	stw	fp,52(sp)
  214868:	df000d04 	addi	fp,sp,52
  21486c:	e13ffc15 	stw	r4,-16(fp)
  214870:	e17ffd15 	stw	r5,-12(fp)
  214874:	e1bffe15 	stw	r6,-8(fp)
  214878:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  21487c:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  214880:	e0bfff17 	ldw	r2,-4(fp)
  214884:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  214888:	e0bffd17 	ldw	r2,-12(fp)
  21488c:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  214890:	e0bffc17 	ldw	r2,-16(fp)
  214894:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  214898:	e0bffa17 	ldw	r2,-24(fp)
  21489c:	10800b17 	ldw	r2,44(r2)
  2148a0:	e0fffd17 	ldw	r3,-12(fp)
  2148a4:	1880060e 	bge	r3,r2,2148c0 <alt_onchip_flash_write+0x64>
  2148a8:	e0bffa17 	ldw	r2,-24(fp)
  2148ac:	10c00b17 	ldw	r3,44(r2)
  2148b0:	e0bffd17 	ldw	r2,-12(fp)
  2148b4:	1887c83a 	sub	r3,r3,r2
  2148b8:	e0bfff17 	ldw	r2,-4(fp)
  2148bc:	1880020e 	bge	r3,r2,2148c8 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  2148c0:	00bffc84 	movi	r2,-14
  2148c4:	00009606 	br	214b20 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  2148c8:	e03ff515 	stw	zero,-44(fp)
  2148cc:	00008706 	br	214aec <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  2148d0:	e0fffa17 	ldw	r3,-24(fp)
  2148d4:	e0bff517 	ldw	r2,-44(fp)
  2148d8:	1004913a 	slli	r2,r2,4
  2148dc:	1885883a 	add	r2,r3,r2
  2148e0:	10800d04 	addi	r2,r2,52
  2148e4:	10800017 	ldw	r2,0(r2)
  2148e8:	e0fffd17 	ldw	r3,-12(fp)
  2148ec:	18807c16 	blt	r3,r2,214ae0 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  2148f0:	e0fffa17 	ldw	r3,-24(fp)
  2148f4:	e0bff517 	ldw	r2,-44(fp)
  2148f8:	1004913a 	slli	r2,r2,4
  2148fc:	1885883a 	add	r2,r3,r2
  214900:	10800d04 	addi	r2,r2,52
  214904:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  214908:	e13ffa17 	ldw	r4,-24(fp)
  21490c:	e0bff517 	ldw	r2,-44(fp)
  214910:	1004913a 	slli	r2,r2,4
  214914:	2085883a 	add	r2,r4,r2
  214918:	10800e04 	addi	r2,r2,56
  21491c:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  214920:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  214924:	e0fffd17 	ldw	r3,-12(fp)
  214928:	18806d0e 	bge	r3,r2,214ae0 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  21492c:	e0fffa17 	ldw	r3,-24(fp)
  214930:	e0bff517 	ldw	r2,-44(fp)
  214934:	1004913a 	slli	r2,r2,4
  214938:	1885883a 	add	r2,r3,r2
  21493c:	10800d04 	addi	r2,r2,52
  214940:	10800017 	ldw	r2,0(r2)
  214944:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  214948:	e03ff615 	stw	zero,-40(fp)
  21494c:	00005c06 	br	214ac0 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  214950:	e0fffd17 	ldw	r3,-12(fp)
  214954:	e0bff717 	ldw	r2,-36(fp)
  214958:	18804d16 	blt	r3,r2,214a90 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  21495c:	e0fffa17 	ldw	r3,-24(fp)
  214960:	e0bff517 	ldw	r2,-44(fp)
  214964:	10800104 	addi	r2,r2,4
  214968:	1004913a 	slli	r2,r2,4
  21496c:	1885883a 	add	r2,r3,r2
  214970:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  214974:	e0bff717 	ldw	r2,-36(fp)
  214978:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  21497c:	e0fffd17 	ldw	r3,-12(fp)
  214980:	1880430e 	bge	r3,r2,214a90 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  214984:	e0fffa17 	ldw	r3,-24(fp)
  214988:	e0bff517 	ldw	r2,-44(fp)
  21498c:	10800104 	addi	r2,r2,4
  214990:	1004913a 	slli	r2,r2,4
  214994:	1885883a 	add	r2,r3,r2
  214998:	10c00017 	ldw	r3,0(r2)
  21499c:	e0bff717 	ldw	r2,-36(fp)
  2149a0:	1887883a 	add	r3,r3,r2
  2149a4:	e0bffd17 	ldw	r2,-12(fp)
  2149a8:	1885c83a 	sub	r2,r3,r2
  2149ac:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  2149b0:	e0fffb17 	ldw	r3,-20(fp)
  2149b4:	e0bfff17 	ldw	r2,-4(fp)
  2149b8:	1880010e 	bge	r3,r2,2149c0 <alt_onchip_flash_write+0x164>
  2149bc:	1805883a 	mov	r2,r3
  2149c0:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  2149c4:	e0bffa17 	ldw	r2,-24(fp)
  2149c8:	10c00a17 	ldw	r3,40(r2)
  2149cc:	e0bffd17 	ldw	r2,-12(fp)
  2149d0:	1885883a 	add	r2,r3,r2
  2149d4:	e0fffb17 	ldw	r3,-20(fp)
  2149d8:	180d883a 	mov	r6,r3
  2149dc:	100b883a 	mov	r5,r2
  2149e0:	e13ffe17 	ldw	r4,-8(fp)
  2149e4:	021635c0 	call	21635c <memcmp>
  2149e8:	10001326 	beq	r2,zero,214a38 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  2149ec:	e0bffa17 	ldw	r2,-24(fp)
  2149f0:	10800817 	ldw	r2,32(r2)
  2149f4:	e0fffa17 	ldw	r3,-24(fp)
  2149f8:	e17ff717 	ldw	r5,-36(fp)
  2149fc:	1809883a 	mov	r4,r3
  214a00:	103ee83a 	callr	r2
  214a04:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  214a08:	e0bff417 	ldw	r2,-48(fp)
  214a0c:	10000a1e 	bne	r2,zero,214a38 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  214a10:	e0bffa17 	ldw	r2,-24(fp)
  214a14:	10800917 	ldw	r2,36(r2)
  214a18:	e13ffa17 	ldw	r4,-24(fp)
  214a1c:	e0fffb17 	ldw	r3,-20(fp)
  214a20:	d8c00015 	stw	r3,0(sp)
  214a24:	e1fffe17 	ldw	r7,-8(fp)
  214a28:	e1bffd17 	ldw	r6,-12(fp)
  214a2c:	e17ff717 	ldw	r5,-36(fp)
  214a30:	103ee83a 	callr	r2
  214a34:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  214a38:	e0ffff17 	ldw	r3,-4(fp)
  214a3c:	e0bffb17 	ldw	r2,-20(fp)
  214a40:	18802e26 	beq	r3,r2,214afc <alt_onchip_flash_write+0x2a0>
  214a44:	e0bff417 	ldw	r2,-48(fp)
  214a48:	10002c1e 	bne	r2,zero,214afc <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  214a4c:	e0ffff17 	ldw	r3,-4(fp)
  214a50:	e0bffb17 	ldw	r2,-20(fp)
  214a54:	1885c83a 	sub	r2,r3,r2
  214a58:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  214a5c:	e0fffa17 	ldw	r3,-24(fp)
  214a60:	e0bff517 	ldw	r2,-44(fp)
  214a64:	10800104 	addi	r2,r2,4
  214a68:	1004913a 	slli	r2,r2,4
  214a6c:	1885883a 	add	r2,r3,r2
  214a70:	10c00017 	ldw	r3,0(r2)
  214a74:	e0bff717 	ldw	r2,-36(fp)
  214a78:	1885883a 	add	r2,r3,r2
  214a7c:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  214a80:	e0bffb17 	ldw	r2,-20(fp)
  214a84:	e0fffe17 	ldw	r3,-8(fp)
  214a88:	1885883a 	add	r2,r3,r2
  214a8c:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  214a90:	e0fffa17 	ldw	r3,-24(fp)
  214a94:	e0bff517 	ldw	r2,-44(fp)
  214a98:	10800104 	addi	r2,r2,4
  214a9c:	1004913a 	slli	r2,r2,4
  214aa0:	1885883a 	add	r2,r3,r2
  214aa4:	10800017 	ldw	r2,0(r2)
  214aa8:	e0fff717 	ldw	r3,-36(fp)
  214aac:	1885883a 	add	r2,r3,r2
  214ab0:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  214ab4:	e0bff617 	ldw	r2,-40(fp)
  214ab8:	10800044 	addi	r2,r2,1
  214abc:	e0bff615 	stw	r2,-40(fp)
  214ac0:	e0fffa17 	ldw	r3,-24(fp)
  214ac4:	e0bff517 	ldw	r2,-44(fp)
  214ac8:	1004913a 	slli	r2,r2,4
  214acc:	1885883a 	add	r2,r3,r2
  214ad0:	10800f04 	addi	r2,r2,60
  214ad4:	10800017 	ldw	r2,0(r2)
  214ad8:	e0fff617 	ldw	r3,-40(fp)
  214adc:	18bf9c16 	blt	r3,r2,214950 <_gp+0xffe02d3c>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  214ae0:	e0bff517 	ldw	r2,-44(fp)
  214ae4:	10800044 	addi	r2,r2,1
  214ae8:	e0bff515 	stw	r2,-44(fp)
  214aec:	e0bffa17 	ldw	r2,-24(fp)
  214af0:	10800c17 	ldw	r2,48(r2)
  214af4:	e0fff517 	ldw	r3,-44(fp)
  214af8:	18bf7516 	blt	r3,r2,2148d0 <_gp+0xffe02cbc>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  214afc:	e0bffa17 	ldw	r2,-24(fp)
  214b00:	10c00a17 	ldw	r3,40(r2)
  214b04:	e0bff917 	ldw	r2,-28(fp)
  214b08:	1885883a 	add	r2,r3,r2
  214b0c:	e0fff817 	ldw	r3,-32(fp)
  214b10:	180b883a 	mov	r5,r3
  214b14:	1009883a 	mov	r4,r2
  214b18:	02154440 	call	215444 <alt_dcache_flush>
    return ret_code;
  214b1c:	e0bff417 	ldw	r2,-48(fp)
}
  214b20:	e037883a 	mov	sp,fp
  214b24:	dfc00117 	ldw	ra,4(sp)
  214b28:	df000017 	ldw	fp,0(sp)
  214b2c:	dec00204 	addi	sp,sp,8
  214b30:	f800283a 	ret

00214b34 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  214b34:	defff504 	addi	sp,sp,-44
  214b38:	dfc00a15 	stw	ra,40(sp)
  214b3c:	df000915 	stw	fp,36(sp)
  214b40:	dc000815 	stw	r16,32(sp)
  214b44:	df000904 	addi	fp,sp,36
  214b48:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  214b4c:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  214b50:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  214b54:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  214b58:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  214b5c:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  214b60:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  214b64:	e0bffe17 	ldw	r2,-8(fp)
  214b68:	10800d04 	addi	r2,r2,52
  214b6c:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  214b70:	e0bffe17 	ldw	r2,-8(fp)
  214b74:	10802f17 	ldw	r2,188(r2)
  214b78:	10001926 	beq	r2,zero,214be0 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  214b7c:	e0bffe17 	ldw	r2,-8(fp)
  214b80:	10802f17 	ldw	r2,188(r2)
  214b84:	10800037 	ldwio	r2,0(r2)
  214b88:	1080080c 	andi	r2,r2,32
  214b8c:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  214b90:	e0bffe17 	ldw	r2,-8(fp)
  214b94:	10802f17 	ldw	r2,188(r2)
  214b98:	10800037 	ldwio	r2,0(r2)
  214b9c:	1080100c 	andi	r2,r2,64
  214ba0:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  214ba4:	e0bffe17 	ldw	r2,-8(fp)
  214ba8:	10802f17 	ldw	r2,188(r2)
  214bac:	10800037 	ldwio	r2,0(r2)
  214bb0:	1080200c 	andi	r2,r2,128
  214bb4:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  214bb8:	e0bffe17 	ldw	r2,-8(fp)
  214bbc:	10802f17 	ldw	r2,188(r2)
  214bc0:	10800037 	ldwio	r2,0(r2)
  214bc4:	1080400c 	andi	r2,r2,256
  214bc8:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  214bcc:	e0bffe17 	ldw	r2,-8(fp)
  214bd0:	10802f17 	ldw	r2,188(r2)
  214bd4:	10800037 	ldwio	r2,0(r2)
  214bd8:	1080800c 	andi	r2,r2,512
  214bdc:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  214be0:	e0bffe17 	ldw	r2,-8(fp)
  214be4:	10803017 	ldw	r2,192(r2)
  214be8:	10800058 	cmpnei	r2,r2,1
  214bec:	10002f1e 	bne	r2,zero,214cac <altera_onchip_flash_init+0x178>
  214bf0:	e0bff817 	ldw	r2,-32(fp)
  214bf4:	10800820 	cmpeqi	r2,r2,32
  214bf8:	10002c1e 	bne	r2,zero,214cac <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  214bfc:	e0bff717 	ldw	r2,-36(fp)
  214c00:	1004913a 	slli	r2,r2,4
  214c04:	e0fffd17 	ldw	r3,-12(fp)
  214c08:	1885883a 	add	r2,r3,r2
  214c0c:	e0fffe17 	ldw	r3,-8(fp)
  214c10:	18c03117 	ldw	r3,196(r3)
  214c14:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  214c18:	e0bff717 	ldw	r2,-36(fp)
  214c1c:	1004913a 	slli	r2,r2,4
  214c20:	e0fffd17 	ldw	r3,-12(fp)
  214c24:	1885883a 	add	r2,r3,r2
  214c28:	e0fffe17 	ldw	r3,-8(fp)
  214c2c:	19003217 	ldw	r4,200(r3)
  214c30:	e0fffe17 	ldw	r3,-8(fp)
  214c34:	18c03117 	ldw	r3,196(r3)
  214c38:	20c7c83a 	sub	r3,r4,r3
  214c3c:	18c00044 	addi	r3,r3,1
  214c40:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214c44:	e0bff717 	ldw	r2,-36(fp)
  214c48:	1004913a 	slli	r2,r2,4
  214c4c:	e0fffd17 	ldw	r3,-12(fp)
  214c50:	18a1883a 	add	r16,r3,r2
  214c54:	e0fffe17 	ldw	r3,-8(fp)
  214c58:	e0bff717 	ldw	r2,-36(fp)
  214c5c:	1004913a 	slli	r2,r2,4
  214c60:	1885883a 	add	r2,r3,r2
  214c64:	10800e04 	addi	r2,r2,56
  214c68:	10c00017 	ldw	r3,0(r2)
  214c6c:	e0bffe17 	ldw	r2,-8(fp)
  214c70:	10803f17 	ldw	r2,252(r2)
  214c74:	100b883a 	mov	r5,r2
  214c78:	1809883a 	mov	r4,r3
  214c7c:	02030c40 	call	2030c4 <__divsi3>
  214c80:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214c84:	e0bff717 	ldw	r2,-36(fp)
  214c88:	1004913a 	slli	r2,r2,4
  214c8c:	e0fffd17 	ldw	r3,-12(fp)
  214c90:	1885883a 	add	r2,r3,r2
  214c94:	e0fffe17 	ldw	r3,-8(fp)
  214c98:	18c03f17 	ldw	r3,252(r3)
  214c9c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214ca0:	e0bff717 	ldw	r2,-36(fp)
  214ca4:	10800044 	addi	r2,r2,1
  214ca8:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  214cac:	e0bffe17 	ldw	r2,-8(fp)
  214cb0:	10803317 	ldw	r2,204(r2)
  214cb4:	10800058 	cmpnei	r2,r2,1
  214cb8:	10002f1e 	bne	r2,zero,214d78 <altera_onchip_flash_init+0x244>
  214cbc:	e0bff917 	ldw	r2,-28(fp)
  214cc0:	10801020 	cmpeqi	r2,r2,64
  214cc4:	10002c1e 	bne	r2,zero,214d78 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  214cc8:	e0bff717 	ldw	r2,-36(fp)
  214ccc:	1004913a 	slli	r2,r2,4
  214cd0:	e0fffd17 	ldw	r3,-12(fp)
  214cd4:	1885883a 	add	r2,r3,r2
  214cd8:	e0fffe17 	ldw	r3,-8(fp)
  214cdc:	18c03417 	ldw	r3,208(r3)
  214ce0:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  214ce4:	e0bff717 	ldw	r2,-36(fp)
  214ce8:	1004913a 	slli	r2,r2,4
  214cec:	e0fffd17 	ldw	r3,-12(fp)
  214cf0:	1885883a 	add	r2,r3,r2
  214cf4:	e0fffe17 	ldw	r3,-8(fp)
  214cf8:	19003517 	ldw	r4,212(r3)
  214cfc:	e0fffe17 	ldw	r3,-8(fp)
  214d00:	18c03417 	ldw	r3,208(r3)
  214d04:	20c7c83a 	sub	r3,r4,r3
  214d08:	18c00044 	addi	r3,r3,1
  214d0c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214d10:	e0bff717 	ldw	r2,-36(fp)
  214d14:	1004913a 	slli	r2,r2,4
  214d18:	e0fffd17 	ldw	r3,-12(fp)
  214d1c:	18a1883a 	add	r16,r3,r2
  214d20:	e0fffe17 	ldw	r3,-8(fp)
  214d24:	e0bff717 	ldw	r2,-36(fp)
  214d28:	1004913a 	slli	r2,r2,4
  214d2c:	1885883a 	add	r2,r3,r2
  214d30:	10800e04 	addi	r2,r2,56
  214d34:	10c00017 	ldw	r3,0(r2)
  214d38:	e0bffe17 	ldw	r2,-8(fp)
  214d3c:	10803f17 	ldw	r2,252(r2)
  214d40:	100b883a 	mov	r5,r2
  214d44:	1809883a 	mov	r4,r3
  214d48:	02030c40 	call	2030c4 <__divsi3>
  214d4c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214d50:	e0bff717 	ldw	r2,-36(fp)
  214d54:	1004913a 	slli	r2,r2,4
  214d58:	e0fffd17 	ldw	r3,-12(fp)
  214d5c:	1885883a 	add	r2,r3,r2
  214d60:	e0fffe17 	ldw	r3,-8(fp)
  214d64:	18c03f17 	ldw	r3,252(r3)
  214d68:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214d6c:	e0bff717 	ldw	r2,-36(fp)
  214d70:	10800044 	addi	r2,r2,1
  214d74:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  214d78:	e0bffe17 	ldw	r2,-8(fp)
  214d7c:	10803617 	ldw	r2,216(r2)
  214d80:	10800058 	cmpnei	r2,r2,1
  214d84:	10002f1e 	bne	r2,zero,214e44 <altera_onchip_flash_init+0x310>
  214d88:	e0bffa17 	ldw	r2,-24(fp)
  214d8c:	10802020 	cmpeqi	r2,r2,128
  214d90:	10002c1e 	bne	r2,zero,214e44 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  214d94:	e0bff717 	ldw	r2,-36(fp)
  214d98:	1004913a 	slli	r2,r2,4
  214d9c:	e0fffd17 	ldw	r3,-12(fp)
  214da0:	1885883a 	add	r2,r3,r2
  214da4:	e0fffe17 	ldw	r3,-8(fp)
  214da8:	18c03717 	ldw	r3,220(r3)
  214dac:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  214db0:	e0bff717 	ldw	r2,-36(fp)
  214db4:	1004913a 	slli	r2,r2,4
  214db8:	e0fffd17 	ldw	r3,-12(fp)
  214dbc:	1885883a 	add	r2,r3,r2
  214dc0:	e0fffe17 	ldw	r3,-8(fp)
  214dc4:	19003817 	ldw	r4,224(r3)
  214dc8:	e0fffe17 	ldw	r3,-8(fp)
  214dcc:	18c03717 	ldw	r3,220(r3)
  214dd0:	20c7c83a 	sub	r3,r4,r3
  214dd4:	18c00044 	addi	r3,r3,1
  214dd8:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214ddc:	e0bff717 	ldw	r2,-36(fp)
  214de0:	1004913a 	slli	r2,r2,4
  214de4:	e0fffd17 	ldw	r3,-12(fp)
  214de8:	18a1883a 	add	r16,r3,r2
  214dec:	e0fffe17 	ldw	r3,-8(fp)
  214df0:	e0bff717 	ldw	r2,-36(fp)
  214df4:	1004913a 	slli	r2,r2,4
  214df8:	1885883a 	add	r2,r3,r2
  214dfc:	10800e04 	addi	r2,r2,56
  214e00:	10c00017 	ldw	r3,0(r2)
  214e04:	e0bffe17 	ldw	r2,-8(fp)
  214e08:	10803f17 	ldw	r2,252(r2)
  214e0c:	100b883a 	mov	r5,r2
  214e10:	1809883a 	mov	r4,r3
  214e14:	02030c40 	call	2030c4 <__divsi3>
  214e18:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214e1c:	e0bff717 	ldw	r2,-36(fp)
  214e20:	1004913a 	slli	r2,r2,4
  214e24:	e0fffd17 	ldw	r3,-12(fp)
  214e28:	1885883a 	add	r2,r3,r2
  214e2c:	e0fffe17 	ldw	r3,-8(fp)
  214e30:	18c03f17 	ldw	r3,252(r3)
  214e34:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214e38:	e0bff717 	ldw	r2,-36(fp)
  214e3c:	10800044 	addi	r2,r2,1
  214e40:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  214e44:	e0bffe17 	ldw	r2,-8(fp)
  214e48:	10803917 	ldw	r2,228(r2)
  214e4c:	10800058 	cmpnei	r2,r2,1
  214e50:	10002f1e 	bne	r2,zero,214f10 <altera_onchip_flash_init+0x3dc>
  214e54:	e0bffb17 	ldw	r2,-20(fp)
  214e58:	10804020 	cmpeqi	r2,r2,256
  214e5c:	10002c1e 	bne	r2,zero,214f10 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  214e60:	e0bff717 	ldw	r2,-36(fp)
  214e64:	1004913a 	slli	r2,r2,4
  214e68:	e0fffd17 	ldw	r3,-12(fp)
  214e6c:	1885883a 	add	r2,r3,r2
  214e70:	e0fffe17 	ldw	r3,-8(fp)
  214e74:	18c03a17 	ldw	r3,232(r3)
  214e78:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  214e7c:	e0bff717 	ldw	r2,-36(fp)
  214e80:	1004913a 	slli	r2,r2,4
  214e84:	e0fffd17 	ldw	r3,-12(fp)
  214e88:	1885883a 	add	r2,r3,r2
  214e8c:	e0fffe17 	ldw	r3,-8(fp)
  214e90:	19003b17 	ldw	r4,236(r3)
  214e94:	e0fffe17 	ldw	r3,-8(fp)
  214e98:	18c03a17 	ldw	r3,232(r3)
  214e9c:	20c7c83a 	sub	r3,r4,r3
  214ea0:	18c00044 	addi	r3,r3,1
  214ea4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214ea8:	e0bff717 	ldw	r2,-36(fp)
  214eac:	1004913a 	slli	r2,r2,4
  214eb0:	e0fffd17 	ldw	r3,-12(fp)
  214eb4:	18a1883a 	add	r16,r3,r2
  214eb8:	e0fffe17 	ldw	r3,-8(fp)
  214ebc:	e0bff717 	ldw	r2,-36(fp)
  214ec0:	1004913a 	slli	r2,r2,4
  214ec4:	1885883a 	add	r2,r3,r2
  214ec8:	10800e04 	addi	r2,r2,56
  214ecc:	10c00017 	ldw	r3,0(r2)
  214ed0:	e0bffe17 	ldw	r2,-8(fp)
  214ed4:	10803f17 	ldw	r2,252(r2)
  214ed8:	100b883a 	mov	r5,r2
  214edc:	1809883a 	mov	r4,r3
  214ee0:	02030c40 	call	2030c4 <__divsi3>
  214ee4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214ee8:	e0bff717 	ldw	r2,-36(fp)
  214eec:	1004913a 	slli	r2,r2,4
  214ef0:	e0fffd17 	ldw	r3,-12(fp)
  214ef4:	1885883a 	add	r2,r3,r2
  214ef8:	e0fffe17 	ldw	r3,-8(fp)
  214efc:	18c03f17 	ldw	r3,252(r3)
  214f00:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214f04:	e0bff717 	ldw	r2,-36(fp)
  214f08:	10800044 	addi	r2,r2,1
  214f0c:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  214f10:	e0bffe17 	ldw	r2,-8(fp)
  214f14:	10803c17 	ldw	r2,240(r2)
  214f18:	10800058 	cmpnei	r2,r2,1
  214f1c:	10002f1e 	bne	r2,zero,214fdc <altera_onchip_flash_init+0x4a8>
  214f20:	e0bffc17 	ldw	r2,-16(fp)
  214f24:	10808020 	cmpeqi	r2,r2,512
  214f28:	10002c1e 	bne	r2,zero,214fdc <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  214f2c:	e0bff717 	ldw	r2,-36(fp)
  214f30:	1004913a 	slli	r2,r2,4
  214f34:	e0fffd17 	ldw	r3,-12(fp)
  214f38:	1885883a 	add	r2,r3,r2
  214f3c:	e0fffe17 	ldw	r3,-8(fp)
  214f40:	18c03d17 	ldw	r3,244(r3)
  214f44:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  214f48:	e0bff717 	ldw	r2,-36(fp)
  214f4c:	1004913a 	slli	r2,r2,4
  214f50:	e0fffd17 	ldw	r3,-12(fp)
  214f54:	1885883a 	add	r2,r3,r2
  214f58:	e0fffe17 	ldw	r3,-8(fp)
  214f5c:	19003e17 	ldw	r4,248(r3)
  214f60:	e0fffe17 	ldw	r3,-8(fp)
  214f64:	18c03d17 	ldw	r3,244(r3)
  214f68:	20c7c83a 	sub	r3,r4,r3
  214f6c:	18c00044 	addi	r3,r3,1
  214f70:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  214f74:	e0bff717 	ldw	r2,-36(fp)
  214f78:	1004913a 	slli	r2,r2,4
  214f7c:	e0fffd17 	ldw	r3,-12(fp)
  214f80:	18a1883a 	add	r16,r3,r2
  214f84:	e0fffe17 	ldw	r3,-8(fp)
  214f88:	e0bff717 	ldw	r2,-36(fp)
  214f8c:	1004913a 	slli	r2,r2,4
  214f90:	1885883a 	add	r2,r3,r2
  214f94:	10800e04 	addi	r2,r2,56
  214f98:	10c00017 	ldw	r3,0(r2)
  214f9c:	e0bffe17 	ldw	r2,-8(fp)
  214fa0:	10803f17 	ldw	r2,252(r2)
  214fa4:	100b883a 	mov	r5,r2
  214fa8:	1809883a 	mov	r4,r3
  214fac:	02030c40 	call	2030c4 <__divsi3>
  214fb0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  214fb4:	e0bff717 	ldw	r2,-36(fp)
  214fb8:	1004913a 	slli	r2,r2,4
  214fbc:	e0fffd17 	ldw	r3,-12(fp)
  214fc0:	1885883a 	add	r2,r3,r2
  214fc4:	e0fffe17 	ldw	r3,-8(fp)
  214fc8:	18c03f17 	ldw	r3,252(r3)
  214fcc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  214fd0:	e0bff717 	ldw	r2,-36(fp)
  214fd4:	10800044 	addi	r2,r2,1
  214fd8:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  214fdc:	e0bffe17 	ldw	r2,-8(fp)
  214fe0:	e0fff717 	ldw	r3,-36(fp)
  214fe4:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  214fe8:	e0bffe17 	ldw	r2,-8(fp)
  214fec:	1009883a 	mov	r4,r2
  214ff0:	02142800 	call	214280 <alt_flash_device_register>
}
  214ff4:	0001883a 	nop
  214ff8:	e6ffff04 	addi	sp,fp,-4
  214ffc:	dfc00217 	ldw	ra,8(sp)
  215000:	df000117 	ldw	fp,4(sp)
  215004:	dc000017 	ldw	r16,0(sp)
  215008:	dec00304 	addi	sp,sp,12
  21500c:	f800283a 	ret

00215010 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  215010:	defffa04 	addi	sp,sp,-24
  215014:	dfc00515 	stw	ra,20(sp)
  215018:	df000415 	stw	fp,16(sp)
  21501c:	df000404 	addi	fp,sp,16
  215020:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  215024:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215028:	008002f4 	movhi	r2,11
  21502c:	10ab9804 	addi	r2,r2,-20896
  215030:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215034:	008002f4 	movhi	r2,11
  215038:	10ab9804 	addi	r2,r2,-20896
  21503c:	e0bffd15 	stw	r2,-12(fp)

    while (
  215040:	00000c06 	br	215074 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  215044:	01000044 	movi	r4,1
  215048:	02152ec0 	call	2152ec <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  21504c:	e0bffe17 	ldw	r2,-8(fp)
  215050:	10000826 	beq	r2,zero,215074 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  215054:	e0bffd17 	ldw	r2,-12(fp)
  215058:	10bfffc4 	addi	r2,r2,-1
  21505c:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  215060:	e0bffd17 	ldw	r2,-12(fp)
  215064:	1000031e 	bne	r2,zero,215074 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  215068:	00bfe304 	movi	r2,-116
  21506c:	e0bffc15 	stw	r2,-16(fp)
                break;
  215070:	00000506 	br	215088 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  215074:	e0bfff17 	ldw	r2,-4(fp)
  215078:	10802f17 	ldw	r2,188(r2)
  21507c:	10800037 	ldwio	r2,0(r2)
  215080:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  215084:	103fef1e 	bne	r2,zero,215044 <_gp+0xffe03430>
                break;
            }
        }
    }

    return ret_code;
  215088:	e0bffc17 	ldw	r2,-16(fp)
}
  21508c:	e037883a 	mov	sp,fp
  215090:	dfc00117 	ldw	ra,4(sp)
  215094:	df000017 	ldw	fp,0(sp)
  215098:	dec00204 	addi	sp,sp,8
  21509c:	f800283a 	ret

002150a0 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  2150a0:	defffa04 	addi	sp,sp,-24
  2150a4:	dfc00515 	stw	ra,20(sp)
  2150a8:	df000415 	stw	fp,16(sp)
  2150ac:	df000404 	addi	fp,sp,16
  2150b0:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  2150b4:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2150b8:	008002f4 	movhi	r2,11
  2150bc:	10ab9804 	addi	r2,r2,-20896
  2150c0:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  2150c4:	008002f4 	movhi	r2,11
  2150c8:	10ab9804 	addi	r2,r2,-20896
  2150cc:	e0bffd15 	stw	r2,-12(fp)

    while (
  2150d0:	00000c06 	br	215104 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  2150d4:	01000044 	movi	r4,1
  2150d8:	02152ec0 	call	2152ec <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  2150dc:	e0bffe17 	ldw	r2,-8(fp)
  2150e0:	10000826 	beq	r2,zero,215104 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  2150e4:	e0bffd17 	ldw	r2,-12(fp)
  2150e8:	10bfffc4 	addi	r2,r2,-1
  2150ec:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  2150f0:	e0bffd17 	ldw	r2,-12(fp)
  2150f4:	1000031e 	bne	r2,zero,215104 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  2150f8:	00bfe304 	movi	r2,-116
  2150fc:	e0bffc15 	stw	r2,-16(fp)
                break;
  215100:	00000506 	br	215118 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  215104:	e0bfff17 	ldw	r2,-4(fp)
  215108:	10802f17 	ldw	r2,188(r2)
  21510c:	10800037 	ldwio	r2,0(r2)
  215110:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  215114:	103fef26 	beq	r2,zero,2150d4 <_gp+0xffe034c0>
                break;
            }
        }
    }

    return ret_code;
  215118:	e0bffc17 	ldw	r2,-16(fp)
}
  21511c:	e037883a 	mov	sp,fp
  215120:	dfc00117 	ldw	ra,4(sp)
  215124:	df000017 	ldw	fp,0(sp)
  215128:	dec00204 	addi	sp,sp,8
  21512c:	f800283a 	ret

00215130 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  215130:	defffa04 	addi	sp,sp,-24
  215134:	dfc00515 	stw	ra,20(sp)
  215138:	df000415 	stw	fp,16(sp)
  21513c:	df000404 	addi	fp,sp,16
  215140:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  215144:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215148:	008002f4 	movhi	r2,11
  21514c:	10ab9804 	addi	r2,r2,-20896
  215150:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  215154:	008002f4 	movhi	r2,11
  215158:	10ab9804 	addi	r2,r2,-20896
  21515c:	e0bffd15 	stw	r2,-12(fp)

    while (
  215160:	00000c06 	br	215194 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  215164:	01000044 	movi	r4,1
  215168:	02152ec0 	call	2152ec <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  21516c:	e0bffe17 	ldw	r2,-8(fp)
  215170:	10000826 	beq	r2,zero,215194 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  215174:	e0bffd17 	ldw	r2,-12(fp)
  215178:	10bfffc4 	addi	r2,r2,-1
  21517c:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  215180:	e0bffd17 	ldw	r2,-12(fp)
  215184:	1000031e 	bne	r2,zero,215194 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  215188:	00bfe304 	movi	r2,-116
  21518c:	e0bffc15 	stw	r2,-16(fp)
                break;
  215190:	00000506 	br	2151a8 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  215194:	e0bfff17 	ldw	r2,-4(fp)
  215198:	10802f17 	ldw	r2,188(r2)
  21519c:	10800037 	ldwio	r2,0(r2)
  2151a0:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  2151a4:	103fef26 	beq	r2,zero,215164 <_gp+0xffe03550>
                break;
            }
        }
    }

    return ret_code;
  2151a8:	e0bffc17 	ldw	r2,-16(fp)
}
  2151ac:	e037883a 	mov	sp,fp
  2151b0:	dfc00117 	ldw	ra,4(sp)
  2151b4:	df000017 	ldw	fp,0(sp)
  2151b8:	dec00204 	addi	sp,sp,8
  2151bc:	f800283a 	ret

002151c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  2151c0:	defff504 	addi	sp,sp,-44
  2151c4:	df000a15 	stw	fp,40(sp)
  2151c8:	df000a04 	addi	fp,sp,40
  2151cc:	e13ffc15 	stw	r4,-16(fp)
  2151d0:	e17ffd15 	stw	r5,-12(fp)
  2151d4:	e1bffe15 	stw	r6,-8(fp)
  2151d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  2151dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  2151e0:	d0a02a17 	ldw	r2,-32600(gp)
  
  if (alt_ticks_per_second ())
  2151e4:	10003c26 	beq	r2,zero,2152d8 <alt_alarm_start+0x118>
  {
    if (alarm)
  2151e8:	e0bffc17 	ldw	r2,-16(fp)
  2151ec:	10003826 	beq	r2,zero,2152d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  2151f0:	e0bffc17 	ldw	r2,-16(fp)
  2151f4:	e0fffe17 	ldw	r3,-8(fp)
  2151f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  2151fc:	e0bffc17 	ldw	r2,-16(fp)
  215200:	e0ffff17 	ldw	r3,-4(fp)
  215204:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  215208:	0005303a 	rdctl	r2,status
  21520c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  215210:	e0fff917 	ldw	r3,-28(fp)
  215214:	00bfff84 	movi	r2,-2
  215218:	1884703a 	and	r2,r3,r2
  21521c:	1001703a 	wrctl	status,r2
  
  return context;
  215220:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  215224:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  215228:	d0a02b17 	ldw	r2,-32596(gp)
      
      current_nticks = alt_nticks();
  21522c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  215230:	e0fffd17 	ldw	r3,-12(fp)
  215234:	e0bff617 	ldw	r2,-40(fp)
  215238:	1885883a 	add	r2,r3,r2
  21523c:	10c00044 	addi	r3,r2,1
  215240:	e0bffc17 	ldw	r2,-16(fp)
  215244:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  215248:	e0bffc17 	ldw	r2,-16(fp)
  21524c:	10c00217 	ldw	r3,8(r2)
  215250:	e0bff617 	ldw	r2,-40(fp)
  215254:	1880042e 	bgeu	r3,r2,215268 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  215258:	e0bffc17 	ldw	r2,-16(fp)
  21525c:	00c00044 	movi	r3,1
  215260:	10c00405 	stb	r3,16(r2)
  215264:	00000206 	br	215270 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  215268:	e0bffc17 	ldw	r2,-16(fp)
  21526c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  215270:	e0bffc17 	ldw	r2,-16(fp)
  215274:	d0e01104 	addi	r3,gp,-32700
  215278:	e0fffa15 	stw	r3,-24(fp)
  21527c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  215280:	e0bffb17 	ldw	r2,-20(fp)
  215284:	e0fffa17 	ldw	r3,-24(fp)
  215288:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  21528c:	e0bffa17 	ldw	r2,-24(fp)
  215290:	10c00017 	ldw	r3,0(r2)
  215294:	e0bffb17 	ldw	r2,-20(fp)
  215298:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  21529c:	e0bffa17 	ldw	r2,-24(fp)
  2152a0:	10800017 	ldw	r2,0(r2)
  2152a4:	e0fffb17 	ldw	r3,-20(fp)
  2152a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  2152ac:	e0bffa17 	ldw	r2,-24(fp)
  2152b0:	e0fffb17 	ldw	r3,-20(fp)
  2152b4:	10c00015 	stw	r3,0(r2)
  2152b8:	e0bff817 	ldw	r2,-32(fp)
  2152bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2152c0:	e0bff717 	ldw	r2,-36(fp)
  2152c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  2152c8:	0005883a 	mov	r2,zero
  2152cc:	00000306 	br	2152dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  2152d0:	00bffa84 	movi	r2,-22
  2152d4:	00000106 	br	2152dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  2152d8:	00bfde84 	movi	r2,-134
  }
}
  2152dc:	e037883a 	mov	sp,fp
  2152e0:	df000017 	ldw	fp,0(sp)
  2152e4:	dec00104 	addi	sp,sp,4
  2152e8:	f800283a 	ret

002152ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  2152ec:	defffa04 	addi	sp,sp,-24
  2152f0:	dfc00515 	stw	ra,20(sp)
  2152f4:	df000415 	stw	fp,16(sp)
  2152f8:	df000404 	addi	fp,sp,16
  2152fc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  215300:	00800244 	movi	r2,9
  215304:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  215308:	014003f4 	movhi	r5,15
  21530c:	29509004 	addi	r5,r5,16960
  215310:	e13ffd17 	ldw	r4,-12(fp)
  215314:	02032780 	call	203278 <__mulsi3>
  215318:	100b883a 	mov	r5,r2
  21531c:	0100bef4 	movhi	r4,763
  215320:	213c2004 	addi	r4,r4,-3968
  215324:	02031bc0 	call	2031bc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  215328:	100b883a 	mov	r5,r2
  21532c:	01200034 	movhi	r4,32768
  215330:	213fffc4 	addi	r4,r4,-1
  215334:	02031bc0 	call	2031bc <__udivsi3>
  215338:	100b883a 	mov	r5,r2
  21533c:	e13fff17 	ldw	r4,-4(fp)
  215340:	02031bc0 	call	2031bc <__udivsi3>
  215344:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  215348:	e0bffe17 	ldw	r2,-8(fp)
  21534c:	10002a26 	beq	r2,zero,2153f8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  215350:	e03ffc15 	stw	zero,-16(fp)
  215354:	00001706 	br	2153b4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  215358:	00a00034 	movhi	r2,32768
  21535c:	10bfffc4 	addi	r2,r2,-1
  215360:	10bfffc4 	addi	r2,r2,-1
  215364:	103ffe1e 	bne	r2,zero,215360 <_gp+0xffe0374c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  215368:	014003f4 	movhi	r5,15
  21536c:	29509004 	addi	r5,r5,16960
  215370:	e13ffd17 	ldw	r4,-12(fp)
  215374:	02032780 	call	203278 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  215378:	100b883a 	mov	r5,r2
  21537c:	0100bef4 	movhi	r4,763
  215380:	213c2004 	addi	r4,r4,-3968
  215384:	02031bc0 	call	2031bc <__udivsi3>
  215388:	100b883a 	mov	r5,r2
  21538c:	01200034 	movhi	r4,32768
  215390:	213fffc4 	addi	r4,r4,-1
  215394:	02031bc0 	call	2031bc <__udivsi3>
  215398:	1007883a 	mov	r3,r2
  21539c:	e0bfff17 	ldw	r2,-4(fp)
  2153a0:	10c5c83a 	sub	r2,r2,r3
  2153a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  2153a8:	e0bffc17 	ldw	r2,-16(fp)
  2153ac:	10800044 	addi	r2,r2,1
  2153b0:	e0bffc15 	stw	r2,-16(fp)
  2153b4:	e0fffc17 	ldw	r3,-16(fp)
  2153b8:	e0bffe17 	ldw	r2,-8(fp)
  2153bc:	18bfe616 	blt	r3,r2,215358 <_gp+0xffe03744>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  2153c0:	014003f4 	movhi	r5,15
  2153c4:	29509004 	addi	r5,r5,16960
  2153c8:	e13ffd17 	ldw	r4,-12(fp)
  2153cc:	02032780 	call	203278 <__mulsi3>
  2153d0:	100b883a 	mov	r5,r2
  2153d4:	0100bef4 	movhi	r4,763
  2153d8:	213c2004 	addi	r4,r4,-3968
  2153dc:	02031bc0 	call	2031bc <__udivsi3>
  2153e0:	e17fff17 	ldw	r5,-4(fp)
  2153e4:	1009883a 	mov	r4,r2
  2153e8:	02032780 	call	203278 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  2153ec:	10bfffc4 	addi	r2,r2,-1
  2153f0:	103ffe1e 	bne	r2,zero,2153ec <_gp+0xffe037d8>
  2153f4:	00000d06 	br	21542c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  2153f8:	014003f4 	movhi	r5,15
  2153fc:	29509004 	addi	r5,r5,16960
  215400:	e13ffd17 	ldw	r4,-12(fp)
  215404:	02032780 	call	203278 <__mulsi3>
  215408:	100b883a 	mov	r5,r2
  21540c:	0100bef4 	movhi	r4,763
  215410:	213c2004 	addi	r4,r4,-3968
  215414:	02031bc0 	call	2031bc <__udivsi3>
  215418:	e17fff17 	ldw	r5,-4(fp)
  21541c:	1009883a 	mov	r4,r2
  215420:	02032780 	call	203278 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  215424:	10bfffc4 	addi	r2,r2,-1
  215428:	00bffe16 	blt	zero,r2,215424 <_gp+0xffe03810>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  21542c:	0005883a 	mov	r2,zero
}
  215430:	e037883a 	mov	sp,fp
  215434:	dfc00117 	ldw	ra,4(sp)
  215438:	df000017 	ldw	fp,0(sp)
  21543c:	dec00204 	addi	sp,sp,8
  215440:	f800283a 	ret

00215444 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  215444:	defffd04 	addi	sp,sp,-12
  215448:	df000215 	stw	fp,8(sp)
  21544c:	df000204 	addi	fp,sp,8
  215450:	e13ffe15 	stw	r4,-8(fp)
  215454:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  215458:	0001883a 	nop
  21545c:	e037883a 	mov	sp,fp
  215460:	df000017 	ldw	fp,0(sp)
  215464:	dec00104 	addi	sp,sp,4
  215468:	f800283a 	ret

0021546c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  21546c:	deffff04 	addi	sp,sp,-4
  215470:	df000015 	stw	fp,0(sp)
  215474:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  215478:	0001883a 	nop
  21547c:	e037883a 	mov	sp,fp
  215480:	df000017 	ldw	fp,0(sp)
  215484:	dec00104 	addi	sp,sp,4
  215488:	f800283a 	ret

0021548c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  21548c:	defffe04 	addi	sp,sp,-8
  215490:	dfc00115 	stw	ra,4(sp)
  215494:	df000015 	stw	fp,0(sp)
  215498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  21549c:	d0a00f17 	ldw	r2,-32708(gp)
  2154a0:	10000326 	beq	r2,zero,2154b0 <alt_get_errno+0x24>
  2154a4:	d0a00f17 	ldw	r2,-32708(gp)
  2154a8:	103ee83a 	callr	r2
  2154ac:	00000106 	br	2154b4 <alt_get_errno+0x28>
  2154b0:	d0a02604 	addi	r2,gp,-32616
}
  2154b4:	e037883a 	mov	sp,fp
  2154b8:	dfc00117 	ldw	ra,4(sp)
  2154bc:	df000017 	ldw	fp,0(sp)
  2154c0:	dec00204 	addi	sp,sp,8
  2154c4:	f800283a 	ret

002154c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  2154c8:	defffa04 	addi	sp,sp,-24
  2154cc:	dfc00515 	stw	ra,20(sp)
  2154d0:	df000415 	stw	fp,16(sp)
  2154d4:	df000404 	addi	fp,sp,16
  2154d8:	e13ffe15 	stw	r4,-8(fp)
  2154dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  2154e0:	e0bffe17 	ldw	r2,-8(fp)
  2154e4:	10000326 	beq	r2,zero,2154f4 <alt_dev_llist_insert+0x2c>
  2154e8:	e0bffe17 	ldw	r2,-8(fp)
  2154ec:	10800217 	ldw	r2,8(r2)
  2154f0:	1000061e 	bne	r2,zero,21550c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  2154f4:	021548c0 	call	21548c <alt_get_errno>
  2154f8:	1007883a 	mov	r3,r2
  2154fc:	00800584 	movi	r2,22
  215500:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  215504:	00bffa84 	movi	r2,-22
  215508:	00001306 	br	215558 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  21550c:	e0bffe17 	ldw	r2,-8(fp)
  215510:	e0ffff17 	ldw	r3,-4(fp)
  215514:	e0fffc15 	stw	r3,-16(fp)
  215518:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  21551c:	e0bffd17 	ldw	r2,-12(fp)
  215520:	e0fffc17 	ldw	r3,-16(fp)
  215524:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  215528:	e0bffc17 	ldw	r2,-16(fp)
  21552c:	10c00017 	ldw	r3,0(r2)
  215530:	e0bffd17 	ldw	r2,-12(fp)
  215534:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  215538:	e0bffc17 	ldw	r2,-16(fp)
  21553c:	10800017 	ldw	r2,0(r2)
  215540:	e0fffd17 	ldw	r3,-12(fp)
  215544:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  215548:	e0bffc17 	ldw	r2,-16(fp)
  21554c:	e0fffd17 	ldw	r3,-12(fp)
  215550:	10c00015 	stw	r3,0(r2)

  return 0;  
  215554:	0005883a 	mov	r2,zero
}
  215558:	e037883a 	mov	sp,fp
  21555c:	dfc00117 	ldw	ra,4(sp)
  215560:	df000017 	ldw	fp,0(sp)
  215564:	dec00204 	addi	sp,sp,8
  215568:	f800283a 	ret

0021556c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  21556c:	defffd04 	addi	sp,sp,-12
  215570:	dfc00215 	stw	ra,8(sp)
  215574:	df000115 	stw	fp,4(sp)
  215578:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  21557c:	00800874 	movhi	r2,33
  215580:	1099a804 	addi	r2,r2,26272
  215584:	e0bfff15 	stw	r2,-4(fp)
  215588:	00000606 	br	2155a4 <_do_ctors+0x38>
        (*ctor) (); 
  21558c:	e0bfff17 	ldw	r2,-4(fp)
  215590:	10800017 	ldw	r2,0(r2)
  215594:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  215598:	e0bfff17 	ldw	r2,-4(fp)
  21559c:	10bfff04 	addi	r2,r2,-4
  2155a0:	e0bfff15 	stw	r2,-4(fp)
  2155a4:	e0ffff17 	ldw	r3,-4(fp)
  2155a8:	00800874 	movhi	r2,33
  2155ac:	1099a904 	addi	r2,r2,26276
  2155b0:	18bff62e 	bgeu	r3,r2,21558c <_gp+0xffe03978>
        (*ctor) (); 
}
  2155b4:	0001883a 	nop
  2155b8:	e037883a 	mov	sp,fp
  2155bc:	dfc00117 	ldw	ra,4(sp)
  2155c0:	df000017 	ldw	fp,0(sp)
  2155c4:	dec00204 	addi	sp,sp,8
  2155c8:	f800283a 	ret

002155cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  2155cc:	defffd04 	addi	sp,sp,-12
  2155d0:	dfc00215 	stw	ra,8(sp)
  2155d4:	df000115 	stw	fp,4(sp)
  2155d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  2155dc:	00800874 	movhi	r2,33
  2155e0:	1099a804 	addi	r2,r2,26272
  2155e4:	e0bfff15 	stw	r2,-4(fp)
  2155e8:	00000606 	br	215604 <_do_dtors+0x38>
        (*dtor) (); 
  2155ec:	e0bfff17 	ldw	r2,-4(fp)
  2155f0:	10800017 	ldw	r2,0(r2)
  2155f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  2155f8:	e0bfff17 	ldw	r2,-4(fp)
  2155fc:	10bfff04 	addi	r2,r2,-4
  215600:	e0bfff15 	stw	r2,-4(fp)
  215604:	e0ffff17 	ldw	r3,-4(fp)
  215608:	00800874 	movhi	r2,33
  21560c:	1099a904 	addi	r2,r2,26276
  215610:	18bff62e 	bgeu	r3,r2,2155ec <_gp+0xffe039d8>
        (*dtor) (); 
}
  215614:	0001883a 	nop
  215618:	e037883a 	mov	sp,fp
  21561c:	dfc00117 	ldw	ra,4(sp)
  215620:	df000017 	ldw	fp,0(sp)
  215624:	dec00204 	addi	sp,sp,8
  215628:	f800283a 	ret

0021562c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  21562c:	defffa04 	addi	sp,sp,-24
  215630:	dfc00515 	stw	ra,20(sp)
  215634:	df000415 	stw	fp,16(sp)
  215638:	df000404 	addi	fp,sp,16
  21563c:	e13ffe15 	stw	r4,-8(fp)
  215640:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  215644:	e0bfff17 	ldw	r2,-4(fp)
  215648:	10800017 	ldw	r2,0(r2)
  21564c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  215650:	e13ffe17 	ldw	r4,-8(fp)
  215654:	0203f940 	call	203f94 <strlen>
  215658:	10800044 	addi	r2,r2,1
  21565c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  215660:	00000d06 	br	215698 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  215664:	e0bffc17 	ldw	r2,-16(fp)
  215668:	10800217 	ldw	r2,8(r2)
  21566c:	e0fffd17 	ldw	r3,-12(fp)
  215670:	180d883a 	mov	r6,r3
  215674:	e17ffe17 	ldw	r5,-8(fp)
  215678:	1009883a 	mov	r4,r2
  21567c:	021635c0 	call	21635c <memcmp>
  215680:	1000021e 	bne	r2,zero,21568c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  215684:	e0bffc17 	ldw	r2,-16(fp)
  215688:	00000706 	br	2156a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  21568c:	e0bffc17 	ldw	r2,-16(fp)
  215690:	10800017 	ldw	r2,0(r2)
  215694:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  215698:	e0fffc17 	ldw	r3,-16(fp)
  21569c:	e0bfff17 	ldw	r2,-4(fp)
  2156a0:	18bff01e 	bne	r3,r2,215664 <_gp+0xffe03a50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  2156a4:	0005883a 	mov	r2,zero
}
  2156a8:	e037883a 	mov	sp,fp
  2156ac:	dfc00117 	ldw	ra,4(sp)
  2156b0:	df000017 	ldw	fp,0(sp)
  2156b4:	dec00204 	addi	sp,sp,8
  2156b8:	f800283a 	ret

002156bc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  2156bc:	defffc04 	addi	sp,sp,-16
  2156c0:	dfc00315 	stw	ra,12(sp)
  2156c4:	df000215 	stw	fp,8(sp)
  2156c8:	df000204 	addi	fp,sp,8
  2156cc:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  2156d0:	d1601704 	addi	r5,gp,-32676
  2156d4:	e13fff17 	ldw	r4,-4(fp)
  2156d8:	021562c0 	call	21562c <alt_find_dev>
  2156dc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  2156e0:	e0bffe17 	ldw	r2,-8(fp)
  2156e4:	10000926 	beq	r2,zero,21570c <alt_flash_open_dev+0x50>
  2156e8:	e0bffe17 	ldw	r2,-8(fp)
  2156ec:	10800317 	ldw	r2,12(r2)
  2156f0:	10000626 	beq	r2,zero,21570c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  2156f4:	e0bffe17 	ldw	r2,-8(fp)
  2156f8:	10800317 	ldw	r2,12(r2)
  2156fc:	e17fff17 	ldw	r5,-4(fp)
  215700:	e13ffe17 	ldw	r4,-8(fp)
  215704:	103ee83a 	callr	r2
  215708:	00000106 	br	215710 <alt_flash_open_dev+0x54>
  }

  return dev;
  21570c:	e0bffe17 	ldw	r2,-8(fp)
}
  215710:	e037883a 	mov	sp,fp
  215714:	dfc00117 	ldw	ra,4(sp)
  215718:	df000017 	ldw	fp,0(sp)
  21571c:	dec00204 	addi	sp,sp,8
  215720:	f800283a 	ret

00215724 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  215724:	defffd04 	addi	sp,sp,-12
  215728:	dfc00215 	stw	ra,8(sp)
  21572c:	df000115 	stw	fp,4(sp)
  215730:	df000104 	addi	fp,sp,4
  215734:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  215738:	e0bfff17 	ldw	r2,-4(fp)
  21573c:	10000826 	beq	r2,zero,215760 <alt_flash_close_dev+0x3c>
  215740:	e0bfff17 	ldw	r2,-4(fp)
  215744:	10800417 	ldw	r2,16(r2)
  215748:	10000526 	beq	r2,zero,215760 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  21574c:	e0bfff17 	ldw	r2,-4(fp)
  215750:	10800417 	ldw	r2,16(r2)
  215754:	e13fff17 	ldw	r4,-4(fp)
  215758:	103ee83a 	callr	r2
  }
  return;
  21575c:	0001883a 	nop
  215760:	0001883a 	nop
}
  215764:	e037883a 	mov	sp,fp
  215768:	dfc00117 	ldw	ra,4(sp)
  21576c:	df000017 	ldw	fp,0(sp)
  215770:	dec00204 	addi	sp,sp,8
  215774:	f800283a 	ret

00215778 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  215778:	deffff04 	addi	sp,sp,-4
  21577c:	df000015 	stw	fp,0(sp)
  215780:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  215784:	0001883a 	nop
  215788:	e037883a 	mov	sp,fp
  21578c:	df000017 	ldw	fp,0(sp)
  215790:	dec00104 	addi	sp,sp,4
  215794:	f800283a 	ret

00215798 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  215798:	defff904 	addi	sp,sp,-28
  21579c:	dfc00615 	stw	ra,24(sp)
  2157a0:	df000515 	stw	fp,20(sp)
  2157a4:	df000504 	addi	fp,sp,20
  2157a8:	e13ffc15 	stw	r4,-16(fp)
  2157ac:	e17ffd15 	stw	r5,-12(fp)
  2157b0:	e1bffe15 	stw	r6,-8(fp)
  2157b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  2157b8:	e0800217 	ldw	r2,8(fp)
  2157bc:	d8800015 	stw	r2,0(sp)
  2157c0:	e1ffff17 	ldw	r7,-4(fp)
  2157c4:	e1bffe17 	ldw	r6,-8(fp)
  2157c8:	e17ffd17 	ldw	r5,-12(fp)
  2157cc:	e13ffc17 	ldw	r4,-16(fp)
  2157d0:	02159480 	call	215948 <alt_iic_isr_register>
}  
  2157d4:	e037883a 	mov	sp,fp
  2157d8:	dfc00117 	ldw	ra,4(sp)
  2157dc:	df000017 	ldw	fp,0(sp)
  2157e0:	dec00204 	addi	sp,sp,8
  2157e4:	f800283a 	ret

002157e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  2157e8:	defff904 	addi	sp,sp,-28
  2157ec:	df000615 	stw	fp,24(sp)
  2157f0:	df000604 	addi	fp,sp,24
  2157f4:	e13ffe15 	stw	r4,-8(fp)
  2157f8:	e17fff15 	stw	r5,-4(fp)
  2157fc:	e0bfff17 	ldw	r2,-4(fp)
  215800:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  215804:	0005303a 	rdctl	r2,status
  215808:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21580c:	e0fffb17 	ldw	r3,-20(fp)
  215810:	00bfff84 	movi	r2,-2
  215814:	1884703a 	and	r2,r3,r2
  215818:	1001703a 	wrctl	status,r2
  
  return context;
  21581c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  215820:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  215824:	00c00044 	movi	r3,1
  215828:	e0bffa17 	ldw	r2,-24(fp)
  21582c:	1884983a 	sll	r2,r3,r2
  215830:	1007883a 	mov	r3,r2
  215834:	d0a02c17 	ldw	r2,-32592(gp)
  215838:	1884b03a 	or	r2,r3,r2
  21583c:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  215840:	d0a02c17 	ldw	r2,-32592(gp)
  215844:	100170fa 	wrctl	ienable,r2
  215848:	e0bffc17 	ldw	r2,-16(fp)
  21584c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  215850:	e0bffd17 	ldw	r2,-12(fp)
  215854:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  215858:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  21585c:	0001883a 	nop
}
  215860:	e037883a 	mov	sp,fp
  215864:	df000017 	ldw	fp,0(sp)
  215868:	dec00104 	addi	sp,sp,4
  21586c:	f800283a 	ret

00215870 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  215870:	defff904 	addi	sp,sp,-28
  215874:	df000615 	stw	fp,24(sp)
  215878:	df000604 	addi	fp,sp,24
  21587c:	e13ffe15 	stw	r4,-8(fp)
  215880:	e17fff15 	stw	r5,-4(fp)
  215884:	e0bfff17 	ldw	r2,-4(fp)
  215888:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  21588c:	0005303a 	rdctl	r2,status
  215890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  215894:	e0fffb17 	ldw	r3,-20(fp)
  215898:	00bfff84 	movi	r2,-2
  21589c:	1884703a 	and	r2,r3,r2
  2158a0:	1001703a 	wrctl	status,r2
  
  return context;
  2158a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  2158a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  2158ac:	00c00044 	movi	r3,1
  2158b0:	e0bffa17 	ldw	r2,-24(fp)
  2158b4:	1884983a 	sll	r2,r3,r2
  2158b8:	0084303a 	nor	r2,zero,r2
  2158bc:	1007883a 	mov	r3,r2
  2158c0:	d0a02c17 	ldw	r2,-32592(gp)
  2158c4:	1884703a 	and	r2,r3,r2
  2158c8:	d0a02c15 	stw	r2,-32592(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  2158cc:	d0a02c17 	ldw	r2,-32592(gp)
  2158d0:	100170fa 	wrctl	ienable,r2
  2158d4:	e0bffc17 	ldw	r2,-16(fp)
  2158d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2158dc:	e0bffd17 	ldw	r2,-12(fp)
  2158e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  2158e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  2158e8:	0001883a 	nop
}
  2158ec:	e037883a 	mov	sp,fp
  2158f0:	df000017 	ldw	fp,0(sp)
  2158f4:	dec00104 	addi	sp,sp,4
  2158f8:	f800283a 	ret

002158fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  2158fc:	defffc04 	addi	sp,sp,-16
  215900:	df000315 	stw	fp,12(sp)
  215904:	df000304 	addi	fp,sp,12
  215908:	e13ffe15 	stw	r4,-8(fp)
  21590c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  215910:	000530fa 	rdctl	r2,ienable
  215914:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  215918:	00c00044 	movi	r3,1
  21591c:	e0bfff17 	ldw	r2,-4(fp)
  215920:	1884983a 	sll	r2,r3,r2
  215924:	1007883a 	mov	r3,r2
  215928:	e0bffd17 	ldw	r2,-12(fp)
  21592c:	1884703a 	and	r2,r3,r2
  215930:	1004c03a 	cmpne	r2,r2,zero
  215934:	10803fcc 	andi	r2,r2,255
}
  215938:	e037883a 	mov	sp,fp
  21593c:	df000017 	ldw	fp,0(sp)
  215940:	dec00104 	addi	sp,sp,4
  215944:	f800283a 	ret

00215948 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  215948:	defff504 	addi	sp,sp,-44
  21594c:	dfc00a15 	stw	ra,40(sp)
  215950:	df000915 	stw	fp,36(sp)
  215954:	df000904 	addi	fp,sp,36
  215958:	e13ffc15 	stw	r4,-16(fp)
  21595c:	e17ffd15 	stw	r5,-12(fp)
  215960:	e1bffe15 	stw	r6,-8(fp)
  215964:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  215968:	00bffa84 	movi	r2,-22
  21596c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  215970:	e0bffd17 	ldw	r2,-12(fp)
  215974:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  215978:	e0bff817 	ldw	r2,-32(fp)
  21597c:	10800808 	cmpgei	r2,r2,32
  215980:	1000271e 	bne	r2,zero,215a20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  215984:	0005303a 	rdctl	r2,status
  215988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  21598c:	e0fffb17 	ldw	r3,-20(fp)
  215990:	00bfff84 	movi	r2,-2
  215994:	1884703a 	and	r2,r3,r2
  215998:	1001703a 	wrctl	status,r2
  
  return context;
  21599c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  2159a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  2159a4:	00801074 	movhi	r2,65
  2159a8:	10a79904 	addi	r2,r2,-24988
  2159ac:	e0fff817 	ldw	r3,-32(fp)
  2159b0:	180690fa 	slli	r3,r3,3
  2159b4:	10c5883a 	add	r2,r2,r3
  2159b8:	e0fffe17 	ldw	r3,-8(fp)
  2159bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  2159c0:	00801074 	movhi	r2,65
  2159c4:	10a79904 	addi	r2,r2,-24988
  2159c8:	e0fff817 	ldw	r3,-32(fp)
  2159cc:	180690fa 	slli	r3,r3,3
  2159d0:	10c5883a 	add	r2,r2,r3
  2159d4:	10800104 	addi	r2,r2,4
  2159d8:	e0ffff17 	ldw	r3,-4(fp)
  2159dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  2159e0:	e0bffe17 	ldw	r2,-8(fp)
  2159e4:	10000526 	beq	r2,zero,2159fc <alt_iic_isr_register+0xb4>
  2159e8:	e0bff817 	ldw	r2,-32(fp)
  2159ec:	100b883a 	mov	r5,r2
  2159f0:	e13ffc17 	ldw	r4,-16(fp)
  2159f4:	02157e80 	call	2157e8 <alt_ic_irq_enable>
  2159f8:	00000406 	br	215a0c <alt_iic_isr_register+0xc4>
  2159fc:	e0bff817 	ldw	r2,-32(fp)
  215a00:	100b883a 	mov	r5,r2
  215a04:	e13ffc17 	ldw	r4,-16(fp)
  215a08:	02158700 	call	215870 <alt_ic_irq_disable>
  215a0c:	e0bff715 	stw	r2,-36(fp)
  215a10:	e0bffa17 	ldw	r2,-24(fp)
  215a14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  215a18:	e0bff917 	ldw	r2,-28(fp)
  215a1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  215a20:	e0bff717 	ldw	r2,-36(fp)
}
  215a24:	e037883a 	mov	sp,fp
  215a28:	dfc00117 	ldw	ra,4(sp)
  215a2c:	df000017 	ldw	fp,0(sp)
  215a30:	dec00204 	addi	sp,sp,8
  215a34:	f800283a 	ret

00215a38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  215a38:	defff804 	addi	sp,sp,-32
  215a3c:	dfc00715 	stw	ra,28(sp)
  215a40:	df000615 	stw	fp,24(sp)
  215a44:	dc000515 	stw	r16,20(sp)
  215a48:	df000604 	addi	fp,sp,24
  215a4c:	e13ffb15 	stw	r4,-20(fp)
  215a50:	e17ffc15 	stw	r5,-16(fp)
  215a54:	e1bffd15 	stw	r6,-12(fp)
  215a58:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  215a5c:	e1bffe17 	ldw	r6,-8(fp)
  215a60:	e17ffd17 	ldw	r5,-12(fp)
  215a64:	e13ffc17 	ldw	r4,-16(fp)
  215a68:	0215cc00 	call	215cc0 <open>
  215a6c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  215a70:	e0bffa17 	ldw	r2,-24(fp)
  215a74:	10002216 	blt	r2,zero,215b00 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  215a78:	04001074 	movhi	r16,65
  215a7c:	84223f04 	addi	r16,r16,-30468
  215a80:	e0bffa17 	ldw	r2,-24(fp)
  215a84:	01400304 	movi	r5,12
  215a88:	1009883a 	mov	r4,r2
  215a8c:	02032780 	call	203278 <__mulsi3>
  215a90:	8085883a 	add	r2,r16,r2
  215a94:	10c00017 	ldw	r3,0(r2)
  215a98:	e0bffb17 	ldw	r2,-20(fp)
  215a9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  215aa0:	04001074 	movhi	r16,65
  215aa4:	84223f04 	addi	r16,r16,-30468
  215aa8:	e0bffa17 	ldw	r2,-24(fp)
  215aac:	01400304 	movi	r5,12
  215ab0:	1009883a 	mov	r4,r2
  215ab4:	02032780 	call	203278 <__mulsi3>
  215ab8:	8085883a 	add	r2,r16,r2
  215abc:	10800104 	addi	r2,r2,4
  215ac0:	10c00017 	ldw	r3,0(r2)
  215ac4:	e0bffb17 	ldw	r2,-20(fp)
  215ac8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  215acc:	04001074 	movhi	r16,65
  215ad0:	84223f04 	addi	r16,r16,-30468
  215ad4:	e0bffa17 	ldw	r2,-24(fp)
  215ad8:	01400304 	movi	r5,12
  215adc:	1009883a 	mov	r4,r2
  215ae0:	02032780 	call	203278 <__mulsi3>
  215ae4:	8085883a 	add	r2,r16,r2
  215ae8:	10800204 	addi	r2,r2,8
  215aec:	10c00017 	ldw	r3,0(r2)
  215af0:	e0bffb17 	ldw	r2,-20(fp)
  215af4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  215af8:	e13ffa17 	ldw	r4,-24(fp)
  215afc:	02113e00 	call	2113e0 <alt_release_fd>
  }
} 
  215b00:	0001883a 	nop
  215b04:	e6ffff04 	addi	sp,fp,-4
  215b08:	dfc00217 	ldw	ra,8(sp)
  215b0c:	df000117 	ldw	fp,4(sp)
  215b10:	dc000017 	ldw	r16,0(sp)
  215b14:	dec00304 	addi	sp,sp,12
  215b18:	f800283a 	ret

00215b1c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  215b1c:	defffb04 	addi	sp,sp,-20
  215b20:	dfc00415 	stw	ra,16(sp)
  215b24:	df000315 	stw	fp,12(sp)
  215b28:	df000304 	addi	fp,sp,12
  215b2c:	e13ffd15 	stw	r4,-12(fp)
  215b30:	e17ffe15 	stw	r5,-8(fp)
  215b34:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  215b38:	01c07fc4 	movi	r7,511
  215b3c:	01800044 	movi	r6,1
  215b40:	e17ffd17 	ldw	r5,-12(fp)
  215b44:	01001074 	movhi	r4,65
  215b48:	21224204 	addi	r4,r4,-30456
  215b4c:	0215a380 	call	215a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  215b50:	01c07fc4 	movi	r7,511
  215b54:	000d883a 	mov	r6,zero
  215b58:	e17ffe17 	ldw	r5,-8(fp)
  215b5c:	01001074 	movhi	r4,65
  215b60:	21223f04 	addi	r4,r4,-30468
  215b64:	0215a380 	call	215a38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  215b68:	01c07fc4 	movi	r7,511
  215b6c:	01800044 	movi	r6,1
  215b70:	e17fff17 	ldw	r5,-4(fp)
  215b74:	01001074 	movhi	r4,65
  215b78:	21224504 	addi	r4,r4,-30444
  215b7c:	0215a380 	call	215a38 <alt_open_fd>
}  
  215b80:	0001883a 	nop
  215b84:	e037883a 	mov	sp,fp
  215b88:	dfc00117 	ldw	ra,4(sp)
  215b8c:	df000017 	ldw	fp,0(sp)
  215b90:	dec00204 	addi	sp,sp,8
  215b94:	f800283a 	ret

00215b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  215b98:	defffe04 	addi	sp,sp,-8
  215b9c:	dfc00115 	stw	ra,4(sp)
  215ba0:	df000015 	stw	fp,0(sp)
  215ba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  215ba8:	d0a00f17 	ldw	r2,-32708(gp)
  215bac:	10000326 	beq	r2,zero,215bbc <alt_get_errno+0x24>
  215bb0:	d0a00f17 	ldw	r2,-32708(gp)
  215bb4:	103ee83a 	callr	r2
  215bb8:	00000106 	br	215bc0 <alt_get_errno+0x28>
  215bbc:	d0a02604 	addi	r2,gp,-32616
}
  215bc0:	e037883a 	mov	sp,fp
  215bc4:	dfc00117 	ldw	ra,4(sp)
  215bc8:	df000017 	ldw	fp,0(sp)
  215bcc:	dec00204 	addi	sp,sp,8
  215bd0:	f800283a 	ret

00215bd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  215bd4:	defffb04 	addi	sp,sp,-20
  215bd8:	dfc00415 	stw	ra,16(sp)
  215bdc:	df000315 	stw	fp,12(sp)
  215be0:	dc000215 	stw	r16,8(sp)
  215be4:	df000304 	addi	fp,sp,12
  215be8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  215bec:	e0bffe17 	ldw	r2,-8(fp)
  215bf0:	10800217 	ldw	r2,8(r2)
  215bf4:	10d00034 	orhi	r3,r2,16384
  215bf8:	e0bffe17 	ldw	r2,-8(fp)
  215bfc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  215c00:	e03ffd15 	stw	zero,-12(fp)
  215c04:	00002306 	br	215c94 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  215c08:	04001074 	movhi	r16,65
  215c0c:	84223f04 	addi	r16,r16,-30468
  215c10:	e0bffd17 	ldw	r2,-12(fp)
  215c14:	01400304 	movi	r5,12
  215c18:	1009883a 	mov	r4,r2
  215c1c:	02032780 	call	203278 <__mulsi3>
  215c20:	8085883a 	add	r2,r16,r2
  215c24:	10c00017 	ldw	r3,0(r2)
  215c28:	e0bffe17 	ldw	r2,-8(fp)
  215c2c:	10800017 	ldw	r2,0(r2)
  215c30:	1880151e 	bne	r3,r2,215c88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  215c34:	04001074 	movhi	r16,65
  215c38:	84223f04 	addi	r16,r16,-30468
  215c3c:	e0bffd17 	ldw	r2,-12(fp)
  215c40:	01400304 	movi	r5,12
  215c44:	1009883a 	mov	r4,r2
  215c48:	02032780 	call	203278 <__mulsi3>
  215c4c:	8085883a 	add	r2,r16,r2
  215c50:	10800204 	addi	r2,r2,8
  215c54:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  215c58:	10000b0e 	bge	r2,zero,215c88 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  215c5c:	01400304 	movi	r5,12
  215c60:	e13ffd17 	ldw	r4,-12(fp)
  215c64:	02032780 	call	203278 <__mulsi3>
  215c68:	1007883a 	mov	r3,r2
  215c6c:	00801074 	movhi	r2,65
  215c70:	10a23f04 	addi	r2,r2,-30468
  215c74:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  215c78:	e0bffe17 	ldw	r2,-8(fp)
  215c7c:	18800226 	beq	r3,r2,215c88 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  215c80:	00bffcc4 	movi	r2,-13
  215c84:	00000806 	br	215ca8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  215c88:	e0bffd17 	ldw	r2,-12(fp)
  215c8c:	10800044 	addi	r2,r2,1
  215c90:	e0bffd15 	stw	r2,-12(fp)
  215c94:	d0a00e17 	ldw	r2,-32712(gp)
  215c98:	1007883a 	mov	r3,r2
  215c9c:	e0bffd17 	ldw	r2,-12(fp)
  215ca0:	18bfd92e 	bgeu	r3,r2,215c08 <_gp+0xffe03ff4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  215ca4:	0005883a 	mov	r2,zero
}
  215ca8:	e6ffff04 	addi	sp,fp,-4
  215cac:	dfc00217 	ldw	ra,8(sp)
  215cb0:	df000117 	ldw	fp,4(sp)
  215cb4:	dc000017 	ldw	r16,0(sp)
  215cb8:	dec00304 	addi	sp,sp,12
  215cbc:	f800283a 	ret

00215cc0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  215cc0:	defff604 	addi	sp,sp,-40
  215cc4:	dfc00915 	stw	ra,36(sp)
  215cc8:	df000815 	stw	fp,32(sp)
  215ccc:	df000804 	addi	fp,sp,32
  215cd0:	e13ffd15 	stw	r4,-12(fp)
  215cd4:	e17ffe15 	stw	r5,-8(fp)
  215cd8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  215cdc:	00bfffc4 	movi	r2,-1
  215ce0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  215ce4:	00bffb44 	movi	r2,-19
  215ce8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  215cec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  215cf0:	d1600c04 	addi	r5,gp,-32720
  215cf4:	e13ffd17 	ldw	r4,-12(fp)
  215cf8:	021562c0 	call	21562c <alt_find_dev>
  215cfc:	e0bff815 	stw	r2,-32(fp)
  215d00:	e0bff817 	ldw	r2,-32(fp)
  215d04:	1000051e 	bne	r2,zero,215d1c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  215d08:	e13ffd17 	ldw	r4,-12(fp)
  215d0c:	02160a80 	call	2160a8 <alt_find_file>
  215d10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  215d14:	00800044 	movi	r2,1
  215d18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  215d1c:	e0bff817 	ldw	r2,-32(fp)
  215d20:	10002b26 	beq	r2,zero,215dd0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  215d24:	e13ff817 	ldw	r4,-32(fp)
  215d28:	02161b00 	call	2161b0 <alt_get_fd>
  215d2c:	e0bff915 	stw	r2,-28(fp)
  215d30:	e0bff917 	ldw	r2,-28(fp)
  215d34:	1000030e 	bge	r2,zero,215d44 <open+0x84>
    {
      status = index;
  215d38:	e0bff917 	ldw	r2,-28(fp)
  215d3c:	e0bffa15 	stw	r2,-24(fp)
  215d40:	00002506 	br	215dd8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  215d44:	01400304 	movi	r5,12
  215d48:	e13ff917 	ldw	r4,-28(fp)
  215d4c:	02032780 	call	203278 <__mulsi3>
  215d50:	1007883a 	mov	r3,r2
  215d54:	00801074 	movhi	r2,65
  215d58:	10a23f04 	addi	r2,r2,-30468
  215d5c:	1885883a 	add	r2,r3,r2
  215d60:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  215d64:	e0fffe17 	ldw	r3,-8(fp)
  215d68:	00900034 	movhi	r2,16384
  215d6c:	10bfffc4 	addi	r2,r2,-1
  215d70:	1886703a 	and	r3,r3,r2
  215d74:	e0bffc17 	ldw	r2,-16(fp)
  215d78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  215d7c:	e0bffb17 	ldw	r2,-20(fp)
  215d80:	1000051e 	bne	r2,zero,215d98 <open+0xd8>
  215d84:	e13ffc17 	ldw	r4,-16(fp)
  215d88:	0215bd40 	call	215bd4 <alt_file_locked>
  215d8c:	e0bffa15 	stw	r2,-24(fp)
  215d90:	e0bffa17 	ldw	r2,-24(fp)
  215d94:	10001016 	blt	r2,zero,215dd8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  215d98:	e0bff817 	ldw	r2,-32(fp)
  215d9c:	10800317 	ldw	r2,12(r2)
  215da0:	10000826 	beq	r2,zero,215dc4 <open+0x104>
  215da4:	e0bff817 	ldw	r2,-32(fp)
  215da8:	10800317 	ldw	r2,12(r2)
  215dac:	e1ffff17 	ldw	r7,-4(fp)
  215db0:	e1bffe17 	ldw	r6,-8(fp)
  215db4:	e17ffd17 	ldw	r5,-12(fp)
  215db8:	e13ffc17 	ldw	r4,-16(fp)
  215dbc:	103ee83a 	callr	r2
  215dc0:	00000106 	br	215dc8 <open+0x108>
  215dc4:	0005883a 	mov	r2,zero
  215dc8:	e0bffa15 	stw	r2,-24(fp)
  215dcc:	00000206 	br	215dd8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  215dd0:	00bffb44 	movi	r2,-19
  215dd4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  215dd8:	e0bffa17 	ldw	r2,-24(fp)
  215ddc:	1000090e 	bge	r2,zero,215e04 <open+0x144>
  {
    alt_release_fd (index);  
  215de0:	e13ff917 	ldw	r4,-28(fp)
  215de4:	02113e00 	call	2113e0 <alt_release_fd>
    ALT_ERRNO = -status;
  215de8:	0215b980 	call	215b98 <alt_get_errno>
  215dec:	1007883a 	mov	r3,r2
  215df0:	e0bffa17 	ldw	r2,-24(fp)
  215df4:	0085c83a 	sub	r2,zero,r2
  215df8:	18800015 	stw	r2,0(r3)
    return -1;
  215dfc:	00bfffc4 	movi	r2,-1
  215e00:	00000106 	br	215e08 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  215e04:	e0bff917 	ldw	r2,-28(fp)
}
  215e08:	e037883a 	mov	sp,fp
  215e0c:	dfc00117 	ldw	ra,4(sp)
  215e10:	df000017 	ldw	fp,0(sp)
  215e14:	dec00204 	addi	sp,sp,8
  215e18:	f800283a 	ret

00215e1c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  215e1c:	defff204 	addi	sp,sp,-56
  215e20:	dfc00a15 	stw	ra,40(sp)
  215e24:	df000915 	stw	fp,36(sp)
  215e28:	df000904 	addi	fp,sp,36
  215e2c:	e13fff15 	stw	r4,-4(fp)
  215e30:	e1400215 	stw	r5,8(fp)
  215e34:	e1800315 	stw	r6,12(fp)
  215e38:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  215e3c:	e0800204 	addi	r2,fp,8
  215e40:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  215e44:	e0bfff17 	ldw	r2,-4(fp)
  215e48:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  215e4c:	00006f06 	br	21600c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  215e50:	e0bff807 	ldb	r2,-32(fp)
  215e54:	10800960 	cmpeqi	r2,r2,37
  215e58:	1000041e 	bne	r2,zero,215e6c <alt_printf+0x50>
        {
            alt_putchar(c);
  215e5c:	e0bff807 	ldb	r2,-32(fp)
  215e60:	1009883a 	mov	r4,r2
  215e64:	02160480 	call	216048 <alt_putchar>
  215e68:	00006806 	br	21600c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  215e6c:	e0bff717 	ldw	r2,-36(fp)
  215e70:	10c00044 	addi	r3,r2,1
  215e74:	e0fff715 	stw	r3,-36(fp)
  215e78:	10800003 	ldbu	r2,0(r2)
  215e7c:	e0bff805 	stb	r2,-32(fp)
  215e80:	e0bff807 	ldb	r2,-32(fp)
  215e84:	10006926 	beq	r2,zero,21602c <alt_printf+0x210>
            {
                if (c == '%')
  215e88:	e0bff807 	ldb	r2,-32(fp)
  215e8c:	10800958 	cmpnei	r2,r2,37
  215e90:	1000041e 	bne	r2,zero,215ea4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  215e94:	e0bff807 	ldb	r2,-32(fp)
  215e98:	1009883a 	mov	r4,r2
  215e9c:	02160480 	call	216048 <alt_putchar>
  215ea0:	00005a06 	br	21600c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  215ea4:	e0bff807 	ldb	r2,-32(fp)
  215ea8:	108018d8 	cmpnei	r2,r2,99
  215eac:	1000081e 	bne	r2,zero,215ed0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  215eb0:	e0bffe17 	ldw	r2,-8(fp)
  215eb4:	10c00104 	addi	r3,r2,4
  215eb8:	e0fffe15 	stw	r3,-8(fp)
  215ebc:	10800017 	ldw	r2,0(r2)
  215ec0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  215ec4:	e13ffd17 	ldw	r4,-12(fp)
  215ec8:	02160480 	call	216048 <alt_putchar>
  215ecc:	00004f06 	br	21600c <alt_printf+0x1f0>
                }
                else if (c == 'x')
  215ed0:	e0bff807 	ldb	r2,-32(fp)
  215ed4:	10801e18 	cmpnei	r2,r2,120
  215ed8:	1000341e 	bne	r2,zero,215fac <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  215edc:	e0bffe17 	ldw	r2,-8(fp)
  215ee0:	10c00104 	addi	r3,r2,4
  215ee4:	e0fffe15 	stw	r3,-8(fp)
  215ee8:	10800017 	ldw	r2,0(r2)
  215eec:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  215ef0:	e0bffb17 	ldw	r2,-20(fp)
  215ef4:	1000031e 	bne	r2,zero,215f04 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  215ef8:	01000c04 	movi	r4,48
  215efc:	02160480 	call	216048 <alt_putchar>
                        continue;
  215f00:	00004206 	br	21600c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  215f04:	00800704 	movi	r2,28
  215f08:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  215f0c:	00000306 	br	215f1c <alt_printf+0x100>
                        digit_shift -= 4;
  215f10:	e0bff917 	ldw	r2,-28(fp)
  215f14:	10bfff04 	addi	r2,r2,-4
  215f18:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  215f1c:	00c003c4 	movi	r3,15
  215f20:	e0bff917 	ldw	r2,-28(fp)
  215f24:	1884983a 	sll	r2,r3,r2
  215f28:	1007883a 	mov	r3,r2
  215f2c:	e0bffb17 	ldw	r2,-20(fp)
  215f30:	1884703a 	and	r2,r3,r2
  215f34:	103ff626 	beq	r2,zero,215f10 <_gp+0xffe042fc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  215f38:	00001906 	br	215fa0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  215f3c:	00c003c4 	movi	r3,15
  215f40:	e0bff917 	ldw	r2,-28(fp)
  215f44:	1884983a 	sll	r2,r3,r2
  215f48:	1007883a 	mov	r3,r2
  215f4c:	e0bffb17 	ldw	r2,-20(fp)
  215f50:	1886703a 	and	r3,r3,r2
  215f54:	e0bff917 	ldw	r2,-28(fp)
  215f58:	1884d83a 	srl	r2,r3,r2
  215f5c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  215f60:	e0bffc17 	ldw	r2,-16(fp)
  215f64:	108002a8 	cmpgeui	r2,r2,10
  215f68:	1000041e 	bne	r2,zero,215f7c <alt_printf+0x160>
                            c = '0' + digit;
  215f6c:	e0bffc17 	ldw	r2,-16(fp)
  215f70:	10800c04 	addi	r2,r2,48
  215f74:	e0bff805 	stb	r2,-32(fp)
  215f78:	00000306 	br	215f88 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  215f7c:	e0bffc17 	ldw	r2,-16(fp)
  215f80:	108015c4 	addi	r2,r2,87
  215f84:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  215f88:	e0bff807 	ldb	r2,-32(fp)
  215f8c:	1009883a 	mov	r4,r2
  215f90:	02160480 	call	216048 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  215f94:	e0bff917 	ldw	r2,-28(fp)
  215f98:	10bfff04 	addi	r2,r2,-4
  215f9c:	e0bff915 	stw	r2,-28(fp)
  215fa0:	e0bff917 	ldw	r2,-28(fp)
  215fa4:	103fe50e 	bge	r2,zero,215f3c <_gp+0xffe04328>
  215fa8:	00001806 	br	21600c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  215fac:	e0bff807 	ldb	r2,-32(fp)
  215fb0:	10801cd8 	cmpnei	r2,r2,115
  215fb4:	1000151e 	bne	r2,zero,21600c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  215fb8:	e0bffe17 	ldw	r2,-8(fp)
  215fbc:	10c00104 	addi	r3,r2,4
  215fc0:	e0fffe15 	stw	r3,-8(fp)
  215fc4:	10800017 	ldw	r2,0(r2)
  215fc8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  215fcc:	00000906 	br	215ff4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  215fd0:	e0bffa17 	ldw	r2,-24(fp)
  215fd4:	10c00044 	addi	r3,r2,1
  215fd8:	e0fffa15 	stw	r3,-24(fp)
  215fdc:	10800003 	ldbu	r2,0(r2)
  215fe0:	10803fcc 	andi	r2,r2,255
  215fe4:	1080201c 	xori	r2,r2,128
  215fe8:	10bfe004 	addi	r2,r2,-128
  215fec:	1009883a 	mov	r4,r2
  215ff0:	02160480 	call	216048 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  215ff4:	e0bffa17 	ldw	r2,-24(fp)
  215ff8:	10800003 	ldbu	r2,0(r2)
  215ffc:	10803fcc 	andi	r2,r2,255
  216000:	1080201c 	xori	r2,r2,128
  216004:	10bfe004 	addi	r2,r2,-128
  216008:	103ff11e 	bne	r2,zero,215fd0 <_gp+0xffe043bc>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  21600c:	e0bff717 	ldw	r2,-36(fp)
  216010:	10c00044 	addi	r3,r2,1
  216014:	e0fff715 	stw	r3,-36(fp)
  216018:	10800003 	ldbu	r2,0(r2)
  21601c:	e0bff805 	stb	r2,-32(fp)
  216020:	e0bff807 	ldb	r2,-32(fp)
  216024:	103f8a1e 	bne	r2,zero,215e50 <_gp+0xffe0423c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  216028:	00000106 	br	216030 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  21602c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  216030:	0001883a 	nop
  216034:	e037883a 	mov	sp,fp
  216038:	dfc00117 	ldw	ra,4(sp)
  21603c:	df000017 	ldw	fp,0(sp)
  216040:	dec00504 	addi	sp,sp,20
  216044:	f800283a 	ret

00216048 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  216048:	defffd04 	addi	sp,sp,-12
  21604c:	dfc00215 	stw	ra,8(sp)
  216050:	df000115 	stw	fp,4(sp)
  216054:	df000104 	addi	fp,sp,4
  216058:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  21605c:	d0a00517 	ldw	r2,-32748(gp)
  216060:	10800217 	ldw	r2,8(r2)
  216064:	100b883a 	mov	r5,r2
  216068:	e13fff17 	ldw	r4,-4(fp)
  21606c:	020af6c0 	call	20af6c <putc>
#endif
#endif
}
  216070:	e037883a 	mov	sp,fp
  216074:	dfc00117 	ldw	ra,4(sp)
  216078:	df000017 	ldw	fp,0(sp)
  21607c:	dec00204 	addi	sp,sp,8
  216080:	f800283a 	ret

00216084 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  216084:	deffff04 	addi	sp,sp,-4
  216088:	df000015 	stw	fp,0(sp)
  21608c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  216090:	000170fa 	wrctl	ienable,zero
}
  216094:	0001883a 	nop
  216098:	e037883a 	mov	sp,fp
  21609c:	df000017 	ldw	fp,0(sp)
  2160a0:	dec00104 	addi	sp,sp,4
  2160a4:	f800283a 	ret

002160a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  2160a8:	defffb04 	addi	sp,sp,-20
  2160ac:	dfc00415 	stw	ra,16(sp)
  2160b0:	df000315 	stw	fp,12(sp)
  2160b4:	df000304 	addi	fp,sp,12
  2160b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  2160bc:	d0a00a17 	ldw	r2,-32728(gp)
  2160c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2160c4:	00003106 	br	21618c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  2160c8:	e0bffd17 	ldw	r2,-12(fp)
  2160cc:	10800217 	ldw	r2,8(r2)
  2160d0:	1009883a 	mov	r4,r2
  2160d4:	0203f940 	call	203f94 <strlen>
  2160d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  2160dc:	e0bffd17 	ldw	r2,-12(fp)
  2160e0:	10c00217 	ldw	r3,8(r2)
  2160e4:	e0bffe17 	ldw	r2,-8(fp)
  2160e8:	10bfffc4 	addi	r2,r2,-1
  2160ec:	1885883a 	add	r2,r3,r2
  2160f0:	10800003 	ldbu	r2,0(r2)
  2160f4:	10803fcc 	andi	r2,r2,255
  2160f8:	1080201c 	xori	r2,r2,128
  2160fc:	10bfe004 	addi	r2,r2,-128
  216100:	10800bd8 	cmpnei	r2,r2,47
  216104:	1000031e 	bne	r2,zero,216114 <alt_find_file+0x6c>
    {
      len -= 1;
  216108:	e0bffe17 	ldw	r2,-8(fp)
  21610c:	10bfffc4 	addi	r2,r2,-1
  216110:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  216114:	e0bffe17 	ldw	r2,-8(fp)
  216118:	e0ffff17 	ldw	r3,-4(fp)
  21611c:	1885883a 	add	r2,r3,r2
  216120:	10800003 	ldbu	r2,0(r2)
  216124:	10803fcc 	andi	r2,r2,255
  216128:	1080201c 	xori	r2,r2,128
  21612c:	10bfe004 	addi	r2,r2,-128
  216130:	10800be0 	cmpeqi	r2,r2,47
  216134:	1000081e 	bne	r2,zero,216158 <alt_find_file+0xb0>
  216138:	e0bffe17 	ldw	r2,-8(fp)
  21613c:	e0ffff17 	ldw	r3,-4(fp)
  216140:	1885883a 	add	r2,r3,r2
  216144:	10800003 	ldbu	r2,0(r2)
  216148:	10803fcc 	andi	r2,r2,255
  21614c:	1080201c 	xori	r2,r2,128
  216150:	10bfe004 	addi	r2,r2,-128
  216154:	10000a1e 	bne	r2,zero,216180 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  216158:	e0bffd17 	ldw	r2,-12(fp)
  21615c:	10800217 	ldw	r2,8(r2)
  216160:	e0fffe17 	ldw	r3,-8(fp)
  216164:	180d883a 	mov	r6,r3
  216168:	e17fff17 	ldw	r5,-4(fp)
  21616c:	1009883a 	mov	r4,r2
  216170:	021635c0 	call	21635c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  216174:	1000021e 	bne	r2,zero,216180 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  216178:	e0bffd17 	ldw	r2,-12(fp)
  21617c:	00000706 	br	21619c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  216180:	e0bffd17 	ldw	r2,-12(fp)
  216184:	10800017 	ldw	r2,0(r2)
  216188:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  21618c:	e0fffd17 	ldw	r3,-12(fp)
  216190:	d0a00a04 	addi	r2,gp,-32728
  216194:	18bfcc1e 	bne	r3,r2,2160c8 <_gp+0xffe044b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  216198:	0005883a 	mov	r2,zero
}
  21619c:	e037883a 	mov	sp,fp
  2161a0:	dfc00117 	ldw	ra,4(sp)
  2161a4:	df000017 	ldw	fp,0(sp)
  2161a8:	dec00204 	addi	sp,sp,8
  2161ac:	f800283a 	ret

002161b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2161b0:	defffa04 	addi	sp,sp,-24
  2161b4:	dfc00515 	stw	ra,20(sp)
  2161b8:	df000415 	stw	fp,16(sp)
  2161bc:	dc000315 	stw	r16,12(sp)
  2161c0:	df000404 	addi	fp,sp,16
  2161c4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  2161c8:	00bffa04 	movi	r2,-24
  2161cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2161d0:	e03ffc15 	stw	zero,-16(fp)
  2161d4:	00001d06 	br	21624c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  2161d8:	04001074 	movhi	r16,65
  2161dc:	84223f04 	addi	r16,r16,-30468
  2161e0:	e0bffc17 	ldw	r2,-16(fp)
  2161e4:	01400304 	movi	r5,12
  2161e8:	1009883a 	mov	r4,r2
  2161ec:	02032780 	call	203278 <__mulsi3>
  2161f0:	8085883a 	add	r2,r16,r2
  2161f4:	10800017 	ldw	r2,0(r2)
  2161f8:	1000111e 	bne	r2,zero,216240 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  2161fc:	04001074 	movhi	r16,65
  216200:	84223f04 	addi	r16,r16,-30468
  216204:	e0bffc17 	ldw	r2,-16(fp)
  216208:	01400304 	movi	r5,12
  21620c:	1009883a 	mov	r4,r2
  216210:	02032780 	call	203278 <__mulsi3>
  216214:	8085883a 	add	r2,r16,r2
  216218:	e0fffe17 	ldw	r3,-8(fp)
  21621c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  216220:	d0e00e17 	ldw	r3,-32712(gp)
  216224:	e0bffc17 	ldw	r2,-16(fp)
  216228:	1880020e 	bge	r3,r2,216234 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  21622c:	e0bffc17 	ldw	r2,-16(fp)
  216230:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
  216234:	e0bffc17 	ldw	r2,-16(fp)
  216238:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  21623c:	00000606 	br	216258 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  216240:	e0bffc17 	ldw	r2,-16(fp)
  216244:	10800044 	addi	r2,r2,1
  216248:	e0bffc15 	stw	r2,-16(fp)
  21624c:	e0bffc17 	ldw	r2,-16(fp)
  216250:	10800810 	cmplti	r2,r2,32
  216254:	103fe01e 	bne	r2,zero,2161d8 <_gp+0xffe045c4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  216258:	e0bffd17 	ldw	r2,-12(fp)
}
  21625c:	e6ffff04 	addi	sp,fp,-4
  216260:	dfc00217 	ldw	ra,8(sp)
  216264:	df000117 	ldw	fp,4(sp)
  216268:	dc000017 	ldw	r16,0(sp)
  21626c:	dec00304 	addi	sp,sp,12
  216270:	f800283a 	ret

00216274 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  216274:	defffe04 	addi	sp,sp,-8
  216278:	df000115 	stw	fp,4(sp)
  21627c:	df000104 	addi	fp,sp,4
  216280:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  216284:	e0bfff17 	ldw	r2,-4(fp)
  216288:	10bffe84 	addi	r2,r2,-6
  21628c:	10c00428 	cmpgeui	r3,r2,16
  216290:	18001a1e 	bne	r3,zero,2162fc <alt_exception_cause_generated_bad_addr+0x88>
  216294:	100690ba 	slli	r3,r2,2
  216298:	00800874 	movhi	r2,33
  21629c:	1098ab04 	addi	r2,r2,25260
  2162a0:	1885883a 	add	r2,r3,r2
  2162a4:	10800017 	ldw	r2,0(r2)
  2162a8:	1000683a 	jmp	r2
  2162ac:	002162ec 	andhi	zero,zero,34187
  2162b0:	002162ec 	andhi	zero,zero,34187
  2162b4:	002162fc 	xorhi	zero,zero,34187
  2162b8:	002162fc 	xorhi	zero,zero,34187
  2162bc:	002162fc 	xorhi	zero,zero,34187
  2162c0:	002162ec 	andhi	zero,zero,34187
  2162c4:	002162f4 	movhi	zero,34187
  2162c8:	002162fc 	xorhi	zero,zero,34187
  2162cc:	002162ec 	andhi	zero,zero,34187
  2162d0:	002162ec 	andhi	zero,zero,34187
  2162d4:	002162fc 	xorhi	zero,zero,34187
  2162d8:	002162ec 	andhi	zero,zero,34187
  2162dc:	002162f4 	movhi	zero,34187
  2162e0:	002162fc 	xorhi	zero,zero,34187
  2162e4:	002162fc 	xorhi	zero,zero,34187
  2162e8:	002162ec 	andhi	zero,zero,34187
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  2162ec:	00800044 	movi	r2,1
  2162f0:	00000306 	br	216300 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  2162f4:	0005883a 	mov	r2,zero
  2162f8:	00000106 	br	216300 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  2162fc:	0005883a 	mov	r2,zero
  }
}
  216300:	e037883a 	mov	sp,fp
  216304:	df000017 	ldw	fp,0(sp)
  216308:	dec00104 	addi	sp,sp,4
  21630c:	f800283a 	ret

00216310 <atexit>:
  216310:	200b883a 	mov	r5,r4
  216314:	000f883a 	mov	r7,zero
  216318:	000d883a 	mov	r6,zero
  21631c:	0009883a 	mov	r4,zero
  216320:	02163d81 	jmpi	2163d8 <__register_exitproc>

00216324 <exit>:
  216324:	defffe04 	addi	sp,sp,-8
  216328:	000b883a 	mov	r5,zero
  21632c:	dc000015 	stw	r16,0(sp)
  216330:	dfc00115 	stw	ra,4(sp)
  216334:	2021883a 	mov	r16,r4
  216338:	02164f00 	call	2164f0 <__call_exitprocs>
  21633c:	00801074 	movhi	r2,65
  216340:	10a70904 	addi	r2,r2,-25564
  216344:	11000017 	ldw	r4,0(r2)
  216348:	20800f17 	ldw	r2,60(r4)
  21634c:	10000126 	beq	r2,zero,216354 <exit+0x30>
  216350:	103ee83a 	callr	r2
  216354:	8009883a 	mov	r4,r16
  216358:	02166700 	call	216670 <_exit>

0021635c <memcmp>:
  21635c:	01c000c4 	movi	r7,3
  216360:	3980192e 	bgeu	r7,r6,2163c8 <memcmp+0x6c>
  216364:	2144b03a 	or	r2,r4,r5
  216368:	11c4703a 	and	r2,r2,r7
  21636c:	10000f26 	beq	r2,zero,2163ac <memcmp+0x50>
  216370:	20800003 	ldbu	r2,0(r4)
  216374:	28c00003 	ldbu	r3,0(r5)
  216378:	10c0151e 	bne	r2,r3,2163d0 <memcmp+0x74>
  21637c:	31bfff84 	addi	r6,r6,-2
  216380:	01ffffc4 	movi	r7,-1
  216384:	00000406 	br	216398 <memcmp+0x3c>
  216388:	20800003 	ldbu	r2,0(r4)
  21638c:	28c00003 	ldbu	r3,0(r5)
  216390:	31bfffc4 	addi	r6,r6,-1
  216394:	10c00e1e 	bne	r2,r3,2163d0 <memcmp+0x74>
  216398:	21000044 	addi	r4,r4,1
  21639c:	29400044 	addi	r5,r5,1
  2163a0:	31fff91e 	bne	r6,r7,216388 <_gp+0xffe04774>
  2163a4:	0005883a 	mov	r2,zero
  2163a8:	f800283a 	ret
  2163ac:	20c00017 	ldw	r3,0(r4)
  2163b0:	28800017 	ldw	r2,0(r5)
  2163b4:	18bfee1e 	bne	r3,r2,216370 <_gp+0xffe0475c>
  2163b8:	31bfff04 	addi	r6,r6,-4
  2163bc:	21000104 	addi	r4,r4,4
  2163c0:	29400104 	addi	r5,r5,4
  2163c4:	39bff936 	bltu	r7,r6,2163ac <_gp+0xffe04798>
  2163c8:	303fe91e 	bne	r6,zero,216370 <_gp+0xffe0475c>
  2163cc:	003ff506 	br	2163a4 <_gp+0xffe04790>
  2163d0:	10c5c83a 	sub	r2,r2,r3
  2163d4:	f800283a 	ret

002163d8 <__register_exitproc>:
  2163d8:	defffa04 	addi	sp,sp,-24
  2163dc:	dc000315 	stw	r16,12(sp)
  2163e0:	04001074 	movhi	r16,65
  2163e4:	84270904 	addi	r16,r16,-25564
  2163e8:	80c00017 	ldw	r3,0(r16)
  2163ec:	dc400415 	stw	r17,16(sp)
  2163f0:	dfc00515 	stw	ra,20(sp)
  2163f4:	18805217 	ldw	r2,328(r3)
  2163f8:	2023883a 	mov	r17,r4
  2163fc:	10003726 	beq	r2,zero,2164dc <__register_exitproc+0x104>
  216400:	10c00117 	ldw	r3,4(r2)
  216404:	010007c4 	movi	r4,31
  216408:	20c00e16 	blt	r4,r3,216444 <__register_exitproc+0x6c>
  21640c:	1a000044 	addi	r8,r3,1
  216410:	8800221e 	bne	r17,zero,21649c <__register_exitproc+0xc4>
  216414:	18c00084 	addi	r3,r3,2
  216418:	18c7883a 	add	r3,r3,r3
  21641c:	18c7883a 	add	r3,r3,r3
  216420:	12000115 	stw	r8,4(r2)
  216424:	10c7883a 	add	r3,r2,r3
  216428:	19400015 	stw	r5,0(r3)
  21642c:	0005883a 	mov	r2,zero
  216430:	dfc00517 	ldw	ra,20(sp)
  216434:	dc400417 	ldw	r17,16(sp)
  216438:	dc000317 	ldw	r16,12(sp)
  21643c:	dec00604 	addi	sp,sp,24
  216440:	f800283a 	ret
  216444:	00800034 	movhi	r2,0
  216448:	10800004 	addi	r2,r2,0
  21644c:	10002626 	beq	r2,zero,2164e8 <__register_exitproc+0x110>
  216450:	01006404 	movi	r4,400
  216454:	d9400015 	stw	r5,0(sp)
  216458:	d9800115 	stw	r6,4(sp)
  21645c:	d9c00215 	stw	r7,8(sp)
  216460:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  216464:	d9400017 	ldw	r5,0(sp)
  216468:	d9800117 	ldw	r6,4(sp)
  21646c:	d9c00217 	ldw	r7,8(sp)
  216470:	10001d26 	beq	r2,zero,2164e8 <__register_exitproc+0x110>
  216474:	81000017 	ldw	r4,0(r16)
  216478:	10000115 	stw	zero,4(r2)
  21647c:	02000044 	movi	r8,1
  216480:	22405217 	ldw	r9,328(r4)
  216484:	0007883a 	mov	r3,zero
  216488:	12400015 	stw	r9,0(r2)
  21648c:	20805215 	stw	r2,328(r4)
  216490:	10006215 	stw	zero,392(r2)
  216494:	10006315 	stw	zero,396(r2)
  216498:	883fde26 	beq	r17,zero,216414 <_gp+0xffe04800>
  21649c:	18c9883a 	add	r4,r3,r3
  2164a0:	2109883a 	add	r4,r4,r4
  2164a4:	1109883a 	add	r4,r2,r4
  2164a8:	21802215 	stw	r6,136(r4)
  2164ac:	01800044 	movi	r6,1
  2164b0:	12406217 	ldw	r9,392(r2)
  2164b4:	30cc983a 	sll	r6,r6,r3
  2164b8:	4992b03a 	or	r9,r9,r6
  2164bc:	12406215 	stw	r9,392(r2)
  2164c0:	21c04215 	stw	r7,264(r4)
  2164c4:	01000084 	movi	r4,2
  2164c8:	893fd21e 	bne	r17,r4,216414 <_gp+0xffe04800>
  2164cc:	11006317 	ldw	r4,396(r2)
  2164d0:	218cb03a 	or	r6,r4,r6
  2164d4:	11806315 	stw	r6,396(r2)
  2164d8:	003fce06 	br	216414 <_gp+0xffe04800>
  2164dc:	18805304 	addi	r2,r3,332
  2164e0:	18805215 	stw	r2,328(r3)
  2164e4:	003fc606 	br	216400 <_gp+0xffe047ec>
  2164e8:	00bfffc4 	movi	r2,-1
  2164ec:	003fd006 	br	216430 <_gp+0xffe0481c>

002164f0 <__call_exitprocs>:
  2164f0:	defff504 	addi	sp,sp,-44
  2164f4:	df000915 	stw	fp,36(sp)
  2164f8:	dd400615 	stw	r21,24(sp)
  2164fc:	dc800315 	stw	r18,12(sp)
  216500:	dfc00a15 	stw	ra,40(sp)
  216504:	ddc00815 	stw	r23,32(sp)
  216508:	dd800715 	stw	r22,28(sp)
  21650c:	dd000515 	stw	r20,20(sp)
  216510:	dcc00415 	stw	r19,16(sp)
  216514:	dc400215 	stw	r17,8(sp)
  216518:	dc000115 	stw	r16,4(sp)
  21651c:	d9000015 	stw	r4,0(sp)
  216520:	2839883a 	mov	fp,r5
  216524:	04800044 	movi	r18,1
  216528:	057fffc4 	movi	r21,-1
  21652c:	00801074 	movhi	r2,65
  216530:	10a70904 	addi	r2,r2,-25564
  216534:	12000017 	ldw	r8,0(r2)
  216538:	45005217 	ldw	r20,328(r8)
  21653c:	44c05204 	addi	r19,r8,328
  216540:	a0001c26 	beq	r20,zero,2165b4 <__call_exitprocs+0xc4>
  216544:	a0800117 	ldw	r2,4(r20)
  216548:	15ffffc4 	addi	r23,r2,-1
  21654c:	b8000d16 	blt	r23,zero,216584 <__call_exitprocs+0x94>
  216550:	14000044 	addi	r16,r2,1
  216554:	8421883a 	add	r16,r16,r16
  216558:	8421883a 	add	r16,r16,r16
  21655c:	84402004 	addi	r17,r16,128
  216560:	a463883a 	add	r17,r20,r17
  216564:	a421883a 	add	r16,r20,r16
  216568:	e0001e26 	beq	fp,zero,2165e4 <__call_exitprocs+0xf4>
  21656c:	80804017 	ldw	r2,256(r16)
  216570:	e0801c26 	beq	fp,r2,2165e4 <__call_exitprocs+0xf4>
  216574:	bdffffc4 	addi	r23,r23,-1
  216578:	843fff04 	addi	r16,r16,-4
  21657c:	8c7fff04 	addi	r17,r17,-4
  216580:	bd7ff91e 	bne	r23,r21,216568 <_gp+0xffe04954>
  216584:	00800034 	movhi	r2,0
  216588:	10800004 	addi	r2,r2,0
  21658c:	10000926 	beq	r2,zero,2165b4 <__call_exitprocs+0xc4>
  216590:	a0800117 	ldw	r2,4(r20)
  216594:	1000301e 	bne	r2,zero,216658 <__call_exitprocs+0x168>
  216598:	a0800017 	ldw	r2,0(r20)
  21659c:	10003226 	beq	r2,zero,216668 <__call_exitprocs+0x178>
  2165a0:	a009883a 	mov	r4,r20
  2165a4:	98800015 	stw	r2,0(r19)
  2165a8:	00000000 	call	0 <__alt_mem_onchip_flash_0_data-0x200000>
  2165ac:	9d000017 	ldw	r20,0(r19)
  2165b0:	a03fe41e 	bne	r20,zero,216544 <_gp+0xffe04930>
  2165b4:	dfc00a17 	ldw	ra,40(sp)
  2165b8:	df000917 	ldw	fp,36(sp)
  2165bc:	ddc00817 	ldw	r23,32(sp)
  2165c0:	dd800717 	ldw	r22,28(sp)
  2165c4:	dd400617 	ldw	r21,24(sp)
  2165c8:	dd000517 	ldw	r20,20(sp)
  2165cc:	dcc00417 	ldw	r19,16(sp)
  2165d0:	dc800317 	ldw	r18,12(sp)
  2165d4:	dc400217 	ldw	r17,8(sp)
  2165d8:	dc000117 	ldw	r16,4(sp)
  2165dc:	dec00b04 	addi	sp,sp,44
  2165e0:	f800283a 	ret
  2165e4:	a0800117 	ldw	r2,4(r20)
  2165e8:	80c00017 	ldw	r3,0(r16)
  2165ec:	10bfffc4 	addi	r2,r2,-1
  2165f0:	15c01426 	beq	r2,r23,216644 <__call_exitprocs+0x154>
  2165f4:	80000015 	stw	zero,0(r16)
  2165f8:	183fde26 	beq	r3,zero,216574 <_gp+0xffe04960>
  2165fc:	95c8983a 	sll	r4,r18,r23
  216600:	a0806217 	ldw	r2,392(r20)
  216604:	a5800117 	ldw	r22,4(r20)
  216608:	2084703a 	and	r2,r4,r2
  21660c:	10000b26 	beq	r2,zero,21663c <__call_exitprocs+0x14c>
  216610:	a0806317 	ldw	r2,396(r20)
  216614:	2088703a 	and	r4,r4,r2
  216618:	20000c1e 	bne	r4,zero,21664c <__call_exitprocs+0x15c>
  21661c:	89400017 	ldw	r5,0(r17)
  216620:	d9000017 	ldw	r4,0(sp)
  216624:	183ee83a 	callr	r3
  216628:	a0800117 	ldw	r2,4(r20)
  21662c:	15bfbf1e 	bne	r2,r22,21652c <_gp+0xffe04918>
  216630:	98800017 	ldw	r2,0(r19)
  216634:	153fcf26 	beq	r2,r20,216574 <_gp+0xffe04960>
  216638:	003fbc06 	br	21652c <_gp+0xffe04918>
  21663c:	183ee83a 	callr	r3
  216640:	003ff906 	br	216628 <_gp+0xffe04a14>
  216644:	a5c00115 	stw	r23,4(r20)
  216648:	003feb06 	br	2165f8 <_gp+0xffe049e4>
  21664c:	89000017 	ldw	r4,0(r17)
  216650:	183ee83a 	callr	r3
  216654:	003ff406 	br	216628 <_gp+0xffe04a14>
  216658:	a0800017 	ldw	r2,0(r20)
  21665c:	a027883a 	mov	r19,r20
  216660:	1029883a 	mov	r20,r2
  216664:	003fb606 	br	216540 <_gp+0xffe0492c>
  216668:	0005883a 	mov	r2,zero
  21666c:	003ffb06 	br	21665c <_gp+0xffe04a48>

00216670 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  216670:	defffd04 	addi	sp,sp,-12
  216674:	df000215 	stw	fp,8(sp)
  216678:	df000204 	addi	fp,sp,8
  21667c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  216680:	0001883a 	nop
  216684:	e0bfff17 	ldw	r2,-4(fp)
  216688:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  21668c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  216690:	10000226 	beq	r2,zero,21669c <_exit+0x2c>
    ALT_SIM_FAIL();
  216694:	002af070 	cmpltui	zero,zero,43969
  216698:	00000106 	br	2166a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  21669c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  2166a0:	003fff06 	br	2166a0 <_gp+0xffe04a8c>
